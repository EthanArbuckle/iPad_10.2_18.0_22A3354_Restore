void sub_1D53FC04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D53FC0A8()
{
  return 0;
}

BOOL sub_1D53FC0B0(uint64_t a1, int a2)
{
  return a2 == 42;
}

id sub_1D53FC0BC(uint64_t a1)
{
  return *(id *)(a1 + 56);
}

void sub_1D53FC0C4(uint64_t a1)
{
  void *v2;
  void *v3;
  _BOOL4 v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;

  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)*MEMORY[0x1E0CBCA28];
  v11 = v2;
  v4 = sub_1D53FAE98(v2, (void *)*MEMORY[0x1E0CBCA28], CFSTR("ImageStabilization"));

  if (v4)
  {
    sub_1D53F63AC(a1);
    v12 = (id)objc_claimAutoreleasedReturnValue();
    v5 = sub_1D53FAF14(v12, v3, CFSTR("ImageStabilization"));

    sub_1D53F63AC(a1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v6;
    if ((_DWORD)v5 == 0x7FFF)
    {
      sub_1D53FAF90(v6, v3, CFSTR("ImageStabilization"));
    }
    else
    {
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v7, v5, v8, v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v13, v3, CFSTR("ImageStabilization"), v10);

    }
  }
}

void sub_1D53FC1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D53FC1FC(uint64_t a1)
{
  void *v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  BOOL v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  unsigned __int16 v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53FAF90(v2, (void *)*MEMORY[0x1E0CBD090], CFSTR("_SubfileType"));

  sub_1D53F63AC(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v3, v4, (uint64_t)CFSTR("{Temporary}"), v5, v6);

  sub_1D53F63AC(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)*MEMORY[0x1E0CBCB50];
  sub_1D53C3EE8(v7, (void *)*MEMORY[0x1E0CBCB50], CFSTR("CameraOwnerName"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = (void **)MEMORY[0x1E0CBCA28];
  v62 = v9;
  if (v9)
  {
    sub_1D53F63AC(a1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v11, *v10, (void *)*MEMORY[0x1E0CBCA68], v9);

  }
  sub_1D53F63AC(a1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53C3EE8(v12, v8, CFSTR("BodySerialNumber"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v61 = v13;
  if (v13)
  {
    sub_1D53F63AC(a1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v14, *v10, (void *)*MEMORY[0x1E0CBCAF0], v13);

  }
  sub_1D53F63AC(a1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53C3EE8(v15, v8, CFSTR("LensModel"));
  v63 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F63AC(a1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = *v10;
  v18 = (void *)*MEMORY[0x1E0CBCA58];
  sub_1D53C3EE8(v16, *v10, (void *)*MEMORY[0x1E0CBCA58]);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  v60 = v19;
  if (v19)
  {
    v20 = v19;
    goto LABEL_11;
  }
  if (v63)
  {
    v20 = v63;
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
    v20 = (id)objc_claimAutoreleasedReturnValue();
    if (!v20)
      goto LABEL_11;
  }
  sub_1D53F63AC(a1);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D52DFEFC(v21, v17, v18, v20);

LABEL_11:
  sub_1D53F63AC(a1);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v59 = v20;
  v23 = sub_1D53FAE98(v22, v17, v18);

  if (!v23)
  {
    sub_1D53F63AC(a1);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53FAF90(v24, v17, (void *)*MEMORY[0x1E0CBCA48]);

  }
  sub_1D53F63AC(a1);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53C3EE8(v25, v8, CFSTR("LensSerialNumber"));
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  if (v26)
  {
    sub_1D53F63AC(a1);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v27, v17, (void *)*MEMORY[0x1E0CBCA60], v26);

  }
  sub_1D53F63AC(a1);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53FAE18(v28, v8, CFSTR("LensSpecification"));
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  if (v29)
  {
    sub_1D53F63AC(a1);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v30, v17, (void *)*MEMORY[0x1E0CBCA50], v29);

  }
  sub_1D53F63AC(a1);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = (void *)*MEMORY[0x1E0CBCBC8];
  sub_1D53FAE18(v31, v8, (void *)*MEMORY[0x1E0CBCBC8]);
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F63AC(a1);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = sub_1D53FAF14(v34, v8, (void *)*MEMORY[0x1E0CBCC60]);

  sub_1D53F63AC(a1);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = sub_1D53FAF14(v36, v8, (void *)*MEMORY[0x1E0CBCC80]);

  sub_1D53F63AC(a1);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = sub_1D53FAF14(v38, v8, (void *)*MEMORY[0x1E0CBCC38]);

  sub_1D53F63AC(a1);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v41 = sub_1D53FAF14(v40, v8, (void *)*MEMORY[0x1E0CBCBC0]);

  v46 = objc_msgSend_count(v33, v42, v43, v44, v45);
  if (v46)
  {
    v64 = 0;
    LODWORD(v46) = sub_1D53FC89C(v33, (const char *)&v64, v47, v48, v49);
  }
  if (v35 <= 7u)
  {
    if (((1 << v35) & 0xB2) == 0)
    {
      v37 = v39;
      if (((1 << v35) & 0x44) == 0)
      {
        if (v35 != 3)
          goto LABEL_27;
        v37 = v41;
      }
    }
    if ((_DWORD)v46 == -1 && (_DWORD)v37)
    {
      sub_1D53FA1B8(a1, 1);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53FA234(v50, v32);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v52, v37, v53, v54, v59);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v51, v56, (uint64_t)v55, v57, v58);

    }
  }
LABEL_27:

}

void sub_1D53FC738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1D53FC89C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1D53BE148(a1, a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_shortValue(v5, v6, v7, v8, v9);

  return v10;
}

void sub_1D53FC8D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D53FC8E0(uint64_t result)
{
  uint64_t v1;

  if (!*(_BYTE *)(result + 192))
  {
    v1 = result;
    result = sub_1D53FBC20(result);
    *(_BYTE *)(v1 + 192) = 1;
  }
  return result;
}

void sub_1D53FC910(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v14;
  id v15;

  v15 = a7;
  if (v15)
    objc_storeStrong(a1 + 22, a7);
  if ((*((unsigned int (**)(id *, const __CFString *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*a1 + 17))(a1, CFSTR("IFD0/Exif/Makernote"), a2, a3, a4, a5, a6))
  {
    (*((void (**)(id *))*a1 + 16))(a1);
  }
  v14 = a1[22];
  a1[22] = 0;

}

void sub_1D53FC9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53FC9E0(uint64_t *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  void *v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  void *v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  void *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  void *v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  void *v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t *v182;
  BOOL v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int i;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  _DWORD *v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char *v200;
  int *v201;
  int v202;
  unsigned int v203;
  char *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  char *v211;
  unsigned int *v212;
  unsigned int v213;
  unsigned int v214;
  const char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  BOOL v223;
  unsigned int v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  void *v233;
  void *v234;
  uint64_t v235;
  void *v236;
  void *v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  uint64_t v242;
  void *v243;
  void *v244;
  unsigned int v245[2];
  __int128 v246;
  int v247;
  void *__p;
  char *v249;
  char *v250;
  __int128 v251;
  char *v252;
  unsigned int v253;
  int v254;
  unsigned int v255;

  v5 = a2;
  sub_1D53F642C((uint64_t)a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v7, (uint64_t)CFSTR("%@/%@"), v8, v9, v5, CFSTR("_BitsPerSample"));
  v10 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D52EAE5C(v6, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v236 = v14;
  if (v14)
  {
    if (!objc_msgSend_count(v14, v15, v16, v17, v18)
      || (*(_QWORD *)&v251 = 0, sub_1D53BD2F0(v14, (const char *)&v251, v19, v20, v21) != 8))
    {
      *a3 = 0;
      a3[1] = 0;
      goto LABEL_97;
    }
  }
  *a3 = 0;
  a3[1] = 0;
  v235 = (uint64_t)a3;
  sub_1D53F642C((uint64_t)a1);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = (void *)*MEMORY[0x1E0CBD0C0];
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v24, (uint64_t)CFSTR("%@/%@"), v25, v26, v5, *MEMORY[0x1E0CBD0C0]);
  v27 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v22, v27, v28, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  v255 = 1;
  if (v31)
    goto LABEL_6;
  sub_1D53F642C((uint64_t)a1);
  v237 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = (void *)MEMORY[0x1E0CB3940];
  v37 = v23;
  objc_msgSend_stringWithFormat_(v36, v38, (uint64_t)CFSTR("IFD0/%@"), v39, v40, v37);
  v41 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v237, v41, v42, v43, v44);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  if (v31)
  {
LABEL_6:
    v45 = objc_msgSend_intValue(v31, v32, v33, v34, v35);
    if ((v45 - 9) < 0xFFFFFFF8)
      v46 = 1;
    else
      v46 = v45;
    v255 = v46;
    v47 = v31;
  }
  else
  {
    v47 = 0;
  }
  v238 = v47;
  sub_1D53F642C((uint64_t)a1);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v49, (uint64_t)CFSTR("%@/%@"), v50, v51, v5, CFSTR("_ImageWidth"));
  v52 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v48, v52, v53, v54, v55);
  v241 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F642C((uint64_t)a1);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v57, (uint64_t)CFSTR("%@/%@"), v58, v59, v5, CFSTR("_ImageLength"));
  v60 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v56, v60, v61, v62, v63);
  v239 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F642C((uint64_t)a1);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v65, (uint64_t)CFSTR("%@/%@"), v66, v67, v5, *MEMORY[0x1E0CBD078]);
  v68 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v64, v68, v69, v70, v71);
  v72 = (void *)objc_claimAutoreleasedReturnValue();

  v240 = v72;
  if (v72)
    v77 = objc_msgSend_intValue(v72, v73, v74, v75, v76);
  else
    v77 = 0;
  sub_1D53F642C((uint64_t)a1);
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v79, (uint64_t)CFSTR("%@/%@"), v80, v81, v5, CFSTR("_StripOffsets"));
  v82 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D52EAE5C(v78, v82, v83, v84, v85);
  v86 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F642C((uint64_t)a1);
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v88, (uint64_t)CFSTR("%@/%@"), v89, v90, v5, CFSTR("_StripByteCounts"));
  v91 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D52EAE5C(v87, v91, v92, v93, v94);
  v95 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F642C((uint64_t)a1);
  v96 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v97, (uint64_t)CFSTR("%@/%@"), v98, v99, v5, CFSTR("_StripOffsets"));
  v100 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v96, v100, v101, v102, v103);
  v242 = objc_claimAutoreleasedReturnValue();

  sub_1D53F642C((uint64_t)a1);
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v105, (uint64_t)CFSTR("%@/%@"), v106, v107, v5, CFSTR("_StripByteCounts"));
  v108 = (char *)objc_claimAutoreleasedReturnValue();
  v109 = (void *)v242;
  sub_1D529EA84(v104, v108, v110, v111, v112);
  v244 = (void *)objc_claimAutoreleasedReturnValue();

  if (v86 && !v242)
  {
    *(_QWORD *)&v251 = 0;
    sub_1D53BE148(v86, (const char *)&v251, v114, v115, v116);
    v109 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v243 = v109;
  if (v95 && !v244)
  {
    *(_QWORD *)&v251 = 0;
    sub_1D53BE148(v95, (const char *)&v251, v114, v115, v116);
    v244 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v117 = objc_msgSend_count(v86, v113, v114, v115, v116);
  v122 = objc_msgSend_count(v95, v118, v119, v120, v121);
  v254 = objc_msgSend_intValue(v109, v123, v124, v125, v126);
  LODWORD(v251) = objc_msgSend_intValue(v244, v127, v128, v129, v130);
  sub_1D5285A24(&v253, (unsigned int *)&v251);
  if (v241 && v239 && v72 && v117 && v122 && v117 == v122)
  {
    sub_1D53F642C((uint64_t)a1);
    v131 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v132, (uint64_t)CFSTR("%@/%@"), v133, v134, v5, CFSTR("_PlanarConfiguration"));
    v135 = (char *)objc_claimAutoreleasedReturnValue();
    sub_1D529EA84(v131, v135, v136, v137, v138);
    v234 = (void *)objc_claimAutoreleasedReturnValue();

    sub_1D53F642C((uint64_t)a1);
    v139 = (void *)objc_claimAutoreleasedReturnValue();
    v140 = v72;
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v141, (uint64_t)CFSTR("%@/%@"), v142, v143, v5, *MEMORY[0x1E0CBD0C8]);
    v144 = (char *)objc_claimAutoreleasedReturnValue();
    sub_1D529EA84(v139, v144, v145, v146, v147);
    v233 = (void *)objc_claimAutoreleasedReturnValue();

    if ((v77 & 0xFFFFFFFE) != 6 || v117 != 1)
    {
      v183 = v77 == 1;
      v14 = v236;
      v153 = v233;
      v152 = v234;
      if (v183
        && (!v234 || objc_msgSend_intValue(v234, v148, v149, v150, v151) == 1)
        && (!v233 || objc_msgSend_intValue(v233, v148, v149, v150, v151) == 2))
      {
        v251 = 0uLL;
        v252 = 0;
        __p = 0;
        v249 = 0;
        v250 = 0;
        LODWORD(v246) = 0;
        sub_1D5285A24(&v247, (unsigned int *)&v246);
        v187 = 0;
        for (i = 0; i < v117; v187 = ++i)
        {
          *(_QWORD *)&v246 = v187;
          v189 = sub_1D53BD2F0(v86, (const char *)&v246, v184, v185, v186);
          v254 = v189;
          *(_QWORD *)&v246 = v187;
          v245[0] = sub_1D53BD2F0(v95, (const char *)&v246, v190, v191, v192);
          sub_1D52859B8(&v253, v245);
          v193 = (char *)*((_QWORD *)&v251 + 1);
          if (*((_QWORD *)&v251 + 1) >= (unint64_t)v252)
          {
            v195 = (char *)v251;
            v196 = (uint64_t)(*((_QWORD *)&v251 + 1) - v251) >> 2;
            v197 = v196 + 1;
            if ((unint64_t)(v196 + 1) >> 62)
              sub_1D5282B8C();
            v198 = (uint64_t)&v252[-v251];
            if ((uint64_t)&v252[-v251] >> 1 > v197)
              v197 = v198 >> 1;
            if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFFCLL)
              v199 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v199 = v197;
            if (v199)
            {
              v200 = (char *)sub_1D5282BA0((uint64_t)&v252, v199);
              v193 = (char *)*((_QWORD *)&v251 + 1);
              v195 = (char *)v251;
            }
            else
            {
              v200 = 0;
            }
            v201 = (int *)&v200[4 * v196];
            *v201 = v189;
            v194 = v201 + 1;
            while (v193 != v195)
            {
              v202 = *((_DWORD *)v193 - 1);
              v193 -= 4;
              *--v201 = v202;
            }
            *(_QWORD *)&v251 = v201;
            *((_QWORD *)&v251 + 1) = v194;
            v252 = &v200[4 * v199];
            if (v195)
              operator delete(v195);
          }
          else
          {
            **((_DWORD **)&v251 + 1) = v189;
            v194 = v193 + 4;
          }
          *((_QWORD *)&v251 + 1) = v194;
          v203 = v253;
          v204 = v249;
          if (v249 >= v250)
          {
            v206 = (char *)__p;
            v207 = (v249 - (_BYTE *)__p) >> 2;
            v208 = v207 + 1;
            if ((unint64_t)(v207 + 1) >> 62)
              sub_1D5282B8C();
            v209 = v250 - (_BYTE *)__p;
            if ((v250 - (_BYTE *)__p) >> 1 > v208)
              v208 = v209 >> 1;
            if ((unint64_t)v209 >= 0x7FFFFFFFFFFFFFFCLL)
              v210 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v210 = v208;
            if (v210)
            {
              v211 = (char *)sub_1D5282BA0((uint64_t)&v250, v210);
              v206 = (char *)__p;
              v204 = v249;
            }
            else
            {
              v211 = 0;
            }
            v212 = (unsigned int *)&v211[4 * v207];
            *v212 = v203;
            v205 = (char *)(v212 + 1);
            while (v204 != v206)
            {
              v213 = *((_DWORD *)v204 - 1);
              v204 -= 4;
              *--v212 = v213;
            }
            __p = v212;
            v249 = v205;
            v250 = &v211[4 * v210];
            if (v206)
              operator delete(v206);
          }
          else
          {
            *(_DWORD *)v249 = v253;
            v205 = v204 + 4;
          }
          v249 = v205;
          sub_1D52B0860(&v247, &v253);
        }
        if (*((_QWORD *)&v251 + 1) == (_QWORD)v251)
          sub_1D528EAE0();
        v214 = *(_DWORD *)v251;
        v14 = v236;
        v153 = v233;
        v152 = v234;
        sub_1D53AE248((uint64_t)a1, &v246);
        v245[0] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v246 + 16))(v246);
        v219 = *sub_1D52B4588(v245, &v247);
        v220 = (std::__shared_weak_count *)*((_QWORD *)&v246 + 1);
        if (*((_QWORD *)&v246 + 1))
        {
          v221 = (unint64_t *)(*((_QWORD *)&v246 + 1) + 8);
          do
            v222 = __ldaxr(v221);
          while (__stlxr(v222 - 1, v221));
          if (!v222)
          {
            ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
            std::__shared_weak_count::__release_weak(v220);
          }
        }
        v223 = v214 > v219;
        v140 = v240;
        if (!v223)
        {
          v224 = objc_msgSend_intValue(v241, v215, v216, v217, v218);
          v229 = objc_msgSend_intValue(v239, v225, v226, v227, v228);
          v245[0] = v224;
          v245[1] = v229;
          sub_1D52B45F8((uint64_t)v245, &v255, &v246);
          sub_1D5292548(v235, &v246);
          v230 = (std::__shared_weak_count *)*((_QWORD *)&v246 + 1);
          if (*((_QWORD *)&v246 + 1))
          {
            v231 = (unint64_t *)(*((_QWORD *)&v246 + 1) + 8);
            do
              v232 = __ldaxr(v231);
            while (__stlxr(v232 - 1, v231));
            if (!v232)
            {
              ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
              std::__shared_weak_count::__release_weak(v230);
            }
          }
        }
        if (__p)
        {
          v249 = (char *)__p;
          operator delete(__p);
        }
        if ((_QWORD)v251)
        {
          *((_QWORD *)&v251 + 1) = v251;
          operator delete((void *)v251);
        }
      }
      goto LABEL_96;
    }
    v14 = v236;
    v153 = v233;
    v152 = v234;
    sub_1D5282F74((int *)&__p, &v254);
    sub_1D53F4C74(a1, (int *)&__p, &v253, v255, &v251);
    sub_1D5292548(v235, &v251);
    v154 = (std::__shared_weak_count *)*((_QWORD *)&v251 + 1);
    if (*((_QWORD *)&v251 + 1))
    {
      v155 = (unint64_t *)(*((_QWORD *)&v251 + 1) + 8);
      do
        v156 = __ldaxr(v155);
      while (__stlxr(v156 - 1, v155));
      goto LABEL_36;
    }
  }
  else
  {
    sub_1D53F642C((uint64_t)a1);
    v157 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v158, (uint64_t)CFSTR("%@/%@"), v159, v160, v5, CFSTR("_JPEGInterchangeFormat"));
    v161 = (char *)objc_claimAutoreleasedReturnValue();
    sub_1D529EA84(v157, v161, v162, v163, v164);
    v165 = (void *)objc_claimAutoreleasedReturnValue();

    sub_1D53F642C((uint64_t)a1);
    v166 = (void *)objc_claimAutoreleasedReturnValue();
    v140 = v240;
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v167, (uint64_t)CFSTR("%@/%@"), v168, v169, v5, CFSTR("_JPEGInterchangeFormatLength"));
    v170 = (char *)objc_claimAutoreleasedReturnValue();
    v152 = v165;
    sub_1D529EA84(v166, v170, v171, v172, v173);
    v153 = (void *)objc_claimAutoreleasedReturnValue();

    if (v165)
    {
      v14 = v236;
      if (v153)
      {
        LODWORD(__p) = objc_msgSend_intValue(v165, v174, v175, v176, v177);
        v245[0] = objc_msgSend_intValue(v153, v178, v179, v180, v181);
        sub_1D5285A24(&v246, v245);
        sub_1D53F4C74(a1, (int *)&__p, (unsigned int *)&v246, v255, &v251);
        sub_1D5292548(v235, &v251);
        v154 = (std::__shared_weak_count *)*((_QWORD *)&v251 + 1);
        if (*((_QWORD *)&v251 + 1))
        {
          v182 = (unint64_t *)(*((_QWORD *)&v251 + 1) + 8);
          do
            v156 = __ldaxr(v182);
          while (__stlxr(v156 - 1, v182));
LABEL_36:
          if (!v156)
          {
            ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
            std::__shared_weak_count::__release_weak(v154);
          }
        }
      }
    }
    else
    {
      v14 = v236;
    }
  }
LABEL_96:

LABEL_97:
}

void sub_1D53FD488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v34;

  if (__p)
    operator delete(__p);
  v34 = *(void **)(v32 - 128);
  if (v34)
  {
    *(_QWORD *)(v32 - 120) = v34;
    operator delete(v34);
  }

  sub_1D5282EB4(a16);
  _Unwind_Resume(a1);
}

void sub_1D53FD760(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28[3];

  memset(v28, 0, sizeof(v28));
  sub_1D53FC9E0(a1, CFSTR("IFD0"), &v27);
  sub_1D53FC9E0(a1, CFSTR("IFD1"), &v26);
  sub_1D53FC9E0(a1, CFSTR("IFD0/SubIFD0"), &v25);
  sub_1D53FC9E0(a1, CFSTR("IFD0/SubIFD1"), &v24);
  sub_1D53FC9E0(a1, CFSTR("IFD0/SubIFD2"), &v23);
  v6 = v27;
  if ((_QWORD)v27)
  {
    v7 = *(_DWORD *)(v27 + 16);
    if (v7)
    {
      if (!(_QWORD)v26 || *(_DWORD *)(v26 + 16) || (*(_DWORD *)(v26 + 16) = v7, (v7 = *(_DWORD *)(v6 + 16)) != 0))
      {
        if (!(_QWORD)v25 || *(_DWORD *)(v25 + 16) || (*(_DWORD *)(v25 + 16) = v7, (v7 = *(_DWORD *)(v6 + 16)) != 0))
        {
          if (!(_QWORD)v24 || *(_DWORD *)(v24 + 16) || (*(_DWORD *)(v24 + 16) = v7, (v7 = *(_DWORD *)(v6 + 16)) != 0))
          {
            if ((_QWORD)v23 && !*(_DWORD *)(v23 + 16))
              *(_DWORD *)(v23 + 16) = v7;
          }
        }
      }
    }
    sub_1D52B0A7C(v28, &v27);
  }
  if ((_QWORD)v26)
    sub_1D52B0A7C(v28, &v26);
  if ((_QWORD)v25)
    sub_1D52B0A7C(v28, &v25);
  if ((_QWORD)v24)
    sub_1D52B0A7C(v28, &v24);
  if ((_QWORD)v23)
    sub_1D52B0A7C(v28, &v23);
  sub_1D53F51D8((uint64_t)v28, a2, a3);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  *(_QWORD *)&v27 = v28;
  sub_1D5282E44((void ***)&v27);
}

void sub_1D53FDA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void **a18)
{
  uint64_t v18;

  sub_1D5282EB4((uint64_t)&a12);
  sub_1D5282EB4((uint64_t)&a14);
  sub_1D5282EB4((uint64_t)&a16);
  sub_1D5282EB4((uint64_t)&a18);
  a18 = (void **)(v18 - 56);
  sub_1D5282E44(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53FDA78(uint64_t a1)
{
  void *v2;
  void *v3;
  _BOOL4 v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)*MEMORY[0x1E0CBCB10];
  v4 = sub_1D53FAE98(v2, CFSTR("{PictStyleSetting}"), (void *)*MEMORY[0x1E0CBCB10]);

  if (v4)
  {
    sub_1D53F63AC(a1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = sub_1D53FAF14(v5, CFSTR("{PictStyleSetting}"), v3);
  }
  else
  {
    sub_1D53FDB60(a1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = sub_1D5297D80(v7, v3);

    if (!v8)
      return 0xFFFFFFFFLL;
    sub_1D53FDB60(a1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = sub_1D5297AC0(v5, (const char *)v3, v9, v10, v11);
  }
  v12 = v6;

  return v12;
}

void sub_1D53FDB44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D53FDB60(uint64_t a1)
{
  void *v1;
  id v2;
  void *v3;

  v1 = *(void **)(a1 + 176);
  if (v1)
  {
    v2 = v1;
  }
  else
  {
    sub_1D53F63AC(a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D5297C60(v3, (void *)*MEMORY[0x1E0CBCB50], 0);
    v2 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v2;
}

void sub_1D53FDBBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D53FDBCC()
{
  return 0;
}

id sub_1D53FDBD4(uint64_t a1)
{
  void *v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  void *v28;
  uint64_t v29;
  uint64_t v31;

  sub_1D53F63AC(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53FAE18(v1, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCA50]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2 && objc_msgSend_count(v2, v3, v4, v5, v6) == 4)
  {
    v31 = 0;
    v10 = sub_1D53BD334(v2, (const char *)&v31, v7, v8, v9);
    v31 = 1;
    v14 = sub_1D53BD334(v2, (const char *)&v31, v11, v12, v13);
    v31 = 2;
    v18 = sub_1D53BD334(v2, (const char *)&v31, v15, v16, v17);
    v31 = 3;
    v25 = sub_1D53BD334(v2, (const char *)&v31, v19, v20, v21);
    v26 = vabdd_f64(v14, v10);
    if (v18 <= 0.0 || v25 <= 0.0)
    {
      if (v26 < 0.01)
      {
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v22, (uint64_t)CFSTR("%.1f mm"), v23, v24, *(_QWORD *)&v10);
        v29 = objc_claimAutoreleasedReturnValue();
LABEL_17:
        v28 = (void *)v29;
        goto LABEL_18;
      }
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v22, (uint64_t)CFSTR("%.1f-%.1f mm"), v23, v24, *(_QWORD *)&v10, *(_QWORD *)&v14);
    }
    else
    {
      v27 = vabdd_f64(v18, v25);
      if (v26 >= 0.01)
      {
        if (v27 >= 0.01)
        {
          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v22, (uint64_t)CFSTR("%.1f-%.1f mm f/%.1f-%.1f"), v23, v24, *(_QWORD *)&v10, *(_QWORD *)&v14, *(_QWORD *)&v18, *(_QWORD *)&v25);
          v29 = objc_claimAutoreleasedReturnValue();
          goto LABEL_17;
        }
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v22, (uint64_t)CFSTR("%.1f-%.1f mm f/%.1f"), v23, v24, *(_QWORD *)&v10, *(_QWORD *)&v14, *(_QWORD *)&v18);
      }
      else if (v27 >= 0.01)
      {
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v22, (uint64_t)CFSTR("%.1f mm f/%.1f-%.1f"), v23, v24, *(_QWORD *)&v10, *(_QWORD *)&v18, *(_QWORD *)&v25);
      }
      else
      {
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v22, (uint64_t)CFSTR("%.1f mm f/%.1f"), v23, v24, *(_QWORD *)&v10, *(_QWORD *)&v18);
      }
    }
    v29 = objc_claimAutoreleasedReturnValue();
    goto LABEL_17;
  }
  v28 = 0;
LABEL_18:

  return v28;
}

void sub_1D53FDD90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53FDDC4(char *a1, _OWORD *a2, char a3)
{
  void *__p[3];

  sub_1D53FEB9C(__p, 1uLL, a2);
  sub_1D53FDE38(a1, (uint64_t)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1D53FDE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_1D53FDE38(char *result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0 || *((_QWORD *)result + 9) == *((_QWORD *)result + 10))
  {
    result += 72;
    if (result != (char *)a2)
      return sub_1D53FEC1C(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
  }
  return result;
}

uint64_t sub_1D53FDE6C(uint64_t result, _QWORD *a2, char a3)
{
  if ((a3 & 1) != 0 || !*(_DWORD *)(result + 64) || !*(_DWORD *)(result + 68))
    *(_QWORD *)(result + 64) = *a2;
  return result;
}

uint64_t sub_1D53FDE90(_QWORD *a1, unint64_t a2, unint64_t a3, char a4)
{
  unint64_t v4;
  unint64_t v5;
  char *v7;
  void **v8;
  uint64_t result;
  int v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  BOOL v21;
  __int128 v22;

  v4 = a3;
  v5 = a2;
  v8 = (void **)(a1 + 12);
  v7 = (char *)a1[12];
  if ((a4 & 1) == 0 && v7 != (char *)a1[13])
    return 0;
  a1[13] = v7;
  if (!(a2 | a3))
    return 1;
  v10 = 0;
  v11 = a1 + 14;
  do
  {
    if ((v5 & 1) != 0)
    {
      if ((unint64_t)v7 >= *v11)
      {
        v13 = (char *)*v8;
        v14 = (v7 - (_BYTE *)*v8) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          sub_1D5282B8C();
        v16 = *v11 - (_QWORD)v13;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)sub_1D5282BA0((uint64_t)(a1 + 14), v17);
          v13 = (char *)a1[12];
          v7 = (char *)a1[13];
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[4 * v14];
        *(_DWORD *)v19 = v10;
        v12 = v19 + 4;
        while (v7 != v13)
        {
          v20 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        a1[12] = v19;
        a1[13] = v12;
        a1[14] = &v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_DWORD *)v7 = v10;
        v12 = v7 + 4;
      }
      a1[13] = v12;
      v7 = v12;
    }
    ++v10;
    result = 1;
    v21 = v5 <= 1;
    *((_QWORD *)&v22 + 1) = v4;
    *(_QWORD *)&v22 = v5;
    v5 = v22 >> 1;
    v4 >>= 1;
  }
  while (!v21);
  return result;
}

uint64_t sub_1D53FDFE0(_QWORD *a1, unint64_t a2, unint64_t a3, char a4)
{
  unint64_t v4;
  unint64_t v5;
  char *v7;
  void **v8;
  uint64_t result;
  int v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  BOOL v21;
  __int128 v22;

  v4 = a3;
  v5 = a2;
  v8 = (void **)(a1 + 15);
  v7 = (char *)a1[15];
  if ((a4 & 1) == 0 && v7 != (char *)a1[16])
    return 0;
  a1[16] = v7;
  if (!(a2 | a3))
    return 1;
  v10 = 0;
  v11 = a1 + 17;
  do
  {
    if ((v5 & 1) != 0)
    {
      if ((unint64_t)v7 >= *v11)
      {
        v13 = (char *)*v8;
        v14 = (v7 - (_BYTE *)*v8) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          sub_1D5282B8C();
        v16 = *v11 - (_QWORD)v13;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)sub_1D5282BA0((uint64_t)(a1 + 17), v17);
          v13 = (char *)a1[15];
          v7 = (char *)a1[16];
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[4 * v14];
        *(_DWORD *)v19 = v10;
        v12 = v19 + 4;
        while (v7 != v13)
        {
          v20 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        a1[15] = v19;
        a1[16] = v12;
        a1[17] = &v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_DWORD *)v7 = v10;
        v12 = v7 + 4;
      }
      a1[16] = v12;
      v7 = v12;
    }
    ++v10;
    result = 1;
    v21 = v5 <= 1;
    *((_QWORD *)&v22 + 1) = v4;
    *(_QWORD *)&v22 = v5;
    v5 = v22 >> 1;
    v4 >>= 1;
  }
  while (!v21);
  return result;
}

void sub_1D53FE130(const void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void (**v9)(_QWORD);
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *exception;
  void (***v18)(_QWORD);
  std::__shared_weak_count *v19;
  uint8_t buf[24];
  __int128 v21;
  _QWORD v22[5];

  v5 = a2;
  v6 = a3;
  sub_1D52EAFEC();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if ((unint64_t)a1 + 1 >= 2 && os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v8, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)a1, "ReadRawTiffPropsFromSession", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = sub_1D53FE6C8;
  v22[3] = &unk_1E996F870;
  v22[4] = a1;
  v9 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v22);
  v10 = (void *)MEMORY[0x1D8272058]();
  sub_1D52843FC(a1, &v21);
  LODWORD(v18) = 0;
  sub_1D52B1CC8((uint64_t)buf, (uint64_t *)&v21, &v18);
  sub_1D53F4544((uint64_t *)&v21, v5, v6, 0, &v18);
  if (!v18)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  (**v18)(v18);
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  sub_1D52B1D54((uint64_t)buf);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  objc_autoreleasePoolPop(v10);
  v9[2](v9);

}

void sub_1D53FE334(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_1D52B1D54((uint64_t)va);
  sub_1D5282EB4((uint64_t)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53FE284);
}

void sub_1D53FE398()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(v0 + 16))(v0);
  JUMPOUT(0x1D53FE3A8);
}

void ReadMakerNoteProps(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9;
  NSObject *v10;
  NSObject *v11;
  void (**v12)(_QWORD);
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[24];
  _QWORD v27[5];

  v9 = a2;
  sub_1D52EAFEC();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if ((unint64_t)a1 + 1 >= 2 && os_signpost_enabled(v10))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v11, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)a1, "ReadMakerNoteProps", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = sub_1D53FE644;
  v27[3] = &unk_1E996F870;
  v27[4] = a1;
  v12 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v27);
  v13 = (void *)MEMORY[0x1D8272058]();
  if (a1 && v9)
  {
    sub_1D52843FC(a1, buf);
    sub_1D53F4544((uint64_t *)buf, v9, 0, 1, &v24);
    if (v24)
    {
      sub_1D5297C60(v9, CFSTR("__ExifProperties"), 0);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (v17)
        objc_msgSend_removeObjectForKey_(v9, v14, (uint64_t)CFSTR("__ExifProperties"), v15, v16);
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, void *))(*(_QWORD *)v24 + 8))(v24, a3, 0, a4, a5, 0, v17);

    }
    v18 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  objc_autoreleasePoolPop(v13);
  v12[2](v12);

}

void sub_1D53FE5D0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1D5282EB4((uint64_t)&a9);
  sub_1D5282EB4((uint64_t)&a11);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53FE554);
}

void sub_1D53FE610(_Unwind_Exception *a1)
{
  void *v1;
  void (**v2)(_QWORD);

  v2[2](v2);

  _Unwind_Resume(a1);
}

void sub_1D53FE644(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EAFEC();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ReadMakerNoteProps", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D53FE6C8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EAFEC();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ReadRawTiffPropsFromSession", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D53FE74C(os_signpost_id_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void (**v9)(_QWORD);
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *exception;
  void (***v18)(_QWORD);
  std::__shared_weak_count *v19;
  uint8_t buf[24];
  __int128 v21;
  _QWORD v22[5];

  v5 = a2;
  v6 = a3;
  sub_1D52EAFEC();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (a1 + 1 >= 2 && os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v8, OS_SIGNPOST_INTERVAL_BEGIN, a1, "ReadRawTiffPropsFromPath", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = sub_1D53FE9E0;
  v22[3] = &unk_1E996F870;
  v22[4] = a1;
  v9 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v22);
  v10 = (void *)MEMORY[0x1D8272058]();
  sub_1D5284368(a1, 0, &v21);
  LODWORD(v18) = 0;
  sub_1D52B1CC8((uint64_t)buf, (uint64_t *)&v21, &v18);
  sub_1D53F4544((uint64_t *)&v21, v5, v6, 0, &v18);
  if (!v18)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  (**v18)(v18);
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  sub_1D52B1D54((uint64_t)buf);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  objc_autoreleasePoolPop(v10);
  v9[2](v9);

}

void sub_1D53FE954(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_1D52B1D54((uint64_t)va);
  sub_1D5282EB4((uint64_t)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53FE8A4);
}

void sub_1D53FE9B8()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(v0 + 16))(v0);
  JUMPOUT(0x1D53FE9C8);
}

void sub_1D53FE9E0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EAFEC();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "ReadRawTiffPropsFromPath", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

uint64_t sub_1D53FEA64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 193);
}

void sub_1D53FEA70(uint64_t a1)
{
  sub_1D53FED24(a1);
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D53FEA94(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D52853B0(a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1D53FEAE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D53FEB04(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D53378D0(a1, a2);
    v4 = (char *)a1[1];
    v5 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1D53FEB80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D53FEB9C(_QWORD *a1, unint64_t a2, _OWORD *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D52842F4(a1, a2);
    v6 = (_OWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 16 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1D53FEC00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1D53FEC1C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      sub_1D5282B8C();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1D52842F4(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t sub_1D53FED24(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = off_1E999FA50;

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v4);
  }

  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  *(_QWORD *)a1 = &unk_1E999CCA8;
  sub_1D5282EB4(a1 + 8);
  return a1;
}

void sub_1D53FEDCC(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE0uLL);
  sub_1D53FEE44(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1D5285658((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1D53FEE30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53FEE44(_QWORD *a1, uint64_t *a2, void **a3, void **a4)
{
  a1[2] = 0;
  *a1 = &unk_1E999FB78;
  a1[1] = 0;
  sub_1D53FEEF0((uint64_t)(a1 + 3), a2, *a3, *a4);
  return a1;
}

void sub_1D53FEE84(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53FEE98(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E999FB78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53FEEAC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E999FB78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53FEEE0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

uint64_t sub_1D53FEEF0(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v7 = a3;
  v8 = a4;
  sub_1D53F5320(a1, a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)a1 = off_1E999FA50;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  v9 = v8;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = v9;
  v10 = v7;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = v10;
  *(_DWORD *)(a1 + 191) = 0;
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v11, v12, v13, v14);
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v15;

  return a1;
}

void sub_1D53FEFCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id *v4;
  void **v5;
  void **v6;
  void *v8;

  v8 = *(void **)(v1 + 120);
  if (v8)
  {
    *(_QWORD *)(v1 + 128) = v8;
    operator delete(v8);
  }
  sub_1D5444D28(v6, v5, v4, (_QWORD *)v1);

  _Unwind_Resume(a1);
}

_QWORD *sub_1D53FF02C(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D5282CE8(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1D53FF084(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D53FF0A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  id v19;
  id v20;

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], a2, a8, a4, a5);
  v19 = (id)objc_claimAutoreleasedReturnValue();
  sub_1D53F642C(a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v10, v11, (uint64_t)v19, (uint64_t)CFSTR("JPEGImage/Offset"), v12);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v13, a7, v14, v15);
  v20 = (id)objc_claimAutoreleasedReturnValue();
  sub_1D53F642C(a1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v16, v17, (uint64_t)v20, (uint64_t)CFSTR("JPEGImage/Length"), v18);

}

void sub_1D53FF150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D53FF180(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  id v19;
  id v20;

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], a2, a8, a4, a5);
  v19 = (id)objc_claimAutoreleasedReturnValue();
  sub_1D53F642C(a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v10, v11, (uint64_t)v19, (uint64_t)CFSTR("JPEGThumbnail/Offset"), v12);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v13, a7, v14, v15);
  v20 = (id)objc_claimAutoreleasedReturnValue();
  sub_1D53F642C(a1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v16, v17, (uint64_t)v20, (uint64_t)CFSTR("JPEGThumbnail/Length"), v18);

}

void sub_1D53FF230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D53FF260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  uint64_t v10;
  size_t v11;
  size_t v12;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _OWORD v25[4];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  memset(v25, 0, sizeof(v25));
  v10 = sub_1D53F5F40(a1, (uint64_t)v25, 64, 0, a8);
  if (v10)
  {
    *((_BYTE *)v25 + v10) = 0;
    v11 = strlen((const char *)v25);
    if (v11 <= 0x27)
    {
      v12 = v11;
      sub_1D53F63AC(a1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6410(a2);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v15, (uint64_t)v25, v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v13, v14, (void *)*MEMORY[0x1E0CBD0B0], v18);

      if (v12 + strlen((const char *)v25 + v12 + 1) - 62 >= 0xFFFFFFFFFFFFFFC0)
      {
        sub_1D53F63AC(a1);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6410(a2);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v21, (uint64_t)v25 + v12 + 1, v22, v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D52DFEFC(v19, v20, (void *)*MEMORY[0x1E0CBD0B8], v24);

      }
    }
  }
}

void sub_1D53FF3F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D53FF43C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8)
{
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;

  if (a7 <= 0x1FF)
  {
    sub_1D53F6410(a2);
    v43 = (id)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend_length(v43, v12, v13, v14, v15))
    {
LABEL_8:

      return;
    }
    sub_1D53F6390(a2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_msgSend_length(v16, v17, v18, v19, v20);

    if (a7 && v21)
    {
      sub_1D53F6490(a1, 0, a8, a7, 1);
      v43 = (id)objc_claimAutoreleasedReturnValue();
      if (sub_1D53F4BF8(v43, CFSTR("Firmware Version "), 0))
      {
        v26 = objc_msgSend_length(CFSTR("Firmware Version "), v22, v23, v24, v25);
        v31 = objc_msgSend_length(v43, v27, v28, v29, v30);
        v36 = objc_msgSend_length(CFSTR("Firmware Version "), v32, v33, v34, v35);
        objc_msgSend_substringWithRange_(v43, v37, v26, v31 - v36, v38);
        v39 = objc_claimAutoreleasedReturnValue();

        v43 = (id)v39;
      }
      sub_1D53F63AC(a1);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6410(a2);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6390(a2);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v40, v41, v42, v43);

      goto LABEL_8;
    }
  }
}

void sub_1D53FF5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D53FF5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned int v10;
  unsigned __int16 v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;

  if (a3)
  {
    v10 = bswap32(*(unsigned __int16 *)(a3 + 4)) >> 16;
    if (a9)
      v11 = v10;
    else
      v11 = *(_WORD *)(a3 + 4);
    sub_1D53F63AC(a1);
    v18 = (id)objc_claimAutoreleasedReturnValue();
    sub_1D53F6410(a2);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6390(a2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v14, v11, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v18, v12, v13, v17);

  }
}

void sub_1D53FF6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1D53FF6FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9)
{
  void *v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unsigned int v29;
  float v30;
  BOOL v31;
  float v32;
  float v33;
  float v34;
  float v35;
  double v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  __int16 v44;
  double v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  float v56;
  float v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  float v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  double v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  double v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  double v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  id v91;

  sub_1D53FA1B8(a1, 1);
  v91 = (id)objc_claimAutoreleasedReturnValue();
  sub_1D53F63AC(a1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D52E1FDC(v11, (void *)*MEMORY[0x1E0CBCA28], 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D54028A4(a1, a8, a9);
  v13 = sub_1D5402974(a1, a8 + 4, a9);
  if (v13 == 268)
    v14 = 1000;
  else
    v14 = (int)(exp2((float)((float)v13 * 0.03125)) * 50.0 * 0.0625);
  sub_1D53FA234(v91, (void *)*MEMORY[0x1E0CBCBC8]);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v16, v14, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v15, v20, (uint64_t)v19, v21, v22);

  v23 = sub_1D5402974(a1, a8 + 14, a9);
  sub_1D53F63AC(a1);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v25, v23, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D52DFEFC(v24, (void *)*MEMORY[0x1E0CBC898], (void *)*MEMORY[0x1E0CBC8C0], v28);

  sub_1D5402974(a1, a8 + 6, a9);
  v29 = sub_1D5402974(a1, a8 + 8, a9);
  v30 = exp2((float)((float)((float)v29 * 0.03125) * 0.5));
  v31 = v30 <= 10.0;
  v32 = roundf(v30 * 10.0);
  v33 = roundf(v30);
  if (v31)
    v34 = v32 / 10.0;
  else
    v34 = v33;
  v35 = log2f(v34);
  *(float *)&v36 = roundf((float)((float)(int)sub_1D5402A4C(a1, a8 + 12, a9) * 0.03125) * 6.0) / 6.0;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v37, v38, v39, v40, v36);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v91, v42, (uint64_t)v41, *MEMORY[0x1E0CBCB60], v43);

  v44 = sub_1D5402974(a1, a8 + 28, a9);
  if ((v44 & 0xFFF0) == 0x3000)
    *(_WORD *)(a1 + 206) = v44 & 0xF;
  *(float *)&v45 = roundf((float)((float)(__int16)sub_1D5402974(a1, a8 + 30, a9) * 0.03125) * 6.0) / 6.0;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v46, v47, v48, v49, v45);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v12, v51, (uint64_t)v50, *MEMORY[0x1E0CBCA38], v52);

  sub_1D5402974(a1, a8 + 32, a9);
  sub_1D54028A4(a1, a8 + 34, a9);
  sub_1D5402974(a1, a8 + 38, a9);
  sub_1D5402974(a1, a8 + 40, a9);
  v53 = sub_1D5402A4C(a1, a8 + 44, a9);
  v54 = sub_1D5402A4C(a1, a8 + 48, a9);
  v55 = v54;
  v56 = v35 + v35;
  v57 = sub_1D5401158(v54, v53);
  *(float *)&v62 = log2f(v57);
  if (v55)
  {
    v57 = (float)v55 / 10.0;
    *(float *)&v62 = log2f(v57);
  }
  v63 = -*(float *)&v62;
  *(float *)&v62 = v56;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v58, v59, v60, v61, v62);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v91, v65, (uint64_t)v64, *MEMORY[0x1E0CBCA20], v66);

  *(float *)&v67 = v34;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v68, v69, v70, v71, v67);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v91, v73, (uint64_t)v72, *MEMORY[0x1E0CBCB80], v74);

  *(float *)&v75 = v63;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v76, v77, v78, v79, v75);
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v91, v81, (uint64_t)v80, *MEMORY[0x1E0CBCC70], v82);

  *(float *)&v83 = v57;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v84, v85, v86, v87, v83);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v91, v89, (uint64_t)v88, *MEMORY[0x1E0CBCB78], v90);

  sub_1D5402A4C(a1, a8 + 46, a9);
  sub_1D5402A4C(a1, a8 + 48, a9);

}

void sub_1D53FFB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D53FFC4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  unsigned int v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48;
  void *v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  __int16 v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  __int16 v117;
  __int16 v118;
  double v119;
  double v120;
  double v121;
  double v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  const char *v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  const char *v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  const char *v142;
  uint64_t v143;
  unsigned int v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int v153;
  void *v154;
  void *v155;
  id v156;

  sub_1D53FA1B8(a1, 1);
  v156 = (id)objc_claimAutoreleasedReturnValue();
  sub_1D53F63AC(a1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D52E1FDC(v11, (void *)*MEMORY[0x1E0CBCA28], 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v155 = v12;
  sub_1D53F63AC(a1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D52E1FDC(v13, (void *)*MEMORY[0x1E0CBC898], 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v154 = v14;
  sub_1D5402974(a1, a8, a9);
  sub_1D5402974(a1, a8 + 2, a9);
  sub_1D5402974(a1, a8 + 4, a9);
  sub_1D5402974(a1, a8 + 6, a9);
  v15 = sub_1D5402974(a1, a8 + 8, a9);
  if (v15)
  {
    if (v15 != 2)
      goto LABEL_5;
    LOWORD(v15) = 1;
  }
  objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v16, (__int16)v15, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v156, v20, (uint64_t)v19, *MEMORY[0x1E0CBCB88], v21);

LABEL_5:
  v22 = sub_1D5402974(a1, a8 + 10, a9);
  objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v23, v22, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v14, v27, (uint64_t)v26, *MEMORY[0x1E0CBC890], v28);

  sub_1D5402974(a1, a8 + 12, a9);
  v29 = sub_1D5402974(a1, a8 + 14, a9);
  objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v30, (__int16)v29, v31, v32);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v14, v34, (uint64_t)v33, *MEMORY[0x1E0CBC8A0], v35);

  v39 = (uint64_t *)MEMORY[0x1E0CBCFA8];
  if (v29 < 7)
  {
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v36, dword_1D545AA3C[(__int16)v29], v37, v38);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v12, v41, (uint64_t)v40, *v39, v42);

  }
  v43 = sub_1D5402974(a1, a8 + 22, a9);
  v44 = sub_1D5402A4C(a1, a8 + 26, a9);
  v45 = sub_1D5402A4C(a1, a8 + 28, a9);
  v46 = sub_1D5402A4C(a1, a8 + 30, a9);
  HIDWORD(v151) = sub_1D5402A4C(a1, a8 + 84, a9);
  v47 = sub_1D54049C8(a1, v43);
  sub_1D5404B30(a1, v43);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v151) = v47;
  sub_1D53F63AC(a1);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D52E1FDC(v49, CFSTR("{PictStyleSetting}"), 0);
  v50 = (void *)objc_claimAutoreleasedReturnValue();

  if (v48)
    objc_msgSend_setObject_forKeyedSubscript_(v50, v51, (uint64_t)v48, (uint64_t)CFSTR("PictureStyle"), v53);
  objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v51, v46, v52, v53, v151);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v50, v55, (uint64_t)v54, *MEMORY[0x1E0CBCC68], v56);

  objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v57, v44, v58, v59);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v50, v61, (uint64_t)v60, *MEMORY[0x1E0CBCB28], v62);

  objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v63, v45, v64, v65);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v50, v67, (uint64_t)v66, *MEMORY[0x1E0CBCC40], v68);

  objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v69, v153, v70, v71);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v50, v73, (uint64_t)v72, (uint64_t)CFSTR("ColorTone"), v74);

  objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v75, v152, v76, v77);
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v50, v79, (uint64_t)v78, (uint64_t)CFSTR("Monochrome"), v80);

  v81 = sub_1D5402974(a1, a8 + 38, a9);
  v85 = 1;
  switch(v81)
  {
    case 12288:
      goto LABEL_14;
    case 12290:
      goto LABEL_12;
    case 12291:
      v85 = 2;
      goto LABEL_12;
    case 12292:
      v85 = 4;
LABEL_12:
      sub_1D54011CC((char *)a1, 2, v85, 0);
      break;
    default:
      break;
  }
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v82, 1, v83, v84);
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v155, v87, (uint64_t)v86, *MEMORY[0x1E0CBCFA8], v88);

LABEL_14:
  v90 = sub_1D5402974(a1, a8 + 34, a9);
  if ((v90 - 1) >= 5)
  {
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v89, v90, v91, v92);
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v154, v96, (uint64_t)v93, *MEMORY[0x1E0CBC8B0], v97);
  }
  else
  {
    objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v89, word_1D545AA58[(__int16)(v90 - 1)], v91, v92);
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v156, v94, (uint64_t)v93, *MEMORY[0x1E0CBCC08], v95);
  }

  v99 = sub_1D5402974(a1, a8 + 40, a9);
  if ((v99 - 1) >= 5)
  {
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v98, v99, v100, v101);
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v154, v105, (uint64_t)v102, *MEMORY[0x1E0CBC8B8], v106);
  }
  else
  {
    objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v98, word_1D545AA62[(__int16)(v99 - 1)], v100, v101);
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v156, v103, (uint64_t)v102, *MEMORY[0x1E0CBCB70], v104);
  }

  v107 = sub_1D5402974(a1, a8 + 44, a9);
  v108 = sub_1D5402974(a1, a8 + 46, a9);
  v109 = sub_1D5402974(a1, a8 + 48, a9);
  v110 = sub_1D5402974(a1, a8 + 50, a9);
  sub_1D53F9304(a1, (float)((float)v109 / (float)v110), (float)((float)v108 / (float)v110), 0.0, 0.0);
  if (v110 >= 2)
    *(_WORD *)(a1 + 204) = v110;
  if ((unsigned __int16)(v107 - 1) <= 0xFFFDu)
  {
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v111, v107, v112, v113);
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v155, v115, (uint64_t)v114, *MEMORY[0x1E0CBCA48], v116);

  }
  v117 = sub_1D5402974(a1, a8 + 52, a9);
  v118 = sub_1D5402974(a1, a8 + 54, a9);
  v119 = sub_1D54052C8(a1, v117);
  v120 = exp2(v119 * 0.5);
  v121 = sub_1D54052C8(a1, v118);
  v122 = exp2(v121 * 0.5);
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v123, v124, v125, v126, v120);
  v127 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v156, v128, (uint64_t)v127, *MEMORY[0x1E0CBCC00], v129);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v130, v131, v132, v133, v120);
  v134 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v154, v135, (uint64_t)v134, (uint64_t)CFSTR("MaxAperture"), v136);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v137, v138, v139, v140, v122);
  v141 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v154, v142, (uint64_t)v141, (uint64_t)CFSTR("MinAperture"), v143);

  v144 = sub_1D5402974(a1, a8 + 68, a9);
  if (v144 >= 4)
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v145, 3, v146, v147);
  else
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v145, dword_1D545AAA0[(__int16)v144], v146, v147);
  v148 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v155, v149, (uint64_t)v148, (uint64_t)CFSTR("ImageStabilization"), v150);

}

void sub_1D5400488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D54005E0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9)
{
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unsigned int v35;
  int i;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  void *__p;
  char *v43;
  char *v44;
  uint64_t v45;

  v41 = sub_1D5405050((uint64_t)a1);
  v11 = sub_1D5402974((uint64_t)a1, a8, a9);
  sub_1D5402974((uint64_t)a1, a8 + 2, a9);
  LODWORD(v45) = sub_1D5402974((uint64_t)a1, a8 + 8, a9);
  HIDWORD(v45) = sub_1D5402974((uint64_t)a1, a8 + 10, a9);
  v12 = sub_1D5402974((uint64_t)a1, a8 + 12, a9);
  v13 = sub_1D5402974((uint64_t)a1, a8 + 14, a9);
  if ((unsigned __int16)((unsigned __int16)(v11 - 65) >> 6) >= 0x3FFu)
  {
    v14 = v13;
    v15 = 0;
    __p = 0;
    v43 = 0;
    v44 = 0;
    v40 = v11;
    v16 = v11;
    do
    {
      v17 = sub_1D5402A4C((uint64_t)a1, a8 + 2 * ((int)v15 + 8), a9);
      v18 = sub_1D5402A4C((uint64_t)a1, a8 + 2 * ((int)v15 + 8 + (int)v16), a9);
      if (v41)
        v19 = -v18;
      else
        v19 = v18;
      v20 = v43;
      if (v43 >= v44)
      {
        v22 = (char *)__p;
        v23 = (v43 - (_BYTE *)__p) >> 4;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 60)
          sub_1D5282B8C();
        v25 = v44 - (_BYTE *)__p;
        if ((v44 - (_BYTE *)__p) >> 3 > v24)
          v24 = v25 >> 3;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0)
          v26 = 0xFFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          v27 = (char *)sub_1D5284334((uint64_t)&v44, v26);
          v22 = (char *)__p;
          v20 = v43;
        }
        else
        {
          v27 = 0;
        }
        v28 = &v27[16 * v23];
        *(_DWORD *)v28 = v17;
        *((_DWORD *)v28 + 1) = v19;
        *((_DWORD *)v28 + 2) = v12;
        *((_DWORD *)v28 + 3) = v14;
        v29 = v28;
        if (v20 != v22)
        {
          do
          {
            *((_OWORD *)v29 - 1) = *((_OWORD *)v20 - 1);
            v29 -= 16;
            v20 -= 16;
          }
          while (v20 != v22);
          v22 = (char *)__p;
        }
        v21 = v28 + 16;
        __p = v29;
        v43 = v28 + 16;
        v44 = &v27[16 * v26];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_DWORD *)v43 = v17;
        *((_DWORD *)v20 + 1) = v19;
        v21 = v20 + 16;
        *((_DWORD *)v20 + 2) = v12;
        *((_DWORD *)v20 + 3) = v14;
      }
      v43 = v21;
      ++v15;
    }
    while (v15 != v16);
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = a8 + 2 * ((2 * (_WORD)v40 + 8) & 0xFFFE);
    do
    {
      v35 = sub_1D5402BFC((uint64_t)a1, v34 + (int)v31);
      for (i = 0; i != 8; ++i)
      {
        v37 = 1 << (v30 + i);
        if (((v30 + (_BYTE)i) & 0x40) != 0)
          v38 = 1 << (v30 + i);
        else
          v38 = 0;
        if (((v30 + (_BYTE)i) & 0x40) != 0)
          v37 = 0;
        if (((v35 >> i) & 1) != 0)
          v39 = v37;
        else
          v39 = 0;
        if (((v35 >> i) & 1) == 0)
          v38 = 0;
        v33 |= v38;
        v32 |= v39;
      }
      ++v31;
      v30 += 8;
    }
    while (v31 != ((v40 - 1) >> 3) + 1);
    sub_1D53FDFE0(a1, v32, v33, 1);
    sub_1D53FDE38(a1, (uint64_t)&__p, 1);
    sub_1D53FDE6C((uint64_t)a1, &v45, 1);
    if (__p)
    {
      v43 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_1D54008E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D5400908(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8, unsigned __int8 a9)
{
  void *v11;
  void *v12;
  void *v13;
  id v14;

  if ((a5 & 1) == 0)
    a7 = sub_1D54028A4(a1, a8, a9);
  *(_DWORD *)(a1 + 200) = a7;
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%010ld"), a4, a5, a7);
  v14 = (id)objc_claimAutoreleasedReturnValue();
  sub_1D53F63AC(a1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F6410((uint64_t)a2);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F6390((uint64_t)a2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D52DFEFC(v11, v12, v13, v14);

}

void sub_1D54009CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v11;

  _Unwind_Resume(a1);
}

void sub_1D5400A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9)
{
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  tm v19;
  time_t v20;

  v20 = sub_1D54028A4(a1, a8, a9);
  sub_1D54028A4(a1, a8 + 4, a9);
  sub_1D54028A4(a1, a8 + 8, a9);
  memset(&v19, 0, sizeof(v19));
  gmtime_r(&v20, &v19);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v12, (uint64_t)CFSTR("%.2d:%.2d:%.2d %.2d:%.2d:%.2d"), v13, v14, (v19.tm_year + 1900), (v19.tm_mon + 1), v19.tm_mday, v19.tm_hour, v19.tm_min, v19.tm_sec);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F63AC(a1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F6410(a2);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F6390(a2);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D52DFEFC(v16, v17, v18, v15);

}

void sub_1D5400B28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v2;

  _Unwind_Resume(a1);
}

void sub_1D5400B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9)
{
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;

  sub_1D54028A4(a1, a8, a9);
  sub_1D54028A4(a1, a8 + 4, a9);
  sub_1D5402B24(a1, a8 + 8, a9);
  sub_1D54028A4(a1, a8 + 12, a9);
  sub_1D54028A4(a1, a8 + 16, a9);
  sub_1D54028A4(a1, a8 + 20, a9);
  sub_1D54028A4(a1, a8 + 24, a9);
  v11 = sub_1D54028A4(a1, a8 + 12, a9);
  if (v11 == 90)
    v15 = 6;
  else
    v15 = 0;
  if (v11 == 180)
    v15 = 3;
  if (v11 == 270)
    v16 = 8;
  else
    v16 = v15;
  if ((_DWORD)v16)
  {
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v12, v16, v13, v14);
    v24 = (id)objc_claimAutoreleasedReturnValue();
    sub_1D53F63AC(a1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v17, v18, (uint64_t)v24, *MEMORY[0x1E0CBCFF0], v19);

    sub_1D53F63AC(a1);
    v25 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v20, v16, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v25, (void *)*MEMORY[0x1E0CBD090], (void *)*MEMORY[0x1E0CBD0C0], v23);

  }
}

void sub_1D5400D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D5400D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, int a8, unsigned __int8 a9)
{
  double v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;

  if ((a5 & 1) == 0)
    a7 = sub_1D54028A4(a1, a8, a9);
  sub_1D53F63AC(a1);
  v17 = (id)objc_claimAutoreleasedReturnValue();
  LODWORD(v11) = a7;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v12, v13, v14, v15, v11);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D52DFEFC(v17, (void *)*MEMORY[0x1E0CBC898], (void *)*MEMORY[0x1E0CBC8A8], v16);

}

void sub_1D5400DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D5400DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, int a8, unsigned __int8 a9)
{
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;

  if ((a5 & 1) == 0)
    a7 = sub_1D54028A4(a1, a8, a9);
  *(_DWORD *)(a1 + 196) = a7;
  if (a7)
  {
    sub_1D53F6410(a2);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_length(v27, v11, v12, v13, v14))
    {
      sub_1D53F6390(a2);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend_length(v15, v16, v17, v18, v19);

      if (!v20)
        return;
      sub_1D53F63AC(a1);
      v27 = (id)objc_claimAutoreleasedReturnValue();
      sub_1D53F6410(a2);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6390(a2);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v23, *(unsigned int *)(a1 + 196), v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v27, v21, v22, v26);

    }
  }
}

void sub_1D5400EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v10;

  _Unwind_Resume(a1);
}

BOOL sub_1D5400F38(_BYTE *a1, unint64_t a2)
{
  return a2 >= 0xE
      && *a1 == 73
      && a1[1] == 73
      && a1[2] == 26
      && !a1[3]
      && !a1[4]
      && !a1[5]
      && a1[6] == 72
      && a1[7] == 69
      && a1[8] == 65
      && a1[9] == 80
      && a1[10] == 67
      && a1[11] == 67
      && a1[12] == 68
      && a1[13] == 82;
}

BOOL sub_1D5400FE8(uint64_t *a1)
{
  _BOOL8 v2;
  uint64_t v4[3];
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  LODWORD(v5[0]) = 0;
  sub_1D5285164(v4, a1, (uint64_t)v5, 0);
  memset(v5, 0, 14);
  v2 = (*(unsigned int (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, v5, 14) == 14
    && sub_1D5400F38(v5, 0xEuLL);
  sub_1D5285200(v4);
  return v2;
}

void sub_1D540109C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5285200(&a9);
  _Unwind_Resume(a1);
}

void sub_1D54010C8(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v7;
  id v8;
  id v9;

  v9 = a2;
  v8 = a3;
  sub_1D5402CA8(a1, &v9, &v8, &v7);
  *a4 = v7;

}

void sub_1D540113C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

float sub_1D5401158(uint64_t a1, int a2)
{
  float result;
  uint64_t v3;
  __int16 *v4;
  uint64_t i;
  int v6;
  unsigned int v7;
  int v8;

  result = 30.0;
  if (a2 >= -160)
  {
    if (a2 <= 384)
    {
      v3 = 0;
      v4 = &word_1D545A7F4;
      for (i = 1; i != 62; ++i)
      {
        v6 = *v4;
        v4 += 4;
        v7 = a2 - v6;
        if (a2 - v6 < 0)
          v7 = -v7;
        v8 = a2 - word_1D545A7EC[4 * v3];
        if (v8 < 0)
          v8 = word_1D545A7EC[4 * v3] - a2;
        if (v7 < v8)
          v3 = i;
      }
      return *(float *)&word_1D545A7EC[4 * v3 + 2];
    }
    else
    {
      return 0.00025;
    }
  }
  return result;
}

void sub_1D54011CC(char *a1, char a2, unint64_t a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void *__p;
  char *v31;
  unint64_t v32;

  v32 = 0;
  v8 = (char *)sub_1D5284334((uint64_t)&v32, 1uLL);
  v10 = (unint64_t)&v8[16 * v9];
  *(_OWORD *)v8 = xmmword_1D545AA70;
  v11 = v8 + 16;
  __p = v8;
  v32 = v10;
  v31 = v8 + 16;
  if ((unint64_t)(v8 + 16) >= v10)
  {
    v13 = (char *)__p;
    v14 = (v11 - (_BYTE *)__p) >> 4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60)
      sub_1D5282B8C();
    v16 = v10 - (_QWORD)__p;
    if (v16 >> 3 > v15)
      v15 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      v18 = (char *)sub_1D5284334((uint64_t)&v32, v17);
      v13 = (char *)__p;
      v11 = v31;
    }
    else
    {
      v18 = 0;
    }
    v19 = &v18[16 * v14];
    v10 = (unint64_t)&v18[16 * v17];
    *(_OWORD *)v19 = xmmword_1D545AA80;
    v12 = v19 + 16;
    if (v11 != v13)
    {
      do
      {
        *((_OWORD *)v19 - 1) = *((_OWORD *)v11 - 1);
        v19 -= 16;
        v11 -= 16;
      }
      while (v11 != v13);
      v13 = (char *)__p;
    }
    __p = v19;
    v31 = v12;
    v32 = v10;
    if (v13)
    {
      operator delete(v13);
      v10 = v32;
    }
  }
  else
  {
    *((_OWORD *)v8 + 1) = xmmword_1D545AA80;
    v12 = v8 + 32;
  }
  v31 = v12;
  if ((unint64_t)v12 >= v10)
  {
    v21 = (char *)__p;
    v22 = (v12 - (_BYTE *)__p) >> 4;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 60)
      sub_1D5282B8C();
    v24 = v10 - (_QWORD)__p;
    if (v24 >> 3 > v23)
      v23 = v24 >> 3;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
      v25 = 0xFFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      v26 = (char *)sub_1D5284334((uint64_t)&v32, v25);
      v21 = (char *)__p;
      v12 = v31;
    }
    else
    {
      v26 = 0;
    }
    v27 = &v26[16 * v22];
    v28 = &v26[16 * v25];
    *(_OWORD *)v27 = xmmword_1D545AA90;
    v20 = v27 + 16;
    if (v12 != v21)
    {
      do
      {
        *((_OWORD *)v27 - 1) = *((_OWORD *)v12 - 1);
        v27 -= 16;
        v12 -= 16;
      }
      while (v12 != v21);
      v21 = (char *)__p;
    }
    __p = v27;
    v31 = v20;
    v32 = (unint64_t)v28;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *(_OWORD *)v12 = xmmword_1D545AA90;
    v20 = v12 + 16;
  }
  v31 = v20;
  sub_1D53FDE38(a1, (uint64_t)&__p, 1);
  if ((a2 & 1) != 0)
    sub_1D53FDFE0(a1, a3, a4, 1);
  if ((a2 & 2) != 0)
    sub_1D53FDE90(a1, a3, a4, 1);
  v29 = 0x190000001F4;
  sub_1D53FDE6C((uint64_t)a1, &v29, 1);
  if (__p)
  {
    v31 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1D54014A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D54014CC(uint64_t a1, int a2, unsigned int a3, unsigned int a4, int a5)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  BOOL v29;
  _QWORD *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  void *v44;
  void *v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  void *v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v87;
  _OWORD v91[32];
  _OWORD v92[31];
  int v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  if (a5 <= 9)
  {
    v6 = sub_1D54028A4(a1, (int)(a2 + a3 - 4), a4);
    v7 = a3 - v6;
    if (a3 > v6)
    {
      v8 = v6 + a2;
      v9 = sub_1D5402974(a1, (int)(v6 + a2), a4);
      v10 = v9;
      if (a5)
      {
        if (v9 - 51 < 0xFFFFFFCE)
          return;
        v11 = 10 * v9;
        if (10 * v9 + 6 != v7)
          return;
      }
      else
      {
        if (v9 - 11 < 0xFFFFFFF8)
          return;
        v11 = 10 * v9;
        if (10 * v9 + 6 > v7)
          return;
      }
      v93 = 0;
      memset(v92, 0, sizeof(v92));
      if (sub_1D53F5F40(a1, (uint64_t)v92, v11, 0, (v8 + 2)) == v11)
      {
        v12 = 0;
        v84 = (void *)*MEMORY[0x1E0CBC898];
        v87 = v10;
        do
        {
          v13 = (unsigned __int16 *)v92 + 5 * v12;
          v14 = *v13;
          if (a4)
          {
            LOWORD(v14) = __rev16(v14);
            v15 = bswap32(*(_DWORD *)(v13 + 1));
            v16 = bswap32(*(_DWORD *)(v13 + 3));
          }
          else
          {
            v15 = *(unsigned int *)(v13 + 1);
            v16 = *(_DWORD *)(v13 + 3);
          }
          v17 = v14 & 0x3800;
          v18 = v14 & 0xC000;
          v19 = v16 + a2;
          if (v18 == 0x4000)
            v20 = 0;
          else
            v20 = v19;
          if (v18 == 0x4000)
          {
            if (v17 == 10240 || v17 == 12288)
              return;
          }
          else if (v16 >= a3 || v15 >= a3 || v16 + v15 >= a3)
          {
            return;
          }
          v23 = 0;
          v24 = 0;
          do
          {
            if (*(_WORD *)((char *)&unk_1E999FBE0 + v23) == (v14 & 0x3FFF))
              v24 = (char *)&unk_1E999FBE0 + v23;
            v23 += 40;
          }
          while (v23 != 920);
          if (v24)
          {
            v25 = *((_QWORD *)v24 + 3);
            v26 = *((_QWORD *)v24 + 4);
            if (v26)
              v27 = (*((_QWORD *)v24 + 4) & 1 | v25) == 0;
            else
              v27 = 1;
            v28 = !v27;
            if (v25)
              v29 = 0;
            else
              v29 = v28 == 0;
            if (v29)
            {
              sub_1D53F6390((uint64_t)v24);
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              v36 = objc_msgSend_length(v31, v32, v33, v34, v35) == 0;

              if (!v36)
              {
                switch((unsigned __int16)(v17 - 2048) >> 11)
                {
                  case 0:
                    memset(&v91[2], 0, 480);
                    if (v15 >= 0x1FF)
                      v37 = 511;
                    else
                      v37 = v15;
                    memset(v91, 0, 32);
                    if ((_DWORD)v37 && sub_1D53F5F40(a1, (uint64_t)v91, v37, 0, v20))
                    {
                      *((_BYTE *)v91 + v37) = 0;
                      sub_1D53F6410((uint64_t)v24);
                      v38 = (void *)objc_claimAutoreleasedReturnValue();
                      v43 = objc_msgSend_length(v38, v39, v40, v41, v42) == 0;

                      sub_1D53F63AC(a1);
                      v44 = (void *)objc_claimAutoreleasedReturnValue();
                      if (v43)
                      {
                        sub_1D53F6390((uint64_t)v24);
                        v45 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v81, (uint64_t)v91, v82, v83);
                        v46 = (void *)objc_claimAutoreleasedReturnValue();
                        sub_1D52DFEFC(v44, v84, v45, v46);
                      }
                      else
                      {
                        sub_1D53F6410((uint64_t)v24);
                        v45 = (void *)objc_claimAutoreleasedReturnValue();
                        sub_1D53F6390((uint64_t)v24);
                        v46 = (void *)objc_claimAutoreleasedReturnValue();
                        objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v47, (uint64_t)v91, v48, v49);
                        v50 = (void *)objc_claimAutoreleasedReturnValue();
                        sub_1D52DFEFC(v44, v45, v46, v50);

                      }
                    }
                    break;
                  case 1:
                    if (v18 == 0x4000)
                      v51 = (unsigned __int16)v15;
                    else
                      v51 = sub_1D5402974(a1, (int)v19, a4);
                    sub_1D53F6410((uint64_t)v24);
                    v65 = (void *)objc_claimAutoreleasedReturnValue();
                    v70 = objc_msgSend_length(v65, v66, v67, v68, v69) == 0;

                    sub_1D53F63AC(a1);
                    v85 = (void *)objc_claimAutoreleasedReturnValue();
                    if (v70)
                    {
                      sub_1D53F6390((uint64_t)v24);
                      v59 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v78, v51, v79, v80);
                      v60 = (void *)objc_claimAutoreleasedReturnValue();
                      sub_1D52DFEFC(v85, v84, v59, v60);
                    }
                    else
                    {
                      sub_1D53F6410((uint64_t)v24);
                      v59 = (void *)objc_claimAutoreleasedReturnValue();
                      sub_1D53F6390((uint64_t)v24);
                      v60 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v71, v51, v72, v73);
                      v74 = (void *)objc_claimAutoreleasedReturnValue();
                      sub_1D52DFEFC(v85, v59, v60, v74);

                    }
                    goto LABEL_61;
                  case 2:
                    v52 = v15;
                    if (v18 != 0x4000)
                      v52 = sub_1D54028A4(a1, (int)v19, a4);
                    sub_1D53F6410((uint64_t)v24);
                    v53 = (void *)objc_claimAutoreleasedReturnValue();
                    v58 = objc_msgSend_length(v53, v54, v55, v56, v57) == 0;

                    sub_1D53F63AC(a1);
                    v85 = (void *)objc_claimAutoreleasedReturnValue();
                    if (v58)
                    {
                      sub_1D53F6390((uint64_t)v24);
                      v59 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v75, v52, v76, v77);
                      v60 = (void *)objc_claimAutoreleasedReturnValue();
                      sub_1D52DFEFC(v85, v84, v59, v60);
                    }
                    else
                    {
                      sub_1D53F6410((uint64_t)v24);
                      v59 = (void *)objc_claimAutoreleasedReturnValue();
                      sub_1D53F6390((uint64_t)v24);
                      v60 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v61, v52, v62, v63);
                      v64 = (void *)objc_claimAutoreleasedReturnValue();
                      sub_1D52DFEFC(v85, v59, v60, v64);

                    }
LABEL_61:

                    break;
                  case 4:
                  case 5:
                    goto LABEL_71;
                  default:
                    goto LABEL_72;
                }
              }
            }
            else
            {
              v30 = (_QWORD *)(a1 + (v26 >> 1));
              if ((v26 & 1) != 0)
                v25 = *(_QWORD *)(*v30 + v25);
              ((void (*)(_QWORD *, char *))v25)(v30, v24);
            }
          }
          if (v17 == 12288 || v17 == 10240)
LABEL_71:
            sub_1D54014CC(a1, v20, v15, a4, (a5 + 1));
LABEL_72:
          ++v12;
        }
        while (v12 != v87);
      }
    }
  }
}

void sub_1D5401B64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5401C9C(id *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  unsigned int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  char v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char v13;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  _BYTE v27[24];
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  sub_1D53AE248((uint64_t)a1, &v28);
  v26 = 0;
  sub_1D52B1CC8((uint64_t)v27, (uint64_t *)&v28, &v26);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_1D53AE248((uint64_t)a1, &v28);
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v28 + 16))(v28);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v5 >= 0x1B)
  {
    sub_1D53AE248((uint64_t)a1, &v28);
    v9 = (**(uint64_t (***)(_QWORD))v28)(v28);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if ((unint64_t)v5 - 0x100000 <= 0xE00000)
      v13 = v9;
    else
      v13 = 0;
    if ((v13 & 1) != 0
      && sub_1D53F5F40((uint64_t)a1, (uint64_t)&v28, 14, 0, 0) == 14
      && (_QWORD)v28 == 0x45480000001A4949
      && *(_QWORD *)((char *)&v28 + 6) == 0x5244434350414548)
    {
      sub_1D54014CC((uint64_t)a1, 26, v5 - 26, 0, 0);
      (*((void (**)(id *))*a1 + 16))(a1);
      if (a1[18])
      {
        sub_1D53F63AC((uint64_t)a1);
        v15 = objc_retainAutorelease(a1[18]);
        objc_msgSend_bytes(v15, v16, v17, v18, v19);
        v20 = a1[18];
        objc_msgSend_length(v20, v21, v22, v23, v24);
        CGImagePluginReadRawXMPProps();

      }
    }
  }
  return sub_1D52B1D54((uint64_t)v27);
}

void sub_1D5401EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  sub_1D52B1D54((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1D5401F54()
{
  return (id)*MEMORY[0x1E0CBC898];
}

void sub_1D5401F64(uint64_t a1)
{
  int v2;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  int v19;
  unsigned int v20;
  double v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  id v37;

  v2 = *(_DWORD *)(a1 + 196);
  if (v2 == 23494656 || v2 == 18087936)
  {
    sub_1D54011CC((char *)a1, 1, *(unsigned __int16 *)(a1 + 206), 0);
    if (*(_WORD *)(a1 + 206))
    {
      sub_1D53F63AC(a1);
      v34 = (id)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v34, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCFA8], &unk_1E99CC018);

    }
  }
  sub_1D5403690(a1);
  if (*(unsigned __int16 *)(a1 + 204) >= 2u)
  {
    sub_1D53FA1B8(a1, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *MEMORY[0x1E0CBCBA0];
    v35 = v7;
    sub_1D529EA84(v7, (const char *)*MEMORY[0x1E0CBCBA0], v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v12;
    if (v12)
    {
      v18 = (void *)MEMORY[0x1E0CB37E8];
      v19 = objc_msgSend_intValue(v12, v13, v14, v15, v16);
      LOWORD(v20) = *(_WORD *)(a1 + 204);
      *(float *)&v21 = (float)v19 / (float)v20;
      objc_msgSend_numberWithFloat_(v18, v22, v23, v24, v25, v21);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v35, v27, (uint64_t)v26, v8, v28);

    }
  }
  v29 = *(unsigned int *)(a1 + 200);
  if ((_DWORD)v29 && *(_DWORD *)(a1 + 196) == 18087936)
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v4, (uint64_t)CFSTR("%04lX%05u"), v5, v6, v29 >> 16, (unsigned __int16)*(_DWORD *)(a1 + 200));
    v36 = (id)objc_claimAutoreleasedReturnValue();
    sub_1D53F63AC(a1);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v30, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCAF0], v36);

  }
  sub_1D53F63AC(a1);
  v37 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v37, v31, (uint64_t)CFSTR("{Temporary}"), v32, v33);

}

void sub_1D540213C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D5402178(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  char *v73[3];

  sub_1D53F63AC((uint64_t)a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = sub_1D5297AC0(v6, (const char *)*MEMORY[0x1E0CBCFF0], v7, v8, v9);

  memset(v73, 0, sizeof(v73));
  v72 = 0uLL;
  v71 = 0uLL;
  sub_1D53F642C((uint64_t)a1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v11, CFSTR("JPEGImage/Offset"), v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F642C((uint64_t)a1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v16, CFSTR("JPEGImage/Length"), v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15 && v20)
  {
    v69 = objc_msgSend_intValue(v15, v21, v22, v23, v24);
    v67 = objc_msgSend_intValue(v20, v25, v26, v27, v28);
    sub_1D5285A24(&v68, &v67);
    sub_1D53F4C74(a1, &v69, &v68, v10, &v70);
    v29 = v70;
    v70 = 0uLL;
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
    v72 = v29;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
    if (*((_QWORD *)&v70 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
  sub_1D53F642C((uint64_t)a1);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v36, CFSTR("JPEGThumbnail/Offset"), v37, v38, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F642C((uint64_t)a1);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v41, CFSTR("JPEGThumbnail/Length"), v42, v43, v44);
  v45 = (void *)objc_claimAutoreleasedReturnValue();

  if (v40 && v45)
  {
    v69 = objc_msgSend_intValue(v40, v46, v47, v48, v49);
    v67 = objc_msgSend_intValue(v45, v50, v51, v52, v53);
    sub_1D5285A24(&v68, &v67);
    sub_1D53F4C74(a1, &v69, &v68, v10, &v70);
    v54 = v70;
    v70 = 0uLL;
    v55 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    v71 = v54;
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
    if (*((_QWORD *)&v70 + 1))
    {
      v59 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
  }
  if ((_QWORD)v72)
    sub_1D52B0A7C(v73, &v72);
  if ((_QWORD)v71)
    sub_1D52B0A7C(v73, &v71);
  sub_1D53F51D8((uint64_t)v73, a2, a3);

  v61 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  *(_QWORD *)&v72 = v73;
  sub_1D5282E44((void ***)&v72);
}

void sub_1D54024E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  sub_1D5282EB4((uint64_t)&a13);
  sub_1D5282EB4((uint64_t)&a15);
  a15 = (void **)&a18;
  sub_1D5282E44(&a15);
  _Unwind_Resume(a1);
}

void sub_1D540258C(const void *a1, void *a2, void *a3)
{
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void (***v12)(_QWORD);
  std::__shared_weak_count *v13;
  _BYTE v14[24];
  __int128 v15;
  id v16;
  id v17;

  v17 = a2;
  v16 = a3;
  v5 = (void *)MEMORY[0x1D8272058]();
  sub_1D52843FC(a1, &v15);
  LODWORD(v12) = 0;
  sub_1D52B1CC8((uint64_t)v14, (uint64_t *)&v15, &v12);
  sub_1D5402DE4((uint64_t *)&v15, &v17, &v16, &v12);
  (**v12)(v12);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  sub_1D52B1D54((uint64_t)v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  objc_autoreleasePoolPop(v5);

}

void sub_1D54026A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_1D5282EB4((uint64_t)&a9);
  sub_1D52B1D54((uint64_t)&a11);
  sub_1D5282EB4((uint64_t)&a14);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D540267CLL);
}

void sub_1D54026E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_1D5402704(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void (***v12)(_QWORD);
  std::__shared_weak_count *v13;
  _BYTE v14[24];
  __int128 v15;
  id v16;
  id v17;

  v17 = a2;
  v16 = a3;
  v5 = (void *)MEMORY[0x1D8272058]();
  sub_1D5284368(a1, 0, &v15);
  LODWORD(v12) = 0;
  sub_1D52B1CC8((uint64_t)v14, (uint64_t *)&v15, &v12);
  sub_1D5402DE4((uint64_t *)&v15, &v17, &v16, &v12);
  (**v12)(v12);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  sub_1D52B1D54((uint64_t)v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  objc_autoreleasePoolPop(v5);

}

void sub_1D5402820(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_1D5282EB4((uint64_t)&a9);
  sub_1D52B1D54((uint64_t)&a11);
  sub_1D5282EB4((uint64_t)&a14);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D54027F8);
}

void sub_1D5402864(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_1D5402880(uint64_t a1)
{
  sub_1D53FED24(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D54028A4(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned int v9;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unsigned int v14;
  unint64_t v15;

  v15 = a2;
  v14 = 0;
  sub_1D53AE248(a1, &v12);
  v4 = v12;
  sub_1D528304C(&v11, &v15);
  v5 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, int *))(*(_QWORD *)v4 + 24))(v4, &v14, 4, &v11);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = bswap32(v14);
  if (((v5 == 4) & a3) != 0)
    return v9;
  else
    return v14;
}

void sub_1D5402960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5402974(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unsigned __int16 v15;
  unint64_t v16;

  v16 = a2;
  v15 = 0;
  sub_1D53AE248(a1, &v13);
  v4 = v13;
  sub_1D528304C(&v12, &v16);
  v5 = (*(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t, int *))(*(_QWORD *)v4 + 24))(v4, &v15, 2, &v12);
  v6 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = bswap32(v15) >> 16;
  if (((v5 == 2) & a3) != 0)
    return (unsigned __int16)v9;
  else
    return v15;
}

void sub_1D5402A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5402A4C(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned int v9;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unsigned __int16 v15;
  unint64_t v16;

  v16 = a2;
  v15 = 0;
  sub_1D53AE248(a1, &v13);
  v4 = v13;
  sub_1D528304C(&v12, &v16);
  v5 = (*(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t, int *))(*(_QWORD *)v4 + 24))(v4, &v15, 2, &v12);
  v6 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = bswap32(v15) >> 16;
  if (((v5 == 2) & a3) != 0)
    return (__int16)v9;
  else
    return (__int16)v15;
}

void sub_1D5402B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

float sub_1D5402B24(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  float result;
  unsigned int v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  float v14;
  unint64_t v15;

  v15 = a2;
  v14 = 0.0;
  sub_1D53AE248(a1, &v12);
  v4 = v12;
  sub_1D528304C(&v11, &v15);
  v5 = (*(uint64_t (**)(uint64_t, float *, uint64_t, int *))(*(_QWORD *)v4 + 24))(v4, &v14, 4, &v11);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  result = v14;
  v10 = bswap32(v14);
  if (((v5 == 4) & a3) != 0)
    return (float)v10;
  return result;
}

void sub_1D5402BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5402BFC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unsigned __int8 v10;
  unint64_t v11;

  v11 = a2;
  v10 = 0;
  sub_1D53AE248(a1, &v8);
  v2 = v8;
  sub_1D528304C(&v7, &v11);
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, int *))(*(_QWORD *)v2 + 24))(v2, &v10, 1, &v7);
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v10;
}

void sub_1D5402C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D5402CA8(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE8uLL);
  sub_1D5402D20((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1D5285658((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1D5402D0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5402D20(uint64_t a1, uint64_t *a2, void **a3, void **a4)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E99A0080;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D53FEEF0(a1 + 24, a2, *a3, *a4);
  *(_QWORD *)(a1 + 24) = off_1E999FF88;
  *(_DWORD *)(a1 + 220) = -1;
  *(_QWORD *)(a1 + 224) = 0;
  return a1;
}

void sub_1D5402D78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5402D8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A0080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5402DA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A0080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5402DD4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void sub_1D5402DE4(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE8uLL);
  sub_1D5402D20((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1D5285658((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1D5402E48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1D5402E5C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A0540, 0);
    if (v11)
      sub_1D5405754((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D5402EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5402EFC(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A0540, 0);
    if (v10)
      sub_1D5405334((uint64_t)v10, v11, v12, a4, a5, a6);
  }

}

void sub_1D5402F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5402F8C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A0540, 0);
    if (v11)
      sub_1D5406508((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D540301C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5403030(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A0540, 0);
    if (v10)
      sub_1D5406908((uint64_t)v10, v11, v12, a4, a5, a6);
  }

}

void sub_1D54030AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D54030C0(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A0540, 0);
    if (v10)
      sub_1D54061F8((uint64_t)v10, v11, v12, a4, a5, a6);
  }

}

void sub_1D540313C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5403150(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A0540, 0);
    if (v11)
      sub_1D5407960((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D54031E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D54031F4(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A0540, 0);
    if (v10)
      sub_1D5407E3C((uint64_t)v10, v12, v11, a4, a5, a6);
  }

}

void sub_1D5403274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5403288(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  char *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v10 = (char *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A0540, 0);
    if (v10)
      sub_1D5408344(v10, v12, v11, a4, a5, a6);
  }

}

void sub_1D5403308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D540331C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  char *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v10 = (char *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A0540, 0);
    if (v10)
      sub_1D5408930(v10, v12, v11, a4, a5, a6);
  }

}

void sub_1D540339C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D54033B0(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A0540, 0);
    if (v11)
      sub_1D5406624((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D540343C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D5403450(unsigned __int8 *a1, unint64_t a2)
{
  int v2;

  if (a2 >= 0xC)
  {
    v2 = *a1;
    if (v2 == 77)
    {
      if (a1[1] == 77 && !a1[2] && a1[3] == 42 && a1[8] == 186 && a1[9] == 176 && a1[10] == 172 && a1[11] == 187)
        return 1;
    }
    else if (v2 == 73 && a1[1] == 73 && a1[2] == 42 && !a1[3] && a1[8] == 67 && a1[9] == 82 && a1[10] == 2 && !a1[11])
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1D540351C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4[3];
  uint64_t v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  sub_1D52B1C58(v4, a1);
  v6 = 0;
  v5 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, &v5, 12) == 12)
    v2 = sub_1D5403450((unsigned __int8 *)&v5, 0xCuLL);
  else
    v2 = 0;
  sub_1D5285200(v4);
  return v2;
}

void sub_1D54035C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5285200(&a9);
  _Unwind_Resume(a1);
}

void sub_1D54035F0(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v7;
  id v8;
  id v9;

  v9 = a2;
  v8 = a3;
  sub_1D5409D3C(a1, &v9, &v8, &v7);
  *a4 = v7;

}

void sub_1D5403664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

id sub_1D5403680()
{
  return (id)*MEMORY[0x1E0CBCF78];
}

void sub_1D5403690(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;

  sub_1D53FDB60(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F63AC(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)*MEMORY[0x1E0CBCA28];
  sub_1D5297C60(v3, (void *)*MEMORY[0x1E0CBCA28], 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F63AC(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D5297C60(v6, v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D5297D18(v2, CFSTR("LensModel"), v9, v10, v11);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v15)
  {
    sub_1D5297D18(v8, (const char *)*MEMORY[0x1E0CBCA58], v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v16 = (const char *)*MEMORY[0x1E0CBCA48];
  if (sub_1D5297D80(v5, (void *)*MEMORY[0x1E0CBCA48]))
  {
    v20 = sub_1D5297AC0(v5, v16, v17, v18, v19);
    sub_1D52EAE5C(v5, (const char *)*MEMORY[0x1E0CBCA50], v21, v22, v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = v24;
    v30 = 0.0;
    if (v24)
    {
      v31 = 0.0;
      if (objc_msgSend_count(v24, v25, v26, v27, v28) == 4)
      {
        v43 = 0;
        v30 = sub_1D53BD334(v29, (const char *)&v43, v26, v27, v28);
        v43 = 1;
        v31 = sub_1D53BD334(v29, (const char *)&v43, v32, v33, v34);
      }
    }
    else
    {
      v31 = 0.0;
    }
    v35 = sub_1D52EAE10(v8, CFSTR("MaxAperture"), v26, v27, v28);
    v39 = sub_1D52EAE10(v2, (const char *)*MEMORY[0x1E0CBCBA0], v36, v37, v38);
    sub_1D5403978(v39, v30, v31, v35, v40, v20, v15);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    if (v41)
    {
      sub_1D53F63AC(a1);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v42, v4, (void *)*MEMORY[0x1E0CBCA58], v41);

    }
  }
  sub_1D53FC1FC(a1);

}

void sub_1D54038D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D5403964()
{
  void *v0;

  JUMPOUT(0x1D5403958);
}

void sub_1D5403970()
{
  JUMPOUT(0x1D5403958);
}

id sub_1D5403978(double a1, double a2, double a3, double a4, uint64_t a5, unsigned int a6, void *a7)
{
  uint64_t v7;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  id v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  std::string::size_type v68;
  std::string::size_type size;
  int v70;
  const std::string::value_type *v71;
  std::string::size_type v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  __int128 v83;
  unint64_t v84;
  __int128 v85;
  double v86;
  uint64_t v87;
  std::string *p_p;
  std::string *v89;
  uint64_t v90;
  std::string *v91;
  std::string *v92;
  BOOL v93;
  uint64_t j;
  double v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  void *v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  std::string::size_type k;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  __CFString *v173;
  void *v174;
  id v175;
  void *v176;
  void *v177;
  void *v178;
  _QWORD v179[9];
  std::string __p;
  __int128 v181;
  __int128 v182;
  char *v183[3];
  std::string v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;

  v175 = a7;
  v186 = 0;
  v187 = 0;
  v188 = 0;
  sub_1D54343BC(CFSTR("canon"));
  v176 = (void *)objc_claimAutoreleasedReturnValue();
  if (v176)
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v13, (uint64_t)CFSTR("%u"), v14, v15, a6);
    v16 = (char *)objc_claimAutoreleasedReturnValue();
    sub_1D52EAE5C(v176, v16, v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    if (v20)
    {
      for (i = 0; ; i = v185 + 1)
      {
        v185 = i;
        if (i >= objc_msgSend_count(v20, v21, v22, v23, v24))
          break;
        sub_1D53BD380(v20, (const char *)&v185, v26, v27, v28);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_count(v29, v30, v31, v32, v33) == 5)
        {
          __p.__r_.__value_.__r.__words[0] = 0;
          sub_1D53BC854(v29, (const char *)&__p, v34, v35, v36);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          __p.__r_.__value_.__r.__words[0] = 1;
          v41 = sub_1D53BD334(v29, (const char *)&__p, v38, v39, v40);
          __p.__r_.__value_.__r.__words[0] = 2;
          v45 = sub_1D53BD334(v29, (const char *)&__p, v42, v43, v44);
          __p.__r_.__value_.__r.__words[0] = 3;
          v49 = sub_1D53BD334(v29, (const char *)&__p, v46, v47, v48);
          __p.__r_.__value_.__r.__words[0] = 4;
          v53 = sub_1D53BD334(v29, (const char *)&__p, v50, v51, v52);
          if (v37)
          {
            v54 = v53;
            v55 = objc_retainAutorelease(v37);
            v60 = (char *)objc_msgSend_UTF8String(v55, v56, v57, v58, v59);
            sub_1D52850A0(&v184, v60);
            if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
              sub_1D5290130(&__p, v184.__r_.__value_.__l.__data_, v184.__r_.__value_.__l.__size_);
            else
              __p = v184;
            *(double *)&v181 = v41;
            *((double *)&v181 + 1) = v45;
            *(double *)&v182 = v49;
            *((double *)&v182 + 1) = v54;
            sub_1D5408F8C(&v186, (__int128 *)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v184.__r_.__value_.__l.__data_);
          }

        }
      }
    }

    v61 = v186;
    v62 = v187;
    if (v187 == v186)
    {
      __p.__r_.__value_.__r.__words[0] = 0;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
      __p.__r_.__value_.__r.__words[2] = 0x4812000000;
      *(_QWORD *)&v181 = sub_1D54090FC;
      *((_QWORD *)&v181 + 1) = sub_1D5409138;
      v183[0] = 0;
      v183[1] = 0;
      *(_QWORD *)&v182 = "";
      *((_QWORD *)&v182 + 1) = v183;
      v179[0] = MEMORY[0x1E0C809B0];
      v179[1] = 3221225472;
      v179[2] = sub_1D5409148;
      v179[3] = &unk_1E99A0440;
      *(double *)&v179[5] = a2;
      *(double *)&v179[6] = a3;
      *(double *)&v179[7] = a4;
      *(double *)&v179[8] = a1;
      v179[4] = &__p;
      objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v176, v13, (uint64_t)v179, v14, v15);
      v66 = *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 64) - 3;
      if (v66 >= 0xFFFFFFFFFFFFFFFELL)
      {
        memset(&v184, 0, sizeof(v184));
        v67 = *(_QWORD **)(__p.__r_.__value_.__l.__size_ + 48);
        v68 = __p.__r_.__value_.__l.__size_ + 56;
        if (v67 == (_QWORD *)(__p.__r_.__value_.__l.__size_ + 56))
          goto LABEL_103;
        do
        {
          size = HIBYTE(v184.__r_.__value_.__r.__words[2]);
          if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v184.__r_.__value_.__l.__size_;
          if (size)
            std::string::append(&v184, " or ", 4uLL);
          v70 = *((char *)v67 + 55);
          if (v70 >= 0)
            v71 = (const std::string::value_type *)(v67 + 4);
          else
            v71 = (const std::string::value_type *)v67[4];
          if (v70 >= 0)
            v72 = *((unsigned __int8 *)v67 + 55);
          else
            v72 = v67[5];
          std::string::append(&v184, v71, v72);
          v73 = (_QWORD *)v67[1];
          if (v73)
          {
            do
            {
              v74 = v73;
              v73 = (_QWORD *)*v73;
            }
            while (v73);
          }
          else
          {
            do
            {
              v74 = (_QWORD *)v67[2];
              v93 = *v74 == (_QWORD)v67;
              v67 = v74;
            }
            while (!v93);
          }
          v67 = v74;
        }
        while (v74 != (_QWORD *)v68);
        if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
LABEL_103:
          objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v63, (uint64_t)&v184, v64, v65);
        else
          objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v63, (uint64_t)v184.__r_.__value_.__l.__data_, v64, v65);
        v7 = objc_claimAutoreleasedReturnValue();
        if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v184.__r_.__value_.__l.__data_);
      }
      _Block_object_dispose(&__p, 8);
      sub_1D52940F4((uint64_t)&v182 + 8, v183[0]);
      v118 = v176;
      if (v66 >= 0xFFFFFFFFFFFFFFFELL)
        goto LABEL_113;
      goto LABEL_107;
    }
  }
  else
  {
    v61 = v186;
    v62 = v187;
  }
  v75 = v62 - v61;
  if (v75 == 56)
  {
    if (*(char *)(v61 + 23) < 0)
      v61 = *(_QWORD *)v61;
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v13, v61, v14, v15);
    v76 = objc_claimAutoreleasedReturnValue();
    goto LABEL_112;
  }
  sub_1D52B261C(0x6DB6DB6DB6DB6DB7 * (v75 >> 3));
  v178 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D52B261C(0x6DB6DB6DB6DB6DB7 * ((v187 - v186) >> 3));
  v177 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D52B261C(0x6DB6DB6DB6DB6DB7 * ((v187 - v186) >> 3));
  v174 = (void *)objc_claimAutoreleasedReturnValue();
  v80 = v186;
  if (v187 != v186)
  {
    v81 = 0;
    v7 = 0x6DB6DB6DB6DB6DB7;
    do
    {
      v82 = v80 + 56 * v81;
      if (*(char *)(v82 + 23) < 0)
      {
        sub_1D5290130(&__p, *(void **)v82, *(_QWORD *)(v82 + 8));
      }
      else
      {
        v83 = *(_OWORD *)v82;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v82 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v83;
      }
      v84 = v80 + 56 * v81;
      v85 = *(_OWORD *)(v84 + 40);
      v181 = *(_OWORD *)(v84 + 24);
      v182 = v85;
      v86 = *(double *)&v181;
      if (*(double *)&v181 != 0.0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v87 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v87 = __p.__r_.__value_.__l.__size_;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v87 >= 3)
        {
          v89 = (std::string *)((char *)p_p + v87);
          v90 = v87;
          v91 = p_p;
          do
          {
            v92 = (std::string *)memchr(v91, 91, v90 - 2);
            if (!v92)
              break;
            v93 = LOWORD(v92->__r_.__value_.__l.__data_) == 22619 && v92->__r_.__value_.__s.__data_[2] == 93;
            if (v93)
            {
              if (v92 == v89 || v92 != p_p)
                break;
              std::string::basic_string(&v184, &__p, 4uLL, v87, (std::allocator<char> *)&v185);
              for (j = 0; j != 4; ++j)
              {
                v95 = *(double *)&qword_1D545AC90[j];
                if (fabs(a2 - *(double *)&v181 * v95) <= 0.9)
                {
                  if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v77, (uint64_t)&v184, v78, v79);
                  else
                    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v77, (uint64_t)v184.__r_.__value_.__l.__data_, v78, v79);
                  v99 = (void *)objc_claimAutoreleasedReturnValue();
                  if (j * 8)
                  {
                    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v96, (uint64_t)CFSTR("%@ + %.1lfx"), v97, v98, v99, *(_QWORD *)&v95);
                    v100 = objc_claimAutoreleasedReturnValue();

                    v99 = (void *)v100;
                  }
                  objc_msgSend_addObject_(v178, v96, (uint64_t)v99, v97, v98);
                  if (fabs(a3 - *((double *)&v181 + 1) * v95) <= 0.9)
                  {
                    objc_msgSend_addObject_(v177, v101, (uint64_t)v99, v102, v103);
                    if (a4 <= 0.0 || *(double *)&v182 * v95 + -0.15 <= a4 && *((double *)&v182 + 1) * v95 + 0.15 >= a4)
                      objc_msgSend_addObject_(v174, v104, (uint64_t)v99, v105, v106);
                  }

                }
              }
              if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v184.__r_.__value_.__l.__data_);
              v7 = 0x6DB6DB6DB6DB6DB7;
              goto LABEL_90;
            }
            v91 = (std::string *)((char *)&v92->__r_.__value_.__l.__data_ + 1);
            v90 = (char *)v89 - (char *)v91;
          }
          while ((char *)v89 - (char *)v91 >= 3);
        }
        v7 = 0x6DB6DB6DB6DB6DB7;
        if (vabdd_f64(a2, v86) <= 0.9)
        {
          objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v77, (uint64_t)p_p, v78, v79);
          v107 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_addObject_(v178, v108, (uint64_t)v107, v109, v110);
          if (vabdd_f64(a3, *((double *)&v181 + 1)) <= 0.9)
          {
            objc_msgSend_addObject_(v177, v111, (uint64_t)v107, v112, v113);
            if (a4 <= 0.0 || *(double *)&v182 + -0.15 <= a4 && *((double *)&v182 + 1) + 0.15 >= a4)
              objc_msgSend_addObject_(v174, v114, (uint64_t)v107, v115, v116);
          }

        }
      }
LABEL_90:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v81;
      v80 = v186;
    }
    while (v81 < 0x6DB6DB6DB6DB6DB7 * ((v187 - v186) >> 3));
  }
  v117 = v174;
  v118 = v176;
  v127 = v117;
  if (!objc_msgSend_count(v117, v119, v120, v121, v122))
  {
    v127 = v177;

  }
  if (!objc_msgSend_count(v127, v123, v124, v125, v126))
  {
    v132 = v178;

    v127 = v132;
  }
  v136 = objc_msgSend_count(v127, v128, v129, v130, v131);
  if (v136)
  {
    v137 = (void *)MEMORY[0x1E0CB37A0];
    __p.__r_.__value_.__r.__words[0] = 0;
    sub_1D53BC854(v127, (const char *)&__p, v133, v134, v135);
    v138 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithString_(v137, v139, (uint64_t)v138, v140, v141);
    v7 = objc_claimAutoreleasedReturnValue();

    for (k = 1; ; k = __p.__r_.__value_.__r.__words[0] + 1)
    {
      __p.__r_.__value_.__r.__words[0] = k;
      if (k >= objc_msgSend_count(v127, v142, v143, v144, v145))
        break;
      objc_msgSend_appendString_((void *)v7, v147, (uint64_t)CFSTR(" or "), v148, v149);
      sub_1D53BC854(v127, (const char *)&__p, v150, v151, v152);
      v153 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_appendString_((void *)v7, v154, (uint64_t)v153, v155, v156);

    }
  }

  if (!v136)
  {
LABEL_107:
    if (objc_msgSend_length(v175, v157, v158, v159, v160))
    {
      v164 = (void *)MEMORY[0x1E0CB3940];
      if (objc_msgSend_hasPrefix_(v175, v161, (uint64_t)CFSTR("Canon"), v162, v163))
        objc_msgSend_stringWithFormat_(v164, v165, (uint64_t)CFSTR("%s%@"), v166, v167, "", v175);
      else
        objc_msgSend_stringWithFormat_(v164, v165, (uint64_t)CFSTR("%s%@"), v166, v167, "Canon ", v175);
      v76 = objc_claimAutoreleasedReturnValue();
LABEL_112:
      v7 = v76;
      v118 = v176;
      goto LABEL_113;
    }
    if (a2 <= 0.0)
    {
      v173 = &stru_1E99A7480;
      v118 = v176;
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v161, (uint64_t)CFSTR("%@"), v162, v163, &stru_1E99A7480);
    }
    else
    {
      v118 = v176;
      if (a3 <= 0.0 || a2 == a3)
      {
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v161, (uint64_t)CFSTR(" %.1lfmm"), v162, v163, *(_QWORD *)&a2);
        v169 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v161, (uint64_t)CFSTR(" %.1lf-%.1lfmm"), v162, v163, *(_QWORD *)&a2, *(_QWORD *)&a3);
        v169 = objc_claimAutoreleasedReturnValue();
      }
      v173 = (__CFString *)v169;
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v170, (uint64_t)CFSTR("%@"), v171, v172, v169);
    }
    v7 = objc_claimAutoreleasedReturnValue();

  }
LABEL_113:

  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v186;
  sub_1D5409CB0((void ***)&__p);

  return (id)v7;
}

void sub_1D54042F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;
  uint64_t v44;

  if (a43 < 0)
    operator delete(__p);
  _Block_object_dispose(&a25, 8);
  sub_1D52940F4(v43, a35);

  a25 = (void *)(v44 - 176);
  sub_1D5409CB0((void ***)&a25);

  _Unwind_Resume(a1);
}

void sub_1D540449C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _BOOL4 v8;
  void *v9;
  _BOOL4 v10;
  void *v11;
  int v12;
  uint64_t v13;
  void *v14;
  int v15;
  __CFString *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  __CFString *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  __CFString *v41;
  void *v42;
  void *v43;
  void *v44;
  BOOL v45;
  int v46;
  void *v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;

  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D5297C60(v2, CFSTR("{PictStyleSetting}"), 0);
  v56 = (id)objc_claimAutoreleasedReturnValue();

  if (sub_1D5297D80(v56, CFSTR("PictureStyle")))
  {
    v6 = sub_1D5297AC0(v56, CFSTR("PictureStyle"), v3, v4, v5);
    v8 = v6 <= 0xB && ((1 << v6) & 0x8C0) != 0;
  }
  else
  {
    v8 = 0;
    v6 = -1;
  }
  sub_1D53F63AC(a1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = sub_1D53FAE98(v9, CFSTR("{PictStyleNormalized}"), CFSTR("PictureStyle"));

  if (v10)
  {
    sub_1D53F63AC(a1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = sub_1D53FAF14(v11, CFSTR("{PictStyleNormalized}"), CFSTR("PictureStyle"));

    if (v12 == 134)
      v8 = 1;
    if (v12 || v6 <= 1)
    {
      sub_1D54049E0(v13, v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("PictureStyle"), v14, (float)v12, (float)v12);

      v6 = -1;
    }
    goto LABEL_16;
  }
  if (v6 >= 2)
  {
LABEL_16:
    v15 = v6 + 4096;
    v16 = CFSTR("{PictureStyle}");
    sub_1D5404B30((uint64_t)v16, v6 + 4096);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F96CC(a1, v16, CFSTR("PictureStyle"), v17, (float)v15, (float)v15);

  }
  if (sub_1D5297D80(v56, CFSTR("PhotoEffect")))
  {
    v21 = sub_1D5297AC0(v56, CFSTR("PhotoEffect"), v18, v19, v20);
    v22 = v21;
    sub_1D5404D04(v21, v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("PhotoEffect"), v23, (float)v22, (float)v22);

    if ((v22 & 0xFFFFFFFE) == 4)
      v8 = 1;
  }
  if (sub_1D5297D80(v56, CFSTR("ColorTone")))
  {
    v27 = sub_1D5297AC0(v56, CFSTR("ColorTone"), v24, v25, v26);
    sub_1D53F9628(a1, CFSTR("ColorTone"), v27);
  }
  if (sub_1D5297D80(v56, CFSTR("SharpnessFreq")))
  {
    v31 = sub_1D5297AC0(v56, CFSTR("SharpnessFreq"), v28, v29, v30);
    sub_1D53F9628(a1, CFSTR("SharpnessFreq"), v31);
  }
  if (sub_1D5297D80(v56, CFSTR("FilterEffect")))
  {
    v35 = sub_1D5297AC0(v56, CFSTR("FilterEffect"), v32, v33, v34);
    if (v35 > 4)
      v36 = 0;
    else
      v36 = off_1E99A05A8[v35];
    sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("FilterEffect"), v36, (float)v35, (float)v35);
  }
  if (sub_1D5297D80(v56, CFSTR("ToningEffect")))
  {
    v40 = sub_1D5297AC0(v56, CFSTR("ToningEffect"), v37, v38, v39);
    if (v40 > 4)
      v41 = 0;
    else
      v41 = off_1E99A05D0[v40];
    sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("ToningEffect"), v41, (float)v40, (float)v40);
  }
  sub_1D53F63AC(a1);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D5297C60(v42, CFSTR("{PictureStyle}"), 0);
  v43 = (void *)objc_claimAutoreleasedReturnValue();

  if (v43)
  {
    sub_1D53F63AC(a1);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = sub_1D53FAE98(v44, CFSTR("{PictureStyle}"), CFSTR("Monochrome"));

    if (!v45)
      sub_1D53F9628(a1, CFSTR("Monochrome"), v8);
    v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    if ((v46 & 0x80000000) == 0)
    {
      sub_1D53F984C(a1, v46);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("PictStyleColorSpace"), v47, (float)v46, (float)v46);

    }
  }
  sub_1D53F63AC(a1);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v48, v49, (uint64_t)CFSTR("{PictStyleSetting}"), v50, v51);

  sub_1D53F63AC(a1);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v52, v53, (uint64_t)CFSTR("{PictStyleNormalized}"), v54, v55);

}

void sub_1D54048FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t sub_1D54049C8(uint64_t a1, unsigned int a2)
{
  return (a2 < 0xC) & (0x8C0u >> a2);
}

const __CFString *sub_1D54049E0(uint64_t a1, int a2)
{
  const __CFString *result;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  BOOL v6;

  if (a2 > 34)
  {
    if (a2 <= 66)
    {
      v3 = CFSTR("User Def. 3");
      v4 = CFSTR("External 1");
      v5 = CFSTR("External 2");
      if (a2 != 66)
        v5 = 0;
      if (a2 != 65)
        v4 = v5;
      v6 = a2 == 35;
LABEL_15:
      if (v6)
        return v3;
      else
        return v4;
    }
    else
    {
      switch(a2)
      {
        case 129:
LABEL_6:
          result = CFSTR("Standard");
          break;
        case 130:
LABEL_18:
          result = CFSTR("Portrait");
          break;
        case 131:
          result = CFSTR("Landscape");
          break;
        case 132:
          result = CFSTR("Neutral");
          break;
        case 133:
          result = CFSTR("Faithful");
          break;
        case 134:
          result = CFSTR("Monochrome");
          break;
        default:
          if (a2 == 67)
            result = CFSTR("External 3");
          else
            result = 0;
          break;
      }
    }
  }
  else
  {
    switch(a2)
    {
      case 0:
        result = CFSTR("None");
        break;
      case 1:
        goto LABEL_6;
      case 2:
        goto LABEL_18;
      case 3:
        result = CFSTR("High Saturation");
        break;
      case 4:
        result = CFSTR("Adobe RGB");
        break;
      case 5:
        result = CFSTR("Low Saturation");
        break;
      case 6:
        result = CFSTR("CM Set 1");
        break;
      case 7:
        result = CFSTR("CM Set 2");
        break;
      default:
        v3 = CFSTR("User Def. 1");
        v4 = CFSTR("User Def. 2");
        if (a2 != 34)
          v4 = 0;
        v6 = a2 == 33;
        goto LABEL_15;
    }
  }
  return result;
}

const __CFString *sub_1D5404B30(uint64_t a1, int a2)
{
  const __CFString *result;

  result = 0;
  switch(a2)
  {
    case 0:
      result = CFSTR("Full auto");
      break;
    case 1:
      result = CFSTR("Manual");
      break;
    case 2:
      result = CFSTR("Landscape");
      break;
    case 3:
      result = CFSTR("Fast shutter");
      break;
    case 4:
      result = CFSTR("Slow shutter");
      break;
    case 5:
      result = CFSTR("Night");
      break;
    case 6:
      result = CFSTR("Gray Scale");
      break;
    case 7:
      result = CFSTR("Sepia");
      break;
    case 8:
      result = CFSTR("Portrait");
      break;
    case 9:
      result = CFSTR("Sports");
      break;
    case 10:
      result = CFSTR("Macro");
      break;
    case 11:
      result = CFSTR("Black & White");
      break;
    case 12:
      result = CFSTR("Pan focus");
      break;
    case 13:
      result = CFSTR("Vivid");
      break;
    case 14:
      result = CFSTR("Neutral");
      break;
    case 15:
      result = CFSTR("Flash Off");
      break;
    case 16:
      result = CFSTR("Long Shutter");
      break;
    case 17:
      result = CFSTR("Super Macro");
      break;
    case 18:
      result = CFSTR("Foliage");
      break;
    case 19:
      result = CFSTR("Indoor");
      break;
    case 20:
      result = CFSTR("Fireworks");
      break;
    case 21:
      result = CFSTR("Beach");
      break;
    case 22:
      result = CFSTR("Underwater");
      break;
    case 23:
      result = CFSTR("Snow");
      break;
    case 24:
      result = CFSTR("Kids & Pets");
      break;
    case 25:
      result = CFSTR("Night Snapshot");
      break;
    case 26:
      result = CFSTR("Digital Macro");
      break;
    case 27:
      result = CFSTR("My Colors");
      break;
    case 28:
      result = CFSTR("Still Image");
      break;
    case 29:
    case 34:
    case 35:
    case 36:
    case 37:
      return result;
    case 30:
      result = CFSTR("Color Accent");
      break;
    case 31:
      result = CFSTR("Color Swap");
      break;
    case 32:
      result = CFSTR("Aquarium");
      break;
    case 33:
      result = CFSTR("ISO 3200");
      break;
    case 38:
      result = CFSTR("Creative Auto");
      break;
    default:
      if (a2 == 261)
        result = CFSTR("Sunset");
      else
        result = 0;
      break;
  }
  return result;
}

const __CFString *sub_1D5404D04(uint64_t a1, int a2)
{
  const __CFString *result;

  switch(a2)
  {
    case 0:
      result = CFSTR("Off");
      break;
    case 1:
      result = CFSTR("Vivid");
      break;
    case 2:
      result = CFSTR("Neutral");
      break;
    case 3:
      result = CFSTR("Smooth");
      break;
    case 4:
      result = CFSTR("Sepia");
      break;
    case 5:
      result = CFSTR("B & W");
      break;
    case 6:
      result = CFSTR("Custom");
      break;
    default:
      if (a2 == 100)
        result = CFSTR("My Color Data");
      else
        result = 0;
      break;
  }
  return result;
}

uint64_t sub_1D5404D90(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v11 = a2;
  if (!a4)
  {
    v14 = *(_QWORD *)(a1 + 24);
    if (v14 >= 1)
    {
      v15 = a3 - v14;
      v13 = *(unsigned __int8 *)(a1 + 32);
      goto LABEL_16;
    }
    v20 = 0;
    v21[0] = 0;
    *(_QWORD *)((char *)v21 + 5) = 0;
    v19 = sub_1D53F5F40(a1, (uint64_t)&v20, 20, a5, a3);
    v16 = (unsigned __int16)v20 > 0xFFu;
    if (v19 == 20)
    {
      v15 = a5;
      v14 = a3;
      goto LABEL_17;
    }
LABEL_22:
    v17 = 0;
    goto LABEL_18;
  }
  v20 = 0;
  if (sub_1D53F5F40(a1, (uint64_t)&v20, 8, a5, a3 + a4 - 8) != 8)
    goto LABEL_22;
  if (v20 == 77 && BYTE1(v20) == 77 && !BYTE2(v20) && BYTE3(v20) == 42)
  {
    v12 = bswap32(HIDWORD(v20));
    v13 = 1;
LABEL_15:
    v14 = v12;
    v15 = a3 - v12;
    *(_QWORD *)(a1 + 24) = v12;
    *(_BYTE *)(a1 + 32) = v13;
    goto LABEL_16;
  }
  if (v20 != 73 || BYTE1(v20) != 73 || BYTE2(v20) != 42)
  {
    v13 = a6;
    v15 = a5;
    v14 = a3;
    goto LABEL_16;
  }
  v13 = a6;
  v15 = a5;
  v14 = a3;
  if (!BYTE3(v20))
  {
    v13 = 0;
    v12 = HIDWORD(v20);
    goto LABEL_15;
  }
LABEL_16:
  v16 = v13 != 0;
LABEL_17:
  sub_1D53FA480((_BYTE *)a1, CFSTR("IFD0"), word_1E99A00F0, a3, a5, a6);
  sub_1D53FA480((_BYTE *)a1, v11, word_1E99A0168, v14, v15, v16);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  v17 = 1;
LABEL_18:

  return v17;
}

void sub_1D5404F90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5404FB0(uint64_t a1)
{
  void *v2;
  void *v3;
  _BOOL4 v4;
  void *v5;
  uint64_t v6;

  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)*MEMORY[0x1E0CBCF78];
  v4 = sub_1D53FAE98(v2, (void *)*MEMORY[0x1E0CBCF78], CFSTR("UniqueModelID"));

  if (!v4)
    return 0xFFFFFFFFLL;
  sub_1D53F63AC(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = sub_1D53FAF14(v5, v3, CFSTR("UniqueModelID"));

  return v6;
}

void sub_1D540503C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5405050(uint64_t a1)
{
  int v2;
  _BOOL8 v3;
  int v4;
  int v5;
  void *v7;
  void *v8;

  v2 = sub_1D5404FB0(a1);
  v3 = 0;
  if (v2 > 17825791)
  {
    if (v2 > 20971519)
    {
      if (v2 > 38338559)
      {
        if (v2 <= 41025535)
        {
          if (v2 == 38338560)
            return 1;
          v5 = 40894464;
        }
        else
        {
          if (v2 == 41025536 || v2 == 67371008)
            return 1;
          v5 = 50397184;
        }
      }
      else
      {
        if (v2 <= 26738687)
        {
          if (v2 != 20971520)
          {
            v4 = 23494656;
            goto LABEL_33;
          }
          return 1;
        }
        if (v2 == 26738688 || v2 == 35848192)
          return 1;
        v5 = 38141952;
      }
    }
    else if (v2 > 19464191)
    {
      if (v2 <= 20381695)
      {
        if (v2 == 19464192)
          return 1;
        v5 = 19988480;
      }
      else
      {
        if (v2 == 20381696 || v2 == 20447232)
          return 1;
        v5 = 20512768;
      }
    }
    else
    {
      if (v2 > 17956863)
      {
        if (v2 != 17956864)
        {
          if (v2 == 18087936)
            return v3;
          v5 = 18415616;
          goto LABEL_39;
        }
        return 1;
      }
      if (v2 == 17825792)
        return 1;
      v5 = 17891328;
    }
LABEL_39:
    if (v2 != v5)
    {
LABEL_42:
      sub_1D53F63AC(a1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53C3EE8(v7, (void *)*MEMORY[0x1E0CBD090], (void *)*MEMORY[0x1E0CBD0B8]);
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      v3 = sub_1D53F4BF8(v8, CFSTR("POWERSHOT"), 1);
      return v3;
    }
    return 1;
  }
  if (v2 > -2147483118)
  {
    if ((v2 + 2147483117) <= 0x3F && ((1 << (v2 - 19)) & 0x8000000A80000025) != 0
      || v2 == -2147483052)
    {
      return v3;
    }
    v4 = -2147483039;
  }
  else
  {
    if ((v2 + 2147483289) <= 0x29 && ((1 << (v2 - 103)) & 0x2060000E207) != 0)
      return v3;
    v4 = -2147483647;
  }
LABEL_33:
  if (v2 != v4)
    goto LABEL_42;
  return v3;
}

void sub_1D54052AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1D54052C8(uint64_t a1, int a2)
{
  int v2;
  unsigned int v3;
  double v4;

  v2 = (a2 >> 31) | 1;
  v3 = ((_WORD)v2 * (_WORD)a2) & 0x1F;
  if (v3 == 12)
  {
    v4 = 0.333333333;
  }
  else if (v3 == 20)
  {
    v4 = 0.666666667;
  }
  else
  {
    v4 = (double)v3 * 0.03125;
  }
  return (v4 + (double)((__int16)(v2 * a2 + (((__int16)(v2 * a2) >> 26) & 0x1F)) >> 5)) * (double)v2;
}

void sub_1D5405334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  int64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  BOOL v23;
  unsigned int v24;
  _WORD *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v31;
  float v32;
  float v33;
  void *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  double v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *__p;
  _BYTE *v67;

  v6 = *(_DWORD *)(a4 + 4);
  if (v6 >= 0xC8)
    v7 = 200;
  else
    v7 = v6;
  v8 = *(unsigned __int16 *)(a4 + 2);
  if (v8 <= 0x6F)
  {
    v9 = v8 == 8 || v8 == 3;
    if (v9 && v7 >= 3)
    {
      sub_1D52853F0(&__p, v7);
      v16 = *(_DWORD *)(a4 + 8);
      v17 = bswap32(v16);
      if (a6)
        v18 = v17;
      else
        v18 = v16;
      v15 = v67 - (_BYTE *)__p;
      if (sub_1D53F5F40(a1, (uint64_t)__p, v67 - (_BYTE *)__p, a5, v18) == v15)
      {
        if (a6)
        {
          v19 = __p;
          if (v67 != __p)
          {
            v20 = (v67 - (_BYTE *)__p) >> 1;
            do
            {
              *v19 = bswap32((unsigned __int16)*v19) >> 16;
              ++v19;
              --v20;
            }
            while (v20);
          }
        }
        sub_1D53FA1B8(a1, 0);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = (void *)*MEMORY[0x1E0CBCBC8];
        v23 = sub_1D5297D80(v21, (void *)*MEMORY[0x1E0CBCBC8]);

        if (!v23)
        {
          v25 = __p;
          LOWORD(v24) = *((_WORD *)__p + 1);
          v26 = exp2f((float)v24 * 0.03125);
          v27 = v26 * 100.0;
          LOWORD(v26) = v25[2];
          v28 = (float)(exp2f((float)LODWORD(v26) * 0.03125) * 100.0) * 0.03125;
          v29 = fabsf(v28);
          if (fabsf(v27) != INFINITY && v29 != INFINITY)
          {
            v31 = (float)(v27 * v28) / 100.0;
            v32 = 4000000000.0;
            if (v31 <= 4000000000.0)
              v32 = v31;
            if (v31 >= 0.0)
              v33 = v32;
            else
              v33 = 0.0;
            sub_1D53FA1B8(a1, 1);
            v34 = (void *)objc_claimAutoreleasedReturnValue();
            sub_1D53FA234(v34, v22);
            v35 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v36, rintf(v33), v37, v38);
            v39 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v35, v40, (uint64_t)v39, v41, v42);

          }
        }
        if (v7 >= 8)
        {
          sub_1D53F63AC(a1);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v44, *((unsigned __int16 *)__p + 7), v45, v46);
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D52DFEFC(v43, (void *)*MEMORY[0x1E0CBCF78], (void *)*MEMORY[0x1E0CBC8C0], v47);

          if (v7 >= 0xF)
          {
            if ((unsigned __int16)(*((_WORD *)__p + 14) - 12288) <= 7u)
            {
              v48 = dword_1D545AD84[(__int16)(*((_WORD *)__p + 14) - 12288)];
              sub_1D53F63AC(a1);
              v49 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v50, v48, v51, v52);
              v53 = (void *)objc_claimAutoreleasedReturnValue();
              sub_1D52DFEFC(v49, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCFA8], v53);

            }
            if (v7 >= 0x10)
            {
              v54 = *((__int16 *)__p + 15);
              v55 = (v54 >> 31) | 1;
              v56 = v54 * v55;
              v57 = (v54 * v55) & 0x1F;
              v58 = (v56 & 0x1F) - 10;
              if (v58 < 0xD && ((0x1C07u >> v58) & 1) != 0)
                v59 = dbl_1D545ADA8[v58];
              else
                v59 = (double)v57 * 0.03125;
              sub_1D53F63AC(a1);
              v60 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v61, v62, v63, v64, (v59 + (double)((int)((v56 + (((__int16)v56 >> 26) & 0x1F)) << 16) >> 21)) * (double)v55);
              v65 = (void *)objc_claimAutoreleasedReturnValue();
              sub_1D52DFEFC(v60, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCA38], v65);

            }
          }
        }
      }
      if (__p)
      {
        v67 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1D54056DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1D5405754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  int64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  _WORD *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  unsigned int v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  unsigned int v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  unsigned int v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  unsigned int v76;
  uint64_t v77;
  void *v78;
  void *v79;
  BOOL v80;
  void *v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  unsigned int v97;
  uint64_t v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  int v109;
  void *v110;
  void *v111;
  int v112;
  int v113;
  int v114;
  unsigned int v115;
  double v116;
  double v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  BOOL v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  void *v133;
  const char *v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  double v140;
  long double v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  const char *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  void *v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  void *__p;
  _BYTE *v157;

  v6 = *(_DWORD *)(a4 + 4);
  if (v6 >= 0xC8)
    v7 = 200;
  else
    v7 = v6;
  v8 = *(unsigned __int16 *)(a4 + 2);
  if (v8 <= 0x6F)
  {
    v9 = v8 == 8 || v8 == 3;
    if (v9 && v7 >= 3)
    {
      sub_1D52853F0(&__p, v7);
      v17 = *(_DWORD *)(a4 + 8);
      v18 = bswap32(v17);
      if (a6)
        v19 = v18;
      else
        v19 = v17;
      v16 = v157 - (_BYTE *)__p;
      if (sub_1D53F5F40(a1, (uint64_t)__p, v157 - (_BYTE *)__p, a5, v19) != v16)
        goto LABEL_102;
      if (a6)
      {
        v20 = __p;
        if (v157 != __p)
        {
          v21 = (v157 - (_BYTE *)__p) >> 1;
          do
          {
            *v20 = bswap32((unsigned __int16)*v20) >> 16;
            ++v20;
            --v21;
          }
          while (v21);
        }
      }
      if (v7 < 6)
        goto LABEL_102;
      sub_1D53F63AC(a1);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6410(a3);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v24, *((unsigned __int16 *)__p + 5), v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v22, v23, CFSTR("ContinuousDrive"), v27);

      if (v7 < 8)
        goto LABEL_102;
      v28 = *((__int16 *)__p + 7);
      if (v28 <= 6)
      {
        v29 = dword_1D545AE10[v28];
        sub_1D53F63AC(a1);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v31, v29, v32, v33);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D52DFEFC(v30, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCFA8], v34);

      }
      if (v7 < 0xC)
        goto LABEL_102;
      v35 = *((__int16 *)__p + 11);
      sub_1D53F63AC(a1);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v37, v35, v38, v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v36, CFSTR("{PictStyleSetting}"), CFSTR("PictureStyle"), v40);

      if (v7 < 0xE)
        goto LABEL_102;
      v42 = *((__int16 *)__p + 13);
      if ((int)v42 >= 0)
        v43 = *((__int16 *)__p + 13);
      else
        v43 = -(int)v42;
      if (v43 <= 0xF)
      {
        sub_1D53F63AC(a1);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v45, v42, v46, v47);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D52DFEFC(v44, CFSTR("{PictStyleSetting}"), (void *)*MEMORY[0x1E0CBCB28], v48);

      }
      if (v7 < 0xF)
        goto LABEL_102;
      v49 = *((__int16 *)__p + 14);
      if ((int)v49 >= 0)
        v50 = *((__int16 *)__p + 14);
      else
        v50 = -(int)v49;
      if (v50 <= 0xF)
      {
        sub_1D53F63AC(a1);
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v52, v49, v53, v54);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D52DFEFC(v51, CFSTR("{PictStyleSetting}"), (void *)*MEMORY[0x1E0CBCC40], v55);

      }
      if (v7 < 0x10)
        goto LABEL_102;
      v56 = *((__int16 *)__p + 15);
      if ((int)v56 >= 0)
        v57 = *((__int16 *)__p + 15);
      else
        v57 = -(int)v56;
      if (v57 <= 0xF)
      {
        sub_1D53F63AC(a1);
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v59, v56, v60, v61);
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D52DFEFC(v58, CFSTR("{PictStyleSetting}"), (void *)*MEMORY[0x1E0CBCC68], v62);

      }
      if (v7 < 0x29)
      {
        if (v7 < 0x11)
        {
LABEL_102:
          if (__p)
          {
            v157 = __p;
            operator delete(__p);
          }
          return;
        }
      }
      else
      {
        sub_1D5404D04(v41, *((unsigned __int16 *)__p + 40));
        v63 = (void *)objc_claimAutoreleasedReturnValue();

        if (v63)
        {
          sub_1D53F63AC(a1);
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v65, *((unsigned __int16 *)__p + 40), v66, v67);
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D52DFEFC(v64, CFSTR("{PictStyleSetting}"), CFSTR("PhotoEffect"), v68);

        }
        if (v7 >= 0x2B)
        {
          v69 = *((__int16 *)__p + 42);
          v70 = (int)v69 >= 0 ? *((__int16 *)__p + 42) : -(int)v69;
          if (v70 <= 0xF)
          {
            sub_1D53F63AC(a1);
            v71 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v72, v69, v73, v74);
            v75 = (void *)objc_claimAutoreleasedReturnValue();
            sub_1D52DFEFC(v71, CFSTR("{PictStyleSetting}"), CFSTR("ColorTone"), v75);

          }
        }
      }
      v76 = *((unsigned __int16 *)__p + 16);
      if (v76 != 0x7FFF)
      {
        v77 = v76 - 0x4000;
        if (v76 > 0x4000)
        {
          sub_1D53FA1B8(a1, 0);
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          v79 = (void *)*MEMORY[0x1E0CBCBC8];
          v80 = sub_1D5297D80(v78, (void *)*MEMORY[0x1E0CBCBC8]);

          if (!v80)
          {
            sub_1D53FA1B8(a1, 1);
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            sub_1D533BA50(v81, v79);
            v82 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v83, v77, v84, v85);
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v82, v87, (uint64_t)v86, v88, v89);

          }
        }
      }
      if (v7 < 0x14)
        goto LABEL_102;
      v90 = *((unsigned __int16 *)__p + 19);
      if (v90 <= 0x3000)
      {
        if (v90 != 8197)
        {
          if (v90 != 12288)
            goto LABEL_63;
          v91 = 0;
LABEL_62:
          sub_1D53F63AC(a1);
          v92 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v93, v91, v94, v95);
          v96 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D52DFEFC(v92, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCFA8], v96);

          goto LABEL_63;
        }
      }
      else if (v90 - 12289 >= 4)
      {
        if (v90 == 16390)
        {
          v91 = 2;
          goto LABEL_62;
        }
        if (v90 != 16385)
        {
LABEL_63:
          if (v7 >= 0x15)
          {
            v97 = *((unsigned __int16 *)__p + 20) - 1;
            if (v97 <= 4)
            {
              v98 = dword_1D545AE2C[(__int16)v97];
              sub_1D53F63AC(a1);
              v99 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v100, v98, v101, v102);
              v103 = (void *)objc_claimAutoreleasedReturnValue();
              sub_1D52DFEFC(v99, (void *)*MEMORY[0x1E0CBCB50], (void *)*MEMORY[0x1E0CBCB70], v103);

            }
            if (v7 >= 0x17)
            {
              if (*((_WORD *)__p + 22) && *((unsigned __int16 *)__p + 22) != 0xFFFF)
              {
                sub_1D53F63AC(a1);
                v104 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v105, *((unsigned __int16 *)__p + 22), v106, v107);
                v108 = (void *)objc_claimAutoreleasedReturnValue();
                sub_1D52DFEFC(v104, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCA48], v108);

              }
              if (v7 >= 0x1A)
              {
                if (*((_WORD *)__p + 25) && *((_WORD *)__p + 23) && *((_WORD *)__p + 24))
                  sub_1D53F9304(a1, (double)*((unsigned __int16 *)__p + 24) / (double)*((unsigned __int16 *)__p + 25), (double)*((unsigned __int16 *)__p + 23) / (double)*((unsigned __int16 *)__p + 25), 0.0, 0.0);
                if (v7 >= 0x1C)
                {
                  v109 = *((unsigned __int16 *)__p + 26);
                  sub_1D53F63AC(a1);
                  v110 = (void *)objc_claimAutoreleasedReturnValue();
                  sub_1D52E1FDC(v110, (void *)*MEMORY[0x1E0CBCF78], 0);
                  v111 = (void *)objc_claimAutoreleasedReturnValue();

                  if (v109 != 0xFFFF)
                  {
                    v112 = *((__int16 *)__p + 26);
                    v113 = (v112 >> 31) | 1;
                    v114 = v112 * v113;
                    v115 = v114 & 0x1F;
                    if (v115 == 12)
                    {
                      v116 = 0.333333333;
                    }
                    else if (v115 == 20)
                    {
                      v116 = 0.666666667;
                    }
                    else
                    {
                      v116 = (double)v115 * 0.03125;
                    }
                    v117 = exp2((v116 + (double)((int)((v114 + (((__int16)v114 >> 26) & 0x1F)) << 16) >> 21))* (double)v113* 0.5);
                    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v118, v119, v120, v121);
                    v122 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_setObject_forKeyedSubscript_(v111, v123, (uint64_t)v122, (uint64_t)CFSTR("MaxAperture"), v124);

                    sub_1D53FA1B8(a1, 0);
                    v125 = (void *)objc_claimAutoreleasedReturnValue();
                    v126 = *MEMORY[0x1E0CBCC00];
                    v127 = sub_1D5297D80(v125, (void *)*MEMORY[0x1E0CBCC00]);

                    if (!v127)
                    {
                      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v128, v129, v130, v131, v117);
                      v132 = (void *)objc_claimAutoreleasedReturnValue();
                      sub_1D53FA1B8(a1, 1);
                      v133 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_setObject_forKeyedSubscript_(v133, v134, (uint64_t)v132, v126, v135);

                    }
                    v136 = *((__int16 *)__p + 27);
                    v137 = (v136 >> 31) | 1;
                    v138 = v136 * v137;
                    v139 = v138 & 0x1F;
                    if (v139 == 12)
                    {
                      v140 = 0.333333333;
                    }
                    else if (v139 == 20)
                    {
                      v140 = 0.666666667;
                    }
                    else
                    {
                      v140 = (double)v139 * 0.03125;
                    }
                    v141 = exp2((v140 + (double)((int)((v138 + (((__int16)v138 >> 26) & 0x1F)) << 16) >> 21))* (double)v137* 0.5);
                    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v142, v143, v144, v145, (double)v141);
                    v146 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_setObject_forKeyedSubscript_(v111, v147, (uint64_t)v146, (uint64_t)CFSTR("MinAperture"), v148);

                  }
                  if (v7 >= 0x23)
                  {
                    v149 = *((__int16 *)__p + 34);
                    if (v149 > 3)
                      v150 = 3;
                    else
                      v150 = dword_1D545AAA0[v149];
                    sub_1D53F63AC(a1);
                    v151 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v152, v150, v153, v154);
                    v155 = (void *)objc_claimAutoreleasedReturnValue();
                    sub_1D52DFEFC(v151, (void *)*MEMORY[0x1E0CBCA28], CFSTR("ImageStabilization"), v155);

                  }
                }
              }
            }
          }
          goto LABEL_102;
        }
      }
      v91 = 1;
      goto LABEL_62;
    }
  }
}

void sub_1D54060C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1D54061F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v6;
  unsigned int v9;
  uint64_t v10;
  int64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  void *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unsigned int v31;
  unsigned __int16 v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  unsigned __int16 v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *__p;
  _BYTE *v46;

  v6 = *(unsigned __int16 *)(a4 + 2);
  if (v6 <= 0x6F && (v6 == 8 || v6 == 3))
  {
    v9 = *(_DWORD *)(a4 + 4);
    v10 = v9 >= 0x32 ? 50 : v9;
    if (v10 >= 3)
    {
      sub_1D52B2A2C(&__p, v10);
      v15 = *(_DWORD *)(a4 + 8);
      v16 = bswap32(v15);
      if (a6)
        v17 = v16;
      else
        v17 = v15;
      v14 = v46 - (_BYTE *)__p;
      if (sub_1D53F5F40(a1, (uint64_t)__p, v46 - (_BYTE *)__p, a5, v17) == v14)
      {
        v18 = *((unsigned __int16 *)__p + 2);
        v19 = bswap32(v18) >> 16;
        if (a6)
          LOWORD(v18) = v19;
        v20 = (__int16)v18;
        if ((int)v20 >= 2)
        {
          sub_1D53F63AC(a1);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = (void *)*MEMORY[0x1E0CBCA28];
          v23 = (void *)*MEMORY[0x1E0CBCA40];
          v24 = sub_1D53FAE98(v21, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCA40]);

          if (v24)
          {
            sub_1D53F63AC(a1);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            v24 = sub_1D53FAF14(v25, v22, v23);

          }
          if (v24 < (int)v20)
          {
            sub_1D53F63AC(a1);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v27, v20, v28, v29);
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            sub_1D52DFEFC(v26, v22, v23, v30);

          }
        }
        if (v10 >= 0xF)
        {
          v31 = bswap32(*((unsigned __int16 *)__p + 14)) >> 16;
          if (a6)
            v32 = v31;
          else
            v32 = *((_WORD *)__p + 14);
          if (v32 <= 4u)
          {
            sub_1D53F63AC(a1);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v34, (__int16)v32, v35, v36);
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            sub_1D52DFEFC(v33, CFSTR("{PictStyleSetting}"), CFSTR("FilterEffect"), v37);

          }
          if (v10 >= 0x10)
          {
            v38 = bswap32(*((unsigned __int16 *)__p + 15)) >> 16;
            if (a6)
              v39 = v38;
            else
              v39 = *((_WORD *)__p + 15);
            if (v39 <= 4u)
            {
              sub_1D53F63AC(a1);
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v41, (__int16)v39, v42, v43);
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              sub_1D52DFEFC(v40, CFSTR("{PictStyleSetting}"), CFSTR("ToningEffect"), v44);

            }
          }
        }
      }
      if (__p)
      {
        v46 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1D5406490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1D5406508(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;

  v19 = a2;
  v11 = sub_1D53F732C(a1, v19, a3, a4, a5, a6);
  if ((_DWORD)v11 != -1)
  {
    sub_1D53F63AC(a1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6410(a3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6390(a3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v15, v11, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v12, v13, v14, v18);

  }
}

void sub_1D54065EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1D5406624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  __int16 v26;
  unsigned int v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unsigned __int16 v33;
  unsigned int v34;
  void *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unsigned __int16 v41;
  int v42;

  v10 = *(unsigned int *)(a4 + 4);
  v11 = *(_DWORD *)(a4 + 8);
  v12 = bswap32(v11);
  if (a6)
    v13 = v12;
  else
    v13 = v11;
  v14 = *(unsigned __int16 *)(a4 + 2);
  if (v14 > 0x6F)
    v15 = 0;
  else
    v15 = qword_1D545ACC8[v14];
  v42 = 0;
  v16 = v15 * v10;
  v41 = 0;
  v17 = sub_1D5404FB0(a1);
  if (v17 != -2147483275 && v17 != -2147483255)
  {
    if (v16 < 6)
      return;
    if (sub_1D53F5F40(a1, (uint64_t)&v42, 2, a5, v13 + 4) == 2)
    {
      LOWORD(v18) = v42;
      v19 = bswap32((unsigned __int16)v42) >> 16;
      if (a6)
        LOWORD(v18) = v19;
      LOWORD(v42) = v18;
      if ((v18 & 0x8000u) != 0)
        v18 = -(__int16)v18;
      if ((unsigned __int16)v18 <= 0xFu)
      {
        sub_1D53F63AC(a1);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6410(a3);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v22, (__int16)v42, v23, v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D52DFEFC(v20, v21, (void *)*MEMORY[0x1E0CBCC68], v25);

      }
    }
  }
  if (v16 < 0x16)
  {
    if (v16 < 8)
      return;
  }
  else if (sub_1D53F5F40(a1, (uint64_t)&v42 + 2, 2, a5, v13 + 20) == 2)
  {
    v26 = HIWORD(v42);
    v27 = bswap32(HIWORD(v42)) >> 16;
    if (a6)
      v26 = v27;
    HIWORD(v42) = v26;
    sub_1D53F63AC(a1);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v29, HIWORD(v42), v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v28, CFSTR("{PictStyleNormalized}"), CFSTR("PictureStyle"), v32);

  }
  if (sub_1D53F5F40(a1, (uint64_t)&v41, 2, a5, v13 + 6) == 2)
  {
    v33 = v41;
    v34 = bswap32(v41) >> 16;
    if (a6)
      v33 = v34;
    v41 = v33;
    sub_1D53F63AC(a1);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6410(a3);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v37, (__int16)v41, v38, v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v35, v36, CFSTR("SharpnessFreq"), v40);

  }
}

void sub_1D54068C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D5406908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int16 v20;
  unint64_t v21;
  __int16 v22;
  unsigned int v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  int v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  int v41;
  int v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  int v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  int v54;
  int v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  int v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  int v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  int v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  char v79;
  unsigned __int16 v80;
  unsigned int v81;
  void *v82;
  unsigned int v83;
  double v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  char v90;
  unsigned __int16 v91;
  unsigned int v92;
  void *v93;
  unsigned int v94;
  double v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  char v101;
  unsigned int v102;
  unsigned int v103;
  char v104;
  uint64_t v105;
  unsigned int v106;
  void *v107;
  void *v108;
  void *v109;
  signed int v110;
  uint64_t v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v132;
  char v133;
  char v134;
  char v135;
  char v136;
  char v137;
  unsigned __int16 v138;
  unsigned __int16 v139;
  unsigned __int8 v140;
  int v141;
  int v142;
  unsigned __int8 v143[65];
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a4 + 8);
  v9 = bswap32(v8);
  if (a6)
    v10 = v9;
  else
    v10 = v8;
  v11 = *(unsigned __int16 *)(a4 + 2);
  if (v11 > 0x6F)
    v12 = 0;
  else
    v12 = qword_1D545ACC8[v11];
  v13 = *(unsigned int *)(a4 + 4);
  v141 = 0;
  v142 = 0;
  v140 = 0;
  v139 = 0;
  v138 = 0;
  v14 = sub_1D5404FB0(a1);
  if (v14 > -2147483113)
  {
    if (v14 <= -2147483053)
    {
      if (v14 <= -2147483057)
      {
        if (v14 != -2147483112)
        {
          if (v14 != -2147483086)
            return;
          v128 = 0;
          v124 = 0;
          HIDWORD(v129) = 1;
          v130 = 0;
          v19 = 118;
          v127 = 119;
          v126 = 117;
          v17 = 116;
          v18 = 115;
LABEL_36:
          v117 = 0xFFFFFFFFLL;
          v15 = 12;
          v119 = 1;
          v118 = 0xFFFFFFFFLL;
          v121 = 1;
          v120 = 0xFFFFFFFFLL;
          LODWORD(v129) = 1;
          HIDWORD(v132) = 1;
          v16 = 0xFFFFFFFFLL;
LABEL_47:
          v125 = 0xFFFFFFFFLL;
          goto LABEL_48;
        }
        v128 = 0;
        v129 = 0x100000000;
        v132 = 0;
        v130 = 0;
        v122 = 82;
        v123 = 80;
        v125 = 25;
        v18 = 167;
        v117 = 0xFFFFFFFFLL;
        v15 = 230;
        goto LABEL_52;
      }
      if (v14 != -2147483056)
      {
        if (v14 != -2147483054)
          return;
        v128 = 0;
        v129 = 0x100000000;
        v132 = 0;
        v130 = 0;
        v122 = 82;
        v123 = 80;
        v125 = 25;
        v18 = 171;
        v117 = 0xFFFFFFFFLL;
        v15 = 246;
        goto LABEL_52;
      }
      v130 = 0;
      v129 = 0;
      v132 = 0;
      v128 = 0;
      v119 = 1;
      v122 = 86;
      v123 = 84;
      v125 = 25;
      v117 = 0xFFFFFFFFLL;
      v15 = 274;
    }
    else
    {
      if (v14 <= -2147483025)
      {
        if (v14 == -2147483052)
        {
          v129 = 0;
          v132 = 0;
          v128 = 0;
          v130 = 1;
          v122 = 69;
          v123 = 67;
          v125 = 24;
          v18 = 0xFFFFFFFFLL;
          v117 = 2359;
          v15 = 226;
        }
        else
        {
          if (v14 != -2147483039)
            return;
          v128 = 0;
          v129 = 0x100000000;
          v132 = 0;
          v130 = 0;
          v122 = 82;
          v123 = 80;
          v125 = 25;
          v18 = 167;
          v117 = 0xFFFFFFFFLL;
          v15 = 234;
        }
        goto LABEL_52;
      }
      switch(v14)
      {
        case -2147483024:
          v128 = 0;
          v129 = 0x100000000;
          v132 = 0;
          v130 = 0;
          v122 = 86;
          v123 = 84;
          v125 = 25;
          v18 = 176;
          v117 = 0xFFFFFFFFLL;
          v15 = 255;
          goto LABEL_52;
        case -2147483007:
          v130 = 0;
          v129 = 0;
          v132 = 0;
          v128 = 0;
          v119 = 1;
          v122 = 86;
          v123 = 84;
          v125 = 25;
          v117 = 0xFFFFFFFFLL;
          v15 = 335;
          break;
        case -2147483001:
          v130 = 0;
          v129 = 0;
          v132 = 0;
          v128 = 0;
          v119 = 1;
          v122 = 87;
          v123 = 85;
          v125 = 25;
          v117 = 0xFFFFFFFFLL;
          v15 = 232;
          break;
        default:
          return;
      }
    }
    v18 = 0xFFFFFFFFLL;
    goto LABEL_55;
  }
  if (v14 > -2147483275)
  {
    if (v14 > -2147483249)
    {
      if (v14 != -2147483248)
      {
        if (v14 != -2147483117)
        {
          if (v14 != -2147483115)
            return;
          goto LABEL_40;
        }
        v121 = 0;
        v128 = 0;
        v129 = 0x100000000;
        HIDWORD(v132) = 0;
        v130 = 0;
        v125 = 23;
        v120 = 208;
        v18 = 108;
        v117 = 0xFFFFFFFFLL;
        v15 = 151;
        v119 = 1;
        v118 = 0xFFFFFFFFLL;
        v17 = 0xFFFFFFFFLL;
        v126 = 0xFFFFFFFFLL;
        v127 = 0xFFFFFFFFLL;
        v19 = 0xFFFFFFFFLL;
        v16 = 0xFFFFFFFFLL;
        v124 = 1;
LABEL_48:
        LOBYTE(v132) = 1;
        v123 = 0xFFFFFFFFLL;
        v122 = 0xFFFFFFFFLL;
        goto LABEL_57;
      }
      v129 = 0;
      v132 = 0;
      v128 = 0;
      v130 = 1;
      v122 = 69;
      v123 = 67;
      v125 = 24;
      v18 = 0xFFFFFFFFLL;
      v117 = 2347;
      v15 = 214;
      goto LABEL_52;
    }
    if (v14 != -2147483274)
    {
      v20 = 392;
LABEL_34:
      if (v14 != (v20 | 0x80000000))
        return;
      v128 = 0;
      v124 = 0;
      HIDWORD(v129) = 1;
      v130 = 0;
      v19 = 110;
      v127 = 111;
      v126 = 115;
      v17 = 114;
      v18 = 108;
      goto LABEL_36;
    }
    v129 = 0;
    v132 = 0;
    v128 = 0;
    v130 = 1;
    v122 = 69;
    v123 = 67;
    v125 = 24;
    v18 = 0xFFFFFFFFLL;
    v117 = 2355;
    v15 = 222;
LABEL_52:
    v119 = 1;
LABEL_55:
    v118 = 0xFFFFFFFFLL;
    goto LABEL_56;
  }
  if (v14 <= -2147483288)
  {
    if (v14 == -2147483647)
    {
      HIDWORD(v132) = 0;
      v124 = 0;
      HIDWORD(v129) = 1;
      v130 = 0;
      v16 = 65;
      v17 = 66;
      v18 = 75;
    }
    else
    {
      if (v14 != -2147483289)
        return;
      HIDWORD(v132) = 0;
      v124 = 0;
      HIDWORD(v129) = 1;
      v130 = 0;
      v16 = 71;
      v17 = 72;
      v18 = 81;
    }
    v117 = 0xFFFFFFFFLL;
    v15 = 13;
    v119 = 1;
    v118 = 0xFFFFFFFFLL;
    v121 = 1;
    v120 = 0xFFFFFFFFLL;
    v126 = 0xFFFFFFFFLL;
    v127 = 0xFFFFFFFFLL;
    v19 = 0xFFFFFFFFLL;
    v128 = 1;
    LODWORD(v129) = 1;
    goto LABEL_47;
  }
  if (v14 != -2147483287)
  {
    v20 = 372;
    goto LABEL_34;
  }
LABEL_40:
  v119 = 0;
  v128 = 0;
  v129 = 0x100000000;
  v132 = 0;
  v130 = 0;
  v122 = 69;
  v123 = 67;
  v125 = 24;
  v118 = 374;
  v18 = 134;
  v117 = 0xFFFFFFFFLL;
  v15 = 273;
LABEL_56:
  v121 = 1;
  v120 = 0xFFFFFFFFLL;
  v17 = 0xFFFFFFFFLL;
  v126 = 0xFFFFFFFFLL;
  v127 = 0xFFFFFFFFLL;
  v19 = 0xFFFFFFFFLL;
  v16 = 0xFFFFFFFFLL;
  v124 = 1;
LABEL_57:
  v21 = v12 * v13;
  if (v12 * v13 >= (unint64_t)(v15 + 2) && sub_1D53F5F40(a1, (uint64_t)&v141, 2, a5, v15 + v10) == 2)
  {
    v22 = v141;
    v23 = bswap32((unsigned __int16)v141) >> 16;
    if (!a6)
      v22 = v23;
    LOWORD(v141) = v22;
    if ((unsigned __int16)(v22 - 1) <= 0xFFFDu)
    {
      sub_1D53F63AC(a1);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v25, (unsigned __int16)v141, v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v24, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCA48], v28);

      if ((v130 & 1) == 0)
        goto LABEL_68;
LABEL_65:
      v29 = sub_1D53F5F40(a1, (uint64_t)v143, 64, a5, v117 + v10);
      if (v29 <= 0x40)
      {
        v143[v29] = 0;
        if (!sub_1D53F5D30(a1, v143))
        {
          sub_1D53F63AC(a1);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v31, (uint64_t)v143, v32, v33);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D52DFEFC(v30, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCA58], v34);

        }
      }
      goto LABEL_68;
    }
  }
  if (v130)
    goto LABEL_65;
LABEL_68:
  v143[0] = 0;
  v35 = HIDWORD(v129);
  if (v21 <= v18)
    v35 = 0;
  if (v35 == 1 && sub_1D53F5F40(a1, (uint64_t)v143, 1, a5, v18 + v10) == 1)
  {
    sub_1D53F63AC(a1);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v37, v143[0], v38, v39);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v36, CFSTR("{PictStyleNormalized}"), CFSTR("PictureStyle"), v40);

  }
  v137 = 0;
  v41 = v129;
  if (v21 <= v17)
    v41 = 0;
  if (v41 == 1 && sub_1D53F5F40(a1, (uint64_t)&v137, 1, a5, v17 + v10) == 1)
  {
    LOBYTE(v42) = v137;
    if (v137 < 0)
      v42 = -v137;
    if (v42 <= 0xFu)
    {
      sub_1D53F63AC(a1);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v44, v137, v45, v46);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v43, CFSTR("{PictStyleSetting}"), (void *)*MEMORY[0x1E0CBCC68], v47);

    }
  }
  v136 = 0;
  v48 = v128;
  if (v21 <= v16)
    v48 = 0;
  if (v48 == 1 && sub_1D53F5F40(a1, (uint64_t)&v136, 1, a5, v16 + v10) == 1)
  {
    sub_1D53F63AC(a1);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v50, v136, v51, v52);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v49, CFSTR("{PictStyleSetting}"), CFSTR("SharpnessFreq"), v53);

  }
  v135 = 0;
  v54 = HIDWORD(v132);
  if (v21 <= v19)
    v54 = 0;
  if (v54 == 1 && sub_1D53F5F40(a1, (uint64_t)&v135, 1, a5, v19 + v10) == 1)
  {
    LOBYTE(v55) = v135;
    if (v135 < 0)
      v55 = -v135;
    if (v55 <= 0xFu)
    {
      sub_1D53F63AC(a1);
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v57, v135, v58, v59);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v56, CFSTR("{PictStyleSetting}"), (void *)*MEMORY[0x1E0CBCC40], v60);

    }
  }
  v134 = 0;
  v61 = HIDWORD(v132);
  if (v21 <= v127)
    v61 = 0;
  if (v61 == 1 && sub_1D53F5F40(a1, (uint64_t)&v134, 1, a5, v127 + v10) == 1)
  {
    sub_1D53F63AC(a1);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v63, v134, v64, v65);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v62, CFSTR("{PictStyleSetting}"), CFSTR("ColorTone"), v66);

  }
  v133 = 0;
  v67 = HIDWORD(v132);
  if (v21 <= v126)
    v67 = 0;
  if (v67 == 1 && sub_1D53F5F40(a1, (uint64_t)&v133, 1, a5, v126 + v10) == 1)
  {
    sub_1D53F63AC(a1);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v69, v133, v70, v71);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v68, CFSTR("{PictStyleSetting}"), (void *)*MEMORY[0x1E0CBCB28], v72);

  }
  v73 = v124;
  if (v21 <= v125)
    v73 = 0;
  if (v73 == 1 && sub_1D53F5F40(a1, (uint64_t)&v140, 1, a5, v125 + v10) == 1)
  {
    sub_1D53F63AC(a1);
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v75, v140 - 128, v76, v77);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v74, (void *)*MEMORY[0x1E0CBCF78], CFSTR("CameraTemperatur"), v78);

  }
  v79 = v132;
  if (v21 < v123 + 2)
    v79 = 1;
  if ((v79 & 1) == 0 && sub_1D53F5F40(a1, (uint64_t)&v139, 2, a5, v123 + v10) == 2)
  {
    v80 = v139;
    v81 = bswap32(v139) >> 16;
    if (!a6)
      v80 = v81;
    v139 = v80;
    sub_1D53F63AC(a1);
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    LOWORD(v83) = v139;
    *(float *)&v84 = (float)v83 / 100.0;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v85, v86, v87, v88, v84);
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v82, (void *)*MEMORY[0x1E0CBCF78], CFSTR("FocusDistanceUpper"), v89);

  }
  v90 = v132;
  if (v21 < v122 + 2)
    v90 = 1;
  if ((v90 & 1) == 0 && sub_1D53F5F40(a1, (uint64_t)&v138, 2, a5, v122 + v10) == 2)
  {
    v91 = v138;
    v92 = bswap32(v138) >> 16;
    if (!a6)
      v91 = v92;
    v138 = v91;
    sub_1D53F63AC(a1);
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    LOWORD(v94) = v138;
    *(float *)&v95 = (float)v94 / 100.0;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v96, v97, v98, v99, v95);
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v93, (void *)*MEMORY[0x1E0CBCF78], CFSTR("FocusDistanceLower"), v100);

  }
  v101 = v121;
  if (v21 < v120 + 2)
    v101 = 1;
  if ((v101 & 1) != 0 || sub_1D53F5F40(a1, (uint64_t)&v141 + 2, 2, a5, v120 + v10) != 2)
  {
    v102 = 0;
  }
  else
  {
    LOWORD(v102) = HIWORD(v141);
    v103 = bswap32(HIWORD(v141)) >> 16;
    if (a6)
      LOWORD(v102) = v103;
    v102 = (unsigned __int16)v102;
    v142 = (unsigned __int16)v102;
  }
  v104 = v119;
  if (v21 < v118 + 4)
    v104 = 1;
  if ((v104 & 1) == 0)
  {
    v105 = sub_1D53F5F40(a1, (uint64_t)&v142, 4, a5, v118 + v10);
    v102 = v142;
    if (v105 == 4)
    {
      v106 = bswap32(v142);
      if (a6)
        v102 = v106;
      v142 = v102;
    }
  }
  if (v102 >= 2)
  {
    sub_1D53F63AC(a1);
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    v108 = (void *)*MEMORY[0x1E0CBCA28];
    v109 = (void *)*MEMORY[0x1E0CBCA40];
    v110 = sub_1D53FAF14(v107, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCA40]);

    v111 = v142;
    if (v142 > v110)
    {
      sub_1D53F63AC(a1);
      v112 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v113, v111, v114, v115);
      v116 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v112, v108, v109, v116);

    }
  }
}

void sub_1D540780C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5407960(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  unsigned int v17;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  char *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  unint64_t v31;
  unsigned int *i;
  unsigned int v33;
  unsigned int v34;
  unsigned int v36;
  void *v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  char *v46;
  void *__p;
  _BYTE *v48;
  unsigned __int16 v49;

  v11 = a2;
  v49 = 0;
  v12 = *(_DWORD *)(a4 + 8);
  v13 = bswap32(v12);
  if (a6)
    v14 = v13;
  else
    v14 = v12;
  v15 = sub_1D53F5F40(a1, (uint64_t)&v49, 2, a5, v14);
  v16 = v49;
  v17 = bswap32(v49) >> 16;
  if (a6)
    v16 = v17;
  v49 = v16;
  if (v15 == 2 && v16 >= 7u && v16 <= 0xFFFu && (v16 & 3) == 0)
  {
    sub_1D53FEA94(&__p, v16);
    v20 = *(_DWORD *)(a4 + 8);
    v21 = bswap32(v20);
    if (a6)
      v22 = v21;
    else
      v22 = v20;
    v23 = sub_1D53F5F40(a1, (uint64_t)__p, v48 - (_BYTE *)__p, a5, v22);
    v24 = __p;
    if (v23 == v48 - (_BYTE *)__p)
    {
      v45 = v11;
      if (v23 >= 9)
      {
        v46 = (char *)__p + v23;
        v25 = (char *)__p + 8;
        do
        {
          v26 = (unsigned int *)(v25 + 12);
          if (v25 + 12 > v46)
            break;
          v27 = *((_DWORD *)v25 + 1);
          v28 = bswap32(v27);
          if (a6)
            v27 = v28;
          v29 = (v27 & 3) == 0 && v27 >= 8;
          if (!v29 || v27 > v49)
            break;
          v31 = (unint64_t)v26 + v27 - 8;
          if (v31 > (unint64_t)v46)
            break;
          for (i = (unsigned int *)(v25 + 20); (unint64_t)i < v31; i = v26 + 2)
          {
            v33 = *v26;
            if (a6)
            {
              v33 = bswap32(v33);
              v34 = bswap32(v26[1]);
            }
            else
            {
              v34 = v26[1];
            }
            v26 = &i[v34];
            if (v34 >= v49 || (unint64_t)v26 > v31)
              goto LABEL_49;
            if (v33 == 2062)
            {
              v36 = *i;
              sub_1D53F63AC(a1);
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              v38 = bswap32(v36);
              if (a6)
                v39 = v38;
              else
                v39 = v36;
              sub_1D53F6410(a3);
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v41, v39, v42, v43);
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              sub_1D52DFEFC(v37, v40, CFSTR("AspectRatioInfo"), v44);

            }
          }
          v25 = (char *)v31;
        }
        while (v31 < (unint64_t)v46);
      }
LABEL_49:
      v24 = __p;
      v11 = v45;
    }
    if (v24)
    {
      v48 = v24;
      operator delete(v24);
    }
  }

}

void sub_1D5407BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D5407C00(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t *a5)
{
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;

  v8 = a3;
  v9 = v8;
  v10 = 0;
  v11 = 0x92000000DB0;
  if (a2 <= -2147483277)
  {
    if (a2 != -2147483647)
    {
      if (a2 != -2147483289)
        goto LABEL_22;
LABEL_8:
      v11 = 0xD0000001380;
    }
  }
  else if (a2 != -2147483276)
  {
    if (a2 != -2147483256)
    {
      if (a2 != -2147483086)
        goto LABEL_22;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_9:
  *a5 = v11;
  if (!v8)
    goto LABEL_21;
  v12 = sub_1D5407D7C(v8, 0);
  v13 = sub_1D5407D7C(v9, 1uLL);
  v14 = sub_1D5407D7C(v9, 2uLL);
  if (v12 <= 0x41)
    v15 = -529;
  else
    v15 = -522;
  v16 = v15 + 10 * v13 + v14;
  if (v12 > 0x42)
    v16 += 10;
  if (v12 > 0x43)
    v16 += 11;
  if (v12 > 0x44)
    v16 += 10;
  if (v16 < 0x2D)
  {
    v17 = dword_1D545AB24[v16];
    v18 = dword_1D545ABD8[v16];
    *(_DWORD *)a4 = v17;
    *(_DWORD *)(a4 + 4) = v18;
    *(_QWORD *)(a4 + 8) = 0xA400000076;
    v10 = 1;
  }
  else
  {
LABEL_21:
    v10 = 0;
  }
LABEL_22:

  return v10;
}

void sub_1D5407D68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5407D7C(void *a1, unint64_t a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  if (objc_msgSend_length(v3, v4, v5, v6, v7) <= a2)
    v11 = 0;
  else
    v11 = objc_msgSend_characterAtIndex_(v3, v8, a2, v9, v10);

  return v11;
}

void sub_1D5407DCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D5407DDC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  void *v8;

  v5 = a2;
  if (a2 >= objc_msgSend_length(CFSTR("A01 = 1 04  A02 = 1 08  A03 = 1 10  A04 = 1 20  A05 = 1 40  A06 = 1 80  A07 = 2 01  B01 = 2 08  B02 = 2 10  B03 = 2 20  B04 = 2 40  B05 = 2 80  B06 = 3 01  B07 = 3 02  B08 = 3 04  B09 = 3 08  B10 = 3 10  C01 = 3 20  C02 = 3 40  C03 = 3 80  C04 = 4 01  C05 = 4 02  C06 = 4 04  C07 = 4 08  C08 = 4 10  C09 = 4 20  C10 = 4 40  C11 = 4 80  D01 = 5 01  D02 = 5 02  D03 = 5 04  D04 = 5 08  D05 = 5 10  D06 = 5 20  D07 = 5 40  D08 = 5 80  D09 = 6 01  D10 = 6 02  E01 = 6 10  E02 = 6 20  E03 = 6 40  E04 = 6 80  E05 = 7 01  E06 = 7 02  E07 = 7 04  "), a2, a3, a4, a5)/ 0xCuLL)
  {
    v8 = 0;
  }
  else
  {
    objc_msgSend_substringWithRange_(CFSTR("A01 = 1 04  A02 = 1 08  A03 = 1 10  A04 = 1 20  A05 = 1 40  A06 = 1 80  A07 = 2 01  B01 = 2 08  B02 = 2 10  B03 = 2 20  B04 = 2 40  B05 = 2 80  B06 = 3 01  B07 = 3 02  B08 = 3 04  B09 = 3 08  B10 = 3 10  C01 = 3 20  C02 = 3 40  C03 = 3 80  C04 = 4 01  C05 = 4 02  C06 = 4 04  C07 = 4 08  C08 = 4 10  C09 = 4 20  C10 = 4 40  C11 = 4 80  D01 = 5 01  D02 = 5 02  D03 = 5 04  D04 = 5 08  D05 = 5 10  D06 = 5 20  D07 = 5 40  D08 = 5 80  D09 = 6 01  D10 = 6 02  E01 = 6 10  E02 = 6 20  E03 = 6 40  E04 = 6 80  E05 = 7 01  E06 = 7 02  E07 = 7 04  "), v6, 12 * v5, 12, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v8;
}

void sub_1D5407E3C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int8x16_t *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  int v62;
  char *v63;
  id v64;
  uint64_t v65;
  int v66;
  uint64_t v68;
  __int128 v69;
  void *__p;
  char *v71;
  char *v72;
  uint64_t v73;
  int8x16_t *v74;
  int8x16_t *v75;

  v9 = a2;
  v10 = *(unsigned __int16 *)(a4 + 2);
  if ((v10 - 112) >= 0xFFFFFF91)
  {
    v11 = qword_1D545ACC8[v10];
    v12 = v11 * *(unsigned int *)(a4 + 4);
    if (v12 <= 0x4000)
    {
      sub_1D5285340(&v74, v12);
      v13 = *(_DWORD *)(a4 + 8);
      v14 = bswap32(v13);
      if (a6)
        v15 = v14;
      else
        v15 = v13;
      v16 = sub_1D53F5F40(a1, (uint64_t)v74, (char *)v75 - (char *)v74, a5, v15);
      v17 = v74;
      if (v16 == (char *)v75 - (char *)v74)
      {
        v18 = sub_1D5404FB0(a1);
        v66 = sub_1D5405050(a1);
        v19 = v16 / v11;
        if (v16 / v11 >= 8)
        {
          if (a6)
            *v17 = vrev16q_s8(*v17);
          v20 = v17->u16[0];
          v21 = v20 >= v17->u16[1] ? v17->u16[1] : v17->u16[0];
          v65 = v21;
          v22 = v17->i16[5];
          LODWORD(v73) = v17->i16[4];
          HIDWORD(v73) = v22;
          v23 = v17->i16[6];
          v24 = v17->i16[7];
          sub_1D53FDE6C(a1, &v73, 1);
          if ((unsigned __int16)(v20 - 1) <= 0x62u)
          {
            v63 = (char *)a1;
            v64 = v9;
            v28 = 0;
            v29 = 0;
            __p = 0;
            v71 = 0;
            v72 = 0;
            do
            {
              v30 = v29 + 8;
              v31 = v29 + 8 + v20;
              if (v31 < v19)
              {
                if (a6)
                {
                  v17->i16[v30] = bswap32(v17->u16[v30]) >> 16;
                  v32 = bswap32(v17->u16[v31]) >> 16;
                }
                else
                {
                  LOWORD(v32) = v17->i16[v31];
                }
                v17->i16[v31] = v32;
                v33 = v17->i16[v30];
                v34 = (__int16)v32;
                if (v66)
                  v34 = -(__int16)v32;
                *(_QWORD *)&v69 = __PAIR64__(v34, v33);
                sub_1D5282DF0((_DWORD *)&v69 + 2, v23, v24);
                v35 = v71;
                if (v71 >= v72)
                {
                  v36 = (v71 - (_BYTE *)__p) >> 4;
                  v37 = v36 + 1;
                  if ((unint64_t)(v36 + 1) >> 60)
                    sub_1D5282B8C();
                  v38 = v72 - (_BYTE *)__p;
                  if ((v72 - (_BYTE *)__p) >> 3 > v37)
                    v37 = v38 >> 3;
                  if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
                    v39 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v39 = v37;
                  if (v39)
                    v40 = (char *)sub_1D5284334((uint64_t)&v72, v39);
                  else
                    v40 = 0;
                  v41 = &v40[16 * v36];
                  *(_OWORD *)v41 = v69;
                  v43 = (char *)__p;
                  v42 = v71;
                  v44 = v41;
                  if (v71 != __p)
                  {
                    do
                    {
                      *((_OWORD *)v44 - 1) = *((_OWORD *)v42 - 1);
                      v44 -= 16;
                      v42 -= 16;
                    }
                    while (v42 != v43);
                    v42 = (char *)__p;
                  }
                  v28 = v41 + 16;
                  __p = v44;
                  v71 = v41 + 16;
                  v72 = &v40[16 * v39];
                  if (v42)
                    operator delete(v42);
                }
                else
                {
                  *(_OWORD *)v71 = v69;
                  v28 = v35 + 16;
                }
                v71 = v28;
              }
              ++v29;
            }
            while (v29 != v20);
            v45 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            v49 = 0;
            v50 = 4 * v20 + 16;
            v51 = (char *)__p + 4;
            v52 = 2147484020;
            do
            {
              if (v50 + v45 < v16)
              {
                v25 = 0;
                v26 = (unsigned int *)v51;
                do
                {
                  if ((v18 == -2147483256 || v18 == -2147483276)
                    && (v28 - (_BYTE *)__p) >> 4 > (unint64_t)(v46 + v25)
                    && (v27 = *v26, (_DWORD)v27 == -1))
                  {
                    ++v49;
                  }
                  else
                  {
                    v27 = v74->u8[v50 + v45] >> v25;
                    v53 = v46 + v25 - v49;
                    v54 = 1 << v53;
                    v55 = (v53 & 0x40) == 0;
                    if ((v53 & 0x40) != 0)
                      v56 = 0;
                    else
                      v56 = 1 << v53;
                    if (v55)
                      v54 = 0;
                    v57 = v54 | v48;
                    v58 = v56 | v47;
                    if ((v27 & 1) != 0)
                    {
                      v47 = v58;
                      v48 = v57;
                    }
                  }
                  ++v25;
                  v26 += 4;
                }
                while (v25 != 8);
              }
              ++v45;
              v46 += 8;
              v51 += 128;
            }
            while (v45 != ((v20 - 1) >> 3) + 1);
            if (v18 != -2147483256 && v18 != -2147483276 || !(_DWORD)v65)
            {
LABEL_66:
              sub_1D53FDFE0(v63, v47, v48, 1);
              sub_1D53FDE38(v63, (uint64_t)&__p, 1);
              v9 = v64;
              if (__p)
              {
                v71 = (char *)__p;
                operator delete(__p);
              }
              goto LABEL_68;
            }
            v59 = 0;
            v60 = 0;
            while (1)
            {
              v69 = 0uLL;
              sub_1D5407DDC(v52, (const char *)(unsigned __int16)v60, v25, (uint64_t)v26, v27);
              v61 = (void *)objc_claimAutoreleasedReturnValue();
              v62 = sub_1D5407C00((uint64_t)v61, v18, v61, (uint64_t)&v69, &v68);

              if (v62)
              {
                v52 = (uint64_t)__p;
                if (v60 >= (v71 - (_BYTE *)__p) >> 4)
                {
                  if (__p)
                  {
                    v71 = (char *)__p;
                    operator delete(__p);
                  }
                  v9 = v64;
                  break;
                }
                *(_QWORD *)((char *)__p + v59) = v69;
              }
              ++v60;
              v59 += 16;
              if (v65 == v60)
                goto LABEL_66;
            }
          }
        }
LABEL_68:
        v17 = v74;
      }
      if (v17)
      {
        v75 = v17;
        operator delete(v17);
      }
    }
  }

}

void sub_1D54082D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);

  _Unwind_Resume(a1);
}

void sub_1D5408344(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  int8x16_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __CFString *v24;
  void *v25;
  uint64_t i;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int j;
  char v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int k;
  char v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  id v69;
  int v70;
  __int128 v71;
  void *__p;
  char *v73;
  char *v74;
  uint64_t v75;
  int8x16_t *v76;
  int8x16_t *v77;

  v10 = a2;
  v11 = *(unsigned __int16 *)(a4 + 2);
  if ((v11 - 112) >= 0xFFFFFF91)
  {
    v12 = qword_1D545ACC8[v11];
    v13 = v12 * *(unsigned int *)(a4 + 4);
    if (v13 <= 0x4000)
    {
      sub_1D5285340(&v76, v13);
      v14 = *(_DWORD *)(a4 + 8);
      v15 = bswap32(v14);
      if (a6)
        v16 = v15;
      else
        v16 = v14;
      v17 = sub_1D53F5F40((uint64_t)a1, (uint64_t)v76, (char *)v77 - (char *)v76, a5, v16);
      v18 = v76;
      if (v17 == (char *)v77 - (char *)v76)
      {
        v70 = sub_1D5405050((uint64_t)a1);
        v19 = v17 / v12;
        if (v19 >= 8)
        {
          if (a6)
            *v18 = vrev16q_s8(*v18);
          v20 = v18->i16[1];
          v21 = v18->u16[2];
          if (v21 >= v18->u16[3])
            v22 = v18->u16[3];
          else
            v22 = v18->u16[2];
          v23 = v18->i16[7];
          LODWORD(v75) = v18->i16[6];
          HIDWORD(v75) = v23;
          sub_1D53FDE6C((uint64_t)a1, &v75, 1);
          if (v20 > 5)
            v24 = CFSTR("UNKNOWN  AF MODE");
          else
            v24 = off_1E99A05F8[v20];
          sub_1D53F8CEC((uint64_t)a1, v24, 0, 0);
          switch((int)v20)
          {
            case 0:
              sub_1D53F63AC((uint64_t)a1);
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              sub_1D52DFEFC(v25, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCFA8], &unk_1E99CC030);
              goto LABEL_20;
            case 2:
            case 4:
              sub_1D53F63AC((uint64_t)a1);
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              sub_1D52DFEFC(v25, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCFA8], &unk_1E99CC048);
              goto LABEL_20;
            case 5:
              sub_1D53F63AC((uint64_t)a1);
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              sub_1D52DFEFC(v25, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCFA8], &unk_1E99CC060);
LABEL_20:

              break;
            default:
              break;
          }
          if ((unsigned __int16)(v21 - 1) <= 0x62u)
          {
            v69 = v10;
            __p = 0;
            v73 = 0;
            v74 = 0;
            if ((_DWORD)v22)
            {
              for (i = 0; i != v22; ++i)
              {
                v27 = i + 8;
                v28 = i + 8 + v21;
                if (v28 >= v19)
                {
                  v30 = 0;
                  v31 = 0;
                }
                else
                {
                  v29 = v18->u16[v27];
                  if (a6)
                  {
                    LOWORD(v29) = __rev16(v29);
                    LODWORD(v28) = bswap32(v18->u16[v28]) >> 16;
                  }
                  else
                  {
                    LOWORD(v28) = v18->i16[v28];
                  }
                  v30 = (__int16)v29;
                  v31 = (__int16)v28;
                }
                v32 = v27 + 2 * v21;
                v33 = v32 + v21;
                if (v32 + v21 >= v19)
                {
                  v34 = 0;
                  LODWORD(v33) = 0;
                }
                else
                {
                  v34 = v18->u16[v32];
                  if (a6)
                  {
                    LOWORD(v34) = __rev16(v34);
                    LODWORD(v33) = bswap32(v18->u16[v33]) >> 16;
                  }
                  else
                  {
                    LOWORD(v33) = v18->i16[v33];
                  }
                  v34 = (__int16)v34;
                  LODWORD(v33) = (__int16)v33;
                  if (v70)
                    LODWORD(v33) = -(__int16)v33;
                }
                *(_QWORD *)&v71 = __PAIR64__(v33, v34);
                sub_1D5282DF0((_DWORD *)&v71 + 2, v30, v31);
                v35 = v73;
                if (v73 >= v74)
                {
                  v37 = (v73 - (_BYTE *)__p) >> 4;
                  v38 = v37 + 1;
                  if ((unint64_t)(v37 + 1) >> 60)
                    sub_1D5282B8C();
                  v39 = v74 - (_BYTE *)__p;
                  if ((v74 - (_BYTE *)__p) >> 3 > v38)
                    v38 = v39 >> 3;
                  if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
                    v40 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v40 = v38;
                  if (v40)
                    v41 = (char *)sub_1D5284334((uint64_t)&v74, v40);
                  else
                    v41 = 0;
                  v42 = &v41[16 * v37];
                  *(_OWORD *)v42 = v71;
                  v44 = (char *)__p;
                  v43 = v73;
                  v45 = v42;
                  if (v73 != __p)
                  {
                    do
                    {
                      *((_OWORD *)v45 - 1) = *((_OWORD *)v43 - 1);
                      v45 -= 16;
                      v43 -= 16;
                    }
                    while (v43 != v44);
                    v43 = (char *)__p;
                  }
                  v36 = v42 + 16;
                  __p = v45;
                  v73 = v42 + 16;
                  v74 = &v41[16 * v40];
                  if (v43)
                    operator delete(v43);
                }
                else
                {
                  *(_OWORD *)v73 = v71;
                  v36 = v35 + 16;
                }
                v73 = v36;
              }
            }
            sub_1D53FDE38(a1, (uint64_t)&__p, 1);
            v10 = v69;
            if (__p)
            {
              v73 = (char *)__p;
              operator delete(__p);
            }
          }
          v46 = 4 * v21 + 8;
          if ((_DWORD)v22)
          {
            v47 = 0;
            v48 = 0;
            v49 = 0;
            v50 = 0;
            v51 = 2 * v46;
            v52 = (v22 - 1) >> 3;
            do
            {
              if (v51 + v48 < v17)
              {
                for (j = 0; j != 8; ++j)
                {
                  if (((v76->u8[v51 + v48] >> j) & 1) != 0)
                  {
                    v54 = v47 + j;
                    if ((v47 + j) > 0x7F)
                      goto LABEL_92;
                    v55 = 1 << v54;
                    v56 = (v54 & 0x40) == 0;
                    if ((((_BYTE)v47 + (_BYTE)j) & 0x40) != 0)
                      v57 = 0;
                    else
                      v57 = 1 << v54;
                    if (v56)
                      v55 = 0;
                    v50 |= v55;
                    v49 |= v57;
                  }
                }
              }
              ++v48;
              v47 += 8;
            }
            while (v48 != v52 + 1);
            v58 = (v52 + 2) >> 1;
          }
          else
          {
            v58 = 0;
            v49 = 0;
            v50 = 0;
          }
          sub_1D53FDFE0(a1, v49, v50, 1);
          v59 = 2 * (v46 + v58);
          if (v59 < v17)
          {
            if ((_DWORD)v22)
            {
              v60 = 0;
              v61 = 0;
              v62 = 0;
              v63 = 0;
              do
              {
                if (v59 + v61 < v17)
                {
                  for (k = 0; k != 8; ++k)
                  {
                    if (((v76->u8[v59 + v61] >> k) & 1) != 0)
                    {
                      v65 = v60 + k;
                      if ((v60 + k) > 0x7F)
                        goto LABEL_92;
                      v66 = 1 << v65;
                      v67 = (v65 & 0x40) == 0;
                      if ((((_BYTE)v60 + (_BYTE)k) & 0x40) != 0)
                        v68 = 0;
                      else
                        v68 = 1 << v65;
                      if (v67)
                        v66 = 0;
                      v63 |= v66;
                      v62 |= v68;
                    }
                  }
                }
                ++v61;
                v60 += 8;
              }
              while (v61 != ((v22 - 1) >> 3) + 1);
            }
            else
            {
              v62 = 0;
              v63 = 0;
            }
            sub_1D53FDE90(a1, v62, v63, 1);
          }
        }
LABEL_92:
        v18 = v76;
      }
      if (v18)
      {
        v77 = v18;
        operator delete(v18);
      }
    }
  }

}

void sub_1D54088B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;
  void *v22;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D5408930(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unsigned __int16 i;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  char v46;
  int v47;
  int v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  int v59;
  uint64_t v60;
  void *v61;
  char v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  int v74;
  id v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  void *__p;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD v83[2];
  unsigned __int8 *v84;
  unsigned __int8 *v85;

  v10 = a2;
  v11 = *(unsigned int *)(a4 + 4);
  v12 = *(unsigned __int16 *)(a4 + 2);
  if (v12 > 0x6F)
    v13 = 0;
  else
    v13 = qword_1D545ACC8[v12];
  if ((unint64_t)(v13 * v11) > 0x4000)
    goto LABEL_94;
  sub_1D5285340(&v84, v13 * v11);
  v14 = *(_DWORD *)(a4 + 8);
  v15 = bswap32(v14);
  if (a6)
    v16 = v15;
  else
    v16 = v14;
  v17 = sub_1D53F5F40((uint64_t)a1, (uint64_t)v84, v85 - v84, a5, v16);
  v18 = v84;
  if (v17 == v85 - v84)
  {
    v19 = sub_1D5404FB0((uint64_t)a1);
    if (v17 >= 8)
    {
      v23 = *v84;
      v24 = 88;
      if ((v23 | 0x40) == 0xFF)
      {
        v25 = 0;
        goto LABEL_11;
      }
      if (v23 >= 0x91)
        v37 = 0;
      else
        v37 = 130;
      v20 = 69;
      if (v23 >= 0x91)
        LODWORD(v24) = 88;
      else
        LODWORD(v24) = 69;
      if (v23 >= 0x82)
        v38 = v37;
      else
        v38 = 95;
      if (v23 < 0x82)
        LODWORD(v24) = 68;
      if (v23 >= 0x5F)
        v39 = v38;
      else
        v39 = 62;
      if (v23 < 0x5F)
        LODWORD(v24) = 67;
      if (v23 >= 0x3E)
        v40 = v39;
      else
        v40 = 31;
      if (v23 < 0x3E)
        LODWORD(v24) = 66;
      if (v23 >= 0x1F)
        v25 = v40;
      else
        v25 = 2;
      if (v23 >= 0x1F)
        v24 = v24;
      else
        v24 = 65;
      if (v25 <= v23)
      {
LABEL_11:
        v74 = v19;
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], (const char *)v20, (uint64_t)CFSTR("%c%.2d"), v21, v22, v24, (v23 - v25) >> 1);
        v26 = objc_claimAutoreleasedReturnValue();
        v30 = (void *)v26;
        v31 = 0;
        for (i = 0; ; ++i)
        {
          sub_1D5407DDC(v26, (const char *)i, v27, v28, v29);
          v33 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v33)
            break;
          objc_msgSend_substringWithRange_(v33, v34, 0, 3, v35);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          if (!sub_1D5408EBC(v30, v36, 0))
          {
            if ((i & 0x40) != 0)
              v41 = 0;
            else
              v41 = 1 << i;
            if ((i & 0x40) != 0)
              v42 = 1 << i;
            else
              v42 = 0;
            sub_1D53FDE90(a1, v41, v42, 0);

            break;
          }

          v31 = v33;
        }
        v75 = v10;
        v76 = a1;
        v43 = 0;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        while (sub_1D5407D7C(CFSTR("A01 = 1 04  A02 = 1 08  A03 = 1 10  A04 = 1 20  A05 = 1 40  A06 = 1 80  A07 = 2 01  B01 = 2 08  B02 = 2 10  B03 = 2 20  B04 = 2 40  B05 = 2 80  B06 = 3 01  B07 = 3 02  B08 = 3 04  B09 = 3 08  B10 = 3 10  C01 = 3 20  C02 = 3 40  C03 = 3 80  C04 = 4 01  C05 = 4 02  C06 = 4 04  C07 = 4 08  C08 = 4 10  C09 = 4 20  C10 = 4 40  C11 = 4 80  D01 = 5 01  D02 = 5 02  D03 = 5 04  D04 = 5 08  D05 = 5 10  D06 = 5 20  D07 = 5 40  D08 = 5 80  D09 = 6 01  D10 = 6 02  E01 = 6 10  E02 = 6 20  E03 = 6 40  E04 = 6 80  E05 = 7 01  E06 = 7 02  E07 = 7 04  "), v45))
        {
          v47 = sub_1D5407D7C(CFSTR("A01 = 1 04  A02 = 1 08  A03 = 1 10  A04 = 1 20  A05 = 1 40  A06 = 1 80  A07 = 2 01  B01 = 2 08  B02 = 2 10  B03 = 2 20  B04 = 2 40  B05 = 2 80  B06 = 3 01  B07 = 3 02  B08 = 3 04  B09 = 3 08  B10 = 3 10  C01 = 3 20  C02 = 3 40  C03 = 3 80  C04 = 4 01  C05 = 4 02  C06 = 4 04  C07 = 4 08  C08 = 4 10  C09 = 4 20  C10 = 4 40  C11 = 4 80  D01 = 5 01  D02 = 5 02  D03 = 5 04  D04 = 5 08  D05 = 5 10  D06 = 5 20  D07 = 5 40  D08 = 5 80  D09 = 6 01  D10 = 6 02  E01 = 6 10  E02 = 6 20  E03 = 6 40  E04 = 6 80  E05 = 7 01  E06 = 7 02  E07 = 7 04  "), v45 + 6);
          v48 = sub_1D5407D7C(CFSTR("A01 = 1 04  A02 = 1 08  A03 = 1 10  A04 = 1 20  A05 = 1 40  A06 = 1 80  A07 = 2 01  B01 = 2 08  B02 = 2 10  B03 = 2 20  B04 = 2 40  B05 = 2 80  B06 = 3 01  B07 = 3 02  B08 = 3 04  B09 = 3 08  B10 = 3 10  C01 = 3 20  C02 = 3 40  C03 = 3 80  C04 = 4 01  C05 = 4 02  C06 = 4 04  C07 = 4 08  C08 = 4 10  C09 = 4 20  C10 = 4 40  C11 = 4 80  D01 = 5 01  D02 = 5 02  D03 = 5 04  D04 = 5 08  D05 = 5 10  D06 = 5 20  D07 = 5 40  D08 = 5 80  D09 = 6 01  D10 = 6 02  E01 = 6 10  E02 = 6 20  E03 = 6 40  E04 = 6 80  E05 = 7 01  E06 = 7 02  E07 = 7 04  "), v45 + 9);
          v49 = sub_1D5407D7C(CFSTR("A01 = 1 04  A02 = 1 08  A03 = 1 10  A04 = 1 20  A05 = 1 40  A06 = 1 80  A07 = 2 01  B01 = 2 08  B02 = 2 10  B03 = 2 20  B04 = 2 40  B05 = 2 80  B06 = 3 01  B07 = 3 02  B08 = 3 04  B09 = 3 08  B10 = 3 10  C01 = 3 20  C02 = 3 40  C03 = 3 80  C04 = 4 01  C05 = 4 02  C06 = 4 04  C07 = 4 08  C08 = 4 10  C09 = 4 20  C10 = 4 40  C11 = 4 80  D01 = 5 01  D02 = 5 02  D03 = 5 04  D04 = 5 08  D05 = 5 10  D06 = 5 20  D07 = 5 40  D08 = 5 80  D09 = 6 01  D10 = 6 02  E01 = 6 10  E02 = 6 20  E03 = 6 40  E04 = 6 80  E05 = 7 01  E06 = 7 02  E07 = 7 04  "), v45 + 8);
          v50 = (v47 - 48);
          if (v50 < v17 && ((v48 + 16 * v49 + 208) & v84[v50]) != 0)
          {
            v51 = 1 << v46;
            if ((v46 & 0x40) != 0)
              v52 = 0;
            else
              v52 = 1 << v46;
            if ((v46 & 0x40) == 0)
              v51 = 0;
            v44 |= v51;
            v43 |= v52;
          }
          v45 += 12;
          ++v46;
        }
        sub_1D53FDFE0(v76, v43, v44, 0);
        v53 = sub_1D53F8CEC((uint64_t)v76, 0, 0, (void (*)(uint64_t, _QWORD))sub_1D5408F44);
        v57 = 0;
        v83[0] = 0;
        v83[1] = 0;
        LODWORD(v82) = 0;
        while (1)
        {
          sub_1D5407DDC(v53, (const char *)(unsigned __int16)v57, v54, v55, v56);
          v58 = (void *)objc_claimAutoreleasedReturnValue();
          v59 = sub_1D5407C00((uint64_t)v58, v74, v58, (uint64_t)v83, &v82);

          if (!v59)
            break;
          v57 = (v57 + 1);
        }
        __p = 0;
        v80 = 0;
        v81 = 0;
        v78 = 0;
        if ((_WORD)v57)
        {
          v60 = 0;
          do
          {
            v77 = 0uLL;
            sub_1D5407DDC(v53, (const char *)(unsigned __int16)v60, v54, v55, v56);
            v61 = (void *)objc_claimAutoreleasedReturnValue();
            v62 = sub_1D5407C00((uint64_t)v61, v74, v61, (uint64_t)&v77, &v78);

            v63 = v60;
            if ((v62 & 1) != 0)
            {
              v64 = v80;
              if ((unint64_t)v80 >= v81)
              {
                v66 = (v80 - (_BYTE *)__p) >> 4;
                v67 = v66 + 1;
                if ((unint64_t)(v66 + 1) >> 60)
                  sub_1D5282B8C();
                v68 = v81 - (_QWORD)__p;
                if ((uint64_t)(v81 - (_QWORD)__p) >> 3 > v67)
                  v67 = v68 >> 3;
                if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF0)
                  v69 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v69 = v67;
                if (v69)
                  v53 = (uint64_t)sub_1D5284334((uint64_t)&v81, v69);
                else
                  v53 = 0;
                v70 = (char *)(v53 + 16 * v66);
                *(_OWORD *)v70 = v77;
                v72 = (char *)__p;
                v71 = v80;
                v73 = v70;
                if (v80 != __p)
                {
                  do
                  {
                    *((_OWORD *)v73 - 1) = *((_OWORD *)v71 - 1);
                    v73 -= 16;
                    v71 -= 16;
                  }
                  while (v71 != v72);
                  v71 = (char *)__p;
                }
                v65 = v70 + 16;
                __p = v73;
                v80 = v70 + 16;
                v81 = v53 + 16 * v69;
                if (v71)
                  operator delete(v71);
              }
              else
              {
                *(_OWORD *)v80 = v77;
                v65 = v64 + 16;
              }
              v80 = v65;
              v63 = v57;
            }
            v60 = (v60 + 1);
            v57 = v63;
          }
          while (v60 < (unsigned __int16)v63);
          if ((_WORD)v63)
          {
            sub_1D53FDE38(v76, (uint64_t)&__p, 0);
            sub_1D53FDE6C((uint64_t)v76, &v78, 0);
          }
        }
        if (__p)
        {
          v80 = (char *)__p;
          operator delete(__p);
        }

        v10 = v75;
      }
    }
    v18 = v84;
  }
  if (v18)
  {
    v85 = v18;
    operator delete(v18);
  }
LABEL_94:

}

void sub_1D5408E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v25;

  v25 = *(void **)(v23 - 104);
  if (v25)
  {
    *(_QWORD *)(v23 - 96) = v25;
    operator delete(v25);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1D5408EBC(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v5 = a1;
  v6 = a2;
  v9 = v6;
  if (v5)
  {
    if (v6)
      v10 = objc_msgSend_compare_options_(v5, v7, (uint64_t)v6, a3, v8);
    else
      v10 = 1;
  }
  else if (v6)
  {
    v10 = -1;
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_1D5408F30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1D5408F44(void *a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a1)
  {
    a1 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A0540, 0);
    if (a1)
    {
      sub_1D5407DDC((uint64_t)a1, a2, v3, v4, v5);
      a1 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  return a1;
}

uint64_t sub_1D5408F8C(uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 3);
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) > 0x492492492492492)
      sub_1D5282B8C();
    v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x249249249249249)
      v14 = 0x492492492492492;
    else
      v14 = v12;
    v19[4] = result;
    if (v14)
      v15 = (char *)sub_1D54098F8(result, v14);
    else
      v15 = 0;
    v16 = &v15[56 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[56 * v14];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    *(_OWORD *)(v16 + 40) = *(__int128 *)((char *)a2 + 40);
    *(_OWORD *)(v16 + 24) = v18;
    v19[2] = v16 + 56;
    sub_1D5409884(a1, v19);
    v10 = a1[1];
    result = sub_1D5409A5C((uint64_t)v19);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_OWORD *)(v7 + 40) = *(__int128 *)((char *)a2 + 40);
    *(_OWORD *)(v7 + 24) = v9;
    v10 = v7 + 56;
    a1[1] = v7 + 56;
  }
  a1[1] = v10;
  return result;
}

void sub_1D54090E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5409A5C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D54090FC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void sub_1D5409138(uint64_t a1)
{
  sub_1D52940F4(a1 + 48, *(char **)(a1 + 56));
}

void sub_1D5409148(uint64_t a1, void *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char isKindOfClass;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  double *v73;
  double *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  uint64_t v81;
  id v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  double v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  id v95;
  id v96;
  id obj;
  _QWORD *v98;
  double *v99;
  _QWORD *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _QWORD **v105;
  char v106;
  void *__p[2];
  char v108;
  uint64_t v109;
  _QWORD v110[4];
  _QWORD v111[4];
  _QWORD v112[4];
  __int128 v113[8];
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v95 = a2;
  v96 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    obj = v96;
    v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v5, (uint64_t)&v101, (uint64_t)v113, 16);
    if (!v6)
      goto LABEL_46;
    v7 = *(_QWORD *)v102;
    while (1)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v102 != v7)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v101 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v9, v10, v11, v12, v13) == 5)
        {
          objc_msgSend_objectAtIndexedSubscript_(v9, v10, 0, v14, v15);
          v16 = (id)objc_claimAutoreleasedReturnValue();
          v17 = a1;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend_objectAtIndexedSubscript_(v9, v18, 1, v19, v20);
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              objc_msgSend_objectAtIndexedSubscript_(v9, v22, 2, v23, v24);
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                objc_msgSend_objectAtIndexedSubscript_(v9, v26, 3, v27, v28);
                v29 = (void *)objc_claimAutoreleasedReturnValue();
                objc_opt_class();
                isKindOfClass = objc_opt_isKindOfClass();

                a1 = v17;
                if ((isKindOfClass & 1) == 0)
                  continue;
                objc_msgSend_objectAtIndexedSubscript_(v9, v10, 0, v31, v32);
                v33 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_objectAtIndexedSubscript_(v9, v34, 1, v35, v36);
                v37 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_doubleValue(v37, v38, v39, v40, v41);
                v43 = v42;

                objc_msgSend_objectAtIndexedSubscript_(v9, v44, 2, v45, v46);
                v47 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_doubleValue(v47, v48, v49, v50, v51);
                v53 = v52;

                objc_msgSend_objectAtIndexedSubscript_(v9, v54, 3, v55, v56);
                v57 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_doubleValue(v57, v58, v59, v60, v61);
                v63 = v62;

                v70 = v17;
                if (objc_msgSend_hasPrefix_(v33, v64, (uint64_t)CFSTR("[X]"), v65, v66))
                {
                  objc_msgSend_substringFromIndex_(v33, v67, 4, v68, v69);
                  v71 = (void *)objc_claimAutoreleasedReturnValue();
                  sub_1D52850A0(__p, "");
                  v109 = 0x3FF0000000000000;
                  sub_1D52850A0(v110, " +1.4x");
                  v110[3] = 0x3FF6666666666666;
                  sub_1D52850A0(v111, " +2x");
                  v111[3] = 0x4000000000000000;
                  sub_1D52850A0(v112, " +2.8x");
                  v112[3] = 0x4006666666666666;
                  v99 = 0;
                  v100 = 0;
                  v98 = 0;
                  v105 = &v98;
                  v106 = 0;
                  v98 = operator new(0x80uLL);
                  v99 = (double *)v98;
                  v100 = v98 + 16;
                  v72 = 0;
                  v99 = (double *)sub_1D5409AE4((uint64_t)&v100, (__int128 *)__p, v113, v98);
                  do
                  {
                    if (SHIBYTE(v112[v72 + 2]) < 0)
                      operator delete((void *)v112[v72]);
                    v72 -= 4;
                  }
                  while (v72 != -16);
                  v74 = (double *)v98;
                  v73 = v99;
                  while (v74 != v73)
                  {
                    if (vabdd_f64(*(double *)(v70 + 40), v43) < 0.01 && vabdd_f64(*(double *)(v70 + 48), v53) < 0.01)
                    {
                      v75 = *(double *)(v70 + 56);
                      v76 = v74[3];
                      if (v75 == 0.0 || fabs(v75 - v76 * v63) < 0.1)
                      {
                        v77 = *(double *)(v70 + 64);
                        v78 = v76 * v43 + -1.0;
                        v79 = v76 * v53 + 1.0;
                        if (v77 >= v78 && v77 <= v79)
                        {
                          v81 = *(_QWORD *)(*(_QWORD *)(v70 + 32) + 8);
                          v82 = objc_retainAutorelease(v71);
                          objc_msgSend_UTF8String(v82, v83, v84, v85, v86);
                          std::operator+<char>();
                          sub_1D5409E6C((uint64_t **)(v81 + 48), __p, (uint64_t)__p);
                          v70 = v17;
                          if (v108 < 0)
                            operator delete(__p[0]);
                        }
                      }
                    }
                    v74 += 4;
                  }
                  __p[0] = &v98;
                  sub_1D5409C24((void ***)__p);

LABEL_42:
                  v16 = v33;
                }
                else
                {
                  if (vabdd_f64(*(double *)(v17 + 40), v43) >= 0.01)
                    goto LABEL_42;
                  if (vabdd_f64(*(double *)(v17 + 48), v53) >= 0.01)
                    goto LABEL_42;
                  v87 = *(double *)(v17 + 56);
                  if (v87 != 0.0 && vabdd_f64(v87, v63) >= 0.1)
                    goto LABEL_42;
                  v88 = *(double *)(v17 + 64);
                  if (v88 < v43 + -1.0 || v88 > v53 + 1.0)
                    goto LABEL_42;
                  v89 = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 8);
                  v16 = objc_retainAutorelease(v33);
                  v94 = (char *)objc_msgSend_UTF8String(v16, v90, v91, v92, v93);
                  sub_1D52850A0(__p, v94);
                  sub_1D5409E6C((uint64_t **)(v89 + 48), __p, (uint64_t)__p);
                  if (v108 < 0)
                    operator delete(__p[0]);
                }
              }
              else
              {

              }
            }
            else
            {

            }
          }

          a1 = v17;
          continue;
        }
      }
      v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v101, (uint64_t)v113, 16);
      if (!v6)
      {
LABEL_46:

        break;
      }
    }
  }

}

void sub_1D54096EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;

  if (a36 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D5409884(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1D5409940((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1D54098F8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    sub_1D5282C48();
  return operator new(56 * a2);
}

uint64_t sub_1D5409940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v9 - 40) = *(_QWORD *)(a3 - 40);
      *(_OWORD *)(v9 - 56) = v10;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      v11 = *(_OWORD *)(a3 - 16);
      *(_OWORD *)(v9 - 32) = *(_OWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 16) = v11;
      v9 -= 56;
      v7 -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  sub_1D54099E4((uint64_t)v13);
  return a6;
}

uint64_t sub_1D54099E4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D5409A18(a1);
  return a1;
}

void sub_1D5409A18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 56;
  }
}

uint64_t sub_1D5409A5C(uint64_t a1)
{
  sub_1D5409A90(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1D5409A90(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 7;
      *(_QWORD *)(a1 + 16) = v2 - 7;
      if (*((char *)v2 - 33) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

_QWORD *sub_1D5409AE4(uint64_t a1, __int128 *a2, __int128 *a3, _QWORD *__dst)
{
  _QWORD *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD v10[3];
  char v11;
  void *v12;
  _QWORD *v13;

  v4 = __dst;
  v12 = __dst;
  v13 = __dst;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1D5290130(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
        v8 = v4;
      }
      v4[3] = *((_QWORD *)v6 + 3);
      v6 += 2;
      v4 = v8 + 4;
      v13 = v8 + 4;
    }
    while (v6 != a3);
  }
  v11 = 1;
  sub_1D5409BAC((uint64_t)v10);
  return v4;
}

void sub_1D5409B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5409BAC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5409BAC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D5409BE0(a1);
  return a1;
}

void sub_1D5409BE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0)
      operator delete(*(void **)(v1 - 32));
    v1 -= 32;
  }
}

void sub_1D5409C24(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1D5409C64((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1D5409C64(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

void sub_1D5409CB0(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1D5409CF0((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1D5409CF0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 56)
  {
    if (*(char *)(i - 33) < 0)
      operator delete(*(void **)(i - 56));
  }
  a1[1] = v2;
}

void sub_1D5409D3C(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE0uLL);
  sub_1D5409DB4(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1D5285658((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1D5409DA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5409DB4(_QWORD *a1, uint64_t *a2, void **a3, void **a4)
{
  a1[2] = 0;
  *a1 = &unk_1E99A0568;
  a1[1] = 0;
  sub_1D53FEEF0((uint64_t)(a1 + 3), a2, *a3, *a4);
  a1[3] = off_1E99A0470;
  return a1;
}

void sub_1D5409E00(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5409E14(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A0568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5409E28(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A0568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5409E5C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

_OWORD *sub_1D5409E6C(uint64_t **a1, void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_1D52B3CFC((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_1D528EFCC(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_1D5409EFC(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A0798, 0);
    if (v11)
      sub_1D540A4A0((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D5409F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5409FA0(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v7;
  id v8;
  id v9;

  v9 = a2;
  v8 = a3;
  sub_1D540A674(a1, &v9, &v8, &v7);
  *a4 = v7;

}

void sub_1D540A014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

const __CFString *sub_1D540A030()
{
  return CFSTR("{MakerEpson}");
}

BOOL sub_1D540A03C(_BYTE *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10;
  uint64_t v11;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v14 = 0;
  v15[0] = 0;
  *(_QWORD *)((char *)v15 + 5) = 0;
  v11 = sub_1D53F5F40((uint64_t)a1, (uint64_t)&v14, 20, a5, a3);
  if (v11 == 20)
  {
    if ((_DWORD)v14 == 1330860101 && BYTE4(v14) == 78)
      sub_1D53FA480(a1, v10, word_1E99A0640, a3 + 8, a5, a6);
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 160))(a1);
  }

  return v11 == 20;
}

void sub_1D540A13C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D540A154(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char *v56[3];

  sub_1D53F63AC((uint64_t)a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = sub_1D5297AC0(v6, (const char *)*MEMORY[0x1E0CBCFF0], v7, v8, v9);

  memset(v56, 0, sizeof(v56));
  sub_1D53FD760(a1, a2, (uint64_t *)&v55);
  v54 = 0uLL;
  sub_1D53F642C((uint64_t)a1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v12, (uint64_t)CFSTR("IFD0/Exif/Makernote/%@/Offset"), v13, v14, CFSTR("Thumbnail"));
  v15 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v11, v15, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F642C((uint64_t)a1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v21, (uint64_t)CFSTR("IFD0/Exif/Makernote/%@/Length"), v22, v23, CFSTR("Thumbnail"));
  v24 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v20, v24, v25, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  if (v19 && v28)
  {
    v52 = objc_msgSend_intValue(v19, v29, v30, v31, v32);
    v50 = objc_msgSend_intValue(v28, v33, v34, v35, v36);
    sub_1D5285A24(&v51, &v50);
    sub_1D53F4C74(a1, &v52, &v51, v10, &v53);
    v37 = v53;
    v53 = 0uLL;
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
    v54 = v37;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(p_shared_owners);
      while (__stlxr(v40 - 1, p_shared_owners));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
    if (*((_QWORD *)&v53 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  if ((_QWORD)v55)
    sub_1D52B0A7C(v56, &v55);
  if ((_QWORD)v54)
    sub_1D52B0A7C(v56, &v54);
  sub_1D53F51D8((uint64_t)v56, a2, a3);

  v44 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
  if (*((_QWORD *)&v55 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  *(_QWORD *)&v55 = v56;
  sub_1D5282E44((void ***)&v55);
}

void sub_1D540A400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, char a20)
{
  void *v20;
  void *v21;

  sub_1D5282EB4((uint64_t)&a15);
  sub_1D5282EB4((uint64_t)&a18);
  a18 = (void **)&a20;
  sub_1D5282E44(&a18);
  _Unwind_Resume(a1);
}

BOOL sub_1D540A490(uint64_t a1, unsigned __int8 a2)
{
  return a2 == 216;
}

void sub_1D540A4A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  void *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  id v39;

  v39 = a2;
  v11 = (void *)MEMORY[0x1E0CB3940];
  sub_1D53F6390(a3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v11, v13, (uint64_t)CFSTR("%@/%@/%@"), v14, v15, v39, v12, CFSTR("Offset"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = (void *)MEMORY[0x1E0CB3940];
  sub_1D53F6390(a3);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v17, v19, (uint64_t)CFSTR("%@/%@/%@"), v20, v21, v39, v18, CFSTR("Length"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v26) = *(_DWORD *)(a4 + 8);
  v27 = bswap32(v26);
  if (a6)
    v26 = v27;
  else
    v26 = v26;
  objc_msgSend_numberWithLongLong_(MEMORY[0x1E0CB37E8], v23, v26 + a5, v24, v25);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F642C(a1);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v29, v30, (uint64_t)v28, (uint64_t)v16, v31);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v32, *(unsigned int *)(a4 + 4), v33, v34);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F642C(a1);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v36, v37, (uint64_t)v35, (uint64_t)v22, v38);

}

void sub_1D540A610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1D540A674(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE0uLL);
  sub_1D540A6EC(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1D5285658((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1D540A6D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D540A6EC(_QWORD *a1, uint64_t *a2, void **a3, void **a4)
{
  a1[2] = 0;
  *a1 = &unk_1E99A07C0;
  a1[1] = 0;
  sub_1D53FEEF0((uint64_t)(a1 + 3), a2, *a3, *a4);
  a1[3] = off_1E99A06C8;
  return a1;
}

void sub_1D540A738(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D540A74C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A07C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D540A760(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A07C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D540A794(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

id sub_1D540A7A4()
{
  if (qword_1EFF387B8 != -1)
    dispatch_once(&qword_1EFF387B8, &unk_1E99A0800);
  return (id)qword_1EFF387B0;
}

uint64_t sub_1D540A7E4()
{
  uint64_t v0;
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = objc_opt_new();
  v1 = (void *)qword_1EFF387B0;
  qword_1EFF387B0 = v0;

  objc_msgSend_registerDefaults_((void *)qword_1EFF387B0, v2, (uint64_t)&unk_1E99D12B8, v3, v4);
  return MEMORY[0x1E0DE7D20](qword_1EFF387B0, sel_addSuiteNamed_, CFSTR("com.apple.RawCamera"), v5, v6);
}

void sub_1D540A834(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A0B90, 0);
    if (v11)
      sub_1D540C63C((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D540A8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D540A8D8(const void *a1, void *a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A0B90, 0);
    if (v10)
      sub_1D540C7C8((uint64_t)v10, v11, a3, a4, v12, a6);
  }

}

void sub_1D540A954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL sub_1D540A968(_QWORD *a1, unint64_t a2)
{
  return a2 >= 8 && *a1 == 0x4D4C4946494A5546;
}

BOOL sub_1D540A998(uint64_t *a1)
{
  _BOOL8 v2;
  uint64_t v4[3];
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  LODWORD(v5[0]) = 0;
  sub_1D5285164(v4, a1, (uint64_t)v5, 0);
  v2 = (*(unsigned int (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, v5, 8) == 8
    && v5[0] == 0x4D4C4946494A5546;
  sub_1D5285200(v4);
  return v2;
}

void sub_1D540AA50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5285200((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D540AA7C(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v7;
  id v8;
  id v9;

  v9 = a2;
  v8 = a3;
  sub_1D540CB48(a1, &v9, &v8, &v7);
  *a4 = v7;

}

void sub_1D540AAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D540AB0C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int8x8_t v10;
  void *exception;
  uint64_t v13[3];
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  sub_1D53AE248(a1, &v15);
  LODWORD(v14) = 0;
  sub_1D5285164(v13, (uint64_t *)&v15, (uint64_t)&v14, 0);
  v2 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_1D53AE248(a1, &v15);
  v5 = (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(*v15 + 32))(v15, &v14, 8);
  v6 = v16;
  if (v16)
  {
    v7 = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v5 == 8 && v14 == 0x4D4C4946494A5546)
  {
    v15 = 0;
    if (sub_1D53F5F40(a1, (uint64_t)&v15, 8, 0, 84) != 8)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v10 = vrev32_s8((int8x8_t)v15);
    *(int8x8_t *)(a1 + 196) = v10;
    v9 = (v10.i32[0] + 12);
  }
  else
  {
    v9 = sub_1D53FBC18();
  }
  sub_1D5285200(v13);
  return v9;
}

void sub_1D540ACC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5285200((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D540AD30(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  __int128 v14;
  __int128 v15;
  char *v16[3];

  memset(v16, 0, sizeof(v16));
  sub_1D53FD760((uint64_t *)a1, a2, (uint64_t *)&v15);
  sub_1D5282F74(&v13, (int *)(a1 + 196));
  v12 = *(_DWORD *)(a1 + 200);
  sub_1D53F4C74((uint64_t *)a1, &v13, &v12, 0, &v14);
  if ((_QWORD)v15)
    sub_1D52B0A7C(v16, &v15);
  if ((_QWORD)v14)
    sub_1D52B0A7C(v16, &v14);
  sub_1D53F51D8((uint64_t)v16, a2, a3);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)&v15 = v16;
  sub_1D5282E44((void ***)&v15);
}

void sub_1D540AE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  sub_1D5282EB4((uint64_t)&a12);
  a12 = (void **)&a14;
  sub_1D5282E44(&a12);
  _Unwind_Resume(a1);
}

const __CFString *sub_1D540AE9C()
{
  return CFSTR("{MakerFuji}");
}

uint64_t sub_1D540AEA8(_BYTE *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v11 = 0;
  v12[0] = 0;
  *(_QWORD *)((char *)v12 + 5) = 0;
  if (sub_1D53F5F40((uint64_t)a1, (uint64_t)&v11, 20, a5, a3) == 20 && v11 == 0x4D4C4946494A5546)
  {
    sub_1D53FA480(a1, v8, word_1E99A0830, 12, a5 + a3, 0);
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 160))(a1);
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_1D540AF98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D540AFB0(uint64_t a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  int v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  sub_1D540B154(a1);
  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D5297C60(v2, CFSTR("{PictureStyle}"), 0);
  v15 = (id)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    sub_1D53F63AC(a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = sub_1D53FAE98(v3, CFSTR("{PictureStyle}"), CFSTR("Monochrome"));

    if (!v4)
      sub_1D53F9628(a1, CFSTR("Monochrome"), 0);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    if ((v5 & 0x80000000) == 0)
    {
      sub_1D53F984C(a1, v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("PictStyleColorSpace"), v6, (float)v5, (float)v5);

    }
  }
  sub_1D53F63AC(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v7, v8, (uint64_t)CFSTR("{PictStyleSetting}"), v9, v10);

  sub_1D53F63AC(a1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v11, v12, (uint64_t)CFSTR("{PictStyleNormalized}"), v13, v14);

}

void sub_1D540B108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D540B154(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  const __CFString *v14;
  const __CFString *v15;
  __CFString *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  float v30;
  float v31;
  void *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned __int16 v39;
  unint64_t v40;
  float v41;
  void *v42;
  void *v43;
  char *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  int v56;
  unsigned __int16 v57;
  unint64_t v58;
  float v59;
  void *v60;
  id v61;

  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D5297C60(v2, CFSTR("{PictStyleSetting}"), 0);
  v61 = (id)objc_claimAutoreleasedReturnValue();

  if (sub_1D5297D80(v61, CFSTR("PictureStyle")))
  {
    v6 = sub_1D5297AC0(v61, CFSTR("PictureStyle"), v3, v4, v5);
    v7 = v6;
    sub_1D540B604(v6, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("PictureStyle"), v8, (float)v7, (float)v7);

  }
  else
  {
    v7 = 0;
  }
  if (sub_1D5297D80(v61, CFSTR("ColorMode")))
  {
    v12 = sub_1D5297AC0(v61, CFSTR("ColorMode"), v9, v10, v11);
    v13 = v12;
    v14 = CFSTR("Chrome");
    v15 = CFSTR("Standard");
    if (v12)
      v15 = 0;
    if (v12 != 16)
      v14 = v15;
    if (v12 == 48)
      v16 = CFSTR("Black and White");
    else
      v16 = (__CFString *)v14;
    sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("ColorMode"), v16, (float)v7, (float)v12);
    v17 = v13 == 48;
  }
  else
  {
    v17 = 0;
  }
  if (sub_1D5297D80(v61, CFSTR("FilmSimulation")))
  {
    v21 = sub_1D5297AC0(v61, CFSTR("FilmSimulation"), v18, v19, v20);
    v22 = v21;
    sub_1D540B75C(v21, v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("FilmSimulation"), v23, (float)v22, (float)v22);

  }
  v24 = (char *)*MEMORY[0x1E0CBCC68];
  if (sub_1D5297D80(v61, (void *)*MEMORY[0x1E0CBCC68]))
  {
    v28 = sub_1D5297AC0(v61, v24, v25, v26, v27);
    v29 = v28;
    v30 = 0.0;
    switch((int)v28)
    {
      case 1:
        v30 = -2.0;
        break;
      case 2:
        v30 = -3.0;
        break;
      case 3:
        break;
      case 4:
        v30 = 2.0;
        break;
      case 5:
        v30 = 3.0;
        break;
      default:
        v31 = 1.0;
        if ((_DWORD)v28 != 132)
          v31 = 0.0;
        if ((_DWORD)v28 == 130)
          v30 = -1.0;
        else
          v30 = v31;
        break;
    }
    sub_1D540B7FC(v28, v28);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), v24, v32, (float)v29, v30);

  }
  v33 = (char *)*MEMORY[0x1E0CBCC40];
  if (sub_1D5297D80(v61, (void *)*MEMORY[0x1E0CBCC40]))
  {
    v37 = sub_1D5297AC0(v61, v33, v34, v35, v36);
    v38 = v37;
    HIDWORD(v40) = v37;
    LODWORD(v40) = ((_DWORD)v37 << 16) - 0x800000;
    v39 = v40 >> 23;
    v41 = 0.0;
    if (v39 <= 5u)
      v41 = flt_1D545B050[(__int16)v39];
    sub_1D540B8A4(v37, v37);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), v33, v42, (float)v38, v41);

    if (v38 == 768)
      v17 = 1;
  }
  sub_1D53F63AC(a1);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = (char *)*MEMORY[0x1E0CBCB28];
  sub_1D540B92C(v43, CFSTR("{PictStyleNormalized}"), (void *)*MEMORY[0x1E0CBCB28]);
  v45 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D529EA84(v61, v44, v46, v47, v48);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  v54 = v49;
  if (v45)
  {
    v55 = objc_msgSend_intValue(v45, v50, v51, v52, v53);
    v56 = v55;
  }
  else
  {
    if (!v49)
      goto LABEL_42;
    v55 = objc_msgSend_intValue(v49, v50, v51, v52, v53);
    if ((_DWORD)v55 == 300)
      v56 = 200;
    else
      v56 = v55;
  }
  HIDWORD(v58) = v56;
  LODWORD(v58) = (v56 << 16) - 0x800000;
  v57 = v58 >> 23;
  v59 = 0.0;
  if (v57 <= 5u)
    v59 = flt_1D545B050[(__int16)v57];
  sub_1D540B8A4(v55, v56);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), v44, v60, (float)v56, v59);

LABEL_42:
  sub_1D53F9628(a1, CFSTR("Monochrome"), v17);

}

void sub_1D540B56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D540B5F8()
{
  JUMPOUT(0x1D540B5E8);
}

const __CFString *sub_1D540B604(uint64_t a1, int a2)
{
  const __CFString *result;
  const __CFString *v3;
  const __CFString *v4;

  if (a2 > 255)
  {
    v3 = CFSTR("Shutter speed priority AE");
    v4 = CFSTR("Manual");
    if (a2 != 768)
      v4 = 0;
    if (a2 != 512)
      v3 = v4;
    if (a2 == 256)
      return CFSTR("Aperture-priority AE");
    else
      return v3;
  }
  else
  {
    switch(a2)
    {
      case 0:
        result = CFSTR("Auto");
        break;
      case 1:
        result = CFSTR("Portrait");
        break;
      case 2:
        result = CFSTR("Landscape");
        break;
      case 3:
        result = CFSTR("Macro");
        break;
      case 4:
        result = CFSTR("Sports");
        break;
      case 5:
        result = CFSTR("Night Scene");
        break;
      case 6:
        result = CFSTR("Program AE");
        break;
      case 7:
        result = CFSTR("Natural Light");
        break;
      case 8:
        result = CFSTR("Anti-blur");
        break;
      case 9:
        result = CFSTR("Beach and Snow");
        break;
      case 10:
        result = CFSTR("Sunset");
        break;
      case 11:
        result = CFSTR("Museum");
        break;
      case 12:
        result = CFSTR("Party");
        break;
      case 13:
        result = CFSTR("Flower");
        break;
      case 14:
        result = CFSTR("Text");
        break;
      case 15:
        result = CFSTR("Natural Light and Flash");
        break;
      case 16:
        result = CFSTR("Beach");
        break;
      case 17:
        result = CFSTR("Snow");
        break;
      case 18:
        result = CFSTR("Fireworks");
        break;
      case 19:
        result = CFSTR("Underwater");
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

const __CFString *sub_1D540B75C(uint64_t a1, unsigned __int16 a2)
{
  const __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;

  v2 = CFSTR("F3/Studio Portrait Ex");
  v3 = CFSTR("F4/Velvia");
  if (a2 != 1024)
    v3 = 0;
  if (a2 != 768)
    v2 = v3;
  v4 = CFSTR("F2/Fujichrome");
  if (a2 != 512)
    v4 = 0;
  if (a2 == 304)
    v4 = CFSTR("F1c/Studio Portrait Increased Sharpness");
  if (a2 <= 0x2FFu)
    v2 = v4;
  v5 = CFSTR("F1a/Studio Portrait Enhanced Saturation");
  v6 = CFSTR("F1b/Studio Portrait Smooth Skin Tone");
  if (a2 != 288)
    v6 = 0;
  if (a2 != 272)
    v5 = v6;
  v7 = CFSTR("F1/Studio Portrait");
  if (a2 != 256)
    v7 = 0;
  if (!a2)
    v7 = CFSTR("F0/Standard");
  if (a2 <= 0x10Fu)
    v5 = v7;
  if (a2 <= 0x12Fu)
    return v5;
  else
    return v2;
}

const __CFString *sub_1D540B7FC(uint64_t a1, unsigned __int16 a2)
{
  const __CFString *result;
  const __CFString *v3;
  const __CFString *v4;

  if (a2 > 0x81u)
  {
    v3 = CFSTR("Medium Hard");
    v4 = CFSTR("Film Simulation");
    if (a2 != 0x8000)
      v4 = 0;
    if (a2 != 132)
      v3 = v4;
    if (a2 == 130)
      return CFSTR("Medium Soft");
    else
      return v3;
  }
  else
  {
    switch(a2)
    {
      case 1u:
        result = CFSTR("Soft");
        break;
      case 2u:
        result = CFSTR("Soft2");
        break;
      case 3u:
        result = CFSTR("Normal");
        break;
      case 4u:
        result = CFSTR("Hard");
        break;
      case 5u:
        result = CFSTR("Hard2");
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

const __CFString *sub_1D540B8A4(uint64_t a1, unsigned __int16 a2)
{
  const __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;

  v2 = CFSTR("Black and White");
  v3 = CFSTR("Film Simulation");
  if (a2 != 0x8000)
    v3 = 0;
  if (a2 != 768)
    v2 = v3;
  v4 = CFSTR("Low");
  if (a2 != 512)
    v4 = 0;
  if (a2 == 384)
    v4 = CFSTR("Medium Low");
  if (a2 <= 0x2FFu)
    v2 = v4;
  v5 = CFSTR("High");
  if (a2 != 256)
    v5 = 0;
  if (a2 == 128)
    v5 = CFSTR("Medium High");
  if (!a2)
    v5 = CFSTR("Normal");
  if (a2 <= 0x17Fu)
    return v5;
  else
    return v2;
}

id sub_1D540B92C(void *a1, void *a2, void *a3)
{
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v5 = a3;
  sub_1D5297C60(a1, a2, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v6, v5, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1D540B990(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D540B9AC(char *a1)
{
  __CFString *v2;
  __CFString *v3;
  void *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  _BOOL4 v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unsigned __int16 v19;
  int v20;
  int v21;
  void *v22;
  id v23;
  const char *v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  __int16 v38;
  int v39;
  unsigned int v40;
  unsigned __int16 v41;
  uint64_t v42;
  _OWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _OWORD *v48;
  char *v49;
  char *v50;
  _OWORD *v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  unsigned __int16 v59;
  uint64_t v60;
  _OWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _OWORD *v66;
  char *v67;
  char *v68;
  _OWORD *v69;
  __CFString *v70;
  __int128 v71;
  __int128 __p;
  unint64_t v73;
  int64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v2 = CFSTR("{Temporary}");
  v3 = CFSTR("_AutoFocus");
  v70 = v2;
  sub_1D53F63AC((uint64_t)a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53FAE18(v4, v2, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = 0;
  *(_QWORD *)&__p = 0;
  do
  {
    if (v10 >= objc_msgSend_count(v5, v6, v7, v8, v9))
      v11 = -1;
    else
      v11 = sub_1D53BD2F0(v5, (const char *)&__p, v7, v8, v9);
    v12 = __p;
    *(&v77 + __p) = v11;
    v10 = v12 + 1;
    *(_QWORD *)&__p = v12 + 1;
  }
  while ((unint64_t)(v12 + 1) < 6);
  sub_1D53F63AC((uint64_t)a1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = sub_1D53FAE98(v13, v70, v3);

  if (!v14)
    goto LABEL_154;
  sub_1D53F63AC((uint64_t)a1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53FAF90(v15, v70, v3);

  sub_1D53F63AC((uint64_t)a1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53C3EE8(v16, (void *)*MEMORY[0x1E0CBD090], (void *)*MEMORY[0x1E0CBD0B8]);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v19 = 0;
  v75 = 0;
  v76 = 0;
  v74 = 0;
  v20 = v77;
  if (v77 != -1)
  {
    v21 = v78;
    if (v78 != -1)
    {
      v18 = sub_1D540C364(v18, v17, 0, (uint64_t)&v75, &v74);
      if ((v18 & 1) == 0)
      {
        sub_1D53FDB60((uint64_t)a1);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v74 = 0;
        v23 = (id)*MEMORY[0x1E0CBCC28];
        if (sub_1D5297D80(v22, v23))
        {
          v24 = (const char *)*MEMORY[0x1E0CBCC30];
          v25 = sub_1D5297D80(v22, (void *)*MEMORY[0x1E0CBCC30]);

          if (v25)
          {
            v29 = sub_1D5297AC0(v22, (const char *)v23, v26, v27, v28);
            v74 = v29 | (unint64_t)(sub_1D5297AC0(v22, v24, v30, v31, v32) << 32);
            if (sub_1D53F4BF8(v17, CFSTR("X100"), 1))
              v33 = 10;
            else
              v33 = 20;
            sub_1D5282DF0(&__p, v74 / v33, HIDWORD(v74) / v33);
            v76 = __p;
          }
        }
        else
        {

        }
      }
      v19 = 0;
      if ((_DWORD)v74 && HIDWORD(v74))
      {
        v34 = sub_1D53FDE6C((uint64_t)a1, &v74, 0);
        v19 = 0;
        v35 = v20 - (int)v74 / 2;
        if (v74 >= 0)
          v36 = HIDWORD(v74);
        else
          v36 = HIDWORD(v74) + 1;
        v37 = (v36 >> 1) - v21;
        v38 = -1;
        while (1)
        {
          v34 = sub_1D540C364(v34, v17, v19, (uint64_t)&v75, &v74);
          if (!(_DWORD)v34)
            break;
          v39 = v75 - v35;
          if ((int)(v75 - v35) < 0)
            v39 = v35 - v75;
          if (v76 >= 2 * v39)
          {
            v40 = HIDWORD(v75) - v37;
            if ((int)(HIDWORD(v75) - v37) < 0)
              v40 = v37 - HIDWORD(v75);
            if (HIDWORD(v76) >= 2 * v40)
              v38 = v19;
          }
          ++v19;
        }
        if (v38 == -1)
        {
          *(_QWORD *)&__p = __PAIR64__(v37, v35);
          *((_QWORD *)&__p + 1) = v76;
          sub_1D53FDDC4(a1, &__p, 0);
          LOBYTE(v38) = 0;
          v19 = 1;
        }
        else
        {
          __p = 0uLL;
          v73 = 0;
          if (v19)
          {
            v41 = 0;
            do
            {
              v71 = 0uLL;
              LODWORD(v34) = sub_1D540C364(v34, v17, v41, (uint64_t)&v71, &v74);
              if ((_DWORD)v34)
              {
                v42 = *((_QWORD *)&__p + 1);
                if (*((_QWORD *)&__p + 1) >= v73)
                {
                  v44 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 4;
                  v45 = v44 + 1;
                  if ((unint64_t)(v44 + 1) >> 60)
                    sub_1D5282B8C();
                  v46 = v73 - __p;
                  if ((uint64_t)(v73 - __p) >> 3 > v45)
                    v45 = v46 >> 3;
                  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
                    v47 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v47 = v45;
                  if (v47)
                    v34 = (uint64_t)sub_1D5284334((uint64_t)&v73, v47);
                  else
                    v34 = 0;
                  v48 = (_OWORD *)(v34 + 16 * v44);
                  *v48 = v71;
                  v49 = (char *)*((_QWORD *)&__p + 1);
                  v50 = (char *)__p;
                  v51 = v48;
                  if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
                  {
                    do
                    {
                      *--v51 = *((_OWORD *)v49 - 1);
                      v49 -= 16;
                    }
                    while (v49 != v50);
                    v49 = (char *)__p;
                  }
                  v43 = v48 + 1;
                  *(_QWORD *)&__p = v51;
                  *((_QWORD *)&__p + 1) = v48 + 1;
                  v73 = v34 + 16 * v47;
                  if (v49)
                    operator delete(v49);
                }
                else
                {
                  **((_OWORD **)&__p + 1) = v71;
                  v43 = (_OWORD *)(v42 + 16);
                }
                *((_QWORD *)&__p + 1) = v43;
              }
              ++v41;
            }
            while (v41 < v19);
          }
          sub_1D53FDE38(a1, (uint64_t)&__p, 0);
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
        }
        if ((v38 & 0x40) != 0)
          v52 = 0;
        else
          v52 = 1 << v38;
        if ((v38 & 0x40) != 0)
          v53 = 1 << v38;
        else
          v53 = 0;
        v18 = sub_1D53FDFE0(a1, v52, v53, 0);
      }
    }
  }
  v54 = v80;
  if (v80 != -1)
  {
    if (v79 == -1)
      goto LABEL_127;
    v55 = 1;
    if (v79 > 130)
    {
      if (v79 <= 287)
      {
        if (v79 > 146)
        {
          v56 = v79 + 109;
          if ((unint64_t)(v79 - 147) > 0x20)
          {
LABEL_74:
            if ((unint64_t)(v79 - 272) >= 2)
              goto LABEL_127;
LABEL_129:
            while (1)
            {
              LODWORD(v18) = sub_1D540C364(v18, v17, v19, (uint64_t)&v75, &v74);
              if (!(_DWORD)v18)
                break;
              ++v19;
            }
            if (!v19)
            {

              goto LABEL_155;
            }
            sub_1D53FDFE0(a1, v54, (uint64_t)v54 >> 63, 1);
            v58 = sub_1D53FDE90(a1, v55, 0, 1);
            v59 = 0;
            __p = 0uLL;
            v73 = 0;
            do
            {
              v71 = 0uLL;
              LODWORD(v58) = sub_1D540C364(v58, v17, v59, (uint64_t)&v71, &v74);
              if ((_DWORD)v58)
              {
                v60 = *((_QWORD *)&__p + 1);
                if (*((_QWORD *)&__p + 1) >= v73)
                {
                  v62 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 4;
                  v63 = v62 + 1;
                  if ((unint64_t)(v62 + 1) >> 60)
                    sub_1D5282B8C();
                  v64 = v73 - __p;
                  if ((uint64_t)(v73 - __p) >> 3 > v63)
                    v63 = v64 >> 3;
                  if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
                    v65 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v65 = v63;
                  if (v65)
                    v58 = (uint64_t)sub_1D5284334((uint64_t)&v73, v65);
                  else
                    v58 = 0;
                  v66 = (_OWORD *)(v58 + 16 * v62);
                  *v66 = v71;
                  v67 = (char *)*((_QWORD *)&__p + 1);
                  v68 = (char *)__p;
                  v69 = v66;
                  if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
                  {
                    do
                    {
                      *--v69 = *((_OWORD *)v67 - 1);
                      v67 -= 16;
                    }
                    while (v67 != v68);
                    v67 = (char *)__p;
                  }
                  v61 = v66 + 1;
                  *(_QWORD *)&__p = v69;
                  *((_QWORD *)&__p + 1) = v66 + 1;
                  v73 = v58 + 16 * v65;
                  if (v67)
                    operator delete(v67);
                }
                else
                {
                  **((_OWORD **)&__p + 1) = v71;
                  v61 = (_OWORD *)(v60 + 16);
                }
                *((_QWORD *)&__p + 1) = v61;
              }
              ++v59;
            }
            while (v59 < v19);
            sub_1D53FDE38(a1, (uint64_t)&__p, 1);
            sub_1D53FDE6C((uint64_t)a1, &v74, 1);
            if ((_QWORD)__p)
            {
              *((_QWORD *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            goto LABEL_153;
          }
          if (((1 << v56) & 0x100010001) == 0)
          {
            if (((1 << v56) & 0x6000) != 0)
            {
              v55 = 256;
              goto LABEL_129;
            }
            if (((1 << v56) & 0x60000000) == 0)
              goto LABEL_74;
LABEL_98:
            v55 = 1024;
            goto LABEL_129;
          }
LABEL_114:
          v55 = 1361;
          goto LABEL_129;
        }
        if ((unint64_t)(v79 - 144) < 2)
        {
          v55 = 64;
          goto LABEL_129;
        }
        if (v79 == 131)
          goto LABEL_114;
LABEL_127:
        v55 = 0;
        goto LABEL_129;
      }
      if (v79 <= 367)
      {
        v57 = v79 - 288;
        if (v57 > 0x21)
          goto LABEL_127;
        if (((1 << v57) & 3) == 0)
        {
          if (((1 << v57) & 0x30000) == 0)
          {
            if (((1 << v57) & 0x300000000) != 0)
            {
              v55 = 168;
              goto LABEL_129;
            }
            goto LABEL_127;
          }
LABEL_90:
          v55 = 4;
          goto LABEL_129;
        }
        goto LABEL_101;
      }
      if ((unint64_t)(v79 - 368) >= 2)
      {
        if ((unint64_t)(v79 - 384) < 2)
        {
          v55 = 336;
          goto LABEL_129;
        }
        if ((unint64_t)(v79 - 432) < 2)
          goto LABEL_98;
        goto LABEL_127;
      }
LABEL_102:
      v55 = 512;
      goto LABEL_129;
    }
    if (v79 <= 66)
    {
      if (v79 > 34)
      {
        if (v79 > 50)
        {
          if ((unint64_t)(v79 - 64) < 2)
          {
            v55 = 8;
            goto LABEL_129;
          }
          if (v79 == 51)
          {
            v55 = 389;
            goto LABEL_129;
          }
          goto LABEL_127;
        }
        if ((unint64_t)(v79 - 48) >= 2)
        {
          if (v79 == 35)
          {
            v55 = 99;
            goto LABEL_129;
          }
          goto LABEL_127;
        }
        goto LABEL_90;
      }
      if ((unint64_t)(v79 - 16) < 2)
        goto LABEL_129;
      if ((unint64_t)(v79 - 32) >= 2)
      {
        if (v79 == 19)
        {
          v55 = 31;
          goto LABEL_129;
        }
        goto LABEL_127;
      }
LABEL_101:
      v55 = 2;
      goto LABEL_129;
    }
    if (v79 > 98)
    {
      if (v79 > 114)
      {
        if ((unint64_t)(v79 - 128) < 2)
        {
          v55 = 16;
          goto LABEL_129;
        }
        if (v79 != 115)
          goto LABEL_127;
      }
      else
      {
        if ((unint64_t)(v79 - 112) < 2)
          goto LABEL_102;
        if (v79 != 99)
          goto LABEL_127;
      }
    }
    else if (v79 > 82)
    {
      if ((unint64_t)(v79 - 96) < 2)
      {
        v55 = 128;
        goto LABEL_129;
      }
      if (v79 != 83)
        goto LABEL_127;
    }
    else
    {
      if ((unint64_t)(v79 - 80) < 2)
      {
        v55 = 32;
        goto LABEL_129;
      }
      if (v79 != 67)
        goto LABEL_127;
    }
    v55 = 681;
    goto LABEL_129;
  }
LABEL_153:

LABEL_154:
  sub_1D53F8DE4((uint64_t)a1);
LABEL_155:

}

void sub_1D540C288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

BOOL sub_1D540C364(uint64_t a1, void *a2, unsigned int a3, uint64_t a4, _QWORD *a5)
{
  id v8;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _DWORD *v21;
  int v22;
  _BOOL8 v23;
  int v24;
  int v25;
  int v26;
  __int128 v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = sub_1D53F4BF8(v8, CFSTR("S9100"), 1);
  v10 = sub_1D53F4BF8(v8, CFSTR("S9600"), 1);
  v11 = sub_1D53F4BF8(v8, CFSTR("S3Pro"), 1);
  v12 = sub_1D53F4BF8(v8, CFSTR("S2Pro"), 1);
  v13 = sub_1D53F4BF8(v8, CFSTR("S20Pro"), 1);
  v14 = sub_1D53F4BF8(v8, CFSTR("S5Pro"), 1);
  if (v9 || v10)
  {
    *a5 = 0x4B000000640;
    if (a3 <= 0x22)
    {
      v15 = (((a3 - ((unsigned __int16)(37 * a3) >> 8)) >> 1)
           + ((37 * a3) >> 8)) >> 2;
      v16 = dword_1D545AEC4[(a3 - 7 * v15)];
      v17 = dword_1D545AEE0[v15];
      *(_DWORD *)a4 = v16;
      *(_DWORD *)(a4 + 4) = v17;
      *(_QWORD *)(a4 + 8) = 0xF0000003CLL;
LABEL_11:
      v23 = 1;
      goto LABEL_16;
    }
LABEL_15:
    v23 = 0;
    goto LABEL_16;
  }
  if (v11 || v12)
  {
    *a5 = 0x3C0000005A0;
    if (a3 > 4)
      goto LABEL_15;
    v18 = dword_1D545AF1C[a3];
    v19 = dword_1D545AF30[a3];
    v20 = dword_1D545AEF4[a3];
    v21 = &unk_1D545AF08;
LABEL_10:
    v22 = v21[a3];
    *(_DWORD *)a4 = v18;
    *(_DWORD *)(a4 + 4) = v19;
    *(_DWORD *)(a4 + 8) = v20;
    *(_DWORD *)(a4 + 12) = v22;
    goto LABEL_11;
  }
  if (v13)
  {
    *a5 = 0x3C000000500;
    if (a3 > 4)
      goto LABEL_15;
    v18 = dword_1D545AF1C[a3];
    v19 = dword_1D545AF30[a3];
    v20 = dword_1D545AF44[a3];
    v21 = &unk_1D545AF58;
    goto LABEL_10;
  }
  if (!v14)
    goto LABEL_15;
  *a5 = 0x3C0000005A0;
  v31 = 0;
  v28 = 0u;
  v29 = 0;
  *(_QWORD *)((char *)&v28 + 4) = 0xFFFFFF3D000000C3;
  v30 = xmmword_1D545B080;
  v23 = a3 < 0xB;
  if (a3 <= 0xA)
  {
    v24 = *((_DWORD *)&v28 + a3);
    v25 = dword_1D545AF98[a3];
    v26 = dword_1D545AFC4[a3];
    *(_DWORD *)a4 = dword_1D545AF6C[a3];
    *(_DWORD *)(a4 + 4) = v24;
    *(_DWORD *)(a4 + 8) = v25;
    *(_DWORD *)(a4 + 12) = v26;
  }
LABEL_16:

  return v23;
}

void sub_1D540C618(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D540C63C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a2;
  v11 = sub_1D53F6ABC(a1, v15, a3, a4, a5, a6);
  if (v11)
  {
    if (v11 == 1)
    {
      sub_1D53F63AC(a1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6410(a3);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6390(a3);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v12, v13, v14, &unk_1E99CC090);
    }
    else
    {
      sub_1D53F63AC(a1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6410(a3);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6390(a3);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53FAF90(v12, v13, v14);
    }
  }
  else
  {
    sub_1D53F63AC(a1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6410(a3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6390(a3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v12, v13, v14, &unk_1E99CC078);
  }

}

void sub_1D540C798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D540C7C8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5, int a6)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[5];

  v40[4] = *MEMORY[0x1E0C80C00];
  sub_1D53F63AC(a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F6410(a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F6390(a3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53FAE18(v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v18 = 0;
  v40[0] = 0;
  do
  {
    if (v18 >= objc_msgSend_count(v13, v14, v15, v16, v17))
      v19 = -1;
    else
      v19 = sub_1D53BD2F0(v13, (const char *)v40, v15, v16, v17);
    v20 = v40[0];
    *((_DWORD *)&v40[1] + v40[0]) = v19;
    v18 = v20 + 1;
    v40[0] = v20 + 1;
  }
  while ((unint64_t)(v20 + 1) < 6);
  v21 = a4[4];
  v22 = bswap32(v21) >> 16;
  if (a6)
    LOWORD(v21) = v22;
  v23 = a4[5];
  v24 = bswap32(v23) >> 16;
  if (a6)
    LOWORD(v23) = v24;
  v25 = 3;
  if (*a4 - 4131 < 3)
    v25 = (2 * (unsigned __int16)(*a4 - 4131)) | 1;
  *((_DWORD *)&v40[1] + v25) = (unsigned __int16)v23;
  v40[0] = v25 - 1;
  *((_DWORD *)v40 + v25 + 1) = (unsigned __int16)v21;
  sub_1D53F63AC(a1);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F6410(a3);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F6390(a3);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53FAF90(v26, v27, v28);

  v40[0] = 0;
  do
  {
    sub_1D53F63AC(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6410(a3);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6390(a3);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D540CAA4(v29, v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();

    if (v32)
    {
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v33, *((unsigned int *)&v40[1] + v40[0]), v34, v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v32, v37, (uint64_t)v36, v38, v39);

    }
    ++v40[0];
  }
  while (v40[0] < 6uLL);

}

void sub_1D540CA30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id sub_1D540CAA4(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;

  v5 = a3;
  sub_1D52E1FDC(a1, a2, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D533BA50(v6, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_1D540CB08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D540CB24(uint64_t a1)
{
  sub_1D53FED24(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D540CB48(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE8uLL);
  sub_1D540CBC0((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1D5285658((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1D540CBAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D540CBC0(uint64_t a1, uint64_t *a2, void **a3, void **a4)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E99A0BB8;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D53FEEF0(a1 + 24, a2, *a3, *a4);
  *(_QWORD *)(a1 + 24) = off_1E99A0AC0;
  *(_DWORD *)(a1 + 220) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  return a1;
}

void sub_1D540CC10(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D540CC24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A0BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D540CC38(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A0BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D540CC6C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

_BYTE *sub_1D540CC7C(_BYTE *result)
{
  if (result)
  {
    result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A0D50, 0);
    if (result)
      result[195] = 1;
  }
  return result;
}

void sub_1D540CCB4(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v7;
  id v8;
  id v9;

  v9 = a2;
  v8 = a3;
  sub_1D540CDCC(a1, &v9, &v8, &v7);
  *a4 = v7;

}

void sub_1D540CD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

BOOL sub_1D540CD44(_BYTE *a1)
{
  return sub_1D53F5CF0(a1) || a1[195] != 0;
}

void *sub_1D540CD7C()
{
  return &unk_1E99A0BF8;
}

BOOL sub_1D540CD88(uint64_t a1, void *a2)
{
  return a2 == &unk_1E99A0BF8;
}

const __CFString *sub_1D540CD9C()
{
  return CFSTR("{MakerHasselblad}");
}

void sub_1D540CDA8(uint64_t a1)
{
  sub_1D53FED24(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D540CDCC(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE0uLL);
  sub_1D540CE44((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1D5285658((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1D540CE30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D540CE44(uint64_t a1, uint64_t *a2, void **a3, void **a4)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E99A0D78;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D53FEEF0(a1 + 24, a2, *a3, *a4);
  *(_QWORD *)(a1 + 24) = off_1E99A0C80;
  *(_BYTE *)(a1 + 219) = 0;
  return a1;
}

void sub_1D540CE94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D540CEA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A0D78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D540CEBC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A0D78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D540CEF0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void sub_1D540CF00(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v7;
  id v8;
  id v9;

  v9 = a2;
  v8 = a3;
  sub_1D540CFC4(a1, &v9, &v8, &v7);
  *a4 = v7;

}

void sub_1D540CF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

void *sub_1D540CF90()
{
  return &unk_1E99A0DB8;
}

uint64_t sub_1D540CF9C()
{
  return 1;
}

BOOL sub_1D540CFA4(uint64_t a1, void *a2)
{
  return a2 == &unk_1E99A0DB8;
}

const __CFString *sub_1D540CFB8()
{
  return CFSTR("{MakerKodak}");
}

void sub_1D540CFC4(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE0uLL);
  sub_1D540D03C(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1D5285658((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1D540D028(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D540D03C(_QWORD *a1, uint64_t *a2, void **a3, void **a4)
{
  a1[2] = 0;
  *a1 = &unk_1E99A0F60;
  a1[1] = 0;
  sub_1D53FEEF0((uint64_t)(a1 + 3), a2, *a3, *a4);
  a1[3] = off_1E99A0E68;
  return a1;
}

void sub_1D540D088(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D540D09C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A0F60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D540D0B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A0F60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D540D0E4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void sub_1D540D168(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D540D284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D540D334(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A10F8, 0);
    if (v10)
      sub_1D540D978((uint64_t)v10, v11, v12, a4, a5, a6);
  }

}

void sub_1D540D3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D540D3C4(unsigned __int8 *a1, unint64_t a2, void *a3)
{
  id v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  unsigned __int8 *v16;
  int v17;

  v5 = a3;
  if (a2 < 4)
    goto LABEL_19;
  v6 = *a1;
  if (v6 == 77)
  {
    if (a1[1] != 77)
      goto LABEL_19;
    if (a1[2])
      goto LABEL_19;
    if (a1[3] != 42)
      goto LABEL_19;
    v10 = bswap32(*((_DWORD *)a1 + 1));
    v8 = (v10 + 2);
    if (v8 > a2)
      goto LABEL_19;
    v7 = (v10 + 1);
    v9 = 1;
    v11 = v10;
  }
  else
  {
    if (v6 != 73)
      goto LABEL_19;
    if (a1[1] != 73)
      goto LABEL_19;
    if (a1[2] != 42)
      goto LABEL_19;
    if (a1[3])
      goto LABEL_19;
    v7 = *((unsigned int *)a1 + 1);
    v8 = (v7 + 2);
    if (v8 > a2)
      goto LABEL_19;
    v9 = 0;
    v10 = (v7 + 1);
    v11 = *((unsigned int *)a1 + 1);
  }
  v12 = a1[v7] | (a1[v10] << 8);
  if ((v8 + 12 * v12) <= a2 && v12 != 0)
  {
    v16 = &a1[v11 + 3];
    while (1)
    {
      if (v9)
      {
        if (*(v16 - 1) != 134)
          goto LABEL_27;
        v17 = *v16;
      }
      else
      {
        if (*v16 != 134)
          goto LABEL_27;
        v17 = *(v16 - 1);
      }
      if (v17 == 6)
      {
        v14 = 1;
        goto LABEL_20;
      }
LABEL_27:
      v14 = 0;
      --v12;
      v16 += 12;
      if (!(_WORD)v12)
        goto LABEL_20;
    }
  }
LABEL_19:
  v14 = 0;
LABEL_20:

  return v14;
}

uint64_t sub_1D540D508(uint64_t *a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v12;
  unsigned int v13;
  uint64_t v14[3];
  int v15;
  uint64_t v16[3];

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 16))(*a1);
  if (v2 < 4)
    return 0;
  v3 = v2;
  sub_1D52B1C58(v16, a1);
  v15 = 0;
  if ((*(unsigned int (**)(uint64_t, int *, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, &v15, 4) == 4)
  {
    if (v15 == 73 && BYTE1(v15) == 73 && BYTE2(v15) == 42 && !HIBYTE(v15)
      || (v4 = 0, v15 == 77) && BYTE1(v15) == 77 && !BYTE2(v15) && HIBYTE(v15) == 42)
    {
      if (v15 == 77)
        v5 = 2;
      else
        v5 = 1;
      sub_1D5293C20(v14, a1, v5);
      v6 = sub_1D52847F8(*a1);
      v7 = v3;
      if ((unint64_t)v3 - 2 >= v6
        && (v8 = sub_1D528479C(*a1), v9 = v8, v7 >= v6 + 2 + 12 * v8)
        && (v13 = v6 + 2, v8))
      {
        while (1)
        {
          v10 = *a1;
          sub_1D5282F74(&v12, (int *)&v13);
          (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v10 + 40))(v10, &v12, 0);
          if (sub_1D528479C(*a1) == 34310)
            break;
          --v9;
          v13 += 12;
          if (!(_WORD)v9)
            goto LABEL_19;
        }
        v4 = 1;
      }
      else
      {
LABEL_19:
        v4 = 0;
      }
      sub_1D5293C98(v14);
    }
  }
  else
  {
    v4 = 0;
  }
  sub_1D5285200(v16);
  return v4;
}

void sub_1D540D6AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_1D5293C98((uint64_t *)va);
  sub_1D5285200((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1D540D6E4(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v7;
  id v8;
  id v9;

  v9 = a2;
  v8 = a3;
  sub_1D540E3D0(a1, &v9, &v8, &v7);
  *a4 = v7;

}

void sub_1D540D758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

void *sub_1D540D774()
{
  return &unk_1E99A0FA0;
}

BOOL sub_1D540D780(uint64_t a1, void *a2)
{
  return a2 == &unk_1E99A0FA0;
}

const __CFString *sub_1D540D794()
{
  return CFSTR("{MakerLeaf}");
}

void sub_1D540D7A0(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  __int128 v19;
  __int128 v20;
  char *v21[3];

  memset(v21, 0, sizeof(v21));
  sub_1D53FD760((uint64_t *)a1, a2, (uint64_t *)&v20);
  sub_1D5282F74(&v18, (int *)(a1 + 200));
  v17 = *(_DWORD *)(a1 + 204);
  sub_1D53F4C74((uint64_t *)a1, &v18, &v17, 0, &v19);
  if ((_QWORD)v20)
    sub_1D52B0A7C(v21, &v20);
  if ((_QWORD)v19)
  {
    sub_1D53F63AC(a1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = sub_1D5297AC0(v6, (const char *)*MEMORY[0x1E0CBCFF0], v7, v8, v9);

    if (v10)
    {
      if (v10 == 6)
      {
        v10 = 8;
      }
      else if (v10 == 8)
      {
        v10 = 6;
      }
    }
    *(_DWORD *)(v19 + 20) = v10;
    sub_1D52B0A7C(v21, &v19);
  }
  sub_1D53F51D8((uint64_t)v21, a2, a3);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)&v20 = v21;
  sub_1D5282E44((void ***)&v20);
}

void sub_1D540D924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  sub_1D5282EB4((uint64_t)&a10);
  sub_1D5282EB4((uint64_t)&a12);
  a12 = (void **)&a14;
  sub_1D5282E44(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1D540D978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21[3];

  sub_1D53AE248(a1, &v19);
  if (a6)
    v10 = 2;
  else
    v10 = 1;
  sub_1D5293C20(v21, &v19, v10);
  v11 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(_DWORD *)(a4 + 8);
  v15 = bswap32(v14);
  if (a6)
    v14 = v15;
  v16 = *(unsigned __int16 *)(a4 + 2);
  if (v16 > 0x6F)
    v17 = 0;
  else
    v17 = qword_1D545B198[v16];
  sub_1D540DA88(a1, a5 + v14, v17 * *(unsigned int *)(a4 + 4), 0);
  return sub_1D5293C98(v21);
}

void sub_1D540DA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1D5293C98((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D540DA88(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v45;
  BOOL v47;
  BOOL v49;
  BOOL v51;
  BOOL v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  char v70;
  unsigned int v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77[3];
  uint64_t v78;
  char v79[8];
  std::__shared_weak_count *v80;
  char v81;
  unint64_t v82;
  _BYTE v83[19];
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v78 = a2;
  sub_1D53AE248(a1, v79);
  sub_1D528594C(&v82, &v78);
  sub_1D5285164(v77, (uint64_t *)v79, (uint64_t)&v82, 0);
  v7 = v80;
  if (v80)
  {
    p_shared_owners = (unint64_t *)&v80->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (a3 >= 0x35)
  {
    v72 = a4 + 1;
    while (1)
    {
      sub_1D53AE248(a1, v79);
      v10 = sub_1D52847F8(*(uint64_t *)v79);
      v11 = v80;
      if (v80)
      {
        v12 = (unint64_t *)&v80->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v10 != 1347114067)
        return sub_1D5285200(v77);
      sub_1D53AE248(a1, v79);
      v14 = *(_QWORD *)v79;
      v82 = 4;
      sub_1D5282FE0(&v75, &v82);
      (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v14 + 40))(v14, &v75, 1);
      v15 = v80;
      if (v80)
      {
        v16 = (unint64_t *)&v80->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      sub_1D53AE248(a1, v79);
      (*(void (**)(_QWORD, unint64_t *, uint64_t))(**(_QWORD **)v79 + 32))(*(_QWORD *)v79, &v82, 32);
      v18 = v80;
      if (v80)
      {
        v19 = (unint64_t *)&v80->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v84 = 0;
      sub_1D53AE248(a1, v79);
      v21 = *(_QWORD *)v79;
      v75 = 8;
      sub_1D5282FE0(&v73, &v75);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v73, 1);
      v22 = v80;
      if (v80)
      {
        v23 = (unint64_t *)&v80->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      sub_1D53AE248(a1, v79);
      v25 = sub_1D52847F8(*(uint64_t *)v79);
      v26 = v80;
      if (v80)
      {
        v27 = (unint64_t *)&v80->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      sub_1D53AE248(a1, v79);
      v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v79 + 48))(*(_QWORD *)v79);
      v30 = v80;
      if (v80)
      {
        v31 = (unint64_t *)&v80->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = v25;
      if (v82 == 0x666F725074706143
        && *(_QWORD *)v83 == 0x7461645F7761725FLL
        && *(_QWORD *)&v83[8] == 0x697461746F725F61
        && *(_QWORD *)&v83[11] == 0x6E6F697461746FLL)
      {
        sub_1D53AE248(a1, &v75);
        if (v25 >= 0x27uLL)
          v54 = 39;
        else
          v54 = v25;
        (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)v75 + 32))(v75, v79, v54);
        v81 = 0;
        v55 = v76;
        if (v76)
        {
          v56 = (unint64_t *)&v76->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        sscanf(v79, "%d", a1 + 216);
        v53 = 0;
        *(_BYTE *)(a1 + 195) = 1;
        goto LABEL_145;
      }
      if (v82 == 0x5F666F7250676D49
        && *(_QWORD *)v83 == 0x6E6F697461746F72
        && *(_QWORD *)&v83[7] == 0x656C676E615F6ELL)
      {
        sub_1D53AE248(a1, &v75);
        if (v25 >= 0x27uLL)
          v58 = 39;
        else
          v58 = v25;
        (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)v75 + 32))(v75, v79, v58);
        v81 = 0;
        v59 = v76;
        if (v76)
        {
          v60 = (unint64_t *)&v76->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        sscanf(v79, "%d", a1 + 212);
        v53 = 0;
        *(_BYTE *)(a1 + 196) = 1;
        goto LABEL_145;
      }
      if (v82 == 0x6572705F4745504ALL && *(_QWORD *)v83 == 0x7461645F77656976 && *(unsigned __int16 *)&v83[8] == 97)
      {
        v53 = 0;
        *(_DWORD *)(a1 + 200) = v29;
        *(_DWORD *)(a1 + 204) = v25;
        *(_BYTE *)(a1 + 197) = 1;
        goto LABEL_145;
      }
      if (v82 == 0x624F6172656D6143 && *(_QWORD *)v83 == 0x70735F4F53495F6ALL && *(_DWORD *)&v83[8] == 6579557)
      {
        LODWORD(v73) = 0;
        sub_1D53AE248(a1, &v75);
        if (v25 >= 0x27uLL)
          v62 = 39;
        else
          v62 = v25;
        (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)v75 + 32))(v75, v79, v62);
        v81 = 0;
        v63 = v76;
        if (v76)
        {
          v64 = (unint64_t *)&v76->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        if (sscanf(v79, "%u", &v73) == 1 && v73 <= 6)
          *(_DWORD *)(a1 + 208) = dword_1D545B160[v73];
        v53 = 0;
        *(_BYTE *)(a1 + 198) = 1;
        goto LABEL_145;
      }
      if (v82 == 0x4F65727574706143
        && *(_QWORD *)v83 == 0x63656C65735F6A62
        && *(_QWORD *)&v83[5] == 0x6E6F697463656CLL)
      {
        goto LABEL_144;
      }
      v45 = v82 == 0x4F65727574706143 && *(_QWORD *)v83 == 0x5F656E6F745F6A62;
      if (v45 && *(_QWORD *)&v83[6] == 0x65767275635F65)
        goto LABEL_144;
      v47 = v82 == 0x4F65727574706143 && *(_QWORD *)v83 == 0x70726168735F6A62;
      if (v47 && *(_QWORD *)&v83[5] == 0x7373656E707261)
        goto LABEL_144;
      v49 = v82 == 0x6A624F746F6F6853 && *(_QWORD *)v83 == 0x735F726F6C6F635FLL;
      if (v49 && *(_QWORD *)&v83[5] == 0x70757465735F72)
        goto LABEL_144;
      v51 = v82 == 0x6A624F746F6F6853 && *(_QWORD *)v83 == 0x65735F657661735FLL;
      if (v51 && *(_DWORD *)&v83[8] == 7370100)
        goto LABEL_144;
      v53 = *(_BYTE *)(a1 + 195) && *(_BYTE *)(a1 + 196) && *(_BYTE *)(a1 + 197) && *(_BYTE *)(a1 + 198) != 0;
      if (!v53 && v25 >= 0x35)
        break;
LABEL_145:
      sub_1D53AE248(a1, &v75);
      v66 = v75;
      v73 = v29 + v33;
      sub_1D528594C(&v74, &v73);
      (*(void (**)(unint64_t, int *, _QWORD))(*(_QWORD *)v66 + 40))(v66, &v74, 0);
      v67 = v76;
      if (v76)
      {
        v68 = (unint64_t *)&v76->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      a3 = a3 - 52 - v33;
      v70 = a3 < 0x35 || v53;
      if ((v70 & 1) != 0)
        return sub_1D5285200(v77);
    }
    sub_1D540DA88(a1, v29, v25, v72);
LABEL_144:
    v53 = 0;
    goto LABEL_145;
  }
  return sub_1D5285200(v77);
}

void sub_1D540E308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1D5285200((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D540E3AC(uint64_t a1)
{
  sub_1D53FED24(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D540E3D0(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xF8uLL);
  sub_1D540E448((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1D5285658((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1D540E434(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D540E448(uint64_t a1, uint64_t *a2, void **a3, void **a4)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E99A1120;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D53FEEF0(a1 + 24, a2, *a3, *a4);
  *(_QWORD *)(a1 + 24) = off_1E99A1028;
  *(_DWORD *)(a1 + 219) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  return a1;
}

void sub_1D540E4A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D540E4B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A1120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D540E4C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A1120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D540E4FC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void sub_1D540E50C(const void *a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  if (a1)
  {
    v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A12E0, 0);
    if (v3)
      sub_1D540E630((uint64_t)v3);
  }

}

void sub_1D540E56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D540E580(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v7;
  id v8;
  id v9;

  v9 = a2;
  v8 = a3;
  sub_1D540E698(a1, &v9, &v8, &v7);
  *a4 = v7;

}

void sub_1D540E5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

void *sub_1D540E610()
{
  return &unk_1E99A1160;
}

BOOL sub_1D540E61C(uint64_t a1, void *a2)
{
  return a2 == &unk_1E99A1160;
}

void sub_1D540E630(uint64_t a1)
{
  id v1;

  sub_1D53F63AC(a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  sub_1D52DFEFC(v1, (void *)*MEMORY[0x1E0CBD090], (void *)*MEMORY[0x1E0CBD0B0], CFSTR("Hasselblad"));

}

void sub_1D540E684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D540E698(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE0uLL);
  sub_1D540E710(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1D5285658((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1D540E6FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D540E710(_QWORD *a1, uint64_t *a2, void **a3, void **a4)
{
  a1[2] = 0;
  *a1 = &unk_1E99A1308;
  a1[1] = 0;
  sub_1D53FEEF0((uint64_t)(a1 + 3), a2, *a3, *a4);
  a1[3] = off_1E99A1210;
  return a1;
}

void sub_1D540E75C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D540E770(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A1308;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D540E784(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A1308;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D540E7B8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

__objc2_class_ro *sub_1D540E7C8()
{
  unsigned __int8 v0;
  __objc2_class *v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1ED589A00);
  v1 = RAWHueMagnet;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1ED589A00);
    v1 = RAWHueMagnet;
    if (v3)
    {
      qword_1ED5899F8 = (uint64_t)os_log_create("com.apple.rawcamera", "mobileasset");
      __cxa_guard_release(&qword_1ED589A00);
      v1 = RAWHueMagnet;
    }
  }
  return v1[63].info;
}

uint64_t sub_1D540E834()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF387C8);
  v1 = &unk_1EFF38000;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1EFF387C8);
    v1 = (_QWORD *)&unk_1EFF38000;
    if (v3)
    {
      qword_1EFF387C0 = (uint64_t)os_log_create("com.apple.rawcamera", "render");
      __cxa_guard_release(&qword_1EFF387C8);
      v1 = (_QWORD *)&unk_1EFF38000;
    }
  }
  return v1[248];
}

uint64_t sub_1D540E8A0()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF387D8);
  v1 = &unk_1EFF38000;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1EFF387D8);
    v1 = (_QWORD *)&unk_1EFF38000;
    if (v3)
    {
      qword_1EFF387D0 = (uint64_t)os_log_create("com.apple.rawcamera", "compile");
      __cxa_guard_release(&qword_1EFF387D8);
      v1 = (_QWORD *)&unk_1EFF38000;
    }
  }
  return v1[250];
}

void sub_1D540E90C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v10 = (char *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A1550, 0);
    if (v10)
      sub_1D540FFC8(v10, v11, v12, a4, a5, a6);
  }

}

void sub_1D540E988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D540E99C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A1550, 0);
    if (v10)
      sub_1D540FE60((uint64_t)v10, v11, v12, a4, a5, a6);
  }

}

void sub_1D540EA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D540EA2C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A1550, 0);
    if (v10)
      sub_1D540FDA0((uint64_t)v10, v11, a3, a4, v12, a6);
  }

}

void sub_1D540EAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D540EABC(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v7;
  id v8;
  id v9;

  v9 = a2;
  v8 = a3;
  sub_1D54104D0(a1, &v9, &v8, &v7);
  *a4 = v7;

}

void sub_1D540EB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D540EB4C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  void *exception;
  uint64_t v13[3];
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  sub_1D53AE248(a1, &v15);
  LODWORD(v14) = 0;
  sub_1D5285164(v13, &v15, (uint64_t)&v14, 0);
  v2 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v14 = 0;
  sub_1D53AE248(a1, &v15);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v15 + 32))(v15, &v14, 8);
  v6 = v16;
  if (v16)
  {
    v7 = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v5 == 8 && bswap32(v14) == 5067341)
  {
    v15 = 0;
    if (sub_1D53F5F40(a1, (uint64_t)&v15, 8, 48, 0) != 8)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (BYTE1(v15) == 77 && v15 == 77)
      v10 = 48;
    else
      v10 = 140;
  }
  else
  {
    v10 = sub_1D53FBC18();
  }
  sub_1D5285200(v13);
  return v10;
}

void sub_1D540ED10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5285200((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1D540ED78(unsigned int *a1, unint64_t a2)
{
  return a2 >= 4 && bswap32(*a1) == 5067341;
}

BOOL sub_1D540EDA0(uint64_t *a1)
{
  _BOOL8 v2;
  unsigned int v4;
  uint64_t v5[3];

  v4 = 0;
  sub_1D5285164(v5, a1, (uint64_t)&v4, 0);
  v4 = 0;
  v2 = (*(unsigned int (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, &v4, 4) == 4
    && bswap32(v4) == 5067341;
  sub_1D5285200(v5);
  return v2;
}

void sub_1D540EE28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5285200((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D540EE40(uint64_t a1)
{
  void *v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;

  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)*MEMORY[0x1E0CBCA28];
  sub_1D540B92C(v2, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCA48]);
  v11 = (id)objc_claimAutoreleasedReturnValue();

  if (v11)
  {
    v8 = objc_msgSend_intValue(v11, v4, v5, v6, v7);
    sub_1D540EF44(a1, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      sub_1D53F63AC(a1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v10, v3, (void *)*MEMORY[0x1E0CBCA58], v9);

    }
  }
  sub_1D53FC1FC(a1);

}

void sub_1D540EF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id sub_1D540EF44(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  id v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  id v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  void *v75;
  double v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  double v94;
  long double v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  double v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  double v111;
  unint64_t v112;
  void **v113;
  __int128 v114;
  double v115;
  __int128 v116;
  __int128 v117;
  long double v118;
  double v121;
  long double v122;
  double v123;
  long double v124;
  long double v125;
  double v126;
  uint64_t v127;
  double v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  double v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *j;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  double v154;
  double v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  double v160;
  void *v161[2];
  uint64_t v162;
  void *__p[2];
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;

  v168 = 0;
  v169 = 0;
  v170 = 0;
  sub_1D54343BC(CFSTR("minolta"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v4, (uint64_t)CFSTR("%u"), v5, v6, a2);
    v8 = (char *)objc_claimAutoreleasedReturnValue();
    sub_1D52EAE5C(v7, v8, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    for (i = 0; ; i = v167 + 1)
    {
      v167 = i;
      if (i >= objc_msgSend_count(v12, v13, v14, v15, v16))
        break;
      sub_1D53BD380(v12, (const char *)&v167, v18, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_count(v21, v22, v23, v24, v25) == 5)
      {
        __p[0] = 0;
        sub_1D53BC854(v21, (const char *)__p, v26, v27, v28);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        __p[0] = (void *)1;
        v33 = sub_1D53BD334(v21, (const char *)__p, v30, v31, v32);
        __p[0] = (void *)2;
        v37 = sub_1D53BD334(v21, (const char *)__p, v34, v35, v36);
        __p[0] = (void *)3;
        v41 = sub_1D53BD334(v21, (const char *)__p, v38, v39, v40);
        __p[0] = (void *)4;
        v45 = sub_1D53BD334(v21, (const char *)__p, v42, v43, v44);
        if (v29)
        {
          v46 = v45;
          v47 = objc_retainAutorelease(v29);
          v52 = (char *)objc_msgSend_UTF8String(v47, v48, v49, v50, v51);
          sub_1D52850A0(v161, v52);
          if (SHIBYTE(v162) < 0)
          {
            sub_1D5290130(__p, v161[0], (unint64_t)v161[1]);
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)v161;
            v164 = v162;
          }
          *(double *)&v165 = v33;
          *((double *)&v165 + 1) = v37;
          *(double *)&v166 = v41;
          *((double *)&v166 + 1) = v46;
          sub_1D5408F8C(&v168, (__int128 *)__p);
          if (SHIBYTE(v164) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v162) < 0)
            operator delete(v161[0]);
        }

      }
    }

  }
  v53 = v168;
  if (v169 - v168 != 56)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v169 - v168) >> 3)) < 2)
    {
      v54 = 0;
      goto LABEL_88;
    }
    sub_1D53FDB60(a1);
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F63AC(a1);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D5297C60(v56, (void *)*MEMORY[0x1E0CBCA28], 0);
    v57 = (void *)objc_claimAutoreleasedReturnValue();

    sub_1D529EA84(v55, (const char *)*MEMORY[0x1E0CBCBA0], v58, v59, v60);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D529EA84(v55, (const char *)*MEMORY[0x1E0CBCC00], v62, v63, v64);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52EAE5C(v57, (const char *)*MEMORY[0x1E0CBCA50], v66, v67, v68);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    v75 = v69;
    v76 = 0.0;
    if (v69)
    {
      v78 = 0.0;
      if (objc_msgSend_count(v69, v70, v71, v72, v73) == 4)
      {
        __p[0] = 0;
        v78 = sub_1D53BD334(v75, (const char *)__p, v77, v72, v73);
        __p[0] = (void *)1;
        v76 = sub_1D53BD334(v75, (const char *)__p, v79, v80, v81);
        __p[0] = (void *)2;
        sub_1D53BD334(v75, (const char *)__p, v82, v83, v84);
        __p[0] = (void *)3;
        v74 = sub_1D53BD334(v75, (const char *)__p, v85, v86, v87);
      }
    }
    else
    {
      v78 = 0.0;
    }
    v88 = v168;
    if (*(char *)(v168 + 23) < 0)
      v88 = *(_QWORD *)v168;
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v70, v88, v72, v73, v74);
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    if (v61)
    {
      v158 = v57;
      v159 = v55;
      v156 = v65;
      v157 = v61;
      objc_msgSend_doubleValue(v61, v89, v90, v91, v92);
      v95 = v94;
      objc_msgSend_doubleValue(v65, v96, v97, v98, v99);
      v101 = exp2(v100 * 0.5);
      sub_1D52B261C(0x6DB6DB6DB6DB6DB7 * ((v169 - v168) >> 3));
      v106 = (void *)objc_claimAutoreleasedReturnValue();
      v108 = v168;
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v169 - v168) >> 3)) >= 2)
      {
        v154 = log(v95);
        v109 = 0;
        v110 = 0;
        v111 = 999999999.0;
        v112 = 1;
        v160 = v101;
        while (1)
        {
          v113 = (void **)(v108 + v109 + 56);
          if (*(char *)(v108 + v109 + 79) < 0)
          {
            v115 = v111;
            sub_1D5290130(__p, *v113, *(_QWORD *)(v108 + v109 + 64));
            v111 = v115;
          }
          else
          {
            v114 = *(_OWORD *)v113;
            v164 = *(_QWORD *)(v108 + v109 + 72);
            *(_OWORD *)__p = v114;
          }
          v116 = *(_OWORD *)(v108 + v109 + 96);
          v165 = *(_OWORD *)(v108 + v109 + 80);
          v166 = v116;
          v117 = v165;
          v118 = *((double *)&v116 + 1);
          v107 = *(double *)&v116;
          if ((v78 <= 0.0 || vabdd_f64(v78, *(double *)&v165) <= 0.9)
            && (v76 <= 0.0 || vabdd_f64(v76, *((double *)&v165 + 1)) <= 0.9)
            && v95 >= *(double *)&v165 + -0.9
            && v95 <= *((double *)&v165 + 1) + 0.9)
          {
            if (v101 <= 0.0)
            {
              v128 = v111;
LABEL_60:
              if (v164 >= 0)
                objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v102, (uint64_t)__p, v104, v105);
              else
                objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v102, (uint64_t)__p[0], v104, v105);
              v132 = (void *)objc_claimAutoreleasedReturnValue();
              if (v132)
                objc_msgSend_addObject_(v106, v129, (uint64_t)v132, v130, v131);

              v111 = v128;
              goto LABEL_66;
            }
            if (v101 >= *(double *)&v166 + -0.15 && v101 <= *((double *)&v166 + 1) + 0.15)
            {
              if (*(double *)&v165 != *((double *)&v165 + 1) && *(double *)&v166 != *((double *)&v166 + 1))
              {
                v155 = v111;
                v121 = log(*(long double *)&v116);
                v122 = log(v118) - v121;
                v123 = log(*((long double *)&v117 + 1));
                v124 = log(*(long double *)&v117);
                v125 = v121 + v122 / (v123 - v124) * (v154 - v124);
                v101 = v160;
                v107 = exp(v125);
                v111 = v155;
              }
              v126 = vabdd_f64(v101, v107);
              v107 = v111 + 0.15;
              if (v126 <= v111 + 0.15)
              {
                if (v126 < v111 + -0.15)
                {
                  if (v164 >= 0)
                    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v102, (uint64_t)__p, v104, v105);
                  else
                    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v102, (uint64_t)__p[0], v104, v105);
                  v127 = objc_claimAutoreleasedReturnValue();

                  v110 = (void *)v127;
                }
                v128 = v126;
                v101 = v160;
                goto LABEL_60;
              }
              v101 = v160;
            }
          }
LABEL_66:
          if (SHIBYTE(v164) < 0)
          {
            v133 = v111;
            operator delete(__p[0]);
            v111 = v133;
          }
          ++v112;
          v108 = v168;
          v109 += 56;
          if (v112 >= 0x6DB6DB6DB6DB6DB7 * ((v169 - v168) >> 3))
            goto LABEL_72;
        }
      }
      v110 = 0;
LABEL_72:
      if (objc_msgSend_count(v106, v102, v103, v104, v105, v107))
      {
        if (v110)
          objc_msgSend_stringWithString_(MEMORY[0x1E0CB37A0], v134, (uint64_t)v110, v135, v136);
        else
          objc_msgSend_stringWithString_(MEMORY[0x1E0CB37A0], v134, (uint64_t)&stru_1E99A7480, v135, v136);
        v54 = (id)objc_claimAutoreleasedReturnValue();
        for (j = 0; ; j = (char *)__p[0] + 1)
        {
          __p[0] = j;
          if ((unint64_t)j >= objc_msgSend_count(v106, v137, v138, v139, v140))
            break;
          sub_1D53BC854(v106, (const char *)__p, v142, v143, v144);
          v145 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_length(v54, v146, v147, v148, v149))
          {
            if (!v110 || (objc_msgSend_isEqualToString_(v145, v150, (uint64_t)v54, v151, v152) & 1) == 0)
              objc_msgSend_appendFormat_(v54, v150, (uint64_t)CFSTR(" or %@"), v151, v152, v145);
          }
          else
          {
            objc_msgSend_appendString_(v54, v150, (uint64_t)v145, v151, v152);
          }

        }
        v57 = v158;
        v55 = v159;
        v65 = v156;
        v61 = v157;
        goto LABEL_87;
      }

      v57 = v158;
      v55 = v159;
      v65 = v156;
      v61 = v157;
    }
    v54 = v93;
LABEL_87:

    goto LABEL_88;
  }
  if (*(char *)(v168 + 23) < 0)
    v53 = *(_QWORD *)v168;
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v4, v53, v5, v6);
  v54 = (id)objc_claimAutoreleasedReturnValue();
LABEL_88:

  __p[0] = &v168;
  sub_1D5409CB0((void ***)__p);
  return v54;
}

void sub_1D540F6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;

  if (a33 < 0)
    operator delete(__p);

  __p = (void *)(v37 - 176);
  sub_1D5409CB0((void ***)&__p);
  _Unwind_Resume(a1);
}

const __CFString *sub_1D540F860()
{
  return CFSTR("{MakerMinolta}");
}

BOOL sub_1D540F86C(_BYTE *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v13 = 0;
  v14[0] = 0;
  *(_QWORD *)((char *)v14 + 5) = 0;
  v11 = sub_1D53F5F40((uint64_t)a1, (uint64_t)&v13, 20, a5, a3);
  if (v11 == 20)
  {
    sub_1D53FA480(a1, v10, word_1E99A1358, a3, a5, a6);
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 160))(a1);
  }

  return v11 == 20;
}

void sub_1D540F94C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D540F964(uint64_t a1, void *a2, unsigned int a3, _DWORD *a4, _QWORD *a5)
{
  id v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD v18[4];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v18[2] = 650;
  v18[0] = 0;
  v18[1] = 0x1450000028ALL;
  v18[3] = 0xFFFFFEBBFFFFFD76;
  v19 = -650;
  v14 = 0u;
  *(_QWORD *)((char *)&v14 + 4) = 0x10E00000168;
  v15 = 0xFFFFFE98FFFFFEF2;
  v16 = 4294967026;
  v17 = 270;
  if (sub_1D5408EBC(v8, CFSTR("ALPHA SWEET DIGITAL"), 0)
    && sub_1D5408EBC(v8, CFSTR("ALPHA-7 DIGITAL"), 0)
    && sub_1D5408EBC(v8, CFSTR("MAXXUM 7D"), 0)
    || (*a5 = 0x7D000000BC0, a3 > 8))
  {
    v12 = 0;
  }
  else
  {
    v9 = *((_DWORD *)&v14 + a3);
    v10 = dword_1D545B2F0[a3];
    v11 = dword_1D545B314[a3];
    *a4 = *((_DWORD *)v18 + a3);
    a4[1] = v9;
    a4[2] = v10;
    a4[3] = v11;
    v12 = 1;
  }

  return v12;
}

void sub_1D540FAC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D540FAD8(char *a1, int a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned __int16 i;
  uint64_t v8;
  unsigned __int16 v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  void *__p;
  char *v22;
  unint64_t v23;
  int v24[4];
  uint64_t v25;

  v25 = 0;
  sub_1D53F63AC((uint64_t)a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53C3EE8(v4, (void *)*MEMORY[0x1E0CBD090], (void *)*MEMORY[0x1E0CBD0B8]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  for (i = 0; ; ++i)
  {
    v6 = sub_1D540F964(v6, v5, i, v24, &v25);
    if (!(_DWORD)v6)
      break;
  }
  if (i)
  {
    v8 = sub_1D53F8CEC((uint64_t)a1, 0, 0, (void (*)(uint64_t, _QWORD))sub_1D540FD44);
    v9 = 0;
    __p = 0;
    v22 = 0;
    v23 = 0;
    do
    {
      v20 = 0uLL;
      v8 = sub_1D540F964(v8, v5, v9, &v20, &v25);
      if ((_DWORD)v8)
      {
        v10 = v22;
        if ((unint64_t)v22 >= v23)
        {
          v12 = (v22 - (_BYTE *)__p) >> 4;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 60)
            sub_1D5282B8C();
          v14 = v23 - (_QWORD)__p;
          if ((uint64_t)(v23 - (_QWORD)__p) >> 3 > v13)
            v13 = v14 >> 3;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
            v15 = 0xFFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
            v8 = (uint64_t)sub_1D5284334((uint64_t)&v23, v15);
          else
            v8 = 0;
          v16 = (char *)(v8 + 16 * v12);
          *(_OWORD *)v16 = v20;
          v18 = (char *)__p;
          v17 = v22;
          v19 = v16;
          if (v22 != __p)
          {
            do
            {
              *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
              v19 -= 16;
              v17 -= 16;
            }
            while (v17 != v18);
            v17 = (char *)__p;
          }
          v11 = v16 + 16;
          __p = v19;
          v22 = v16 + 16;
          v23 = v8 + 16 * v15;
          if (v17)
            operator delete(v17);
        }
        else
        {
          *(_OWORD *)v22 = v20;
          v11 = v10 + 16;
        }
        v22 = v11;
      }
      ++v9;
    }
    while (v9 < i);
    sub_1D53FDE38(a1, (uint64_t)&__p, 1);
    if (a2)
      sub_1D53FDFE0(a1, 1 << (a2 - 1), (uint64_t)(1 << (a2 - 1)) >> 63, 1);
    sub_1D53FDE6C((uint64_t)a1, &v25, 1);
    if (__p)
    {
      v22 = (char *)__p;
      operator delete(__p);
    }
  }

}

void sub_1D540FD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

__CFString *sub_1D540FD44(__CFString *result, unsigned int a2)
{
  void *v3;
  BOOL v4;

  if (result)
  {
    v3 = __dynamic_cast(result, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A1550, 0);
    result = 0;
    if (v3)
      v4 = a2 > 8;
    else
      v4 = 1;
    if (!v4)
      return off_1E99A15B8[(__int16)a2];
  }
  return result;
}

void sub_1D540FDA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8;
  unsigned int v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;

  LODWORD(v8) = *(_DWORD *)(a4 + 8);
  sub_1D53F63AC(a1);
  v15 = (id)objc_claimAutoreleasedReturnValue();
  v9 = bswap32(v8);
  if (a6)
    v8 = v9;
  else
    v8 = v8;
  sub_1D53F6410(a3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v11, v8, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D52DFEFC(v15, v10, (void *)*MEMORY[0x1E0CBCA48], v14);

}

void sub_1D540FE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1D540FE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8;
  unsigned int v9;
  unsigned __int16 v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  unsigned __int16 v28;

  if (*(_DWORD *)(a4 + 4) >= 0xA2u)
  {
    v28 = 0;
    LODWORD(v8) = *(_DWORD *)(a4 + 8);
    v9 = bswap32(v8);
    v8 = a6 ? v9 : v8;
    if (sub_1D53F5F40(a1, (uint64_t)&v28, 2, a5, v8 + 160) == 2)
    {
      v10 = v28;
      v11 = bswap32(v28) >> 16;
      if (a6)
        v10 = v11;
      v12 = v10;
      v28 = v10;
      if (v10 == 76)
        v13 = 6;
      else
        v13 = 1;
      if (v12 == 82)
        v14 = 8;
      else
        v14 = v13;
      sub_1D53F63AC(a1);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v16, v14, v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = *MEMORY[0x1E0CBD0C0];
      sub_1D52DFEFC(v15, (void *)*MEMORY[0x1E0CBD090], (void *)*MEMORY[0x1E0CBD0C0], v19);

      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v21, v14, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F63AC(a1);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v25, v26, (uint64_t)v24, v20, v27);

    }
  }
}

void sub_1D540FF9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D540FFC8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int16 v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  unsigned __int16 v30;
  unsigned int v31;
  unsigned __int16 v32;

  if (*(_DWORD *)(a4 + 4) >= 0x8Eu)
  {
    v32 = 0;
    v9 = *(_DWORD *)(a4 + 8);
    v10 = bswap32(v9);
    if (a6)
      v11 = v10;
    else
      v11 = v9;
    if (sub_1D53F5F40((uint64_t)a1, (uint64_t)&v32, 2, a5, v11 + 140) == 2)
    {
      v12 = v32;
      v13 = bswap32(v32) >> 16;
      if (a6)
        v12 = v13;
      v14 = v12;
      v32 = v12;
      if (v12 == 76)
        v15 = 6;
      else
        v15 = 1;
      if (v14 == 82)
        v16 = 8;
      else
        v16 = v15;
      sub_1D53F63AC((uint64_t)a1);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v18, v16, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = *MEMORY[0x1E0CBD0C0];
      sub_1D52DFEFC(v17, (void *)*MEMORY[0x1E0CBD090], (void *)*MEMORY[0x1E0CBD0C0], v21);

      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v23, v16, v24, v25);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F63AC((uint64_t)a1);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v27, v28, (uint64_t)v26, v22, v29);

    }
    if (sub_1D53F5F40((uint64_t)a1, (uint64_t)&v32, 2, a5, v11 + 32) == 2)
    {
      v30 = v32;
      v31 = bswap32(v32) >> 16;
      if (a6)
        v30 = v31;
      v32 = v30;
      sub_1D540FAD8(a1, v30);
    }
  }
}

void sub_1D5410158(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5410184(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char *v56[3];

  sub_1D53F63AC((uint64_t)a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = sub_1D5297AC0(v6, (const char *)*MEMORY[0x1E0CBCFF0], v7, v8, v9);

  memset(v56, 0, sizeof(v56));
  sub_1D53FD760(a1, a2, (uint64_t *)&v55);
  v54 = 0uLL;
  sub_1D53F642C((uint64_t)a1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v12, (uint64_t)CFSTR("IFD0/Exif/Makernote/%@"), v13, v14, CFSTR("PreviewImageStart"));
  v15 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v11, v15, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F642C((uint64_t)a1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v21, (uint64_t)CFSTR("IFD0/Exif/Makernote/%@"), v22, v23, CFSTR("PreviewImageLength"));
  v24 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v20, v24, v25, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  if (v19 && v28)
  {
    v52 = objc_msgSend_intValue(v19, v29, v30, v31, v32);
    v50 = objc_msgSend_intValue(v28, v33, v34, v35, v36);
    sub_1D5285A24(&v51, &v50);
    sub_1D53F4C74(a1, &v52, &v51, v10, &v53);
    v37 = v53;
    v53 = 0uLL;
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
    v54 = v37;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(p_shared_owners);
      while (__stlxr(v40 - 1, p_shared_owners));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
    if (*((_QWORD *)&v53 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  if ((_QWORD)v55)
    sub_1D52B0A7C(v56, &v55);
  if ((_QWORD)v54)
    sub_1D52B0A7C(v56, &v54);
  sub_1D53F51D8((uint64_t)v56, a2, a3);

  v44 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
  if (*((_QWORD *)&v55 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  *(_QWORD *)&v55 = v56;
  sub_1D5282E44((void ***)&v55);
}

void sub_1D5410430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, char a20)
{
  void *v20;
  void *v21;

  sub_1D5282EB4((uint64_t)&a15);
  sub_1D5282EB4((uint64_t)&a18);
  a18 = (void **)&a20;
  sub_1D5282E44(&a18);
  _Unwind_Resume(a1);
}

BOOL sub_1D54104C0(uint64_t a1, unsigned __int8 a2)
{
  return a2 == 216;
}

void sub_1D54104D0(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE0uLL);
  sub_1D5410548(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1D5285658((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1D5410534(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5410548(_QWORD *a1, uint64_t *a2, void **a3, void **a4)
{
  a1[2] = 0;
  *a1 = &unk_1E99A1578;
  a1[1] = 0;
  sub_1D53FEEF0((uint64_t)(a1 + 3), a2, *a3, *a4);
  a1[3] = off_1E99A1480;
  return a1;
}

void sub_1D5410594(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D54105A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A1578;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D54105BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A1578;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D54105F0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void sub_1D5410600(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v9 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2288, 0);
    if (v9)
      sub_1D54159A4((uint64_t)v9, v12, v10, a4, v11, a6);
  }

}

void sub_1D5410678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D541068C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2288, 0);
    if (v11)
      sub_1D541477C(v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D541071C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5410730(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  id v9;

  v9 = a2;
  if (a1)
  {
    v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2288, 0);
    if (v7)
      sub_1D5414870((uint64_t)v7, v8, a3, a4);
  }

}

void sub_1D54107A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D54107BC(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v9 = (char *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2288, 0);
    if (v9)
      sub_1D5414CD4(v9, v12, v10, a4, v11, a6);
  }

}

void sub_1D5410834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5410848(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  char *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v10 = (char *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2288, 0);
    if (v10)
      sub_1D541505C(v10, v12, v11, a4, a5, a6);
  }

}

void sub_1D54108C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D54108DC(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2288, 0);
    if (v11)
      sub_1D54145F0((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D5410968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D541097C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  id v14;

  v14 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2288, 0);
    if (v10)
      sub_1D5414BC4((uint64_t)v10, v13, v11, v12, a4, a5, a6);
  }

}

void sub_1D54109F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5410A0C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2288, 0);
    if (v11)
      sub_1D54149AC((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D5410A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5410AAC(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2288, 0);
    if (v10)
      sub_1D541577C((uint64_t)v10, v12, v11, a4, a5, a6);
  }

}

void sub_1D5410B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5410B40(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2288, 0);
    if (v10)
      sub_1D5415DEC((uint64_t)v10, v12, v11, a4, a5, a6);
  }

}

void sub_1D5410BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5410BD4(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v7;
  id v8;
  id v9;

  v9 = a2;
  v8 = a3;
  sub_1D541624C(a1, &v9, &v8, &v7);
  *a4 = v7;

}

void sub_1D5410C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D5410C64(uint64_t a1, unsigned int *a2, int *a3, float *a4, float *a5)
{
  void *v9;
  __CFString *v10;
  __CFString *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  void *v19;
  void *v20;
  int v21;
  uint64_t v22;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  sub_1D53F63AC(a1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = CFSTR("{Temporary}");
  v11 = CFSTR("_AutoFocus");
  sub_1D53FAE18(v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = 0;
  v35 = 0;
  LOBYTE(v18) = 1;
  do
  {
    while ((v18 & 1) == 0)
    {
      LOBYTE(v18) = 0;
      v22 = 0;
      v35 = v17 + 1;
      if (v17++ >= 6)
        goto LABEL_29;
    }
    if (v17 < objc_msgSend_count(v12, v13, v14, v15, v16)
      && (sub_1D53BE148(v12, (const char *)&v35, v14, v15, v16),
          v19 = (void *)objc_claimAutoreleasedReturnValue(),
          (v20 = v19) != 0))
    {
      v21 = objc_msgSend_intValue(v19, v13, v14, v15, v16);
      *(&v36 + v35) = v21;

      v18 = 1;
    }
    else
    {
      v18 = 0;
    }
    v17 = v35 + 1;
    v35 = v17;
  }
  while (v17 < 7);
  v22 = 0;
  if (v18)
  {
    if (v36)
    {
      v24 = v37;
      if (v37)
      {
        v25 = v38;
        if (v38)
        {
          v26 = v39;
          v27 = v40;
          v28 = v39 - v37;
          if (v39 < v37)
            ++v28;
          v29 = v42;
          *a2 = v41 + (v28 >> 1);
          v30 = v27 - v25;
          if (v27 < v25)
            ++v30;
          v31 = v29 + (v30 >> 1);
          *a3 = v31;
          *a4 = *a4 * (float)v26;
          *a5 = *a5 * (float)v27;
          *a4 = *a4 / (float)v24;
          *a5 = *a5 / (float)v25;
          if ((*a2 & 0x80000000) == 0)
            v32 = *a2;
          else
            v32 = -*a2;
          if (v31 >= 0)
            v33 = v31;
          else
            v33 = -v31;
          if (v32 > 0x20 || v33 >= 0x21)
          {
            *a3 = 0;
            *a2 = 0;
          }
          v22 = 1;
        }
      }
    }
  }
LABEL_29:

  return v22;
}

void sub_1D5410E80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D5410EB8(uint64_t a1)
{
  void *v2;
  id v3;
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;

  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (id)*MEMORY[0x1E0CBCA28];
  v4 = CFSTR("ImageStabilization");
  sub_1D53C3EE8(v2, v3, v4);
  v26 = (id)objc_claimAutoreleasedReturnValue();

  if (v26)
  {
    v8 = sub_1D54110A8(v5, (const char *)off_1E99A1600, (uint64_t *)&v26, v6, v7);
  }
  else
  {
    sub_1D53F63AC(a1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53FAE18(v9, v3, v4);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if ((unint64_t)objc_msgSend_count(v10, v11, v12, v13, v14, 4, 0) < 5)
    {
      v8 = 0x7FFFLL;
    }
    else
    {
      v18 = sub_1D53BD2F0(v10, (const char *)&v25, v15, v16, v17);
      if (v18 == 2)
        v19 = 0;
      else
        v19 = 0x7FFF;
      if (v18 == 1)
        v8 = 3;
      else
        v8 = v19;
    }

  }
  sub_1D53F63AC(a1);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  if ((_DWORD)v8 == 0x7FFF)
  {
    sub_1D53FAF90(v23, v3, v4);
  }
  else
  {
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v20, v8, v21, v22);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v23, v3, v4, v24);

  }
}

void sub_1D541104C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t sub_1D54110A8(uint64_t a1, const char *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int v24;
  int v25;
  id *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;

  objc_msgSend_stringWithString_(MEMORY[0x1E0CB37A0], a2, *a3, a4, a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend_length((void *)*a3, v8, v9, v10, v11);
  objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v7, v13, (uint64_t)CFSTR(" "), (uint64_t)&stru_1E99A7480, 0, 0, v12);
  v14 = (void *)MEMORY[0x1E0CB37A0];
  objc_msgSend_uppercaseString(v7, v15, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithString_(v14, v20, (uint64_t)v19, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  v24 = 0;
  do
  {
    v25 = v24;
    v26 = (id *)&a2[24 * v24];
    if (!*v26)
      break;
    v27 = *v26;
    v28 = sub_1D5408EBC(v27, v23, 0);

    if (!v28)
    {
      objc_storeStrong((id *)a3, *(id *)&a2[24 * v25 + 8]);
      break;
    }
    v24 = v25 + 1;
  }
  while (*v26);
  v29 = *(unsigned int *)&a2[24 * v25 + 16];

  return v29;
}

void sub_1D54111C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1D54111F0()
{
  return (id)*MEMORY[0x1E0CBCF98];
}

void sub_1D5411200(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  BOOL v5;
  void *v6;
  void *v7;
  _BOOL4 v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)*MEMORY[0x1E0CBCA28];
  v4 = (void *)*MEMORY[0x1E0CBCFA8];
  v5 = sub_1D53FAE98(v2, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCFA8]);

  if (!v5)
  {
    sub_1D53F63AC(a1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53C3EE8(v6, (void *)*MEMORY[0x1E0CBCF98], v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      v8 = sub_1D53F4BF8(v7, CFSTR("MANUAL"), 1);
      sub_1D53F63AC(a1);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v10, !v8, v11, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v9, v3, v4, v13);

    }
  }
  sub_1D53FC1FC(a1);
}

void sub_1D5411300(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D5411338(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char *v56[3];

  sub_1D53F63AC((uint64_t)a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = sub_1D5297AC0(v6, (const char *)*MEMORY[0x1E0CBCFF0], v7, v8, v9);

  memset(v56, 0, sizeof(v56));
  sub_1D53FD760(a1, a2, (uint64_t *)&v55);
  v54 = 0uLL;
  sub_1D53F642C((uint64_t)a1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v12, (uint64_t)CFSTR("IFD0/Exif/Makernote/%@/%@"), v13, v14, CFSTR("NikonThumbnail"), CFSTR("PreviewImageStart"));
  v15 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v11, v15, v16, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F642C((uint64_t)a1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v21, (uint64_t)CFSTR("IFD0/Exif/Makernote/%@/%@"), v22, v23, CFSTR("NikonThumbnail"), CFSTR("PreviewImageLength"));
  v24 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v20, v24, v25, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  if (v19 && v28)
  {
    v52 = objc_msgSend_intValue(v19, v29, v30, v31, v32);
    v50 = objc_msgSend_intValue(v28, v33, v34, v35, v36);
    sub_1D5285A24(&v51, &v50);
    sub_1D53F4C74(a1, &v52, &v51, v10, &v53);
    v37 = v53;
    v53 = 0uLL;
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
    v54 = v37;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(p_shared_owners);
      while (__stlxr(v40 - 1, p_shared_owners));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
    if (*((_QWORD *)&v53 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  if ((_QWORD)v55)
    sub_1D52B0A7C(v56, &v55);
  if ((_QWORD)v54)
    sub_1D52B0A7C(v56, &v54);
  sub_1D53F51D8((uint64_t)v56, a2, a3);

  v44 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
  if (*((_QWORD *)&v55 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  *(_QWORD *)&v55 = v56;
  sub_1D5282E44((void ***)&v55);
}

void sub_1D54115F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, char a20)
{
  void *v20;
  void *v21;

  sub_1D5282EB4((uint64_t)&a15);
  sub_1D5282EB4((uint64_t)&a18);
  a18 = (void **)&a20;
  sub_1D5282E44(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5411684(_BYTE *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v17 = 0;
  v18[0] = 0;
  *(_QWORD *)((char *)v18 + 5) = 0;
  if (sub_1D53F5F40((uint64_t)a1, (uint64_t)&v17, 20, a5, a3) != 20)
    goto LABEL_19;
  if ((_DWORD)v17 == 1869310286 && *(_DWORD *)((char *)&v17 + 3) == 33582703)
  {
    if (BYTE2(v18[0]) == 73)
      v12 = 0;
    else
      v12 = a6;
    if (BYTE2(v18[0]) == 77)
      v13 = 1;
    else
      v13 = v12;
    if (BYTE2(v18[0]) == BYTE3(v18[0]))
      v14 = v13;
    else
      v14 = a6;
    sub_1D53FA480(a1, v10, word_1E99A1FE0, 8, a3 + a5 + 10, v14);
    goto LABEL_18;
  }
  if (!(v17 ^ 0x100006E6F6B694ELL | LOWORD(v18[0])))
  {
LABEL_19:
    v15 = 0;
    goto LABEL_20;
  }
  sub_1D53FA480(a1, v10, word_1E99A1F10, a3, a5, a6);
LABEL_18:
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 160))(a1);
  v15 = 1;
LABEL_20:

  return v15;
}

void sub_1D54117F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5411810(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  __CFString *v8;
  unsigned int v9;
  unsigned __int8 v10;
  char *v11;
  unsigned int v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  char v41;
  void *v43;
  uint64_t v44;
  char buffer[8];
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)*MEMORY[0x1E0CBCF98];
  sub_1D5297C60(v2, (void *)*MEMORY[0x1E0CBCF98], 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F63AC(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)*MEMORY[0x1E0CBCA28];
  v7 = (void *)*MEMORY[0x1E0CBCAF0];
  sub_1D53C3EE8(v5, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCAF0]);
  v8 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (v8 && CFStringGetCString(v8, buffer, 256, 0x8000100u))
  {
    v9 = buffer[0];
    if (buffer[0])
    {
      v10 = 0;
      v11 = &buffer[1];
      do
      {
        if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v9 + 60) & 0x400) != 0)
          LOBYTE(v9) = v9 - 48;
        else
          v9 %= 0xAu;
        v10 = v9 + 10 * v10;
        v12 = *v11++;
        v9 = v12;
      }
      while (v12);
    }
    else
    {
      v10 = 0;
    }
    if (sub_1D53F5D30(a1, (unsigned __int8 *)buffer))
    {
      sub_1D53F63AC(a1);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53FAF90(v43, v6, v7);

    }
  }
  else
  {
    v10 = 0;
  }
  v13 = (const char *)*MEMORY[0x1E0CBCFB8];
  if (sub_1D5297D80(v4, (void *)*MEMORY[0x1E0CBCFB8]))
    v17 = sub_1D5297AC0(v4, v13, v14, v15, v16);
  else
    v17 = 0;
  v18 = (const char *)*MEMORY[0x1E0CBCFC8];
  if (sub_1D5297D80(v4, (void *)*MEMORY[0x1E0CBCFC8]))
  {
    v22 = sub_1D5297AC0(v4, v18, v19, v20, v21);
    sub_1D53F63AC(a1);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v24, v22, v25, v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v23, v6, (void *)*MEMORY[0x1E0CBCA40], v27);

  }
  else
  {
    LODWORD(v22) = 0;
  }
  sub_1D53F63AC(a1);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = v3;
  sub_1D53FAE18(v28, v29, CFSTR("_Nikon98Tag"));
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  if (v30)
  {
    v35 = objc_msgSend_count(v30, v31, v32, v33, v34);
    if (v35)
    {
      sub_1D5285340(buffer, v35);
      v39 = 0;
      v40 = 1;
      do
      {
        v44 = v39;
        v41 = sub_1D53BD2F0(v30, (const char *)&v44, v36, v37, v38);
        *(_BYTE *)(*(_QWORD *)buffer + v39) = v41;
        v39 = v40;
      }
      while (v35 > v40++);
      sub_1D5411BF8(a1, *(_DWORD **)buffer, v35, v22, v10, v17);
      if (*(_QWORD *)buffer)
      {
        v46 = *(_QWORD *)buffer;
        operator delete(*(void **)buffer);
      }
    }
  }
  objc_msgSend_removeObjectForKey_(v4, v31, (uint64_t)CFSTR("_Nikon98Tag"), v33, v34);

}

void sub_1D5411B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1D5411BF8(uint64_t a1, _DWORD *a2, unint64_t a3, unsigned int a4, unsigned __int8 a5, char a6)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  double v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char *v21;
  unint64_t v22;
  char v23;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  const char *v38;

  v10 = sub_1D5413B88(a1, a2, a3, a4, a5);
  v38 = 0;
  v12 = 11;
  v13 = 9;
  if (v10 > 200)
  {
    if ((v10 - 201) >= 3)
    {
      if (v10 != 204)
        return;
      v12 = 12;
      v13 = 10;
    }
LABEL_7:
    if (v13 < a3)
    {
      LOBYTE(v11) = *((_BYTE *)a2 + v13);
      v14 = expf((float)((float)v11 * 2.3026) / 40.0);
      sub_1D53F63AC(a1);
      v35 = (id)objc_claimAutoreleasedReturnValue();
      *(float *)&v15 = v14 / 100.0;
      objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v16, v17, v18, v19, v15);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v35, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCFA0], v20);

    }
    goto LABEL_10;
  }
  if (v10 != 100)
  {
    if (v10 != 101)
      return;
    goto LABEL_7;
  }
  v12 = 6;
LABEL_10:
  if (v12 + 6 < a3)
  {
    v21 = (char *)a2 + v12;
    v22 = 7;
    do
    {
      v23 = *v21++;
      *((_BYTE *)&v38 + v22) = v23;
    }
    while (v22-- > 1);
    LOBYTE(v38) = a6;
    sub_1D53F63AC(a1);
    v36 = (id)objc_claimAutoreleasedReturnValue();
    v25 = v38;
    objc_msgSend_numberWithLongLong_(MEMORY[0x1E0CB37E8], v26, (uint64_t)v38, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = (void *)*MEMORY[0x1E0CBCA28];
    sub_1D52DFEFC(v36, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCA48], v29);

    sub_1D5413C48(a1, v25, v31, v32, v33);
    v37 = (id)objc_claimAutoreleasedReturnValue();
    if (v37)
    {
      sub_1D53F63AC(a1);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v34, v30, (void *)*MEMORY[0x1E0CBCA58], v37);

    }
  }
}

void sub_1D5411E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1D5411E50(uint64_t a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  int v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  sub_1D5411FF4(a1);
  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D5297C60(v2, CFSTR("{PictureStyle}"), 0);
  v15 = (id)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    sub_1D53F63AC(a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = sub_1D53FAE98(v3, CFSTR("{PictureStyle}"), CFSTR("Monochrome"));

    if (!v4)
      sub_1D53F9628(a1, CFSTR("Monochrome"), 0);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    if ((v5 & 0x80000000) == 0)
    {
      sub_1D53F984C(a1, v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("PictStyleColorSpace"), v6, (float)v5, (float)v5);

    }
  }
  sub_1D53F63AC(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v7, v8, (uint64_t)CFSTR("{PictStyleSetting}"), v9, v10);

  sub_1D53F63AC(a1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v11, v12, (uint64_t)CFSTR("{PictStyleNormalized}"), v13, v14);

}

void sub_1D5411FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5411FF4(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  __CFString *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void *v17;
  __CFString *v18;
  id v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  _BOOL4 v27;
  void *v28;
  int v29;
  unsigned int v30;
  void *v31;
  __CFString *v32;
  __CFString *v33;
  void *v34;
  void *v35;
  void *v36;
  __CFString *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  const char *v48;
  int v49;
  int v50;
  __int128 v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  __CFString *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  __CFString *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  __CFString *v87;
  _BOOL4 v88;
  float v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  void *v97;
  int v98;
  __CFString *v99;
  __CFString *v100;
  __CFString *v101;
  int v102;
  int v103;
  void *v104;
  char v105;
  int v106;
  int v107;
  int v108;
  __CFString *v109;
  unsigned int v110;
  __CFString *v111;
  unsigned int v112;
  int v113;
  void *v114;
  __CFString *v115;
  __CFString *v116;
  void *__p[3];
  void *v118;
  _OWORD v119[2];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v118 = 0;
  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (id)*MEMORY[0x1E0CBCF98];
  v4 = (id)*MEMORY[0x1E0CBCFC0];
  sub_1D53C3EE8(v2, v3, v4);
  v118 = (void *)objc_claimAutoreleasedReturnValue();

  if (v118)
  {
    v8 = sub_1D54110A8(v5, (const char *)off_1E99A1648, (uint64_t *)&v118, v6, v7);
    if (v8 != 0x7FFF)
      sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), (void *)*MEMORY[0x1E0CBCC68], v118, (float)v8, (float)v8);
  }
  sub_1D53F63AC(a1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = CFSTR("{PictStyleSetting}");
  sub_1D53C3EE8(v9, v10, CFSTR("ToneCompensation"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v118;
  v118 = v11;

  if (v11)
  {
    v16 = sub_1D54110A8(v13, (const char *)off_1E99A1720, (uint64_t *)&v118, v14, v15);
    if (v16 != 0x7FFF)
      sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("ToneCompensation"), v118, (float)v16, (float)v16);
  }
  sub_1D53F63AC(a1);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v10;
  v19 = (id)*MEMORY[0x1E0CBCC40];
  sub_1D53C3EE8(v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = v118;
  v118 = v20;

  if (v20)
  {
    v25 = sub_1D54110A8(v22, (const char *)off_1E99A17E0, (uint64_t *)&v118, v23, v24);
    if (v25 != 0x7FFF)
      sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), v19, v118, (float)v25, (float)v25);
  }
  sub_1D53F63AC(a1);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = sub_1D53FAE98(v26, v18, CFSTR("HueAdjustment"));

  if (v27)
  {
    sub_1D53F63AC(a1);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = sub_1D53FAF14(v28, v18, CFSTR("HueAdjustment"));

    v30 = v29 >= 0 ? v29 : -v29;
    if (v30 <= 0x7E)
      sub_1D53F9628(a1, CFSTR("HueAdjustment"), v29);
  }
  sub_1D53F63AC(a1);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = v18;
  v33 = CFSTR("ToningEffect");
  sub_1D53C3EE8(v31, v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = v118;
  v118 = v34;

  if (v34)
    sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), v33, v34, 32767.0, 32767.0);
  v114 = v34;
  sub_1D53F63AC(a1);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = v32;
  sub_1D53FAE18(v36, v37, CFSTR("_Nikon23Tag"));
  v38 = (void *)objc_claimAutoreleasedReturnValue();

  if (v38)
  {
    v43 = objc_msgSend_count(v38, v39, v40, v41, v42);
    if (v43 >= 0x3A)
    {
      sub_1D5285340(__p, v43);
      *(_QWORD *)&v119[0] = 0;
      do
      {
        v47 = sub_1D53BD2F0(v38, (const char *)v119, v44, v45, v46);
        *((_BYTE *)__p[0] + (*(_QWORD *)&v119[0])++) = v47;
      }
      while (*(_QWORD *)&v119[0] < v43);
      v111 = v33;
      v113 = *((unsigned __int8 *)__p[0] + 51);
      v107 = *((unsigned __int8 *)__p[0] + 52);
      v108 = *((unsigned __int8 *)__p[0] + 50);
      v49 = *((unsigned __int8 *)__p[0] + 53);
      v105 = *((_BYTE *)__p[0] + 48);
      v106 = *((unsigned __int8 *)__p[0] + 54);
      v110 = *((unsigned __int8 *)__p[0] + 55);
      v112 = *((unsigned __int8 *)__p[0] + 56);
      v50 = *((unsigned __int8 *)__p[0] + 57);
      memset(v119, 0, 21);
      v51 = *(_OWORD *)((char *)__p[0] + 4);
      LODWORD(v119[1]) = *((_DWORD *)__p[0] + 5);
      v119[0] = v51;
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v48, (uint64_t)v119, v45, v46);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E0CB3500], v53, v54, v55, v56);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      v104 = v19;
      objc_msgSend_stringByTrimmingCharactersInSet_(v52, v58, (uint64_t)v57, v59, v60);
      v61 = objc_claimAutoreleasedReturnValue();
      v62 = (void *)v61;
      if (v61)
        v63 = (__CFString *)v61;
      else
        v63 = &stru_1E99A7480;
      v116 = v63;

      v119[0] = *(_OWORD *)((char *)__p[0] + 24);
      LODWORD(v119[1]) = *((_DWORD *)__p[0] + 10);
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v64, (uint64_t)v119, v65, v66);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E0CB3500], v68, v69, v70, v71);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringByTrimmingCharactersInSet_(v67, v73, (uint64_t)v72, v74, v75);
      v76 = objc_claimAutoreleasedReturnValue();
      v77 = (void *)v76;
      if (v76)
        v78 = (__CFString *)v76;
      else
        v78 = &stru_1E99A7480;
      v115 = v78;

      v82 = sub_1D54110A8(v79, (const char *)off_1E99A1840, (uint64_t *)&v116, v80, v81);
      v83 = v82;
      v86 = sub_1D54110A8(v82, (const char *)off_1E99A1840, (uint64_t *)&v115, v84, v85);
      v87 = v116;
      v109 = v115;
      v88 = sub_1D5408EBC(v116, v115, 0) == 0;
      if (v86 == 0x7FFF)
        v88 = 1;
      if (v86 == v83)
        v88 = 1;
      v89 = (float)v83;
      if (v88 && v86 == 0x7FFF)
        v90 = v83;
      else
        v90 = v86;
      if (!v88)
        v89 = 0.0;
      sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("PictureStyle"), v87, v89, (float)v90);
      v92 = sub_1D54129EC(v91, v90, (v113 - 128));
      v93 = v49 - 125;
      if ((v49 - 125) >= 7)
      {
        v93 = v49 - 128;
      }
      else
      {
        v94 = v90 - 2;
        if ((v90 - 2) <= 7 && ((0xCFu >> v94) & 1) != 0)
          v93 = *((_DWORD *)*(&off_1E99A2340 + v94) + v93);
      }
      if ((v113 & 0x80u) == 0)
        v95 = 128 - v113;
      else
        v95 = v113 - 128;
      if (v95 <= 126)
        sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), (void *)*MEMORY[0x1E0CBCB28], 0, (float)(v113 - 128), (float)(int)v92);
      if ((v49 & 0x80u) == 0)
        v96 = 128 - v49;
      else
        v96 = v49 - 128;
      if (v96 <= 126)
        sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), v104, 0, (float)(v49 - 128), (float)v93);
      sub_1D5412A30(v92, v112);
      v97 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), v111, v97, (float)v112, (float)v112);

      v98 = (char)v112 < -125 || v90 == 11;
      v99 = CFSTR("{PictureStyle}");
      v100 = CFSTR("FilterEffect");
      switch(v110)
      {
        case 0x80u:
          v101 = CFSTR("Off");
          break;
        case 0x81u:
          v101 = CFSTR("Yellow");
          break;
        case 0x82u:
          v101 = CFSTR("Orange");
          break;
        case 0x83u:
          v101 = CFSTR("Red");
          break;
        case 0x84u:
          v101 = CFSTR("Green");
          break;
        default:
          if (v110 == 255)
            v101 = CFSTR("N/A");
          else
            v101 = 0;
          break;
      }
      sub_1D53F96CC(a1, v99, v100, v101, (float)v110, (float)v110);

      sub_1D53F9628(a1, (void *)*MEMORY[0x1E0CBCC68], v108 - 128);
      sub_1D53F9628(a1, (void *)*MEMORY[0x1E0CBCB00], v107 - 128);
      if ((v106 & 0x80u) == 0)
        v102 = 128 - v106;
      else
        v102 = v106 - 128;
      if (v102 <= 126)
        sub_1D53F9628(a1, CFSTR("HueAdjustment"), v106 - 128);
      if ((v50 & 0x80u) == 0)
        v103 = 128 - v50;
      else
        v103 = v50 - 128;
      if (v103 <= 126)
        sub_1D53F9628(a1, CFSTR("ToningSaturation"), v50 - 128);
      sub_1D53F9628(a1, CFSTR("PictureControlAdjust"), v105 & 0x7F);
      sub_1D53F9628(a1, CFSTR("Monochrome"), v98);

      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }

}

void sub_1D541287C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D54129EC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;
  int v4;

  result = a3;
  if ((a3 + 3) <= 6)
  {
    v4 = a2 - 2;
    if ((a2 - 2) <= 9 && ((0x2CFu >> v4) & 1) != 0)
      return *((unsigned int *)*(&off_1E99A22F0 + v4) + (a3 + 3));
    else
      return (a3 + 3);
  }
  return result;
}

const __CFString *sub_1D5412A30(uint64_t a1, unsigned __int8 a2)
{
  const __CFString *result;

  switch(a2)
  {
    case 0x80u:
      result = CFSTR("Black and White");
      break;
    case 0x81u:
      result = CFSTR("Sepia");
      break;
    case 0x82u:
      result = CFSTR("Cyanotype");
      break;
    case 0x83u:
      result = CFSTR("Red");
      break;
    case 0x84u:
      result = CFSTR("Yellow");
      break;
    case 0x85u:
      result = CFSTR("Green");
      break;
    case 0x86u:
      result = CFSTR("Blue-green");
      break;
    case 0x87u:
      result = CFSTR("Blue");
      break;
    case 0x88u:
      result = CFSTR("Purple-blue");
      break;
    case 0x89u:
      result = CFSTR("Red-purple ");
      break;
    default:
      if (a2 == 255)
        result = CFSTR("N/A");
      else
        result = 0;
      break;
  }
  return result;
}

uint64_t sub_1D5412AE4(uint64_t a1, void *a2, unsigned int a3, _DWORD *a4, uint64_t *a5)
{
  id v7;
  _BOOL4 v8;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  BOOL v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  float v31;
  int v32;
  int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  unsigned int v41;
  int v42;
  BOOL v43;
  int v44;
  int v45;
  float v46;
  float v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  int32x2_t v55;
  int v56;
  _BOOL4 v58;
  _BOOL4 v59;
  BOOL v60;
  _BOOL4 v61;
  _BOOL4 v62;
  _BOOL4 v63;
  _BOOL4 v64;
  _BOOL4 v65;
  uint64_t v66;
  _BOOL4 v67;
  _BOOL4 v68;
  _BOOL4 v69;
  _BOOL4 v70;
  _BOOL4 v71;
  unsigned int v72;
  _BOOL4 v73;
  _BOOL4 v74;
  void *v77;
  __int128 v78;

  v7 = a2;
  HIDWORD(v66) = sub_1D53F4BF8(v7, CFSTR("D7000"), 1);
  v60 = sub_1D53F4BF8(v7, CFSTR("D7100"), 1);
  LODWORD(v66) = sub_1D53F4BF8(v7, CFSTR("D700"), 1);
  v8 = sub_1D53F4BF8(v7, CFSTR("D3000"), 1);
  v74 = sub_1D53F4BF8(v7, CFSTR("D3100"), 1);
  v73 = sub_1D53F4BF8(v7, CFSTR("D3200"), 1);
  v71 = sub_1D53F4BF8(v7, CFSTR("D300S"), 1);
  v70 = sub_1D53F4BF8(v7, CFSTR("D300"), 1);
  v69 = sub_1D53F4BF8(v7, CFSTR("D3X"), 1);
  v68 = sub_1D53F4BF8(v7, CFSTR("D3S"), 1);
  v67 = sub_1D53F4BF8(v7, CFSTR("D3"), 1);
  v9 = sub_1D53F4BF8(v7, CFSTR("D90"), 1);
  v10 = sub_1D53F4BF8(v7, CFSTR("D5000"), 1);
  v11 = sub_1D53F4BF8(v7, CFSTR("D5100"), 1);
  v59 = sub_1D53F4BF8(v7, CFSTR("D5200"), 1);
  v58 = sub_1D53F4BF8(v7, CFSTR("D5300"), 1);
  v65 = sub_1D53F4BF8(v7, CFSTR("wide"), 1);
  v64 = sub_1D53F4BF8(v7, CFSTR("D4"), 1);
  v63 = sub_1D53F4BF8(v7, CFSTR("Df"), 1);
  v62 = sub_1D53F4BF8(v7, CFSTR("D800"), 1);
  v61 = sub_1D53F4BF8(v7, CFSTR("D810"), 1);
  v12 = sub_1D53F4BF8(v7, CFSTR("D600"), 1);
  v13 = sub_1D53F4BF8(v7, CFSTR("D610"), 1);
  v14 = sub_1D53F4BF8(v7, CFSTR("D750"), 1);
  sub_1D5413624(a1, a3);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v77 = v15;
  if (v15)
  {
    v16 = v15;
    v72 = sub_1D5407D7C(v15, 0);
    v17 = sub_1D5407D7C(v16, 1uLL);
    v18 = sub_1D5407D7C(v16, 2uLL) + 10 * v17;
    v19 = v18 - 528;
    if (v9 || v10 || v8 || v74 || v73)
    {
      v20 = 0xB20000010C0;
      if (v8)
        v20 = 0xA2000000F20;
      v21 = v77;
      *a5 = v20;
      v22 = v19 + (v72 << 8) - 14080;
      if (v22 <= 3077)
      {
        if (v22 <= 2821)
        {
          if (v19 + (v72 << 8) == 16645)
          {
            v23 = 2;
            goto LABEL_73;
          }
          if (v19 + (v72 << 8) == 16646)
          {
            v23 = 4;
            goto LABEL_73;
          }
        }
        else
        {
          switch(v19 + (v72 << 8))
          {
            case 0x4206u:
              v23 = 1;
              goto LABEL_73;
            case 0x4207u:
              v23 = 9;
              goto LABEL_73;
            case 0x4305u:
              v23 = 10;
              goto LABEL_73;
          }
        }
      }
      else if (v22 > 3334)
      {
        switch(v19 + (v72 << 8))
        {
          case 0x4407u:
            v23 = 6;
            goto LABEL_73;
          case 0x4505u:
            v23 = 5;
            goto LABEL_73;
          case 0x4506u:
            v23 = 8;
            goto LABEL_73;
        }
      }
      else
      {
        switch(v19 + (v72 << 8))
        {
          case 0x4306u:
            v23 = 11;
            if (!v65)
              v23 = 0;
            goto LABEL_73;
          case 0x4307u:
            v23 = 7;
            goto LABEL_73;
          case 0x4406u:
            v23 = 3;
LABEL_73:
            v48 = dword_1D545B514[v23];
            v49 = dword_1D545B548[v23];
            v50 = dword_1D545B57C[v23];
            v51 = dword_1D545B5B0[v23];
LABEL_92:
            *a4 = v48;
            a4[1] = v49;
            a4[2] = v50;
            a4[3] = v51;
LABEL_93:
            v25 = 1;
            goto LABEL_94;
        }
      }
      v23 = 12;
      goto LABEL_73;
    }
    v21 = v77;
    if (v11)
    {
      *a5 = 0xCC000001340;
      v26 = v19 + (v72 << 8) - 14080;
      if (v26 <= 3077)
      {
        if (v26 <= 2821)
        {
          if (v19 + (v72 << 8) == 16645)
          {
            v27 = 2;
            goto LABEL_91;
          }
          if (v19 + (v72 << 8) == 16646)
          {
            v27 = 4;
            goto LABEL_91;
          }
        }
        else
        {
          switch(v19 + (v72 << 8))
          {
            case 0x4206u:
              v27 = 1;
              goto LABEL_91;
            case 0x4207u:
              v27 = 9;
              goto LABEL_91;
            case 0x4305u:
              v27 = 10;
              goto LABEL_91;
          }
        }
      }
      else if (v26 > 3334)
      {
        switch(v19 + (v72 << 8))
        {
          case 0x4407u:
            v27 = 6;
            goto LABEL_91;
          case 0x4505u:
            v27 = 5;
            goto LABEL_91;
          case 0x4506u:
            v27 = 8;
            goto LABEL_91;
        }
      }
      else
      {
        switch(v19 + (v72 << 8))
        {
          case 0x4306u:
            v27 = 11;
            if (!v65)
              v27 = 0;
            goto LABEL_91;
          case 0x4307u:
            v27 = 7;
            goto LABEL_91;
          case 0x4406u:
            v27 = 3;
LABEL_91:
            v56 = dword_1D545B5E4[v27];
            v49 = dword_1D545B618[v27];
            v50 = dword_1D545B64C[v27];
            v51 = dword_1D545B680[v27];
            v48 = v56 + 65;
            goto LABEL_92;
        }
      }
      v27 = 12;
      goto LABEL_91;
    }
    v28 = v18 - 480;
    if (v70 && !v8 && !v71 || v71)
    {
      v29 = 1;
      v30 = 0xB3400001100;
      v31 = 110.0;
      v32 = 1124204544;
      v33 = 1127481344;
      v34 = 80.0;
      v35 = 200.0;
      v36 = 150.0;
      v37 = 212.0;
      v38 = 240.0;
      v39 = 1.4;
      v40 = 1.4;
      goto LABEL_37;
    }
    v29 = 1;
    v30 = 0xB1C000010C0;
    v31 = 110.0;
    v32 = 1124204544;
    v33 = 1127481344;
    v34 = 80.0;
    v35 = 200.0;
    v36 = 150.0;
    v37 = 212.0;
    v40 = 1.02;
    v38 = 240.0;
    v39 = 0.99;
    if (v67 && !v8 && !v71 && !v70 && !v69 && !v68 || v68 || v66 == 1)
    {
LABEL_37:
      *a5 = v30;
      if ((int)(67 - v72) >= 0)
        v41 = 67 - v72;
      else
        v41 = v72 - 67;
      if (v41 <= 1)
        v29 = 0;
      v42 = v28 + v29;
      v44 = v42 - 54;
      v43 = v42 - 54 < 0;
      v45 = 54 - v42;
      if (!v43)
        v45 = v44;
      v46 = (float)v44;
      if (v45 > 1)
      {
        v47 = (float)((float)(v34 * v46) / (float)v45) + (float)(v35 * v46);
        v37 = *(float *)&v33;
        v36 = *(float *)&v32;
      }
      else
      {
        v47 = v38 * v46;
        v31 = 125.0;
      }
      LODWORD(v78) = (int)(float)(v39 * v47);
      DWORD1(v78) = (int)(float)(v40 * (float)(v37 * (float)(int)(67 - v72)));
      sub_1D5282DF0((_DWORD *)&v78 + 2, (float)(v39 * v36), (float)(v40 * v31));
      *(_OWORD *)a4 = v78;
      goto LABEL_93;
    }
    if (v64 || v63)
    {
      v29 = 1;
      v30 = 0xCDC00001380;
      v31 = 110.0;
      v32 = 1124204544;
      v33 = 1127481344;
      v34 = 80.0;
      v35 = 200.0;
      v36 = 150.0;
      v37 = 212.0;
      v38 = 240.0;
      v39 = 1.15;
LABEL_36:
      v40 = v39;
      goto LABEL_37;
    }
    if (!v12 && !v13)
    {
      if (v62 || v61)
      {
        v29 = 1;
        v30 = 0x133C00001D00;
        v31 = 110.0;
        v32 = 1124204544;
        v33 = 1127481344;
        v34 = 80.0;
        v35 = 200.0;
        v36 = 150.0;
        v40 = 1.72;
        v37 = 212.0;
        v39 = 1.7;
        v38 = 240.0;
        goto LABEL_37;
      }
      if (v14)
      {
        v29 = 1;
        v30 = 0xFB000001780;
        v39 = 1.25;
        v31 = 110.0;
        v32 = 1124204544;
        v33 = 1127481344;
        v34 = 80.0;
        v35 = 200.0;
        v36 = 150.0;
        v37 = 212.0;
        v40 = 1.25;
        v38 = 240.0;
        goto LABEL_37;
      }
      v30 = 0xFB400001790;
      if (!v60)
      {
        if (v69)
        {
          v29 = 1;
          v31 = 110.0;
          v32 = 1124204544;
          v33 = 1127481344;
          v34 = 80.0;
          v35 = 200.0;
          v36 = 150.0;
          v37 = 212.0;
          v38 = 240.0;
          v40 = 1.45;
          v39 = 1.4;
        }
        else
        {
          v34 = 30.0;
          v33 = 1132756992;
          if ((v66 & 0x100000000) != 0)
          {
            v29 = 4;
            v30 = 0xCC000001340;
            v31 = 125.0;
            v35 = 210.0;
            v36 = 150.0;
            v38 = 225.0;
            v39 = 1.4;
            v40 = 1.4;
            v37 = 225.0;
            v32 = 1125515264;
          }
          else
          {
            if (!v59 && !v58)
            {
              v25 = 0;
              goto LABEL_94;
            }
            v29 = 4;
            v30 = 17179869190000;
            v35 = 210.0;
            v36 = 125.0;
            v38 = 225.0;
            v39 = 1.7;
            v40 = 1.7;
            v37 = 225.0;
            v32 = 1123680256;
            v31 = 125.0;
          }
        }
        goto LABEL_37;
      }
      v30 = 0xFB400001794;
      v29 = 1;
      v31 = 110.0;
      v32 = 1124204544;
      v33 = 1127481344;
      v34 = 80.0;
      v35 = 200.0;
      v36 = 150.0;
      v37 = 212.0;
      v38 = 240.0;
      v39 = 1.95;
      goto LABEL_36;
    }
    v25 = 0;
    *a5 = 0xFBC000017C0;
    if ((v28 - 49) <= 9 && v72 >= 0x41 && v72 <= 0x45)
    {
      v52 = v72 - 65;
      v53 = v28 - 44;
      if (((v72 - 65) & 0xFFFFFFFB) != 0)
        v53 = v19;
      v54 = v53 - 1;
      v55.i32[0] = dword_1D545B6B4[11 * v52 + v54];
      v55.i32[1] = dword_1D545B790[11 * v52 + v54];
      *(int32x2_t *)a4 = vcvt_s32_f32(vmla_f32((float32x2_t)0x42700000C2700000, (float32x2_t)vdup_n_s32(0x437A0000u), vcvt_f32_s32(v55)));
      *((_QWORD *)a4 + 1) = 0x7800000078;
      goto LABEL_93;
    }
  }
  else if (a3)
  {
    v24 = a1;
    v21 = 0;
    sub_1D5412AE4(v24, v7, 0, a4, a5);
    v25 = 0;
  }
  else
  {
    v25 = 0;
    v21 = 0;
  }
LABEL_94:

  return v25;
}

void sub_1D5413598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

id sub_1D5413624(uint64_t a1, unsigned int a2)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;

  sub_1D5415614(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2 >= objc_msgSend_length(v3, v4, v5, v6, v7) / 0xCuLL)
  {
    v10 = 0;
  }
  else
  {
    objc_msgSend_substringWithRange_(v3, v8, 12 * a2, 12, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v10;
}

void sub_1D5413694(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1D54136A4(uint64_t a1, void *a2, unsigned int a3, _DWORD *a4, uint64_t *a5)
{
  id v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  int v17;
  int v18;
  _DWORD *v19;
  int v20;
  _BOOL8 v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  _BOOL4 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _BOOL4 v32;
  _BOOL4 v33;
  __int128 v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v33 = sub_1D53F4BF8(v6, CFSTR("D100"), 1);
  v30 = sub_1D53F4BF8(v6, CFSTR("D200"), 1);
  v29 = sub_1D53F4BF8(v6, CFSTR("D80"), 1);
  v32 = sub_1D53F4BF8(v6, CFSTR("D70"), 1);
  v7 = sub_1D53F4BF8(v6, CFSTR("D60"), 1);
  v8 = sub_1D53F4BF8(v6, CFSTR("D50"), 1);
  v9 = sub_1D53F4BF8(v6, CFSTR("D40"), 1);
  v27 = sub_1D53F4BF8(v6, CFSTR("D2"), 1);
  v28 = sub_1D53F4BF8(v6, CFSTR("D1X"), 1);
  v10 = sub_1D53F4BF8(v6, CFSTR("D1H"), 1);
  v11 = sub_1D53F4BF8(v6, CFSTR("D1"), 1);
  v12 = sub_1D53F4BF8(v6, CFSTR("P6000"), 1);
  v13 = sub_1D53F4BF8(v6, CFSTR("E8400"), 1);
  v14 = sub_1D53F4BF8(v6, CFSTR("E8700"), 1);
  v15 = sub_1D53F4BF8(v6, CFSTR("E8800"), 1);
  if (v7 || v9)
  {
    *a5 = 0xA3800000F40;
    if (a3 <= 4)
    {
      v16 = dword_1D545B86C[a3];
      v17 = dword_1D545B880[a3];
      v18 = dword_1D545B894[a3];
      v19 = &unk_1D545B8A8;
LABEL_7:
      v20 = v19[a3];
      *a4 = v16;
      a4[1] = v17;
      a4[2] = v18;
      a4[3] = v20;
      v21 = 1;
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v32 || v33 || v8)
  {
    *a5 = 0x7DE00000BE0;
    if (a3 <= 4)
    {
      v16 = dword_1D545B8BC[a3];
      v17 = dword_1D545B8D0[a3];
      v18 = dword_1D545B8E4[a3];
      v19 = &unk_1D545B8F8;
      goto LABEL_7;
    }
    goto LABEL_22;
  }
  if (!v29 && !v30)
  {
    if (v13 || v14 || v15)
    {
      *a5 = 0x99600000CD0;
      if (a3 <= 4)
      {
        v16 = dword_1D545B990[a3];
        v17 = dword_1D545B9A4[a3];
        v18 = dword_1D545B9B8[a3];
        v19 = &unk_1D545B9CC;
        goto LABEL_7;
      }
    }
    else
    {
      if (!v28 && !v10 && (!v11 || v33))
      {
        if (v12)
        {
          v21 = 0;
          v25 = 0xC5600001080;
        }
        else
        {
          v38 = 0;
          v35 = 0u;
          v36 = 0;
          *(_QWORD *)((char *)&v35 + 4) = 0xFFFFFD8000000280;
          v37 = xmmword_1D545BDB0;
          if (v27)
          {
            *a5 = 0xB20000010C0;
            if (a3 < 0xB)
            {
              v16 = dword_1D545BA30[a3];
              v17 = *((_DWORD *)&v35 + a3);
              v18 = dword_1D545BA5C[a3];
              v19 = &unk_1D545BA88;
              goto LABEL_7;
            }
            goto LABEL_22;
          }
          v21 = 0;
          v25 = 0x7DE00000BE0;
        }
        *a5 = v25;
        goto LABEL_23;
      }
      *a5 = 0x7AA00000BBELL;
      if (a3 <= 4)
      {
        v16 = dword_1D545B9E0[a3];
        v17 = dword_1D545B9F4[a3];
        v18 = dword_1D545BA08[a3];
        v19 = &unk_1D545BA1C;
        goto LABEL_7;
      }
    }
LABEL_22:
    v21 = 0;
    goto LABEL_23;
  }
  *a5 = 0xA2800000F30;
  v38 = 0;
  v35 = 0u;
  v36 = 0;
  *(_QWORD *)((char *)&v35 + 4) = 0xFFFFFDD000000230;
  v37 = xmmword_1D545BDC0;
  v21 = a3 < 0xB;
  if (a3 <= 0xA)
  {
    v22 = *((_DWORD *)&v35 + a3);
    v23 = dword_1D545B938[a3];
    v24 = dword_1D545B964[a3];
    *a4 = dword_1D545B90C[a3];
    a4[1] = v22;
    a4[2] = v23;
    a4[3] = v24;
  }
LABEL_23:

  return v21;
}

void sub_1D5413B40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5413B88(uint64_t a1, _DWORD *a2, unint64_t a3, unsigned int a4, unsigned __int8 a5)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v10;
  uint64_t result;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  char v16[4];
  char v17;
  uint64_t v18;
  uint64_t v19;

  if (a3 < 0xC)
    return 0;
  v18 = v5;
  v19 = v6;
  v10 = a2 + 1;
  *(_DWORD *)v16 = *a2;
  v17 = 0;
  result = atoi(v16);
  if (result >= 0xC9)
  {
    if (a4)
    {
      v12 = byte_1D545BAB4[a5];
      v13 = byte_1D545BAB4[((BYTE2(a4) ^ BYTE1(a4) ^ a4) ^ HIBYTE(a4)) + 256];
      v14 = a3 - 4;
      v15 = 96;
      do
      {
        v13 += v15 * v12;
        ++v15;
        *v10++ ^= v13;
        --v14;
      }
      while (v14);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

id sub_1D5413C48(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64x2_t v6;
  char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  id v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  id v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  void *v77;
  double v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  double v96;
  long double v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  double v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  double v113;
  unint64_t v114;
  void **v115;
  __int128 v116;
  double v117;
  __int128 v118;
  __int128 v119;
  long double v120;
  double v123;
  long double v124;
  double v125;
  long double v126;
  long double v127;
  double v128;
  uint64_t v129;
  double v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  double v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *j;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  double v156;
  double v157;
  void *v158;
  void *v159;
  void *v160;
  void *v161;
  double v162;
  char *v163;
  char *v164;
  void *v165[2];
  uint64_t v166;
  void *__p[2];
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;

  v6 = vdupq_n_s64((unint64_t)a2);
  *(int8x8_t *)v6.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_s64(v6, (int64x2_t)xmmword_1D545BDE0), (int32x4_t)vshlq_s64(v6, (int64x2_t)xmmword_1D545BDD0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_s64(v6, (int64x2_t)xmmword_1D545BE00), (int32x4_t)vshlq_s64(v6, (int64x2_t)xmmword_1D545BDF0))));
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%02X %02X %02X %02X %02X %02X %02X %02X"), a4, a5, v6.u8[7], v6.u8[6], v6.u8[5], v6.u8[4], v6.u8[3], v6.u8[2], v6.u8[1], v6.u8[0]);
  v7 = (char *)objc_claimAutoreleasedReturnValue();
  v172 = 0;
  v173 = 0;
  v174 = 0;
  sub_1D54343BC(CFSTR("nikon"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v8;
  if (v8)
  {
    v163 = v7;
    sub_1D52EAE5C(v8, v7, v10, v11, v12);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    for (i = 0; ; i = v171 + 1)
    {
      v171 = i;
      if (i >= objc_msgSend_count(v18, v14, v15, v16, v17))
        break;
      sub_1D53BD380(v18, (const char *)&v171, v20, v21, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_count(v23, v24, v25, v26, v27) == 5)
      {
        __p[0] = 0;
        sub_1D53BC854(v23, (const char *)__p, v28, v29, v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        __p[0] = (void *)1;
        v35 = sub_1D53BD334(v23, (const char *)__p, v32, v33, v34);
        __p[0] = (void *)2;
        v39 = sub_1D53BD334(v23, (const char *)__p, v36, v37, v38);
        __p[0] = (void *)3;
        v43 = sub_1D53BD334(v23, (const char *)__p, v40, v41, v42);
        __p[0] = (void *)4;
        v47 = sub_1D53BD334(v23, (const char *)__p, v44, v45, v46);
        if (v31)
        {
          v48 = v47;
          v49 = objc_retainAutorelease(v31);
          v54 = (char *)objc_msgSend_UTF8String(v49, v50, v51, v52, v53);
          sub_1D52850A0(v165, v54);
          if (SHIBYTE(v166) < 0)
          {
            sub_1D5290130(__p, v165[0], (unint64_t)v165[1]);
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)v165;
            v168 = v166;
          }
          *(double *)&v169 = v35;
          *((double *)&v169 + 1) = v39;
          *(double *)&v170 = v43;
          *((double *)&v170 + 1) = v48;
          sub_1D5408F8C(&v172, (__int128 *)__p);
          if (SHIBYTE(v168) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v166) < 0)
            operator delete(v165[0]);
        }

      }
    }

    v7 = v163;
  }
  v55 = v172;
  if (v173 - v172 != 56)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v173 - v172) >> 3)) < 2)
    {
      v56 = 0;
      goto LABEL_85;
    }
    sub_1D53FDB60(a1);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F63AC(a1);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D5297C60(v58, (void *)*MEMORY[0x1E0CBCA28], 0);
    v59 = (void *)objc_claimAutoreleasedReturnValue();

    sub_1D529EA84(v57, (const char *)*MEMORY[0x1E0CBCBA0], v60, v61, v62);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D529EA84(v57, (const char *)*MEMORY[0x1E0CBCC00], v64, v65, v66);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52EAE5C(v59, (const char *)*MEMORY[0x1E0CBCA50], v68, v69, v70);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    v77 = v71;
    v78 = 0.0;
    if (v71)
    {
      v80 = 0.0;
      if (objc_msgSend_count(v71, v72, v73, v74, v75) == 4)
      {
        __p[0] = 0;
        v78 = sub_1D53BD334(v77, (const char *)__p, v79, v74, v75);
        __p[0] = (void *)1;
        v80 = sub_1D53BD334(v77, (const char *)__p, v81, v82, v83);
        __p[0] = (void *)2;
        sub_1D53BD334(v77, (const char *)__p, v84, v85, v86);
        __p[0] = (void *)3;
        v76 = sub_1D53BD334(v77, (const char *)__p, v87, v88, v89);
      }
    }
    else
    {
      v80 = 0.0;
    }
    v90 = v172;
    if (*(char *)(v172 + 23) < 0)
      v90 = *(_QWORD *)v172;
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v72, v90, v74, v75, v76);
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    if (v63)
    {
      v164 = v7;
      v161 = v57;
      v160 = v63;
      v158 = v95;
      v159 = v77;
      objc_msgSend_doubleValue(v63, v91, v92, v93, v94);
      v97 = v96;
      objc_msgSend_doubleValue(v67, v98, v99, v100, v101);
      v103 = exp2(v102 * 0.5);
      sub_1D52B261C(0x6DB6DB6DB6DB6DB7 * ((v173 - v172) >> 3));
      v108 = (void *)objc_claimAutoreleasedReturnValue();
      v110 = v172;
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v173 - v172) >> 3)) >= 2)
      {
        v156 = log(v97);
        v111 = 0;
        v112 = 0;
        v113 = 999999999.0;
        v114 = 1;
        v162 = v103;
        while (1)
        {
          v115 = (void **)(v110 + v111 + 56);
          if (*(char *)(v110 + v111 + 79) < 0)
          {
            v117 = v113;
            sub_1D5290130(__p, *v115, *(_QWORD *)(v110 + v111 + 64));
            v113 = v117;
          }
          else
          {
            v116 = *(_OWORD *)v115;
            v168 = *(_QWORD *)(v110 + v111 + 72);
            *(_OWORD *)__p = v116;
          }
          v118 = *(_OWORD *)(v110 + v111 + 96);
          v169 = *(_OWORD *)(v110 + v111 + 80);
          v170 = v118;
          v119 = v169;
          v120 = *((double *)&v118 + 1);
          v109 = *(double *)&v118;
          if ((v78 <= 0.0 || vabdd_f64(v78, *(double *)&v169) <= 0.9)
            && (v80 <= 0.0 || vabdd_f64(v80, *((double *)&v169 + 1)) <= 0.9)
            && v97 >= *(double *)&v169 + -0.9
            && v97 <= *((double *)&v169 + 1) + 0.9)
          {
            if (v103 <= 0.0)
            {
              v130 = v113;
LABEL_60:
              if (v168 >= 0)
                objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v104, (uint64_t)__p, v106, v107);
              else
                objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v104, (uint64_t)__p[0], v106, v107);
              v134 = (void *)objc_claimAutoreleasedReturnValue();
              if (v134)
                objc_msgSend_addObject_(v108, v131, (uint64_t)v134, v132, v133);

              v113 = v130;
              goto LABEL_66;
            }
            if (v103 >= *(double *)&v170 + -0.15 && v103 <= *((double *)&v170 + 1) + 0.15)
            {
              if (*(double *)&v169 != *((double *)&v169 + 1) && *(double *)&v170 != *((double *)&v170 + 1))
              {
                v157 = v113;
                v123 = log(*(long double *)&v118);
                v124 = log(v120) - v123;
                v125 = log(*((long double *)&v119 + 1));
                v126 = log(*(long double *)&v119);
                v127 = v123 + v124 / (v125 - v126) * (v156 - v126);
                v103 = v162;
                v109 = exp(v127);
                v113 = v157;
              }
              v128 = vabdd_f64(v103, v109);
              v109 = v113 + 0.15;
              if (v128 <= v113 + 0.15)
              {
                if (v128 < v113 + -0.15)
                {
                  if (v168 >= 0)
                    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v104, (uint64_t)__p, v106, v107);
                  else
                    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v104, (uint64_t)__p[0], v106, v107);
                  v129 = objc_claimAutoreleasedReturnValue();

                  v112 = (void *)v129;
                }
                v130 = v128;
                v103 = v162;
                goto LABEL_60;
              }
              v103 = v162;
            }
          }
LABEL_66:
          if (SHIBYTE(v168) < 0)
          {
            v135 = v113;
            operator delete(__p[0]);
            v113 = v135;
          }
          ++v114;
          v110 = v172;
          v111 += 56;
          if (v114 >= 0x6DB6DB6DB6DB6DB7 * ((v173 - v172) >> 3))
            goto LABEL_72;
        }
      }
      v112 = 0;
LABEL_72:
      v7 = v164;
      if (objc_msgSend_count(v108, v104, v105, v106, v107, v109))
      {
        objc_msgSend_stringWithString_(MEMORY[0x1E0CB37A0], v136, (uint64_t)v112, v137, v138);
        v56 = (id)objc_claimAutoreleasedReturnValue();
        for (j = 0; ; j = (char *)__p[0] + 1)
        {
          __p[0] = j;
          if ((unint64_t)j >= objc_msgSend_count(v108, v139, v140, v141, v142))
            break;
          sub_1D53BC854(v108, (const char *)__p, v144, v145, v146);
          v147 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_length(v56, v148, v149, v150, v151))
          {
            if (!v112 || (objc_msgSend_isEqualToString_(v147, v152, (uint64_t)v112, v153, v154) & 1) == 0)
              objc_msgSend_appendFormat_(v56, v152, (uint64_t)CFSTR(" or %@"), v153, v154, v147);
          }
          else
          {
            objc_msgSend_appendString_(v56, v152, (uint64_t)v147, v153, v154);
          }

        }
        v57 = v161;
        v63 = v160;
        v95 = v158;
        v77 = v159;
        goto LABEL_84;
      }

      v57 = v161;
      v63 = v160;
      v95 = v158;
      v77 = v159;
    }
    v56 = v95;
LABEL_84:

    goto LABEL_85;
  }
  if (*(char *)(v172 + 23) < 0)
    v55 = *(_QWORD *)v172;
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v9, v55, v11, v12);
  v56 = (id)objc_claimAutoreleasedReturnValue();
LABEL_85:

  __p[0] = &v172;
  sub_1D5409CB0((void ***)__p);

  return v56;
}

void sub_1D5414424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;

  if (a41 < 0)
    operator delete(__p);

  __p = (void *)(v44 - 176);
  sub_1D5409CB0((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1D54145F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  _BYTE v23[100];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned int *)(a4 + 4);
  v9 = *(unsigned __int16 *)(a4 + 2);
  if (v9 > 0x6F)
    v10 = 0;
  else
    v10 = qword_1D545BCD0[v9];
  v11 = v10 * v8;
  if ((unint64_t)(v10 * v8) <= 0x63)
  {
    LODWORD(v12) = *(_DWORD *)(a4 + 8);
    v13 = bswap32(v12);
    v12 = a6 ? v13 : v12;
    if (sub_1D53F5F40(a1, (uint64_t)v23, v11, a5, v12) == v11)
    {
      v23[v11] = 0;
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v14, (uint64_t)v23, v15, v16);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = sub_1D54110A8((uint64_t)v22, (const char *)off_1E99A1840, (uint64_t *)&v22, v17, v18);
      sub_1D53F6390(a3);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = v22;
      sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), v20, v22, (float)v19, (float)v19);

      if (v19 == 11)
        sub_1D53F9628(a1, CFSTR("Monochrome"), 1);

    }
  }
}

void sub_1D541474C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D541477C(_BYTE *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  id v21;

  v11 = a2;
  if (*(_DWORD *)(a4 + 4))
  {
    v12 = (void *)MEMORY[0x1E0CB3940];
    v21 = v11;
    sub_1D53F6390(a3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v12, v14, (uint64_t)CFSTR("%@/%@"), v15, v16, v21, v13);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    v18 = *(_DWORD *)(a4 + 8);
    v19 = bswap32(v18);
    if ((_DWORD)a6)
      v20 = v19;
    else
      v20 = v18;
    sub_1D53FA480(a1, v17, word_1E99A2130, v20, a5, a6);

    v11 = v21;
  }

}

void sub_1D541484C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D5414870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;
  int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  void *v12;
  void *v13;
  double v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;

  if (*(_DWORD *)(a4 + 4) >= 3u)
  {
    v5 = *(char *)(a4 + 8);
    v6 = *(char *)(a4 + 9);
    v7 = *(unsigned __int8 *)(a4 + 10);
    sub_1D53F63AC(a1);
    v20 = (id)objc_claimAutoreleasedReturnValue();
    v8 = (float)v5 * (float)v6;
    if (!v7)
      v8 = -0.0;
    v9 = (float)(char)v7;
    if (!v7)
      v9 = 6.0;
    v10 = v8 / v9;
    if (v10 == 0.0)
      v11 = 0.0;
    else
      v11 = v10;
    sub_1D53F6410(a3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6390(a3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(float *)&v14 = v11;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v15, v16, v17, v18, v14);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v20, v12, v13, v19);

  }
}

void sub_1D5414980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1D54149AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  size_t v6;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  int v19;
  float v20;
  void *v21;
  void *v22;
  void *v23;
  BOOL v24;
  void *v25;
  void *v26;
  void *v27;
  double v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *__p;
  _BYTE *v35;

  v6 = *(unsigned int *)(a4 + 4);
  if ((v6 - 16385) >= 0xFFFFC00A)
  {
    sub_1D5285340(&__p, v6);
    v12 = *(_DWORD *)(a4 + 8);
    v13 = bswap32(v12);
    if (a6)
      v14 = v13;
    else
      v14 = v12;
    v15 = sub_1D53F5F40(a1, (uint64_t)__p, v35 - (_BYTE *)__p, a5, v14);
    v16 = __p;
    if (v15 == v35 - (_BYTE *)__p)
    {
      v17 = 0;
      v18 = 0;
      do
        v18 = (*((_BYTE *)__p + v17++) & 0xF) + 10 * v18;
      while (v17 != 4);
      if ((v18 - 100) <= 5)
      {
        v19 = *((char *)__p + 10);
        if ((float)((float)v19 / -6.0) == 0.0)
          v20 = 0.0;
        else
          v20 = (float)v19 / -6.0;
        sub_1D53F63AC(a1);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6410(a3);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6390(a3);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = sub_1D53FAE98(v21, v22, v23);

        if (!v24)
        {
          sub_1D53F63AC(a1);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F6410(a3);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F6390(a3);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(float *)&v28 = v20;
          objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v29, v30, v31, v32, v28);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D52DFEFC(v25, v26, v27, v33);

        }
      }
      v16 = __p;
    }
    if (v16)
    {
      v35 = v16;
      operator delete(v16);
    }
  }
}

void sub_1D5414B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v15 = v11;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_1D5414BC4(uint64_t a1, double result, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  double v19;
  unint64_t v20;
  double v21;
  unint64_t v22;
  double v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a5 + 4) >= 4u)
  {
    v24 = 0u;
    v25 = 0u;
    LODWORD(v10) = *(_DWORD *)(a5 + 8);
    v11 = bswap32(v10);
    v10 = a7 ? v11 : v10;
    if (sub_1D53F5F40(a1, (uint64_t)&v24, 32, a6, v10) == 32)
    {
      if (a7)
      {
        v16 = *(unsigned int *)(a5 + 4);
        if ((_DWORD)v16)
        {
          v17 = (unsigned int *)&v24;
          do
          {
            *v17 = bswap32(*v17);
            ++v17;
            --v16;
          }
          while (v16);
        }
      }
      LODWORD(v12) = DWORD1(v24);
      LODWORD(result) = v24;
      *(double *)&v18 = (double)v12;
      v19 = (double)*(unint64_t *)&result / *(double *)&v18;
      LODWORD(v13) = HIDWORD(v24);
      LODWORD(v18) = DWORD2(v24);
      *(double *)&v20 = (double)v13;
      v21 = (double)v18 / *(double *)&v20;
      LODWORD(v14) = DWORD1(v25);
      LODWORD(v20) = v25;
      *(double *)&v22 = (double)v14;
      v23 = (double)v20 / *(double *)&v22;
      LODWORD(v15) = HIDWORD(v25);
      LODWORD(v22) = DWORD2(v25);
      sub_1D53F9304(a1, v19, v21, v23, (double)v22 / (double)v15);
    }
  }
  return result;
}

void sub_1D5414CD4(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int16 v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  __int16 v18;
  uint64_t v19;
  __CFString *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int16 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int16 v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  void *__p;
  char *v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;

  v9 = a2;
  sub_1D53F63AC((uint64_t)a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53C3EE8(v10, (void *)*MEMORY[0x1E0CBD090], (void *)*MEMORY[0x1E0CBD0B8]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = 0;
  v14 = 0;
  v42 = 0;
  v41 = 0uLL;
  v15 = *(char *)(a4 + 8);
  v16 = *(char *)(a4 + 9);
  v17 = bswap32(*(unsigned __int16 *)(a4 + 10)) >> 16;
  if (a6)
    v18 = v17;
  else
    v18 = *(_WORD *)(a4 + 10);
  LODWORD(v19) = 11;
  do
  {
    LODWORD(v12) = sub_1D54136A4(v12, v11, v14, &v41, &v42);
    if ((_DWORD)v12)
      v19 = v19;
    else
      v19 = v13;
    v14 += v12;
    v13 = v14;
  }
  while (v19 > v14);
  if (v15 > 5)
    v20 = CFSTR(" UNKNOWN AF Mode");
  else
    v20 = off_1E99A2380[v15];
  v21 = sub_1D53F8CEC((uint64_t)a1, v20, v19, (void (*)(uint64_t, _QWORD))sub_1D5415000);
  v22 = v21;
  if (v21)
  {
    v23 = v21 >= 9 ? v18 : (v18 | HIBYTE(v18)) & 0x7F;
    if ((v16 & 0x80000000) == 0)
    {
      if ((v16 & 0x40) != 0)
        v24 = 1 << v16;
      else
        v24 = 0;
      if ((v16 & 0x40) != 0)
        v25 = 0;
      else
        v25 = 1 << v16;
      if ((v15 & 0xFFFFFFFE) == 2 && sub_1D53F4BF8(v11, CFSTR("D2"), 1))
      {
        v24 = 0;
        v25 = 0;
      }
      sub_1D53FDFE0(a1, v23, 0, 0);
      v26 = sub_1D53FDE90(a1, v25, v24, 0);
      v27 = 0;
      __p = 0;
      v39 = 0;
      v40 = 0;
      do
      {
        LOBYTE(v26) = sub_1D54136A4(v26, v11, v27, &v41, &v42);
        v28 = v39;
        if ((unint64_t)v39 >= v40)
        {
          v30 = (v39 - (_BYTE *)__p) >> 4;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 60)
            sub_1D5282B8C();
          v32 = v40 - (_QWORD)__p;
          if ((uint64_t)(v40 - (_QWORD)__p) >> 3 > v31)
            v31 = v32 >> 3;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
            v33 = 0xFFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
            v26 = (uint64_t)sub_1D5284334((uint64_t)&v40, v33);
          else
            v26 = 0;
          v34 = (char *)(v26 + 16 * v30);
          *(_OWORD *)v34 = v41;
          v36 = (char *)__p;
          v35 = v39;
          v37 = v34;
          if (v39 != __p)
          {
            do
            {
              *((_OWORD *)v37 - 1) = *((_OWORD *)v35 - 1);
              v37 -= 16;
              v35 -= 16;
            }
            while (v35 != v36);
            v35 = (char *)__p;
          }
          v29 = v34 + 16;
          __p = v37;
          v39 = v34 + 16;
          v40 = v26 + 16 * v33;
          if (v35)
            operator delete(v35);
        }
        else
        {
          *(_OWORD *)v39 = v41;
          v29 = v28 + 16;
        }
        v39 = v29;
        ++v27;
      }
      while (v22 > v27);
      sub_1D53FDE38(a1, (uint64_t)&__p, 0);
      sub_1D53FDE6C((uint64_t)a1, &v42, 0);
      if (__p)
      {
        v39 = (char *)__p;
        operator delete(__p);
      }
    }
  }

}

void sub_1D5414FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

__CFString *sub_1D5415000(__CFString *result, unsigned int a2)
{
  void *v3;
  BOOL v4;

  if (result)
  {
    v3 = __dynamic_cast(result, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2288, 0);
    result = 0;
    if (v3)
      v4 = a2 > 0xA;
    else
      v4 = 1;
    if (!v4)
      return off_1E99A2418[(__int16)a2];
  }
  return result;
}

void sub_1D541505C(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  size_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unsigned int v27;
  int v28;
  uint64_t appended;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  BOOL v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unsigned int i;
  int v46;
  unsigned int v47;
  char v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  char v54;
  unint64_t v55;
  int v56;
  int v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  unsigned __int16 v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  id v73;
  void *v74;
  __int128 v75;
  void *__p;
  char *v77;
  char *v78;
  void *v79;
  _BYTE *v80;
  int v81[4];
  uint64_t v82;

  v10 = a2;
  sub_1D53F63AC((uint64_t)a1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53C3EE8(v11, (void *)*MEMORY[0x1E0CBD090], (void *)*MEMORY[0x1E0CBD0B8]);
  v12 = objc_claimAutoreleasedReturnValue();

  v74 = (void *)v12;
  objc_msgSend_stringWithString_(MEMORY[0x1E0CB37A0], v13, v12, v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v82 = 0;
  sub_1D5415614((uint64_t)a1);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = *(unsigned int *)(a4 + 4);
  if (v18 >= 0xD)
  {
    sub_1D5285340(&v79, v18);
    v19 = *(_DWORD *)(a4 + 8);
    v20 = bswap32(v19);
    if (a6)
      v21 = v20;
    else
      v21 = v19;
    v25 = sub_1D53F5F40((uint64_t)a1, (uint64_t)v79, v80 - (_BYTE *)v79, a5, v21);
    v26 = v79;
    if (v25 != v80 - (_BYTE *)v79)
      goto LABEL_47;
    v27 = *((unsigned __int8 *)v79 + 5);
    v28 = *((unsigned __int8 *)v79 + 6);
    appended = objc_msgSend_appendString_(v16, v22, (uint64_t)CFSTR(" "), v23, v24);
    sub_1D541570C(appended, v27);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appendString_(v16, v31, (uint64_t)v30, v32, v33);

    sub_1D541570C(v34, v27);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F8CEC((uint64_t)a1, v35, 0, (void (*)(uint64_t, _QWORD))sub_1D5415734);

    sub_1D53F63AC((uint64_t)a1);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = (void *)*MEMORY[0x1E0CBCA28];
    v38 = (void *)*MEMORY[0x1E0CBCFA8];
    v39 = sub_1D53FAE98(v36, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCFA8]);

    if (v39)
    {
      sub_1D53F63AC((uint64_t)a1);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v41, v28 != 0, v42, v43);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v40, v37, v38, v44);

    }
    for (i = 0; sub_1D5412AE4((uint64_t)a1, v16, (unsigned __int16)i, v81, &v82); ++i)
      ;
    v26 = v79;
    if (i)
    {
      v73 = v10;
      v46 = *((unsigned __int8 *)v79 + 7);
      if (*((_BYTE *)v79 + 7))
      {
        v47 = 0;
        v48 = 0;
        v49 = ((_BYTE)v46 - 1) & 7;
        v50 = (unsigned __int16)((v46 - v49 + (((v46 - v49) & 0xE000u) >> 13)) >> 3);
        v51 = 1 << v49;
        while (sub_1D5407D7C(v17, v47))
        {
          if (sub_1D5407D7C(v17, v47 + 6) - 48 == v50)
          {
            v52 = sub_1D5407D7C(v17, v47 + 9);
            if (v51 == v52 + 16 * sub_1D5407D7C(v17, v47 + 8) - 816)
            {
              sub_1D53FDE90(a1, 1 << v48, 0, 1);
              break;
            }
          }
          v47 += 12;
          ++v48;
        }
      }
      v53 = 0;
      v54 = 0;
      v55 = 0;
      while (1)
      {
        if (!sub_1D5407D7C(v17, v53))
        {
          sub_1D53FDFE0(a1, v55, 0, 1);
          v61 = 0;
          __p = 0;
          v77 = 0;
          v78 = 0;
          v10 = v73;
          do
          {
            v75 = 0uLL;
            sub_1D5412AE4((uint64_t)a1, v16, v61, &v75, &v82);
            v62 = v77;
            if (v77 >= v78)
            {
              v64 = (v77 - (_BYTE *)__p) >> 4;
              v65 = v64 + 1;
              if ((unint64_t)(v64 + 1) >> 60)
                sub_1D5282B8C();
              v66 = v78 - (_BYTE *)__p;
              if ((v78 - (_BYTE *)__p) >> 3 > v65)
                v65 = v66 >> 3;
              if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0)
                v67 = 0xFFFFFFFFFFFFFFFLL;
              else
                v67 = v65;
              if (v67)
                v68 = (char *)sub_1D5284334((uint64_t)&v78, v67);
              else
                v68 = 0;
              v69 = &v68[16 * v64];
              *(_OWORD *)v69 = v75;
              v71 = (char *)__p;
              v70 = v77;
              v72 = v69;
              if (v77 != __p)
              {
                do
                {
                  *((_OWORD *)v72 - 1) = *((_OWORD *)v70 - 1);
                  v72 -= 16;
                  v70 -= 16;
                }
                while (v70 != v71);
                v70 = (char *)__p;
              }
              v63 = v69 + 16;
              __p = v72;
              v77 = v69 + 16;
              v78 = &v68[16 * v67];
              if (v70)
                operator delete(v70);
            }
            else
            {
              *(_OWORD *)v77 = v75;
              v63 = v62 + 16;
            }
            v77 = v63;
            ++v61;
          }
          while (i > v61);
          sub_1D53FDE38(a1, (uint64_t)&__p, 1);
          sub_1D53FDE6C((uint64_t)a1, &v82, 1);
          if (__p)
          {
            v77 = (char *)__p;
            operator delete(__p);
          }
          v26 = v79;
          goto LABEL_47;
        }
        v56 = sub_1D5407D7C(v17, v53 + 6);
        v57 = sub_1D5407D7C(v17, v53 + 9);
        v58 = sub_1D5407D7C(v17, v53 + 8);
        v59 = (v56 - 40);
        v26 = v79;
        if (v59 >= v80 - (_BYTE *)v79)
          break;
        if (((v57 + 16 * v58 + 208) & *((unsigned __int8 *)v79 + v59)) != 0)
          v60 = 1 << v54;
        else
          v60 = 0;
        v55 |= v60;
        v53 += 12;
        ++v54;
      }
      v10 = v73;
      if (v79)
        goto LABEL_48;
    }
    else
    {
LABEL_47:
      if (v26)
      {
LABEL_48:
        v80 = v26;
        operator delete(v26);
      }
    }
  }

}

void sub_1D5415544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  void *v18;
  void *v19;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

const __CFString *sub_1D5415614(uint64_t a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;

  sub_1D53F63AC(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53C3EE8(v1, (void *)*MEMORY[0x1E0CBD090], (void *)*MEMORY[0x1E0CBD0B8]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (sub_1D53F4BF8(v2, CFSTR("D7000"), 1) || sub_1D53F4BF8(v2, CFSTR("D600"), 1))
  {
    v3 = CFSTR("A01 = 1 10  A02 = 0 04  A03 = 0 80  B01 = 4 20  B02 = 4 04  B03 = 3 80  B04 = 3 10  B05 = 1 08  B06 = 0 02  B07 = 0 40  B08 = 2 01  B09 = 2 08  B10 = 2 40  B11 = 3 02  C01 = 4 10  C02 = 4 02  C03 = 3 40  C04 = 3 08  C05 = 1 04  C06 = 0 01  C07 = 0 20  C08 = 1 80  C09 = 2 04  C10 = 2 20  C11 = 3 01  D01 = 4 40  D02 = 4 08  D03 = 4 01  D04 = 3 20  D05 = 1 20  D06 = 0 08  D07 = 1 01  D08 = 2 02  D09 = 2 10  D10 = 2 80  D11 = 3 04  E01 = 1 40  E02 = 0 10  E03 = 1 02  ");
  }
  else
  {
    v3 = CFSTR("A01 = 1 10  A02 = 0 04  A03 = 0 80  B01 = 4 20  B02 = 4 04  B03 = 3 80  B04 = 3 10  B05 = 1 08  B06 = 0 02  B07 = 0 40  B08 = 2 01  B09 = 2 08  B10 = 2 40  B11 = 3 02  C01 = 4 10  C02 = 4 02  C03 = 3 40  C04 = 3 08  C05 = 1 04  C06 = 0 01  C07 = 0 20  C08 = 1 80  C09 = 2 04  C10 = 2 20  C11 = 3 01  D01 = 4 40  D02 = 4 08  D03 = 4 01  D04 = 3 20  D05 = 1 20  D06 = 0 08  D07 = 1 01  D08 = 2 02  D09 = 2 10  D10 = 2 80  D11 = 3 04  E01 = 1 40  E02 = 0 10  E03 = 1 02  ");
    if (!sub_1D53F4BF8(v2, CFSTR("D5200"), 1) && !sub_1D53F4BF8(v2, CFSTR("D5300"), 1))
      v3 = CFSTR("A01 = 5 20  A02 = 5 01  A03 = 4 08  A04 = 1 10  A05 = 0 04  A06 = 0 80  A07 = 2 02  A08 = 2 40  A09 = 3 08  B01 = 6 02  B02 = 5 10  B03 = 4 80  B04 = 4 04  B05 = 1 08  B06 = 0 02  B07 = 0 40  B08 = 2 01  B09 = 2 20  B10 = 3 04  B11 = 3 80  C01 = 6 01  C02 = 5 08  C03 = 4 40  C04 = 4 02  C05 = 1 04  C06 = 0 01  C07 = 0 20  C08 = 1 80  C09 = 2 10  C10 = 3 02  C11 = 3 40  D01 = 6 04  D02 = 5 40  D03 = 5 02  D04 = 4 10  D05 = 1 20  D06 = 0 08  D07 = 1 01  D08 = 2 04  D09 = 2 80  D10 = 3 10  D11 = 4 01  E01 = 5 80  E02 = 5 04  E03 = 4 20  E04 = 1 40  E05 = 0 10  E06 = 1 02  E07 = 2 08  E08 = 3 01  E09 = 3 20  ");
  }

  return v3;
}

void sub_1D54156F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *sub_1D541570C(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xC)
    return CFSTR(" UNKNOWN AF Mode");
  else
    return off_1E99A23B0[(__int16)a2];
}

id sub_1D5415734(void *a1, unsigned int a2)
{
  if (a1)
  {
    a1 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2288, 0);
    if (a1)
    {
      sub_1D5413624((uint64_t)a1, a2);
      a1 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  return a1;
}

void sub_1D541577C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int16 *v19;
  _DWORD *v20;
  void *v21;
  void *v22;
  unsigned int v23;
  uint64_t v24;
  char *v26;
  int v27;
  __int16 v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char *v35;

  v10 = a2;
  v11 = *(unsigned int *)(a4 + 4);
  if (v11 <= 0x4000)
  {
    sub_1D5285340(&v34, v11);
    v12 = *(_DWORD *)(a4 + 8);
    v13 = bswap32(v12);
    if (a6)
      v14 = v13;
    else
      v14 = v12;
    v15 = sub_1D53F5F40(a1, v34, (uint64_t)&v35[-v34], a5, v14);
    v16 = (char *)v34;
    if ((char *)v15 == &v35[-v34])
    {
      v17 = *(unsigned int *)(a4 + 4);
      if (v17 >= 0x2D)
      {
        v18 = v34 + v17;
        v19 = (unsigned __int16 *)(v34 + 44);
        v20 = (_DWORD *)(v34 + 22);
        v21 = (void *)*MEMORY[0x1E0CBD090];
        v22 = (void *)*MEMORY[0x1E0CBD0C0];
        do
        {
          v23 = *(_DWORD *)((char *)v20 + 18);
          v24 = v23 - 4;
          if (v23 >= 4 && v23 < *(_DWORD *)(a4 + 4))
            break;
          v26 = (char *)v19 + v24;
          if ((unint64_t)v19 + v24 > v18)
            break;
          if (*v20 == 1990472199)
          {
            v27 = *v19 + 360 - 360 * ((11930465 * (unint64_t)(*v19 + 360)) >> 32);
            if (v27 == 90 || v27 == 270 || v27 == 180)
            {
              if (v27 == 90)
              {
                v28 = 6;
              }
              else if (v27 == 180)
              {
                v28 = 3;
              }
              else
              {
                v28 = 8;
              }
              sub_1D53F63AC(a1);
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v30, v28, v31, v32);
              v33 = (void *)objc_claimAutoreleasedReturnValue();
              sub_1D52DFEFC(v29, v21, v22, v33);

            }
          }
          v19 = (unsigned __int16 *)(v26 + 22);
          v20 = v26;
        }
        while ((unint64_t)(v26 + 22) < v18);
        v16 = (char *)v34;
      }
    }
    if (v16)
    {
      v35 = v16;
      operator delete(v16);
    }
  }

}

void sub_1D5415954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D54159A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  BOOL v19;
  void **v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  int v41;
  void *v42;
  void *v43;
  BOOL v44;
  void *v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  BOOL v57;
  void *v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v9 = a2;
  v10 = *(_DWORD *)(a4 + 4);
  if ((v10 - 1) > 1)
    goto LABEL_51;
  LODWORD(v11) = *(unsigned __int16 *)(a4 + 8);
  v12 = bswap32(v11) >> 16;
  if (a6)
    LOWORD(v11) = v12;
  v13 = (unsigned __int16)v11;
  if ((_WORD)v11)
    v11 = (unsigned __int16)v11;
  else
    v11 = -1;
  if (v10 == 1)
    v14 = v13;
  else
    v14 = -1;
  if (v10 == 1)
    v15 = v11;
  else
    v15 = -1;
  if (v10 == 2)
  {
    v16 = *(unsigned __int16 *)(a4 + 10);
    v17 = bswap32(v16) >> 16;
    if (a6)
      LOWORD(v16) = v17;
    v18 = v13 >= 2 || (unsigned __int16)v16 == 0;
    v14 = (unsigned __int16)v16;
    if (!v18)
      v15 = (unsigned __int16)v16;
  }
  else
  {
    v13 = -1;
  }
  v19 = v14 == 6400 || v14 == 0;
  v20 = (void **)MEMORY[0x1E0CBCF98];
  if (v19)
  {
    sub_1D53F63AC(a1);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53C3EE8(v21, (void *)*MEMORY[0x1E0CBD090], (void *)*MEMORY[0x1E0CBD0B8]);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    if (sub_1D53F4BF8(v22, CFSTR("P7000"), 1))
    {
      sub_1D53FDB60(a1);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = *MEMORY[0x1E0CBCBC8];
      sub_1D52EAE5C(v23, (const char *)*MEMORY[0x1E0CBCBC8], v25, v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        if (objc_msgSend_count(v28, v29, v30, v31, v32))
        {
          v76 = 0;
          if (!sub_1D53BD2F0(v28, (const char *)&v76, v33, v34, v35))
          {
            if (!v14)
              v14 = 6400;
            sub_1D53FA1B8(a1, 0);
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_removeObjectForKey_(v36, v37, v24, v38, v39);

            v15 = v14;
          }
        }
      }

    }
    goto LABEL_38;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
LABEL_38:
    sub_1D53F63AC(a1);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53FAF90(v40, *v20, (void *)*MEMORY[0x1E0CBCFB0]);

    v41 = 1;
    goto LABEL_39;
  }
  v41 = 0;
  v14 = -1;
LABEL_39:
  if (v15 >= 1)
  {
    sub_1D53FA1B8(a1, 0);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = (void *)*MEMORY[0x1E0CBCBC8];
    v44 = sub_1D5297D80(v42, (void *)*MEMORY[0x1E0CBCBC8]);

    if (!v44)
    {
      sub_1D53FA1B8(a1, 1);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D533BA50(v45, v43);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v47, v15, v48, v49);
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v46, v51, (uint64_t)v50, v52, v53);

    }
  }
  sub_1D53F63AC(a1);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v55 = *v20;
  v56 = (void *)*MEMORY[0x1E0CBCFB0];
  v57 = sub_1D53FAE98(v54, *v20, (void *)*MEMORY[0x1E0CBCFB0]);

  if (!v57)
  {
    if ((v13 & 0x8000000000000000) == 0)
    {
      sub_1D53F63AC(a1);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D540CAA4(v58, v55, v56);
      v59 = (void *)objc_claimAutoreleasedReturnValue();

      if (v59)
      {
        objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v60, v13, v61, v62);
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v59, v64, (uint64_t)v63, v65, v66);

      }
    }
    if (v41)
    {
      sub_1D53F63AC(a1);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D540CAA4(v67, v55, v56);
      v68 = (void *)objc_claimAutoreleasedReturnValue();

      if (v68)
      {
        objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v69, v14, v70, v71);
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v68, v73, (uint64_t)v72, v74, v75);

      }
    }
  }
LABEL_51:

}

void sub_1D5415D3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D5415DEC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  float v15;
  int v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  void *v21;
  void *v22;
  BOOL v23;
  void *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  BOOL v36;
  void *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  unsigned __int8 v56;

  v10 = a2;
  v11 = *(_DWORD *)(a4 + 4);
  if (v11 < 4)
    goto LABEL_54;
  v12 = *(_DWORD *)(a4 + 8);
  v13 = bswap32(v12);
  if (a6)
    v14 = v13;
  else
    v14 = v12;
  v56 = 0;
  if (sub_1D53F5F40(a1, (uint64_t)&v56, 1, a5, v14) != 1)
  {
    v18 = -1;
    v19 = -1;
    goto LABEL_45;
  }
  v15 = 1.0;
  v16 = v56;
  while (1)
  {
    while (1)
    {
      while (v16 > 0x43u)
      {
        if (v16 > 0x7Bu)
        {
          if (v16 == 124)
          {
            v16 = 0;
            v17 = 4000.0;
            goto LABEL_25;
          }
          if (v16 != 140)
            goto LABEL_28;
          v16 = 0;
          v15 = v15 * 10000.0;
          v56 = 0;
        }
        else
        {
          if (v16 == 68)
          {
            v16 = 0;
            v17 = 160.0;
          }
          else
          {
            if (v16 != 72)
              goto LABEL_28;
            v16 = 0;
            v17 = 200.0;
          }
LABEL_25:
          v15 = v15 * v17;
          v56 = 0;
        }
      }
      if (v16 > 0x3Bu)
      {
        if (v16 == 60)
        {
          v16 = 0;
          v17 = 100.0;
        }
        else
        {
          if (v16 != 64)
            goto LABEL_28;
          v16 = 0;
          v17 = 125.0;
        }
        goto LABEL_25;
      }
      if (v16 != 36)
        break;
      v16 = 0;
      v15 = v15 * 25.0;
      v56 = 0;
    }
    if (v16 == 48)
    {
      v16 = 0;
      v17 = 50.0;
      goto LABEL_25;
    }
    if (!(_BYTE)v16)
      break;
LABEL_28:
    if (v16 < 0x49u)
    {
      if (v16 > 0x23u)
      {
        v15 = v15 * 1.0595;
        v56 = --v16;
      }
      else
      {
        v16 += 12;
        v56 = v16;
        v15 = v15 * 0.5;
      }
    }
    else
    {
      v16 -= 12;
      v56 = v16;
      v15 = v15 + v15;
    }
  }
  if ((v11 & 0xFFFE) >= 6 && (v55 = 0, sub_1D53F5F40(a1, (uint64_t)&v55, 2, a5, (v14 + 4)) == 2))
  {
    v20 = v55;
    if (a6)
      v20 = v55 << 8;
    if ((v20 & 0x300) == 0x100)
      v18 = 1;
    else
      v18 = -1;
  }
  else
  {
    v18 = -1;
  }
  v19 = llroundf(v15);
  if (v19 >= 1)
  {
    sub_1D53FA1B8(a1, 0);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = (void *)*MEMORY[0x1E0CBCBC8];
    v23 = sub_1D5297D80(v21, (void *)*MEMORY[0x1E0CBCBC8]);

    if (!v23)
    {
      sub_1D53FA1B8(a1, 1);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D533BA50(v24, v22);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v26, v19, v27, v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v25, v30, (uint64_t)v29, v31, v32);

    }
  }
LABEL_45:
  sub_1D53F63AC(a1);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = (void *)*MEMORY[0x1E0CBCF98];
  v35 = (void *)*MEMORY[0x1E0CBCFB0];
  v36 = sub_1D53FAE98(v33, (void *)*MEMORY[0x1E0CBCF98], (void *)*MEMORY[0x1E0CBCFB0]);

  if (!v36)
  {
    if ((v18 & 0x8000000000000000) == 0)
    {
      sub_1D53F63AC(a1);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D540CAA4(v37, v34, v35);
      v38 = (void *)objc_claimAutoreleasedReturnValue();

      if (v38)
      {
        objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v39, v18, v40, v41);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v38, v43, (uint64_t)v42, v44, v45);

      }
    }
    if ((v19 & 0x8000000000000000) == 0)
    {
      sub_1D53F63AC(a1);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D540CAA4(v46, v34, v35);
      v47 = (void *)objc_claimAutoreleasedReturnValue();

      if (v47)
      {
        objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v48, v19, v49, v50);
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v47, v52, (uint64_t)v51, v53, v54);

      }
    }
  }
LABEL_54:

}

void sub_1D54161C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D541624C(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE0uLL);
  sub_1D54162C4(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1D5285658((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1D54162B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D54162C4(_QWORD *a1, uint64_t *a2, void **a3, void **a4)
{
  a1[2] = 0;
  *a1 = &unk_1E99A22B0;
  a1[1] = 0;
  sub_1D53FEEF0((uint64_t)(a1 + 3), a2, *a3, *a4);
  a1[3] = off_1E99A21B8;
  return a1;
}

void sub_1D5416310(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5416324(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A22B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5416338(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A22B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D541636C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

uint64_t sub_1D541637C(uint64_t a1, int a2, uint64_t *a3)
{
  _QWORD *v5;
  void **v6;
  int v7;
  int i;
  __int16 v9;
  __int16 v10;
  unint64_t v11;
  char *v12;
  _WORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int16 v22;

  v5 = (_QWORD *)sub_1D544098C(a1, a2);
  *v5 = &off_1E99A2480;
  v5[6] = 0;
  v6 = (void **)(v5 + 6);
  v5[7] = 0;
  v5[8] = 0;
  *(_DWORD *)(a1 + 12) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 16) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 20) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 24) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 28) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 32) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 36) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 40) = sub_1D52847F8(*a3);
  v7 = sub_1D52847F8(*a3);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      v9 = sub_1D528479C(*a3);
      v10 = v9;
      v12 = *(char **)(a1 + 56);
      v11 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v12 >= v11)
      {
        v14 = (char *)*v6;
        v15 = v12 - (_BYTE *)*v6;
        if (v15 <= -3)
          sub_1D5282B8C();
        v16 = v15 >> 1;
        v17 = v11 - (_QWORD)v14;
        if (v17 <= (v15 >> 1) + 1)
          v18 = v16 + 1;
        else
          v18 = v17;
        if (v17 >= 0x7FFFFFFFFFFFFFFELL)
          v19 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
        {
          v20 = (char *)sub_1D52854A0(a1 + 64, v19);
          v14 = *(char **)(a1 + 48);
          v12 = *(char **)(a1 + 56);
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[2 * v16];
        *(_WORD *)v21 = v10;
        v13 = v21 + 2;
        while (v12 != v14)
        {
          v22 = *((_WORD *)v12 - 1);
          v12 -= 2;
          *((_WORD *)v21 - 1) = v22;
          v21 -= 2;
        }
        *(_QWORD *)(a1 + 48) = v21;
        *(_QWORD *)(a1 + 56) = v13;
        *(_QWORD *)(a1 + 64) = &v20[2 * v19];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_WORD *)v12 = v9;
        v13 = v12 + 2;
      }
      *(_QWORD *)(a1 + 56) = v13;
    }
  }
  return a1;
}

void sub_1D5416518(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

id sub_1D5416544(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  unsigned __int16 *v63;
  unsigned __int16 *v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  RAWOpcodeMapTable *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;

  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v7, *(unsigned int *)(a1 + 12), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v11, (uint64_t)v10, (uint64_t)CFSTR("Top"), v12);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v13, *(unsigned int *)(a1 + 16), v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v17, (uint64_t)v16, (uint64_t)CFSTR("Left"), v18);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v19, *(unsigned int *)(a1 + 20), v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v23, (uint64_t)v22, (uint64_t)CFSTR("Bottom"), v24);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v25, *(unsigned int *)(a1 + 24), v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v29, (uint64_t)v28, (uint64_t)CFSTR("mRight"), v30);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v31, *(unsigned int *)(a1 + 28), v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v35, (uint64_t)v34, (uint64_t)CFSTR("Plane"), v36);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v37, *(unsigned int *)(a1 + 32), v38, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v41, (uint64_t)v40, (uint64_t)CFSTR("Planes"), v42);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v43, *(unsigned int *)(a1 + 36), v44, v45);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v47, (uint64_t)v46, (uint64_t)CFSTR("RowPitch"), v48);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v49, *(unsigned int *)(a1 + 40), v50, v51);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v53, (uint64_t)v52, (uint64_t)CFSTR("ColPitch"), v54);

  objc_msgSend_array(MEMORY[0x1E0C99DE8], v55, v56, v57, v58);
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  v63 = *(unsigned __int16 **)(a1 + 48);
  v64 = *(unsigned __int16 **)(a1 + 56);
  while (v63 != v64)
  {
    objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v59, *v63, v60, v61);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v62, v66, (uint64_t)v65, v67, v68);

    ++v63;
  }
  objc_msgSend_setObject_forKeyedSubscript_(v6, v59, (uint64_t)v62, (uint64_t)CFSTR("Table"), v61);
  v69 = [RAWOpcodeMapTable alloc];
  v73 = (void *)objc_msgSend_initWithArguments_(v69, v70, (uint64_t)v6, v71, v72);

  return v73;
}

void sub_1D541676C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D54167C0(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E99A2480;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1D54167FC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E99A2480;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5416848()
{
  return 7;
}

void sub_1D5416850(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2D18, 0);
    if (v11)
      sub_1D5418778((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D54168E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D54168F4(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2D18, 0);
    if (v11)
      sub_1D5419D8C((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D5416984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5416998(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2D18, 0);
    if (v10)
      sub_1D5419154(v10, v12, v11, a4, a5, a6);
  }

}

void sub_1D5416A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5416A2C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2D18, 0);
    if (v10)
      sub_1D5419218(v10, v12, v11, a4, a5, a6);
  }

}

void sub_1D5416AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5416AC0(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2D18, 0);
    if (v10)
      sub_1D54192DC(v10, v12, v11, a4, a5, a6);
  }

}

void sub_1D5416B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5416B54(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2D18, 0);
    if (v11)
      sub_1D541894C((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D5416BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5416BF4(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2D18, 0);
    if (v10)
      sub_1D5419028((uint64_t)v10, v11, a3, a4, v12, a6);
  }

}

void sub_1D5416C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5416C84(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2D18, 0);
    if (v11)
      sub_1D5419908((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D5416D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5416D28(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2D18, 0);
    if (v11)
      sub_1D5419BD8((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D5416DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5416DCC(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  char *v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v11 = (char *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2D18, 0);
    if (v11)
      sub_1D54193A0(v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D5416E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5416E70(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2D18, 0);
    if (v11)
      sub_1D5418D2C((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D5416F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5416F14(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2D18, 0);
    if (v11)
      sub_1D5419F50((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D5416FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5416FB4(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v9 = (char *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2D18, 0);
    if (v9)
      sub_1D5419484(v9, v12, v10, a4, v11, a6);
  }

}

void sub_1D541702C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5417040(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2D18, 0);
    if (v11)
      sub_1D541866C((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D54170CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL sub_1D54170E0(unsigned __int8 *a1, unint64_t a2)
{
  int v2;

  if (a2 >= 4)
  {
    v2 = *a1;
    if (v2 != 77)
      return v2 == 73 && a1[1] == 73 && (a1[2] == 82 && a1[3] == 79 || a1[2] == 82 && a1[3] == 83);
    if (a1[1] == 77 && a1[2] == 79 && a1[3] == 82)
      return 1;
  }
  return 0;
}

BOOL sub_1D5417170(uint64_t *a1)
{
  _BOOL8 v2;
  int v4;
  uint64_t v5[3];

  v4 = 0;
  sub_1D5285164(v5, a1, (uint64_t)&v4, 0);
  v4 = 0;
  v2 = (*(unsigned int (**)(uint64_t, int *, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, &v4, 4) == 4
    && sub_1D54170E0((unsigned __int8 *)&v4, 4uLL);
  sub_1D5285200(v5);
  return v2;
}

void sub_1D54171F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5285200((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D541720C(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v7;
  id v8;
  id v9;

  v9 = a2;
  v8 = a3;
  sub_1D541A0BC(a1, &v9, &v8, &v7);
  *a4 = v7;

}

void sub_1D5417280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D541729C(uint64_t a1, int a2)
{
  _BOOL4 v3;
  unsigned int v4;

  v3 = sub_1D53FC0B0(a1, a2);
  v4 = a2 == 21330 || v3;
  if (a2 == 20306)
    return 1;
  else
    return v4;
}

const __CFString *sub_1D54172D4()
{
  return CFSTR("{MakerOlympus}");
}

void sub_1D54172E0(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  int v87;
  void *v88;
  void *v89;
  unsigned int v90;
  __int128 v91;
  unsigned int v92;
  int v93;
  __int128 v94;
  __int128 v95;
  char *v96[3];

  sub_1D53F642C((uint64_t)a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v7, (uint64_t)CFSTR("IFD0/%@"), v8, v9, *MEMORY[0x1E0CBD0C0]);
  v10 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v6, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v89 = v14;
  v19 = objc_msgSend_intValue(v14, v15, v16, v17, v18);
  if ((v19 - 9) >= 0xFFFFFFF8)
    v20 = v19;
  else
    v20 = 0;
  if (!v14)
    v20 = v19;
  v87 = v20;
  sub_1D53F642C((uint64_t)a1);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v22, (uint64_t)CFSTR("IFD0/Exif/Makernote/OlympusCameraSettings/%@"), v23, v24, CFSTR("PreviewImageValid"));
  v25 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v21, v25, v26, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F642C((uint64_t)a1);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v31, (uint64_t)CFSTR("IFD0/Exif/Makernote/OlympusCameraSettings/%@"), v32, v33, CFSTR("PreviewImageOffset"));
  v34 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v30, v34, v35, v36, v37);
  v38 = objc_claimAutoreleasedReturnValue();

  v88 = (void *)v38;
  sub_1D53F642C((uint64_t)a1);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v40, (uint64_t)CFSTR("IFD0/Exif/Makernote/OlympusCameraSettings/%@"), v41, v42, CFSTR("PreviewImageLength"));
  v43 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v39, v43, v44, v45, v46);
  v47 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F642C((uint64_t)a1);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v49, (uint64_t)CFSTR("IFD0/Exif/Makernote/%@/Offset"), v50, v51, CFSTR("JPEGThumbnail"));
  v52 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v48, v52, v53, v54, v55);
  v56 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F642C((uint64_t)a1);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v58, (uint64_t)CFSTR("IFD0/Exif/Makernote/%@/Length"), v59, v60, CFSTR("JPEGThumbnail"));
  v61 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v57, v61, v62, v63, v64);
  v65 = (void *)objc_claimAutoreleasedReturnValue();

  memset(v96, 0, sizeof(v96));
  sub_1D53FD760(a1, a2, (uint64_t *)&v95);
  if (v29 && objc_msgSend_intValue(v29, v66, v67, v68, v69) && v88 && v47)
  {
    LODWORD(v91) = objc_msgSend_intValue(v88, v66, v67, v68, v69);
    v92 = objc_msgSend_intValue(v47, v70, v71, v72, v73);
    sub_1D5285A24(&v93, &v92);
    sub_1D53F4C74(a1, (int *)&v91, (unsigned int *)&v93, v87, &v94);
    if (!v56)
      goto LABEL_15;
  }
  else
  {
    v94 = 0uLL;
    if (!v56)
      goto LABEL_15;
  }
  if (v65)
  {
    v93 = objc_msgSend_intValue(v56, v66, v67, v68, v69);
    v90 = objc_msgSend_intValue(v65, v74, v75, v76, v77);
    sub_1D5285A24(&v92, &v90);
    sub_1D53F4C74(a1, &v93, &v92, v87, &v91);
    goto LABEL_16;
  }
LABEL_15:
  v91 = 0uLL;
LABEL_16:
  if ((_QWORD)v95)
    sub_1D52B0A7C(v96, &v95);
  if ((_QWORD)v94)
    sub_1D52B0A7C(v96, &v94);
  if ((_QWORD)v91)
    sub_1D52B0A7C(v96, &v91);
  sub_1D53F51D8((uint64_t)v96, a2, a3);
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
  if (*((_QWORD *)&v91 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
  if (*((_QWORD *)&v94 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
  if (*((_QWORD *)&v95 + 1))
  {
    v85 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  *(_QWORD *)&v95 = v96;
  sub_1D5282E44((void ***)&v95);

}

void sub_1D541771C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  sub_1D5282EB4((uint64_t)&a20);
  a20 = (void **)&a22;
  sub_1D5282E44(&a20);

  _Unwind_Resume(a1);
}

void sub_1D5417850(uint64_t a1)
{
  void *v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  __CFString *v13;
  _BOOL4 v14;
  const __CFString *v15;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __CFString *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  __CFString *v28;
  uint64_t v29;

  sub_1D5417B20(a1, (void *)*MEMORY[0x1E0CBCB28]);
  sub_1D5417B20(a1, (void *)*MEMORY[0x1E0CBCC40]);
  sub_1D5417B20(a1, (void *)*MEMORY[0x1E0CBCC68]);
  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53FAE18(v2, CFSTR("{PictStyleSetting}"), CFSTR("PictureStyle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_count(v3, v4, v5, v6, v7))
  {
    v29 = 0;
    v11 = sub_1D53BD2F0(v3, (const char *)&v29, v8, v9, v10);
    v12 = v11;
    switch(v11)
    {
      case 1:
        v13 = CFSTR("Vivid");
        break;
      case 2:
        v13 = CFSTR("Natural");
        break;
      case 3:
        v13 = CFSTR("Muted");
        break;
      case 4:
        v13 = CFSTR("Portrait");
        break;
      default:
        v15 = CFSTR("Sepia");
        if (v11 != 512)
          v15 = 0;
        if (v11 == 256)
          v13 = CFSTR("Monotone");
        else
          v13 = (__CFString *)v15;
        break;
    }
    sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("PictureStyle"), v13, (float)v11, (float)v11);
    v14 = v12 == 512 || v12 == 256;
  }
  else
  {
    v14 = 0;
  }
  sub_1D53F63AC(a1);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D5297C60(v17, CFSTR("{PictStyleSetting}"), 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (sub_1D5297D80(v18, CFSTR("ColorTone")))
  {
    v22 = sub_1D5297AC0(v18, CFSTR("ColorTone"), v19, v20, v21);
    if (v22 > 5)
      v23 = 0;
    else
      v23 = off_1E99A2D80[v22];
    sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("ColorTone"), v23, (float)v22, (float)v22);
  }
  if (sub_1D5297D80(v18, CFSTR("FilterEffect")))
  {
    v27 = sub_1D5297AC0(v18, CFSTR("FilterEffect"), v24, v25, v26);
    if (v27 > 5)
      v28 = 0;
    else
      v28 = off_1E99A2DB0[v27];
    sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("FilterEffect"), v28, (float)v27, (float)v27);
  }
  sub_1D53F9628(a1, CFSTR("Monochrome"), v14);

}

void sub_1D5417AC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5417B14()
{
  void *v0;

  JUMPOUT(0x1D5417B0CLL);
}

void sub_1D5417B20(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;

  v3 = a2;
  sub_1D53F63AC(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53FAE18(v4, CFSTR("{PictStyleNormalized}"), v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F63AC(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53FAE18(v6, CFSTR("{PictStyleSetting}"), v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v12 = (unint64_t)objc_msgSend_count(v5, v8, v9, v10, v11) > 2;
    if (v7)
    {
LABEL_3:
      v13 = (unint64_t)objc_msgSend_count(v7, v8, v9, v10, v11) > 1;
      goto LABEL_6;
    }
  }
  else
  {
    v12 = 0;
    if (v7)
      goto LABEL_3;
  }
  v13 = 0;
LABEL_6:
  v14 = 0.0;
  if (v12)
  {
    v19 = 2;
    v14 = sub_1D5417CDC(v5, (const char *)&v19, v9, v10, v11);
  }
  if (v13)
  {
    v19 = 1;
    v15 = sub_1D5417CDC(v7, (const char *)&v19, v9, v10, v11);
    v16 = v15;
  }
  else
  {
    v16 = 0.0;
    v15 = v14;
    if (!v12)
      goto LABEL_18;
  }
  if (v12 && !v13)
    v17 = v14;
  else
    v17 = v16;
  if (v12)
    v18 = v14;
  else
    v18 = v15;
  sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), v3, 0, v17, v18);
LABEL_18:

}

void sub_1D5417C8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D5417CC8()
{
  void *v0;

  JUMPOUT(0x1D5417CBCLL);
}

void sub_1D5417CD4()
{
  JUMPOUT(0x1D5417CBCLL);
}

float sub_1D5417CDC(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;

  sub_1D53BE148(a1, a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_floatValue(v5, v6, v7, v8, v9);
  v11 = v10;

  return v11;
}

void sub_1D5417D18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5417D28(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53C3EE8(v2, (void *)*MEMORY[0x1E0CBCB50], CFSTR("LensModel"));
  v4 = (id)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    sub_1D53F63AC(a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53FAF90(v3, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCA58]);

  }
  sub_1D53FC1FC(a1);

}

void sub_1D5417DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5417DF0(_BYTE *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  id v12;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v18 = 0;
  v19[0] = 0;
  *(_QWORD *)((char *)v19 + 5) = 0;
  if (sub_1D53F5F40((uint64_t)a1, (uint64_t)&v18, 20, a5, a3) == 20)
  {
    if ((_DWORD)v18 == 1297697871 && WORD2(v18) == 80)
    {
      if ((a7 & 1) == 0)
      {
        v15 = a3 + 8;
        v14 = (unsigned __int16 *)&unk_1E99A24C0;
        goto LABEL_11;
      }
    }
    else if (v18 == 0x5355504D594C4FLL)
    {
      a5 += a3;
      v14 = (unsigned __int16 *)&unk_1E99A25B0;
      v15 = 12;
LABEL_11:
      sub_1D53FA480(a1, v12, v14, v15, a5, a6);
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 160))(a1);
      v16 = 1;
      goto LABEL_12;
    }
  }
  v16 = 0;
LABEL_12:

  return v16;
}

void sub_1D5417F28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5417F40(uint64_t a1)
{
  void *v2;
  void *v3;
  _BOOL4 v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  _BOOL4 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)*MEMORY[0x1E0CBCB10];
  v4 = sub_1D53FAE98(v2, CFSTR("{PictStyleSetting}"), (void *)*MEMORY[0x1E0CBCB10]);

  if (v4)
  {
    sub_1D53F63AC(a1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = sub_1D53FAF14(v5, CFSTR("{PictStyleSetting}"), v3);

    if (v6 < 0x100)
      return v6 + 1;
    else
      return 0xFFFFLL;
  }
  else
  {
    sub_1D53FDB60(a1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = sub_1D5297D80(v8, v3);

    if (v9)
    {
      sub_1D53FDB60(a1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = sub_1D5297AC0(v10, (const char *)v3, v11, v12, v13);

    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v7;
}

void sub_1D541802C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5418048(uint64_t a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  int v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  sub_1D5417850(a1);
  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D5297C60(v2, CFSTR("{PictureStyle}"), 0);
  v15 = (id)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    sub_1D53F63AC(a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = sub_1D53FAE98(v3, CFSTR("{PictureStyle}"), CFSTR("Monochrome"));

    if (!v4)
      sub_1D53F9628(a1, CFSTR("Monochrome"), 0);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    if ((v5 & 0x80000000) == 0)
    {
      sub_1D53F984C(a1, v5);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("PictStyleColorSpace"), v6, (float)v5, (float)v5);

    }
  }
  sub_1D53F63AC(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v7, v8, (uint64_t)CFSTR("{PictStyleSetting}"), v9, v10);

  sub_1D53F63AC(a1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v11, v12, (uint64_t)CFSTR("{PictStyleNormalized}"), v13, v14);

}

void sub_1D54181A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D54181EC(uint64_t a1, void *a2)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __CFString *v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unsigned int v40;
  unsigned __int8 *v41;
  int v42;
  char buffer[256];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  if (v6)
  {
    v7 = (void *)MEMORY[0x1E0CB37A0];
    objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E0CB3500], v2, v3, v4, v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringByTrimmingCharactersInSet_(v6, v9, (uint64_t)v8, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithString_(v7, v13, (uint64_t)v12, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend_isEqualToString_(v16, v17, (uint64_t)CFSTR("XZ-1"), v18, v19) & 1) != 0)
    {
      v23 = 10001;
    }
    else if ((objc_msgSend_isEqualToString_(v16, v20, (uint64_t)CFSTR("E-P1"), v21, v22) & 1) != 0)
    {
      v23 = 10002;
    }
    else if ((objc_msgSend_isEqualToString_(v16, v24, (uint64_t)CFSTR("E-P2"), v25, v26) & 1) != 0)
    {
      v23 = 10004;
    }
    else if ((objc_msgSend_isEqualToString_(v16, v27, (uint64_t)CFSTR("E-PL1"), v28, v29) & 1) != 0)
    {
      v23 = 10003;
    }
    else if ((objc_msgSend_isEqualToString_(v16, v30, (uint64_t)CFSTR("E-PL2"), v31, v32) & 1) != 0)
    {
      v23 = 10005;
    }
    else
    {
      if (!CFStringGetCString(v6, buffer, 256, 0x8000100u))
        goto LABEL_28;
      v33 = strcasestr(buffer, "C");
      v34 = v33;
      if (v33)
      {
        v35 = strcasestr(v33 + 1, "C");
        if (v35)
          v36 = v35;
        else
          v36 = v34;
        v34 = v36 + 1;
      }
      v37 = strcasestr(buffer, "E-");
      v38 = v37 ? v37 + 2 : v34;
      if (v38 && *v38 >= 48)
      {
        v39 = 0;
        v23 = 0;
        v40 = *v38;
        v41 = (unsigned __int8 *)(v38 + 1);
        do
        {
          if (v39 > 4)
            break;
          if (v40 > 0x39)
            break;
          v42 = (char)v41[v39++];
          v23 = v40 + 10 * (_DWORD)v23 - 48;
          v40 = v42;
        }
        while (v42 > 47);
      }
      else
      {
LABEL_28:
        v23 = 0;
      }
    }

  }
  else
  {
    v23 = 0;
  }

  return v23;
}

void sub_1D5418404(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5418454(uint64_t a1, int a2, unsigned int a3, uint64_t a4, _QWORD *a5)
{
  uint64_t result;
  int v6;
  _DWORD *v7;
  __int32 v8;
  uint64_t v9;
  __int32 v10;
  int v11;
  int v12;
  int v13;
  __int32 v14;
  int32x2_t v15;
  _BYTE v16[12];
  uint64_t v17;
  int v18;
  int32x2_t v19;
  int v20;
  uint64_t v21;

  result = 0;
  v21 = *MEMORY[0x1E0C80C00];
  if (a2 > 409)
  {
    if (a2 > 509)
    {
      if (a2 == 510)
        goto LABEL_22;
      if (a2 == 620)
      {
        result = 0;
        *a5 = 0x10000000100;
        return result;
      }
      if (a2 != 520)
        return result;
    }
    else
    {
      if (a2 == 410)
        goto LABEL_22;
      if (a2 != 420)
      {
        if (a2 == 500)
          goto LABEL_22;
        return result;
      }
    }
    *a5 = 0x10000000100;
    v15 = 0;
    *(_QWORD *)v16 = 0;
    if (a3 < 4)
    {
      v8 = v15.i32[a3];
      *(_DWORD *)a4 = dword_1D545BF30[a3];
      *(_DWORD *)(a4 + 4) = v8;
      v9 = 0x2B00000020;
LABEL_29:
      *(_QWORD *)(a4 + 8) = v9;
      return 1;
    }
    return 0;
  }
  if (a2 <= 299)
  {
    if (a2 != 1)
    {
      if (a2 == 3)
      {
        *a5 = 0xAB000000E40;
        if (a3 <= 0xA)
        {
          v17 = 0;
          *(_QWORD *)&v16[4] = 0;
          v18 = 0;
          v15 = vdup_n_s32(0x221u);
          *(_DWORD *)v16 = 545;
          v6 = -545;
          v19 = vdup_n_s32(0xFFFFFDDF);
          v7 = &unk_1D545BE2C;
          goto LABEL_28;
        }
      }
      else
      {
        if (a2 != 5)
          return result;
        *a5 = 0xBD000000FC0;
        if (a3 <= 0xA)
        {
          v17 = 0;
          *(_QWORD *)&v16[4] = 0;
          v18 = 0;
          v15 = vdup_n_s32(0x25Du);
          *(_DWORD *)v16 = 605;
          v6 = -605;
          v19 = vdup_n_s32(0xFFFFFDA3);
          v7 = &unk_1D545BE58;
LABEL_28:
          v20 = v6;
          v13 = v7[a3];
          v14 = v15.i32[a3];
          *(_DWORD *)a4 = v13;
          *(_DWORD *)(a4 + 4) = v14;
          v9 = 0x900000006CLL;
          goto LABEL_29;
        }
      }
      return 0;
    }
LABEL_22:
    *a5 = 0x79E00000A30;
    v15 = 0;
    *(_QWORD *)v16 = 0;
    if (a3 < 4)
    {
      v10 = v15.i32[a3];
      v11 = dword_1D545BF50[a3];
      v12 = dword_1D545BF60[a3];
      *(_DWORD *)a4 = dword_1D545BF40[a3];
      *(_DWORD *)(a4 + 4) = v10;
      *(_DWORD *)(a4 + 8) = v11;
      *(_DWORD *)(a4 + 12) = v12;
      return 1;
    }
    return 0;
  }
  if (a2 == 300 || a2 == 330 || a2 == 400)
    goto LABEL_22;
  return result;
}

void sub_1D541866C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned __int8 v18;

  v18 = 0;
  if (*(_DWORD *)(a4 + 4) >= 0x2Du)
  {
    v8 = *(_DWORD *)(a4 + 8);
    v9 = bswap32(v8);
    if (a6)
      v8 = v9;
    if (sub_1D53F5F40(a1, (uint64_t)&v18, 1, a5, v8 + 44))
    {
      v10 = v18;
      if (v18 <= 3u)
      {
        sub_1D53F63AC(a1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6410(a3);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6390(a3);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v14, v10, v15, v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D52DFEFC(v11, v12, v13, v17);

      }
    }
  }
}

void sub_1D5418750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1D5418778(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  void *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  id v39;

  v39 = a2;
  v11 = (void *)MEMORY[0x1E0CB3940];
  sub_1D53F6390(a3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v11, v13, (uint64_t)CFSTR("%@/%@/%@"), v14, v15, v39, v12, CFSTR("Offset"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = (void *)MEMORY[0x1E0CB3940];
  sub_1D53F6390(a3);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v17, v19, (uint64_t)CFSTR("%@/%@/%@"), v20, v21, v39, v18, CFSTR("Length"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  LODWORD(v26) = *(_DWORD *)(a4 + 8);
  v27 = bswap32(v26);
  if (a6)
    v26 = v27;
  else
    v26 = v26;
  objc_msgSend_numberWithLongLong_(MEMORY[0x1E0CB37E8], v23, v26 + a5, v24, v25);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F642C(a1);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v29, v30, (uint64_t)v28, (uint64_t)v16, v31);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v32, *(unsigned int *)(a4 + 4), v33, v34);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F642C(a1);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v36, v37, (uint64_t)v35, (uint64_t)v22, v38);

}

void sub_1D54188E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1D541894C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  __int16 v17;

  if (*(_DWORD *)(a4 + 4) == 6)
  {
    v17 = 0;
    v16 = 0;
    LODWORD(v8) = *(_DWORD *)(a4 + 8);
    v9 = bswap32(v8);
    v8 = a6 ? v9 : v8;
    if (sub_1D53F5F40(a1, (uint64_t)&v16, 6, a5, v8) == 6)
    {
      sub_1D5418A4C(6, (const char *)((v16 << 16) | (BYTE2(v16) << 8) | HIBYTE(v16)), v10, v11, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (v13)
      {
        sub_1D53F63AC(a1);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6410(a3);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D52DFEFC(v14, v15, (void *)*MEMORY[0x1E0CBCA58], v13);

      }
    }
  }
}

void sub_1D5418A2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_1D5418A4C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  id v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void *v54;
  void *v56[2];
  uint64_t v57;
  void *__p[2];
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  double v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%1X %02X %02X"), a4, a5, BYTE2(a2), BYTE1(a2), a2);
  v5 = (char *)objc_claimAutoreleasedReturnValue();
  v65 = 0;
  v66 = 0;
  v67 = 0;
  sub_1D54343BC(CFSTR("olympus"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v6;
  if (v6)
  {
    sub_1D52EAE5C(v6, v5, v8, v9, v10);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    for (i = 0; ; i = v64 + 1)
    {
      v64 = i;
      if (i >= objc_msgSend_count(v16, v12, v13, v14, v15))
        break;
      sub_1D53BD380(v16, (const char *)&v64, v18, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_count(v21, v22, v23, v24, v25) == 5)
      {
        __p[0] = 0;
        sub_1D53BC854(v21, (const char *)__p, v26, v27, v28);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        __p[0] = (void *)1;
        v33 = sub_1D53BD334(v21, (const char *)__p, v30, v31, v32);
        __p[0] = (void *)2;
        v37 = sub_1D53BD334(v21, (const char *)__p, v34, v35, v36);
        __p[0] = (void *)3;
        v41 = sub_1D53BD334(v21, (const char *)__p, v38, v39, v40);
        __p[0] = (void *)4;
        v45 = sub_1D53BD334(v21, (const char *)__p, v42, v43, v44);
        if (v29)
        {
          v46 = v45;
          v47 = objc_retainAutorelease(v29);
          v52 = (char *)objc_msgSend_UTF8String(v47, v48, v49, v50, v51);
          sub_1D52850A0(v56, v52);
          if (SHIBYTE(v57) < 0)
          {
            sub_1D5290130(__p, v56[0], (unint64_t)v56[1]);
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)v56;
            v59 = v57;
          }
          v60 = v33;
          v61 = v37;
          v62 = v41;
          v63 = v46;
          sub_1D5408F8C(&v65, (__int128 *)__p);
          if (SHIBYTE(v59) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v57) < 0)
            operator delete(v56[0]);
        }

      }
    }

  }
  v53 = v65;
  if (v66 == v65)
  {
    v54 = 0;
  }
  else
  {
    if (*(char *)(v65 + 23) < 0)
      v53 = *(_QWORD *)v65;
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, v53, v9, v10);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
  }

  __p[0] = &v65;
  sub_1D5409CB0((void ***)__p);

  return v54;
}

void sub_1D5418C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;
  void *v32;

  a20 = &a31;
  sub_1D5409CB0((void ***)&a20);

  _Unwind_Resume(a1);
}

void sub_1D5418D2C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  void *v12;
  void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  int v24;
  float v25;
  float v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  id v55;

  v55 = a2;
  if (!*(_DWORD *)(a4 + 4))
    goto LABEL_18;
  sub_1D53F63AC(a1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F6410(a3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D5297C60(v11, v12, 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F68C8(a1, v55, a3, a4, a5, a6);
  sub_1D53F6390(a3);
  v14 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v13, v14, v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  v23 = v18 != 0;
  if (v18)
    v24 = objc_msgSend_intValue(v18, v19, v20, v21, v22);
  else
    v24 = 0;
  v25 = (float)v24;
  v26 = (float)v24;
  if (*(_DWORD *)(a4 + 4) >= 3u)
  {
    sub_1D53F6390(a3);
    v27 = (char *)objc_claimAutoreleasedReturnValue();
    sub_1D529EA84(v13, v27, v28, v29, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    sub_1D53F6390(a3);
    v32 = (char *)objc_claimAutoreleasedReturnValue();
    sub_1D529EA84(v13, v32, v33, v34, v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();

    v23 = 0;
    if (v31)
    {
      v26 = (float)v24;
      if (!v36)
      {
LABEL_12:

        goto LABEL_13;
      }
      objc_msgSend_floatValue(v31, v37, v38, v39, v40);
      v42 = v41;
      objc_msgSend_floatValue(v36, v43, v44, v45, v46);
      v23 = 0;
      if (v18)
      {
        v26 = (float)v24;
        if (v47 != v42)
        {
          v23 = 1;
          v26 = (float)(v25 - v42) / (float)(v47 - v42);
        }
        goto LABEL_12;
      }
    }
    v26 = (float)v24;
    goto LABEL_12;
  }
LABEL_13:
  if (v13)
  {
    sub_1D53F6390(a3);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObjectForKey_(v13, v49, (uint64_t)v48, v50, v51);

  }
  if (v23)
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v19, (uint64_t)CFSTR("%ld"), v21, v22, v24);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6410(a3);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6390(a3);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F96CC(a1, v53, v54, v52, v25, v26);

  }
LABEL_18:

}

void sub_1D5418F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1D5419010()
{
  void *v0;
  void *v1;

  JUMPOUT(0x1D5419000);
}

void sub_1D5419020()
{
  JUMPOUT(0x1D5419000);
}

void sub_1D5419028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  long double v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;

  if (*(_DWORD *)(a4 + 4) == 1 && *(_WORD *)(a4 + 2) == 3)
  {
    sub_1D53F63AC(a1);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    sub_1D53F6410(a3);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6390(a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = (void *)MEMORY[0x1E0CB37E8];
    v13 = *(unsigned __int16 *)(a4 + 8);
    v14 = bswap32(v13) >> 16;
    if (a6)
      LOWORD(v13) = v14;
    v15 = pow(1.41421356, (double)(unsigned __int16)v13 * 0.00390625);
    objc_msgSend_numberWithDouble_(v12, v16, v17, v18, v19, (double)v15);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v21, v10, v11, v20);

  }
}

void sub_1D541912C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D5419154(_BYTE *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;

  v10 = a2;
  if (*(_DWORD *)(a4 + 4))
  {
    v17 = v10;
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v10, (uint64_t)CFSTR("%@/OlympusEquipment"), v11, v12, v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = *(_DWORD *)(a4 + 8);
    v15 = bswap32(v14);
    if ((_DWORD)a6)
      v16 = v15;
    else
      v16 = v14;
    sub_1D53FA480(a1, v13, word_1E99A26A0, v16, a5, a6);

    v10 = v17;
  }

}

void sub_1D54191F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D5419218(_BYTE *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;

  v10 = a2;
  if (*(_DWORD *)(a4 + 4))
  {
    v17 = v10;
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v10, (uint64_t)CFSTR("%@/OlympusCameraSettings"), v11, v12, v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = *(_DWORD *)(a4 + 8);
    v15 = bswap32(v14);
    if ((_DWORD)a6)
      v16 = v15;
    else
      v16 = v14;
    sub_1D53FA480(a1, v13, word_1E99A2800, v16, a5, a6);

    v10 = v17;
  }

}

void sub_1D54192BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D54192DC(_BYTE *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;

  v10 = a2;
  if (*(_DWORD *)(a4 + 4))
  {
    v17 = v10;
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v10, (uint64_t)CFSTR("%@/OlympusFocusInfo"), v11, v12, v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = *(_DWORD *)(a4 + 8);
    v15 = bswap32(v14);
    if ((_DWORD)a6)
      v16 = v15;
    else
      v16 = v14;
    sub_1D53FA480(a1, v13, word_1E99A2B98, v16, a5, a6);

    v10 = v17;
  }

}

void sub_1D5419380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t sub_1D54193A0(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  __int128 v11;
  uint64_t v12;

  result = sub_1D53F732C((uint64_t)a1, a2, a3, a4, a5, a6);
  v8 = BYTE1(result) - BYTE3(result);
  v9 = result - BYTE2(result);
  if (v8 >= 4 && v9 >= 4)
  {
    v12 = 0x10000000100;
    LODWORD(v11) = (int)(BYTE1(result)
                       + BYTE3(result)
                       - 256
                       + (((BYTE1(result) + BYTE3(result) - 256) & 0x8000) >> 15)) >> 1;
    DWORD1(v11) = (int)(256
                      - (BYTE2(result)
                       + result)
                      + (((256 - (BYTE2(result) + result)) & 0x8000u) >> 15)) >> 1;
    sub_1D5282DF0((_DWORD *)&v11 + 2, v8 >> 2, v9 >> 2);
    sub_1D53FDE6C((uint64_t)a1, &v12, 0);
    sub_1D53FDDC4(a1, &v11, 0);
    sub_1D53FDFE0(a1, 1uLL, 0, 0);
    return sub_1D53FDE90(a1, 1uLL, 0, 0);
  }
  return result;
}

void sub_1D5419484(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned __int16 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  void *v28;
  const __CFString *v29;
  const __CFString *v30;
  __CFString *v31;
  int v32;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  id v38;
  __int128 v39;
  void *__p;
  char *v41;
  unint64_t v42;
  uint64_t v43;

  v38 = a2;
  sub_1D53F63AC((uint64_t)a1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53C3EE8(v9, (void *)*MEMORY[0x1E0CBD090], (void *)*MEMORY[0x1E0CBD0B8]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = sub_1D54181EC(v11, v10);
  v13 = v12;
  v14 = 0;
  v15 = 0;
  v16 = *(unsigned __int16 *)(a4 + 8);
  v17 = bswap32(v16) >> 16;
  if (a6)
    LOWORD(v16) = v17;
  v37 = (unsigned __int16)v16;
  v18 = v16 & 0x3F;
  v19 = v16 & 0xC0;
  v42 = 0;
  v43 = 0;
  __p = 0;
  v41 = 0;
  v20 = 22;
  do
  {
    v39 = 0uLL;
    v12 = sub_1D5418454(v12, v13, (unsigned __int16)v15, (uint64_t)&v39, &v43);
    if ((v12 & 1) != 0)
    {
      if ((unint64_t)v14 >= v42)
      {
        v21 = (v14 - (_BYTE *)__p) >> 4;
        if ((unint64_t)(v21 + 1) >> 60)
          sub_1D5282B8C();
        v22 = (uint64_t)(v42 - (_QWORD)__p) >> 3;
        if (v22 <= v21 + 1)
          v22 = v21 + 1;
        if (v42 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0)
          v23 = 0xFFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
          v12 = (uint64_t)sub_1D5284334((uint64_t)&v42, v23);
        else
          v12 = 0;
        v24 = (char *)(v12 + 16 * v21);
        *(_OWORD *)v24 = v39;
        v26 = (char *)__p;
        v25 = v41;
        v27 = v24;
        if (v41 != __p)
        {
          do
          {
            *((_OWORD *)v27 - 1) = *((_OWORD *)v25 - 1);
            v27 -= 16;
            v25 -= 16;
          }
          while (v25 != v26);
          v25 = (char *)__p;
        }
        v14 = v24 + 16;
        __p = v27;
        v41 = v24 + 16;
        v42 = v12 + 16 * v23;
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_OWORD *)v14 = v39;
        v14 += 16;
      }
      v41 = v14;
    }
    else
    {
      v20 = v15;
    }
    ++v15;
  }
  while (v15 < v20);
  if (v13 <= 0x1E && ((1 << v13) & 0x40000028) != 0)
  {
    v28 = v10;
    if (!v20)
      goto LABEL_52;
    v29 = CFSTR("Dynamic Single Target");
    v30 = CFSTR(" UNKNOWN AF Target");
    if (v19 == 64)
      v30 = CFSTR("All Target");
    if (v19 != 128)
      v29 = v30;
    if (v19)
      v31 = (__CFString *)v29;
    else
      v31 = CFSTR("Single Target");
    sub_1D53F8CEC((uint64_t)a1, v31, 0, (void (*)(uint64_t, _QWORD))sub_1D5419820);
    v32 = v37;
    if (v37 != 255)
    {
      if (v18)
        v18 = (v18 - 1) % v20;
      else
        v18 = 255;
    }
  }
  else
  {
    v28 = v10;
    if (!v20)
      goto LABEL_52;
    sub_1D53F8CEC((uint64_t)a1, 0, 0, (void (*)(uint64_t, _QWORD))sub_1D5419868);
    v32 = v37;
    v19 = v37 & 0x40;
  }
  if (v18 >= v20 || v32 == 255)
    v34 = 0;
  else
    v34 = 1 << v18;
  sub_1D53FDE6C((uint64_t)a1, &v43, 1);
  sub_1D53FDE38(a1, (uint64_t)&__p, 1);
  sub_1D53FDFE0(a1, v34, 0, 1);
  v35 = ~(-1 << v20);
  if (v19 != 64)
    v35 = 0;
  if (v19)
    v36 = v35;
  else
    v36 = v34;
  sub_1D53FDE90(a1, v36, 0, 1);
LABEL_52:
  if (__p)
  {
    v41 = (char *)__p;
    operator delete(__p);
  }

}

void sub_1D54197CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id sub_1D5419820(void *a1, unsigned int a2)
{
  if (a1)
  {
    a1 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2D18, 0);
    if (a1)
    {
      sub_1D541A098((uint64_t)a1, a2);
      a1 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  return a1;
}

const __CFString *sub_1D5419868(const __CFString *result, int a2)
{
  if (result)
  {
    result = (const __CFString *)__dynamic_cast(result, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A2D18, 0);
    if (result)
    {
      switch(a2)
      {
        case 0:
          result = CFSTR("Left");
          break;
        case 1:
          result = CFSTR("Center (horizontal)");
          break;
        case 2:
          result = CFSTR("Right");
          break;
        case 3:
          result = CFSTR("Center (vertical)");
          break;
        default:
          if (a2 == 255)
            result = CFSTR("(none)");
          else
            result = 0;
          break;
      }
    }
  }
  return result;
}

void sub_1D5419908(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;

  v11 = a2;
  sub_1D53F6410(a3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend_length(v12, v13, v14, v15, v16))
  {

    goto LABEL_20;
  }
  sub_1D53F6390(a3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = objc_msgSend_length(v17, v18, v19, v20, v21);

  if (v22)
  {
    v23 = sub_1D53F6ABC(a1, v11, a3, a4, a5, a6);
    if (v23 >= 0xB)
      v24 = 0x7FFFLL;
    else
      v24 = dword_1D545BEEC[(__int16)v23];
    if (*(_DWORD *)(a4 + 4) < 2u)
      goto LABEL_16;
    sub_1D53F63AC(a1);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6410(a3);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6390(a3);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53FAE18(v25, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    v33 = objc_msgSend_count(v28, v29, v30, v31, v32);
    if (v33)
    {
      v46 = 0;
      LOBYTE(v33) = sub_1D53BD2F0(v28, (const char *)&v46, v34, v35, v36);
      if ((v33 & 0x30) == 0x10)
      {
        v24 = 0;
        goto LABEL_15;
      }
      if ((v33 & 0x30) == 0x20)
      {
        v24 = 2;
LABEL_15:

LABEL_16:
        sub_1D53F63AC(a1);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6410(a3);
        if ((_DWORD)v24 == 0x7FFF)
        {
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F6390(a3);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53FAF90(v37, v38, v39);

        }
        else
        {
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F6390(a3);
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v42, v24, v43, v44);
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D52DFEFC(v37, v40, v41, v45);

        }
        goto LABEL_20;
      }
    }
    if ((v33 & 3) != 0)
      v24 = 1;
    else
      v24 = v24;
    goto LABEL_15;
  }
LABEL_20:

}

void sub_1D5419B58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5419BD8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;

  v28 = a2;
  sub_1D53F6410(a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend_length(v11, v12, v13, v14, v15))
  {
LABEL_7:

    goto LABEL_8;
  }
  sub_1D53F6390(a3);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend_length(v16, v17, v18, v19, v20);

  if (v21)
  {
    if (sub_1D53F6ABC(a1, v28, a3, a4, a5, a6))
    {
      sub_1D53F63AC(a1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6410(a3);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6390(a3);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v24, 1, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v11, v22, v23, v27);

    }
    else
    {
      sub_1D53F63AC(a1);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6410(a3);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6390(a3);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53FAF90(v11, v22, v23);
    }

    goto LABEL_7;
  }
LABEL_8:

}

void sub_1D5419D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D5419D8C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;

  v30 = a2;
  sub_1D53F6410(a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend_length(v11, v12, v13, v14, v15))
    goto LABEL_10;
  sub_1D53F6390(a3);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend_length(v16, v17, v18, v19, v20);

  if (v21)
  {
    v22 = sub_1D53F6ABC(a1, v30, a3, a4, a5, a6);
    if (v22)
    {
      if (v22 != 1)
      {
        sub_1D53F63AC(a1);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6410(a3);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6390(a3);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53FAF90(v11, v24, v25);
        goto LABEL_9;
      }
      v23 = 0;
    }
    else
    {
      v23 = 1;
    }
    sub_1D53F63AC(a1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6410(a3);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6390(a3);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v26, v23, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v11, v24, v25, v29);

LABEL_9:
LABEL_10:

  }
}

void sub_1D5419F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D5419F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  double v15;
  void *v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int v24;

  v24 = 0;
  v10 = *(_DWORD *)(a4 + 8);
  v11 = bswap32(v10);
  if (a6)
    v12 = v11;
  else
    v12 = v10;
  if (sub_1D53F5F40(a1, (uint64_t)&v24, 4, a5, v12) == 4)
  {
    v13 = v24;
    v14 = bswap32(v24);
    if (a6)
      v13 = v14;
    v24 = v13;
    if (v13 >= 1)
    {
      v15 = (double)v13;
      sub_1D53F5F40(a1, (uint64_t)&v24, 4, a5, v12 + 4);
      sub_1D53F63AC(a1);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6410(a3);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6390(a3);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v19, v20, v21, v22, v15 / 1000.0);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v16, v17, v18, v23);

    }
  }
}

void sub_1D541A074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

__CFString *sub_1D541A098(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x15)
    return 0;
  else
    return off_1E99A2DE0[(__int16)a2];
}

void sub_1D541A0BC(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE0uLL);
  sub_1D541A134(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1D5285658((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1D541A120(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D541A134(_QWORD *a1, uint64_t *a2, void **a3, void **a4)
{
  a1[2] = 0;
  *a1 = &unk_1E99A2D40;
  a1[1] = 0;
  sub_1D53FEEF0((uint64_t)(a1 + 3), a2, *a3, *a4);
  a1[3] = off_1E99A2C48;
  return a1;
}

void sub_1D541A180(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D541A194(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A2D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D541A1A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A2D40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D541A1DC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void sub_1D541A260(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D541A37C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D541A42C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A31C8, 0);
    if (v10)
      sub_1D541AFFC((uint64_t)v10, v12, v11, a4, a5, a6);
  }

}

void sub_1D541A4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D541A4C0(unsigned __int8 *a1, unint64_t a2)
{
  int v2;

  if (a2 >= 4)
  {
    v2 = *a1;
    if (v2 == 77)
    {
      if (a1[1] == 77 && !a1[2] && a1[3] == 85)
        return 1;
    }
    else if (v2 == 73 && a1[1] == 73 && a1[2] == 85 && !a1[3])
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1D541A530(uint64_t *a1)
{
  uint64_t v2;
  int v4;
  uint64_t v5[3];

  v4 = 0;
  sub_1D5285164(v5, a1, (uint64_t)&v4, 0);
  v4 = 0;
  if ((*(unsigned int (**)(uint64_t, int *, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, &v4, 4) != 4)
    goto LABEL_12;
  if (v4 == 77)
  {
    if (BYTE1(v4) != 77 || BYTE2(v4) || HIBYTE(v4) != 85)
      goto LABEL_12;
  }
  else if (v4 != 73 || BYTE1(v4) != 73 || BYTE2(v4) != 85 || HIBYTE(v4))
  {
LABEL_12:
    v2 = 0;
    goto LABEL_13;
  }
  v2 = 1;
LABEL_13:
  sub_1D5285200(v5);
  return v2;
}

void sub_1D541A600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5285200((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D541A618(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v7;
  id v8;
  id v9;

  v9 = a2;
  v8 = a3;
  sub_1D541B1B4(a1, &v9, &v8, &v7);
  *a4 = v7;

}

void sub_1D541A68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D541A6A8(uint64_t a1, int a2)
{
  uint64_t result;

  LODWORD(result) = sub_1D53FC0B0(a1, a2);
  if (a2 == 85)
    return 1;
  else
    return result;
}

void *sub_1D541A6D0()
{
  return &unk_1E99A2E90;
}

BOOL sub_1D541A6DC(uint64_t a1, void *a2)
{
  return a2 == &unk_1E99A2E90;
}

void sub_1D541A6F0(uint64_t a1)
{
  void *v2;
  void *v3;
  _BOOL4 v4;
  int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;

  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)*MEMORY[0x1E0CBCA28];
  v11 = v2;
  v4 = sub_1D53FAE98(v2, (void *)*MEMORY[0x1E0CBCA28], CFSTR("ImageStabilization"));

  if (v4
    && (sub_1D53F63AC(a1),
        v12 = (id)objc_claimAutoreleasedReturnValue(),
        v5 = sub_1D53FAF14(v12, v3, CFSTR("ImageStabilization")),
        v12,
        (v5 - 2) < 3))
  {
    v6 = dword_1D545C060[v5 - 2];
    sub_1D53F63AC(a1);
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v7, v6, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v13, v3, CFSTR("ImageStabilization"), v10);

  }
  else
  {
    sub_1D53F63AC(a1);
    v13 = (id)objc_claimAutoreleasedReturnValue();
    sub_1D53FAF90(v13, v3, CFSTR("ImageStabilization"));
  }

}

void sub_1D541A800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

const __CFString *sub_1D541A82C()
{
  return CFSTR("{MakerPanasonic}");
}

uint64_t sub_1D541A838(_BYTE *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v16 = 0;
  v17[0] = 0;
  *(_QWORD *)((char *)v17 + 5) = 0;
  if (sub_1D53F5F40((uint64_t)a1, (uint64_t)&v16, 20, a5, a3) == 20)
  {
    if ((_DWORD)v16 == 1128875340 && WORD2(v16) == 65)
    {
      v14 = 8;
    }
    else
    {
      if (v16 != 0x696E6F73616E6150 || LOWORD(v17[0]) != 99)
        goto LABEL_10;
      v14 = 12;
    }
    sub_1D53FA480(a1, v10, L"%\a", v14 + a3, a5, a6);
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 160))(a1);
    v13 = 1;
    goto LABEL_14;
  }
LABEL_10:
  v13 = 0;
LABEL_14:

  return v13;
}

void sub_1D541A96C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D541A984(uint64_t a1)
{
  BOOL v2;
  int v3;
  uint64_t v4;
  void *v5;
  void *v6;
  BOOL v7;
  int v8;
  __CFString *v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;

  sub_1D53F63AC(a1);
  v19 = (id)objc_claimAutoreleasedReturnValue();
  v2 = sub_1D53FAE98(v19, CFSTR("{PictStyleSetting}"), CFSTR("PictureStyle"));

  if (v2)
  {
    sub_1D53F63AC(a1);
    v20 = (id)objc_claimAutoreleasedReturnValue();
    v3 = sub_1D53FAF14(v20, CFSTR("{PictStyleSetting}"), CFSTR("PictureStyle"));

    sub_1D541ABF0(v4, v3);
    v21 = (id)objc_claimAutoreleasedReturnValue();
    sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("PictureStyle"), v21, (float)v3, (float)v3);

  }
  sub_1D53F63AC(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D5297C60(v5, CFSTR("{PictureStyle}"), 0);
  v22 = (id)objc_claimAutoreleasedReturnValue();

  if (v22)
  {
    sub_1D53F63AC(a1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = sub_1D53FAE98(v6, CFSTR("{PictureStyle}"), CFSTR("Monochrome"));

    if (!v7)
      sub_1D53F9628(a1, CFSTR("Monochrome"), 0);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    if ((v8 & 0x80000000) == 0)
    {
      v9 = CFSTR("{PictureStyle}");
      sub_1D53F984C(a1, v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F96CC(a1, v9, CFSTR("PictStyleColorSpace"), v10, (float)v8, (float)v8);

    }
  }
  sub_1D53F63AC(a1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v11, v12, (uint64_t)CFSTR("{PictStyleSetting}"), v13, v14);

  sub_1D53F63AC(a1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v15, v16, (uint64_t)CFSTR("{PictStyleNormalized}"), v17, v18);

}

void sub_1D541AB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

__CFString *sub_1D541ABF0(uint64_t a1, int a2)
{
  if ((a2 - 1) > 0x2B)
    return 0;
  else
    return off_1E99A3230[a2 - 1];
}

void sub_1D541AC14(char *a1)
{
  void *v2;
  __CFString *v3;
  __CFString *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  void *v20;
  id v21;
  const char *v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  uint64_t v33;

  sub_1D53F63AC((uint64_t)a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = CFSTR("{Temporary}");
  v4 = CFSTR("_AutoFocus");
  sub_1D53FAE18(v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if ((unint64_t)objc_msgSend_count(v5, v6, v7, v8, v9) >= 2)
  {
    *(_QWORD *)&v32 = 0;
    v13 = sub_1D5417CDC(v5, (const char *)&v32, v10, v11, v12);
    *(_QWORD *)&v32 = 1;
    v17 = sub_1D5417CDC(v5, (const char *)&v32, v14, v15, v16);
    if (v13 > 0.0 && v13 <= 1.0 && v17 > 0.0 && v17 <= 1.0)
    {
      sub_1D53FDB60((uint64_t)a1);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v33 = 0xBB800000FA0;
      v21 = (id)*MEMORY[0x1E0CBCC28];
      if (sub_1D5297D80(v20, v21))
      {
        v22 = (const char *)*MEMORY[0x1E0CBCC30];
        v23 = sub_1D5297D80(v20, (void *)*MEMORY[0x1E0CBCC30]);

        if (v23)
        {
          v27 = sub_1D5297AC0(v20, (const char *)v21, v24, v25, v26);
          LODWORD(v33) = v27;
          v31 = sub_1D5297AC0(v20, v22, v28, v29, v30);
          HIDWORD(v33) = v31;
LABEL_15:
          LODWORD(v32) = (int)(float)((float)(v13 + -0.5) * (float)v27);
          DWORD1(v32) = (int)(float)((float)(0.5 - v17) * (float)v31);
          sub_1D5282DF0((_DWORD *)&v32 + 2, v27 / 20, v31 / 20);
          sub_1D53FDE6C((uint64_t)a1, &v33, 0);
          sub_1D53FDDC4(a1, &v32, 0);
          sub_1D53FDFE0(a1, 1uLL, 0, 0);
          sub_1D53F8DE4((uint64_t)a1);

          goto LABEL_16;
        }
      }
      else
      {

      }
      v27 = 4000;
      v31 = 3000;
      goto LABEL_15;
    }
  }
LABEL_16:

}

void sub_1D541AE3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D541AE90(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  __int128 v14;
  __int128 v15;
  char *v16[3];

  memset(v16, 0, sizeof(v16));
  sub_1D53FD760((uint64_t *)a1, a2, (uint64_t *)&v15);
  sub_1D5282F74(&v13, (int *)(a1 + 196));
  v12 = *(_DWORD *)(a1 + 200);
  sub_1D53F4C74((uint64_t *)a1, &v13, &v12, 0, &v14);
  if ((_QWORD)v15)
    sub_1D52B0A7C(v16, &v15);
  if ((_QWORD)v14)
    sub_1D52B0A7C(v16, &v14);
  sub_1D53F51D8((uint64_t)v16, a2, a3);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)&v15 = v16;
  sub_1D5282E44((void ***)&v15);
}

void sub_1D541AFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  sub_1D5282EB4((uint64_t)&a12);
  a12 = (void **)&a14;
  sub_1D5282E44(&a12);
  _Unwind_Resume(a1);
}

void sub_1D541AFFC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  void *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v11 = *(_DWORD *)(a4 + 8);
  v12 = bswap32(v11);
  if (a6)
    v13 = v12;
  else
    v13 = v11;
  *(_DWORD *)(a1 + 196) = v13;
  v14 = *(unsigned __int16 *)(a4 + 2);
  if (v14 > 0x6F)
    LODWORD(v15) = 0;
  else
    v15 = qword_1D545BFA0[v14];
  *(_DWORD *)(a1 + 200) = v15 * *(_DWORD *)(a4 + 4);
  v23 = 0uLL;
  v24 = 0;
  if (sub_1D53F5F40(a1, (uint64_t)&v23, 24, a5, v13) == 24
    && !(*(_DWORD *)((char *)&v23 + 6) ^ 0x66697845 | WORD5(v23)))
  {
    v19 = BYTE12(v23);
    if (BYTE12(v23) == BYTE13(v23) && (BYTE13(v23) & 0xFB) == 0x49)
    {
      v20 = bswap32(v24);
      if (BYTE12(v23) == 77)
        v21 = v20;
      else
        v21 = v24;
      if (HIBYTE(v23) + BYTE14(v23) == 42)
      {
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v16, (uint64_t)CFSTR("%@/PanasonicThumbnail"), v17, v18, v10);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53FA480((_BYTE *)a1, v22, word_1E999D478, a5 + v21, (v13 + 12), v19 == 77);

      }
    }
  }

}

void sub_1D541B18C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D541B1B4(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE8uLL);
  sub_1D541B22C((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1D5285658((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1D541B218(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D541B22C(uint64_t a1, uint64_t *a2, void **a3, void **a4)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E99A31F0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D53FEEF0(a1 + 24, a2, *a3, *a4);
  *(_QWORD *)(a1 + 24) = off_1E99A30F8;
  *(_DWORD *)(a1 + 220) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  return a1;
}

void sub_1D541B27C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D541B290(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A31F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D541B2A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A31F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D541B2D8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void sub_1D541B2E8(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A3920, 0);
    if (v10)
      sub_1D541DDF4((uint64_t)v10, v11, a3, a4, v12, a6);
  }

}

void sub_1D541B364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D541B378(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A3920, 0);
    if (v11)
      sub_1D541E188((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D541B404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D541B418(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A3920, 0);
    if (v10)
      sub_1D541D6CC((uint64_t)v10, v11, v12, a4, a5, a6);
  }

}

void sub_1D541B494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D541B4A8(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  id v9;

  v9 = a2;
  if (a1)
  {
    v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A3920, 0);
    if (v7)
      sub_1D541E0D4((uint64_t)v7, v8, a3, a4);
  }

}

void sub_1D541B520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D541B534(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v9 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A3920, 0);
    if (v9)
      sub_1D541D934((uint64_t)v9, v12, v10, a4, v11, a6);
  }

}

void sub_1D541B5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void *sub_1D541B5C0(void *result)
{
  if (result)
    return __dynamic_cast(result, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A3920, 0);
  return result;
}

void sub_1D541B5E0(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v8;
  unsigned int v9;
  unsigned int v10;

  if (a1)
  {
    v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A3920, 0);
    if (v8)
    {
      v9 = *(unsigned __int16 *)(a4 + 8);
      v10 = bswap32(v9) >> 16;
      if (a6)
        LOWORD(v9) = v10;
      sub_1D541D448((uint64_t)v8, 0, (unsigned __int16)v9);
    }
  }
}

void sub_1D541B648(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A3920, 0);
    if (v10)
      sub_1D541DA48((uint64_t)v10, v12, v11, a4, a5, a6);
  }

}

void sub_1D541B6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D541B6DC(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A3920, 0);
    if (v10)
      sub_1D541DC38((uint64_t)v10, v12, v11, a4, a5, a6);
  }

}

void sub_1D541B75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D541B770(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A3920, 0);
    if (v11)
      sub_1D541DEE8((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D541B800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D541B814(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v7;
  id v8;
  id v9;

  v9 = a2;
  v8 = a3;
  sub_1D541E38C(a1, &v9, &v8, &v7);
  *a4 = v7;

}

void sub_1D541B888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

const __CFString *sub_1D541B8A4()
{
  return CFSTR("{MakerPentax}");
}

void sub_1D541B8B0(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  void *v22;
  void *v23;
  __CFString *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  __CFString *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 v61;
  unsigned int v62;
  unsigned int v63;
  __int128 v64;
  __int128 v65;
  char *v66[3];

  sub_1D53F642C((uint64_t)a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v7, (uint64_t)CFSTR("IFD0/%@"), v8, v9, *MEMORY[0x1E0CBD0C0]);
  v10 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v6, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v19 = objc_msgSend_intValue(v14, v15, v16, v17, v18);
  if ((v19 - 9) >= 0xFFFFFFF8)
    v20 = v19;
  else
    v20 = 0;
  if (v14)
    v21 = v20;
  else
    v21 = v19;
  sub_1D53F642C((uint64_t)a1);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = (void *)MEMORY[0x1E0CB3940];
  v24 = CFSTR("_JPEGInterchangeFormat");
  objc_msgSend_stringWithFormat_(v23, v25, (uint64_t)CFSTR("IFD2/%@"), v26, v27, v24);
  v28 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v22, v28, v29, v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F642C((uint64_t)a1);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = (void *)MEMORY[0x1E0CB3940];
  v35 = CFSTR("_JPEGInterchangeFormatLength");
  objc_msgSend_stringWithFormat_(v34, v36, (uint64_t)CFSTR("IFD2/%@"), v37, v38, v35);
  v39 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v33, v39, v40, v41, v42);
  v43 = (void *)objc_claimAutoreleasedReturnValue();

  memset(v66, 0, sizeof(v66));
  sub_1D53FD760(a1, a2, (uint64_t *)&v65);
  LODWORD(v61) = objc_msgSend_intValue(v32, v44, v45, v46, v47);
  v62 = objc_msgSend_intValue(v43, v48, v49, v50, v51);
  sub_1D5285A24(&v63, &v62);
  sub_1D53F4C74(a1, (int *)&v61, &v63, v21, &v64);
  sub_1D53FC9E0(a1, CFSTR("IFD2"), &v61);
  if ((_QWORD)v65)
    sub_1D52B0A7C(v66, &v65);
  if ((_QWORD)v64)
    sub_1D52B0A7C(v66, &v64);
  if ((_QWORD)v61)
    sub_1D52B0A7C(v66, &v61);
  sub_1D53F51D8((uint64_t)v66, a2, a3);
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  *(_QWORD *)&v65 = v66;
  sub_1D5282E44((void ***)&v65);

}

void sub_1D541BBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void **a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;

  sub_1D5282EB4((uint64_t)&a14);
  sub_1D5282EB4((uint64_t)&a16);
  a16 = (void **)&a18;
  sub_1D5282E44(&a16);

  _Unwind_Resume(a1);
}

void sub_1D541BC70(uint64_t a1)
{
  void *v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;

  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)*MEMORY[0x1E0CBCA28];
  sub_1D540B92C(v2, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCA48]);
  v14 = (id)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    v8 = (const char *)objc_msgSend_intValue(v14, v4, v5, v6, v7);
    sub_1D541BD74(a1, v8, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v12)
    {
      sub_1D53F63AC(a1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v13, v3, (void *)*MEMORY[0x1E0CBCA58], v12);

    }
  }
  sub_1D53FC1FC(a1);

}

void sub_1D541BD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

id sub_1D541BD74(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  id v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  void *v83;
  double v84;
  unint64_t v85;
  void **v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  double v90;
  double v91;
  double v93;
  long double v94;
  double v96;
  long double v97;
  double v98;
  long double v99;
  long double v100;
  double v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *j;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  double v127;
  double v128;
  void *v129;
  char *v130;
  void *v131[2];
  uint64_t v132;
  void *__p[2];
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%d %d"), a4, a5, BYTE1(a2), a2);
  v130 = (char *)objc_claimAutoreleasedReturnValue();
  v138 = 0;
  v139 = 0;
  v140 = 0;
  sub_1D54343BC(CFSTR("pentax"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v6;
  if (v6)
  {
    sub_1D52EAE5C(v6, v130, v8, v9, v10);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    for (i = 0; ; i = v137 + 1)
    {
      v137 = i;
      if (i >= objc_msgSend_count(v16, v12, v13, v14, v15))
        break;
      sub_1D53BD380(v16, (const char *)&v137, v18, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_count(v21, v22, v23, v24, v25) == 5)
      {
        __p[0] = 0;
        sub_1D53BC854(v21, (const char *)__p, v26, v27, v28);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        __p[0] = (void *)1;
        v33 = sub_1D53BD334(v21, (const char *)__p, v30, v31, v32);
        __p[0] = (void *)2;
        v37 = sub_1D53BD334(v21, (const char *)__p, v34, v35, v36);
        __p[0] = (void *)3;
        v41 = sub_1D53BD334(v21, (const char *)__p, v38, v39, v40);
        __p[0] = (void *)4;
        v45 = sub_1D53BD334(v21, (const char *)__p, v42, v43, v44);
        if (v29)
        {
          v46 = v45;
          v47 = objc_retainAutorelease(v29);
          v52 = (char *)objc_msgSend_UTF8String(v47, v48, v49, v50, v51);
          sub_1D52850A0(v131, v52);
          if (SHIBYTE(v132) < 0)
          {
            sub_1D5290130(__p, v131[0], (unint64_t)v131[1]);
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)v131;
            v134 = v132;
          }
          *(double *)&v135 = v33;
          *((double *)&v135 + 1) = v37;
          *(double *)&v136 = v41;
          *((double *)&v136 + 1) = v46;
          sub_1D5408F8C(&v138, (__int128 *)__p);
          if (SHIBYTE(v134) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v132) < 0)
            operator delete(v131[0]);
        }

      }
    }

  }
  v53 = v138;
  if (v139 - v138 == 56)
  {
    if (*(char *)(v138 + 23) < 0)
      v53 = *(_QWORD *)v138;
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, v53, v9, v10);
    v54 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_74;
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v139 - v138) >> 3)) < 2)
  {
    v54 = 0;
    goto LABEL_74;
  }
  sub_1D53FDB60(a1);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v59 = sub_1D5297AC0(v55, (const char *)*MEMORY[0x1E0CBCBA0], v56, v57, v58);

  sub_1D53FDB60(a1);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v60, (const char *)*MEMORY[0x1E0CBCC00], v61, v62, v63);
  v64 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_doubleValue(v64, v65, v66, v67, v68);
  v70 = v69;
  sub_1D52B261C(0x6DB6DB6DB6DB6DB7 * ((v139 - v138) >> 3));
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  v75 = v138;
  if (*(char *)(v138 + 23) < 0)
    v75 = *(_QWORD *)v138;
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v71, v75, v72, v73);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  v80 = v138;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v139 - v138) >> 3)) >= 2)
  {
    v81 = (double)v59;
    v128 = log((double)v59);
    v82 = 0;
    v83 = 0;
    v84 = 999999999.0;
    v85 = 1;
    v127 = v70;
    while (1)
    {
      v86 = (void **)(v80 + v82 + 56);
      if (*(char *)(v80 + v82 + 79) < 0)
      {
        sub_1D5290130(__p, *v86, *(_QWORD *)(v80 + v82 + 64));
      }
      else
      {
        v87 = *(_OWORD *)v86;
        v134 = *(_QWORD *)(v80 + v82 + 72);
        *(_OWORD *)__p = v87;
      }
      v88 = *(_OWORD *)(v80 + v82 + 96);
      v135 = *(_OWORD *)(v80 + v82 + 80);
      v136 = v88;
      v89 = v135;
      v90 = *(double *)&v135 + -0.9;
      v91 = *((double *)&v135 + 1) + 0.9;
      if (*(double *)&v135 + -0.9 <= v81 && v91 >= v81)
      {
        if (v64)
        {
          v94 = *((double *)&v136 + 1);
          v93 = *(double *)&v136;
          v91 = *(double *)&v136 + -0.15;
          if (v70 < *(double *)&v136 + -0.15 || v70 > *((double *)&v136 + 1) + 0.15)
            goto LABEL_54;
          if (*(double *)&v135 != *((double *)&v135 + 1) && *(double *)&v136 != *((double *)&v136 + 1))
          {
            v96 = log(*(long double *)&v136);
            v97 = log(v94) - v96;
            v98 = log(*((long double *)&v89 + 1));
            v99 = log(*(long double *)&v89);
            v100 = v96 + v97 / (v98 - v99) * (v128 - v99);
            v70 = v127;
            v93 = exp(v100);
          }
          v101 = vabdd_f64(v70, v93);
          if (v101 > v84 + 0.15)
            goto LABEL_54;
          v90 = v84 + -0.15;
          if (v101 < v84 + -0.15)
          {
            if (v134 >= 0)
              objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v76, (uint64_t)__p, v78, v79);
            else
              objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v76, (uint64_t)__p[0], v78, v79);
            v102 = objc_claimAutoreleasedReturnValue();

            v83 = (void *)v102;
          }
          v84 = v101;
        }
        if (v134 >= 0)
          objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v76, (uint64_t)__p, v78, v79, v90, v91);
        else
          objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v76, (uint64_t)__p[0], v78, v79, v90, v91);
        v106 = (void *)objc_claimAutoreleasedReturnValue();
        if (v106)
          objc_msgSend_addObject_(v74, v103, (uint64_t)v106, v104, v105);

      }
LABEL_54:
      if (SHIBYTE(v134) < 0)
        operator delete(__p[0]);
      ++v85;
      v80 = v138;
      v82 += 56;
      if (v85 >= 0x6DB6DB6DB6DB6DB7 * ((v139 - v138) >> 3))
        goto LABEL_60;
    }
  }
  v83 = 0;
LABEL_60:
  if (objc_msgSend_count(v74, v76, v77, v78, v79))
  {
    if (v83)
      objc_msgSend_stringWithString_(MEMORY[0x1E0CB37A0], v107, (uint64_t)v83, v108, v109);
    else
      objc_msgSend_stringWithString_(MEMORY[0x1E0CB37A0], v107, (uint64_t)&stru_1E99A7480, v108, v109);
    v54 = (id)objc_claimAutoreleasedReturnValue();
    for (j = 0; ; j = (char *)__p[0] + 1)
    {
      __p[0] = j;
      if ((unint64_t)j >= objc_msgSend_count(v74, v110, v111, v112, v113))
        break;
      sub_1D53BC854(v74, (const char *)__p, v115, v116, v117);
      v118 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_length(v54, v119, v120, v121, v122))
      {
        if (!v83 || (objc_msgSend_isEqualToString_(v118, v123, (uint64_t)v83, v124, v125) & 1) == 0)
          objc_msgSend_appendFormat_(v54, v123, (uint64_t)CFSTR(" or %@"), v124, v125, v118);
      }
      else
      {
        objc_msgSend_appendString_(v54, v123, (uint64_t)v118, v124, v125);
      }

    }
  }
  else
  {
    v54 = v129;
  }

LABEL_74:
  __p[0] = &v138;
  sub_1D5409CB0((void ***)__p);

  return v54;
}

void sub_1D541C378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  __p = &a35;
  sub_1D5409CB0((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1D541C4B0(uint64_t a1)
{
  void *v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  __CFString *v25;
  _BOOL4 v26;
  void *v27;
  _BOOL4 v28;
  void *v29;
  int v30;
  void *v31;
  _BOOL4 v32;
  void *v33;
  int v34;
  void *v35;
  _BOOL4 v36;
  void *v37;
  int v38;
  void *v39;
  void *v40;
  void *v41;
  BOOL v42;
  int v43;
  void *v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53FAE18(v2, CFSTR("{PictStyleSetting}"), CFSTR("PictureStyle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_count(v3, v4, v5, v6, v7))
  {
    v53 = 0;
    v11 = sub_1D53BD2F0(v3, (const char *)&v53, v8, v9, v10);
    v12 = v11;
    sub_1D541C950(v11, v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("PictureStyle"), v13, (float)v12, (float)v12);

  }
  sub_1D53F63AC(a1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53FAE18(v14, CFSTR("{PictStyleSetting}"), CFSTR("ColorTone"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_count(v15, v16, v17, v18, v19))
  {
    v53 = 0;
    v23 = sub_1D53BD2F0(v15, (const char *)&v53, v20, v21, v22);
    v24 = v23;
    if (v23 > 5)
      v25 = 0;
    else
      v25 = off_1E99A3988[v23];
    sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("ColorTone"), v25, (float)v23, (float)v23);
    v26 = v24 == 5;
  }
  else
  {
    v26 = 0;
  }
  sub_1D53F63AC(a1);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = sub_1D53FAE98(v27, CFSTR("{PictStyleSetting}"), CFSTR("Hue"));

  if (v28)
  {
    sub_1D53F63AC(a1);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = sub_1D53FAF14(v29, CFSTR("{PictStyleSetting}"), CFSTR("Hue"));

    sub_1D53F9628(a1, CFSTR("Hue"), v30);
  }
  sub_1D53F63AC(a1);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = sub_1D53FAE98(v31, CFSTR("{PictStyleSetting}"), CFSTR("FineSharpness"));

  if (v32)
  {
    sub_1D53F63AC(a1);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = sub_1D53FAF14(v33, CFSTR("{PictStyleSetting}"), CFSTR("FineSharpness"));

    sub_1D53F9628(a1, CFSTR("FineSharpness"), v34);
  }
  sub_1D53F63AC(a1);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = sub_1D53FAE98(v35, CFSTR("{PictStyleSetting}"), CFSTR("ShadowCompensation"));

  if (v36)
  {
    sub_1D53F63AC(a1);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = sub_1D53FAF14(v37, CFSTR("{PictStyleSetting}"), CFSTR("ShadowCompensation"));

    sub_1D53F9628(a1, CFSTR("ShadowCompensation"), v38);
  }
  sub_1D53F63AC(a1);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D5297C60(v39, CFSTR("{PictureStyle}"), 0);
  v40 = (void *)objc_claimAutoreleasedReturnValue();

  if (v40)
  {
    sub_1D53F63AC(a1);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = sub_1D53FAE98(v41, CFSTR("{PictureStyle}"), CFSTR("Monochrome"));

    if (!v42)
      sub_1D53F9628(a1, CFSTR("Monochrome"), v26);
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    if ((v43 & 0x80000000) == 0)
    {
      sub_1D53F984C(a1, v43);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("PictStyleColorSpace"), v44, (float)v43, (float)v43);

    }
  }
  sub_1D53F63AC(a1);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v45, v46, (uint64_t)CFSTR("{PictStyleSetting}"), v47, v48);

  sub_1D53F63AC(a1);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v49, v50, (uint64_t)CFSTR("{PictStyleNormalized}"), v51, v52);

}

void sub_1D541C88C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const __CFString *sub_1D541C950(uint64_t a1, int a2)
{
  const __CFString *result;

  result = 0;
  switch(a2)
  {
    case 0:
      result = CFSTR("Program");
      break;
    case 1:
      result = CFSTR("Shutter Speed Priority");
      break;
    case 2:
      result = CFSTR("Program AE");
      break;
    case 3:
      result = CFSTR("Manual");
      break;
    case 4:
    case 10:
    case 16:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 32:
    case 34:
    case 35:
    case 36:
    case 39:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 52:
    case 57:
    case 59:
    case 62:
    case 63:
    case 64:
      return result;
    case 5:
      result = CFSTR("Portrait");
      break;
    case 6:
      result = CFSTR("Landscape");
      break;
    case 7:
      result = CFSTR("?");
      break;
    case 8:
      result = CFSTR("Sport");
      break;
    case 9:
      result = CFSTR("Night Scene");
      break;
    case 11:
      result = CFSTR("Soft");
      break;
    case 12:
      result = CFSTR("Surf and Snow");
      break;
    case 13:
    case 54:
      result = CFSTR("Candlelight");
      break;
    case 14:
      result = CFSTR("Autumn");
      break;
    case 15:
      result = CFSTR("Macro");
      break;
    case 17:
      result = CFSTR("Fireworks");
      break;
    case 18:
      result = CFSTR("Text");
      break;
    case 19:
      result = CFSTR("Panorama");
      break;
    case 30:
      result = CFSTR("Self Portrait");
      break;
    case 31:
      result = CFSTR("Illustrations");
      break;
    case 33:
      result = CFSTR("Digital Filter");
      break;
    case 37:
      result = CFSTR("Museum");
      break;
    case 38:
      result = CFSTR("Food");
      break;
    case 40:
      result = CFSTR("Green Mode");
      break;
    case 49:
      result = CFSTR("Light Pet");
      break;
    case 50:
      result = CFSTR("Dark Pet");
      break;
    case 51:
      result = CFSTR("Medium Pet");
      break;
    case 53:
      result = CFSTR("Underwater");
      break;
    case 55:
      result = CFSTR("Natural Skin Tone");
      break;
    case 56:
      result = CFSTR("Synchro Sound Record");
      break;
    case 58:
      result = CFSTR("Frame Composite");
      break;
    case 60:
      result = CFSTR("Kids");
      break;
    case 61:
      result = CFSTR("Blur Reduction");
      break;
    case 65:
      result = CFSTR("Half-length Portrait");
      break;
    default:
      if (a2 == 255)
        result = CFSTR("Digital Filter");
      else
        result = 0;
      break;
  }
  return result;
}

void sub_1D541CB18(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)*MEMORY[0x1E0CBCA28];
  sub_1D53FAE18(v2, (void *)*MEMORY[0x1E0CBCA28], CFSTR("ImageStabilization"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if ((unint64_t)objc_msgSend_count(v4, v5, v6, v7, v8) < 2)
  {
    sub_1D53F63AC(a1);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53FAF90(v21, v3, CFSTR("ImageStabilization"));
  }
  else
  {
    v26 = 0;
    v12 = sub_1D53BD2F0(v4, (const char *)&v26, v9, v10, v11);
    v26 = 1;
    v16 = sub_1D53BD2F0(v4, (const char *)&v26, v13, v14, v15);
    if ((v12 & 0x42) != 0)
      v17 = 131;
    else
      v17 = 3;
    if ((v12 & 1) != 0)
      v18 = 7;
    else
      v18 = v17;
    if (v12)
      v19 = v18;
    else
      v19 = 131;
    if ((v16 & 1) != 0)
      v20 = v19;
    else
      v20 = 0;
    sub_1D53F63AC(a1);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v22, v20, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v21, v3, CFSTR("ImageStabilization"), v25);

  }
}

void sub_1D541CC58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1D541CC98(_BYTE *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  id v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v15 = 0;
  v16[0] = 0;
  *(_QWORD *)((char *)v16 + 5) = 0;
  if (sub_1D53F5F40((uint64_t)a1, (uint64_t)&v15, 20, a5, a3) == 20)
  {
    if (a7)
    {
      sub_1D53FA480(a1, CFSTR("IFD0"), word_1E99A3398, a3, a5, a6);
LABEL_9:
      sub_1D53FA480(a1, v12, word_1E99A3408, a3, a5, a6);
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 160))(a1);
      v13 = 1;
      goto LABEL_10;
    }
    if ((_DWORD)v15 == 4411201)
    {
      a3 += 6;
      sub_1D53FA480(a1, CFSTR("IFD0"), word_1E99A3398, a3, a5, a6);
      goto LABEL_9;
    }
    if (v15 == 0x205841544E4550)
    {
      a3 += 10;
      sub_1D53FA480(a1, CFSTR("IFD0"), word_1E99A3398, a3, a5, a6);
      goto LABEL_9;
    }
  }
  v13 = 0;
LABEL_10:

  return v13;
}

void sub_1D541CE28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D541CE40(_BYTE *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9;
  uint64_t v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v11 = 0;
  v12[0] = 0;
  *(_QWORD *)((char *)v12 + 5) = 0;
  if (sub_1D53F5F40((uint64_t)a1, (uint64_t)&v11, 20, a4, a3) == 20)
    sub_1D53FB8AC(a1, v9, a3, a4, a5);

  return 1;
}

void sub_1D541CF68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D541CF84(uint64_t a1)
{
  void *v2;
  void *v3;
  _BOOL4 v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  _BOOL4 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)*MEMORY[0x1E0CBCB10];
  v4 = sub_1D53FAE98(v2, CFSTR("{PictStyleSetting}"), (void *)*MEMORY[0x1E0CBCB10]);

  if (v4)
  {
    sub_1D53F63AC(a1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = sub_1D53FAF14(v5, CFSTR("{PictStyleSetting}"), v3);

    if (v6 < 0x100)
      return v6 + 1;
    else
      return 0xFFFFLL;
  }
  else
  {
    sub_1D53FDB60(a1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = sub_1D5297D80(v8, v3);

    if (v9)
    {
      sub_1D53FDB60(a1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = sub_1D5297AC0(v10, (const char *)v3, v11, v12, v13);

    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v7;
}

void sub_1D541D070(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D541D08C(uint64_t a1, int a2, unsigned int a3, __int128 *a4, uint64_t *a5)
{
  unsigned __int16 v6;
  char v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t result;
  int v20;
  int v21;
  __int128 v22;

  if (a2 <= 76705)
  {
    if (a2 <= 76639)
    {
      if (a2 != 76180 && a2 != 76450 && a2 != 76570)
        goto LABEL_57;
    }
    else
    {
      v7 = a2 - 96;
      if ((a2 - 76640) > 0x3D)
        goto LABEL_57;
      if (((1 << v7) & 0x140000005) == 0)
      {
        if (((1 << v7) & 0x3000000000000000) != 0)
          goto LABEL_25;
        goto LABEL_57;
      }
    }
    v8 = 65;
    v9 = 70;
    v10 = 135;
    v11 = 45;
    v12 = 50;
    v13 = 1150;
    v14 = 400;
    v15 = 575;
    v16 = 0x7E800000BE0;
    goto LABEL_26;
  }
  if (a2 <= 77049)
  {
    if (a2 <= 76831)
    {
      if (a2 != 76706)
      {
        v6 = 11294;
LABEL_22:
        if (a2 != (v6 | 0x10000))
          goto LABEL_57;
      }
    }
    else if (a2 != 76832 && a2 != 77010)
    {
      v6 = 11476;
      goto LABEL_22;
    }
LABEL_25:
    v8 = 65;
    v9 = 70;
    v10 = 135;
    v11 = 45;
    v12 = 50;
    v13 = 1150;
    v14 = 400;
    v15 = 575;
    v16 = 0xA2000000F20;
    goto LABEL_26;
  }
  if (a2 > 77419)
  {
    if (a2 == 77420)
    {
      v8 = 72;
      v9 = 78;
      v10 = 150;
      v11 = 50;
      v12 = 55;
      v13 = 1275;
      v14 = 440;
      v15 = 637;
      v16 = 0xB20000010C0;
LABEL_26:
      *a5 = v16;
      v18 = 0;
      switch(a3)
      {
        case 0u:
          goto LABEL_34;
        case 1u:
          break;
        case 2u:
          goto LABEL_42;
        case 3u:
          v14 = 0;
          v18 = -v13;
          goto LABEL_37;
        case 4u:
          v14 = 0;
LABEL_34:
          v18 = -v15;
          break;
        case 5u:
        case 0xBu:
          v18 = 0;
          v14 = 0;
          v12 = v9;
          v11 = v8;
          break;
        case 6u:
          v14 = 0;
          goto LABEL_42;
        case 7u:
          v14 = 0;
          v18 = v13;
LABEL_37:
          v11 = v10;
          break;
        case 8u:
          v18 = -v15;
          goto LABEL_40;
        case 9u:
          v18 = 0;
LABEL_40:
          v14 = -v14;
          break;
        case 0xAu:
          v14 = -v14;
LABEL_42:
          v18 = v15;
          break;
        default:
          return 0;
      }
      if (a2 == 76570)
      {
        if (a3 > 0xB)
          goto LABEL_53;
        v20 = 1 << a3;
        v21 = 2160;
      }
      else
      {
        if (a2 != 76672 && a2 != 76670)
          goto LABEL_51;
        if (a3 > 0xB)
          goto LABEL_53;
        v20 = 1 << a3;
        v21 = 2674;
      }
      if ((v20 & v21) != 0)
      {
LABEL_51:
        *(_QWORD *)&v22 = __PAIR64__(v14, v18);
        sub_1D5282DF0((_DWORD *)&v22 + 2, v12, v11);
        v17 = v22;
LABEL_52:
        *a4 = v17;
        return 1;
      }
LABEL_53:
      v18 = 0;
      v14 = 0;
      v12 = 0;
      v11 = 0;
      goto LABEL_51;
    }
    if (a2 == 77430)
    {
      v8 = 83;
      v9 = 90;
      v10 = 172;
      v11 = 57;
      v12 = 63;
      v13 = 1465;
      v14 = 504;
      v15 = 732;
      v16 = 0xCC000001340;
      goto LABEL_26;
    }
  }
  else
  {
    if ((a2 - 77170) < 2)
    {
      *a5 = 0xA2000000F20;
      if (a3 == 1)
      {
        v17 = xmmword_1D545C160;
      }
      else
      {
        if (a3)
          return 0;
        v17 = xmmword_1D545C170;
      }
      goto LABEL_52;
    }
    if (a2 == 77050)
    {
      v8 = 65;
      v9 = 70;
      v10 = 150;
      v12 = 55;
      v13 = 1320;
      v14 = 480;
      v15 = 660;
      v16 = 0xA2000000F20;
      v11 = 55;
      goto LABEL_26;
    }
  }
LABEL_57:
  result = 0;
  *a5 = 0xA2000000F20;
  return result;
}

void sub_1D541D448(uint64_t a1, unsigned int a2, unsigned int a3)
{
  char *v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  void *__p;
  char *v22;
  unint64_t v23;

  if (a3 | a2)
  {
    v3 = (char *)a1;
    v4 = 0;
    v5 = *(_DWORD *)(a1 + 196);
    if (v5 >> 1 == 38585)
      v6 = 0;
    else
      v6 = a3;
    if (v5 >> 1 == 38585)
      v7 = 0;
    else
      v7 = a2;
    __p = 0;
    v22 = 0;
    v23 = 0;
    v20 = 0;
    v8 = 100;
    do
    {
      v19 = 0uLL;
      a1 = sub_1D541D08C(a1, v5, (unsigned __int16)v4, &v19, &v20);
      if ((_DWORD)a1)
      {
        v9 = v22;
        if ((unint64_t)v22 >= v23)
        {
          v11 = (v22 - (_BYTE *)__p) >> 4;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 60)
            sub_1D5282B8C();
          v13 = v23 - (_QWORD)__p;
          if ((uint64_t)(v23 - (_QWORD)__p) >> 3 > v12)
            v12 = v13 >> 3;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
            v14 = 0xFFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
            a1 = (uint64_t)sub_1D5284334((uint64_t)&v23, v14);
          else
            a1 = 0;
          v15 = (char *)(a1 + 16 * v11);
          *(_OWORD *)v15 = v19;
          v17 = (char *)__p;
          v16 = v22;
          v18 = v15;
          if (v22 != __p)
          {
            do
            {
              *((_OWORD *)v18 - 1) = *((_OWORD *)v16 - 1);
              v18 -= 16;
              v16 -= 16;
            }
            while (v16 != v17);
            v16 = (char *)__p;
          }
          v10 = v15 + 16;
          __p = v18;
          v22 = v15 + 16;
          v23 = a1 + 16 * v14;
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_OWORD *)v22 = v19;
          v10 = v9 + 16;
        }
        v22 = v10;
        ++v4;
      }
      else
      {
        v8 = v4;
      }
    }
    while (v4 < v8);
    if (v8)
    {
      sub_1D53FDE6C((uint64_t)v3, &v20, 1);
      sub_1D53FDFE0(v3, v6, 0, (_DWORD)v6 != 0);
      sub_1D53FDE90(v3, v7, 0, (_DWORD)v7 != 0);
      sub_1D53FDE38(v3, (uint64_t)&__p, 1);
      sub_1D53F8CEC((uint64_t)v3, 0, 0, (void (*)(uint64_t, _QWORD))sub_1D541D670);
    }
    if (__p)
    {
      v22 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_1D541D648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFString *sub_1D541D670(__CFString *result, unsigned int a2)
{
  void *v3;
  BOOL v4;

  if (result)
  {
    v3 = __dynamic_cast(result, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A3920, 0);
    result = 0;
    if (v3)
      v4 = a2 > 0xB;
    else
      v4 = 1;
    if (!v4)
      return off_1E99A39B8[(__int16)a2];
  }
  return result;
}

void sub_1D541D6CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v6;
  size_t v7;
  void *v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  long double v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *__p;
  unsigned __int8 *v31;

  v6 = *(_DWORD *)(a4 + 4);
  if (v6 >= 0xC8)
    v7 = 200;
  else
    v7 = v6;
  if (v7 >= 0x21)
  {
    sub_1D53F63AC(a1);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53C3EE8(v12, (void *)*MEMORY[0x1E0CBD090], (void *)*MEMORY[0x1E0CBD0B8]);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    sub_1D52B36FC(&__p, v7);
    v14 = *(_DWORD *)(a4 + 8);
    v15 = bswap32(v14);
    if (a6)
      v16 = v15;
    else
      v16 = v14;
    v17 = sub_1D53F5F40(a1, (uint64_t)__p, v31 - (_BYTE *)__p, a5, v16);
    v18 = (unsigned __int8 *)__p;
    if (v17 == v31 - (_BYTE *)__p)
    {
      if (sub_1D53F4BF8(v13, CFSTR("*ist"), 0)
        || sub_1D53F4BF8(v13, CFSTR("GX-1S"), 0)
        || sub_1D53F4BF8(v13, CFSTR("GX-1L"), 0)
        || (sub_1D53F4BF8(v13, CFSTR("K100D"), 0) || sub_1D53F4BF8(v13, CFSTR("K110D"), 0))
        && (v18[20] == 255 || !v18[20] && !v18[21]))
      {
        v19 = 17;
      }
      else if ((unint64_t)(v31 - (_BYTE *)__p) >= 0x5A)
      {
        v19 = 26;
        if (v31 - (_BYTE *)__p == 90)
          v19 = 27;
      }
      else
      {
        v19 = 18;
      }
      v18 = (unsigned __int8 *)__p;
      v20 = *((char *)__p + v19);
      if (v20 < 2)
        goto LABEL_16;
      v21 = exp2(((double)v20 + -1.0) * 0.03125);
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v22, v23, v24, v25, (double)v21);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53FA1B8(a1, 1);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v27, v28, (uint64_t)v26, *MEMORY[0x1E0CBCC00], v29);

      v18 = (unsigned __int8 *)__p;
    }
    if (!v18)
    {
LABEL_17:

      return;
    }
LABEL_16:
    v31 = v18;
    operator delete(v18);
    goto LABEL_17;
  }
}

void sub_1D541D8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D541D934(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  id v13;

  v13 = a2;
  LOWORD(v9) = 0;
  v10 = *(unsigned __int16 *)(a4 + 8);
  v11 = bswap32(v10) >> 16;
  if (a6)
    LOWORD(v10) = v11;
  switch((__int16)v10)
  {
    case -4:
      sub_1D53F63AC(a1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v12, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCFA8], &unk_1E99CC0A8);

      LOWORD(v9) = 0;
      goto LABEL_9;
    case -3:
    case -1:
      goto LABEL_9;
    case -2:
      LOWORD(v9) = 32;
      goto LABEL_9;
    default:
      if (!(_WORD)v10)
        goto LABEL_9;
      if ((unsigned __int16)v10 <= 0x10u)
      {
        v9 = 1 << (v10 - 1);
LABEL_9:
        sub_1D541D448(a1, (unsigned __int16)v9, 0);
      }

      return;
  }
}

void sub_1D541DA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D541DA48(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  _BOOL4 v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned int v26;
  unsigned __int16 v27;
  unsigned __int8 v28;

  v10 = a2;
  if (*(_DWORD *)(a4 + 4) >= 6u)
  {
    v11 = *(_DWORD *)(a4 + 8);
    v12 = bswap32(v11);
    if (a6)
      v13 = v12;
    else
      v13 = v11;
    sub_1D53F63AC(a1);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (void *)*MEMORY[0x1E0CBCA28];
    v16 = (void *)*MEMORY[0x1E0CBCFA8];
    v17 = sub_1D53FAE98(v14, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCFA8]);

    if (!v17)
    {
      v28 = 0;
      v18 = (v13 + 3) << 31 >> 31;
      if (v18 != v13 + 3 || v18 < 0)
        goto LABEL_22;
      if (sub_1D53F5F40(a1, (uint64_t)&v28, 1, a5, v18 & 0x1FFFFFFFFLL) == 1)
      {
        if ((v28 & 0xF) != 0)
          v28 = 1;
        sub_1D53F63AC(a1);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v20, v28, v21, v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D52DFEFC(v19, v15, v16, v23);

      }
    }
    v27 = 0;
    v24 = (v13 + 4) << 31 >> 31;
    if (v24 == v13 + 4 && (v24 & 0x8000000000000000) == 0)
    {
      if (sub_1D53F5F40(a1, (uint64_t)&v27, 2, a5, v24 & 0x1FFFFFFFFLL) == 2)
      {
        v25 = v27;
        v26 = bswap32(v27) >> 16;
        if (a6)
          v25 = v26;
        v27 = v25;
        if (!v25)
          v25 = 2047;
      }
      else
      {
        v25 = 0;
      }
      sub_1D541D448(a1, v25, 0);
    }
  }
LABEL_22:

}

void sub_1D541DC04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D541DC38(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  char v16;
  char v17;

  v10 = a2;
  if (*(_DWORD *)(a4 + 4) >= 0xCu)
  {
    v11 = *(_DWORD *)(a4 + 8);
    v12 = bswap32(v11);
    if (a6)
      v11 = v12;
    if (v11 <= 0xFFFFFFF3)
    {
      v17 = 0;
      if (sub_1D53F5F40(a1, (uint64_t)&v17, 1, a5, v11 + 11) == 1)
      {
        v13 = 0;
        v14 = 0;
        v15 = 9;
        v16 = 8;
        switch(v17)
        {
          case 0:
            break;
          case 1:
            goto LABEL_30;
          case 2:
            goto LABEL_19;
          case 3:
            goto LABEL_22;
          case 4:
            v15 = 5;
            v16 = 4;
            goto LABEL_30;
          case 5:
            v16 = 5;
            v15 = 5;
            goto LABEL_30;
          case 6:
            v15 = 5;
            v16 = 6;
            goto LABEL_30;
          case 7:
            v16 = 0;
            goto LABEL_14;
          case 8:
            v16 = 1;
LABEL_14:
            v15 = 1;
            goto LABEL_30;
          case 9:
            v15 = 1;
            goto LABEL_24;
          case 10:
            v16 = 7;
            v15 = 7;
            goto LABEL_30;
          case 11:
            goto LABEL_27;
          case 12:
            v16 = 0;
            goto LABEL_27;
          case 13:
            v15 = 5;
LABEL_19:
            v16 = 9;
            goto LABEL_30;
          case 14:
            v15 = 5;
            v16 = 1;
            goto LABEL_30;
          case 15:
            v15 = 6;
LABEL_22:
            v16 = 10;
            goto LABEL_30;
          case 16:
            v15 = 6;
LABEL_24:
            v16 = 2;
            goto LABEL_30;
          case 17:
            v16 = 3;
            v15 = 3;
            goto LABEL_30;
          case 18:
            v16 = 4;
LABEL_27:
            v15 = 4;
            goto LABEL_30;
          case 19:
            v16 = 11;
            v15 = 11;
            goto LABEL_30;
          case 20:
            v16 = 6;
            v15 = 6;
LABEL_30:
            v13 = 1 << v16;
            v14 = (1 << v15) | (1 << v16);
            break;
          default:
            v13 = 0;
            v14 = 0;
            v17 = 0;
            break;
        }
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
      sub_1D541D448(a1, v13, v14);
    }
  }

}

void sub_1D541DDE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D541DDF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v6;
  unsigned int v7;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  v6 = *(_DWORD *)(a4 + 8);
  v7 = bswap32(v6);
  if (a6)
    v6 = v7;
  *(_DWORD *)(a1 + 196) = v6;
  if ((*(_WORD *)(a3 + 32) & 4) != 0)
  {
    sub_1D53F63AC(a1);
    v16 = (id)objc_claimAutoreleasedReturnValue();
    sub_1D53F6410(a3);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6390(a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v12, *(unsigned int *)(a1 + 196), v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v16, v10, v11, v15);

  }
}

void sub_1D541DEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1D541DEE8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v8;
  void *v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;

  sub_1D53F68C8(a1, a2, a3, a4, a5, a6);
  sub_1D53F63AC(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F6410(a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D52E1FDC(v8, v9, 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F6390(a3);
  v11 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D52EAE5C(v10, v11, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
    v20 = objc_msgSend_count(v15, v16, v17, v18, v19) != 0;
  else
    v20 = 0;
  v35 = 0;
  v21 = sub_1D53BD2F0(v15, (const char *)&v35, v17, v18, v19);
  sub_1D53F6390(a3);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v10, v23, (uint64_t)v22, v24, v25);

  v29 = !v20;
  if ((_DWORD)v21 == 0xFFFF)
    v29 = 1;
  if ((v29 & 1) == 0)
  {
    if ((int)v21 <= 8)
      v21 = dword_1D545C0D4[(int)v21];
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v26, v21, v27, v28);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6390(a3);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v10, v32, (uint64_t)v30, (uint64_t)v31, v33);

    sub_1D53F6390(a3);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F9628(a1, v34, v21);

  }
}

void sub_1D541E078(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D541E0B8()
{
  void *v0;

  JUMPOUT(0x1D541E0ACLL);
}

void sub_1D541E0C4()
{
  void *v0;
  void *v1;

  JUMPOUT(0x1D541E0B0);
}

void sub_1D541E0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v5 = *(unsigned __int16 *)(a4 + 8);
  sub_1D53F63AC(a1);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  sub_1D53F6410(a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v7, __rev16(v5), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D52DFEFC(v11, v6, (void *)*MEMORY[0x1E0CBCA48], v10);

}

void sub_1D541E164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1D541E188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v6;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD v27[2];
  unsigned int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a4 + 4) >= 5u)
    v6 = 5;
  else
    v6 = *(_DWORD *)(a4 + 4);
  if (v6 >= 3)
  {
    LODWORD(v10) = *(_DWORD *)(a4 + 8);
    v11 = bswap32(v10);
    v10 = a6 ? v11 : v10;
    v27[0] = 0;
    v27[1] = 0;
    v28 = 0;
    if (sub_1D53F5F40(a1, (uint64_t)v27, 20, a5, v10) == 20)
    {
      v12 = v27[0];
      v13 = bswap32(v27[0]);
      if (a6)
        v12 = v13;
      *(_DWORD *)(a1 + 196) = v12;
      sub_1D53F63AC(a1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v15, *(unsigned int *)(a1 + 196), v16, v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v14, CFSTR("{MakerPentax}"), CFSTR("PentaxModelID"), v18);

      if (v6 >= 5)
      {
        v22 = bswap32(v28);
        if (a6)
          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v19, (uint64_t)CFSTR("%u"), v20, v21, v22);
        else
          objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v19, (uint64_t)CFSTR("%u"), v20, v21, v28);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F63AC(a1);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6410(a3);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6390(a3);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D52DFEFC(v24, v25, v26, v23);

      }
    }
  }
}

void sub_1D541E32C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D541E368(uint64_t a1)
{
  sub_1D53FED24(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D541E38C(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE0uLL);
  sub_1D541E404((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1D5285658((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1D541E3F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D541E404(uint64_t a1, uint64_t *a2, void **a3, void **a4)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E99A3948;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D53FEEF0(a1 + 24, a2, *a3, *a4);
  *(_QWORD *)(a1 + 24) = off_1E99A3850;
  *(_DWORD *)(a1 + 220) = -1;
  return a1;
}

void sub_1D541E458(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D541E46C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A3948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D541E480(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A3948;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D541E4B4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

uint64_t sub_1D541E4C4(uint64_t a1, int a2, uint64_t *a3)
{
  _QWORD *v5;
  void **v6;
  unsigned int v7;
  unsigned int v8;
  double v9;
  double v10;
  unint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  double *v20;
  uint64_t v21;

  v5 = (_QWORD *)sub_1D544098C(a1, a2);
  *v5 = &off_1E99A3A28;
  v5[6] = 0;
  v6 = (void **)(v5 + 6);
  v5[7] = 0;
  v5[8] = 0;
  *(_DWORD *)(a1 + 12) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 16) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 20) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 24) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 28) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 32) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 36) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 40) = sub_1D52847F8(*a3);
  v7 = sub_1D52847F8(*a3);
  v8 = 0;
  do
  {
    v9 = sub_1D528494C(*a3);
    v10 = v9;
    v12 = *(double **)(a1 + 56);
    v11 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v12 >= v11)
    {
      v14 = (double *)*v6;
      v15 = ((char *)v12 - (_BYTE *)*v6) >> 3;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61)
        sub_1D5282B8C();
      v17 = v11 - (_QWORD)v14;
      if (v17 >> 2 > v16)
        v16 = v17 >> 2;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        v19 = (char *)sub_1D5282D28(a1 + 64, v18);
        v14 = *(double **)(a1 + 48);
        v12 = *(double **)(a1 + 56);
      }
      else
      {
        v19 = 0;
      }
      v20 = (double *)&v19[8 * v15];
      *v20 = v10;
      v13 = v20 + 1;
      while (v12 != v14)
      {
        v21 = *((_QWORD *)v12-- - 1);
        *((_QWORD *)v20-- - 1) = v21;
      }
      *(_QWORD *)(a1 + 48) = v20;
      *(_QWORD *)(a1 + 56) = v13;
      *(_QWORD *)(a1 + 64) = &v19[8 * v18];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *v12 = v9;
      v13 = v12 + 1;
    }
    *(_QWORD *)(a1 + 56) = v13;
    ++v8;
  }
  while (v8 <= v7);
  return a1;
}

void sub_1D541E668(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

id sub_1D541E694(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  double *v64;
  double *v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  RAWOpcodeMapPolynomial *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;

  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v7, *(unsigned int *)(a1 + 12), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v11, (uint64_t)v10, (uint64_t)CFSTR("Top"), v12);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v13, *(unsigned int *)(a1 + 16), v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v17, (uint64_t)v16, (uint64_t)CFSTR("Left"), v18);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v19, *(unsigned int *)(a1 + 20), v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v23, (uint64_t)v22, (uint64_t)CFSTR("Bottom"), v24);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v25, *(unsigned int *)(a1 + 24), v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v29, (uint64_t)v28, (uint64_t)CFSTR("Right"), v30);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v31, *(unsigned int *)(a1 + 28), v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v35, (uint64_t)v34, (uint64_t)CFSTR("Plane"), v36);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v37, *(unsigned int *)(a1 + 32), v38, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v41, (uint64_t)v40, (uint64_t)CFSTR("Planes"), v42);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v43, *(unsigned int *)(a1 + 36), v44, v45);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v47, (uint64_t)v46, (uint64_t)CFSTR("RowPitch"), v48);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v49, *(unsigned int *)(a1 + 40), v50, v51);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v53, (uint64_t)v52, (uint64_t)CFSTR("ColPitch"), v54);

  objc_msgSend_array(MEMORY[0x1E0C99DE8], v55, v56, v57, v58);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = *(double **)(a1 + 48);
  v65 = *(double **)(a1 + 56);
  while (v64 != v65)
  {
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v59, v60, v61, v62, *v64);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v63, v67, (uint64_t)v66, v68, v69);

    ++v64;
  }
  objc_msgSend_setObject_forKeyedSubscript_(v6, v59, (uint64_t)v63, (uint64_t)CFSTR("Coefficients"), v62);
  v70 = [RAWOpcodeMapPolynomial alloc];
  v74 = (void *)objc_msgSend_initWithArguments_(v70, v71, (uint64_t)v6, v72, v73);

  return v74;
}

void sub_1D541E8BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D541E910(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E99A3A28;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1D541E94C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E99A3A28;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D541E998()
{
  return 8;
}

void sub_1D541E9A0(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A3C48, 0);
    if (v11)
      sub_1D541EF7C(v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D541EA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D541EA44(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v9 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A3C48, 0);
    if (v9)
      sub_1D541F070((uint64_t)v9, v10, v11, a4, v12, a6);
  }

}

void sub_1D541EAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D541EACC(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v7;
  id v8;
  id v9;

  v9 = a2;
  v8 = a3;
  sub_1D541F474(a1, &v9, &v8, &v7);
  *a4 = v7;

}

void sub_1D541EB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1D541EB5C(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v57;
  unsigned int v58;
  unsigned int v59;
  __int128 v60;
  __int128 v61;
  char *v62[3];

  sub_1D53F642C((uint64_t)a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v7, (uint64_t)CFSTR("IFD0/%@"), v8, v9, *MEMORY[0x1E0CBD0C0]);
  v10 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v6, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  v19 = objc_msgSend_intValue(v14, v15, v16, v17, v18);
  if ((v19 - 9) >= 0xFFFFFFF8)
    v20 = v19;
  else
    v20 = 0;
  if (v14)
    v21 = v20;
  else
    v21 = v19;
  sub_1D53F642C((uint64_t)a1);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v23, (uint64_t)CFSTR("IFD0/Exif/Makernote/%@/%@"), v24, v25, CFSTR("SamsungThumbnail"), CFSTR("PreviewImageStart"));
  v26 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v22, v26, v27, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D53F642C((uint64_t)a1);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v32, (uint64_t)CFSTR("IFD0/Exif/Makernote/%@/%@"), v33, v34, CFSTR("SamsungThumbnail"), CFSTR("PreviewImageLength"));
  v35 = (char *)objc_claimAutoreleasedReturnValue();
  sub_1D529EA84(v31, v35, v36, v37, v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();

  memset(v62, 0, sizeof(v62));
  sub_1D53FD760(a1, a2, (uint64_t *)&v61);
  LODWORD(v57) = objc_msgSend_intValue(v30, v40, v41, v42, v43);
  v58 = objc_msgSend_intValue(v39, v44, v45, v46, v47);
  sub_1D5285A24(&v59, &v58);
  sub_1D53F4C74(a1, (int *)&v57, &v59, v21, &v60);
  sub_1D53FC9E0(a1, CFSTR("IFD1/SubIFD0"), &v57);
  if ((_QWORD)v61)
    sub_1D52B0A7C(v62, &v61);
  if ((_QWORD)v60)
    sub_1D52B0A7C(v62, &v60);
  if ((_QWORD)v57)
    sub_1D52B0A7C(v62, &v57);
  sub_1D53F51D8((uint64_t)v62, a2, a3);
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  *(_QWORD *)&v61 = v62;
  sub_1D5282E44((void ***)&v61);

}

void sub_1D541EE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void **a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;

  sub_1D5282EB4((uint64_t)&a14);
  sub_1D5282EB4((uint64_t)&a16);
  a16 = (void **)&a18;
  sub_1D5282E44(&a16);

  _Unwind_Resume(a1);
}

uint64_t sub_1D541EEF4(_BYTE *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10;

  v10 = a2;
  sub_1D53FA480(a1, v10, word_1E99A3A68, 0, a5 + a3, a6);
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 160))(a1);

  return 1;
}

void sub_1D541EF6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D541EF7C(_BYTE *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  id v21;

  v11 = a2;
  if (*(_DWORD *)(a4 + 4))
  {
    v12 = (void *)MEMORY[0x1E0CB3940];
    v21 = v11;
    sub_1D53F6390(a3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(v12, v14, (uint64_t)CFSTR("%@/%@"), v15, v16, v21, v13);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    v18 = *(_DWORD *)(a4 + 8);
    v19 = bswap32(v18);
    if ((_DWORD)a6)
      v20 = v19;
    else
      v20 = v18;
    sub_1D53FA480(a1, v17, word_1E99A3AF0, v20, a5, a6);

    v11 = v21;
  }

}

void sub_1D541F04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D541F070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v7;
  unsigned __int16 v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;

  if (*(_DWORD *)(a4 + 4) == 1)
  {
    v7 = bswap32(*(unsigned __int16 *)(a4 + 8)) >> 16;
    if (a6)
      v8 = v7;
    else
      v8 = *(_WORD *)(a4 + 8);
    sub_1D53F63AC(a1);
    v16 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v9, v8, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (void *)*MEMORY[0x1E0CBCA28];
    sub_1D52DFEFC(v16, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCA48], v12);

    sub_1D541F194(v14, v8);
    v17 = (id)objc_claimAutoreleasedReturnValue();
    if (v17)
    {
      sub_1D53F63AC(a1);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v15, v13, (void *)*MEMORY[0x1E0CBCA58], v17);

    }
  }
}

void sub_1D541F16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id sub_1D541F194(uint64_t a1, unsigned int a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  id v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  void *v55[2];
  uint64_t v56;
  void *__p[2];
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v64 = 0;
  v65 = 0;
  v66 = 0;
  sub_1D54343BC(CFSTR("samsung"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v3, (uint64_t)CFSTR("%u"), v4, v5, a2);
    v7 = (char *)objc_claimAutoreleasedReturnValue();
    sub_1D52EAE5C(v6, v7, v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    for (i = 0; ; i = v63 + 1)
    {
      v63 = i;
      if (i >= objc_msgSend_count(v11, v12, v13, v14, v15))
        break;
      sub_1D53BD380(v11, (const char *)&v63, v17, v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_count(v20, v21, v22, v23, v24) == 5)
      {
        __p[0] = 0;
        sub_1D53BC854(v20, (const char *)__p, v25, v26, v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        __p[0] = (void *)1;
        v32 = sub_1D53BD334(v20, (const char *)__p, v29, v30, v31);
        __p[0] = (void *)2;
        v36 = sub_1D53BD334(v20, (const char *)__p, v33, v34, v35);
        __p[0] = (void *)3;
        v40 = sub_1D53BD334(v20, (const char *)__p, v37, v38, v39);
        __p[0] = (void *)4;
        v44 = sub_1D53BD334(v20, (const char *)__p, v41, v42, v43);
        if (v28)
        {
          v45 = v44;
          v46 = objc_retainAutorelease(v28);
          v51 = (char *)objc_msgSend_UTF8String(v46, v47, v48, v49, v50);
          sub_1D52850A0(v55, v51);
          if (SHIBYTE(v56) < 0)
          {
            sub_1D5290130(__p, v55[0], (unint64_t)v55[1]);
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)v55;
            v58 = v56;
          }
          v59 = v32;
          v60 = v36;
          v61 = v40;
          v62 = v45;
          sub_1D5408F8C(&v64, (__int128 *)__p);
          if (SHIBYTE(v58) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v56) < 0)
            operator delete(v55[0]);
        }

      }
    }

  }
  v52 = v64;
  if (v65 == v64)
  {
    v53 = 0;
  }
  else
  {
    if (*(char *)(v64 + 23) < 0)
      v52 = *(_QWORD *)v64;
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v3, v52, v4, v5);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
  }

  __p[0] = &v64;
  sub_1D5409CB0((void ***)__p);
  return v53;
}

void sub_1D541F3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;

  a18 = &a30;
  sub_1D5409CB0((void ***)&a18);
  _Unwind_Resume(a1);
}

void sub_1D541F474(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE0uLL);
  sub_1D541F4EC(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1D5285658((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1D541F4D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D541F4EC(_QWORD *a1, uint64_t *a2, void **a3, void **a4)
{
  a1[2] = 0;
  *a1 = &unk_1E99A3C70;
  a1[1] = 0;
  sub_1D53FEEF0((uint64_t)(a1 + 3), a2, *a3, *a4);
  a1[3] = off_1E99A3B78;
  return a1;
}

void sub_1D541F538(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D541F54C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A3C70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D541F560(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A3C70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D541F594(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

void sub_1D541F5A4(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A3EB8, 0);
    if (v10)
      sub_1D5420938((uint64_t)v10, v11, a3, a4, v12, a6);
  }

}

void sub_1D541F620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D541F634(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E99A3EB8, 0);
    if (v11)
      sub_1D5420A0C((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D541F6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D541F6D4(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v7;
  id v8;
  id v9;

  v9 = a2;
  v8 = a3;
  sub_1D5420E24(a1, &v9, &v8, &v7);
  *a4 = v7;

}

void sub_1D541F748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1D541F764(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  void *v12;
  id v13;

  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53C3EE8(v2, (void *)*MEMORY[0x1E0CBCB50], CFSTR("LensModel"));
  v13 = (id)objc_claimAutoreleasedReturnValue();

  sub_1D53F63AC(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)*MEMORY[0x1E0CBCA28];
  sub_1D540B92C(v3, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCA48]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v10 = objc_msgSend_intValue(v5, v6, v7, v8, v9);
    sub_1D541F8F8(a1, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (sub_1D53F4BF8(v11, v13, 0))
    {
      sub_1D53F63AC(a1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53FAF90(v12, v4, (void *)*MEMORY[0x1E0CBCA58]);
    }
    else
    {
      sub_1D53F63AC(a1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v12, v4, (void *)*MEMORY[0x1E0CBCA58], v11);
    }

  }
  sub_1D53FC1FC(a1);

}

void sub_1D541F8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

id sub_1D541F8F8(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  id v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  void *v76;
  double v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  double v95;
  long double v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  double v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  double v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  double v112;
  unint64_t v113;
  void **v114;
  __int128 v115;
  double v116;
  __int128 v117;
  __int128 v118;
  long double v119;
  double v122;
  long double v123;
  double v124;
  long double v125;
  long double v126;
  double v127;
  uint64_t v128;
  void *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *j;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  double v154;
  double v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  double v160;
  void *v161[2];
  uint64_t v162;
  void *__p[2];
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;

  v168 = 0;
  v169 = 0;
  v170 = 0;
  if (a2 != 0xFFFF
    || (sub_1D53F63AC(a1),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        sub_1D53C3EE8(v4, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCA58]),
        v5 = (id)objc_claimAutoreleasedReturnValue(),
        v4,
        !v5))
  {
    sub_1D54343BC(CFSTR("sony"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v6, (uint64_t)CFSTR("%lld"), v7, v8, a2);
      v10 = (char *)objc_claimAutoreleasedReturnValue();
      sub_1D52EAE5C(v9, v10, v11, v12, v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      for (i = 0; ; i = v167 + 1)
      {
        v167 = i;
        if (i >= objc_msgSend_count(v14, v15, v16, v17, v18))
          break;
        sub_1D53BD380(v14, (const char *)&v167, v20, v21, v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend_count(v23, v24, v25, v26, v27) == 5)
        {
          __p[0] = 0;
          sub_1D53BC854(v23, (const char *)__p, v28, v29, v30);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          __p[0] = (void *)1;
          v35 = sub_1D53BD334(v23, (const char *)__p, v32, v33, v34);
          __p[0] = (void *)2;
          v39 = sub_1D53BD334(v23, (const char *)__p, v36, v37, v38);
          __p[0] = (void *)3;
          v43 = sub_1D53BD334(v23, (const char *)__p, v40, v41, v42);
          __p[0] = (void *)4;
          v47 = sub_1D53BD334(v23, (const char *)__p, v44, v45, v46);
          if (v31)
          {
            v48 = v47;
            v49 = objc_retainAutorelease(v31);
            v54 = (char *)objc_msgSend_UTF8String(v49, v50, v51, v52, v53);
            sub_1D52850A0(v161, v54);
            if (SHIBYTE(v162) < 0)
            {
              sub_1D5290130(__p, v161[0], (unint64_t)v161[1]);
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)v161;
              v164 = v162;
            }
            *(double *)&v165 = v35;
            *((double *)&v165 + 1) = v39;
            *(double *)&v166 = v43;
            *((double *)&v166 + 1) = v48;
            sub_1D5408F8C(&v168, (__int128 *)__p);
            if (SHIBYTE(v164) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v162) < 0)
              operator delete(v161[0]);
          }

        }
      }

    }
    v55 = v168;
    if (v169 - v168 == 56)
    {
      if (*(char *)(v168 + 23) < 0)
        v55 = *(_QWORD *)v168;
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, v55, v7, v8);
      v5 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_87;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v169 - v168) >> 3)) < 2)
    {
      v5 = 0;
LABEL_87:

      goto LABEL_88;
    }
    sub_1D53FDB60(a1);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F63AC(a1);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D5297C60(v57, (void *)*MEMORY[0x1E0CBCA28], 0);
    v58 = (void *)objc_claimAutoreleasedReturnValue();

    sub_1D529EA84(v56, (const char *)*MEMORY[0x1E0CBCBA0], v59, v60, v61);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D529EA84(v56, (const char *)*MEMORY[0x1E0CBCC00], v63, v64, v65);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52EAE5C(v56, (const char *)*MEMORY[0x1E0CBCA50], v67, v68, v69);
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    v76 = v70;
    v77 = 0.0;
    if (v70)
    {
      v79 = 0.0;
      if (objc_msgSend_count(v70, v71, v72, v73, v74) == 4)
      {
        __p[0] = 0;
        v79 = sub_1D53BD334(v76, (const char *)__p, v78, v73, v74);
        __p[0] = (void *)1;
        v77 = sub_1D53BD334(v76, (const char *)__p, v80, v81, v82);
        __p[0] = (void *)2;
        sub_1D53BD334(v76, (const char *)__p, v83, v84, v85);
        __p[0] = (void *)3;
        v75 = sub_1D53BD334(v76, (const char *)__p, v86, v87, v88);
      }
    }
    else
    {
      v79 = 0.0;
    }
    v89 = v168;
    if (*(char *)(v168 + 23) < 0)
      v89 = *(_QWORD *)v168;
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v71, v89, v73, v74, v75);
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    if (v62)
    {
      v158 = v58;
      v159 = v56;
      v156 = v66;
      v157 = v62;
      objc_msgSend_doubleValue(v62, v90, v91, v92, v93);
      v96 = v95;
      objc_msgSend_doubleValue(v66, v97, v98, v99, v100);
      v102 = exp2(v101 * 0.5);
      sub_1D52B261C(0x6DB6DB6DB6DB6DB7 * ((v169 - v168) >> 3));
      v107 = (void *)objc_claimAutoreleasedReturnValue();
      v109 = v168;
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v169 - v168) >> 3)) >= 2)
      {
        v154 = log(v96);
        v110 = 0;
        v111 = 0;
        v112 = 999999999.0;
        v113 = 1;
        v160 = v102;
        while (1)
        {
          v114 = (void **)(v109 + v110 + 56);
          if (*(char *)(v109 + v110 + 79) < 0)
          {
            v116 = v112;
            sub_1D5290130(__p, *v114, *(_QWORD *)(v109 + v110 + 64));
            v112 = v116;
          }
          else
          {
            v115 = *(_OWORD *)v114;
            v164 = *(_QWORD *)(v109 + v110 + 72);
            *(_OWORD *)__p = v115;
          }
          v117 = *(_OWORD *)(v109 + v110 + 96);
          v165 = *(_OWORD *)(v109 + v110 + 80);
          v166 = v117;
          v118 = v165;
          v119 = *((double *)&v117 + 1);
          v108 = *(double *)&v117;
          if (v79 > 0.0 && vabdd_f64(v79, *(double *)&v165) > 0.9)
            goto LABEL_66;
          if (v77 > 0.0 && vabdd_f64(v77, *((double *)&v165 + 1)) > 0.9)
            goto LABEL_66;
          if (v96 < *(double *)&v165 + -0.9 || v96 > *((double *)&v165 + 1) + 0.9)
            goto LABEL_66;
          if (v102 <= 0.0)
            break;
          if (v102 < *(double *)&v166 + -0.15 || v102 > *((double *)&v166 + 1) + 0.15)
            goto LABEL_66;
          if (*(double *)&v165 != *((double *)&v165 + 1) && *(double *)&v166 != *((double *)&v166 + 1))
          {
            v155 = v112;
            v122 = log(*(long double *)&v117);
            v123 = log(v119) - v122;
            v124 = log(*((long double *)&v118 + 1));
            v125 = log(*(long double *)&v118);
            v126 = v122 + v123 / (v124 - v125) * (v154 - v125);
            v102 = v160;
            v108 = exp(v126);
            v112 = v155;
          }
          v127 = vabdd_f64(v102, v108);
          v108 = v112 + 0.15;
          if (v127 <= v112 + 0.15)
          {
            if (v127 < v112 + -0.15)
            {
              if (v164 >= 0)
                objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v103, (uint64_t)__p, v105, v106);
              else
                objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v103, (uint64_t)__p[0], v105, v106);
              v128 = objc_claimAutoreleasedReturnValue();

              v111 = (void *)v128;
            }
            goto LABEL_61;
          }
LABEL_65:
          v102 = v160;
LABEL_66:
          if (SHIBYTE(v164) < 0)
          {
            v133 = v112;
            operator delete(__p[0]);
            v112 = v133;
          }
          ++v113;
          v109 = v168;
          v110 += 56;
          if (v113 >= 0x6DB6DB6DB6DB6DB7 * ((v169 - v168) >> 3))
            goto LABEL_71;
        }
        v127 = v112;
LABEL_61:
        if (v164 >= 0)
          objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v103, (uint64_t)__p, v105, v106);
        else
          objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v103, (uint64_t)__p[0], v105, v106);
        v129 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v107, v130, (uint64_t)v129, v131, v132);

        v112 = v127;
        goto LABEL_65;
      }
      v111 = 0;
LABEL_71:
      if (objc_msgSend_count(v107, v103, v104, v105, v106, v108))
      {
        if (v111)
          objc_msgSend_stringWithString_(MEMORY[0x1E0CB37A0], v134, (uint64_t)v111, v135, v136);
        else
          objc_msgSend_stringWithString_(MEMORY[0x1E0CB37A0], v134, (uint64_t)&stru_1E99A7480, v135, v136);
        v5 = (id)objc_claimAutoreleasedReturnValue();
        for (j = 0; ; j = (char *)__p[0] + 1)
        {
          __p[0] = j;
          if ((unint64_t)j >= objc_msgSend_count(v107, v137, v138, v139, v140))
            break;
          sub_1D53BC854(v107, (const char *)__p, v142, v143, v144);
          v145 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend_length(v5, v146, v147, v148, v149))
          {
            if (!v111 || (objc_msgSend_isEqualToString_(v145, v150, (uint64_t)v111, v151, v152) & 1) == 0)
              objc_msgSend_appendFormat_(v5, v150, (uint64_t)CFSTR(" or %@"), v151, v152, v145);
          }
          else
          {
            objc_msgSend_appendString_(v5, v150, (uint64_t)v145, v151, v152);
          }

        }
        v58 = v158;
        v56 = v159;
        v66 = v156;
        v62 = v157;
        goto LABEL_86;
      }

      v58 = v158;
      v66 = v156;
      v62 = v157;
    }
    v5 = v94;
LABEL_86:

    goto LABEL_87;
  }
LABEL_88:
  __p[0] = &v168;
  sub_1D5409CB0((void ***)__p);
  return v5;
}

void sub_1D5420088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;

  if (a33 < 0)
    operator delete(__p);

  __p = (void *)(v37 - 176);
  sub_1D5409CB0((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1D542023C(uint64_t a1)
{
  void *v2;
  void *v3;
  _BOOL4 v4;
  int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;

  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)*MEMORY[0x1E0CBCA28];
  v11 = v2;
  v4 = sub_1D53FAE98(v2, (void *)*MEMORY[0x1E0CBCA28], CFSTR("ImageStabilization"));

  if (v4)
  {
    sub_1D53F63AC(a1);
    v12 = (id)objc_claimAutoreleasedReturnValue();
    v5 = sub_1D53FAF14(v12, v3, CFSTR("ImageStabilization"));

    if (v5)
      v6 = 3;
    else
      v6 = 0;
    sub_1D53F63AC(a1);
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v7, v6, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v13, v3, CFSTR("ImageStabilization"), v10);

  }
}

void sub_1D5420334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

const __CFString *sub_1D542035C()
{
  return CFSTR("{MakerSony}");
}

BOOL sub_1D5420368(uint64_t a1)
{
  void *v1;
  void *v2;
  _BOOL8 v3;

  sub_1D53F63AC(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53C3EE8(v1, (void *)*MEMORY[0x1E0CBD090], (void *)*MEMORY[0x1E0CBD0B8]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  v3 = sub_1D5408EBC(v2, CFSTR("DSLR-A100"), 0) != 0;
  return v3;
}

void sub_1D54203E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1D54203FC(_BYTE *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v14 = 0;
  v15[0] = 0;
  *(_QWORD *)((char *)v15 + 5) = 0;
  v11 = sub_1D53F5F40((uint64_t)a1, (uint64_t)&v14, 20, a5, a3);
  if (v11 == 20)
  {
    if (v14 ^ 0x43534420594E4F53 | LOWORD(v15[0]) ^ 0x20)
      v12 = a3;
    else
      v12 = a3 + 12;
    sub_1D53FA480(a1, v10, word_1E99A3CC0, v12, a5, a6);
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 160))(a1);
  }

  return v11 == 20;
}

void sub_1D5420508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5420520(uint64_t a1)
{
  _BOOL4 v2;
  signed int v3;
  uint64_t v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  _BOOL4 v8;
  void *v9;
  int v10;
  __CFString *v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;

  sub_1D53F63AC(a1);
  v21 = (id)objc_claimAutoreleasedReturnValue();
  v2 = sub_1D53FAE98(v21, CFSTR("{PictStyleSetting}"), CFSTR("SceneMode"));

  if (v2)
  {
    sub_1D53F63AC(a1);
    v22 = (id)objc_claimAutoreleasedReturnValue();
    v3 = sub_1D53FAF14(v22, CFSTR("{PictStyleSetting}"), CFSTR("SceneMode"));

    sub_1D5420824(v4, v3);
    v23 = (id)objc_claimAutoreleasedReturnValue();
    sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("SceneMode"), v23, (float)v3, (float)v3);

  }
  sub_1D53F63AC(a1);
  v24 = (id)objc_claimAutoreleasedReturnValue();
  v5 = sub_1D53FAE98(v24, CFSTR("{PictStyleSetting}"), CFSTR("ColorMode"));

  if (v5)
  {
    sub_1D53F63AC(a1);
    v25 = (id)objc_claimAutoreleasedReturnValue();
    v6 = sub_1D53FAF14(v25, CFSTR("{PictStyleSetting}"), CFSTR("ColorMode"));

    sub_1D5420844(v7, v6);
    v26 = (id)objc_claimAutoreleasedReturnValue();
    sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("ColorMode"), v26, (float)v6, (float)v6);

    v8 = v6 == 6;
  }
  else
  {
    v8 = 0;
  }
  sub_1D53F63AC(a1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D5297C60(v9, CFSTR("{PictureStyle}"), 0);
  v27 = (id)objc_claimAutoreleasedReturnValue();

  if (v27)
  {
    if (!sub_1D5297D80(v27, CFSTR("Monochrome")))
      sub_1D53F9628(a1, CFSTR("Monochrome"), v8);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    if ((v10 & 0x80000000) == 0)
    {
      v11 = CFSTR("{PictureStyle}");
      sub_1D53F984C(a1, v10);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F96CC(a1, v11, CFSTR("PictStyleColorSpace"), v12, (float)v10, (float)v10);

    }
  }
  sub_1D53F63AC(a1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v13, v14, (uint64_t)CFSTR("{PictStyleSetting}"), v15, v16);

  sub_1D53F63AC(a1);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v17, v18, (uint64_t)CFSTR("{PictStyleNormalized}"), v19, v20);

}

void sub_1D54207B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

__CFString *sub_1D5420824(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x11)
    return 0;
  else
    return off_1E99A3F20[a2];
}

const __CFString *sub_1D5420844(uint64_t a1, int a2)
{
  const __CFString *result;

  result = 0;
  switch(a2)
  {
    case 0:
      result = CFSTR("Standard");
      break;
    case 1:
      result = CFSTR("Vivid");
      break;
    case 2:
      result = CFSTR("Portrait");
      break;
    case 3:
      result = CFSTR("Landscape");
      break;
    case 4:
      result = CFSTR("Sunset");
      break;
    case 5:
      result = CFSTR("Night Portrait");
      break;
    case 6:
      result = CFSTR("Black and White");
      break;
    case 7:
      result = CFSTR("Adobe RGB");
      break;
    case 8:
    case 9:
    case 10:
    case 11:
      return result;
    case 12:
LABEL_4:
      result = CFSTR("Neutral");
      break;
    default:
      switch(a2)
      {
        case 'd':
          goto LABEL_4;
        case 'e':
          result = CFSTR("Clear");
          break;
        case 'f':
          result = CFSTR("Deep");
          break;
        case 'g':
          result = CFSTR("Ligth");
          break;
        case 'h':
          result = CFSTR("Night view");
          break;
        case 'i':
          result = CFSTR("Autumn Leaves");
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

void sub_1D5420938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8;
  unsigned int v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  LODWORD(v8) = *(_DWORD *)(a4 + 8);
  sub_1D53F63AC(a1);
  v16 = (id)objc_claimAutoreleasedReturnValue();
  v9 = bswap32(v8);
  if (a6)
    v8 = v9;
  else
    v8 = v8;
  sub_1D53F6410(a3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F6390(a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v12, v8, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D52DFEFC(v16, v10, v11, v15);

}

void sub_1D54209E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1D5420A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  const __CFString *v17;
  char v18;
  const __CFString *v19;
  char v20;
  const __CFString *v21;
  char v22;
  const __CFString *v23;
  char v24;
  const __CFString *v25;
  const __CFString *v26;
  const __CFString *v27;
  unsigned int v28;
  unsigned int v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];

  v61[1] = *MEMORY[0x1E0C80C00];
  v61[0] = 0;
  v9 = *(_DWORD *)(a4 + 8);
  v10 = bswap32(v9);
  if (a6)
    v11 = v10;
  else
    v11 = v9;
  if (sub_1D53F5F40(a1, (uint64_t)v61, 8, a5, v11) != 8)
    return;
  v15 = v61[0] & 3;
  switch(v15)
  {
    case 3:
      v16 = 0;
      v17 = CFSTR("E ");
      goto LABEL_11;
    case 2:
      v16 = 0;
      v17 = CFSTR("FE ");
      goto LABEL_11;
    case 1:
      v16 = 0;
      v17 = CFSTR("DT ");
LABEL_11:
      v59 = (uint64_t)v17;
      goto LABEL_13;
  }
  v59 = 0;
  v16 = 1;
LABEL_13:
  v18 = v61[0];
  if ((v61[0] & 0x40) != 0)
    v19 = CFSTR("PZ ");
  else
    v19 = 0;
  v20 = HIBYTE(v61[0]);
  v21 = CFSTR(" ZA");
  if ((v61[0] & 0x400000000000000) == 0)
    v21 = 0;
  v57 = (uint64_t)v21;
  v58 = (uint64_t)v19;
  v60 = a3;
  if ((HIBYTE(v61[0]) & 3) == 2)
  {
    v22 = 0;
    v23 = CFSTR(" SAM");
  }
  else
  {
    if ((HIBYTE(v61[0]) & 3) != 1)
    {
      v56 = 0;
      v22 = 1;
      goto LABEL_24;
    }
    v22 = 0;
    v23 = CFSTR(" SSM");
  }
  v56 = (uint64_t)v23;
LABEL_24:
  v24 = v61[0];
  if (SLOBYTE(v61[0]) < 0)
    v25 = CFSTR(" OSS");
  else
    v25 = 0;
  v26 = CFSTR(" LE");
  if ((v61[0] & 0x20) == 0)
    v26 = 0;
  v55 = (uint64_t)v26;
  v27 = CFSTR(" II");
  if ((v61[0] & 8) == 0)
    v27 = 0;
  v53 = (uint64_t)v25;
  v54 = (uint64_t)v27;
  v28 = BYTE5(v61[0]);
  v29 = BYTE6(v61[0]);
  if (BYTE3(v61[0]) | BYTE4(v61[0]))
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v12, (uint64_t)CFSTR("%d-%dmm "), v13, v14, (BYTE2(v61[0]) & 0xF) + 100 * (BYTE1(v61[0]) & 0xF) + 10 * ((BYTE2(v61[0]) >> 4) + (BYTE1(v61[0]) >> 4)), (BYTE4(v61[0]) & 0xF) + 100 * (BYTE3(v61[0]) & 0xF) + 10 * ((BYTE4(v61[0]) >> 4) + (BYTE3(v61[0]) >> 4)));
  else
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v12, (uint64_t)CFSTR("%dmm "), v13, v14, (BYTE2(v61[0]) & 0xF) + 100 * (BYTE1(v61[0]) & 0xF) + 10 * ((BYTE2(v61[0]) >> 4) + (BYTE1(v61[0]) >> 4)));
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  if (BYTE6(v61[0]))
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v30, (uint64_t)CFSTR("F%.1f-%.1f"), v31, v32, (float)((float)(int)((v28 & 0xF) + 10 * (v28 >> 4)) / 10.0), (float)((float)(int)((v29 & 0xF) + 10 * (v29 >> 4)) / 10.0));
  else
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v30, (uint64_t)CFSTR("F%.1f"), v31, v32, (float)((float)(int)((v28 & 0xF) + 10 * (v28 >> 4)) / 10.0));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithString_(MEMORY[0x1E0CB37A0], v35, (uint64_t)CFSTR("Sony "), v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = v38;
  if ((v16 & 1) == 0)
    objc_msgSend_appendString_(v38, v39, v59, v40, v41);
  if ((v18 & 0x40) != 0)
    objc_msgSend_appendString_(v42, v39, v58, v40, v41);
  objc_msgSend_appendString_(v42, v39, (uint64_t)v33, v40, v41);
  objc_msgSend_appendString_(v42, v43, (uint64_t)v34, v44, v45);
  if ((v20 & 4) != 0)
    objc_msgSend_appendString_(v42, v46, v57, v48, v49);
  if ((v22 & 1) == 0)
    objc_msgSend_appendString_(v42, v46, v56, v48, v49);
  if (v24 < 0)
    objc_msgSend_appendString_(v42, v46, v53, v48, v49);
  if ((v24 & 0x20) != 0)
    objc_msgSend_appendString_(v42, v46, v55, v48, v49);
  if ((v24 & 8) != 0)
    objc_msgSend_appendString_(v42, v46, v54, v48, v49);
  if (objc_msgSend_length(v42, v46, v47, v48, v49))
  {
    sub_1D53F63AC(a1);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6410(v60);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6390(v60);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52DFEFC(v50, v51, v52, v42);

  }
}

void sub_1D5420DDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1D5420E24(uint64_t *a1@<X1>, void **a2@<X2>, void **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0xE0uLL);
  sub_1D5420E9C(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1D5285658((uint64_t)a4, v8 + 8, (uint64_t)(v8 + 3));
}

void sub_1D5420E88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5420E9C(_QWORD *a1, uint64_t *a2, void **a3, void **a4)
{
  a1[2] = 0;
  *a1 = &unk_1E99A3EE0;
  a1[1] = 0;
  sub_1D53FEEF0((uint64_t)(a1 + 3), a2, *a3, *a4);
  a1[3] = off_1E99A3DE8;
  return a1;
}

void sub_1D5420EE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5420EFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A3EE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5420F10(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A3EE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5420F44(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

uint64_t sub_1D5420F54(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __CFString *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF31E50[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  sub_1D542101C(v4, v5, v6);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return sub_1D5299640(a1, a2);
}

void sub_1D5421008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D542101C(uint64_t a1, void *a2, int a3)
{
  id v5;
  uint64_t *v6;
  std::string __p;

  v5 = a2;
  sub_1D531B8B8(v5, a3, &__p);
  v6 = (uint64_t *)sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((uint64_t *)(a1 + 32) != v6)
  {
    sub_1D539E6C4((uint64_t **)(a1 + 24), v6);
    sub_1D531BC50((uint64_t)(v6 + 4));
    operator delete(v6);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

}

void sub_1D54210B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id sub_1D54210E0(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  void *exception;
  _QWORD v167[2];
  void *__p;
  const char *v169;
  char v170;

  v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, (uint64_t)CFSTR("methodNumber"), v5, v6))
  {
    v10 = (void *)MEMORY[0x1E0CB37E8];
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
LABEL_5:
    objc_msgSend_numberWithInt_(v10, v12, v11, v13, v14);
    v18 = objc_claimAutoreleasedReturnValue();
LABEL_6:
    v19 = (void *)v18;
    goto LABEL_7;
  }
  if (objc_msgSend_isEqualToString_(v3, v7, (uint64_t)CFSTR("sushiMode"), v8, v9))
  {
    v10 = (void *)MEMORY[0x1E0CB37E8];
    v11 = sub_1D5297E34(a1);
    goto LABEL_5;
  }
  if ((objc_msgSend_isEqualToString_(v3, v15, (uint64_t)CFSTR("isV4Faux"), v16, v17) & 1) != 0)
  {
    v19 = (void *)MEMORY[0x1E0C9AAA0];
    goto LABEL_7;
  }
  if (objc_msgSend_isEqualToString_(v3, v21, (uint64_t)CFSTR("cameraMake"), v22, v23))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 216))(&__p, a1);
    sub_1D5288864((uint64_t)&__p, v27, v28, v29, v30);
    v31 = objc_claimAutoreleasedReturnValue();
    goto LABEL_14;
  }
  if (objc_msgSend_isEqualToString_(v3, v24, (uint64_t)CFSTR("cameraModel"), v25, v26))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 224))(&__p, a1);
    sub_1D5288864((uint64_t)&__p, v35, v36, v37, v38);
    v31 = objc_claimAutoreleasedReturnValue();
LABEL_14:
    v19 = (void *)v31;
    if (v170 < 0)
      operator delete(__p);
    goto LABEL_7;
  }
  if (objc_msgSend_isEqualToString_(v3, v32, (uint64_t)CFSTR("isDNGFile"), v33, v34))
  {
    v42 = (void *)MEMORY[0x1E0CB37E8];
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
LABEL_20:
    objc_msgSend_numberWithBool_(v42, v44, v43, v45, v46);
    v18 = objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  if (objc_msgSend_isEqualToString_(v3, v39, (uint64_t)CFSTR("isDNGMethod"), v40, v41))
  {
    v42 = (void *)MEMORY[0x1E0CB37E8];
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    goto LABEL_20;
  }
  if (objc_msgSend_isEqualToString_(v3, v47, (uint64_t)CFSTR("iso"), v48, v49))
  {
    v53 = (void *)MEMORY[0x1E0CB37E8];
    v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
LABEL_23:
    objc_msgSend_numberWithUnsignedInt_(v53, v55, v54, v56, v57);
    v18 = objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  if (objc_msgSend_isEqualToString_(v3, v50, (uint64_t)off_1EFF31F10[0], v51, v52))
  {
    v10 = (void *)MEMORY[0x1E0CB37E8];
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 816))(a1);
    goto LABEL_5;
  }
  if (objc_msgSend_isEqualToString_(v3, v58, (uint64_t)CFSTR("whiteLevelThresholdMultiplier"), v59, v60))
  {
    v64 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 848))(a1);
LABEL_28:
    objc_msgSend_numberWithDouble_(v64, v65, v66, v67, v68);
    v18 = objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  if (objc_msgSend_isEqualToString_(v3, v61, (uint64_t)off_1EFF31E48[0], v62, v63))
  {
    __p = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 560))(a1);
    sub_1D5432298((unsigned int *)&__p, v72, v73, v74, v75);
    v18 = objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  if (objc_msgSend_isEqualToString_(v3, v69, (uint64_t)off_1EFF31E70[0], v70, v71))
  {
    __p = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1);
    sub_1D5432298((unsigned int *)&__p, v79, v80, v81, v82);
    v18 = objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  if (objc_msgSend_isEqualToString_(v3, v76, (uint64_t)CFSTR("evenSensorSize"), v77, v78))
  {
    __p = (void *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1) & 0xFFFFFFFEFFFFFFFELL);
    sub_1D5432298((unsigned int *)&__p, v86, v87, v88, v89);
    v18 = objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  if (objc_msgSend_isEqualToString_(v3, v83, (uint64_t)off_1EFF31E78[0], v84, v85))
  {
    __p = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
    v169 = v93;
    sub_1D53318E0((unsigned int *)&__p, v93, v94, v95, v96);
    v18 = objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  if (objc_msgSend_isEqualToString_(v3, v90, (uint64_t)off_1EFF31E80[0], v91, v92))
  {
    __p = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 456))(a1);
    v169 = v100;
    sub_1D53318E0((unsigned int *)&__p, v100, v101, v102, v103);
    v18 = objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  if (objc_msgSend_isEqualToString_(v3, v97, (uint64_t)CFSTR("rawDataSize"), v98, v99))
  {
    v107 = (void *)MEMORY[0x1E0CB37E8];
    v108 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1);
    objc_msgSend_numberWithLongLong_(v107, v109, v108, v110, v111);
    v18 = objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  if (objc_msgSend_isEqualToString_(v3, v104, (uint64_t)CFSTR("longExposureNoiseReductionEnabled"), v105, v106))
  {
    v42 = (void *)MEMORY[0x1E0CB37E8];
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
    goto LABEL_20;
  }
  if (objc_msgSend_isEqualToString_(v3, v112, (uint64_t)CFSTR("focalLength"), v113, v114))
  {
    v118 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(v167, a1);
    v119 = v167[0];
    sub_1D52850A0(&__p, "IFD0:EXIF");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v119 + 304))(v119, &__p);
    objc_msgSend_numberWithDouble_(v118, v120, v121, v122, v123);
    v124 = objc_claimAutoreleasedReturnValue();
LABEL_49:
    v19 = (void *)v124;
    if (v170 < 0)
      operator delete(__p);
    sub_1D5282EB4((uint64_t)v167);
    goto LABEL_7;
  }
  if (objc_msgSend_isEqualToString_(v3, v115, (uint64_t)CFSTR("exifPixelXDimension"), v116, v117))
  {
    v128 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(v167, a1);
    v129 = v167[0];
    sub_1D52850A0(&__p, "IFD0:EXIF");
    v130 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v129 + 312))(v129, &__p);
    objc_msgSend_numberWithUnsignedInt_(v128, v131, v130, v132, v133);
    v124 = objc_claimAutoreleasedReturnValue();
    goto LABEL_49;
  }
  if (objc_msgSend_isEqualToString_(v3, v125, (uint64_t)CFSTR("exifPixelYDimension"), v126, v127))
  {
    v137 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(v167, a1);
    v138 = v167[0];
    sub_1D52850A0(&__p, "IFD0:EXIF");
    v139 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v138 + 320))(v138, &__p);
    objc_msgSend_numberWithUnsignedInt_(v137, v140, v139, v141, v142);
    v124 = objc_claimAutoreleasedReturnValue();
    goto LABEL_49;
  }
  if (objc_msgSend_isEqualToString_(v3, v134, (uint64_t)CFSTR("bitsPerSample"), v135, v136)
    || objc_msgSend_isEqualToString_(v3, v143, (uint64_t)CFSTR("sensorBitDepth"), v144, v145))
  {
    v53 = (void *)MEMORY[0x1E0CB37E8];
    v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 576))(a1);
    goto LABEL_23;
  }
  if (objc_msgSend_isEqualToString_(v3, v146, (uint64_t)CFSTR("subsampling"), v147, v148))
  {
    v53 = (void *)MEMORY[0x1E0CB37E8];
    v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 544))(a1);
    goto LABEL_23;
  }
  if (objc_msgSend_isEqualToString_(v3, v149, (uint64_t)off_1EFF31EE0[0], v150, v151))
  {
    v64 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
    goto LABEL_28;
  }
  if (objc_msgSend_isEqualToString_(v3, v152, (uint64_t)off_1EFF31EA8[0], v153, v154))
  {
    v158 = (void *)MEMORY[0x1E0CB37E8];
    v159 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 864))(a1);
    objc_msgSend_numberWithUnsignedShort_(v158, v160, v159, v161, v162);
    v18 = objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  if (objc_msgSend_isEqualToString_(v3, v155, (uint64_t)CFSTR("rn"), v156, v157))
  {
    v64 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 2664))(a1, 0, 0);
    goto LABEL_28;
  }
  if (objc_msgSend_isEqualToString_(v3, v163, (uint64_t)CFSTR("rnp"), v164, v165))
  {
    v64 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2672))(a1);
    goto LABEL_28;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&__p, a1);
  (*(void (**)(void *, id))(*(_QWORD *)__p + 32))(__p, v3);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D5282EB4((uint64_t)&__p);
  if (!v19)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
LABEL_7:

  return v19;
}

void sub_1D5421824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  sub_1D5282EB4((uint64_t)&__p);

  _Unwind_Resume(a1);
}

double sub_1D54218D4(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31DD0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54219D0;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54219BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D54219D0()
{
  return sub_1D5297F74();
}

id sub_1D54219D8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v5 = a2;
  v6 = a3;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v12, a1);
  sub_1D53BC8BC(v12, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return v7;
}

void sub_1D5421A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_1D5282EB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t (*sub_1D5421AAC(uint64_t a1))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t (*v5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31DD8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5421F50;
  v10[3] = &unk_1E99A3FB0;
  v10[4] = a1;
  v5 = sub_1D5421BA0(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5421B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t (*sub_1D5421BA0(uint64_t a1, void *a2, int a3, void *a4))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  id v7;
  id v8;
  uint64_t **v9;
  void **v10;
  uint64_t (**v11)(uint64_t, _QWORD, _QWORD, void *, void *);
  uint64_t (*v12)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t (**v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  uint64_t *v41;
  void (**v42)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void (*v43)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void *exception;
  _QWORD v46[4];
  id v47;
  std::string __p;
  uint64_t (*v49[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::string *p_p;
  std::__shared_weak_count *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  sub_1D531B8B8(v7, a3, &__p);
  v9 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v46[0] = MEMORY[0x1E0C809B0];
    v46[1] = 3221225472;
    v46[2] = sub_1D5432370;
    v46[3] = &unk_1E9979BC8;
    v13 = (uint64_t (**)(_QWORD))v8;
    v47 = v13;
    sub_1D53BC1FC(a1, v7, v46, &p_p);
    v18 = (__int128 *)p_p;
    if (p_p)
    {
      sub_1D53BE790((uint64_t)p_p, v14, v15, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      objc_msgSend_objectAtIndexedSubscript_(v19, v20, 0, v21, v22);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = objc_msgSend_intValue(v23, v24, v25, v26, v27);
      objc_msgSend_objectAtIndexedSubscript_(v19, v29, 1, v30, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = objc_msgSend_intValue(v32, v33, v34, v35, v36);

      v12 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v28 | (unint64_t)(v37 << 32));
    }
    else
    {
      v12 = 0;
    }
    v38 = v51;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v40 = __ldaxr(p_shared_owners);
      while (__stlxr(v40 - 1, p_shared_owners));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }

    if (!v18)
      v12 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v13[2](v13);
    p_p = &__p;
    v41 = sub_1D531BAD4(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v42 = (void (**)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD))(v41 + 7);
    v49[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1D54323EC;
    v49[1] = v12;
    if (v49 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v41 + 7))
    {
      v43 = *v42;
      if (*v42)
      {
        p_p = 0;
        v51 = 0;
        v43(2, v42, &p_p, 0, 0);
        v49[0](2, v49, v42, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))p_p)(2, &p_p, v49, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        v41[7] = (uint64_t)sub_1D54323EC;
        v41[8] = (uint64_t)v12;
        v49[0] = 0;
      }
    }
    sub_1D531BC8C(v49);
  }
  else
  {
    v11 = sub_1D54323A4((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    v12 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v12;
}

void sub_1D5421EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  __cxa_free_exception(v28);

  sub_1D5282EB4((uint64_t)&a25);
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D5421F50()
{
  return sub_1D5299674();
}

double sub_1D5421F58(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31DE0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5422054;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5422040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D5422054(uint64_t a1)
{
  return sub_1D532F310(*(_QWORD *)(a1 + 32));
}

BOOL sub_1D542205C(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31DE8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5422150;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542213C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5422150(uint64_t a1)
{
  return sub_1D536723C(*(_QWORD *)(a1 + 32));
}

void sub_1D5422158(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF31DF0[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542224C;
  v10[3] = &unk_1E9978FB8;
  v10[4] = a1;
  sub_1D531B308(v4, v5, v6, v10, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D5422238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D542224C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D532F0B8(*(_QWORD *)(a1 + 32), a2);
}

double sub_1D5422254(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31DF8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5422350;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542233C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D5422350()
{
  return sub_1D532E7E4();
}

void sub_1D5422358(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF31E00[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542244C;
  v10[3] = &unk_1E9978FB8;
  v10[4] = a1;
  sub_1D531B308(v4, v5, v6, v10, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D5422438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D542244C(uint64_t a1)
{
  return sub_1D5366108(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1D5422454(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31E08[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54228A4;
  v10[3] = &unk_1E99A3FD0;
  v10[4] = a1;
  v5 = sub_1D5422548(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5422534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5422548(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t **v9;
  void **v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t (**v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  void (**v28)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void (*v29)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void *exception;
  _QWORD v32[4];
  id v33;
  std::string __p;
  uint64_t (*v35[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::string *p_p;
  std::__shared_weak_count *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  sub_1D531B8B8(v7, a3, &__p);
  v9 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_1D543249C;
    v32[3] = &unk_1E9979B90;
    v13 = (uint64_t (**)(_QWORD))v8;
    v33 = v13;
    sub_1D53BC1FC(a1, v7, v32, &p_p);
    v18 = (__int128 *)p_p;
    if (p_p)
    {
      sub_1D53BE790((uint64_t)p_p, v14, v15, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v12 = objc_msgSend_longLongValue(v19, v20, v21, v22, v23);

    }
    else
    {
      v12 = 0;
    }
    v24 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    if (!v18)
      v12 = v13[2](v13);
    p_p = &__p;
    v27 = sub_1D531BAD4(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v28 = (void (**)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD))(v27 + 7);
    v35[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1D5432518;
    v35[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v12;
    if (v35 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v27 + 7))
    {
      v29 = *v28;
      if (*v28)
      {
        p_p = 0;
        v37 = 0;
        v29(2, v28, &p_p, 0, 0);
        v35[0](2, v35, v28, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))p_p)(2, &p_p, v35, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        *((_DWORD *)v27 + 16) = v12;
        v27[7] = (uint64_t)sub_1D5432518;
        v35[0] = 0;
      }
    }
    sub_1D531BC8C(v35);
  }
  else
  {
    v11 = (unsigned int *)sub_1D54324D0((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v12;
}

void sub_1D5422818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a25);
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D54228A4()
{
  return sub_1D5299844();
}

double sub_1D54228AC(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31E10[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54229A8;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5422994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D54229A8()
{
  return sub_1D53A25E8();
}

BOOL sub_1D54229B0(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31E18[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5422AA4;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5422A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5422AA4()
{
  return sub_1D532E140();
}

BOOL sub_1D5422AAC(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31E20[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5422BA0;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5422B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5422BA0()
{
  return 0;
}

double sub_1D5422BA8(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31E28[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5422CA4;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5422C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D5422CA4(uint64_t a1)
{
  return sub_1D53A25F4(*(_QWORD *)(a1 + 32));
}

uint64_t (*sub_1D5422CAC(uint64_t a1))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t (*v5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31E30[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54230F4;
  v10[3] = &unk_1E99A3FF0;
  v10[4] = a1;
  v5 = sub_1D5422DA0(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5422D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t (*sub_1D5422DA0(uint64_t a1, void *a2, int a3, void *a4))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  id v7;
  id v8;
  uint64_t **v9;
  void **v10;
  uint64_t (**v11)(uint64_t, _QWORD, _QWORD, _QWORD, void *);
  uint64_t (*v12)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t (**v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  void (**v28)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void (*v29)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void *exception;
  _QWORD v32[4];
  id v33;
  std::string __p;
  uint64_t (*v35[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::string *p_p;
  std::__shared_weak_count *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  sub_1D531B8B8(v7, a3, &__p);
  v9 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_1D54325D0;
    v32[3] = &unk_1E9979B90;
    v13 = (uint64_t (**)(_QWORD))v8;
    v33 = v13;
    sub_1D53BC1FC(a1, v7, v32, &p_p);
    v18 = (__int128 *)p_p;
    if (p_p)
    {
      sub_1D53BE790((uint64_t)p_p, v14, v15, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v12 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))objc_msgSend_longLongValue(v19, v20, v21, v22, v23);

    }
    else
    {
      v12 = 0;
    }
    v24 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    if (!v18)
      v12 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v13[2](v13);
    p_p = &__p;
    v27 = sub_1D531BAD4(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v28 = (void (**)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD))(v27 + 7);
    v35[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1D543264C;
    v35[1] = v12;
    if (v35 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v27 + 7))
    {
      v29 = *v28;
      if (*v28)
      {
        p_p = 0;
        v37 = 0;
        v29(2, v28, &p_p, 0, 0);
        v35[0](2, v35, v28, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))p_p)(2, &p_p, v35, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        v27[7] = (uint64_t)sub_1D543264C;
        v27[8] = (uint64_t)v12;
        v35[0] = 0;
      }
    }
    sub_1D531BC8C(v35);
  }
  else
  {
    v11 = sub_1D5432604((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    v12 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v12;
}

void sub_1D5423068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a25);
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D54230F4(uint64_t a1)
{
  return sub_1D5296A48(*(_QWORD *)(a1 + 32));
}

double sub_1D54230FC(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31E38[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54231F8;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54231E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D54231F8()
{
  return sub_1D53A3AA0();
}

double sub_1D5423200(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31E40[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54232FC;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54232E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D54232FC()
{
  return sub_1D53A3AA8();
}

uint64_t (*sub_1D5423304(uint64_t a1))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t (*v5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31E48[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54233F8;
  v10[3] = &unk_1E99A3FB0;
  v10[4] = a1;
  v5 = sub_1D5421BA0(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54233E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D54233F8()
{
  return sub_1D529966C();
}

uint64_t (*sub_1D5423400(uint64_t a1))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t (*v5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31E50[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54234F4;
  v10[3] = &unk_1E99A3FB0;
  v10[4] = a1;
  v5 = sub_1D5421BA0(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54234E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1D54234F4(uint64_t a1)
{
  return sub_1D5298F10(*(unsigned int **)(a1 + 32));
}

void sub_1D54234FC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF31E58[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5423AE4;
  v10[3] = &unk_1E99A4010;
  v10[4] = a1;
  sub_1D54235F0(v4, v5, v6, v10, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D54235DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D54235F0(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  id v9;
  void **v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t *v45;
  void *v46;
  void *exception;
  void (**v48)(_QWORD *__return_ptr);
  uint64_t **v49;
  id v50;
  __n128 __p;
  unint64_t v52;
  _QWORD v53[4];
  id v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *v57;
  _BYTE *v58;
  char v59;
  std::string v60;

  v9 = a2;
  v50 = a4;
  sub_1D531B8B8(v9, a3, &v60);
  v49 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&v60.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    LOBYTE(v57) = 0;
    v59 = 0;
    v53[0] = MEMORY[0x1E0C809B0];
    v53[1] = 3221225472;
    v53[2] = sub_1D54326FC;
    v53[3] = &unk_1E9979BC8;
    v48 = (void (**)(_QWORD *__return_ptr))v50;
    v54 = v48;
    sub_1D53BC1FC(a1, v9, v53, &v55);
    if (v55)
    {
      sub_1D53BE790(v55, v12, v13, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v21 = 0;
      __p = 0uLL;
      v52 = 0;
      while (v21 < objc_msgSend_count(v16, v17, v18, v19, v20, v48, v49))
      {
        objc_msgSend_objectAtIndexedSubscript_(v16, v22, v21, v23, v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v46 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v46, "RawCameraException");
          __cxa_throw(v46, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        v30 = objc_msgSend_longLongValue(v25, v26, v27, v28, v29);
        v31 = v30;
        v32 = __p.n128_u64[1];
        if (__p.n128_u64[1] >= v52)
        {
          v34 = (void *)__p.n128_u64[0];
          v35 = (uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) >> 2;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62)
            sub_1D5282B8C();
          v37 = v52 - __p.n128_u64[0];
          if ((uint64_t)(v52 - __p.n128_u64[0]) >> 1 > v36)
            v36 = v37 >> 1;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
            v38 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)sub_1D5282BA0((uint64_t)&v52, v38);
            v32 = __p.n128_u64[1];
            v34 = (void *)__p.n128_u64[0];
          }
          else
          {
            v39 = 0;
          }
          v40 = &v39[4 * v35];
          *(_DWORD *)v40 = v31;
          v33 = (unint64_t)(v40 + 4);
          while ((void *)v32 != v34)
          {
            v41 = *(_DWORD *)(v32 - 4);
            v32 -= 4;
            *((_DWORD *)v40 - 1) = v41;
            v40 -= 4;
          }
          __p.n128_u64[0] = (unint64_t)v40;
          __p.n128_u64[1] = v33;
          v52 = (unint64_t)&v39[4 * v38];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_DWORD *)__p.n128_u64[1] = v30;
          v33 = v32 + 4;
        }
        __p.n128_u64[1] = v33;

        ++v21;
      }
      sub_1D52EDC8C((uint64_t)&v57, (uint64_t)&__p);
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }

    }
    v42 = v56;
    if (v56)
    {
      p_shared_owners = (unint64_t *)&v56->__shared_owners_;
      do
        v44 = __ldaxr(p_shared_owners);
      while (__stlxr(v44 - 1, p_shared_owners));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }

    if (!v59)
    {
      ((void (**)(__n128 *__return_ptr))v48)[2](&__p);
      sub_1D52C3D50((uint64_t)&v57, &__p);
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }
      if (!v59)
        goto LABEL_48;
    }
    __p.n128_u64[0] = (unint64_t)&v60;
    v45 = sub_1D531BAD4(v49, (void **)&v60.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&__p);
    sub_1D543276C((uint64_t)(v45 + 7), (uint64_t)&v57);
    if (!v59)
LABEL_48:
      sub_1D5287C98();
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_1D5287D44(a5, v57, (uint64_t)v58, (v58 - (_BYTE *)v57) >> 2);
    if (v59 && v57)
    {
      v58 = v57;
      operator delete(v57);
    }
  }
  else
  {
    v11 = (const void **)sub_1D54328A4((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_1D5287D44(a5, *v11, (uint64_t)v11[1], ((_BYTE *)v11[1] - (_BYTE *)*v11) >> 2);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);

}

void sub_1D54239F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a21);
  if (a26 && __p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  if (*(char *)(v28 - 89) < 0)
    operator delete(*(void **)(v28 - 112));

  _Unwind_Resume(a1);
}

void sub_1D5423AE4(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

BOOL sub_1D5423AF0(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31E60[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5423BE4;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5423BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5423BE4()
{
  return 0;
}

BOOL sub_1D5423BEC(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31E68[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5423CE0;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5423CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5423CE0()
{
  return sub_1D5365D04();
}

uint64_t (*sub_1D5423CE8(uint64_t a1))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t (*v5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31E70[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5423DDC;
  v10[3] = &unk_1E99A3FB0;
  v10[4] = a1;
  v5 = sub_1D5421BA0(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5423DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5423DDC(uint64_t a1)
{
  return sub_1D5298860(*(_QWORD *)(a1 + 32));
}

uint64_t (*sub_1D5423DE4(uint64_t a1))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  uint64_t v2;
  __CFString *v3;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t (*v5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31E78[0];
  v4 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5424330;
  v10[3] = &unk_1E99A4030;
  v10[4] = a1;
  v5 = sub_1D5423EE0(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5423ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t (*sub_1D5423EE0(uint64_t a1, void *a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), void *a4))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  id v7;
  uint64_t **v8;
  void **v9;
  uint64_t (**v10)(uint64_t, _QWORD, _QWORD, void *, void *);
  uint64_t (*v11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  unint64_t v57;
  uint64_t (*v58)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t *v59;
  void (**v60)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void (*v61)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void *exception;
  void *v64;
  uint64_t (**v65)(void);
  uint64_t v66;
  id v67;
  _QWORD v68[4];
  uint64_t (**v69)(void);
  std::string __p;
  uint64_t (*v71[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::string *p_p;
  std::__shared_weak_count *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v67 = a4;
  sub_1D531B8B8(v7, (int)a3, &__p);
  v8 = (uint64_t **)(a1 + 24);
  v9 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v9)
  {
    v68[0] = MEMORY[0x1E0C809B0];
    v68[1] = 3221225472;
    v68[2] = sub_1D5432AA8;
    v68[3] = &unk_1E9979BC8;
    v65 = (uint64_t (**)(void))v67;
    v69 = v65;
    sub_1D53BC1FC(a1, v7, v68, &p_p);
    v17 = (__int128 *)p_p;
    if (p_p)
    {
      sub_1D53BE790((uint64_t)p_p, v12, v13, v14, v15);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      objc_msgSend_objectAtIndexedSubscript_(v18, v19, 0, v20, v21);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend_intValue(v64, v22, v23, v24, v25);
      objc_msgSend_objectAtIndexedSubscript_(v18, v27, 1, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v66 = objc_msgSend_intValue(v30, v31, v32, v33, v34);
      objc_msgSend_objectAtIndexedSubscript_(v18, v35, 2, v36, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = objc_msgSend_intValue(v38, v39, v40, v41, v42);
      objc_msgSend_objectAtIndexedSubscript_(v18, v44, 3, v45, v46);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = objc_msgSend_intValue(v47, v48, v49, v50, v51);

      v53 = v26 & 0xFFFFFF00;
      a3 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v43 | (unint64_t)(v52 << 32));
    }
    else
    {
      LOBYTE(v26) = 0;
      v53 = 0;
      v66 = v16;
    }
    v54 = v73;
    if (v73)
    {
      p_shared_owners = (unint64_t *)&v73->__shared_owners_;
      do
        v56 = __ldaxr(p_shared_owners);
      while (__stlxr(v56 - 1, p_shared_owners));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }

    if (!v17)
    {
      v57 = v65[2]();
      LOBYTE(v26) = v57;
      a3 = v58;
      v53 = v57 & 0xFFFFFF00;
      v66 = HIDWORD(v57);
    }
    p_p = &__p;
    v59 = sub_1D531BAD4(v8, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v60 = (void (**)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD))(v59 + 7);
    v11 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v53 & 0xFFFFFF00 | v26 | (unint64_t)(v66 << 32));
    v71[1] = v11;
    v71[2] = a3;
    v71[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1D5432B24;
    if (v71 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v59 + 7))
    {
      v61 = *v60;
      if (*v60)
      {
        p_p = 0;
        v73 = 0;
        v61(2, v60, &p_p, 0, 0);
        ((void (*)(int))v71[0])(2);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))p_p)(2, &p_p, v71, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        v59[8] = (uint64_t)v11;
        v59[9] = (uint64_t)a3;
        v59[7] = (uint64_t)sub_1D5432B24;
        v71[0] = 0;
      }
    }
    sub_1D531BC8C(v71);
  }
  else
  {
    v10 = sub_1D5432ADC((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))v9 + 7);
    if (!v10)
      sub_1D531BA80();
    v11 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*v10;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v11;
}

void sub_1D542426C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;

  __cxa_free_exception(v29);

  sub_1D5282EB4((uint64_t)&a28);
  if (a23 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D5424330(uint64_t a1)
{
  return sub_1D52989DC(*(_QWORD *)(a1 + 32));
}

uint64_t (*sub_1D5424338(uint64_t a1))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  uint64_t v2;
  __CFString *v3;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t (*v5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31E80[0];
  v4 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5424434;
  v10[3] = &unk_1E99A4030;
  v10[4] = a1;
  v5 = sub_1D5423EE0(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5424420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1D5424434(uint64_t a1)
{
  return sub_1D5298C00(*(_QWORD *)(a1 + 32));
}

uint64_t (*sub_1D542443C(uint64_t a1))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t (*v5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31E88[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5424530;
  v10[3] = &unk_1E99A3FB0;
  v10[4] = a1;
  v5 = sub_1D5421BA0(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542451C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5424530(uint64_t a1)
{
  return sub_1D52987CC(*(_QWORD *)(a1 + 32));
}

uint64_t (*sub_1D5424538(uint64_t a1))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  uint64_t v2;
  __CFString *v3;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t (*v5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31E90[0];
  v4 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5424634;
  v10[3] = &unk_1E99A4030;
  v10[4] = a1;
  v5 = sub_1D5423EE0(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5424620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5424634(uint64_t a1)
{
  return sub_1D5298938(*(_QWORD *)(a1 + 32));
}

uint64_t (*sub_1D542463C(uint64_t a1))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  uint64_t v2;
  __CFString *v3;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t (*v5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31E98[0];
  v4 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5424738;
  v10[3] = &unk_1E99A4030;
  v10[4] = a1;
  v5 = sub_1D5423EE0(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5424724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5424738(uint64_t a1)
{
  return sub_1D5298B5C(*(_QWORD *)(a1 + 32));
}

uint64_t (*sub_1D5424740(uint64_t a1))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  uint64_t v2;
  __CFString *v3;
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t (*v5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31EA0[0];
  v4 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542483C;
  v10[3] = &unk_1E99A4030;
  v10[4] = a1;
  v5 = sub_1D5423EE0(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5424828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D542483C()
{
  return sub_1D532E890();
}

uint64_t sub_1D5424844(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31EA8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5424938;
  v10[3] = &unk_1E998AE60;
  v10[4] = a1;
  v5 = sub_1D5330F8C(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5424924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5424938()
{
  return sub_1D532E240();
}

void sub_1D5424940(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v10);
  v4 = v10;
  v5 = off_1EFF31EB0[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  sub_1D5424A08(v4, v5, v6, &unk_1E99A4070, a2);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D54249F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D5424A08(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  id v9;
  void **v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t *v45;
  void *v46;
  void *exception;
  void (**v48)(_QWORD *__return_ptr);
  uint64_t **v49;
  id v50;
  __n128 __p;
  unint64_t v52;
  _QWORD v53[4];
  id v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *v57;
  _BYTE *v58;
  char v59;
  std::string v60;

  v9 = a2;
  v50 = a4;
  sub_1D531B8B8(v9, a3, &v60);
  v49 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&v60.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    LOBYTE(v57) = 0;
    v59 = 0;
    v53[0] = MEMORY[0x1E0C809B0];
    v53[1] = 3221225472;
    v53[2] = sub_1D5432BDC;
    v53[3] = &unk_1E9979BC8;
    v48 = (void (**)(_QWORD *__return_ptr))v50;
    v54 = v48;
    sub_1D53BC1FC(a1, v9, v53, &v55);
    if (v55)
    {
      sub_1D53BE790(v55, v12, v13, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v21 = 0;
      __p = 0uLL;
      v52 = 0;
      while (v21 < objc_msgSend_count(v16, v17, v18, v19, v20, v48, v49))
      {
        objc_msgSend_objectAtIndexedSubscript_(v16, v22, v21, v23, v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v46 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v46, "RawCameraException");
          __cxa_throw(v46, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        v30 = objc_msgSend_longLongValue(v25, v26, v27, v28, v29);
        v31 = v30;
        v32 = __p.n128_u64[1];
        if (__p.n128_u64[1] >= v52)
        {
          v34 = (void *)__p.n128_u64[0];
          v35 = (uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) >> 2;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62)
            sub_1D5282B8C();
          v37 = v52 - __p.n128_u64[0];
          if ((uint64_t)(v52 - __p.n128_u64[0]) >> 1 > v36)
            v36 = v37 >> 1;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
            v38 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)sub_1D5282BA0((uint64_t)&v52, v38);
            v32 = __p.n128_u64[1];
            v34 = (void *)__p.n128_u64[0];
          }
          else
          {
            v39 = 0;
          }
          v40 = &v39[4 * v35];
          *(_DWORD *)v40 = v31;
          v33 = (unint64_t)(v40 + 4);
          while ((void *)v32 != v34)
          {
            v41 = *(_DWORD *)(v32 - 4);
            v32 -= 4;
            *((_DWORD *)v40 - 1) = v41;
            v40 -= 4;
          }
          __p.n128_u64[0] = (unint64_t)v40;
          __p.n128_u64[1] = v33;
          v52 = (unint64_t)&v39[4 * v38];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_DWORD *)__p.n128_u64[1] = v30;
          v33 = v32 + 4;
        }
        __p.n128_u64[1] = v33;

        ++v21;
      }
      sub_1D52EDC8C((uint64_t)&v57, (uint64_t)&__p);
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }

    }
    v42 = v56;
    if (v56)
    {
      p_shared_owners = (unint64_t *)&v56->__shared_owners_;
      do
        v44 = __ldaxr(p_shared_owners);
      while (__stlxr(v44 - 1, p_shared_owners));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }

    if (!v59)
    {
      ((void (**)(__n128 *__return_ptr))v48)[2](&__p);
      sub_1D52C3D50((uint64_t)&v57, &__p);
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }
      if (!v59)
        goto LABEL_48;
    }
    __p.n128_u64[0] = (unint64_t)&v60;
    v45 = sub_1D531BAD4(v49, (void **)&v60.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&__p);
    sub_1D5432C4C((uint64_t)(v45 + 7), (uint64_t)&v57);
    if (!v59)
LABEL_48:
      sub_1D5287C98();
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_1D5287D44(a5, v57, (uint64_t)v58, (v58 - (_BYTE *)v57) >> 2);
    if (v59 && v57)
    {
      v58 = v57;
      operator delete(v57);
    }
  }
  else
  {
    v11 = (const void **)sub_1D5432D84((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_1D5287D44(a5, *v11, (uint64_t)v11[1], ((_BYTE *)v11[1] - (_BYTE *)*v11) >> 2);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);

}

void sub_1D5424E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a21);
  if (a26 && __p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  if (*(char *)(v28 - 89) < 0)
    operator delete(*(void **)(v28 - 112));

  _Unwind_Resume(a1);
}

void sub_1D5424EFC(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_1D5424F08(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31EB8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5425358;
  v10[3] = &unk_1E9978F98;
  v10[4] = a1;
  v5 = sub_1D5424FFC(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5424FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5424FFC(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t **v9;
  void **v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t (**v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  void (**v28)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void (*v29)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void *exception;
  _QWORD v32[4];
  id v33;
  std::string __p;
  uint64_t (*v35[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::string *p_p;
  std::__shared_weak_count *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  sub_1D531B8B8(v7, a3, &__p);
  v9 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_1D5432F88;
    v32[3] = &unk_1E9979B90;
    v13 = (uint64_t (**)(_QWORD))v8;
    v33 = v13;
    sub_1D53BC1FC(a1, v7, v32, &p_p);
    v18 = (__int128 *)p_p;
    if (p_p)
    {
      sub_1D53BE790((uint64_t)p_p, v14, v15, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v12 = objc_msgSend_longLongValue(v19, v20, v21, v22, v23);

    }
    else
    {
      v12 = 0;
    }
    v24 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    if (!v18)
      v12 = v13[2](v13);
    p_p = &__p;
    v27 = sub_1D531BAD4(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v28 = (void (**)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD))(v27 + 7);
    v35[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1D5433004;
    v35[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v12;
    if (v35 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v27 + 7))
    {
      v29 = *v28;
      if (*v28)
      {
        p_p = 0;
        v37 = 0;
        v29(2, v28, &p_p, 0, 0);
        v35[0](2, v35, v28, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))p_p)(2, &p_p, v35, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        *((_DWORD *)v27 + 16) = v12;
        v27[7] = (uint64_t)sub_1D5433004;
        v35[0] = 0;
      }
    }
    sub_1D531BC8C(v35);
  }
  else
  {
    v11 = (unsigned int *)sub_1D5432FBC((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v12;
}

void sub_1D54252CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a25);
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D5425358()
{
  return 0;
}

void sub_1D5425360(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF31EC0[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54258AC;
  v10[3] = &unk_1E99A4090;
  v10[4] = a1;
  sub_1D5425454(v4, v5, v6, v10, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D5425440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D5425454(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  char v5;
  id v10;
  id v11;
  uint64_t **v12;
  void **v13;
  void **v14;
  __int128 v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(int);
  void *v22;
  __int128 *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  void (**v28)(uint64_t, uint64_t *, std::string **, _QWORD, _QWORD);
  void (*v29)(uint64_t, uint64_t *, std::string **, _QWORD, _QWORD);
  void *exception;
  _QWORD v31[4];
  id v32;
  _DWORD v33[2];
  std::string __p;
  void (*v35)(int);
  __int128 v36;
  uint64_t v37;
  std::string *p_p;
  unint64_t v39;
  _BYTE v40[7];
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v11 = a4;
  sub_1D531B8B8(v10, a3, &__p);
  v12 = (uint64_t **)(a1 + 24);
  v13 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v13)
  {
    v31[0] = MEMORY[0x1E0C809B0];
    v31[1] = 3221225472;
    v31[2] = sub_1D54330BC;
    v31[3] = &unk_1E99A4D48;
    v16 = v11;
    v32 = v16;
    sub_1D53BC1FC(a1, v10, v31, &v35);
    v21 = v35;
    if (v35)
    {
      sub_1D53BE790((uint64_t)v35, v17, v18, v19, v20);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      sub_1D529A17C(v22, &p_p);
      v23 = (__int128 *)p_p;
      a3 = v39;
      v33[0] = *(_DWORD *)v40;
      *(_DWORD *)((char *)v33 + 3) = *(_DWORD *)&v40[3];
      v5 = v41;

    }
    else
    {
      v23 = 0;
    }
    v24 = (std::__shared_weak_count *)v36;
    if ((_QWORD)v36)
    {
      v25 = (unint64_t *)(v36 + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    if (!v21)
    {
      (*((void (**)(std::string **__return_ptr, id))v16 + 2))(&p_p, v16);
      v23 = (__int128 *)p_p;
      a3 = v39;
      v33[0] = *(_DWORD *)v40;
      *(_DWORD *)((char *)v33 + 3) = *(_DWORD *)&v40[3];
      v5 = v41;
    }
    p_p = &__p;
    v27 = sub_1D531BAD4(v12, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v35 = 0;
    *(_QWORD *)&v36 = 0;
    if (v5 < 0)
    {
      sub_1D5290130(&v36, v23, a3);
    }
    else
    {
      *(_QWORD *)&v36 = v23;
      *((_QWORD *)&v36 + 1) = a3;
      LODWORD(v37) = v33[0];
      *(_DWORD *)((char *)&v37 + 3) = *(_DWORD *)((char *)v33 + 3);
      HIBYTE(v37) = v5;
    }
    v28 = (void (**)(uint64_t, uint64_t *, std::string **, _QWORD, _QWORD))(v27 + 7);
    v35 = sub_1D5433174;
    if (&v35 != (void (**)(int))(v27 + 7))
    {
      v29 = *v28;
      if (*v28)
      {
        p_p = 0;
        v39 = 0;
        v29(2, v27 + 7, &p_p, 0, 0);
        v35(2);
        ((void (*)(uint64_t, std::string **, void (**)(int), _QWORD, _QWORD))p_p)(2, &p_p, &v35, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        *((_OWORD *)v27 + 4) = v36;
        v27[10] = v37;
        v37 = 0;
        v36 = 0uLL;
        v27[7] = (uint64_t)sub_1D5433174;
        v35 = 0;
      }
    }
    sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&v35);
    if (v5 < 0)
    {
      sub_1D5290130((_BYTE *)a5, v23, a3);
      operator delete(v23);
    }
    else
    {
      *(_QWORD *)a5 = v23;
      *(_QWORD *)(a5 + 8) = a3;
      *(_DWORD *)(a5 + 16) = v33[0];
      *(_DWORD *)(a5 + 19) = *(_DWORD *)((char *)v33 + 3);
      *(_BYTE *)(a5 + 23) = v5;
    }
  }
  else
  {
    v14 = (void **)sub_1D543312C((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))v13 + 7);
    if (!v14)
      sub_1D531BA80();
    if (*((char *)v14 + 23) < 0)
    {
      sub_1D5290130((_BYTE *)a5, *v14, (unint64_t)v14[1]);
    }
    else
    {
      v15 = *(_OWORD *)v14;
      *(_QWORD *)(a5 + 16) = v14[2];
      *(_OWORD *)a5 = v15;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

}

void sub_1D5425808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  __cxa_free_exception(v23);

  sub_1D5282EB4((uint64_t)&a21);
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D54258AC()
{
  sub_1D5294808();
}

void sub_1D54258B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF31EC8[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54259A8;
  v10[3] = &unk_1E99A4090;
  v10[4] = a1;
  sub_1D5425454(v4, v5, v6, v10, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D5425994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D54259A8()
{
  sub_1D5294808();
}

uint64_t sub_1D54259B0(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31ED0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5425AA4;
  v10[3] = &unk_1E99A3FD0;
  v10[4] = a1;
  v5 = sub_1D5422548(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5425A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5425AA4(uint64_t a1)
{
  return sub_1D53A1C34(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1D5425AAC(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31ED8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5425BA0;
  v10[3] = &unk_1E99A3FD0;
  v10[4] = a1;
  v5 = sub_1D5422548(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5425B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5425BA0(uint64_t a1)
{
  return sub_1D53A1BA0(*(_QWORD *)(a1 + 32));
}

double sub_1D5425BA8(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31EE0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5425CA4;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5425C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D5425CA4(uint64_t a1)
{
  return sub_1D532E2AC(*(double **)(a1 + 32));
}

uint64_t sub_1D5425CAC(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31EE8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5425DA0;
  v10[3] = &unk_1E998AE60;
  v10[4] = a1;
  v5 = sub_1D5330F8C(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5425D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5425DA0(uint64_t a1)
{
  return sub_1D532E248(*(_QWORD *)(a1 + 32));
}

double sub_1D5425DA8(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31EF0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5425EB4;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5 * (*(double (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
}

void sub_1D5425EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5425EB4(uint64_t a1)
{
  return sub_1D532E548(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1D5425EBC(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31EF8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5425FB0;
  v10[3] = &unk_1E998AE60;
  v10[4] = a1;
  v5 = sub_1D5330F8C(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5425F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5425FB0()
{
  return 0;
}

uint64_t sub_1D5425FB8(uint64_t a1, float *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  char v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  float v22;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 976))(a1);
  if ((_DWORD)result == 1)
  {
    v15 = 0;
    v16 = 0.0;
    do
      v16 = v16 + a2[v15++];
    while (v15 != 4);
    v17 = v16 * 0.25;
    *a2 = v17;
    a2[1] = v17;
    a2[2] = v17;
    v5 = 3;
    goto LABEL_43;
  }
  if ((_DWORD)result != 2)
    return result;
  v4 = 0;
  LODWORD(v5) = 0;
  v6 = 0.0;
  v7 = 32768.0;
  v8 = 0.0;
  do
  {
    v9 = 0;
    v10 = 1;
    do
    {
      if (v4 == v9)
        goto LABEL_12;
      v11 = a2[v9];
      if ((v10 & 1) != 0)
      {
        v10 = 0;
        v8 = a2[v9];
LABEL_11:
        v6 = a2[v9];
        goto LABEL_12;
      }
      v10 = 0;
      if (v11 < v8)
      {
        v8 = a2[v9];
        goto LABEL_12;
      }
      if (v11 > v6)
        goto LABEL_11;
LABEL_12:
      ++v9;
    }
    while (v9 != 4);
    v12 = v6 - v8;
    if ((float)(v6 - v8) < v7)
    {
      LODWORD(v5) = v4;
      v7 = v6 - v8;
    }
    ++v4;
  }
  while (v4 != 4);
  switch((_DWORD)v5)
  {
    case 3:
      v13 = 2;
      goto LABEL_25;
    case 2:
      v13 = 3;
LABEL_25:
      v14 = 1;
LABEL_26:
      v18 = a2;
      goto LABEL_28;
    case 1:
      v13 = 3;
      v14 = 2;
      goto LABEL_26;
  }
  v18 = a2 + 1;
  v13 = 3;
  v14 = 2;
LABEL_28:
  v17 = a2[v13];
  v19 = a2[v14];
  if (*v18 <= v19)
    v20 = *v18;
  else
    v20 = a2[v14];
  if (*v18 > v19)
    v19 = *v18;
  if (v20 > v17)
    v17 = v20;
  if (v19 <= v17)
    v17 = v19;
  v21 = v17 - v12;
  v22 = v12 + v17;
  if (v21 > (float)(int)v5 || v22 < (float)(int)v5)
  {
    v5 = (int)v5;
LABEL_43:
    a2[v5] = v17;
  }
  return result;
}

uint64_t sub_1D5426134(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31F00[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5426228;
  v10[3] = &unk_1E9978F98;
  v10[4] = a1;
  v5 = sub_1D5357828(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5426214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5426228()
{
  return sub_1D532E888();
}

uint64_t sub_1D5426230(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31F08[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5426324;
  v10[3] = &unk_1E9978F98;
  v10[4] = a1;
  v5 = sub_1D5357828(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5426310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5426324()
{
  return sub_1D532E880();
}

uint64_t sub_1D542632C(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31F10[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542677C;
  v10[3] = &unk_1E9978F98;
  v10[4] = a1;
  v5 = sub_1D5426420(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542640C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5426420(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t **v9;
  void **v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t (**v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  void (**v28)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void (*v29)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void *exception;
  _QWORD v32[4];
  id v33;
  std::string __p;
  uint64_t (*v35[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::string *p_p;
  std::__shared_weak_count *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  sub_1D531B8B8(v7, a3, &__p);
  v9 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_1D5433280;
    v32[3] = &unk_1E9979B90;
    v13 = (uint64_t (**)(_QWORD))v8;
    v33 = v13;
    sub_1D53BC1FC(a1, v7, v32, &p_p);
    v18 = (__int128 *)p_p;
    if (p_p)
    {
      sub_1D53BE790((uint64_t)p_p, v14, v15, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v12 = objc_msgSend_longLongValue(v19, v20, v21, v22, v23);

    }
    else
    {
      v12 = 0;
    }
    v24 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    if (!v18)
      v12 = v13[2](v13);
    p_p = &__p;
    v27 = sub_1D531BAD4(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v28 = (void (**)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD))(v27 + 7);
    v35[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1D54332FC;
    v35[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v12;
    if (v35 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v27 + 7))
    {
      v29 = *v28;
      if (*v28)
      {
        p_p = 0;
        v37 = 0;
        v29(2, v28, &p_p, 0, 0);
        v35[0](2, v35, v28, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))p_p)(2, &p_p, v35, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        *((_DWORD *)v27 + 16) = v12;
        v27[7] = (uint64_t)sub_1D54332FC;
        v35[0] = 0;
      }
    }
    sub_1D531BC8C(v35);
  }
  else
  {
    v11 = (unsigned int *)sub_1D54332B4((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v12;
}

void sub_1D54266F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a25);
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D542677C()
{
  return sub_1D532E150();
}

double sub_1D5426784(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31F18[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5426880;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542686C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D5426880(uint64_t a1)
{
  return sub_1D53A219C(*(_QWORD *)(a1 + 32));
}

double sub_1D5426888(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31F20[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5426984;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5426970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D5426984(uint64_t a1)
{
  return sub_1D53A24C4(*(_QWORD *)(a1 + 32));
}

double sub_1D542698C(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31F28[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5426A98;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5 + (*(double (**)(uint64_t))(*(_QWORD *)a1 + 936))(a1);
}

void sub_1D5426A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D5426A98(uint64_t a1)
{
  sub_1D532E69C(*(_QWORD *)(a1 + 32));
}

BOOL sub_1D5426AA0(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31F30[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5426B94;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5426B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1D5426B94(uint64_t a1)
{
  return sub_1D53A2A50(*(_QWORD *)(a1 + 32));
}

BOOL sub_1D5426B9C(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31F38[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5426C90;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5426C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1D5426C90(uint64_t a1)
{
  return sub_1D53A29D8(*(_QWORD *)(a1 + 32));
}

double sub_1D5426C98(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31F40[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5426D94;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5426D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D5426D94(uint64_t a1)
{
  return sub_1D53A1FA8(*(_QWORD *)(a1 + 32));
}

double sub_1D5426D9C(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31F48[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5426E98;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5426E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D5426E98()
{
  return sub_1D533036C();
}

double sub_1D5426EA0(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31F50[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5426F9C;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5426F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D5426F9C()
{
  return sub_1D53A398C();
}

void sub_1D5426FA4(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[5];
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = off_1EFF31F58[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1D54270AC;
  v8[3] = &unk_1E99853B8;
  v8[4] = a1;
  sub_1D534D428(v2, v3, v4, v8);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1D5427098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D54270AC(uint64_t a1)
{
  return sub_1D53A37EC(*(_QWORD *)(a1 + 32));
}

double sub_1D54270B4(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31F60[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54271B0;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542719C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D54271B0()
{
  return sub_1D53A37F8();
}

void sub_1D54271B8(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[5];
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = off_1EFF31F68[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1D54272CC;
  v8[3] = &unk_1E99853B8;
  v8[4] = a1;
  sub_1D534D428(v2, v3, v4, v8);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1D54272B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D54272CC()
{
  return sub_1D53A3804();
}

uint64_t sub_1D54272D4(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31F70[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54273C8;
  v10[3] = &unk_1E9978F98;
  v10[4] = a1;
  v5 = sub_1D5357828(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54273B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D54273C8()
{
  return sub_1D532E878();
}

_QWORD *sub_1D54273D0@<X0>(uint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v4;
  int v5;
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  BOOL v9;
  uint64_t **v10;
  BOOL v11;
  BOOL v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t **v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *result;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;

  v4 = a1 + 38;
  v5 = ((uint64_t (*)(uint64_t **))(*a1)[15])(a1);
  v6 = a1[39];
  if (!v6)
    goto LABEL_11;
  v7 = a1 + 39;
  do
  {
    v8 = *((_DWORD *)v6 + 8);
    v9 = v8 < v5;
    if (v8 >= v5)
      v10 = (uint64_t **)v6;
    else
      v10 = (uint64_t **)(v6 + 1);
    if (!v9)
      v7 = (uint64_t **)v6;
    v6 = *v10;
  }
  while (*v10);
  if (v7 == a1 + 39 || v5 < *((_DWORD *)v7 + 8))
  {
LABEL_11:
    v33 = 0uLL;
    ((void (*)(__int128 *__return_ptr, uint64_t **))(*a1)[9])(&v32, a1);
    v11 = sub_1D53BC954(v32, (uint64_t)&v33);
    v12 = v11;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (!*((_QWORD *)&v32 + 1))
      goto LABEL_15;
    v14 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (!v12)
      {
LABEL_16:
        sub_1D5353384(&v32);
        v16 = v32;
        v32 = 0uLL;
        v17 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
        v33 = v16;
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
        if (*((_QWORD *)&v32 + 1))
        {
          v21 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }
    }
    else
    {
LABEL_15:
      if (!v11)
        goto LABEL_16;
    }
    v31 = ((uint64_t (*)(uint64_t **))(*a1)[15])(a1);
    *(_QWORD *)&v32 = &v31;
    v23 = sub_1D54333B4(v4, &v31, (uint64_t)&unk_1D544A5C4, (_DWORD **)&v32);
    sub_1D52908C8(v23 + 5, (uint64_t *)&v33);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  LODWORD(v33) = ((uint64_t (*)(uint64_t **))(*a1)[15])(a1);
  result = (_QWORD *)sub_1D5427630((uint64_t)v4, (int *)&v33);
  v28 = result[1];
  *a2 = *result;
  a2[1] = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  return result;
}

void sub_1D5427604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5427630(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  void *exception;

  v4 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 8;
  v3 = v4;
  if (!v4)
    goto LABEL_12;
  v5 = *a2;
  v6 = v2;
  do
  {
    v7 = *(_DWORD *)(v3 + 32);
    v8 = v7 < v5;
    if (v7 >= v5)
      v9 = (uint64_t *)v3;
    else
      v9 = (uint64_t *)(v3 + 8);
    if (!v8)
      v6 = v3;
    v3 = *v9;
  }
  while (*v9);
  if (v6 == v2 || v5 < *(_DWORD *)(v6 + 32))
  {
LABEL_12:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return v6 + 40;
}

void sub_1D54276BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D54276D0@<X0>(uint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v4;
  int v5;
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  BOOL v9;
  uint64_t **v10;
  BOOL v11;
  BOOL v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  void *exception;
  int v28;
  int *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v4 = a1 + 41;
  v5 = ((uint64_t (*)(uint64_t **))(*a1)[15])(a1);
  v6 = a1[42];
  if (!v6)
    goto LABEL_11;
  v7 = a1 + 42;
  do
  {
    v8 = *((_DWORD *)v6 + 8);
    v9 = v8 < v5;
    if (v8 >= v5)
      v10 = (uint64_t **)v6;
    else
      v10 = (uint64_t **)(v6 + 1);
    if (!v9)
      v7 = (uint64_t **)v6;
    v6 = *v10;
  }
  while (*v10);
  if (v7 == a1 + 42 || v5 < *((_DWORD *)v7 + 8))
  {
LABEL_11:
    v31 = 0;
    v32 = 0;
    ((void (*)(int **__return_ptr, uint64_t **))(*a1)[9])(&v29, a1);
    v11 = sub_1D53BDB64((uint64_t)v29, (uint64_t)&v31);
    v12 = v11;
    v13 = v30;
    if (!v30)
      goto LABEL_15;
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (!v12)
        goto LABEL_16;
    }
    else
    {
LABEL_15:
      if (!v11)
      {
LABEL_16:
        v16 = v32;
        v31 = 0;
        v32 = 0;
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
    }
    v28 = ((uint64_t (*)(uint64_t **))(*a1)[15])(a1);
    v29 = &v28;
    v19 = sub_1D54333B4(v4, &v28, (uint64_t)&unk_1D544A5C4, &v29);
    sub_1D52908C8(v19 + 5, &v31);
    v20 = v32;
    if (v32)
    {
      v21 = (unint64_t *)&v32->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  LODWORD(v31) = ((uint64_t (*)(uint64_t **))(*a1)[15])(a1);
  if (!*(_QWORD *)sub_1D5427630((uint64_t)v4, (int *)&v31))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  LODWORD(v31) = ((uint64_t (*)(uint64_t **))(*a1)[15])(a1);
  result = (_QWORD *)sub_1D5427630((uint64_t)v4, (int *)&v31);
  v24 = result[1];
  *a2 = *result;
  a2[1] = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  return result;
}

void sub_1D5427914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_1D5282EB4((uint64_t)va);
  sub_1D5282EB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D542794C@<X0>(uint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v4;
  int v5;
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  BOOL v9;
  uint64_t **v10;
  BOOL v11;
  BOOL v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t **v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *result;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  void *exception;
  int v28;
  int *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v4 = a1 + 44;
  v5 = ((uint64_t (*)(uint64_t **))(*a1)[15])(a1);
  v6 = a1[45];
  if (!v6)
    goto LABEL_11;
  v7 = a1 + 45;
  do
  {
    v8 = *((_DWORD *)v6 + 8);
    v9 = v8 < v5;
    if (v8 >= v5)
      v10 = (uint64_t **)v6;
    else
      v10 = (uint64_t **)(v6 + 1);
    if (!v9)
      v7 = (uint64_t **)v6;
    v6 = *v10;
  }
  while (*v10);
  if (v7 == a1 + 45 || v5 < *((_DWORD *)v7 + 8))
  {
LABEL_11:
    v31 = 0;
    v32 = 0;
    ((void (*)(int **__return_ptr, uint64_t **))(*a1)[9])(&v29, a1);
    v11 = sub_1D53BD3E8((uint64_t)v29, (uint64_t)&v31);
    v12 = v11;
    v13 = v30;
    if (!v30)
      goto LABEL_15;
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (!v12)
        goto LABEL_16;
    }
    else
    {
LABEL_15:
      if (!v11)
      {
LABEL_16:
        v16 = v32;
        v31 = 0;
        v32 = 0;
        if (v16)
        {
          v17 = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
    }
    v28 = ((uint64_t (*)(uint64_t **))(*a1)[15])(a1);
    v29 = &v28;
    v19 = sub_1D54333B4(v4, &v28, (uint64_t)&unk_1D544A5C4, &v29);
    sub_1D52908C8(v19 + 5, &v31);
    v20 = v32;
    if (v32)
    {
      v21 = (unint64_t *)&v32->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  LODWORD(v31) = ((uint64_t (*)(uint64_t **))(*a1)[15])(a1);
  if (!*(_QWORD *)sub_1D5427630((uint64_t)v4, (int *)&v31))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  LODWORD(v31) = ((uint64_t (*)(uint64_t **))(*a1)[15])(a1);
  result = (_QWORD *)sub_1D5427630((uint64_t)v4, (int *)&v31);
  v24 = result[1];
  *a2 = *result;
  a2[1] = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  return result;
}

void sub_1D5427B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_1D5282EB4((uint64_t)va);
  sub_1D5282EB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL sub_1D5427BC8(uint64_t a1)
{
  _BOOL8 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD v7[5];
  uint64_t v8;
  std::__shared_weak_count *v9;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v8);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D5427C9C;
  v7[3] = &unk_1E997DB20;
  v7[4] = a1;
  v2 = sub_1D532B128(v8, off_1EFF31F78[0], 0, v7);
  v3 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void sub_1D5427C88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5427C9C()
{
  return sub_1D52970B0();
}

BOOL sub_1D5427CA4(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31F80[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5427D98;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5427D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5427D98()
{
  return sub_1D52970C0();
}

BOOL sub_1D5427DA0(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31F88[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5427E94;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5427E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5427E94()
{
  return sub_1D52970C8();
}

BOOL sub_1D5427E9C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _BOOL8 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v9[5];
  uint64_t v10;
  std::__shared_weak_count *v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v10);
  v2 = v10;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1D5427F80;
  v9[3] = &unk_1E997DB20;
  v9[4] = a1;
  v4 = sub_1D532B128(v2, CFSTR("honorLensCompensationSuggestions"), v3, v9);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D5427F6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5427F80()
{
  return 0;
}

float sub_1D5427F88(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  float v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31F98[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54283E4;
  v10[3] = &unk_1E99A40B0;
  v10[4] = a1;
  v5 = sub_1D5428084(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5428070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

float sub_1D5428084(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t **v9;
  void **v10;
  float *v11;
  float v12;
  float (**v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t *v29;
  void (**v30)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void (*v31)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void *exception;
  _QWORD v34[4];
  id v35;
  std::string __p;
  uint64_t (*v37[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::string *p_p;
  std::__shared_weak_count *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  sub_1D531B8B8(v7, a3, &__p);
  v9 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v34[0] = MEMORY[0x1E0C809B0];
    v34[1] = 3221225472;
    v34[2] = sub_1D5433498;
    v34[3] = &unk_1E9979B90;
    v13 = (float (**)(_QWORD))v8;
    v35 = v13;
    sub_1D53BC1FC(a1, v7, v34, &p_p);
    v18 = (__int128 *)p_p;
    if (p_p)
    {
      sub_1D53BE790((uint64_t)p_p, v14, v15, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      objc_msgSend_doubleValue(v19, v20, v21, v22, v23);
      v25 = v24;

      v12 = v25;
    }
    else
    {
      v12 = 0.0;
    }
    v26 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }

    if (!v18)
      v12 = v13[2](v13);
    p_p = &__p;
    v29 = sub_1D531BAD4(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v30 = (void (**)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD))(v29 + 7);
    v37[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1D5433510;
    v37[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))LODWORD(v12);
    if (v37 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v29 + 7))
    {
      v31 = *v30;
      if (*v30)
      {
        p_p = 0;
        v39 = 0;
        v31(2, v30, &p_p, 0, 0);
        v37[0](2, v37, v30, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))p_p)(2, &p_p, v37, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        *((float *)v29 + 16) = v12;
        v29[7] = (uint64_t)sub_1D5433510;
        v37[0] = 0;
      }
    }
    sub_1D531BC8C(v37);
  }
  else
  {
    v11 = (float *)sub_1D54334C8((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v12;
}

void sub_1D5428358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a25);
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

float sub_1D54283E4(uint64_t a1)
{
  return sub_1D529E4F4(*(_QWORD *)(a1 + 32));
}

void sub_1D54283EC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF31F90[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54284E0;
  v10[3] = &unk_1E9978FB8;
  v10[4] = a1;
  sub_1D531B308(v4, v5, v6, v10, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D54284CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D54284E0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D532F2E0(a1);
}

void sub_1D54284E8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF31FA0[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5428ACC;
  v10[3] = &unk_1E99A40D0;
  v10[4] = a1;
  sub_1D54285DC(v4, v5, v6, v10, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D54285C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D54285DC(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  id v9;
  void **v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  __int16 v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int16 v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t *v45;
  void *v46;
  void *exception;
  void (**v48)(_QWORD *__return_ptr);
  uint64_t **v49;
  id v50;
  __n128 __p;
  unint64_t v52;
  _QWORD v53[4];
  id v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *v57;
  _BYTE *v58;
  char v59;
  std::string v60;

  v9 = a2;
  v50 = a4;
  sub_1D531B8B8(v9, a3, &v60);
  v49 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&v60.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    LOBYTE(v57) = 0;
    v59 = 0;
    v53[0] = MEMORY[0x1E0C809B0];
    v53[1] = 3221225472;
    v53[2] = sub_1D54335C8;
    v53[3] = &unk_1E9979BC8;
    v48 = (void (**)(_QWORD *__return_ptr))v50;
    v54 = v48;
    sub_1D53BC1FC(a1, v9, v53, &v55);
    if (v55)
    {
      sub_1D53BE790(v55, v12, v13, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v21 = 0;
      __p = 0uLL;
      v52 = 0;
      while (v21 < objc_msgSend_count(v16, v17, v18, v19, v20, v48, v49))
      {
        objc_msgSend_objectAtIndexedSubscript_(v16, v22, v21, v23, v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v46 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v46, "RawCameraException");
          __cxa_throw(v46, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        v30 = objc_msgSend_longLongValue(v25, v26, v27, v28, v29);
        v31 = v30;
        v32 = __p.n128_u64[1];
        if (__p.n128_u64[1] >= v52)
        {
          v34 = (void *)__p.n128_u64[0];
          v35 = __p.n128_u64[1] - __p.n128_u64[0];
          if ((uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) <= -3)
            sub_1D5282B8C();
          v36 = v35 >> 1;
          if (v52 - __p.n128_u64[0] <= (v35 >> 1) + 1)
            v37 = v36 + 1;
          else
            v37 = v52 - __p.n128_u64[0];
          if (v52 - __p.n128_u64[0] >= 0x7FFFFFFFFFFFFFFELL)
            v38 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v38 = v37;
          if (v38)
          {
            v39 = (char *)sub_1D52854A0((uint64_t)&v52, v38);
            v32 = __p.n128_u64[1];
            v34 = (void *)__p.n128_u64[0];
          }
          else
          {
            v39 = 0;
          }
          v40 = &v39[2 * v36];
          *(_WORD *)v40 = v31;
          v33 = (unint64_t)(v40 + 2);
          while ((void *)v32 != v34)
          {
            v41 = *(_WORD *)(v32 - 2);
            v32 -= 2;
            *((_WORD *)v40 - 1) = v41;
            v40 -= 2;
          }
          __p.n128_u64[0] = (unint64_t)v40;
          __p.n128_u64[1] = v33;
          v52 = (unint64_t)&v39[2 * v38];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_WORD *)__p.n128_u64[1] = v30;
          v33 = v32 + 2;
        }
        __p.n128_u64[1] = v33;

        ++v21;
      }
      sub_1D5433638((uint64_t)&v57, (uint64_t)&__p);
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }

    }
    v42 = v56;
    if (v56)
    {
      p_shared_owners = (unint64_t *)&v56->__shared_owners_;
      do
        v44 = __ldaxr(p_shared_owners);
      while (__stlxr(v44 - 1, p_shared_owners));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }

    if (!v59)
    {
      ((void (**)(__n128 *__return_ptr))v48)[2](&__p);
      sub_1D52C3D50((uint64_t)&v57, &__p);
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }
      if (!v59)
        goto LABEL_49;
    }
    __p.n128_u64[0] = (unint64_t)&v60;
    v45 = sub_1D531BAD4(v49, (void **)&v60.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&__p);
    sub_1D54336AC((uint64_t)(v45 + 7), (uint64_t)&v57);
    if (!v59)
LABEL_49:
      sub_1D5287C98();
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_1D5287CCC(a5, v57, (uint64_t)v58, (v58 - (_BYTE *)v57) >> 1);
    if (v59 && v57)
    {
      v58 = v57;
      operator delete(v57);
    }
  }
  else
  {
    v11 = (const void **)sub_1D54337E4((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_1D5287CCC(a5, *v11, (uint64_t)v11[1], ((_BYTE *)v11[1] - (_BYTE *)*v11) >> 1);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);

}

void sub_1D54289D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a21);
  if (a26 && __p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  if (*(char *)(v28 - 89) < 0)
    operator delete(*(void **)(v28 - 112));

  _Unwind_Resume(a1);
}

void sub_1D5428ACC(uint64_t a1@<X0>, _WORD **a2@<X8>)
{
  sub_1D529A1F0(*(_QWORD *)(a1 + 32), a2);
}

uint64_t sub_1D5428AD4(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31FA8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5428BC8;
  v10[3] = &unk_1E998AE60;
  v10[4] = a1;
  v5 = sub_1D5330F8C(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5428BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5428BC8(uint64_t a1)
{
  return sub_1D529A27C(*(_QWORD *)(a1 + 32));
}

double sub_1D5428BD0(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31FB0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5428CCC;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5428CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D5428CCC(uint64_t a1)
{
  return sub_1D529A308(*(_QWORD *)(a1 + 32));
}

void sub_1D5428CD4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF31FB8[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5428DC8;
  v10[3] = &unk_1E99A40D0;
  v10[4] = a1;
  sub_1D54285DC(v4, v5, v6, v10, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D5428DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D5428DC8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1D529A39C(*(_QWORD *)(a1 + 32), a2);
}

BOOL sub_1D5428DD0(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31FE0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5428EC4;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5428EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5428EC4(uint64_t a1)
{
  return sub_1D529A428(*(_QWORD *)(a1 + 32));
}

void sub_1D5428ECC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF31FE8[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54294D0;
  v10[3] = &unk_1E99A40F0;
  v10[4] = a1;
  sub_1D5428FC0(v4, v5, v6, v10, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D5428FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D5428FC0(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  id v8;
  uint64_t **v9;
  void **v10;
  uint64_t (**v11)(uint64_t, _QWORD, _QWORD, void *, void *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t *v45;
  void *v46;
  void *exception;
  void (**v48)(_QWORD *__return_ptr);
  _QWORD *v49;
  id v50;
  std::string *v51;
  void *v52;
  void *v53;
  void *__p;
  char *v55;
  char *v56;
  _QWORD v57[4];
  id v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  char v61[8];
  void *v62;
  void *v63;
  char v64;
  std::string v65;

  v49 = a5;
  v8 = a2;
  v50 = a4;
  sub_1D531B8B8(v8, a3, &v65);
  v9 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&v65.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v61[0] = 0;
    v64 = 0;
    v57[0] = MEMORY[0x1E0C809B0];
    v57[1] = 3221225472;
    v57[2] = sub_1D54339E8;
    v57[3] = &unk_1E9979BC8;
    v48 = (void (**)(_QWORD *__return_ptr))v50;
    v58 = v48;
    sub_1D53BC1FC(a1, v8, v57, &v59);
    if (v59)
    {
      sub_1D53BE790(v59, v12, v13, v14, v15);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v21 = 0;
      __p = 0;
      v55 = 0;
      v56 = 0;
      while (v21 < objc_msgSend_count(v16, v17, v18, v19, v20, v48, v49))
      {
        objc_msgSend_objectAtIndexedSubscript_(v16, v22, v21, v23, v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v46 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v46, "RawCameraException");
          __cxa_throw(v46, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        objc_msgSend_doubleValue(v25, v26, v27, v28, v29);
        v31 = v30;
        v32 = v55;
        if (v55 >= v56)
        {
          v34 = (char *)__p;
          v35 = (v55 - (_BYTE *)__p) >> 3;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 61)
            sub_1D5282B8C();
          v37 = v56 - (_BYTE *)__p;
          if ((v56 - (_BYTE *)__p) >> 2 > v36)
            v36 = v37 >> 2;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            v39 = (char *)sub_1D5282D28((uint64_t)&v56, v38);
            v34 = (char *)__p;
            v32 = v55;
          }
          else
          {
            v39 = 0;
          }
          v40 = &v39[8 * v35];
          *(_QWORD *)v40 = v31;
          v33 = v40 + 8;
          while (v32 != v34)
          {
            v41 = *((_QWORD *)v32 - 1);
            v32 -= 8;
            *((_QWORD *)v40 - 1) = v41;
            v40 -= 8;
          }
          __p = v40;
          v55 = v33;
          v56 = &v39[8 * v38];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_QWORD *)v55 = v30;
          v33 = v32 + 8;
        }
        v55 = v33;

        ++v21;
      }
      sub_1D5338F80(&v51, 3, 3, &__p);
      sub_1D5433A58((uint64_t)v61, (uint64_t)&v51);
      if (v52)
      {
        v53 = v52;
        operator delete(v52);
      }
      if (__p)
      {
        v55 = (char *)__p;
        operator delete(__p);
      }

    }
    v42 = v60;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v44 = __ldaxr(p_shared_owners);
      while (__stlxr(v44 - 1, p_shared_owners));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }

    if (!v64)
    {
      ((void (**)(std::string **__return_ptr))v48)[2](&v51);
      sub_1D5433A58((uint64_t)v61, (uint64_t)&v51);
      if (v52)
      {
        v53 = v52;
        operator delete(v52);
      }
      if (!v64)
        goto LABEL_50;
    }
    v51 = &v65;
    v45 = sub_1D531BAD4(v9, (void **)&v65.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&v51);
    sub_1D5433A9C((void (**)(int))v45 + 7, (uint64_t)v61);
    if (!v64)
LABEL_50:
      sub_1D5287C98();
    sub_1D5338BF8(v49, (uint64_t)v61);
    if (v64 && v62)
    {
      v63 = v62;
      operator delete(v62);
    }
  }
  else
  {
    v11 = sub_1D5433BC0((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    sub_1D5338BF8(v49, (uint64_t)v11);
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);

}

void sub_1D54293C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;

  __cxa_free_exception(v32);

  sub_1D5282EB4((uint64_t)&a24);
  if (a30 && __p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  if (*(char *)(v33 - 105) < 0)
    operator delete(*(void **)(v33 - 128));

  _Unwind_Resume(a1);
}

void sub_1D54294D0(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1D529A4B4(*(_QWORD *)(a1 + 32), a2);
}

void sub_1D54294D8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF31FF0[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54295CC;
  v10[3] = &unk_1E99A40F0;
  v10[4] = a1;
  sub_1D5428FC0(v4, v5, v6, v10, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D54295B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D54295CC(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1D529A540(*(_QWORD *)(a1 + 32), a2);
}

void sub_1D54295D4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF31FF8[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54296C8;
  v10[3] = &unk_1E99A40F0;
  v10[4] = a1;
  sub_1D5428FC0(v4, v5, v6, v10, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D54296B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D54296C8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1D529A5CC(*(_QWORD *)(a1 + 32), a2);
}

void sub_1D54296D0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF32000[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54297C4;
  v10[3] = &unk_1E99A40F0;
  v10[4] = a1;
  sub_1D5428FC0(v4, v5, v6, v10, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D54297B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D54297C4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1D529A658(*(_QWORD *)(a1 + 32), a2);
}

void sub_1D54297CC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF32008[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54298C0;
  v10[3] = &unk_1E99A40F0;
  v10[4] = a1;
  sub_1D5428FC0(v4, v5, v6, v10, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D54298AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D54298C0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1D529A6E4(*(_QWORD *)(a1 + 32), a2);
}

BOOL sub_1D54298C8(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32010[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54299BC;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54299A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1D54299BC(uint64_t a1)
{
  return sub_1D529A770(*(_QWORD *)(a1 + 32));
}

BOOL sub_1D54299C4(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32018[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5429AB8;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5429AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5429AB8(uint64_t a1)
{
  return sub_1D529A7FC(*(_QWORD *)(a1 + 32));
}

BOOL sub_1D5429AC0(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32020[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5429BB4;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5429BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1D5429BB4(uint64_t a1)
{
  return sub_1D529A888(*(_QWORD *)(a1 + 32));
}

BOOL sub_1D5429BBC(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32028[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5429CB0;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5429C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5429CB0(uint64_t a1)
{
  return sub_1D529A914(*(_QWORD *)(a1 + 32));
}

BOOL sub_1D5429CB8(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32030[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5429DAC;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5429D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5429DAC(uint64_t a1)
{
  return sub_1D529A9A0(*(_QWORD *)(a1 + 32));
}

BOOL sub_1D5429DB4(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32038[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5429EA8;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5429E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5429EA8(uint64_t a1)
{
  return sub_1D529AA2C(*(_QWORD *)(a1 + 32));
}

BOOL sub_1D5429EB0(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32040[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5429FA4;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5429F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5429FA4(uint64_t a1)
{
  return sub_1D529AAB8(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1D5429FAC(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32048[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542A3FC;
  v10[3] = &unk_1E9978F98;
  v10[4] = a1;
  v5 = sub_1D542A0A0(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542A08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D542A0A0(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t **v9;
  void **v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t (**v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  void (**v28)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void (*v29)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void *exception;
  _QWORD v32[4];
  id v33;
  std::string __p;
  uint64_t (*v35[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::string *p_p;
  std::__shared_weak_count *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  sub_1D531B8B8(v7, a3, &__p);
  v9 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_1D5433D54;
    v32[3] = &unk_1E9979B90;
    v13 = (uint64_t (**)(_QWORD))v8;
    v33 = v13;
    sub_1D53BC1FC(a1, v7, v32, &p_p);
    v18 = (__int128 *)p_p;
    if (p_p)
    {
      sub_1D53BE790((uint64_t)p_p, v14, v15, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v12 = objc_msgSend_longLongValue(v19, v20, v21, v22, v23);

    }
    else
    {
      v12 = 0;
    }
    v24 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    if (!v18)
      v12 = v13[2](v13);
    p_p = &__p;
    v27 = sub_1D531BAD4(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v28 = (void (**)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD))(v27 + 7);
    v35[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1D5433DD0;
    v35[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v12;
    if (v35 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v27 + 7))
    {
      v29 = *v28;
      if (*v28)
      {
        p_p = 0;
        v37 = 0;
        v29(2, v28, &p_p, 0, 0);
        v35[0](2, v35, v28, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))p_p)(2, &p_p, v35, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        *((_DWORD *)v27 + 16) = v12;
        v27[7] = (uint64_t)sub_1D5433DD0;
        v35[0] = 0;
      }
    }
    sub_1D531BC8C(v35);
  }
  else
  {
    v11 = (unsigned int *)sub_1D5433D88((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v12;
}

void sub_1D542A370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a25);
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

BOOL sub_1D542A3FC(uint64_t a1)
{
  return sub_1D529AB44(*(_QWORD *)(a1 + 32));
}

double sub_1D542A404(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32050[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542A500;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542A4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542A500(uint64_t a1)
{
  return sub_1D529ABD0(*(_QWORD *)(a1 + 32));
}

double sub_1D542A508(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32058[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542A604;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542A5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542A604(uint64_t a1)
{
  return sub_1D529AC64(*(_QWORD *)(a1 + 32));
}

double sub_1D542A60C(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32060[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542A708;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542A6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542A708(uint64_t a1)
{
  return sub_1D529ACF8(*(_QWORD *)(a1 + 32));
}

double sub_1D542A710(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32068[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542A80C;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542A7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542A80C(uint64_t a1)
{
  return sub_1D529AD8C(*(_QWORD *)(a1 + 32));
}

double sub_1D542A814(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32070[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542A910;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542A8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542A910(uint64_t a1)
{
  return sub_1D529AE20(*(_QWORD *)(a1 + 32));
}

double sub_1D542A918(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32078[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542AA14;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542AA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542AA14(uint64_t a1)
{
  return sub_1D529AEB4(*(_QWORD *)(a1 + 32));
}

double sub_1D542AA1C(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32080[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542AB18;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542AB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542AB18(uint64_t a1)
{
  return sub_1D529AF48(*(_QWORD *)(a1 + 32));
}

double sub_1D542AB20(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32088[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542AC1C;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542AC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542AC1C(uint64_t a1)
{
  return sub_1D529AFDC(*(_QWORD *)(a1 + 32));
}

double sub_1D542AC24(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32090[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542AD20;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542AD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542AD20(uint64_t a1)
{
  return sub_1D529B070(*(_QWORD *)(a1 + 32));
}

double sub_1D542AD28(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32098[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542AE24;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542AE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542AE24(uint64_t a1)
{
  return sub_1D529B104(*(_QWORD *)(a1 + 32));
}

double sub_1D542AE2C(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF320A0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542AF28;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542AF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542AF28(uint64_t a1)
{
  return sub_1D529B198(*(_QWORD *)(a1 + 32));
}

double sub_1D542AF30(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF320A8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542B02C;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542B018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542B02C(uint64_t a1)
{
  return sub_1D529B22C(*(_QWORD *)(a1 + 32));
}

BOOL sub_1D542B034(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF320B0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542B128;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542B114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D542B128(uint64_t a1)
{
  return sub_1D529B2C0(*(_QWORD *)(a1 + 32));
}

BOOL sub_1D542B130(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF320B8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542B224;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542B210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D542B224(uint64_t a1)
{
  return sub_1D529B34C(*(_QWORD *)(a1 + 32));
}

double sub_1D542B22C(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF320C0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542B328;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542B314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542B328(uint64_t a1)
{
  return sub_1D529B3D8(*(_QWORD *)(a1 + 32));
}

double sub_1D542B330(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF320C8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542B42C;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542B418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542B42C(uint64_t a1)
{
  return sub_1D529B46C(*(_QWORD *)(a1 + 32));
}

double sub_1D542B434(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF320D0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542B530;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542B51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542B530(uint64_t a1)
{
  return sub_1D529B500(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1D542B538(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF320D8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542B62C;
  v10[3] = &unk_1E9978F98;
  v10[4] = a1;
  v5 = sub_1D53676B0(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542B618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D542B62C(uint64_t a1)
{
  return sub_1D529B594(*(_QWORD *)(a1 + 32));
}

double sub_1D542B634(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF320E0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542B730;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542B71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542B730(uint64_t a1)
{
  return sub_1D529B620(*(_QWORD *)(a1 + 32));
}

double sub_1D542B738(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF320E8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542B834;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542B820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542B834(uint64_t a1)
{
  return sub_1D529B6B4(*(_QWORD *)(a1 + 32));
}

double sub_1D542B83C(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF320F0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542B938;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542B924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542B938(uint64_t a1)
{
  return sub_1D529B748(*(_QWORD *)(a1 + 32));
}

double sub_1D542B940(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF320F8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542BA3C;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542BA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542BA3C(uint64_t a1)
{
  return sub_1D529B7DC(*(_QWORD *)(a1 + 32));
}

double sub_1D542BA44(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32100[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542BB40;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542BB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542BB40(uint64_t a1)
{
  return sub_1D529B870(*(_QWORD *)(a1 + 32));
}

double sub_1D542BB48(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32108[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542BC44;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542BC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542BC44(uint64_t a1)
{
  return sub_1D529B904(*(_QWORD *)(a1 + 32));
}

double sub_1D542BC4C(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32110[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542BD48;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542BD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542BD48(uint64_t a1)
{
  return sub_1D529B998(*(_QWORD *)(a1 + 32));
}

double sub_1D542BD50(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32118[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542BE4C;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542BE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542BE4C(uint64_t a1)
{
  return sub_1D529BA2C(*(_QWORD *)(a1 + 32));
}

double sub_1D542BE54(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32120[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542BF50;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542BF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542BF50(uint64_t a1)
{
  return sub_1D529BAC0(*(_QWORD *)(a1 + 32));
}

double sub_1D542BF58(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32128[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542C054;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542C040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542C054(uint64_t a1)
{
  return sub_1D529BB54(*(_QWORD *)(a1 + 32));
}

double sub_1D542C05C(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32130[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542C158;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542C144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542C158(uint64_t a1)
{
  return sub_1D529BBE8(*(_QWORD *)(a1 + 32));
}

double sub_1D542C160(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32138[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542C25C;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542C248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542C25C(uint64_t a1)
{
  return sub_1D529BC7C(*(_QWORD *)(a1 + 32));
}

double sub_1D542C264(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32140[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542C360;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542C34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542C360(uint64_t a1)
{
  return sub_1D529BD10(*(_QWORD *)(a1 + 32));
}

double sub_1D542C368(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32148[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542C464;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542C450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542C464(uint64_t a1)
{
  return sub_1D529BDA4(*(_QWORD *)(a1 + 32));
}

double sub_1D542C46C(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32150[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542C568;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542C554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542C568(uint64_t a1)
{
  return sub_1D529BE38(*(_QWORD *)(a1 + 32));
}

double sub_1D542C570(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32158[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542C66C;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542C658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542C66C(uint64_t a1)
{
  return sub_1D529BECC(*(_QWORD *)(a1 + 32));
}

double sub_1D542C674(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32160[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542C770;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542C75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542C770(uint64_t a1)
{
  return sub_1D529BF60(*(_QWORD *)(a1 + 32));
}

double sub_1D542C778(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32168[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542C874;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542C860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542C874(uint64_t a1)
{
  return sub_1D529BFF4(*(_QWORD *)(a1 + 32));
}

double sub_1D542C87C(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32170[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542C978;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542C964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542C978(uint64_t a1)
{
  return sub_1D529C088(*(_QWORD *)(a1 + 32));
}

double sub_1D542C980(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32178[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542CA7C;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542CA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542CA7C(uint64_t a1)
{
  return sub_1D529C11C(*(_QWORD *)(a1 + 32));
}

double sub_1D542CA84(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32180[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542CB80;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542CB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542CB80(uint64_t a1)
{
  return sub_1D529C1B0(*(_QWORD *)(a1 + 32));
}

double sub_1D542CB88(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32188[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542CC84;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542CC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542CC84(uint64_t a1)
{
  return sub_1D529C244(*(_QWORD *)(a1 + 32));
}

double sub_1D542CC8C(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32190[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542CD88;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542CD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542CD88(uint64_t a1)
{
  return sub_1D529C2D8(*(_QWORD *)(a1 + 32));
}

double sub_1D542CD90(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32198[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542CE8C;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542CE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542CE8C(uint64_t a1)
{
  return sub_1D529C36C(*(_QWORD *)(a1 + 32));
}

double sub_1D542CE94(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF321A0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542CF90;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542CF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542CF90(uint64_t a1)
{
  return sub_1D529C400(*(_QWORD *)(a1 + 32));
}

double sub_1D542CF98(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF321A8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542D094;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542D080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542D094(uint64_t a1)
{
  return sub_1D529C494(*(_QWORD *)(a1 + 32));
}

double sub_1D542D09C(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF321B0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542D198;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542D184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542D198(uint64_t a1)
{
  return sub_1D529C528(*(_QWORD *)(a1 + 32));
}

double sub_1D542D1A0(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF321B8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542D29C;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542D288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542D29C(uint64_t a1)
{
  return sub_1D529C5BC(*(_QWORD *)(a1 + 32));
}

double sub_1D542D2A4(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF321C0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542D3A0;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542D38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542D3A0(uint64_t a1)
{
  return sub_1D529C650(*(_QWORD *)(a1 + 32));
}

double sub_1D542D3A8(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF321C8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542D4A4;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542D490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542D4A4(uint64_t a1)
{
  return sub_1D529C6E4(*(_QWORD *)(a1 + 32));
}

double sub_1D542D4AC(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF321D0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542D5A8;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542D594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542D5A8(uint64_t a1)
{
  return sub_1D529C778(*(_QWORD *)(a1 + 32));
}

double sub_1D542D5B0(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF321D8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542D6AC;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542D698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542D6AC(uint64_t a1)
{
  return sub_1D529C80C(*(_QWORD *)(a1 + 32));
}

double sub_1D542D6B4(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF321E0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542D7B0;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542D79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542D7B0(uint64_t a1)
{
  return sub_1D529C8A0(*(_QWORD *)(a1 + 32));
}

double sub_1D542D7B8(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF321E8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542D8B4;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542D8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542D8B4(uint64_t a1)
{
  return sub_1D529C934(*(_QWORD *)(a1 + 32));
}

double sub_1D542D8BC(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF321F0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542D9B8;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542D9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542D9B8(uint64_t a1)
{
  return sub_1D529C9C8(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1D542D9C0(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF321F8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542DE10;
  v10[3] = &unk_1E9978F98;
  v10[4] = a1;
  v5 = sub_1D542DAB4(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542DAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D542DAB4(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t **v9;
  void **v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t (**v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  void (**v28)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void (*v29)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void *exception;
  _QWORD v32[4];
  id v33;
  std::string __p;
  uint64_t (*v35[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::string *p_p;
  std::__shared_weak_count *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  sub_1D531B8B8(v7, a3, &__p);
  v9 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_1D5433E88;
    v32[3] = &unk_1E9979B90;
    v13 = (uint64_t (**)(_QWORD))v8;
    v33 = v13;
    sub_1D53BC1FC(a1, v7, v32, &p_p);
    v18 = (__int128 *)p_p;
    if (p_p)
    {
      sub_1D53BE790((uint64_t)p_p, v14, v15, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v12 = objc_msgSend_longLongValue(v19, v20, v21, v22, v23);

    }
    else
    {
      v12 = 0;
    }
    v24 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    if (!v18)
      v12 = v13[2](v13);
    p_p = &__p;
    v27 = sub_1D531BAD4(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v28 = (void (**)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD))(v27 + 7);
    v35[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1D5433F04;
    v35[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v12;
    if (v35 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v27 + 7))
    {
      v29 = *v28;
      if (*v28)
      {
        p_p = 0;
        v37 = 0;
        v29(2, v28, &p_p, 0, 0);
        v35[0](2, v35, v28, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))p_p)(2, &p_p, v35, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        *((_DWORD *)v27 + 16) = v12;
        v27[7] = (uint64_t)sub_1D5433F04;
        v35[0] = 0;
      }
    }
    sub_1D531BC8C(v35);
  }
  else
  {
    v11 = (unsigned int *)sub_1D5433EBC((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v12;
}

void sub_1D542DD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a25);
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D542DE10(uint64_t a1)
{
  return sub_1D529CA5C(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1D542DE18(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32200[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542E268;
  v10[3] = &unk_1E9978F98;
  v10[4] = a1;
  v5 = sub_1D542DF0C(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542DEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D542DF0C(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t **v9;
  void **v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t (**v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  void (**v28)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void (*v29)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void *exception;
  _QWORD v32[4];
  id v33;
  std::string __p;
  uint64_t (*v35[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::string *p_p;
  std::__shared_weak_count *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  sub_1D531B8B8(v7, a3, &__p);
  v9 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_1D5433FBC;
    v32[3] = &unk_1E9979B90;
    v13 = (uint64_t (**)(_QWORD))v8;
    v33 = v13;
    sub_1D53BC1FC(a1, v7, v32, &p_p);
    v18 = (__int128 *)p_p;
    if (p_p)
    {
      sub_1D53BE790((uint64_t)p_p, v14, v15, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v12 = objc_msgSend_longLongValue(v19, v20, v21, v22, v23);

    }
    else
    {
      v12 = 0;
    }
    v24 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    if (!v18)
      v12 = v13[2](v13);
    p_p = &__p;
    v27 = sub_1D531BAD4(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v28 = (void (**)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD))(v27 + 7);
    v35[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1D5434038;
    v35[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v12;
    if (v35 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v27 + 7))
    {
      v29 = *v28;
      if (*v28)
      {
        p_p = 0;
        v37 = 0;
        v29(2, v28, &p_p, 0, 0);
        v35[0](2, v35, v28, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))p_p)(2, &p_p, v35, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        *((_DWORD *)v27 + 16) = v12;
        v27[7] = (uint64_t)sub_1D5434038;
        v35[0] = 0;
      }
    }
    sub_1D531BC8C(v35);
  }
  else
  {
    v11 = (unsigned int *)sub_1D5433FF0((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v12;
}

void sub_1D542E1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a25);
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

BOOL sub_1D542E268(uint64_t a1)
{
  return sub_1D529CAE8(*(_QWORD *)(a1 + 32));
}

double sub_1D542E270(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32208[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542E36C;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542E358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542E36C(uint64_t a1)
{
  return sub_1D529CB74(*(_QWORD *)(a1 + 32));
}

void sub_1D542E374(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF32210[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542EA44;
  v10[3] = &unk_1E99A4110;
  v10[4] = a1;
  sub_1D542E468(v4, v5, v6, v10, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D542E454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D542E468(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  id v9;
  id v10;
  uint64_t **v11;
  void **v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  void (**v51)(int);
  __int128 v52;
  unint64_t *v53;
  unint64_t v54;
  void (*v55)(int);
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  void *exception;
  void (**v61)(_QWORD *__return_ptr);
  void *v62;
  __int128 v63;
  _QWORD v64[4];
  id v65;
  __int128 v66;
  char v67;
  std::string __p;
  void (*v69)(int);
  __int128 v70;
  __int128 v71;
  _QWORD v72[4];

  v72[2] = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a4;
  v62 = v9;
  sub_1D531B8B8(v9, a3, &__p);
  v11 = (uint64_t **)(a1 + 24);
  v12 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v12)
  {
    LOBYTE(v66) = 0;
    v67 = 0;
    v64[0] = MEMORY[0x1E0C809B0];
    v64[1] = 3221225472;
    v64[2] = sub_1D5431F54;
    v64[3] = &unk_1E9979BC8;
    v61 = (void (**)(_QWORD *__return_ptr))v10;
    v65 = v61;
    sub_1D53BC1FC(a1, v9, v64, &v69);
    if (v69)
    {
      sub_1D53BE790((uint64_t)v69, v17, v18, v19, v20);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v26 = 0;
      v71 = 0uLL;
      v72[0] = 0;
      while (v26 < objc_msgSend_count(v21, v22, v23, v24, v25))
      {
        objc_msgSend_objectAtIndexedSubscript_(v21, v27, v26, v28, v29);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v59 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v59, "RawCameraException");
          __cxa_throw(v59, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        objc_msgSend_doubleValue(v30, v31, v32, v33, v34);
        v36 = v35;
        v37 = (char *)*((_QWORD *)&v71 + 1);
        if (*((_QWORD *)&v71 + 1) >= v72[0])
        {
          v39 = (char *)v71;
          v40 = (uint64_t)(*((_QWORD *)&v71 + 1) - v71) >> 3;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61)
            sub_1D5282B8C();
          v42 = v72[0] - v71;
          if ((uint64_t)(v72[0] - v71) >> 2 > v41)
            v41 = v42 >> 2;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            v44 = (char *)sub_1D5282D28((uint64_t)v72, v43);
            v37 = (char *)*((_QWORD *)&v71 + 1);
            v39 = (char *)v71;
          }
          else
          {
            v44 = 0;
          }
          v45 = &v44[8 * v40];
          *(_QWORD *)v45 = v36;
          v38 = v45 + 8;
          while (v37 != v39)
          {
            v46 = *((_QWORD *)v37 - 1);
            v37 -= 8;
            *((_QWORD *)v45 - 1) = v46;
            v45 -= 8;
          }
          *(_QWORD *)&v71 = v45;
          *((_QWORD *)&v71 + 1) = v38;
          v72[0] = &v44[8 * v43];
          if (v39)
            operator delete(v39);
        }
        else
        {
          **((_QWORD **)&v71 + 1) = v35;
          v38 = v37 + 8;
        }
        *((_QWORD *)&v71 + 1) = v38;

        ++v26;
      }
      sub_1D52C10CC((uint64_t *)&v71, &v63);
      v66 = v63;
      v67 = 1;
      if ((_QWORD)v71)
      {
        *((_QWORD *)&v71 + 1) = v71;
        operator delete((void *)v71);
      }

    }
    v47 = (std::__shared_weak_count *)v70;
    if ((_QWORD)v70)
    {
      v48 = (unint64_t *)(v70 + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }

    if (!v67)
    {
      ((void (**)(__int128 *__return_ptr))v61)[2](&v71);
      v66 = v71;
      v67 = 1;
    }
    *(_QWORD *)&v71 = &__p;
    v50 = sub_1D531BAD4(v11, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&v71);
    v51 = (void (**)(int))(v50 + 7);
    v52 = v66;
    v70 = v66;
    if (*((_QWORD *)&v66 + 1))
    {
      v53 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v69 = sub_1D5432094;
    if (&v69 != v51)
    {
      v55 = *v51;
      if (*v51)
      {
        v71 = 0uLL;
        ((void (*)(uint64_t, void (**)(int), __int128 *, _QWORD, _QWORD))v55)(2, v51, &v71, 0, 0);
        v69(2);
        ((void (*)(uint64_t, __int128 *, void (**)(int), _QWORD, _QWORD))v71)(2, &v71, &v69, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&v71);
      }
      else
      {
        *((_OWORD *)v50 + 4) = v52;
        v70 = 0uLL;
        v50[7] = (uint64_t)sub_1D5432094;
        v69 = 0;
      }
    }
    sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&v69);
    *(_OWORD *)a5 = v52;
    if (*((_QWORD *)&v52 + 1))
    {
      v56 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
      do
        v58 = __ldaxr(v56);
      while (__stlxr(v58 - 1, v56));
      if (!v58)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v52 + 1) + 16))(*((_QWORD *)&v52 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v52 + 1));
      }
    }
  }
  else
  {
    v13 = sub_1D543204C((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))v12 + 7);
    if (!v13)
      sub_1D531BA80();
    v14 = v13[1];
    *(_QWORD *)a5 = *v13;
    *(_QWORD *)(a5 + 8) = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

}

void sub_1D542E958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  void *v30;
  void *v31;

  __cxa_free_exception(v31);

  sub_1D5282EB4((uint64_t)&a30);
  if (a29 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D542EA44(uint64_t a1@<X0>, double **a2@<X8>)
{
  sub_1D529CC08(*(_QWORD *)(a1 + 32), a2);
}

void sub_1D542EA4C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF32218[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542EB40;
  v10[3] = &unk_1E9978FB8;
  v10[4] = a1;
  sub_1D531B308(v4, v5, v6, v10, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D542EB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D542EB40(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1D529CC94(*(_QWORD *)(a1 + 32), a2);
}

void sub_1D542EB48(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF32220[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542EC3C;
  v10[3] = &unk_1E99A40F0;
  v10[4] = a1;
  sub_1D5428FC0(v4, v5, v6, v10, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D542EC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D542EC3C(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1D529CD20(*(_QWORD *)(a1 + 32), a2);
}

void sub_1D542EC44(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF32228[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542ED38;
  v10[3] = &unk_1E9978FB8;
  v10[4] = a1;
  sub_1D531B308(v4, v5, v6, v10, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D542ED24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D542ED38(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1D529CDAC(*(_QWORD *)(a1 + 32), a2);
}

double sub_1D542ED40(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32230[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542EE3C;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542EE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542EE3C(uint64_t a1)
{
  return sub_1D529CE38(*(_QWORD *)(a1 + 32));
}

double sub_1D542EE44(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32238[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542EF40;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542EF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542EF40(uint64_t a1)
{
  return sub_1D529CECC(*(_QWORD *)(a1 + 32));
}

double sub_1D542EF48(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32240[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542F044;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542F030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542F044(uint64_t a1)
{
  return sub_1D529CF60(*(_QWORD *)(a1 + 32));
}

double sub_1D542F04C(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32248[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542F148;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542F134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542F148(uint64_t a1)
{
  return sub_1D529CFF4(*(_QWORD *)(a1 + 32));
}

double sub_1D542F150(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32250[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542F24C;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542F238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542F24C(uint64_t a1)
{
  return sub_1D529D088(*(_QWORD *)(a1 + 32));
}

double sub_1D542F254(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32258[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542F350;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542F33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542F350(uint64_t a1)
{
  return sub_1D529D11C(*(_QWORD *)(a1 + 32));
}

BOOL sub_1D542F358(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32260[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542F44C;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v5 = sub_1D532B128(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542F438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D542F44C(uint64_t a1)
{
  return sub_1D529D1B0(*(_QWORD *)(a1 + 32));
}

double sub_1D542F454(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32268[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542F550;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542F53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542F550(uint64_t a1)
{
  return sub_1D529D23C(*(_QWORD *)(a1 + 32));
}

double sub_1D542F558(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32270[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542F654;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542F640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542F654(uint64_t a1)
{
  return sub_1D529D2D0(*(_QWORD *)(a1 + 32));
}

double sub_1D542F65C(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32278[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542F758;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542F744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542F758(uint64_t a1)
{
  return sub_1D529D364(*(_QWORD *)(a1 + 32));
}

double sub_1D542F760(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32280[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542F85C;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542F848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D542F85C(uint64_t a1)
{
  sub_1D529D3F8(*(_QWORD *)(a1 + 32));
}

void sub_1D542F864(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF32288[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542F958;
  v10[3] = &unk_1E9978FB8;
  v10[4] = a1;
  sub_1D531B308(v4, v5, v6, v10, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D542F944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D542F958(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1D529D50C(*(_QWORD *)(a1 + 32), a2);
}

uint64_t sub_1D542F960(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32290[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542FDB0;
  v10[3] = &unk_1E9978F98;
  v10[4] = a1;
  v5 = sub_1D542FA54(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542FA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D542FA54(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t **v9;
  void **v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t (**v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  void (**v28)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void (*v29)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void *exception;
  _QWORD v32[4];
  id v33;
  std::string __p;
  uint64_t (*v35[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::string *p_p;
  std::__shared_weak_count *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  sub_1D531B8B8(v7, a3, &__p);
  v9 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_1D54340F0;
    v32[3] = &unk_1E9979B90;
    v13 = (uint64_t (**)(_QWORD))v8;
    v33 = v13;
    sub_1D53BC1FC(a1, v7, v32, &p_p);
    v18 = (__int128 *)p_p;
    if (p_p)
    {
      sub_1D53BE790((uint64_t)p_p, v14, v15, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v12 = objc_msgSend_longLongValue(v19, v20, v21, v22, v23);

    }
    else
    {
      v12 = 0;
    }
    v24 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    if (!v18)
      v12 = v13[2](v13);
    p_p = &__p;
    v27 = sub_1D531BAD4(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v28 = (void (**)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD))(v27 + 7);
    v35[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1D543416C;
    v35[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v12;
    if (v35 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v27 + 7))
    {
      v29 = *v28;
      if (*v28)
      {
        p_p = 0;
        v37 = 0;
        v29(2, v28, &p_p, 0, 0);
        v35[0](2, v35, v28, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))p_p)(2, &p_p, v35, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        *((_DWORD *)v27 + 16) = v12;
        v27[7] = (uint64_t)sub_1D543416C;
        v35[0] = 0;
      }
    }
    sub_1D531BC8C(v35);
  }
  else
  {
    v11 = (unsigned int *)sub_1D5434124((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v12;
}

void sub_1D542FD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a25);
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D542FDB0(uint64_t a1)
{
  return sub_1D529D598(*(_QWORD *)(a1 + 32));
}

double sub_1D542FDB8(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32298[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542FEB4;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542FEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542FEB4(uint64_t a1)
{
  return sub_1D529D624(*(_QWORD *)(a1 + 32));
}

double sub_1D542FEBC(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF322A0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D542FFB8;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D542FFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D542FFB8(uint64_t a1)
{
  return sub_1D529D6B8(*(_QWORD *)(a1 + 32));
}

double sub_1D542FFC0(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF322A8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54300BC;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54300A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D54300BC(uint64_t a1)
{
  return sub_1D529D74C(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1D54300C4(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF322B0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54301B8;
  v10[3] = &unk_1E9978F98;
  v10[4] = a1;
  v5 = sub_1D542FA54(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54301A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D54301B8(uint64_t a1)
{
  return sub_1D529D7E0(*(_QWORD *)(a1 + 32));
}

double sub_1D54301C0(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF322B8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54302BC;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54302A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D54302BC(uint64_t a1)
{
  return sub_1D529D86C(*(_QWORD *)(a1 + 32));
}

double sub_1D54302C4(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF322C0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54303C0;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54303AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D54303C0(uint64_t a1)
{
  return sub_1D529D900(*(_QWORD *)(a1 + 32));
}

double sub_1D54303C8(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF322C8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54304C4;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54304B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D54304C4(uint64_t a1)
{
  return sub_1D529D994(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1D54304CC(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF322D0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54305C0;
  v10[3] = &unk_1E998AE60;
  v10[4] = a1;
  v5 = sub_1D5330F8C(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54305AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D54305C0(uint64_t a1)
{
  return sub_1D529DA28(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1D54305C8(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF322D8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54306BC;
  v10[3] = &unk_1E9978F98;
  v10[4] = a1;
  v5 = sub_1D542FA54(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54306A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D54306BC(uint64_t a1)
{
  return sub_1D529DAB4(*(_QWORD *)(a1 + 32));
}

double sub_1D54306C4(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF322E0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54307C0;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54307AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D54307C0(uint64_t a1)
{
  return sub_1D529DB40(*(_QWORD *)(a1 + 32));
}

double sub_1D54307C8(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF322E8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54308C4;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54308B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D54308C4(uint64_t a1)
{
  return sub_1D529DBD4(*(_QWORD *)(a1 + 32));
}

double sub_1D54308CC(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF322F0[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54309C8;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54309B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D54309C8(uint64_t a1)
{
  return sub_1D529DC68(*(_QWORD *)(a1 + 32));
}

double sub_1D54309D0(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF322F8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5430ACC;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5430AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D5430ACC(uint64_t a1)
{
  return sub_1D529DCFC(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1D5430AD4(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32300[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5430BC8;
  v10[3] = &unk_1E9978F98;
  v10[4] = a1;
  v5 = sub_1D542FA54(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5430BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5430BC8(uint64_t a1)
{
  return sub_1D529DD90(*(_QWORD *)(a1 + 32));
}

double sub_1D5430BD0(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32308[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5430CCC;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5430CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D5430CCC(uint64_t a1)
{
  return sub_1D529DE1C(*(_QWORD *)(a1 + 32));
}

double sub_1D5430CD4(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32310[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5430DD0;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5430DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D5430DD0(uint64_t a1)
{
  return sub_1D529DEB0(*(_QWORD *)(a1 + 32));
}

double sub_1D5430DD8(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32318[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5430ED4;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5430EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D5430ED4(uint64_t a1)
{
  return sub_1D529DF44(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1D5430EDC(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32320[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D5430FD0;
  v10[3] = &unk_1E9978F98;
  v10[4] = a1;
  v5 = sub_1D542FA54(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5430FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5430FD0(uint64_t a1)
{
  return sub_1D529DFD8(*(_QWORD *)(a1 + 32));
}

double sub_1D5430FD8(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32328[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54310D4;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54310C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D54310D4(uint64_t a1)
{
  return sub_1D529E064(*(_QWORD *)(a1 + 32));
}

double sub_1D54310DC(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32330[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54311D8;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54311C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D54311D8(uint64_t a1)
{
  return sub_1D529E0F8(*(_QWORD *)(a1 + 32));
}

double sub_1D54311E0(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32338[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54312DC;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54312C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D54312DC(uint64_t a1)
{
  return sub_1D529E18C(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1D54312E4(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32340[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54313D8;
  v10[3] = &unk_1E9978F98;
  v10[4] = a1;
  v5 = sub_1D542FA54(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54313C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D54313D8(uint64_t a1)
{
  return sub_1D529E220(*(_QWORD *)(a1 + 32));
}

double sub_1D54313E0(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32348[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54314DC;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54314C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D54314DC(uint64_t a1)
{
  return sub_1D529E2AC(*(_QWORD *)(a1 + 32));
}

double sub_1D54314E4(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32350[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54315E0;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54315CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D54315E0(uint64_t a1)
{
  return sub_1D529E340(*(_QWORD *)(a1 + 32));
}

double sub_1D54315E8(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  double v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF32358;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D54316E4;
  v10[3] = &unk_1E99853B8;
  v10[4] = a1;
  v5 = sub_1D534D428(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D54316D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D54316E4(uint64_t a1)
{
  return sub_1D529E3D4(*(_QWORD *)(a1 + 32));
}

_QWORD *sub_1D54316EC@<X0>(uint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v4;
  int v5;
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  BOOL v9;
  uint64_t **v10;
  double *v11;
  unint64_t v12;
  int v14;
  double v15;
  double v16;
  double v17;
  int v18;
  double v19;
  double v20;
  double v21;
  int v22;
  int v23;
  double v24;
  double v25;
  int v26;
  int v27;
  uint64_t v28;
  double v29;
  int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t **v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  uint64_t **v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  _QWORD *result;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  double *v84;
  double *v85;
  _DWORD *v86[2];

  v4 = a1 + 47;
  v5 = ((uint64_t (*)(uint64_t **))(*a1)[15])(a1);
  v6 = a1[48];
  if (!v6)
    goto LABEL_11;
  v7 = a1 + 48;
  do
  {
    v8 = *((_DWORD *)v6 + 8);
    v9 = v8 < v5;
    if (v8 >= v5)
      v10 = (uint64_t **)v6;
    else
      v10 = (uint64_t **)(v6 + 1);
    if (!v9)
      v7 = (uint64_t **)v6;
    v6 = *v10;
  }
  while (*v10);
  if (v7 == a1 + 48 || v5 < *((_DWORD *)v7 + 8))
  {
LABEL_11:
    ((void (*)(double **__return_ptr, uint64_t **))(*a1)[230])(&v84, a1);
    v11 = v84;
    v12 = (char *)v85 - (char *)v84;
    if ((unint64_t)((char *)v85 - (char *)v84) >= 0x11 && (v85 - v84) % 3uLL == 0)
    {
      v40 = (std::__shared_weak_count *)operator new(0x38uLL);
      v40->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      v40->__shared_weak_owners_ = 0;
      v40->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E996FDE0;
      v40[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E996FE30;
      v40[2].__vftable = 0;
      v40[1].__shared_weak_owners_ = 0;
      v40[1].__shared_owners_ = (uint64_t)&v40[1].__shared_weak_owners_;
      v82 = (uint64_t)&v40[1];
      v83 = v40;
      if (v12 >= 0x18)
      {
        v42 = 2;
        v43 = 1;
        do
        {
          ((void (*)(std::__shared_weak_count_vtbl **, _QWORD, double, double))v40[1].__get_deleter)(&v40[1].__vftable, v11[v42 - 2], v11[v42 - 1], v11[v42]);
          v44 = v43;
          v11 = v84;
          v42 += 3;
          ++v43;
        }
        while (v44 < (v85 - v84) / 3uLL);
      }
      v80 = &v40[1].__vftable;
      v81 = v40;
      do
        v45 = __ldxr(p_shared_owners);
      while (__stxr(v45 + 1, p_shared_owners));
      v79 = ((uint64_t (*)(uint64_t **))(*a1)[15])(a1);
      v86[0] = &v79;
      v46 = sub_1D54333B4(v4, &v79, (uint64_t)&unk_1D544A5C4, v86);
      sub_1D52908C8(v46 + 5, (uint64_t *)&v80);
      v47 = v81;
      if (v81)
      {
        v48 = (unint64_t *)&v81->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v50 = v83;
      if (!v83)
        goto LABEL_61;
      v51 = (unint64_t *)&v83->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
    }
    else
    {
      v14 = ((uint64_t (*)(uint64_t **))(*a1)[231])(a1);
      v15 = ((double (*)(uint64_t **))(*a1)[232])(a1);
      v16 = ((double (*)(uint64_t **))(*a1)[233])(a1);
      v17 = ((double (*)(uint64_t **))(*a1)[234])(a1);
      v18 = ((uint64_t (*)(uint64_t **))(*a1)[235])(a1);
      v19 = ((double (*)(uint64_t **))(*a1)[236])(a1);
      v20 = ((double (*)(uint64_t **))(*a1)[237])(a1);
      v21 = ((double (*)(uint64_t **))(*a1)[238])(a1);
      v22 = ((uint64_t (*)(uint64_t **))(*a1)[239])(a1);
      v23 = ((uint64_t (*)(uint64_t **))(*a1)[240])(a1);
      if (v23)
      {
        v24 = ((double (*)(uint64_t **))(*a1)[241])(a1);
        v25 = ((double (*)(uint64_t **))(*a1)[242])(a1);
        v78 = ((double (*)(uint64_t **))(*a1)[243])(a1);
        v77 = ((double (*)(uint64_t **))(*a1)[244])(a1);
        v26 = ((uint64_t (*)(uint64_t **))(*a1)[245])(a1);
        v76 = ((double (*)(uint64_t **))(*a1)[246])(a1);
        v75 = ((double (*)(uint64_t **))(*a1)[247])(a1);
        v74 = ((double (*)(uint64_t **))(*a1)[248])(a1);
        v27 = ((uint64_t (*)(uint64_t **))(*a1)[249])(a1);
        v73 = ((double (*)(uint64_t **))(*a1)[250])(a1);
        v72 = ((double (*)(uint64_t **))(*a1)[251])(a1);
        v70 = v25;
        v71 = v24;
        v28 = ((double (*)(uint64_t **))(*a1)[252])(a1);
        v69 = v21;
        v29 = v20;
        v30 = ((uint64_t (*)(uint64_t **))(*a1)[253])(a1);
        v31 = v19;
        v32 = v17;
        v33 = v16;
        v34 = v15;
        v35 = ((double (*)(uint64_t **))(*a1)[254])(a1);
        v36 = ((double (*)(uint64_t **))(*a1)[255])(a1);
        *(double *)&v37 = ((double (*)(uint64_t **))(*a1)[256])(a1);
        sub_1D528E42C(v14, v18, v22, v23, v26, v27, v30, &v82, v34, v33, v32, v31, v29, v69, v71, v70, v78, v77, v76,
          v75,
          v74,
          v73,
          v72,
          v28,
          v35,
          v36,
          v37);
        if (v82)
        {
          v80 = (_QWORD *)v82;
          v81 = v83;
          if (v83)
          {
            v38 = (unint64_t *)&v83->__shared_owners_;
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
          }
        }
        else
        {
          v80 = 0;
          v81 = 0;
        }
        v79 = ((uint64_t (*)(uint64_t **))(*a1)[15])(a1);
        v86[0] = &v79;
        v55 = sub_1D54333B4(v4, &v79, (uint64_t)&unk_1D544A5C4, v86);
        sub_1D52908C8(v55 + 5, (uint64_t *)&v80);
        v56 = v81;
        if (v81)
        {
          v57 = (unint64_t *)&v81->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v50 = v83;
        if (!v83)
          goto LABEL_61;
        v59 = (unint64_t *)&v83->__shared_owners_;
        do
          v52 = __ldaxr(v59);
        while (__stlxr(v52 - 1, v59));
      }
      else
      {
        sub_1D5431EF0(v14, v18, v22, &v82, v15, v16, v17, v19, v20, v21);
        if (v82)
        {
          v80 = (_QWORD *)v82;
          v81 = v83;
          if (v83)
          {
            v53 = (unint64_t *)&v83->__shared_owners_;
            do
              v54 = __ldxr(v53);
            while (__stxr(v54 + 1, v53));
          }
        }
        else
        {
          v80 = 0;
          v81 = 0;
        }
        v79 = ((uint64_t (*)(uint64_t **))(*a1)[15])(a1);
        v86[0] = &v79;
        v60 = sub_1D54333B4(v4, &v79, (uint64_t)&unk_1D544A5C4, v86);
        sub_1D52908C8(v60 + 5, (uint64_t *)&v80);
        v61 = v81;
        if (v81)
        {
          v62 = (unint64_t *)&v81->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v50 = v83;
        if (!v83)
          goto LABEL_61;
        v64 = (unint64_t *)&v83->__shared_owners_;
        do
          v52 = __ldaxr(v64);
        while (__stlxr(v52 - 1, v64));
      }
    }
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
LABEL_61:
    if (v84)
    {
      v85 = v84;
      operator delete(v84);
    }
  }
  LODWORD(v84) = ((uint64_t (*)(uint64_t **))(*a1)[15])(a1);
  result = (_QWORD *)sub_1D5427630((uint64_t)v4, (int *)&v84);
  v66 = result[1];
  *a2 = *result;
  a2[1] = v66;
  if (v66)
  {
    v67 = (unint64_t *)(v66 + 8);
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  return result;
}

void sub_1D5431E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
  uint64_t v33;
  void *v35;

  v35 = *(void **)(v33 - 192);
  if (v35)
  {
    *(_QWORD *)(v33 - 184) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D5431EF0@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, double a9@<D4>, double a10@<D5>)
{
  int v11;
  double v12;
  double v13;
  double v14;
  int v15;
  double v16;
  double v17;
  double v18;
  int v19;

  v19 = a1;
  v17 = a6;
  v18 = a5;
  v16 = a7;
  v15 = a2;
  v13 = a9;
  v14 = a8;
  v12 = a10;
  v11 = a3;
  return sub_1D5432174(&v19, &v18, &v17, &v16, &v15, &v14, &v13, a4, &v12, &v11);
}

id sub_1D5431F54(uint64_t a1)
{
  void *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t *v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t **__return_ptr))(*(_QWORD *)(a1 + 32) + 16))(&v6);
  sub_1D5431FE4(v6);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D5431FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_1D5431FE4(uint64_t *a1)
{
  void *v1;
  void *__p[3];

  sub_1D52C11C8(a1, __p);
  sub_1D531C028((double **)__p);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v1;
}

void sub_1D5432030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t (**sub_1D543204C(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_1E99A4CE0, &unk_1D545C314);
    else
      return 0;
  }
  return result;
}

void sub_1D5432094(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D54320C8()
{
  _QWORD *v0;
  uint64_t result;

  sub_1D5282EB4((uint64_t)(v0 + 1));
  result = 0;
  *v0 = 0;
  return result;
}

_QWORD *sub_1D5432174@<X0>(int *a1@<X1>, double *a2@<X2>, double *a3@<X3>, double *a4@<X4>, int *a5@<X5>, double *a6@<X6>, double *a7@<X7>, _QWORD *a8@<X8>, double *a9, int *a10)
{
  _QWORD *v17;
  _QWORD *result;

  v17 = operator new(0x68uLL);
  result = sub_1D5432224(v17, a1, a2, a3, a4, a5, a6, a7, a9, a10);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1D5432210(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5432224(_QWORD *a1, int *a2, double *a3, double *a4, double *a5, int *a6, double *a7, double *a8, double *a9, int *a10)
{
  a1[2] = 0;
  *a1 = &unk_1E996FF78;
  a1[1] = 0;
  sub_1D528F210((uint64_t)(a1 + 3), *a2, *a6, *a10, *a3, *a4, *a5, *a7, *a8, *a9);
  return a1;
}

void sub_1D5432284(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

id sub_1D5432298(unsigned int *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], a2, *a1, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = v6;
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v7, a1[1], v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v15[1] = v10;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v11, (uint64_t)v15, 2, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

void sub_1D543234C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1D5432370(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  sub_1D5432298((unsigned int *)&v6, v1, v2, v3, v4);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t (**sub_1D54323A4(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_1E99A4CF0, &unk_1D545C3A8);
    else
      return 0;
  }
  return result;
}

void sub_1D54323EC(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D5432420()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_1D543249C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0CB37E8];
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return objc_msgSend_numberWithUnsignedInt_(v1, v3, v2, v4, v5);
}

uint64_t (**sub_1D54324D0(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, MEMORY[0x1E0DE4EF8], &unk_1D545C3AC);
    else
      return 0;
  }
  return result;
}

void sub_1D5432518(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D543254C()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_1D54325D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = MEMORY[0x1E0CB37E8];
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return MEMORY[0x1E0DE7D20](v1, sel_numberWithLong_, v2, v3, v4);
}

uint64_t (**sub_1D5432604(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, MEMORY[0x1E0DE4F00], &unk_1D545C3B0);
    else
      return 0;
  }
  return result;
}

void sub_1D543264C(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D5432680()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

id sub_1D54326FC(uint64_t a1)
{
  void *v1;
  void *__p[3];

  (*(void (**)(void **__return_ptr))(*(_QWORD *)(a1 + 32) + 16))(__p);
  sub_1D54328EC((unsigned int **)__p);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v1;
}

void sub_1D5432750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D543276C(uint64_t a1, uint64_t a2)
{
  void (*v3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _OWORD v5[2];
  uint64_t (*v6[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v6[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1E0C80C00];
  memset(v5, 0, sizeof(v5));
  sub_1D5287D44((_QWORD *)v5 + 1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)&v5[0] = sub_1D54329B0;
  if (v5 != (_OWORD *)a1)
  {
    v3 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1;
    if (*(_QWORD *)a1)
    {
      v6[0] = 0;
      v6[1] = 0;
      v3(2, a1, v6, 0, 0);
      (*(void (**)(int))&v5[0])(2);
      ((uint64_t (**)(uint64_t, _QWORD, _OWORD *, _QWORD, _QWORD))v6)[0](2, v6, v5, 0, 0);
      sub_1D531BC8C(v6);
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)((char *)v5 + 8);
      *(_QWORD *)(a1 + 24) = *((_QWORD *)&v5[1] + 1);
      memset((char *)v5 + 8, 0, 24);
      *(_QWORD *)a1 = sub_1D54329B0;
      *(_QWORD *)&v5[0] = 0;
    }
  }
  sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v5);
  return a1;
}

void sub_1D5432898(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1D5281424(a1);
}

uint64_t (**sub_1D54328A4(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_1E99A4D00, &unk_1D545C3D8);
    else
      return 0;
  }
  return result;
}

id sub_1D54328EC(unsigned int **a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  sub_1D52B261C(a1[1] - *a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *a1;
  v7 = a1[1];
  if (*a1 != v7)
  {
    do
    {
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v2, *v6, v3, v4);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v5, v9, (uint64_t)v8, v10, v11);

      ++v6;
    }
    while (v6 != v7);
  }
  objc_msgSend_arrayWithArray_(MEMORY[0x1E0C99D20], v2, (uint64_t)v5, v3, v4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

void sub_1D5432990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D54329B0(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D54329E8()
{
  _QWORD *v0;
  void *v1;
  uint64_t result;

  v1 = (void *)v0[1];
  if (v1)
  {
    v0[2] = v1;
    operator delete(v1);
  }
  result = 0;
  *v0 = 0;
  return result;
}

id sub_1D5432AA8(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v6[1] = v1;
  sub_1D53318E0((unsigned int *)v6, v1, v2, v3, v4);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t (**sub_1D5432ADC(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_1E99A4D10, &unk_1D545C3EC);
    else
      return 0;
  }
  return result;
}

void sub_1D5432B24(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D5432B58()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

id sub_1D5432BDC(uint64_t a1)
{
  void *v1;
  void *__p[3];

  (*(void (**)(void **__return_ptr))(*(_QWORD *)(a1 + 32) + 16))(__p);
  sub_1D5432DCC((unsigned int **)__p);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v1;
}

void sub_1D5432C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D5432C4C(uint64_t a1, uint64_t a2)
{
  void (*v3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _OWORD v5[2];
  uint64_t (*v6[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v6[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1E0C80C00];
  memset(v5, 0, sizeof(v5));
  sub_1D5287D44((_QWORD *)v5 + 1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)&v5[0] = sub_1D5432E90;
  if (v5 != (_OWORD *)a1)
  {
    v3 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1;
    if (*(_QWORD *)a1)
    {
      v6[0] = 0;
      v6[1] = 0;
      v3(2, a1, v6, 0, 0);
      (*(void (**)(int))&v5[0])(2);
      ((uint64_t (**)(uint64_t, _QWORD, _OWORD *, _QWORD, _QWORD))v6)[0](2, v6, v5, 0, 0);
      sub_1D531BC8C(v6);
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)((char *)v5 + 8);
      *(_QWORD *)(a1 + 24) = *((_QWORD *)&v5[1] + 1);
      memset((char *)v5 + 8, 0, 24);
      *(_QWORD *)a1 = sub_1D5432E90;
      *(_QWORD *)&v5[0] = 0;
    }
  }
  sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v5);
  return a1;
}

void sub_1D5432D78(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1D5281424(a1);
}

uint64_t (**sub_1D5432D84(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_1E99A4D20, &unk_1D545C414);
    else
      return 0;
  }
  return result;
}

id sub_1D5432DCC(unsigned int **a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  sub_1D52B261C(a1[1] - *a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *a1;
  v7 = a1[1];
  if (*a1 != v7)
  {
    do
    {
      objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v2, *v6, v3, v4);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v5, v9, (uint64_t)v8, v10, v11);

      ++v6;
    }
    while (v6 != v7);
  }
  objc_msgSend_arrayWithArray_(MEMORY[0x1E0C99D20], v2, (uint64_t)v5, v3, v4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

void sub_1D5432E70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5432E90(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D5432EC8()
{
  _QWORD *v0;
  void *v1;
  uint64_t result;

  v1 = (void *)v0[1];
  if (v1)
  {
    v0[2] = v1;
    operator delete(v1);
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_1D5432F88(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0CB37E8];
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return objc_msgSend_numberWithUnsignedInt_(v1, v3, v2, v4, v5);
}

uint64_t (**sub_1D5432FBC(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_1E99A4D30, &unk_1D545C430);
    else
      return 0;
  }
  return result;
}

void sub_1D5433004(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D5433038()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

id sub_1D54330BC(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *__p[2];
  char v8;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)(a1 + 32) + 16))(__p);
  sub_1D5288864((uint64_t)__p, v1, v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_1D5433110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t (**sub_1D543312C(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_1E99A4D68, &unk_1D545C474);
    else
      return 0;
  }
  return result;
}

void sub_1D5433174(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D54331AC()
{
  uint64_t v0;
  uint64_t result;

  if (*(char *)(v0 + 31) < 0)
    operator delete(*(void **)(v0 + 8));
  result = 0;
  *(_QWORD *)v0 = 0;
  return result;
}

uint64_t sub_1D5433280(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0CB37E8];
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return objc_msgSend_numberWithUnsignedInt_(v1, v3, v2, v4, v5);
}

uint64_t (**sub_1D54332B4(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_1E99A4D78, &unk_1D545C490);
    else
      return 0;
  }
  return result;
}

void sub_1D54332FC(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D5433330()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t **sub_1D54333B4(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  int v11;
  _DWORD *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = operator new(0x38uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((_QWORD *)v12 + 5) = 0;
    *((_QWORD *)v12 + 6) = 0;
    v15 = 1;
    sub_1D528EFCC(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    sub_1D539EB9C((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

uint64_t sub_1D5433498(uint64_t a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return objc_msgSend_numberWithFloat_(v1, v2, v3, v4, v5);
}

uint64_t (**sub_1D54334C8(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, MEMORY[0x1E0DE4EE0], &unk_1D545C494);
    else
      return 0;
  }
  return result;
}

void sub_1D5433510(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D5433544()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

id sub_1D54335C8(uint64_t a1)
{
  void *v1;
  void *__p[3];

  (*(void (**)(void **__return_ptr))(*(_QWORD *)(a1 + 32) + 16))(__p);
  sub_1D543382C((unsigned __int16 **)__p);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v1;
}

void sub_1D543361C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D5433638(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    if (a1 != a2)
      sub_1D52B1D94((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    sub_1D5287CCC((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t sub_1D54336AC(uint64_t a1, uint64_t a2)
{
  void (*v3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _OWORD v5[2];
  uint64_t (*v6[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v6[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1E0C80C00];
  memset(v5, 0, sizeof(v5));
  sub_1D5287CCC((_QWORD *)v5 + 1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  *(_QWORD *)&v5[0] = sub_1D54338F0;
  if (v5 != (_OWORD *)a1)
  {
    v3 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1;
    if (*(_QWORD *)a1)
    {
      v6[0] = 0;
      v6[1] = 0;
      v3(2, a1, v6, 0, 0);
      (*(void (**)(int))&v5[0])(2);
      ((uint64_t (**)(uint64_t, _QWORD, _OWORD *, _QWORD, _QWORD))v6)[0](2, v6, v5, 0, 0);
      sub_1D531BC8C(v6);
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)((char *)v5 + 8);
      *(_QWORD *)(a1 + 24) = *((_QWORD *)&v5[1] + 1);
      memset((char *)v5 + 8, 0, 24);
      *(_QWORD *)a1 = sub_1D54338F0;
      *(_QWORD *)&v5[0] = 0;
    }
  }
  sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v5);
  return a1;
}

void sub_1D54337D8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1D5281424(a1);
}

uint64_t (**sub_1D54337E4(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_1E99A4D88, &unk_1D545C4BC);
    else
      return 0;
  }
  return result;
}

id sub_1D543382C(unsigned __int16 **a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  sub_1D52B261C(a1[1] - *a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *a1;
  v7 = a1[1];
  if (*a1 != v7)
  {
    do
    {
      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v2, *v6, v3, v4);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v5, v9, (uint64_t)v8, v10, v11);

      ++v6;
    }
    while (v6 != v7);
  }
  objc_msgSend_arrayWithArray_(MEMORY[0x1E0C99D20], v2, (uint64_t)v5, v3, v4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

void sub_1D54338D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D54338F0(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D5433928()
{
  _QWORD *v0;
  void *v1;
  uint64_t result;

  v1 = (void *)v0[1];
  if (v1)
  {
    v0[2] = v1;
    operator delete(v1);
  }
  result = 0;
  *v0 = 0;
  return result;
}

id sub_1D54339E8(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  void *__p;
  void *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)(a1 + 32) + 16))(&v3);
  sub_1D533A364((unsigned int *)&v3);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  return v1;
}

void sub_1D5433A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D5433A58(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 32))
  {
    sub_1D53393A8((_QWORD *)a1, a2);
  }
  else
  {
    sub_1D5338BF8((_QWORD *)a1, a2);
    *(_BYTE *)(a1 + 32) = 1;
  }
  return a1;
}

void (**sub_1D5433A9C(void (**a1)(int a1), uint64_t a2))(int a1)
{
  void (*v3)(int);
  BOOL v4;
  void (**v5)(int);
  void (**v6)(int);
  void (*v8[4])(int);
  uint64_t (*v9[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v9[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1E0C80C00];
  v8[0] = 0;
  v8[1] = 0;
  sub_1D5433C08(v8, a2);
  if (v8 != a1)
  {
    v3 = *a1;
    if (v8[0])
      v4 = v3 == 0;
    else
      v4 = 1;
    if (v4)
    {
      if ((unint64_t)v8[0] | (unint64_t)v3)
      {
        if (v8[0])
        {
          v3 = v8[0];
          v5 = a1;
        }
        else
        {
          v5 = v8;
        }
        if (v8[0])
          v6 = v8;
        else
          v6 = a1;
        ((void (*)(uint64_t, void (**)(int), void (**)(int), _QWORD, _QWORD))v3)(2, v6, v5, 0, 0);
      }
    }
    else
    {
      v9[0] = 0;
      v9[1] = 0;
      ((void (*)(uint64_t, void (**)(int), uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))v3)(2, a1, v9, 0, 0);
      ((void (*)(uint64_t, void (**)(int), void (**)(int), _QWORD, _QWORD))v8[0])(2, v8, a1, 0, 0);
      ((uint64_t (**)(uint64_t, _QWORD, void (**)(int), _QWORD, _QWORD))v9)[0](2, v9, v8, 0, 0);
      sub_1D531BC8C(v9);
    }
  }
  sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v8);
  return a1;
}

void sub_1D5433BB4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1D5281424(a1);
}

uint64_t (**sub_1D5433BC0(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_1E99A4D98, &unk_1D545C4CC);
    else
      return 0;
  }
  return result;
}

void (*sub_1D5433C08(void (**a1)(int a1), uint64_t a2))(int a1)
{
  void (*v4)(int);

  v4 = (void (*)(int))operator new(0x20uLL);
  sub_1D5338BF8(v4, a2);
  *a1 = sub_1D5433C68;
  a1[1] = v4;
  return v4;
}

void sub_1D5433C54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1D5433C68(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D5433C9C()
{
  _QWORD *v0;

  sub_1D5433D18(v0);
  return 0;
}

void sub_1D5433D18(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;

  v2 = (_QWORD *)a1[1];
  v3 = (void *)v2[1];
  if (v3)
  {
    v2[2] = v3;
    operator delete(v3);
  }
  operator delete(v2);
  *a1 = 0;
}

uint64_t sub_1D5433D54(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0CB37E8];
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return objc_msgSend_numberWithUnsignedInt_(v1, v3, v2, v4, v5);
}

uint64_t (**sub_1D5433D88(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_1E99A4DA8, &unk_1D545C4E0);
    else
      return 0;
  }
  return result;
}

void sub_1D5433DD0(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D5433E04()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_1D5433E88(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0CB37E8];
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return objc_msgSend_numberWithInt_(v1, v3, v2, v4, v5);
}

uint64_t (**sub_1D5433EBC(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_1E99A4DB8, &unk_1D545C4F8);
    else
      return 0;
  }
  return result;
}

void sub_1D5433F04(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D5433F38()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_1D5433FBC(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0CB37E8];
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return objc_msgSend_numberWithUnsignedInt_(v1, v3, v2, v4, v5);
}

uint64_t (**sub_1D5433FF0(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_1E99A4DC8, &unk_1D545C514);
    else
      return 0;
  }
  return result;
}

void sub_1D5434038(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D543406C()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_1D54340F0(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0CB37E8];
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return objc_msgSend_numberWithUnsignedInt_(v1, v3, v2, v4, v5);
}

uint64_t (**sub_1D5434124(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_1E99A4DD8, &unk_1D545C530);
    else
      return 0;
  }
  return result;
}

void sub_1D543416C(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D54341A0()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_1D5434224()
{
  unsigned __int8 v0;
  _QWORD *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = atomic_load((unsigned __int8 *)&qword_1ED589A10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1ED589A10))
  {
    v2 = (_QWORD *)operator new();
    sub_1D5434C6C(v2, v3, v4, v5, v6);
    qword_1ED589A08 = (uint64_t)v2;
    __cxa_guard_release(&qword_1ED589A10);
  }
  return qword_1ED589A08;
}

void sub_1D5434298(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8271ADC](v1, 0xA0C40E93CF5C4);
  __cxa_guard_abort(&qword_1ED589A10);
  _Unwind_Resume(a1);
}

id sub_1D54342D0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD block[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v3 = a2;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = sub_1D5434694;
  v16 = sub_1D54346A4;
  v17 = 0;
  sub_1D54346AC();
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D5434714;
  block[3] = &unk_1E99A4E10;
  v10 = &v12;
  v11 = a1;
  v9 = v3;
  v5 = v3;
  dispatch_sync(v4, block);

  v6 = (id)v13[5];
  _Block_object_dispose(&v12, 8);

  return v6;
}

id sub_1D54343BC(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  v2 = sub_1D5434224();
  sub_1D5434408(v2, v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1D54343F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D5434408(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  _QWORD block[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v3 = a2;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = sub_1D5434694;
  v16 = sub_1D54346A4;
  v17 = 0;
  sub_1D54346AC();
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D5434984;
  block[3] = &unk_1E99A4E10;
  v10 = &v12;
  v11 = a1;
  v9 = v3;
  v5 = v3;
  dispatch_sync(v4, block);

  v6 = (id)v13[5];
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_1D54344F4(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  id v4;

  v4 = a1;
  v3 = sub_1D5434224();
  sub_1D5434548(v3, v4, a2);

}

void sub_1D5434534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D5434548(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;

  v10 = a2;
  if ((objc_msgSend_isEqualToString_(v10, v5, (uint64_t)CFSTR("unsupported"), v6, v7) & 1) != 0)
  {
    if (qword_1EFF387E8 != -1)
      dispatch_once(&qword_1EFF387E8, &unk_1E99A4DE8);
    v8 = (id)qword_1EFF387E0;
  }
  else
  {
    sub_1D54342D0(a1, v10);
    v8 = (id)objc_claimAutoreleasedReturnValue();
  }
  v9 = v8;
  if (v8)
  {
    sub_1D53BBE84(v10, v8, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }

}

void sub_1D5434604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D543461C()
{
  const char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  sub_1D539D29C(CFSTR("unsupported"), CFSTR("camera"));
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_dictionaryWithContentsOfURL_(MEMORY[0x1E0C99D80], v0, (uint64_t)v5, v1, v2);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)qword_1EFF387E0;
  qword_1EFF387E0 = v3;

}

void sub_1D5434680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D5434694(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D54346A4(uint64_t a1)
{

}

id sub_1D54346AC()
{
  unsigned __int8 v0;
  __objc2_class *v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1ED589A20);
  v1 = RAWHueMagnet;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1ED589A20);
    v1 = RAWHueMagnet;
    if (v3)
    {
      qword_1ED589A18 = (uint64_t)dispatch_queue_create("RawCameraSupport Queue", 0);
      __cxa_guard_release(&qword_1ED589A20);
      v1 = RAWHueMagnet;
    }
  }
  return v1[64].vtable;
}

void sub_1D5434714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v6 = *(_QWORD *)(a1 + 48);
  sub_1D5434830(v6, *(const char **)(a1 + 32), a3, a4, a5);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    sub_1D54348A0((uint64_t *)v6, &v18);
    if (v18)
    {
      sub_1D54368A4(v18, *(void **)(a1 + 32));
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v14 = *(void **)(v13 + 40);
      *(_QWORD *)(v13 + 40) = v12;

    }
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(v6 + 16), v10, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(_QWORD *)(a1 + 32), v11);
    v15 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1D54347F4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  __cxa_begin_catch(a1);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

  __cxa_end_catch();
  JUMPOUT(0x1D5434760);
}

id sub_1D5434830(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  id v6;

  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 16), a2, (uint64_t)a2, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;

  return v6;
}

void sub_1D5434890(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D54348A0(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a1;
  if (!*a1)
  {
    sub_1D5434AA0();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D5436834(v5, &v16);

    sub_1D52908C8(a1, &v16);
    objc_msgSend_removeAllObjects((void *)a1[2], v6, v7, v8, v9);
    v10 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v4 = *a1;
  }
  v13 = a1[1];
  *a2 = v4;
  a2[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
}

void sub_1D5434964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D5434984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v6 = *(_QWORD *)(a1 + 48);
  sub_1D5434830(v6, *(const char **)(a1 + 32), a3, a4, a5);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    sub_1D54348A0((uint64_t *)v6, &v18);
    if (v18)
    {
      sub_1D5437118(v18, *(void **)(a1 + 32));
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v14 = *(void **)(v13 + 40);
      *(_QWORD *)(v13 + 40) = v12;

    }
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(v6 + 16), v10, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(_QWORD *)(a1 + 32), v11);
    v15 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1D5434A64(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  __cxa_begin_catch(a1);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

  __cxa_end_catch();
  JUMPOUT(0x1D54349D0);
}

id sub_1D5434AA0()
{
  void *v0;
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v0 = (void *)MEMORY[0x1E0C99E98];
  sub_1D5434AF8();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fileURLWithPath_(v0, v2, (uint64_t)v1, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1D5434AE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__CFString *sub_1D5434AF8()
{
  void *v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __CFString *v37;

  sub_1D539D36C();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v0;
  if (v0)
  {
    objc_msgSend_bundleURL(v0, v1, v2, v3, v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_path(v6, v7, v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_msgSend_mutableCopy(v11, v12, v13, v14, v15);

    if (v16)
    {
      if (objc_msgSend_containsString_(v16, v17, (uint64_t)CFSTR("/RegressionTest.octest/Contents/Resources"), v18, v19))
      {
        v24 = objc_msgSend_length(v16, v20, v21, v22, v23);
        objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v16, v25, (uint64_t)CFSTR("/RegressionTest.octest/Contents/Resources"), (uint64_t)&stru_1E99A7480, 0, 0, v24);
      }
      v26 = objc_msgSend_length(v16, v20, v21, v22, v23);
      objc_msgSend_replaceOccurrencesOfString_withString_options_range_(v16, v27, (uint64_t)CFSTR("RawCamera.bundle"), (uint64_t)CFSTR("RawCameraSupport.bundle"), 0, 0, v26);
      objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v28, v29, v30, v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = objc_msgSend_fileExistsAtPath_(v32, v33, (uint64_t)v16, v34, v35);

      if ((v36 & 1) != 0)
        v37 = v16;
      else
        v37 = CFSTR("/System/Library/CoreServices/RawCameraSupport.bundle");
    }
    else
    {
      v37 = 0;
    }

  }
  else
  {
    v37 = 0;
  }

  return v37;
}

void sub_1D5434C24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D5434C6C(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = 0;
  a1[1] = 0;
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4, a5);
  a1[2] = objc_claimAutoreleasedReturnValue();
  return a1;
}

void sub_1D5434CA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1);
  _Unwind_Resume(a1);
}

id sub_1D5434CB8(uint64_t *a1, const char *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v4 = (void *)MEMORY[0x1D8272058]();
  sub_1D54348A0(a1, &v13);
  if (v13)
  {
    sub_1D5437530(v13, a2, v5, v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = 0;
  }
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  objc_autoreleasePoolPop(v4);
  return v8;
}

void sub_1D5434D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CreateListOfSupportedCamerasAndVersions(const char *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = (void *)MEMORY[0x1D8272058]();
  v3 = (uint64_t *)sub_1D5434224();
  sub_1D5434CB8(v3, a1);
  v4 = objc_claimAutoreleasedReturnValue();
  objc_autoreleasePoolPop(v2);
  return v4;
}

void sub_1D5434DCC(uint64_t a1)
{
  uint64_t v2;
  char v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1) & 1) != 0)
  {
LABEL_2:
    sub_1D5425BA8(a1);
    return;
  }
  v16 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v14, a1);
  v2 = v14;
  sub_1D52850A0(__p, "IFD0:DNGPrivate:SR2Private:SR2SubIFD:WhiteLevel");
  v3 = (*(uint64_t (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v2 + 240))(v2, __p, &v16);
  if (v13 < 0)
    operator delete(__p[0]);
  v4 = v15;
  if (!v15)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if ((v3 & 1) != 0)
      goto LABEL_20;
  }
  else
  {
LABEL_9:
    if ((v3 & 1) != 0)
      goto LABEL_20;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v14, a1);
  v7 = v14;
  sub_1D52850A0(__p, "IFD0:SR2Private:SR2SubIFD:0x7306");
  v8 = (*(uint64_t (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v7 + 240))(v7, __p, &v16);
  if (v13 < 0)
    operator delete(__p[0]);
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if ((v8 & 1) == 0)
    goto LABEL_2;
LABEL_20:
  (*(double (**)(uint64_t))(*(_QWORD *)a1 + 848))(a1);
}

void sub_1D5434F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1D5434F94(uint64_t a1@<X0>, void **a2@<X8>)
{
  uint64_t v4;
  char v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1) & 1) != 0)
    goto LABEL_12;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v12, a1);
  v4 = v12;
  sub_1D52850A0(__p, "IFD0:DNGPrivate:SR2Private:SR2SubIFD:BlackLevels");
  v5 = (*(uint64_t (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v4 + 248))(v4, __p, a2, 0);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if ((v5 & 1) == 0)
  {
    v9 = *a2;
    if (*a2)
    {
      a2[1] = v9;
      operator delete(v9);
    }
LABEL_12:
    sub_1D5422158(a1, a2);
  }
}

void sub_1D543508C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  void *v18;

  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  v18 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

void sub_1D54350D0(uint64_t a1)
{
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  void *v8;
  int v9;
  int v10;
  void *__p[2];
  char v12;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2192))(a1);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 2200))(__p, a1);
  v8 = &unk_1E99851F0;
  v9 = 0;
  v10 = v2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v6, a1);
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v6 + 600))(v6, __p, &v8, 3);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_1D54351B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_1D5282EB4((uint64_t)&a10);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1D54351E0()
{
  unsigned __int8 v0;
  unsigned __int8 *v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF387F8);
  v1 = (unsigned __int8 *)&unk_1EFF38000;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1EFF387F8);
    v1 = (_BYTE *)&unk_1EFF38000;
    if (v3)
    {
      byte_1EFF387F0 = getenv("RAWCAMERA_USE_RAWCAMERASUPPORT") != 0;
      __cxa_guard_release(&qword_1EFF387F8);
      v1 = (_BYTE *)&unk_1EFF38000;
    }
  }
  return v1[2032];
}

id sub_1D543524C()
{
  unsigned __int8 v0;
  id *v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF38808);
  v1 = (id *)&unk_1EFF38000;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1EFF38808);
    v1 = (id *)&unk_1EFF38000;
    if (v3)
    {
      qword_1EFF38800 = (uint64_t)dispatch_queue_create("RawCamera_Catalog_Access_Queue", 0);
      __cxa_guard_release(&qword_1EFF38808);
      v1 = (id *)&unk_1EFF38000;
    }
  }
  return v1[256];
}

id sub_1D54352B4()
{
  NSObject *v0;
  id v1;
  _QWORD block[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  void (*v8)(uint64_t);
  id v9;

  if (qword_1EFF38818 != -1)
    dispatch_once(&qword_1EFF38818, &unk_1E99A59E0);
  v4 = 0;
  v5 = &v4;
  v6 = 0x3032000000;
  v7 = sub_1D5435CC4;
  v8 = sub_1D5435CD4;
  v9 = 0;
  sub_1D543524C();
  v0 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D5435CDC;
  block[3] = &unk_1E9975198;
  block[4] = &v4;
  dispatch_sync(v0, block);

  v1 = (id)v5[5];
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1D5435398()
{
  void *v0;
  NSObject *v1;
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t MetaDataSync;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  NSObject *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  int v40;
  const char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1D8272058]();
  dispatch_get_global_queue(0, 0);
  v1 = objc_claimAutoreleasedReturnValue();
  notify_register_dispatch("com.apple.MobileAsset.RawCamera.Camera.ma.cached-metadata-updated", (int *)&unk_1EFF38820, v1, &unk_1E99A5A20);

  v2 = objc_alloc(MEMORY[0x1E0D4E050]);
  v6 = (void *)objc_msgSend_initWithType_(v2, v3, qword_1EFF32490, v4, v5);
  MetaDataSync = objc_msgSend_queryMetaDataSync(v6, v7, v8, v9, v10);
  if (MetaDataSync)
  {
    sub_1D540E7C8();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      sub_1D5444D9C();

  }
  else
  {
    objc_msgSend_results(v6, v11, v12, v13, v14);
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = (void *)qword_1EFF38810;
    qword_1EFF38810 = v21;

  }
  objc_msgSend_dateWithTimeIntervalSinceNow_(MEMORY[0x1E0C99D68], v17, v18, v19, v20, 0.0);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_lastFetchDate(v6, v24, v25, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_timeIntervalSinceDate_(v23, v29, (uint64_t)v28, v30, v31);
  v33 = v32;

  if (v33 > 604800.0 || MetaDataSync == 2)
  {
    if (MetaDataSync == 2)
    {
      sub_1D540E7C8();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        v40 = 136446210;
        v41 = "GetMobileAssetCatalog_block_invoke";
        v35 = "%{public}s MobileAsset catalog not present. Initiating download";
LABEL_13:
        _os_log_impl(&dword_1D527F000, v34, OS_LOG_TYPE_INFO, v35, (uint8_t *)&v40, 0xCu);
      }
    }
    else
    {
      sub_1D540E7C8();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        v40 = 136446210;
        v41 = "GetMobileAssetCatalog_block_invoke";
        v35 = "%{public}s MobileAsset may have been updated. Initiating download";
        goto LABEL_13;
      }
    }

    objc_msgSend_startCatalogDownload_then_(MEMORY[0x1E0D4E038], v36, qword_1EFF32490, (uint64_t)&unk_1E99A5A88, v37);
  }

  v38 = atomic_load((unsigned __int8 *)&qword_1EFF38830);
  if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF38830))
  {
    qword_1EFF38828 = (uint64_t)dispatch_queue_create("RawCamera_Update_MobileAsset_Catalog", 0);
    __cxa_guard_release(&qword_1EFF38830);
  }
  v39 = atomic_load((unsigned __int8 *)&qword_1EFF38840);
  if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF38840))
  {
    qword_1EFF38838 = (uint64_t)dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, (dispatch_queue_t)qword_1EFF38828);
    __cxa_guard_release(&qword_1EFF38840);
  }
  dispatch_source_set_timer((dispatch_source_t)qword_1EFF38838, 0x2260FF9290000uLL, 0x2260FF9290000uLL, 0x3B9ACA00uLL);
  dispatch_source_set_event_handler((dispatch_source_t)qword_1EFF38838, &unk_1E99A5AA8);
  dispatch_resume((dispatch_object_t)qword_1EFF38838);
  objc_autoreleasePoolPop(v0);
}

void sub_1D54356A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D54356F8()
{
  NSObject *v0;
  void *v1;
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  _QWORD block[4];
  NSObject *v15;
  uint8_t buf[4];
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  sub_1D540E7C8();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v17 = "GetMobileAssetCatalog_block_invoke_2";
    _os_log_impl(&dword_1D527F000, v0, OS_LOG_TYPE_INFO, "%{public}s MobileAsset catalog was updated.", buf, 0xCu);
  }

  v1 = (void *)MEMORY[0x1D8272058]();
  v2 = objc_alloc(MEMORY[0x1E0D4E050]);
  v6 = (void *)objc_msgSend_initWithType_(v2, v3, qword_1EFF32490, v4, v5);
  if (objc_msgSend_queryMetaDataSync(v6, v7, v8, v9, v10))
  {
    sub_1D540E7C8();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_1D5444D9C();
  }
  else
  {
    sub_1D543524C();
    v12 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D54358E4;
    block[3] = &unk_1E99A5A48;
    v15 = v6;
    dispatch_async(v12, block);

    sub_1D540E7C8();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v17 = "GetMobileAssetCatalog_block_invoke_2";
      _os_log_impl(&dword_1D527F000, v13, OS_LOG_TYPE_INFO, "%{public}s Updated catalog", buf, 0xCu);
    }

    v11 = v15;
  }

  objc_autoreleasePoolPop(v1);
}

void sub_1D54358B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1D54358E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;

  objc_msgSend_results(*(void **)(a1 + 32), a2, a3, a4, a5);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)qword_1EFF38810;
  qword_1EFF38810 = v5;

}

void sub_1D543590C(uint64_t a1, uint64_t a2)
{
  void *v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D8272058]();
  sub_1D540E7C8();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (a2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1D5444E08();
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v6 = 136446466;
    v7 = "GetMobileAssetCatalog_block_invoke";
    v8 = 1024;
    v9 = 0;
    _os_log_impl(&dword_1D527F000, v5, OS_LOG_TYPE_INFO, "%{public}s MobileAsset catalog download successful (Err: %d)", (uint8_t *)&v6, 0x12u);
  }

  objc_autoreleasePoolPop(v3);
}

void sub_1D54359F8()
{
  void *v0;
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t MetaDataSync;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  NSObject *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  int v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x1D8272058]();
  v1 = objc_alloc(MEMORY[0x1E0D4E050]);
  v5 = (void *)objc_msgSend_initWithType_(v1, v2, qword_1EFF32490, v3, v4);
  MetaDataSync = objc_msgSend_queryMetaDataSync(v5, v6, v7, v8, v9);
  objc_msgSend_dateWithTimeIntervalSinceNow_(MEMORY[0x1E0C99D68], v11, v12, v13, v14, 0.0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_lastFetchDate(v5, v16, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_timeIntervalSinceDate_(v15, v21, (uint64_t)v20, v22, v23);
  v25 = v24;

  if (v25 > 604800.0 || MetaDataSync == 2)
  {
    if (MetaDataSync == 2)
    {
      sub_1D540E7C8();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        v31 = 136446210;
        v32 = "GetMobileAssetCatalog_block_invoke";
        v28 = "%{public}s MobileAsset catalog not present. Initiating download";
LABEL_11:
        _os_log_impl(&dword_1D527F000, v27, OS_LOG_TYPE_INFO, v28, (uint8_t *)&v31, 0xCu);
      }
    }
    else
    {
      sub_1D540E7C8();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        v31 = 136446210;
        v32 = "GetMobileAssetCatalog_block_invoke";
        v28 = "%{public}s MobileAsset may have been updated. Initiating download";
        goto LABEL_11;
      }
    }

    objc_msgSend_startCatalogDownload_then_(MEMORY[0x1E0D4E038], v29, qword_1EFF32490, (uint64_t)&unk_1E99A5AC8, v30);
  }

  objc_autoreleasePoolPop(v0);
}

void sub_1D5435BA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5435BE4(uint64_t a1, uint64_t a2)
{
  void *v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1D8272058]();
  sub_1D540E7C8();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (a2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1D5444E08();
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    v6 = 136446210;
    v7 = "GetMobileAssetCatalog_block_invoke";
    _os_log_impl(&dword_1D527F000, v5, OS_LOG_TYPE_INFO, "%{public}s MobileAsset catalog download successful", (uint8_t *)&v6, 0xCu);
  }

  objc_autoreleasePoolPop(v3);
}

uint64_t sub_1D5435CC4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D5435CD4(uint64_t a1)
{

}

void sub_1D5435CDC(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), (id)qword_1EFF38810);
}

id sub_1D5435CF4(void *a1, int a2)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  int v51;
  id v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61;
  dispatch_time_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  dispatch_semaphore_t v72;
  id v73;
  NSObject *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  dispatch_time_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  id v97;
  id v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int refreshed;
  NSObject *v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  NSObject *v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  id v153;
  int v154;
  void *v156;
  int v157;
  void *v158;
  NSObject *obj;
  _QWORD v160[4];
  id v161;
  NSObject *v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint8_t buf[4];
  const char *v168;
  __int16 v169;
  uint64_t v170;
  __int16 v171;
  uint64_t v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v153 = a1;
  sub_1D54352B4();
  v152 = (void *)objc_claimAutoreleasedReturnValue();
  if (v152)
  {
    sub_1D539D668();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v154 = sub_1D539D70C(v2);

    objc_msgSend_lowercaseString(v153, v3, v4, v5, v6);
    v158 = (void *)objc_claimAutoreleasedReturnValue();
    v165 = 0u;
    v166 = 0u;
    v163 = 0u;
    v164 = 0u;
    obj = v152;
    v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v7, (uint64_t)&v163, (uint64_t)v173, 16);
    if (v12)
    {
      v157 = 0;
      v156 = 0;
      v13 = *(_QWORD *)v164;
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v164 != v13)
            objc_enumerationMutation(obj);
          v15 = *(void **)(*((_QWORD *)&v163 + 1) + 8 * i);
          objc_msgSend_attributes(v15, v8, v9, v10, v11);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKeyedSubscript_(v16, v17, (uint64_t)CFSTR("FormatVersion"), v18, v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          if ((int)objc_msgSend_intValue(v20, v21, v22, v23, v24) >= 2)
          {
            objc_msgSend_attributes(v15, v25, v26, v27, v28);
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_objectForKeyedSubscript_(v29, v30, (uint64_t)CFSTR("cameraVersionInfo"), v31, v32);
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_valueForKey_(v33, v34, (uint64_t)v158, v35, v36);
            v37 = (void *)objc_claimAutoreleasedReturnValue();

            if (v37)
            {
              objc_msgSend_objectForKeyedSubscript_(v37, v38, (uint64_t)CFSTR("cameraContentVersion"), v39, v40);
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              v46 = objc_msgSend_intValue(v41, v42, v43, v44, v45);

              objc_msgSend_objectForKeyedSubscript_(v37, v47, (uint64_t)CFSTR("minRawCameraVersion"), v48, v49);
              v50 = (void *)objc_claimAutoreleasedReturnValue();
              v51 = sub_1D539D70C(v50);

              if (v46 > a2 && v46 > v157 && v154 >= v51)
              {
                v52 = v15;

                v157 = v46;
                v156 = v52;
              }
            }

          }
        }
        v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v163, (uint64_t)v173, 16);
      }
      while (v12);

      if (!v156)
      {
        v156 = 0;
        v131 = 0;
        goto LABEL_45;
      }
      if (objc_msgSend_state(v156, v53, v54, v55, v56) == 1)
      {
        v61 = atomic_load((unsigned __int8 *)&qword_1EFF38850);
        if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF38850))
        {
          qword_1EFF38848 = objc_opt_new();
          __cxa_guard_release(&qword_1EFF38850);
        }
        v62 = dispatch_time(0, 0);
        objc_msgSend_objectForKeyedSubscript_((void *)qword_1EFF38848, v63, (uint64_t)v153, v64, v65);
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        v71 = objc_msgSend_unsignedLongLongValue(v66, v67, v68, v69, v70);

        if (v62 > v71)
        {
          v72 = dispatch_semaphore_create(0);
          dispatch_time(0, 0);
          v160[0] = MEMORY[0x1E0C809B0];
          v160[1] = 3221225472;
          v160[2] = sub_1D54365F0;
          v160[3] = &unk_1E99A5AF0;
          v73 = v153;
          v161 = v73;
          v74 = v72;
          v162 = v74;
          objc_msgSend_startDownload_(v156, v75, (uint64_t)v160, v76, v77);
          v78 = dispatch_time(0, 5000000000);
          dispatch_semaphore_wait(v74, v78);
          objc_msgSend_refreshState(v156, v79, v80, v81, v82);
          if (objc_msgSend_state(v156, v83, v84, v85, v86) == 2)
          {
            dispatch_time(0, 0);
            objc_msgSend_assetProperty_(v156, v87, (uint64_t)CFSTR("cameraNames"), v88, v89);
            v90 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_componentsJoinedByString_(v90, v91, (uint64_t)CFSTR(", "), v92, v93);
            v94 = objc_claimAutoreleasedReturnValue();
            v95 = (void *)v94;
            if (v94)
              v96 = (void *)v94;
            else
              v96 = v73;
            v97 = v96;

            v98 = v97;
            AnalyticsSendEventLazy();

          }
        }
      }
      if (objc_msgSend_state(v156, v57, v58, v59, v60) == 4)
      {
        sub_1D540E7C8();
        v103 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v103, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446210;
          v168 = "GetAssetForKey";
          _os_log_impl(&dword_1D527F000, v103, OS_LOG_TYPE_INFO, "%{public}s Asset is in the Downloading state", buf, 0xCu);
        }

        refreshed = objc_msgSend_refreshState(v156, v104, v105, v106, v107);
        sub_1D540E7C8();
        v109 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
        {
          v114 = objc_msgSend_state(v156, v110, v111, v112, v113);
          v115 = "WAS NOT";
          v168 = "GetAssetForKey";
          *(_DWORD *)buf = 136446722;
          if (refreshed)
            v115 = "was";
          v169 = 2080;
          v170 = (uint64_t)v115;
          v171 = 2048;
          v172 = v114;
          _os_log_impl(&dword_1D527F000, v109, OS_LOG_TYPE_INFO, "%{public}s After calling refreshState the asset %s updated and the current state is %ld", buf, 0x20u);
        }

      }
      if (objc_msgSend_state(v156, v99, v100, v101, v102) == 2 || objc_msgSend_state(v156, v116, v117, v118, v119) == 3)
      {
        objc_msgSend_getLocalFileUrl(v156, v116, v117, v118, v119);
        v120 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_URLByAppendingPathComponent_(v120, v121, (uint64_t)v158, v122, v123);
        v124 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_URLByAppendingPathExtension_(v124, v125, (uint64_t)CFSTR("camera"), v126, v127);
        obj = objc_claimAutoreleasedReturnValue();

        objc_msgSend_dictionaryWithContentsOfURL_(MEMORY[0x1E0C99D80], v128, (uint64_t)obj, v129, v130);
        v131 = (void *)objc_claimAutoreleasedReturnValue();
        if (v131)
        {
          sub_1D540E7C8();
          v132 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v132, OS_LOG_TYPE_INFO))
          {
            objc_msgSend_attributes(v156, v133, v134, v135, v136);
            v137 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_objectForKeyedSubscript_(v137, v138, (uint64_t)CFSTR("cameraNames"), v139, v140);
            v141 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_componentsJoinedByString_(v141, v142, (uint64_t)CFSTR(", "), v143, v144);
            v145 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446722;
            v168 = "GetAssetForKey";
            v169 = 2112;
            v170 = (uint64_t)v158;
            v171 = 2112;
            v172 = (uint64_t)v145;
            _os_log_impl(&dword_1D527F000, v132, OS_LOG_TYPE_INFO, "%{public}s Found asset for \"%@\" (%@)", buf, 0x20u);

          }
        }
        goto LABEL_43;
      }
      sub_1D540E7C8();
      obj = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(obj, OS_LOG_TYPE_INFO))
      {
        v151 = objc_msgSend_state(v156, v147, v148, v149, v150);
        *(_DWORD *)buf = 136446466;
        v168 = "GetAssetForKey";
        v169 = 2048;
        v170 = v151;
        _os_log_impl(&dword_1D527F000, obj, OS_LOG_TYPE_INFO, "%{public}s Asset is not installed and has state %ld", buf, 0x16u);
      }
    }
    else
    {
      v156 = 0;
    }
    v131 = 0;
LABEL_43:

LABEL_45:
    goto LABEL_46;
  }
  v131 = 0;
LABEL_46:

  return v131;
}

void sub_1D543642C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  __cxa_guard_abort(&qword_1EFF38850);

  _Unwind_Resume(a1);
}

void sub_1D54365F0(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  dispatch_time_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v7 = (void *)MEMORY[0x1D8272058]();
  if (a2)
  {
    v8 = (void *)MEMORY[0x1E0CB37E8];
    v9 = dispatch_time(0, 3600000000000);
    objc_msgSend_numberWithUnsignedLongLong_(v8, v10, v9, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_((void *)qword_1EFF38848, v14, (uint64_t)v13, *(_QWORD *)(a1 + 32), v15);

    sub_1D540E7C8();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      sub_1D5444E74();
  }
  else
  {
    objc_msgSend_removeObjectForKey_((void *)qword_1EFF38848, v4, *(_QWORD *)(a1 + 32), v5, v6);
    sub_1D540E7C8();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      v17 = 136446210;
      v18 = "GetAssetForKey_block_invoke";
      _os_log_impl(&dword_1D527F000, v16, OS_LOG_TYPE_INFO, "%{public}s Download asset successful", (uint8_t *)&v17, 0xCu);
    }
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  objc_autoreleasePoolPop(v7);
}

void sub_1D5436740(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D5436758(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  void *v9;
  _QWORD v11[2];
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v11[0] = CFSTR("CameraName");
  v11[1] = CFSTR("DownloadTime");
  v12[0] = v6;
  objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], a2, v5 / 0xF4240, a4, a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v12[1] = v7;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v8, (uint64_t)v12, (uint64_t)v11, 2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_1D543681C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1D5436834@<D0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  char *v4;
  double result;

  v3 = a1;
  v4 = (char *)operator new(0x58uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E99A5B88;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = v3;
  result = 0.0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 66) = 0u;
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1D5436894(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NSObject *sub_1D54368A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  int v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  _BOOL4 v44;
  const char *v45;
  uint64_t v46;
  NSObject *v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *exception;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[128];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v59 = v3;
  if (v3)
  {
    sub_1D5436C88(a1, v3, CFSTR("cam"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_valueForKeyPath_(v4, v5, (uint64_t)CFSTR("version.contentVersion"), v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend_intValue(v8, v9, v10, v11, v12);

    sub_1D5437050(v14, v59, (uint64_t)CFSTR("cam"), v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v15;
    if (v15)
    {
      v20 = v15;

      v4 = v20;
    }
    v58 = v19;
    objc_msgSend_objectForKeyedSubscript_(v4, v16, (uint64_t)CFSTR("alias"), v17, v18);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (v21)
    {
      v60 = a1;
      v22 = 0;
      do
      {
        if (v22 == 2)
          break;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v62 = v4;
          sub_1D54368A4(v60, v21);
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v61)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](exception, "RawCameraException");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }

          v4 = (void *)objc_msgSend_mutableCopy(v4, v23, v24, v25, v26);
          objc_msgSend_removeObjectForKey_(v4, v27, (uint64_t)CFSTR("alias"), v28, v29);
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v30 = v61;
          v21 = 0;
          v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v31, (uint64_t)&v63, (uint64_t)v67, 16);
          if (v35)
          {
            v36 = *(_QWORD *)v64;
            do
            {
              for (i = 0; i != v35; ++i)
              {
                if (*(_QWORD *)v64 != v36)
                  objc_enumerationMutation(v30);
                v38 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * i);
                if ((objc_msgSend_isEqualToString_(v38, v32, (uint64_t)CFSTR("alias"), v33, v34) & 1) != 0)
                {
                  objc_msgSend_objectForKeyedSubscript_(v30, v39, (uint64_t)v38, v40, v41);
                  v42 = v21;
                  v21 = (void *)objc_claimAutoreleasedReturnValue();
                }
                else
                {
                  objc_msgSend_objectForKeyedSubscript_(v4, v39, (uint64_t)v38, v40, v41);
                  v43 = (void *)objc_claimAutoreleasedReturnValue();
                  v44 = v43 == 0;

                  if (!v44)
                    continue;
                  objc_msgSend_objectForKeyedSubscript_(v30, v32, (uint64_t)v38, v33, v34);
                  v42 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_setObject_forKeyedSubscript_(v4, v45, (uint64_t)v42, (uint64_t)v38, v46);
                }

              }
              v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v30, v32, (uint64_t)&v63, (uint64_t)v67, 16);
            }
            while (v35);
          }

        }
        ++v22;
      }
      while (v21);
    }
    v47 = v4;

    v48 = v47;
  }
  else
  {
    sub_1D540E7C8();
    v47 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      sub_1D5444EE0(v47, v49, v50, v51, v52, v53, v54, v55);
    v48 = 0;
  }

  return v48;
}

void sub_1D5436BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

NSObject *sub_1D5436C88(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const UInt8 *v18;
  const __CFAllocator *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  NSObject *v52;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint8_t buf[4];
  const char *v59;
  __int16 v60;
  void *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v11 = v6;
  if (!v5)
  {
    sub_1D540E7C8();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      sub_1D5444F50(v21, v24, v25, v26, v27, v28, v29, v30);
    goto LABEL_37;
  }
  if (!v6)
  {
    sub_1D540E7C8();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      sub_1D5444FC0(v21, v31, v32, v33, v34, v35, v36, v37);
    goto LABEL_37;
  }
  objc_msgSend_lowercaseString(v5, v7, v8, v9, v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D54371A8(a1, &v56);
  v16 = v56;
  if (v56)
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v13, (uint64_t)CFSTR("%@.%@"), v14, v15, v12, v11);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53BB4DC(v16, v17, (uint64_t)&v54);

    if (!v54)
    {
      sub_1D540E7C8();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        sub_1D54450A0();
      v21 = 0;
      v23 = 1;
      goto LABEL_26;
    }
    v18 = (const UInt8 *)sub_1D52E658C(v54);
    v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v20 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v18, *(_QWORD *)(v54 + 24), (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    if (v20)
    {
      v21 = CFPropertyListCreateWithData(v19, (CFDataRef)v20, 0, 0, 0);
      if (v21)
      {
        sub_1D540E7C8();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446466;
          v59 = "resourceFromArchive";
          v60 = 2112;
          v61 = v12;
          _os_log_impl(&dword_1D527F000, v22, OS_LOG_TYPE_INFO, "%{public}s Loaded asset data for \"%@\"", buf, 0x16u);
        }
        v23 = 0;
        goto LABEL_25;
      }
      sub_1D540E7C8();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        sub_1D5445184();
    }
    else
    {
      sub_1D540E7C8();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        sub_1D5445118();
    }
    v21 = 0;
    v23 = 1;
LABEL_25:

LABEL_26:
    v46 = v55;
    if (v55)
    {
      p_shared_owners = (unint64_t *)&v55->__shared_owners_;
      do
        v48 = __ldaxr(p_shared_owners);
      while (__stlxr(v48 - 1, p_shared_owners));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    goto LABEL_31;
  }
  sub_1D540E7C8();
  v38 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    sub_1D5445030(v38, v39, v40, v41, v42, v43, v44, v45);

  v21 = 0;
  v23 = 1;
LABEL_31:
  v49 = v57;
  if (v57)
  {
    v50 = (unint64_t *)&v57->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }

  if (!v23)
  {
    v21 = v21;
    v52 = v21;
    goto LABEL_38;
  }
LABEL_37:
  v52 = 0;
LABEL_38:

  return v52;
}

void sub_1D5436FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);

  sub_1D5282EB4((uint64_t)va);
  sub_1D5282EB4((uint64_t)va1);

  _Unwind_Resume(a1);
}

id sub_1D5437050(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2;
  if ((sub_1D54351E0() & 1) != 0)
    goto LABEL_10;
  if (!v6)
  {
    sub_1D540E7C8();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1D54451F0(v8, v9, v10, v11, v12, v13, v14, v15);
    goto LABEL_9;
  }
  if (!a3)
  {
    sub_1D540E7C8();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1D5445260(v8, v16, v17, v18, v19, v20, v21, v22);
LABEL_9:

LABEL_10:
    v7 = 0;
    goto LABEL_11;
  }
  sub_1D5435CF4(v6, a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:

  return v7;
}

void sub_1D5437100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D5437118(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a2;
  if (v3)
  {
    sub_1D5436C88(a1, v3, CFSTR("ln"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    sub_1D540E7C8();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1D54452D0(v5, v6, v7, v8, v9, v10, v11, v12);

    v4 = 0;
  }

  return v4;
}

void sub_1D5437194(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D54371A8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;

  if (!*(_BYTE *)(a1 + 56))
  {
    sub_1D54374D0(a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)MEMORY[0x1E0C99E98];
    sub_1D54373FC(a1, v6, v7, v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_fileURLWithPath_(v5, v11, (uint64_t)v10, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53BAB08(v14, (uint64_t *)&v43);

    sub_1D54374D0(a1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend_isEqualToString_(v4, v16, (uint64_t)v15, v17, v18) & 1) == 0)
    {
      v23 = (void *)MEMORY[0x1E0C99E98];
      sub_1D54373FC(a1, v19, v20, v21, v22);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fileURLWithPath_(v23, v25, (uint64_t)v24, v26, v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53BAB08(v28, (uint64_t *)&v42);
      v29 = v42;
      v42 = 0uLL;
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
      v43 = v29;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
      if (*((_QWORD *)&v42 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }

    }
    if ((_QWORD)v43 && v15)
    {
      sub_1D52908C8((_QWORD *)(a1 + 32), (uint64_t *)&v43);
      objc_storeStrong((id *)(a1 + 48), v15);
      *(_BYTE *)(a1 + 56) = 1;
    }

    v36 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }

  }
  v39 = *(_QWORD *)(a1 + 40);
  *a2 = *(_QWORD *)(a1 + 32);
  a2[1] = v39;
  if (v39)
  {
    v40 = (unint64_t *)(v39 + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
}

void sub_1D543739C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a3);

  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1D54373FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  sub_1D5437488(a1, a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_URLForResource_withExtension_(v5, v6, (uint64_t)CFSTR("PlugIns"), (uint64_t)CFSTR("assets"), v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend_path(v8, v9, v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

void sub_1D543746C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D5437488(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  uint64_t v7;
  void *v8;

  v6 = *(void **)a1;
  if (!v6)
  {
    objc_msgSend_bundleWithURL_(MEMORY[0x1E0CB34D0], a2, *(_QWORD *)(a1 + 8), a4, a5);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = *(void **)a1;
    *(_QWORD *)a1 = v7;

    v6 = *(void **)a1;
  }
  return v6;
}

id sub_1D54374D0(uint64_t a1)
{
  CFDictionaryRef v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CFDictionaryRef v5;
  void *v6;

  v1 = CFBundleCopyInfoDictionaryInDirectory(*(CFURLRef *)(a1 + 8));
  v5 = v1;
  if (v1)
  {
    sub_1D5297D18(v1, CFSTR("CFBundleShortVersionString"), v2, v3, v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_1D5437520(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D5437530(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t m;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  unint64_t n;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  char isEqualToString;
  void *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  int v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const char *v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t k;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  void *v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *p_shared_owners;
  unint64_t v187;
  id v188;
  const char *v189;
  uint64_t v190;
  uint64_t v191;
  const char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void *v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  id v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  const char *v211;
  uint64_t v212;
  const char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  const char *v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  const char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  const char *v230;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t j;
  uint64_t v237;
  const char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  void *v242;
  void *v243;
  const char *v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  const char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  const char *v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  const char *v257;
  uint64_t v258;
  uint64_t v259;
  const char *v260;
  uint64_t v261;
  int v262;
  id obj;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  void *v268;
  id v269;
  NSObject *v270;
  void *v271;
  uint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  id v277;
  id v278;
  id i;
  id v280;
  id v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  _BYTE v302[128];
  _BYTE v303[128];
  _BYTE v304[128];
  _BYTE v305[128];
  _QWORD v306[2];
  _QWORD v307[4];

  v307[2] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2 == 1)
  {
    objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4, a5);
    v281 = (id)objc_claimAutoreleasedReturnValue();
    sub_1D54371A8(a1, &v300);
    v96 = v300;
    if (!v300)
    {
LABEL_66:
      v185 = v301;
      if (v301)
      {
        p_shared_owners = (unint64_t *)&v301->__shared_owners_;
        do
          v187 = __ldaxr(p_shared_owners);
        while (__stlxr(v187 - 1, p_shared_owners));
        if (!v187)
        {
          ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
          std::__shared_weak_count::__release_weak(v185);
        }
      }
      v188 = objc_alloc(MEMORY[0x1E0D4E050]);
      v268 = (void *)objc_msgSend_initWithType_(v188, v189, qword_1EFF32490, v190, v191);
      if (objc_msgSend_queryMetaDataSync(v268, v192, v193, v194, v195))
      {
        sub_1D540E7C8();
        v270 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v270, OS_LOG_TYPE_ERROR))
          sub_1D5445340();
      }
      else
      {
        v288 = 0u;
        v289 = 0u;
        v286 = 0u;
        v287 = 0u;
        objc_msgSend_results(v268, v196, v197, v198, v199);
        v270 = objc_claimAutoreleasedReturnValue();
        v212 = objc_msgSend_countByEnumeratingWithState_objects_count_(v270, v211, (uint64_t)&v286, (uint64_t)v303, 16);
        if (v212)
        {
          v272 = *(_QWORD *)v287;
          v274 = v212;
          do
          {
            for (i = 0; i != (id)v274; i = (char *)i + 1)
            {
              if (*(_QWORD *)v287 != v272)
                objc_enumerationMutation(v270);
              objc_msgSend_attributes(*(void **)(*((_QWORD *)&v286 + 1) + 8 * (_QWORD)i), v213, v214, v215, v216);
              v276 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_objectForKeyedSubscript_(v276, v217, (uint64_t)CFSTR("showInSystemProfiler"), v218, v219);
              v220 = (void *)objc_claimAutoreleasedReturnValue();
              v225 = objc_msgSend_BOOLValue(v220, v221, v222, v223, v224);

              if (v225)
              {
                v284 = 0u;
                v285 = 0u;
                v282 = 0u;
                v283 = 0u;
                objc_msgSend_objectForKeyedSubscript_(v276, v226, (uint64_t)CFSTR("cameraNames"), v227, v228);
                v229 = (void *)objc_claimAutoreleasedReturnValue();
                v234 = objc_msgSend_countByEnumeratingWithState_objects_count_(v229, v230, (uint64_t)&v282, (uint64_t)v302, 16);
                if (v234)
                {
                  v235 = *(_QWORD *)v283;
                  do
                  {
                    for (j = 0; j != v234; ++j)
                    {
                      if (*(_QWORD *)v283 != v235)
                        objc_enumerationMutation(v229);
                      v237 = *(_QWORD *)(*((_QWORD *)&v282 + 1) + 8 * j);
                      objc_msgSend_objectForKeyedSubscript_(v281, v231, v237, v232, v233);
                      v242 = (void *)objc_claimAutoreleasedReturnValue();
                      if (!v242)
                      {
                        objc_msgSend_array(MEMORY[0x1E0C99DE8], v238, v239, v240, v241);
                        v242 = (void *)objc_claimAutoreleasedReturnValue();
                      }
                      objc_msgSend_addObjectsFromArray_(v242, v238, MEMORY[0x1E0C9AA60], v240, v241);
                      v243 = (void *)MEMORY[0x1E0C99DE8];
                      objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], v244, (uint64_t)v242, v245, v246);
                      v247 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_allObjects(v247, v248, v249, v250, v251);
                      v252 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend_arrayWithArray_(v243, v253, (uint64_t)v252, v254, v255);
                      v256 = (void *)objc_claimAutoreleasedReturnValue();

                      objc_msgSend_sortUsingSelector_(v256, v257, (uint64_t)sel_compare_, v258, v259);
                      objc_msgSend_setObject_forKeyedSubscript_(v281, v260, (uint64_t)v256, v237, v261);

                    }
                    v234 = objc_msgSend_countByEnumeratingWithState_objects_count_(v229, v231, (uint64_t)&v282, (uint64_t)v302, 16);
                  }
                  while (v234);
                }

              }
            }
            v274 = objc_msgSend_countByEnumeratingWithState_objects_count_(v270, v213, (uint64_t)&v286, (uint64_t)v303, 16);
          }
          while (v274);
        }
      }

      v207 = v268;
      goto LABEL_102;
    }
    sub_1D539D668();
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    v262 = sub_1D539D70C(v97);

    sub_1D53BB81C(v96, v98, v99, v100, v101);
    v296 = 0u;
    v297 = 0u;
    v294 = 0u;
    v295 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue();
    v267 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v102, (uint64_t)&v294, (uint64_t)v305, 16);
    if (!v267)
      goto LABEL_65;
    v266 = *(_QWORD *)v295;
LABEL_31:
    v275 = 0;
    while (1)
    {
      if (*(_QWORD *)v295 != v266)
        objc_enumerationMutation(obj);
      v107 = *(void **)(*((_QWORD *)&v294 + 1) + 8 * v275);
      objc_msgSend_pathExtension(v107, v103, v104, v105, v106);
      v108 = (void *)objc_claimAutoreleasedReturnValue();
      isEqualToString = objc_msgSend_isEqualToString_(v108, v109, (uint64_t)CFSTR("cam"), v110, v111);

      if ((isEqualToString & 1) == 0)
        goto LABEL_41;
      objc_msgSend_stringByDeletingPathExtension(v107, v103, v104, v105, v106);
      v265 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D5436C88(a1, v265, CFSTR("cam"));
      v113 = (void *)objc_claimAutoreleasedReturnValue();
      if (v113)
      {
        v273 = v113;
        objc_msgSend_valueForKeyPath_(v113, v114, (uint64_t)CFSTR("version.minRawCameraVersion"), v115, v116);
        v117 = (void *)objc_claimAutoreleasedReturnValue();
        v118 = sub_1D539D70C(v117);

        if (v262 >= v118)
        {
          objc_msgSend_valueForKeyPath_(v273, v119, (uint64_t)CFSTR("version.cameraName"), v120, v121);
          v278 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend_valueForKeyPath_(v273, v123, (uint64_t)CFSTR("alias"), v124, v125);
          v126 = (void *)objc_claimAutoreleasedReturnValue();
          v271 = v126;
          if (v126)
          {
            sub_1D5436C88(a1, v126, CFSTR("cam"));
            v130 = objc_claimAutoreleasedReturnValue();

            v131 = (void *)v130;
          }
          else
          {
            v131 = v273;
          }
          v273 = v131;
          objc_msgSend_valueForKeyPath_(v131, v127, (uint64_t)CFSTR("version.showInSystemProfiler"), v128, v129);
          v132 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_valueForKeyPath_(v273, v133, (uint64_t)CFSTR("rawImageClass.supportedMethods"), v134, v135);
          v136 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_predicateWithBlock_(MEMORY[0x1E0CB3880], v137, (uint64_t)&unk_1E99A5B58, v138, v139);
          v140 = (void *)objc_claimAutoreleasedReturnValue();
          v269 = v132;
          objc_msgSend_filteredArrayUsingPredicate_(v136, v141, (uint64_t)v140, v142, v143);
          v122 = (void *)objc_claimAutoreleasedReturnValue();

          if (v273 && v122 && v278 && (!v132 || objc_msgSend_BOOLValue(v132, v144, v145, v146, v147)))
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              objc_msgSend_arrayWithObject_(MEMORY[0x1E0C99D20], v148, (uint64_t)v278, v149, v150);
              v151 = (void *)objc_claimAutoreleasedReturnValue();

            }
            else
            {
              v151 = v278;
            }
            v292 = 0u;
            v293 = 0u;
            v290 = 0u;
            v291 = 0u;
            v278 = v151;
            v156 = objc_msgSend_countByEnumeratingWithState_objects_count_(v278, v152, (uint64_t)&v290, (uint64_t)v304, 16);
            if (v156)
            {
              v157 = *(_QWORD *)v291;
              do
              {
                for (k = 0; k != v156; ++k)
                {
                  if (*(_QWORD *)v291 != v157)
                    objc_enumerationMutation(v278);
                  v159 = *(_QWORD *)(*((_QWORD *)&v290 + 1) + 8 * k);
                  objc_msgSend_objectForKeyedSubscript_(v281, v153, v159, v154, v155);
                  v164 = (void *)objc_claimAutoreleasedReturnValue();
                  if (!v164)
                  {
                    objc_msgSend_array(MEMORY[0x1E0C99DE8], v160, v161, v162, v163);
                    v164 = (void *)objc_claimAutoreleasedReturnValue();
                  }
                  objc_msgSend_addObjectsFromArray_(v164, v160, (uint64_t)v122, v162, v163);
                  v165 = (void *)MEMORY[0x1E0C99DE8];
                  objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], v166, (uint64_t)v164, v167, v168);
                  v169 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_allObjects(v169, v170, v171, v172, v173);
                  v174 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend_arrayWithArray_(v165, v175, (uint64_t)v174, v176, v177);
                  v178 = (void *)objc_claimAutoreleasedReturnValue();

                  objc_msgSend_sortUsingSelector_(v178, v179, (uint64_t)sel_compare_, v180, v181);
                  objc_msgSend_setObject_forKeyedSubscript_(v281, v182, (uint64_t)v178, v159, v183);

                }
                v156 = objc_msgSend_countByEnumeratingWithState_objects_count_(v278, v153, (uint64_t)&v290, (uint64_t)v304, 16);
              }
              while (v156);
            }

          }
          goto LABEL_40;
        }
        v269 = 0;
        v271 = 0;
        v122 = 0;
      }
      else
      {
        v269 = 0;
        v271 = 0;
        v122 = 0;
        v273 = 0;
      }
      v278 = 0;
LABEL_40:

LABEL_41:
      if (++v275 == v267)
      {
        v184 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v103, (uint64_t)&v294, (uint64_t)v305, 16);
        v267 = v184;
        if (!v184)
        {
LABEL_65:

          goto LABEL_66;
        }
        goto LABEL_31;
      }
    }
  }
  if ((_DWORD)a2)
    return 0;
  sub_1D54371A8(a1, &v300);
  if (v300)
  {
    sub_1D53BB81C(v300, v5, v6, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v10, v11, v12, v13);
    v280 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v14, v15, v16, v17);
    v277 = (id)objc_claimAutoreleasedReturnValue();
    for (m = 0; ; m = v299 + 1)
    {
      v299 = m;
      if (m >= objc_msgSend_count(v9, v18, v19, v20, v21))
        break;
      sub_1D53BC854(v9, (const char *)&v299, v24, v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend_hasSuffix_(v27, v28, (uint64_t)CFSTR(".cam"), v29, v30))
      {
        v35 = objc_msgSend_length(v27, v31, v32, v33, v34);
        objc_msgSend_substringWithRange_(v27, v36, 0, v35 - 4, v37);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D54368A4(a1, v38);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = v39;
        if (v39)
        {
          sub_1D53FAE18(v39, CFSTR("rawImageClass"), CFSTR("supportedMethods"));
          v41 = objc_claimAutoreleasedReturnValue();
          sub_1D5438348(v40, CFSTR("version"), CFSTR("cameraName"));
          v42 = objc_claimAutoreleasedReturnValue();
          v47 = (void *)v42;
          if (v41 && v42)
          {
            objc_msgSend_string(MEMORY[0x1E0CB37A0], v43, v44, v45, v46);
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              objc_msgSend_appendString_(v48, v49, (uint64_t)v47, v50, v51);
            }
            else
            {
              v61 = v47;
              for (n = 0; ; n = v298 + 1)
              {
                v298 = n;
                if (n >= objc_msgSend_count(v61, v57, v58, v59, v60))
                  break;
                if (objc_msgSend_length(v48, v63, v64, v65, v66))
                  objc_msgSend_appendString_(v48, v67, (uint64_t)CFSTR("/"), v69, v70);
                sub_1D53BC854(v61, (const char *)&v298, v68, v69, v70);
                v71 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_appendString_(v48, v72, (uint64_t)v71, v73, v74);

              }
            }
            objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v52, v53, v54, v55);
            v75 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setObject_forKeyedSubscript_(v75, v76, v41, (uint64_t)CFSTR("supportedMethods"), v77);
            objc_msgSend_setObject_forKeyedSubscript_(v75, v78, (uint64_t)v27, (uint64_t)CFSTR("id"), v79);
            if ((objc_msgSend_containsObject_(v277, v80, (uint64_t)v48, v81, v82) & 1) == 0)
              objc_msgSend_addObject_(v277, v83, (uint64_t)v48, v84, v85);
            if (sub_1D5297D80(v280, v48))
            {
              sub_1D54383C8(v280, (const char *)v48, v87, v88, v89);
              v93 = (void *)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              objc_msgSend_array(MEMORY[0x1E0C99DE8], v86, v87, v88, v89);
              v93 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_setObject_forKeyedSubscript_(v280, v94, (uint64_t)v93, (uint64_t)v48, v95);
            }
            objc_msgSend_addObject_(v93, v90, (uint64_t)v75, v91, v92);

          }
          v56 = (void *)v41;
        }
        else
        {
          v56 = 0;
          v47 = 0;
        }

      }
    }
    v306[0] = CFSTR("keyArray");
    v306[1] = CFSTR("camDict");
    v307[0] = v277;
    v307[1] = v280;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v23, (uint64_t)v307, (uint64_t)v306, 2);
    v201 = (void *)objc_claimAutoreleasedReturnValue();
    v206 = (void *)objc_msgSend_mutableCopy(v201, v202, v203, v204, v205);

  }
  else
  {
    v206 = 0;
  }
  v207 = v206;
  v208 = v301;
  if (v301)
  {
    v209 = (unint64_t *)&v301->__shared_owners_;
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
  v281 = v207;
LABEL_102:

  return v281;
}

void sub_1D5438104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;
  void *v56;
  void *v57;
  void *v58;

  sub_1D5282EB4((uint64_t)&a55);
  _Unwind_Resume(a1);
}

id sub_1D5438348(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v5 = a3;
  sub_1D5297C60(a1, a2, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v6, v7, (uint64_t)v5, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1D54383AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1D54383C8(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  id v7;

  objc_msgSend_objectForKeyedSubscript_(a1, a2, (uint64_t)a2, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  return v7;
}

void sub_1D5438420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5438430(uint64_t a1, void *a2)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  if ((objc_msgSend_hasSuffix_(v2, v3, (uint64_t)CFSTR("p"), v4, v5) & 1) != 0)
    v9 = 0;
  else
    v9 = objc_msgSend_isEqualToString_(v2, v6, (uint64_t)CFSTR("0"), v7, v8) ^ 1;

  return v9;
}

void sub_1D5438484(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5438494(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A5B88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D54384A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A5B88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

id *sub_1D54384DC(uint64_t a1)
{
  return sub_1D54384E8((id *)(a1 + 24));
}

id *sub_1D54384E8(id *a1)
{

  sub_1D5282EB4((uint64_t)(a1 + 4));
  sub_1D5282EB4((uint64_t)(a1 + 2));

  return a1;
}

void sub_1D5438530(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1D5438540(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_1D54385EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5438708(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D543882C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5438948(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1D54389F8(void *a1)
{
  size_t v2;
  NSObject *v3;
  _QWORD block[5];

  v2 = sub_1D5438A7C((uint64_t)a1);
  sub_1D5438E3C();
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D5439024;
  block[3] = &unk_1E996F870;
  block[4] = a1;
  dispatch_barrier_sync(v3, block);

  return munmap(a1, v2);
}

unint64_t sub_1D5438A7C(uint64_t a1)
{
  NSObject *v2;
  unint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  sub_1D5438E3C();
  v2 = objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1D5438EA8;
  v5[3] = &unk_1E99A5BD0;
  v5[4] = &v6;
  v5[5] = a1;
  dispatch_sync(v2, v5);

  v3 = v7[3] & 0xFFFFFFFFFFFFF000;
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1D5438B24(void *a1)
{
  unint64_t v2;
  unint64_t v3;
  NSObject *v4;
  _QWORD block[5];

  if (a1)
  {
    v2 = sub_1D5438A7C((uint64_t)a1);
    v3 = v2 + sub_1D54391D4() - 1;
    if (v3 / sub_1D54391D4() - 16 >= 0x27F1)
    {
      sub_1D54389F8(a1);
    }
    else
    {
      sub_1D5439048();
      v4 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_1D54390B4;
      block[3] = &unk_1E996F870;
      block[4] = a1;
      dispatch_barrier_async(v4, block);

    }
  }
}

uint64_t *sub_1D5438BCC(uint64_t *a1, _BYTE *a2, int a3)
{
  uint64_t *v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  NSObject *v12;
  size_t v13;
  NSObject *v14;
  size_t v16;
  uint64_t block;
  uint64_t v18;
  void (*v19)(uint64_t);
  void *v20;
  uint64_t *v21;
  uint64_t *v22;
  size_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;

  v5 = a1;
  if (a2)
    *a2 = 0;
  if (a1)
  {
    v6 = (uint64_t)a1 + sub_1D54391D4() - 1;
    v7 = v6 & -sub_1D54391D4();
    v16 = v7;
    v8 = v7 + sub_1D54391D4() - 1;
    v9 = v8 / sub_1D54391D4() - 16;
    v10 = MEMORY[0x1E0C809B0];
    if (v9 < 0x27F1)
    {
      v29 = 0;
      v30 = &v29;
      v31 = 0x2020000000;
      v32 = 0;
      v25 = 0;
      v26 = &v25;
      v27 = 0x2020000000;
      v28 = v7;
      v11 = (unint64_t)((double)(unint64_t)sub_1D54391D4() + (double)v7 * 1.2);
      sub_1D5439048();
      v12 = objc_claimAutoreleasedReturnValue();
      block = v10;
      v18 = 3221225472;
      v19 = sub_1D5439264;
      v20 = &unk_1E99A5C50;
      v23 = &v16;
      v24 = v11;
      v21 = &v29;
      v22 = &v25;
      dispatch_barrier_sync(v12, &block);

      v16 = v26[3];
      v5 = (uint64_t *)v30[3];
      _Block_object_dispose(&v25, 8);
      _Block_object_dispose(&v29, 8);
      if (v5)
        goto LABEL_10;
    }
    if (a2)
      *a2 = 1;
    v5 = (uint64_t *)mmap(0, v16, 3, 4098, 1325400066, 0);
    if (v5 == (uint64_t *)-1
      && (sub_1D5438E08(), v5 = (uint64_t *)mmap(0, v16, 3, 4098, 1325400066, 0), v5 == (uint64_t *)-1))
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Unable to allocate memory. mmap() of %lu bytes failed. Aborting.\n", v16);
      sub_1D5439234();
      return 0;
    }
    else
    {
LABEL_10:
      v13 = v16;
      sub_1D5438E3C();
      v14 = objc_claimAutoreleasedReturnValue();
      block = v10;
      v18 = 3221225472;
      v19 = sub_1D543935C;
      v20 = &unk_1E99A5C70;
      v21 = v5;
      v22 = (uint64_t *)v13;
      BYTE4(v23) = 0;
      LODWORD(v23) = a3;
      dispatch_barrier_sync(v14, &block);

    }
  }
  return v5;
}

void sub_1D5438E08()
{
  NSObject *v0;

  sub_1D5439048();
  v0 = objc_claimAutoreleasedReturnValue();
  dispatch_barrier_async(v0, &unk_1E99A5C90);

}

id sub_1D5438E3C()
{
  unsigned __int8 v0;
  id *v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF38860);
  v1 = (id *)&unk_1EFF38000;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1EFF38860);
    v1 = (id *)&unk_1EFF38000;
    if (v3)
    {
      qword_1EFF38858 = (uint64_t)dispatch_queue_create("com.apple.rawcamera.FEVirtualMemory.PointerToInfo", MEMORY[0x1E0C80D50]);
      __cxa_guard_release(&qword_1EFF38860);
      v1 = (id *)&unk_1EFF38000;
    }
  }
  return v1[267];
}

const void *sub_1D5438EA8(uint64_t a1)
{
  const __CFDictionary *v2;
  const void *result;

  v2 = (const __CFDictionary *)sub_1D5438EDC();
  result = CFDictionaryGetValue(v2, *(const void **)(a1 + 40));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1D5438EDC()
{
  unsigned __int8 v0;
  CFDictionaryValueCallBacks v2;
  CFDictionaryKeyCallBacks keyCallBacks;

  keyCallBacks = *(CFDictionaryKeyCallBacks *)byte_1E99A5BF0;
  *(_OWORD *)&v2.version = xmmword_1E99A5C20;
  *(_OWORD *)&v2.release = unk_1E99A5C30;
  v2.equal = 0;
  v0 = atomic_load((unsigned __int8 *)&qword_1EFF38870);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF38870))
  {
    qword_1EFF38868 = (uint64_t)CFDictionaryCreateMutable(0, 0, &keyCallBacks, &v2);
    __cxa_guard_release(&qword_1EFF38870);
  }
  return qword_1EFF38868;
}

void sub_1D5438F7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EFF38870);
  _Unwind_Resume(a1);
}

CFStringRef sub_1D5438F94(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("%p"), a1);
}

unint64_t sub_1D5438FC4(uint64_t a1)
{
  unint64_t v1;

  v1 = 265 * ((~a1 + (a1 << 21)) ^ ((unint64_t)(~a1 + (a1 << 21)) >> 24));
  return 2147483649u * ((21 * (v1 ^ (v1 >> 14))) ^ ((21 * (v1 ^ (v1 >> 14))) >> 28));
}

CFStringRef sub_1D5438FF0(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, CFSTR("size=%ld"), a1 & 0xFFFFFFFFFFFFF000);
}

void sub_1D5439024(uint64_t a1)
{
  __CFDictionary *v2;

  v2 = (__CFDictionary *)sub_1D5438EDC();
  CFDictionaryRemoveValue(v2, *(const void **)(a1 + 32));
}

id sub_1D5439048()
{
  unsigned __int8 v0;
  id *v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF38890);
  v1 = (id *)&unk_1EFF38000;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1EFF38890);
    v1 = (id *)&unk_1EFF38000;
    if (v3)
    {
      qword_1EFF38888 = (uint64_t)dispatch_queue_create("com.apple.rawcamera.FEVirtualMemory.RecycleArray", MEMORY[0x1E0C80D50]);
      __cxa_guard_release(&qword_1EFF38890);
      v1 = (id *)&unk_1EFF38000;
    }
  }
  return v1[273];
}

void sub_1D54390B4(uint64_t a1)
{
  const __CFArray *v2;
  void *ValueAtIndex;
  uint64_t v4;
  int v5;

  v2 = (const __CFArray *)sub_1D5439158();
  if (CFArrayGetCount(v2) >= 32)
  {
    do
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(v2, 0);
      sub_1D54389F8(ValueAtIndex);
      CFArrayRemoveValueAtIndex(v2, 0);
    }
    while (CFArrayGetCount(v2) > 31);
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = 33;
  if (MEMORY[0x1D8272418](*MEMORY[0x1E0C83DA0], v4, 0, &v5))
    sub_1D54389F8(*(void **)(a1 + 32));
  else
    CFArrayAppendValue(v2, *(const void **)(a1 + 32));
}

uint64_t sub_1D5439158()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF388A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF388A0))
  {
    qword_1EFF38898 = (uint64_t)CFArrayCreateMutable(0, 32, 0);
    __cxa_guard_release(&qword_1EFF388A0);
  }
  return qword_1EFF38898;
}

void sub_1D54391BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EFF388A0);
  _Unwind_Resume(a1);
}

uint64_t sub_1D54391D4()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF38880);
  v1 = &unk_1EFF38000;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1EFF38880);
    v1 = (_QWORD *)&unk_1EFF38000;
    if (v3)
    {
      qword_1EFF38878 = getpagesize();
      __cxa_guard_release(&qword_1EFF38880);
      v1 = (_QWORD *)&unk_1EFF38000;
    }
  }
  return v1[271];
}

uint64_t sub_1D5439234()
{
  return printf("%d\n", *(_DWORD *)0xFFFFFFFFFFFFFFFFLL);
}

void sub_1D5439264(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex v3;
  unsigned int *v4;
  void *ValueAtIndex;
  unint64_t v6;
  unint64_t v7;
  int v8;

  v2 = (const __CFArray *)sub_1D5439158();
  if (CFArrayGetCount(v2) >= 1)
  {
    v3 = 0;
    v4 = (unsigned int *)MEMORY[0x1E0C83DA0];
    do
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(v2, v3);
      v6 = sub_1D5438A7C((uint64_t)ValueAtIndex);
      if (**(_QWORD **)(a1 + 48) <= v6)
      {
        v7 = v6;
        if (v6 <= *(_QWORD *)(a1 + 56))
        {
          v8 = 0;
          if (!MEMORY[0x1D8272418](*v4, ValueAtIndex, 0, &v8))
          {
            CFArrayRemoveValueAtIndex(v2, v3);
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = ValueAtIndex;
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v7;
            return;
          }
          sub_1D54389F8(ValueAtIndex);
          CFArrayRemoveValueAtIndex(v2, v3--);
        }
      }
      ++v3;
    }
    while (v3 < CFArrayGetCount(v2));
  }
}

void sub_1D543935C(uint64_t a1)
{
  __CFDictionary *v2;

  v2 = (__CFDictionary *)sub_1D5438EDC();
  CFDictionarySetValue(v2, *(const void **)(a1 + 32), (const void *)(*(_QWORD *)(a1 + 40) | *(unsigned __int8 *)(a1 + 52) | *(unsigned int *)(a1 + 48)));
}

uint64_t sub_1D5439390()
{
  uint64_t result;
  __CFArray *i;
  void *ValueAtIndex;

  result = sub_1D5439158();
  if (result)
  {
    for (i = (__CFArray *)result; ; CFArrayRemoveValueAtIndex(i, 0))
    {
      result = CFArrayGetCount(i);
      if (!result)
        break;
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(i, 0);
      sub_1D54389F8(ValueAtIndex);
    }
  }
  return result;
}

void sub_1D5439454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5439570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5439620()
{
  return 0xFFFFLL;
}

void sub_1D5439628(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *__p[2];
  char v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *v9;

  v9 = &unk_1E997C018;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v7);
  v1 = v7;
  sub_1D52850A0(__p, "CaptureInfo");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v1 + 600))(v1, __p, &v9, 3);
  if (v6 < 0)
    operator delete(__p[0]);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1D54396E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5439714()
{
  return 9;
}

uint64_t sub_1D543971C(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
  v3 = v2;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
  if ((v4 & 0x100000000) != 0)
    v5 = -11;
  else
    v5 = -10;
  v6 = v5 + HIDWORD(v4);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
  if (v6 * v3 >= 4001)
  {
    v8 = v3 - 4000 / v6;
    if (v3 < 4000 / v6)
      ++v8;
    v7 += v8 >> 1;
  }
  return v7 | 0x500000000;
}

void sub_1D54397C0(_DWORD *a1)
{
  if (!a1[10])
  {
    sub_1D5299D3C(a1);
    if (a1[10] == 1)
      sub_1D5439804((uint64_t)a1);
  }
}

void sub_1D5439804(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1) & 1) == 0)
  {
    sub_1D5439A94(a1, &v14);
    sub_1D543AF44(v14, &v12);
    sub_1D5439B84(a1, &v14, &v12);
    sub_1D5439F0C(a1);
    v4 = sub_1D543A26C(v2, v3, &v12);
    sub_1D543A2D4(v4, v5, &v12);
    v6 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = v15;
    if (v15)
    {
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1D54398F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D5439914(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v3;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v3 = *(const void **)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_8;
  v5 = __dynamic_cast(*(const void **)a1, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E99A6EB0, 0);
  if (v5)
  {
    v6 = *(std::__shared_weak_count **)(a1 + 8);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    sub_1D5442274((uint64_t)v5, a2);
    if (!v6)
      return;
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (v10)
      return;
LABEL_22:
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    return;
  }
  v11 = __dynamic_cast(v3, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E99A6B30, 0);
  if (!v11)
  {
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  sub_1D5440BE4((uint64_t)v11, a2);
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
      goto LABEL_22;
  }
}

void sub_1D5439A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1D5282EB4((uint64_t)&a9);
  sub_1D5282EB4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1D5439A94(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *exception;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v7);
  sub_1D5439914((uint64_t)&v7, a2);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
}

void sub_1D5439B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D5439B84(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  float v10;
  float v11;
  double v12;
  float *v13;
  float v14;
  float *v15;
  float v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  unsigned int v21;
  unsigned int v22;
  float v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  _WORD *v28;
  unsigned int v29;
  float v30;
  float v31;
  unsigned int v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  void *exception;
  void *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unsigned int v40;

  if (sub_1D53C7DBC(*a3))
  {
    v6 = *(unsigned __int8 *)(*a2 + 172);
    v7 = *(_DWORD *)(*a2 + 144);
    v38 = sub_1D5337D88(*a2);
    sub_1D5285A24(&v40, (unsigned int *)&v38);
    v8 = v40;
    if (v40 >> 4 >= 0x271
      || (v38 = sub_1D5337D88(*a2), sub_1D5285A24(&v40, (unsigned int *)&v38 + 1), v9 = v40, v40 >> 4 >= 0x271))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v10 = *(float *)(*a3 + 88);
    v11 = *(float *)(*a3 + 92);
    v12 = *(double *)(*a2 + 176);
    if (v6)
      v13 = (float *)(*a3 + 64);
    else
      v13 = (float *)(*a3 + 68);
    v14 = *v13;
    if (v6)
      v15 = (float *)(*a3 + 72);
    else
      v15 = (float *)(*a3 + 76);
    v16 = *v15;
    if (v6)
      v17 = (float *)(*a3 + 80);
    else
      v17 = (float *)(*a3 + 84);
    v18 = *v17;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 384))(&v38, a1);
    v19 = v12;
    v20 = v16 + (float)(v10 * (float)(v19 - v11));
    if (v20 >= 0.0)
      v21 = v7;
    else
      v21 = 0;
    if (v20 >= 0.0)
      v22 = v8;
    else
      v22 = v7;
    if (v21 >= v8 || v22 > v8 || v21 >= v22)
    {
      v37 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v37, "RawCameraException");
      __cxa_throw(v37, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v23 = 0.0;
    if (*(int *)(*a2 + 72) >= 3)
      v23 = (float)*(unsigned int *)(*a2 + 116);
    if (v9)
    {
      v24 = 0;
      v25 = v38;
      do
      {
        v26 = sub_1D530D4CC(v25);
        v25 = v38;
        v28 = (_WORD *)(v26 + 2 * (*(_DWORD *)(v38 + 56) * v24));
        if (v20 >= 0.0)
        {
          v32 = v22 - v7;
          if (v22 > v7)
          {
            do
            {
              LOWORD(v27) = *v28;
              v27 = fminf(fmaxf((float)((float)(v14 + (float)(v20 * (float)((float)LODWORD(v27) - v23)))+ (float)((float)(v18 * (float)((float)LODWORD(v27) - v23))* (float)((float)LODWORD(v27) - v23)))+ (float)LODWORD(v27), 0.0), 65535.0);
              *v28++ = llroundf(v27);
              --v32;
            }
            while (v32);
          }
        }
        else
        {
          v29 = v22;
          do
          {
            LOWORD(v27) = *v28;
            v30 = (float)LODWORD(v27);
            v31 = (float)(v14 + (float)(v20 * (float)(v30 - v23)))
                + (float)((float)(v18 * (float)(v30 - v23)) * (float)(v30 - v23));
            v27 = fminf(fmaxf(v30 - (float)((float)(v31 * v30) / fmaxf(v31 + v30, 0.001)), 0.0), 65535.0);
            *v28++ = llroundf(v27);
            --v29;
          }
          while (v29);
        }
        ++v24;
      }
      while (v24 != v9);
    }
    v33 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
}

void sub_1D5439EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_1D5439F0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *exception;
  void *v28;
  void *__p;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  _QWORD v34[16385];

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v34[0x4000] = *MEMORY[0x1E0C80C00];
  if (sub_1D53C7DCC(*v2) && !*(_BYTE *)(*v5 + 172))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 384))(&v32, v6);
    v34[0] = sub_1D5337D88(*v5);
    sub_1D5285A24(&__p, (unsigned int *)v34);
    v7 = (int)__p;
    if (__p >> 4 >= 0x271)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v34[0] = sub_1D5337D88(*v5);
    sub_1D5285A24(&__p, (unsigned int *)v34 + 1);
    v8 = (int)__p;
    if (__p >> 4 >= 0x271)
    {
      v28 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v28, "RawCameraException");
      __cxa_throw(v28, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (*(int *)(*v5 + 72) >= 3)
      v9 = *(_DWORD *)(*v5 + 116);
    else
      v9 = 0;
    v10 = *v3;
    v30 = 0;
    v31 = 0;
    __p = 0;
    sub_1D5287D44(&__p, *(const void **)(v10 + 24), *(_QWORD *)(v10 + 32), (uint64_t)(*(_QWORD *)(v10 + 32) - *(_QWORD *)(v10 + 24)) >> 2);
    v11 = __p;
    v12 = v30 - (_BYTE *)__p;
    if (v30 == __p)
      sub_1D528EAE0();
    if (v12 <= 4)
      sub_1D528EAE0();
    if (v12 <= 8)
      sub_1D528EAE0();
    if (v12 <= 0xC)
      sub_1D528EAE0();
    v13 = 0;
    v15 = *(float *)__p;
    v16 = *((float *)__p + 1);
    v17 = *((float *)__p + 2);
    v18 = *((float *)__p + 3);
    do
    {
      v14 = (float)v9;
      *((_WORD *)v34 + v13) = llroundf(fminf(fmaxf((float)((float)((float)(v15 + (float)(v16 * (float)((float)v13 - v14)))+ (float)((float)(v17 * (float)((float)v13 - v14))* (float)((float)v13 - v14)))+ (float)((float)((float)((float)v13 - v14)* (float)(v18 * (float)((float)v13 - v14)))* (float)((float)v13 - v14)))+ (float)v13, 0.0), 65535.0));
      ++v13;
    }
    while (v13 != 0x10000);
    if (v8)
    {
      v19 = 0;
      v20 = v32;
      do
      {
        v21 = sub_1D530D4CC(v20);
        v20 = v32;
        if (v7)
        {
          v22 = (_WORD *)(v21 + 2 * (*(_DWORD *)(v32 + 56) * v19));
          v23 = v7;
          do
          {
            *v22 = *((_WORD *)v34 + (unsigned __int16)*v22);
            ++v22;
            --v23;
          }
          while (v23);
        }
        ++v19;
      }
      while (v19 != v8);
      v11 = __p;
    }
    if (v11)
    {
      v30 = v11;
      operator delete(v11);
    }
    v24 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
}

void sub_1D543A204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

BOOL sub_1D543A26C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _BOOL8 result;
  void *exception;

  result = sub_1D53C7DE0(*a3);
  if (result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D543A2C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1D543A2D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _BOOL8 result;
  void *exception;

  result = sub_1D53C7DF0(*a3);
  if (result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D543A328(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

id sub_1D543A33C(uint64_t a1, void *a2)
{
  sub_1D54210E0(a1, a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t sub_1D543A354@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = (char *)operator new(0xD8uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E99A6870;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 10) = 0;
  *((_QWORD *)v4 + 11) = 0;
  *((_QWORD *)v4 + 9) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 52) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *((_QWORD *)v4 + 12) = 0xFFFFFFFFLL;
  *((_DWORD *)v4 + 26) = 0;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *(_OWORD *)(v4 + 156) = 0u;
  *((_QWORD *)v4 + 22) = 0;
  *((_QWORD *)v4 + 23) = 0;
  *(_QWORD *)(v4 + 189) = 0;
  *((_QWORD *)v4 + 25) = 0x4039000000000000;
  *(_QWORD *)&v9 = v4 + 24;
  *((_QWORD *)&v9 + 1) = v4;
  sub_1D5292548(a2, &v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return sub_1D543A460(*(uint64_t **)a2, a1);
}

void sub_1D543A43C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D543A428);
}

void sub_1D543A44C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D543A460(uint64_t *a1, uint64_t *a2)
{
  int v4;
  int v5;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  void *v13;
  void *exception;
  void *v15;
  int v16;
  uint64_t v17[3];
  int v18;
  uint64_t v19[3];
  _BYTE v20[24];

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 48))(*a2);
  LODWORD(v17[0]) = sub_1D52845F4(*a2);
  LODWORD(v19[0]) = v4;
  LODWORD(v19[0]) = *sub_1D5284C34(v19, v17);
  sub_1D52B1CC8((uint64_t)v20, a2, v19);
  v5 = sub_1D52847F8(*a2);
  if (v5 != 1229539657 && v5 != 1296911693)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v5 == 1296911693)
    v7 = 2;
  else
    v7 = 1;
  *a1 = v7;
  sub_1D5293C20(v19, a2, v7);
  v8 = sub_1D52847F8(*a2);
  v18 = sub_1D52847F8(*a2);
  if (v8 != 1382119235 && v8 != 1382119252)
  {
    v15 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v15, "RawCameraException");
    __cxa_throw(v15, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D5282F74(&v16, &v18);
  sub_1D5285164(v17, a2, (uint64_t)&v16, 0);
  v9 = sub_1D52847F8(*a2);
  sub_1D52847F8(*a2);
  if (v9 > 0x1FF)
  {
    v13 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v13, "RawCameraException");
    __cxa_throw(v13, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  for (; v9; --v9)
  {
    v10 = sub_1D52847F8(*a2);
    sub_1D52847F8(*a2);
    v16 = sub_1D52847F8(*a2);
    v11 = sub_1D52847F8(*a2);
    sub_1D543A718((uint64_t)a1, v10, (unsigned int *)&v16, v11, a2);
  }
  sub_1D5285200(v17);
  sub_1D5293C98(v19);
  return sub_1D52B1D54((uint64_t)v20);
}

void sub_1D543A68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;
  uint64_t v16;

  __cxa_free_exception(v15);
  sub_1D5293C98(&a15);
  sub_1D52B1D54(v16 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_1D543A718(uint64_t result, int a2, unsigned int *a3, int a4, uint64_t *a5)
{
  uint64_t v7;
  int v8;
  unint64_t v9;
  void **v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  char *v15;
  _DWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  unint64_t v25;
  void **v26;
  int v27;
  __int16 v28;
  __int16 v29;
  unint64_t v30;
  char *v31;
  _WORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int16 v41;
  void **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  void *exception;
  __int128 __p;
  uint64_t v49;
  int v50;
  uint64_t v51[3];
  int v52;

  v7 = result;
  v52 = a4;
  if (a2 <= 527)
  {
    switch(a2)
    {
      case 256:
        if (a4 == 2)
          v8 = 8;
        else
          v8 = 1;
        *(_DWORD *)(result + 184) = v8;
        return result;
      case 257:
      case 258:
      case 260:
      case 262:
      case 273:
        return result;
      case 259:
        *(float *)(result + 168) = *(float *)&a4;
        return result;
      case 261:
        *(float *)(result + 80) = *(float *)&a4;
        return result;
      case 263:
        v42 = (void **)(result + 88);
        if (*(_QWORD *)(result + 96) != *(_QWORD *)(result + 88))
          return result;
        sub_1D5282F74((int *)&__p, &v52);
        sub_1D5285164(v51, a5, (uint64_t)&__p, 0);
        sub_1D52A7918(v42, 3uLL);
        *(double *)&__p = COERCE_FLOAT(sub_1D52847F8(*a5));
        sub_1D543AE30((uint64_t)v42, &__p);
        *(double *)&__p = COERCE_FLOAT(sub_1D52847F8(*a5));
        sub_1D543AE30((uint64_t)v42, &__p);
        *(double *)&__p = COERCE_FLOAT(sub_1D52847F8(*a5));
        sub_1D543AE30((uint64_t)v42, &__p);
        return sub_1D5285200(v51);
      case 264:
        *(float *)(result + 8) = *(float *)&a4;
        if (a4 <= 0)
          goto LABEL_85;
        return result;
      case 265:
        *(float *)(result + 12) = *(float *)&a4;
        if (a4 <= 0)
          goto LABEL_85;
        return result;
      case 266:
        *(float *)(result + 16) = *(float *)&a4;
        if (a4 <= 0)
          goto LABEL_85;
        return result;
      case 267:
        *(float *)(result + 20) = *(float *)&a4;
        if (a4 <= 0)
          goto LABEL_85;
        return result;
      case 268:
        *(float *)(result + 24) = *(float *)&a4;
        if (a4 <= 0)
          goto LABEL_85;
        return result;
      case 269:
        *(float *)(result + 28) = *(float *)&a4;
        if (a4 <= 0)
        {
LABEL_85:
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](exception, "RawCameraException");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        return result;
      case 270:
        *(float *)(result + 72) = *(float *)&a4;
        return result;
      case 271:
        LODWORD(v51[0]) = sub_1D52845F4(*a5);
        LODWORD(v51[0]) = *sub_1D5294254((int *)v51, (unsigned int *)&v52);
        result = sub_1D52ADF28((unsigned int *)v51);
        *(_QWORD *)(v7 + 32) = result;
        *(_DWORD *)(v7 + 40) = *a3;
        return result;
      case 272:
        sub_1D5282F74((int *)&__p, &v52);
        sub_1D5285164(v51, a5, (uint64_t)&__p, 0);
        sub_1D53C6DF8(a5, (uint64_t *)&__p);
        sub_1D5292548(v7 + 152, &__p);
        v43 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1))
        {
          v44 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        return sub_1D5285200(v51);
      case 274:
        v46 = *a5;
        LODWORD(v51[0]) = -4;
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v46 + 40))(v46, v51, 1);
        *(_WORD *)(v7 + 112) = sub_1D528479C(*a5);
        result = sub_1D528479C(*a5);
        *(_WORD *)(v7 + 114) = result;
        return result;
      default:
        if (a2 == 523)
          *(_BYTE *)(result + 172) = a4 != 0;
        return result;
    }
  }
  if (a2 > 767)
  {
    if (a2 == 768)
    {
      *(float *)(result + 76) = *(float *)&a4;
    }
    else if (a2 == 769)
    {
      sub_1D5282F74((int *)&__p, &v52);
      sub_1D5285164(v51, a5, (uint64_t)&__p, 0);
      if (*a3 <= 0x95)
      {
        __p = 0uLL;
        v49 = 0;
        sub_1D52849DC(*a5, a3, (uint64_t)&__p);
        if (SHIBYTE(v49) < 0)
          operator delete((void *)__p);
      }
      return sub_1D5285200(v51);
    }
  }
  else
  {
    switch(a2)
    {
      case 540:
        sub_1D5282F74((int *)&__p, &v52);
        sub_1D5285164(v51, a5, (uint64_t)&__p, 0);
        v50 = 4;
        LODWORD(__p) = *a3;
        v9 = *sub_1D530F1B8(&__p, &v50);
        v10 = (void **)(v7 + 48);
        sub_1D52B1A40((void **)(v7 + 48), v9);
        if ((_DWORD)v9)
        {
          v11 = 0;
          do
          {
            v12 = sub_1D52847F8(*a5);
            v13 = v12;
            v15 = *(char **)(v7 + 56);
            v14 = *(_QWORD *)(v7 + 64);
            if ((unint64_t)v15 >= v14)
            {
              v17 = (char *)*v10;
              v18 = (v15 - (_BYTE *)*v10) >> 2;
              v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 62)
                sub_1D5282B8C();
              v20 = v14 - (_QWORD)v17;
              if (v20 >> 1 > v19)
                v19 = v20 >> 1;
              if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
                v21 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v21 = v19;
              if (v21)
              {
                v22 = (char *)sub_1D5282BA0(v7 + 64, v21);
                v17 = *(char **)(v7 + 48);
                v15 = *(char **)(v7 + 56);
              }
              else
              {
                v22 = 0;
              }
              v23 = &v22[4 * v18];
              *(_DWORD *)v23 = v13;
              v16 = v23 + 4;
              while (v15 != v17)
              {
                v24 = *((_DWORD *)v15 - 1);
                v15 -= 4;
                *((_DWORD *)v23 - 1) = v24;
                v23 -= 4;
              }
              *(_QWORD *)(v7 + 48) = v23;
              *(_QWORD *)(v7 + 56) = v16;
              *(_QWORD *)(v7 + 64) = &v22[4 * v21];
              if (v17)
                operator delete(v17);
            }
            else
            {
              *(_DWORD *)v15 = v12;
              v16 = v15 + 4;
            }
            *(_QWORD *)(v7 + 56) = v16;
            ++v11;
          }
          while (v11 != (_DWORD)v9);
        }
        return sub_1D5285200(v51);
      case 541:
        *(float *)(result + 116) = *(float *)&a4;
        break;
      case 542:
      case 543:
      case 544:
      case 545:
        return result;
      case 546:
        *(float *)(result + 144) = *(float *)&a4;
        break;
      case 547:
        sub_1D5282F74((int *)&__p, &v52);
        sub_1D5285164(v51, a5, (uint64_t)&__p, 0);
        v50 = 2;
        LODWORD(__p) = *a3;
        v25 = *sub_1D530F1B8(&__p, &v50);
        v26 = (void **)(v7 + 120);
        sub_1D52A7D98((void **)(v7 + 120), v25);
        if ((_DWORD)v25)
        {
          v27 = 0;
          do
          {
            v28 = sub_1D52848D4(*a5);
            v29 = v28;
            v31 = *(char **)(v7 + 128);
            v30 = *(_QWORD *)(v7 + 136);
            if ((unint64_t)v31 >= v30)
            {
              v33 = (char *)*v26;
              v34 = v31 - (_BYTE *)*v26;
              if (v34 <= -3)
                sub_1D5282B8C();
              v35 = v34 >> 1;
              v36 = v30 - (_QWORD)v33;
              if (v36 <= (v34 >> 1) + 1)
                v37 = v35 + 1;
              else
                v37 = v36;
              if (v36 >= 0x7FFFFFFFFFFFFFFELL)
                v38 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v38 = v37;
              if (v38)
              {
                v39 = (char *)sub_1D52854A0(v7 + 136, v38);
                v33 = *(char **)(v7 + 120);
                v31 = *(char **)(v7 + 128);
              }
              else
              {
                v39 = 0;
              }
              v40 = &v39[2 * v35];
              *(_WORD *)v40 = v29;
              v32 = v40 + 2;
              while (v31 != v33)
              {
                v41 = *((_WORD *)v31 - 1);
                v31 -= 2;
                *((_WORD *)v40 - 1) = v41;
                v40 -= 2;
              }
              *(_QWORD *)(v7 + 120) = v40;
              *(_QWORD *)(v7 + 128) = v32;
              *(_QWORD *)(v7 + 136) = &v39[2 * v38];
              if (v33)
                operator delete(v33);
            }
            else
            {
              *(_WORD *)v31 = v28;
              v32 = v31 + 2;
            }
            *(_QWORD *)(v7 + 128) = v32;
            ++v27;
          }
          while (v27 != (_DWORD)v25);
        }
        return sub_1D5285200(v51);
      default:
        if (a2 == 528)
          *(double *)(result + 176) = *(float *)&a4;
        break;
    }
  }
  return result;
}

void sub_1D543AD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  sub_1D5285200(&a16);
  _Unwind_Resume(a1);
}

void sub_1D543AE30(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_1D5282B8C();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_1D5282D28(v4, v12);
      v8 = *(_QWORD **)a1;
      v6 = *(_QWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v7 = v14 + 8;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

uint64_t sub_1D543AF14(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t sub_1D543AF1C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_1D543AF24(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1D543AF30()
{
  return 2492765332;
}

uint64_t sub_1D543AF3C()
{
  return 0xFFFFLL;
}

uint64_t sub_1D543AF44@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *exception;

  v2 = *(_QWORD *)(result + 152);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v3 = *(_QWORD *)(result + 160);
  *a2 = v2;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_1D543AFB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D543AFC8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A6870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D543AFDC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A6870;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D543B010(uint64_t a1)
{
  return sub_1D543B01C((_QWORD *)(a1 + 24));
}

_QWORD *sub_1D543B01C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  sub_1D5282EB4((uint64_t)(a1 + 19));
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
  return a1;
}

double sub_1D543B074(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  double v6;
  int v7;
  _BOOL4 v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;

  sub_1D543B1E8(a1, a2);
  v7 = (int)v6;
  if (a2)
    v8 = a2 % 3 < 2;
  else
    v8 = 0;
  v9 = a1[58];
  if (a1[60])
  {
    v10 = v8 | (2 * (((int)(a2 - 1) / 3) & ~(((int)(a2 - 1) / 3) >> 31)));
    if (a3 % v9)
      v11 = dword_1D545C650[v10];
    else
      v11 = 0;
    v12 = v11 + v7;
    if (a3 % v9 == v9 - 1)
      v13 = 0;
    else
      v13 = dword_1D545C668[6 * ((a1[52] >> 1) & ~(-1 << a1[54])) + v10];
    return (double)(v12 + v13);
  }
  return (double)v7;
}

double sub_1D543B1E8(_DWORD *a1, int a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  v2 = a1[54];
  v3 = a1[52] >> 1;
  v4 = a1[53] >> 1;
  if (v2)
  {
    v5 = v2 - (a2 + 2) / 3u;
    v6 = v2 - 1;
    if (v5 < v6)
      v6 = v5;
    v7 = ~v6;
    do
    {
      v3 = (v3 & 1) + (v3 >> 1);
      v4 = (v4 & 1) + (v4 >> 1);
    }
    while (!__CFADD__(v7++, 1));
  }
  return 0.0;
}

void sub_1D543B2A4(_DWORD *a1@<X0>, void *a2@<X1>, void *a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  id v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *exception;
  void *__p;
  void *v48;
  uint64_t v49;

  v11 = a2;
  v12 = a3;
  objc_msgSend_objectForKeyedSubscript_(v11, v13, (uint64_t)CFSTR("subband_headers"), v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v11, v17, (uint64_t)CFSTR("dc_mode"), v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = objc_msgSend_intValue(v20, v21, v22, v23, v24);

  objc_msgSend_objectAtIndexedSubscript_(v16, v26, a5, v27, v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)(a6 + 48) = 0;
  *(_QWORD *)(a6 + 56) = 0;
  *(_QWORD *)(a6 + 64) = 0;
  v30 = sub_1D543B074(a1, a5, a4);
  v32 = v31;
  *(double *)(a6 + 32) = v30;
  *(double *)(a6 + 40) = v31;
  *(double *)a6 = sub_1D543B1E8(a1, a5);
  *(_QWORD *)(a6 + 8) = v33;
  *(_QWORD *)(a6 + 16) = v34;
  *(_QWORD *)(a6 + 24) = v35;
  sub_1D535F91C(a6 + 48, v30 * v32);
  if (a5)
    v39 = 0;
  else
    v39 = v25 == 1;
  v40 = v39;
  objc_msgSend_objectForKeyedSubscript_(v29, v36, (uint64_t)CFSTR("stuffing_data_length"), v37, v38);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_unsignedIntValue(v41, v42, v43, v44, v45);

  sub_1D543DB04(v40, v30, v32, v12, (uint64_t *)(a6 + 48), 0);
  v48 = 0;
  v49 = 0;
  __p = 0;
  sub_1D5287CCC(&__p, *(const void **)(a6 + 48), *(_QWORD *)(a6 + 56), (uint64_t)(*(_QWORD *)(a6 + 56) - *(_QWORD *)(a6 + 48)) >> 1);
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }

}

void sub_1D543B480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void *v9;

  v9 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v5 + 56) = v9;
    operator delete(v9);
  }

  _Unwind_Resume(a1);
}

void sub_1D543B4EC(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, __int128 *a6@<X8>)
{
  id v10;
  id v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  void *v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  char v103;
  uint64_t v104;
  _WORD *v105;
  uint64_t i;
  unsigned int v107;
  unsigned int v108;
  int v109;
  unsigned int v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  uint64_t j;
  void *v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  _WORD *v159;
  __int128 *v160;
  void *v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  id v167;
  id v169;
  void *v170;
  unint64_t v171;
  unsigned int v172;
  uint64_t v173;
  void *v174;
  void *v175;
  unint64_t v176;
  void *v177;
  void *v178;
  void *v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  void *__p;
  void *v185;
  uint64_t v186;
  void *v187[3];
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  _QWORD v193[4];

  v10 = a2;
  v11 = a3;
  v12 = a4;
  v169 = a5;
  v170 = v12;
  v173 = a1;
  LODWORD(a5) = *(_DWORD *)(a1 + 216);
  objc_msgSend_objectForKeyedSubscript_(v10, v13, (uint64_t)CFSTR("subband_headers"), v14, v15);
  v177 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v12, v16, (uint64_t)CFSTR("tile_index"), v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v172 = objc_msgSend_unsignedIntValue(v19, v20, v21, v22, v23);
  v24 = (3 * (_DWORD)a5 + 1);

  sub_1D543E358(v193, v24);
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v25, v26, v27, v28);
  v175 = (void *)objc_claimAutoreleasedReturnValue();
  if (3 * (_DWORD)a5 != -1)
  {
    v32 = 0;
    v33 = 0;
    do
    {
      objc_msgSend_objectAtIndexedSubscript_(v177, v29, v32, v30, v31);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v34, v35, (uint64_t)CFSTR("subband_data_length"), v36, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = objc_msgSend_unsignedIntValue(v38, v39, v40, v41, v42);

      objc_msgSend_subdataWithRange_(v11, v44, v33, v43, v45);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v175, v47, (uint64_t)v46, v48, v49);

      v33 += v43;
      ++v32;
    }
    while (v24 != v32);
    v50 = 0;
    v51 = 48;
    do
    {
      objc_msgSend_objectAtIndexedSubscript_(v175, v29, v50, v30, v31);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D543B2A4((_DWORD *)v173, v10, v52, v172, v50, (uint64_t)&v188);
      v53 = v193[0] + v51;
      v54 = v190;
      v55 = v188;
      *(_OWORD *)(v53 - 32) = v189;
      *(_OWORD *)(v53 - 16) = v54;
      *(_OWORD *)(v53 - 48) = v55;
      v56 = *(void **)v53;
      if (*(_QWORD *)v53)
      {
        *(_QWORD *)(v53 + 8) = v56;
        operator delete(v56);
        *(_QWORD *)v53 = 0;
        *(_QWORD *)(v53 + 8) = 0;
        *(_QWORD *)(v53 + 16) = 0;
      }
      *(_OWORD *)v53 = v191;
      *(_QWORD *)(v53 + 16) = v192;
      v191 = 0uLL;
      v192 = 0;

      ++v50;
      v51 += 72;
    }
    while (v24 != v50);
  }
  objc_msgSend_objectForKeyedSubscript_(*(void **)(v173 + 200), v29, (uint64_t)CFSTR("version"), v30, v31);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  v62 = objc_msgSend_unsignedIntValue(v57, v58, v59, v60, v61);

  if (v62 == 512)
  {
    objc_msgSend_objectForKeyedSubscript_(*(void **)(v173 + 200), v63, (uint64_t)CFSTR("tile_width"), v64, v65);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    v71 = objc_msgSend_unsignedIntValue(v66, v67, v68, v69, v70);

    objc_msgSend_objectForKeyedSubscript_(*(void **)(v173 + 200), v72, (uint64_t)CFSTR("tile_height"), v73, v74);
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    v80 = objc_msgSend_unsignedIntValue(v75, v76, v77, v78, v79);
    v167 = v10;

    if ((v71 & 0xF) != 0)
      v81 = (v71 >> 4) + 1;
    else
      v81 = v71 >> 4;
    if ((v80 & 3) != 0)
      v82 = (v80 >> 2) + 1;
    else
      v82 = v80 >> 2;
    v188 = 0uLL;
    *(_QWORD *)&v189 = 0;
    sub_1D535F91C((uint64_t)&v188, v82 * v81);
    objc_msgSend_objectForKeyedSubscript_(v170, v83, (uint64_t)CFSTR("qp_stuffing_data_length"), v84, v85);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_unsignedIntValue(v86, v87, v88, v89, v90);

    sub_1D543DB04(1, v81, v82, v169, (uint64_t *)&v188, 1);
    v171 = v24;
    if ((_DWORD)v24)
    {
      v91 = 0;
      v92 = v82 - 1;
      do
      {
        v93 = v193[0] + 72 * v91;
        v94 = *(double *)(v93 + 32);
        v95 = *(double *)(v93 + 40);
        v96 = *(_QWORD *)(v93 + 48);
        if (v91 >= 7)
          v97 = 1;
        else
          v97 = 2;
        v176 = v91;
        if (v91 >= 4)
          v98 = v97;
        else
          v98 = 4;
        sub_1D52B2A2C(v187, v95 * (unint64_t)v94);
        if ((_DWORD)v94)
        {
          v101 = 0;
          v102 = v176 < 7;
          if (v176 < 7)
            v103 = 1;
          else
            v103 = 2;
          if (v176 < 4)
          {
            v102 = 2;
            v103 = 0;
          }
          v104 = v188;
          v105 = v187[0];
          do
          {
            if ((_DWORD)v95)
            {
              for (i = 0; i != v95; ++i)
              {
                v107 = 0;
                v108 = (_DWORD)i << v102;
                v109 = v98;
                do
                {
                  if (v92 >= v108)
                    v110 = v108;
                  else
                    v110 = v92;
                  v107 += *(__int16 *)(v104 + 2 * ((v101 >> v103) + v110 * v81));
                  ++v108;
                  --v109;
                }
                while (v109);
                v105[v101 + i * v94] = v107 >> v102;
              }
            }
            ++v101;
          }
          while (v101 != v94);
        }
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], (const char *)v176, (uint64_t)CFSTR("subband_%d"), v99, v100, v176);

        objc_msgSend_objectAtIndexedSubscript_(v177, v111, v176, v112, v113);
        v114 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v114, v115, (uint64_t)CFSTR("mtx_a"), v116, v117);
        v118 = (void *)objc_claimAutoreleasedReturnValue();
        v123 = objc_msgSend_intValue(v118, v119, v120, v121, v122);

        objc_msgSend_objectAtIndexedSubscript_(v177, v124, v176, v125, v126);
        v174 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v174, v127, (uint64_t)CFSTR("mtx_b"), v128, v129);
        v130 = (void *)objc_claimAutoreleasedReturnValue();
        v135 = objc_msgSend_intValue(v130, v131, v132, v133, v134);

        if ((_DWORD)v94)
        {
          v136 = 0;
          v137 = (char *)v187[0];
          do
          {
            if ((_DWORD)v95)
            {
              v138 = 0;
              v139 = v95;
              do
              {
                v140 = v135 + ((dword_1D545C728[*(__int16 *)&v137[v138]] * v123) >> 3);
                if (v140 >= 1474560)
                  v140 = 1474560;
                if (v140 <= 1)
                  LOWORD(v140) = 1;
                *(_WORD *)(v96 + v138) *= (_WORD)v140;
                v138 += 2 * v94;
                --v139;
              }
              while (v139);
            }
            ++v136;
            v137 += 2;
            v96 += 2;
          }
          while (v136 != v94);
        }
        v141 = v193[0] + 72 * v176;
        v143 = *(_OWORD *)(v141 + 16);
        v142 = *(_OWORD *)(v141 + 32);
        v181 = *(_OWORD *)v141;
        v182 = v143;
        v183 = v142;
        v185 = 0;
        v186 = 0;
        __p = 0;
        sub_1D5287CCC(&__p, *(const void **)(v141 + 48), *(_QWORD *)(v141 + 56), (uint64_t)(*(_QWORD *)(v141 + 56) - *(_QWORD *)(v141 + 48)) >> 1);
        if (__p)
        {
          v185 = __p;
          operator delete(__p);
        }
        if (v187[0])
        {
          v187[1] = v187[0];
          operator delete(v187[0]);
        }
        v91 = v176 + 1;
      }
      while (v176 + 1 != v171);
    }
    if ((_QWORD)v188)
    {
      *((_QWORD *)&v188 + 1) = v188;
      operator delete((void *)v188);
    }
    v10 = v167;
  }
  else if ((_DWORD)v24)
  {
    for (j = 0; j != v24; ++j)
    {
      objc_msgSend_objectAtIndexedSubscript_(v177, v63, j, v64, v65);
      v145 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v145, v146, (uint64_t)CFSTR("ini_qp"), v147, v148);
      v149 = (void *)objc_claimAutoreleasedReturnValue();
      v154 = objc_msgSend_intValue(v149, v150, v151, v152, v153);

      v155 = v193[0];
      if ((unint64_t)(v154 - 10) <= 0x75)
      {
        v156 = v193[0] + 72 * j;
        v157 = ((int)*(double *)(v156 + 40) * (int)*(double *)(v156 + 32));
        if ((int)v157 >= 1)
        {
          v158 = dword_1D545C728[v154];
          v159 = *(_WORD **)(v156 + 48);
          do
          {
            *v159++ *= (_WORD)v158;
            --v157;
          }
          while (v157);
        }
      }
      v179 = 0;
      v180 = 0;
      v178 = 0;
      sub_1D5287CCC(&v178, *(const void **)(v155 + 72 * j + 48), *(_QWORD *)(v155 + 72 * j + 56), (uint64_t)(*(_QWORD *)(v155 + 72 * j + 56) - *(_QWORD *)(v155 + 72 * j + 48)) >> 1);
      if (v178)
      {
        v179 = v178;
        operator delete(v178);
      }

    }
  }
  v160 = (__int128 *)v193[0];
  objc_msgSend_objectForKeyedSubscript_(v10, v63, (uint64_t)CFSTR("plane_index"), v64, v65);
  v161 = (void *)objc_claimAutoreleasedReturnValue();
  v166 = objc_msgSend_unsignedIntValue(v161, v162, v163, v164, v165);
  sub_1D543BD24((_DWORD *)v173, v160, v172, v166, a6);

  *(_QWORD *)&v188 = v193;
  sub_1D543E49C((void ***)&v188);

}

void sub_1D543BBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22)
{
  void *v22;
  uint64_t v23;
  void *v25;

  v25 = *(void **)(v23 - 184);
  if (v25)
  {
    *(_QWORD *)(v23 - 176) = v25;
    operator delete(v25);
  }

  *(_QWORD *)(v23 - 184) = v23 - 112;
  sub_1D543E49C((void ***)(v23 - 184));

  _Unwind_Resume(a1);
}

void sub_1D543BD24(_DWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X8>)
{
  __int128 *v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  const void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  const void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  __int128 v27;
  const void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  __int128 *v49;
  unsigned int v51;
  void *v52;
  void *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  void *v58;
  void *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  void *v64;
  void *v65;
  uint64_t v66;
  _OWORD v67[3];
  void *v68;
  void *v69;
  uint64_t v70;
  _OWORD v71[3];
  void *v72;
  void *v73;
  uint64_t v74;
  _OWORD v75[3];
  __int128 v76;
  uint64_t v77;
  _OWORD v78[3];
  void *v79;
  void *v80;
  uint64_t v81;
  _OWORD v82[3];
  void *v83;
  void *v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  void *v89;
  _BYTE *v90;
  _OWORD v91[3];
  void *v92;
  void *v93;
  uint64_t v94;
  _OWORD v95[3];
  void *v96;
  void *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  void *v102;
  _BYTE *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  void *v107;
  void *v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  void *__p;
  void *v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  void *v119;
  void *v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  void *v125;
  void *v126;
  uint64_t v127;

  v7 = a5;
  v8 = a2[1];
  *a5 = *a2;
  a5[1] = v8;
  a5[2] = a2[2];
  *((_QWORD *)a5 + 6) = 0;
  *((_QWORD *)a5 + 7) = 0;
  *((_QWORD *)a5 + 8) = 0;
  v47 = a5 + 3;
  sub_1D5287CCC((_QWORD *)a5 + 6, *((const void **)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 1);
  if (a1[54])
  {
    v9 = 0;
    v51 = 3;
    v49 = v7;
    do
    {
      v10 = v7[1];
      v122 = *v7;
      v123 = v10;
      v124 = v7[2];
      v126 = 0;
      v127 = 0;
      v125 = 0;
      sub_1D5287CCC(&v125, *((const void **)v7 + 6), *((_QWORD *)v7 + 7), (uint64_t)(*((_QWORD *)v7 + 7) - *((_QWORD *)v7 + 6)) >> 1);
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v11, (uint64_t)CFSTR("tile_%d_plane_%d_level_%d_canon_subband_LL"), v12, v13, a3, a4, v9);

      if (v125)
      {
        v126 = v125;
        operator delete(v125);
      }
      v14 = (__int128 *)((char *)a2 + 72 * v51 - 144);
      v15 = v14[1];
      v116 = *v14;
      v117 = v15;
      v118 = v14[2];
      v16 = (const void *)*((_QWORD *)v14 + 6);
      v120 = 0;
      v121 = 0;
      v119 = 0;
      sub_1D5287CCC(&v119, v16, *((_QWORD *)v14 + 7), (uint64_t)(*((_QWORD *)v14 + 7) - (_QWORD)v16) >> 1);
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v17, (uint64_t)CFSTR("tile_%d_plane_%d_level_%d_canon_subband_HL"), v18, v19, a3, a4, v9);

      if (v119)
      {
        v120 = v119;
        operator delete(v119);
      }
      v20 = (__int128 *)((char *)a2 + 72 * v51 - 72);
      v21 = v20[1];
      v110 = *v20;
      v111 = v21;
      v112 = v20[2];
      v22 = (const void *)*((_QWORD *)v20 + 6);
      v114 = 0;
      v115 = 0;
      __p = 0;
      sub_1D5287CCC(&__p, v22, *((_QWORD *)v20 + 7), (uint64_t)(*((_QWORD *)v20 + 7) - (_QWORD)v22) >> 1);
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v23, (uint64_t)CFSTR("tile_%d_plane_%d_level_%d_canon_subband_LH"), v24, v25, a3, a4, v9);

      if (__p)
      {
        v114 = __p;
        operator delete(__p);
      }
      v26 = (__int128 *)((char *)a2 + 72 * v51);
      v27 = v26[1];
      v104 = *v26;
      v105 = v27;
      v106 = v26[2];
      v28 = (const void *)*((_QWORD *)v26 + 6);
      v108 = 0;
      v109 = 0;
      v107 = 0;
      sub_1D5287CCC(&v107, v28, *((_QWORD *)v26 + 7), (uint64_t)(*((_QWORD *)v26 + 7) - (_QWORD)v28) >> 1);
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v29, (uint64_t)CFSTR("tile_%d_plane_%d_level_%d_canon_subband_HH"), v30, v31, a3, a4, v9);

      if (v107)
      {
        v108 = v107;
        operator delete(v107);
      }
      v32 = v49[1];
      v95[0] = *v49;
      v95[1] = v32;
      v95[2] = v49[2];
      v97 = 0;
      v98 = 0;
      v96 = 0;
      sub_1D5287CCC(&v96, *((const void **)v49 + 6), *((_QWORD *)v49 + 7), (uint64_t)(*((_QWORD *)v49 + 7) - *((_QWORD *)v49 + 6)) >> 1);
      v33 = v14[1];
      v91[0] = *v14;
      v91[1] = v33;
      v91[2] = v14[2];
      v93 = 0;
      v94 = 0;
      v92 = 0;
      sub_1D5287CCC(&v92, *((const void **)v14 + 6), *((_QWORD *)v14 + 7), (uint64_t)(*((_QWORD *)v14 + 7) - *((_QWORD *)v14 + 6)) >> 1);
      sub_1D543C600(a1, (uint64_t)v95, (double *)v91, 1, a3, v9, (uint64_t)&v99);
      if (v92)
      {
        v93 = v92;
        operator delete(v92);
      }
      if (v96)
      {
        v97 = v96;
        operator delete(v96);
      }
      v34 = v20[1];
      v82[0] = *v20;
      v82[1] = v34;
      v82[2] = v20[2];
      v84 = 0;
      v85 = 0;
      v83 = 0;
      sub_1D5287CCC(&v83, *((const void **)v20 + 6), *((_QWORD *)v20 + 7), (uint64_t)(*((_QWORD *)v20 + 7) - *((_QWORD *)v20 + 6)) >> 1);
      v35 = v26[1];
      v78[0] = *v26;
      v78[1] = v35;
      v78[2] = v26[2];
      v80 = 0;
      v81 = 0;
      v79 = 0;
      sub_1D5287CCC(&v79, *((const void **)v26 + 6), *((_QWORD *)v26 + 7), (uint64_t)(*((_QWORD *)v26 + 7) - *((_QWORD *)v26 + 6)) >> 1);
      v7 = v49;
      sub_1D543C600(a1, (uint64_t)v82, (double *)v78, 1, a3, v9, (uint64_t)&v86);
      if (v79)
      {
        v80 = v79;
        operator delete(v79);
      }
      if (v83)
      {
        v84 = v83;
        operator delete(v83);
      }
      v71[0] = v99;
      v71[1] = v100;
      v71[2] = v101;
      v73 = 0;
      v74 = 0;
      v72 = 0;
      sub_1D5287CCC(&v72, v102, (uint64_t)v103, (v103 - (_BYTE *)v102) >> 1);
      v67[0] = v86;
      v67[1] = v87;
      v67[2] = v88;
      v69 = 0;
      v70 = 0;
      v68 = 0;
      sub_1D5287CCC(&v68, v89, (uint64_t)v90, (v90 - (_BYTE *)v89) >> 1);
      sub_1D543C600(a1, (uint64_t)v71, (double *)v67, 0, a3, v9, (uint64_t)v75);
      v36 = v75[1];
      *v49 = v75[0];
      v49[1] = v36;
      v49[2] = v75[2];
      v37 = (void *)*((_QWORD *)v49 + 6);
      if (v37)
      {
        *((_QWORD *)v49 + 7) = v37;
        operator delete(v37);
        *v47 = 0;
        v47[1] = 0;
        v47[2] = 0;
      }
      v49[3] = v76;
      *((_QWORD *)v49 + 8) = v77;
      v77 = 0;
      v76 = 0uLL;
      if (v68)
      {
        v69 = v68;
        operator delete(v68);
      }
      if (v72)
      {
        v73 = v72;
        operator delete(v72);
      }
      v61 = v99;
      v62 = v100;
      v63 = v101;
      v65 = 0;
      v66 = 0;
      v64 = 0;
      sub_1D5287CCC(&v64, v102, (uint64_t)v103, (v103 - (_BYTE *)v102) >> 1);
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v38, (uint64_t)CFSTR("tile_%d_plane_%d_level_%d_canon_outTop"), v39, v40, a3, a4, v9);

      if (v64)
      {
        v65 = v64;
        operator delete(v64);
      }
      v55 = v86;
      v56 = v87;
      v57 = v88;
      v59 = 0;
      v60 = 0;
      v58 = 0;
      sub_1D5287CCC(&v58, v89, (uint64_t)v90, (v90 - (_BYTE *)v89) >> 1);
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v41, (uint64_t)CFSTR("tile_%d_plane_%d_level_%d_canon_outBottom"), v42, v43, a3, a4, v9);

      if (v58)
      {
        v59 = v58;
        operator delete(v58);
      }
      v53 = 0;
      v54 = 0;
      v52 = 0;
      sub_1D5287CCC(&v52, *((const void **)v49 + 6), *((_QWORD *)v49 + 7), (uint64_t)(*((_QWORD *)v49 + 7) - *((_QWORD *)v49 + 6)) >> 1);
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v44, (uint64_t)CFSTR("tile_%d_plane_%d_level_%d_canon_out"), v45, v46, a3, a4, v9);

      if (v52)
      {
        v53 = v52;
        operator delete(v52);
      }
      if (v89)
      {
        v90 = v89;
        operator delete(v89);
      }
      if (v102)
      {
        v103 = v102;
        operator delete(v102);
      }
      ++v9;
      v51 += 3;
    }
    while (v9 < a1[54]);
  }
}

void sub_1D543C47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  void *v72;
  void *v73;
  void *v74;

  if (__p)
    operator delete(__p);
  v72 = (void *)STACK[0x3B8];
  if (STACK[0x3B8])
  {
    STACK[0x3C0] = (unint64_t)v72;
    operator delete(v72);
  }
  v73 = (void *)STACK[0x498];
  if (STACK[0x498])
  {
    STACK[0x4A0] = (unint64_t)v73;
    operator delete(v73);
  }
  v74 = *a12;
  if (*a12)
  {
    *(_QWORD *)(a42 + 56) = v74;
    operator delete(v74);
  }
  _Unwind_Resume(a1);
}

void sub_1D543C600(_DWORD *a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, int a4@<W3>, unsigned int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  _DWORD *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  _WORD *v52;
  unsigned int v55;
  id v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  double v63;
  double v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  int v77;
  _WORD *v78;
  uint64_t v79;
  _WORD *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  _WORD *v85;
  unsigned int v86;
  _BOOL4 v87;
  int v88;
  _WORD *v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  int v93;
  BOOL v94;
  unsigned int v95;
  _WORD *v96;
  _WORD *v97;
  BOOL v98;
  _WORD *v99;
  unint64_t v100;
  int v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  __int16 *v105;
  __int16 *v106;
  __int16 v107;
  __int16 v108;
  int v109;
  int v110;
  BOOL v111;
  int v112;
  uint64_t i;
  int v114;
  int v115;
  void *v116;
  void *exception;
  void *v118;
  int v119;
  id v120;
  uint64_t v121;
  unsigned int v122;
  double *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v129;
  uint64_t v130;
  unsigned int v131;

  v10 = *(double *)a2;
  v11 = *(double *)(a2 + 8);
  v12 = *(double *)(a2 + 16) + v10;
  if (a4)
  {
    v13 = 0;
    v12 += a3[2];
    v14 = *(double *)a2;
  }
  else
  {
    v13 = a3[3];
    v14 = *(double *)(a2 + 8);
  }
  v15 = v13 + v11 + *(double *)(a2 + 24);
  *(_QWORD *)(a7 + 48) = 0;
  *(_QWORD *)(a7 + 56) = 0;
  *(_QWORD *)(a7 + 64) = 0;
  *(double *)a7 = (double)v10;
  *(double *)(a7 + 8) = (double)v11;
  *(double *)(a7 + 16) = (double)(v12 - v10);
  *(double *)(a7 + 24) = (double)(v15 - v11);
  *(_OWORD *)(a7 + 32) = *(_OWORD *)(a7 + 16);
  if (!a4)
    LOBYTE(v12) = v15;
  v16 = v14 & 1;
  if ((v14 & 1) != 0)
    v17 = 2;
  else
    v17 = 1;
  if ((v12 & 1) != 0)
    v18 = 1;
  else
    v18 = 2;
  v19 = a1[58];
  v20 = a5 % v19;
  v21 = v19 - 1;
  v22 = a1[54];
  v23 = ~(-1 << v22);
  if (a4)
  {
    if (a1[60])
    {
      v24 = a1[52];
      if (v20)
        v25 = *(_QWORD *)&dword_1D545C650[2 * a6];
      else
        v25 = 0;
      if (v20 == v21)
      {
LABEL_25:
        v26 = 0;
        v27 = 0;
        goto LABEL_26;
      }
      goto LABEL_22;
    }
  }
  else if (a1[61])
  {
    v24 = a1[53];
    if (v19 <= a5)
      v25 = *(_QWORD *)&dword_1D545C650[2 * a6];
    else
      v25 = 0;
    if (a5 / v19 == a1[59] - 1)
      goto LABEL_25;
LABEL_22:
    v28 = &dword_1D545C668[6 * (v23 & (v24 >> 1))];
    v26 = v28[2 * a6];
    v27 = v28[(2 * a6) | 1];
    goto LABEL_26;
  }
  v26 = 0;
  v27 = 0;
  v25 = 0;
LABEL_26:
  v130 = v25;
  if (a1[60] && a6 + 1 < v22)
  {
    v29 = 2 * (a6 + 1);
    if (v20)
      v30 = dword_1D545C650[v29];
    else
      v30 = 0;
    if (v20 == v21)
      v31 = 0;
    else
      v31 = dword_1D545C668[6 * (v23 & (a1[52] >> 1)) + v29];
    *(double *)(a7 + 32) = *(double *)(a7 + 32) + (double)v30 + (double)v31;
  }
  v129 = v19 - 1;
  v127 = v17;
  sub_1D535F91C(a7 + 48, *(double *)(a7 + 40) * *(double *)(a7 + 32));
  v35 = *(_QWORD *)(a7 + 48);
  v36 = (double)(v27 + HIDWORD(v130));
  if (a4)
  {
    if (a3[4] - a3[2] != v36 || *(double *)(a2 + 32) - *(double *)(a2 + 16) != (double)(v26 + v130))
      goto LABEL_116;
  }
  else if (a3[5] - a3[3] != v36 || *(double *)(a2 + 40) - *(double *)(a2 + 24) != (double)(v26 + v130))
  {
LABEL_116:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v119 = v16;
  v123 = a3;
  v37 = 40;
  if (a4)
    v37 = 32;
  v38 = *(double *)(a7 + v37);
  v39 = v130;
  v40 = HIDWORD(v130) + v130;
  if (v127 <= HIDWORD(v130) + (int)v130)
    v41 = HIDWORD(v130) + v130;
  else
    v41 = v127;
  v42 = v27 + v26;
  if (v18 <= v42)
    v43 = v42;
  else
    v43 = v18;
  v44 = v43 + v41 + (_DWORD)v38;
  objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v32, 2 * v44, v33, v34);
  v120 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v52 = (_WORD *)objc_msgSend_mutableBytes(v120, v45, v46, v47, v48);
  if ((v38 & 1) == 0 && v20 != v129 && v42 > 1)
    v55 = v38 + 1;
  else
    v55 = v38;
  v131 = v55;
  objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v49, 2 * v38, v50, v51);
  v56 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v61 = objc_msgSend_mutableBytes(v56, v57, v58, v59, v60);
  v62 = v127;
  if (v127 < v40 || v39 || v119)
  {
    v116 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v116, "RawCameraException");
    __cxa_throw(v116, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v118 = v56;
  v63 = *(double *)(a7 + 32);
  v64 = *(double *)(a7 + 40);
  if (!a4)
    v64 = *(double *)(a7 + 32);
  if (v64)
  {
    v65 = 0;
    v66 = *(double *)(a2 + 32);
    v67 = v123[4];
    if (a4)
      v68 = 1;
    else
      v68 = *(double *)(a2 + 32);
    if (a4)
      v69 = 1;
    else
      v69 = v123[4];
    v70 = 5;
    if (a4)
      v70 = 4;
    v71 = v123[v70];
    v125 = *(_QWORD *)(a2 + 48);
    v72 = *((_QWORD *)v123 + 6);
    v73 = (v131 >> 1) + 1;
    if (v131 >> 1 <= 1)
      v74 = 1;
    else
      v74 = v131 >> 1;
    v126 = *(double *)(a2 + 32);
    v124 = *((_QWORD *)v123 + 6);
    v122 = v67;
    v121 = v74;
    do
    {
      v75 = v66;
      v76 = v66;
      v77 = v67;
      if ((a4 & 1) == 0)
      {
        v75 = *(double *)(a2 + 40);
        v76 = 1;
        v77 = 1;
      }
      v78 = (_WORD *)(v72 + 2 * (v77 * v65));
      *v52 = *v78;
      v79 = v73;
      v80 = (_WORD *)v61;
      v81 = v62;
      if (v44 >= 2)
      {
        v82 = v73;
        v83 = 0;
        v84 = 0;
        v85 = (_WORD *)(v125 + 2 * (v76 * v65));
        v86 = HIDWORD(v130);
        do
        {
          v87 = v84 >= v75;
          v88 = ((_BYTE)v83 + 1) & 1;
          if ((((_BYTE)v83 + 1) & 1) == 0)
            v87 = v86 >= v71;
          v89 = &v85[v84 * v68];
          v90 = v84 + v88;
          if ((((_BYTE)v83 + 1) & 1) == 0)
            v89 = &v78[v86 * v69];
          v91 = (v83 - v38) >> 1;
          v92 = (v71 - 2 - v91) * v69;
          v93 = (v75 + ~v91) * v68;
          v94 = v88 == 0;
          if ((((_BYTE)v83 + 1) & 1) != 0)
            v95 = v93;
          else
            v95 = v92;
          if (v94)
            v96 = v78;
          else
            v96 = v85;
          v97 = &v96[v95];
          v98 = v87;
          if (v87)
            v99 = v97;
          else
            v99 = v89;
          if (!v98)
          {
            v86 += !(((_BYTE)v83 + 1) & 1);
            v84 = v90;
          }
          v52[v83 + 1] = *v99;
          v100 = v83 + 2;
          ++v83;
        }
        while (v100 < v44);
        v73 = v82;
        v79 = v82;
        v80 = (_WORD *)v61;
        v62 = v127;
        v81 = v127;
        v67 = v122;
        v66 = v126;
        v72 = v124;
        v74 = v121;
      }
      do
      {
        v101 = (__int16)v52[v81 - 1] + (__int16)v52[v81 + 1];
        v102 = v101 + 2;
        v103 = v101 + 5;
        if (v102 >= 0)
          v103 = v102;
        *v80 = v52[v81] - (v103 >> 2);
        v80 += 2;
        v81 += 2;
        --v79;
      }
      while (v79);
      v104 = v74;
      v105 = v52 + 2;
      v106 = (__int16 *)(v61 + 4);
      if (v131 >= 2)
      {
        do
        {
          v108 = *v105;
          v105 += 2;
          v107 = v108;
          v109 = *(v106 - 2);
          v110 = *v106;
          v111 = __OFADD__(v110, v109);
          v112 = v110 + v109;
          if (v112 < 0 != v111)
            ++v112;
          *(v106 - 1) = v107 + (v112 >> 1);
          v106 += 2;
          --v104;
        }
        while (v104);
      }
      if ((_DWORD)v38)
      {
        for (i = 0; i != v38; ++i)
        {
          if (a4)
            v114 = v65;
          else
            v114 = i;
          if (a4)
            v115 = i;
          else
            v115 = v65;
          *(_WORD *)(v35 + 2 * (v115 + v114 * v63)) = *(_WORD *)(v61 + 2 * i);
        }
      }
      ++v65;
    }
    while (v65 != v64);
  }

}

void sub_1D543CD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v20;

  v20 = *a16;
  if (*a16)
  {
    *(_QWORD *)(a19 + 56) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_1D543CDC8(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  void *v113;
  unint64_t v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  id v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  void *v148;
  uint64_t v149;
  unsigned int v150;
  void *v151;
  uint64_t v152;
  unint64_t v153;
  NSObject *v154;
  unsigned int v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  unint64_t v163;
  uint64_t v164;
  _WORD *v165;
  int v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  unsigned int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  __int16 v176;
  int v177;
  int v178;
  int v179;
  unsigned int v180;
  __int16 v181;
  int v182;
  __int16 v183;
  __int16 v184;
  int v185;
  __int16 v186;
  __int16 v187;
  int v188;
  __int16 v189;
  __int16 v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  unint64_t v200;
  void *exception;
  void *v202;
  void (**v203)(_QWORD);
  int v204;
  NSObject *v205;
  void *v206;
  void *v207;
  id v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  _QWORD block[4];
  id v213;
  id v214;
  id v215;
  id v216;
  uint8_t *v217;
  uint64_t v218;
  unsigned int v219;
  int v220;
  int v221;
  void **v222[3];
  int v223;
  uint8_t buf[8];
  uint8_t *v225;
  uint64_t v226;
  __n128 (*v227)(__n128 *, __n128 *);
  void (*v228)(uint64_t);
  const char *v229;
  _QWORD v230[4];
  _QWORD v231[6];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CCanonCR3Unpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v231[0] = MEMORY[0x1E0C809B0];
  v231[1] = 3221225472;
  v231[2] = sub_1D543D858;
  v231[3] = &unk_1E996F870;
  v231[4] = a1;
  v203 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v231);
  if (*(_DWORD *)(a1 + 224) != 4 || *(_DWORD *)(a1 + 188) >= 0x11u)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (*(_DWORD *)(a1 + 48) != *(_DWORD *)(a1 + 212))
  {
    v202 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v202, "RawCameraException");
    __cxa_throw(v202, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v4 = *(unsigned int *)(a1 + 44);
  v211 = (uint64_t *)(a1 + 24);
  *(_DWORD *)buf = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
  v204 = sub_1D52ADF28((unsigned int *)buf);
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 200), v5, (uint64_t)CFSTR("tile_headers"), v6, v7);
  v207 = (void *)objc_claimAutoreleasedReturnValue();
  v210 = a1;
  if (*(_DWORD *)(a1 + 228))
  {
    v11 = 0;
    do
    {
      v209 = v11;
      objc_msgSend_objectAtIndexedSubscript_(v207, v8, v11, v9, v10, v203);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v12, v13, (uint64_t)CFSTR("plane_headers"), v14, v15);
      v206 = (void *)objc_claimAutoreleasedReturnValue();

      *(_QWORD *)buf = 0;
      v225 = buf;
      v226 = 0x4812000000;
      v227 = sub_1D543D8DC;
      v228 = sub_1D543D900;
      v229 = "";
      sub_1D543E358(v230, *(unsigned int *)(v210 + 224));
      v223 = v204;
      if (v209)
      {
        objc_msgSend_objectAtIndexedSubscript_(v207, v16, v209 - 1, v17, v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v19, v20, (uint64_t)CFSTR("tile_data_length"), v21, v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = objc_msgSend_unsignedIntValue(v23, v24, v25, v26, v27);
        v223 += v28;

      }
      objc_msgSend_objectForKeyedSubscript_(*(void **)(v210 + 200), v16, (uint64_t)CFSTR("version"), v17, v18);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = objc_msgSend_unsignedIntValue(v29, v30, v31, v32, v33);

      if (v34 == 512)
      {
        objc_msgSend_objectAtIndexedSubscript_(v207, v35, v209, v37, v38);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v39, v40, (uint64_t)CFSTR("tile_qpinfo_flag"), v41, v42);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        v48 = objc_msgSend_BOOLValue(v43, v44, v45, v46, v47);

        if (v48)
        {
          objc_msgSend_objectAtIndexedSubscript_(v207, v49, v209, v50, v51);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKeyedSubscript_(v52, v53, (uint64_t)CFSTR("qp_data_length"), v54, v55);
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          v61 = objc_msgSend_unsignedIntValue(v56, v57, v58, v59, v60);

          objc_msgSend_objectAtIndexedSubscript_(v207, v62, v209, v63, v64);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKeyedSubscript_(v65, v66, (uint64_t)CFSTR("qp_stuffing_data_length"), v67, v68);
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          v74 = objc_msgSend_unsignedIntValue(v69, v70, v71, v72, v73);

          sub_1D5282F74(&v221, &v223);
          sub_1D5285164((uint64_t *)v222, v211, (uint64_t)&v221, 0);
          objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v75, v74 + (unint64_t)v61, v76, v77);
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          v79 = *v211;
          v208 = objc_retainAutorelease(v78);
          v84 = objc_msgSend_mutableBytes(v208, v80, v81, v82, v83);
          v89 = objc_msgSend_length(v208, v85, v86, v87, v88);
          sub_1D5284728(v79, v84, v89);
          sub_1D5285200((uint64_t *)v222);
        }
        else
        {
          v208 = 0;
        }
        objc_msgSend_objectAtIndexedSubscript_(v207, v49, v209, v50, v51);
        v90 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v90, v91, (uint64_t)CFSTR("qp_data_length"), v92, v93);
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        v99 = objc_msgSend_unsignedIntValue(v94, v95, v96, v97, v98);
        v223 += v99;

        objc_msgSend_objectAtIndexedSubscript_(v207, v100, v209, v101, v102);
        v103 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_objectForKeyedSubscript_(v103, v104, (uint64_t)CFSTR("qp_stuffing_data_length"), v105, v106);
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        v112 = objc_msgSend_unsignedIntValue(v107, v108, v109, v110, v111);
        v223 += v112;

      }
      else
      {
        v208 = 0;
      }
      objc_msgSend_array(MEMORY[0x1E0C99DE8], v35, v36, v37, v38);
      v113 = (void *)objc_claimAutoreleasedReturnValue();
      if (*(_DWORD *)(v210 + 224))
      {
        v114 = 0;
        do
        {
          sub_1D5282F74(&v221, &v223);
          sub_1D5285164((uint64_t *)v222, v211, (uint64_t)&v221, 0);
          objc_msgSend_objectAtIndexedSubscript_(v206, v115, v114, v116, v117);
          v118 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_objectForKeyedSubscript_(v118, v119, (uint64_t)CFSTR("plane_data_length"), v120, v121);
          v122 = (void *)objc_claimAutoreleasedReturnValue();
          v127 = objc_msgSend_unsignedIntValue(v122, v123, v124, v125, v126);

          objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v128, v127, v129, v130);
          v131 = (void *)objc_claimAutoreleasedReturnValue();
          v132 = *v211;
          v133 = objc_retainAutorelease(v131);
          v138 = objc_msgSend_mutableBytes(v133, v134, v135, v136, v137);
          v143 = objc_msgSend_length(v133, v139, v140, v141, v142);
          sub_1D5284728(v132, v138, v143);
          objc_msgSend_addObject_(v113, v144, (uint64_t)v133, v145, v146);
          v223 += v127;

          sub_1D5285200((uint64_t *)v222);
          ++v114;
        }
        while (v114 < *(unsigned int *)(v210 + 224));
      }
      v147 = dispatch_group_create();
      (*(void (**)(uint64_t))(*(_QWORD *)v210 + 192))(v210);
      v205 = objc_claimAutoreleasedReturnValue();
      v148 = v206;
      v149 = MEMORY[0x1E0C809B0];
      if (*(_DWORD *)(v210 + 224))
      {
        v150 = 0;
        do
        {
          block[0] = v149;
          block[1] = 3221225472;
          block[2] = sub_1D543D928;
          block[3] = &unk_1E99A68B8;
          v217 = buf;
          v218 = v210;
          v219 = v150;
          v151 = v148;
          v213 = v148;
          v214 = v113;
          v215 = v207;
          v220 = v209;
          v216 = v208;
          dispatch_group_async(v147, v205, block);

          v148 = v151;
          ++v150;
        }
        while (v150 < *(_DWORD *)(v210 + 224));
      }
      dispatch_group_wait(v147, 0xFFFFFFFFFFFFFFFFLL);
      v152 = sub_1D530B618(v210);
      v153 = *(unsigned int *)(v210 + 212);
      v154 = v147;
      if ((_DWORD)v153)
      {
        v155 = 0;
        v156 = 0;
        v157 = *((_QWORD *)v225 + 6);
        v158 = *(_QWORD *)(v157 + 48);
        v159 = *(_QWORD *)(v157 + 120);
        v160 = *(_QWORD *)(v157 + 192);
        v161 = *(_QWORD *)(v157 + 264);
        v162 = *(double *)(v157 + 16);
        v163 = *(unsigned int *)(v210 + 208);
        v164 = v152 + 2 * (v163 * v209);
        do
        {
          if ((_DWORD)v163)
          {
            v165 = (_WORD *)(v164 + 2 * (v4 * v156));
            v166 = *(_DWORD *)(v210 + 248);
            v167 = *(_DWORD *)(v210 + 252);
            v168 = 1 << (v167 - 1);
            v169 = ~(-1 << v167);
            v170 = 1;
            v171 = v155;
            do
            {
              v172 = *(__int16 *)(v159 + 2 * v171);
              v173 = *(__int16 *)(v160 + 2 * v171);
              v174 = *(__int16 *)(v161 + 2 * v171);
              v175 = v168 + *(__int16 *)(v158 + 2 * v171);
              if (v175 >= v169)
                v176 = v169;
              else
                v176 = v168 + *(_WORD *)(v158 + 2 * v171);
              if (v166)
              {
                v177 = v176 << 10;
                if (v175 >= 0)
                  v178 = v177;
                else
                  v178 = 0;
                v179 = -168 * v172 - 585 * v174 + v178;
                if (v179 < 0)
                  v180 = -((512 - v179) >> 10);
                else
                  v180 = (v179 + 512) >> 10;
                v191 = v178 + 1510 * v174;
                v192 = 2 * v180;
                v193 = v173 + 2 * v180;
                v194 = v192 - v173;
                v195 = v178 + 1927 * v172;
                if (v191 >= 0)
                  v196 = (v191 + 512) >> 10;
                else
                  v196 = 0;
                v197 = (v193 + 1) >> 1;
                if (v193 < 0)
                  v197 = 0;
                if (v194 >= 0)
                  v198 = (v194 + 1) >> 1;
                else
                  v198 = 0;
                if (v195 >= 0)
                  v199 = (v195 + 512) >> 10;
                else
                  v199 = 0;
                if (v196 >= v169)
                  LOWORD(v196) = v169;
                if (v197 >= v169)
                  LOWORD(v197) = v169;
                if (v198 >= v169)
                  LOWORD(v198) = v169;
                *v165 = v196;
                if (v199 >= v169)
                  v190 = v169;
                else
                  v190 = v199;
                v165[1] = v197;
                v165[v4] = v198;
                v154 = v147;
              }
              else
              {
                if (v175 >= 0)
                  v181 = v176;
                else
                  v181 = 0;
                *v165 = v181;
                v182 = v168 + v172;
                if (v182 >= v169)
                  v183 = v169;
                else
                  v183 = v182;
                if (v182 >= 0)
                  v184 = v183;
                else
                  v184 = 0;
                v165[1] = v184;
                v185 = v168 + v173;
                if (v185 >= v169)
                  v186 = v169;
                else
                  v186 = v185;
                if (v185 >= 0)
                  v187 = v186;
                else
                  v187 = 0;
                v165[v4] = v187;
                v188 = v168 + v174;
                if (v188 >= v169)
                  v189 = v169;
                else
                  v189 = v188;
                if (v188 >= 0)
                  v190 = v189;
                else
                  v190 = 0;
              }
              v165[(v4 + 1)] = v190;
              v165 += 2;
              ++v171;
              v200 = v170 + 1;
              v170 += 2;
            }
            while (v200 < v163);
          }
          v156 += 2;
          v155 += v162;
        }
        while (v156 < v153);
      }

      _Block_object_dispose(buf, 8);
      v222[0] = (void **)v230;
      sub_1D543E49C(v222);

      v11 = v209 + 1;
    }
    while (v209 + 1 < (unint64_t)*(unsigned int *)(v210 + 228));
  }

  v203[2](v203);
}

void sub_1D543D6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_1D543D858(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CCanonCR3Unpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

__n128 sub_1D543D8DC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1D543D900(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  sub_1D543E49C(&v1);
}

void sub_1D543D928(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  __int128 v25[3];
  __int128 v26;
  uint64_t v27;

  v6 = *(_QWORD *)(a1 + 72);
  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), a2, *(unsigned int *)(a1 + 80), a4, a5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v8, *(unsigned int *)(a1 + 80), v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 48), v12, *(unsigned int *)(a1 + 84), v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D543B4EC(v6, v7, v11, v15, *(void **)(a1 + 56), v25);
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v17 = *(_DWORD *)(a1 + 80);
  v18 = *(_QWORD *)(v16 + 48);
  v19 = v18 + 72 * v17;
  v20 = v25[0];
  v21 = v25[2];
  *(_OWORD *)(v19 + 16) = v25[1];
  *(_OWORD *)(v19 + 32) = v21;
  *(_OWORD *)v19 = v20;
  v24 = *(void **)(v19 + 48);
  v23 = (_QWORD *)(v19 + 48);
  v22 = v24;
  if (v24)
  {
    *(_QWORD *)(v18 + 72 * v17 + 56) = v22;
    operator delete(v22);
    *v23 = 0;
    v23[1] = 0;
    v23[2] = 0;
  }
  *(_OWORD *)v23 = v26;
  *(_QWORD *)(v18 + 72 * v17 + 64) = v27;
  v26 = 0uLL;
  v27 = 0;

}

void sub_1D543DA40(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D543DA24);
}

_QWORD *sub_1D543DA78(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E99A68E8;
  sub_1D5282EB4(a1 + 264);

  return sub_1D5282F0C((_QWORD *)a1);
}

void sub_1D543DAB4(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E99A68E8;
  sub_1D5282EB4(a1 + 264);

  sub_1D5282F0C((_QWORD *)a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D543DB04(int a1, unsigned int a2, int a3, void *a4, uint64_t *a5, int a6)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  _BOOL4 v25;
  BOOL v27;
  _BOOL4 v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  __int16 v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  __int16 v50;
  __int16 v51;
  int v52;
  int v53;
  __int16 v54;
  signed int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  id v68;
  __int16 v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  _DWORD *v74;
  int v75;
  int v77;
  int v78;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  unsigned int *v88;

  v68 = objc_retainAutorelease(a4);
  v13 = (unsigned int *)objc_msgSend_bytes(v68, v9, v10, v11, v12);
  v18 = objc_msgSend_length(v68, v14, v15, v16, v17);
  v19 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v86 = v18;
  v87 = bswap32(*v13);
  v88 = v13;
  if ((a1 & 1) == 0)
    v19 = malloc_type_calloc(a2, 4uLL, 0x100004052888210uLL);
  v74 = v19;
  v77 = 0;
  v75 = 0;
  v78 = 0;
  v20 = 0;
  v21 = 0;
  v81 = a2 - 1;
  v82 = 0;
  if (a6)
    v22 = 7;
  else
    v22 = 15;
  v80 = a3 * a2;
  if (a6)
    v23 = 24;
  else
    v23 = 42;
  if (a6)
    v24 = 8;
  else
    v24 = 21;
  v70 = v24;
  v73 = v23;
  v71 = v22;
  v72 = v23 - 1;
  do
  {
    v25 = sub_1D531A4F8(&v83, 1);
    if (v82 >= v80 || !v25)
      break;
    v27 = v21 == 0;
    v28 = v21 == v81;
    if ((a1 & 1) != 0)
    {
      if (!v20)
        goto LABEL_26;
      if (!v21)
        goto LABEL_28;
      v29 = *a5;
      v30 = *(unsigned __int16 *)(*a5 + 2 * (v21 + v20 * a2 - 1));
      v31 = v21 + (v20 - 1) * a2;
      v32 = *(_WORD *)(*a5 + 2 * (v31 - 1));
      v33 = *(unsigned __int16 *)(*a5 + 2 * v31);
    }
    else
    {
      if (!v20)
      {
LABEL_26:
        if (v21)
        {
          v33 = 0;
          v32 = 0;
          v34 = 0;
          v30 = *(unsigned __int16 *)(*a5 + 2 * (v21 - 1));
        }
        else
        {
          v30 = 0;
          v33 = 0;
          v32 = 0;
          v34 = 0;
        }
        goto LABEL_31;
      }
      if (!v21)
      {
LABEL_28:
        v35 = (v20 - 1) * a2;
        v30 = *(unsigned __int16 *)(*a5 + 2 * v35);
        v34 = *(unsigned __int16 *)(*a5 + 2 * (v35 + 1));
        v33 = v30;
        v32 = *(_WORD *)(*a5 + 2 * v35);
        goto LABEL_31;
      }
      v29 = *a5;
      v30 = *(unsigned __int16 *)(*a5 + 2 * (v21 + v20 * a2 - 1));
      v31 = v21 + (v20 - 1) * a2;
      v33 = *(unsigned __int16 *)(*a5 + 2 * v31);
      v32 = *(_WORD *)(*a5 + 2 * (v31 - 1));
    }
    if (v21 == v81)
    {
      LOWORD(v34) = 0;
      v27 = 0;
      v28 = 1;
      v21 = a2 - 1;
      goto LABEL_87;
    }
    v34 = *(unsigned __int16 *)(v29 + 2 * (v31 + 1));
LABEL_31:
    if (v21 != v81 && (a6 & 1) == 0)
    {
      if (!a1)
      {
        if (v30 | v33)
          goto LABEL_40;
        if (v34)
        {
          LOWORD(v30) = 0;
          LOWORD(v33) = 0;
LABEL_40:
          v28 = 0;
          goto LABEL_87;
        }
LABEL_41:
        v69 = v34;
        v36 = dword_1D545C9BC[v77];
        if (!sub_1D531A420((uint64_t)&v83))
          goto LABEL_66;
        v37 = 0;
        v38 = a2 - v21;
        v39 = 1 << v36;
        while (sub_1D531A420((uint64_t)&v83))
        {
          v37 += v39;
          if (v37 < v38)
          {
            if (v77 <= 30)
              v39 = 1 << dword_1D545C9BC[++v77];
            if (v37 != a2 - v21 - 1)
              continue;
          }
          LODWORD(v40) = a2 - v21;
          goto LABEL_52;
        }
        v41 = v77;
        if (v77 >= 4)
        {
          v37 += sub_1D531A2F0((uint64_t)&v83, dword_1D545C9BC[v77]);
          v41 = v77;
        }
        v77 = v41 - (v41 > 0);
        LODWORD(v40) = v37 + 1;
LABEL_52:
        if ((int)v40 <= 0)
        {
LABEL_66:
          v28 = 0;
          v78 = 1;
          LOWORD(v34) = v69;
          v27 = v21 == 0;
          goto LABEL_87;
        }
        if (v38 >= (int)v40)
          v40 = v40;
        else
          v40 = v38;
        if ((_DWORD)v40)
        {
          v42 = *a5;
          v43 = v40;
          v44 = v21;
          do
          {
            *(_WORD *)(v42 + 2 * (v20 * a2 + v44)) = v30;
            if ((a1 & 1) == 0)
              v74[v44] = 0;
            ++v44;
            --v43;
          }
          while (v43);
        }
        v21 += v40;
        v82 += v40;
        v28 = v21 == v81;
        if ((a1 & 1) != 0)
        {
          if (v20)
          {
            if (v21)
            {
              LOWORD(v30) = *(_WORD *)(*a5 + 2 * (v21 + v20 * a2 - 1));
              v45 = v21 + (v20 - 1) * a2;
              v32 = *(_WORD *)(*a5 + 2 * (v45 - 1));
              LOWORD(v33) = *(_WORD *)(*a5 + 2 * v45);
              if (v21 == v81)
              {
                LOWORD(v34) = 0;
                v27 = 0;
                v78 = 1;
                v21 = a2 - 1;
                v28 = 1;
                goto LABEL_87;
              }
              v27 = 0;
              v28 = 0;
              LOWORD(v34) = *(_WORD *)(*a5 + 2 * (v45 + 1));
              goto LABEL_81;
            }
            v49 = (v20 - 1) * a2;
            LOWORD(v30) = *(_WORD *)(*a5 + 2 * v49);
            LOWORD(v34) = *(_WORD *)(*a5 + 2 * (v49 + 1));
            v78 = 1;
            LOWORD(v33) = v30;
            v32 = v30;
            goto LABEL_86;
          }
          if (v21)
          {
            LOWORD(v33) = 0;
            v32 = 0;
            goto LABEL_75;
          }
          LOWORD(v30) = 0;
          LOWORD(v33) = 0;
          v32 = 0;
LABEL_84:
          LOWORD(v34) = 0;
        }
        else
        {
          if (!v20)
          {
            if (v21)
            {
              LOWORD(v33) = 0;
LABEL_75:
              LOWORD(v34) = 0;
              v27 = 0;
              LOWORD(v30) = *(_WORD *)(*a5 + 2 * (v21 - 1));
LABEL_81:
              v78 = 1;
              goto LABEL_87;
            }
            LOWORD(v30) = 0;
            LOWORD(v33) = 0;
            goto LABEL_84;
          }
          v46 = (v20 - 1) * a2;
          if (v21)
          {
            v47 = v21 + v46;
            v48 = *a5;
            if (v21 == v81)
              LOWORD(v34) = 0;
            else
              LOWORD(v34) = *(_WORD *)(v48 + 2 * (v47 + 1));
            v27 = 0;
            LOWORD(v33) = *(_WORD *)(v48 + 2 * v47);
            LOWORD(v30) = *(_WORD *)(v48 + 2 * (v21 + v20 * a2 - 1));
            goto LABEL_81;
          }
          LOWORD(v30) = 0;
          LOWORD(v33) = *(_WORD *)(*a5 + 2 * v46);
          LOWORD(v34) = *(_WORD *)(*a5 + 2 * (v46 + 1));
        }
        v78 = 1;
LABEL_86:
        v27 = 1;
        goto LABEL_87;
      }
      v28 = 0;
      if (v30 == v33 && v33 == v34)
        goto LABEL_41;
    }
LABEL_87:
    if (v21 < a2)
    {
      v50 = v32;
      v51 = v34;
      v52 = (__int16)v33;
      if ((__int16)v30 <= (__int16)v33)
        v53 = (__int16)v33;
      else
        v53 = (__int16)v30;
      if ((__int16)v30 >= (__int16)v33)
        v54 = v33;
      else
        v54 = v30;
      if (a1)
      {
        if (v50 >= (__int16)v53)
        {
          v53 = v54;
        }
        else if (v50 > v54)
        {
          v53 = (__int16)v33 + (__int16)v30 - v50;
        }
        if ((v78 & 1) != 0)
          v33 = (__int16)v33;
        else
          v33 = v53;
      }
      else
      {
        v33 = 0;
      }
      v55 = sub_1D531A470((uint64_t)&v83, v73);
      v56 = v55;
      if (v55 >= v72)
      {
        if (v55 != v72)
          break;
        v56 = sub_1D531A2F0((uint64_t)&v83, v70);
      }
      else if (v75)
      {
        v56 = sub_1D531A2F0((uint64_t)&v83, v75) | (v55 << v75);
      }
      if ((v56 & 0x80000000) != 0)
        break;
      if (v56 >= 0x20)
      {
        if ((v56 & 1) != 0)
        {
          v57 = -((v56 + 1) >> 1);
          if ((a1 & 1) != 0)
            goto LABEL_120;
          goto LABEL_116;
        }
        v57 = v56 >> 1;
        if ((a1 & 1) == 0)
          goto LABEL_116;
LABEL_120:
        v58 = v75;
      }
      else
      {
        v57 = dword_1D545C93C[v56 & 0x1F];
        if ((a1 & 1) != 0)
          goto LABEL_120;
LABEL_116:
        if (((v78 ^ 1) & 1) != 0)
          goto LABEL_120;
        v58 = v75;
        if ((a6 & 1) == 0)
        {
          if ((v56 & 1) != 0)
            v57 = (v56 + 1) >> 1;
          else
            v57 = -((v56 + 2) >> 1);
        }
      }
      v59 = v57 + v33;
      if (a6)
      {
        if (v27 && v20 == 0)
          v59 += 4;
        if (v59 >= 127)
          v59 = 127;
        v59 &= ~(v59 >> 31);
      }
      if (v20 && ((v28 | a1 ^ 1) & 1) == 0)
      {
        v60 = v51 - v52;
        if (v60 < 0)
          v60 = v52 - v51;
        v56 = v60 + (v56 >> 1);
      }
      if (v56 >> v58 <= 5)
      {
        if (v56 >> v58 <= 2)
        {
          if ((int)v56 >= 1 << v58 >> 1)
            v61 = 0;
          else
            v61 = -1;
        }
        else
        {
          v61 = 1;
        }
      }
      else
      {
        v61 = 2;
      }
      v62 = v58 + v61;
      if (v20)
        v63 = a1;
      else
        v63 = 1;
      if (((v63 | v28) & 1) == 0 && v74[v21 + 1] - v62 > 1)
        ++v62;
      v64 = v71;
      if (v62 <= v71)
        v64 = v62 & ~(v62 >> 31);
      if (v59 <= -32768)
        v59 = -32768;
      if (v59 >= 0x7FFF)
        LOWORD(v59) = 0x7FFF;
      *(_WORD *)(*a5 + 2 * (v21 + v20 * a2)) = v59;
      if ((a1 & 1) == 0)
        v74[v21] = v64;
      v75 = v64;
      v78 = 0;
      ++v21;
      ++v82;
    }
    if (v21 == a2)
    {
      if ((byte_1EFF389B8 & 0x40) != 0 && a6)
        sub_1D531A2E4((uint64_t)&v83);
      v78 = 0;
      v21 = 0;
      ++v20;
    }
  }
  while (v82 != v80);
  sub_1D531A2E4((uint64_t)&v83);
  if (v74)
    free(v74);
  v65 = v84;
  if (v84)
  {
    p_shared_owners = (unint64_t *)&v84->__shared_owners_;
    do
      v67 = __ldaxr(p_shared_owners);
    while (__stlxr(v67 - 1, p_shared_owners));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }

}

void sub_1D543E31C(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_1D5282EB4((uint64_t)va);

  _Unwind_Resume(a1);
}

_QWORD *sub_1D543E358(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D543E400(a1, a2);
    v4 = (char *)a1[1];
    v5 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1D543E3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1D543E49C(&a9);
  _Unwind_Resume(a1);
}

char *sub_1D543E400(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    sub_1D5282B8C();
  result = (char *)sub_1D543E454((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void *sub_1D543E454(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    sub_1D5282C48();
  return operator new(72 * a2);
}

void sub_1D543E49C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1D543E4DC((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1D543E4DC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 72)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

CFTypeRef sub_1D543E52C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF38940);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF38940))
  {
    qword_1EFF38938 = (uint64_t)CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], byte_1D545D288, 480, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    __cxa_guard_release(&qword_1EFF38940);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_1EFF38950);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF38950))
  {
    qword_1EFF38948 = MEMORY[0x1D82714B8](qword_1EFF38938);
    __cxa_guard_release(&qword_1EFF38950);
  }
  CGColorSpaceRetain((CGColorSpaceRef)qword_1EFF38948);
  return CFAutorelease((CFTypeRef)qword_1EFF38948);
}

void sub_1D543E5F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EFF38950);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1D543E61C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF388B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF388B0))
  {
    qword_1EFF388A8 = (uint64_t)CGColorSpaceCreateCalibratedGray(dbl_1D545CA40, 0, 1.0);
    __cxa_guard_release(&qword_1EFF388B0);
  }
  CGColorSpaceRetain((CGColorSpaceRef)qword_1EFF388A8);
  return CFAutorelease((CFTypeRef)qword_1EFF388A8);
}

void sub_1D543E68C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EFF388B0);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1D543E6A4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF388C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF388C0))
  {
    qword_1EFF388B8 = (uint64_t)CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], byte_1D545CA58, 476, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    __cxa_guard_release(&qword_1EFF388C0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_1EFF388D0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF388D0))
  {
    qword_1EFF388C8 = MEMORY[0x1D82714B8](qword_1EFF388B8);
    __cxa_guard_release(&qword_1EFF388D0);
  }
  CGColorSpaceRetain((CGColorSpaceRef)qword_1EFF388C8);
  return CFAutorelease((CFTypeRef)qword_1EFF388C8);
}

void sub_1D543E76C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EFF388D0);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1D543E794()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF388E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF388E0))
  {
    qword_1EFF388D8 = (uint64_t)CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], byte_1D545CC35, 572, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    __cxa_guard_release(&qword_1EFF388E0);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_1EFF388F0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF388F0))
  {
    qword_1EFF388E8 = MEMORY[0x1D82714B8](qword_1EFF388D8);
    __cxa_guard_release(&qword_1EFF388F0);
  }
  CGColorSpaceRetain((CGColorSpaceRef)qword_1EFF388E8);
  return CFAutorelease((CFTypeRef)qword_1EFF388E8);
}

void sub_1D543E85C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EFF388F0);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1D543E884()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF38900);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF38900))
  {
    qword_1EFF388F8 = (uint64_t)CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], byte_1D545CE72, 528, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    __cxa_guard_release(&qword_1EFF38900);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_1EFF38910);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF38910))
  {
    qword_1EFF38908 = MEMORY[0x1D82714B8](qword_1EFF388F8);
    __cxa_guard_release(&qword_1EFF38910);
  }
  CGColorSpaceRetain((CGColorSpaceRef)qword_1EFF38908);
  return CFAutorelease((CFTypeRef)qword_1EFF38908);
}

void sub_1D543E94C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EFF38910);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1D543E974()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF38920);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF38920))
  {
    qword_1EFF38918 = (uint64_t)CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], byte_1D545D083, 516, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    __cxa_guard_release(&qword_1EFF38920);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_1EFF38930);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF38930))
  {
    qword_1EFF38928 = MEMORY[0x1D82714B8](qword_1EFF38918);
    __cxa_guard_release(&qword_1EFF38930);
  }
  CGColorSpaceRetain((CGColorSpaceRef)qword_1EFF38928);
  return CFAutorelease((CFTypeRef)qword_1EFF38928);
}

void sub_1D543EA3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EFF38930);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1D543EA64()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF38960);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF38960))
  {
    qword_1EFF38958 = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
    __cxa_guard_release(&qword_1EFF38960);
  }
  CGColorSpaceRetain((CGColorSpaceRef)qword_1EFF38958);
  return CFAutorelease((CFTypeRef)qword_1EFF38958);
}

void sub_1D543EAD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EFF38960);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1D543EAE8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF38970);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF38970))
  {
    qword_1EFF38968 = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D8F8]);
    __cxa_guard_release(&qword_1EFF38970);
  }
  CGColorSpaceRetain((CGColorSpaceRef)qword_1EFF38968);
  return CFAutorelease((CFTypeRef)qword_1EFF38968);
}

void sub_1D543EB54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EFF38970);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1D543EB6C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF38980);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF38980))
  {
    qword_1EFF38978 = (uint64_t)CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], byte_1D545D46C, 548, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    __cxa_guard_release(&qword_1EFF38980);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_1EFF38990);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF38990))
  {
    qword_1EFF38988 = MEMORY[0x1D82714B8](qword_1EFF38978);
    __cxa_guard_release(&qword_1EFF38990);
  }
  CGColorSpaceRetain((CGColorSpaceRef)qword_1EFF38988);
  return CFAutorelease((CFTypeRef)qword_1EFF38988);
}

void sub_1D543EC34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EFF38990);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1D543EC5C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF389A0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF389A0))
  {
    qword_1EFF38998 = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D9C8]);
    __cxa_guard_release(&qword_1EFF389A0);
  }
  CGColorSpaceRetain((CGColorSpaceRef)qword_1EFF38998);
  return CFAutorelease((CFTypeRef)qword_1EFF38998);
}

void sub_1D543ECC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EFF389A0);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1D543ECE0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF389B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF389B0))
  {
    qword_1EFF389A8 = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D9C0]);
    __cxa_guard_release(&qword_1EFF389B0);
  }
  CGColorSpaceRetain((CGColorSpaceRef)qword_1EFF389A8);
  return CFAutorelease((CFTypeRef)qword_1EFF389A8);
}

void sub_1D543ED4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EFF389B0);
  _Unwind_Resume(a1);
}

CFTypeRef sub_1D543ED64(void *a1)
{
  __CFString *v1;
  CGColorSpaceRef v2;
  CFTypeRef v3;

  v1 = a1;
  v2 = CGColorSpaceCreateWithName(v1);
  if (v2)
    v3 = CFAutorelease(v2);
  else
    v3 = 0;

  return v3;
}

void sub_1D543EDA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D543EDB4(uint64_t a1, int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v17;
  _QWORD v19[5];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v17 = sub_1D544098C(a1, a2);
  *(_QWORD *)v17 = &off_1E99A69D8;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_QWORD *)(v17 + 48) = 0;
  *(double *)v19 = a3;
  *(double *)&v19[1] = a4;
  *(double *)&v19[2] = a5;
  *(double *)&v19[3] = a6;
  *(double *)&v19[4] = a7;
  sub_1D528FA34((char *)(v17 + 16), (char *)v19, (uint64_t)&v20, 5uLL);
  *(double *)(a1 + 40) = a8;
  *(double *)(a1 + 48) = a9;
  return a1;
}

void sub_1D543EE98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D543EEB8(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  char *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  _QWORD v15[5];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = sub_1D544098C(a1, a2);
  *(_QWORD *)v5 = &off_1E99A69D8;
  *(_OWORD *)(v5 + 16) = 0u;
  v6 = (char *)(v5 + 16);
  *(_OWORD *)(v5 + 32) = 0u;
  *(_QWORD *)(v5 + 48) = 0;
  v7 = sub_1D528494C(*a3);
  v8 = sub_1D528494C(*a3);
  v9 = sub_1D528494C(*a3);
  v10 = sub_1D528494C(*a3);
  v11 = sub_1D528494C(*a3);
  v12 = sub_1D528494C(*a3);
  v13 = sub_1D528494C(*a3);
  *(double *)v15 = v7;
  *(double *)&v15[1] = v8;
  *(double *)&v15[2] = v9;
  *(double *)&v15[3] = v10;
  *(double *)&v15[4] = v11;
  sub_1D528FA34(v6, (char *)v15, (uint64_t)&v16, 5uLL);
  *(double *)(a1 + 40) = v12;
  *(double *)(a1 + 48) = v13;
  return a1;
}

void sub_1D543EFD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

id sub_1D543F014(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  double v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  RAWOpcodeFixVignetteRadial *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  _QWORD v58[2];
  _QWORD v59[5];
  _QWORD v60[6];

  v60[5] = *MEMORY[0x1E0C80C00];
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v59[0] = CFSTR("kr0");
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v7, v8, v9, v10, **(double **)(a1 + 16));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v60[0] = v11;
  v59[1] = CFSTR("k1");
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v12, v13, v14, v15, *(double *)(*(_QWORD *)(a1 + 16) + 8));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v60[1] = v16;
  v59[2] = CFSTR("k2");
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v17, v18, v19, v20, *(double *)(*(_QWORD *)(a1 + 16) + 16));
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v60[2] = v21;
  v59[3] = CFSTR("k3");
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v22, v23, v24, v25, *(double *)(*(_QWORD *)(a1 + 16) + 24));
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v60[3] = v26;
  v59[4] = CFSTR("k4");
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v27, v28, v29, v30, *(double *)(*(_QWORD *)(a1 + 16) + 32));
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v60[4] = v31;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v32, (uint64_t)v60, (uint64_t)v59, 5);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v34, (uint64_t)v33, (uint64_t)CFSTR("Coefficients"), v35);

  v36 = *(double *)(a1 + 48);
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v37, v38, v39, v40, *(double *)(a1 + 40));
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v58[0] = v41;
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v42, v43, v44, v45, v36);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v58[1] = v46;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v47, (uint64_t)v58, 2, v48);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v50, (uint64_t)v49, (uint64_t)CFSTR("NormalizedCenter"), v51);

  v52 = [RAWOpcodeFixVignetteRadial alloc];
  v56 = (void *)objc_msgSend_initWithArguments_(v52, v53, (uint64_t)v6, v54, v55);

  return v56;
}

void sub_1D543F244(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D543F2CC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E99A69D8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1D543F308(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E99A69D8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D543F354()
{
  return 3;
}

void sub_1D543F534(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D543F548(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWCropFilter", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D543F714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D543F9A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5440104(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D5440110(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1D5281424(a1);
  _Unwind_Resume(a1);
}

void sub_1D544012C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWGainMap", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D54402A4(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void (**v4)(_QWORD);
  unsigned int v5;
  unsigned int v6;
  char v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  unsigned int v32;
  __int16 v33;
  unsigned int v34;
  __int16 v35;
  int v36;
  unsigned int v37;
  __int16 v38;
  int v39;
  unsigned int v40;
  __int16 v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  __int16 v57;
  __int16 v58;
  int v59;
  int v60;
  uint64_t v61;
  void *exception;
  unint64_t *v63;
  char v64;
  uint64_t v65;
  void (**v66)(_QWORD);
  int v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint8_t buf[4];
  _QWORD v76[6];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CPacked14SwappedUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v76[0] = MEMORY[0x1E0C809B0];
  v76[1] = 3221225472;
  v76[2] = sub_1D5440908;
  v76[3] = &unk_1E996F870;
  v76[4] = a1;
  v4 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v76);
  v6 = *(_DWORD *)(a1 + 44);
  v5 = *(_DWORD *)(a1 + 48);
  v63 = (unint64_t *)(a1 + 200);
  v7 = *(_QWORD *)(a1 + 200) != 0;
  v8 = (*(uint64_t (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1);
  v9 = v5 >> v7;
  v10 = (v6 + 9) / 0xA;
  v11 = 16 * v10 * v9;
  v12 = 8 * v10;
  if (v11 == v8)
    v13 = v12;
  else
    v13 = (14 * v6) >> 3;
  if (v11 == v8)
    v14 = 8;
  else
    v14 = 7;
  v15 = *(_DWORD *)(a1 + 188);
  if (v13 * v9 > (*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v72 = *(unsigned int *)(a1 + 192);
  v73 = a1;
  v66 = v4;
  v71 = v9;
  if ((_DWORD)v72 == 2)
  {
    v74 = ((*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1) >> 1)
        - v13 * (v9 >> 1);
    sub_1D5282F74((int *)buf, (int *)&v74);
    v67 = *(_DWORD *)buf;
    if (!*v63)
    {
LABEL_42:
      v44 = 0;
      v45 = 0;
      v46 = v6 & 0xFFFFFFFC;
      do
      {
        v47 = sub_1D530B618(v73);
        v69 = v44;
        if (v44 < v71)
        {
          v48 = (char *)(v47 + 2 * v6 * v44);
          v49 = v45;
          do
          {
            v50 = 2 * v6 - v13;
            (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)(v73 + 24) + 32))(*(_QWORD *)(v73 + 24), &v48[v50], v13);
            if ((_DWORD)v44)
              v45 = v49;
            else
              v45 = v15;
            if ((_DWORD)v44)
              v51 = 0;
            else
              v51 = v15;
            if (v46)
            {
              v52 = 0;
              v53 = (unsigned __int8 *)&v48[v50 + 3 + v49];
              do
              {
                v54 = *(v53 - 2);
                v55 = *v53;
                v56 = v53[2];
                v57 = *(v53 - 3) | ((v54 & 0x3F) << 8);
                v58 = v53[3];
                v59 = (4 * *(v53 - 1)) & 0xC3FF | ((v55 & 0xF) << 10) | (v54 >> 6);
                v60 = (16 * v53[1]) & 0xCFFF | ((v56 & 3) << 12) | (v55 >> 4);
                *(_WORD *)v48 = v57;
                *((_WORD *)v48 + 1) = v59;
                *((_WORD *)v48 + 2) = v60;
                *((_WORD *)v48 + 3) = (v56 >> 2) | (v58 << 6);
                v48 += 8;
                v52 += 4;
                v53 += v14;
              }
              while (v52 < v46);
            }
            v13 += v51;
            v48 += 2 * ((_DWORD)v72 - 1) * v6;
            LODWORD(v44) = v44 + v72;
            v49 = v45;
          }
          while (v44 < v71);
        }
        v4 = v66;
        if (v67 && !v69)
        {
          v61 = *(_QWORD *)(v73 + 24);
          *(_DWORD *)buf = v67;
          (*(void (**)(uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v61 + 40))(v61, buf, 1);
        }
        v44 = v69 + 1;
      }
      while (v69 + 1 != v72);
      goto LABEL_59;
    }
  }
  else
  {
    if (!*v63)
    {
      if (!(_DWORD)v72)
        goto LABEL_59;
      v67 = 0;
      goto LABEL_42;
    }
    v67 = 0;
  }
  v16 = 0;
  v17 = 0;
  v70 = 2 * v6;
  v18 = 1;
  do
  {
    v64 = v18;
    v19 = v73;
    if ((v16 & 1) != 0)
    {
      v20 = *(_QWORD *)(v73 + 24);
      sub_1D5282FE0(buf, v63);
      (*(void (**)(uint64_t, uint8_t *, _QWORD))(*(_QWORD *)v20 + 40))(v20, buf, 0);
      v4 = v66;
    }
    if ((_DWORD)v72)
    {
      v21 = 0;
      v65 = v17 * v72 * v6;
      v22 = 0;
      do
      {
        v23 = sub_1D530B618(v19);
        v68 = v22;
        if (v22 < v71)
        {
          v24 = (char *)(v23 + 2 * v6 * v22 + 2 * v65);
          do
          {
            (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)(v73 + 24) + 32))(*(_QWORD *)(v73 + 24), &v24[v70 - v13], v13);
            v25 = (unsigned __int8 *)&v24[v70 - v13 + v21];
            if ((_DWORD)v22)
            {
              v26 = 0;
            }
            else
            {
              v21 = v15;
              v26 = v15;
            }
            if (v6 == v6 % 0xA)
            {
              v27 = 0;
            }
            else
            {
              v27 = 0;
              do
              {
                v28 = v25[1];
                v29 = *v25 | ((v28 & 0xF) << 8);
                LOWORD(v28) = (v28 >> 4) | (16 * v25[2]);
                v30 = v25[4];
                v31 = v25[3] | ((v30 & 0xF) << 8);
                LOWORD(v30) = (v30 >> 4) | (16 * v25[5]);
                *(_WORD *)v24 = v29;
                *((_WORD *)v24 + 1) = v28;
                v32 = v25[7];
                v33 = v25[6] | ((v32 & 0xF) << 8);
                LOWORD(v32) = (v32 >> 4) | (16 * v25[8]);
                *((_WORD *)v24 + 2) = v31;
                *((_WORD *)v24 + 3) = v30;
                v34 = v25[10];
                v35 = v25[9] | ((v34 & 0xF) << 8);
                v36 = (v34 >> 4) | (16 * v25[11]);
                *((_WORD *)v24 + 4) = v33;
                *((_WORD *)v24 + 5) = v32;
                v37 = v25[13];
                v38 = v25[12] | ((v37 & 0xF) << 8);
                v39 = (v37 >> 4) | (16 * v25[14]);
                *((_WORD *)v24 + 6) = v35;
                *((_WORD *)v24 + 7) = v36;
                *((_WORD *)v24 + 8) = v38;
                *((_WORD *)v24 + 9) = v39;
                v25 += v14;
                v24 += 20;
                v27 += 10;
              }
              while (v27 < 10 * (v6 / 0xA));
            }
            while (v27 < v6)
            {
              v40 = v25[1];
              v41 = *v25 | ((v40 & 0xF) << 8);
              v42 = (v40 >> 4) | (16 * v25[2]);
              *(_WORD *)v24 = v41;
              *((_WORD *)v24 + 1) = v42;
              v25 += 3;
              v24 += 4;
              v27 += 2;
            }
            v13 += v26;
            v24 += 2 * (2 * (_DWORD)v72 - 1) * v6;
            LODWORD(v22) = v22 + v72;
          }
          while (v22 < v71);
        }
        v4 = v66;
        v19 = v73;
        if (v67 && !v68)
        {
          v43 = *(_QWORD *)(v73 + 24);
          *(_DWORD *)buf = v67;
          (*(void (**)(uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v43 + 40))(v43, buf, 1);
        }
        v22 = v68 + 1;
      }
      while (v68 + 1 != v72);
    }
    v18 = 0;
    v16 = 1;
    v17 = 1;
  }
  while ((v64 & 1) != 0);
LABEL_59:
  v4[2](v4);

}

void sub_1D54408A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5440908(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CPacked14SwappedUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

uint64_t sub_1D544098C(uint64_t result, int a2)
{
  *(_QWORD *)result = &unk_1E99A6B10;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void sub_1D5440A18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5440B34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5440BE4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *exception;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 v21;
  uint64_t v22[3];

  v2 = result;
  v4 = *(_QWORD *)(result + 504);
  if (!v4)
  {
    sub_1D52917E4(result, &v21);
    LODWORD(v19) = 0;
    sub_1D5285164(v22, (uint64_t *)&v21, (uint64_t)&v19, 0);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    sub_1D52917E4(v2, &v19);
    sub_1D543A354(&v19, (uint64_t)&v21);
    v8 = (uint64_t *)(v2 + 504);
    sub_1D5292548(v2 + 504, &v21);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (!*v8)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    result = sub_1D5285200(v22);
    v4 = *v8;
  }
  v15 = *(_QWORD *)(v2 + 512);
  *a2 = v4;
  a2[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  return result;
}

void sub_1D5440D78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_1D5282EB4((uint64_t)va);
  sub_1D5285200((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1D5440F74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1D54411E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1D544166C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D5441678(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1D5281424(a1);
  _Unwind_Resume(a1);
}

void sub_1D5441694(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWLensCorrectionDNG", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

double sub_1D5441718(uint64_t a1, double a2, double a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  double v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  double v73;

  v5 = *(id *)(*(_QWORD *)(a1 + 32) + 88);
  v6 = *(id *)(*(_QWORD *)(a1 + 32) + 96);
  objc_msgSend_vectorWithX_Y_(MEMORY[0x1E0C9DDF8], v7, v8, v9, v10, *(float *)(a1 + 48), *(float *)(a1 + 52));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_X(v5, v12, v13, v14, v15);
  v17 = v16;
  objc_msgSend_Y(v5, v18, v19, v20, v21);
  v23 = v22;
  objc_msgSend_Z(v5, v24, v25, v26, v27);
  v29 = v28;
  objc_msgSend_W(v5, v30, v31, v32, v33);
  v35 = v34;
  objc_msgSend_X(v6, v36, v37, v38, v39);
  v41 = v40;
  objc_msgSend_Y(v6, v42, v43, v44, v45);
  v47 = v46;
  objc_msgSend_X(v11, v48, v49, v50, v51);
  v53 = v52;
  objc_msgSend_Y(v11, v54, v55, v56, v57);
  v58 = v47;
  v59 = v41;
  v60 = v35;
  v61 = v29;
  v62 = v23;
  v63 = v17;
  v64 = v53;
  *(float *)&v65 = v65;
  v66 = a2;
  v67 = a3;
  v68 = *(double *)(a1 + 40);
  v69 = (float)(v66 - v64) / v68;
  v70 = (float)(v67 - *(float *)&v65) / v68;
  v71 = (float)(v70 * v70) + (float)(v69 * v69);
  v72 = (v71 + (v69 + v69) * v69) * v58 + v59 * ((v69 + v69) * v70);
  v73 = (float)((float)((float)((float)(v69
                                      * (float)((float)((float)((float)(v71 * v62) + v63)
                                                      + (float)(v61 * (float)(v71 * v71)))
                                              + (float)(v60 * (float)(v71 * (float)(v71 * v71)))))
                              + v72)
                      * v68)
              + v64);

  return v73;
}

void sub_1D54418F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double sub_1D5441920(uint64_t a1, double a2, double a3, double a4, double a5)
{
  CGFloat v6;
  double v7;
  CGFloat v8;
  CGFloat v9;
  float v10;
  double v11;
  CGFloat v12;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  double v28;
  double v29;
  CGFloat r1;
  float r1_12;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;

  v29 = a3 + a5;
  v7 = *MEMORY[0x1E0C9D628];
  v6 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v9 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v8 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v28 = a2 + a4;
  v10 = 0.0;
  v11 = 0.0;
  do
  {
    r1_12 = v10;
    v44.origin.x = (*(double (**)(double, double))(*(_QWORD *)(a1 + 32) + 16))(a2 + a4 * v11, a3);
    v44.origin.y = v12;
    v44.size.width = 0.0;
    v44.size.height = 0.0;
    v36.origin.x = v7;
    v36.origin.y = v6;
    v36.size.width = v9;
    v36.size.height = v8;
    v37 = CGRectUnion(v36, v44);
    x = v37.origin.x;
    y = v37.origin.y;
    width = v37.size.width;
    height = v37.size.height;
    v45.origin.x = (*(double (**)(double, double))(*(_QWORD *)(a1 + 32) + 16))(a2 + a4 * (1.0 - v11), v29);
    v45.origin.y = v17;
    v45.size.width = 0.0;
    v45.size.height = 0.0;
    v38.origin.x = x;
    v38.origin.y = y;
    v38.size.width = width;
    v38.size.height = height;
    v39 = CGRectUnion(v38, v45);
    r1 = v39.origin.x;
    v18 = v39.origin.y;
    v19 = v39.size.width;
    v20 = v39.size.height;
    v46.origin.x = (*(double (**)(double, double))(*(_QWORD *)(a1 + 32) + 16))(a2, a3 + a5 * (1.0 - v11));
    v46.origin.y = v21;
    v46.size.width = 0.0;
    v46.size.height = 0.0;
    v40.origin.x = r1;
    v40.origin.y = v18;
    v40.size.width = v19;
    v40.size.height = v20;
    v41 = CGRectUnion(v40, v46);
    v22 = v41.origin.x;
    v23 = v41.origin.y;
    v24 = v41.size.width;
    v25 = v41.size.height;
    v47.origin.x = (*(double (**)(double, double))(*(_QWORD *)(a1 + 32) + 16))(v28, a3 + a5 * v11);
    v47.origin.y = v26;
    v47.size.width = 0.0;
    v47.size.height = 0.0;
    v42.origin.x = v22;
    v42.origin.y = v23;
    v42.size.width = v24;
    v42.size.height = v25;
    v43 = CGRectUnion(v42, v47);
    v7 = v43.origin.x;
    v6 = v43.origin.y;
    v9 = v43.size.width;
    v8 = v43.size.height;
    v10 = r1_12 + 0.125;
    v11 = (float)(r1_12 + 0.125);
  }
  while (v11 < 0.99999);
  return v7;
}

void *sub_1D5441B98(size_t a1, size_t a2)
{
  void *v2;

  v2 = malloc_type_calloc(a1, a2, 0xB0CC55A9uLL);
  if (!v2)
    sub_1D5441BCC();
  return v2;
}

uint64_t sub_1D5441BCC()
{
  int v1;

  return printf("%d\n", v1);
}

void *sub_1D5441BF0(size_t a1)
{
  void *v1;

  v1 = malloc_type_malloc(a1, 0x4A9B4B8DuLL);
  if (!v1)
    sub_1D5441BCC();
  return v1;
}

void *sub_1D5441C24(size_t a1)
{
  void *v1;

  v1 = malloc_type_valloc(a1, 0x3C00A759uLL);
  if (!v1)
    sub_1D5441BCC();
  return v1;
}

void *sub_1D5441C60(const __CFAllocator *a1, CFIndex a2, CFOptionFlags a3)
{
  void *v3;

  v3 = CFAllocatorAllocate(a1, a2, a3);
  if (!v3)
    sub_1D5441BCC();
  return v3;
}

id sub_1D5441C90(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[11];
  _QWORD v43[2];

  v43[1] = *MEMORY[0x1E0C80C00];
  v5 = *MEMORY[0x1E0CBD388];
  v34 = *MEMORY[0x1E0CBD368];
  v35 = v5;
  v42[0] = MEMORY[0x1E0C9AAA0];
  v42[1] = CFSTR("com.phaseone.raw-image");
  v6 = *MEMORY[0x1E0CBD380];
  v36 = *MEMORY[0x1E0CBD348];
  v42[2] = CFSTR(".iiq.");
  v42[3] = &unk_1E99CC0D8;
  v42[4] = &unk_1E99CC0F0;
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], a2, (uint64_t)sub_1D5441F44, a4, a5, v34, v35, v36, v6, *MEMORY[0x1E0CBD370], *MEMORY[0x1E0CBD378]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v42[5] = v7;
  v37 = *MEMORY[0x1E0CBD330];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v8, (uint64_t)sub_1D5442058, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v42[6] = v11;
  v38 = *MEMORY[0x1E0CBD350];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v12, (uint64_t)sub_1D5442064, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v42[7] = v15;
  v39 = *MEMORY[0x1E0CBD338];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v16, (uint64_t)sub_1D52E8DA4, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v42[8] = v19;
  v40 = *MEMORY[0x1E0CBD358];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v20, (uint64_t)sub_1D5442070, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v42[9] = v23;
  v41 = *MEMORY[0x1E0CBD360];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v24, (uint64_t)sub_1D544207C, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v42[10] = v27;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v28, (uint64_t)v42, (uint64_t)&v34, 11);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v43[0] = v29;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v30, (uint64_t)v43, 1, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  return v32;
}

void sub_1D5441EE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

BOOL sub_1D5441F44(unsigned __int8 *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  int v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 < 0x10)
    return 0;
  v8 = v2;
  v9 = v3;
  v7 = 42;
  result = sub_1D52C0354(a1, a2, &v7);
  if (result)
  {
    v6 = *a1;
    if (v6 == 73)
    {
      if (a1[8] != 73 || a1[9] != 73 || a1[10] != 73 || a1[11] != 73 || a1[13] != 119 || a1[14] != 97 || a1[15] != 82)
        return 0;
    }
    else if (v6 != 77
           || a1[8] != 77
           || a1[9] != 77
           || a1[10] != 77
           || a1[11] != 77
           || a1[12] != 82
           || a1[13] != 97
           || a1[14] != 119)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

void sub_1D5442058(const void *a1, uint64_t a2, uint64_t a3)
{
  sub_1D52E7A20(a1, a2, a3, &unk_1E99A6B70);
}

uint64_t sub_1D5442064(os_signpost_id_t a1)
{
  return sub_1D52E8C40(a1);
}

uint64_t sub_1D5442070(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1D52E7438(a1, a2, a3, &unk_1E99A6B70);
}

uint64_t sub_1D544207C(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1D52E9A7C(a1, a2, a3, &unk_1E99A6B70);
}

void sub_1D5442088(uint64_t *a1@<X1>, char a2@<W2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X8>)
{
  __int128 v8;
  id v9;
  id v10;
  char v11;

  v11 = a2;
  v10 = a3;
  v9 = a4;
  sub_1D5443110(a1, &v11, &v10, &v9, &v8);
  *a5 = v8;

}

void sub_1D5442104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1D5442120(void **a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  id v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  sub_1D52A8080(a1);
  (*((void (**)(void **))*a1 + 50))(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v19 = v2;
    sub_1D52E1FDC(v2, (void *)*MEMORY[0x1E0CBD090], 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = *MEMORY[0x1E0CBD0C0];
    objc_msgSend_objectForKeyedSubscript_(v3, v5, *MEMORY[0x1E0CBD0C0], v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v8)
    {
      v9 = (void *)MEMORY[0x1E0CB37E8];
      sub_1D5442274((uint64_t)a1, &v20);
      objc_msgSend_numberWithUnsignedShort_(v9, v10, *(unsigned __int16 *)(v20 + 184), v11, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v3, v14, (uint64_t)v13, v4, v15);

      v16 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }

    v2 = v19;
  }

}

void sub_1D5442230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  sub_1D5282EB4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5442274@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *exception;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 v21;
  uint64_t v22[3];

  v2 = result;
  v4 = *(_QWORD *)(result + 1192);
  if (!v4)
  {
    sub_1D52917E4(result, &v21);
    sub_1D528594C(&v19, (uint64_t *)(v2 + 1184));
    sub_1D5285164(v22, (uint64_t *)&v21, (uint64_t)&v19, 0);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    sub_1D52917E4(v2, &v19);
    sub_1D543A354(&v19, (uint64_t)&v21);
    v8 = (uint64_t *)(v2 + 1192);
    sub_1D5292548(v2 + 1192, &v21);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (!*v8)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    result = sub_1D5285200(v22);
    v4 = *v8;
  }
  v15 = *(_QWORD *)(v2 + 1200);
  *a2 = v4;
  a2[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  return result;
}

void sub_1D5442410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_1D5282EB4((uint64_t)va);
  sub_1D5285200((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D544245C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1D52917E4(a1, &v6);
  *(_QWORD *)(a1 + 1184) = (*(int (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return 1;
}

void sub_1D54424DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D54424F0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1D5442274(a1, &v6);
  v1 = sub_1D543AF14(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D5442560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5442574(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1D5442274(a1, &v6);
  v1 = sub_1D543AF1C(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D54425E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D54425F8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1D5442274(a1, &v6);
  v1 = sub_1D528F36C(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D5442668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D544267C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1D5442274(a1, &v6);
  v1 = sub_1D5337D88(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D54426EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5442700(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1D5442274(a1, &v6);
  v1 = sub_1D543AF24(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D5442780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5442794(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1D5442274(a1, &v6);
  v1 = sub_1D543AF30();
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D5442804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D5442818(uint64_t a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void **a5@<X8>)
{
  unint64_t v10;
  void **v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *__p[2];
  unsigned __int8 v22;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 392))(__p);
  v10 = v22;
  if ((v22 & 0x80u) != 0)
    v10 = (unint64_t)__p[1];
  if (v10 == 11
    && ((v22 & 0x80u) == 0 ? (v11 = __p) : (v11 = (void **)__p[0]),
        (v12 = *v11, v13 = *(uint64_t *)((char *)v11 + 3), v12 == (void *)0x4965727574706143)
      ? (v14 = v13 == 0x6F666E4965727574)
      : (v14 = 0),
        v14))
  {
    sub_1D5442274(a1, &v19);
    v15 = v19;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    sub_1D5282C70(a5, *(const void **)(v15 + 88), *(_QWORD *)(v15 + 96), (uint64_t)(*(_QWORD *)(v15 + 96) - *(_QWORD *)(v15 + 88)) >> 3);
    v16 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    sub_1D5291CB0(a1, a2, a3, a4, a5);
  }
  if ((char)v22 < 0)
    operator delete(__p[0]);
}

void sub_1D544295C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_1D5282EB4((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1D544298C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1D5442274(a1, &v6);
  v1 = sub_1D543AF3C();
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D54429FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D5442A10(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  sub_1D5442274(a1, &v22);
  sub_1D52917E4(a1, &v19);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1);
  sub_1D5392E24(&v19, v8, a2, a3, &v22, &v21);
  v9 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v21;
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
  sub_1D528304C(&v18, (unint64_t *)&v19);
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v12 + 32))(v12, &v18);
  v13 = v21;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  sub_1D530CBD8(v13, v14);
  *a4 = v21;
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1D5442B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D5442B90(void **a1, uint64_t a2, int a3)
{
  uint64_t v6;
  void **v7;
  void **v8;
  double v9;
  void **v10;
  double v11;
  _BOOL4 v13;
  void *__p[2];
  char v17;

  v6 = (uint64_t)(a1 + 36);
  (*((void (**)(void **__return_ptr))*a1 + 49))(__p);
  v7 = sub_1D5294144(v6, __p);
  v8 = v7;
  if (a1 + 37 == v7)
    v9 = -1.0;
  else
    v9 = *((double *)v7 + 7);
  if (v17 < 0)
    operator delete(__p[0]);
  if (a1 + 37 == v8 || v9 <= 0.0)
  {
    if (a3)
    {
      (*((void (**)(void **__return_ptr, void **, uint64_t))*a1 + 49))(__p, a1, a2);
      v10 = sub_1D5294144((uint64_t)(a1 + 39), __p);
      if (a1 + 40 == v10)
        v11 = 0.0;
      else
        v11 = *((double *)v10 + 7);
      v13 = v11 > -100.0 && a1 + 40 != v10;
      if (v17 < 0)
      {
        operator delete(__p[0]);
        if (v13)
          return sub_1D52913EC(v11);
      }
      else if (v13)
      {
        return sub_1D52913EC(v11);
      }
    }
    return sub_1D52912CC(a1, a2, a3);
  }
  return v9;
}

void sub_1D5442CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D5442CE8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  std::string __p;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t *v45;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_1D52850A0(&__p, "iq");
  v4 = a2[2];
  v5 = a2[1];
  if (v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a2) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a2) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v45 = a2 + 2;
    if (v10)
      v11 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v10);
    else
      v11 = 0;
    v12 = &v11[24 * v7];
    v41 = v11;
    v42 = v12;
    v44 = &v11[24 * v10];
    v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v12 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v12 = v13;
    memset(&__p, 0, sizeof(__p));
    v43 = v12 + 24;
    sub_1D5293D58(a2, &v41);
    v14 = a2[1];
    sub_1D5293F24((uint64_t)&v41);
    v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v14;
    if (v15 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v5 = v6;
    a2[1] = v5 + 24;
  }
  sub_1D52850A0(&__p, "phaseone");
  v17 = a2[1];
  v16 = a2[2];
  if (v17 >= v16)
  {
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a2) >> 3);
    v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a2) >> 3);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v20;
    v45 = a2 + 2;
    if (v22)
      v23 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v22);
    else
      v23 = 0;
    v24 = &v23[24 * v19];
    v41 = v23;
    v42 = v24;
    v44 = &v23[24 * v22];
    v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v24 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v24 = v25;
    memset(&__p, 0, sizeof(__p));
    v43 = v24 + 24;
    sub_1D5293D58(a2, &v41);
    v26 = a2[1];
    sub_1D5293F24((uint64_t)&v41);
    v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v26;
    if (v27 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v17 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v17 = v18;
    a2[1] = v17 + 24;
  }
  sub_1D5293780(a1, &__p);
  v29 = a2[1];
  v28 = a2[2];
  if (v29 >= v28)
  {
    v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *a2) >> 3);
    v32 = v31 + 1;
    if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a2) >> 3);
    if (2 * v33 > v32)
      v32 = 2 * v33;
    if (v33 >= 0x555555555555555)
      v34 = 0xAAAAAAAAAAAAAAALL;
    else
      v34 = v32;
    v45 = a2 + 2;
    if (v34)
      v35 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v34);
    else
      v35 = 0;
    v36 = &v35[24 * v31];
    v41 = v35;
    v42 = v36;
    v44 = &v35[24 * v34];
    v37 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v36 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v36 = v37;
    memset(&__p, 0, sizeof(__p));
    v43 = v36 + 24;
    sub_1D5293D58(a2, &v41);
    v38 = a2[1];
    sub_1D5293F24((uint64_t)&v41);
    v39 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v38;
    if (v39 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v29 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v29 = v30;
    a2[1] = v29 + 24;
  }
}

void sub_1D544303C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1D5293F24((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_1D5293CCC((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5443094(_QWORD *a1)
{
  *a1 = off_1E99A6BA0;
  sub_1D5282EB4((uint64_t)(a1 + 149));
  return sub_1D52B2190((uint64_t)a1);
}

void sub_1D54430C8(_QWORD *a1)
{
  *a1 = off_1E99A6BA0;
  sub_1D5282EB4((uint64_t)(a1 + 149));
  sub_1D52B2190((uint64_t)a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D5443110(uint64_t *a1@<X1>, char *a2@<X2>, void **a3@<X3>, void **a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x4D0uLL);
  sub_1D5443190((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D544317C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5443190(uint64_t a1, uint64_t *a2, char *a3, void **a4, void **a5)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E99A6ED8;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D52A7E98(a1 + 24, a2, *a3, *a4, *a5);
  *(_QWORD *)(a1 + 24) = off_1E99A6BA0;
  *(_QWORD *)(a1 + 1208) = -1;
  *(_OWORD *)(a1 + 1216) = 0u;
  return a1;
}

void sub_1D54431F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5443204(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A6ED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5443218(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99A6ED8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D544324C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_1D544325C(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  double *v6;
  double *v7;
  double *v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  unint64_t v14;
  double v15;
  double v16;
  long double v17;
  long double v18;
  double *v19;
  double *v20;
  unint64_t v21;
  unint64_t v22;
  double *v23;
  double *v24;
  double v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  double *v31;
  double *v32;
  uint64_t v33;
  double v34;
  double v35;
  void *__p;
  _BYTE *v37;
  void *v38[3];

  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v2 = (char *)(a1 + 64);
  v5 = (v4 - v3) >> 3;
  sub_1D528EB68(v38, v5);
  v6 = *(double **)v2;
  if (v4 != v3)
  {
    v7 = *(double **)(a1 + 40);
    v8 = (double *)v38[0];
    if (v5 <= 1)
      v9 = 1;
    else
      v9 = (v4 - v3) >> 3;
    v10 = *(double **)v2;
    do
    {
      v11 = *v7++;
      v12 = v11;
      v13 = *v10++;
      *v8++ = v12 * 100.0 / (v13 + 100.0);
      --v9;
    }
    while (v9);
  }
  v14 = v5 - 1;
  if (v6[v5 - 1] <= 0.0)
  {
    v17 = (double)*(int *)(a1 + 12) * 0.25;
    v18 = hypot(v17, (double)*(int *)(a1 + 8) * 0.5);
    v19 = *(double **)(a1 + 40);
    v20 = *(double **)(a1 + 48);
    v15 = v17 / v18;
    if (v20 != v19)
    {
      v21 = v20 - v19;
      v20 = *(double **)(a1 + 40);
      do
      {
        v22 = v21 >> 1;
        v23 = &v20[v21 >> 1];
        v25 = *v23;
        v24 = v23 + 1;
        v21 += ~(v21 >> 1);
        if (v15 < v25)
          v21 = v22;
        else
          v20 = v24;
      }
      while (v21);
    }
    v26 = v20 - v19;
    if (v26 >= v14)
      v26 = v5 - 1;
    v27 = 8 * v26 - 8;
    v28 = (v15 - *(double *)((char *)v19 + v27)) / (v19[v26] - *(double *)((char *)v19 + v27));
    v16 = v28 * *((double *)v38[0] + v26) + (1.0 - v28) * *(double *)((char *)v38[0] + v27);
  }
  else
  {
    v15 = *(double *)(*(_QWORD *)(a1 + 40) + 8 * v14);
    v16 = *((double *)v38[0] + v14);
  }
  v29 = v15 / v16;
  sub_1D528EB68(&__p, (v4 - v3) >> 3);
  if (v4 != v3)
  {
    v30 = 0;
    v31 = (double *)v38[0];
    v32 = (double *)__p;
    if (v5 <= 1)
      v33 = 1;
    else
      v33 = (v4 - v3) >> 3;
    do
    {
      v34 = v31[v30];
      v35 = 1.0 / v29;
      if (v34 != 0.0)
        v35 = *(double *)(*(_QWORD *)(a1 + 40) + 8 * v30) / (v29 * v34);
      v32[v30++] = v35;
    }
    while (v33 != v30);
  }
  if (v2 != (char *)&__p)
    sub_1D528FA34(v2, (char *)__p, (uint64_t)v37, (v37 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  if (v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
}

void sub_1D5443470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_1D54434A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double *v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  double *v23;
  double v24;
  uint64_t v25;
  double *v26;
  double *v27;
  Curve *v28;
  float v29;
  unint64_t v30;
  double v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  Curve *v35;
  uint64_t v36;
  id v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  Curve *v42;
  float v43;
  id v44;
  double v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  unint64_t v54;
  double (**v55)(double);
  uint64_t v56;
  uint64_t v57;
  double (*v58)(uint64_t, const char *, uint64_t, uint64_t, uint64_t, double);
  void *v59;
  id v60;
  _QWORD v61[4];
  id v62;
  uint64_t v63;
  void *__p;
  double *v65;
  void *v66[3];
  void *v67[3];

  v3 = *(_QWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 72);
  sub_1D528EB68(v67, (v2 - v3) >> 3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v2 != v3)
  {
    v5 = *(double **)(a1 + 40);
    v6 = (double *)v67[0];
    if ((unint64_t)((v2 - v3) >> 3) <= 1)
      v7 = 1;
    else
      v7 = (v2 - v3) >> 3;
    v8 = *(double **)(a1 + 64);
    do
    {
      v9 = *v5++;
      v10 = v9;
      v11 = *v8++;
      *v6++ = v10 * 100.0 / (v11 + 100.0);
      --v7;
    }
    while (v7);
  }
  v12 = (*(_QWORD *)(a1 + 72) - v4) >> 3;
  __p = 0;
  sub_1D528F9B4(v66, v12, &__p);
  v13 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  v63 = 0;
  sub_1D528F9B4(&__p, v13, &v63);
  v14 = hypot((double)*(int *)(a1 + 12) * 0.5, (double)*(int *)(a1 + 8) * 0.5);
  v15 = hypot((double)*(int *)(a1 + 20) * 0.5, (double)*(int *)(a1 + 16) * 0.5);
  v17 = *(_QWORD *)(a1 + 64);
  v16 = *(_QWORD *)(a1 + 72);
  v18 = (v16 - v17) >> 3;
  if (v16 != v17)
  {
    v19 = (double *)__p;
    v20 = *(uint64_t **)(a1 + 40);
    v21 = v66[0];
    if (v18 <= 1)
      v22 = 1;
    else
      v22 = (v16 - v17) >> 3;
    v23 = *(double **)(a1 + 64);
    do
    {
      v24 = *v23++;
      *v19++ = 100.0 / (v24 + 100.0);
      v25 = *v20++;
      *v21++ = v25;
      --v22;
    }
    while (v22);
  }
  if (*(double *)(v16 - 8) > 0.0 && v16 != v17)
  {
    v27 = (double *)__p;
    v26 = v65;
    if (v18 <= 1)
      v18 = 1;
    do
    {
      *v27 = *v27 / *(v26 - 1);
      ++v27;
      --v18;
    }
    while (v18);
  }
  v28 = [Curve alloc];
  v29 = v14;
  v30 = *(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64);
  v31 = v29;
  v34 = (void *)objc_msgSend_initWithCount_domainMin_domainMax_values_(v28, v32, v30 >> 3, (uint64_t)__p, v33, *(double *)v66[0] * v29, *(double *)((char *)v66[0] + v30 - 8) * v29);
  v35 = [Curve alloc];
  v36 = MEMORY[0x1E0C809B0];
  v61[0] = MEMORY[0x1E0C809B0];
  v61[1] = 3221225472;
  v61[2] = sub_1D544387C;
  v61[3] = &unk_1E997DAE0;
  v37 = v34;
  v62 = v37;
  v41 = (void *)objc_msgSend_initWithBlock_domainMin_domainMax_(v35, v38, (uint64_t)v61, v39, v40, 0.0, v31);
  v42 = [Curve alloc];
  v56 = v36;
  v57 = 3221225472;
  v58 = sub_1D54438E8;
  v59 = &unk_1E997DAE0;
  v44 = v41;
  v60 = v44;
  v43 = v15;
  v45 = v43;
  v53 = (void *)objc_msgSend_initWithBlock_domainMin_domainMax_(v42, v46, (uint64_t)&v56, v47, v48, 0.0, v45);
  if (*(_QWORD *)(a1 + 72) != *(_QWORD *)(a1 + 64))
  {
    v54 = 0;
    do
    {
      objc_msgSend_function(v53, v49, v50, v51, v52, v56, v57, v58, v59);
      v55 = (double (**)(double))objc_claimAutoreleasedReturnValue();
      *(double *)(*(_QWORD *)(a1 + 64) + 8 * v54) = v55[2](*(double *)(*(_QWORD *)(a1 + 40) + 8 * v54) * v45);

      ++v54;
    }
    while (v54 < (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3);
  }

  if (__p)
  {
    v65 = (double *)__p;
    operator delete(__p);
  }
  if (v66[0])
  {
    v66[1] = v66[0];
    operator delete(v66[0]);
  }
  if (v67[0])
  {
    v67[1] = v67[0];
    operator delete(v67[0]);
  }
}

void sub_1D54437E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  void *v27;
  void *v28;

  if (__p)
    operator delete(__p);
  if (a23)
    operator delete(a23);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(a1);
}

double sub_1D544387C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double v6;
  double (**v7)(double);

  v6 = a6;
  if (a6 >= 0.00001)
  {
    objc_msgSend_function(*(void **)(a1 + 32), a2, a3, a4, a5);
    v7 = (double (**)(double))objc_claimAutoreleasedReturnValue();
    v6 = v7[2](v6) * v6;

  }
  return v6;
}

void sub_1D54438D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1D54438E8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double v7;
  double (**v8)(double);

  v7 = 1.0;
  if (a6 >= 0.00001)
  {
    objc_msgSend_inverse(*(void **)(a1 + 32), a2, a3, a4, a5);
    v8 = (double (**)(double))objc_claimAutoreleasedReturnValue();
    v7 = v8[2](a6) / a6;

  }
  return v7;
}

void sub_1D5443948(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D544395C(_QWORD *a1)
{
  sub_1D5443980(a1);
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D5443980(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E99A6F28;
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1D5443C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1D5443FE4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D5443FF0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1D5281424(a1);
  _Unwind_Resume(a1);
}

void sub_1D544400C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWEdgeSharpen", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

double sub_1D5444090(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -2.0, -2.0);
  return result;
}

void sub_1D544411C(os_log_t log)
{
  int v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = 136446466;
  v2 = "-[RAWLocalToneMap outputImage]";
  v3 = 2080;
  v4 = "-[RAWLocalToneMap outputImage]";
  _os_log_error_impl(&dword_1D527F000, log, OS_LOG_TYPE_ERROR, "%{public}s Caught exception in %s", (uint8_t *)&v1, 0x16u);
}

void sub_1D54441A8(os_log_t log)
{
  int v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = 136446466;
  v2 = "-[RAWVignetteTable outputImage]";
  v3 = 2080;
  v4 = "-[RAWVignetteTable outputImage]";
  _os_log_error_impl(&dword_1D527F000, log, OS_LOG_TYPE_ERROR, "%{public}s Caught exception in %s", (uint8_t *)&v1, 0x16u);
}

void sub_1D5444234()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1D52A2EA4();
  sub_1D52A2E94(&dword_1D527F000, v0, v1, "%{public}s Caught exception in %s", v2, v3, v4, v5, 2u);
  sub_1D52A2EB8();
}

void sub_1D54442A4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1D52A2EA4();
  sub_1D52A2E94(&dword_1D527F000, v0, v1, "%{public}s Caught exception in %s", v2, v3, v4, v5, 2u);
  sub_1D52A2EB8();
}

void sub_1D5444314()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1D52A2EA4();
  sub_1D52A2E94(&dword_1D527F000, v0, v1, "%{public}s Caught exception in %s", v2, v3, v4, v5, 2u);
  sub_1D52A2EB8();
}

void sub_1D5444384(void **a1)
{
  void *v2;

  v2 = *a1;
  if (v2)
    sub_1D52C6C8C(v2, (uint64_t)a1);
}

void sub_1D5444398(void **a1, void **a2, uint64_t a3)
{
  void *v5;
  void *v6;

  v5 = *a1;
  if (v5)
  {
    *(_QWORD *)(a3 + 264) = v5;
    operator delete(v5);
  }
  v6 = *a2;
  if (*a2)
  {
    *(_QWORD *)(a3 + 240) = v6;
    operator delete(v6);
  }
}

void sub_1D54443E0(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1D5444400()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1D52A2EA4();
  sub_1D52A2E94(&dword_1D527F000, v0, v1, "%{public}s Caught exception in %s", v2, v3, v4, v5, 2u);
}

void sub_1D5444474()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1D52A2EA4();
  sub_1D52A2E94(&dword_1D527F000, v0, v1, "%{public}s Caught exception in %s", v2, v3, v4, v5, 2u);
}

void sub_1D54444E8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D533ECEC(&dword_1D527F000, a1, a3, "RAWProfileGainTableMap: Could not create kernel", a5, a6, a7, a8, 0);
}

void sub_1D544451C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D533ECEC(&dword_1D527F000, a1, a3, "RAWProfileGainTableMap: Invalid Gain Table Map values.", a5, a6, a7, a8, 0);
}

void sub_1D5444550(os_log_t log)
{
  int v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = 136446466;
  v2 = "-[RAWSimpleLensCorrectionFilter outputImage]";
  v3 = 2080;
  v4 = "-[RAWSimpleLensCorrectionFilter outputImage]";
  _os_log_error_impl(&dword_1D527F000, log, OS_LOG_TYPE_ERROR, "%{public}s Caught exception in %s", (uint8_t *)&v1, 0x16u);
}

void sub_1D54445DC(os_log_t log)
{
  int v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = 136446466;
  v2 = "-[RAWGamutMap outputImage]";
  v3 = 2080;
  v4 = "-[RAWGamutMap outputImage]";
  _os_log_error_impl(&dword_1D527F000, log, OS_LOG_TYPE_ERROR, "%{public}s Caught exception in %s", (uint8_t *)&v1, 0x16u);
}

void sub_1D5444668()
{
  __assert_rtn("initRedBlueReconstructionScaled", "rawDebayerFujiV2opt.m", 16307, "greenSN2>0");
}

void sub_1D5444690()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1D52A2EA4();
  sub_1D52A2E94(&dword_1D527F000, v0, v1, "%{public}s Caught exception in %s", v2, v3, v4, v5, 2u);
}

void sub_1D5444704()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1D52A2EA4();
  sub_1D52A2E94(&dword_1D527F000, v0, v1, "%{public}s Caught exception in %s", v2, v3, v4, v5, 2u);
}

void sub_1D5444778(os_log_t log)
{
  int v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = 136446466;
  v2 = "-[RAWLinearSpacePlaceholder outputImage]";
  v3 = 2080;
  v4 = "-[RAWLinearSpacePlaceholder outputImage]";
  _os_log_error_impl(&dword_1D527F000, log, OS_LOG_TYPE_ERROR, "%{public}s Caught exception in %s", (uint8_t *)&v1, 0x16u);
}

void sub_1D5444804()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1D52A2EA4();
  sub_1D52A2E94(&dword_1D527F000, v0, v1, "%{public}s Caught exception in %s", v2, v3, v4, v5, 2u);
  sub_1D52A2EB8();
}

void sub_1D5444874()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1D52A2EA4();
  sub_1D52A2E94(&dword_1D527F000, v0, v1, "%{public}s Caught exception in %s", v2, v3, v4, v5, 2u);
  sub_1D52A2EB8();
}

void sub_1D54448E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1D52A2EA4();
  sub_1D52A2E94(&dword_1D527F000, v0, v1, "%{public}s Caught exception in %s", v2, v3, v4, v5, 2u);
  sub_1D52A2EB8();
}

void sub_1D5444954(os_log_t log)
{
  int v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = 136446466;
  v2 = "-[RAWHueMagnet outputImage]";
  v3 = 2080;
  v4 = "-[RAWHueMagnet outputImage]";
  _os_log_error_impl(&dword_1D527F000, log, OS_LOG_TYPE_ERROR, "%{public}s Caught exception in %s", (uint8_t *)&v1, 0x16u);
}

void sub_1D54449E0(os_log_t log)
{
  int v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = 136446466;
  v2 = "-[RAWReduceNoise outputImage]";
  v3 = 2080;
  v4 = "-[RAWReduceNoise outputImage]";
  _os_log_error_impl(&dword_1D527F000, log, OS_LOG_TYPE_ERROR, "%{public}s Caught exception in %s", (uint8_t *)&v1, 0x16u);
}

void sub_1D5444A6C(os_log_t log)
{
  int v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = 136446466;
  v2 = "-[RAWTemperatureAdjust outputImage]";
  v3 = 2080;
  v4 = "-[RAWTemperatureAdjust outputImage]";
  _os_log_error_impl(&dword_1D527F000, log, OS_LOG_TYPE_ERROR, "%{public}s Caught exception in %s", (uint8_t *)&v1, 0x16u);
}

void sub_1D5444AF8(os_log_t log)
{
  int v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = 136446466;
  v2 = "-[RAWAdjustExposureAndBias outputImage]";
  v3 = 2080;
  v4 = "-[RAWAdjustExposureAndBias outputImage]";
  _os_log_error_impl(&dword_1D527F000, log, OS_LOG_TYPE_ERROR, "%{public}s Caught exception in %s", (uint8_t *)&v1, 0x16u);
}

void sub_1D5444B84(os_log_t log)
{
  int v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = 136446466;
  v2 = "-[RAWVignetteRadial outputImage]";
  v3 = 2080;
  v4 = "-[RAWVignetteRadial outputImage]";
  _os_log_error_impl(&dword_1D527F000, log, OS_LOG_TYPE_ERROR, "%{public}s Caught exception in %s", (uint8_t *)&v1, 0x16u);
}

void sub_1D5444C10(os_log_t log)
{
  int v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = 136446466;
  v2 = "-[RAWConvert outputImage]";
  v3 = 2080;
  v4 = "-[RAWConvert outputImage]";
  _os_log_error_impl(&dword_1D527F000, log, OS_LOG_TYPE_ERROR, "%{public}s Caught exception in %s", (uint8_t *)&v1, 0x16u);
}

void sub_1D5444C9C(os_log_t log)
{
  int v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = 136446466;
  v2 = "-[RAWDefringeFilter outputImage]";
  v3 = 2080;
  v4 = "-[RAWDefringeFilter outputImage]";
  _os_log_error_impl(&dword_1D527F000, log, OS_LOG_TYPE_ERROR, "%{public}s Caught exception in %s", (uint8_t *)&v1, 0x16u);
}

uint64_t sub_1D5444D28(void **a1, void **a2, id *a3, _QWORD *a4)
{
  void *v7;
  void *v8;
  std::__shared_weak_count *v9;

  v7 = *a1;
  if (v7)
  {
    a4[13] = v7;
    operator delete(v7);
  }
  v8 = *a2;
  if (*a2)
  {
    a4[10] = v8;
    operator delete(v8);
  }

  v9 = (std::__shared_weak_count *)a4[6];
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  *a4 = &unk_1E999CCA8;
  return sub_1D5282EB4((uint64_t)(a4 + 1));
}

void sub_1D5444D9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1D5438550();
  sub_1D5438540(&dword_1D527F000, v0, v1, "%{public}s Failed to query metadata (Err: %d)", v2, v3, v4, v5, 2u);
  sub_1D52A2EB8();
}

void sub_1D5444E08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1D5438550();
  sub_1D5438540(&dword_1D527F000, v0, v1, "%{public}s Failed to download MobileAsset catalog (Err: %d)", v2, v3, v4, v5, 2u);
  sub_1D52A2EB8();
}

void sub_1D5444E74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1D5438550();
  sub_1D5438540(&dword_1D527F000, v0, v1, "%{public}s Failed to download asset (Err: %d)", v2, v3, v4, v5, 2u);
  sub_1D52A2EB8();
}

void sub_1D5444EE0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D5438530(&dword_1D527F000, a1, a3, "%{public}s No key specified", a5, a6, a7, a8, 2u);
  sub_1D52A2EB8();
}

void sub_1D5444F50(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D5438530(&dword_1D527F000, a1, a3, "%{public}s No key specified", a5, a6, a7, a8, 2u);
  sub_1D52A2EB8();
}

void sub_1D5444FC0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D5438530(&dword_1D527F000, a1, a3, "%{public}s No type specified", a5, a6, a7, a8, 2u);
  sub_1D52A2EB8();
}

void sub_1D5445030(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D5438530(&dword_1D527F000, a1, a3, "%{public}s Failed to load RawCameraSupport plugins archive", a5, a6, a7, a8, 2u);
  sub_1D52A2EB8();
}

void sub_1D54450A0()
{
  os_log_t v0;
  int v1[6];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  v1[0] = 136446466;
  sub_1D5438564();
  _os_log_debug_impl(&dword_1D527F000, v0, OS_LOG_TYPE_DEBUG, "%{public}s No preinstalled asset available for \"%@\"", (uint8_t *)v1, 0x16u);
  sub_1D52A2EB8();
}

void sub_1D5445118()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1D5438564();
  sub_1D52A2E94(&dword_1D527F000, v0, v1, "%{public}s Failed to create CFData for plugin \"%@\"", v2, v3, v4, v5, 2u);
  sub_1D52A2EB8();
}

void sub_1D5445184()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1D5438564();
  sub_1D52A2E94(&dword_1D527F000, v0, v1, "%{public}s Failed to open plist for plugin \"%@\"", v2, v3, v4, v5, 2u);
  sub_1D52A2EB8();
}

void sub_1D54451F0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D5438530(&dword_1D527F000, a1, a3, "%{public}s No key specified", a5, a6, a7, a8, 2u);
  sub_1D52A2EB8();
}

void sub_1D5445260(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D5438530(&dword_1D527F000, a1, a3, "%{public}s No type specified", a5, a6, a7, a8, 2u);
  sub_1D52A2EB8();
}

void sub_1D54452D0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D5438530(&dword_1D527F000, a1, a3, "%{public}s No key specified", a5, a6, a7, a8, 2u);
  sub_1D52A2EB8();
}

void sub_1D5445340()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1D5438550();
  sub_1D5438540(&dword_1D527F000, v0, v1, "%{public}s Failed to query metadata (Err: %d)", v2, v3, v4, v5, 2u);
  sub_1D52A2EB8();
}

void sub_1D54453AC(os_log_t log)
{
  int v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = 136446466;
  v2 = "-[RAWCropFilter outputImage]";
  v3 = 2080;
  v4 = "-[RAWCropFilter outputImage]";
  _os_log_error_impl(&dword_1D527F000, log, OS_LOG_TYPE_ERROR, "%{public}s Caught exception in %s", (uint8_t *)&v1, 0x16u);
}

void sub_1D5445438(os_log_t log)
{
  int v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = 136446466;
  v2 = "-[RAWGainMap outputImage]";
  v3 = 2080;
  v4 = "-[RAWGainMap outputImage]";
  _os_log_error_impl(&dword_1D527F000, log, OS_LOG_TYPE_ERROR, "%{public}s Caught exception in %s", (uint8_t *)&v1, 0x16u);
}

void sub_1D54454C4(os_log_t log)
{
  int v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = 136446466;
  v2 = "-[RAWLensCorrectionDNG outputImage]";
  v3 = 2080;
  v4 = "-[RAWLensCorrectionDNG outputImage]";
  _os_log_error_impl(&dword_1D527F000, log, OS_LOG_TYPE_ERROR, "%{public}s Caught exception in %s", (uint8_t *)&v1, 0x16u);
}

void sub_1D5445550(os_log_t log)
{
  int v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = 136446466;
  v2 = "-[RAWEdgeSharpen outputImage]";
  v3 = 2080;
  v4 = "-[RAWEdgeSharpen outputImage]";
  _os_log_error_impl(&dword_1D527F000, log, OS_LOG_TYPE_ERROR, "%{public}s Caught exception in %s", (uint8_t *)&v1, 0x16u);
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1E0D15428]();
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80370](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80378](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80380](c, data, *(_QWORD *)&len);
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1E0C97C98](allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
  MEMORY[0x1E0C97CB0](allocator, ptr);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x1E0C97DC0](theArray, idx);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1E0C97E90](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

CFDictionaryRef CFBundleCopyInfoDictionaryInDirectory(CFURLRef bundleURL)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98030](bundleURL);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1E0C983C8](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x1E0C98460](allocator, locale, dateStyle, timeStyle);
}

Boolean CFDateFormatterGetAbsoluteTimeFromString(CFDateFormatterRef formatter, CFStringRef string, CFRange *rangep, CFAbsoluteTime *atp)
{
  return MEMORY[0x1E0C98498](formatter, string, rangep, atp);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
  MEMORY[0x1E0C984C0](formatter, formatString);
}

void CFDateFormatterSetProperty(CFDateFormatterRef formatter, CFStringRef key, CFTypeRef value)
{
  MEMORY[0x1E0C984C8](formatter, key, value);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1E0C98798](allocator, localeIdentifier);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AD0](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFShow(CFTypeRef obj)
{
  MEMORY[0x1E0C98DF8](obj);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1E0C990B0](theString, idx);
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C990E0](string, buffer, maxBufLen);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1E0C990F0](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(CFAllocatorRef allocator, CFTimeInterval ti)
{
  return (CFTimeZoneRef)MEMORY[0x1E0C99290](allocator, ti);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C993C8](allocator, buffer, bufLen, isDirectory);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BA90](retstr, t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAB0](retstr, t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAE0](retstr, tx, ty);
}

CFDataRef CGColorSpaceCopyICCData(CGColorSpaceRef space)
{
  return (CFDataRef)MEMORY[0x1E0C9BD98](space);
}

CGColorSpaceRef CGColorSpaceCreateCalibratedGray(const CGFloat *whitePoint, const CGFloat *blackPoint, CGFloat gamma)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDC8](whitePoint, blackPoint, gamma);
}

CGColorSpaceRef CGColorSpaceCreateCalibratedRGB(const CGFloat *whitePoint, const CGFloat *blackPoint, const CGFloat *gamma, const CGFloat *matrix)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDD0](whitePoint, blackPoint, gamma, matrix);
}

CGColorSpaceRef CGColorSpaceCreateICCBased(size_t nComponents, const CGFloat *range, CGDataProviderRef profile, CGColorSpaceRef alternate)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE10](nComponents, range, profile, alternate);
}

CGColorSpaceRef CGColorSpaceCreateWithICCData(CFTypeRef data)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE40](data);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE50](name);
}

CFStringRef CGColorSpaceGetName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x1E0C9BED0](space);
}

CFTypeID CGColorSpaceGetTypeID(void)
{
  return MEMORY[0x1E0C9BEF8]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x1E0C9BF30](space);
}

CGColorSpaceRef CGColorSpaceRetain(CGColorSpaceRef space)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BF38](space);
}

uint64_t CGColorTransformConvertColorComponents()
{
  return MEMORY[0x1E0C9BF80]();
}

uint64_t CGColorTransformCreate()
{
  return MEMORY[0x1E0C9BF90]();
}

uint64_t CGColorTransformRelease()
{
  return MEMORY[0x1E0C9BFA0]();
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x1E0C9C5D8](provider);
}

uint64_t CGDataProviderCreateWithCopyOfData()
{
  return MEMORY[0x1E0C9C5F8]();
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C600](info, data, size, releaseData);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
  MEMORY[0x1E0C9C638](provider);
}

uint64_t CGImageBlockCreate()
{
  return MEMORY[0x1E0C9CB00]();
}

uint64_t CGImageBlockSetCreate()
{
  return MEMORY[0x1E0C9CB28]();
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1E0C9CB80](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(_QWORD *)&bitmapInfo, provider);
}

uint64_t CGImageCreateMetadataFromDataArray()
{
  return MEMORY[0x1E0CBC2E8]();
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x1E0C9CC08](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9CC38](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1E0C9CC60](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1E0C9CCD0](image);
}

CGImageMetadataRef CGImageMetadataCreateFromXMPData(CFDataRef data)
{
  return (CGImageMetadataRef)MEMORY[0x1E0CBC3B0](data);
}

uint64_t CGImagePluginGetOptions()
{
  return MEMORY[0x1E0CBC490]();
}

uint64_t CGImagePluginGetProperties()
{
  return MEMORY[0x1E0CBC498]();
}

uint64_t CGImagePluginGetSession()
{
  return MEMORY[0x1E0CBC4A0]();
}

uint64_t CGImagePluginInitThumbJPEGAtOffset()
{
  return MEMORY[0x1E0CBC4A8]();
}

uint64_t CGImagePluginInitThumbJPEGAtOffsetWithOptions()
{
  return MEMORY[0x1E0CBC4B0]();
}

uint64_t CGImagePluginReadRawIPTCProps()
{
  return MEMORY[0x1E0CBC4B8]();
}

uint64_t CGImagePluginReadRawXMPProps()
{
  return MEMORY[0x1E0CBC4C0]();
}

uint64_t CGImagePluginSetImage()
{
  return MEMORY[0x1E0CBC4C8]();
}

uint64_t CGImagePluginSetImageBlockProc()
{
  return MEMORY[0x1E0CBC4D0]();
}

uint64_t CGImageProviderGetComponentType()
{
  return MEMORY[0x1E0C9CD58]();
}

uint64_t CGImageProviderRelease()
{
  return MEMORY[0x1E0C9CD88]();
}

uint64_t CGImageProviderRetain()
{
  return MEMORY[0x1E0C9CD90]();
}

uint64_t CGImageReadSessionGetBytesAtOffset()
{
  return MEMORY[0x1E0CBC4D8]();
}

uint64_t CGImageReadSessionGetFilePath()
{
  return MEMORY[0x1E0CBC4E0]();
}

uint64_t CGImageReadSessionGetSize()
{
  return MEMORY[0x1E0CBC4E8]();
}

uint64_t CGImageReadSessionIsFinal()
{
  return MEMORY[0x1E0CBC4F0]();
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x1E0C9CDA0](image);
}

uint64_t CGImageSourceAddProperty()
{
  return MEMORY[0x1E0CBC4F8]();
}

CFDictionaryRef CGImageSourceCopyAuxiliaryDataInfoAtIndex(CGImageSourceRef isrc, size_t index, CFStringRef auxiliaryImageDataType)
{
  return (CFDictionaryRef)MEMORY[0x1E0CBC500](isrc, index, auxiliaryImageDataType);
}

CFDictionaryRef CGImageSourceCopyProperties(CGImageSourceRef isrc, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x1E0CBC528](isrc, options);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x1E0CBC530](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1E0CBC568](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC590](data, options);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D548](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D558]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D588]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D5E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D5F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D5F8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1E0C9D608]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return MEMORY[0x1E0C9D610]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1E0C9D618]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D640]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8A98](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1E0CA8AE0](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1E0CA8AE8](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8AF8](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B00](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B20](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B28](pixelBuffer, planeIndex);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B38](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B40](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B50](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1E0CA8B70](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1E0CA8C00](pixelBuffer, unlockFlags);
}

uint64_t JxlDecoderCreate()
{
  return MEMORY[0x1E0CFD1A0]();
}

uint64_t JxlDecoderDestroy()
{
  return MEMORY[0x1E0CFD1A8]();
}

uint64_t JxlDecoderGetBasicInfo()
{
  return MEMORY[0x1E0CFD1B0]();
}

uint64_t JxlDecoderGetColorAsEncodedProfile()
{
  return MEMORY[0x1E0CFD1C8]();
}

uint64_t JxlDecoderGetColorAsICCProfile()
{
  return MEMORY[0x1E0CFD1D0]();
}

uint64_t JxlDecoderGetICCProfileSize()
{
  return MEMORY[0x1E0CFD1D8]();
}

uint64_t JxlDecoderImageOutBufferSize()
{
  return MEMORY[0x1E0CFD1E0]();
}

uint64_t JxlDecoderProcessInput()
{
  return MEMORY[0x1E0CFD1E8]();
}

uint64_t JxlDecoderSetImageOutBitDepth()
{
  return MEMORY[0x1E0CFD208]();
}

uint64_t JxlDecoderSetImageOutBuffer()
{
  return MEMORY[0x1E0CFD210]();
}

uint64_t JxlDecoderSetInput()
{
  return MEMORY[0x1E0CFD220]();
}

uint64_t JxlDecoderSetParallelRunner()
{
  return MEMORY[0x1E0CFD230]();
}

uint64_t JxlDecoderSetPreferredColorProfile()
{
  return MEMORY[0x1E0CFD238]();
}

uint64_t JxlDecoderSubscribeEvents()
{
  return MEMORY[0x1E0CFD248]();
}

uint64_t JxlThreadParallelRunnerCreate()
{
  return MEMORY[0x1E0CFD2D0]();
}

uint64_t JxlThreadParallelRunnerDestroy()
{
  return MEMORY[0x1E0CFD2D8]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

NSUInteger NSPageSize(void)
{
  return MEMORY[0x1E0CB2FE8]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1E0DE41D8](this, __s);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4308](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

std::__sp_mut *__cdecl std::__get_sp_mut(const void *a1)
{
  return (std::__sp_mut *)MEMORY[0x1E0DE43E0](a1);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x1E0DE43F8](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4408](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1E0DE4438](this, __n, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1E0DE44C8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4708]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::__sp_mut::lock(std::__sp_mut *this)
{
  MEMORY[0x1E0DE4C38](this);
}

void std::__sp_mut::unlock(std::__sp_mut *this)
{
  MEMORY[0x1E0DE4C40](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1E0DE4D88]();
}

std::bad_cast *__cdecl std::bad_cast::bad_cast(std::bad_cast *this)
{
  return (std::bad_cast *)MEMORY[0x1E0DE4D98](this);
}

void std::bad_cast::~bad_cast(std::bad_cast *this)
{
  MEMORY[0x1E0DE4DA8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E996EA68();
}

void operator delete(void *__p)
{
  off_1E996EA70(__p);
}

uint64_t operator delete()
{
  return off_1E996EA78();
}

uint64_t operator new[]()
{
  return off_1E996EA80();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E996EA88(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E996EA90(__sz, a2);
}

uint64_t operator new()
{
  return off_1E996EA98();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE50E0](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C78](*(_QWORD *)&a1);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

void _tlv_atexit(void (__cdecl *termFunc)(void *), void *objAddr)
{
  MEMORY[0x1E0C81230](termFunc, objAddr);
}

uint64_t applejpeg_decode_create()
{
  return MEMORY[0x1E0CFCF90]();
}

uint64_t applejpeg_decode_destroy()
{
  return MEMORY[0x1E0CFCF98]();
}

uint64_t applejpeg_decode_get_image_info()
{
  return MEMORY[0x1E0CFCFB0]();
}

uint64_t applejpeg_decode_get_output_buffer_size()
{
  return MEMORY[0x1E0CFCFB8]();
}

uint64_t applejpeg_decode_get_planar_output_buffer_size()
{
  return MEMORY[0x1E0CFCFC8]();
}

uint64_t applejpeg_decode_get_precision()
{
  return MEMORY[0x1E0CFCFD0]();
}

uint64_t applejpeg_decode_image_all()
{
  return MEMORY[0x1E0CFCFF0]();
}

uint64_t applejpeg_decode_open_mem()
{
  return MEMORY[0x1E0CFD008]();
}

uint64_t applejpeg_decode_set_option_alternate_420_prediction()
{
  return MEMORY[0x1E0CFD018]();
}

uint64_t applejpeg_decode_set_option_outformat()
{
  return MEMORY[0x1E0CFD058]();
}

uint64_t applejpeg_decode_set_option_stride()
{
  return MEMORY[0x1E0CFD068]();
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1E0C81608](a1, a2);
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int cache_create(const char *name, const cache_attributes_t *attrs, cache_t **cache_out)
{
  return MEMORY[0x1E0C81770](name, attrs, cache_out);
}

int cache_get_and_retain(cache_t *cache, void *key, void **value_out)
{
  return MEMORY[0x1E0C81788](cache, key, value_out);
}

int cache_release_value(cache_t *cache, void *value)
{
  return MEMORY[0x1E0C817D8](cache, value);
}

int cache_remove(cache_t *cache, void *key)
{
  return MEMORY[0x1E0C817E0](cache, key);
}

int cache_set_and_retain(cache_t *cache, void *key, void *value, cache_cost_t cost)
{
  return MEMORY[0x1E0C817F8](cache, key, value, cost);
}

uint64_t dgels_NEWLAPACK()
{
  return MEMORY[0x1E0C8BCC0]();
}

void dispatch_apply_f(size_t iterations, dispatch_queue_t queue, void *context, void (__cdecl *work)(void *, size_t))
{
  MEMORY[0x1E0C82BE0](iterations, queue, context, work);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C28](queue, block);
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C48](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

void dispatch_group_async_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82D18](group, queue, context, work);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x1E0C83028](a1, a2);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

float exp2f(float a1)
{
  float result;

  MEMORY[0x1E0C83290](a1);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int feof(FILE *a1)
{
  return MEMORY[0x1E0C83340](a1);
}

int ferror(FILE *a1)
{
  return MEMORY[0x1E0C83348](a1);
}

int fileno(FILE *a1)
{
  return MEMORY[0x1E0C833B0](a1);
}

void flockfile(FILE *a1)
{
  MEMORY[0x1E0C83408](a1);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fseeko(FILE *__stream, off_t a2, int __whence)
{
  return MEMORY[0x1E0C83538](__stream, a2, *(_QWORD *)&__whence);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

off_t ftello(FILE *__stream)
{
  return MEMORY[0x1E0C83588](__stream);
}

void funlockfile(FILE *a1)
{
  MEMORY[0x1E0C835C0](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

int getpagesize(void)
{
  return MEMORY[0x1E0C83740]();
}

tm *__cdecl gmtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1E0C83860](a1, a2);
}

long double hypot(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C838E8](__x, __y);
  return result;
}

float hypotf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C838F0](a1, a2);
  return result;
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE93A0](strm, *(_QWORD *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE93B8](strm);
}

int inflateInit_(z_streamp strm, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE93D0](strm, version, *(_QWORD *)&stream_size);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BE8](__x);
  return result;
}

float log2f(float a1)
{
  float result;

  MEMORY[0x1E0C83BF0](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x1E0C83C00](a1);
  return result;
}

int madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1E0C83E60](a1, a2, *(_QWORD *)&a3);
}

size_t malloc_good_size(size_t size)
{
  return MEMORY[0x1E0C83EB0](size);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl malloc_type_valloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F18](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int mprotect(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1E0C841F0](a1, a2, *(_QWORD *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyCppObjectAtomic(void *dest, const void *src, void (__cdecl *copyHelper)(void *, const void *))
{
  MEMORY[0x1E0DE7C20](dest, src, copyHelper);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1E0C84E68](a1, a2);
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

int setvbuf(FILE *a1, char *a2, int a3, size_t a4)
{
  return MEMORY[0x1E0C85398](a1, a2, *(_QWORD *)&a3, a4);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

char *__cdecl strcasestr(const char *__big, const char *__little)
{
  return (char *)MEMORY[0x1E0C85508](__big, __little);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

char *__cdecl strncat(char *__s1, const char *__s2, size_t __n)
{
  return (char *)MEMORY[0x1E0C855A0](__s1, __s2, __n);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x1E0C855C8](__big, __little, __len);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x1E0C85618](a1, a2);
  return result;
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1E0C85798](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

void vDSP_vfltu16(const unsigned __int16 *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C5E8](__A, __IA, __C, __IC, __N);
}

vImage_Error vImageConvert_16Fto16U(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CD28](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_16Uto16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CD48](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_PlanarFtoPlanar16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CFC0](src, dest, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_RGB16UtoRGBA16U(const vImage_Buffer *rgbSrc, const vImage_Buffer *aSrc, Pixel_16U alpha, const vImage_Buffer *rgbaDest, BOOL premultiply, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CFF0](rgbSrc, aSrc, alpha, rgbaDest, premultiply, *(_QWORD *)&flags);
}

kern_return_t vm_purgable_control(vm_map_t target_task, vm_address_t address, vm_purgable_t control, int *state)
{
  return MEMORY[0x1E0C85AE8](*(_QWORD *)&target_task, address, *(_QWORD *)&control, state);
}

xmlNodePtr xmlDocGetRootElement(const xmlDoc *doc)
{
  return (xmlNodePtr)MEMORY[0x1E0DE8D18](doc);
}

void xmlFreeDoc(xmlDocPtr cur)
{
  MEMORY[0x1E0DE8D38](cur);
}

xmlChar *__cdecl xmlNodeGetContent(const xmlNode *cur)
{
  return (xmlChar *)MEMORY[0x1E0DE8E70](cur);
}

xmlDocPtr xmlReadMemory(const char *buffer, int size, const char *URL, const char *encoding, int options)
{
  return (xmlDocPtr)MEMORY[0x1E0DE8EE0](buffer, *(_QWORD *)&size, URL, encoding, *(_QWORD *)&options);
}

int xmlStrEqual(const xmlChar *str1, const xmlChar *str2)
{
  return MEMORY[0x1E0DE8FF8](str1, str2);
}

int xmlStrlen(const xmlChar *str)
{
  return MEMORY[0x1E0DE9010](str);
}

