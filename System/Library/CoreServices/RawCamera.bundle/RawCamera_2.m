void sub_1D53668D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (__p)
    operator delete(__p);
  sub_1D532D710(&a38);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5366994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *exception;
  double v11;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v11 = (double)(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 920))(a1);
  return sub_1D5338D40(a2, 3u, 1u, v11, v4, v5, v6, v7, v8, *(uint64_t *)&v11);
}

void sub_1D5366A28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D5366A3C(uint64_t a1@<X0>, double **a2@<X8>)
{
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double *v17;
  double *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  unsigned int v22;
  void *__p;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28[3];

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 728))(v28);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 736))(&v25, a1);
  v21[0] = sub_1D5339044((uint64_t)&v25, 0);
  v21[1] = v4;
  v5 = *(double *)sub_1D53390D4((uint64_t)v21, 0);
  v6 = *(double *)v28[0];
  v20[0] = sub_1D5339044((uint64_t)&v25, 1u);
  v20[1] = v7;
  v8 = *(double *)sub_1D53390D4((uint64_t)v20, 0);
  v9 = *((double *)v28[0] + 1);
  v19[0] = sub_1D5339044((uint64_t)&v25, 2u);
  v19[1] = v10;
  sub_1D53390D4((uint64_t)v19, 0);
  sub_1D5338D40((uint64_t)&v22, 3u, 1u, v5 * v6, v11, v12, v13, v14, v15, COERCE__INT64(v8 * v9));
  v16 = sub_1D533A1F0(&v22);
  sub_1D528EB68(a2, 3uLL);
  v17 = (double *)v28[0];
  v18 = *a2;
  *v18 = *(double *)v28[0] * 32767.0 / v16;
  v18[1] = v17[1] * 32767.0 / v16;
  v18[2] = v17[2] * 32767.0 / v16;
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v28[0])
  {
    v28[1] = v28[0];
    operator delete(v28[0]);
  }
}

void sub_1D5366BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  v26 = *(void **)(v24 - 72);
  if (v26)
  {
    *(_QWORD *)(v24 - 64) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D5366C0C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1200))(a1);
}

uint64_t sub_1D5366C18(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1168))(a1);
}

uint64_t sub_1D5366C24(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1176))(a1);
}

uint64_t sub_1D5366C30(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1184))(a1);
}

uint64_t sub_1D5366C3C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1192))(a1);
}

_QWORD *sub_1D5366C48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  long double v13;
  double v14;
  double v15;
  double v16;
  double *v17;
  double *v18;
  double *v19;
  float v20;
  uint64_t i;
  unint64_t j;
  double v23;
  void *v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v30;
  void *exception;
  _QWORD v32[2];
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39[3];
  unsigned int v40;
  void *__p;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  _QWORD v46[35];

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) != 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 648))(v46, a1);
  v36 = COERCE_VOID_((*(double (**)(uint64_t))(*(_QWORD *)a1 + 720))(a1));
  v37 = v6;
  sub_1D5338D40((uint64_t)&v40, 3u, 3u, 0.6097, v7, v8, v9, v10, v11, 0x3FCA474538EF34D7);
  sub_1D536D624((uint64_t)v46, (double *)&v36, &v40, &v43);
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
  v36 = 0;
  sub_1D528F9B4(v39, 3uLL, &v36);
  if ((_DWORD)a2)
  {
    sub_1D5338F84(3u, (uint64_t)&v33);
    v12 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 800))(a1, a2);
    sub_1D5339590((unsigned int *)&v33, (uint64_t)&v36, v12);
    sub_1D53393A8(&v43, (uint64_t)&v36);
    if (v37)
    {
      v38 = v37;
      operator delete(v37);
    }
    if (v34)
    {
      v35 = v34;
      operator delete(v34);
    }
  }
  else
  {
    v13 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
    v14 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 952))(a1) * 0.001;
    v15 = 1.0 / (1.0 / exp2(v13) - v14);
    sub_1D5339590((unsigned int *)&v43, (uint64_t)&v36, v15);
    sub_1D53393A8(&v43, (uint64_t)&v36);
    if (v37)
    {
      v38 = v37;
      operator delete(v37);
    }
    v16 = v15 * v14 * -65535.0;
    v17 = (double *)v39[0];
    *(double *)v39[0] = v16;
    v17[1] = v16;
    v17[2] = v16;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 744))(&v36, a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) == 2)
  {
    v18 = (double *)v36;
    v19 = (double *)v37;
    while (v18 != v19)
    {
      v20 = *v18;
      *v18++ = v20;
    }
  }
  if (sub_1D5339398((unsigned int *)&v43) != 3
    || sub_1D53393A0((uint64_t)&v43) != 3 && sub_1D53393A0((uint64_t)&v43) != 4)
  {
    v30 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v30, "RawCameraException");
    __cxa_throw(v30, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D5338D3C(a3, 3u, 5u);
  for (i = 0; i != 3; ++i)
  {
    for (j = 0; j != 4; ++j)
    {
      v23 = 0.0;
      if (j < sub_1D53393A0((uint64_t)&v43))
      {
        v33 = sub_1D5339044((uint64_t)&v43, i);
        v34 = v24;
        v25 = (double *)sub_1D53390D4((uint64_t)&v33, j);
        if (j >= ((_BYTE *)v37 - (_BYTE *)v36) >> 3)
          sub_1D528EAE0();
        v23 = *v25 / *((double *)v36 + j);
      }
      v32[0] = sub_1D5339044(a3, i);
      v32[1] = v26;
      *(double *)sub_1D53390D4((uint64_t)v32, j) = v23;
    }
    v27 = *((_QWORD *)v39[0] + i);
    v33 = sub_1D5339044(a3, i);
    v34 = v28;
    *(_QWORD *)sub_1D53390D4((uint64_t)&v33, 4u) = v27;
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  return sub_1D532D710(v46);
}

void sub_1D5367094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  if (a35)
    operator delete(a35);
  sub_1D532D710(&a38);
  _Unwind_Resume(a1);
}

void sub_1D536719C(uint64_t a1, int a2)
{
  char v4;
  uint64_t v5;
  void *__p;
  void *v7;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2152))(a1);
  if (a2 && (v4 & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, double))(*(_QWORD *)a1 + 736))(&v5, a1, 1.0);
    sub_1D533A1F0((unsigned int *)&v5);
    if (__p)
    {
      v7 = __p;
      operator delete(__p);
    }
  }
}

void sub_1D5367220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D536723C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1160))(a1);
}

uint64_t sub_1D5367248(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E997DCA0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D5338BEC((_OWORD *)(a1 + 16));
  sub_1D5338BEC((_OWORD *)(a1 + 48));
  sub_1D5338BEC((_OWORD *)(a1 + 80));
  sub_1D5338BEC((_OWORD *)(a1 + 112));
  sub_1D5338BEC((_OWORD *)(a1 + 144));
  sub_1D5338BEC((_OWORD *)(a1 + 176));
  *(_WORD *)(a1 + 208) = 0;
  sub_1D5338BEC((_OWORD *)(a1 + 216));
  sub_1D5338BEC((_OWORD *)(a1 + 248));
  return a1;
}

void sub_1D53672B8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = (void *)v1[28];
  if (v3)
  {
    v1[29] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[23];
  if (v4)
  {
    v1[24] = v4;
    operator delete(v4);
  }
  v5 = (void *)v1[19];
  if (v5)
  {
    v1[20] = v5;
    operator delete(v5);
  }
  v6 = (void *)v1[15];
  if (v6)
  {
    v1[16] = v6;
    operator delete(v6);
  }
  v7 = (void *)v1[11];
  if (v7)
  {
    v1[12] = v7;
    operator delete(v7);
  }
  v8 = (void *)v1[7];
  if (v8)
  {
    v1[8] = v8;
    operator delete(v8);
  }
  v9 = (void *)v1[3];
  if (v9)
  {
    v1[4] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D5367364(uint64_t a1@<X0>, unsigned int *a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *__p;
  void *v12;
  void *v13;
  _BYTE *v14;
  void *v15;
  _BYTE *v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    sub_1D5365988(a2);
  }
  else
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1744))(&v15, a1);
    if (v16 - (_BYTE *)v15 != 24
      || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2952))(a1) & 0x80000000) != 0)
    {
      sub_1D5365988(a2);
    }
    else
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 2960))(&v13, a1);
      if (v14 - (_BYTE *)v13 == 24
        && (v4 = *((double *)v15 + 1),
            v5 = *((double *)v13 + 1),
            v6 = *(double *)v15 / v4 / (*(double *)v13 / v5),
            COERCE__INT64(fabs(v6)) <= 0x7FEFFFFFFFFFFFFFLL)
        && v6 >= 0.8
        && v6 <= 1.25
        && (v7 = *((double *)v15 + 2) / v4 / (*((double *)v13 + 2) / v5), COERCE__INT64(fabs(v7)) <= 0x7FEFFFFFFFFFFFFFLL)
        && v7 >= 0.8
        && v7 <= 1.25)
      {
        sub_1D5338F84(3u, (uint64_t)a2);
        v10 = sub_1D5339044((uint64_t)a2, 0);
        __p = v8;
        *(double *)sub_1D53390D4((uint64_t)&v10, 0) = v6;
        v10 = sub_1D5339044((uint64_t)a2, 2u);
        __p = v9;
        *(double *)sub_1D53390D4((uint64_t)&v10, 2u) = v7;
        sub_1D5339EC4(a2, (uint64_t)&v10, 10000.0);
        sub_1D53393A8(a2, (uint64_t)&v10);
        if (__p)
        {
          v12 = __p;
          operator delete(__p);
        }
      }
      else
      {
        sub_1D5365988(a2);
      }
      if (v13)
      {
        v14 = v13;
        operator delete(v13);
      }
    }
    if (v15)
    {
      v16 = v15;
      operator delete(v15);
    }
  }
}

void sub_1D5367580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D53675F8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = sub_1D53676B0(v2, CFSTR("daylightMultipliersOffset"), v3, &unk_1E998C018);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D536769C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53676B0(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t **v9;
  void **v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t (**v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  void (**v28)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void (*v29)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void *exception;
  _QWORD v32[4];
  id v33;
  std::string __p;
  uint64_t (*v35[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::string *p_p;
  std::__shared_weak_count *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  sub_1D531B8B8(v7, a3, &__p);
  v9 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_1D5367E84;
    v32[3] = &unk_1E9979B90;
    v13 = (uint64_t (**)(_QWORD))v8;
    v33 = v13;
    sub_1D53BC1FC(a1, v7, v32, &p_p);
    v18 = (__int128 *)p_p;
    if (p_p)
    {
      sub_1D53BE790((uint64_t)p_p, v14, v15, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v12 = objc_msgSend_longLongValue(v19, v20, v21, v22, v23);

    }
    else
    {
      v12 = 0;
    }
    v24 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    if (!v18)
      v12 = v13[2](v13);
    p_p = &__p;
    v27 = sub_1D531BAD4(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v28 = (void (**)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD))(v27 + 7);
    v35[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1D5367F00;
    v35[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v12;
    if (v35 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v27 + 7))
    {
      v29 = *v28;
      if (*v28)
      {
        p_p = 0;
        v37 = 0;
        v29(2, v28, &p_p, 0, 0);
        v35[0](2, v35, v28, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))p_p)(2, &p_p, v35, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        *((_DWORD *)v27 + 16) = v12;
        v27[7] = (uint64_t)sub_1D5367F00;
        v35[0] = 0;
      }
    }
    sub_1D531BC8C(v35);
  }
  else
  {
    v11 = (unsigned int *)sub_1D5367EB8((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v12;
}

void sub_1D5367980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a25);
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D5367A0C()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1D5367A14(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *v13;

  v13 = &unk_1E997C018;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v11);
  v5 = sub_1D5291C1C(v11, a2, (uint64_t)&v13);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = a3[1];
  if (v9 != *a3)
  {
    if (v5 >= (unint64_t)((v9 - *a3) >> 2))
      return 0;
    else
      return *(unsigned int *)(*a3 + 4 * v5);
  }
  return v5;
}

void sub_1D5367AD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D5367AEC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  *(_DWORD *)(a4 + 8) = a2;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 600))(v9, a3, a4, 3);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1D5367B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5367BA0(uint64_t a1)
{
  void *v1;
  void **p_lpsrc;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v12;
  void *v13;
  std::__shared_weak_count *v14;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v1 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9972B38, 0)) != 0)
  {
    v13 = v1;
    v14 = v12;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v13;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v13)
    v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 808))(v13);
  else
    v6 = 0;
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1D5367CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1D5367CB4(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  id v9;
  void *v10;

  v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, (uint64_t)CFSTR("isMultipleExposure"), v5, v6))
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2984))(a1);
    v8 = (void *)MEMORY[0x1E0C9AAA0];
    if (v7)
      v8 = (void *)MEMORY[0x1E0C9AAB0];
    v9 = v8;
  }
  else
  {
    sub_1D54210E0(a1, v3);
    v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  v10 = v9;

  return v10;
}

void sub_1D5367D34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5367D44(uint64_t a1@<X0>, void **a2@<X8>)
{
  uint64_t v4;
  char v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1) != 10)
    goto LABEL_12;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v12, a1);
  v4 = v12;
  sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE:BLACKLEVELS");
  v5 = (*(uint64_t (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v4 + 248))(v4, __p, a2, 0);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if ((v5 & 1) == 0)
  {
    v9 = *a2;
    if (*a2)
    {
      a2[1] = v9;
      operator delete(v9);
    }
LABEL_12:
    sub_1D5422158(a1, a2);
  }
}

void sub_1D5367E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  void *v18;

  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  v18 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D5367E84(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0CB37E8];
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return objc_msgSend_numberWithInt_(v1, v3, v2, v4, v5);
}

uint64_t (**sub_1D5367EB8(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, MEMORY[0x1E0DE4EF0], &unk_1D544CE6C);
    else
      return 0;
  }
  return result;
}

void sub_1D5367F00(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D5367F34()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_1D5367FB8(uint64_t a1)
{
  void *v2;
  void **p_lpsrc;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  _BOOL4 v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *lpsrc;
  std::__shared_weak_count *v17;
  void *v18;
  std::__shared_weak_count *v19;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v2 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9977E08, 0)) != 0)
  {
    v18 = v2;
    v19 = v17;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v18;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v4 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v18)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v18 + 792))(&lpsrc);
    v7 = v17;
    v8 = lpsrc != 0;
    if (v17)
    {
      v9 = (unint64_t *)&v17->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2952))(a1);
  v12 = v19;
  if (v19)
  {
    v13 = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v8 | v11;
}

void sub_1D5368118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D5368130(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  void *v5;
  void **p_lpsrc;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *exception;
  float *v21;
  std::__shared_weak_count *v22;
  void *lpsrc;
  std::__shared_weak_count *v24;
  void *v25;
  std::__shared_weak_count *v26;

  sub_1D5299D3C((_DWORD *)a1);
  if (*(_BYTE *)(a1 + 400))
    goto LABEL_44;
  *(_BYTE *)(a1 + 400) = 1;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&lpsrc, a1);
  if (lpsrc
    && (v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9977E08, 0)) != 0)
  {
    v25 = v5;
    v26 = v24;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v25;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v7 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v25)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v25 + 792))(&lpsrc);
    if (lpsrc)
    {
      (*(void (**)(float **__return_ptr, uint64_t))(*(_QWORD *)a1 + 384))(&v21, a1);
      if (!v21)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      sub_1D5336778((uint64_t)lpsrc, &v21);
      sub_1D5336EF8((uint64_t)lpsrc, (uint64_t *)&v21);
      sub_1D53374E4((uint64_t)lpsrc, (uint64_t *)&v21);
      v10 = v22;
      if (v22)
      {
        v11 = (unint64_t *)&v22->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = 0;
    }
    else
    {
      v13 = 1;
    }
    v14 = v24;
    if (v24)
    {
      v15 = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    v13 = 1;
  }
  v17 = v26;
  if (v26)
  {
    v18 = (unint64_t *)&v26->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (!v13)
  {
LABEL_44:
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2952))(a1))
    {
      if (!*(_BYTE *)(a1 + 401))
      {
        *(_BYTE *)(a1 + 401) = 1;
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 384))(&v25, a1);
        (*(void (**)(void *))(*(_QWORD *)v25 + 16))(v25);
        v2 = v26;
        if (v26)
        {
          v3 = (unint64_t *)&v26->__shared_owners_;
          do
            v4 = __ldaxr(v3);
          while (__stlxr(v4 - 1, v3));
          if (!v4)
          {
            ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
            std::__shared_weak_count::__release_weak(v2);
          }
        }
      }
    }
  }
}

void sub_1D53683D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D5368424(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void **p_lpsrc;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  void *lpsrc;
  std::__shared_weak_count *v35;
  void *v36;
  std::__shared_weak_count *v37;

  sub_1D5299C2C((uint64_t)a1);
  v2 = a1 + 3;
  if (a1[3])
    return;
  (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 160))(&lpsrc, a1);
  if (lpsrc
    && (v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9977E08, 0)) != 0)
  {
    v36 = v3;
    v37 = v35;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v36;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v5 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v36)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 160))(&v33, a1);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v33 + 384))(&lpsrc);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v32 = 0;
    v32 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
    v11 = v36;
    if ((*(unsigned int (**)(void *))(*(_QWORD *)v36 + 536))(v36) == 7)
    {
      if (sub_1D5368854((uint64_t)a1))
      {
        v31 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
        *(_QWORD *)&v30 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
        *((_QWORD *)&v30 + 1) = v12;
        sub_1D53691E4(&lpsrc, (unint64_t *)&v32, &v31, &v30, &v33);
        v13 = v33;
        (*(void (**)(__int128 *__return_ptr, void *))(*(_QWORD *)v11 + 792))(&v30, v11);
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v13 + 208))(v13, &v30);
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
        if (*((_QWORD *)&v30 + 1))
        {
          v15 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        sub_1D52908C8(v2, (uint64_t *)&v33);
        v17 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
        if (!*((_QWORD *)&v33 + 1))
          goto LABEL_39;
        v18 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        goto LABEL_37;
      }
      v31 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
      *(_QWORD *)&v30 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
      *((_QWORD *)&v30 + 1) = v22;
      sub_1D5369264(&lpsrc, (unint64_t *)&v32, &v31, &v30, &v33);
      sub_1D52908C8(a1 + 3, (uint64_t *)&v33);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
      if (*((_QWORD *)&v33 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
        do
          v19 = __ldaxr(v23);
        while (__stlxr(v19 - 1, v23));
        goto LABEL_37;
      }
    }
    else if ((*(unsigned int (**)(void *))(*(_QWORD *)v11 + 536))(v11) == 1)
    {
      v31 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
      *(_QWORD *)&v30 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
      *((_QWORD *)&v30 + 1) = v20;
      sub_1D53551FC(&lpsrc, (unint64_t *)&v32, &v31, &v30, &v33);
      sub_1D5292548((uint64_t)(a1 + 3), &v33);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
      if (*((_QWORD *)&v33 + 1))
      {
        v21 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
        do
          v19 = __ldaxr(v21);
        while (__stlxr(v19 - 1, v21));
LABEL_37:
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
LABEL_39:
    v24 = v35;
    if (v35)
    {
      v25 = (unint64_t *)&v35->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  v27 = v37;
  if (v37)
  {
    v28 = (unint64_t *)&v37->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_1D53687E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_1D5282EB4((uint64_t)va);
  sub_1D5282EB4(v8 - 56);
  _Unwind_Resume(a1);
}

BOOL sub_1D5368854(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _BOOL8 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v15;
  uint64_t v16[3];
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;

  v1 = MEMORY[0x1E0C80A78](a1);
  v21 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 160))(&v19);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v19 + 384))(&v17);
  v2 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 336))(v1);
  sub_1D5282FE0(&v15, (unint64_t *)&v19);
  sub_1D5285164(v16, &v17, (uint64_t)&v15, 0);
  bzero(&v19, 0x1000uLL);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v17 + 32))(v17, &v19, 4096);
  if (bswap32((unsigned __int16)v19) >> 16 == 65496)
  {
    v5 = 2;
    while (v5 <= 4093)
    {
      v6 = __rev16(*(unsigned __int16 *)((char *)&v19 + v5));
      if (v6 == 0xFFFF)
      {
        ++v5;
      }
      else
      {
        v7 = 0;
        if (v6 < 0xFF01)
          goto LABEL_20;
        v8 = (*((unsigned __int8 *)&v19 + v5 + 3) | ((unint64_t)*((unsigned __int8 *)&v19 + v5 + 2) << 8)) - 2;
        if (v8 > 0xFF)
          goto LABEL_20;
        v9 = v5 + 4;
        v5 += v8 + 4;
        if (v5 > 4095)
          break;
        if (v6 == 65498)
        {
          v7 = 0;
          if (*((unsigned __int8 *)&v19 + v9) - 1 <= 2)
          {
            v10 = 2 * *((unsigned __int8 *)&v19 + v9);
            if (v8 == v10 + 4)
              v7 = *((unsigned __int8 *)&v19 + v9 + (v10 | 1)) == 8;
          }
          goto LABEL_20;
        }
      }
    }
  }
  v7 = 0;
LABEL_20:
  sub_1D5285200(v16);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v7;
}

void sub_1D5368A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D5368AE8(uint64_t a1@<X0>, float64x2_t **a2@<X8>)
{
  void *v4;
  void **p_lpsrc;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *lpsrc;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void *v32;
  std::__shared_weak_count *v33;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9977E08, 0)) != 0)
  {
    v32 = v4;
    v33 = v29;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v32;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v6 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v32)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v32 + 784))(&v30);
    v9 = v30;
    if (v30)
    {
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1008))(a1);
      v27 = v10;
      sub_1D530DE0C(v9, (int *)&v26, &lpsrc);
      v11 = v30;
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1008))(a1);
      v27 = v12;
      sub_1D530E4D0(v11, (int *)&v26, &lpsrc, a2);
      v13 = *a2;
      __asm { FMOV            V1.2D, #0.5 }
      v19 = vmulq_f64(vaddq_f64(**a2, (*a2)[1]), _Q1);
      *v13 = v19;
      v13[1] = v19;
      if (lpsrc)
      {
        v29 = (std::__shared_weak_count *)lpsrc;
        operator delete(lpsrc);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    v20 = v31;
    if (v31)
    {
      v21 = (unint64_t *)&v31->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  v23 = v33;
  if (v33)
  {
    v24 = (unint64_t *)&v33->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1D5368CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  sub_1D5282EB4(v15 - 48);
  _Unwind_Resume(a1);
}

void sub_1D5368CFC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p[2];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *v17[2];
  uint64_t v18;
  uint64_t v19;

  v19 = 0;
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v15);
  v3 = v15;
  sub_1D52850A0(__p, "IFD0:SUBIFD0");
  if ((*(unsigned int (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v3 + 248))(v3, __p, v17, 0))
  {
    v5 = v17[0];
    v4 = v17[1];
    if (v14 < 0)
      operator delete(__p[0]);
    v6 = v4 - v5;
    v7 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v6 == 32)
    {
      *(_OWORD *)a2 = *(_OWORD *)v17;
      a2[2] = v18;
      return;
    }
  }
  else
  {
    if (v14 < 0)
      operator delete(__p[0]);
    v10 = v16;
    if (v16)
    {
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  sub_1D528F9B4(a2, 4uLL, &v19);
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
}

void sub_1D5368E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D5368E94(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *__p[2];
  char v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *v9;

  v9 = &unk_1E997C018;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v7);
  v1 = v7;
  sub_1D52850A0(__p, "IFD0");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v1 + 600))(v1, __p, &v9, 3);
  if (v6 < 0)
    operator delete(__p[0]);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1D5368F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_1D5368F80(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _BOOL8 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = sub_1D532B128(v2, CFSTR("requireStiching"), v3, &unk_1E998C050);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D5369024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5369038()
{
  return 0;
}

id sub_1D5369040(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  double v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *__p[2];
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  double v30;

  v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, (uint64_t)CFSTR("whiteLevelFromTag"), v5, v6))
  {
    v30 = 0.0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v28, a1);
    v7 = v28;
    sub_1D52850A0(__p, "IFD0:SUBIFD0");
    v12 = (*(uint64_t (**)(uint64_t, void **, double *))(*(_QWORD *)v7 + 240))(v7, __p, &v30);
    if (v27 < 0)
      operator delete(__p[0]);
    v13 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (void *)MEMORY[0x1E0CB37E8];
    if (v12)
    {
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v8, v9, v10, v11, v30);
    }
    else
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 864))(a1);
      v19 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 848))(a1) * (double)v18;
      objc_msgSend_numberWithDouble_(v16, v20, v21, v22, v23, v19);
    }
    v17 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    sub_1D54210E0(a1, v3);
    v17 = objc_claimAutoreleasedReturnValue();
  }
  v24 = (void *)v17;

  return v24;
}

void sub_1D5369180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  if (a14 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_1D53691C0(uint64_t a1)
{
  sub_1D5294858(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D53691E4(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x108uLL);
  sub_1D5354CB0((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D5369250(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1D5369264(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x11C0uLL);
  sub_1D53692E4(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D53692D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53692E4(_QWORD *a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5)
{
  a1[2] = 0;
  *a1 = &unk_1E9977580;
  a1[1] = 0;
  sub_1D5369330((uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1D536931C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5369330(uint64_t a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5)
{
  unint64_t v9;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;

  v9 = *a3;
  sub_1D52850A0(v13, "");
  sub_1D52850A0(__p, "");
  sub_1D5306E90(a1, a2, v9, a4, a5, (__int128 *)v13, (__int128 *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  return a1;
}

void sub_1D53693D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D536940C(uint64_t a1, int a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *exception;
  void *v28;
  void *v29;
  int v30;
  void *__p;
  _BYTE *v32;

  v5 = (_QWORD *)sub_1D544098C(a1, a2);
  *v5 = off_1E998CC38;
  v5[12] = 0;
  v6 = v5 + 12;
  v5[13] = 0;
  v5[14] = 0;
  *(_DWORD *)(a1 + 12) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 16) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 20) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 24) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 28) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 32) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 36) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 40) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 44) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 48) = sub_1D52847F8(*a3);
  *(double *)(a1 + 56) = sub_1D528494C(*a3);
  *(double *)(a1 + 64) = sub_1D528494C(*a3);
  *(double *)(a1 + 72) = sub_1D528494C(*a3);
  *(double *)(a1 + 80) = sub_1D528494C(*a3);
  v7 = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 88) = v7;
  if (v7 - 1 >= 7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v8 = *(unsigned int *)(a1 + 48) * (unint64_t)*(unsigned int *)(a1 + 44);
  if ((v8 & 0xFFFFFFFF00000000) != 0
    || (v9 = v7 * (unint64_t)v8, (v9 >> 30))
    || (v10 = sub_1D52CAD30(*a3), (v10 & 0x80000000) != 0)
    || v10 < 4 * (int)v9)
  {
    v28 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v28, "RawCameraException");
    __cxa_throw(v28, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v11 = *a3;
  v30 = *(_DWORD *)(a1 + 44) * *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 88);
  sub_1D52B3568(v11, (unsigned int *)&v30, (uint64_t *)&__p);
  v12 = *(unsigned int *)(a1 + 88);
  if (*(_DWORD *)(a1 + 44) * *(_DWORD *)(a1 + 48) * (_DWORD)v12 != (v32 - (_BYTE *)__p) >> 2)
  {
    v29 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v29, "RawCameraException");
    __cxa_throw(v29, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D53697A8(v6, v12);
  LODWORD(v13) = *(_DWORD *)(a1 + 88);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      sub_1D536983C(*(_QWORD *)(a1 + 96) + v14, (*(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 44)));
      ++v15;
      v13 = *(unsigned int *)(a1 + 88);
      v14 += 24;
    }
    while (v15 < v13);
  }
  v16 = *(_DWORD *)(a1 + 44);
  if (v16)
  {
    v17 = 0;
    v18 = 0;
    v19 = *(unsigned int *)(a1 + 48);
    do
    {
      if ((_DWORD)v19)
      {
        v20 = 0;
        v21 = __p;
        do
        {
          if ((_DWORD)v13)
          {
            v22 = (uint64_t *)*v6;
            v23 = v13;
            do
            {
              v24 = v18 + 1;
              v25 = *v22;
              v22 += 3;
              *(_DWORD *)(v25 + 4 * (v19 * v17 + v20)) = v21[v18++];
              --v23;
            }
            while (v23);
          }
          else
          {
            v24 = v18;
          }
          ++v20;
          v18 = v24;
        }
        while (v20 != v19);
      }
      else
      {
        v24 = v18;
      }
      ++v17;
      v18 = v24;
    }
    while (v17 != v16);
  }
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_1D536973C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  sub_1D5304DA8((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1D53697A8(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1D5369DF0(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void sub_1D536983C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_1D5369F54((char **)a1, a2 - v2);
  }
}

_QWORD *sub_1D5369870@<X0>(_QWORD *result@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  void *exception;

  if (*((_DWORD *)result + 22) >= a2)
  {
    v3 = result[12];
    if (0xAAAAAAAAAAAAAAABLL * ((result[13] - v3) >> 3) <= a2)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return sub_1D5287D44(a3, *(const void **)(v3 + 24 * a2), *(_QWORD *)(v3 + 24 * a2 + 8), (uint64_t)(*(_QWORD *)(v3 + 24 * a2 + 8) - *(_QWORD *)(v3 + 24 * a2)) >> 2);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

void sub_1D536991C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

id sub_1D5369930(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  double v117;
  _DWORD *v118;
  _DWORD *v119;
  void *v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  RAWOpcodeGainMap *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;

  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v7, *(unsigned int *)(a1 + 12), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v11, (uint64_t)v10, (uint64_t)CFSTR("Top"), v12);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v13, *(unsigned int *)(a1 + 16), v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v17, (uint64_t)v16, (uint64_t)CFSTR("Left"), v18);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v19, *(unsigned int *)(a1 + 20), v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v23, (uint64_t)v22, (uint64_t)CFSTR("Bottom"), v24);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v25, *(unsigned int *)(a1 + 24), v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v29, (uint64_t)v28, (uint64_t)CFSTR("Right"), v30);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v31, *(unsigned int *)(a1 + 28), v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v35, (uint64_t)v34, (uint64_t)CFSTR("Plane"), v36);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v37, *(unsigned int *)(a1 + 32), v38, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v41, (uint64_t)v40, (uint64_t)CFSTR("Planes"), v42);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v43, *(unsigned int *)(a1 + 36), v44, v45);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v47, (uint64_t)v46, (uint64_t)CFSTR("RowPitch"), v48);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v49, *(unsigned int *)(a1 + 40), v50, v51);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v53, (uint64_t)v52, (uint64_t)CFSTR("ColPitch"), v54);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v55, *(unsigned int *)(a1 + 44), v56, v57);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v59, (uint64_t)v58, (uint64_t)CFSTR("MapPointsV"), v60);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v61, *(unsigned int *)(a1 + 48), v62, v63);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v65, (uint64_t)v64, (uint64_t)CFSTR("MapPointsH"), v66);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v67, v68, v69, v70, *(double *)(a1 + 56));
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v72, (uint64_t)v71, (uint64_t)CFSTR("MapSpacingV"), v73);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v74, v75, v76, v77, *(double *)(a1 + 64));
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v79, (uint64_t)v78, (uint64_t)CFSTR("MapSpacingH"), v80);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v81, v82, v83, v84, *(double *)(a1 + 72));
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v86, (uint64_t)v85, (uint64_t)CFSTR("MapOriginV"), v87);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v88, v89, v90, v91, *(double *)(a1 + 80));
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v93, (uint64_t)v92, (uint64_t)CFSTR("MapOriginH"), v94);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v95, *(unsigned int *)(a1 + 88), v96, v97);
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v99, (uint64_t)v98, (uint64_t)CFSTR("MapPlanes"), v100);

  objc_msgSend_array(MEMORY[0x1E0C99DE8], v101, v102, v103, v104);
  v109 = (void *)objc_claimAutoreleasedReturnValue();
  v111 = *(_QWORD *)(a1 + 96);
  v110 = *(_QWORD *)(a1 + 104);
  while (v111 != v110)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v105, v106, v107, v108);
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    v118 = *(_DWORD **)v111;
    v119 = *(_DWORD **)(v111 + 8);
    while (v118 != v119)
    {
      LODWORD(v117) = *v118;
      objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v112, v113, v114, v115, v117);
      v120 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v116, v121, (uint64_t)v120, v122, v123);

      ++v118;
    }
    objc_msgSend_addObject_(v109, v112, (uint64_t)v116, v114, v115);

    v111 += 24;
  }
  objc_msgSend_setObject_forKeyedSubscript_(v6, v105, (uint64_t)v109, (uint64_t)CFSTR("MapGain"), v108);
  v124 = [RAWOpcodeGainMap alloc];
  v128 = (void *)objc_msgSend_initWithArguments_(v124, v125, (uint64_t)v6, v126, v127);

  return v128;
}

void sub_1D5369CD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5369D4C(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1E998CC38;
  v3 = (void **)(a1 + 96);
  sub_1D5304DA8(&v3);
  return a1;
}

uint64_t sub_1D5369D90(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1E998CC38;
  v3 = (void **)(a1 + 96);
  sub_1D5304DA8(&v3);
  return MEMORY[0x1D8271ADC](a1, 0x10A1C4048AAAAC6);
}

uint64_t sub_1D5369DE8()
{
  return 9;
}

void sub_1D5369DF0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_1D5293DCC(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_1D53047E0(a1, &v15);
    sub_1D530496C((uint64_t)&v15);
  }
}

void sub_1D5369F40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D530496C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D5369F54(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      sub_1D5282B8C();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1D5282BA0(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t sub_1D536A05C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 440))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D536A0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D536A0F0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 440))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D536A170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D536A184(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v13);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 432))(v13);
  v3 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v13, a1);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 440))(v13);
  v7 = v6;
  v8 = HIDWORD(v6);
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if ((int)v8 < (int)((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1) >> 32))
    v2 += 12 * v7 / 8;
  return v2;
}

void sub_1D536A2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D536A2CC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 512))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D536A34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D536A360(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void (**v4)(_QWORD);
  _WORD *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  unsigned int v16;
  int *v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  void *exception;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  _QWORD v44[5];
  int v45;
  uint8_t buf[8];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "COlympusE410Unpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v44[0] = MEMORY[0x1E0C809B0];
  v44[1] = 3221225472;
  v44[2] = sub_1D536A890;
  v44[3] = &unk_1E996F870;
  v44[4] = a1;
  v4 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v44);
  v43 = 7;
  v5 = (_WORD *)sub_1D530B618(a1);
  v6 = *(_QWORD *)(a1 + 24);
  sub_1D528594C(buf, &v43);
  (*(void (**)(uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v6 + 40))(v6, buf, 1);
  sub_1D5285A24(&v42, (unsigned int *)(a1 + 44));
  sub_1D5285A24(&v41, (unsigned int *)(a1 + 48));
  v38 = (*(uint64_t (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1);
  sub_1D5282F74(&v39, &v38);
  *(_DWORD *)buf = v39;
  v45 = *sub_1D52BFF48((int *)buf, &v43);
  sub_1D52859B8(&v40, (unsigned int *)&v45);
  *(_DWORD *)buf = v42;
  LODWORD(v6) = *sub_1D52B42B4(buf, &v41);
  *(_QWORD *)buf = 2;
  sub_1D528304C(&v39, (unint64_t *)buf);
  v45 = v6;
  v7 = sub_1D52B42B4(&v45, (unsigned int *)&v39);
  v8 = v40;
  if (*v7 < v40)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v9 = v41;
  v10 = v42;
  v11 = (unsigned __int8 *)&v5[v41 * v42 + 448] - v40;
  (*(void (**)(_QWORD, unsigned __int8 *, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v11, v40);
  if (v9)
  {
    v12 = 0;
    v13 = 0;
    v14 = &v11[v8];
    v15 = 32;
    do
    {
      *(_QWORD *)buf = 0;
      v47 = 0;
      v48 = 0;
      if ((_DWORD)v10)
      {
        v16 = 0;
        do
        {
          v17 = (int *)&buf[12 * (v16 & 1)];
          v18 = v17[2];
          if (v11 > v14)
            v11 = v14;
          if (v15 >= 16)
          {
            v13 = (v13 << 16) | (*v11 << 8) | v11[1];
            v11 += 2;
            v15 -= 16;
          }
          v19 = __clz((unsigned __int16)(*v17 >> (2 * (v18 < 3))) | (2 << (2 * (v18 < 3))));
          v20 = v13 << v15;
          v21 = __clz((8 * (v13 << v15)) | 0x80000);
          v22 = v15 + v21 + 4;
          if (v21 == 12)
          {
            v23 = v22 - 17;
            if (v22 < 17)
            {
              v23 = v22 - 1;
            }
            else
            {
              v13 = (v13 << 16) | (*v11 << 8) | v11[1];
              v11 += 2;
            }
            v21 = (v13 << v23) >> (48 - v19) >> 1;
            v22 = v19 + v23 - 16;
            if (v19 == 16)
              v21 = 0;
          }
          if (v22 >= 16)
          {
            v13 = (v13 << 16) | (*v11 << 8) | v11[1];
            v11 += 2;
            v22 -= 16;
          }
          v24 = 32 - v19;
          v25 = ((v13 << v22) >> v19) | (v21 << (32 - v19));
          v26 = v17[1];
          v27 = (v25 ^ (v20 >> 31)) + v26;
          *v17 = v25;
          v17[1] = (int)(3 * v27 + v26) >> 5;
          if (v25 <= 0x10)
            v28 = v18 + 1;
          else
            v28 = 0;
          v17[2] = v28;
          if (v12 < 2 || v16 < 2)
          {
            if ((v16 | v12) >= 2)
            {
              if (v12 > 1)
                LOWORD(v29) = v5[-2 * v10];
              else
                LOWORD(v29) = *(v5 - 2);
            }
            else
            {
              LOWORD(v29) = 0;
            }
          }
          else
          {
            v29 = (unsigned __int16)*(v5 - 2);
            v30 = (unsigned __int16)v5[-2 * v10];
            v31 = (unsigned __int16)v5[-2 * (int)v10 - 2];
            v32 = v29 - v31;
            if ((v29 >= v31 || v31 >= v30) && ((v33 = v30 - v31, v30 >= v31) || v31 >= v29))
            {
              if (v32 >= 0)
                v35 = v29 - v31;
              else
                v35 = v31 - v29;
              if (v33 >= 0)
                v36 = v33;
              else
                v36 = -v33;
              if (v35 <= v36)
                LOWORD(v29) = v5[-2 * v10];
              else
                LOWORD(v29) = *(v5 - 2);
            }
            else
            {
              if (v32 < 0)
                v32 = v31 - v29;
              if (v32 > 0x20)
                goto LABEL_34;
              v34 = v30 - v31;
              if ((int)(v30 - v31) < 0)
                v34 = v31 - v30;
              if (v34 < 0x21)
                v29 = (v30 + v29) >> 1;
              else
LABEL_34:
                LOWORD(v29) = v30 + v29 - v31;
            }
          }
          v15 = v22 + v24;
          *v5++ = ((v20 >> 29) & 3 | (4 * v27)) + v29;
          ++v16;
        }
        while ((_DWORD)v10 != v16);
      }
      ++v12;
    }
    while (v12 != v9);
  }
  v4[2](v4);

}

void sub_1D536A820(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D536A890(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "COlympusE410Unpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D536A914(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  char v7;
  int v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  unsigned int v32;
  __int16 v33;
  int v34;
  unsigned int v35;
  __int16 v36;
  int v37;
  unsigned int v38;
  __int16 v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  char *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  __int16 v50;
  unsigned int v51;
  __int16 v52;
  unsigned int v53;
  __int16 v54;
  unsigned int v55;
  __int16 v56;
  int v57;
  unsigned int v58;
  __int16 v59;
  int v60;
  unsigned int v61;
  __int16 v62;
  int v63;
  uint64_t v64;
  void *exception;
  void (**v66)(_QWORD);
  unint64_t *v67;
  char v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  os_signpost_id_t v76;
  uint64_t v77;
  unsigned int v78;
  uint8_t buf[4];
  _QWORD v80[5];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CPacked12SwappedUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v80[0] = MEMORY[0x1E0C809B0];
  v80[1] = 3221225472;
  v80[2] = sub_1D536AFFC;
  v80[3] = &unk_1E996F870;
  v80[4] = a1;
  v4 = MEMORY[0x1D82721B4](v80);
  v6 = *(_DWORD *)(a1 + 44);
  v5 = *(_DWORD *)(a1 + 48);
  v66 = (void (**)(_QWORD))v4;
  v67 = (unint64_t *)(a1 + 200);
  v7 = *(_QWORD *)(a1 + 200) != 0;
  v8 = (*(uint64_t (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1);
  v9 = v5 >> v7;
  v10 = (2 * ((3435973837u * (unint64_t)(v6 + 9)) >> 32)) & 0xFFFFFFF0;
  if ((_DWORD)v9 * v10 == v8)
    v11 = (2 * ((3435973837u * (unint64_t)(v6 + 9)) >> 32)) & 0xFFFFFFF0;
  else
    v11 = ((3 * v6) >> 1) & 0x1FFFFFFF;
  if ((_DWORD)v9 * v10 == v8)
    v12 = 16;
  else
    v12 = 15;
  v13 = *(_DWORD *)(a1 + 188);
  if (v11 * v9 > (*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v76 = a1;
  v77 = *(unsigned int *)(a1 + 192);
  v75 = v9;
  if ((_DWORD)v77 == 2)
  {
    v78 = ((*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1) >> 1)
        - v11 * (v9 >> 1);
    sub_1D5282F74((int *)buf, (int *)&v78);
    v70 = *(_DWORD *)buf;
    if (!*v67)
    {
LABEL_42:
      v42 = 0;
      v43 = 0;
      v74 = 2 * v6;
      do
      {
        v44 = sub_1D530B618(a1);
        v72 = v42;
        if (v42 < v9)
        {
          v45 = (char *)(v44 + 2 * v6 * v42);
          do
          {
            (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)(v76 + 24) + 32))(*(_QWORD *)(v76 + 24), &v45[v74 - v11], v11);
            v46 = (unsigned __int8 *)&v45[v74 - v11 + v43];
            if ((_DWORD)v42)
            {
              v47 = 0;
            }
            else
            {
              v43 = v13;
              v47 = v13;
            }
            if (v6 == v6 % 0xA)
            {
              v48 = 0;
            }
            else
            {
              v48 = 0;
              do
              {
                v49 = v46[1];
                v50 = *v46 | ((v49 & 0xF) << 8);
                LOWORD(v49) = (v49 >> 4) | (16 * v46[2]);
                v51 = v46[4];
                v52 = v46[3] | ((v51 & 0xF) << 8);
                LOWORD(v51) = (v51 >> 4) | (16 * v46[5]);
                *(_WORD *)v45 = v50;
                *((_WORD *)v45 + 1) = v49;
                v53 = v46[7];
                v54 = v46[6] | ((v53 & 0xF) << 8);
                LOWORD(v53) = (v53 >> 4) | (16 * v46[8]);
                *((_WORD *)v45 + 2) = v52;
                *((_WORD *)v45 + 3) = v51;
                v55 = v46[10];
                v56 = v46[9] | ((v55 & 0xF) << 8);
                v57 = (v55 >> 4) | (16 * v46[11]);
                *((_WORD *)v45 + 4) = v54;
                *((_WORD *)v45 + 5) = v53;
                v58 = v46[13];
                v59 = v46[12] | ((v58 & 0xF) << 8);
                v60 = (v58 >> 4) | (16 * v46[14]);
                *((_WORD *)v45 + 6) = v56;
                *((_WORD *)v45 + 7) = v57;
                *((_WORD *)v45 + 8) = v59;
                *((_WORD *)v45 + 9) = v60;
                v46 += v12;
                v45 += 20;
                v48 += 10;
              }
              while (v48 < 10 * (v6 / 0xA));
            }
            while (v48 < v6)
            {
              v61 = v46[1];
              v62 = *v46 | ((v61 & 0xF) << 8);
              v63 = (v61 >> 4) | (16 * v46[2]);
              *(_WORD *)v45 = v62;
              *((_WORD *)v45 + 1) = v63;
              v46 += 3;
              v45 += 4;
              v48 += 2;
            }
            v11 += v47;
            v45 += 2 * ((_DWORD)v77 - 1) * v6;
            LODWORD(v42) = v42 + v77;
          }
          while (v42 < v9);
        }
        a1 = v76;
        if (v70 && !v72)
        {
          v64 = *(_QWORD *)(v76 + 24);
          *(_DWORD *)buf = v70;
          (*(void (**)(uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v64 + 40))(v64, buf, 1);
        }
        v42 = v72 + 1;
      }
      while (v72 + 1 != v77);
      goto LABEL_60;
    }
  }
  else
  {
    if (!*v67)
    {
      if (!(_DWORD)v77)
        goto LABEL_60;
      v70 = 0;
      goto LABEL_42;
    }
    v70 = 0;
  }
  v14 = 0;
  v15 = 0;
  v73 = 2 * v6;
  v16 = 1;
  do
  {
    v68 = v16;
    if ((v14 & 1) != 0)
    {
      v17 = *(_QWORD *)(a1 + 24);
      sub_1D5282FE0(buf, v67);
      (*(void (**)(uint64_t, uint8_t *, _QWORD))(*(_QWORD *)v17 + 40))(v17, buf, 0);
    }
    if ((_DWORD)v77)
    {
      v18 = 0;
      v69 = v15 * v77 * v6;
      v19 = 0;
      v20 = v75;
      do
      {
        v21 = sub_1D530B618(a1);
        v71 = v19;
        if (v19 < v20)
        {
          v22 = (char *)(v21 + 2 * v6 * v19 + 2 * v69);
          do
          {
            (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)(v76 + 24) + 32))(*(_QWORD *)(v76 + 24), &v22[v73 - v11], v11);
            v23 = (unsigned __int8 *)&v22[v73 - v11 + v18];
            if ((_DWORD)v19)
            {
              v24 = 0;
            }
            else
            {
              v18 = v13;
              v24 = v13;
            }
            if (v6 == v6 % 0xA)
            {
              v25 = 0;
              v20 = v75;
            }
            else
            {
              v25 = 0;
              v20 = v75;
              do
              {
                v26 = v23[1];
                v27 = *v23 | ((v26 & 0xF) << 8);
                LOWORD(v26) = (v26 >> 4) | (16 * v23[2]);
                v28 = v23[4];
                v29 = v23[3] | ((v28 & 0xF) << 8);
                LOWORD(v28) = (v28 >> 4) | (16 * v23[5]);
                *(_WORD *)v22 = v27;
                *((_WORD *)v22 + 1) = v26;
                v30 = v23[7];
                v31 = v23[6] | ((v30 & 0xF) << 8);
                LOWORD(v30) = (v30 >> 4) | (16 * v23[8]);
                *((_WORD *)v22 + 2) = v29;
                *((_WORD *)v22 + 3) = v28;
                v32 = v23[10];
                v33 = v23[9] | ((v32 & 0xF) << 8);
                v34 = (v32 >> 4) | (16 * v23[11]);
                *((_WORD *)v22 + 4) = v31;
                *((_WORD *)v22 + 5) = v30;
                v35 = v23[13];
                v36 = v23[12] | ((v35 & 0xF) << 8);
                v37 = (v35 >> 4) | (16 * v23[14]);
                *((_WORD *)v22 + 6) = v33;
                *((_WORD *)v22 + 7) = v34;
                *((_WORD *)v22 + 8) = v36;
                *((_WORD *)v22 + 9) = v37;
                v23 += v12;
                v22 += 20;
                v25 += 10;
              }
              while (v25 < 10 * (v6 / 0xA));
            }
            while (v25 < v6)
            {
              v38 = v23[1];
              v39 = *v23 | ((v38 & 0xF) << 8);
              v40 = (v38 >> 4) | (16 * v23[2]);
              *(_WORD *)v22 = v39;
              *((_WORD *)v22 + 1) = v40;
              v23 += 3;
              v22 += 4;
              v25 += 2;
            }
            v11 += v24;
            v22 += 2 * (2 * (_DWORD)v77 - 1) * v6;
            LODWORD(v19) = v19 + v77;
          }
          while (v19 < v20);
        }
        a1 = v76;
        if (v70 && !v71)
        {
          v41 = *(_QWORD *)(v76 + 24);
          *(_DWORD *)buf = v70;
          (*(void (**)(uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v41 + 40))(v41, buf, 1);
        }
        v19 = v71 + 1;
      }
      while (v71 + 1 != v77);
    }
    v16 = 0;
    v14 = 1;
    v15 = 1;
  }
  while ((v68 & 1) != 0);
LABEL_60:
  v66[2](v66);

}

void sub_1D536AFA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D536AFFC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CPacked12SwappedUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D536B080(_QWORD *a1)
{
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D536B0A4(int *a1)
{
  NSObject *v2;
  NSObject *v3;
  void (**v4)(_QWORD, _QWORD, _QWORD, __n128, __n128, __n128, __n128);
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  unsigned int v20;
  unsigned int v21;
  double v22;
  unsigned int v23;
  unsigned int v24;
  __n128 v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _WORD *v41;
  double v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  BOOL v49;
  double v50;
  double v51;
  double v52;
  double v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  void *exception;
  void *v86;
  double v87;
  unint64_t v88;
  double v89;
  double v90;
  _QWORD v91[5];
  uint8_t buf[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((unint64_t)a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)a1, "CUnpackedYCbCrUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v91[0] = MEMORY[0x1E0C809B0];
  v91[1] = 3221225472;
  v91[2] = sub_1D536B88C;
  v91[3] = &unk_1E996F870;
  v91[4] = a1;
  v4 = (void (**)(_QWORD, _QWORD, _QWORD, __n128, __n128, __n128, __n128))MEMORY[0x1D82721B4](v91);
  v5 = a1[47];
  if (v5 >= 0x11
    || a1[11] < 1
    || a1[12] <= 0
    || v5 != 8
    || (*(unsigned int (**)(int *))(*(_QWORD *)a1 + 40))(a1) != 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v6 = a1[11];
  v7 = a1[12];
  v8 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 40))(a1);
  v9 = v7 * (uint64_t)v6;
  if (v9 * (unint64_t)v8 > (*(unsigned int (**)(int *))(*(_QWORD *)a1 + 152))(a1))
  {
    v86 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v86, "RawCameraException");
    __cxa_throw(v86, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v10 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 40))(a1);
  v11 = (_WORD *)sub_1D530B618((uint64_t)a1);
  v12 = sub_1D530C74C((uint64_t)a1);
  v13 = v9 * v10;
  v14 = (unsigned __int8 *)v11 + v12 - v13;
  (*(void (**)(_QWORD, unsigned __int8 *, uint64_t))(**((_QWORD **)a1 + 3) + 32))(*((_QWORD *)a1 + 3), v14, v13);
  v20 = v14[1];
  v21 = v14[4];
  v22 = 0.5;
  v23 = (int)(((double)(v14[3] | ((v21 & 0xF) << 8)) + -2048.0) * 1280.0 * 0.00048828125 + 2048.0);
  v24 = (int)(((double)((v21 >> 4) | (16 * v14[5])) + -2048.0) * 1280.0 * 0.00048828125 + 2048.0);
  v25.n128_f64[0] = (double)(int)((double)(*v14 | ((v20 & 0xF) << 8)) / 2550.0 * 4096.0
                                              + 0.5)
                  * 0.000244140625;
  if (v25.n128_f64[0] <= 1.0)
    v26 = (double)(int)((double)(*v14 | ((v20 & 0xF) << 8)) / 2550.0 * 4096.0 + 0.5)
        * 0.000244140625;
  else
    v26 = 1.0;
  v27 = 0.0;
  if (v25.n128_f64[0] >= 0.0)
    v28 = v26;
  else
    v28 = 0.0;
  v29 = 0.0;
  if (v28 <= 0.8)
  {
    v27 = ((double)v23 + -1280.0) / 1536.0 + -0.5;
    v29 = ((double)v24 + -1280.0) / 1536.0 + -0.5;
  }
  v30 = v14[2];
  v31 = v28 + v29 * 1.402;
  v32 = 3072.0;
  if (v31 <= 1.0)
    v33 = v31 * 3072.0;
  else
    v33 = 3072.0;
  v34 = v28 + v27 * -0.34414 + v29 * -0.71414;
  v19.n128_f64[0] = v34 * 3072.0;
  if (v34 > 1.0)
    v19.n128_f64[0] = 3072.0;
  v35 = v28 + v27 * 1.772;
  if (v35 <= 1.0)
    v32 = v35 * 3072.0;
  if (qword_1EFF38728 != -1)
  {
    v90 = v31;
    v88 = v19.n128_u64[0];
    v89 = v33;
    v87 = v32;
    dispatch_once(&qword_1EFF38728, &unk_1E998DB18);
    v32 = v87;
    v19.n128_u64[0] = v88;
    v33 = v89;
    v31 = v90;
    v22 = 0.5;
  }
  v17.n128_u64[0] = 0;
  if (v31 >= 0.0)
    v36 = v33;
  else
    v36 = 0.0;
  v25.n128_f64[0] = dbl_1EFF32720[(int)v36];
  if (v25.n128_f64[0] < 0.0)
    v25.n128_f64[0] = 0.0;
  if (v34 >= 0.0)
    v37 = v19.n128_f64[0];
  else
    v37 = 0.0;
  v18.n128_f64[0] = dbl_1EFF32720[(int)v37];
  if (v18.n128_f64[0] < 0.0)
    v18.n128_f64[0] = 0.0;
  if (v35 >= 0.0)
    v38 = v32;
  else
    v38 = 0.0;
  v19.n128_f64[0] = dbl_1EFF32720[(int)v38];
  if (v19.n128_f64[0] < 0.0)
    v19.n128_f64[0] = 0.0;
  *v11 = (int)v25.n128_f64[0];
  v11[1] = (int)v18.n128_f64[0];
  v11[2] = (int)v19.n128_f64[0];
  if ((unint64_t)(v9 - 2) >= 2)
  {
    v39 = (unint64_t)(v9 - 2) >> 1;
    v40 = (unsigned __int8 *)v11 + v12 - v13 + 11;
    v41 = v11 + 8;
    v42 = v22 + (double)((v20 >> 4) | (16 * v30)) / 2550.0 * 4096.0;
    v25.n128_u64[0] = 0.5;
    v18.n128_u64[0] = 1.0;
    v15 = 0xC094000000000000;
    v16 = 0x4098000000000000;
    v19.n128_u64[0] = -0.5;
    do
    {
      v43 = *(v40 - 1);
      v44 = (v43 >> 4) | (16 * *v40);
      v45 = (int)(((double)(*(v40 - 2) | ((v43 & 0xF) << 8)) + -2048.0) * 1280.0 * 0.00048828125
                + 2048.0);
      v46 = (int)(((double)v44 + -2048.0) * 1280.0 * 0.00048828125 + 2048.0);
      v47 = (double)(int)v42 * 0.000244140625;
      if (v47 <= 1.0)
        v48 = (double)(int)v42 * 0.000244140625;
      else
        v48 = 1.0;
      v49 = v47 < 0.0;
      v50 = 0.0;
      if (v49)
        v51 = 0.0;
      else
        v51 = v48;
      v52 = 0.0;
      v53 = 0.0;
      if (v51 <= 0.8)
      {
        v52 = ((double)((v45 + (unsigned __int16)v23) >> 1) + -1280.0) / 1536.0 + -0.5;
        v53 = ((double)((v46 + (unsigned __int16)v24) >> 1) + -1280.0) / 1536.0 + -0.5;
      }
      v54 = *(v40 - 4);
      v55 = (int)((double)(*(v40 - 5) | ((v54 & 0xF) << 8)) / 2550.0 * 4096.0 + 0.5);
      v56 = *(v40 - 3);
      v57 = v51 + v53 * 1.402;
      v58 = v57 * 3072.0;
      if (v57 > 1.0)
        v58 = 3072.0;
      v59 = v51 + v52 * -0.34414 + v53 * -0.71414;
      v60 = v59 * 3072.0;
      if (v59 > 1.0)
        v60 = 3072.0;
      v61 = v51 + v52 * 1.772;
      v62 = v61 * 3072.0;
      if (v61 > 1.0)
        v62 = 3072.0;
      if (v57 >= 0.0)
        v63 = v58;
      else
        v63 = 0.0;
      v64 = dbl_1EFF32720[(int)v63];
      if (v64 < 0.0)
        v64 = 0.0;
      if (v59 >= 0.0)
        v65 = v60;
      else
        v65 = 0.0;
      v66 = dbl_1EFF32720[(int)v65];
      if (v66 < 0.0)
        v66 = 0.0;
      if (v61 >= 0.0)
        v67 = v62;
      else
        v67 = 0.0;
      v68 = dbl_1EFF32720[(int)v67];
      if (v68 < 0.0)
        v68 = 0.0;
      *(v41 - 5) = (int)v64;
      *(v41 - 4) = (int)v66;
      *(v41 - 3) = (int)v68;
      v69 = (double)v55 * 0.000244140625;
      if (v69 <= 1.0)
        v70 = (double)v55 * 0.000244140625;
      else
        v70 = 1.0;
      if (v69 >= 0.0)
        v71 = v70;
      else
        v71 = 0.0;
      v72 = 0.0;
      if (v71 <= 0.8)
      {
        v50 = ((double)v45 + -1280.0) / 1536.0 + -0.5;
        v72 = ((double)v46 + -1280.0) / 1536.0 + -0.5;
      }
      v42 = (double)((v54 >> 4) | (16 * v56)) / 2550.0 * 4096.0 + 0.5;
      v73 = v71 + v72 * 1.402;
      v74 = v73 * 3072.0;
      if (v73 > 1.0)
        v74 = 3072.0;
      v75 = v71 + v50 * -0.34414 + v72 * -0.71414;
      v76 = v75 * 3072.0;
      if (v75 > 1.0)
        v76 = 3072.0;
      v77 = v71 + v50 * 1.772;
      v78 = v77 * 3072.0;
      if (v77 > 1.0)
        v78 = 3072.0;
      if (v73 >= 0.0)
        v79 = v74;
      else
        v79 = 0.0;
      v80 = dbl_1EFF32720[(int)v79];
      if (v80 < 0.0)
        v80 = 0.0;
      if (v75 >= 0.0)
        v81 = v76;
      else
        v81 = 0.0;
      v82 = dbl_1EFF32720[(int)v81];
      if (v82 < 0.0)
        v82 = 0.0;
      if (v77 >= 0.0)
        v83 = v78;
      else
        v83 = 0.0;
      v40 += 6;
      v84 = dbl_1EFF32720[(int)v83];
      if (v84 < 0.0)
        v84 = 0.0;
      *(v41 - 2) = (int)v80;
      *(v41 - 1) = (int)v82;
      *v41 = (int)v84;
      v41 += 6;
      LOWORD(v24) = v46;
      LOWORD(v23) = v45;
      --v39;
    }
    while (v39);
  }
  v4[2](v4, v15, v16, v17, v25, v18, v19);

}

void sub_1D536B834(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D536B88C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CUnpackedYCbCrUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D536B910()
{
  uint64_t v0;
  int32x2_t v1;
  uint64x2_t v2;
  int64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  double v12;
  int64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  uint64x2_t v20;
  float64x2_t __x;
  long double v22;
  int64x2_t v23;
  unsigned __int8 v24;

  v0 = 0;
  v1 = (int32x2_t)0x100000000;
  v2 = (uint64x2_t)xmmword_1D5447F70;
  v19 = (float64x2_t)vdupq_n_s64(0x40A8000000000000uLL);
  v20 = (uint64x2_t)vdupq_n_s64(0xC01uLL);
  v17 = (float64x2_t)vdupq_n_s64(0x3FADA98DF96BFFE8uLL);
  v18 = (float64x2_t)vdupq_n_s64(0xC00A40CA1EA7DC78);
  v15 = (float64x2_t)vdupq_n_s64(0xC024B4E61F0CC868);
  v16 = (float64x2_t)vdupq_n_s64(0x4020DCDB39699687uLL);
  __asm { FMOV            V0.2D, #1.0 }
  v14 = _Q0;
  v13 = vdupq_n_s64(2uLL);
  do
  {
    v23 = (int64x2_t)v2;
    v24 = vmovn_s64((int64x2_t)vcgtq_u64(v20, v2)).u8[0];
    v8.i64[0] = v1.i32[0];
    v8.i64[1] = v1.i32[1];
    v9 = vdivq_f64(vcvtq_f64_s64(v8), v19);
    __x = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v9, vmulq_f64(v9, v18)), v17, v9), v9, vmulq_f64(v9, vmulq_f64(v9, v16))), v9, vmulq_f64(v9, vmulq_f64(v9, vmulq_f64(v9, v15))));
    v22 = exp(__x.f64[1]);
    v10.f64[0] = exp(__x.f64[0]);
    v10.f64[1] = v22;
    v11 = vsubq_f64(v14, v10);
    if ((v24 & 1) != 0)
    {
      v12 = 16383.0 * v11.f64[0];
      if (v11.f64[0] < 0.0)
        v12 = 0.0;
      dbl_1EFF32720[v0] = v12;
    }
    if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0xC01uLL), *(uint64x2_t *)&v23)).i32[1] & 1) != 0)
    {
      v11.f64[0] = vmuld_lane_f64(16383.0, v11, 1);
      if (v11.f64[1] < 0.0)
        v11.f64[0] = 0.0;
      dbl_1EFF32720[v0 + 1] = v11.f64[0];
    }
    v0 += 2;
    v2 = (uint64x2_t)vaddq_s64(v23, v13);
    v1 = vadd_s32(v1, (int32x2_t)0x200000002);
  }
  while (v0 != 3074);
}

void sub_1D536BADC(uint64_t a1, signed int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  int *v18;
  void (**v19)(uint64_t);
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t);
  void *v26[2];
  _QWORD v27[2];
  signed int v28;
  int v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v8 = 0uLL;
  v40 = 0u;
  v41 = 0u;
  v39 = 0u;
  if (a4 && a5)
  {
    *(_QWORD *)&v39 = a4;
    *((_QWORD *)&v39 + 1) = a5;
    atomic_store(0, (unint64_t *)&v40);
    v9 = sub_1D5441BF0(16 * a2);
    v8 = 0uLL;
    *((_QWORD *)&v40 + 1) = v9;
    atomic_store(0, (unsigned int *)&v41);
    DWORD1(v41) = a2;
  }
  v37 = v8;
  v38 = v8;
  v35 = v8;
  v36 = v8;
  v33 = v8;
  v34 = v8;
  v31 = v8;
  v32 = v8;
  v27[0] = v8;
  v29 = DWORD1(v8);
  v26[1] = *((void **)&v8 + 1);
  v27[1] = a1;
  v30 = &v39;
  v28 = a2;
  v10 = (char *)sub_1D5441BF0(16 * a2);
  v26[0] = v10;
  if (!v10)
    return;
  v11 = (a2 - 1);
  if (a2 >= 1)
  {
    if (a2 == 1)
    {
      v14 = 0;
    }
    else
    {
      v12 = 0;
      v13 = a2 & 0xFFFFFFFE;
      v14 = v11 - v13;
      v15 = &v10[16 * v11];
      do
      {
        *(_QWORD *)v15 = a3;
        *((_QWORD *)v15 - 2) = a3;
        *((_DWORD *)v15 + 2) = v12;
        *((_DWORD *)v15 - 2) = v12 + 1;
        v12 += 2;
        v15 -= 32;
      }
      while (v13 != v12);
      if (v13 == a2)
        goto LABEL_13;
    }
    v16 = v14 + 1;
    v17 = ~(_DWORD)v14 + a2;
    v18 = (int *)&v10[16 * v14 + 8];
    do
    {
      *((_QWORD *)v18 - 1) = a3;
      *v18 = v17;
      v18 -= 4;
      ++v17;
      --v16;
    }
    while (v16);
  }
LABEL_13:
  atomic_store(a2, (unsigned int *)v27);
  dispatch_apply_f(a2, 0, v26, (void (__cdecl *)(void *, size_t))sub_1D536BEE8);
  v19 = (void (**)(uint64_t))v30;
  if (atomic_load((unsigned int *)v30 + 8))
  {
    v21 = (unint64_t *)(v30 + 1);
LABEL_16:
    while (1)
    {
      v22 = (unint64_t *)atomic_load(v21);
      if (!v22)
        break;
      v23 = *v22;
      do
      {
        v24 = __ldaxr(v21);
        if ((unint64_t *)v24 != v22)
        {
          __clrex();
          goto LABEL_16;
        }
      }
      while (__stlxr(v23, v21));
      if (!v22[1])
        break;
      v19[1](a3);
    }
    v25 = v19[3];
    if (v25)
      j__free_3(v25);
  }
  j__free_3(v26[0]);
}

BOOL sub_1D536BCC8()
{
  int v0;
  unsigned int v1;
  BOOL v2;
  size_t v5;
  int v6;
  int v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  *(_QWORD *)v7 = 0x1900000006;
  v5 = 4;
  v0 = sysctl(v7, 2u, &v6, &v5, 0, 0);
  if (v6 >= 32)
    v1 = 32;
  else
    v1 = v6;
  if (v0)
    v2 = 1;
  else
    v2 = v6 < 1;
  return v2 || v1 < 2;
}

uint64_t sub_1D536BD60()
{
  int v0;
  unsigned int v1;
  size_t v4;
  int v5;
  int v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5 = 0;
  *(_QWORD *)v6 = 0x1900000006;
  v4 = 4;
  v0 = sysctl(v6, 2u, &v5, &v4, 0, 0);
  if (v5 >= 32)
    v1 = 32;
  else
    v1 = v5;
  if (v5 > 0 && v0 == 0)
    return v1;
  else
    return 1;
}

uint64_t sub_1D536BDF4(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unint64_t *)(v1 + 16);
  v3 = (unint64_t *)atomic_load((unint64_t *)(v1 + 16));
  if (!v3)
    return (*(uint64_t (**)(_QWORD))v1)(*(_QWORD *)(a1 + 16));
LABEL_2:
  v4 = *v3;
  do
  {
    v5 = __ldaxr(v2);
    if ((unint64_t *)v5 != v3)
    {
      __clrex();
      v3 = (unint64_t *)atomic_load(v2);
      if (v3)
        goto LABEL_2;
      return (*(uint64_t (**)(_QWORD))v1)(*(_QWORD *)(a1 + 16));
    }
  }
  while (__stlxr(v4, v2));
  if (!v3[1])
    return (*(uint64_t (**)(_QWORD))v1)(*(_QWORD *)(a1 + 16));
  return v3[1];
}

uint64_t sub_1D536BE4C(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unsigned int *v4;
  signed int v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *(_QWORD *)(result + 8);
  v3 = (unint64_t *)(v2 + 16);
  v4 = (unsigned int *)(v2 + 32);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = (unint64_t *)(v2 + 16);
  v7 = (unint64_t *)(*(_QWORD *)(v2 + 24) + 16 * v5);
  v7[1] = a2;
  v8 = atomic_load(v6);
  *v7 = v8;
  do
  {
    v9 = __ldaxr(v3);
    if (v9 != v8)
    {
      while (1)
      {
        __clrex();
        *v7 = v9;
        v10 = atomic_load(v3);
        *v7 = v10;
        while (1)
        {
          v9 = __ldaxr(v3);
          if (v9 != v10)
            break;
          if (!__stlxr((unint64_t)v7, v3))
            return result;
        }
      }
    }
  }
  while (__stlxr((unint64_t)v7, v3));
  return result;
}

uint64_t sub_1D536BEE8(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  _DWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  v1 = (unsigned int *)(a1 + 16);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  v4 = *(_QWORD *)a1 + 16 * v3;
  v6[0] = *(_DWORD *)(v4 + 8);
  v6[1] = 0;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)v4;
  return (*(uint64_t (**)(_DWORD *))(a1 + 24))(v6);
}

uint64_t sub_1D536BF40(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *p_p;
  uint64_t v19;
  id v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  BOOL v47;
  float v48;
  unsigned int v49;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *__p;
  uint64_t v67;
  unsigned __int8 v68;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v4 = objc_retainAutorelease(v3);
      v9 = (char *)objc_msgSend_objCType(v4, v5, v6, v7, v8);
      sub_1D52850A0(&__p, v9);
      v14 = v68;
      v15 = v68;
      v16 = v67;
      if ((v68 & 0x80u) == 0)
        v17 = v68;
      else
        v17 = v67;
      if (v17 != 1)
        goto LABEL_19;
      p_p = __p;
      if ((v68 & 0x80u) == 0)
        p_p = &__p;
      if (*p_p == 66)
      {
        LODWORD(v19) = objc_msgSend_BOOLValue(v4, v10, v11, v12, v13);
        v14 = v68;
        v16 = v67;
        v15 = v68;
      }
      else
      {
LABEL_19:
        LODWORD(v19) = 0;
      }
      if ((v15 & 0x80u) != 0)
        v14 = v16;
      if (v14 != 1)
        goto LABEL_44;
      v36 = (unsigned __int8 *)__p;
      if ((v15 & 0x80u) == 0)
        v36 = (unsigned __int8 *)&__p;
      if ((*v36 | 2) == 0x66)
      {
        objc_msgSend_floatValue(v4, v10, v11, v12, v13);
        v38 = fabsf(v37);
        v39 = 0.1;
        v40 = v38 * 0.1;
        v41 = 0.0;
        if (v37 >= 0.0)
          v42 = v38 * 0.1;
        else
          v42 = 0.0;
        if (v37 <= 0.0)
          v41 = v42;
        if (v38 <= v41)
        {
          v19 = 0;
        }
        else
        {
          v43 = fabsf(v37 + -1.0);
          if (v38 <= 1.0)
            v39 = v38 * 0.1;
          if (v43 <= v39)
          {
            v19 = 1;
          }
          else
          {
            v44 = fabsf(v37 + -2.0);
            v45 = 0.2;
            if (v38 <= 2.0)
              v45 = v38 * 0.1;
            if (v44 <= v45)
            {
              v19 = 2;
            }
            else
            {
              v46 = fabsf(v37 + -3.0);
              v47 = v38 <= 3.0;
              v48 = 0.3;
              if (v47)
                v48 = v40;
              if (v46 > v48)
                v19 = v19;
              else
                v19 = 3;
            }
          }
        }
      }
      else
      {
LABEL_44:
        v49 = objc_msgSend_intValue(v4, v10, v11, v12, v13);
        if (v49 - 1 >= 3)
          v19 = 0;
        else
          v19 = v49;
      }
      if ((char)v68 < 0)
        operator delete(__p);
    }
    else
    {
      v20 = v3;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0
        || (objc_msgSend_isEqualToString_(v20, v21, (uint64_t)CFSTR("NO"), v22, v23) & 1) != 0
        || (objc_msgSend_isEqualToString_(v20, v24, (uint64_t)CFSTR("FALSE"), v25, v26) & 1) != 0
        || (objc_msgSend_isEqualToString_(v20, v27, (uint64_t)CFSTR("OFF"), v28, v29) & 1) != 0
        || (objc_msgSend_isEqualToString_(v20, v30, (uint64_t)CFSTR("0"), v31, v32) & 1) != 0)
      {
        v19 = 0;
      }
      else if ((objc_msgSend_isEqualToString_(v20, v33, (uint64_t)CFSTR("YES"), v34, v35) & 1) != 0
             || (objc_msgSend_isEqualToString_(v20, v51, (uint64_t)CFSTR("TRUE"), v52, v53) & 1) != 0
             || (objc_msgSend_isEqualToString_(v20, v54, (uint64_t)CFSTR("ON"), v55, v56) & 1) != 0
             || (objc_msgSend_isEqualToString_(v20, v57, (uint64_t)CFSTR("1"), v58, v59) & 1) != 0)
      {
        v19 = 1;
      }
      else if ((objc_msgSend_isEqualToString_(v20, v60, (uint64_t)CFSTR("2"), v61, v62) & 1) != 0)
      {
        v19 = 2;
      }
      else if (objc_msgSend_isEqualToString_(v20, v63, (uint64_t)CFSTR("3"), v64, v65))
      {
        v19 = 3;
      }
      else
      {
        v19 = 0;
      }

    }
  }
  else
  {
    v19 = 0;
  }

  return v19;
}

void sub_1D536C24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

const __CFString *sub_1D536C28C(int a1)
{
  if ((a1 - 1) > 2)
    return CFSTR("0");
  else
    return off_1E998DB38[a1 - 1];
}

BOOL sub_1D536C2B4(unsigned int a1)
{
  return a1 > 2;
}

BOOL sub_1D536C2C0(unsigned int a1)
{
  return a1 > 1;
}

double sub_1D536C2CC()
{
  return 0.3457;
}

double sub_1D536C2E0()
{
  return 0.3324;
}

double sub_1D536C2F4()
{
  return 0.312727;
}

double sub_1D536C308()
{
  return 0.447573;
}

double sub_1D536C31C(uint64_t a1, uint64_t a2)
{
  double result;
  double *v3;
  double v4;

  result = 0.3457;
  *(_OWORD *)a1 = xmmword_1D544CFF0;
  v3 = *(double **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 == 24)
  {
    result = *v3;
    v4 = *v3 + v3[1] + v3[2];
    if (v4 > 0.0)
    {
      *(double *)a1 = result / v4;
      result = v3[1] / v4;
      *(double *)(a1 + 8) = result;
    }
  }
  return result;
}

double sub_1D536C36C@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *sub_1D528EB68(a2, 2uLL);
  *(_QWORD *)v3 = *(_QWORD *)a1;
  result = *(double *)(a1 + 8);
  *(double *)(v3 + 8) = result;
  return result;
}

double sub_1D536C3A8@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  double result;

  v2 = fmin(fmax(*a1, 0.01), 0.99);
  v3 = fmin(fmax(a1[1], 0.01), 0.99);
  v4 = v2 + v3;
  if (v2 + v3 > 0.99)
  {
    v2 = v2 * (0.99 / v4);
    v3 = v3 * (0.99 / v4);
  }
  v5 = *sub_1D528EB68(a2, 3uLL);
  *(double *)v5 = v2 / v3;
  *(_QWORD *)(v5 + 8) = 0x3FF0000000000000;
  result = (1.0 - v2 - v3) / v3;
  *(double *)(v5 + 16) = result;
  return result;
}

double sub_1D536C434(double *a1, double *a2, double *a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double result;

  v3 = 0;
  v4 = a1[1];
  v5 = 1.5 - *a1 + v4 * 6.0;
  v6 = (*a1 + *a1) / v5;
  v7 = v4 * 3.0 / v5;
  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  do
  {
    v11 = v10;
    v12 = v9;
    v13 = v8;
    v14 = *(double *)((char *)&unk_1D544D000 + v3 + 56);
    v15 = sqrt(v14 * v14 + 1.0);
    v10 = 1.0 / v15;
    v9 = v14 / v15;
    v17 = *(double *)((char *)&unk_1D544D000 + v3 + 40);
    v16 = *(double *)((char *)&unk_1D544D000 + v3 + 48);
    v8 = (v7 - v16) * v10 - (v6 - v17) * v9;
    v18 = v3 + 32;
    if (v3 == 928)
      break;
    v3 += 32;
  }
  while (v8 > 0.0);
  v19 = 0.0;
  if (v18 != 32)
  {
    if (v8 > 0.0)
      v8 = 0.0;
    v19 = -v8 / (v13 - v8);
  }
  *a2 = 1000000.0
      / ((1.0 - v19) * *(double *)((char *)&unk_1D544D000 + v18) + *(double *)((char *)&unk_1D544D000 + v18 - 32) * v19);
  v20 = v11 * v19 + v10 * (1.0 - v19);
  v21 = v12 * v19 + v9 * (1.0 - v19);
  v22 = sqrt(v21 * v21 + v20 * v20);
  result = (v21 / v22 * (v7 - (v16 * (1.0 - v19) + *(double *)((char *)&unk_1D544D000 + v18 - 16) * v19))
          + (v6 - (v17 * (1.0 - v19) + *(double *)((char *)&unk_1D544D000 + v18 - 24) * v19)) * (v20 / v22))
         * -3000.0;
  *a3 = result;
  return result;
}

double sub_1D536C570(double *a1, double a2, double a3)
{
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double result;

  v3 = 0x20u;
  v4 = 1000000.0 / a2;
  do
  {
    v5 = *(double *)((char *)&unk_1D544D000 + v3);
    v6 = v3 + 32;
    if (v3 == 960)
      break;
    v3 += 32;
  }
  while (v4 >= v5);
  v7 = a3 * -0.000333333333;
  v8 = (double *)((char *)&unk_1D544D000 + v6);
  v9 = (v5 - v4) / (v5 - *(double *)((char *)&unk_1D544D000 + v6 - 64));
  v10 = *(v8 - 3) * (1.0 - v9) + *(v8 - 7) * v9;
  v11 = *(double *)((char *)&unk_1D544D000 + v6 - 40);
  v12 = (1.0 - v9) * *(v8 - 2) + *(v8 - 6) * v9;
  v13 = *(double *)((char *)&unk_1D544D000 + v6 - 8);
  v14 = sqrt(v11 * v11 + 1.0);
  v15 = sqrt(v13 * v13 + 1.0);
  v16 = (1.0 - v9) * (1.0 / v15) + 1.0 / v14 * v9;
  v17 = (1.0 - v9) * (v13 / v15) + v11 / v14 * v9;
  v18 = sqrt(v17 * v17 + v16 * v16);
  v19 = v10 + v16 / v18 * v7;
  v20 = v12 + v17 / v18 * v7;
  v21 = v19 * 1.5;
  v22 = v19 + v20 * -4.0 + 2.0;
  result = v20 / v22;
  *a1 = v21 / v22;
  a1[1] = result;
  return result;
}

void sub_1D536C65C(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _OWORD *a8@<X8>)
{
  int32x4_t v11;
  void *v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  void *v17;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  void *v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  void *v27;
  double *v28;
  void *v29;
  double *v30;
  void *v31;
  double *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  void *__p;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  void *v41;
  void *v42;
  _BYTE v43[8];
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  unsigned int v53;
  void *v54;
  void *v55;

  sub_1D5338D40((uint64_t)&v53, 3u, 3u, 0.8951, a3, a4, a5, a6, a7, 0x3FD10CB295E9E1B1);
  sub_1D536C3A8(a1, &v49);
  sub_1D5339174((uint64_t *)&v49, &v51);
  if ((_QWORD)v49)
  {
    *((_QWORD *)&v49 + 1) = v49;
    operator delete((void *)v49);
  }
  sub_1D536C3A8(a2, &v46);
  sub_1D5339174((uint64_t *)&v46, &v49);
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  v11.i64[0] = v51;
  v11.i64[1] = v49;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v11))) & 1) != 0)
  {
    sub_1D5339168(a8);
  }
  else
  {
    sub_1D5339674(&v53, &v51, (uint64_t)&v46);
    sub_1D5339674(&v53, &v49, (uint64_t)v43);
    sub_1D5338D3C((uint64_t)&v40, 3u, 3u);
    sub_1D5339324(&v40);
    v35 = sub_1D5339044((uint64_t)v43, 0);
    __p = v12;
    v13 = *(double *)sub_1D53390D4((uint64_t)&v35, 0);
    *(_QWORD *)&v33 = sub_1D5339044((uint64_t)&v46, 0);
    *((_QWORD *)&v33 + 1) = v14;
    v15 = *(double *)sub_1D53390D4((uint64_t)&v33, 0);
    v38 = sub_1D5339044((uint64_t)&v40, 0);
    v39 = v16;
    *(double *)sub_1D53390D4((uint64_t)&v38, 0) = v13 / v15;
    v35 = sub_1D5339044((uint64_t)v43, 1u);
    __p = v17;
    v18 = *(double *)sub_1D53390D4((uint64_t)&v35, 0);
    *(_QWORD *)&v33 = sub_1D5339044((uint64_t)&v46, 1u);
    *((_QWORD *)&v33 + 1) = v19;
    v20 = *(double *)sub_1D53390D4((uint64_t)&v33, 0);
    v38 = sub_1D5339044((uint64_t)&v40, 1u);
    v39 = v21;
    *(double *)sub_1D53390D4((uint64_t)&v38, 1u) = v18 / v20;
    v35 = sub_1D5339044((uint64_t)v43, 2u);
    __p = v22;
    v23 = *(double *)sub_1D53390D4((uint64_t)&v35, 0);
    *(_QWORD *)&v33 = sub_1D5339044((uint64_t)&v46, 2u);
    *((_QWORD *)&v33 + 1) = v24;
    v25 = *(double *)sub_1D53390D4((uint64_t)&v33, 0);
    v38 = sub_1D5339044((uint64_t)&v40, 2u);
    v39 = v26;
    *(double *)sub_1D53390D4((uint64_t)&v38, 2u) = v23 / v25;
    v35 = sub_1D5339044((uint64_t)&v40, 0);
    __p = v27;
    v28 = (double *)sub_1D53390D4((uint64_t)&v35, 0);
    *v28 = fmin(fmax(*v28, 0.1), 10.0);
    v35 = sub_1D5339044((uint64_t)&v40, 1u);
    __p = v29;
    v30 = (double *)sub_1D53390D4((uint64_t)&v35, 1u);
    *v30 = fmin(fmax(*v30, 0.1), 10.0);
    v35 = sub_1D5339044((uint64_t)&v40, 2u);
    __p = v31;
    v32 = (double *)sub_1D53390D4((uint64_t)&v35, 2u);
    *v32 = fmin(fmax(*v32, 0.1), 10.0);
    sub_1D5339A4C(&v53, &v33);
    sub_1D5339674((unsigned int *)&v33, &v40, (uint64_t)&v35);
    sub_1D5339674((unsigned int *)&v35, &v53, (uint64_t)a8);
    if (__p)
    {
      v37 = __p;
      operator delete(__p);
    }
    if (*((_QWORD *)&v33 + 1))
    {
      v34 = *((_QWORD *)&v33 + 1);
      operator delete(*((void **)&v33 + 1));
    }
    if (v41)
    {
      v42 = v41;
      operator delete(v41);
    }
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
  }
  if (*((_QWORD *)&v49 + 1))
  {
    v50 = *((_QWORD *)&v49 + 1);
    operator delete(*((void **)&v49 + 1));
  }
  if (*((_QWORD *)&v51 + 1))
  {
    v52 = *((_QWORD *)&v51 + 1);
    operator delete(*((void **)&v51 + 1));
  }
  if (v54)
  {
    v55 = v54;
    operator delete(v54);
  }
}

void sub_1D536CA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  uint64_t v33;
  void *v35;
  void *v36;
  void *v37;

  v35 = *(void **)(v33 - 136);
  if (v35)
  {
    *(_QWORD *)(v33 - 128) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(v33 - 104);
  if (v36)
  {
    *(_QWORD *)(v33 - 96) = v36;
    operator delete(v36);
  }
  v37 = *(void **)(v33 - 72);
  if (v37)
  {
    *(_QWORD *)(v33 - 64) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1D536CB88(double *a1)
{
  double v1;

  if (*a1 <= 0.0)
    return 0;
  v1 = a1[1];
  return v1 > 0.0 && *a1 + v1 < 1.0;
}

double sub_1D536CBBC(int a1)
{
  double result;

  result = 0.0;
  if ((a1 - 1) <= 0x17)
    return dbl_1D544D3E8[a1 - 1];
  return result;
}

void sub_1D536CBDC(unsigned int *a1@<X0>, unsigned int *a2@<X8>)
{
  BOOL v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  void *__p;
  void *v11;
  void *v12;
  __int128 v13;
  uint64_t v14;

  if (*a1)
    v4 = a1[1] == 0;
  else
    v4 = 1;
  if (v4)
  {
    sub_1D5338BF8(a2, (uint64_t)a1);
  }
  else
  {
    v7 = sub_1D536C2CC();
    v8 = v5;
    sub_1D536C3A8(&v7, &__p);
    sub_1D5339174((uint64_t *)&__p, &v13);
    if (__p)
    {
      v11 = __p;
      operator delete(__p);
    }
    sub_1D5339674(a1, &v13, (uint64_t)&__p);
    v6 = sub_1D533A1F0((unsigned int *)&__p);
    sub_1D5338BF8(a2, (uint64_t)a1);
    if (v6 > 0.0 && (v6 < 0.99 || v6 > 1.01))
    {
      sub_1D5339590(a2, (uint64_t)&v7, 1.0 / v6);
      sub_1D53393A8(a2, (uint64_t)&v7);
      if (v8)
      {
        v9 = v8;
        operator delete(v8);
      }
    }
    sub_1D5339EC4(a2, (uint64_t)&v7, 10000.0);
    sub_1D53393A8(a2, (uint64_t)&v7);
    if (v8)
    {
      v9 = v8;
      operator delete(v8);
    }
    if (v11)
    {
      v12 = v11;
      operator delete(v11);
    }
    if (*((_QWORD *)&v13 + 1))
    {
      v14 = *((_QWORD *)&v13 + 1);
      operator delete(*((void **)&v13 + 1));
    }
  }
}

void sub_1D536CD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  uint64_t v19;
  void *v21;

  if (__p)
    operator delete(__p);
  v21 = *(void **)(v19 + 8);
  if (v21)
  {
    *(_QWORD *)(v19 + 16) = v21;
    operator delete(v21);
  }
  if (a14)
    operator delete(a14);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_1D536CDB8(_DWORD *a1, uint64_t *a2)
{
  unsigned int *v4;
  int v5;
  unsigned int *v6;
  int v7;
  int v8;
  double v9;
  double v10;
  int v11;
  unsigned int *v12;
  int v13;
  unsigned int *v14;
  int v15;
  unsigned int *v16;
  int v17;
  unsigned int *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  unsigned int v41;
  int v42;
  void *v43;
  void *v44;
  unsigned int v45;
  int v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  _BYTE v52[8];
  void *v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  void *v60;

  v4 = a1 + 12;
  if (!a1[12] || (v5 = a1[13], v6 = a1 + 12, !v5))
    v6 = a1 + 4;
  if (sub_1D5339398(v6) >= 2)
  {
    v8 = a1[2];
    v7 = a1[3];
    v9 = sub_1D536CBBC(v8);
    v10 = sub_1D536CBBC(v7);
    sub_1D536CBDC(a1 + 4, (unsigned int *)&v58);
    sub_1D536CBDC(v4, (unsigned int *)&v55);
    sub_1D5339EC4(a1 + 54, (uint64_t)v52, 10000.0);
    sub_1D5339EC4(a1 + 62, (uint64_t)&v49, 10000.0);
    sub_1D5339EC4(a1 + 20, (uint64_t)&v45, 10000.0);
    sub_1D5339EC4(a1 + 28, (uint64_t)&v41, 10000.0);
    v29 = a1 + 62;
    v30 = a1 + 54;
    sub_1D5339EC4(a1 + 36, (uint64_t)&v38, 10000.0);
    sub_1D5339EC4(a1 + 44, (uint64_t)&v35, 10000.0);
    if (v45 && v46)
    {
      v11 = sub_1D5339398(&v45);
      if (!*v4 || (v12 = v4, !a1[13]))
        v12 = a1 + 4;
      if (v11 == sub_1D5339398(v12))
      {
        v13 = sub_1D53393A0((uint64_t)&v45);
        if (!*v4 || (v14 = v4, !a1[13]))
          v14 = a1 + 4;
        if (v13 == sub_1D5339398(v14))
        {
          sub_1D5339674(&v45, &v58, (uint64_t)&v33);
          sub_1D53393A8(&v58, (uint64_t)&v33);
          if (*((_QWORD *)&v33 + 1))
          {
            v34 = *((_QWORD *)&v33 + 1);
            operator delete(*((void **)&v33 + 1));
          }
        }
      }
    }
    if ((_DWORD)v55 && HIDWORD(v55) && v9 > 0.0 && v10 > 0.0 && v9 != v10)
    {
      if (v41 && v42)
      {
        v15 = sub_1D5339398(&v41);
        if (!*v4 || (v16 = v4, !a1[13]))
          v16 = a1 + 4;
        if (v15 == sub_1D5339398(v16))
        {
          v17 = sub_1D53393A0((uint64_t)&v41);
          if (!*v4 || (v18 = v4, !a1[13]))
            v18 = a1 + 4;
          if (v17 == sub_1D5339398(v18))
          {
            sub_1D5339674(&v41, &v55, (uint64_t)&v33);
            sub_1D53393A8(&v55, (uint64_t)&v33);
            if (*((_QWORD *)&v33 + 1))
            {
              v34 = *((_QWORD *)&v33 + 1);
              operator delete(*((void **)&v33 + 1));
            }
          }
        }
      }
    }
    else
    {
      sub_1D53393A8(&v55, (uint64_t)&v58);
      sub_1D53393A8(&v49, (uint64_t)v52);
      v9 = 5000.0;
      v10 = 5000.0;
    }
    if (v45)
    {
      if (!v41)
      {
        if (!v46)
          goto LABEL_69;
        goto LABEL_58;
      }
      if (v46 && v42)
      {
        v19 = sub_1D53393A0((uint64_t)&v45);
        if (v19 == sub_1D53393A0((uint64_t)&v38))
        {
          sub_1D5339A4C(&v45, &v31);
          sub_1D5339674((unsigned int *)&v38, &v31, (uint64_t)&v33);
          sub_1D53393A8(&v38, (uint64_t)&v33);
          if (*((_QWORD *)&v33 + 1))
          {
            v34 = *((_QWORD *)&v33 + 1);
            operator delete(*((void **)&v33 + 1));
          }
          if (*((_QWORD *)&v31 + 1))
          {
            v32 = *((_QWORD *)&v31 + 1);
            operator delete(*((void **)&v31 + 1));
          }
        }
        v20 = sub_1D53393A0((uint64_t)&v41);
        if (v20 != sub_1D53393A0((uint64_t)&v35))
          goto LABEL_69;
        goto LABEL_45;
      }
      if (v46)
      {
LABEL_58:
        v23 = sub_1D53393A0((uint64_t)&v45);
        if (v23 == sub_1D53393A0((uint64_t)&v38))
        {
          v24 = sub_1D53393A0((uint64_t)&v45);
          if (v24 == sub_1D53393A0((uint64_t)&v35))
          {
            sub_1D5339A4C(&v45, &v31);
            sub_1D5339674((unsigned int *)&v38, &v31, (uint64_t)&v33);
            sub_1D53393A8(&v38, (uint64_t)&v33);
            if (*((_QWORD *)&v33 + 1))
            {
              v34 = *((_QWORD *)&v33 + 1);
              operator delete(*((void **)&v33 + 1));
            }
            if (*((_QWORD *)&v31 + 1))
            {
              v32 = *((_QWORD *)&v31 + 1);
              operator delete(*((void **)&v31 + 1));
            }
            sub_1D5339A4C(&v45, &v31);
            sub_1D5339674((unsigned int *)&v35, &v31, (uint64_t)&v33);
            sub_1D53393A8(&v35, (uint64_t)&v33);
            goto LABEL_65;
          }
        }
        goto LABEL_69;
      }
      if (!v42)
        goto LABEL_69;
    }
    else if (!v41 || !v42)
    {
      goto LABEL_69;
    }
    v21 = sub_1D53393A0((uint64_t)&v41);
    if (v21 == sub_1D53393A0((uint64_t)&v38))
    {
      v22 = sub_1D53393A0((uint64_t)&v41);
      if (v22 == sub_1D53393A0((uint64_t)&v35))
      {
        sub_1D5339A4C(&v41, &v31);
        sub_1D5339674((unsigned int *)&v38, &v31, (uint64_t)&v33);
        sub_1D53393A8(&v38, (uint64_t)&v33);
        if (*((_QWORD *)&v33 + 1))
        {
          v34 = *((_QWORD *)&v33 + 1);
          operator delete(*((void **)&v33 + 1));
        }
        if (*((_QWORD *)&v31 + 1))
        {
          v32 = *((_QWORD *)&v31 + 1);
          operator delete(*((void **)&v31 + 1));
        }
LABEL_45:
        sub_1D5339A4C(&v41, &v31);
        sub_1D5339674((unsigned int *)&v35, &v31, (uint64_t)&v33);
        sub_1D53393A8(&v35, (uint64_t)&v33);
LABEL_65:
        if (*((_QWORD *)&v33 + 1))
        {
          v34 = *((_QWORD *)&v33 + 1);
          operator delete(*((void **)&v33 + 1));
        }
        if (*((_QWORD *)&v31 + 1))
        {
          v32 = *((_QWORD *)&v31 + 1);
          operator delete(*((void **)&v31 + 1));
        }
      }
    }
LABEL_69:
    if (!*v4 || (v25 = v4, !a1[13]))
      v25 = a1 + 4;
    v27 = *a2;
    v26 = a2[1];
    if ((v26 - v27) >> 3 == sub_1D5339398(v25))
    {
      sub_1D5339824((unsigned int *)&v58, a2, (uint64_t)&v33);
      sub_1D53393A8(&v58, (uint64_t)&v33);
      if (*((_QWORD *)&v33 + 1))
      {
        v34 = *((_QWORD *)&v33 + 1);
        operator delete(*((void **)&v33 + 1));
      }
      sub_1D5339824((unsigned int *)&v55, a2, (uint64_t)&v33);
      sub_1D53393A8(&v55, (uint64_t)&v33);
      if (*((_QWORD *)&v33 + 1))
      {
        v34 = *((_QWORD *)&v33 + 1);
        operator delete(*((void **)&v33 + 1));
      }
    }
    if (v9 <= v10)
    {
      a1[2] = v8;
      a1[3] = v7;
      sub_1D53393A8((_QWORD *)a1 + 2, (uint64_t)&v58);
      sub_1D53393A8(v4, (uint64_t)&v55);
      sub_1D53393A8(v30, (uint64_t)v52);
      sub_1D53393A8(v29, (uint64_t)&v49);
      sub_1D53393A8((_QWORD *)a1 + 18, (uint64_t)&v38);
      v28 = &v35;
    }
    else
    {
      a1[2] = v7;
      a1[3] = v8;
      sub_1D53393A8((_QWORD *)a1 + 2, (uint64_t)&v55);
      sub_1D53393A8(v4, (uint64_t)&v58);
      sub_1D53393A8(v30, (uint64_t)&v49);
      sub_1D53393A8(v29, (uint64_t)v52);
      sub_1D53393A8((_QWORD *)a1 + 18, (uint64_t)&v35);
      v28 = &v38;
    }
    sub_1D53393A8((_QWORD *)a1 + 22, (uint64_t)v28);
    sub_1D5338BEC(&v33);
    sub_1D53393A8((_QWORD *)a1 + 10, (uint64_t)&v33);
    sub_1D53393A8((_QWORD *)a1 + 14, (uint64_t)&v33);
    if (*((_QWORD *)&v33 + 1))
    {
      v34 = *((_QWORD *)&v33 + 1);
      operator delete(*((void **)&v33 + 1));
    }
    if (v36)
    {
      v37 = v36;
      operator delete(v36);
    }
    if (v39)
    {
      v40 = v39;
      operator delete(v39);
    }
    if (v43)
    {
      v44 = v43;
      operator delete(v43);
    }
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
    if (v50)
    {
      v51 = v50;
      operator delete(v50);
    }
    if (v53)
    {
      v54 = v53;
      operator delete(v53);
    }
    if (v56)
    {
      v57 = v56;
      operator delete(v56);
    }
    if (v59)
    {
      v60 = v59;
      operator delete(v59);
    }
  }
}

void sub_1D536D4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  uint64_t v40;
  void *v42;
  void *v43;
  void *v44;

  if (__p)
    operator delete(__p);
  if (a23)
    operator delete(a23);
  if (a27)
    operator delete(a27);
  if (a31)
    operator delete(a31);
  if (a35)
    operator delete(a35);
  if (a39)
    operator delete(a39);
  v42 = *(void **)(v40 - 208);
  if (v42)
  {
    *(_QWORD *)(v40 - 200) = v42;
    operator delete(v42);
  }
  v43 = *(void **)(v40 - 176);
  if (v43)
  {
    *(_QWORD *)(v40 - 168) = v43;
    operator delete(v43);
  }
  v44 = *(void **)(v40 - 144);
  if (v44)
  {
    *(_QWORD *)(v40 - 136) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D536D624(uint64_t a1@<X0>, double *a2@<X1>, unsigned int *a3@<X2>, _QWORD *a4@<X8>)
{
  double v8;
  unsigned int i;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  double v28;
  int v29;
  void *v30;
  uint64_t v31;
  double v32;
  void *v33;
  double v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  double v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;

  sub_1D5338BEC(&v66);
  sub_1D5338BEC(&v64);
  sub_1D5338BEC(&v62);
  sub_1D5338BEC(&v60);
  sub_1D536DDF4(a1, a2, &v66, &v62, (uint64_t)&v64);
  if (!(_DWORD)v66 || !DWORD1(v66))
  {
    sub_1D5338BF8(a4, (uint64_t)&v66);
    goto LABEL_65;
  }
  if (*(_WORD *)(a1 + 208))
  {
    sub_1D536C3A8(a2, &v54);
    sub_1D5339174((uint64_t *)&v54, &v56);
    sub_1D5339674((unsigned int *)&v66, &v56, (uint64_t)&v58);
    if (*((_QWORD *)&v56 + 1))
    {
      v57 = *((_QWORD *)&v56 + 1);
      operator delete(*((void **)&v56 + 1));
    }
    if ((_QWORD)v54)
    {
      *((_QWORD *)&v54 + 1) = v54;
      operator delete((void *)v54);
    }
    v8 = sub_1D533A1F0((unsigned int *)&v58);
    for (i = 0; i < sub_1D5339398((unsigned int *)&v58); ++i)
    {
      *(_QWORD *)&v56 = sub_1D5339044((uint64_t)&v58, i);
      *((_QWORD *)&v56 + 1) = v10;
      v11 = (double *)sub_1D53390D4((uint64_t)&v56, 0);
      v12 = *v11 / v8;
      if (v12 <= 1.0)
        v13 = *v11 / v8;
      else
        v13 = 1.0;
      if (v12 >= 0.001)
        v14 = v13;
      else
        v14 = 0.001;
      *(_QWORD *)&v54 = sub_1D5339044((uint64_t)&v58, i);
      *((_QWORD *)&v54 + 1) = v15;
      *(double *)sub_1D53390D4((uint64_t)&v54, 0) = v14;
    }
    sub_1D533A348((uint64_t)&v58, &v52);
    sub_1D5339248((uint64_t *)&v52, &v54);
    sub_1D5339A4C((unsigned int *)&v54, &v56);
    if (*((_QWORD *)&v54 + 1))
    {
      v55 = *((_QWORD *)&v54 + 1);
      operator delete(*((void **)&v54 + 1));
    }
    if ((_QWORD)v52)
    {
      *((_QWORD *)&v52 + 1) = v52;
      operator delete((void *)v52);
    }
    sub_1D5339674((unsigned int *)&v64, &v56, (uint64_t)&v54);
    sub_1D53393A8(&v60, (uint64_t)&v54);
    if (*((_QWORD *)&v54 + 1))
    {
      v55 = *((_QWORD *)&v54 + 1);
      operator delete(*((void **)&v54 + 1));
    }
    if (!(_DWORD)v60 || !DWORD1(v60))
    {
      sub_1D5338BF8(a4, (uint64_t)&v60);
LABEL_61:
      if (*((_QWORD *)&v56 + 1))
      {
        v57 = *((_QWORD *)&v56 + 1);
        operator delete(*((void **)&v56 + 1));
      }
      if (*((_QWORD *)&v58 + 1))
      {
        v59 = *((_QWORD *)&v58 + 1);
        operator delete(*((void **)&v58 + 1));
      }
      goto LABEL_65;
    }
    if (*((_QWORD *)&v56 + 1))
    {
      v57 = *((_QWORD *)&v56 + 1);
      operator delete(*((void **)&v56 + 1));
    }
    if (*((_QWORD *)&v58 + 1))
    {
      v59 = *((_QWORD *)&v58 + 1);
      operator delete(*((void **)&v58 + 1));
    }
LABEL_51:
    sub_1D5338D40((uint64_t)&v58, 3u, 1u, 1.0, v16, v17, v18, v19, v20, 0x3FF0000000000000);
    sub_1D5339674(a3, &v58, (uint64_t)&v56);
    v46 = sub_1D536C2CC();
    v47 = v30;
    sub_1D536C3A8(&v46, &v52);
    sub_1D5339174((uint64_t *)&v52, &v54);
    if ((_QWORD)v52)
    {
      *((_QWORD *)&v52 + 1) = v52;
      operator delete((void *)v52);
    }
    *(_QWORD *)&v52 = sub_1D5339044((uint64_t)&v54, 0);
    *((_QWORD *)&v52 + 1) = v31;
    v32 = *(double *)sub_1D53390D4((uint64_t)&v52, 0);
    v46 = COERCE_DOUBLE(sub_1D5339044((uint64_t)&v56, 0));
    v47 = v33;
    v34 = *(double *)sub_1D53390D4((uint64_t)&v46, 0);
    *(_QWORD *)&v52 = sub_1D5339044((uint64_t)&v54, 1u);
    *((_QWORD *)&v52 + 1) = v35;
    sub_1D53390D4((uint64_t)&v52, 0);
    v46 = COERCE_DOUBLE(sub_1D5339044((uint64_t)&v56, 1u));
    v47 = v36;
    sub_1D53390D4((uint64_t)&v46, 0);
    *(_QWORD *)&v52 = sub_1D5339044((uint64_t)&v54, 2u);
    *((_QWORD *)&v52 + 1) = v37;
    sub_1D53390D4((uint64_t)&v52, 0);
    v46 = COERCE_DOUBLE(sub_1D5339044((uint64_t)&v56, 2u));
    v47 = v38;
    sub_1D53390D4((uint64_t)&v46, 0);
    sub_1D5338D40((uint64_t)&v52, 3u, 3u, v32 / v34, v39, v40, v41, v42, v43, 0);
    sub_1D5339674((unsigned int *)&v52, a3, (uint64_t)&v46);
    sub_1D5339A4C((unsigned int *)&v46, &v44);
    sub_1D5339674((unsigned int *)&v44, &v60, (uint64_t)a4);
    if (*((_QWORD *)&v44 + 1))
    {
      v45 = *((_QWORD *)&v44 + 1);
      operator delete(*((void **)&v44 + 1));
    }
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
    if (*((_QWORD *)&v52 + 1))
    {
      v53 = *((_QWORD *)&v52 + 1);
      operator delete(*((void **)&v52 + 1));
    }
    if (*((_QWORD *)&v54 + 1))
    {
      v55 = *((_QWORD *)&v54 + 1);
      operator delete(*((void **)&v54 + 1));
    }
    goto LABEL_61;
  }
  *(_QWORD *)&v56 = sub_1D536C2CC();
  *((_QWORD *)&v56 + 1) = v21;
  sub_1D536C65C((double *)&v56, a2, v22, v23, v24, v25, v26, &v58);
  if ((_DWORD)v58 && DWORD1(v58))
  {
    sub_1D5339674((unsigned int *)&v66, &v58, (uint64_t)&v56);
    v46 = sub_1D536C2CC();
    v47 = v27;
    sub_1D536C3A8(&v46, &v52);
    sub_1D5339174((uint64_t *)&v52, &v54);
    if ((_QWORD)v52)
    {
      *((_QWORD *)&v52 + 1) = v52;
      operator delete((void *)v52);
    }
    sub_1D5339674((unsigned int *)&v56, &v54, (uint64_t)&v52);
    v28 = sub_1D533A1F0((unsigned int *)&v52);
    if (*((_QWORD *)&v52 + 1))
    {
      v53 = *((_QWORD *)&v52 + 1);
      operator delete(*((void **)&v52 + 1));
    }
    sub_1D5339590((unsigned int *)&v56, (uint64_t)&v52, 1.0 / v28);
    sub_1D53393A8(&v56, (uint64_t)&v52);
    if (*((_QWORD *)&v52 + 1))
    {
      v53 = *((_QWORD *)&v52 + 1);
      operator delete(*((void **)&v52 + 1));
    }
    sub_1D5338BF8(&v49, (uint64_t)&v62);
    sub_1D5339DC0((unsigned int *)&v56, (unsigned int *)&v49, &v52);
    sub_1D53393A8(&v60, (uint64_t)&v52);
    if (*((_QWORD *)&v52 + 1))
    {
      v53 = *((_QWORD *)&v52 + 1);
      operator delete(*((void **)&v52 + 1));
    }
    if (v50)
    {
      v51 = v50;
      operator delete(v50);
    }
    if ((_DWORD)v60 && DWORD1(v60))
    {
      v29 = 0;
    }
    else
    {
      sub_1D5338BF8(a4, (uint64_t)&v60);
      v29 = 1;
    }
    if (*((_QWORD *)&v54 + 1))
    {
      v55 = *((_QWORD *)&v54 + 1);
      operator delete(*((void **)&v54 + 1));
    }
    if (*((_QWORD *)&v56 + 1))
    {
      v57 = *((_QWORD *)&v56 + 1);
      operator delete(*((void **)&v56 + 1));
    }
  }
  else
  {
    sub_1D5338BF8(a4, (uint64_t)&v58);
    v29 = 1;
  }
  if (*((_QWORD *)&v58 + 1))
  {
    v59 = *((_QWORD *)&v58 + 1);
    operator delete(*((void **)&v58 + 1));
  }
  if (!v29)
    goto LABEL_51;
LABEL_65:
  if (*((_QWORD *)&v60 + 1))
  {
    v61 = *((_QWORD *)&v60 + 1);
    operator delete(*((void **)&v60 + 1));
  }
  if (*((_QWORD *)&v62 + 1))
  {
    v63 = *((_QWORD *)&v62 + 1);
    operator delete(*((void **)&v62 + 1));
  }
  if (*((_QWORD *)&v64 + 1))
  {
    v65 = *((_QWORD *)&v64 + 1);
    operator delete(*((void **)&v64 + 1));
  }
  if (*((_QWORD *)&v66 + 1))
  {
    v67 = *((_QWORD *)&v66 + 1);
    operator delete(*((void **)&v66 + 1));
  }
}

void sub_1D536DBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  uint64_t v43;
  void *v45;
  void *v46;
  void *v47;
  void *v48;

  if (__p)
    operator delete(__p);
  if (a38)
    operator delete(a38);
  if (a42)
    operator delete(a42);
  v45 = *(void **)(v43 - 216);
  if (v45)
  {
    *(_QWORD *)(v43 - 208) = v45;
    operator delete(v45);
  }
  v46 = *(void **)(v43 - 184);
  if (v46)
  {
    *(_QWORD *)(v43 - 176) = v46;
    operator delete(v46);
  }
  v47 = *(void **)(v43 - 152);
  if (v47)
  {
    *(_QWORD *)(v43 - 144) = v47;
    operator delete(v47);
  }
  v48 = *(void **)(v43 - 120);
  if (v48)
  {
    *(_QWORD *)(v43 - 112) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D536DDF4(uint64_t a1, double *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  double v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  __int128 *v21;
  int v22;
  void *v23;
  void *v24;
  unsigned int v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  double v34;
  void *__p;
  void *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  sub_1D5339168(&v39);
  sub_1D53393A8(a3, (uint64_t)&v39);
  if (*((_QWORD *)&v39 + 1))
  {
    v40 = *((_QWORD *)&v39 + 1);
    operator delete(*((void **)&v39 + 1));
  }
  sub_1D5339168(&v39);
  sub_1D53393A8(a4, (uint64_t)&v39);
  if (*((_QWORD *)&v39 + 1))
  {
    v40 = *((_QWORD *)&v39 + 1);
    operator delete(*((void **)&v39 + 1));
  }
  sub_1D5339168(&v39);
  sub_1D53393A8((_QWORD *)a5, (uint64_t)&v39);
  if (*((_QWORD *)&v39 + 1))
  {
    v40 = *((_QWORD *)&v39 + 1);
    operator delete(*((void **)&v39 + 1));
  }
  v10 = sub_1D536E61C(a1, a2);
  if (v10 >= 1.0)
  {
    v11 = a1 + 16;
LABEL_21:
    sub_1D53393A8(a3, v11);
    goto LABEL_22;
  }
  if (v10 <= 0.0)
  {
    v11 = a1 + 48;
    goto LABEL_21;
  }
  if (!*(_DWORD *)(a1 + 16) || !*(_DWORD *)(a1 + 20) || !*(_DWORD *)(a1 + 48) || !*(_DWORD *)(a1 + 52))
  {
    sub_1D5339168(&v39);
    sub_1D53393A8(a3, (uint64_t)&v39);
    v12 = (void *)*((_QWORD *)&v39 + 1);
    if (!*((_QWORD *)&v39 + 1))
      goto LABEL_22;
    v40 = *((_QWORD *)&v39 + 1);
    goto LABEL_41;
  }
  sub_1D5339590((unsigned int *)(a1 + 16), (uint64_t)&v37, v10);
  sub_1D5339590((unsigned int *)(a1 + 48), (uint64_t)&v34, 1.0 - v10);
  sub_1D5339420((unsigned int *)&v37, &v34, (uint64_t)&v39);
  sub_1D53393A8(a3, (uint64_t)&v39);
  if (*((_QWORD *)&v39 + 1))
  {
    v40 = *((_QWORD *)&v39 + 1);
    operator delete(*((void **)&v39 + 1));
  }
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  v12 = (void *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v38 = *((_QWORD *)&v37 + 1);
LABEL_41:
    operator delete(v12);
  }
LABEL_22:
  v13 = a1 + 216;
  if (!*(_DWORD *)(a1 + 216))
  {
    v14 = a1 + 248;
    if (*(_DWORD *)(a1 + 248) && *(_DWORD *)(a1 + 252))
      goto LABEL_45;
    goto LABEL_47;
  }
  v14 = a1 + 248;
  v15 = *(_DWORD *)(a1 + 220);
  if (!*(_DWORD *)(a1 + 248))
  {
    if (v15)
      goto LABEL_43;
LABEL_47:
    sub_1D5339168(&v39);
    sub_1D53393A8(a4, (uint64_t)&v39);
    v17 = (void *)*((_QWORD *)&v39 + 1);
    if (!*((_QWORD *)&v39 + 1))
      goto LABEL_50;
    v40 = *((_QWORD *)&v39 + 1);
    goto LABEL_49;
  }
  v16 = *(_DWORD *)(a1 + 252);
  if (!v15 || !v16)
  {
    if (v15)
      goto LABEL_43;
    if (v16)
      goto LABEL_45;
    goto LABEL_47;
  }
  if (v10 >= 1.0)
  {
LABEL_43:
    v18 = a4;
LABEL_46:
    sub_1D53393A8(v18, v13);
    goto LABEL_50;
  }
  if (v10 <= 0.0)
  {
LABEL_45:
    v18 = a4;
    v13 = v14;
    goto LABEL_46;
  }
  sub_1D5339590((unsigned int *)(a1 + 216), (uint64_t)&v37, v10);
  sub_1D5339590((unsigned int *)(a1 + 248), (uint64_t)&v34, 1.0 - v10);
  sub_1D5339420((unsigned int *)&v37, &v34, (uint64_t)&v39);
  sub_1D53393A8(a4, (uint64_t)&v39);
  if (*((_QWORD *)&v39 + 1))
  {
    v40 = *((_QWORD *)&v39 + 1);
    operator delete(*((void **)&v39 + 1));
  }
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  v17 = (void *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v38 = *((_QWORD *)&v37 + 1);
LABEL_49:
    operator delete(v17);
  }
LABEL_50:
  if (!*(_WORD *)(a1 + 208))
    return;
  *(_QWORD *)&v37 = sub_1D536C308();
  *((_QWORD *)&v37 + 1) = v19;
  sub_1D5338BF8(&v31, a1 + 16);
  sub_1D536E6B0((double *)&v37, (unsigned int *)&v31, &v39);
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  v34 = sub_1D536C2F4();
  __p = v20;
  sub_1D5338BF8(&v28, a1 + 48);
  sub_1D536E6B0(&v34, (unsigned int *)&v28, &v37);
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v10 < 1.0)
  {
    if (v10 > 0.0)
    {
      sub_1D5339590((unsigned int *)&v39, (uint64_t)&v25, v10);
      sub_1D5339590((unsigned int *)&v37, (uint64_t)&v22, 1.0 - v10);
      sub_1D5339420(&v25, &v22, (uint64_t)&v34);
      sub_1D53393A8((_QWORD *)a5, (uint64_t)&v34);
      if (__p)
      {
        v36 = __p;
        operator delete(__p);
      }
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      goto LABEL_66;
    }
    v21 = &v37;
  }
  else
  {
    v21 = &v39;
  }
  sub_1D53393A8((_QWORD *)a5, (uint64_t)v21);
LABEL_66:
  if (!*(_DWORD *)a5 || !*(_DWORD *)(a5 + 4))
    *(_WORD *)(a1 + 208) = 0;
  if (*(_DWORD *)(a1 + 8) != 17 || *(_DWORD *)(a1 + 12) != 21)
    *(_WORD *)(a1 + 208) = 0;
  if (*((_QWORD *)&v37 + 1))
  {
    v38 = *((_QWORD *)&v37 + 1);
    operator delete(*((void **)&v37 + 1));
  }
  if (*((_QWORD *)&v39 + 1))
  {
    v40 = *((_QWORD *)&v39 + 1);
    operator delete(*((void **)&v39 + 1));
  }
}

void sub_1D536E20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  uint64_t v27;
  void *v29;
  void *v30;

  v29 = *(void **)(v27 - 88);
  if (v29)
  {
    *(_QWORD *)(v27 - 80) = v29;
    operator delete(v29);
  }
  if (__p)
    operator delete(__p);
  v30 = *(void **)(v27 - 120);
  if (v30)
  {
    *(_QWORD *)(v27 - 112) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D536E318(unsigned int *a1, double *a2, _QWORD *a3, _QWORD *a4)
{
  double v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  _QWORD *v16;
  int v17;
  void *v18;
  void *v19;
  unsigned int v20;
  void *v21;
  void *v22;
  __int128 v23;
  uint64_t v24;

  sub_1D5339168(&v23);
  sub_1D53393A8(a3, (uint64_t)&v23);
  if (*((_QWORD *)&v23 + 1))
  {
    v24 = *((_QWORD *)&v23 + 1);
    operator delete(*((void **)&v23 + 1));
  }
  sub_1D5339168(&v23);
  sub_1D53393A8(a4, (uint64_t)&v23);
  if (*((_QWORD *)&v23 + 1))
  {
    v24 = *((_QWORD *)&v23 + 1);
    operator delete(*((void **)&v23 + 1));
  }
  v8 = sub_1D536E61C((uint64_t)a1, a2);
  if (v8 >= 1.0)
  {
    v9 = (uint64_t)(a1 + 4);
LABEL_19:
    sub_1D53393A8(a3, v9);
    goto LABEL_20;
  }
  if (v8 <= 0.0)
  {
    v9 = (uint64_t)(a1 + 12);
    goto LABEL_19;
  }
  if (!a1[4] || !a1[5] || !a1[12] || !a1[13])
  {
    sub_1D5339168(&v23);
    sub_1D53393A8(a3, (uint64_t)&v23);
    v10 = (void *)*((_QWORD *)&v23 + 1);
    if (!*((_QWORD *)&v23 + 1))
      goto LABEL_20;
    v24 = *((_QWORD *)&v23 + 1);
    goto LABEL_39;
  }
  sub_1D5339590(a1 + 4, (uint64_t)&v20, v8);
  sub_1D5339590(a1 + 12, (uint64_t)&v17, 1.0 - v8);
  sub_1D5339420(&v20, &v17, (uint64_t)&v23);
  sub_1D53393A8(a3, (uint64_t)&v23);
  if (*((_QWORD *)&v23 + 1))
  {
    v24 = *((_QWORD *)&v23 + 1);
    operator delete(*((void **)&v23 + 1));
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  v10 = v21;
  if (v21)
  {
    v22 = v21;
LABEL_39:
    operator delete(v10);
  }
LABEL_20:
  v11 = (uint64_t)(a1 + 54);
  if (!a1[54])
  {
    v12 = a1 + 62;
    if (a1[62] && a1[63])
      goto LABEL_43;
    goto LABEL_45;
  }
  v12 = a1 + 62;
  v13 = a1[55];
  if (!a1[62])
  {
    if (v13)
      goto LABEL_41;
LABEL_45:
    sub_1D5339168(&v23);
    sub_1D53393A8(a4, (uint64_t)&v23);
    v15 = (void *)*((_QWORD *)&v23 + 1);
    if (!*((_QWORD *)&v23 + 1))
      return;
    v24 = *((_QWORD *)&v23 + 1);
    goto LABEL_47;
  }
  v14 = a1[63];
  if (!v13 || !v14)
  {
    if (v13)
      goto LABEL_41;
    if (v14)
      goto LABEL_43;
    goto LABEL_45;
  }
  if (v8 >= 1.0)
  {
LABEL_41:
    v16 = a4;
LABEL_44:
    sub_1D53393A8(v16, v11);
    return;
  }
  if (v8 <= 0.0)
  {
LABEL_43:
    v16 = a4;
    v11 = (uint64_t)v12;
    goto LABEL_44;
  }
  sub_1D5339590(a1 + 54, (uint64_t)&v20, v8);
  sub_1D5339590(a1 + 62, (uint64_t)&v17, 1.0 - v8);
  sub_1D5339420(&v20, &v17, (uint64_t)&v23);
  sub_1D53393A8(a4, (uint64_t)&v23);
  if (*((_QWORD *)&v23 + 1))
  {
    v24 = *((_QWORD *)&v23 + 1);
    operator delete(*((void **)&v23 + 1));
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  v15 = v21;
  if (v21)
  {
    v22 = v21;
LABEL_47:
    operator delete(v15);
  }
}

void sub_1D536E5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a10)
    operator delete(a10);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

double sub_1D536E61C(uint64_t a1, double *a2)
{
  double v3;
  double v4;
  double v5;
  uint64_t v7;
  double v8;

  v7 = 0;
  v8 = 0.0;
  sub_1D536C434(a2, &v8, (double *)&v7);
  v3 = sub_1D536CBBC(*(_DWORD *)(a1 + 8));
  v4 = sub_1D536CBBC(*(_DWORD *)(a1 + 12));
  v5 = 1.0;
  if (v8 > v3)
  {
    v5 = 0.0;
    if (v8 < v4)
      return (1.0 / v8 - 1.0 / v4) / (1.0 / v3 - 1.0 / v4);
  }
  return v5;
}

void sub_1D536E6B0(double *a1@<X1>, unsigned int *a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  double v25[2];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  __int128 v36;
  uint64_t v37;
  _BYTE v38[8];
  void *v39;
  void *v40;

  sub_1D5339168(a3);
  sub_1D536C3A8(a1, &v33);
  sub_1D5339174((uint64_t *)&v33, &v36);
  sub_1D5339674(a2, &v36, (uint64_t)v38);
  if (*((_QWORD *)&v36 + 1))
  {
    v37 = *((_QWORD *)&v36 + 1);
    operator delete(*((void **)&v36 + 1));
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  sub_1D533A348((uint64_t)v38, &v33);
  sub_1D5339248((uint64_t *)&v33, &v36);
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  sub_1D5339A4C(a2, &v31);
  sub_1D5339674((unsigned int *)&v31, &v36, (uint64_t)&v33);
  if (*((_QWORD *)&v31 + 1))
  {
    v32 = *((_QWORD *)&v31 + 1);
    operator delete(*((void **)&v31 + 1));
  }
  sub_1D5338D40((uint64_t)&v31, 3u, 1u, 1.0, v6, v7, v8, v9, v10, 0x3FF0000000000000);
  sub_1D5339674((unsigned int *)&v33, &v31, (uint64_t)&v28);
  *(_QWORD *)&v26 = sub_1D5339044((uint64_t)&v28, 1u);
  *((_QWORD *)&v26 + 1) = v11;
  v12 = 1.0 / *(double *)sub_1D53390D4((uint64_t)&v26, 0);
  sub_1D5339590((unsigned int *)&v28, (uint64_t)&v26, v12);
  sub_1D53393A8(&v28, (uint64_t)&v26);
  if (*((_QWORD *)&v26 + 1))
  {
    v27 = *((_QWORD *)&v26 + 1);
    operator delete(*((void **)&v26 + 1));
  }
  sub_1D533A348((uint64_t)&v28, &v22);
  sub_1D536C368((uint64_t)&v19, (uint64_t)&v22);
  v25[0] = sub_1D536C2CC();
  v25[1] = v13;
  sub_1D536C65C(&v19, v25, v14, v15, v16, v17, v18, &v26);
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  sub_1D5339674((unsigned int *)&v26, &v33, (uint64_t)&v19);
  sub_1D5339590((unsigned int *)&v19, (uint64_t)&v22, v12);
  sub_1D53393A8(a3, (uint64_t)&v22);
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (*((_QWORD *)&v26 + 1))
  {
    v27 = *((_QWORD *)&v26 + 1);
    operator delete(*((void **)&v26 + 1));
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (*((_QWORD *)&v31 + 1))
  {
    v32 = *((_QWORD *)&v31 + 1);
    operator delete(*((void **)&v31 + 1));
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  if (*((_QWORD *)&v36 + 1))
  {
    v37 = *((_QWORD *)&v36 + 1);
    operator delete(*((void **)&v36 + 1));
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
}

void sub_1D536E8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void *v34;
  void *v35;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a22)
    operator delete(a22);
  if (a26)
    operator delete(a26);
  if (a30)
    operator delete(a30);
  v34 = *(void **)(v32 - 136);
  if (v34)
  {
    *(_QWORD *)(v32 - 128) = v34;
    operator delete(v34);
  }
  v35 = *(void **)(v32 - 104);
  if (v35)
  {
    *(_QWORD *)(v32 - 96) = v35;
    operator delete(v35);
  }
  v36 = *(void **)(v32 - 72);
  if (v36)
  {
    *(_QWORD *)(v32 - 64) = v36;
    operator delete(v36);
  }
  v37 = *(void **)(v31 + 8);
  if (v37)
  {
    *(_QWORD *)(v31 + 16) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

double sub_1D536EA4C(unsigned int *a1, uint64_t *a2)
{
  double v4;
  BOOL v5;
  int v6;
  int v7;
  int v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  _QWORD v22[2];
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[8];
  void *v27;
  void *v28;
  uint64_t v29;
  void *__p;
  void *v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  double v40;
  double v41;

  v40 = sub_1D536C2CC();
  v41 = v4;
  sub_1D5339174(a2, &v38);
  if ((_DWORD)v38)
    v5 = DWORD1(v38) == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = 29;
    do
    {
      v7 = v6;
      sub_1D5338BEC(&v36);
      sub_1D5338BEC(&v34);
      sub_1D536E318(a1, &v40, &v36, &v34);
      v8 = 1;
      if ((_DWORD)v36 && DWORD1(v36))
      {
        sub_1D5338BF8(&v29, (uint64_t)&v34);
        sub_1D5339DC0((unsigned int *)&v36, (unsigned int *)&v29, &v32);
        if (__p)
        {
          v31 = __p;
          operator delete(__p);
        }
        if ((_DWORD)v32 && DWORD1(v32))
        {
          sub_1D5339674((unsigned int *)&v32, &v38, (uint64_t)v26);
          v9 = sub_1D536C2CC();
          v11 = v10;
          v24 = sub_1D5339044((uint64_t)v26, 0);
          v25 = v12;
          v13 = *(double *)sub_1D53390D4((uint64_t)&v24, 0);
          v23[0] = sub_1D5339044((uint64_t)v26, 1u);
          v23[1] = v14;
          v15 = *(double *)sub_1D53390D4((uint64_t)v23, 0);
          v22[0] = sub_1D5339044((uint64_t)v26, 2u);
          v22[1] = v16;
          v17 = v13 + v15 + *(double *)sub_1D53390D4((uint64_t)v22, 0);
          if (v17 > 0.0)
          {
            v24 = sub_1D5339044((uint64_t)v26, 0);
            v25 = v18;
            v19 = *(double *)sub_1D53390D4((uint64_t)&v24, 0);
            v24 = sub_1D5339044((uint64_t)v26, 1u);
            v25 = v20;
            v9 = v19 / v17;
            v11 = *(double *)sub_1D53390D4((uint64_t)&v24, 0) / v17;
          }
          if (vabdd_f64(v9, v40) + vabdd_f64(v11, v41) >= 0.0000001)
          {
            v8 = 0;
            if (!v7)
            {
              v11 = (v11 + v41) * 0.5;
              v9 = (v9 + v40) * 0.5;
            }
          }
          else
          {
            v8 = 4;
          }
          v40 = v9;
          v41 = v11;
          if (v27)
          {
            v28 = v27;
            operator delete(v27);
          }
        }
        if (*((_QWORD *)&v32 + 1))
        {
          v33 = *((_QWORD *)&v32 + 1);
          operator delete(*((void **)&v32 + 1));
        }
      }
      if (*((_QWORD *)&v34 + 1))
      {
        v35 = *((_QWORD *)&v34 + 1);
        operator delete(*((void **)&v34 + 1));
      }
      if (*((_QWORD *)&v36 + 1))
      {
        v37 = *((_QWORD *)&v36 + 1);
        operator delete(*((void **)&v36 + 1));
      }
      if (v8)
        break;
      v6 = v7 - 1;
    }
    while (v7);
  }
  if (*((_QWORD *)&v38 + 1))
  {
    v39 = *((_QWORD *)&v38 + 1);
    operator delete(*((void **)&v38 + 1));
  }
  return v40;
}

void sub_1D536ECB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;
  void *v32;

  if (__p)
    operator delete(__p);
  if (a24)
    operator delete(a24);
  if (a28)
    operator delete(a28);
  v31 = *(void **)(v29 - 152);
  if (v31)
  {
    *(_QWORD *)(v29 - 144) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(v29 - 120);
  if (v32)
  {
    *(_QWORD *)(v29 - 112) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D536EF80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D536F390(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D536F39C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1D5281424(a1);
  _Unwind_Resume(a1);
}

void sub_1D536F3B8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWGamutMap", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

uint64_t sub_1D536F4B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 188) = a2;
  return result;
}

char *sub_1D536F4C0(uint64_t a1, uint64_t a2)
{
  char *result;

  result = (char *)(a1 + 192);
  if (result != (char *)a2)
    return sub_1D52B1D94(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  return result;
}

uint64_t sub_1D536F4E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 216) = a2;
  return result;
}

_QWORD *sub_1D536F4EC(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;
  uint64_t i;
  void *v6;

  *(_QWORD *)a1 = &off_1E998DC78;
  v2 = *(void ***)(a1 + 344);
  if (v2)
    j__free_3(*v2);
  j__free_3(v2);
  v3 = *(void ***)(a1 + 352);
  if (v3)
    j__free_3(*v3);
  j__free_3(v3);
  v4 = *(void **)(a1 + 200);
  if (v4)
  {
    j__free_3(v4);
    *(_QWORD *)(a1 + 200) = 0;
  }
  for (i = 272; i != 304; i += 8)
  {
    v6 = *(void **)(a1 + i);
    if (v6)
    {
      j__free_3(v6);
      *(_QWORD *)(a1 + i) = 0;
    }
  }
  if (*(char *)(a1 + 4519) < 0)
    operator delete(*(void **)(a1 + 4496));
  if (*(char *)(a1 + 4495) < 0)
    operator delete(*(void **)(a1 + 4472));
  return sub_1D5282F0C((_QWORD *)a1);
}

void sub_1D536F5B4(uint64_t a1)
{
  sub_1D536F4EC(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D536F5D8(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  unint64_t v6;
  int v7;
  unsigned int v8;

  v2 = *(int *)(a1 + 4460);
  if ((int)v2 < *(_DWORD *)(a1 + 4456))
  {
    *(_DWORD *)(a1 + 4460) = v2 + 1;
    v3 = (unsigned __int8 *)(a1 + v2 + 360);
    return *v3;
  }
  v3 = (unsigned __int8 *)(a1 + 362);
  v6 = 4096;
  sub_1D528304C(&v7, &v6);
  v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1 + 362, 4094);
  v4 = sub_1D5370E30(&v8);
  *(_DWORD *)(a1 + 4456) = v4 + 2;
  *(_DWORD *)(a1 + 4460) = 2;
  if (v4 >= 1)
  {
    *(_DWORD *)(a1 + 4460) = 3;
    return *v3;
  }
  return 255;
}

void sub_1D536F688(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, unsigned int *a7)
{
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v7 = *(unsigned __int16 *)(*(_QWORD *)(a5 + 8 * a2) + 2 * a3);
  v8 = 8 * a2 - 8;
  v9 = *(unsigned __int16 *)(*(_QWORD *)(a4 + v8) + 2 * a3);
  v10 = *(unsigned __int16 *)(*(_QWORD *)(a5 + v8) + 2 * a3);
  switch(a6)
  {
    case 1:
      break;
    case 2:
      v9 = *(unsigned __int16 *)(*(_QWORD *)(a5 + 8 * a2) + 2 * a3);
      break;
    case 3:
      v9 = v10;
      break;
    case 4:
      v9 = v9 + v7 - v10;
      break;
    case 5:
      v9 += (int)(v7 - v10) >> 1;
      break;
    case 6:
      v9 = v7 + ((int)(v9 - v10) >> 1);
      break;
    case 7:
      v9 = (v9 + v7) >> 1;
      break;
    default:
      v9 = 0;
      break;
  }
  *a7 = v9;
}

char *sub_1D536F718(uint64_t a1)
{
  uint64_t v2;
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *exception;

  if (*(__int16 *)(a1 + 208) >= 1)
  {
    v2 = *(unsigned __int16 *)(a1 + 208);
    v3 = (_WORD *)(*(_QWORD *)(a1 + 200) + 6);
    while (*(v3 - 1) == 1 && *v3 == 1)
    {
      v3 += 5;
      if (!--v2)
        goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_6:
  v4 = *(unsigned __int16 *)(a1 + 248);
  if (v4 == 1)
  {
    *(_WORD *)(a1 + 250) = 0;
  }
  else
  {
    if ((__int16)v4 > 4)
      goto LABEL_20;
    if ((__int16)v4 >= 1)
    {
      v5 = 0;
      do
      {
        *(_WORD *)(a1 + 250 + 2 * v5) = v5;
        ++v5;
      }
      while (v4 != v5);
    }
  }
  v6 = sub_1D5441BF0(8 * *(int *)(a1 + 188));
  *(_QWORD *)(a1 + 344) = v6;
  if (!v6)
    goto LABEL_20;
  *v6 = 0;
  v7 = sub_1D5441BF0(8 * *(int *)(a1 + 188));
  *(_QWORD *)(a1 + 352) = v7;
  if (!v7
    || (*v7 = 0,
        v8 = 2 * *(__int16 *)(a1 + 248),
        (v9 = (char *)sub_1D5441BF0((int)v8 * (uint64_t)*(int *)(a1 + 188))) == 0)
    || (v10 = v9,
        **(_QWORD **)(a1 + 344) = v9,
        (result = (char *)sub_1D5441BF0((int)v8 * (uint64_t)*(int *)(a1 + 188))) == 0))
  {
LABEL_20:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  **(_QWORD **)(a1 + 352) = result;
  v12 = *(int *)(a1 + 188);
  if (v12 >= 2)
  {
    v13 = 1;
    v14 = v8;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 344) + 8 * v13) = &v10[v14];
      *(_QWORD *)(*(_QWORD *)(a1 + 352) + 8 * v13++) = &result[v14];
      v14 += v8;
    }
    while (v12 != v13);
  }
  return result;
}

void sub_1D536F920(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D536F948(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t i;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  char *v17;
  int v18;
  unsigned __int8 *v19;
  _BYTE *v20;
  __int16 *v21;
  uint64_t v22;
  __int16 v23;
  __int16 v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _WORD *v30;
  int v31;
  int v32;
  uint64_t j;
  int v34;
  int v35;
  int v36;
  int v37;
  int *v38;
  int v39;
  void *exception;
  _WORD v41[257];
  _BYTE v42[257];
  uint64_t v43;

  v3 = 0;
  v43 = *MEMORY[0x1E0C80C00];
  for (i = 1; i != 17; ++i)
  {
    v5 = *(unsigned __int8 *)(a2 + i);
    if (*(_BYTE *)(a2 + i))
    {
      if (v3 <= 257)
        v6 = 257;
      else
        v6 = v3;
      v7 = v6 - v3;
      v8 = &v42[v3];
      do
      {
        if (!v7)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](exception, "RawCameraException");
          goto LABEL_42;
        }
        *v8++ = i;
        --v7;
        ++v3;
        --v5;
      }
      while (v5);
    }
  }
  v42[v3] = 0;
  v9 = v42[0];
  if (v42[0])
  {
    v10 = 0;
    v11 = 0;
    v12 = v42[0];
    do
    {
      if (v9 == v12)
      {
        if ((int)v11 <= 257)
          v13 = 257;
        else
          v13 = v11;
        v14 = v13 - (int)v11;
        v15 = &v41[(int)v11];
        v16 = v11 << 32;
        v17 = &v42[(int)v11 + 1];
        do
        {
          if (!v14)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](exception, "RawCameraException");
            goto LABEL_42;
          }
          *v15++ = v10++;
          v18 = *v17++;
          --v14;
          v16 += 0x100000000;
          v11 = (v11 + 1);
        }
        while (v9 == v18);
        v12 = v42[v16 >> 32];
      }
      v10 *= 2;
      ++v9;
    }
    while (v12);
  }
  *(_OWORD *)(a2 + 1016) = 0u;
  *(_OWORD *)(a2 + 1032) = 0u;
  *(_OWORD *)(a2 + 984) = 0u;
  *(_OWORD *)(a2 + 1000) = 0u;
  *(_OWORD *)(a2 + 952) = 0u;
  *(_OWORD *)(a2 + 968) = 0u;
  *(_OWORD *)(a2 + 920) = 0u;
  *(_OWORD *)(a2 + 936) = 0u;
  *(_OWORD *)(a2 + 888) = 0u;
  *(_OWORD *)(a2 + 904) = 0u;
  *(_OWORD *)(a2 + 856) = 0u;
  *(_OWORD *)(a2 + 872) = 0u;
  *(_OWORD *)(a2 + 824) = 0u;
  *(_OWORD *)(a2 + 840) = 0u;
  *(_OWORD *)(a2 + 792) = 0u;
  *(_OWORD *)(a2 + 808) = 0u;
  if (v3 >= 1)
  {
    v19 = (unsigned __int8 *)(a2 + 17);
    v20 = v42;
    v21 = v41;
    v22 = v3;
    do
    {
      v24 = *v21++;
      v23 = v24;
      LOBYTE(v24) = *v20++;
      v25 = v24;
      *(_WORD *)(a2 + 2 * *v19 + 280) = v23;
      v26 = *v19++;
      *(_BYTE *)(a2 + v26 + 792) = v25;
      --v22;
    }
    while (v22);
  }
  v27 = 0;
  v28 = 0;
  v29 = a2 + 1158;
  v30 = (_WORD *)(a2 + 1050);
  do
  {
    v31 = *(unsigned __int8 *)(v29 + v27 - 1157);
    if (*(_BYTE *)(v29 + v27 - 1157))
    {
      v30[54] = v28;
      *v30 = v41[v28];
      v28 += v31;
      v32 = (unsigned __int16)v41[v28 - 1];
    }
    else
    {
      v32 = -1;
    }
    *(_DWORD *)(v29 + 4 * v27++ - 70) = v32;
    ++v30;
  }
  while (v27 != 16);
  *(_DWORD *)(a2 + 1152) = 0xFFFFF;
  bzero((void *)(a2 + 1192), 0x400uLL);
  if (v3 >= 1)
  {
    for (j = 0; j != v3; ++j)
    {
      v34 = (char)v42[j];
      if (v34 <= 8)
      {
        v35 = (unsigned __int16)v41[j] << (8 - v34);
        v36 = v35;
        if (v34 != 8)
          v36 = dword_1D544D528[v34 + 24] | v35;
        if (v36 > 255)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](exception, "RawCameraException");
LABEL_42:
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        if (v35 <= v36)
        {
          v37 = *(unsigned __int8 *)(a2 + j + 17);
          v38 = (int *)(a2 + 1192 + 4 * v35);
          v39 = v36 - v35 + 1;
          do
          {
            *v38 = v34;
            v38[256] = v37;
            ++v38;
            --v39;
          }
          while (v39);
        }
      }
    }
  }
}

void sub_1D536FC58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D536FC74(uint64_t a1)
{
  int v2;
  uint64_t result;
  int v4;
  int v5;

  v2 = sub_1D536F5D8(a1);
  result = sub_1D536F5D8(a1);
  v4 = result | (v2 << 8);
  v5 = v4 - 2;
  if (v4 != 2)
  {
    do
    {
      --v5;
      result = sub_1D536F5D8(a1);
    }
    while (v5);
  }
  return result;
}

double sub_1D536FCBC(uint64_t a1)
{
  int v2;
  int v3;
  double result;
  int v5;
  void **v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t i;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  _OWORD *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  _OWORD v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v2 = sub_1D536F5D8(a1);
  v3 = sub_1D536F5D8(a1) | (v2 << 8);
  v5 = v3 - 2;
  if (v3 != 2)
  {
    v6 = 0;
    do
    {
      v7 = sub_1D536F5D8(a1);
      LODWORD(v8) = 0;
      LOBYTE(v39) = 0;
      for (i = 1; i != 17; ++i)
      {
        v10 = sub_1D536F5D8(a1);
        *((_BYTE *)&v39 + i) = v10;
        v8 = (v8 + v10);
      }
      if (v8 > 0x100)
        break;
      if ((_DWORD)v8)
      {
        v11 = v24;
        v12 = v8;
        do
        {
          *v11++ = sub_1D536F5D8(a1);
          --v12;
        }
        while (v12);
      }
      if ((v7 & 0x10) == 0)
        v6 = (void **)(a1 + 8 * v7 + 272);
      if (v7 > 3)
        break;
      v13 = *v6;
      if (!*v6)
      {
        v13 = sub_1D5441BF0(0xCA8uLL);
        *v6 = v13;
        if (!v13)
          break;
      }
      *((_BYTE *)v13 + 16) = v40;
      *v13 = v39;
      v14 = (char *)*v6;
      v15 = v36;
      *(_OWORD *)(v14 + 209) = v35;
      *(_OWORD *)(v14 + 225) = v15;
      v16 = v38;
      *(_OWORD *)(v14 + 241) = v37;
      v17 = v32;
      *(_OWORD *)(v14 + 145) = v31;
      *(_OWORD *)(v14 + 161) = v17;
      v18 = v34;
      *(_OWORD *)(v14 + 177) = v33;
      *(_OWORD *)(v14 + 193) = v18;
      v19 = v28;
      *(_OWORD *)(v14 + 81) = v27;
      *(_OWORD *)(v14 + 97) = v19;
      v20 = v30;
      *(_OWORD *)(v14 + 113) = v29;
      *(_OWORD *)(v14 + 129) = v20;
      v21 = v24[1];
      *(_OWORD *)(v14 + 17) = v24[0];
      *(_OWORD *)(v14 + 33) = v21;
      result = *(double *)&v25;
      v22 = v26;
      *(_OWORD *)(v14 + 49) = v25;
      *(_OWORD *)(v14 + 65) = v22;
      v23 = v5 - v8;
      *(_OWORD *)(v14 + 257) = v16;
      v5 = v5 - v8 - 17;
    }
    while (v23 != 17);
  }
  return result;
}

uint64_t sub_1D536FE80(uint64_t a1)
{
  int v2;
  uint64_t result;
  int v4;

  v2 = sub_1D536F5D8(a1);
  result = sub_1D536F5D8(a1);
  if ((result | (v2 << 8)) == 4)
  {
    v4 = sub_1D536F5D8(a1);
    result = sub_1D536F5D8(a1);
    *(_DWORD *)(a1 + 312) = result | (v4 << 8);
  }
  return result;
}

uint64_t sub_1D536FED4(uint64_t a1)
{
  int v2;
  uint64_t result;
  unsigned int v4;

  v2 = sub_1D536F5D8(a1);
  result = sub_1D536F5D8(a1);
  if ((int)((result & 0xFFFF00FF | (v2 << 8)) - 2) >= 1)
  {
    v4 = (v2 << 8) + result - 1;
    do
    {
      result = sub_1D536F5D8(a1);
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

uint64_t sub_1D536FF34(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  unsigned int v11;
  void *exception;

  v2 = sub_1D536F5D8(a1);
  v3 = sub_1D536F5D8(a1);
  *(_DWORD *)(a1 + 196) = sub_1D536F5D8(a1);
  v4 = sub_1D536F5D8(a1);
  *(_DWORD *)(a1 + 192) = sub_1D536F5D8(a1) | (v4 << 8);
  v5 = sub_1D536F5D8(a1);
  *(_DWORD *)(a1 + 188) = sub_1D536F5D8(a1) | (v5 << 8);
  v6 = sub_1D536F5D8(a1);
  *(_WORD *)(a1 + 208) = v6;
  if (*(int *)(a1 + 192) < 1
    || *(int *)(a1 + 188) < 1
    || !v6
    || (*(_DWORD *)(a1 + 196) - 17) <= 0xFFFFFFF0
    || (v3 | (v2 << 8)) != 3 * v6 + 8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  result = (uint64_t)sub_1D5441B98(v6, 0xAuLL);
  *(_QWORD *)(a1 + 200) = result;
  if (*(__int16 *)(a1 + 208) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = (_WORD *)(*(_QWORD *)(a1 + 200) + v8);
      v10[1] = v9;
      *v10 = sub_1D536F5D8(a1);
      v11 = sub_1D536F5D8(a1);
      v10[2] = v11 >> 4;
      v10[3] = v11 & 0xF;
      result = sub_1D536F5D8(a1);
      ++v9;
      v8 += 10;
    }
    while (v9 < *(__int16 *)(a1 + 208));
  }
  return result;
}

void sub_1D53700D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53700F0(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 *i;

  v2 = sub_1D536F5D8(a1);
  v3 = sub_1D536F5D8(a1);
  result = sub_1D536F5D8(a1);
  *(_WORD *)(a1 + 248) = result;
  if ((result - 5) >= 0xFFFFFFFC && (v3 | (v2 << 8)) == 2 * (_DWORD)result + 6)
  {
    v5 = 0;
    v6 = 0;
    v7 = result;
    while (1)
    {
      v8 = sub_1D536F5D8(a1);
      result = sub_1D536F5D8(a1);
      if (!v5 && v8 != **(__int16 **)(a1 + 200))
        v6 = v8;
      if (*(__int16 *)(a1 + 208) < 1)
        break;
      v9 = *(unsigned __int16 *)(a1 + 208);
      for (i = *(__int16 **)(a1 + 200); v8 - v6 != *i; i += 5)
      {
        if (!--v9)
          return result;
      }
      *(_QWORD *)(a1 + 8 * v5 + 216) = i;
      i[4] = result >> 4;
      if (++v5 == v7)
      {
        *(_DWORD *)(a1 + 304) = sub_1D536F5D8(a1);
        sub_1D536F5D8(a1);
        result = sub_1D536F5D8(a1);
        *(_DWORD *)(a1 + 308) = result & 0xF;
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_1D5370204(uint64_t a1)
{
  uint64_t result;

  do
  {
    while (sub_1D536F5D8(a1) != 255)
      ;
    do
      result = sub_1D536F5D8(a1);
    while ((_DWORD)result == 255);
  }
  while (!(_DWORD)result);
  return result;
}

uint64_t sub_1D5370244(uint64_t a1)
{
  uint64_t result;

  while (1)
  {
    result = sub_1D5370204(a1);
    switch((char)result)
    {
      case -64:
      case -63:
      case -62:
      case -61:
      case -59:
      case -58:
      case -57:
      case -56:
      case -55:
      case -54:
      case -53:
      case -51:
      case -50:
      case -49:
      case -40:
      case -39:
      case -38:
        return result;
      case -60:
        sub_1D536FCBC(a1);
        continue;
      case -52:
      case -36:
      case -34:
      case -33:
        goto LABEL_4;
      case -48:
      case -47:
      case -46:
      case -45:
      case -44:
      case -43:
      case -42:
      case -41:
      case -37:
        continue;
      case -35:
        sub_1D536FE80(a1);
        continue;
      case -32:
        sub_1D536FED4(a1);
        continue;
      default:
        if (result != 1)
LABEL_4:
          sub_1D536FC74(a1);
        break;
    }
  }
}

uint64_t sub_1D53702C8(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  void *exception;

  v2 = sub_1D536F5D8(a1);
  v3 = sub_1D536F5D8(a1);
  if (v2 != 255 || v3 != 216 || (*(_DWORD *)(a1 + 312) = 0, v4 = sub_1D5370244(a1), v4 != 195) && (v4 & 0xFE) != 0xC0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return sub_1D536FF34(a1);
}

void sub_1D5370374(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D537038C(uint64_t a1)
{
  void *exception;

  if (sub_1D5370244(a1) != 218)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return sub_1D53700F0(a1);
}

void sub_1D53703E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53703FC(uint64_t result, int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(int *)(result + 336) <= 56)
  {
    v3 = result;
    do
    {
      result = sub_1D536F5D8(v3);
      v4 = result;
      if ((_DWORD)result == 255 && (result = sub_1D536F5D8(v3), (_DWORD)result))
      {
        v7 = *(int *)(v3 + 4460) - 1;
        *(_DWORD *)(v3 + 4460) = v7;
        v8 = v3 + 360;
        *(_BYTE *)(v8 + v7) = result;
        v9 = *(int *)(v3 + 4460) - 1;
        *(_DWORD *)(v3 + 4460) = v9;
        *(_BYTE *)(v8 + v9) = -1;
        v6 = *(_DWORD *)(v3 + 336);
        if (v6 >= a2)
          return result;
        v5 = 0;
      }
      else
      {
        v5 = v4;
        v6 = *(_DWORD *)(v3 + 336);
      }
      *(_QWORD *)(v3 + 328) = v5 | (*(_QWORD *)(v3 + 328) << 8);
      *(_DWORD *)(v3 + 336) = v6 + 8;
    }
    while (v6 < 49);
  }
  return result;
}

void sub_1D53704B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  void *exception;

  *(_DWORD *)(a1 + 336) = 0;
  if (*(unsigned __int16 *)(a1 + 248) > 4u)
    goto LABEL_9;
  if (*(_WORD *)(a1 + 248))
  {
    v2 = 0;
    while (1)
    {
      v3 = *(_QWORD *)(a1 + 216 + 8 * v2);
      if (!v3)
        break;
      v4 = *(unsigned __int16 *)(v3 + 8);
      if (v4 >= 4)
        break;
      v5 = *(_QWORD *)(a1 + 8 * v4 + 272);
      if (!v5)
        break;
      sub_1D536F948(a1, v5);
      if (++v2 >= *(__int16 *)(a1 + 248))
        goto LABEL_8;
    }
LABEL_9:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
LABEL_8:
  v6 = *(_DWORD *)(a1 + 312) / *(_DWORD *)(a1 + 188);
  *(_DWORD *)(a1 + 316) = v6;
  *(_DWORD *)(a1 + 320) = v6;
  *(_WORD *)(a1 + 324) = 0;
}

void sub_1D53705C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53705E0(uint64_t a1)
{
  uint64_t result;
  int v3;

  *(_DWORD *)(a1 + 336) = 0;
  do
  {
    while (sub_1D536F5D8(a1) != 255)
      ;
    do
      result = sub_1D536F5D8(a1);
    while ((_DWORD)result == 255);
  }
  while (!(_DWORD)result);
  v3 = *(__int16 *)(a1 + 324);
  if (v3 + 208 == (_DWORD)result)
  {
    *(_DWORD *)(a1 + 320) = *(_DWORD *)(a1 + 316);
    *(_WORD *)(a1 + 324) = ((_BYTE)v3 + 1) & 7;
  }
  return result;
}

uint64_t sub_1D537064C(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t i;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v3 = result;
  v12 = 0;
  v4 = *(unsigned __int16 *)(result + 248);
  v5 = *(unsigned int *)(result + 188);
  if (*(__int16 *)(result + 248) >= 1)
  {
    v6 = 0;
    v7 = 1 << (*(_DWORD *)(result + 196) + ~*(_BYTE *)(result + 308));
    do
    {
      result = sub_1D5370834(v3, *(_QWORD *)(v3+ 8 * *(__int16 *)(*(_QWORD *)(v3 + 8 * *(__int16 *)(v3 + v6 + 250) + 216) + 8)+ 272), (_DWORD *)&v12 + 1);
      if (HIDWORD(v12))
      {
        result = sub_1D5370940(v3, SHIDWORD(v12), &v12);
        LOWORD(v8) = v12;
        if ((int)v12 < 1 << (BYTE4(v12) - 1))
        {
          v8 = v12 + (-1 << SBYTE4(v12)) + 1;
          LODWORD(v12) = v8;
        }
      }
      else
      {
        LOWORD(v8) = 0;
        LODWORD(v12) = 0;
      }
      *(_WORD *)(*a2 + v6) = v8 + v7;
      v6 += 2;
    }
    while (2 * v4 != v6);
  }
  if ((int)v5 > 1)
  {
    for (i = 1; i != v5; ++i)
    {
      if ((__int16)v4 >= 1)
      {
        v10 = 0;
        do
        {
          result = sub_1D5370834(v3, *(_QWORD *)(v3+ 8 * *(__int16 *)(*(_QWORD *)(v3 + 8 * *(__int16 *)(v3 + v10 + 250) + 216) + 8)+ 272), (_DWORD *)&v12 + 1);
          if (HIDWORD(v12))
          {
            result = sub_1D5370940(v3, SHIDWORD(v12), &v12);
            LOWORD(v11) = v12;
            if ((int)v12 < 1 << (BYTE4(v12) - 1))
            {
              v11 = v12 + (-1 << SBYTE4(v12)) + 1;
              LODWORD(v12) = v11;
            }
          }
          else
          {
            LOWORD(v11) = 0;
            LODWORD(v12) = 0;
          }
          *(_WORD *)(a2[i] + v10) = *(_WORD *)(a2[i - 1] + v10) + v11;
          v10 += 2;
        }
        while (2 * v4 != v10);
      }
    }
  }
  if (*(_DWORD *)(v3 + 316))
    --*(_DWORD *)(v3 + 320);
  return result;
}

uint64_t sub_1D5370834(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v5 = result;
  v6 = *(_DWORD *)(result + 336);
  if (v6 <= 7)
  {
    result = sub_1D53703FC(result, 8);
    v6 = *(_DWORD *)(v5 + 336);
  }
  v7 = *(_QWORD *)(v5 + 328);
  v8 = v6 - 8;
  v9 = *(_DWORD *)(a2 + 4 * (v7 >> (v6 - 8)) + 1192);
  if (!v9)
  {
    v11 = (v7 >> (v6 - 8));
    *(_DWORD *)(v5 + 336) = v8;
    if (v11 <= *(_DWORD *)(a2 + 1116))
    {
      v14 = 8;
    }
    else
    {
      v12 = 280;
      do
      {
        if (!v8)
        {
          result = sub_1D53703FC(v5, 1);
          v8 = *(_DWORD *)(v5 + 336);
          v7 = *(_QWORD *)(v5 + 328);
        }
        *(_DWORD *)(v5 + 336) = --v8;
        v11 = ((unint64_t)v7 >> v8) & 1 | (2 * v11);
        v13 = *(_DWORD *)(a2 + 4 * v12++);
      }
      while (v11 > v13);
      v14 = v12 - 272;
      if ((v12 - 272) > 0x10)
      {
        v10 = 0;
        goto LABEL_14;
      }
    }
    v10 = *(unsigned __int8 *)(a2
                             + v11
                             + *(__int16 *)(a2 + 2 * v14 + 1156)
                             - *(unsigned __int16 *)(a2 + 2 * v14 + 1048)
                             + 17);
    goto LABEL_14;
  }
  *(_DWORD *)(v5 + 336) = v6 - v9;
  v10 = *(_DWORD *)(a2 + 4 * (v7 >> (v6 - 8)) + 2216);
LABEL_14:
  *a3 = v10;
  return result;
}

uint64_t sub_1D5370940(uint64_t result, int a2, _DWORD *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  v5 = result;
  v6 = *(_DWORD *)(result + 336);
  if (v6 < a2)
  {
    result = sub_1D53703FC(result, a2);
    v6 = *(_DWORD *)(v5 + 336);
  }
  v7 = *(_QWORD *)(v5 + 328);
  v8 = v6 - a2;
  *(_DWORD *)(v5 + 336) = v8;
  *a3 = dword_1D544D4E4[a2] & (v7 >> v8);
  return result;
}

void sub_1D53709AC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *exception;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;

  v35 = *(_DWORD *)(a1 + 192);
  v38 = *(__int16 *)(a1 + 248);
  v2 = *(unsigned __int8 *)(a1 + 4519);
  v3 = *(_DWORD *)(a1 + 308);
  v4 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a1 + 4504);
  if (v2 == 8)
  {
    if (v4 >= 0)
      v5 = (_QWORD *)(a1 + 4496);
    else
      v5 = *(_QWORD **)(a1 + 4496);
    v6 = *v5 == 0x325320616369654CLL;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(unsigned int *)(a1 + 188);
  v8 = *(_DWORD *)(a1 + 304);
  v10 = *(_QWORD **)(a1 + 344);
  v9 = *(_QWORD **)(a1 + 352);
  v43 = 0;
  v44 = 0;
  if (v6 && v3 == 12)
    v11 = 0;
  else
    v11 = v3;
  v41 = v38;
  v12 = *(_DWORD *)(a1 + 44);
  v39 = *(_DWORD *)(a1 + 48);
  v40 = v35;
  if ((unsigned __int16)(v38 - 1) >= 4u)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    goto LABEL_56;
  }
  v45 = v7;
  v45 = *sub_1D530AB18(&v45, &v40);
  v13 = *sub_1D530AB18(&v45, &v41);
  v45 = v12;
  if (v13 != *sub_1D530AB18(&v45, &v39))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
LABEL_56:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v42 = 0;
  sub_1D537064C(a1, v10);
  if ((int)v7 >= 1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 4464);
    do
    {
      v16 = 0;
      do
      {
        *(_WORD *)(v15 + v16) = *(unsigned __int16 *)(v10[v14] + v16) << v11;
        *(_QWORD *)(a1 + 4464) = v15 + v16 + 2;
        v16 += 2;
      }
      while (2 * v38 != v16);
      ++v14;
      v15 += v16;
    }
    while (v14 != v7);
  }
  if (v35 > 1)
  {
    v17 = 2 * v38;
    v18 = 2 * (unsigned __int16)v38;
    v19 = 1;
    v37 = v7;
    do
    {
      v20 = v9;
      v9 = v10;
      v36 = v19;
      if (*(_DWORD *)(a1 + 316))
      {
        v21 = *(_DWORD *)(a1 + 320);
        if (!v21)
        {
          sub_1D53705E0(a1);
          sub_1D537064C(a1, v20);
          if ((int)v7 >= 1)
          {
            v31 = 0;
            v32 = *(_QWORD *)(a1 + 4464);
            do
            {
              v33 = 0;
              do
              {
                *(_WORD *)(v32 + v33) = *(unsigned __int16 *)(v20[v31] + v33) << v11;
                *(_QWORD *)(a1 + 4464) = v32 + v33 + 2;
                v33 += 2;
              }
              while (v17 != v33);
              ++v31;
              v32 += v33;
            }
            while (v31 != v7);
          }
          goto LABEL_52;
        }
        *(_DWORD *)(a1 + 320) = v21 - 1;
      }
      if (v38 >= 1)
      {
        v22 = 0;
        do
        {
          sub_1D5370834(a1, *(_QWORD *)(a1 + 8 * *(__int16 *)(*(_QWORD *)(a1 + 8 * *(__int16 *)(a1 + v22 + 250) + 216) + 8) + 272), &v44);
          if (v44)
          {
            sub_1D5370940(a1, v44, &v43);
            LOWORD(v23) = v43;
            if (v43 < 1 << (v44 - 1))
            {
              v23 = v43 + (-1 << v44) + 1;
              v43 = v23;
            }
          }
          else
          {
            LOWORD(v23) = 0;
            v43 = 0;
          }
          *(_WORD *)(*v20 + v22) = *(_WORD *)(*v9 + v22) + v23;
          v22 += 2;
        }
        while (v18 != v22);
      }
      if ((int)v7 > 1)
      {
        v24 = 1;
        do
        {
          if (v38 >= 1)
          {
            v25 = 0;
            do
            {
              v26 = sub_1D5370834(a1, *(_QWORD *)(a1+ 8* *(__int16 *)(*(_QWORD *)(a1 + 8 * *(__int16 *)(a1 + 2 * v25 + 250) + 216) + 8)+ 272), &v44);
              if (v44)
              {
                v26 = sub_1D5370940(a1, v44, &v43);
                LOWORD(v27) = v43;
                if (v43 < 1 << (v44 - 1))
                {
                  v27 = v43 + (-1 << v44) + 1;
                  v43 = v27;
                }
              }
              else
              {
                LOWORD(v27) = 0;
                v43 = 0;
              }
              sub_1D536F688(v26, v24, v25, (uint64_t)v20, (uint64_t)v9, v8, &v42);
              *(_WORD *)(v20[v24] + 2 * v25++) = v42 + v27;
            }
            while ((unsigned __int16)v38 != v25);
          }
          ++v24;
          v7 = v37;
        }
        while (v24 != v37);
      }
      v18 = 2 * (unsigned __int16)v38;
      if ((int)v7 >= 1)
      {
        v28 = 0;
        v29 = *(_QWORD *)(a1 + 4464);
        do
        {
          v30 = 0;
          do
          {
            *(_WORD *)(v29 + v30) = *(unsigned __int16 *)(v20[v28] + v30) << v11;
            *(_QWORD *)(a1 + 4464) = v29 + v30 + 2;
            v30 += 2;
          }
          while (v17 != v30);
          ++v28;
          v29 += v30;
        }
        while (v28 != v7);
      }
LABEL_52:
      v19 = v36 + 1;
      v10 = v20;
    }
    while (v36 + 1 != v35);
  }
}

void sub_1D5370E18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5370E30(unsigned int *a1)
{
  uint64_t result;
  void *exception;

  result = *a1;
  if ((result & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D5370E80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D5370E94(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void (**v4)(_QWORD);
  _QWORD v5[5];
  uint8_t buf[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CLjpgUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1D5370FBC;
  v5[3] = &unk_1E996F870;
  v5[4] = a1;
  v4 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v5);
  *(_QWORD *)(a1 + 4464) = sub_1D530B618(a1);
  sub_1D53702C8(a1);
  sub_1D537038C(a1);
  sub_1D536F718(a1);
  sub_1D53704B0(a1);
  sub_1D53709AC(a1);
  v4[2](v4);

}

void sub_1D5370F94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5370FBC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CLjpgUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

_QWORD *sub_1D5371040@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  _QWORD *result;

  v3 = a1;
  result = operator new(0x28uLL);
  result[2] = 0;
  *result = &unk_1E998DD98;
  result[1] = 0;
  result[3] = &unk_1E998DD68;
  result[4] = v3;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void sub_1D537109C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D53710AC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D53710C0(a1, (const char *)*MEMORY[0x1E0CBD1F0], a2, a4, a5);
}

uint64_t sub_1D53710C0(uint64_t a1, const char *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  int v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *a3;
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 8), a2, (uint64_t)a2, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v11 = v5 != 0;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v11 = objc_msgSend_BOOLValue(v6, v7, v8, v9, v10);

  return v11;
}

void sub_1D5371128(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5371138(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D53710C0(a1, (const char *)*MEMORY[0x1E0CBD228], a2, a4, a5);
}

double sub_1D537114C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D5371160(a1, (const char *)*MEMORY[0x1E0CBD230], a2, a4, a5);
}

double sub_1D5371160(uint64_t a1, const char *a2, double *a3, uint64_t a4, uint64_t a5)
{
  double v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v5 = *a3;
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 8), a2, (uint64_t)a2, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend_doubleValue(v6, v7, v8, v9, v10);
    v5 = v11;
  }

  return v5;
}

void sub_1D53711C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1D53711D8(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D5371160(a1, (const char *)*MEMORY[0x1E0CBD220], a2, a4, a5);
}

double sub_1D53711EC(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D5371160(a1, (const char *)*MEMORY[0x1E0CBD218], a2, a4, a5);
}

uint64_t sub_1D5371200(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D53710C0(a1, (const char *)*MEMORY[0x1E0CBD150], a2, a4, a5);
}

double sub_1D5371214(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D5371160(a1, (const char *)*MEMORY[0x1E0CBD168], a2, a4, a5);
}

double sub_1D5371228(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D5371160(a1, (const char *)*MEMORY[0x1E0CBD158], a2, a4, a5);
}

double sub_1D537123C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D5371160(a1, (const char *)*MEMORY[0x1E0CBD160], a2, a4, a5);
}

double sub_1D5371250(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D5371160(a1, (const char *)*MEMORY[0x1E0CBD148], a2, a4, a5);
}

void sub_1D5371264(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, char **a5@<X8>)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 8), (const char *)a2, (uint64_t)off_1EFF323B0, a3, a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && (unint64_t)objc_msgSend_count(v7, v8, v9, v10, v11) <= 4)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v12 = v7;
    v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, v13, (uint64_t)&v33, (uint64_t)v37, 16);
    if (v18)
    {
      v19 = *(_QWORD *)v34;
      do
      {
        for (i = 0; i != v18; ++i)
        {
          if (*(_QWORD *)v34 != v19)
            objc_enumerationMutation(v12);
          objc_msgSend_doubleValue(*(void **)(*((_QWORD *)&v33 + 1) + 8 * i), (const char *)v14, v15, v16, v17, (_QWORD)v33);
          v22 = v21;
          v24 = a5[1];
          v23 = (unint64_t)a5[2];
          if ((unint64_t)v24 >= v23)
          {
            v26 = *a5;
            v27 = (v24 - *a5) >> 3;
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 61)
              sub_1D5282B8C();
            v29 = v23 - (_QWORD)v26;
            if (v29 >> 2 > v28)
              v28 = v29 >> 2;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
              v14 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v14 = v28;
            if (v14)
            {
              v30 = (char *)sub_1D5282D28((uint64_t)(a5 + 2), v14);
              v26 = *a5;
              v24 = a5[1];
            }
            else
            {
              v30 = 0;
            }
            v31 = &v30[8 * v27];
            *(_QWORD *)v31 = v22;
            v25 = v31 + 8;
            while (v24 != v26)
            {
              v32 = *((_QWORD *)v24 - 1);
              v24 -= 8;
              *((_QWORD *)v31 - 1) = v32;
              v31 -= 8;
            }
            *a5 = v31;
            a5[1] = v25;
            a5[2] = &v30[8 * v14];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *(_QWORD *)v24 = v21;
            v25 = v24 + 8;
          }
          a5[1] = v25;
        }
        v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v12, (const char *)v14, (uint64_t)&v33, (uint64_t)v37, 16);
      }
      while (v18);
    }

  }
  else
  {

    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_1D5282C70(a5, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  }
}

void sub_1D53714C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v5;

  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

double sub_1D537150C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D5371160(a1, (const char *)off_1EFF323B8, a2, a4, a5);
}

uint64_t sub_1D537151C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D53710C0(a1, (const char *)off_1EFF323C0, a2, a4, a5);
}

double sub_1D537152C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D5371160(a1, (const char *)off_1EFF323C8, a2, a4, a5);
}

double sub_1D537153C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D5371160(a1, (const char *)off_1EFF323D0, a2, a4, a5);
}

double sub_1D537154C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D5371160(a1, (const char *)off_1EFF323D8, a2, a4, a5);
}

double sub_1D537155C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D5371160(a1, (const char *)off_1EFF323E0, a2, a4, a5);
}

uint64_t sub_1D537156C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D53710C0(a1, (const char *)off_1EFF323E8, a2, a4, a5);
}

double sub_1D537157C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D5371160(a1, (const char *)off_1EFF323F0, a2, a4, a5);
}

double sub_1D537158C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D5371160(a1, (const char *)off_1EFF323F8, a2, a4, a5);
}

double sub_1D537159C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D5371160(a1, (const char *)off_1EFF32400, a2, a4, a5);
}

double sub_1D53715AC(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D5371160(a1, (const char *)off_1EFF32408, a2, a4, a5);
}

uint64_t sub_1D53715BC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D53710C0(a1, (const char *)off_1EFF32410, a2, a4, a5);
}

uint64_t sub_1D53715CC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D53710C0(a1, (const char *)off_1EFF32418, a2, a4, a5);
}

uint64_t sub_1D53715DC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D53710C0(a1, (const char *)off_1EFF32420, a2, a4, a5);
}

uint64_t sub_1D53715EC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D53710C0(a1, (const char *)off_1EFF32428, a2, a4, a5);
}

uint64_t sub_1D53715FC(uint64_t a1)
{

  return a1;
}

void sub_1D5371624(uint64_t a1)
{

  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D537165C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E998DD98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5371670(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E998DD98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53716A4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D53716B4(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t j;

  if (a2 >= 2)
  {
    for (i = 1; i != a2; ++i)
    {
      if (a3)
      {
        for (j = 0; j != a3; ++j)
          *(_BYTE *)(result + a3 + j) += *(_BYTE *)(result + j);
      }
      result += a3;
    }
  }
  return result;
}

uint64_t sub_1D53716FC(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t i;

  result = sub_1D53716B4(a1, a5 * a3, a4);
  v11 = a4 * a3;
  if (a4 * a3)
  {
    v12 = 0;
    v13 = (_BYTE *)(a1 + v11 * (a5 - 1));
    do
    {
      v14 = v13;
      v15 = a2;
      for (i = a5; i; --i)
      {
        *v15++ = *v14;
        v14 -= a4 * a3;
      }
      ++v12;
      a2 += a5;
      ++v13;
    }
    while (v12 != v11);
  }
  return result;
}

_BYTE *sub_1D5371794(_BYTE *result, unint64_t a2, uint64_t a3)
{
  uint64_t i;
  _BYTE *v4;
  uint64_t j;

  if (a2 >= 3)
  {
    for (i = 2; i != a2; ++i)
    {
      v4 = result;
      for (j = a3; j; --j)
      {
        v4[2 * a3] += *v4;
        ++v4;
      }
      result += a3;
    }
  }
  return result;
}

_BYTE *sub_1D53717E0(_BYTE *a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE *result;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t i;

  result = sub_1D5371794(a1, a5 * a3, a4);
  v11 = a4 * a3;
  if (a4 * a3)
  {
    v12 = 0;
    v13 = &a1[v11 * (a5 - 1)];
    do
    {
      v14 = v13;
      v15 = a2;
      for (i = a5; i; --i)
      {
        *v15++ = *v14;
        v14 -= a4 * a3;
      }
      ++v12;
      a2 += a5;
      ++v13;
    }
    while (v12 != v11);
  }
  return result;
}

void *sub_1D5371878(uint64_t a1, int a2, unsigned int a3)
{
  void *v5;
  uint64_t v6;
  int v8;
  int v9;

  v9 = a2;
  v5 = malloc_type_malloc(a3 + 64, 0x224DEE7AuLL);
  v6 = *(_QWORD *)(a1 + 24);
  sub_1D5282F74(&v8, &v9);
  (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v6 + 40))(v6, &v8, 0);
  (*(void (**)(_QWORD, void *, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5, a3);
  return v5;
}

void sub_1D5371904(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    free(v1);
  __cxa_end_catch();
  JUMPOUT(0x1D53718ECLL);
}

void sub_1D537192C(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, Bytef *a8, uInt a9, unsigned int a10, char a11)
{
  unsigned int v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  Bytef *v25;
  uint64_t v26;
  uint64_t v27;
  Bytef *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  Bytef *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  _WORD *v38;
  _WORD *v39;
  _WORD *v40;
  void *exception;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  Bytef *v64;
  size_t size;
  _BYTE *v66;
  Bytef *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v71;
  CGRect v72;
  signed int v73;
  signed int v74;
  int v75;
  int v76;
  z_stream strm;
  CGRect v78;
  CGRect v79;

  memset(&strm.zalloc, 0, 24);
  v18 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 56))(a1);
  v19 = v18;
  v68 = (int)a1[73];
  v20 = ((int)a7 * (uint64_t)(int)v18 * v68) >> 3;
  strm.avail_in = a9;
  strm.next_in = a8;
  strm.avail_out = v20 * HIDWORD(a7);
  v64 = (Bytef *)malloc_type_malloc(v20 * (a7 >> 32), 0xF5524896uLL);
  strm.next_out = v64;
  if (inflateInit_(&strm, "1.2.12", 112) || inflate(&strm, 0) != 1 || inflateEnd(&strm))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    goto LABEL_49;
  }
  size = v20;
  v66 = malloc_type_malloc(v20, 0x7F09DEC8uLL);
  v78.origin.x = (double)(int)a3;
  v78.origin.y = (double)SHIDWORD(a3);
  v78.size.width = (double)(int)a4;
  v78.size.height = (double)SHIDWORD(a4);
  v79.origin.x = (double)(int)a6;
  v79.origin.y = (double)SHIDWORD(a6);
  v79.size.width = (double)(int)a7;
  v79.size.height = (double)SHIDWORD(a7);
  v72 = CGRectIntersection(v78, v79);
  sub_1D529EAEC(&v73, &v72.origin.x);
  sub_1D529EAEC(&v75, &v72.size.width);
  v21 = v74;
  if (v74 < (v76 + v74))
  {
    v22 = a6;
    v63 = a6 >> 32;
    v23 = v68 >> 3;
    v24 = (v68 >> 3) * v19;
    v25 = &v64[v20 * (v74 - (a6 >> 32))];
    v26 = 2 * a10;
    v58 = -(uint64_t)(int)a3;
    v59 = (uint64_t)&v66[-6 * v22 + 4];
    v61 = v24;
    v62 = a5;
    v71 = (v74 - (a3 >> 32)) * a5;
    v57 = -(uint64_t)v22;
    v27 = 2 * v19;
    do
    {
      v28 = &v64[(v21 - v63) * v20];
      v29 = a1[72];
      v69 = v21;
      switch(v29)
      {
        case 34894:
          sub_1D53717E0(v28, v66, a1[56], v19, v23);
          break;
        case 3:
          sub_1D53716FC((uint64_t)v28, v66, a1[56], v19, v23);
          break;
        case 1:
          v30 = a1[56];
          if ((_DWORD)v30)
          {
            v31 = 0;
            v32 = v25;
            v33 = v66;
            do
            {
              if ((_DWORD)v19)
              {
                v34 = 0;
                v35 = v19;
                do
                {
                  v36 = &v33[v34];
                  v36[1] = v32[v34];
                  *v36 = v32[v34 + 1];
                  v34 += v23;
                  --v35;
                }
                while (v35);
              }
              ++v31;
              v33 += v24;
              v32 += v24;
            }
            while (v31 != v30);
          }
          break;
        default:
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](exception, "RawCameraException");
LABEL_49:
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v67 = v25;
      v37 = v73;
      if (v73 < (v75 + v73))
      {
        v38 = (_WORD *)(v59 + 6 * v73);
        v39 = (_WORD *)(a2 + (v71 & 0xFFFFFFFFFFFFFFFELL) + v26 * (v58 + v73));
        v40 = &v66[v27 * (v57 + v73)];
        do
        {
          if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 88))(a1))
          {
            if ((_DWORD)v19 == 3)
            {
              LOWORD(_S0) = *(v38 - 2);
              if (a11)
              {
                __asm { FCVT            S1, H0 }
                if (_S1 <= 0.0)
                  _S0 = 0.0;
                __asm { FCVT            S0, H0 }
                *v39 = (int)_S0;
                LOWORD(_S0) = *(v38 - 1);
                __asm { FCVT            S1, H0 }
                if (_S1 <= 0.0)
                  _S0 = 0.0;
                __asm { FCVT            S0, H0 }
                v39[1] = (int)_S0;
                LOWORD(_S0) = *v38;
                __asm { FCVT            S1, H0 }
                if (_S1 <= 0.0)
                  _S0 = 0.0;
                __asm { FCVT            S0, H0 }
                v39[2] = (int)_S0;
              }
              else
              {
                *v39 = LOWORD(_S0);
                v39[1] = *(v38 - 1);
                v39[2] = *v38;
                if (qword_1EFF11DC8 != -1)
                  dispatch_once(&qword_1EFF11DC8, &unk_1E998DEF8);
                v39[3] = xmmword_1EFF11DD0[0xFFFF];
              }
              goto LABEL_43;
            }
            LOWORD(_S9) = *v40;
            if (a11)
            {
LABEL_34:
              __asm { FCVT            S0, H9 }
              if (_S0 <= 0.0)
                _S0 = 0.0;
              else
                _S0 = _S9;
              __asm { FCVT            S0, H0 }
              *v39 = (int)_S0;
              goto LABEL_43;
            }
            if (qword_1EFF11DC8 != -1)
LABEL_45:
              dispatch_once(&qword_1EFF11DC8, &unk_1E998DEF8);
          }
          else
          {
            LOWORD(_S9) = *v40;
            if (a11)
              goto LABEL_34;
            if (qword_1EFF11DC8 != -1)
              goto LABEL_45;
          }
          __asm { FCVT            S0, H9 }
          *v39 = xmmword_1EFF11DD0[_S0];
LABEL_43:
          ++v37;
          v38 += 3;
          v39 = (_WORD *)((char *)v39 + v26);
          v40 = (_WORD *)((char *)v40 + v27);
        }
        while (v37 < v75 + (uint64_t)v73);
      }
      v21 = v69 + 1;
      v20 = size;
      v25 = &v67[size];
      v24 = v61;
      v71 += v62;
    }
    while (v69 + 1 < (unint64_t)(v76 + (uint64_t)v74));
  }
  free(v64);
  free(v66);
}

void sub_1D5371E80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D5371EA0(os_signpost_id_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  NSObject *v6;
  NSObject *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  Bytef *v20;
  unsigned int v21;
  void *exception;
  void *v23;
  unsigned int v24;
  void (**v25)(_QWORD);
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint8_t buf[8];
  _DWORD v34[4];
  _QWORD v35[5];

  sub_1D52EB058();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (a1 + 1 >= 2 && os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v7, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CDNGDeflateUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v35[0] = MEMORY[0x1E0C809B0];
  v35[1] = 3221225472;
  v35[2] = sub_1D5372314;
  v35[3] = &unk_1E996F870;
  v35[4] = a1;
  v25 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v35);
  if ((*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 56))(a1) == 3)
    v8 = 4;
  else
    v8 = 1;
  v24 = v8;
  v9 = *(_DWORD *)(a1 + 48);
  v28 = *(_DWORD *)(a1 + 44);
  v10 = *(_DWORD *)(a1 + 224);
  v11 = *(_DWORD *)(a1 + 228);
  *(_QWORD *)buf = (uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 2;
  sub_1D528304C(&v31, (unint64_t *)buf);
  v12 = v31;
  if ((_DWORD)v31 == 1
    || *(_DWORD *)(a1 + 216)
    || (*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 224))(a1) == 2)
  {
    sub_1D530CC78(a1, a2, (int *)a3, a4);
  }
  else
  {
    v13 = *(_DWORD *)(a1 + 288);
    if (v13 != 1 && v13 != 3 && v13 != 34894
      || v28 >> 5 >= 0x271
      || v9 >> 5 >= 0x271
      || v10 >> 5 >= 0x271
      || v11 >> 5 >= 0x271
      || v12 >> 5 >= 0x271)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v14 = ((v9 + v11 - 1) / v11) >> (*(_DWORD *)(a1 + 216) != 0);
    v15 = (v28 + v10 - 1) / v10;
    if (v14 * v15 != (_DWORD)v12)
    {
      v23 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v23, "RawCameraException");
      __cxa_throw(v23, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    *(_QWORD *)buf = 0;
    sub_1D5282DF0(v34, v15 * v10, v14 * v11);
    v31 = 0;
    sub_1D5282DF0(&v32, v28, v9);
    if ((_DWORD)v12)
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 4 * v12;
      do
      {
        sub_1D5282DF0(&v29, v17, v18);
        sub_1D5282DF0(&v30, v10, v11);
        if (sub_1D53ADDB8((int *)&v29, (int *)a3))
        {
          v20 = (Bytef *)sub_1D5371878(a1, *(_DWORD *)(*(_QWORD *)(a1 + 232) + v16), *(_DWORD *)(*(_QWORD *)(a1 + 256) + v16));
          if (v20)
          {
            sub_1D537192C((_DWORD *)a1, a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), a4, v29, v30, v20, *(_DWORD *)(*(_QWORD *)(a1 + 256) + v16), v24, 0);
            free(v20);
          }
        }
        if (v17 + v10 >= v28)
          v21 = v11;
        else
          v21 = 0;
        v18 += v21;
        if (v17 + v10 >= v28)
          v17 = 0;
        else
          v17 += v10;
        v16 += 4;
      }
      while (v19 != v16);
    }
  }
  v25[2](v25);

}

void sub_1D53722A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void (**a11)(_QWORD))
{
  void *v11;

  __cxa_free_exception(v11);
  a11[2](a11);

  _Unwind_Resume(a1);
}

void sub_1D5372314(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGDeflateUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D5372398(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  dispatch_group_t v13;
  dispatch_queue_t v14;
  int v15;
  int v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  os_signpost_id_t v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  int v27;
  void *exception;
  void *v29;
  void (**v30)(_QWORD);
  int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  dispatch_queue_t v36;
  NSObject *queue;
  _QWORD block[4];
  NSObject *v39;
  NSObject *v40;
  os_signpost_id_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  uint8_t buf[8];
  unsigned int v52;
  _QWORD v53[6];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CDNGDeflateUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v4 = MEMORY[0x1E0C809B0];
  v53[0] = MEMORY[0x1E0C809B0];
  v53[1] = 3221225472;
  v53[2] = sub_1D5372818;
  v53[3] = &unk_1E996F870;
  v53[4] = a1;
  v5 = MEMORY[0x1D82721B4](v53);
  v6 = (*(uint64_t (**)(os_signpost_id_t))(*(_QWORD *)a1 + 56))(a1);
  v8 = *(_DWORD *)(a1 + 44);
  v7 = *(_DWORD *)(a1 + 48);
  v10 = *(unsigned int *)(a1 + 224);
  v9 = *(_DWORD *)(a1 + 228);
  *(_QWORD *)buf = (uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 2;
  sub_1D528304C(&v52, (unint64_t *)buf);
  v11 = v52;
  v12 = *(_DWORD *)(a1 + 288);
  if (v12 != 1 && v12 != 3 && v12 != 34894
    || v8 >> 5 >= 0x271
    || v7 >> 5 >= 0x271
    || v10 >> 5 >= 0x271
    || v9 >> 5 >= 0x271
    || v52 >> 5 >= 0x271)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if ((((v7 + v9 - 1) / v9) >> (*(_DWORD *)(a1 + 216) != 0)) * ((v8 + v10 - 1) / v10) != v52)
  {
    v29 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v29, "RawCameraException");
    __cxa_throw(v29, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v35 = v8;
  v30 = (void (**)(_QWORD))v5;
  v13 = dispatch_group_create();
  v14 = dispatch_queue_create("Deflate DNG Unpacker I/O Queue", 0);
  v33 = v7;
  v34 = v6;
  v36 = dispatch_queue_create("Deflate DNG Unpacker Queue", MEMORY[0x1E0C80D50]);
  queue = v14;
  v32 = sub_1D530B618(a1);
  if ((_DWORD)v11)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v31 = v9;
    do
    {
      block[0] = v4;
      block[1] = 3221225472;
      block[2] = sub_1D537289C;
      block[3] = &unk_1E9972670;
      v41 = a1;
      v43 = v16;
      v44 = v17;
      v45 = v10;
      v46 = v9;
      v47 = v15;
      v18 = v13;
      v19 = v10;
      v20 = v13;
      v21 = v11;
      v22 = v4;
      v23 = a1;
      v24 = v18;
      v39 = v18;
      v25 = v36;
      v48 = v35;
      v49 = v33;
      v40 = v25;
      v42 = v32;
      v50 = v34;
      v26 = v24;
      a1 = v23;
      v4 = v22;
      v11 = v21;
      v13 = v20;
      v10 = v19;
      v9 = v31;
      dispatch_group_async(v26, queue, block);
      if (v16 + (int)v10 >= v35)
        v27 = v31;
      else
        v27 = 0;
      v17 += v27;
      if (v16 + (int)v10 >= v35)
        v16 = 0;
      else
        v16 += v10;

      ++v15;
    }
    while ((_DWORD)v11 != v15);
  }
  dispatch_group_wait(v13, 0xFFFFFFFFFFFFFFFFLL);

  v30[2](v30);
}

void sub_1D53727A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void (**v10)(_QWORD);
  void *v11;

  __cxa_free_exception(v11);
  v10[2](v10);

  _Unwind_Resume(a1);
}

void sub_1D5372818(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGDeflateUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D537289C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  _QWORD block[8];
  __int128 v11;
  int v12;
  int v13;
  __int128 v14;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_DWORD *)(a1 + 72);
  v4 = *(_DWORD *)(a1 + 76);
  sub_1D5282DF0(&v14, *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 68));
  sub_1D5282DF0((_DWORD *)&v14 + 2, v3, v4);
  v5 = sub_1D5371878(v2, *(_DWORD *)(*(_QWORD *)(v2 + 232) + 4 * *(unsigned int *)(a1 + 80)), *(_DWORD *)(*(_QWORD *)(v2 + 256) + 4 * *(unsigned int *)(a1 + 80)));
  if (v5)
  {
    v7 = *(NSObject **)(a1 + 32);
    v6 = *(NSObject **)(a1 + 40);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D537298C;
    block[3] = &unk_1E996F8B0;
    block[7] = *(_QWORD *)(a1 + 84);
    v8 = *(_QWORD *)(a1 + 56);
    block[4] = v2;
    block[5] = v8;
    v11 = v14;
    block[6] = v5;
    v9 = *(_DWORD *)(a1 + 92);
    v12 = *(_DWORD *)(a1 + 80);
    v13 = v9;
    dispatch_group_async(v7, v6, block);
  }
  else
  {
    puts("not readtile?");
  }
}

void sub_1D537298C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 56);
  v4 = 6 * v3;
  sub_1D5282DF0(&v5, v3, *(_DWORD *)(a1 + 60));
  sub_1D537192C((_DWORD *)v2, *(_QWORD *)(a1 + 40), 0, v5, v4, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(Bytef **)(a1 + 48), *(_DWORD *)(*(_QWORD *)(v2 + 256) + 4 * *(unsigned int *)(a1 + 80)), *(_DWORD *)(a1 + 84), 1);
  free(*(void **)(a1 + 48));
}

char *sub_1D5372A10(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  char *v7;
  char *result;

  *(_DWORD *)(a1 + 224) = a2;
  *(_DWORD *)(a1 + 228) = a3;
  v7 = (char *)(a1 + 232);
  if (v7 != (char *)a4)
    sub_1D5282A44(v7, *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  result = (char *)(a1 + 256);
  if (a1 + 256 != a5)
    return sub_1D5282A44(result, *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return result;
}

unint64_t sub_1D5372A74(int *a1)
{
  uint64_t v2;
  unint64_t result;
  uint64_t v4;

  v2 = (2 * a1[17]) + (uint64_t)a1[70];
  result = 2 * (*(unsigned int (**)(int *))(*(_QWORD *)a1 + 40))(a1) * v2;
  if ((result & 0x1E) != 0)
  {
    v4 = (2 * a1[17]) + (uint64_t)a1[15];
    return (2 * v4 * (*(unsigned int (**)(int *))(*(_QWORD *)a1 + 40))(a1) + 31) & 0xFFFFFFFFFFFFFFE0;
  }
  return result;
}

_QWORD *sub_1D5372AF4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_1E998DDE8;
  v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = v3;
    operator delete(v3);
  }
  *a1 = &unk_1E998DB60;
  v4 = (void *)a1[24];
  if (v4)
  {
    a1[25] = v4;
    operator delete(v4);
  }
  return sub_1D5282F0C(a1);
}

void sub_1D5372B60(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_1E998DDE8;
  v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = v3;
    operator delete(v3);
  }
  *a1 = &unk_1E998DB60;
  v4 = (void *)a1[24];
  if (v4)
  {
    a1[25] = v4;
    operator delete(v4);
  }
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5372BE0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 296);
}

int64x2_t sub_1D5372BE8()
{
  uint64_t v0;
  int64x2_t result;
  int64x2_t v2;
  int64x2_t v3;
  float32x4_t v4;
  int64x2_t v5;
  int64x2_t v6;

  v0 = 0;
  result = (int64x2_t)xmmword_1D5447F80;
  v2 = (int64x2_t)xmmword_1D5447F90;
  v3 = (int64x2_t)xmmword_1D5447FA0;
  v4 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  v5 = (int64x2_t)xmmword_1D5447F70;
  v6 = vdupq_n_s64(8uLL);
  do
  {
    xmmword_1EFF11DD0[v0] = (__int128)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vdivq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v5)), vcvtq_f64_u64((uint64x2_t)v3)), v4)), vdivq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v2)), vcvtq_f64_u64((uint64x2_t)result)), v4));
    v2 = vaddq_s64(v2, v6);
    v3 = vaddq_s64(v3, v6);
    v5 = vaddq_s64(v5, v6);
    result = vaddq_s64(result, v6);
    ++v0;
  }
  while (v0 != 0x2000);
  return result;
}

id sub_1D5372C7C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[11];
  _QWORD v43[2];

  v43[1] = *MEMORY[0x1E0C80C00];
  v5 = *MEMORY[0x1E0CBD388];
  v34 = *MEMORY[0x1E0CBD368];
  v35 = v5;
  v42[0] = MEMORY[0x1E0C9AAB0];
  v42[1] = CFSTR("com.epson.raw-image");
  v6 = *MEMORY[0x1E0CBD380];
  v36 = *MEMORY[0x1E0CBD348];
  v42[2] = CFSTR(".erf.");
  v42[3] = &unk_1E99CB430;
  v42[4] = &unk_1E99CB448;
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], a2, (uint64_t)sub_1D5280D4C, a4, a5, v34, v35, v36, v6, *MEMORY[0x1E0CBD370], *MEMORY[0x1E0CBD378]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v42[5] = v7;
  v37 = *MEMORY[0x1E0CBD330];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v8, (uint64_t)sub_1D5372F30, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v42[6] = v11;
  v38 = *MEMORY[0x1E0CBD350];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v12, (uint64_t)sub_1D5372F3C, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v42[7] = v15;
  v39 = *MEMORY[0x1E0CBD338];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v16, (uint64_t)sub_1D52E8DA4, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v42[8] = v19;
  v40 = *MEMORY[0x1E0CBD358];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v20, (uint64_t)sub_1D5372F48, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v42[9] = v23;
  v41 = *MEMORY[0x1E0CBD360];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v24, (uint64_t)sub_1D5372F54, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v42[10] = v27;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v28, (uint64_t)v42, (uint64_t)&v34, 11);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v43[0] = v29;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v30, (uint64_t)v43, 1, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  return v32;
}

void sub_1D5372ED0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1D5372F30(const void *a1, uint64_t a2, uint64_t a3)
{
  sub_1D52E7A20(a1, a2, a3, &unk_1E998DF18);
}

uint64_t sub_1D5372F3C(os_signpost_id_t a1)
{
  return sub_1D52E8C40(a1);
}

uint64_t sub_1D5372F48(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1D52E7438(a1, a2, a3, &unk_1E998DF18);
}

uint64_t sub_1D5372F54(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1D52E9A7C(a1, a2, a3, &unk_1E998DF18);
}

void sub_1D5372F60(uint64_t *a1@<X1>, char a2@<W2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X8>)
{
  __int128 v8;
  id v9;
  id v10;
  char v11;

  v11 = a2;
  v10 = a3;
  v9 = a4;
  sub_1D5374178(a1, &v11, &v10, &v9, &v8);
  *a5 = v8;

}

void sub_1D5372FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D5372FF8(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v3;
  _BOOL4 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *p_p;
  int v10;
  int v11;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p;
  uint64_t v26;
  uint64_t v27;

  __p = 0;
  v26 = 0;
  v27 = 0;
  sub_1D52917E4(a1, &v23);
  v2 = v23;
  v21 = 8;
  sub_1D5285A24(&v22, &v21);
  v3 = sub_1D52849DC(v2, &v22, (uint64_t)&__p);
  v4 = v3;
  v5 = v24;
  if (!v24)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (v7)
  {
LABEL_5:
    if (v3)
      goto LABEL_6;
LABEL_28:
    v19 = 0;
    goto LABEL_29;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v4)
    goto LABEL_28;
LABEL_6:
  v8 = HIBYTE(v27);
  if (v27 < 0)
    v8 = v26;
  if (v8 != 5)
    goto LABEL_28;
  p_p = (unsigned __int8 *)&__p;
  if (v27 < 0)
    p_p = (unsigned __int8 *)__p;
  v10 = *(_DWORD *)p_p;
  v11 = p_p[4];
  if (v10 != 1330860101 || v11 != 78)
    goto LABEL_28;
  sub_1D52917E4(a1, &v23);
  sub_1D528479C(v23);
  v13 = v24;
  if (v24)
  {
    v14 = (unint64_t *)&v24->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_1D52917E4(a1, &v23);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23);
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 160))(a1, &v22);
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = 1;
LABEL_29:
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
  return v19;
}

void sub_1D53731C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D5373200(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v23;
  void *v24;
  std::__shared_weak_count *size;
  unint64_t *v26;
  unint64_t v27;
  unsigned int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  unsigned int v37;
  std::string __p;
  std::string __str;
  std::string *p_p;
  __int128 *__src;
  _QWORD v42[2];

  v42[1] = *MEMORY[0x1E0C80C00];
  nullsub_6();
  v6 = *a3;
  if (v6 <= 0x27F)
  {
    if (v6 == 523)
    {
      if (a3[1] == 4 && *((_DWORD *)a3 + 1) == 1)
        *(_DWORD *)(a1 + 1208) = *((_DWORD *)a3 + 2);
    }
    else if (v6 == 524)
    {
      if (a3[1] == 4 && *((_DWORD *)a3 + 1) == 1)
        *(_DWORD *)(a1 + 1212) = *((_DWORD *)a3 + 2);
    }
    else if (v6 == 525 && a3[1] == 2 && *((_DWORD *)a3 + 1) <= 0xDu)
    {
      memset(&__str, 0, sizeof(__str));
      if (sub_1D52ADD1C(a1, (uint64_t)a3, &__str, 1))
        std::string::operator=((std::string *)(a1 + 1184), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  else if (*a3 > 0x400u)
  {
    if (v6 == 1025)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) == 0
        && a3[1] == 4
        && *((_DWORD *)a3 + 1) == 4)
      {
        sub_1D52917E4(a1, &__p);
        sub_1D52A75D8((uint64_t)a3, (uint64_t *)&__p, (void **)&__str.__r_.__value_.__l.__data_);
        __src = (__int128 *)a2;
        v23 = sub_1D52B3E7C((uint64_t **)(a1 + 264), (void **)a2, (uint64_t)&unk_1D544A5C4, &__src);
        v24 = (void *)v23[7];
        if (v24)
        {
          v23[8] = (uint64_t)v24;
          operator delete(v24);
          v23[7] = 0;
          v23[8] = 0;
          v23[9] = 0;
        }
        *(std::string *)(v23 + 7) = __str;
        memset(&__str, 0, sizeof(__str));
        size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v26 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
      }
    }
    else if (v6 == 3712
           && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) == 0
           && a3[1] == 7
           && *((_DWORD *)a3 + 1) == 256)
    {
      sub_1D52917E4(a1, &__p);
      LODWORD(p_p) = *((_DWORD *)a3 + 2) + 48;
      sub_1D5282F74((int *)&__src, (int *)&p_p);
      sub_1D5285164((uint64_t *)&__str, (uint64_t *)&__p, (uint64_t)&__src, 0);
      v15 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v16 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      if (*(char *)(a2 + 23) < 0)
        sub_1D5290130(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
      else
        __p = *(std::string *)a2;
      std::string::append(&__p, ":WhitePoint", 0xBuLL);
      sub_1D52917E4(a1, &__src);
      v28 = sub_1D528479C((uint64_t)__src);
      v29 = (std::__shared_weak_count *)v42[0];
      if (v42[0])
      {
        v30 = (unint64_t *)(v42[0] + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      sub_1D52917E4(a1, &__src);
      v32 = sub_1D528479C((uint64_t)__src);
      v33 = (std::__shared_weak_count *)v42[0];
      if (v42[0])
      {
        v34 = (unint64_t *)(v42[0] + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      __src = (__int128 *)(v28 | 0x10000000000);
      LODWORD(v42[0]) = v32;
      p_p = &__p;
      v36 = sub_1D52B3E7C((uint64_t **)(a1 + 120), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
      sub_1D5282A44((char *)v36 + 56, (char *)&__src, (uint64_t)v42 + 4, 3uLL);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_1D5285200((uint64_t *)&__str);
    }
  }
  else if (v6 == 640)
  {
    if (a3[1] == 1)
    {
      sub_1D52917E4(a1, &__str);
      v18 = sub_1D52845F4((uint64_t)__str.__r_.__value_.__l.__data_);
      LODWORD(__src) = *((_DWORD *)a3 + 2);
      LODWORD(__p.__r_.__value_.__l.__data_) = v18;
      *(_QWORD *)(a1 + 1232) = *sub_1D5294254((int *)&__p, (unsigned int *)&__src);
      v19 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v20 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      *(_DWORD *)(a1 + 1240) = *((_DWORD *)a3 + 1);
    }
  }
  else if (v6 == 1024 && a3[1] == 7 && *((_DWORD *)a3 + 1) == 8)
  {
    sub_1D52917E4(a1, &__p);
    LODWORD(p_p) = sub_1D52A5CC8((uint64_t)a3);
    sub_1D5285B08((int *)&__src, (int *)&p_p);
    sub_1D5285164((uint64_t *)&__str, (uint64_t *)&__p, (uint64_t)&__src, 0);
    v7 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v8 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    sub_1D52917E4(a1, &__src);
    v10 = __src;
    v37 = 4;
    sub_1D5285A24(&p_p, &v37);
    sub_1D5284D2C(v10, (unsigned int *)&p_p, (uint64_t *)&__p);
    v11 = (std::__shared_weak_count *)v42[0];
    if (v42[0])
    {
      v12 = (unint64_t *)(v42[0] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (void *)__p.__r_.__value_.__r.__words[0];
    *(uint32x4_t *)(a1 + 1216) = vmovl_u16(*(uint16x4_t *)__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v14;
    operator delete(v14);
    sub_1D5285200((uint64_t *)&__str);
  }
}

void sub_1D537379C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_1D5285200((uint64_t *)&a18);
  _Unwind_Resume(a1);
}

void sub_1D5373878(uint64_t a1@<X0>, char **a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  __int128 v9;

  sub_1D52B08D0(a1, (uint64_t)a2);
  sub_1D528594C(&v8, (uint64_t *)(a1 + 1232));
  v7 = *(_DWORD *)(a1 + 1240);
  sub_1D5291E58(a1, &v8, &v7, 1, &v9);
  if ((_QWORD)v9)
    sub_1D52B0A7C(a2, &v9);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1D537391C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  sub_1D5282E44((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D537394C(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  sub_1D52850A0(__p, "IFD0:SUBIFD0");
  v2 = sub_1D52B0BBC(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D53739A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D53739C0(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  sub_1D52850A0(__p, "IFD0:SUBIFD0");
  v2 = sub_1D52B0C2C(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D5373A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1D5373A34(uint64_t a1)
{
  unint64_t v2;
  void *__p[2];
  char v5;

  sub_1D52850A0(__p, "IFD0:SUBIFD0");
  v2 = sub_1D52B0D58(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D5373A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D5373AA8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 1216);
}

unint64_t sub_1D5373AB8(_DWORD *a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  void *exception;

  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 448))(a1);
  v4 = a1[302];
  if (v2 < v4 || (v5 = a1[303], v3 < v5))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v6 = v2 - v4;
  if (v2 < v4)
    ++v6;
  v7 = (v6 >> 1);
  v8 = v3 - v5;
  if (v3 < v5)
    ++v8;
  return v7 | ((unint64_t)(v8 >> 1) << 32);
}

void sub_1D5373B4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D5373B60(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  std::string __p;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t *v45;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_1D52850A0(&__p, "erf");
  v4 = a2[2];
  v5 = a2[1];
  if (v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a2) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a2) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v45 = a2 + 2;
    if (v10)
      v11 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v10);
    else
      v11 = 0;
    v12 = &v11[24 * v7];
    v41 = v11;
    v42 = v12;
    v44 = &v11[24 * v10];
    v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v12 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v12 = v13;
    memset(&__p, 0, sizeof(__p));
    v43 = v12 + 24;
    sub_1D5293D58(a2, &v41);
    v14 = a2[1];
    sub_1D5293F24((uint64_t)&v41);
    v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v14;
    if (v15 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v5 = v6;
    a2[1] = v5 + 24;
  }
  sub_1D52850A0(&__p, "epson");
  v17 = a2[1];
  v16 = a2[2];
  if (v17 >= v16)
  {
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a2) >> 3);
    v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a2) >> 3);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v20;
    v45 = a2 + 2;
    if (v22)
      v23 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v22);
    else
      v23 = 0;
    v24 = &v23[24 * v19];
    v41 = v23;
    v42 = v24;
    v44 = &v23[24 * v22];
    v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v24 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v24 = v25;
    memset(&__p, 0, sizeof(__p));
    v43 = v24 + 24;
    sub_1D5293D58(a2, &v41);
    v26 = a2[1];
    sub_1D5293F24((uint64_t)&v41);
    v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v26;
    if (v27 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v17 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v17 = v18;
    a2[1] = v17 + 24;
  }
  sub_1D5293780(a1, &__p);
  v29 = a2[1];
  v28 = a2[2];
  if (v29 >= v28)
  {
    v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *a2) >> 3);
    v32 = v31 + 1;
    if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a2) >> 3);
    if (2 * v33 > v32)
      v32 = 2 * v33;
    if (v33 >= 0x555555555555555)
      v34 = 0xAAAAAAAAAAAAAAALL;
    else
      v34 = v32;
    v45 = a2 + 2;
    if (v34)
      v35 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v34);
    else
      v35 = 0;
    v36 = &v35[24 * v31];
    v41 = v35;
    v42 = v36;
    v44 = &v35[24 * v34];
    v37 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v36 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v36 = v37;
    memset(&__p, 0, sizeof(__p));
    v43 = v36 + 24;
    sub_1D5293D58(a2, &v41);
    v38 = a2[1];
    sub_1D5293F24((uint64_t)&v41);
    v39 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v38;
    if (v39 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v29 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v29 = v30;
    a2[1] = v29 + 24;
  }
}

void sub_1D5373EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1D5293F24((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_1D5293CCC((void ***)&__p);
  _Unwind_Resume(a1);
}

id sub_1D5373F0C()
{
  void *v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD v16[14];
  _QWORD v17[15];

  v17[14] = *MEMORY[0x1E0C80C00];
  sub_1D52A947C();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend_mutableCopy(v0, v1, v2, v3, v4);

  v16[0] = &unk_1E99CB460;
  v16[1] = &unk_1E99CB478;
  v17[0] = &unk_1E99D0CA0;
  v17[1] = &unk_1E99D0CC8;
  v16[2] = &unk_1E99CB490;
  v16[3] = &unk_1E99CB4A8;
  v17[2] = &unk_1E99D0CF0;
  v17[3] = &unk_1E99D0D18;
  v16[4] = &unk_1E99CB4C0;
  v16[5] = &unk_1E99CB4D8;
  v17[4] = &unk_1E99D0D40;
  v17[5] = &unk_1E99D0D68;
  v16[6] = &unk_1E99CB4F0;
  v16[7] = &unk_1E99CB508;
  v17[6] = &unk_1E99D0D90;
  v17[7] = &unk_1E99D0DB8;
  v16[8] = &unk_1E99CB520;
  v16[9] = &unk_1E99CB538;
  v17[8] = &unk_1E99D0DE0;
  v17[9] = &unk_1E99D0E08;
  v16[10] = &unk_1E99CB550;
  v16[11] = &unk_1E99CB568;
  v17[10] = &unk_1E99D0E30;
  v17[11] = &unk_1E99D0E58;
  v16[12] = &unk_1E99CB580;
  v16[13] = &unk_1E99CB598;
  v17[12] = &unk_1E99D0E80;
  v17[13] = &unk_1E99D0EA8;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v6, (uint64_t)v17, (uint64_t)v16, 14);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addEntriesFromDictionary_(v5, v8, (uint64_t)v7, v9, v10);

  objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E0C99D80], v11, (uint64_t)v5, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

void sub_1D53740DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1D5374118(uint64_t a1)
{
  sub_1D537413C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D537413C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E998DF48;
  if (*(char *)(a1 + 1207) < 0)
    operator delete(*(void **)(a1 + 1184));
  return sub_1D52B2190(a1);
}

void sub_1D5374178(uint64_t *a1@<X1>, char *a2@<X2>, void **a3@<X3>, void **a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x4F8uLL);
  sub_1D53741F8((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D53741E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53741F8(uint64_t a1, uint64_t *a2, char *a3, void **a4, void **a5)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E998E280;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D52A7E98(a1 + 24, a2, *a3, *a4, *a5);
  *(_QWORD *)(a1 + 24) = off_1E998DF48;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1252) = 0u;
  return a1;
}

void sub_1D5374264(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5374278(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E998E280;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D537428C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E998E280;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53742C0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_1D5374344(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5374460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5374510(uint64_t a1, int a2, uint64_t *a3)
{
  *(_QWORD *)sub_1D544098C(a1, a2) = &off_1E998E2D0;
  *(_DWORD *)(a1 + 12) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 16) = sub_1D52847F8(*a3);
  return a1;
}

id sub_1D5374560(uint64_t a1)
{
  RAWOpcodeFixBadPixelsConstant *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[2];
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v2 = [RAWOpcodeFixBadPixelsConstant alloc];
  v18[0] = CFSTR("Constant");
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v3, *(unsigned int *)(a1 + 12), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v18[1] = CFSTR("BayerPhase");
  v19[0] = v6;
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v7, *(unsigned int *)(a1 + 16), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v19[1] = v10;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v11, (uint64_t)v19, (uint64_t)v18, 2);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend_initWithArguments_(v2, v13, (uint64_t)v12, v14, v15);

  return v16;
}

void sub_1D5374650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D5374680()
{
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5374694()
{
  return 4;
}

uint64_t sub_1D537469C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  pthread_mutex_t *v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float *v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  signed int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int *v40;
  uint64_t v41;
  float32x2_t *v43;
  __int32 v44;
  unsigned int v46;
  unsigned int v47;
  int32x2_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  int v58;
  int v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  unsigned int v67;
  __int16 v69;
  __int16 v70;
  uint64_t v71;
  size_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  __int32 v76;
  __int32 v77;
  __int32 v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  int64x2_t v83;
  const double *v84;
  int64x2_t v85;
  uint64_t v86;
  const double *v87;
  unsigned __int128 v88;
  unsigned __int128 v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  pthread_mutex_t *v93;
  pthread_mutex_t *v94;
  unsigned int *v95;
  unsigned int v96;
  pthread_mutex_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  int v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  __int8 v111;
  unsigned int *v112;
  unsigned int v113;
  char *v114;
  uint64_t v118;
  _QWORD *v119;
  unsigned int *v120;
  unsigned int v121;
  pthread_mutex_t *v122;
  unsigned int *v123;
  uint64_t v124;
  _QWORD *v125;
  __int32 v126;
  __int32 v127;
  __int32 v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t i;
  int v133;
  int v134;
  float v135;
  float v136;
  BOOL v137;
  uint64_t v138;
  double v139;
  int v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  float32x2_t v153;
  float v154;
  double v155;
  double v156;
  double v157;
  unsigned int v158;
  double v159;
  double v160;
  unsigned int v161;
  uint64_t j;
  int v163;
  uint64_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  uint16x8_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int16x8_t *v174;
  char *v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  float v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  int32x2_t v191;
  int32x2_t v192;
  _WORD *v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  int v205;
  float v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  float v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  float v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  uint64_t v222;
  _WORD *v223;
  uint64_t v224;
  uint64_t v225;
  float v226;
  uint64_t k;
  uint64_t v228;
  double v229;
  uint64_t v230;
  int v231;
  int v232;
  int v233;
  int v234;
  uint64_t (*v235)(_DWORD *, _QWORD *);
  char *v236;
  int v237;
  int v238;
  uint64_t v239;
  __int128 v240;
  int v241;
  unsigned int v242;
  int v243;
  int v244;
  int v245;
  unsigned int v246;
  char *v247;
  int v248;
  unsigned int v249;
  uint64_t v250;
  int v251;
  void *(*v252)(uint64_t, _QWORD *);
  int v253;
  int v254;
  int v255;
  char *v256;
  int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  unsigned int v265;
  int v266;
  unsigned int v267;
  float v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  float v274;
  unsigned int v275;
  unsigned int v276;
  float v277;
  signed int v278;
  int v279;
  signed int v280;
  float v281;
  unsigned int v282;
  unsigned int v283;
  int v284;
  int v285;
  signed int v286;
  signed int v287;
  uint64_t v288;
  int v289;
  double v290;
  unint64_t (*v291)(unint64_t, _QWORD *);
  int v292;
  unsigned int v293;
  int32x2_t v294;
  char *v295;
  float32x2_t v296;
  int v297;
  uint64_t v298;
  void *v299;
  unsigned int v300;
  int v301;
  char *v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  int32x4_t v306;
  int32x4_t v307;
  uint16x8_t *v308;
  uint16x8_t v309;
  int32x4_t v310;
  int32x4_t v311;
  int32x4_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int32x4_t *v315;
  uint64_t v316;
  unsigned int *v317;
  uint64_t v318;
  unsigned __int16 v319;
  float v320;
  float v321;
  BOOL v322;
  float v323;
  float v324;
  unsigned int v325;
  char v326;
  float v328;
  float v329;
  unsigned int v330;
  int v331;
  float v333;
  int16x4_t v334;
  int16x4_t v335;
  int16x4_t v336;
  int16x4_t v337;
  unsigned int v338;
  uint64_t v339;
  int v340;
  int v341;
  uint64_t v342;
  double v343;
  double v344;
  signed int v345;
  double v346;
  int v347;
  uint64_t v348;
  int v349;
  int v350;
  uint64_t v351;
  int64_t v352;
  unsigned int v353;
  unsigned int v354;
  unsigned int v355;
  uint64_t v356;
  unint64_t v357;
  int16x8_t v358;
  unint64_t v359;
  int16x8_t *v360;
  float64x2_t v361;
  int v362;
  float32x2_t v363;
  __int32 v364;
  float32x2_t *v365;
  int v366;
  int v367;
  int32x2_t v368;
  int v369;
  int32x2_t v370;
  int v371;
  int v372;
  int32x2_t v373;
  unsigned int v374;
  unsigned int v375;
  unsigned int v376;
  unsigned int v377;
  int v378;
  int v379;
  int v380;
  int v381;
  unsigned __int32 v382;
  uint64_t (*v383)(uint64_t, _QWORD *);
  uint64_t (*v384)(uint64_t, _QWORD *);
  uint64_t (*v385)(uint64_t, _QWORD *);
  uint64_t sig;
  long double v387;
  uint64_t v388;
  double v389;
  float v390;
  float v391;
  float v392;
  int v393;
  uint64_t v394;
  unint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t v402;
  char v403;
  unint64_t v404;
  unint64_t v405;
  char v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  int v416;
  uint64_t v417;
  int v418;
  signed int v419;
  signed int v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  int8x16_t v428;
  int64x2_t v429;
  int8x16_t v430;
  unint64_t v431;
  unint64_t v432;
  unint64_t v433;
  unsigned int v434;
  unsigned int v435;
  unint64_t v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  unsigned int v440;
  unsigned int v441;
  unint64_t v442;
  unint64_t v443;
  int32x2_t v444;
  int64x2_t v445;
  int64x2_t v446;
  int32x2_t v447;
  int8x16_t v448;
  unint64_t v449;
  unint64_t v450;
  unint64_t v451;
  int64x2_t v452;
  int8x16_t v453;
  int64x2_t v454;
  int v455;
  uint64_t v456;
  unint64_t v457;
  int64x2_t v458;
  unint64_t v459;
  unint64_t v460;
  int8x16_t v461;
  unint64_t v462;
  int32x4_t v463;
  unint64_t v464;
  uint64_t v465;
  int64x2_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  int64x2_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  unint64_t v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t v479;
  int64x2_t v480;
  int64x2_t v481;
  int8x16_t v482;
  unint64_t v483;
  unint64_t v484;
  int32x4_t v485;
  unint64_t v486;
  unint64_t v487;
  unint64_t v488;
  unint64_t v489;
  uint64_t v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t v495;
  unint64_t v496;
  unint64_t v497;
  unint64_t v498;
  unint64_t v499;
  unint64_t v500;
  unint64_t v501;
  unint64_t v502;
  unint64_t v503;
  unint64_t v504;
  unint64_t v505;
  int v506;
  uint64_t v507;
  unint64_t v508;
  unint64_t v509;
  unint64_t v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  _BOOL4 v516;
  signed int v517;
  unsigned int v518;
  unsigned int v519;
  unsigned int v520;
  pthread_mutex_t *v521;
  unsigned int *v522;
  unsigned int v523;
  uint64_t v524;
  double v525;
  float v526;
  float v527;
  float v528;
  int v529;
  uint64_t v530;
  double v531;
  float v532;
  float v533;
  float v534;
  float *v535;
  float *v536;
  float v537;
  float v538;
  float v539;
  float v540;
  float v541;
  int v542;
  float v543;
  int v544;
  int v545;
  int v546;
  uint64_t v547;
  float v548;
  uint64_t v549;
  float v550;
  uint64_t v551;
  float v552;
  float v553;
  uint64_t v554;
  float v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  _WORD *v560;
  uint64_t v561;
  _WORD *v562;
  uint64_t v563;
  _WORD *v564;
  uint64_t v565;
  float v566;
  uint64_t v567;
  float v568;
  uint64_t v569;
  uint16x8_t *v570;
  unint64_t v571;
  unsigned int v572;
  unsigned int v573;
  unsigned int v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  char v578;
  uint64_t v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t v582;
  float32x2_t v583;
  uint64_t v584;
  float32x2_t v585;
  char v586;
  float v587;
  uint64_t v588;
  float v589;
  char v590;
  float v591;
  uint64_t v592;
  float v593;
  int v594;
  pthread_mutex_t *v595;
  uint64_t v596;
  float v597;
  unint64_t v598;
  float v599;
  char v600;
  float v601;
  uint64_t v602;
  pthread_mutex_t *v603;
  unint64_t v604;
  uint64_t v605;
  char v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  unint64_t v611;
  unint64_t v612;
  float v613;
  int v614;
  uint64_t v615;
  unint64_t v616;
  double v617;
  unsigned int v618;
  uint64_t v619;
  float *v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  float v625;
  double v626;
  pthread_mutex_t *v627;
  int v628;
  float64x2_t v629;
  unint64_t v630;
  unint64_t v631;
  uint64_t v632;
  char v633;
  char v634;
  __int128 v635;
  _BYTE v636[32];
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  unint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  unint64_t v645;
  unint64_t v646;
  float32x2_t *v647;
  int v648;
  int v649;
  int v650;
  int v651;
  char *(*v652)(uint64_t, _QWORD *);
  unint64_t v653;
  unint64_t v654;
  unint64_t v655;
  unint64_t v656;
  int v657;
  unsigned int v658;
  unsigned int v659;
  unsigned int v660;
  int v661;
  uint64_t v662;
  char *(*v663)(_DWORD *, _QWORD *);
  unint64_t v664;
  unint64_t v665;
  unint64_t v666;
  unint64_t v667;
  _QWORD v668[6];
  int v669;
  int v670;
  int v671;
  int32x2_t v672;
  int v673;
  unsigned int v674;
  unsigned int v675;
  uint64_t (*v676)(uint64_t, _QWORD *);
  unint64_t v677;
  unint64_t v678;
  unint64_t v679;
  unint64_t v680;
  _QWORD v681[17];
  unint64_t v682;
  unint64_t v683;
  unint64_t v684;
  unint64_t v685;
  int v686;
  int v687;
  int v688;
  int v689;
  int v690;
  int v691;
  unint64_t (*v692)(uint64_t, _QWORD *);
  unint64_t v693;
  unint64_t v694;
  unint64_t v695;
  unint64_t v696;
  uint64_t v697;
  char *v698;
  uint64_t v699;
  uint16x8_t *v700;
  uint64_t v701;
  _WORD *v702;
  _WORD *v703;
  _WORD *v704;
  void (*v705)(uint64_t, _QWORD *);
  unint64_t v706;
  int8x16_t v707;
  unint64_t v708;
  int v709;
  __int128 v710;
  int v711;
  uint64_t v712;
  __int128 v713;
  unint64_t (*v714)(uint64_t, _QWORD *);
  unint64_t v715;
  int32x4_t v716;
  unint64_t v717;
  uint64_t v718;
  int v719;
  uint64_t v720;
  uint64_t (*v721)(uint64_t, _QWORD *);
  unint64_t v722;
  unint64_t v723;
  unint64_t v724;
  unint64_t v725;
  unsigned int v726;
  int v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  void *(*v731)(uint64_t, _QWORD *);
  unint64_t v732;
  int32x4_t v733;
  unint64_t v734;
  unsigned int v735;
  int v736;
  int v737;
  uint64_t v738;
  uint64_t (*v739)(uint64_t, _QWORD *);
  unint64_t v740;
  unint64_t v741;
  int8x16_t v742;
  int v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  char *v748;
  int v749;
  int v750;
  int v751;
  unsigned int v752;
  void (*v753)(uint64_t, _QWORD *);
  unint64_t v754;
  unint64_t v755;
  unint64_t v756;
  unint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  int v761;
  int v762;
  unsigned int v763;
  unsigned int v764;
  unsigned int v765;
  uint64_t (*v766)(uint64_t, _QWORD *);
  unint64_t v767;
  unint64_t v768;
  unint64_t v769;
  unint64_t v770;
  unsigned int v771;
  int v772;
  int v773;
  uint64_t v774;
  uint16x8_t *v775;
  uint64_t v776;
  uint64_t v777;
  __int128 v778;
  __int128 v779;
  __int128 v780;
  __int128 v781;
  __int128 v782;
  __int128 v783;
  int v784;
  uint64_t (*v785)(uint64_t, _QWORD *);
  unint64_t v786;
  unint64_t v787;
  unint64_t v788;
  unint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  signed int v794;
  int v795;
  int v796;
  int v797;
  signed int v798;
  signed int v799;
  int v800;
  int v801;
  uint64_t v802;
  unsigned int v803;
  int v804;
  void *v805;
  unint64_t (*v806)(unint64_t, _QWORD *);
  void *v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  int v813;
  int v814;
  int32x2_t v815;
  unsigned int v816;
  unint64_t (*v817)(uint64_t, _QWORD *);
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  unsigned int v822;
  uint64_t v823;
  uint64_t (*v824)(uint64_t, _QWORD *);
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  _BOOL4 v830;
  char *(*v831)(uint64_t, _QWORD *);
  uint64_t v832;
  uint64_t v833;
  unint64_t v834;
  uint64_t v835;
  int v836;
  unint64_t (*v837)(uint64_t, _QWORD *);
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  _DWORD v844[48];
  void *(*v845)(uint64_t, uint64_t);
  uint64_t v846;
  uint64_t v847;
  unint64_t v848;
  unint64_t v849;
  uint64_t v850;
  uint64_t v851;
  int v852;
  int v853;
  BOOL v854;
  uint64_t v855;
  __int16 v856;
  __int16 v857;
  __int16 v858;
  int16x4_t v859;
  __int16 v860;
  __int16 v861;
  __int16 v862;
  __int16 v863;
  __int16 v864;
  int16x4_t v865;
  __int16 v866;
  __int16 v867;
  __int16 v868;
  __int16 v869;
  __int16 v870;
  int16x4_t v871;
  __int16 v872;
  __int16 v873;
  __int16 v874;
  __int16 v875;
  __int16 v876;
  int16x4_t v877;
  __int16 v878;
  __int16 v879;
  uint64_t (*v880)(__int16 *, unsigned __int16 *, int, unsigned __int16 *);
  uint64_t (*v881)(__int16 *, uint16x4_t *, int, unsigned __int16 *, uint64_t);
  uint16x8_t *(*v882)(uint16x8_t *, unsigned int, int, int16x8_t *, unsigned __int16 *);
  uint64_t (*v883)(uint64_t, int, int, uint16x4_t *, unsigned __int16 *, uint64_t);
  uint16x4_t *(*v884)(uint16x4_t *, int, int, uint16x4_t *, unsigned __int16 *, uint64_t);
  unsigned __int16 *(*v885)(unsigned __int16 *, _QWORD *);
  uint64_t v886;
  int64x2_t v887;
  uint64_t v888;
  int v889;
  unsigned int v890;
  uint64_t v891;
  uint64_t (*v892)(uint64_t, _QWORD *);
  int64x2_t v893;
  int64x2_t v894;
  int v895;
  int v896;
  int v897;
  int32x2_t v898;
  int v899;
  int v900;
  int32x2_t v901;
  unsigned int v902;
  unsigned int v903;
  unsigned int v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  int v909;
  int v910;
  unsigned int v911;
  unsigned int v912;
  int v913;
  int v914;
  unsigned int v915;
  unsigned int v916;
  int32x2_t v917;
  _QWORD *v918;
  unsigned int *v919;
  pthread_mutex_t *v920;
  int v921;
  uint64_t v922;
  __int128 v923;
  __int128 v924;
  __int128 v925;
  __int128 v926;
  _OWORD v927[2];
  __int128 v928;
  __int128 v929;
  __int128 v930;
  __int128 v931;
  __int128 v932;
  __int128 v933;
  __int128 v934;
  __int128 v935;
  uint64_t v936;

  v0 = MEMORY[0x1E0C80A78]();
  v936 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(v1 + 136);
  if (*(_BYTE *)(v1 + 136))
  {
    v3 = v1;
    if (*(float *)(v1 + 132) != 0.66667
      || *(_DWORD *)(v1 + 188) != 1
      || *(_DWORD *)(v1 + 120)
      || *(_DWORD *)(v1 + 124) != 2
      || (*(_DWORD *)(v1 + 144) | 2) != 2
      || *(_DWORD *)(v1 + 248))
    {
      return 0;
    }
    v2 = *(unsigned __int8 *)(v1 + 252);
    if (!*(_BYTE *)(v1 + 252))
      return v2;
    v2 = *(unsigned int *)(v1 + 264);
    if ((_DWORD)v2)
      return 0;
    v5 = *(_QWORD *)(v0 + 64);
    if (v5 >= 2)
    {
      v6 = *(_QWORD *)(v0 + 72);
      if (v6 >= 2)
      {
        v7 = *(_QWORD *)v0;
        if (v5 + *(_QWORD *)(v0 + 32) >= *(_QWORD *)v0 - 1)
          return 0;
        if (*(float *)(v1 + 496) != 0.0)
          return 0;
        v631 = *(_QWORD *)(v0 + 32);
        if (*(_DWORD *)(v1 + 304) != 1)
          return 0;
        v8 = *(_QWORD *)(v0 + 8);
        v621 = *(_QWORD *)(v0 + 24);
        v624 = *(_QWORD *)(v0 + 16);
        v9 = *(_QWORD *)(v0 + 40);
        v10 = *(_QWORD *)(v0 + 48);
        v11 = *(_QWORD *)(v0 + 56);
        v12 = *(_DWORD *)(v0 + 80);
        v13 = *(_DWORD *)(v1 + 4);
        bzero(&v632, 0x2588uLL);
        v611 = v8;
        v612 = v7;
        v637 = v7;
        v638 = v8;
        v639 = v624;
        v640 = v621;
        v641 = v631;
        v642 = v9;
        v616 = v9;
        v643 = v10;
        v644 = v11;
        v645 = v5;
        v646 = v6;
        v647 = (float32x2_t *)v3;
        v648 = v12;
        v649 = v13;
        v650 = v13;
        v634 = 0;
        v14 = qword_1EFF38730;
        if (!qword_1EFF38730)
        {
          pthread_once(&stru_1EFF32430, sub_1D5379C74);
          v14 = qword_1EFF38730;
          if (!qword_1EFF38730)
            return 0;
        }
        v918 = (_QWORD *)v14;
        if (*(_QWORD *)(v14 + 64))
        {
          if (*(_QWORD *)(v14 + 72))
            v15 = *(_QWORD *)(v14 + 80) == 0;
          else
            v15 = 1;
          if (!v15)
            goto LABEL_50;
        }
        else
        {
          pthread_mutex_lock((pthread_mutex_t *)v14);
          v29 = (pthread_mutex_t *)qword_1EFF38730;
          if (!*(_QWORD *)(qword_1EFF38730 + 64))
          {
            v30 = 0;
            *(_QWORD *)(qword_1EFF38730 + 112) = 0x4000000040000000;
            v31 = 3.0;
            v32 = 116;
            do
            {
              v33 = (float *)v29 + v30;
              v33[30] = *(float *)((char *)&v29->__sig + v32) * 0.5;
              v33[31] = 2.0 / v31;
              v31 = v31 + 2.0;
              v34 = v30 + 3;
              v30 += 2;
              v32 += 4;
            }
            while (v34 < 0x1FFFE);
            v29[1].__sig = (uint64_t)&v29[1].__opaque[40];
          }
          pthread_mutex_unlock(v29);
          v14 = qword_1EFF38730;
          if (*(_QWORD *)(qword_1EFF38730 + 72))
            v35 = *(_QWORD *)(qword_1EFF38730 + 80) == 0;
          else
            v35 = 1;
          if (!v35)
          {
LABEL_50:
            if (*(_QWORD *)(v14 + 88))
              goto LABEL_51;
            goto LABEL_36;
          }
        }
        pthread_mutex_lock((pthread_mutex_t *)v14);
        v16 = qword_1EFF38730;
        if (*(_QWORD *)(qword_1EFF38730 + 72))
          v17 = *(_QWORD *)(qword_1EFF38730 + 80) == 0;
        else
          v17 = 1;
        if (v17)
        {
          v18 = 0;
          v19 = qword_1EFF38730 + 788400;
          *(_DWORD *)(qword_1EFF38730 + 524400) = 0;
          *(_BYTE *)(v16 + 788400) = 0;
          v20 = 2;
          v21 = 16;
          do
          {
            v22 = v18 + 1;
            v23 = 0xFFFFFFFF / ((int)v18 + 1);
            *(_BYTE *)(v16 + 788401 + v18) = v21;
            v24 = v18 + 1 == v20;
            if (v18 + 1 == v20)
              ++v23;
            v20 <<= v24;
            v21 -= v24;
            *(_DWORD *)(v16 + 524404 + 4 * v18++) = v23;
          }
          while (v22 != 65999);
          *(_QWORD *)(v16 + 72) = v16 + 524400;
          *(_QWORD *)(v16 + 80) = v19;
        }
        pthread_mutex_unlock((pthread_mutex_t *)v16);
        v14 = qword_1EFF38730;
        if (*(_QWORD *)(qword_1EFF38730 + 88))
        {
LABEL_51:
          if (!*(_BYTE *)(v3 + 160))
            goto LABEL_60;
          goto LABEL_52;
        }
LABEL_36:
        pthread_mutex_lock((pthread_mutex_t *)v14);
        v25 = qword_1EFF38730;
        v26 = *(_QWORD *)(qword_1EFF38730 + 88);
        if (!v26)
        {
          v27 = qword_1EFF38730 + 854400;
          v28 = 0.0;
          do
          {
            *(_WORD *)(v27 + v26) = (int)(sqrt(v28) * 65535.0 + 0.5);
            v28 = v28 + 0.0000152590219;
            v26 += 2;
          }
          while (v26 != 0x20000);
          *(_QWORD *)(v25 + 88) = v27;
        }
        pthread_mutex_unlock((pthread_mutex_t *)v25);
        if (!*(_BYTE *)(v3 + 160))
        {
LABEL_60:
          v43 = v647;
          v44 = v647->i32[1];
          if (v44 != 8 && v44 != 6)
          {
            v59 = 0;
            goto LABEL_139;
          }
          v46 = llroundf(v647[48].f32[1]);
          v47 = llroundf(v647[49].f32[0]);
          v48 = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v647[41]), (float64x2_t)vdupq_n_s64(0x40C0000000000000uLL)))));
          v49 = llround(v647[42].f32[0] * 8192.0);
          v50 = llround(v647[78].f32[0] * 16.0 * 8192.0);
          v51 = llround(v647[78].f32[1] * 16.0 * 8192.0);
          v52 = llround(v647[79].f32[0] * 16.0 * 8192.0);
          if (v48.i32[0] == v50)
            v53 = 3;
          else
            v53 = 1;
          if (v48.i32[1] == v48.i32[0])
            v53 |= 4u;
          if (v48.i32[0] == v51)
            v53 |= 8u;
          v54 = v53 | 0x10;
          if (v48.i32[0] != v49)
            v54 = v53;
          if (v48.i32[0] == v52)
            v55 = v54 | 0x20;
          else
            v55 = v54;
          if (v47 != v46)
            v55 = v53;
          if ((v55 & 2) != 0)
          {
            if ((v55 & 4) != 0)
            {
              v58 = 1;
              goto LABEL_113;
            }
            if (v48.i32[1] == v51)
              v60 = 12;
            else
              v60 = 4;
            v55 |= v60;
            v58 = 2;
            if (v47 != v46)
            {
LABEL_113:
              v63 = v55 | 0x18;
              if (v49 != v51)
                v63 = v55 | 8;
              if (v52 == v51)
                v64 = v63 | 0x20;
              else
                v64 = v63;
              if (v47 == v46)
                v65 = v64;
              else
                v65 = v55 | 8;
              if ((v55 & 8) != 0)
                v66 = v55;
              else
                v66 = v65;
              if ((v55 & 8) != 0)
                v67 = v58;
              else
                v67 = v58 + 1;
              if ((v66 & 0x10) == 0)
              {
                ++v67;
                if (v52 == v49)
                  goto LABEL_132;
                v66 |= 0x10u;
              }
              if ((v66 & 0x20) != 0)
              {
                v927[0] = xmmword_1D544D6B0;
                if (v67 == 1)
                {
                  v59 = 1;
                  goto LABEL_139;
                }
                goto LABEL_135;
              }
              ++v67;
LABEL_132:
              v927[0] = xmmword_1D544D6B0;
LABEL_135:
              v927[1] = xmmword_1D544D6C0;
              if (v67 < 3)
              {
                v59 = 2;
              }
              else
              {
                v928 = xmmword_1D544D6D0;
                if (v67 == 3)
                {
                  v59 = 3;
                }
                else
                {
                  v929 = xmmword_1D544D6E0;
                  if (v67 < 5)
                  {
                    v59 = 4;
                  }
                  else
                  {
                    v930 = xmmword_1D544D6F0;
                    if (v67 == 5)
                    {
                      v59 = 5;
                    }
                    else
                    {
                      v931 = xmmword_1D544D700;
                      v59 = 6;
                    }
                  }
                }
              }
LABEL_139:
              if (v44 != 6 && v44 != 8)
              {
                v934 = 0u;
                v935 = 0u;
                v932 = 0u;
                v933 = 0u;
                v925 = 0u;
                v926 = 0u;
                v923 = 0u;
                v924 = 0u;
                v73 = llroundf(v647[48].f32[1]);
                v74 = llroundf(v647[49].f32[0]);
                v75 = llroundf(v647[49].f32[1]);
                v76 = v647[41].i32[0];
                v77 = v647[41].i32[1];
                v78 = v647[42].i32[0];
                switch(v650)
                {
                  case 4:
                    DWORD1(v923) = v647[42].i32[0];
                    HIDWORD(v923) = v76;
                    LODWORD(v924) = v77;
                    DWORD2(v924) = v77;
                    DWORD1(v925) = v76;
                    HIDWORD(v925) = v78;
                    v79 = v75;
                    v80 = v73;
                    v81 = v74;
                    LODWORD(v926) = v77;
                    DWORD2(v926) = v77;
                    LODWORD(v932) = 0;
                    v75 = 0;
                    v74 = 0;
                    v73 = 0;
                    goto LABEL_247;
                  case 5:
                  case 7:
                    v79 = 0;
                    v80 = 0;
                    v81 = 0;
                    LODWORD(v923) = v647[41].i32[0];
                    DWORD2(v923) = v78;
                    DWORD1(v924) = v77;
                    HIDWORD(v924) = v77;
                    LODWORD(v925) = v78;
                    DWORD2(v925) = v76;
                    DWORD1(v926) = v77;
                    HIDWORD(v926) = v77;
                    goto LABEL_246;
                  case 6:
                  case 8:
                    v126 = v647[78].i32[0];
                    v127 = v647[78].i32[1];
                    v128 = v647[79].i32[0];
                    LODWORD(v923) = v647[41].i32[0];
                    *(_QWORD *)((char *)&v923 + 4) = __PAIR64__(v78, v126);
                    HIDWORD(v923) = v128;
                    *(_QWORD *)&v924 = __PAIR64__(v77, v127);
                    *((_QWORD *)&v924 + 1) = __PAIR64__(v77, v127);
                    *(_QWORD *)&v925 = __PAIR64__(v128, v78);
                    *((_QWORD *)&v925 + 1) = __PAIR64__(v126, v76);
                    *(_QWORD *)&v926 = __PAIR64__(v77, v127);
                    *((_QWORD *)&v926 + 1) = __PAIR64__(v77, v127);
                    v79 = v73;
                    v80 = v75;
                    v81 = v74;
LABEL_246:
                    LODWORD(v932) = v73;
LABEL_247:
                    *(_QWORD *)((char *)&v932 + 4) = __PAIR64__(v75, v79);
                    HIDWORD(v932) = v80;
                    *(_QWORD *)&v933 = __PAIR64__(v74, v81);
                    *((_QWORD *)&v933 + 1) = __PAIR64__(v74, v81);
                    *(_QWORD *)&v934 = __PAIR64__(v80, v75);
                    *((_QWORD *)&v934 + 1) = __PAIR64__(v79, v73);
                    *(_QWORD *)&v935 = __PAIR64__(v74, v81);
                    *((_QWORD *)&v935 + 1) = __PAIR64__(v74, v81);
                    break;
                  default:
                    break;
                }
                v129 = 0;
                v130 = 0;
                v131 = 0;
                do
                {
                  if (((v131 >> v129) & 1) == 0)
                  {
                    for (i = v129; i != 16; ++i)
                    {
                      if (*((_DWORD *)&v932 + i) == *((_DWORD *)&v932 + v129)
                        && *((float *)&v923 + i) == *((float *)&v923 + v129))
                      {
                        v131 |= 1 << i;
                      }
                    }
                    ++v130;
                  }
                  ++v129;
                }
                while (v129 != 16);
                if ((int)v130 >= 1)
                {
                  v133 = v59 + 1;
                  v927[v59] = xmmword_1D544D6B0;
                  if (v130 == 1)
                  {
LABEL_259:
                    v59 = v133;
                    goto LABEL_144;
                  }
                  v134 = v59 + 2;
                  v927[v133] = xmmword_1D544D6C0;
                  if (v130 < 3)
                    goto LABEL_275;
                  v133 = v59 + 3;
                  v927[v134] = xmmword_1D544D6D0;
                  if (v130 == 3)
                    goto LABEL_259;
                  v134 = v59 + 4;
                  v927[v133] = xmmword_1D544D6E0;
                  if (v130 < 5)
                    goto LABEL_275;
                  v133 = v59 + 5;
                  v927[v134] = xmmword_1D544D6F0;
                  if (v130 == 5)
                    goto LABEL_259;
                  v134 = v59 + 6;
                  v927[v133] = xmmword_1D544D700;
                  if (v130 < 7)
                    goto LABEL_275;
                  v133 = v59 + 7;
                  v927[v134] = xmmword_1D544D710;
                  if (v130 == 7)
                    goto LABEL_259;
                  v134 = v59 | 8;
                  v927[v133] = xmmword_1D544D720;
                  if (v130 < 9)
                    goto LABEL_275;
                  v133 = v59 + 9;
                  v927[v134] = xmmword_1D544D730;
                  if (v130 == 9)
                    goto LABEL_259;
                  v134 = v59 + 10;
                  v927[v133] = xmmword_1D544D740;
                  if (v130 < 0xB)
                    goto LABEL_275;
                  v133 = v59 + 11;
                  v927[v134] = xmmword_1D544D750;
                  if (v130 == 11)
                    goto LABEL_259;
                  v134 = v59 + 12;
                  v927[v133] = xmmword_1D544D760;
                  if (v130 < 0xD)
                    goto LABEL_275;
                  v133 = v59 + 13;
                  v927[v134] = xmmword_1D544D770;
                  if (v130 == 13)
                    goto LABEL_259;
                  v134 = v59 + 14;
                  v927[v133] = xmmword_1D544D780;
                  if (v130 < 0xF)
                  {
LABEL_275:
                    v59 = v134;
                  }
                  else
                  {
                    v133 = v59 + 15;
                    v927[v134] = xmmword_1D544D790;
                    if (v130 == 15)
                      goto LABEL_259;
                    v59 |= 0x10u;
                    v927[v133] = xmmword_1D544D7A0;
                  }
                }
              }
LABEL_144:
              if (v43[6].i8[4])
                v69 = 3640;
              else
                v69 = 0;
              v70 = v69 | 7;
              if (v43[17].i32[1] && (v43[18].i32[0] | 2) == 2)
                v70 = v69 | 0x3F;
              if (v43[8].i8[0])
                v927[v59++] = xmmword_1D544D7B0;
              if (v43[34].i8[0])
              {
                v70 |= 0x1000u;
                v927[v59++] = xmmword_1D544D7C0;
              }
              if ((v70 & 1) != 0)
              {
                v927[v59++] = xmmword_1D544D7D0;
                if ((v70 & 2) == 0)
                {
LABEL_156:
                  if ((v70 & 4) == 0)
                    goto LABEL_157;
                  goto LABEL_169;
                }
              }
              else if ((v70 & 2) == 0)
              {
                goto LABEL_156;
              }
              v927[v59++] = xmmword_1D544D7E0;
              if ((v70 & 4) == 0)
              {
LABEL_157:
                if ((v70 & 8) == 0)
                  goto LABEL_158;
                goto LABEL_170;
              }
LABEL_169:
              v927[v59++] = xmmword_1D544D7F0;
              if ((v70 & 8) == 0)
              {
LABEL_158:
                if ((v70 & 0x10) == 0)
                  goto LABEL_159;
                goto LABEL_171;
              }
LABEL_170:
              v927[v59++] = xmmword_1D544D800;
              if ((v70 & 0x10) == 0)
              {
LABEL_159:
                if ((v70 & 0x20) == 0)
                  goto LABEL_160;
                goto LABEL_172;
              }
LABEL_171:
              v927[v59++] = xmmword_1D544D810;
              if ((v70 & 0x20) == 0)
              {
LABEL_160:
                if ((v70 & 0x200) == 0)
                  goto LABEL_161;
                goto LABEL_173;
              }
LABEL_172:
              v927[v59++] = xmmword_1D544D820;
              if ((v70 & 0x200) == 0)
              {
LABEL_161:
                if ((v70 & 0x400) == 0)
                  goto LABEL_162;
                goto LABEL_174;
              }
LABEL_173:
              v927[v59++] = xmmword_1D544D830;
              if ((v70 & 0x400) == 0)
              {
LABEL_162:
                if ((v70 & 0x800) == 0)
                  goto LABEL_163;
                goto LABEL_175;
              }
LABEL_174:
              v927[v59++] = xmmword_1D544D840;
              if ((v70 & 0x800) == 0)
              {
LABEL_163:
                if ((v70 & 0x1000) == 0)
                  goto LABEL_164;
                goto LABEL_176;
              }
LABEL_175:
              v927[v59++] = xmmword_1D544D850;
              if ((v70 & 0x1000) == 0)
              {
LABEL_164:
                if (v59 >= 1)
                {
LABEL_165:
                  if (v59 >= 5)
                  {
                    v82 = v59 & 3;
                    if ((v59 & 3) == 0)
                      v82 = 4;
                    v71 = v59 - v82;
                    v83 = (int64x2_t)xmmword_1D544D870;
                    v84 = (const double *)&v928 + 1;
                    v85 = 0uLL;
                    v86 = v71;
                    do
                    {
                      v87 = v84 - 4;
                      v88 = (unsigned __int128)vld2q_f64(v87);
                      v89 = (unsigned __int128)vld2q_f64(v84);
                      v83 = vaddq_s64((int64x2_t)v88, v83);
                      v85 = vaddq_s64((int64x2_t)v89, v85);
                      v84 += 8;
                      v86 -= 4;
                    }
                    while (v86);
                    v72 = vaddvq_s64(vaddq_s64(v85, v83));
                  }
                  else
                  {
                    v71 = 0;
                    v72 = 320;
                  }
                  v90 = v59 - v71;
                  v91 = (uint64_t *)((unint64_t)&v927[v71] | 8);
                  do
                  {
                    v92 = *v91;
                    v91 += 2;
                    v72 += v92;
                    --v90;
                  }
                  while (v90);
LABEL_187:
                  v93 = (pthread_mutex_t *)sub_1D5441B98(1uLL, v72);
                  v920 = v93;
                  if (v93)
                  {
                    v94 = v93;
                    if (pthread_mutex_init(v93, 0))
                    {
LABEL_189:
                      if (v919)
                      {
                        v95 = v919 + 4;
                        do
                          v96 = __ldaxr(v95);
                        while (__stlxr(v96 - 1, v95));
                      }
                      pthread_mutex_destroy(v94);
                      j__free_3(v94);
                      return 0;
                    }
                    if (v59 >= 1)
                    {
                      v97 = v94 + 5;
                      v98 = v59;
                      v99 = (uint64_t *)v927 + 1;
                      do
                      {
                        *(uint64_t *)((char *)&v94->__sig + *(v99 - 1)) = (uint64_t)v97;
                        v100 = *v99;
                        v99 += 2;
                        v97 = (pthread_mutex_t *)((char *)v97 + v100);
                        --v98;
                      }
                      while (v98);
                    }
                    v101 = *(_QWORD *)&v94[4].__opaque[48];
                    if (v101 && !*(_QWORD *)&v94[3].__opaque[40])
                      *(_QWORD *)&v94[3].__opaque[40] = v101 + 0x20000;
                    v102 = v43[57].f32[1];
                    v103 = v43[52].u8[4];
                    v104 = v43[53].f32[0];
                    v105 = v43[53].f32[1];
                    v106 = v43[54].f32[0];
                    v107 = v43[54].f32[1];
                    v108 = v43[55].f32[0];
                    v109 = v43[55].f32[1];
                    v110 = v43[56].f32[0];
                    v625 = v43[56].f32[1];
                    v111 = v43[57].i8[0];
                    LOWORD(v932) = *(__int16 *)((char *)v43[57].i16 + 1);
                    BYTE2(v932) = v43[57].i8[3];
                    pthread_mutex_lock((pthread_mutex_t *)qword_1EFF38730);
                    v112 = *(unsigned int **)(qword_1EFF38730 + 104);
                    if (v112)
                    {
                      v113 = 0;
                      v114 = 0;
                      if (v103)
                      {
                        while (v102 != *((float *)v112 + 5)
                             || v103 != *((unsigned __int8 *)v112 + 24)
                             || ((v111 & 1) == 0 || !*((_BYTE *)v112 + 60))
                             && (v104 != *((float *)v112 + 7)
                              || v105 != *((float *)v112 + 8)
                              || v106 != *((float *)v112 + 9)
                              || v107 != *((float *)v112 + 10)
                              || v108 != *((float *)v112 + 11)
                              || v109 != *((float *)v112 + 12)
                              || v110 != *((float *)v112 + 13)
                              || v625 != *((float *)v112 + 14)
                              || (v111 & 1) != *((_BYTE *)v112 + 60)))
                        {
                          if (!atomic_load(v112 + 4))
                            v114 = (char *)v112;
                          v112 = (unsigned int *)*((_QWORD *)v112 + 1);
                          ++v113;
                          if (!v112)
                            goto LABEL_228;
                        }
LABEL_237:
                        v919 = v112;
                        v120 = v112 + 4;
                        do
                          v121 = __ldaxr(v120);
                        while (__stlxr(v121 + 1, v120));
                        v94[1].__sig = (uint64_t)(v112 + 16);
                        v122 = (pthread_mutex_t *)qword_1EFF38730;
                        v123 = *(unsigned int **)(qword_1EFF38730 + 104);
                        if (v112 != v123)
                        {
                          v124 = *(_QWORD *)v112;
                          *(_QWORD *)(*(_QWORD *)v112 + 8) = *((_QWORD *)v112 + 1);
                          v125 = (_QWORD *)*((_QWORD *)v112 + 1);
                          if (v125)
                            *v125 = v124;
                          *(_QWORD *)v112 = 0;
                          *((_QWORD *)v112 + 1) = v123;
                          *(_QWORD *)v123 = v112;
                          v122 = (pthread_mutex_t *)qword_1EFF38730;
                          *(_QWORD *)(qword_1EFF38730 + 104) = v112;
                        }
                        pthread_mutex_unlock(v122);
                        v603 = v920;
                        v597 = *(float *)(v3 + 328);
                        v601 = *(float *)(v3 + 332);
                        v599 = *(float *)(v3 + 336);
                        v587 = *(float *)(v3 + 388);
                        v589 = *(float *)(v3 + 392);
                        v591 = *(float *)(v3 + 396);
                        if (*(_DWORD *)(v3 + 416))
                        {
                          v572 = 0;
                          v573 = 0;
                          v574 = 0;
                        }
                        else
                        {
                          v574 = llroundf(*(float *)(v3 + 376));
                          v573 = llroundf(*(float *)(v3 + 380));
                          v572 = llroundf(*(float *)(v3 + 384));
                        }
                        v135 = *(float *)(v3 + 332);
                        if (v601 <= v597)
                          v135 = *(float *)(v3 + 328);
                        if (v599 > v135)
                          v135 = *(float *)(v3 + 336);
                        v136 = *(float *)(v3 + 392);
                        if (v589 <= v587)
                          v136 = *(float *)(v3 + 388);
                        if (v591 > v136)
                          v136 = *(float *)(v3 + 396);
                        v613 = v136;
                        if (*(_QWORD *)&v920[4].__opaque[40])
                          v137 = *(_QWORD *)&v920[3].__opaque[40] == 0;
                        else
                          v137 = 0;
                        v576 = *(_QWORD *)&v920[4].__opaque[40];
                        v570 = *(uint16x8_t **)&v920[3].__opaque[40];
                        if (v137)
                          v138 = *(_QWORD *)&v920[4].__opaque[40];
                        else
                          v138 = *(_QWORD *)&v920[3].__opaque[40];
                        v139 = (double)*(int *)(v3 + 544);
                        v140 = *(_DWORD *)(v3 + 540);
                        if (v140 && v139 > (double)v140)
                          v139 = (double)v140;
                        v141 = *(float *)(v3 + 512);
                        if (*(_DWORD *)(v3 + 508))
                          v142 = v139 * *(float *)(v3 + 516) + v139 * v141 * v139 + *(float *)(v3 + 520);
                        else
                          v142 = *(float *)(v3 + 516) + v141 * v139;
                        v143 = *(float *)(v3 + 528);
                        if (*(_DWORD *)(v3 + 524))
                          v144 = v139 * *(float *)(v3 + 532) + v139 * v143 * v139 + *(float *)(v3 + 536);
                        else
                          v144 = *(float *)(v3 + 532) + v143 * v139;
                        v145 = *(float *)(v3 + 560);
                        if (*(_DWORD *)(v3 + 556))
                          v146 = v139 * *(float *)(v3 + 564) + v139 * v145 * v139 + *(float *)(v3 + 568);
                        else
                          v146 = *(float *)(v3 + 564) + v145 * v139;
                        v626 = v146;
                        v147 = v135;
                        v148 = *(float *)(v3 + 576);
                        if (*(_DWORD *)(v3 + 572))
                          v149 = v139 * *(float *)(v3 + 580) + v139 * v148 * v139 + *(float *)(v3 + 584);
                        else
                          v149 = *(float *)(v3 + 580) + v148 * v139;
                        v617 = v149;
                        v622 = v918[11];
                        v607 = *(_QWORD *)&v920[3].__opaque[8];
                        v609 = *(_QWORD *)&v920[3].__opaque[16];
                        v605 = *(_QWORD *)&v920[3].__opaque[24];
                        v150 = *(float *)(v3 + 592);
                        v151 = *(float *)(v3 + 16) / 100.0 * 32768.0 / v147;
                        if (*(_DWORD *)(v3 + 588))
                          v152 = v139 * *(float *)(v3 + 596) + v139 * v150 * v139 + *(float *)(v3 + 600);
                        else
                          v152 = *(float *)(v3 + 596) + v150 * v139;
                        v153.i32[0] = *(_DWORD *)(v3 + 344);
                        v153.i32[1] = *(_DWORD *)(v3 + 356);
                        v585 = v153;
                        v153.i32[0] = *(_DWORD *)(v3 + 360);
                        v153.i32[1] = *(_DWORD *)(v3 + 372);
                        v583 = v153;
                        v548 = *(float *)(v3 + 340);
                        v550 = *(float *)(v3 + 364);
                        v555 = *(float *)(v3 + 368);
                        v552 = *(float *)(v3 + 352);
                        v553 = *(float *)(v3 + 348);
                        v566 = *(float *)(v3 + 624);
                        v568 = *(float *)(v3 + 628);
                        v593 = *(float *)(v3 + 632);
                        v154 = v151;
                        v577 = *(_QWORD *)&v920[3].__opaque[32];
                        v579 = *(_QWORD *)&v920[3].__opaque[48];
                        v581 = v918[9];
                        v562 = *(_WORD **)&v920[4].__opaque[24];
                        v564 = *(_WORD **)&v920[4].__opaque[16];
                        v558 = v918[10];
                        v560 = *(_WORD **)&v920[4].__opaque[32];
                        v155 = *(float *)(v3 + 608);
                        if (*(_DWORD *)(v3 + 604))
                          v156 = v139 * *(float *)(v3 + 612) + v139 * v155 * v139 + *(float *)(v3 + 616);
                        else
                          v156 = *(float *)(v3 + 612) + v155 * v139;
                        LODWORD(v923) = 0;
                        v922 = 0;
                        v921 = 0;
                        sub_1D5379CCC(v3, v607, v577, (unint64_t)&v923, (unint64_t)&v922, v154, v142, v144, v597, v587);
                        sub_1D5379CCC(v3, v609, v138, (unint64_t)&v922 + 4, (unint64_t)&v921, v154, v142, v144, v601, v589);
                        sub_1D5379CCC(v3, v605, v579, 0, 0, v154, v142, v144, v599, v591);
                        v157 = v139 * *(float *)(v3 + 552);
                        v158 = *(unsigned __int16 *)(v622 + 2 * (int)llround(v157));
                        *(float *)&v157 = v154;
                        v159 = sub_1D537A04C(v158, v564, v157, v626, v617, v152, v156, v566, v587);
                        *(float *)&v159 = v154;
                        v160 = sub_1D537A04C(v158, v562, v159, v626, v617, v152, v156, v568, v589);
                        *(float *)&v160 = v154;
                        sub_1D537A04C(v158, v560, v160, v626, v617, v152, v156, v593, v591);
                        if (v576)
                        {
                          v161 = llround(*(float *)(v3 + 296) * 4096.0);
                          if ((unint64_t)(v576 - v138) > 0x1F)
                          {
                            v164 = 0;
                            v165 = vdupq_n_s32(v161);
                            v166.i64[0] = 0xFFFF0000FFFFLL;
                            v166.i64[1] = 0xFFFF0000FFFFLL;
                            do
                            {
                              v167 = *(int32x4_t *)(v138 + v164);
                              v168 = *(uint16x8_t *)(v138 + v164 + 16);
                              v169.i64[0] = 0x80000000800;
                              v169.i64[1] = 0x80000000800;
                              v170 = vmlaq_s32(v169, v165, (int32x4_t)vmovl_high_u16((uint16x8_t)v167));
                              v171.i64[0] = 0x80000000800;
                              v171.i64[1] = 0x80000000800;
                              v172 = vmlaq_s32(v171, v165, (int32x4_t)vmovl_u16(*(uint16x4_t *)v167.i8));
                              v167.i64[0] = 0x80000000800;
                              v167.i64[1] = 0x80000000800;
                              v173.i64[0] = 0x80000000800;
                              v173.i64[1] = 0x80000000800;
                              v174 = (int16x8_t *)(v576 + v164);
                              *v174 = vuzp1q_s16((int16x8_t)vminq_s32(vshrq_n_s32(v172, 0xCuLL), v166), (int16x8_t)vminq_s32(vshrq_n_s32(v170, 0xCuLL), v166));
                              v174[1] = vuzp1q_s16((int16x8_t)vminq_s32(vshrq_n_s32(vmlaq_s32(v173, v165, (int32x4_t)vmovl_u16(*(uint16x4_t *)v168.i8)), 0xCuLL), v166), (int16x8_t)vminq_s32(vshrq_n_s32(vmlaq_s32(v167, v165, (int32x4_t)vmovl_high_u16(v168)), 0xCuLL), v166));
                              v164 += 32;
                            }
                            while (v164 != 0x20000);
                          }
                          else
                          {
                            for (j = 0; j != 0x20000; j += 2)
                            {
                              v163 = (int)(*(unsigned __int16 *)(v138 + j) * v161 + 2048) >> 12;
                              if (v163 >= 0xFFFF)
                                LOWORD(v163) = -1;
                              *(_WORD *)(v576 + j) = v163;
                            }
                          }
                        }
                        v618 = *(_DWORD *)(v3 + 4);
                        if (*(_BYTE *)(v3 + 8))
                        {
                          if (v618 - 5 > 3)
                            v175 = &byte_1EFF32440;
                          else
                            v175 = off_1E998E308[v618 - 5];
                          v176 = llroundf(v613 + (float)(v154 * *(float *)(v3 + 12)));
                          v177 = llroundf(v613);
                          if (v177 == v176)
                            v177 = v176 - 1;
                          v178 = llroundf(v613 + v154);
                          if (*(_BYTE *)(v3 + 9))
                            v179 = v178;
                          else
                            v179 = 0;
                          v180 = 7u >> *v175;
                          v181 = llroundf(v154);
                          v182 = llround(65536.0 / (float)(int)(v176 - v177));
                          v652 = sub_1D537A1B4;
                          v657 = (8 * v176) | 4;
                          v658 = v177;
                          if ((v180 & 1) != 0)
                            v183 = 4;
                          else
                            v183 = 5;
                          v659 = v179;
                          v660 = v182;
                          v661 = 2 * v181;
                          v662 = v183;
                          v614 = 1;
                        }
                        else
                        {
                          v614 = 0;
                        }
                        if (v618 == 8 || v618 == 6)
                        {
                          v184 = 0;
                          v185 = 0;
                          v186 = *(float *)(v3 + 40);
                          v627 = v920;
                          DWORD1(v927[0]) = llroundf(v587);
                          v546 = DWORD1(v927[0]);
                          LODWORD(v927[0]) = DWORD1(v927[0]);
                          HIDWORD(v927[0]) = llroundf(v589);
                          v545 = HIDWORD(v927[0]);
                          DWORD2(v927[0]) = HIDWORD(v927[0]);
                          DWORD1(v927[1]) = llroundf(v591);
                          v544 = DWORD1(v927[1]);
                          LODWORD(v927[1]) = DWORD1(v927[1]);
                          v187.f64[0] = v597;
                          v188.f64[0] = v601;
                          v189.f64[0] = v599;
                          v187.f64[1] = v566 * 16.0;
                          v190 = (float64x2_t)vdupq_n_s64(0x40C0000000000000uLL);
                          v191 = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(v187, v190))));
                          v188.f64[1] = v568 * 16.0;
                          v192 = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(v188, v190))));
                          *(int32x2_t *)&v932 = v191;
                          *((int32x2_t *)&v932 + 1) = v192;
                          v189.f64[1] = v593 * 16.0;
                          *(int32x2_t *)&v187.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(v189, v190))));
                          v594 = LODWORD(v187.f64[0]);
                          *(float64_t *)&v933 = v187.f64[0];
                          do
                          {
                            if (!v668[v184])
                            {
                              v193 = *(_WORD **)&v627[1].__opaque[8 * v185];
                              v194 = *((_DWORD *)&v932 + v184);
                              v668[v184] = v193;
                              v195 = *((unsigned int *)v927 + (v184 >> 1));
                              v196 = (int)v195;
                              v197 = v184 + 1;
                              if (v184 != 5)
                              {
                                if (*((_DWORD *)v927 + (v197 >> 1)) == (_DWORD)v195
                                  && *((_DWORD *)&v932 + v197) == v194)
                                {
                                  v668[v197] = v193;
                                }
                                v198 = v184 + 2;
                                if (v184 != 4)
                                {
                                  if (*((_DWORD *)v927 + (v198 >> 1)) == (_DWORD)v195
                                    && *((_DWORD *)&v932 + v198) == v194)
                                  {
                                    v668[v198] = v193;
                                  }
                                  v199 = v184 + 3;
                                  if (v184 != 3)
                                  {
                                    if (*((_DWORD *)v927 + (v199 >> 1)) == (_DWORD)v195
                                      && *((_DWORD *)&v932 + v199) == v194)
                                    {
                                      v668[v199] = v193;
                                    }
                                    v200 = v184 + 4;
                                    if (v184 != 2)
                                    {
                                      if (*((_DWORD *)v927 + (v200 >> 1)) == (_DWORD)v195
                                        && *((_DWORD *)&v932 + v200) == v194)
                                      {
                                        v668[v200] = v193;
                                      }
                                      v201 = v184 + 5;
                                      if (v184 != 1
                                        && *((_DWORD *)v927 + (v201 >> 1)) == (_DWORD)v195
                                        && *((_DWORD *)&v932 + v201) == v194)
                                      {
                                        v668[v201] = v193;
                                      }
                                    }
                                  }
                                }
                              }
                              ++v185;
                              if ((int)v195 <= 0 || (bzero(v193, 2 * v195), !WORD1(v195)))
                              {
                                v202 = (uint64_t)(int)v195 << 32;
                                v203 = 4096;
                                v204 = 131070 - 2 * (int)v195;
                                do
                                {
                                  v193[v196] = v203 >> 13;
                                  v205 = v196 + 1;
                                  v204 -= 2;
                                  v202 += 0x100000000;
                                  if (v196 > 65534)
                                    break;
                                  v203 += v194;
                                  ++v196;
                                }
                                while (v203 <= 0xFFFFFFF);
                                if (v205 < 0x10000)
                                  memset_pattern16((char *)v193 + (v202 >> 31), &unk_1D544D970, (v204 & 0x1FFFFFFFELL) + 2);
                              }
                            }
                            ++v184;
                          }
                          while (v184 != 6);
                          v614 |= 2u;
                          v663 = sub_1D537A7EC;
                          v669 = v546;
                          v670 = v545;
                          v671 = v544;
                          v672 = vzip1_s32(v191, v192);
                          v206 = *(float *)(v3 + 404);
                          v673 = v594;
                          v674 = vcvtas_u32_f32(v186 * v206);
                          v675 = vcvtad_u64_f64(33554432.0 / (float)(llroundf(v206) - v674));
                        }
                        if (v618 == 6 || v618 == 8)
                        {
LABEL_397:
                          if (v618 <= 7 && ((1 << v618) & 0xB0) != 0 && *(_BYTE *)(v3 + 44))
                          {
                            v232 = (int)(float)(v597 * (float)(*(float *)(v3 + 404) - *(float *)(v3 + 388)));
                            v233 = (int)(float)(v599 * (float)(*(float *)(v3 + 412) - *(float *)(v3 + 396)));
                            v234 = (int)(float)(*(float *)(v3 + 48)
                                              * (float)(int)(float)(v601
                                                                  * (float)(*(float *)(v3 + 408) - *(float *)(v3 + 392))));
                            if (v234 >= v232)
                              v234 = (int)(float)(v597 * (float)(*(float *)(v3 + 404) - *(float *)(v3 + 388)));
                            if (v234 >= v233)
                              v234 = (int)(float)(v599 * (float)(*(float *)(v3 + 412) - *(float *)(v3 + 396)));
                            if (v650 == 4)
                              v235 = sub_1D537ADC8;
                            else
                              v235 = sub_1D537B568;
                            v681[16] = v235;
                            v686 = 819 * v232 / 1024;
                            v687 = 819 * v234 / 1024;
                            v688 = 819 * v233 / 1024;
                            v689 = v232;
                            v614 |= 8u;
                            v690 = v234;
                            v691 = v233;
                          }
                          if (*(_BYTE *)(v3 + 52))
                          {
                            v614 |= 0x10u;
                            v697 = v622;
                            if ((v649 - 4) > 4)
                              v236 = 0;
                            else
                              v236 = off_1E998E368[v649 - 4];
                            v698 = v236;
                            v699 = v577;
                            v700 = v570;
                            v701 = v579;
                            v702 = v564;
                            v703 = v562;
                            v704 = v560;
                            v692 = sub_1D537C074;
                          }
                          v237 = *(unsigned __int8 *)(v3 + 72);
                          v238 = *(unsigned __int8 *)(v3 + 100);
                          if (!*(_BYTE *)(v3 + 72))
                          {
                            if (!*(_BYTE *)(v3 + 100))
                              goto LABEL_417;
                            v238 = 1;
                          }
                          v614 |= 0x20u;
                          v705 = sub_1D537CBB8;
                          v709 = v237;
                          v710 = *(_OWORD *)(v3 + 76);
                          v711 = v238;
                          v712 = *(_QWORD *)(v3 + 104);
                          v239 = *(_QWORD *)(v3 + 92);
                          *(_QWORD *)&v240 = (int)v239;
                          *((_QWORD *)&v240 + 1) = SHIDWORD(v239);
                          v713 = v240;
LABEL_417:
                          v714 = sub_1D537D320;
                          v718 = 0x15500000AACLL;
                          v719 = 848;
                          v720 = v622;
                          v241 = *(_DWORD *)(v3 + 140);
                          if (v241)
                          {
                            v242 = llround(*(float *)(v3 + 156) * 4096.0);
                            v243 = llround(*(float *)(v3 + 148) * 65535.0);
                            v721 = sub_1D537E3EC;
                            v726 = v242;
                            if (v243 >= 0x7FFF)
                              v244 = 0x7FFF;
                            else
                              v244 = v243;
                            v727 = v244;
                            v728 = v622;
                            v245 = v614 | 0xC0;
                            v729 = v607;
                            v730 = v605;
                          }
                          else
                          {
                            v245 = v614 | 0x40;
                          }
                          v246 = v650 - 5;
                          if ((v650 - 5) > 3)
                            v247 = &byte_1EFF32440;
                          else
                            v247 = off_1E998E328[v246];
                          if (v650 == 4)
                            v248 = 3;
                          else
                            v248 = -3;
                          v249 = llround(*(float *)(v3 + 200) * 65536.0);
                          v250 = 2;
                          if (v247[10] == 6)
                            v250 = 3;
                          v251 = 2 * (v247[v250 + 8] != 0);
                          v252 = sub_1D537EBD8;
                          if (v650 == 6)
                            v252 = sub_1D537E710;
                          v731 = v252;
                          v735 = v249;
                          v736 = v248;
                          v737 = v251;
                          v738 = v250;
                          v253 = *(_DWORD *)(v3 + 208);
                          if ((v649 - 5) >= 4)
                          {
                            v254 = 0;
                            if (v649 == 4)
                            {
                              v256 = &byte_1EFF32440;
                              v255 = 1;
                              v257 = 1;
                              goto LABEL_444;
                            }
                          }
                          else
                          {
                            v254 = 1;
                          }
                          if ((v649 - 7) >= 2)
                          {
                            if (v649 == 6)
                            {
                              v255 = 0;
                              v256 = &byte_1EFF32460;
                              goto LABEL_443;
                            }
                            if (v649 != 5)
                            {
                              v255 = 0;
                              v256 = 0;
                              goto LABEL_443;
                            }
                          }
                          v255 = 0;
                          v256 = &byte_1EFF32450;
LABEL_443:
                          v257 = v254;
LABEL_444:
                          v258 = llround(*(float *)(v3 + 204) * 65536.0);
                          v739 = sub_1D537F10C;
                          v743 = v253;
                          v744 = v607;
                          v745 = v609;
                          v746 = v605;
                          v747 = v622;
                          v748 = v256;
                          v749 = v257;
                          v750 = v254;
                          v751 = v255;
                          v752 = v258;
                          v259 = llround(*(float *)(v3 + 112) * 65535.0);
                          v260 = 6 * v259 * v259;
                          if (v260 >= 0x1000)
                          {
                            v263 = -1;
                            v264 = v260;
                            do
                            {
                              v265 = v264 >> 13;
                              v264 >>= 1;
                              ++v263;
                            }
                            while (v265);
                            v262 = 1 << v263;
                            v261 = v263 + 1;
                          }
                          else
                          {
                            v261 = 0;
                            v262 = 0;
                          }
                          v266 = *(_DWORD *)(v581 + 4 * ((int)(v262 + v260) >> v261));
                          v267 = llround(*(float *)(v3 + 116) * 4096.0);
                          v753 = sub_1D53832D0;
                          v758 = v581;
                          v759 = v609;
                          v760 = v622;
                          v761 = v261;
                          v762 = v262;
                          v763 = (v266 + 1024) >> 11;
                          v764 = v260;
                          v765 = v267;
                          if (v241)
                          {
                            v268 = *(float *)(v3 + 156);
                            v269 = *(_DWORD *)(v3 + 144);
                            v778 = xmmword_1D544D880;
                            v779 = xmmword_1D544D890;
                            v780 = xmmword_1D544D8A0;
                            v781 = xmmword_1D544D8B0;
                            v782 = xmmword_1D544D8C0;
                            v783 = xmmword_1D544D8D0;
                            v784 = 1365;
                            v270 = v245 | 0xF00;
                            v766 = sub_1D5383678;
                            v771 = llround(v268 * 4096.0);
                            v772 = 1311;
                            v773 = v269;
                            v774 = v577;
                            v775 = v570;
                            v776 = v579;
                            v777 = v622;
                          }
                          else
                          {
                            v270 = v245 | 0x700;
                          }
                          if (*(_BYTE *)(v3 + 160))
                          {
                            v271 = *(unsigned __int8 *)(v3 + 161);
                            v272 = *(unsigned __int8 *)(v3 + 162);
                            v273 = *(unsigned __int8 *)(v3 + 163);
                            v274 = *(float *)(v3 + 184);
                            v275 = *(unsigned __int16 *)(v607 + 131070) * *(unsigned __int16 *)(v607 + 131070)
                                 + *(unsigned __int16 *)(v609 + 131070) * *(unsigned __int16 *)(v609 + 131070)
                                 + *(unsigned __int16 *)(v605 + 131070) * *(unsigned __int16 *)(v605 + 131070);
                            if (v275 <= 1)
                              v276 = 1;
                            else
                              v276 = *(unsigned __int16 *)(v607 + 131070) * *(unsigned __int16 *)(v607 + 131070)
                                   + *(unsigned __int16 *)(v609 + 131070) * *(unsigned __int16 *)(v609 + 131070)
                                   + *(unsigned __int16 *)(v605 + 131070) * *(unsigned __int16 *)(v605 + 131070);
                            v277 = *(float *)(v3 + 172) * *(float *)(v3 + 172);
                            v278 = llroundf(v277 * 1024.0);
                            v279 = 10;
                            if (v275)
                            {
                              v280 = 0xFFFFFFFF / v276;
                              if (v280 < v278)
                              {
                                v281 = 1024.0;
                                do
                                {
                                  v281 = v281 * 0.5;
                                  --v279;
                                  v278 = llroundf(v277 * v281);
                                }
                                while (v280 < v278);
                              }
                            }
                            v270 |= 0x1000u;
                            v282 = llround(*(float *)(v3 + 176) * 65536.0);
                            v283 = llround(*(float *)(v3 + 180) * 65536.0);
                            v284 = v282 * v282;
                            v285 = (int)(v283 * v283 - v284 + 64) >> 7;
                            v286 = vcvtms_s32_f32(*(float *)(v3 + 164));
                            v287 = vcvtms_s32_f32(*(float *)(v3 + 168));
                            if (v287 <= v286)
                              v287 = v286;
                            v288 = v918[12];
                            if (v650 == 4)
                              v289 = 80;
                            else
                              v289 = 5;
                            v785 = sub_1D538401C;
                            v790 = v622;
                            v791 = v607;
                            v792 = v609;
                            v793 = v605;
                            v794 = v278;
                            v795 = v279;
                            v796 = v284;
                            v797 = v285;
                            v798 = v286;
                            v799 = v287;
                            v802 = v288;
                            v290 = v274 * 65536.0;
                            if (!v273)
                              v290 = 4294967300.0;
                            v800 = v271;
                            v803 = llround(v290);
                            v804 = v289;
                            v805 = sub_1D53840E4;
                            if (v272)
                            {
                              v801 = v271;
                              v800 = 0;
                              v805 = sub_1D53859B4;
                              v291 = sub_1D53840E4;
                            }
                            else
                            {
                              v291 = 0;
                            }
                            v806 = v291;
                          }
                          v292 = *(unsigned __int8 *)(v3 + 228);
                          if (*(_BYTE *)(v3 + 240))
                            v292 |= 0xAu;
                          if (*(_BYTE *)(v3 + 212))
                            v292 |= 4u;
                          if ((v650 - 7) < 2)
                            goto LABEL_478;
                          if (v650 == 6)
                          {
                            v296.i32[0] = *(_DWORD *)(v3 + 216);
                            v296.i32[1] = *(_DWORD *)(v3 + 232);
                            v294 = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v296), (float64x2_t)xmmword_1D544D8E0))));
                            v293 = llround(*(float *)(v3 + 244) * 65536.0);
                            v292 |= 0x10u;
                            v295 = &byte_1EFF32460;
                          }
                          else
                          {
                            if (v650 == 5)
                            {
LABEL_478:
                              v293 = 0;
                              v294 = 0;
                              v295 = &byte_1EFF32450;
                              goto LABEL_481;
                            }
                            v293 = 0;
                            v294 = 0;
                            v295 = &byte_1EFF32440;
                          }
LABEL_481:
                          if (*(_BYTE *)(v3 + 212))
                            v297 = 2;
                          else
                            v297 = 255;
                          v15 = *v295 == 6;
                          v298 = 4;
                          if (v15)
                            v298 = 5;
                          if (v650 == 6)
                            v299 = sub_1D5386740;
                          else
                            v299 = sub_1D5386CE8;
                          v807 = v299;
                          v813 = v292;
                          v812 = v298;
                          v814 = v297;
                          v815 = v294;
                          v816 = v293;
                          if (v618 == 6)
                          {
                            if (*(_BYTE *)(v3 + 253))
                            {
                              v300 = llround(*(float *)(v3 + 256) * 1024.0);
                              v817 = sub_1D5387158;
                              v301 = v270 | 0x6000;
                              v822 = v300;
                              v823 = v622;
                            }
                            else
                            {
                              v301 = v270 | 0x2000;
                            }
                          }
                          else
                          {
                            v301 = v270 | 0xA000;
                            if (v246 > 3)
                              v302 = &byte_1EFF32440;
                            else
                              v302 = off_1E998E348[v246];
                            v824 = sub_1D53873E8;
                            v829 = v622;
                            v830 = *v302 != 6;
                            if (v618 != 8)
                              goto LABEL_499;
                          }
                          v301 |= 0x10000u;
                          v303 = *(_DWORD *)(v3 + 268);
                          v831 = sub_1D5387530;
                          v836 = v303;
LABEL_499:
                          if (*(_BYTE *)(v3 + 64))
                          {
                            v304 = 0;
                            v305 = *(_QWORD *)&v920[4].__opaque[48];
                            v306 = vdupq_n_s32(llround(*(float *)(v3 + 68) * 65536.0));
                            v307.i64[0] = 0x1900000019;
                            v307.i64[1] = 0x1900000019;
                            v308 = v570;
                            do
                            {
                              v309 = *v308++;
                              v310.i64[0] = 0x800000008000;
                              v310.i64[1] = 0x800000008000;
                              v311.i64[0] = 0x800000008000;
                              v311.i64[1] = 0x800000008000;
                              v312 = vshrq_n_s32(vmlaq_s32(v311, v306, (int32x4_t)vmovl_u16(*(uint16x4_t *)v309.i8)), 0x10uLL);
                              v313 = vshrq_n_s32(vmlaq_s32(v310, v306, (int32x4_t)vmovl_high_u16(v309)), 0x10uLL);
                              v310.i64[0] = 0x1000000010;
                              v310.i64[1] = 0x1000000010;
                              v314 = vmlaq_s32(v310, vmulq_s32(v313, v313), v307);
                              v313.i64[0] = 0x1000000010;
                              v313.i64[1] = 0x1000000010;
                              v315 = (int32x4_t *)(v305 + v304);
                              *v315 = vshrq_n_s32(vmlaq_s32(v313, vmulq_s32(v312, v312), v307), 5uLL);
                              v315[1] = vshrq_n_s32(v314, 5uLL);
                              v304 += 32;
                            }
                            while (v304 != 0x40000);
                            v316 = 0;
                            v837 = sub_1D538805C;
                            v842 = v622;
                            v843 = v305;
                            v317 = v844;
                            v318 = -48;
                            do
                            {
                              v319 = v316++ + 0x4000;
                              *(v317 - 1) = v319 / (unsigned __int16)(v318 + 49);
                              *v317 = (unsigned __int16)(v316 + 0x4000) / (unsigned __int16)(v318 + 50);
                              v317 += 2;
                              v318 += 2;
                            }
                            while (v318);
                            v844[47] = 334;
                            v301 |= 0x20000u;
                            if (*(_QWORD *)&v603[3].__opaque[40] == *(_QWORD *)&v603[4].__opaque[48] + 0x20000)
                              *(_QWORD *)&v603[3].__opaque[40] = 0;
                          }
                          if (*(_BYTE *)(v3 + 272))
                          {
                            v845 = sub_1D538955C;
                            v850 = v622;
                            v851 = v576;
                            v320 = *(float *)(v3 + 280) + *(float *)(v3 + 280);
                            v321 = v320 * 65536.0;
                            v322 = v320 < 0.0;
                            v323 = 0.0;
                            if (v322)
                              v321 = 0.0;
                            v324 = roundf(v321);
                            if (v324 <= 65535.0)
                            {
                              v326 = 16;
                            }
                            else
                            {
                              v325 = 16;
                              do
                              {
                                v321 = v321 * 0.5;
                                v326 = v325 - 1;
                                v324 = roundf(v321);
                              }
                              while (v324 > 65535.0 && v325-- > 1);
                            }
                            v328 = *(float *)(v3 + 288);
                            if (v328 >= 0.0)
                              v323 = v328 * 65536.0;
                            v329 = roundf(v323);
                            if (v329 <= 65535.0)
                            {
                              v331 = 16;
                            }
                            else
                            {
                              v330 = 16;
                              do
                              {
                                v323 = v323 * 0.5;
                                v331 = v330 - 1;
                                v329 = roundf(v323);
                              }
                              while (v329 > 65535.0 && v330-- > 1);
                            }
                            v301 |= 0x40000u;
                            v852 = (int)v329;
                            v853 = v331;
                            v333 = *(float *)(v3 + 292);
                            v854 = v333 <= 0.0;
                            sub_1D53896A0((float32x2_t *)v927, *(float *)(v3 + 276));
                            v862 = llround(*(float *)v927 * 65536.0);
                            v856 = v862;
                            v867 = llround(*((float *)v927 + 1) * 65536.0);
                            v863 = v867;
                            v861 = v867;
                            v857 = v867;
                            v866 = llround(*((float *)v927 + 2) * 65536.0);
                            v864 = v866;
                            v860 = v866;
                            v858 = v866;
                            v629 = (float64x2_t)vdupq_n_s64(0x40F0000000000000uLL);
                            v334 = (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)v927 + 12)), v629))));
                            v335 = vuzp1_s16(v334, v334);
                            v865 = vzip1_s16(v335, vrev32_s16(v335));
                            v859 = v865;
                            if (v333 > 0.0)
                            {
                              sub_1D53896A0((float32x2_t *)v927, v333);
                              v874 = llround(*(float *)v927 * 65536.0);
                              v868 = v874;
                              v879 = llround(*((float *)v927 + 1) * 65536.0);
                              v875 = v879;
                              v873 = v879;
                              v869 = v879;
                              v878 = llround(*((float *)v927 + 2) * 65536.0);
                              v876 = v878;
                              v872 = v878;
                              v870 = v878;
                              v336 = (int16x4_t)vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)v927 + 12)), v629))));
                              v337 = vuzp1_s16(v336, v336);
                              v877 = vzip1_s16(v337, vrev32_s16(v337));
                              v871 = v877;
                            }
                            v338 = 0;
                            v339 = 0;
                            v340 = (int)v324;
                            v341 = llroundf(*(float *)(v3 + 284));
                            v342 = *(_QWORD *)v920[3].__opaque;
                            v855 = v342;
                            v343 = (double)v341;
                            v344 = (double)v341 * 0.75;
                            v345 = vcvtmd_s64_f64(v344);
                            v346 = v343 - v344;
                            v347 = (int)(sqrt(v346 * v346 + (65535.0 - v344) * (65535.0 - v344)) - v346 + 0.5);
                            v348 = 0xFFFFFFFF00000000;
                            while (1)
                            {
                              v349 = v338 >> v326;
                              if (v338 >> v326 >= 0xFFFF)
                                v349 = 0xFFFF;
                              *(_WORD *)(v342 + 2 * v339) = v349;
                              if (v349 >= v345)
                                break;
                              ++v339;
                              v348 += 0x100000000;
                              v338 += v340;
                              if (v339 == 0x10000)
                                goto LABEL_548;
                            }
                            if ((int)v339 <= 0x10000)
                            {
                              v350 = (unsigned __int16)~(_WORD)v347;
                              v351 = v348 >> 32;
                              v352 = v348 & 0xFFFFFFFF00000000;
                              v353 = v340 * HIDWORD(v348);
                              while (1)
                              {
                                v354 = v353 >> v326;
                                if (v353 >> v326 >= 0xFFFF)
                                  v354 = 0xFFFF;
                                v355 = v354
                                     - (int)(sqrt(v346 * v346 + ((double)v354 - v344) * ((double)v354 - v344))
                                           - v346
                                           + 0.5);
                                if (v350 == (unsigned __int16)v355)
                                  break;
                                *(_WORD *)(v342 + 2 * v351++) = v355;
                                v352 += 0x100000000;
                                v353 += v340;
                                if (v351 == 0x10000)
                                  goto LABEL_548;
                              }
                              if ((int)v351 < 0x10000)
                              {
                                v356 = v352 >> 32;
                                v357 = 0x10000 - (v352 >> 32);
                                if (v357 < 0x10)
                                  goto LABEL_882;
                                v358 = vdupq_n_s16(v355);
                                v356 += v357 & 0xFFFFFFFFFFFFFFF0;
                                v359 = (0x10000 - (int)v351) & 0xFFFFFFFFFFFFFFF0;
                                v360 = (int16x8_t *)(v342 + 2 * (int)v351 + 16);
                                do
                                {
                                  v360[-1] = v358;
                                  *v360 = v358;
                                  v360 += 2;
                                  v359 -= 16;
                                }
                                while (v359);
                                if (v357 != (v357 & 0xFFFFFFFFFFFFFFF0))
                                {
LABEL_882:
                                  do
                                    *(_WORD *)(v342 + 2 * v356++) = v355;
                                  while (v356 != 0x10000);
                                }
                              }
                            }
LABEL_548:
                            v880 = sub_1D53899CC;
                            v881 = sub_1D538A058;
                            v882 = sub_1D538A7F4;
                            v883 = sub_1D538ACCC;
                            v884 = sub_1D538B0EC;
                          }
                          if (v921 <= 0)
                            sub_1D5444668();
                          v361 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
                          v885 = sub_1D538B90C;
                          v889 = v921;
                          v890 = 0x10000u / v921;
                          v891 = v622;
                          v362 = *(unsigned __int8 *)(v3 + 420);
                          v363.i32[0] = *(_DWORD *)(v3 + 312);
                          v364 = *(_DWORD *)(v3 + 324);
                          v365 = v647;
                          v366 = v647[20].u8[0];
                          v895 = (int)llround(v548 * 65535.0) >> 4;
                          v367 = (int)llround(v552 * 65535.0) >> 4;
                          v896 = v367;
                          v368 = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v583), v361))));
                          v369 = (int)llround(v550 * 65535.0) >> 4;
                          v897 = v369;
                          v370 = vshr_n_s32(vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v585), v361)))), 4uLL);
                          v898 = v370;
                          v371 = (int)llround(v555 * 65535.0) >> 4;
                          v899 = v371;
                          v372 = (int)llround(v553 * 65535.0) >> 4;
                          v900 = v372;
                          v373 = vshr_n_s32(v368, 4uLL);
                          v901 = v373;
                          v902 = v574;
                          v903 = v573;
                          v904 = v572;
                          if (v366)
                          {
                            v374 = (v923 * v923 + 0x8000) >> 16;
                            v375 = (HIDWORD(v922) * HIDWORD(v922) + 0x8000) >> 16;
                            v376 = (v922 * v922 + 0x8000) >> 16;
                            v377 = (v921 * v921 + 0x8000) >> 16;
                            v378 = *(unsigned __int8 *)(v558 + (int)(v376 - v374));
                            v379 = *(_DWORD *)(v581 + 4 * (int)(v376 - v374)) >> v378;
                            v380 = *(unsigned __int8 *)(v558 + (int)(v377 - v375));
                            v381 = *(_DWORD *)(v581 + 4 * (int)(v377 - v375)) >> v380;
                            v363.i32[1] = v364;
                            v908 = v622;
                            v909 = v379;
                            v910 = 16 - v378;
                            v911 = v374;
                            v912 = v376;
                            v913 = v381;
                            v914 = 16 - v380;
                            v915 = v375;
                            v916 = v377;
                            v917 = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(v363), (float64x2_t)vdupq_n_s64(0x40B0000000000000uLL)))));
                          }
                          v906 = v581;
                          v907 = v558;
                          v382 = v370.i32[0] | v373.i32[0] | v367 | v369 | v371 | v372 | v572 | v573 | v574;
                          v383 = sub_1D538EEE0;
                          v15 = v382 == 0;
                          v384 = sub_1D539103C;
                          if (v15)
                            v384 = sub_1D5390D7C;
                          else
                            v383 = (uint64_t (*)(uint64_t, _QWORD *))sub_1D538FE14;
                          if (v366)
                            v385 = v383;
                          else
                            v385 = v384;
                          v892 = v385;
                          sig = v920[1].__sig;
                          if (*(_WORD *)(sig + 131070))
                          {
LABEL_559:
                            v905 = sig;
                            v651 = v301 | 0x180000;
                            if (v634)
                            {
                              v653 = v638;
                              v654 = v638;
                              v655 = v637;
                              v656 = v637;
                              v664 = v638;
                              v665 = v638;
                              v666 = v637;
                              v667 = v637;
                              v677 = v638;
                              v678 = v638;
                              v679 = v637;
                              v680 = v637;
                              v682 = v638;
                              v683 = v638;
                              v684 = v637;
                              v685 = v637;
                              v693 = v638;
                              v694 = v638;
                              v695 = v637;
                              v696 = v637;
                              v706 = v638;
                              v707.i64[0] = v638;
                              v707.i64[1] = v637;
                              v708 = v637;
                              v715 = v638;
                              v716.i64[0] = v638;
                              v716.i64[1] = v637;
                              v717 = v637;
                              v722 = v638;
                              v723 = v638;
                              v724 = v637;
                              v725 = v637;
                              v732 = v638;
                              v733.i64[0] = v638;
                              v733.i64[1] = v637;
                              v734 = v637;
                              v740 = v638;
                              v741 = v638;
                              v742.i64[0] = v637;
                              v742.i64[1] = v637;
                              v754 = v638;
                              v755 = v638;
                              v756 = v637;
                              v757 = v637;
                              v767 = v638;
                              v768 = v638;
                              v769 = v637;
                              v770 = v637;
                              v786 = v638;
                              v787 = v638;
                              v788 = v637;
                              v789 = v637;
                              v808 = v638;
                              v809 = v638;
                              v810 = v637;
                              v811 = v637;
                              v818 = v638;
                              v819 = v638;
                              v820 = v637;
                              v821 = v637;
                              v825 = v638;
                              v826 = v638;
                              v827 = v637;
                              v828 = v637;
                              v832 = v638;
                              v833 = v638;
                              v834 = v637;
                              v835 = v637;
                              v838 = v638;
                              v839 = v638;
                              v840 = v637;
                              v841 = v637;
                              v846 = v638;
                              v847 = v638;
                              v848 = v637;
                              v849 = v637;
                              v886 = v638;
                              v887.i64[0] = v638;
                              v887.i64[1] = v637;
                              v888 = v637;
                              v893.i64[0] = v638;
                              v893.i64[1] = v638;
                              v894.i64[0] = v637;
                              v894.i64[1] = v637;
                              *(int64x2_t *)&v636[16] = vdupq_n_s64(0x28uLL);
                              *(_OWORD *)v636 = *(_OWORD *)&v636[16];
LABEL_818:
                              v506 = sub_1D536BD60();
                              v507 = v506;
                              v508 = (v631 + 511) >> 9;
                              v509 = (v616 + 255) >> 8;
                              v632 = 0;
                              v633 = 0;
                              if (v509 * v508 > v506)
                              {
                                if (v509 * v508 % v506)
                                {
                                  v509 = (v509 + 1) & 0x1FFFFFFFFFFFFFELL;
                                  if (v509 * v508 % v506)
                                    v508 = (v508 + 1) & 0xFFFFFFFFFFFFFELL;
                                }
                              }
                              v510 = (v631 / v508 + 63) & 0xFFFFFFFFFFFFFFC0;
                              v511 = (v616 / v509 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                              *(_QWORD *)&v635 = v510;
                              *((_QWORD *)&v635 + 1) = v511;
                              if (v510)
                                v510 = (v631 + v510 - 1) / v510 - 1;
                              if (v511)
                                v511 = (v616 + v511 - 1) / v511 - 1;
                              v512 = *(_QWORD *)&v636[24] + *(_QWORD *)&v636[16];
                              if (*(_QWORD *)&v636[24] + *(_QWORD *)&v636[16] >= v612)
                                v512 = v612;
                              v513 = *(_QWORD *)&v636[8] + *(_QWORD *)v636;
                              if (*(_QWORD *)&v636[8] + *(_QWORD *)v636 >= v611)
                                v513 = v611;
                              v514 = v611 * v612;
                              v515 = (v611 + v513 * v511) * (v612 + v512 * v510) - v611 * v612;
                              v516 = sub_1D536BCC8();
                              if ((_DWORD)v507 == 1 || v516)
                              {
                                if (v514 >= 2 * v515)
                                {
LABEL_834:
                                  if ((v651 & 0x20) != 0)
                                  {
                                    v634 = 1;
                                  }
                                  else if (!v634)
                                  {
                                    goto LABEL_841;
                                  }
                                  v635 = 0uLL;
                                  v653 = v638;
                                  v654 = v638;
                                  v655 = v637;
                                  v656 = v637;
                                  v664 = v638;
                                  v665 = v638;
                                  v666 = v637;
                                  v667 = v637;
                                  v677 = v638;
                                  v678 = v638;
                                  v679 = v637;
                                  v680 = v637;
                                  v682 = v638;
                                  v683 = v638;
                                  v684 = v637;
                                  v685 = v637;
                                  v693 = v638;
                                  v694 = v638;
                                  v695 = v637;
                                  v696 = v637;
                                  v706 = v638;
                                  v707.i64[0] = v638;
                                  v707.i64[1] = v637;
                                  v708 = v637;
                                  v715 = v638;
                                  v716.i64[0] = v638;
                                  v716.i64[1] = v637;
                                  v717 = v637;
                                  v722 = v638;
                                  v723 = v638;
                                  v724 = v637;
                                  v725 = v637;
                                  v732 = v638;
                                  v733.i64[0] = v638;
                                  v733.i64[1] = v637;
                                  v734 = v637;
                                  v740 = v638;
                                  v741 = v638;
                                  v742.i64[0] = v637;
                                  v742.i64[1] = v637;
                                  v754 = v638;
                                  v755 = v638;
                                  v756 = v637;
                                  v757 = v637;
                                  v767 = v638;
                                  v768 = v638;
                                  v769 = v637;
                                  v770 = v637;
                                  v786 = v638;
                                  v787 = v638;
                                  v788 = v637;
                                  v789 = v637;
                                  v808 = v638;
                                  v809 = v638;
                                  v810 = v637;
                                  v811 = v637;
                                  v818 = v638;
                                  v819 = v638;
                                  v820 = v637;
                                  v821 = v637;
                                  v825 = v638;
                                  v826 = v638;
                                  v827 = v637;
                                  v828 = v637;
                                  v832 = v638;
                                  v833 = v638;
                                  v834 = v637;
                                  v835 = v637;
                                  v838 = v638;
                                  v839 = v638;
                                  v840 = v637;
                                  v841 = v637;
                                  v846 = v638;
                                  v847 = v638;
                                  v848 = v637;
                                  v849 = v637;
                                  v886 = v638;
                                  v887.i64[0] = v638;
                                  v887.i64[1] = v637;
                                  v888 = v637;
                                  v893.i64[0] = v638;
                                  v893.i64[1] = v638;
                                  v894.i64[0] = v637;
                                  v894.i64[1] = v637;
                                  *(int64x2_t *)&v636[16] = vdupq_n_s64(0x28uLL);
                                  *(_OWORD *)v636 = *(_OWORD *)&v636[16];
LABEL_841:
                                  if (v635 == 0)
                                  {
                                    v517 = 1;
                                  }
                                  else
                                  {
                                    if ((_DWORD)v635)
                                      v518 = v635;
                                    else
                                      v518 = v641;
                                    v519 = (v641 + v518 - 1) / v518;
                                    if (DWORD2(v635))
                                      v520 = DWORD2(v635);
                                    else
                                      v520 = v642;
                                    v517 = (v642 + v520 - 1) / v520 * v519;
                                  }
                                  sub_1D536BADC((uint64_t)sub_1D53788AC, v517, (uint64_t)&v632, (uint64_t)sub_1D5379878, (uint64_t)sub_1D5379C2C);
                                  v521 = v920;
                                  if (v920)
                                  {
                                    if (v919)
                                    {
                                      v522 = v919 + 4;
                                      do
                                        v523 = __ldaxr(v522);
                                      while (__stlxr(v523 - 1, v522));
                                      v919 = 0;
                                    }
                                    pthread_mutex_destroy(v521);
                                    j__free_3(v521);
                                  }
                                  return 1;
                                }
                              }
                              else if (v515 / (v507 - 1) <= v514)
                              {
                                goto LABEL_834;
                              }
                              v634 = 1;
                              goto LABEL_834;
                            }
                            v394 = 2;
                            if (v650 == 4)
                              v395 = 2;
                            else
                              v395 = 3;
                            if (v650 == 4)
                              v396 = 3;
                            else
                              v396 = 2;
                            if ((v301 & 0x40000) != 0)
                            {
                              v398 = v396 | 8;
                              LODWORD(v399) = v395 | 8;
                              v397 = 11;
                              v394 = 10;
                              v615 = 12;
                              v619 = v395 | 8;
                              v623 = v396 | 8;
                            }
                            else
                            {
                              v619 = 0;
                              v623 = 0;
                              v615 = 0;
                              v397 = 3;
                              v398 = v396;
                              LODWORD(v399) = v395;
                            }
                            if ((v301 & 0x20000) != 0)
                            {
                              v394 |= 5uLL;
                              v397 += 5;
                              v398 += 5;
                              v399 = (v399 + 5);
                              v598 = v399;
                              v600 = v394;
                              v604 = v398;
                              v606 = v397;
                            }
                            else
                            {
                              v598 = 0;
                              v600 = 0;
                              v604 = 0;
                              v606 = 0;
                            }
                            if ((v301 & 0x10000) != 0)
                            {
                              v402 = v394 + 2;
                              v401 = v397 + 2;
                              v400 = v398 + 2;
                              v394 = v402;
                              v397 = v401;
                              v398 = v400;
                              LODWORD(v399) = v399 + 2;
                              v395 = v399;
                              v586 = v402;
                              v590 = v401;
                              v592 = v399;
                              v396 = v400;
                            }
                            else
                            {
                              v590 = 0;
                              v592 = 0;
                              v586 = 0;
                              v400 = 0;
                              v401 = 3;
                              v402 = 2;
                            }
                            if ((v301 & 0x8000) != 0)
                            {
                              v403 = v394 + 2;
                              v398 += 2;
                              if (v402 <= v394 + 2)
                                v394 += 2;
                              else
                                v394 = v402;
                              v578 = v397 + 2;
                              v580 = v398;
                              if (v401 <= v397 + 2)
                                v397 += 2;
                              else
                                v397 = v401;
                              if (v396 > v398)
                                v398 = v396;
                              v571 = (v399 + 2);
                              if (v395 <= v571)
                                v399 = (v399 + 2);
                              else
                                v399 = v395;
                              v402 = v394;
                              v401 = v397;
                              v396 = v398;
                              v395 = v399;
                            }
                            else
                            {
                              v578 = 0;
                              v580 = 0;
                              v403 = 0;
                              v571 = 0;
                            }
                            if ((v301 & 0x4000) != 0)
                            {
                              v406 = v394 + 2;
                              v405 = v397 + 2;
                              v404 = v398 + 2;
                              v407 = (v399 + 2);
                              if (v402 <= v394 + 2)
                                v394 += 2;
                              else
                                v394 = v402;
                              if (v401 <= v405)
                                v397 += 2;
                              else
                                v397 = v401;
                              if (v396 <= v404)
                                v398 += 2;
                              else
                                v398 = v396;
                              if (v395 <= v407)
                                v395 = (v399 + 2);
                              LODWORD(v399) = v395;
                              v402 = v394;
                              v401 = v397;
                              v396 = v398;
                            }
                            else
                            {
                              v404 = 0;
                              LOWORD(v405) = 0;
                              v406 = 0;
                              v407 = 0;
                            }
                            v408 = (v394 << 32) + 0x400000000;
                            v409 = HIDWORD(v408);
                            v410 = (v397 << 32) + 0x400000000;
                            v411 = HIDWORD(v410);
                            v412 = v398 + 4;
                            v413 = (v399 + 4);
                            if (v402 <= HIDWORD(v408))
                              v414 = HIDWORD(v408);
                            else
                              v414 = v402;
                            if (v401 <= v411)
                              v401 = HIDWORD(v410);
                            if (v396 <= v412)
                              v396 = v398 + 4;
                            if (v395 <= v413)
                              v395 = (v399 + 4);
                            if ((v301 & 0x1000) != 0)
                            {
                              v419 = vcvtms_s32_f32(v365[20].f32[1]);
                              v420 = vcvtms_s32_f32(v365[21].f32[0]);
                              if (v420 > v419)
                                v419 = v420;
                              v418 = 2;
                              if (v365[20].i8[2])
                                v421 = 6;
                              else
                                v421 = 2;
                              v415 = v421 + 2 * v419;
                              if (v415 > 2)
                                v418 = v415;
                              v422 = v418 + 4;
                              if ((v301 & 0x800) != 0)
                                v416 = v418;
                              else
                                v416 = 0;
                              if ((v301 & 0x800) == 0)
                                v422 = 0;
                              v547 = v422;
                            }
                            else
                            {
                              v415 = 0;
                              v416 = (unsigned __int16)(v301 & 0x800) >> 10;
                              v417 = 6;
                              if ((v301 & 0x800) == 0)
                                v417 = 0;
                              v547 = v417;
                              v418 = 2;
                            }
                            v423 = v418 + 3;
                            v424 = v423 & 0xFFFFFFFFFFFFFFFCLL;
                            v425 = v423 & 0xFFFFFFFFFFFFFFFCLL | 1;
                            v426 = v423 | 3;
                            if (v414 <= v425)
                              v427 = v425;
                            else
                              v427 = v414;
                            v428.i64[0] = v401;
                            v428.i64[1] = v396;
                            if (v395 <= v426)
                              LODWORD(v395) = v426;
                            v429 = vdupq_n_s64(v426);
                            v430 = (int8x16_t)vshrq_n_s64(vshlq_n_s64((int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v428, (uint64x2_t)v429), v428, (int8x16_t)v429), 0x20uLL), 0x20uLL);
                            v431 = (int)v395;
                            if (v409 <= v415)
                              v432 = v415;
                            else
                              v432 = HIDWORD(v408);
                            if (v411 <= v415)
                              v433 = v415;
                            else
                              v433 = HIDWORD(v410);
                            if (v412 <= v415)
                              v434 = v415;
                            else
                              v434 = v398 + 4;
                            if (v415 <= v413)
                              v435 = v413;
                            else
                              v435 = v415;
                            v436 = v432 << 32;
                            v437 = v433 << 32;
                            if ((v301 & 0x1000) != 0)
                              v438 = v436;
                            else
                              v438 = v408;
                            if ((v301 & 0x1000) != 0)
                              v439 = v437;
                            else
                              v439 = v410;
                            if ((v301 & 0x1000) != 0)
                              v440 = v434;
                            else
                              v440 = v398 + 4;
                            if ((v301 & 0x1000) != 0)
                              v441 = v435;
                            else
                              v441 = v413;
                            v442 = (uint64_t)(v438 + 0x300000000) >> 32;
                            v443 = *(_QWORD *)&vadd_s32((int32x2_t)__PAIR64__(v441, v440), (int32x2_t)0x100000001) & 0xFFFFFFFEFFFFFFFELL;
                            v444 = vadd_s32((int32x2_t)v443, (int32x2_t)0x300000003);
                            v445.i64[0] = v444.i32[0];
                            v445.i64[1] = v444.i32[1];
                            v446 = v445;
                            v447 = vadd_s32((int32x2_t)v443, (int32x2_t)0x200000002);
                            v445.i64[0] = v447.i32[0];
                            v445.i64[1] = v447.i32[1];
                            v448 = (int8x16_t)v445;
                            if (v427 <= v442)
                              v449 = (uint64_t)(v438 + 0x300000000) >> 32;
                            else
                              v449 = v427;
                            v450 = v446.u64[1];
                            if (v431 > v446.i64[1])
                              v450 = v431;
                            v451 = (uint64_t)(v438 + 0x400000000) >> 32;
                            v429.i64[0] = (uint64_t)(v439 + 0x300000000) >> 32;
                            v452 = vzip1q_s64(v429, v446);
                            v453 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v430, (uint64x2_t)v452), v430, (int8x16_t)v452);
                            v452.i64[0] = v439;
                            v452.i64[1] = v448.i64[0] << 32;
                            v454 = vshrq_n_s64(vaddq_s64(v452, (int64x2_t)xmmword_1D544D8F0), 0x20uLL);
                            v455 = v448.i32[2] + 2;
                            v456 = v448.i32[2] + 2;
                            if (v449 <= v451)
                              v457 = (uint64_t)(v438 + 0x400000000) >> 32;
                            else
                              v457 = v449;
                            v458 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v453, (uint64x2_t)v454), v453, (int8x16_t)v454);
                            if (v450 <= v455)
                              v459 = v455;
                            else
                              v459 = v450;
                            if ((v301 & 0x80) != 0)
                            {
                              v460 = v416 + 1;
                              if (v457 <= v460)
                                v457 = v416 + 1;
                              v461 = (int8x16_t)vdupq_n_s64(v460);
                              v458 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v458, (uint64x2_t)v461), (int8x16_t)v458, v461);
                              if (v459 <= v460)
                                v459 = v416 + 1;
                            }
                            else
                            {
                              v460 = 0;
                            }
                            v462 = (uint64_t)((((v457 << 32) + 0x300000000) & 0xFFFFFFFC00000000) + 0x400000000) >> 32;
                            v463 = (int32x4_t)vshrq_n_s64(vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(vshlq_n_s64(v458, 0x20uLL), vdupq_n_s64(0x300000000uLL)), (int8x16_t)vdupq_n_s64(0xFFFFFFFC00000000)), vdupq_n_s64(0x400000000uLL)), 0x20uLL);
                            v464 = (uint64_t)((((v459 << 32) + 0x300000000) & 0xFFFFFFFC00000000) + 0x400000000) >> 32;
                            if (v457 <= v462)
                              v465 = (uint64_t)((((v457 << 32) + 0x300000000) & 0xFFFFFFFC00000000) + 0x400000000) >> 32;
                            else
                              v465 = v457;
                            v466 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v458, (uint64x2_t)v463), (int8x16_t)v458, (int8x16_t)v463);
                            if (v459 <= v464)
                              v467 = (uint64_t)((((v459 << 32) + 0x300000000) & 0xFFFFFFFC00000000) + 0x400000000) >> 32;
                            else
                              v467 = v459;
                            if ((v301 & 0x20) != 0)
                              v468 = v465;
                            else
                              v468 = 0;
                            v554 = v468;
                            if ((v301 & 0x20) != 0)
                              v469 = v467;
                            else
                              v469 = 0;
                            v557 = v469;
                            if ((v301 & 0x10) != 0)
                            {
                              v470 = (int)v465 + 4;
                              v471 = vshrq_n_s64(vaddq_s64(vshlq_n_s64(v466, 0x20uLL), vdupq_n_s64(0x400000000uLL)), 0x20uLL);
                              v467 = (int)v467 + 4;
                              v549 = v471.i64[1];
                              v551 = v471.i64[0];
                              v465 = v470;
                              v556 = v467;
                            }
                            else
                            {
                              v470 = 0;
                              v549 = 0;
                              v551 = 0;
                              v556 = 0;
                              v471 = v466;
                            }
                            if ((v301 & 8) != 0)
                            {
                              v467 = (int)v467 + 2;
                              v471 = vshrq_n_s64(vaddq_s64(vshlq_n_s64(v471, 0x20uLL), vdupq_n_s64(0x200000000uLL)), 0x20uLL);
                              v465 = (int)v465 + 2;
                              v563 = v471.i64[0];
                              v565 = v465;
                              v567 = v471.i64[1];
                              v569 = v467;
                              v559 = 4;
                              v561 = 7;
                            }
                            else
                            {
                              v563 = 0;
                              v565 = 0;
                              v567 = 0;
                              v569 = 0;
                              v561 = 3;
                              v559 = 3;
                            }
                            v472 = v471.i64[1];
                            v473 = v471.i64[0];
                            if ((v301 & 4) != 0)
                              v474 = v465;
                            else
                              v474 = 0;
                            if ((v301 & 4) == 0)
                            {
                              v473 = 0;
                              v472 = 0;
                            }
                            v575 = v472;
                            if ((v301 & 4) != 0)
                              v475 = v467;
                            else
                              v475 = 0;
                            if ((v301 & 2) != 0)
                            {
                              v465 = (int)v465 + 2;
                              v471 = vshrq_n_s64(vaddq_s64(vshlq_n_s64(v471, 0x20uLL), (int64x2_t)xmmword_1D544D900), 0x20uLL);
                              v467 = (int)v467 + 1;
                              v582 = v471.i64[0];
                              v584 = v467;
                              v630 = v471.u64[1];
                              v588 = v465;
                            }
                            else
                            {
                              v588 = 0;
                              v582 = 0;
                              v584 = 0;
                              v630 = 0;
                            }
                            if ((v301 & 1) != 0)
                            {
                              v608 = v471.i32[0] + 4;
                              v610 = (int)v465 + 4;
                              v602 = v471.i32[2] + 4;
                              v596 = (int)v467 + 4;
                            }
                            else
                            {
                              v608 = 0;
                              v610 = 0;
                              v602 = 0;
                              v596 = 0;
                            }
                            v893 = vdupq_n_s64(4uLL);
                            v894 = v893;
                            v886 = 4;
                            v887 = v893;
                            v888 = 4;
                            if ((v301 & 0x40000) != 0)
                            {
                              v846 = v615;
                              v847 = v615;
                              v848 = (v623 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                              v849 = (v619 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                              if ((v301 & 0x20000) == 0)
                              {
LABEL_717:
                                if ((v301 & 0x10000) == 0)
                                  goto LABEL_718;
                                goto LABEL_729;
                              }
                            }
                            else if ((v301 & 0x20000) == 0)
                            {
                              goto LABEL_717;
                            }
                            v838 = (v600 + 3) & 0x1C;
                            v839 = (v606 + 3) & 0x3C;
                            v840 = (v604 + 3) & 0x1FFFFFFFCLL;
                            v841 = (v598 + 3) & 0x1FFFFFFFCLL;
                            if ((v301 & 0x10000) == 0)
                            {
LABEL_718:
                              if ((v301 & 0x8000) == 0)
                                goto LABEL_719;
                              goto LABEL_732;
                            }
LABEL_729:
                            if (v400 <= v630)
                              v400 = v630;
                            v832 = (v586 + 3) & 0x3C;
                            v833 = (v590 + 3) & 0x7C;
                            v834 = (v400 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                            v835 = (v592 + 3) & 0x1FFFFFFFCLL;
                            if ((v301 & 0x8000) == 0)
                            {
LABEL_719:
                              if ((v301 & 0x4000) == 0)
                                goto LABEL_721;
                              goto LABEL_720;
                            }
LABEL_732:
                            v825 = (v403 + 3) & 0x7C;
                            v826 = (v578 + 3) & 0xFC;
                            v827 = (v580 + 3) & 0x1FFFFFFFCLL;
                            v828 = (v571 + 3) & 0x1FFFFFFFCLL;
                            if ((v301 & 0x4000) == 0)
                            {
LABEL_721:
                              v808 = ((_WORD)v409 + 3) & 0x1FC;
                              v809 = ((_WORD)v411 + 3) & 0x3FC;
                              v810 = (v398 + 7) & 0x1FFFFFFFCLL;
                              v811 = (v413 + 3) & 0x1FFFFFFFCLL;
                              if ((v301 & 0x1000) == 0)
                                goto LABEL_738;
                              v476 = (v415 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                              v786 = v476;
                              v787 = v476;
                              v788 = v476;
                              v789 = v476;
                              if (v476 <= *(_QWORD *)v636)
                              {
                                if (v476 <= *(_QWORD *)&v636[8])
                                {
LABEL_724:
                                  if (v476 > *(_QWORD *)&v636[16])
                                    goto LABEL_725;
                                  goto LABEL_736;
                                }
                              }
                              else
                              {
                                *(_QWORD *)v636 = (v415 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                if (v476 <= *(_QWORD *)&v636[8])
                                  goto LABEL_724;
                              }
                              *(_QWORD *)&v636[8] = (v415 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                              if (v476 > *(_QWORD *)&v636[16])
                              {
LABEL_725:
                                *(_QWORD *)&v636[16] = (v415 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                if (v476 <= *(_QWORD *)&v636[24])
                                {
LABEL_738:
                                  v477 = (uint64_t)(v438 + 0x200000000) >> 32;
                                  v478 = (uint64_t)(v439 + 0x200000000) >> 32;
                                  if ((v301 & 0x800) != 0)
                                  {
                                    v479 = (v547 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                    v767 = v479;
                                    v768 = v479;
                                    v769 = v479;
                                    v770 = v479;
                                    if (v479 > *(_QWORD *)v636)
                                      *(_QWORD *)v636 = (v547 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                    if (v479 > *(_QWORD *)&v636[8])
                                      *(_QWORD *)&v636[8] = (v547 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                  }
                                  v754 = v424 + 4;
                                  v755 = (v426 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                  v756 = v755;
                                  v757 = v755;
                                  if (v477 <= v442)
                                    v477 = (uint64_t)(v438 + 0x300000000) >> 32;
                                  if (v478 <= (uint64_t)(v439 + 0x300000000) >> 32)
                                    v478 = (uint64_t)(v439 + 0x300000000) >> 32;
                                  v480 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v448, (uint64x2_t)v446), v448, (int8x16_t)v446);
                                  v740 = (v477 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                  v481 = vdupq_n_s64(3uLL);
                                  v741 = (v478 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                  v482 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
                                  v742 = vandq_s8((int8x16_t)vaddq_s64(v480, v481), v482);
                                  v483 = (v451 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                  v484 = (v456 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                  v734 = v484;
                                  *(_QWORD *)v636 = v483;
                                  v485 = (int32x4_t)vandq_s8((int8x16_t)vaddq_s64(v454, v481), v482);
                                  v733 = v485;
                                  v486 = v485.u64[1];
                                  *(int32x4_t *)&v636[8] = v485;
                                  v487 = v485.i64[0];
                                  v732 = v483;
                                  *(_QWORD *)&v636[24] = v484;
                                  if ((v301 & 0x80) == 0)
                                    goto LABEL_752;
                                  v488 = (v460 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                  v722 = v488;
                                  v723 = v488;
                                  v724 = v488;
                                  v725 = v488;
                                  if (v488 <= v483)
                                  {
                                    if (v488 <= v485.i64[0])
                                    {
LABEL_750:
                                      if (v488 > v485.i64[1])
                                        goto LABEL_751;
                                      goto LABEL_755;
                                    }
                                  }
                                  else
                                  {
                                    *(_QWORD *)v636 = (v460 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                    v483 = *(_QWORD *)v636;
                                    if (v488 <= v485.i64[0])
                                      goto LABEL_750;
                                  }
                                  *(_QWORD *)&v636[8] = (v460 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                  v487 = *(_QWORD *)&v636[8];
                                  if (v488 > v485.i64[1])
                                  {
LABEL_751:
                                    *(_QWORD *)&v636[16] = (v460 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                    v486 = *(_QWORD *)&v636[16];
                                    if (v488 <= v484)
                                    {
LABEL_752:
                                      v488 = (v456 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                      goto LABEL_757;
                                    }
LABEL_756:
                                    *(_QWORD *)&v636[24] = (v460 + 3) & 0xFFFFFFFFFFFFFFFCLL;
LABEL_757:
                                    v715 = v462;
                                    v716 = v463;
                                    v717 = v464;
                                    if (v462 <= v483)
                                    {
                                      v489 = v463.i64[0];
                                      if (v463.i64[0] <= v487)
                                      {
LABEL_759:
                                        v490 = v463.i64[1];
                                        if (v463.i64[1] > v486)
                                          goto LABEL_760;
                                        goto LABEL_766;
                                      }
                                    }
                                    else
                                    {
                                      *(_QWORD *)v636 = v462;
                                      v483 = v462;
                                      v489 = v463.i64[0];
                                      if (v463.i64[0] <= v487)
                                        goto LABEL_759;
                                    }
                                    *(_QWORD *)&v636[8] = v489;
                                    v487 = v489;
                                    v490 = v463.i64[1];
                                    if (v463.i64[1] > v486)
                                    {
LABEL_760:
                                      *(_QWORD *)&v636[16] = v490;
                                      v486 = v490;
                                      if (v464 <= v488)
                                        goto LABEL_761;
                                      goto LABEL_767;
                                    }
LABEL_766:
                                    if (v464 <= v488)
                                    {
LABEL_761:
                                      if ((v301 & 0x20) == 0)
                                        goto LABEL_762;
                                      goto LABEL_768;
                                    }
LABEL_767:
                                    *(_QWORD *)&v636[24] = v464;
                                    v488 = v464;
                                    if ((v301 & 0x20) == 0)
                                    {
LABEL_762:
                                      if ((v301 & 0x10) == 0)
                                        goto LABEL_778;
LABEL_769:
                                      v491 = (v551 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                      v492 = (v549 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                      v693 = (v470 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                      v694 = v491;
                                      v493 = (v556 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                      v695 = v492;
                                      v696 = v493;
                                      if (v693 <= v483)
                                      {
                                        if (v491 <= v487)
                                        {
LABEL_771:
                                          if (v492 > v486)
                                            goto LABEL_772;
                                          goto LABEL_776;
                                        }
                                      }
                                      else
                                      {
                                        *(_QWORD *)v636 = (v470 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                        v483 = *(_QWORD *)v636;
                                        if (v491 <= v487)
                                          goto LABEL_771;
                                      }
                                      *(_QWORD *)&v636[8] = (v551 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                      v487 = *(_QWORD *)&v636[8];
                                      if (v492 > v486)
                                      {
LABEL_772:
                                        *(_QWORD *)&v636[16] = (v549 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                        v486 = *(_QWORD *)&v636[16];
                                        if (v493 <= v488)
                                        {
LABEL_778:
                                          if ((v301 & 8) == 0)
                                            goto LABEL_788;
                                          v494 = (v561 + v563) & 0xFFFFFFFFFFFFFFFCLL;
                                          v495 = (v559 + v567) & 0xFFFFFFFFFFFFFFFCLL;
                                          v682 = (v561 + v565) & 0xFFFFFFFFFFFFFFFCLL;
                                          v683 = v494;
                                          v496 = (v559 + v569) & 0xFFFFFFFFFFFFFFFCLL;
                                          v684 = v495;
                                          v685 = v496;
                                          if (v682 <= v483)
                                          {
                                            if (v494 <= v487)
                                            {
LABEL_781:
                                              if (v495 > v486)
                                                goto LABEL_782;
                                              goto LABEL_786;
                                            }
                                          }
                                          else
                                          {
                                            *(_QWORD *)v636 = (v561 + v565) & 0xFFFFFFFFFFFFFFFCLL;
                                            v483 = *(_QWORD *)v636;
                                            if (v494 <= v487)
                                              goto LABEL_781;
                                          }
                                          *(_QWORD *)&v636[8] = (v561 + v563) & 0xFFFFFFFFFFFFFFFCLL;
                                          v487 = *(_QWORD *)&v636[8];
                                          if (v495 > v486)
                                          {
LABEL_782:
                                            *(_QWORD *)&v636[16] = (v559 + v567) & 0xFFFFFFFFFFFFFFFCLL;
                                            v486 = *(_QWORD *)&v636[16];
                                            if (v496 <= v488)
                                            {
LABEL_788:
                                              if ((v301 & 4) == 0)
                                                goto LABEL_798;
                                              v497 = (v473 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                              v498 = (v575 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                              v677 = (v474 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                              v678 = v497;
                                              v499 = (v475 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                              v679 = v498;
                                              v680 = v499;
                                              if (v677 <= v483)
                                              {
                                                if (v497 <= v487)
                                                {
LABEL_791:
                                                  if (v498 > v486)
                                                    goto LABEL_792;
                                                  goto LABEL_796;
                                                }
                                              }
                                              else
                                              {
                                                *(_QWORD *)v636 = (v474 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                v483 = *(_QWORD *)v636;
                                                if (v497 <= v487)
                                                  goto LABEL_791;
                                              }
                                              *(_QWORD *)&v636[8] = (v473 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                              v487 = *(_QWORD *)&v636[8];
                                              if (v498 > v486)
                                              {
LABEL_792:
                                                *(_QWORD *)&v636[16] = (v575 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                v486 = *(_QWORD *)&v636[16];
                                                if (v499 <= v488)
                                                {
LABEL_798:
                                                  if ((v301 & 2) == 0)
                                                    goto LABEL_808;
                                                  v500 = (v582 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                  v501 = (v630 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                  v664 = (v588 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                  v665 = v500;
                                                  v502 = (v584 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                  v666 = v501;
                                                  v667 = v502;
                                                  if (v664 <= v483)
                                                  {
                                                    if (v500 <= v487)
                                                    {
LABEL_801:
                                                      if (v501 > v486)
                                                        goto LABEL_802;
                                                      goto LABEL_806;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    *(_QWORD *)v636 = (v588 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                    v483 = *(_QWORD *)v636;
                                                    if (v500 <= v487)
                                                      goto LABEL_801;
                                                  }
                                                  *(_QWORD *)&v636[8] = (v582 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                  v487 = *(_QWORD *)&v636[8];
                                                  if (v501 > v486)
                                                  {
LABEL_802:
                                                    *(_QWORD *)&v636[16] = (v630 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                    v486 = *(_QWORD *)&v636[16];
                                                    if (v502 <= v488)
                                                    {
LABEL_808:
                                                      if ((v301 & 1) == 0)
                                                        goto LABEL_818;
                                                      v503 = (v608 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                      v504 = (v602 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                      v653 = (v610 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                      v654 = v503;
                                                      v505 = (v596 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                      v655 = v504;
                                                      v656 = v505;
                                                      if (v653 <= v483)
                                                      {
                                                        if (v503 <= v487)
                                                        {
LABEL_811:
                                                          if (v504 > v486)
                                                            goto LABEL_812;
                                                          goto LABEL_816;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        *(_QWORD *)v636 = (v610 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                        if (v503 <= v487)
                                                          goto LABEL_811;
                                                      }
                                                      *(_QWORD *)&v636[8] = (v608 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                      if (v504 > v486)
                                                      {
LABEL_812:
                                                        *(_QWORD *)&v636[16] = (v602 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                        if (v505 <= v488)
                                                          goto LABEL_818;
                                                        goto LABEL_817;
                                                      }
LABEL_816:
                                                      if (v505 <= v488)
                                                        goto LABEL_818;
LABEL_817:
                                                      *(_QWORD *)&v636[24] = (v596 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                      goto LABEL_818;
                                                    }
LABEL_807:
                                                    *(_QWORD *)&v636[24] = (v584 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                    v488 = *(_QWORD *)&v636[24];
                                                    goto LABEL_808;
                                                  }
LABEL_806:
                                                  if (v502 <= v488)
                                                    goto LABEL_808;
                                                  goto LABEL_807;
                                                }
LABEL_797:
                                                *(_QWORD *)&v636[24] = (v475 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                                v488 = *(_QWORD *)&v636[24];
                                                goto LABEL_798;
                                              }
LABEL_796:
                                              if (v499 <= v488)
                                                goto LABEL_798;
                                              goto LABEL_797;
                                            }
LABEL_787:
                                            *(_QWORD *)&v636[24] = (v559 + v569) & 0xFFFFFFFFFFFFFFFCLL;
                                            v488 = *(_QWORD *)&v636[24];
                                            goto LABEL_788;
                                          }
LABEL_786:
                                          if (v496 <= v488)
                                            goto LABEL_788;
                                          goto LABEL_787;
                                        }
LABEL_777:
                                        *(_QWORD *)&v636[24] = (v556 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                        v488 = *(_QWORD *)&v636[24];
                                        goto LABEL_778;
                                      }
LABEL_776:
                                      if (v493 <= v488)
                                        goto LABEL_778;
                                      goto LABEL_777;
                                    }
LABEL_768:
                                    v463.i32[0] = 0;
                                    v485.i32[0] = v301 & 0x20;
                                    v706 = (v554 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                    v707 = vandq_s8((int8x16_t)vaddq_s64((int64x2_t)vbicq_s8((int8x16_t)v466, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v485, v463), 0)), vdupq_n_s64(3uLL)), (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL));
                                    v708 = (v557 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                    if ((v301 & 0x10) == 0)
                                      goto LABEL_778;
                                    goto LABEL_769;
                                  }
LABEL_755:
                                  if (v488 <= v484)
                                    goto LABEL_752;
                                  goto LABEL_756;
                                }
LABEL_737:
                                *(_QWORD *)&v636[24] = (v415 + 3) & 0xFFFFFFFFFFFFFFFCLL;
                                goto LABEL_738;
                              }
LABEL_736:
                              if (v476 <= *(_QWORD *)&v636[24])
                                goto LABEL_738;
                              goto LABEL_737;
                            }
LABEL_720:
                            v818 = (v406 + 3) & 0xFC;
                            v819 = ((_WORD)v405 + 3) & 0x1FC;
                            v820 = (v404 + 3) & 0x1FFFFFFFCLL;
                            v821 = (v407 + 3) & 0x1FFFFFFFCLL;
                            goto LABEL_721;
                          }
                          v387 = (float)(1.0 / v647[57].f32[1]);
                          if (!v362)
                          {
                            v524 = 0;
                            v525 = 0.0;
                            do
                            {
                              v526 = v525;
                              v527 = pow(v526, v387);
                              v528 = v527 * 65535.0 + 0.5;
                              v529 = (int)v528 & ~((int)v528 >> 31);
                              if (v529 >= 0xFFFF)
                                LOWORD(v529) = -1;
                              *(_WORD *)(sig + v524) = v529;
                              v525 = v525 + 0.0000152590219;
                              v524 += 2;
                            }
                            while (v524 != 0x20000);
                            goto LABEL_559;
                          }
                          if (v647[57].i8[0])
                          {
                            v388 = 0;
                            v389 = 0.0;
                            do
                            {
                              v390 = v389;
                              v391 = pow(v390, v387);
                              v392 = v391 * 65535.0 + 0.5;
                              v393 = (int)v392 & ~((int)v392 >> 31);
                              if (v393 >= 0xFFFF)
                                LOWORD(v393) = -1;
                              *(_WORD *)(sig + v388) = v393;
                              v389 = v389 + 0.0000152590219;
                              v388 += 2;
                            }
                            while (v388 != 0x20000);
                            goto LABEL_559;
                          }
                          v530 = 0;
                          v620 = (float *)&v647[56] + 1;
                          v531 = 0.0;
                          while (1)
                          {
                            v543 = v531;
                            v539 = 0.0;
                            if (v543 >= 0.0)
                            {
                              if (v543 < 0.1)
                              {
                                v532 = v365[53].f32[1];
                                v533 = 0.1;
                                v534 = 0.0;
                                v535 = (float *)&v365[53];
                                v536 = (float *)&v365[54];
LABEL_864:
                                v537 = v543 / v533;
                                goto LABEL_865;
                              }
                              if (v543 < 0.2)
                              {
                                v534 = v365[53].f32[1];
                                v532 = v365[54].f32[1] - v534;
                                v543 = v543 + -0.1;
                                v533 = 0.1;
                                v535 = (float *)&v365[54];
                                v536 = (float *)&v365[55];
                                goto LABEL_864;
                              }
                              if (v543 < 0.5)
                              {
                                v534 = v365[54].f32[1];
                                v532 = v365[55].f32[1] - v534;
                                v543 = v543 + -0.2;
                                v533 = 0.3;
                                v536 = (float *)&v365[56];
                                v535 = (float *)&v365[55];
                                goto LABEL_864;
                              }
                              if (v543 < 1.0)
                              {
                                v534 = v365[55].f32[1];
                                v532 = 1.0 - v534;
                                v537 = (float)(v543 + -0.5) + (float)(v543 + -0.5);
                                v533 = 0.5;
                                v536 = (float *)&v365[56] + 1;
                                v535 = (float *)&v365[56];
LABEL_865:
                                v538 = v533 / v532;
                                v539 = v534
                                     + (float)(v532
                                             * (float)((float)((float)(v537
                                                                     * (float)(v537
                                                                             * (float)(1.0
                                                                                     - (float)((float)(v538 * *v535)
                                                                                             + (float)((float)((float)(v538 * *v536) + (float)(v538 * *v535)) + -2.0)))))
                                                             + (float)((float)(v537
                                                                             * (float)(v537
                                                                                     * (float)((float)((float)(v538 * *v536) + (float)(v538 * *v535))
                                                                                             + -2.0)))
                                                                     * v537))
                                                     + (float)((float)(v538 * *v535) * v537)));
                                if (v539 < 0.0)
                                  v539 = 0.0;
                                goto LABEL_867;
                              }
                              v539 = (float)((float)(v543 + -1.0) * *v620) + 1.0;
                            }
LABEL_867:
                            v540 = pow(v539, v387);
                            v541 = v540 * 65535.0 + 0.5;
                            v542 = (int)v541 & ~((int)v541 >> 31);
                            if (v542 >= 0xFFFF)
                              LOWORD(v542) = -1;
                            *(_WORD *)(sig + v530) = v542;
                            v531 = v531 + 0.0000152590219;
                            v530 += 2;
                            if (v530 == 0x20000)
                              goto LABEL_559;
                          }
                        }
                        v614 |= 4u;
                        v595 = v920;
                        v928 = 0u;
                        v929 = 0u;
                        memset(v927, 0, sizeof(v927));
                        v934 = 0u;
                        v935 = 0u;
                        v207 = llroundf(v587);
                        v932 = 0u;
                        v933 = 0u;
                        v208 = llroundf(v589);
                        v209 = llroundf(v591);
                        if (v618 == 7 || v618 == 5)
                        {
                          v219 = 0;
                          v220 = 0;
                          v221 = 0;
                          v212 = v597;
                          *(float *)&v932 = v597;
                          v210 = 15;
                          v211 = 13;
                          v213 = 10;
                          v214 = 8;
                          v215 = 7;
                          v216 = 5;
                          v217 = 2;
                          v218 = v599;
                        }
                        else
                        {
                          if (v618 != 4)
                            goto LABEL_381;
                          v210 = 14;
                          v211 = 12;
                          v212 = v599;
                          *((float *)&v932 + 1) = v599;
                          v213 = 11;
                          v214 = 9;
                          v215 = 6;
                          v216 = 4;
                          v217 = 3;
                          v218 = v597;
                          v219 = v209;
                          v220 = v207;
                          v221 = v208;
                          v209 = 0;
                          v208 = 0;
                          v207 = 0;
                        }
                        *(float *)((unint64_t)&v932 | (4 * v217)) = v218;
                        *((float *)&v932 + v216) = v601;
                        *((float *)&v932 + v215) = v601;
                        *((float *)&v932 + v214) = v218;
                        *((float *)&v932 + v213) = v212;
                        *((float *)&v932 + v211) = v601;
                        *((float *)&v932 + v210) = v601;
                        *(_QWORD *)&v927[0] = __PAIR64__(v219, v207);
                        *((_QWORD *)&v927[0] + 1) = __PAIR64__(v220, v209);
                        *(_QWORD *)&v927[1] = __PAIR64__(v208, v221);
                        *((_QWORD *)&v927[1] + 1) = __PAIR64__(v208, v221);
                        *(_QWORD *)&v928 = __PAIR64__(v220, v209);
                        *((_QWORD *)&v928 + 1) = __PAIR64__(v219, v207);
                        *(_QWORD *)&v929 = __PAIR64__(v208, v221);
                        *((_QWORD *)&v929 + 1) = __PAIR64__(v208, v221);
LABEL_381:
                        v222 = 0;
                        v628 = 0;
                        do
                        {
                          if (!v681[v222])
                          {
                            v223 = *(_WORD **)&v595[1].__opaque[8 * v628];
                            v224 = *((unsigned int *)v927 + v222);
                            v225 = (int)v224;
                            v226 = *((float *)&v932 + v222);
                            for (k = v222; k != 16; ++k)
                            {
                              if (*((_DWORD *)v927 + k) == (_DWORD)v224 && *((float *)&v932 + k) == v226)
                                v681[k] = v223;
                            }
                            ++v628;
                            if ((int)v224 <= 0 || (bzero(v223, 2 * v224), !WORD1(v224)))
                            {
                              v228 = (uint64_t)(int)v224 << 32;
                              v229 = 0.5;
                              v230 = 131070 - 2 * (int)v224;
                              do
                              {
                                v223[v225] = (int)v229;
                                v231 = v225 + 1;
                                v230 -= 2;
                                v228 += 0x100000000;
                                if (v225 > 65534)
                                  break;
                                v229 = v229 + v226;
                                ++v225;
                              }
                              while (v229 <= 32767.0);
                              if (v231 < 0x10000)
                                memset_pattern16((char *)v223 + (v228 >> 31), &unk_1D544D970, (v230 & 0x1FFFFFFFELL) + 2);
                            }
                          }
                          ++v222;
                        }
                        while (v222 != 16);
                        v676 = sub_1D537AD28;
                        goto LABEL_397;
                      }
                      do
                      {
                        if (v102 == *((float *)v112 + 5) && !*((_BYTE *)v112 + 24))
                          goto LABEL_237;
                        if (!atomic_load(v112 + 4))
                          v114 = (char *)v112;
                        v112 = (unsigned int *)*((_QWORD *)v112 + 1);
                        ++v113;
                      }
                      while (v112);
LABEL_228:
                      if (v114 && v113 > 3)
                      {
LABEL_236:
                        *((float *)v114 + 5) = v102;
                        v114[24] = v103;
                        *((float *)v114 + 7) = v104;
                        *((float *)v114 + 8) = v105;
                        *((float *)v114 + 9) = v106;
                        *((float *)v114 + 10) = v107;
                        *((float *)v114 + 11) = v108;
                        *((float *)v114 + 12) = v109;
                        v114[60] = v111;
                        *(_WORD *)(v114 + 61) = v932;
                        v114[63] = BYTE2(v932);
                        v112 = (unsigned int *)v114;
                        *((float *)v114 + 13) = v110;
                        *((float *)v114 + 14) = v625;
                        *((_WORD *)v114 + 65567) = 0;
                        goto LABEL_237;
                      }
                    }
                    v114 = (char *)sub_1D5441BF0(0x20040uLL);
                    if (v114)
                    {
                      v118 = qword_1EFF38730;
                      v119 = *(_QWORD **)(qword_1EFF38730 + 104);
                      *(_QWORD *)v114 = 0;
                      *((_QWORD *)v114 + 1) = v119;
                      atomic_store(0, (unsigned int *)v114 + 4);
                      if (v119)
                        *v119 = v114;
                      *(_QWORD *)(v118 + 104) = v114;
                      goto LABEL_236;
                    }
                    v919 = 0;
                    pthread_mutex_unlock((pthread_mutex_t *)qword_1EFF38730);
                    v94 = v920;
                    if (v920)
                      goto LABEL_189;
                  }
                  return 0;
                }
LABEL_177:
                v72 = 320;
                goto LABEL_187;
              }
LABEL_176:
              v927[v59++] = xmmword_1D544D860;
              if (v59 >= 1)
                goto LABEL_165;
              goto LABEL_177;
            }
          }
          else
          {
            if (v48.i32[1] == v50)
              v56 = 6;
            else
              v56 = 2;
            v55 |= v56;
            if (v51 == v50)
              v55 |= 8u;
            if (v47 != v46)
            {
              if (v48.i32[1] == v51)
                v61 = 12;
              else
                v61 = 4;
              v62 = v55 | v61;
              if ((v55 & 4) != 0)
              {
                v58 = 2;
              }
              else
              {
                v55 = v62;
                v58 = 3;
              }
              goto LABEL_113;
            }
            if (v49 == v50)
              v55 |= 0x10u;
            if (v52 == v50)
              v55 |= 0x20u;
            if ((v55 & 4) != 0)
            {
              v58 = 2;
              goto LABEL_113;
            }
            if (v48.i32[1] == v51)
              v57 = 12;
            else
              v57 = 4;
            v55 |= v57;
            v58 = 3;
          }
          if (v48.i32[1] == v49)
            v55 |= 0x10u;
          if (v48.i32[1] == v52)
            v55 |= 0x20u;
          goto LABEL_113;
        }
LABEL_52:
        if (!*(_QWORD *)(qword_1EFF38730 + 96))
        {
          pthread_mutex_lock((pthread_mutex_t *)qword_1EFF38730);
          v36 = qword_1EFF38730;
          if (!*(_QWORD *)(qword_1EFF38730 + 96))
          {
            v37 = 0;
            v38 = qword_1EFF38730 + 985472;
            v39 = 0x80000000;
            *(_DWORD *)(qword_1EFF38730 + 985472) = 0x80000000;
            v40 = (unsigned int *)(v36 + 985476);
            v41 = -16383;
            do
            {
              if (v41 + 0x4000 > v37)
              {
                v39 = 0x10000u / ((int)v41 + 0x4000);
                v37 = 0x10000 / v39;
              }
              *v40++ = v39;
            }
            while (!__CFADD__(v41++, 1));
            *(_QWORD *)(v36 + 96) = v38;
          }
          pthread_mutex_unlock((pthread_mutex_t *)v36);
        }
        goto LABEL_60;
      }
    }
  }
  return v2;
}

_QWORD *sub_1D53788AC(unsigned int *a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  _QWORD *result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  uint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  int v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  v2 = *((_QWORD *)a1 + 2);
  v3 = a1[1];
  v4 = *(_DWORD *)(v2 + 164);
  result = (_QWORD *)sub_1D536BDF4((uint64_t)a1);
  if (result)
  {
    v6 = (unint64_t)result;
    if (*(_BYTE *)(v2 + 8))
      return (_QWORD *)sub_1D536BE4C((uint64_t)a1, v6);
    v7 = *a1;
    v9 = result[12];
    v8 = result[13];
    v10 = *(_QWORD *)(v2 + 16);
    if (!v10)
      v10 = result[12];
    v11 = *(_QWORD *)(v2 + 24) ? *(_QWORD *)(v2 + 24) : result[13];
    v12 = (v8 + v11 - 1) / v11;
    v13 = v7 / v12;
    if (v7 / v12 >= (v9 + v10 - 1) / v10)
      return (_QWORD *)sub_1D536BE4C((uint64_t)a1, v6);
    v14 = *(unsigned __int8 *)(v2 + 10);
    v15 = v7 % v12 * v11;
    if (v15 + v11 <= v8)
      v16 = v11;
    else
      v16 = v8 - v15;
    v17 = v13 * v10;
    v18 = v9 - v13 * v10;
    if (v13 * v10 + v10 <= v9)
      v18 = v10;
    v19 = *(_QWORD *)(v2 + 32);
    v20 = *(_QWORD *)(v2 + 136) + v15;
    if (*(_BYTE *)(v2 + 10))
      v21 = 1;
    else
      v21 = (int)v20 - (int)v19 < 0;
    v22 = v21;
    v23 = v22 == 0;
    if (v22)
      v24 = 0;
    else
      v24 = v20 - v19;
    if (v23)
      v20 = *(_QWORD *)(v2 + 32);
    if (*(_BYTE *)(v2 + 10))
    {
      v25 = result[1];
    }
    else
    {
      v26 = v20 + v16 + *(_QWORD *)(v2 + 40);
      v25 = result[1];
      if (v26 + v24 <= v25)
        goto LABEL_31;
    }
    v26 = v25 - v24;
LABEL_31:
    v27 = *(_QWORD *)(v2 + 48);
    v28 = *(_QWORD *)(v2 + 128) + v17;
    v29 = v28 - v27;
    *(_QWORD *)(v6 + 208) = v20;
    if (v14)
      v30 = 1;
    else
      v30 = (v29 & 0x80000000) != 0;
    if (v30)
    {
      v29 = 0;
      v27 = v28;
    }
    v32 = *(_QWORD *)v6;
    v33 = v27 + v18;
    if (v14 || (v34 = *(_QWORD *)(v2 + 56) + v33, v34 + v29 > v32))
      v34 = v32 - v29;
    *(_QWORD *)(v6 + 192) = *(_QWORD *)(v6 + 120)
                          + *(_QWORD *)(v6 + 112) * v15
                          + 3 * v17 * ((unint64_t)*(int *)(v2 + 152) >> 3);
    *(_QWORD *)(v6 + 200) = v27;
    *(_QWORD *)(v6 + 168) = v18;
    *(_QWORD *)(v6 + 176) = v16;
    *(_QWORD *)(v6 + 136) = v34;
    *(_QWORD *)(v6 + 144) = v26;
    *(_QWORD *)(v6 + 360) = v34 >> 1;
    *(_QWORD *)(v6 + 368) = v26 >> 1;
    v35 = *(_QWORD *)(v6 + 16);
    v36 = *(_QWORD *)(v6 + 24) + v35 * v24 + 2 * v29;
    *(_QWORD *)(v6 + 80) = v35;
    *(_QWORD *)(v6 + 88) = v36;
    *(_QWORD *)(v6 + 64) = v24;
    *(_QWORD *)(v6 + 72) = v29;
    v37 = v26 - v20 - v16;
    *(_QWORD *)(v6 + 32) = v20;
    *(_QWORD *)(v6 + 40) = v37;
    v38 = v34 - v33;
    *(_QWORD *)(v6 + 48) = v27;
    *(_QWORD *)(v6 + 56) = v34 - v33;
    v39 = *(_DWORD *)(v2 + 164);
    v41 = *(_QWORD *)(v6 + 152);
    v40 = *(_QWORD *)(v6 + 160);
    if ((v39 & 0x20) != 0)
    {
      v101 = *(_QWORD *)(v6 + 216);
      v100 = *(_QWORD *)(v6 + 224);
      *(_QWORD *)(v6 + 152) = v101;
      *(_QWORD *)(v6 + 160) = v100;
      *(_QWORD *)(v6 + 216) = v41;
      *(_QWORD *)(v6 + 224) = v40;
      v41 = v101;
      v40 = v100;
      *(_QWORD *)(v6 + 232) = v35;
      *(_QWORD *)(v6 + 240) = v36;
      *(_QWORD *)(v6 + 248) = v101;
      *(_QWORD *)(v6 + 256) = v100;
      if ((v39 & 1) == 0)
      {
LABEL_44:
        if ((v39 & 2) == 0)
          goto LABEL_45;
        goto LABEL_64;
      }
    }
    else
    {
      *(_QWORD *)(v6 + 232) = v35;
      *(_QWORD *)(v6 + 240) = v36;
      *(_QWORD *)(v6 + 248) = v41;
      *(_QWORD *)(v6 + 256) = v40;
      if ((v39 & 1) == 0)
        goto LABEL_44;
    }
    v102 = ((_DWORD)v20 - *(_DWORD *)(v2 + 176)) & ~(((int)v20 - *(_DWORD *)(v2 + 176)) >> 31);
    v103 = (v37 - *(_DWORD *)(v2 + 184)) & ~(((int)v37 - *(_DWORD *)(v2 + 184)) >> 31);
    v104 = (v27 - *(_DWORD *)(v2 + 192)) & ~(((int)v27 - *(_DWORD *)(v2 + 192)) >> 31);
    *(_QWORD *)(v6 + 544) = v34
                          - (((v38 - *(_DWORD *)(v2 + 200)) & ~((v38 - *(_DWORD *)(v2 + 200)) >> 31))
                           + v104);
    *(_QWORD *)(v6 + 552) = v26 - (v103 + v102);
    v105 = (2 * v104);
    *(_QWORD *)(v6 + 560) = v36 + v105 + v35 * v102;
    *(_QWORD *)(v6 + 568) = v35;
    *(_QWORD *)(v6 + 576) = v40 + v105 + v41 * v102;
    *(_QWORD *)(v6 + 584) = v41;
    *(_QWORD *)(v6 + 232) = v41;
    *(_QWORD *)(v6 + 240) = v40;
    v36 = v40;
    v35 = v41;
    if ((v39 & 2) == 0)
    {
LABEL_45:
      if ((v39 & 4) == 0)
        goto LABEL_46;
      goto LABEL_65;
    }
LABEL_64:
    v106 = ((_DWORD)v20 - *(_DWORD *)(v2 + 248)) & ~(((int)v20 - *(_DWORD *)(v2 + 248)) >> 31);
    v107 = (v37 - *(_DWORD *)(v2 + 256)) & ~(((int)v37 - *(_DWORD *)(v2 + 256)) >> 31);
    v108 = ((_DWORD)v27 - *(_DWORD *)(v2 + 264)) & ~(((int)v27 - *(_DWORD *)(v2 + 264)) >> 31);
    *(_QWORD *)(v6 + 592) = v34
                          - (((v38 - *(_DWORD *)(v2 + 272)) & ~((v38 - *(_DWORD *)(v2 + 272)) >> 31))
                           + v108);
    *(_QWORD *)(v6 + 600) = v26 - (v107 + v106);
    v109 = 2 * v108;
    *(_QWORD *)(v6 + 608) = v36 + v109 + v35 * v106;
    *(_QWORD *)(v6 + 616) = v35;
    *(_QWORD *)(v6 + 624) = v40 + v109 + v41 * v106;
    *(_QWORD *)(v6 + 632) = v41;
    v110 = *(_QWORD *)(v6 + 264);
    *(_QWORD *)(v6 + 640) = *(_QWORD *)(v6 + 272) + v110 * v106 + (v108 >> 3);
    *(_QWORD *)(v6 + 648) = v110;
    *(_QWORD *)(v6 + 656) = *(_QWORD *)(v6 + 280);
    *(_QWORD *)(v6 + 232) = v41;
    *(_QWORD *)(v6 + 240) = v40;
    v36 = v40;
    v35 = v41;
    if ((v39 & 4) == 0)
    {
LABEL_46:
      if ((v39 & 8) == 0)
        goto LABEL_47;
      goto LABEL_66;
    }
LABEL_65:
    v111 = ((_DWORD)v20 - *(_DWORD *)(v2 + 368)) & ~(((int)v20 - *(_DWORD *)(v2 + 368)) >> 31);
    v112 = (v37 - *(_DWORD *)(v2 + 376)) & ~(((int)v37 - *(_DWORD *)(v2 + 376)) >> 31);
    v113 = (v27 - *(_DWORD *)(v2 + 384)) & ~(((int)v27 - *(_DWORD *)(v2 + 384)) >> 31);
    *(_QWORD *)(v6 + 664) = v34
                          - (((v38 - *(_DWORD *)(v2 + 392)) & ~((v38 - *(_DWORD *)(v2 + 392)) >> 31))
                           + v113);
    *(_QWORD *)(v6 + 672) = v26 - (v112 + v111);
    v114 = (2 * v113);
    *(_QWORD *)(v6 + 680) = v36 + v114 + v35 * v111;
    *(_QWORD *)(v6 + 688) = v35;
    *(_QWORD *)(v6 + 696) = v40 + v114 + v41 * v111;
    *(_QWORD *)(v6 + 704) = v41;
    *(_QWORD *)(v6 + 232) = v41;
    *(_QWORD *)(v6 + 240) = v40;
    if ((v39 & 8) == 0)
    {
LABEL_47:
      if ((v39 & 0x10) == 0)
        goto LABEL_48;
      goto LABEL_67;
    }
LABEL_66:
    v115 = ((_DWORD)v20 - *(_DWORD *)(v2 + 536)) & ~(((int)v20 - *(_DWORD *)(v2 + 536)) >> 31);
    v116 = (v37 - *(_DWORD *)(v2 + 544)) & ~(((int)v37 - *(_DWORD *)(v2 + 544)) >> 31);
    v117 = (v27 - *(_DWORD *)(v2 + 552)) & ~(((int)v27 - *(_DWORD *)(v2 + 552)) >> 31);
    *(_QWORD *)(v6 + 712) = v34
                          - (((v38 - *(_DWORD *)(v2 + 560)) & ~((v38 - *(_DWORD *)(v2 + 560)) >> 31))
                           + v117);
    *(_QWORD *)(v6 + 720) = v26 - (v116 + v115);
    *(_QWORD *)(v6 + 728) = v40 + (2 * v117) + v41 * v115;
    *(_QWORD *)(v6 + 736) = v41;
    *(_QWORD *)(v6 + 744) = *(_QWORD *)(v6 + 296);
    if ((v39 & 0x10) == 0)
    {
LABEL_48:
      if ((v39 & 0x20) == 0)
        goto LABEL_50;
      goto LABEL_49;
    }
LABEL_67:
    v118 = ((_DWORD)v20 - *(_DWORD *)(v2 + 600)) & ~(((int)v20 - *(_DWORD *)(v2 + 600)) >> 31);
    v119 = (v37 - *(_DWORD *)(v2 + 608)) & ~(((int)v37 - *(_DWORD *)(v2 + 608)) >> 31);
    v120 = (v27 - *(_DWORD *)(v2 + 616)) & ~(((int)v27 - *(_DWORD *)(v2 + 616)) >> 31);
    *(_QWORD *)(v6 + 752) = v34
                          - (((v38 - *(_DWORD *)(v2 + 624)) & ~((v38 - *(_DWORD *)(v2 + 624)) >> 31))
                           + v120);
    *(_QWORD *)(v6 + 760) = v26 - (v119 + v118);
    *(_QWORD *)(v6 + 768) = v40 + (2 * v120) + v41 * v118;
    *(_QWORD *)(v6 + 776) = v41;
    *(_QWORD *)(v6 + 784) = *(_QWORD *)(v6 + 304);
    if ((v39 & 0x20) == 0)
    {
LABEL_50:
      v48 = ((_DWORD)v20 - *(_DWORD *)(v2 + 792)) & ~(((int)v20 - *(_DWORD *)(v2 + 792)) >> 31);
      v49 = (v37 - *(_DWORD *)(v2 + 800)) & ~(((int)v37 - *(_DWORD *)(v2 + 800)) >> 31);
      v50 = ((_DWORD)v27 - *(_DWORD *)(v2 + 808)) & ~(((int)v27 - *(_DWORD *)(v2 + 808)) >> 31);
      *(_QWORD *)(v6 + 856) = v34
                            - (((v38 - *(_DWORD *)(v2 + 816)) & ~((v38 - *(_DWORD *)(v2 + 816)) >> 31))
                             + v50);
      *(_QWORD *)(v6 + 864) = v26 - (v49 + v48);
      *(_QWORD *)(v6 + 872) = v40 + v41 * v48 + 2 * v50;
      *(_QWORD *)(v6 + 880) = v41;
      v51 = *(_QWORD *)(v6 + 376);
      v52 = *(_QWORD *)(v6 + 384);
      *(_QWORD *)(v6 + 888) = v52 + (v48 >> 1) * v51 + 6 * (v50 >> 1);
      *(_QWORD *)(v6 + 896) = v51;
      if ((v39 & 0x80) != 0)
      {
        v53 = ((_DWORD)v20 - *(_DWORD *)(v2 + 856)) & ~(((int)v20 - *(_DWORD *)(v2 + 856)) >> 31);
        v54 = (v37 - *(_DWORD *)(v2 + 864)) & ~(((int)v37 - *(_DWORD *)(v2 + 864)) >> 31);
        v55 = ((_DWORD)v27 - *(_DWORD *)(v2 + 872)) & ~(((int)v27 - *(_DWORD *)(v2 + 872)) >> 31);
        *(_QWORD *)(v6 + 904) = v34
                              - (((v38 - *(_DWORD *)(v2 + 880)) & ~((v38 - *(_DWORD *)(v2 + 880)) >> 31))
                               + v55);
        *(_QWORD *)(v6 + 912) = v26 - (v54 + v53);
        *(_QWORD *)(v6 + 920) = v40 + v41 * v53 + 2 * v55;
        *(_QWORD *)(v6 + 928) = v41;
        v56 = *(_QWORD *)(v6 + 392);
        *(_QWORD *)(v6 + 936) = *(_QWORD *)(v6 + 400) + (v53 >> 1) * v56 + (v55 >> 1);
        *(_QWORD *)(v6 + 944) = v56;
      }
      v57 = *(_QWORD *)(v6 + 472);
      v58 = v20 - *(_DWORD *)(v2 + 928);
      v59 = ((_DWORD)v27 - *(_DWORD *)(v2 + 944)) & ~(((int)v27 - *(_DWORD *)(v2 + 944)) >> 31);
      v60 = *(_DWORD *)(v2 + 936);
      *(_QWORD *)(v6 + 952) = v34
                            - (((v38 - *(_DWORD *)(v2 + 952)) & ~((v38 - *(_DWORD *)(v2 + 952)) >> 31))
                             + v59);
      v61 = v58 & ~(v58 >> 31);
      *(_QWORD *)(v6 + 960) = v26 - ((((_DWORD)v37 - v60) & ~(((int)v37 - v60) >> 31)) + v61);
      v62 = 2 * v59;
      *(_QWORD *)(v6 + 968) = v40 + v62 + v41 * v61;
      *(_QWORD *)(v6 + 976) = v41;
      v63 = *(_QWORD *)(v6 + 504);
      *(_QWORD *)(v6 + 984) = v63 + v62 + v57 * v61;
      *(_QWORD *)(v6 + 992) = v57;
      *(_QWORD *)(v6 + 1000) = v52 + (v61 >> 1) * v51 + 6 * (v59 >> 1);
      *(_QWORD *)(v6 + 1008) = v51;
      v64 = ((_DWORD)v20 - *(_DWORD *)(v2 + 992)) & ~(((int)v20 - *(_DWORD *)(v2 + 992)) >> 31);
      LODWORD(v59) = (v37 - *(_DWORD *)(v2 + 1000)) & ~(((int)v37 - *(_DWORD *)(v2 + 1000)) >> 31);
      v65 = ((_DWORD)v27 - *(_DWORD *)(v2 + 1008)) & ~(((int)v27 - *(_DWORD *)(v2 + 1008)) >> 31);
      *(_QWORD *)(v6 + 1016) = v34
                             - (((v38 - *(_DWORD *)(v2 + 1016)) & ~((v38 - *(_DWORD *)(v2 + 1016)) >> 31))
                              + v65);
      *(_QWORD *)(v6 + 1024) = v26 - (v59 + v64);
      v66 = 2 * v65;
      *(_QWORD *)(v6 + 1032) = v40 + v66 + v41 * v64;
      *(_QWORD *)(v6 + 1040) = v41;
      *(_QWORD *)(v6 + 1048) = v63 + v66 + v57 * v64;
      *(_QWORD *)(v6 + 1056) = v57;
      v67 = *(_QWORD *)(v6 + 416);
      v68 = *(_QWORD *)(v6 + 424);
      *(_QWORD *)(v6 + 1064) = v68 + v67 * v64 + (v65 >> 1);
      *(_QWORD *)(v6 + 1072) = v67;
      v69 = ((_DWORD)v20 - *(_DWORD *)(v2 + 1096)) & ~(((int)v20 - *(_DWORD *)(v2 + 1096)) >> 31);
      LODWORD(v65) = (v37 - *(_DWORD *)(v2 + 1104)) & ~(((int)v37 - *(_DWORD *)(v2 + 1104)) >> 31);
      v70 = (v27 - *(_DWORD *)(v2 + 1112)) & ~(((int)v27 - *(_DWORD *)(v2 + 1112)) >> 31);
      *(_QWORD *)(v6 + 1080) = v34
                             - (((v38 - *(_DWORD *)(v2 + 1120)) & ~((v38 - *(_DWORD *)(v2 + 1120)) >> 31))
                              + v70);
      *(_QWORD *)(v6 + 1088) = v26 - (v65 + v69);
      v71 = (2 * v70);
      *(_QWORD *)(v6 + 1096) = v40 + v71 + v41 * v69;
      *(_QWORD *)(v6 + 1104) = v41;
      v72 = *(_QWORD *)(v6 + 432);
      v73 = *(_QWORD *)(v6 + 440);
      *(_QWORD *)(v6 + 1112) = v73 + (v71 & 0xFFFFFFFC) + (v69 >> 1) * v72;
      *(_QWORD *)(v6 + 1120) = v72;
      if ((v39 & 0x800) != 0)
      {
        v74 = (v37 - *(_DWORD *)(v2 + 1192)) & ~(((int)v37 - *(_DWORD *)(v2 + 1192)) >> 31);
        v75 = (((_DWORD)v20 - *(_DWORD *)(v2 + 1184)) & ~(((int)v20 - *(_DWORD *)(v2 + 1184)) >> 31)) >> 1;
        v76 = (((_DWORD)v27 - *(_DWORD *)(v2 + 1200)) & ~(((int)v27 - *(_DWORD *)(v2 + 1200)) >> 31)) >> 1;
        v77 = *(_QWORD *)(v6 + 368);
        *(_QWORD *)(v6 + 1128) = *(_QWORD *)(v6 + 360)
                               - (v76
                                + (((v38 - *(_DWORD *)(v2 + 1208)) & ~((v38 - *(_DWORD *)(v2 + 1208)) >> 31)) >> 1));
        *(_QWORD *)(v6 + 1136) = v77 - (v75 + (v74 >> 1));
        *(_QWORD *)(v6 + 1144) = v52 + v51 * v75 + 6 * v76;
        *(_QWORD *)(v6 + 1152) = v51;
        v78 = *(_QWORD *)(v6 + 392);
        *(_QWORD *)(v6 + 1160) = *(_QWORD *)(v6 + 400) + v76 + v78 * v75;
        *(_QWORD *)(v6 + 1168) = v78;
        *(_OWORD *)(v6 + 1176) = *(_OWORD *)(v6 + 448);
        *(_QWORD *)(v6 + 1192) = *(_QWORD *)(v6 + 464);
      }
      if ((v39 & 0x1000) != 0)
      {
        v79 = ((_DWORD)v20 - *(_DWORD *)(v2 + 1376)) & ~(((int)v20 - *(_DWORD *)(v2 + 1376)) >> 31);
        v80 = (v38 - *(_DWORD *)(v2 + 1400)) & ~((v38 - *(_DWORD *)(v2 + 1400)) >> 31);
        v81 = (((_DWORD)v27 - *(_DWORD *)(v2 + 1392)) & ~(((int)v27 - *(_DWORD *)(v2 + 1392)) >> 31)) >> 1;
        *(_QWORD *)(v6 + 1280) = v68 + v81 + v67 * v79;
        v82 = *(_QWORD *)(v6 + 368);
        v83 = *(_QWORD *)(v6 + 360) - (v81 + (v80 >> 1));
        v84 = (v37 - *(_DWORD *)(v2 + 1384)) & ~(((int)v37 - *(_DWORD *)(v2 + 1384)) >> 31);
        *(_QWORD *)(v6 + 1288) = v67;
        v79 >>= 1;
        *(_QWORD *)(v6 + 1200) = v83;
        *(_QWORD *)(v6 + 1208) = v82 - (v79 + (v84 >> 1));
        v85 = v79 * v51 + 6 * v81;
        *(_QWORD *)(v6 + 1216) = v52 + v85;
        *(_QWORD *)(v6 + 1224) = *(_QWORD *)(v6 + 408) + v85;
        *(_QWORD *)(v6 + 1232) = v51;
        *(_QWORD *)(v6 + 1240) = v73 + v79 * v72 + 4 * v81;
        *(_QWORD *)(v6 + 1248) = v72;
        *(_OWORD *)(v6 + 1256) = *(_OWORD *)(v6 + 448);
        *(_QWORD *)(v6 + 1272) = *(_QWORD *)(v6 + 464);
      }
      v86 = ((_DWORD)v20 - *(_DWORD *)(v2 + 1512)) & ~(((int)v20 - *(_DWORD *)(v2 + 1512)) >> 31);
      v87 = (v37 - *(_DWORD *)(v2 + 1520)) & ~(((int)v37 - *(_DWORD *)(v2 + 1520)) >> 31);
      v88 = ((_DWORD)v27 - *(_DWORD *)(v2 + 1528)) & ~(((int)v27 - *(_DWORD *)(v2 + 1528)) >> 31);
      *(_QWORD *)(v6 + 1296) = v34
                             - (((v38 - *(_DWORD *)(v2 + 1536)) & ~((v38 - *(_DWORD *)(v2 + 1536)) >> 31))
                              + v88);
      *(_QWORD *)(v6 + 1304) = v26 - (v87 + v86);
      *(_QWORD *)(v6 + 1312) = v63 + v57 * v86 + 2 * v88;
      *(_QWORD *)(v6 + 1320) = v57;
      *(_QWORD *)(v6 + 1328) = v68 + v67 * v86 + (v88 >> 1);
      *(_QWORD *)(v6 + 1336) = v67;
      *(_QWORD *)(v6 + 1344) = *(_QWORD *)(v6 + 312);
      if ((v39 & 0x4000) != 0)
      {
        v121 = ((_DWORD)v20 - *(_DWORD *)(v2 + 1584)) & ~(((int)v20 - *(_DWORD *)(v2 + 1584)) >> 31);
        v122 = (v37 - *(_DWORD *)(v2 + 1592)) & ~(((int)v37 - *(_DWORD *)(v2 + 1592)) >> 31);
        v123 = ((_DWORD)v27 - *(_DWORD *)(v2 + 1600)) & ~(((int)v27 - *(_DWORD *)(v2 + 1600)) >> 31);
        *(_QWORD *)(v6 + 1352) = v34
                               - (((v38 - *(_DWORD *)(v2 + 1608)) & ~((v38 - *(_DWORD *)(v2 + 1608)) >> 31))
                                + v123);
        *(_QWORD *)(v6 + 1360) = v26 - (v122 + v121);
        *(_QWORD *)(v6 + 1368) = v63 + v57 * v121 + 2 * v123;
        *(_QWORD *)(v6 + 1376) = v57;
        *(_QWORD *)(v6 + 1384) = v68 + v67 * v121 + (v123 >> 1);
        *(_QWORD *)(v6 + 1392) = v67;
        *(_QWORD *)(v6 + 1400) = *(_QWORD *)(v6 + 320);
        v89 = *(_QWORD *)(v6 + 32);
        v90 = *(_QWORD *)(v6 + 40);
        v92 = *(_QWORD *)(v6 + 48);
        v91 = *(_QWORD *)(v6 + 56);
        v93 = *(_QWORD *)(v6 + 136);
        v94 = *(_QWORD *)(v6 + 144);
        if ((v39 & 0x8000) == 0)
        {
LABEL_58:
          if ((v39 & 0x10000) == 0)
            goto LABEL_59;
          goto LABEL_71;
        }
      }
      else
      {
        v89 = *(_QWORD *)(v6 + 32);
        v90 = *(_QWORD *)(v6 + 40);
        v92 = *(_QWORD *)(v6 + 48);
        v91 = *(_QWORD *)(v6 + 56);
        v93 = *(_QWORD *)(v6 + 136);
        v94 = *(_QWORD *)(v6 + 144);
        if ((v39 & 0x8000) == 0)
          goto LABEL_58;
      }
      v124 = ((_DWORD)v89 - *(_DWORD *)(v2 + 1640)) & ~(((int)v89 - *(_DWORD *)(v2 + 1640)) >> 31);
      v125 = (v90 - *(_DWORD *)(v2 + 1648)) & ~(((int)v90 - *(_DWORD *)(v2 + 1648)) >> 31);
      v126 = ((_DWORD)v92 - *(_DWORD *)(v2 + 1656)) & ~(((int)v92 - *(_DWORD *)(v2 + 1656)) >> 31);
      *(_QWORD *)(v6 + 1408) = v93
                             - ((((_DWORD)v91 - *(_DWORD *)(v2 + 1664)) & ~(((int)v91 - *(_DWORD *)(v2 + 1664)) >> 31))
                              + v126);
      *(_QWORD *)(v6 + 1416) = v94 - (v125 + v124);
      *(_QWORD *)(v6 + 1424) = v63 + v57 * v124 + 2 * v126;
      *(_QWORD *)(v6 + 1432) = v57;
      *(_QWORD *)(v6 + 1440) = v68 + v67 * v124 + (v126 >> 1);
      *(_QWORD *)(v6 + 1448) = v67;
      if ((v39 & 0x10000) == 0)
      {
LABEL_59:
        v95 = v2 + 224 * v3;
        v96 = *(_QWORD *)(v6 + 472);
        if ((v39 & 0x20000) == 0)
          goto LABEL_60;
        goto LABEL_72;
      }
LABEL_71:
      v127 = ((_DWORD)v89 - *(_DWORD *)(v2 + 1704)) & ~(((int)v89 - *(_DWORD *)(v2 + 1704)) >> 31);
      v128 = (v90 - *(_DWORD *)(v2 + 1712)) & ~(((int)v90 - *(_DWORD *)(v2 + 1712)) >> 31);
      v129 = ((_DWORD)v92 - *(_DWORD *)(v2 + 1720)) & ~(((int)v92 - *(_DWORD *)(v2 + 1720)) >> 31);
      *(_QWORD *)(v6 + 1456) = v93
                             - ((((_DWORD)v91 - *(_DWORD *)(v2 + 1728)) & ~(((int)v91 - *(_DWORD *)(v2 + 1728)) >> 31))
                              + v129);
      *(_QWORD *)(v6 + 1464) = v94 - (v128 + v127);
      *(_QWORD *)(v6 + 1472) = v63 + v57 * v127 + 2 * v129;
      *(_QWORD *)(v6 + 1480) = v57;
      *(_QWORD *)(v6 + 1488) = v68 + v67 * v127 + (v129 >> 1);
      *(_QWORD *)(v6 + 1496) = v67;
      v130 = *(_QWORD *)(v6 + 264);
      *(_QWORD *)(v6 + 1504) = *(_QWORD *)(v6 + 272) + v130 * v127 + (v129 >> 3);
      *(_QWORD *)(v6 + 1512) = v130;
      *(_QWORD *)(v6 + 1520) = *(_QWORD *)(v6 + 328);
      v95 = v2 + 224 * v3;
      v96 = *(_QWORD *)(v6 + 472);
      if ((v39 & 0x20000) == 0)
      {
LABEL_60:
        v97 = (_QWORD *)(v95 + 2440);
        v98 = *(_QWORD *)(v6 + 504);
        if ((v39 & 0x40000) == 0)
        {
LABEL_61:
          v99 = *(_QWORD *)(v6 + 480);
          goto LABEL_74;
        }
LABEL_73:
        v134 = ((_DWORD)v89 - *(_DWORD *)(v2 + 2008)) & ~(((int)v89 - *(_DWORD *)(v2 + 2008)) >> 31);
        v135 = (v90 - *(_DWORD *)(v2 + 2016)) & ~(((int)v90 - *(_DWORD *)(v2 + 2016)) >> 31);
        v136 = (v92 - *(_DWORD *)(v2 + 2024)) & ~(((int)v92 - *(_DWORD *)(v2 + 2024)) >> 31);
        *(_QWORD *)(v6 + 1600) = v93
                               - ((((_DWORD)v91 - *(_DWORD *)(v2 + 2032)) & ~(((int)v91
                                                                                           - *(_DWORD *)(v2 + 2032)) >> 31))
                                + v136);
        *(_QWORD *)(v6 + 1608) = v94 - (v135 + v134);
        v137 = (2 * v136) + v96 * v134;
        *(_QWORD *)(v6 + 1616) = v98 + v137;
        v99 = *(_QWORD *)(v6 + 480);
        v138 = *(_QWORD *)(v6 + 488);
        *(_QWORD *)(v6 + 1624) = v99 + v137;
        *(_QWORD *)(v6 + 1632) = v96;
        *(_QWORD *)(v6 + 1640) = v138;
        *(_OWORD *)(v6 + 1648) = *(_OWORD *)(v6 + 520);
LABEL_74:
        v139 = *(_QWORD *)(v6 + 152);
        v140 = *(_QWORD *)(v6 + 376);
        v141 = ((_DWORD)v89 - *(_DWORD *)(v2 + 2200)) & ~(((int)v89 - *(_DWORD *)(v2 + 2200)) >> 31);
        v142 = v90 - *(_DWORD *)(v2 + 2208);
        v143 = ((_DWORD)v92 - *(_DWORD *)(v2 + 2216)) & ~(((int)v92 - *(_DWORD *)(v2 + 2216)) >> 31);
        *(_QWORD *)(v6 + 1664) = v93
                               - ((((_DWORD)v91 - *(_DWORD *)(v2 + 2224)) & ~(((int)v91 - *(_DWORD *)(v2 + 2224)) >> 31))
                                + v143);
        *(_QWORD *)(v6 + 1672) = v94 - ((v142 & ~(v142 >> 31)) + v141);
        v144 = 2 * v143;
        v145 = *(_QWORD *)(v6 + 152);
        *(_QWORD *)(v6 + 1680) = *(_QWORD *)(v6 + 160) + v144 + v139 * v141;
        *(_QWORD *)(v6 + 1688) = v139;
        v146 = *(_QWORD *)(v6 + 496);
        v147 = v144 + v96 * v141;
        *(_QWORD *)(v6 + 1696) = v146 + v147;
        *(_QWORD *)(v6 + 1704) = v98 + v147;
        v148 = *(_QWORD *)(v6 + 512);
        *(_QWORD *)(v6 + 1712) = v148 + v147;
        *(_QWORD *)(v6 + 1720) = v99 + v147;
        *(_QWORD *)(v6 + 1728) = v96;
        v149 = v143 >> 1;
        v150 = *(_QWORD *)(v6 + 408);
        v151 = *(_QWORD *)(v6 + 416);
        *(_QWORD *)(v6 + 1768) = v68 + v149 + v151 * v141;
        *(_QWORD *)(v6 + 1776) = v151;
        *(_QWORD *)(v6 + 1736) = v150 + (v141 >> 1) * v140 + 6 * v149;
        *(_QWORD *)(v6 + 1744) = v140;
        *(_QWORD *)(v6 + 1752) = v73 + (v141 >> 1) * v72 + 4 * v149;
        *(_QWORD *)(v6 + 1760) = v72;
        v152 = *(_QWORD *)(v6 + 160);
        v153 = *(_QWORD *)(v6 + 168);
        *(_QWORD *)(v6 + 1784) = v153;
        v155 = *(_QWORD *)(v6 + 176);
        v154 = *(_QWORD *)(v6 + 184);
        *(_QWORD *)(v6 + 1792) = v155;
        *(_OWORD *)(v6 + 1800) = *(_OWORD *)(v6 + 200);
        *(_QWORD *)(v6 + 1816) = *(_QWORD *)(v6 + 192);
        *(_QWORD *)(v6 + 1824) = v154;
        *(_QWORD *)(v6 + 1832) = v93;
        *(_QWORD *)(v6 + 1840) = v94;
        *(_QWORD *)(v6 + 1848) = v146;
        *(_QWORD *)(v6 + 1856) = v99;
        *(_QWORD *)(v6 + 1864) = v148;
        *(_QWORD *)(v6 + 1872) = v96;
        *(_QWORD *)(v6 + 1880) = v150;
        *(_QWORD *)(v6 + 1888) = v140;
        *(_QWORD *)(v6 + 1896) = v73;
        *(_QWORD *)(v6 + 1904) = *(_QWORD *)(v6 + 432);
        ++*v97;
        v156 = v2 + 224 * v3;
        *(_QWORD *)(v156 + 2448) += *(_QWORD *)(v6 + 144) * *(_QWORD *)(v6 + 136);
        *(_QWORD *)(v156 + 2456) += v155 * v153;
        if ((v4 & 0x20) != 0)
        {
          v159 = *(_QWORD *)(v6 + 216);
          v158 = *(_QWORD *)(v6 + 224);
          *(_QWORD *)(v6 + 152) = v159;
          *(_QWORD *)(v6 + 160) = v158;
          *(_QWORD *)(v6 + 216) = v145;
          *(_QWORD *)(v6 + 224) = v152;
          v160 = v158;
          v161 = *(_QWORD *)(v6 + 88);
          *(_QWORD *)(v6 + 232) = *(_QWORD *)(v6 + 80);
          *(_QWORD *)(v6 + 240) = v161;
          *(_QWORD *)(v6 + 248) = v159;
          *(_QWORD *)(v6 + 256) = v160;
          if ((v4 & 1) == 0)
          {
LABEL_76:
            if ((v4 & 2) == 0)
              goto LABEL_77;
            goto LABEL_95;
          }
        }
        else
        {
          v157 = *(_QWORD *)(v6 + 88);
          *(_QWORD *)(v6 + 232) = *(_QWORD *)(v6 + 80);
          *(_QWORD *)(v6 + 240) = v157;
          *(_QWORD *)(v6 + 248) = v145;
          *(_QWORD *)(v6 + 256) = v152;
          if ((v4 & 1) == 0)
            goto LABEL_76;
        }
        (*(void (**)(uint64_t, unint64_t))(v2 + 168))(v2, v6);
        v162 = *(_QWORD *)(v6 + 256);
        *(_QWORD *)(v6 + 232) = *(_QWORD *)(v6 + 248);
        *(_QWORD *)(v6 + 240) = v162;
        if ((v4 & 2) == 0)
        {
LABEL_77:
          if ((v4 & 4) == 0)
            goto LABEL_78;
          goto LABEL_96;
        }
LABEL_95:
        (*(void (**)(uint64_t, unint64_t))(v2 + 240))(v2, v6);
        v163 = *(_QWORD *)(v6 + 256);
        *(_QWORD *)(v6 + 232) = *(_QWORD *)(v6 + 248);
        *(_QWORD *)(v6 + 240) = v163;
        if ((v4 & 4) == 0)
        {
LABEL_78:
          if ((v4 & 8) == 0)
            goto LABEL_79;
          goto LABEL_97;
        }
LABEL_96:
        (*(void (**)(uint64_t, unint64_t))(v2 + 360))(v2, v6);
        v164 = *(_QWORD *)(v6 + 256);
        *(_QWORD *)(v6 + 232) = *(_QWORD *)(v6 + 248);
        *(_QWORD *)(v6 + 240) = v164;
        if ((v4 & 8) == 0)
        {
LABEL_79:
          if ((v4 & 0x10) == 0)
            goto LABEL_80;
          goto LABEL_98;
        }
LABEL_97:
        (*(void (**)(uint64_t, unint64_t))(v2 + 528))(v2, v6);
        if ((v4 & 0x10) == 0)
        {
LABEL_80:
          if ((v4 & 0x20) == 0)
            goto LABEL_81;
          goto LABEL_99;
        }
LABEL_98:
        (*(void (**)(uint64_t, unint64_t))(v2 + 592))(v2, v6);
        if ((v4 & 0x20) == 0)
        {
LABEL_81:
          (*(void (**)(uint64_t, unint64_t))(v2 + 784))(v2, v6);
          if ((v4 & 0x80) == 0)
            goto LABEL_83;
          goto LABEL_82;
        }
LABEL_99:
        (*(void (**)(uint64_t, unint64_t))(v2 + 696))(v2, v6);
        v166 = *(_QWORD *)(v6 + 152);
        v165 = *(_QWORD *)(v6 + 160);
        v167 = *(_QWORD *)(v6 + 224);
        *(_QWORD *)(v6 + 152) = *(_QWORD *)(v6 + 216);
        *(_QWORD *)(v6 + 160) = v167;
        *(_QWORD *)(v6 + 216) = v166;
        *(_QWORD *)(v6 + 224) = v165;
        (*(void (**)(uint64_t, unint64_t))(v2 + 784))(v2, v6);
        if ((v4 & 0x80) == 0)
        {
LABEL_83:
          (*(void (**)(uint64_t, unint64_t))(v2 + 920))(v2, v6);
          (*(void (**)(uint64_t, unint64_t))(v2 + 984))(v2, v6);
          (*(void (**)(uint64_t, unint64_t))(v2 + 1088))(v2, v6);
          if ((v4 & 0x800) != 0)
          {
            (*(void (**)(uint64_t, unint64_t))(v2 + 1176))(v2, v6);
            if ((v4 & 0x1000) == 0)
            {
LABEL_85:
              (*(void (**)(uint64_t, unint64_t))(v2 + 1504))(v2, v6);
              if ((v4 & 0x4000) == 0)
                goto LABEL_86;
              goto LABEL_103;
            }
          }
          else if ((v4 & 0x1000) == 0)
          {
            goto LABEL_85;
          }
          (*(void (**)(uint64_t, unint64_t))(v2 + 1368))(v2, v6);
          (*(void (**)(uint64_t, unint64_t))(v2 + 1504))(v2, v6);
          if ((v4 & 0x4000) == 0)
          {
LABEL_86:
            if ((v4 & 0x8000) == 0)
              goto LABEL_87;
            goto LABEL_104;
          }
LABEL_103:
          (*(void (**)(uint64_t, unint64_t))(v2 + 1576))(v2, v6);
          if ((v4 & 0x8000) == 0)
          {
LABEL_87:
            if ((v4 & 0x10000) == 0)
              goto LABEL_88;
            goto LABEL_105;
          }
LABEL_104:
          (*(void (**)(uint64_t, unint64_t))(v2 + 1632))(v2, v6);
          if ((v4 & 0x10000) == 0)
          {
LABEL_88:
            if ((v4 & 0x20000) == 0)
              goto LABEL_89;
            goto LABEL_106;
          }
LABEL_105:
          (*(void (**)(uint64_t, unint64_t))(v2 + 1696))(v2, v6);
          if ((v4 & 0x20000) == 0)
          {
LABEL_89:
            if ((v4 & 0x40000) == 0)
            {
LABEL_91:
              (*(void (**)(uint64_t, unint64_t))(v2 + 2192))(v2, v6);
              (*(void (**)(uint64_t, unint64_t))(v2 + 2248))(v2, v6);
              return (_QWORD *)sub_1D536BE4C((uint64_t)a1, v6);
            }
LABEL_90:
            (*(void (**)(uint64_t, unint64_t))(v2 + 2000))(v2, v6);
            goto LABEL_91;
          }
LABEL_106:
          (*(void (**)(uint64_t, unint64_t))(v2 + 1744))(v2, v6);
          if ((v4 & 0x40000) == 0)
            goto LABEL_91;
          goto LABEL_90;
        }
LABEL_82:
        (*(void (**)(uint64_t, unint64_t))(v2 + 848))(v2, v6);
        goto LABEL_83;
      }
LABEL_72:
      v131 = ((_DWORD)v89 - *(_DWORD *)(v2 + 1752)) & ~(((int)v89 - *(_DWORD *)(v2 + 1752)) >> 31);
      v132 = (v90 - *(_DWORD *)(v2 + 1760)) & ~(((int)v90 - *(_DWORD *)(v2 + 1760)) >> 31);
      v133 = (v92 - *(_DWORD *)(v2 + 1768)) & ~(((int)v92 - *(_DWORD *)(v2 + 1768)) >> 31);
      *(_QWORD *)(v6 + 1528) = v93
                             - ((((_DWORD)v91 - *(_DWORD *)(v2 + 1776)) & ~(((int)v91
                                                                                         - *(_DWORD *)(v2 + 1776)) >> 31))
                              + v133);
      *(_QWORD *)(v6 + 1536) = v94 - (v132 + v131);
      *(_QWORD *)(v6 + 1544) = v63 + (2 * v133) + v96 * v131;
      *(_QWORD *)(v6 + 1552) = v96;
      *(_QWORD *)(v6 + 1592) = *(_QWORD *)(v6 + 336);
      v97 = (_QWORD *)(v95 + 2440);
      v98 = *(_QWORD *)(v6 + 504);
      if ((v39 & 0x40000) == 0)
        goto LABEL_61;
      goto LABEL_73;
    }
LABEL_49:
    v42 = ((_DWORD)v20 - *(_DWORD *)(v2 + 704)) & ~(((int)v20 - *(_DWORD *)(v2 + 704)) >> 31);
    v43 = (v37 - *(_DWORD *)(v2 + 712)) & ~(((int)v37 - *(_DWORD *)(v2 + 712)) >> 31);
    v44 = ((_DWORD)v27 - *(_DWORD *)(v2 + 720)) & ~(((int)v27 - *(_DWORD *)(v2 + 720)) >> 31);
    *(_QWORD *)(v6 + 792) = v34
                          - (((v38 - *(_DWORD *)(v2 + 728)) & ~((v38 - *(_DWORD *)(v2 + 728)) >> 31))
                           + v44);
    *(_QWORD *)(v6 + 800) = v26 - (v43 + v42);
    v45 = 2 * v44;
    *(_QWORD *)(v6 + 808) = v40 + v45 + v41 * v42;
    *(_QWORD *)(v6 + 816) = v41;
    v46 = *(_QWORD *)(v6 + 216);
    v47 = *(_QWORD *)(v6 + 224);
    *(_QWORD *)(v6 + 824) = v47 + v45 + v46 * v42;
    *(_QWORD *)(v6 + 832) = v46;
    *(_QWORD *)(v6 + 840) = v24 + v42;
    *(_QWORD *)(v6 + 848) = v29 + v44;
    *(_QWORD *)(v6 + 152) = v46;
    *(_QWORD *)(v6 + 160) = v47;
    *(_QWORD *)(v6 + 216) = v41;
    *(_QWORD *)(v6 + 224) = v40;
    v40 = v47;
    v41 = v46;
    goto LABEL_50;
  }
  return result;
}

_QWORD *sub_1D5379878(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unint64_t i;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;

  v3 = *(_QWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v49 = *(_QWORD *)(a1 + 144);
  v50 = *(_DWORD *)(a1 + 164);
  v10 = (char *)sub_1D5441BF0(0x778uLL);
  v11 = v10;
  if (!v10)
    return v11;
  *(_QWORD *)v10 = v3;
  *((_QWORD *)v10 + 1) = v2;
  *((_QWORD *)v10 + 2) = v5;
  *((_QWORD *)v10 + 3) = v4;
  *((_QWORD *)v10 + 12) = v6;
  *((_QWORD *)v10 + 13) = v7;
  *((_QWORD *)v10 + 14) = v8;
  *((_QWORD *)v10 + 15) = v9;
  *((_QWORD *)v10 + 10) = v5;
  *((_QWORD *)v10 + 11) = v4;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
    v3 = *(_QWORD *)(a1 + 48) + v12 + *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 24);
  if (v13)
    v2 = *(_QWORD *)(a1 + 32) + v13 + *(_QWORD *)(a1 + 40);
  v14 = (2 * v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  *((_QWORD *)v10 + 18) = v2;
  *((_QWORD *)v10 + 19) = v14;
  *((_QWORD *)v10 + 21) = v6;
  *((_QWORD *)v10 + 22) = v7;
  *((_QWORD *)v10 + 23) = v8;
  *((_QWORD *)v10 + 24) = v9;
  v15 = ((((v3 + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL) + 15) & 0x3FFFFFFFFFFFFFF0;
  *((_QWORD *)v10 + 33) = v15;
  v16 = v2 >> 1;
  v17 = (6 * (v3 >> 1) + 15) & 0xFFFFFFFFFFFFFFF0;
  *((_QWORD *)v10 + 46) = v2 >> 1;
  *((_QWORD *)v10 + 47) = v17;
  v18 = ((v3 >> 1) + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = (((2 * v3) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFF0;
  *((_QWORD *)v10 + 53) = 0;
  *((_QWORD *)v10 + 54) = v19;
  v20 = v2 * v14;
  *((_QWORD *)v10 + 59) = v14;
  *((_QWORD *)v10 + 27) = v14;
  *((_QWORD *)v10 + 28) = 0;
  *((_QWORD *)v10 + 48) = 0;
  *((_QWORD *)v10 + 49) = v18;
  *((_QWORD *)v10 + 51) = 0;
  *((_QWORD *)v10 + 52) = v18;
  *((_QWORD *)v10 + 16) = 0;
  *((_QWORD *)v10 + 17) = v3;
  v21 = 4 * v2 * v14 + 2048;
  *((_QWORD *)v10 + 44) = 0;
  *((_QWORD *)v10 + 45) = v3 >> 1;
  *((_OWORD *)v10 + 20) = 0u;
  *((_OWORD *)v10 + 21) = 0u;
  *((_OWORD *)v10 + 18) = 0u;
  *((_OWORD *)v10 + 19) = 0u;
  *((_OWORD *)v10 + 17) = 0u;
  *((_QWORD *)v10 + 50) = 0;
  *(_OWORD *)(v10 + 440) = 0u;
  *(_OWORD *)(v10 + 456) = 0u;
  *((_OWORD *)v10 + 32) = 0u;
  *((_OWORD *)v10 + 33) = 0u;
  *((_OWORD *)v10 + 30) = 0u;
  *((_OWORD *)v10 + 31) = 0u;
  if ((v50 & 0x40000) != 0)
  {
    v21 += 2 * v14;
    if (*(float *)(v49 + 292) > 0.0)
      v21 += 8 * v14;
  }
  v22 = v16 * v17;
  v48 = v16 * v19;
  v46 = (6 * (v3 >> 1) + 15) & 0xFFFFFFFFFFFFFFF0;
  v47 = v2 * v18;
  v23 = v16 * v17 + v2 * v18 + v16 * v19 + v21;
  v24 = v2 * v15;
  if ((v50 & 2) != 0)
    v25 = v2 * v15;
  else
    v25 = 0;
  v26 = v23 + v25;
  if ((v50 & 0x20000) != 0)
  {
    v27 = v26 - v24;
    if ((v50 & 2) == 0)
      v27 = v23;
    v26 = v27 + 4 * v3 * v2;
  }
  v28 = v26 + 2064;
  v29 = sub_1D5441BF0(v26 + 2064);
  v11[16] = v29;
  if (!v29)
    return 0;
  if (v28)
  {
    for (i = 0; i < v28; i += 4096)
      v29[i] = 0;
  }
  v31 = ((unint64_t)(v29 + 15) & 0xFFFFFFFFFFFFFFF0) + 2048;
  v11[44] = v31;
  v11[20] = v31;
  v32 = v31 + v20;
  if ((v50 & 1) != 0)
  {
    v11[36] = v32;
    if ((v50 & 2) == 0)
    {
LABEL_22:
      if ((v50 & 8) == 0)
        goto LABEL_23;
      goto LABEL_33;
    }
  }
  else if ((v50 & 2) == 0)
  {
    goto LABEL_22;
  }
  v11[35] = v32;
  if ((v50 & 8) == 0)
  {
LABEL_23:
    if ((v50 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_34;
  }
LABEL_33:
  v11[37] = v32;
  if ((v50 & 0x10) == 0)
  {
LABEL_24:
    if ((v50 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_35;
  }
LABEL_34:
  v11[38] = v32;
  if ((v50 & 0x20) == 0)
  {
LABEL_25:
    v11[39] = v32;
    if ((v50 & 0x4000) == 0)
      goto LABEL_26;
    goto LABEL_36;
  }
LABEL_35:
  v11[28] = v32 + v20;
  v11[39] = v32;
  if ((v50 & 0x4000) == 0)
  {
LABEL_26:
    if ((v50 & 0x10000) == 0)
      goto LABEL_27;
    goto LABEL_37;
  }
LABEL_36:
  v11[40] = v32;
  if ((v50 & 0x10000) == 0)
  {
LABEL_27:
    if ((v50 & 0x20000) == 0)
      goto LABEL_28;
LABEL_38:
    v11[42] = v32;
    v11[62] = v32;
    v11[63] = v32 + v20;
    v33 = v32 + v20 + v20;
    v11[64] = v33;
    v11[60] = v32 + v20;
    if ((v50 & 0x40000) == 0)
      goto LABEL_41;
    goto LABEL_39;
  }
LABEL_37:
  v11[41] = v32;
  if ((v50 & 0x20000) != 0)
    goto LABEL_38;
LABEL_28:
  v11[62] = v32;
  v11[63] = v32 + v20;
  v33 = v32 + v20 + v20;
  v11[64] = v33;
  v11[60] = v32 + v20;
  if ((v50 & 0x40000) == 0)
  {
LABEL_41:
    v36 = v33 + v20;
    v38 = v47;
    v37 = v48;
    v11[48] = v36;
    v11[51] = v36;
    if ((v50 & 0x1000) == 0)
      goto LABEL_42;
LABEL_45:
    v11[48] = v32;
    v40 = v32 + v22;
    if ((int)v16 <= (int)(v3 >> 1))
      v41 = v3 >> 1;
    else
      v41 = v2 >> 1;
    v42 = (6 * v41 + 15) & 0xFFFFFFFFFFFFFFF0;
    v11[56] = v40;
    v11[57] = v40 + v42;
    v43 = v40 + v42 + v42;
    v11[58] = v43;
    v39 = v36 + v22;
    if ((v50 & 0x880) == 0)
      goto LABEL_52;
    if (v42)
      goto LABEL_51;
    goto LABEL_50;
  }
LABEL_39:
  v11[61] = v32;
  v34 = v33 + 2 * v14;
  v11[63] = v34;
  if (*(float *)(v49 + 292) > 0.0)
  {
    v11[65] = v32;
    v11[66] = v33;
    v35 = v33 + v14;
    v11[61] = v35;
    v33 = v35 + 9 * v14;
    v11[63] = v33;
    goto LABEL_41;
  }
  v36 = v34 + v20;
  v38 = v47;
  v37 = v48;
  v11[48] = v34 + v20;
  v11[51] = v34 + v20;
  if ((v50 & 0x1000) != 0)
    goto LABEL_45;
LABEL_42:
  v39 = v36 + v22;
  if ((v50 & 0x880) == 0)
    goto LABEL_52;
LABEL_50:
  v42 = (6 * (v3 >> 1) + 15) & 0xFFFFFFFFFFFFFFF0;
  v11[56] = v32;
  v11[57] = v32 + v46;
  v43 = v32 + v46 + v46;
  v11[58] = v43;
LABEL_51:
  v11[50] = v43 + v42;
LABEL_52:
  v11[53] = v39;
  v11[55] = v39 + v38;
  v44 = v39 + v38 + v37;
  if ((v50 & 2) == 0)
  {
    if ((v50 & 0x20000) == 0)
      return v11;
    goto LABEL_56;
  }
  v11[34] = v44;
  if ((v50 & 0x20000) != 0)
LABEL_56:
    v11[43] = v44;
  return v11;
}

void sub_1D5379C2C(int a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    v3 = (void *)a2[16];
    if (v3)
    {
      j__free_3(v3);
      a2[16] = 0;
    }
    v4 = (void *)a2[67];
    if (v4)
    {
      j__free_3(v4);
      a2[67] = 0;
    }
    j__free_3(a2);
  }
}

void sub_1D5379C74()
{
  pthread_mutex_t *v0;
  uint64_t v1;

  if (!qword_1EFF38730)
  {
    v0 = (pthread_mutex_t *)sub_1D5441B98(1uLL, 0x100980uLL);
    if (v0)
    {
      v1 = (uint64_t)v0;
      if (!pthread_mutex_init(v0, 0))
        qword_1EFF38730 = v1;
    }
  }
}

uint64_t sub_1D5379CCC(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, float a6, double a7, double a8, float a9, float a10)
{
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  float v32;
  float v33;
  uint64_t v34;
  double v35;
  double v36;
  int v37;
  BOOL v38;
  double v39;
  int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  unsigned int v50;

  if (a6 < 0.0)
    a6 = 0.0;
  v10 = a6 * a6;
  v11 = a9;
  v12 = a7 / a9;
  v13 = a8 + a7 * a10;
  if (a2)
  {
    v14 = 0;
    v15 = 0;
    v16 = (int)(v11 * sqrt(v10) + 0.5);
    v17 = 0.0;
    v18 = 0.0;
    while (1)
    {
      v19 = v18 * v17;
      if (v18 * v17 >= (v10 - v13) / v12)
        break;
      *(_WORD *)(a2 + v15) = v16;
      v18 = v18 + 0.0000152590219;
      v17 = v17 + 1.0;
      v15 += 2;
      if (--v14 == -65536)
        goto LABEL_9;
    }
    if ((-(int)v14 & 0xFFFF0000) == 0)
    {
      v36 = v13 + v19 * v12;
      if (v36 < v10)
        v36 = v10;
      v37 = (int)(v11 * sqrt(v36) + 0.5);
      v38 = (((double)(unsigned __int16)v37 + 0.5) / v11 * (((double)(unsigned __int16)v37 + 0.5) / v11) - v13) / v12 < v19;
      v39 = 65536.0;
      if (!v38)
        v39 = (((double)(unsigned __int16)v37 + 0.5) / v11 * (((double)(unsigned __int16)v37 + 0.5) / v11) - v13) / v12;
      do
      {
        if (v18 * v17 >= v39)
        {
          LOWORD(v37) = v37 + 1;
          v39 = (((double)(unsigned __int16)v37 + 0.5) / v11 * (((double)(unsigned __int16)v37 + 0.5) / v11) - v13)
              / v12;
        }
        v18 = v18 + 0.0000152590219;
        v17 = v17 + 1.0;
        *(_WORD *)(a2 + v15) = v37;
        v15 += 2;
      }
      while (v15 != 0x20000);
    }
  }
LABEL_9:
  v20 = sqrt(v11 / 65535.0) * 65535.0;
  if (!a3)
  {
    if (!(a4 | a5))
      return result;
    if (a4)
    {
      *(_DWORD *)a4 = 0xFFFF;
      v32 = *(float *)(result + 316);
      if (a5)
      {
LABEL_25:
        *(_DWORD *)a5 = 0xFFFF;
        v33 = *(float *)(result + 320);
LABEL_42:
        v40 = 0;
        v41 = 0.0;
        v42 = 0.0;
        v43 = 1.0 / v11;
        while (1)
        {
          v44 = v13 + v42 * v41 * v12;
          if (v44 < v10)
            v44 = v10;
          v45 = sqrt(v44) * 0.5;
          v46 = v43 * (v42 * v41);
          v47 = v46 - v45;
          v48 = v46 + v45;
          if (v47 >= 0.0)
            v49 = v47;
          else
            v49 = 0.0;
          v50 = (int)(v20 * (sqrt(v48) - sqrt(v49)));
          if (v41 > (float)(v32 * (float)v50) && a4 != 0)
          {
            *(_DWORD *)a4 = v40;
            if (!a5)
              return result;
            a4 = 0;
          }
          if (v41 > (float)(v33 * (float)v50) && a5 != 0)
          {
            *(_DWORD *)a5 = v40;
            if (!a4)
              return result;
            a5 = 0;
          }
          v42 = v42 + 0.0000152590219;
          v41 = v41 + 1.0;
          if (++v40 == 0x10000)
            return result;
        }
      }
    }
    else
    {
      v32 = 65536.0;
      if (a5)
        goto LABEL_25;
    }
    v33 = 65536.0;
    goto LABEL_42;
  }
  v21 = 0;
  v22 = 0.0;
  v23 = 0.0;
  v24 = 1.0 / v11;
  do
  {
    v25 = v13 + v23 * v22 * v12;
    if (v25 < v10)
      v25 = v10;
    v26 = sqrt(v25) * 0.5;
    v27 = v24 * (v23 * v22);
    v28 = v27 - v26;
    v29 = v27 + v26;
    v22 = v22 + 1.0;
    if (v28 < 0.0)
      v28 = 0.0;
    v23 = v23 + 0.0000152590219;
    *(_WORD *)(a3 + v21) = (int)(v20 * (sqrt(v29) - sqrt(v28)));
    v21 += 2;
  }
  while (v21 != 0x20000);
  if (!a4)
  {
LABEL_20:
    if (!a5)
      return result;
    goto LABEL_27;
  }
  v30 = 0;
  *(_DWORD *)a4 = 0xFFFF;
  v31 = 0.0;
  while (1)
  {
    LOWORD(v12) = *(_WORD *)(a3 + 2 * v30);
    v12 = (float)(*(float *)(result + 316) * (float)LODWORD(v12));
    if (v31 > v12)
      break;
    v31 = v31 + 1.0;
    if (++v30 == 0x10000)
      goto LABEL_20;
  }
  *(_DWORD *)a4 = v30;
  if (a5)
  {
LABEL_27:
    v34 = 0;
    *(_DWORD *)a5 = 0xFFFF;
    v35 = 0.0;
    while (1)
    {
      LOWORD(v12) = *(_WORD *)(a3 + 2 * v34);
      v12 = (float)(*(float *)(result + 320) * (float)LODWORD(v12));
      if (v35 > v12)
        break;
      v35 = v35 + 1.0;
      if (++v34 == 0x10000)
        return result;
    }
    *(_DWORD *)a5 = v34;
  }
  return result;
}

double sub_1D537A04C(unsigned int a1, _WORD *a2, double result, double a4, double a5, double a6, double a7, float a8, float a9)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  _WORD *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;

  if (*(float *)&result < 0.0)
    *(float *)&result = 0.0;
  if (a2)
  {
    result = *(float *)&result * *(float *)&result;
    v9 = a8;
    v10 = sqrt(a8 / 65535.0) * 65535.0;
    v11 = a9;
    if ((int)a1 <= 0)
    {
      a1 = 0;
      v25 = a7 + a6 * v11;
      v16 = 0.0;
      v17 = 0.0;
LABEL_15:
      v26 = a6 / v9;
      v27 = a1;
      v28 = 1.0 / v9;
      do
      {
        v29 = v25 + v17 * v16 * v26;
        if (v29 < result)
          v29 = result;
        v30 = sqrt(v29) * 0.5;
        v31 = v28 * (v17 * v16);
        v32 = v31 - v30;
        v33 = v31 + v30;
        v16 = v16 + 1.0;
        if (v32 < 0.0)
          v32 = 0.0;
        v17 = v17 + 0.0000152590219;
        a2[v27++] = (int)(v10 * (sqrt(v33) - sqrt(v32)));
      }
      while (v27 != 0x10000);
      return result;
    }
    v12 = a4 / v9;
    v13 = a5 + a4 * v11;
    v14 = a1;
    v15 = a2;
    v16 = 0.0;
    v17 = 0.0;
    do
    {
      v18 = v17 * v16;
      v19 = v13 + v17 * v16 * v12;
      v16 = v16 + 1.0;
      if (v19 < result)
        v19 = result;
      v20 = sqrt(v19) * 0.5;
      v21 = 1.0 / v9 * v18;
      v22 = v21 - v20;
      v23 = v21 + v20;
      if (v22 >= 0.0)
        v24 = v22;
      else
        v24 = 0.0;
      v17 = v17 + 0.0000152590219;
      *v15++ = (int)(v10 * (sqrt(v23) - sqrt(v24)));
      --v14;
    }
    while (v14);
    if (!HIWORD(a1))
    {
      v25 = a7 + a6 * v11;
      goto LABEL_15;
    }
  }
  return result;
}

char *sub_1D537A1B4(uint64_t a1, _QWORD *a2)
{
  char *v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  size_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *result;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  size_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  signed int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  signed int v65;
  signed int v66;
  BOOL v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  unint64_t v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  BOOL v80;
  BOOL v81;
  int v82;
  char *v83;
  size_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  size_t __len;
  uint64_t v106;
  char *v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;

  v110 = a2[69];
  v2 = (char *)a2[70];
  v3 = a2[71];
  v4 = (char *)a2[72];
  v5 = a2[73];
  v6 = *(_DWORD *)(a1 + 208);
  v7 = *(_DWORD *)(a1 + 216);
  v108 = *(_DWORD *)(a1 + 220);
  v109 = *(_DWORD *)(a1 + 212);
  v8 = *(_DWORD *)(a1 + 224);
  v98 = a2[68];
  v100 = v5;
  v9 = 2 * v98;
  v10 = *(_QWORD *)(a1 + 232);
  v11 = 2 * v3;
  __len = v3;
  v86 = 2 * v98;
  v96 = 2 * v3;
  v106 = 4 * v3;
  if (v2 == v4)
  {
    v16 = (char *)a2[36];
    v17 = &v16[v3];
    v19 = &v16[v3 + v3];
    v94 = &v19[v3];
    v102 = &v19[v3 + v3];
    result = (char *)memmove(&v16[v3], v2, 4 * v3);
    v18 = v19;
  }
  else
  {
    v12 = a2[71];
    memmove(v4, v2, v9);
    v101 = &v4[v5];
    v13 = &v2[v12];
    memmove(&v4[v5], v13, v9);
    v14 = 2 * v5;
    memmove(&v4[v14], &v2[v11], v9);
    result = (char *)memmove(&v101[v14], &v13[v11], v9);
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v94 = 0;
    v102 = 0;
  }
  v20 = &v2[v106];
  v21 = v100;
  v22 = &v4[4 * v100];
  v23 = v110 - 4;
  v24 = v2;
  v25 = v4;
  if ((unint64_t)(v110 - 4) >= 5)
  {
    v93 = v17;
    v90 = -v106;
    v89 = -v96;
    v26 = v98 - 4;
    v111 = v7 + 1;
    result = &v20[v96];
    v27 = 4;
    v28 = &v24[2 * v106];
    v30 = v102;
    v29 = __len;
    v97 = v25;
    v99 = v24;
    v31 = v23;
    v95 = v23;
    v87 = v6;
    while (1)
    {
      if (v24 == v25)
      {
        v91 = v27;
        v32 = result;
        v33 = v28;
        v103 = v30;
        v34 = v10;
        v35 = v18;
        memmove(v16, v20, __len);
        v28 = v33;
        result = v32;
        v27 = v91;
        v6 = v87;
        v25 = v97;
        v24 = v99;
        v21 = v100;
        v29 = __len;
        v107 = v93;
        v93 = v35;
        v10 = v34;
        v18 = v94;
        v31 = v95;
        v94 = v103;
        v30 = v16;
      }
      else
      {
        v107 = &v20[v90];
        v18 = &v20[v89];
        v30 = v20;
      }
      *(_WORD *)v22 = *(_WORD *)v20;
      *((_WORD *)v22 + 1) = *((_WORD *)v20 + 1);
      *((_WORD *)v22 + 2) = *((_WORD *)v20 + 2);
      *((_WORD *)v22 + 3) = *((_WORD *)v20 + 3);
      *((_WORD *)v22 + 4) = *((_WORD *)v20 + 4);
      v36 = 2 * v10;
      v37 = &v30[2 * v10];
      v38 = &v22[2 * v10];
      if ((v27 & 1) != 0)
      {
        if (v10 < v26)
        {
          v104 = v28;
          v69 = v18;
          v70 = v18 - 4;
          v71 = result;
          v72 = result;
          v73 = v30;
          v74 = v22;
          v75 = v10;
          do
          {
            v76 = *(unsigned __int16 *)&v73[2 * v10];
            v77 = *(unsigned __int16 *)&v70[2 * v10 + 4]
                + *(unsigned __int16 *)&v70[2 * v10 + 8]
                + *(unsigned __int16 *)&v70[2 * v10]
                + *(unsigned __int16 *)&v73[v36 - 4]
                + *(unsigned __int16 *)&v73[v36 + 4]
                + *(unsigned __int16 *)&v72[v36 - 4]
                + *(unsigned __int16 *)&v72[2 * v10]
                + *(unsigned __int16 *)&v72[v36 + 4];
            v78 = v76;
            if (v77 < v6)
            {
              v79 = (v77 + 4) >> 3;
              v80 = (int)(v79 - v8) > v76 || (int)(v79 + v8) < v76;
              v78 = v80 ? v79 : *(unsigned __int16 *)&v73[2 * v10];
              v81 = __OFSUB__(v79, v109);
              v82 = v79 - v109;
              if (!((v82 < 0) ^ v81 | (v82 == 0)))
                v78 += (v82 * v108 * (v76 - v78) + 0x8000) >> 16;
            }
            v83 = &v74[v36];
            *(_WORD *)v83 = v78;
            *((_WORD *)v83 + 1) = *(_WORD *)&v73[v36 + 2];
            if (v78 < v7)
              *(_WORD *)&v74[2 * v10] = (v7 - ((v111 - v78) >> 1)) & ~(unsigned __int16)((v7 - ((v111 - v78) >> 1)) >> 31);
            v70 += 4;
            v72 += 4;
            v75 += 2;
            v74 += 4;
            v73 += 4;
          }
          while (v75 < v26);
          v38 = &v74[v36];
          v37 = &v73[v36];
          v29 = __len;
          v24 = v99;
          v21 = v100;
          v25 = v97;
          v18 = v69;
          result = v71;
          goto LABEL_59;
        }
      }
      else if (v10 < v26)
      {
        v92 = v18;
        v39 = v18 - 4;
        v40 = v30;
        v41 = v107;
        v88 = result;
        v42 = result;
        v104 = v28;
        v43 = v28;
        v44 = v22;
        v45 = v10;
        do
        {
          v46 = *(unsigned __int16 *)&v41[2 * v10];
          v47 = *(unsigned __int16 *)&v39[2 * v10];
          v48 = *(unsigned __int16 *)&v39[v36 + 8];
          v49 = *(unsigned __int16 *)&v40[v36 - 8];
          v50 = *(unsigned __int16 *)&v40[2 * v10];
          v51 = *(unsigned __int16 *)&v40[v36 + 8];
          v52 = *(unsigned __int16 *)&v42[v36 - 4];
          v53 = *(unsigned __int16 *)&v42[v36 + 4];
          v54 = *(unsigned __int16 *)&v43[2 * v10];
          v55 = v47 + v46 + v48 + v49 + v51 + v52 + v53 + v54;
          if (v50 > 0x41)
          {
            v65 = *(unsigned __int16 *)&v40[2 * v10];
            if (v55 < v6)
            {
              v66 = (v55 + 4) >> 3;
              v67 = v66 - v8 > v50 || v66 + v8 < v50;
              v65 = v67 ? (v55 + 4) >> 3 : *(unsigned __int16 *)&v40[2 * v10];
              if (v66 > v109)
                v65 += ((v66 - v109) * v108 * (v50 - v65) + 0x8000) >> 16;
            }
          }
          else
          {
            v56 = ((v47 - v46) & ((v47 - v46) >> 31)) + v46;
            if (v47 > v46)
              v46 = *(unsigned __int16 *)&v39[2 * v10];
            v57 = (v49 - v48) & ((v49 - v48) >> 31);
            if (v49 <= v48)
              v49 = *(unsigned __int16 *)&v39[v36 + 8];
            v58 = ((v52 - v51) & ((v52 - v51) >> 31)) + v51;
            v59 = (v54 - v53) & ((v54 - v53) >> 31);
            if (v54 <= v53)
              v54 = *(unsigned __int16 *)&v42[v36 + 4];
            v60 = ((v48 - v56 + v57) & ((v48 - v56 + v57) >> 31)) + v56;
            if (v49 <= v46)
              v61 = v46;
            else
              v61 = v49;
            v62 = v58 - v60 + ((v53 - v58 + v59) & ((v53 - v58 + v59) >> 31));
            v63 = (v62 & (v62 >> 31)) + v60;
            if (v54 > v61)
              v61 = v54;
            if (5 * v63 > v61 || v50 == 0)
              v65 = (v55 + 4) >> 3;
            else
              v65 = *(unsigned __int16 *)&v40[2 * v10];
          }
          v68 = &v44[v36];
          *(_WORD *)v68 = v65;
          *((_WORD *)v68 + 1) = *(_WORD *)&v40[v36 + 2];
          if (v65 < v7)
            *(_WORD *)&v44[2 * v10] = (v7 - ((v111 - v65) >> 1)) & ~(unsigned __int16)((v7 - ((v111 - v65) >> 1)) >> 31);
          v42 += 4;
          v39 += 4;
          v45 += 2;
          v44 += 4;
          v43 += 4;
          v41 += 4;
          v40 += 4;
        }
        while (v45 < v26);
        v38 = &v44[v36];
        v37 = &v40[v36];
        v29 = __len;
        v24 = v99;
        v21 = v100;
        v25 = v97;
        v18 = v92;
        result = v88;
LABEL_59:
        v28 = v104;
        v31 = v95;
      }
      *(_WORD *)v38 = *(_WORD *)v37;
      *((_WORD *)v38 + 1) = *((_WORD *)v37 + 1);
      *((_WORD *)v38 + 2) = *((_WORD *)v37 + 2);
      if ((v10 & 1) == 0)
        *((_WORD *)v38 + 3) = *((_WORD *)v37 + 3);
      v10 ^= 1uLL;
      ++v27;
      v20 += v29;
      v22 += v21;
      result += v29;
      v28 += v29;
      v16 = v107;
      if (v27 == v31)
        goto LABEL_63;
    }
  }
  v29 = __len;
LABEL_63:
  if (v24 != v25)
  {
    v84 = v29;
    v85 = v21;
    memmove(v22, v20, v86);
    memmove(&v22[v85], &v20[v84], v86);
    memmove(&v22[v85 + v85], &v20[v84 + v84], v86);
    return (char *)memmove(&v22[v85 + v85 + v85], &v20[v84 + v84 + v84], v86);
  }
  return result;
}

char *sub_1D537A7EC(_DWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  char *v3;
  size_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  char *result;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;
  char *v17;
  size_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  char *v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  size_t v57;
  uint64_t __len;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  size_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  int v72;

  v2 = a2[74];
  v3 = (char *)a2[76];
  v4 = a2[77];
  v5 = (char *)a2[78];
  v6 = a2[79];
  v7 = (char *)a2[82];
  v8 = a1[88];
  v72 = a1[89];
  v9 = a1[40];
  v63 = a2[81];
  v70 = a2[75];
  v61 = (char *)a2[80];
  bzero(v61, v63 * v70);
  v10 = 2 * v4;
  v65 = v4;
  __len = 2 * v2;
  if (v3 == v5)
  {
    v12 = &v7[v10];
    memmove(v7, v3, v4);
    v69 = &v7[v4];
    result = (char *)memmove(&v7[v4], &v3[v4], v4);
  }
  else
  {
    memmove(v5, v3, 2 * v2);
    result = (char *)memmove(&v5[v6], &v3[v4], 2 * v2);
    v12 = 0;
    v7 = 0;
    v69 = 0;
  }
  v13 = v3;
  v14 = &v3[v10];
  v66 = v5;
  v15 = &v5[2 * v6];
  v16 = v72;
  v64 = v6;
  v67 = v13;
  if ((unint64_t)(v70 - 2) >= 3)
  {
    v68 = v7;
    v17 = &v61[2 * v63];
    v18 = v65;
    v19 = v10 + 4 * (v65 >> 1);
    v60 = -v10;
    v20 = v2 - 1;
    v21 = (uint64_t)&v13[v19 - 2];
    v22 = 2;
    v62 = v70 - 2;
    while (1)
    {
      if (v67 == v66)
      {
        result = (char *)memmove(v12, v14, v18);
        v16 = v72;
        v71 = v68;
        v68 = v69;
        v69 = v12;
      }
      else
      {
        v71 = &v14[v60];
        v68 = &v14[-v65];
        v69 = v14;
      }
      *(_WORD *)v15 = *(_WORD *)v14;
      *((_WORD *)v15 + 1) = *((_WORD *)v14 + 1);
      *((_WORD *)v15 + 2) = *((_WORD *)v14 + 2);
      *((_WORD *)v15 + 3) = *((_WORD *)v14 + 3);
      *(_WORD *)&v15[2 * v2 - 2] = *(_WORD *)&v14[2 * v2 - 2];
      v23 = (v22 & 1) != 0 ? 3 : 4;
      v24 = *((unsigned __int8 *)&unk_1EFF32430 + (v23 & 3 | (4 * (v22 & 3))) + 48);
      v25 = v24 == 1 ? 1 : v24 ^ 2;
      if (v20 > v23)
        break;
LABEL_6:
      v17 += v63;
      ++v22;
      v18 = v65;
      v14 += v65;
      v15 += v64;
      v21 += v65;
      v12 = v71;
      if (v22 == v62)
        goto LABEL_50;
    }
    v26 = *((unsigned __int8 *)&unk_1EFF32430 + (v23 & 3 | (4 * (v22 & 3))) + 48);
    v27 = a1[v26 + 82];
    v28 = v25;
    v29 = a1[v28 + 82];
    v30 = a1[v26 + 85];
    v31 = a1[v28 + 85];
    v32 = *(_QWORD *)&a1[4 * *((unsigned __int8 *)&unk_1EFF32430 + (v23 & 3 | (4 * (v22 & 3))) + 48) + 70];
    v33 = *(_QWORD *)&a1[2 * ((2 * v24) | 1) + 70];
    v34 = *(_QWORD *)&a1[4 * v25 + 70];
    v35 = *(_QWORD *)&a1[2 * ((2 * v25) | 1) + 70];
    result = v71 + 2;
    v36 = v69 + 6;
    v37 = 2 * v23;
    while (1)
    {
      v40 = &v36[v37];
      v41 = *(unsigned __int16 *)&v69[v37];
      v42 = *(unsigned __int16 *)&v36[v37 - 4];
      *(_WORD *)&v15[v37] = *(_WORD *)(v32 + 2 * v41);
      v43 = &v15[2 * v23];
      *((_WORD *)v43 + 1) = *(_WORD *)(v33 + 2 * v42);
      if (v41 <= v8)
        goto LABEL_38;
      if (v9 == 8)
        goto LABEL_27;
      v44 = *((unsigned __int16 *)v40 - 2);
      v45 = &v36[v37];
      if ((v22 & 1) == 0)
        break;
      v50 = 16 * ((*((unsigned __int16 *)v45 - 4) + v44 + 1) >> 1);
      v47 = v50 - v41;
      if (v50 > v41)
      {
LABEL_28:
        v48 = ((v41 - v8) * v16 + 1024) >> 11;
        if (v48 >= 0x4000)
          v48 = 0x4000;
        v49 = v41 + ((int)(v47 * v48 + 0x2000) >> 14);
        if (HIWORD(v49))
        {
          v51 = (v49 - v27) * v30 + 4096;
          v49 = v51 >> 13;
          if (v51 >> 28)
            LOWORD(v49) = 0x7FFF;
        }
        else
        {
          LOWORD(v49) = *(_WORD *)(v32 + 2 * v49);
        }
        *(_WORD *)&v15[v37] = v49;
      }
LABEL_37:
      *(_DWORD *)&v17[(v23 >> 3) & 0x1FFFFFFFFFFFFFFCLL] |= 1 << v23;
LABEL_38:
      v52 = *((unsigned __int16 *)v40 - 1);
      v53 = *(unsigned __int16 *)v40;
      *((_WORD *)v43 + 2) = *(_WORD *)(v34 + 2 * v52);
      *(_WORD *)&v15[v37 + 6] = *(_WORD *)(v35 + 2 * v53);
      if (v52 <= v8)
        goto LABEL_22;
      if (v9 == 8)
        goto LABEL_42;
      if ((v22 & 1) == 0)
      {
        LODWORD(v53) = (*(unsigned __int16 *)&v36[v37 - 8]
                      + 9 * *(unsigned __int16 *)&v36[v37]
                      + 3 * (*(unsigned __int16 *)(v21 + v37 + 4) + *(unsigned __int16 *)&result[v37])
                      + 8) >> 4;
LABEL_42:
        v54 = 16 * v53 - v52;
        if (16 * (int)v53 > v52)
          goto LABEL_43;
        goto LABEL_21;
      }
      v56 = 16 * ((*((unsigned __int16 *)v40 - 2) + *(unsigned __int16 *)&v36[v37] + 1) >> 1);
      v54 = v56 - v52;
      if (v56 > v52)
      {
LABEL_43:
        v55 = ((v52 - v8) * v16 + 1024) >> 11;
        if (v55 >= 0x4000)
          v55 = 0x4000;
        v39 = v52 + ((int)(v54 * v55 + 0x2000) >> 14);
        if (HIWORD(v39))
        {
          v38 = (v39 - v29) * v31 + 4096;
          v39 = v38 >> 13;
          if (v38 >> 28)
            LOWORD(v39) = 0x7FFF;
        }
        else
        {
          LOWORD(v39) = *(_WORD *)(v34 + 2 * v39);
        }
        *((_WORD *)v43 + 2) = v39;
      }
LABEL_21:
      *(_DWORD *)&v17[((v23 + 2) >> 3) & 0x1FFFFFFFFFFFFFFCLL] |= 1 << (v23 + 2);
LABEL_22:
      v23 += 4;
      v37 += 8;
      if (v23 >= v20)
        goto LABEL_6;
    }
    v16 = v72;
    LODWORD(v42) = (*((unsigned __int16 *)v45 - 6)
                  + 9 * v44
                  + 3 * (*(unsigned __int16 *)(v21 + v37) + *(unsigned __int16 *)&result[v37 - 4])
                  + 8) >> 4;
LABEL_27:
    v46 = 16 * v42;
    v47 = 16 * v42 - v41;
    if (v46 > v41)
      goto LABEL_28;
    goto LABEL_37;
  }
  v18 = v4;
LABEL_50:
  if (v67 != v66)
  {
    v57 = v18;
    memmove(v15, v14, __len);
    return (char *)memmove(&v15[v64], &v14[v57], __len);
  }
  return result;
}

uint64_t sub_1D537AD28(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  _WORD *v17;

  v2 = a2[83];
  v3 = a2[84];
  if (v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = 0;
    v6 = a2[86];
    v7 = a2[88];
    v8 = a2[85];
    v9 = a2[87];
    do
    {
      v10 = 0;
      v11 = (_QWORD *)(result + 32 * (v5 & 3));
      v12 = v11[50];
      v13 = v11[51];
      v14 = v11[52];
      v15 = v11[53];
      do
      {
        v16 = (unsigned __int16 *)(v8 + 2 * v10);
        v17 = (_WORD *)(v9 + 2 * v10);
        *v17 = *(_WORD *)(v12 + 2 * *v16);
        v17[1] = *(_WORD *)(v13 + 2 * v16[1]);
        v17[2] = *(_WORD *)(v14 + 2 * v16[2]);
        v17[3] = *(_WORD *)(v15 + 2 * v16[3]);
        v10 += 4;
      }
      while (v10 < v2);
      ++v5;
      v8 += v6;
      v9 += v7;
    }
    while (v5 != v3);
  }
  return result;
}

uint64_t sub_1D537ADC8(_DWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  uint64_t result;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  signed int v19;
  signed int v20;
  signed int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  signed int v29;
  int v30;
  int v31;
  signed int v32;
  BOOL v33;
  __int16 v34;
  signed int v35;
  signed int v36;
  __int16 v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  signed int v44;
  int v45;
  signed int v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  signed int v52;
  int v53;
  int v54;
  signed int v55;
  __int16 v58;
  signed int v59;
  signed int v60;
  __int16 v63;
  uint64_t v64;
  unint64_t v65;
  signed int v66;
  signed int v67;
  signed int v68;
  __int16 v69;
  signed int v70;
  int v71;
  signed int v72;
  int v73;
  int v74;
  signed int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  __int16 v83;
  signed int v84;
  signed int v85;
  BOOL v86;
  int v87;
  signed int v88;
  int v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  signed int v98;
  int v99;
  int v100;
  signed int v101;
  __int16 v104;
  signed int v105;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  unint64_t __len;
  uint64_t v113;
  char *v114;
  char *__dst;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  int v123;
  char *v124;
  char *v125;
  int v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  int v135;
  int v136;
  int v137;
  signed int v138;
  signed int v139;
  int v140;
  unint64_t v141;

  v2 = a2[89];
  v3 = a2[90];
  v4 = (char *)a2[91];
  v5 = a2[92];
  v6 = v5 >> 1;
  v136 = a1[146];
  v137 = a1[145];
  v135 = a1[147];
  v139 = a1[143];
  v140 = a1[142];
  v138 = a1[144];
  v7 = (char *)a2[93];
  v8 = &v7[2 * (v5 >> 1)];
  v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
  memmove(v8, v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  result = (uint64_t)memmove(v7, v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  v110 = v3 - 6;
  if ((unint64_t)(v3 - 6) >= 3)
  {
    v11 = &v8[2 * v6];
    v141 = v2 - 4;
    v12 = &v4[2 * v9];
    v118 = &v4[8 * v6];
    v134 = v118 + 14;
    v13 = (2 * v5) | 2;
    v132 = (uint64_t)&v4[4 * v6 + 8 + v13];
    v14 = &v4[6 * v6];
    v131 = v14 + 16;
    v121 = v14 + 8;
    v120 = (uint64_t)&v4[12 * v6 + 14];
    v119 = (uint64_t)&v4[10 * v6 + 8];
    v108 = v5 >> 1;
    v109 = 8 * v6;
    v117 = (uint64_t)&v4[8 * v6 + 8 + v13];
    v15 = 2;
    __len = v5 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v16 = v11;
      memmove(v11, v12, v9);
      __dst = v8;
      v116 = v16;
      v133 = v12;
      v113 = v15;
      if (v141 < 5)
      {
        memmove(v7, &v12[2 * v6], v9);
        memmove(v8, &v12[2 * v6 + 2 * v6], v9);
        result = (uint64_t)memmove(v16, &v12[4 * v6 + 2 * v6], v9);
      }
      else
      {
        v111 = v7;
        v17 = 0;
        v114 = v16 + 8;
        v122 = v7 + 8;
        v127 = v7 + 10;
        v129 = v8 + 8;
        v125 = v16 + 18;
        v18 = 4;
        v20 = v139;
        v19 = v140;
        v21 = v138;
        do
        {
          v22 = *(unsigned __int16 *)&v125[v17 - 8];
          v23 = *(unsigned __int16 *)&v125[v17 - 4];
          v24 = *(unsigned __int16 *)&v127[v17 + 4];
          v25 = *(unsigned __int16 *)&v125[v17];
          v26 = *(unsigned __int16 *)&v134[v17];
          v27 = *(unsigned __int16 *)&v131[v17 - 4];
          v28 = *(unsigned __int16 *)&v129[v17 + 4] + 2;
          v29 = (v28 + *(unsigned __int16 *)&v129[v17] + *(unsigned __int16 *)&v131[v17 - 8] + v27) >> 2;
          v30 = *(unsigned __int16 *)&v129[v17 + 8];
          v31 = *(unsigned __int16 *)&v131[v17];
          v32 = (v23
               + *(unsigned __int16 *)&v127[v17]
               + *(unsigned __int16 *)&v125[v17 - 12]
               + *(unsigned __int16 *)(v132 + v17)
               + 2) >> 2;
          if (v19 < v22 || (v29 <= v20 ? (v33 = v32 <= v21) : (v33 = 0), !v33))
          {
            v123 = *(unsigned __int16 *)&v125[v17];
            v34 = sub_1D537BCBC(v22, v29, v32, v137, v136, v135, 0);
            v21 = v138;
            v20 = v139;
            v19 = v140;
            *(_WORD *)&v133[v17 + 10] = v34;
            v25 = v123;
          }
          v35 = (v22 + v24 + v25 + v26 + 2) >> 2;
          v36 = (v28 + v27 + v30 + v31) >> 2;
          if (v35 > v19 || v36 > v20 || v21 < v23)
          {
            v39 = sub_1D537BCBC(v35, v36, v23, v137, v136, v135, 2);
            v21 = v138;
            v20 = v139;
            v19 = v140;
            *(_WORD *)&v133[v17 + 14] = v39;
          }
          v18 += 4;
          v17 += 8;
        }
        while (v18 < v141);
        v40 = &v133[2 * v108];
        memmove(v111, v40, __len);
        v41 = 0;
        v42 = v116 + 14;
        v43 = 7;
        v45 = v139;
        v44 = v140;
        v46 = v138;
        do
        {
          v48 = *(unsigned __int16 *)&v122[v41];
          v49 = *(unsigned __int16 *)&v122[v41 + 4];
          v50 = *(unsigned __int16 *)&v134[v41];
          v51 = *(unsigned __int16 *)&v42[v41 - 4] + 1;
          v52 = (v51 + *(unsigned __int16 *)&v134[v41 - 8]) >> 1;
          v53 = *(unsigned __int16 *)&v42[v41];
          v54 = *(unsigned __int16 *)&v134[v41 - 4] + 1;
          v55 = (v54 + *(unsigned __int16 *)&v42[v41 - 8]) >> 1;
          if (v52 > v44 || v45 < v48 || v55 > v46)
          {
            v58 = sub_1D537BCBC(v52, v48, v55, v137, v136, v135, 1);
            v46 = v138;
            v45 = v139;
            v44 = v140;
            *(_WORD *)&v121[v41] = v58;
          }
          v59 = (v51 + v50) >> 1;
          v60 = (v54 + v53) >> 1;
          if (v59 > v44 || v45 < v49 || v60 > v46)
          {
            v63 = sub_1D537BCBC(v59, v49, v60, v137, v136, v135, 1);
            v46 = v138;
            v45 = v139;
            v44 = v140;
            *(_WORD *)&v121[v41 + 4] = v63;
          }
          v47 = v43 + 1;
          v43 += 4;
          v41 += 8;
        }
        while (v47 < v141);
        memmove(__dst, &v40[2 * v108], __len);
        v124 = &v40[2 * v108];
        v64 = 0;
        v128 = __dst + 18;
        v130 = v116 + 14;
        v65 = 4;
        v67 = v139;
        v66 = v140;
        v68 = v138;
        do
        {
          v70 = *(unsigned __int16 *)&v128[v64 - 8];
          v71 = *(unsigned __int16 *)&v128[v64 - 4];
          v72 = (v71
               + *(unsigned __int16 *)&v130[v64 - 4]
               + *(unsigned __int16 *)&v128[v64 - 12]
               + *(unsigned __int16 *)(v117 + v64)
               + 2) >> 2;
          v73 = *(unsigned __int16 *)(v119 + v64 + 4);
          v74 = *(unsigned __int16 *)&v122[v64 + 4] + 2;
          v75 = (v74 + *(unsigned __int16 *)&v122[v64] + *(unsigned __int16 *)(v119 + v64) + v73) >> 2;
          v76 = *(unsigned __int16 *)&v122[v64 + 8];
          v77 = *(unsigned __int16 *)(v119 + v64 + 8);
          v78 = *(unsigned __int16 *)&v130[v64];
          v79 = *(unsigned __int16 *)&v128[v64];
          v80 = *(unsigned __int16 *)(v120 + v64);
          if (v72 > v66 || v75 > v67 || v68 < v70)
          {
            v126 = *(unsigned __int16 *)&v128[v64];
            v83 = sub_1D537BCBC(v72, v75, *(unsigned __int16 *)&v128[v64 - 8], v137, v136, v135, 2);
            v79 = v126;
            v68 = v138;
            v67 = v139;
            v66 = v140;
            *(_WORD *)&v118[v64 + 10] = v83;
          }
          v84 = (v74 + v73 + v76 + v77) >> 2;
          v85 = (v70 + v78 + v79 + v80 + 2) >> 2;
          if (v66 < v71 || (v84 <= v67 ? (v86 = v85 <= v68) : (v86 = 0), !v86))
          {
            v69 = sub_1D537BCBC(v71, v84, v85, v137, v136, v135, 0);
            v68 = v138;
            v67 = v139;
            v66 = v140;
            *(_WORD *)&v118[v64 + 14] = v69;
          }
          v65 += 4;
          v64 += 8;
        }
        while (v65 < v141);
        v6 = v108;
        memmove(v116, &v124[2 * v108], __len);
        v88 = v138;
        v87 = v139;
        v89 = v140;
        v7 = v111;
        v90 = 0;
        v91 = __dst + 10;
        v92 = 7;
        do
        {
          v94 = *(unsigned __int16 *)&v114[v90];
          v95 = *(unsigned __int16 *)&v114[v90 + 4];
          v96 = *(unsigned __int16 *)&v91[v90 + 4];
          v97 = *(unsigned __int16 *)(v120 + v90 - 4) + 1;
          v98 = (v97 + *(unsigned __int16 *)&v91[v90 - 4]) >> 1;
          v99 = *(unsigned __int16 *)(v120 + v90);
          v100 = *(unsigned __int16 *)&v91[v90] + 1;
          v101 = (v100 + *(unsigned __int16 *)(v120 + v90 - 8)) >> 1;
          if (v98 > v89 || v87 < v94 || v101 > v88)
          {
            v104 = sub_1D537BCBC(v98, v94, v101, v137, v136, v135, 1);
            v88 = v138;
            v87 = v139;
            v89 = v140;
            *(_WORD *)(v119 + v90) = v104;
          }
          result = (v97 + v96) >> 1;
          v105 = (v100 + v99) >> 1;
          if ((int)result > v89 || v87 < v95 || v105 > v88)
          {
            result = sub_1D537BCBC(result, v95, v105, v137, v136, v135, 1);
            v88 = v138;
            v87 = v139;
            v89 = v140;
            *(_WORD *)(v119 + v90 + 4) = result;
          }
          v93 = v92 + 1;
          v92 += 4;
          v90 += 8;
        }
        while (v93 < v141);
      }
      v15 = v113 + 4;
      v12 = &v133[v109];
      v134 += v109;
      v132 += v109;
      v131 += v109;
      v121 += v109;
      v118 += v109;
      v120 += v109;
      v119 += v109;
      v8 = v116;
      v117 += v109;
      v11 = v7;
      v7 = __dst;
      v9 = __len;
    }
    while (v113 + 4 < v110);
  }
  return result;
}

uint64_t sub_1D537B568(_DWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  uint64_t result;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  signed int v21;
  signed int v22;
  signed int v23;
  __int16 v24;
  int v25;
  int v26;
  signed int v27;
  int v28;
  int v29;
  signed int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  __int16 v38;
  signed int v39;
  signed int v40;
  BOOL v41;
  char *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  signed int v46;
  int v47;
  signed int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  signed int v53;
  int v54;
  int v55;
  signed int v56;
  __int16 v59;
  signed int v60;
  signed int v61;
  __int16 v64;
  uint64_t v65;
  unint64_t v66;
  signed int v67;
  signed int v68;
  signed int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  signed int v77;
  int v78;
  int v79;
  signed int v80;
  BOOL v81;
  __int16 v82;
  signed int v83;
  signed int v84;
  __int16 v87;
  int v88;
  signed int v89;
  int v90;
  unsigned __int16 *v91;
  unsigned __int16 *v92;
  _WORD *v93;
  unint64_t i;
  char *v95;
  int v96;
  int v97;
  int v98;
  int v99;
  signed int v100;
  int v101;
  int v102;
  signed int v103;
  __int16 v106;
  signed int v107;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  size_t __len;
  uint64_t v114;
  unsigned __int16 *v115;
  _WORD *v116;
  char *__dst;
  unsigned __int16 *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  int v124;
  char *v125;
  char *v126;
  int v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  int v134;
  int v135;
  int v136;
  signed int v137;
  signed int v138;
  int v139;
  unint64_t v140;

  v2 = a2[89];
  v3 = a2[90];
  v4 = (char *)a2[91];
  v5 = a2[92];
  v6 = v5 >> 1;
  v135 = a1[146];
  v136 = a1[145];
  v134 = a1[147];
  v138 = a1[143];
  v139 = a1[142];
  v137 = a1[144];
  v7 = (char *)a2[93];
  v8 = &v7[2 * (v5 >> 1)];
  v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
  memmove(v8, v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  result = (uint64_t)memmove(v7, v4, v9);
  v112 = v3 - 6;
  if ((unint64_t)(v3 - 6) >= 3)
  {
    v11 = &v4[2 * v9];
    v12 = &v8[2 * v6];
    v140 = v2 - 4;
    v132 = (uint64_t)&v4[6 * v6 + 14];
    v110 = v6;
    v111 = 8 * v6;
    v13 = &v4[8 * v6];
    v130 = v13 + 12;
    v14 = v13 + 8;
    v15 = &v4[10 * v6];
    v122 = v15 + 10;
    v123 = v14;
    v16 = &v4[12 * v6];
    v121 = v16 + 12;
    v115 = (unsigned __int16 *)(v16 + 16);
    v116 = v15 + 14;
    v17 = 2;
    __len = v9;
    do
    {
      v18 = v12;
      memmove(v12, v11, v9);
      __dst = v7;
      v118 = (unsigned __int16 *)v18;
      v131 = v11;
      v114 = v17;
      if (v140 < 5)
      {
        memmove(v7, &v11[2 * v6], v9);
        memmove(v8, &v11[2 * v6 + 2 * v6], v9);
        result = (uint64_t)memmove(v18, &v11[4 * v6 + 2 * v6], v9);
      }
      else
      {
        v19 = 0;
        v128 = v7 + 8;
        v133 = v18 + 8;
        v119 = v8;
        v120 = v8 + 8;
        v126 = v8 + 14;
        v20 = 4;
        v22 = v138;
        v21 = v139;
        v23 = v137;
        do
        {
          v25 = *(unsigned __int16 *)&v133[v19];
          v26 = *(unsigned __int16 *)&v133[v19 + 4];
          v27 = (v26
               + *(unsigned __int16 *)&v128[v19]
               + *(unsigned __int16 *)&v133[v19 - 4]
               + *(unsigned __int16 *)&v130[v19 - 4]
               + 2) >> 2;
          v28 = *(unsigned __int16 *)(v132 + v19 - 4);
          v29 = *(unsigned __int16 *)&v126[v19 - 4] + 2;
          v30 = (v29 + *(unsigned __int16 *)&v126[v19 - 8] + *(unsigned __int16 *)(v132 + v19 - 8) + v28) >> 2;
          v31 = *(unsigned __int16 *)&v126[v19];
          v32 = *(unsigned __int16 *)(v132 + v19);
          v33 = *(unsigned __int16 *)&v128[v19 + 4];
          v34 = *(unsigned __int16 *)&v133[v19 + 8];
          v35 = *(unsigned __int16 *)&v130[v19];
          if (v27 > v21 || v30 > v22 || v23 < v25)
          {
            v124 = *(unsigned __int16 *)&v133[v19 + 4];
            v38 = sub_1D537BCBC(v27, v30, v25, v136, v135, v134, 2);
            v26 = v124;
            v23 = v137;
            v22 = v138;
            v21 = v139;
            *(_WORD *)&v131[v19 + 8] = v38;
          }
          v39 = (v29 + v28 + v31 + v32) >> 2;
          v40 = (v25 + v33 + v34 + v35 + 2) >> 2;
          if (v21 < v26 || (v39 <= v22 ? (v41 = v40 <= v23) : (v41 = 0), !v41))
          {
            v24 = sub_1D537BCBC(v26, v39, v40, v136, v135, v134, 0);
            v23 = v137;
            v22 = v138;
            v21 = v139;
            *(_WORD *)&v131[v19 + 12] = v24;
          }
          v20 += 4;
          v19 += 8;
        }
        while (v20 < v140);
        v42 = &v131[2 * v110];
        memmove(__dst, v42, __len);
        v43 = 0;
        v44 = __dst + 14;
        v45 = 4;
        v47 = v138;
        v46 = v139;
        v48 = v137;
        do
        {
          v49 = *(unsigned __int16 *)&v44[v43 - 4];
          v50 = *(unsigned __int16 *)&v44[v43];
          v51 = *(unsigned __int16 *)&v123[v43 + 8];
          v52 = *(unsigned __int16 *)&v133[v43 + 4] + 1;
          v53 = (v52 + *(unsigned __int16 *)&v123[v43]) >> 1;
          v54 = *(unsigned __int16 *)&v133[v43 + 8];
          v55 = *(unsigned __int16 *)&v123[v43 + 4] + 1;
          v56 = (v55 + *(unsigned __int16 *)&v133[v43]) >> 1;
          if (v53 > v46 || v47 < v49 || v56 > v48)
          {
            v59 = sub_1D537BCBC(v53, v49, v56, v136, v135, v134, 1);
            v48 = v137;
            v47 = v138;
            v46 = v139;
            *(_WORD *)(v132 + v43 - 4) = v59;
          }
          v60 = (v52 + v51) >> 1;
          v61 = (v55 + v54) >> 1;
          if (v60 > v46 || v47 < v50 || v61 > v48)
          {
            v64 = sub_1D537BCBC(v60, v50, v61, v136, v135, v134, 1);
            v48 = v137;
            v47 = v138;
            v46 = v139;
            *(_WORD *)(v132 + v43) = v64;
          }
          v45 += 4;
          v43 += 8;
        }
        while (v45 < v140);
        memmove(v119, &v42[2 * v110], __len);
        v125 = &v42[2 * v110];
        v65 = 0;
        v129 = __dst + 14;
        v66 = 4;
        v68 = v138;
        v67 = v139;
        v69 = v137;
        do
        {
          v70 = *(unsigned __int16 *)&v120[v65];
          v71 = *(unsigned __int16 *)&v120[v65 + 4];
          v72 = *(unsigned __int16 *)&v133[v65 + 4];
          v73 = *(unsigned __int16 *)&v120[v65 + 8];
          v74 = *(unsigned __int16 *)&v121[v65];
          v75 = *(unsigned __int16 *)&v122[v65];
          v76 = *(unsigned __int16 *)&v129[v65 - 4] + 2;
          v77 = (v76 + *(unsigned __int16 *)&v129[v65 - 8] + *(unsigned __int16 *)&v122[v65 - 4] + v75) >> 2;
          v78 = *(unsigned __int16 *)&v129[v65];
          v79 = *(unsigned __int16 *)&v122[v65 + 4];
          v80 = (v71
               + *(unsigned __int16 *)&v133[v65]
               + *(unsigned __int16 *)&v120[v65 - 4]
               + *(unsigned __int16 *)&v121[v65 - 4]
               + 2) >> 2;
          if (v67 < v70 || (v77 <= v68 ? (v81 = v80 <= v69) : (v81 = 0), !v81))
          {
            v127 = *(unsigned __int16 *)&v120[v65 + 8];
            v82 = sub_1D537BCBC(v70, v77, v80, v136, v135, v134, 0);
            v69 = v137;
            v68 = v138;
            v67 = v139;
            *(_WORD *)&v123[v65] = v82;
            v73 = v127;
          }
          v83 = (v70 + v72 + v73 + v74 + 2) >> 2;
          v84 = (v76 + v75 + v78 + v79) >> 2;
          if (v83 > v67 || v84 > v68 || v69 < v71)
          {
            v87 = sub_1D537BCBC(v83, v84, v71, v136, v135, v134, 2);
            v69 = v137;
            v68 = v138;
            v67 = v139;
            *(_WORD *)&v123[v65 + 4] = v87;
          }
          v66 += 4;
          v65 += 8;
        }
        while (v66 < v140);
        v6 = v110;
        memmove(v118, &v125[2 * v110], __len);
        v89 = v137;
        v88 = v138;
        v90 = v139;
        v8 = v119;
        v91 = v118 + 7;
        v92 = v115;
        v93 = v116;
        for (i = 4; i < v140; i += 4)
        {
          v95 = &v8[2 * i];
          v96 = *(v91 - 2);
          v97 = *v91;
          v98 = *((unsigned __int16 *)v95 + 4);
          v99 = *(v92 - 2) + 1;
          v100 = (v99 + *(unsigned __int16 *)v95) >> 1;
          v101 = *v92;
          v102 = *((unsigned __int16 *)v95 + 2) + 1;
          v103 = (v102 + *(v92 - 4)) >> 1;
          if (v100 > v90 || v88 < v96 || v103 > v89)
          {
            v106 = sub_1D537BCBC(v100, v96, v103, v136, v135, v134, 1);
            v89 = v137;
            v88 = v138;
            v90 = v139;
            *(v93 - 2) = v106;
          }
          result = (v99 + v98) >> 1;
          v107 = (v102 + v101) >> 1;
          if ((int)result > v90 || v88 < v97 || v107 > v89)
          {
            result = sub_1D537BCBC(result, v97, v107, v136, v135, v134, 1);
            v89 = v137;
            v88 = v138;
            v90 = v139;
            *v93 = result;
          }
          v91 += 4;
          v92 += 4;
          v93 += 4;
          v8 = v119;
        }
      }
      v17 = v114 + 4;
      v11 = &v131[v111];
      v132 += v111;
      v130 += v111;
      v123 += v111;
      v122 += v111;
      v121 += v111;
      v116 = (_WORD *)((char *)v116 + v111);
      v115 = (unsigned __int16 *)((char *)v115 + v111);
      v7 = v8;
      v9 = __len;
      v12 = __dst;
      v8 = (char *)v118;
    }
    while (v114 + 4 < v112);
  }
  return result;
}

uint64_t sub_1D537BCBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  _DWORD v64[3];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (a1 >= a4)
    v8 = a4;
  else
    v8 = a1;
  if (a2 >= a5)
    v9 = a5;
  else
    v9 = a2;
  if (a3 >= a6)
    v10 = a6;
  else
    v10 = a3;
  v11 = v10 - v9 + ((v9 - v8) & ((v9 - v8) >> 31));
  result = v10 - (v11 & (v11 >> 31));
  if (a4 > a1 || a5 > a2 || a6 > a3)
  {
    v13 = 819 * a4 / 1024;
    v14 = 819 * a5 / 1024;
    v15 = 819 * a6 / 1024;
    v16 = a6 + a4;
    if (a6 + a4 < 0 != __OFADD__(a6, a4))
      ++v16;
    v17 = v16 >> 1;
    v18 = v15 + v13;
    if (v15 + v13 < 0 != __OFADD__(v15, v13))
      ++v18;
    v19 = v18 >> 1;
    v20 = v10 + v8;
    if (v10 + v8 < 0 != __OFADD__(v10, v8))
      ++v20;
    v21 = v20 >> 1;
    if (v21 <= v19)
    {
      v22 = 0;
    }
    else if (v21 >= v17)
    {
      v22 = 0x2000;
    }
    else
    {
      v22 = ((v21 - v19) << 13) / (v17 - v19);
    }
    v23 = (0x2000 - v22) * v21 + v22 * result;
    v24 = v23 + 4096;
    v25 = v23 + 12287;
    if (v24 >= 0)
      v25 = v24;
    v26 = v25 >> 13;
    if (v26 <= v9)
      v26 = v9;
    v27 = (v9 > v14) << 13;
    if (v9 > v14)
      v28 = ((v9 - v14) << 13) / (a5 - v14);
    else
      v28 = (v9 > v14) << 13;
    if (a5 <= a2)
      v28 = v27;
    v29 = (0x2000 - v28) * v9 + v28 * v26;
    v30 = v29 + 4096;
    v31 = v29 + 12287;
    if (v30 >= 0)
      v31 = v30;
    v32 = v31 >> 13;
    if (a6 >= a4)
    {
      v36 = v10 + a4;
      if (v10 + a4 < 0 != __OFADD__(v10, a4))
        ++v36;
      v37 = v36 >> 1;
      if (v37 <= v19)
      {
        v38 = 0;
      }
      else if (v37 >= v17)
      {
        v38 = 0x2000;
      }
      else
      {
        v38 = ((v37 - v19) << 13) / (v17 - v19);
      }
      v47 = (0x2000 - v38) * v37 + v38 * result;
      v48 = v47 + 4096;
      v49 = v47 + 12287;
      if (v48 >= 0)
        v49 = v48;
      v50 = v49 >> 13;
      if (v50 <= v8)
        v50 = v8;
      v51 = (v8 > v13) << 13;
      if (v8 > v13)
        v52 = ((v8 - v13) << 13) / (a4 - v13);
      else
        v52 = (v8 > v13) << 13;
      if (a4 > a1)
        v53 = v52;
      else
        v53 = v51;
      v54 = (0x2000 - v53) * v8 + v53 * v50;
      v55 = v54 + 4096;
      v56 = v54 + 12287;
      if (v55 >= 0)
        v56 = v55;
      v8 = v56 >> 13;
    }
    else
    {
      v33 = v8 + a6;
      if (v8 + a6 < 0 != __OFADD__(v8, a6))
        ++v33;
      v34 = v33 >> 1;
      if (v34 <= v19)
      {
        v35 = 0;
      }
      else if (v34 >= v17)
      {
        v35 = 0x2000;
      }
      else
      {
        v35 = ((v34 - v19) << 13) / (v17 - v19);
      }
      v39 = (0x2000 - v35) * v34 + v35 * result;
      v40 = v39 + 4096;
      v41 = v39 + 12287;
      if (v40 >= 0)
        v41 = v40;
      v42 = v41 >> 13;
      if (v42 <= v10)
        v42 = v10;
      v43 = ((v10 - v15) << 13) / (a6 - v15);
      if (v10 <= v15)
        v43 = (v10 > v15) << 13;
      if (a6 <= a3)
        v43 = (v10 > v15) << 13;
      v44 = (0x2000 - v43) * v10 + v43 * v42;
      v45 = v44 + 4096;
      v46 = v44 + 12287;
      if (v45 >= 0)
        v46 = v45;
      v10 = v46 >> 13;
    }
    v57 = ((v32 - v8) & ((v32 - v8) >> 31)) + v8;
    v58 = ((v10 - v57) & ((v10 - v57) >> 31)) + v57;
    if (v58 <= a5)
    {
      v60 = 0;
    }
    else
    {
      v59 = ((a6 - a4) & ((a6 - a4) >> 31)) + a4;
      if (v58 >= v59)
        v60 = 0x2000;
      else
        v60 = ((v58 - a5) << 13) / (v59 - a5);
    }
    v64[0] = v8;
    v64[1] = v32;
    v64[2] = v10;
    v61 = v64[a7] * (0x2000 - v60) + v60 * ((v10 + v32 + v8) / 3);
    v62 = v61 + 4096;
    v63 = v61 + 12287;
    if (v62 >= 0)
      v63 = v62;
    return (v63 >> 13);
  }
  return result;
}

unint64_t sub_1D537C074(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t result;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  char *v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  signed int v51;
  int v52;
  int v53;
  int v54;
  signed int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  signed int v60;
  int v61;
  signed int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  signed int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  unsigned int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  char *v140;
  unsigned __int16 *v141;
  int v142;
  int v143;
  int v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  int v149;
  char *v150;
  int v151;
  int v152;
  unsigned __int16 *v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  uint64_t v175;
  unsigned __int16 *v176;
  char *v177;
  uint64_t v178;
  unsigned __int16 *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned __int16 *v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t __len;
  unsigned int v196;
  unsigned int v197;
  int v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  char *v207;
  int v208;

  v187 = *(_QWORD *)(a1 + 632);
  v204 = a2[94];
  v2 = a2[95];
  v3 = (char *)a2[96];
  v4 = a2[97];
  v5 = v4 >> 1;
  v206 = *(_QWORD *)(a1 + 640);
  v184 = (unsigned __int16 *)a2[98];
  result = (unint64_t)memmove(v184, v3, 8 * (v4 >> 1));
  v178 = v2 - 4;
  if ((unint64_t)(v2 - 4) >= 5)
  {
    v201 = 4 * v5;
    v207 = &v3[8 * v5];
    v7 = (char *)&v184[4 * v5];
    v205 = (char *)&v184[3 * v5];
    __len = v4 & 0xFFFFFFFFFFFFFFFELL;
    v8 = (char *)&v184[v4 & 0xFFFFFFFFFFFFFFFELL];
    v9 = (char *)&v184[v5];
    if ((unint64_t)(v204 - 4) > 4)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v208 = 0;
      v191 = 0;
      v17 = 0;
      v199 = 0;
      v198 = 0;
      v203 = &v3[12 * v5];
      v192 = (uint64_t)&v3[14 * v5 + 6];
      v193 = (uint64_t)&v3[10 * v5 + 14];
      v18 = 4;
LABEL_5:
      v19 = v8;
      v181 = v205;
      v179 = (unsigned __int16 *)v9;
      v189 = v9 + 6;
      v190 = v205 + 10;
      v205 = v7;
      v20 = v17;
      v21 = v15;
      v22 = v13;
      v23 = v11;
      memmove(v7, v207, __len);
      v11 = v23;
      v13 = v22;
      v15 = v21;
      v17 = v20;
      v9 = v19;
      v24 = 0;
      v25 = (char *)(v184 + 4);
      v26 = v19 + 8;
      v180 = v18;
      v27 = 4 * v18;
      v28 = (4 * v18) & 0xC;
      v183 = (v27 + 4) & 0xCLL;
      v182 = (v27 + 8) & 0xCLL;
      v29 = 8;
      v30 = v187;
      v188 = v19;
      v185 = v28;
      while (2)
      {
        v42 = &v9[v24 + 8];
        v43 = *(unsigned __int16 *)&v207[v24 + 8];
        result = ((_BYTE)v29 - 4) & 3;
        v44 = *(unsigned __int8 *)(v206 + (result | v28));
        switch(*(_BYTE *)(v206 + (result | v28)))
        {
          case 0:
          case 2:
          case 3:
          case 5:
            v45 = v26 - 4;
            v46 = -4;
            v47 = 4;
            v48 = __len + 2;
            v49 = v201;
            v50 = v25;
            goto LABEL_64;
          case 1:
            v50 = &v9[v24 + 4];
            goto LABEL_63;
          case 4:
            v50 = v26 - 4;
LABEL_63:
            v46 = -2;
            v45 = &v9[v24 + 8];
            v47 = 2;
            v48 = __len;
            v49 = __len + 2;
LABEL_64:
            v10 = *(unsigned __int16 *)v50;
            v11 = *(unsigned __int16 *)v45;
            v12 = *(unsigned __int16 *)&v9[v24 + 12];
            v13 = *(unsigned __int16 *)&v205[2 * v46 + 8 + v24];
            v14 = *(unsigned __int16 *)&v205[2 * v47 + 8 + v24];
            v15 = *(unsigned __int16 *)&v203[v24 + 4];
            v16 = *(unsigned __int16 *)&v207[2 * v48 + 8 + v24];
            v208 = *(unsigned __int16 *)&v207[2 * v49 + 8 + v24];
            goto LABEL_65;
          case 6:
            goto LABEL_26;
          default:
LABEL_65:
            v89 = (v208 + v16 + v15 + v14 + v13 + v12 + v11 + v10 + 4) >> 3;
            if (3 * v89 < 2 * v43)
            {
              v202 = &v207[v24];
              if ((int)v11 <= v10)
                v32 = v10;
              else
                v32 = v11;
              if ((int)v13 <= v12)
                v34 = v12;
              else
                v34 = v13;
              if ((int)v15 <= v14)
                v36 = v14;
              else
                v36 = v15;
              if (v208 <= v16)
                v38 = v16;
              else
                v38 = v208;
              v31 = ((v11 - v10) & (((int)v11 - v10) >> 31)) + v10;
              v33 = ((v13 - v12) & (((int)v13 - v12) >> 31)) + v12;
              v39 = ((v33 - v31) & ((v33 - v31) >> 31)) + v31;
              if (v34 > v32)
                v32 = v34;
              if (v38 <= v36)
                result = v36;
              else
                result = v38;
              v35 = ((v15 - v14) & (((int)v15 - v14) >> 31)) + v14;
              v37 = ((v208 - v16) & ((v208 - v16) >> 31)) + v16;
              v40 = ((v37 - v35) & ((v37 - v35) >> 31)) + v35;
              v41 = (v40 - v39) & ((v40 - v39) >> 31);
              if ((int)result > v32)
                v32 = result;
              if ((int)(11 * (v32 - v39 - v41) + 4 * (v89 - v43)) < 0)
              {
                if (v44 <= 5)
                {
                  if (((1 << v44) & 0x2D) != 0)
                  {
                    v51 = *(unsigned __int16 *)v42;
                    v52 = *(unsigned __int16 *)&v205[v24 + 4];
                    v53 = *(unsigned __int16 *)&v205[v24 + 12];
                    v54 = *(unsigned __int16 *)&v203[v24 + 8];
                    v55 = *(unsigned __int16 *)&v189[v24];
                    v56 = *(unsigned __int16 *)&v189[v24 + 4];
                    v57 = *(unsigned __int16 *)&v190[v24 - 8];
                    v58 = *(unsigned __int16 *)&v190[v24 - 4];
                    v59 = *(unsigned __int16 *)&v190[v24];
                    v60 = *(unsigned __int16 *)&v190[v24 + 4];
                    v61 = *(unsigned __int16 *)(v193 + v24 - 12);
                    v196 = v11;
                    v62 = *(unsigned __int16 *)(v193 + v24 - 8);
                    v63 = *(unsigned __int16 *)(v193 + v24 - 4);
                    v64 = *(unsigned __int16 *)(v193 + v24);
                    v186 = v15;
                    v65 = *(unsigned __int16 *)(v192 + v24);
                    v66 = *(unsigned __int16 *)(v192 + v24 + 4);
                    v67 = ((v52 - v51) & ((v52 - v51) >> 31)) + v51;
                    v191 = __PAIR64__(v51, v55);
                    if (v52 <= v51)
                      v52 = v51;
                    v68 = v13;
                    v69 = (v54 - v53) & ((v54 - v53) >> 31);
                    if (v54 <= v53)
                      v54 = *(unsigned __int16 *)&v205[v24 + 12];
                    v70 = v53 - v67 + v69;
                    v13 = v68;
                    v198 = (v70 & (v70 >> 31)) + v67;
                    if (v54 <= v52)
                      v71 = v52;
                    else
                      v71 = v54;
                    LODWORD(v199) = v71;
                    v72 = ((v56 - v55) & ((v56 - v55) >> 31)) + v55;
                    if (v56 <= v55)
                      v73 = *(unsigned __int16 *)&v189[v24];
                    else
                      v73 = *(unsigned __int16 *)&v189[v24 + 4];
                    v74 = (v58 - v57) & ((v58 - v57) >> 31);
                    if (v58 <= v57)
                      v75 = *(unsigned __int16 *)&v190[v24 - 8];
                    else
                      v75 = *(unsigned __int16 *)&v190[v24 - 4];
                    v76 = ((v60 - v59) & ((v60 - v59) >> 31)) + v59;
                    if (v60 <= v59)
                      v60 = *(unsigned __int16 *)&v190[v24];
                    v77 = (v62 - v61) & ((v62 - v61) >> 31);
                    if (v62 <= v61)
                      v62 = *(unsigned __int16 *)(v193 + v24 - 12);
                    v78 = ((v64 - v63) & ((v64 - v63) >> 31)) + v63;
                    if (v64 <= v63)
                      v64 = *(unsigned __int16 *)(v193 + v24 - 4);
                    v79 = (v66 - v65) & ((v66 - v65) >> 31);
                    if (v66 <= v65)
                      v66 = *(unsigned __int16 *)(v192 + v24);
                    v80 = ((v57 - v72 + v74) & ((v57 - v72 + v74) >> 31)) + v72;
                    if (v75 > v73)
                      v73 = v75;
                    if (v62 <= v60)
                      result = v60;
                    else
                      result = v62;
                    v11 = v196;
                    v82 = v65 - v78 + v79;
                    v30 = v187;
                    v9 = v188;
                    v83 = v82 & (v82 >> 31);
                    if (v66 <= v64)
                      v84 = v64;
                    else
                      v84 = v66;
                    v15 = v186;
                    v85 = ((result - v73) & (((int)result - v73) >> 31)) - result + v84;
                    v17 = v84 - (v85 & (v85 >> 31));
                    v81 = (v61 - v76 + v77) & ((v61 - v76 + v77) >> 31);
                    v86 = ((v76 - v80 + v81) & ((v76 - v80 + v81) >> 31)) + v80;
                    v87 = v78 - v86;
                    v28 = v185;
                    v88 = v87 + v83;
                  }
                  else
                  {
                    v140 = &v190[v24];
                    v141 = (unsigned __int16 *)(v193 + v24);
                    if (*(unsigned __int16 *)(v193 + v24 - 4) <= (int)*(unsigned __int16 *)&v190[v24 - 4])
                      v142 = *(unsigned __int16 *)&v190[v24 - 4];
                    else
                      v142 = *(unsigned __int16 *)(v193 + v24 - 4);
                    v143 = ((*(unsigned __int16 *)&v190[v24 + 4] - *(unsigned __int16 *)&v189[v24 + 4]) & ((*(unsigned __int16 *)&v190[v24 + 4] - *(unsigned __int16 *)&v189[v24 + 4]) >> 31))
                         + *(unsigned __int16 *)&v189[v24 + 4];
                    v144 = *(unsigned __int16 *)(v193 + v24 - 12)
                         - v143
                         + ((*(unsigned __int16 *)(v192 + v24) - *(unsigned __int16 *)(v193 + v24 - 12)) & ((*(unsigned __int16 *)(v192 + v24) - *(unsigned __int16 *)(v193 + v24 - 12)) >> 31));
                    v198 = (v144 & (v144 >> 31)) + v143;
                    LODWORD(v199) = v142;
                    v145 = *((unsigned __int16 *)v140 - 4);
                    v146 = *(v141 - 4);
                    v147 = *(unsigned __int16 *)v140;
                    result = *(unsigned __int16 *)(v192 + v24 + 4);
                    v148 = *v141;
                    if ((int)v147 <= (int)v146)
                      v17 = v146;
                    else
                      v17 = v147;
                    LODWORD(v191) = v145;
                    HIDWORD(v191) = *(unsigned __int16 *)&v189[v24 + 4];
                    v86 = ((*(unsigned __int16 *)&v189[v24] - v145) & ((*(unsigned __int16 *)&v189[v24] - v145) >> 31))
                        + v145;
                    v88 = result - v86 + ((v148 - result) & ((v148 - (int)result) >> 31));
                  }
                  HIDWORD(v199) = (v88 & (v88 >> 31)) + v86;
                }
                if ((((v43 - 4 * (_DWORD)v17) & (3 * HIDWORD(v199) - (_DWORD)v17) | (v43 - 4 * (_DWORD)v199) & (3 * v198 - (_DWORD)v199)) & 0x80000000) == 0)
                  goto LABEL_127;
              }
            }
            else
            {
              v90 = *(unsigned __int16 *)(v30 + 2 * *(unsigned __int16 *)&v207[v24 + 8]);
              if (*(unsigned __int16 *)(v30 + 2 * v89) > (2 * v90))
              {
                v91 = ((v11 - v10) & (((int)v11 - v10) >> 31)) + v10;
                v92 = ((v15 - v14) & (((int)v15 - v14) >> 31)) + v14;
                v93 = ((v208 - v16) & ((v208 - v16) >> 31)) + v16;
                v94 = ((v13 - v12) & (((int)v13 - v12) >> 31)) + v12 - v91;
                v95 = (v94 & (v94 >> 31)) + v91;
                v96 = ((v93 - v92) & ((v93 - v92) >> 31)) + v92 - v95;
                v97 = *(unsigned __int16 *)(v30 + 2 * ((v96 & (v96 >> 31)) + v95));
                if ((int)(v97 - 4 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 8 * v44 + 648) + 2 * v97)) > v90)
                {
                  v202 = &v207[v24];
                  if (v44 > 5)
                  {
                    v137 = v191;
                    result = HIDWORD(v191);
                    HIDWORD(v191) = result;
                    if (*(unsigned __int16 *)(v30 + 2 * v199) - *(unsigned __int16 *)(v30 + 2 * v198) < 4 * (int)result)
                      goto LABEL_126;
                  }
                  else
                  {
                    v200 = v13;
                    v197 = v11;
                    if (((1 << v44) & 0x2D) != 0)
                    {
                      v98 = *(unsigned __int16 *)v42;
                      v99 = *(unsigned __int16 *)&v205[v24 + 4];
                      v100 = *(unsigned __int16 *)&v205[v24 + 12];
                      v101 = *(unsigned __int16 *)&v203[v24 + 8];
                      v102 = *(unsigned __int16 *)&v189[v24];
                      v103 = *(unsigned __int16 *)&v189[v24 + 4];
                      v104 = *(unsigned __int16 *)&v190[v24 - 8];
                      v105 = *(unsigned __int16 *)&v190[v24 - 4];
                      v106 = *(unsigned __int16 *)&v190[v24];
                      v107 = *(unsigned __int16 *)&v190[v24 + 4];
                      v108 = *(unsigned __int16 *)(v193 + v24 - 12);
                      v109 = v15;
                      v110 = *(unsigned __int16 *)(v193 + v24 - 8);
                      v111 = *(unsigned __int16 *)(v193 + v24 - 4);
                      v112 = *(unsigned __int16 *)(v193 + v24);
                      v113 = ((v99 - v98) & ((v99 - v98) >> 31)) + v98;
                      if (v99 > v98)
                        v98 = *(unsigned __int16 *)&v205[v24 + 4];
                      v114 = (v101 - v100) & ((v101 - v100) >> 31);
                      if (v101 <= v100)
                        v101 = *(unsigned __int16 *)&v205[v24 + 12];
                      v115 = ((v100 - v113 + v114) & ((v100 - v113 + v114) >> 31)) + v113;
                      if (v101 <= v98)
                        v116 = v98;
                      else
                        v116 = v101;
                      v117 = ((v103 - v102) & ((v103 - v102) >> 31)) + v102;
                      if (v103 <= v102)
                        v118 = *(unsigned __int16 *)&v189[v24];
                      else
                        v118 = *(unsigned __int16 *)&v189[v24 + 4];
                      v119 = v105 - v104;
                      if (v105 <= v104)
                        v120 = *(unsigned __int16 *)&v190[v24 - 8];
                      else
                        v120 = *(unsigned __int16 *)&v190[v24 - 4];
                      v121 = ((v107 - v106) & ((v107 - v106) >> 31)) + v106;
                      if (v107 <= v106)
                        v122 = *(unsigned __int16 *)&v190[v24];
                      else
                        v122 = *(unsigned __int16 *)&v190[v24 + 4];
                      v123 = v110 - v108;
                      if (v110 <= v108)
                        v124 = *(unsigned __int16 *)(v193 + v24 - 12);
                      else
                        v124 = *(unsigned __int16 *)(v193 + v24 - 8);
                      v125 = ((v112 - v111) & ((v112 - v111) >> 31)) + v111;
                      if (v112 > v111)
                        v111 = *(unsigned __int16 *)(v193 + v24);
                      v126 = v104 - v117 + (v119 & (v119 >> 31));
                      v127 = *(unsigned __int16 *)(v192 + v24);
                      v128 = *(unsigned __int16 *)(v192 + v24 + 4);
                      v129 = (v126 & (v126 >> 31)) + v117;
                      v130 = v128 - v127;
                      if (v128 <= v127)
                        v128 = *(unsigned __int16 *)(v192 + v24);
                      if (v120 > v118)
                        v118 = v120;
                      v131 = v108 - v121 + (v123 & (v123 >> 31));
                      if (v124 <= v122)
                        v132 = v122;
                      else
                        v132 = v124;
                      v133 = v127 - v125 + (v130 & (v130 >> 31));
                      if (v128 <= v111)
                        v134 = v111;
                      else
                        v134 = v128;
                      v15 = v109;
                      v28 = v185;
                      v30 = v187;
                      v135 = ((v132 - v118) & ((v132 - v118) >> 31)) - v132 + v134;
                      v17 = v134 - (v135 & (v135 >> 31));
                      v136 = ((v121 - v129 + (v131 & (v131 >> 31))) & ((v121 - v129 + (v131 & (v131 >> 31))) >> 31))
                           + v129;
                      HIDWORD(v199) = ((v125 - v136 + (v133 & (v133 >> 31))) & ((v125 - v136 + (v133 & (v133 >> 31))) >> 31))
                                    + v136;
                      v137 = *(unsigned __int16 *)(*(_QWORD *)(a1
                                                             + 648
                                                             + 8
                                                             * *(unsigned __int8 *)(v206
                                                                                  + (((_BYTE)v29 - 3) & 3 | (unint64_t)v183)))
                                                 + 2 * *(unsigned __int16 *)(v187 + 2 * SHIDWORD(v199)));
                      v138 = v116;
                      v198 = v115;
                      v139 = *(unsigned __int16 *)(v187 + 2 * v115);
                      result = *(unsigned __int16 *)(*(_QWORD *)(a1
                                                               + 648
                                                               + 8 * *(unsigned __int8 *)(v206 + (result | v182)))
                                                   + 2 * *(unsigned __int16 *)(v187 + 2 * v115));
                    }
                    else
                    {
                      v149 = *(unsigned __int16 *)&v189[v24 + 4];
                      v150 = &v190[v24];
                      v151 = *(unsigned __int16 *)&v190[v24 + 4];
                      v152 = *(unsigned __int16 *)&v190[v24 - 4];
                      v153 = (unsigned __int16 *)(v193 + v24);
                      v154 = *(unsigned __int16 *)(v193 + v24 - 4);
                      v155 = *(unsigned __int16 *)(v193 + v24 - 12);
                      v156 = *(unsigned __int16 *)(v192 + v24);
                      v157 = ((v151 - v149) & ((v151 - v149) >> 31)) + v149;
                      if (v151 > v149)
                        v149 = *(unsigned __int16 *)&v190[v24 + 4];
                      v158 = (v154 - v152) & ((v154 - v152) >> 31);
                      if (v154 <= v152)
                        v154 = *(unsigned __int16 *)&v190[v24 - 4];
                      v159 = ((v156 - v155) & ((v156 - v155) >> 31)) + v155;
                      if (v156 > v155)
                        v155 = *(unsigned __int16 *)(v192 + v24);
                      v160 = v155 - v154 + ((v154 - v149) & ((v154 - v149) >> 31));
                      v161 = v160 & (v160 >> 31);
                      v162 = ((v152 - v157 + v158) & ((v152 - v157 + v158) >> 31)) + v157;
                      v198 = ((v159 - v162) & ((v159 - v162) >> 31)) + v162;
                      v139 = *(unsigned __int16 *)(v30 + 2 * v198);
                      v163 = v155 - v161;
                      v164 = *((unsigned __int16 *)v150 - 4);
                      v165 = *(unsigned __int16 *)&v189[v24];
                      v166 = *(v153 - 4);
                      v167 = *(unsigned __int16 *)v150;
                      v168 = *(unsigned __int16 *)(v192 + v24 + 4);
                      v169 = *v153;
                      v170 = ((v165 - v164) & ((v165 - v164) >> 31)) + v164;
                      if (v165 > v164)
                        v164 = *(unsigned __int16 *)&v189[v24];
                      v171 = (v167 - v166) & ((v167 - v166) >> 31);
                      if (v167 <= v166)
                        v167 = v166;
                      v172 = ((v169 - v168) & ((v169 - v168) >> 31)) + v168;
                      if (v169 > v168)
                        v168 = v169;
                      v173 = v168 - v167 + ((v167 - v164) & ((v167 - v164) >> 31));
                      v17 = v168 - (v173 & (v173 >> 31));
                      v174 = ((v166 - v170 + v171) & ((v166 - v170 + v171) >> 31)) + v170;
                      result = *(unsigned __int16 *)(*(_QWORD *)(a1
                                                               + 648
                                                               + 8
                                                               * *(unsigned __int8 *)(v206
                                                                                    + (((_BYTE)v29 - 3) & 3 | (unint64_t)v183)))
                                                   + 2 * *(unsigned __int16 *)(v30 + 2 * v198));
                      v138 = v163;
                      HIDWORD(v199) = ((v172 - v174) & ((v172 - v174) >> 31)) + v174;
                      v137 = *(unsigned __int16 *)(*(_QWORD *)(a1
                                                             + 648
                                                             + 8
                                                             * *(unsigned __int8 *)(v206
                                                                                  + (((_BYTE)v29 - 1) & 3 | (unint64_t)v183)))
                                                 + 2 * *(unsigned __int16 *)(v30 + 2 * SHIDWORD(v199)));
                    }
                    v9 = v188;
                    v11 = v197;
                    v13 = v200;
                    LODWORD(v199) = v138;
                    v191 = __PAIR64__(result, v137);
                    if (*(unsigned __int16 *)(v30 + 2 * v138) - v139 < 4 * (int)result)
                    {
LABEL_126:
                      if (*(unsigned __int16 *)(v30 + 2 * v17)
                         - *(unsigned __int16 *)(v30 + 2 * SHIDWORD(v199)) >= (int)(4 * v137))
                        goto LABEL_26;
LABEL_127:
                      *((_WORD *)v202 + 4) = v89;
                    }
                  }
                }
              }
            }
LABEL_26:
            v25 += 2;
            v26 += 2;
            ++v29;
            v24 += 2;
            if (v204 != v29)
              continue;
            v18 = v180 + 1;
            v207 += __len;
            v203 += __len;
            v193 += __len;
            v192 += __len;
            v7 = (char *)v184;
            v184 = v179;
            v8 = v181;
            if (v180 + 1 != v178)
              goto LABEL_5;
            return result;
        }
      }
    }
    v175 = v2 - 8;
    do
    {
      v176 = (unsigned __int16 *)v9;
      v177 = v8;
      v8 = v205;
      v205 = v7;
      result = (unint64_t)memmove(v7, v207, __len);
      v9 = v177;
      v207 += __len;
      v7 = (char *)v184;
      v184 = v176;
      --v175;
    }
    while (v175);
  }
  return result;
}

void sub_1D537CBB8(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  double v16;
  float v17;
  float v18;
  double v19;
  double v20;
  float v21;
  uint64_t v22;
  double v23;
  float v24;
  float v25;
  int v26;
  double v27;
  double v28;
  long double v29;
  double v30;
  double v31;
  long double v32;
  double v33;
  int v34;
  float v35;
  unsigned int v36;
  float v37;
  float v38;
  unsigned int v39;
  float v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  float v52;
  double v53;
  double v54;
  float v55;
  double v56;
  double v57;
  float v58;
  float v59;
  double v60;
  double v61;
  float v62;
  unsigned int v63;
  float v64;
  int v65;
  float v66;
  long double v67;
  int v68;
  double v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  double v76;
  double v77;
  int v78;
  double v79;
  double v80;
  float v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  char *v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;

  v3 = a2[100];
  v4 = *(_DWORD *)(a1 + 160) - 4;
  if (v4 > 4)
  {
    v78 = 0;
    v6 = 0;
    v85 = &byte_1EFF32440;
    if ((int)v3 < 1)
      return;
  }
  else
  {
    v5 = 4 * v4;
    v78 = *(_DWORD *)((char *)&unk_1D544D9F0 + v5);
    v6 = *(_DWORD *)((char *)&unk_1D544DA04 + v5);
    v85 = off_1E998E368[v4];
    if ((int)v3 < 1)
      return;
  }
  v7 = a2[99];
  if ((int)v7 >= 1)
  {
    v86 = 0;
    v8 = 0;
    v88 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v83 = 0;
    v14 = 0;
    v90 = a2[103];
    v70 = a2[104];
    v15 = *(_QWORD *)(a1 + 768);
    v16 = 1.0 / ((double)v15 * 0.5);
    v76 = v16 * *(float *)(a1 + 752);
    v77 = v16 * *(float *)(a1 + 748);
    v17 = -((float)(unint64_t)a2[105] - (float)*(unint64_t *)(a1 + 776) * 0.5);
    LODWORD(v89) = *(_DWORD *)(a1 + 736);
    HIDWORD(v89) = *(_DWORD *)(a1 + 756);
    v18 = -((float)(unint64_t)a2[106] - (float)v15 * 0.5);
    v69 = (float)-v18;
    v79 = v17;
    v80 = v18;
    v74 = v6 ^ 1;
    v75 = 2 - v6;
    v19 = (float)-v17;
    v72 = a2[102] >> 1;
    v73 = a2[101];
    v81 = 0.0;
    v20 = -0.5;
    v84 = v73;
    v21 = 0.0;
    v82 = a2[100];
    do
    {
      v22 = 0;
      v71 = v14;
      v87 = 4 * (v14 & 3);
      v23 = v69;
      do
      {
        v24 = v16 * sqrt(v19 * v19 + v23 * v23);
        if (v89)
          v25 = v24;
        else
          v25 = 1.0;
        if (!(_DWORD)v89 || (v26 = v85[v22 & 3 | v87], v26 == 1) || v26 == 4 || v26 == 6)
        {
LABEL_67:
          v65 = *(unsigned __int16 *)(v84 + 2 * v22);
          if (HIDWORD(v89))
          {
LABEL_68:
            v67 = pow(v25, *(float *)(a1 + 760));
            v20 = -0.5;
            *(float *)&v67 = v67;
            v68 = llround(((float)(*(float *)(a1 + 764) * *(float *)&v67) + 1.0) * (float)v65);
            v65 = ((0xFFFF - (v68 & ~(v68 >> 31))) & ((0xFFFF - (v68 & ~(v68 >> 31))) >> 31)) + (v68 & ~(v68 >> 31));
          }
        }
        else
        {
          v27 = v19;
          v28 = v23;
          switch(v85[v22 & 3 | v87])
          {
            case 0:
            case 3:
              v29 = pow(v25, *(float *)(a1 + 740));
              v20 = -0.5;
              *(float *)&v29 = v29;
              v30 = *(float *)&v29;
              v31 = v77;
              goto LABEL_20;
            case 2:
            case 5:
              v32 = pow(v25, *(float *)(a1 + 744));
              v20 = -0.5;
              *(float *)&v32 = v32;
              v30 = *(float *)&v32;
              v31 = v76;
LABEL_20:
              v33 = v31 * v30 + 1.0;
              v28 = v23 * v33;
              v27 = v19 * v33;
              break;
            default:
              break;
          }
          switch(v26)
          {
            case 0:
            case 2:
              v34 = v74;
              goto LABEL_24;
            case 3:
            case 5:
              v34 = v75;
LABEL_24:
              v83 = v34;
              break;
            default:
              break;
          }
          v35 = (v27 + v79) * 0.5;
          v36 = vcvtms_s32_f32(v35);
          v37 = v35 - (float)(int)floorf(v35);
          v38 = (v28 + v80 - (float)v83) * 0.5;
          v39 = vcvtms_s32_f32(v38);
          v40 = v38 - (float)(int)floorf(v38);
          v41 = 2 * (((_BYTE)v39 + (_BYTE)v36) & 1);
          v42 = 2 * v36;
          v43 = v83 + 2 * v39;
          v44 = v12;
          v45 = v10;
          v46 = v82;
          switch(v26)
          {
            case 0:
            case 3:
              v47 = v40;
              if (v41 == v78)
              {
                v8 = v42 + 2;
                v48 = v37 * 0.5;
                v21 = v48 + v47 * 0.5;
                if (v40 > v37)
                {
                  v45 = (v43 + 2);
                  v9 = v42 - 2;
                  v86 = v43 + 4;
                  v49 = -(v48 - v47 * 0.5);
                  goto LABEL_37;
                }
                v44 = (v43 - 2);
                v11 = v42 + 4;
                v86 = v43 + 2;
                v60 = v47 * 0.5 + 1.0 + v37 * v20;
                goto LABEL_65;
              }
              v55 = 1.0 - v40;
              v56 = v47 * v20 + 0.5;
              v57 = v37;
              v21 = v56 + v37 * 0.5;
              if (v55 > v37)
              {
                v44 = (v43 + 2);
                v11 = v42 + 2;
                v9 = v42 - 2;
                v86 = v43 - 2;
                v54 = v56 + v57 * v20;
                goto LABEL_34;
              }
              v13 = v42 + 2;
              v44 = (v43 + 4);
              v11 = v42 + 4;
              v45 = (v43 + 2);
              v61 = v47 * v20 + 1.5 + v57 * v20;
              goto LABEL_45;
            case 1:
            case 4:
              goto LABEL_46;
            case 2:
            case 5:
              v50 = v40;
              v51 = v37;
              if (v41 == v78)
              {
                v52 = 1.0 - v40;
                v53 = v50 * v20 + 0.5;
                v21 = v53 + v51 * 0.5;
                if (v52 > v37)
                {
                  v44 = (v43 + 2);
                  v11 = v42 + 2;
                  v9 = v42 - 2;
                  v86 = v43 - 2;
                  v54 = v53 + v51 * v20;
LABEL_34:
                  v58 = v54;
                  v81 = v58;
                  v13 = v42;
                  v45 = v43;
                  v88 = v43;
LABEL_38:
                  v8 = v42;
                  if (v13 >= (int)v82)
                    goto LABEL_66;
                  goto LABEL_47;
                }
                v13 = v42 + 2;
                v44 = (v43 + 4);
                v11 = v42 + 4;
                v45 = (v43 + 2);
                v61 = v50 * v20 + 1.5 + v51 * v20;
LABEL_45:
                v62 = v61;
                v81 = v62;
                v9 = v42;
                v88 = v45;
                v8 = v13;
                v86 = v43;
LABEL_46:
                if (v13 >= (int)v82)
                {
LABEL_66:
                  v10 = v45;
                  v12 = v44;
                  goto LABEL_67;
                }
              }
              else
              {
                v8 = v42 + 2;
                v21 = v51 * 0.5 + v50 * 0.5;
                if (v40 > v37)
                {
                  v45 = (v43 + 2);
                  v9 = v42 - 2;
                  v86 = v43 + 4;
                  v49 = -(v51 * 0.5 - v50 * 0.5);
LABEL_37:
                  v13 = v42;
                  v59 = v49;
                  v81 = v59;
                  v44 = v43;
                  v11 = v8;
                  v88 = v45;
                  goto LABEL_38;
                }
                v44 = (v43 - 2);
                v11 = v42 + 4;
                v86 = v43 + 2;
                v60 = v50 * 0.5 + 1.0 + v51 * v20;
LABEL_65:
                v66 = v60;
                v81 = v66;
                v13 = v8;
                v45 = v43;
                v9 = v42;
                v88 = v43;
                if (v8 >= (int)v82)
                  goto LABEL_66;
              }
LABEL_47:
              if (v13 < 0
                || v11 < 0
                || v9 < 0
                || v8 < 0
                || v11 >= v46
                || v9 >= v46
                || v8 >= v46
                || (v44 & 0x80000000) != 0
                || (v45 & 0x80000000) != 0
                || v88 < 0
                || v86 < 0
                || (int)v44 >= (int)v7
                || (int)v45 >= (int)v7
                || v88 >= (int)v7
                || v86 >= (int)v7)
              {
                goto LABEL_66;
              }
              v12 = v44;
              v10 = v45;
              v63 = *(unsigned __int16 *)(v73 + 2 * (v72 * v9 + v88));
              v64 = (float)*(unsigned __int16 *)(v73 + 2 * (v72 * v13 + v44))
                  + (float)((float)(*(unsigned __int16 *)(v73 + 2 * (v72 * v11 + v45))
                                  - *(unsigned __int16 *)(v73 + 2 * (v72 * v13 + v44)))
                          * v21);
              v65 = llroundf(v64+ (float)((float)((float)((float)v63+ (float)((float)(int)(*(unsigned __int16 *)(v73+ 2* (v72 * v8+ v86))- v63)* v21))- v64)* v81));
              if (HIDWORD(v89))
                goto LABEL_68;
              break;
            default:
              v44 = v12;
              v45 = v10;
              v46 = v82;
              if (v13 >= (int)v82)
                goto LABEL_66;
              goto LABEL_47;
          }
        }
        *(_WORD *)(v90 + 2 * v22) = v65;
        v23 = v23 + 1.0;
        ++v22;
      }
      while ((_DWORD)v7 != (_DWORD)v22);
      v14 = v71 + 1;
      v90 += v70;
      v19 = v19 + 1.0;
      v84 += 2 * v72;
    }
    while (v71 + 1 != (_DWORD)v82);
  }
}

unint64_t sub_1D537D320(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  signed int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t result;
  unsigned __int16 *v60;
  unint64_t v61;
  _WORD *v62;
  uint64_t v63;
  unsigned __int16 *v64;
  unint64_t v65;
  char *v66;
  unsigned __int16 *v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  unsigned __int16 *v74;
  unint64_t v75;
  _WORD *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned __int16 *v80;
  int v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _WORD *v88;
  uint64_t v89;
  unsigned __int16 *v90;
  int v91;
  unsigned int v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  _WORD *v97;
  uint64_t v98;
  unint64_t v99;
  unsigned __int16 *v100;
  unsigned __int16 *v101;
  unsigned __int16 *v102;
  unint64_t v103;
  unint64_t v104;
  _WORD *v105;
  unsigned __int16 *v106;
  unsigned __int16 *v107;
  unsigned __int16 *v108;
  unsigned __int16 *v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  int v114;
  int v115;
  unint64_t v116;
  unsigned __int16 *v117;
  _WORD *v118;
  unsigned __int16 *v119;
  unsigned __int16 *v120;
  unsigned __int16 *v121;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  int v126;
  int v127;
  _WORD *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t i;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _WORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  unint64_t v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unsigned __int16 *v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;

  v155 = (unsigned __int16 *)a2[109];
  v156 = a2[107];
  v2 = a2[110];
  v153 = a2[111];
  v154 = v2 >> 1;
  v152 = a2[112] >> 1;
  v160 = *(_DWORD *)(a1 + 828);
  v161 = *(_DWORD *)(a1 + 824);
  v151 = *(_DWORD *)(a1 + 160);
  v148 = v2;
  v149 = v2 & 0xFFFFFFFFFFFFFFFELL;
  v150 = a2[108];
  v3 = v150 - 3;
  if ((unint64_t)(v150 - 3) >= 3)
  {
    if (v156 - 3 <= 2)
    {
      v58 = 2;
      do
        v58 += 2;
      while (v58 < v3);
    }
    else
    {
      v4 = *(_DWORD *)(a1 + 832);
      v5 = *(_QWORD *)(a1 + 840);
      if (v151 == 4)
        v6 = -1;
      else
        v6 = 0;
      v7 = 2 * v152 + v153 + 6;
      v8 = a2[109];
      v9 = 2 * (v154 - (v151 == 4)) + 10;
      v10 = 2 * v6 + 8 * v154 + 4;
      v11 = 4 * v154 + 2 * v6 + 8;
      v12 = 2 * v6 + 6 * v154 + 10;
      v13 = 2 * v6 + 10 * v154 + 6;
      v14 = 2;
      do
      {
        v157 = v8;
        v158 = v14;
        v15 = v14 & 2;
        v159 = v7;
        v16 = 2;
        do
        {
          v31 = *(unsigned __int16 *)(v8 + v9 - 8);
          v32 = *(unsigned __int16 *)(v8 + v9 - 4);
          v33 = *(unsigned __int16 *)(v8 + v9);
          v34 = *(unsigned __int16 *)(v8 + v12 - 8);
          v35 = *(unsigned __int16 *)(v8 + v12 - 4);
          v36 = *(unsigned __int16 *)(v8 + v12);
          v37 = *(unsigned __int16 *)(v8 + v13 - 4);
          v38 = *(unsigned __int16 *)(v8 + v13);
          v39 = *(unsigned __int16 *)(v8 + v13 + 4);
          v40 = v33 - v37 + 2 * (v36 - v34) + v39 - v31;
          v41 = v39 - v31 - (v33 - v37) + 2 * (v38 - v32);
          v42 = (0xFA1144AF >> (((v41 - ((v40 * v4 + 1024) >> 11)) & 0x8000000 | (((v41 * v4 + 1024) >> 11) + v40) & 0x4000000 | (v40 - ((v41 * v4 + 1024) >> 11)) & 0x2000000 | (-v41 - ((v40 * v4 + 1024) >> 11)) & 0x1000000u) >> 23)) & 3;
          v43 = *(unsigned __int16 *)(v8 + v11);
          v44 = *(unsigned __int16 *)(v8 + v10);
          v45 = *(unsigned __int16 *)(v8 + v11 - 4);
          v46 = *(unsigned __int16 *)(v8 + v10 + 4);
          v47 = ((v43 - v44 + 2) >> 2) * ((v43 - v44 + 2) >> 2) + ((v45 - v46 + 2) >> 2) * ((v45 - v46 + 2) >> 2);
          if (HIBYTE(v47))
            v48 = 0xFFFF;
          else
            v48 = v47 >> 8;
          v49 = (v43 + v44 + 1) >> 1;
          v50 = (v45 + v46 + 1) >> 1;
          v51 = 2 * v35;
          if (v42 < 2)
          {
            v17 = v51 + v34 + v36;
            v18 = v17 >= 2;
            v19 = (v17 + 2) >> 2;
            v20 = v49 * v35 / v19;
            v21 = v50 * v35 / v19;
            if (v18)
            {
              v22 = v21;
            }
            else
            {
              v20 = v49;
              v22 = v50;
            }
            v23 = v51 + v33 + v37;
            v18 = v23 >= 2;
            v24 = v49 * v35 / ((v23 + 2) >> 2);
            if (!v18)
              v24 = v49;
            if (v42)
              v25 = v24;
            else
              v25 = v20;
            if (v42)
              v26 = v50;
            else
              v26 = v22;
          }
          else
          {
            v52 = v51 + v32 + v38;
            v18 = v52 >= 2;
            v53 = (v52 + 2) >> 2;
            v54 = v49 * v35 / v53;
            v26 = v50 * v35 / v53;
            if (!v18)
            {
              v54 = v49;
              v26 = v50;
            }
            v55 = v51 + v31 + v39;
            v18 = v55 >= 2;
            v56 = v50 * v35 / ((v55 + 2) >> 2);
            if (v18)
              v57 = v56;
            else
              v57 = v50;
            if (v42 == 2)
              v25 = v54;
            else
              v25 = v49;
            if (v42 != 2)
              v26 = v57;
          }
          v27 = *(unsigned __int16 *)(v5 + 2 * v48);
          v8 += 4;
          v28 = v25 & ~(v25 >> 31);
          if (v28 >= 0xFFFF)
            v28 = 0xFFFF;
          v29 = v26 & ~(v26 >> 31);
          if (v29 >= 0xFFFF)
            v29 = 0xFFFF;
          v30 = ((v36 + v34 + v32 + v38) * v160 + v161 * v35 + 2048) >> 12;
          *(_WORD *)(v7 + 2) = v30 + (((v35 - v30) * v27 + 0x8000) >> 16);
          *(_WORD *)(v7 + 2 * v15) = v49 + (((v28 - v49) * v27 + 0x8000) >> 16);
          v15 ^= 2uLL;
          *(_WORD *)(v7 + 2 * v15) = v50 + (((v29 - v50) * v27 + 0x8000) >> 16);
          v16 += 2;
          v7 += 6;
        }
        while (v16 < v156 - 3);
        v14 = v158 + 2;
        v3 = v150 - 3;
        v7 = v159 + 2 * v152;
        v8 = v157 + 4 * v154;
      }
      while (v158 + 2 < (unint64_t)(v150 - 3));
    }
  }
  if (v151 != 4)
  {
    v74 = v155;
    result = 4 * v154;
    if (v156)
    {
      v75 = 0;
      v76 = (_WORD *)(v153 + 2);
      v77 = result + 4;
      v78 = 6 * v154 + 2;
      v79 = v149 + 6;
      v80 = v155;
      do
      {
        if ((v75 & 2) != 0)
        {
          if (v156 - 2 == v75)
          {
            *(v76 - 1) = v80[2 * v154];
            *v76 = ((*(unsigned __int16 *)((char *)v80 + v79 - 8)
                   + 2 * *(unsigned __int16 *)((char *)v80 + v79 - 4)
                   + *(unsigned __int16 *)((char *)v80 + v78))
                  * v160
                  + v161 * *(unsigned __int16 *)((char *)v80 + v79 - 4)
                  + 2048) >> 12;
            LOWORD(v83) = *v80;
            goto LABEL_58;
          }
          *(v76 - 1) = (v80[2] + v80[2 * v154] + 1) >> 1;
          *v76 = ((*(unsigned __int16 *)((char *)v80 + v79 - 8)
                 + *(unsigned __int16 *)((char *)v80 + v79 - 4)
                 + *(unsigned __int16 *)((char *)v80 + v78)
                 + *(unsigned __int16 *)((char *)v80 + v79))
                * v160
                + v161 * *(unsigned __int16 *)((char *)v80 + v79 - 4)
                + 2048) >> 12;
          v81 = *v80;
          v82 = *(unsigned __int16 *)((char *)v80 + v77);
        }
        else
        {
          *(v76 - 1) = (*v80 + *(unsigned __int16 *)((char *)v80 + v77) + 1) >> 1;
          v84 = *(unsigned __int16 *)((char *)v80 + v79 - 4);
          if (v75)
            v85 = *(unsigned __int16 *)((char *)v80 + v79 - 8)
                + v84
                + *(unsigned __int16 *)((char *)v80 + v78)
                + *(unsigned __int16 *)((char *)v80 + v79);
          else
            v85 = *(unsigned __int16 *)((char *)v80 + v78) + 2 * v84 + *(unsigned __int16 *)((char *)v80 + v79);
          *v76 = (v85 * v160 + v161 * v84 + 2048) >> 12;
          v81 = v80[2];
          v82 = v80[2 * v154];
        }
        v83 = (v81 + v82 + 1) >> 1;
LABEL_58:
        v76[1] = v83;
        v75 += 2;
        v80 += 2;
        v76 += 3;
      }
      while (v75 < v156);
    }
    v95 = 2 * v152;
    if (v3 >= 3)
    {
      v96 = 6 * v154 + 6;
      v97 = (_WORD *)(v95 + v153 + 2);
      v98 = 10 * v154 + 2;
      v99 = 2;
      v100 = v155;
      v101 = &v155[v149];
      do
      {
        v102 = (unsigned __int16 *)((char *)v100 + result);
        if ((v99 & 2) != 0)
        {
          *(v97 - 1) = (v102[2] + v100[4 * v154] + 1) >> 1;
          *v97 = ((*(unsigned __int16 *)((char *)v100 + v98)
                 + 2 * *(unsigned __int16 *)((char *)v100 + v96 - 4)
                 + *(unsigned __int16 *)((char *)v100 + v96))
                * v160
                + v161 * *(unsigned __int16 *)((char *)v100 + v96 - 4)
                + 2048) >> 12;
          v103 = v149 + 2;
        }
        else
        {
          *(v97 - 1) = (*v102 + v100[4 * v154 + 2] + 1) >> 1;
          *v97 = ((*(unsigned __int16 *)((char *)v100 + v98)
                 + 2 * *(unsigned __int16 *)((char *)v100 + v96 - 4)
                 + *(unsigned __int16 *)((char *)v100 + v96))
                * v160
                + v161 * *(unsigned __int16 *)((char *)v100 + v96 - 4)
                + 2048) >> 12;
          v102 = v101 + 2;
          v103 = v149;
        }
        v97[1] = (*v102 + *(unsigned __int16 *)((char *)&v100[v103] + result) + 1) >> 1;
        v99 += 2;
        v101 += v149;
        v100 = (unsigned __int16 *)((char *)v100 + result);
        v97 = (_WORD *)((char *)v97 + v95);
      }
      while (v99 < v3);
    }
    if (!v156)
    {
LABEL_126:
      if (v3 >= 3)
      {
        v136 = 6;
        v137 = (_WORD *)(v95 + 6 * ((v156 - 2) >> 1) + v153 + 4);
        v138 = v156;
        v139 = 2 * v156 + 12 * v154 - 4;
        v140 = result + 2 * v156 - 4;
        v141 = 2 * (v156 + v154) - 2;
        v142 = 2 * v156 + 6 * v154 - 6;
        v143 = 2 * v156 + 10 * v154 - 2;
        v144 = 2 * v156 + 8 * v154 - 8;
        do
        {
          if ((((_DWORD)v136 - 4) & 2) != 0)
          {
            *(v137 - 2) = (*(unsigned __int16 *)((char *)v74 + v139)
                         + 3 * *(unsigned __int16 *)((char *)v74 + v140)
                         + 2) >> 2;
            *(v137 - 1) = ((*(unsigned __int16 *)((char *)v74 + v141)
                          + *(unsigned __int16 *)((char *)v74 + v142 + 4)
                          + *(unsigned __int16 *)((char *)v74 + v142)
                          + *(unsigned __int16 *)((char *)v74 + v143))
                         * v160
                         + v161 * *(unsigned __int16 *)((char *)v74 + v142 + 4)
                         + 2048) >> 12;
            v145 = v74[v138 - 2] + 3 * *(unsigned __int16 *)((char *)v74 + v144 + 4);
          }
          else
          {
            *(v137 - 2) = (v74[v138 - 2] + 3 * *(unsigned __int16 *)((char *)v74 + v144 + 4) + 2) >> 2;
            *(v137 - 1) = ((*(unsigned __int16 *)((char *)v74 + v141)
                          + *(unsigned __int16 *)((char *)v74 + v142 + 4)
                          + *(unsigned __int16 *)((char *)v74 + v142)
                          + *(unsigned __int16 *)((char *)v74 + v143))
                         * v160
                         + v161 * *(unsigned __int16 *)((char *)v74 + v142 + 4)
                         + 2048) >> 12;
            if (v150 == v136)
              v147 = *(unsigned __int16 *)((char *)v74 + v144);
            else
              v147 = *(unsigned __int16 *)((char *)v74 + v139);
            v145 = v147 + 3 * *(unsigned __int16 *)((char *)v74 + v140);
          }
          *v137 = (v145 + 2) >> 2;
          v146 = v136 - 2;
          v136 += 2;
          v137 = (_WORD *)((char *)v137 + v95);
          v74 = (unsigned __int16 *)((char *)v74 + result);
        }
        while (v146 < v3);
      }
      return result;
    }
    v116 = 0;
    v117 = &v155[v154 * (v150 - 2)];
    v118 = (_WORD *)(v153 + 2 * v152 * ((unint64_t)(v150 - 2) >> 1) + 4);
    v119 = (unsigned __int16 *)((char *)v155 + v154 * (2 * v150 - 6) + 2);
    v120 = (unsigned __int16 *)((char *)v155 + v154 * (2 * v150 - 2) + 2);
    v121 = (unsigned __int16 *)((char *)v155 + v154 * (2 * v150 - 8));
    while (1)
    {
      if ((v116 & 2) != 0)
      {
        v127 = *v117;
        if (v156 - 2 == v116)
        {
          *(v118 - 2) = v127;
          *(v118 - 1) = ((v119[v116] + 2 * *v120 + *(v120 - 2)) * v160 + v161 * *v120 + 2048) >> 12;
          v125 = (*(v117 - 2) + *v121 + 1) >> 1;
          goto LABEL_101;
        }
        *(v118 - 2) = (v127 + v117[4] + 1) >> 1;
        *(v118 - 1) = ((v119[v116] + *v120 + *(v120 - 2) + v120[2]) * v160 + v161 * *v120 + 2048) >> 12;
        v124 = *(v117 - 2) + 3 * v117[2];
      }
      else
      {
        v126 = 3 * v117[2];
        if (v116)
        {
          *(v118 - 2) = (*(v117 - 2) + v126 + 2) >> 2;
          *(v118 - 1) = ((v119[v116] + *v120 + *(v120 - 2) + v120[2]) * v160 + v161 * *v120 + 2048) >> 12;
          v123 = 3 * *v117;
          if (v156 - 4 == v116)
            v122 = v121[2];
          else
            v122 = v117[4];
        }
        else
        {
          *(v118 - 2) = (*v121 + v126 + 2) >> 2;
          *(v118 - 1) = ((*v119 + 2 * *v120 + v120[2]) * v160 + v161 * *v120 + 2048) >> 12;
          v122 = v117[4];
          v123 = 3 * *v117;
        }
        v124 = v122 + v123;
      }
      v125 = (v124 + 2) >> 2;
LABEL_101:
      *v118 = v125;
      v118 += 3;
      v116 += 2;
      v117 += 2;
      v120 += 2;
      v121 += 2;
      if (v116 >= v156)
        goto LABEL_126;
    }
  }
  result = 2 * v148;
  v60 = v155;
  if (v156)
  {
    v61 = 0;
    v62 = (_WORD *)(v153 + 2);
    v63 = (uint64_t)&v155[2 * v154 - 1];
    v64 = &v155[3 * v154];
    v65 = v149 + 4;
    v66 = (char *)v155 + (result | 2);
    v67 = v155;
    do
    {
      if ((v61 & 2) != 0)
      {
        *(v62 - 1) = (v67[1] + *(unsigned __int16 *)(v63 + 2 * v61) + 1) >> 1;
        v72 = *(unsigned __int16 *)((char *)v67 + v149);
        v73 = *(unsigned __int16 *)((char *)v67 + v65 - 8);
        if (v156 - 2 == v61)
          *v62 = ((v73 + 2 * v72 + v64[v61]) * v160 + v161 * v72 + 2048) >> 12;
        else
          *v62 = ((v73 + v72 + *(unsigned __int16 *)((char *)v67 + v65) + v64[v61]) * v160
                + v161 * v72
                + 2048) >> 12;
        v70 = *(v67 - 1);
        v71 = *(unsigned __int16 *)&v66[2 * v61];
      }
      else
      {
        v69 = *(unsigned __int16 *)&v66[2 * v61];
        if (!v61)
        {
          *(v62 - 1) = (v67[3] + 3 * v69 + 2) >> 2;
          *v62 = ((*(unsigned __int16 *)((char *)v67 + v149 + 4) + 2 * *(unsigned __int16 *)((char *)v67 + v149) + *v64)
                * v160
                + v161 * *(unsigned __int16 *)((char *)v67 + v149)
                + 2048) >> 12;
          v68 = (v155[4 * v154 + 1] + 3 * v67[1] + 2) >> 2;
          goto LABEL_46;
        }
        *(v62 - 1) = (*(v67 - 1) + v69 + 1) >> 1;
        *v62 = ((*(unsigned __int16 *)((char *)v67 + v149 - 4)
               + *(unsigned __int16 *)((char *)v67 + v149)
               + *(unsigned __int16 *)((char *)v67 + v149 + 4)
               + v64[v61])
              * v160
              + v161 * *(unsigned __int16 *)((char *)v67 + v149)
              + 2048) >> 12;
        v70 = v67[1];
        v71 = *(unsigned __int16 *)(v63 + 2 * v61);
      }
      v68 = (v70 + v71 + 1) >> 1;
LABEL_46:
      v62[1] = v68;
      v61 += 2;
      v67 += 2;
      v62 += 3;
    }
    while (v61 < v156);
  }
  if (v3 >= 3)
  {
    v86 = 0;
    v87 = 2 * v154;
    v88 = (_WORD *)(2 * v152 + v153 + 2);
    result = 4 * v154 + (result | 2);
    v89 = (12 * v154) | 2;
    v90 = v155;
    do
    {
      if ((((_DWORD)v86 + 2) & 2) != 0)
      {
        v94 = v90[v87 + 1];
        if (v150 - 4 == v86)
        {
          *(v88 - 1) = v94;
          *v88 = ((*(unsigned __int16 *)((char *)v90 + v149) + 2 * v90[3 * v154] + v90[3 * v154 + 2]) * v160
                + v161 * v90[3 * v154]
                + 2048) >> 12;
          v92 = (v90[1] + v90[v87 + 3] + 1) >> 1;
          goto LABEL_70;
        }
        *(v88 - 1) = (*(unsigned __int16 *)((char *)v90 + v89) + 3 * v94 + 2) >> 2;
        *v88 = ((*(unsigned __int16 *)((char *)v90 + v149) + v90[3 * v154] + v90[3 * v154 + 2] + v90[5 * v154]) * v160
              + v161 * v90[3 * v154]
              + 2048) >> 12;
        v91 = v90[1] + 3 * *(unsigned __int16 *)((char *)v90 + result);
      }
      else
      {
        *(v88 - 1) = (v90[1] + 3 * *(unsigned __int16 *)((char *)v90 + result) + 2) >> 2;
        *v88 = ((*(unsigned __int16 *)((char *)v90 + v149) + v90[3 * v154] + v90[3 * v154 + 2] + v90[5 * v154]) * v160
              + v161 * v90[3 * v154]
              + 2048) >> 12;
        v92 = v90[v87 + 1];
        if (v150 - 6 == v86)
          goto LABEL_70;
        v91 = *(unsigned __int16 *)((char *)v90 + v89) + 3 * v92;
      }
      v92 = (v91 + 2) >> 2;
LABEL_70:
      v93 = v86 + 4;
      v86 += 2;
      v88[1] = v92;
      v88 += v152;
      v90 = (unsigned __int16 *)((char *)v90 + v87 * 2);
    }
    while (v93 < v3);
  }
  v104 = v150 - 2;
  if (v156)
  {
    result = 0;
    v105 = (_WORD *)(v153 + 2 * v152 * (v104 >> 1) + 4);
    v106 = (unsigned __int16 *)((char *)v155 + v154 * (2 * v150 - 8) + 2);
    v107 = (unsigned __int16 *)((char *)v155 + v154 * (2 * v150 - 6));
    v108 = (unsigned __int16 *)((char *)v155 + v154 * (2 * v150 - 2));
    v109 = &v155[v154 * v104 + 3];
    do
    {
      if ((result & 2) != 0)
      {
        v115 = 3 * *(v109 - 4);
        if (v156 - 2 != result)
        {
          *(v105 - 2) = (*v109 + v115 + 2) >> 2;
          *(v105 - 1) = ((v107[result] + *v108 + *(v108 - 2) + v108[2]) * v160 + v161 * *v108 + 2048) >> 12;
          v112 = 3 * *(v109 - 2);
          if (result == 2)
            v111 = *(v106 - 2);
          else
            v111 = *(v109 - 6);
          goto LABEL_86;
        }
        *(v105 - 2) = (*v106 + v115 + 2) >> 2;
        *(v105 - 1) = ((v107[result] + 2 * *v108 + *(v108 - 2)) * v160 + v161 * *v108 + 2048) >> 12;
        v110 = *(v109 - 2);
        v111 = *(v109 - 6);
      }
      else
      {
        v114 = *(v109 - 2);
        if (!result)
        {
          *(v105 - 2) = v114;
          *(v105 - 1) = ((*v107 + 2 * *v108 + v108[2]) * v160 + v161 * *v108 + 2048) >> 12;
          v113 = (*v106 + *v109 + 1) >> 1;
          goto LABEL_87;
        }
        *(v105 - 2) = (*(v109 - 6) + 3 * v114 + 2) >> 2;
        *(v105 - 1) = ((v107[result] + *v108 + *(v108 - 2) + v108[2]) * v160 + v161 * *v108 + 2048) >> 12;
        v110 = *(v109 - 4);
        v111 = *v109;
      }
      v112 = 3 * v110;
LABEL_86:
      v113 = (v111 + v112 + 2) >> 2;
LABEL_87:
      *v105 = v113;
      v105 += 3;
      result += 2;
      v106 += 2;
      v108 += 2;
      v109 += 2;
    }
    while (result < v156);
  }
  if (v104 >= 3)
  {
    v128 = (_WORD *)(2 * v152 + 6 * ((v156 - 2) >> 1) + v153 + 4);
    v129 = 4 * v154 + 2 * v156 - 4;
    result = 2;
    for (i = 2; i < v104; i += 2)
    {
      if ((i & 2) != 0)
        v132 = -2;
      else
        v132 = 2;
      if ((i & 2) != 0)
        v133 = v148 | 1;
      else
        v133 = v149 - 1;
      if ((i & 2) != 0)
        v134 = 2;
      else
        v134 = -2;
      *(v128 - 2) = (*(unsigned __int16 *)((char *)v60 + v129 + v132)
                   + *(unsigned __int16 *)((char *)&v60[v133] + v129)
                   + 1) >> 1;
      v130 = 2 * v156 + 6 * v154 - 8;
      *(v128 - 1) = ((v60[v156 - 2 + v154]
                    + *(unsigned __int16 *)((char *)v60 + v130 + 4)
                    + *(unsigned __int16 *)((char *)v60 + v130)
                    + v60[5 * v154 - 2 + v156])
                   * v160
                   + v161 * *(unsigned __int16 *)((char *)v60 + v130 + 4)
                   + 2048) >> 12;
      if ((i & 2) != 0)
        v135 = v149 - 1;
      else
        v135 = v148 | 1;
      *v128 = (*(unsigned __int16 *)((char *)v60 + v129 + v134)
             + *(unsigned __int16 *)((char *)&v60[v135] + v129)
             + 1) >> 1;
      v60 += 2 * v154;
      v128 += v152;
    }
  }
  return result;
}

uint64_t sub_1D537E3EC(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t j;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  BOOL *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t i;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;

  v2 = a2[114] - 3;
  if (v2 >= 3)
  {
    v61 = a2[113] - 3;
    if (v61 <= 2)
    {
      for (i = 2; i < v2; i += 2)
        ;
    }
    else
    {
      v3 = a2[116];
      v4 = *(_DWORD *)(result + 888);
      v5 = *(_DWORD *)(result + 892);
      v6 = *(_QWORD *)(result + 896);
      v7 = *(_QWORD *)(result + 904);
      v8 = *(_QWORD *)(result + 912);
      v9 = v3 & 0xFFFFFFFFFFFFFFFELL;
      v10 = v3 >> 1;
      v58 = v9 + 2;
      v59 = a2[118];
      v11 = a2[115];
      v12 = v11 + 2 * v9;
      if (*(_DWORD *)(result + 160) == 4)
        v13 = -1;
      else
        v13 = 0;
      v14 = 2 * v13;
      v15 = v12 + v14;
      v57 = a2[118] + 1;
      v56 = 4 * v10;
      v16 = v14 + 6 * v10 + v11 + 10;
      v17 = a2[117];
      v18 = v14 + 8 * v10 + v11 + 8;
      v19 = 2;
      v60 = v2;
      do
      {
        v20 = 0;
        v21 = *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v15 + 4));
        v22 = v57;
        v23 = *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v15 + 2 * v58));
        for (j = 2; j < v61; j += 4)
        {
          v33 = *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v15 + v20 + 8));
          v34 = (v23 + v33 + 1) >> 1;
          if (v33 - v23 >= 0)
            v35 = v33 - v23;
          else
            v35 = v23 - v33;
          v36 = *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v18 + v20));
          v37 = (v21 + v36 + 1) >> 1;
          v38 = v21 - v36;
          if (v21 - v36 < 0)
            v38 = v36 - v21;
          v39 = 2404 * *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v16 + v20 - 4));
          if ((v19 & 2) != 0)
          {
            v40 = v39 + 467 * v34 + 1225 * v37;
            v41 = v8;
            v42 = v7;
          }
          else
          {
            v40 = v39 + 1225 * v34 + 467 * v37;
            v41 = v7;
            v42 = v8;
          }
          v43 = (BOOL *)(v17 + v22);
          v44 = *(unsigned __int16 *)(v42 + 2 * v37);
          v45 = v35 - ((v4 * *(unsigned __int16 *)(v41 + 2 * v34) + 2048) >> 12);
          v46 = v38 - (v45 + ((v4 * v44 + 2048) >> 12));
          v47 = (v46 & ~(v46 >> 31)) + v45;
          if ((v40 + 2048) >> 12 <= 0x1000)
            v48 = 4096;
          else
            v48 = (v40 + 2048) >> 12;
          v49 = (int)(v47 * (v48 - 4096)) >> 12;
          if (v40 <= 0x1FFF7FF)
            v47 = v49;
          *v43 = ((int)(((v40 + 2048) >> 12) * v5) >> 16) + ~v47 < 0;
          v21 = *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v15 + v20 + 12));
          v50 = (v36 + v21 + 1) >> 1;
          if (v21 - v36 >= 0)
            v51 = v21 - v36;
          else
            v51 = v36 - v21;
          v23 = *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v18 + v20 + 4));
          v52 = (v33 + v23 + 1) >> 1;
          if (v33 - v23 >= 0)
            v53 = v33 - v23;
          else
            v53 = v23 - v33;
          v54 = 2404 * *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v16 + v20));
          if ((v19 & 2) != 0)
          {
            v25 = v54 + 1225 * v50 + 467 * v52;
            v26 = v7;
            v27 = v8;
          }
          else
          {
            v25 = v54 + 467 * v50 + 1225 * v52;
            v26 = v8;
            v27 = v7;
          }
          v28 = *(unsigned __int16 *)(v26 + 2 * v50);
          result = ((int)(((v25 + 2048) >> 12) * v5) >> 16);
          v29 = v4 * *(unsigned __int16 *)(v27 + 2 * v52) + 2048;
          v30 = ((v53 - (v51 - ((v4 * v28 + 2048) >> 12) + (v29 >> 12))) & ~((v53
                                                                            - (v51
                                                                             - ((v4 * v28 + 2048) >> 12)
                                                                             + (v29 >> 12))) >> 31))
              + v51
              - ((v4 * v28 + 2048) >> 12);
          if ((v25 + 2048) >> 12 <= 0x1000)
            v31 = 4096;
          else
            v31 = (v25 + 2048) >> 12;
          v32 = (int)(v30 * (v31 - 4096)) >> 12;
          if (v25 <= 0x1FFF7FF)
            v30 = v32;
          v43[1] = (int)result + ~v30 < 0;
          v22 += 2;
          v20 += 8;
        }
        v19 += 2;
        v15 += v56;
        v16 += v56;
        v18 += v56;
        v17 += v59;
      }
      while (v19 < v60);
    }
  }
  return result;
}

void *sub_1D537E710(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _WORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unint64_t v21;
  __int16 v22;
  _WORD *v23;
  __int16 v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  _WORD *v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  __int16 v50;
  _WORD *v51;
  __int16 v52;
  _WORD *v53;
  unsigned __int16 *v54;
  unint64_t v55;
  char *v56;
  __int16 v57;
  unsigned int v58;
  char *v59;
  unint64_t i;
  __int16 v61;
  _WORD *v62;
  __int16 v63;
  __int16 v64;
  char *v65;
  __int16 v66;
  const void *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t __len;
  uint64_t v74;

  v2 = a2[119];
  v3 = a2[124];
  v4 = (_WORD *)(a2[123] + 2 * v3);
  v5 = a2[120] - 2;
  __len = 2 * v2;
  v68 = v4;
  v69 = (char *)a2[123];
  if (v5 >= 3)
  {
    v6 = v2 - 2;
    if ((unint64_t)(v2 - 2) <= 2)
    {
      v4 = (_WORD *)(a2[123] + 2 * v3);
      v59 = &v69[3 * v3 - 6];
      for (i = 2; i < v5; i += 2)
      {
        v61 = v4[2];
        v4[1] = v61;
        *v4 = v61;
        v62 = &v4[(unint64_t)__len / 2];
        v63 = v4[(unint64_t)__len / 2 - 3];
        *(v62 - 2) = v63;
        *(v62 - 1) = v63;
        v64 = *((_WORD *)v59 + 5);
        *((_WORD *)v59 + 4) = v64;
        *((_WORD *)v59 + 3) = v64;
        v65 = &v59[__len];
        v66 = *(_WORD *)&v59[2 * v2];
        *((_WORD *)v65 + 1) = v66;
        *((_WORD *)v65 + 2) = v66;
        v4 = (_WORD *)((char *)v4 + v3 + v3);
        v59 += 2 * v3;
      }
    }
    else
    {
      v7 = a2[122];
      v8 = a2[126];
      v9 = v7 >> 1;
      v10 = *(_DWORD *)(a1 + 960);
      v7 &= ~1uLL;
      v11 = *(_DWORD *)(a1 + 968);
      v12 = a2[121];
      v13 = v12 + 2 * v7;
      v70 = 4 * v9;
      v14 = v12 + 8 * v9;
      v15 = v12 + v7;
      v16 = v12 + 6 * v9;
      v17 = v16 + 4;
      v4 = (_WORD *)(a2[123] + 2 * v3);
      v18 = &v69[3 * v3];
      v19 = a2[125];
      v20 = (unsigned __int16 *)(v16 + 6);
      v21 = 2;
      v71 = 2 * v3;
      v72 = v3;
      do
      {
        v25 = 0;
        v74 = v19 + v8;
        v26 = v11;
        v27 = 2;
        do
        {
          v29 = 2 * v26;
          v30 = v19 + v8;
          v31 = (unsigned __int16 *)(v19 + v8 + v29);
          v32 = v19 + v29;
          v33 = *v31 + v31[3] + *(unsigned __int16 *)(v19 + v29 + 6) + *(unsigned __int16 *)(v19 + v29);
          v34 = *(unsigned __int16 *)(v13 + v25 + 4);
          if (v33 >= 2)
          {
            v38 = ((*(unsigned __int16 *)(v30 + 8)
                  + *(unsigned __int16 *)(v30 + 2)
                  + *(unsigned __int16 *)(v19 + 8)
                  + *(unsigned __int16 *)(v19 + 2)
                  + 2) >> 2)
                * v34
                / ((v33 + 2) >> 2);
          }
          else
          {
            v35 = (*(unsigned __int16 *)(v15 + v25 + 2)
                 + *(unsigned __int16 *)(v15 + v25 + 6)
                 + *(unsigned __int16 *)(v17 + v25 - 2)
                 + *(unsigned __int16 *)(v17 + v25 + 2)
                 + 2) >> 2;
            v36 = (3 * v34
                 + ((*(unsigned __int16 *)(v12 + v25)
                   + *(unsigned __int16 *)(v12 + v25 + 8)
                   + *(unsigned __int16 *)(v14 + v25)
                   + *(unsigned __int16 *)(v14 + v25 + 8)
                   + 2) >> 2)
                 + 2) >> 2;
            if (v10 == 0x10000)
            {
              v37 = v34 - v36 + v35;
            }
            else
            {
              v39 = (int)((v35 - v36) * v10 + 0x8000) >> 16;
              v40 = v39 + v36;
              v37 = v39 + v34;
              if (v40 >= 1)
                v37 = (int)(((v40 >> 1) + (v35 << 14)) / v40 * v37 + 4096) >> 14;
            }
            v38 = v37 & ~(v37 >> 31);
          }
          v41 = &v4[v25 / 2];
          if (v38 >= 0xFFFF)
            LOWORD(v38) = -1;
          v41[2] = v38;
          v42 = *(unsigned __int16 *)(v32 + 6);
          v43 = *(unsigned __int16 *)(v13 + v25 + 6);
          v44 = v42 + v31[3];
          if (v44)
          {
            v28 = ((*(unsigned __int16 *)(v30 + 8) + *(unsigned __int16 *)(v19 + 8) + 1) >> 1)
                * v43
                / ((v44 + 1) >> 1);
          }
          else
          {
            v45 = (*(unsigned __int16 *)(v15 + v25 + 4)
                 + *(unsigned __int16 *)(v15 + v25 + 8)
                 + *(unsigned __int16 *)(v17 + v25)
                 + *(unsigned __int16 *)(v17 + v25 + 4)
                 + 2) >> 2;
            v46 = (3 * v43
                 + ((*(unsigned __int16 *)(v12 + v25 + 2)
                   + *(unsigned __int16 *)(v12 + v25 + 10)
                   + *(unsigned __int16 *)(v14 + v25 + 2)
                   + *(unsigned __int16 *)(v14 + v25 + 10)
                   + 2) >> 2)
                 + 2) >> 2;
            if (v10 == 0x10000)
            {
              v47 = v43 - v46 + v45;
            }
            else
            {
              v48 = (int)((v45 - v46) * v10 + 0x8000) >> 16;
              v49 = v48 + v46;
              v47 = v48 + v43;
              if (v49 >= 1)
                v47 = (int)(((v49 >> 1) + (v45 << 14)) / v49 * v47 + 4096) >> 14;
            }
            v28 = v47 & ~(v47 >> 31);
          }
          if (v28 >= 0xFFFF)
            LOWORD(v28) = -1;
          v41[3] = v28;
          v26 ^= 2u;
          v27 += 2;
          v25 += 4;
          v19 += 6;
        }
        while (v27 < v6);
        v11 ^= 2u;
        v50 = v4[2];
        v4[1] = v50;
        *v4 = v50;
        v51 = &v4[v2];
        v52 = *(v51 - 3);
        *(v51 - 2) = v52;
        *(v51 - 1) = v52;
        v3 = v72;
        v53 = (_WORD *)((char *)v4 + v72);
        v54 = v20;
        v55 = 2;
        v19 = v74;
        do
        {
          LOWORD(v58) = *(v54 - 1);
          if (!(_WORD)v58)
            v58 = (*(v54 - 2) + *v54 + 1) >> 1;
          v56 = &v18[2 * v55];
          *(_WORD *)v56 = v58;
          v57 = *v54;
          v54 += 2;
          *((_WORD *)v56 + 1) = v57;
          v55 += 2;
        }
        while (v55 < v6);
        v22 = v53[2];
        v53[1] = v22;
        *v53 = v22;
        v23 = &v53[v2];
        v4 = (_WORD *)((char *)v53 + v72);
        v21 += 2;
        v24 = *(v23 - 3);
        v12 += v70;
        v14 += v70;
        v13 += v70;
        v15 += v70;
        *(v23 - 2) = v24;
        *(v23 - 1) = v24;
        v17 += v70;
        v18 += v71;
        v20 = (unsigned __int16 *)((char *)v20 + v70);
      }
      while (v21 < v5);
    }
  }
  memmove(v4, (char *)v4 - v3, __len);
  memmove((char *)v4 + v3, (char *)v4 - v3, __len);
  memmove(v69, v68, __len);
  return memmove(&v69[v3], v68, __len);
}

void *sub_1D537EBD8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  __int16 v25;
  char *v26;
  __int16 v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  __int16 v39;
  char *v40;
  __int16 v41;
  char *v42;
  unint64_t i;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  __int16 v47;
  char *v48;
  __int16 v49;
  char *v50;
  unint64_t v51;
  __int16 v52;
  char *v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _WORD *v59;
  _WORD *v60;
  __int16 v61;
  char *v62;
  __int16 v63;
  _WORD *v64;
  __int16 v65;
  _WORD *v66;
  uint64_t __len;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned __int16 *v78;

  v2 = a2[119];
  v3 = a2[124];
  v70 = (char *)a2[123];
  v4 = &v70[2 * v3];
  v5 = a2[120] - 2;
  __len = 2 * v2;
  v69 = v4;
  if (v5 >= 3)
  {
    v74 = a2[120] - 2;
    v75 = 2 * v3;
    v6 = a2[121];
    v7 = a2[122] >> 1;
    v8 = *(_QWORD *)(a1 + 976);
    v73 = a2[119];
    v9 = v2 - 2;
    v10 = v8 ^ 1;
    v76 = v8;
    if (v8 >= v9)
    {
      if (v10 >= v9)
      {
        v55 = 3 * v3;
        v56 = 3 * v3 + 2 * v10 - 2;
        v57 = v75 + __len - 6;
        v58 = 2;
        v59 = (_WORD *)a2[123];
        do
        {
          v60 = &v59[(unint64_t)v75 / 2];
          v59[v8 - 1 + (unint64_t)v75 / 2] = 0;
          v61 = v59[(unint64_t)v75 / 2 + 2];
          v60[1] = v61;
          *v60 = v61;
          v62 = (char *)v59 + v57;
          v63 = *(_WORD *)((char *)v59 + v57);
          *((_WORD *)v62 + 1) = v63;
          *((_WORD *)v62 + 2) = v63;
          v64 = (_WORD *)((char *)v59 + v55);
          *(_WORD *)((char *)v59 + v56) = 0;
          v65 = *(_WORD *)((char *)v59 + v55 + 4);
          v64[1] = v65;
          *v64 = v65;
          v66 = (_WORD *)((char *)v59 + 3 * v3 + __len - 2);
          LOWORD(v64) = *(v66 - 2);
          *(v66 - 1) = (_WORD)v64;
          *v66 = (_WORD)v64;
          v58 += 2;
          v59 = v60;
        }
        while (v58 < v5);
        v4 = (char *)&v60[(unint64_t)v75 / 2];
      }
      else
      {
        v4 = &v70[2 * v3];
        v44 = &v70[3 * v3];
        v45 = v6 + 6 * v7;
        v46 = 2;
        do
        {
          *(_WORD *)&v4[2 * v8 - 2] = 0;
          v47 = *((_WORD *)v4 + 2);
          *((_WORD *)v4 + 1) = v47;
          *(_WORD *)v4 = v47;
          v48 = &v4[2 * v73];
          v49 = *((_WORD *)v48 - 3);
          *((_WORD *)v48 - 2) = v49;
          *((_WORD *)v48 - 1) = v49;
          v50 = &v4[v3];
          *(_WORD *)&v4[2 * v10 - 2 + v3] = 0;
          v51 = v8 ^ 1;
          do
          {
            *(_DWORD *)&v44[2 * v51] = *(unsigned __int16 *)(v45 + 2 * v51);
            v51 += 2;
          }
          while (v51 < v9);
          v52 = *((_WORD *)v50 + 2);
          *((_WORD *)v50 + 1) = v52;
          *(_WORD *)v50 = v52;
          v53 = &v50[2 * v73];
          v54 = *((_WORD *)v53 - 3);
          *((_WORD *)v53 - 2) = v54;
          *((_WORD *)v53 - 1) = v54;
          v4 = &v50[v3];
          v46 += 2;
          v44 += v75;
          v45 += 4 * v7;
        }
        while (v46 < v74);
      }
    }
    else
    {
      v11 = *(_DWORD *)(a1 + 964);
      v12 = a2[126];
      v13 = *(_DWORD *)(a1 + 960);
      v14 = (uint64_t)&v70[2 * v8 + 2 + v75];
      v15 = *(_DWORD *)(a1 + 968);
      v16 = v6 + 2 * v8;
      v71 = 4 * v7;
      v17 = v16 + 4 * v7;
      v18 = 6 * v7 + v16 - 2;
      v19 = v6 + 2 * (v8 + v7) - 2;
      v20 = 2 * v8 + 8 * v7 + v6 - 4;
      v21 = &v70[3 * v3];
      v22 = v6 + 6 * v7;
      v23 = (unsigned __int16 *)(a2[125] + 8);
      v24 = 2;
      v4 = &v70[2 * v3];
      v72 = a2[124];
      do
      {
        v77 = v24;
        v28 = 0;
        v29 = v76;
        *(_WORD *)&v4[2 * v76 - 2] = 0;
        v78 = v23;
        v30 = v15;
        do
        {
          v32 = *(unsigned __int16 *)((char *)&v23[v30 - 1 + v11] + v12)
              + *(unsigned __int16 *)((char *)&v23[v30 - 1] + v12)
              + v23[v30 - 1]
              + v23[v30 - 1 + v11];
          v33 = *(unsigned __int16 *)(v17 + v28);
          if (v32 >= 2)
          {
            v31 = ((*(unsigned __int16 *)((char *)v23 + v12)
                  + *(unsigned __int16 *)((char *)&v23[v11] + v12)
                  + *v23
                  + v23[v11]
                  + 2) >> 2)
                * v33
                / ((v32 + 2) >> 2);
          }
          else
          {
            v34 = (*(unsigned __int16 *)(v19 + v28)
                 + *(unsigned __int16 *)(v19 + v28 + 4)
                 + *(unsigned __int16 *)(v18 + v28)
                 + *(unsigned __int16 *)(v18 + v28 + 4)
                 + 2) >> 2;
            v35 = (3 * v33
                 + ((*(unsigned __int16 *)(v16 + v28 - 4)
                   + *(unsigned __int16 *)(v16 + v28 + 4)
                   + *(unsigned __int16 *)(v20 + v28)
                   + *(unsigned __int16 *)(v20 + v28 + 8)
                   + 2) >> 2)
                 + 2) >> 2;
            if (v13 == 0x10000)
            {
              v36 = v33 - v35 + v34;
            }
            else
            {
              v37 = (int)((v34 - v35) * v13 + 0x8000) >> 16;
              v38 = v37 + v35;
              v36 = v37 + v33;
              if (v38 >= 1)
                v36 = (int)(((v38 >> 1) + (v34 << 14)) / v38 * v36 + 4096) >> 14;
            }
            v31 = v36 & ~(v36 >> 31);
          }
          *(_WORD *)(v14 + v28) = 0;
          v30 ^= 2u;
          if (v31 >= 0xFFFF)
            LOWORD(v31) = -1;
          *(_WORD *)(v14 + v28 - 2) = v31;
          v29 += 2;
          v23 += 3;
          v28 += 4;
        }
        while (v29 < v9);
        v39 = *((_WORD *)v4 + 2);
        *((_WORD *)v4 + 1) = v39;
        *(_WORD *)v4 = v39;
        v3 = v72;
        v40 = &v4[2 * v73];
        v41 = *((_WORD *)v40 - 3);
        *((_WORD *)v40 - 2) = v41;
        *((_WORD *)v40 - 1) = v41;
        v42 = &v4[v72];
        *(_WORD *)&v4[2 * v10 - 2 + v72] = 0;
        for (i = v10; i < v9; i += 2)
          *(_DWORD *)&v21[2 * i] = *(unsigned __int16 *)(v22 + 2 * i);
        v15 ^= 2u;
        v25 = *((_WORD *)v42 + 2);
        *((_WORD *)v42 + 1) = v25;
        *(_WORD *)v42 = v25;
        v26 = &v42[2 * v73];
        v4 = &v42[v72];
        v24 += 2;
        v23 = (unsigned __int16 *)((char *)v78 + v12);
        v14 += v75;
        v27 = *((_WORD *)v26 - 3);
        *((_WORD *)v26 - 2) = v27;
        v17 += v71;
        v18 += v71;
        v16 += v71;
        v19 += v71;
        *((_WORD *)v26 - 1) = v27;
        v20 += v71;
        v21 += v75;
        v22 += v71;
      }
      while (v77 + 2 < v74);
    }
  }
  memmove(v4, &v4[-v3], __len);
  memmove(&v4[v3], &v4[-v3], __len);
  memmove(v70, v69, __len);
  return memmove(&v70[v3], v69, __len);
}

uint64_t sub_1D537F10C(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  float *v20;
  unsigned __int16 *v21;
  char *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  int v31;
  int v32;
  int v33;
  __int16 v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  __int32 v62;
  unsigned int v63;
  unsigned int v64;
  float v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  unsigned int v75;
  unsigned int v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  float v100;
  float v101;
  unsigned int v102;
  unsigned int v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  unsigned int v121;
  unsigned int v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  char *v131;
  unsigned __int16 *v132;
  uint64_t v133;
  unsigned __int16 *v134;
  int v135;
  int16x4_t v136;
  int16x4_t v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  __int16 v144;
  unsigned __int16 *v145;
  int v146;
  unsigned __int16 *v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  __int16 v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  __int16 v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  unsigned __int16 *v166;
  unsigned __int16 *v167;
  unsigned __int16 *v168;
  int v169;
  int v170;
  int v171;
  int v172;
  __int32 v173;
  __int32 v174;
  unsigned __int16 *v175;
  __int32 v176;
  __int32 v177;
  __int32 v178;
  __int32 v179;
  int v180;
  int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  __int16 v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  __int16 v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  __int16 v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  int v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  uint16x4_t v227;
  unsigned int v228;
  uint16x4_t v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  uint16x4_t v233;
  uint16x4_t v234;
  int32x4_t v235;
  int8x16_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int32x4_t v245;
  int32x4_t v246;
  int32x4_t v247;
  int32x4_t v248;
  int32x4_t v249;
  int32x4_t v250;
  unsigned __int16 *v251;
  unsigned int v252;
  unsigned __int16 *v253;
  unsigned int v254;
  unsigned int v255;
  unsigned __int16 *v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  float v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  unsigned int v279;
  unsigned int v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  float v291;
  float v292;
  float v293;
  float v294;
  float v295;
  float v296;
  float v297;
  float v298;
  float v299;
  unsigned int v300;
  unsigned int v301;
  float v302;
  float v303;
  float v304;
  float v305;
  float v306;
  float v307;
  float v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  float v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float v317;
  float v318;
  float v319;
  float v320;
  unsigned int v321;
  unsigned int v322;
  float v323;
  float v324;
  float v325;
  float v326;
  float v327;
  float v328;
  float v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  float v333;
  float v334;
  float v335;
  float v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  float v348;
  float v349;
  float v350;
  float v351;
  float v352;
  float v353;
  float v354;
  float v355;
  float v356;
  unsigned int v357;
  unsigned int v358;
  float v359;
  float v360;
  float v361;
  float v362;
  float v363;
  float v364;
  float v365;
  unsigned int v366;
  unsigned int v367;
  unsigned int v368;
  float v369;
  float v370;
  float v371;
  float v372;
  float v373;
  float v374;
  float v375;
  float v376;
  float v377;
  unsigned int v378;
  unsigned int v379;
  float v380;
  float v381;
  float v382;
  float v383;
  float v384;
  float v385;
  float v386;
  unsigned int v387;
  unsigned int v388;
  unsigned int v389;
  float v390;
  float v391;
  float v392;
  float v393;
  float v394;
  float v395;
  float v396;
  float v397;
  float v398;
  unsigned int v399;
  unsigned int v400;
  float v401;
  float v402;
  float v403;
  float v404;
  float v405;
  float v406;
  float v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  float v411;
  float v412;
  float v413;
  float v414;
  float v415;
  float v416;
  float v417;
  float v418;
  float v419;
  unsigned int v420;
  unsigned int v421;
  float v422;
  float v423;
  float v424;
  float v425;
  float v426;
  int v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  int v434;
  unsigned __int16 *v435;
  unsigned __int16 *v436;
  unsigned __int16 *v437;
  int v438;
  int v439;
  int v440;
  int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  unsigned __int16 v446;
  int v447;
  int v448;
  int v449;
  int v450;
  unsigned __int16 v451;
  unsigned __int16 v452;
  int v453;
  int v454;
  int v455;
  unsigned __int16 v456;
  unsigned __int16 v457;
  int v458;
  int v459;
  __int16 v460;
  __int16 v461;
  int v462;
  int v463;
  __int16 v464;
  int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  int v471;
  int v472;
  int v473;
  unsigned __int16 v474;
  int v475;
  int v476;
  int v477;
  int v478;
  unsigned __int16 v479;
  unsigned __int16 v480;
  int v481;
  int v482;
  int v483;
  unsigned __int16 v484;
  unsigned __int16 v485;
  int v486;
  int v487;
  int v488;
  __int16 v489;
  __int16 v490;
  int v491;
  int v492;
  int v493;
  int v494;
  int v495;
  int v496;
  char *v497;
  unsigned __int16 *v498;
  unsigned __int16 *v499;
  unsigned __int16 *v500;
  int v501;
  int v502;
  int v503;
  int v504;
  int v505;
  unsigned __int16 v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  unsigned __int16 v512;
  unsigned __int16 v513;
  int v514;
  __int16 v515;
  int v516;
  __int16 v517;
  int v518;
  int v519;
  int v520;
  int v521;
  int v522;
  int v523;
  int v524;
  int v525;
  int v526;
  int v527;
  int v528;
  int v529;
  int v530;
  unsigned __int16 v531;
  unsigned __int16 v532;
  int v533;
  int v534;
  int v535;
  __int16 v536;
  __int16 v537;
  int v538;
  int v539;
  __int16 v540;
  int v541;
  int v542;
  int v543;
  unsigned __int16 *v544;
  unsigned __int16 *v545;
  unsigned __int16 *v546;
  int v547;
  int v548;
  int v549;
  int v550;
  int v551;
  unsigned __int16 v552;
  int v553;
  int v554;
  int v555;
  int v556;
  unsigned __int16 v557;
  int v558;
  int v559;
  int v560;
  unsigned __int16 v561;
  unsigned __int16 v562;
  int v563;
  int v564;
  int v565;
  unsigned __int16 v566;
  unsigned __int16 v567;
  __int16 v568;
  __int16 v569;
  int v570;
  __int16 v571;
  __int16 v572;
  int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  int v579;
  int v580;
  int v581;
  int v582;
  int v583;
  int v584;
  int v585;
  int v586;
  int v587;
  unsigned __int16 v588;
  unsigned __int16 v589;
  int v590;
  int v591;
  int v592;
  unsigned __int16 v593;
  int v594;
  int v595;
  int v596;
  unsigned __int16 v597;
  unsigned __int16 v598;
  int v599;
  int v600;
  __int16 v601;
  __int16 v602;
  int v603;
  int v604;
  int v605;
  int v606;
  int v607;
  unsigned __int16 *v608;
  unsigned __int16 *v609;
  unsigned __int16 *v610;
  int v611;
  int v612;
  int v613;
  int v614;
  int v615;
  int v616;
  int v617;
  int v618;
  int v619;
  int v620;
  unsigned __int16 v621;
  unsigned __int16 v622;
  __int16 v623;
  __int16 v624;
  int v625;
  __int16 v626;
  int v627;
  int v628;
  int v629;
  int v630;
  int v631;
  int v632;
  int v633;
  int v634;
  int v635;
  int v636;
  int v637;
  int v638;
  int v639;
  int v640;
  int v641;
  unsigned __int16 v642;
  unsigned __int16 v643;
  int v644;
  int v645;
  __int16 v646;
  __int16 v647;
  int v648;
  int v649;
  __int16 v650;
  int v651;
  int v652;
  int v653;
  int v654;
  int v655;
  float v656;
  float v657;
  BOOL v658;
  float v659;
  float v660;
  int v661;
  float v662;
  float v663;
  float v664;
  float v665;
  int v666;
  uint64_t *v667;
  uint64_t v668;
  unsigned int v669;
  int v670;
  int v671;
  unsigned int v672;
  unsigned int v673;
  unsigned int v674;
  unsigned int v675;
  unsigned int v676;
  float v677;
  unsigned int v678;
  float v679;
  float v680;
  float v681;
  float v682;
  float v683;
  float v684;
  float v685;
  float v686;
  float v687;
  float v688;
  float v689;
  float v690;
  int v691;
  float v692;
  float v693;
  float v694;
  float v695;
  float v696;
  float v697;
  float v698;
  float v699;
  float v700;
  int v701;
  unsigned int v702;
  unsigned int v703;
  unsigned int v704;
  unsigned int v705;
  float v706;
  float v707;
  unsigned int v708;
  float v709;
  float v710;
  float v711;
  float v712;
  float v713;
  float v714;
  float v715;
  float v716;
  float v717;
  float v718;
  float v719;
  int v720;
  float v721;
  float v722;
  float v723;
  float v724;
  float v725;
  float v726;
  float v727;
  float v728;
  float v729;
  float v730;
  int v731;
  unsigned int v732;
  unsigned int v733;
  unsigned int v734;
  unsigned int v735;
  unsigned int v736;
  unsigned int v737;
  float v738;
  float v739;
  float v740;
  float v741;
  float v742;
  float v743;
  float v744;
  float v745;
  float v746;
  float v747;
  float v748;
  float v749;
  float v750;
  float v751;
  int v752;
  float v753;
  float v754;
  float v755;
  float v756;
  float v757;
  float v758;
  float v759;
  float v760;
  float v761;
  int v762;
  unsigned int v763;
  unsigned int v764;
  unsigned int v765;
  unsigned int v766;
  unsigned int v767;
  float v768;
  float v769;
  unsigned int v770;
  float v771;
  float v772;
  float v773;
  float v774;
  float v775;
  float v776;
  float v777;
  float v778;
  float v779;
  float v780;
  float v781;
  float v782;
  int v783;
  float v784;
  float v785;
  float v786;
  float v787;
  float v788;
  float v789;
  float v790;
  float v791;
  float v792;
  unsigned int v793;
  unsigned int v794;
  unsigned int v795;
  unsigned int v796;
  unsigned int v797;
  float v798;
  float v799;
  float v800;
  float v801;
  float v802;
  float v803;
  float v804;
  float v805;
  int v806;
  float v807;
  float v808;
  float v809;
  float v810;
  float v811;
  float v812;
  float v813;
  int v814;
  unsigned int v815;
  unsigned int v816;
  unsigned int v817;
  unsigned int v818;
  float v819;
  float v820;
  float v821;
  float v822;
  float v823;
  float v824;
  float v825;
  float v826;
  float v827;
  float v828;
  float v829;
  float v830;
  float v831;
  float v832;
  float v833;
  float v834;
  float v835;
  unsigned __int16 *v836;
  unsigned int v837;
  unsigned int v838;
  unsigned int v839;
  unsigned int v840;
  unsigned int v841;
  unsigned int v842;
  unsigned int v843;
  unsigned int v844;
  float v845;
  float v846;
  float v847;
  float v848;
  float v849;
  float v850;
  float v851;
  float v852;
  float v853;
  float v854;
  float v855;
  float v856;
  float v857;
  float v858;
  float v859;
  float v860;
  float v861;
  float v862;
  int v863;
  float v864;
  float v865;
  float v866;
  float v867;
  float v868;
  float v869;
  float v870;
  float v871;
  float v872;
  float v873;
  float v874;
  float v875;
  int v876;
  unsigned int v877;
  unsigned int v878;
  unsigned int v879;
  unsigned int v880;
  unsigned int v881;
  unsigned int v882;
  unsigned int v883;
  float v884;
  float v885;
  float v886;
  float v887;
  float v888;
  float v889;
  float v890;
  float v891;
  float v892;
  float v893;
  float v894;
  float v895;
  float v896;
  float v897;
  float v898;
  float v899;
  float v900;
  float v901;
  int v902;
  float v903;
  float v904;
  float v905;
  float v906;
  float v907;
  float v908;
  float v909;
  float v910;
  float v911;
  float v912;
  float v913;
  float v914;
  float v915;
  uint64_t v916;
  unint64_t v917;
  char *v918;
  unsigned int v919;
  unsigned __int16 *v920;
  unsigned __int16 *v921;
  unsigned __int16 *v922;
  unsigned __int16 *v923;
  int v924;
  int v925;
  __int16 v926;
  int v927;
  int v928;
  __int16 v929;
  int v930;
  int v931;
  __int16 v932;
  int v933;
  int v934;
  int v935;
  int v936;
  int v937;
  char *v938;
  char *v939;
  uint64_t v940;
  int v941;
  int v942;
  __int16 v943;
  int v944;
  int v945;
  unsigned __int16 v946;
  unsigned __int16 *v947;
  unsigned __int16 *v948;
  unsigned __int16 *v949;
  int v950;
  int v951;
  __int16 v952;
  int v953;
  int v954;
  __int16 v955;
  int v956;
  int v957;
  __int16 v958;
  int v959;
  int v960;
  int v961;
  unsigned __int16 *v962;
  unsigned __int16 *v963;
  unsigned __int16 *v964;
  int v965;
  int v966;
  int v967;
  unint64_t v968;
  int v969;
  unint64_t v970;
  uint64_t v971;
  int v972;
  int v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  unsigned __int16 *v978;
  char *v979;
  unsigned __int16 *v980;
  unsigned __int16 *v981;
  int v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  int v989;
  int v990;
  int v991;
  int v992;
  unsigned __int16 *v993;
  unsigned __int16 *v994;
  uint64_t v995;
  uint64_t v996;
  unint64_t v997;
  int v998;
  __int32 v999;
  int v1000;
  unsigned __int16 *v1001;
  unsigned int v1002;
  unsigned __int16 *v1003;
  __int128 v1004;
  __int128 v1005;
  __int128 v1006;
  _OWORD v1007[3];
  __int128 v1008;
  __int128 v1009;
  __int128 v1010;
  __int128 v1011;
  __int128 v1012;
  __int128 v1013;
  __int128 v1014;
  __int128 v1015;
  __int128 v1016;
  __int128 v1017;
  __int128 v1018;
  __int128 v1019;
  __int128 v1020;
  __int128 v1021;
  __int128 v1022;
  __int128 v1023;
  __int128 v1024;
  __int128 v1025;
  __int128 v1026;
  __int128 v1027;
  __int128 v1028;
  __int128 v1029;
  __int128 v1030;
  __int128 v1031;
  __int128 v1032;
  __int128 v1033;
  float v1034;
  uint64_t v1035;
  float v1036;
  __int128 v1037;
  float v1038;
  float v1039;
  float v1040;
  float v1041;
  __int128 v1042;
  uint64_t v1043;
  float v1044;
  float v1045;
  float v1046;
  float v1047;
  float v1048;
  float v1049;
  uint64_t v1050;
  float v1051;
  _QWORD v1052[5];

  v1052[3] = *MEMORY[0x1E0C80C00];
  v2 = a2[127];
  v3 = a2[128];
  v980 = (unsigned __int16 *)a2[129];
  v988 = a2[130];
  v4 = a2[131];
  v975 = a2[132];
  v5 = (char *)a2[133];
  v6 = a2[134];
  v7 = *(float *)(result + 1024);
  v8 = *(_QWORD *)(result + 1032);
  v9 = *(_QWORD *)(result + 1040);
  v10 = *(_QWORD *)(result + 1048);
  v11 = *(_QWORD *)(result + 1056);
  v974 = *(_QWORD *)(result + 1064);
  v973 = *(_DWORD *)(result + 1072);
  v12 = *(_DWORD *)(result + 1076);
  v972 = *(_DWORD *)(result + 1080);
  v13 = *(_DWORD *)(result + 1084);
  v14 = *(_QWORD *)(*(_QWORD *)(result + 2416) + 64);
  v1032 = 0u;
  v1033 = 0u;
  v1030 = 0u;
  v1031 = 0u;
  v1028 = 0u;
  v1029 = 0u;
  v1026 = 0u;
  v1027 = 0u;
  v1024 = 0u;
  v1025 = 0u;
  v1022 = 0u;
  v1023 = 0u;
  v1020 = 0u;
  v1021 = 0u;
  v1018 = 0u;
  v1019 = 0u;
  v1016 = 0u;
  v1017 = 0u;
  v1014 = 0u;
  v1015 = 0u;
  v1012 = 0u;
  v1013 = 0u;
  v1010 = 0u;
  v1011 = 0u;
  v1008 = 0u;
  v1009 = 0u;
  v1006 = 0u;
  memset(v1007, 0, sizeof(v1007));
  v1004 = 0u;
  v1005 = 0u;
  v1052[0] = v8;
  v1052[1] = v10;
  v1052[2] = v8;
  v996 = v11;
  v997 = v2;
  if (v2 > 1)
  {
    if (v2 >> 1 <= 1)
      v16 = 1;
    else
      v16 = v2 >> 1;
    v17 = v6;
    memset(v5, 68, v16);
    memset(&v5[v17], 68, v16);
    memset(&v5[v17 + v17], 68, v16);
    v15 = v3 - 3;
    if (v3 < 3)
    {
      v6 = v17;
    }
    else
    {
      v18 = &v5[v17 * v15];
      memset(v18, 68, v16);
      v19 = &v18[v17];
      memset(v19, 68, v16);
      result = (uint64_t)memset(&v19[v17], 68, v16);
      v15 = v3 - 3;
      v6 = v17;
      v11 = v996;
      if (v3 - 3 < 4)
        return result;
    }
LABEL_11:
    v20 = 0;
    v21 = 0;
    v22 = &v5[3 * v6];
    v23 = (unsigned __int16 *)(v4 + v975 + 2 * v975 + 6);
    v987 = v988;
    v24 = (uint64_t)v980 + 3 * v988 + 6;
    v969 = (2 * v12) ^ 2;
    v968 = v997 - 3;
    v985 = 2 * v988;
    v986 = 3 * v988;
    v984 = 5 * v988;
    v983 = 3 * v988;
    v25 = 0.0;
    v26 = 3;
    v982 = v13;
    v970 = v15;
    v971 = v6;
    v995 = v9;
    while (1)
    {
      v979 = v22;
      v27 = &v23[-v975];
      v28 = (unsigned __int16 *)((char *)v23 - v975);
      v29 = (unsigned __int16 *)((char *)v23 + v975);
      v30 = &v23[v975];
      v1003 = v23;
      v1002 = 7u >> *(_BYTE *)(v974 + 4 * (v26 & 3) + 3);
      v1001 = v27;
      if ((v1002 & 1) != 0)
      {
        v51 = *(v27 - 2);
        v52 = *(v23 - 2);
        v53 = *(v30 - 2);
        v33 = v52 + v51 + v53;
        LODWORD(v1013) = v33;
        v54 = ((v52 - v51) & ((v52 - v51) >> 31)) + v51;
        if (v52 > v51)
          v51 = v52;
        LOWORD(v1005) = ((v53 - v54) & ((v53 - v54) >> 31)) + v54;
        if (v53 > v51)
          LOWORD(v51) = v53;
        WORD4(v1006) = v51;
        v35 = *(v28 - 1);
        v55 = *(v29 - 1);
        v38 = v55 + v35;
        DWORD1(v1013) = v55 + v35;
        v56 = (v55 - v35) & ((v55 - v35) >> 31);
        LOWORD(v40) = v35 + v56;
        WORD1(v1005) = v35 + v56;
        LOWORD(v35) = v55 - v56;
        WORD5(v1006) = v55 - v56;
        v45 = *v27;
        v57 = *v23;
        v58 = *v30;
        v42 = v57 + v45 + v58;
        DWORD2(v1013) = v42;
        v59 = ((v57 - v45) & ((v57 - v45) >> 31)) + v45;
        if (v57 > v45)
          v45 = v57;
        v44 = ((v58 - v59) & ((v58 - v59) >> 31)) + v59;
        WORD2(v1005) = ((v58 - v59) & ((v58 - v59) >> 31)) + v59;
        if (v58 > v45)
          LOWORD(v45) = v58;
        WORD6(v1006) = v45;
        v60 = v28[1];
        v61 = v29[1];
        v49 = v61 + v60;
        HIDWORD(v1013) = v61 + v60;
        WORD3(v1005) = v60 + ((v61 - v60) & ((v61 - v60) >> 31));
        v46 = v61 - ((v61 - v60) & ((v61 - v60) >> 31));
      }
      else
      {
        v31 = *(v28 - 2);
        v32 = *(v29 - 2);
        v33 = v32 + v31;
        LODWORD(v1013) = v32 + v31;
        v34 = (v32 - v31) & ((v32 - v31) >> 31);
        LOWORD(v1005) = v31 + v34;
        WORD4(v1006) = v32 - v34;
        v35 = *(v27 - 1);
        v36 = *(v23 - 1);
        v37 = *(v30 - 1);
        v38 = v36 + v35 + v37;
        DWORD1(v1013) = v38;
        v39 = ((v36 - v35) & ((v36 - v35) >> 31)) + v35;
        if (v36 > v35)
          v35 = v36;
        v40 = ((v37 - v39) & ((v37 - v39) >> 31)) + v39;
        WORD1(v1005) = v40;
        if (v37 > v35)
          LOWORD(v35) = v37;
        WORD5(v1006) = v35;
        v45 = *v28;
        v41 = *v29;
        v42 = v41 + v45;
        DWORD2(v1013) = v41 + v45;
        v43 = (v41 - v45) & ((v41 - v45) >> 31);
        LOWORD(v44) = v45 + v43;
        WORD2(v1005) = v45 + v43;
        LOWORD(v45) = v41 - v43;
        WORD6(v1006) = v41 - v43;
        v46 = v27[1];
        v47 = v23[1];
        v48 = v30[1];
        v49 = v47 + v46 + v48;
        HIDWORD(v1013) = v49;
        v50 = ((v47 - v46) & ((v47 - v46) >> 31)) + v46;
        if (v47 > v46)
          v46 = v47;
        WORD3(v1005) = ((v48 - v50) & ((v48 - v50) >> 31)) + v50;
        if (v48 > v46)
          LOWORD(v46) = v48;
      }
      HIWORD(v1006) = v46;
      if ((unsigned __int16)v45 <= (int)(unsigned __int16)v35)
        v62 = (unsigned __int16)v35;
      else
        v62 = (unsigned __int16)v45;
      if ((v1002 & 1) != 0)
      {
        v97 = *(v27 - 2);
        v98 = *(v1003 - 2);
        v99 = *(v30 - 2);
        v100 = (float)((float)v97 - (float)v98) * *(float *)(v14 + 4 * (v98 + v97));
        v101 = (float)((float)v98 - (float)v99) * *(float *)(v14 + 4 * (v99 + v98));
        *(float *)&v1042 = (float)(v101 * v101) + (float)(v100 * v100);
        v102 = *(v28 - 1);
        v103 = *(v29 - 1);
        v104 = (float)((float)v102 - (float)v98) * *(float *)(v14 + 4 * (v102 + v98));
        v105 = (float)((float)v103 - (float)v99) * *(float *)(v14 + 4 * (v103 + v99));
        *(float *)&v1035 = (float)(v105 * v105) + (float)(v104 * v104);
        v106 = (float)((float)v102 - (float)v103) * *(float *)(v14 + 4 * (v103 + v102));
        *((float *)&v1042 + 1) = v106 * v106;
        v107 = (float)((float)v97 - (float)v102) * *(float *)(v14 + 4 * (v102 + v97));
        v108 = (float)((float)v98 - (float)v103) * *(float *)(v14 + 4 * (v103 + v98));
        *(float *)&v1050 = (float)(v108 * v108) + (float)(v107 * v107);
        v109 = *v27;
        v110 = *v1003;
        v111 = *v30;
        v112 = (float)((float)v109 - (float)v97) * *(float *)(v14 + 4 * (v109 + v97));
        v113 = (float)((float)v110 - (float)v98) * *(float *)(v14 + 4 * (v110 + v98));
        v114 = *(float *)(v14 + 4 * (v111 + v99));
        *((float *)&v1031 + 1) = (float)((float)(v113 * v113) + (float)(v112 * v112))
                               + (float)((float)((float)((float)v111 - (float)v99) * v114)
                                       * (float)((float)((float)v111 - (float)v99) * v114));
        v115 = (float)((float)v109 - (float)v102) * *(float *)(v14 + 4 * (v109 + v102));
        v116 = (float)((float)v110 - (float)v103) * *(float *)(v14 + 4 * (v110 + v103));
        *((float *)&v1035 + 1) = (float)(v116 * v116) + (float)(v115 * v115);
        v117 = (float)((float)v109 - (float)v110) * *(float *)(v14 + 4 * (v110 + v109));
        v118 = (float)((float)v110 - (float)v111) * *(float *)(v14 + 4 * (v111 + v110));
        *((float *)&v1042 + 2) = (float)(v118 * v118) + (float)(v117 * v117);
        v119 = (float)((float)v102 - (float)v110) * *(float *)(v14 + 4 * (v110 + v102));
        v120 = (float)((float)v103 - (float)v111) * *(float *)(v14 + 4 * (v111 + v103));
        *((float *)&v1050 + 1) = (float)(v120 * v120) + (float)(v119 * v119);
        v121 = v28[1];
        v122 = v29[1];
        v123 = (float)((float)v121 - (float)v102) * *(float *)(v14 + 4 * (v121 + v102));
        v124 = (float)((float)v122 - (float)v103) * *(float *)(v14 + 4 * (v122 + v103));
        *((float *)&v1031 + 2) = (float)(v124 * v124) + (float)(v123 * v123);
        v125 = (float)((float)v121 - (float)v110) * *(float *)(v14 + 4 * (v121 + v110));
        v126 = (float)((float)v122 - (float)v111) * *(float *)(v14 + 4 * (v122 + v111));
        v1036 = (float)(v126 * v126) + (float)(v125 * v125);
        v127 = (float)((float)v121 - (float)v122) * *(float *)(v14 + 4 * (v122 + v121));
        *((float *)&v1042 + 3) = v127 * v127;
        v94 = (float)((float)v109 - (float)v121) * *(float *)(v14 + 4 * (v121 + v109));
        v95 = (float)v110 - (float)v122;
        v96 = v122 + v110;
      }
      else
      {
        v63 = *(v28 - 2);
        v64 = *(v29 - 2);
        v65 = *(float *)(v14 + 4 * (v64 + v63)) * (float)((float)v64 - (float)v63);
        *(float *)&v1042 = v65 * v65;
        v66 = *(v27 - 1);
        v67 = *(v1003 - 1);
        v68 = *(v30 - 1);
        v69 = (float)((float)v66 - (float)v63) * *(float *)(v14 + 4 * (v66 + v63));
        v70 = (float)((float)v67 - (float)v64) * *(float *)(v14 + 4 * (v67 + v64));
        *(float *)&v1035 = (float)(v70 * v70) + (float)(v69 * v69);
        v71 = (float)((float)v67 - (float)v66) * *(float *)(v14 + 4 * (v67 + v66));
        v72 = (float)((float)v68 - (float)v67) * *(float *)(v14 + 4 * (v68 + v67));
        *((float *)&v1042 + 1) = (float)(v72 * v72) + (float)(v71 * v71);
        v73 = (float)((float)v67 - (float)v63) * *(float *)(v14 + 4 * (v67 + v63));
        v74 = (float)((float)v68 - (float)v64) * *(float *)(v14 + 4 * (v68 + v64));
        *(float *)&v1050 = (float)(v74 * v74) + (float)(v73 * v73);
        v75 = *v28;
        v76 = *v29;
        v77 = (float)((float)v75 - (float)v63) * *(float *)(v14 + 4 * (v75 + v63));
        v78 = (float)((float)v76 - (float)v64) * *(float *)(v14 + 4 * (v76 + v64));
        *((float *)&v1031 + 1) = (float)(v78 * v78) + (float)(v77 * v77);
        v79 = (float)((float)v75 - (float)v67) * *(float *)(v14 + 4 * (v75 + v67));
        v80 = (float)((float)v76 - (float)v68) * *(float *)(v14 + 4 * (v76 + v68));
        *((float *)&v1035 + 1) = (float)(v80 * v80) + (float)(v79 * v79);
        v81 = (float)((float)v76 - (float)v75) * *(float *)(v14 + 4 * (v76 + v75));
        *((float *)&v1042 + 2) = v81 * v81;
        v82 = (float)((float)v75 - (float)v66) * *(float *)(v14 + 4 * (v75 + v66));
        v83 = (float)((float)v76 - (float)v67) * *(float *)(v14 + 4 * (v76 + v67));
        *((float *)&v1050 + 1) = (float)(v83 * v83) + (float)(v82 * v82);
        v84 = v27[1];
        v85 = v1003[1];
        v86 = v30[1];
        v87 = (float)((float)v84 - (float)v66) * *(float *)(v14 + 4 * (v84 + v66));
        v88 = (float)((float)v85 - (float)v67) * *(float *)(v14 + 4 * (v85 + v67));
        v89 = *(float *)(v14 + 4 * (v86 + v68));
        *((float *)&v1031 + 2) = (float)((float)(v88 * v88) + (float)(v87 * v87))
                               + (float)((float)((float)((float)v86 - (float)v68) * v89)
                                       * (float)((float)((float)v86 - (float)v68) * v89));
        v90 = (float)((float)v84 - (float)v75) * *(float *)(v14 + 4 * (v84 + v75));
        v91 = (float)((float)v85 - (float)v76) * *(float *)(v14 + 4 * (v85 + v76));
        v1036 = (float)(v91 * v91) + (float)(v90 * v90);
        v92 = (float)((float)v85 - (float)v84) * *(float *)(v14 + 4 * (v85 + v84));
        v93 = *(float *)(v14 + 4 * (v86 + v85));
        *((float *)&v1042 + 3) = (float)((float)((float)((float)v86 - (float)v85) * v93)
                                       * (float)((float)((float)v86 - (float)v85) * v93))
                               + (float)(v92 * v92);
        v94 = (float)((float)v85 - (float)v75) * *(float *)(v14 + 4 * (v85 + v75));
        v95 = (float)v86 - (float)v76;
        v96 = v86 + v76;
      }
      v1051 = (float)((float)(v95 * *(float *)(v14 + 4 * v96)) * (float)(v95 * *(float *)(v14 + 4 * v96)))
            + (float)(v94 * v94);
      LOWORD(v1009) = (v26 & 1 ^ v973) + v969;
      WORD6(v1008) = v1009;
      WORD4(v1008) = v1009;
      WORD2(v1008) = v1009;
      WORD1(v1009) = v1009 ^ 2;
      HIWORD(v1008) = v1009 ^ 2;
      WORD5(v1008) = v1009 ^ 2;
      WORD3(v1008) = v1009 ^ 2;
      result = (v26 & 2) == 0;
      WORD5(v1010) = (v26 & 2) == 0;
      WORD2(v1010) = WORD5(v1010);
      WORD6(v1009) = WORD5(v1010);
      WORD4(v1010) = (v26 >> 1) & 1;
      WORD3(v1010) = WORD4(v1010);
      LODWORD(v1010) = DWORD2(v1010);
      HIWORD(v1009) = WORD4(v1010);
      if (v972)
      {
        if ((int)((v26 & 1 ^ v973) + v969) < 2)
        {
          WORD3(v1010) = (v26 & 2) == 0;
          HIWORD(v1009) = WORD3(v1010);
          WORD5(v1010) = (v26 >> 1) & 1;
          WORD1(v1010) = WORD5(v1010);
          v128 = (unsigned __int16)((v26 & 1 ^ v973) + v969);
          goto LABEL_399;
        }
        WORD2(v1010) = (v26 >> 1) & 1;
        WORD6(v1009) = WORD2(v1010);
        WORD4(v1010) = (v26 & 2) == 0;
        LOWORD(v1010) = WORD4(v1010);
      }
      v128 = (unsigned __int16)((v26 & 1 ^ v973) + v969);
      if (v128 > 3)
      {
LABEL_42:
        v977 = v24;
        v978 = v29;
        v976 = v26;
        if (v968 >= 4)
          goto LABEL_43;
        goto LABEL_407;
      }
LABEL_399:
      v919 = v128;
      v920 = (unsigned __int16 *)(v24 - 3 * v988);
      switch(v919)
      {
        case 0u:
          v921 = &v920[v987];
          v922 = &v920[v987 + v987];
          v923 = &v922[v987];
          v924 = *(v922 - 3);
          v925 = *(v920 - 3);
          v926 = (v924 - v925) & ((v924 - v925) >> 31);
          WORD4(v1014) = v925 + v926;
          LOWORD(v1016) = v924 - v926;
          v927 = v922[v987 - 1];
          v928 = v920[v987 - 1];
          v929 = (v927 - v928) & ((v927 - v928) >> 31);
          WORD5(v1014) = v928 + v929;
          WORD1(v1016) = v927 - v929;
          v930 = v922[1];
          v931 = v920[1];
          v932 = (v930 - v931) & ((v930 - v931) >> 31);
          WORD6(v1014) = v931 + v932;
          WORD2(v1016) = v930 - v932;
          v933 = v922[v987 - 3];
          v934 = v920[v987 - 3];
          LOWORD(v1019) = v934 + ((v933 - v934) & ((v933 - v934) >> 31));
          WORD4(v1020) = v933 - ((v933 - v934) & ((v933 - v934) >> 31));
          LODWORD(v922) = *(v922 - 1);
          v935 = *(v920 - 1);
          WORD1(v1019) = v935 + (((_WORD)v922 - v935) & (((int)v922 - v935) >> 31));
          WORD5(v1020) = (_WORD)v922 - (((_WORD)v922 - v935) & (((int)v922 - v935) >> 31));
          v936 = v923[1];
          v937 = v921[1];
          goto LABEL_403;
        case 1u:
          v938 = (char *)v920 + v988;
          v939 = &v938[v987 * 2];
          v940 = (uint64_t)&v938[v987 * 2 + v987 * 2];
          v941 = *(unsigned __int16 *)(v940 - 6);
          v942 = *((unsigned __int16 *)v938 - 3);
          v943 = (v941 - v942) & ((v941 - v942) >> 31);
          WORD4(v1014) = v942 + v943;
          LOWORD(v1016) = v941 - v943;
          WORD5(v1014) = *(_WORD *)&v938[v987 * 2 - 2];
          WORD1(v1016) = WORD5(v1014);
          v944 = *(unsigned __int16 *)(v940 + 2);
          v945 = *((unsigned __int16 *)v938 + 1);
          WORD6(v1014) = v945 + ((v944 - v945) & ((v944 - v945) >> 31));
          WORD2(v1016) = v944 - ((v944 - v945) & ((v944 - v945) >> 31));
          LOWORD(v1019) = *(_WORD *)&v938[v987 * 2 - 6];
          WORD4(v1020) = v1019;
          result = *(unsigned __int16 *)(v940 - 2);
          LODWORD(v938) = *((unsigned __int16 *)v938 - 1);
          WORD1(v1019) = (_WORD)v938 + ((result - (_WORD)v938) & (((int)result - (int)v938) >> 31));
          WORD5(v1020) = result - ((result - (_WORD)v938) & (((int)result - (int)v938) >> 31));
          v946 = *((_WORD *)v939 + 1);
          goto LABEL_405;
        case 2u:
          v947 = &v920[v987];
          v948 = &v920[v987 + v987];
          v949 = &v948[v987];
          v950 = *(v948 - 2);
          v951 = *(v920 - 2);
          v952 = (v950 - v951) & ((v950 - v951) >> 31);
          WORD4(v1014) = v951 + v952;
          LOWORD(v1016) = v950 - v952;
          v953 = v948[v988];
          v954 = v920[v988];
          v955 = (v953 - v954) & ((v953 - v954) >> 31);
          WORD5(v1014) = v954 + v955;
          WORD1(v1016) = v953 - v955;
          v956 = v948[2];
          v957 = v920[2];
          v958 = (v956 - v957) & ((v956 - v957) >> 31);
          WORD6(v1014) = v957 + v958;
          WORD2(v1016) = v956 - v958;
          v959 = v948[v987 - 2];
          v960 = v920[v987 - 2];
          LOWORD(v1019) = v960 + ((v959 - v960) & ((v959 - v960) >> 31));
          WORD4(v1020) = v959 - ((v959 - v960) & ((v959 - v960) >> 31));
          LODWORD(v948) = *v948;
          v961 = *v920;
          WORD1(v1019) = v961 + (((_WORD)v948 - v961) & (((int)v948 - v961) >> 31));
          WORD5(v1020) = (_WORD)v948 - (((_WORD)v948 - v961) & (((int)v948 - v961) >> 31));
          v936 = v949[2];
          v937 = v947[2];
LABEL_403:
          result = (v936 - v937) & ((v936 - v937) >> 31);
          WORD2(v1019) = v937 + ((v936 - v937) & ((v936 - v937) >> 31));
          v946 = v936 - ((v936 - v937) & ((v936 - v937) >> 31));
          break;
        case 3u:
          v962 = (unsigned __int16 *)((char *)v920 + v988);
          v963 = &v962[v987];
          v964 = &v962[v987 + v987];
          v965 = *(v964 - 2);
          v966 = *(v962 - 2);
          WORD4(v1014) = v966 + ((v965 - v966) & ((v965 - v966) >> 31));
          LOWORD(v1016) = v965 - ((v965 - v966) & ((v965 - v966) >> 31));
          WORD5(v1014) = v962[v988];
          WORD1(v1016) = WORD5(v1014);
          LODWORD(v964) = v964[2];
          v967 = v962[2];
          WORD6(v1014) = v967 + (((_WORD)v964 - v967) & (((int)v964 - v967) >> 31));
          WORD2(v1016) = (_WORD)v964 - (((_WORD)v964 - v967) & (((int)v964 - v967) >> 31));
          LOWORD(v1019) = v962[v987 - 2];
          WORD4(v1020) = v1019;
          result = v962[v988 + v988];
          LODWORD(v962) = *v962;
          WORD1(v1019) = (_WORD)v962 + ((result - (_WORD)v962) & (((int)result - (int)v962) >> 31));
          WORD5(v1020) = result - ((result - (_WORD)v962) & (((int)result - (int)v962) >> 31));
          v946 = v963[2];
LABEL_405:
          WORD2(v1019) = v946;
          break;
        default:
          goto LABEL_42;
      }
      WORD6(v1020) = v946;
      v977 = v24;
      v978 = v29;
      v976 = v26;
      if (v968 >= 4)
      {
LABEL_43:
        v999 = v62;
        v1000 = v38 + v49 + v33 + v42;
        v998 = (((unsigned __int16)v44 - (unsigned __int16)v40) & (((unsigned __int16)v44 - (unsigned __int16)v40) >> 31))
             + (unsigned __int16)v40;
        v129 = 1092;
        v130 = 12;
        v131 = v979;
        v132 = v980;
        v133 = 6;
        v134 = v978;
        while (1)
        {
          if ((((_BYTE)v133 - 3) & 7) == 3)
          {
            v136 = *(int16x4_t *)((char *)&v1006 + 8);
            v137 = (int16x4_t)v1005;
            *((_QWORD *)&v1005 + 1) = *((_QWORD *)&v1006 + 1);
            *(_QWORD *)&v1004 = v1005;
            v138 = v1013;
            v139 = DWORD1(v1013);
            v1011 = v1013;
            v140 = DWORD2(v1013);
            v141 = HIDWORD(v1013);
            if ((v1002 & 1) != 0)
            {
              v145 = v1001;
              v190 = v1001[2];
              v147 = v1003;
              v191 = v1003[2];
              v192 = v30[2];
              LODWORD(v1012) = v191 + v190 + v192;
              v193 = ((v191 - v190) & ((v191 - v190) >> 31)) + v190;
              if (v191 > v190)
                v190 = v191;
              WORD4(v1004) = ((v192 - v193) & ((v192 - v193) >> 31)) + v193;
              if (v192 > v190)
                LOWORD(v190) = v192;
              LOWORD(v1006) = v190;
              v194 = v28[3];
              v195 = v134[3];
              DWORD1(v1012) = v195 + v194;
              v196 = (v195 - v194) & ((v195 - v194) >> 31);
              WORD5(v1004) = v194 + v196;
              WORD1(v1006) = v195 - v196;
              v197 = v1001[4];
              v198 = v1003[4];
              v199 = v30[4];
              DWORD2(v1012) = v198 + v197 + v199;
              v200 = ((v198 - v197) & ((v198 - v197) >> 31)) + v197;
              if (v198 > v197)
                v197 = v198;
              WORD6(v1004) = ((v199 - v200) & ((v199 - v200) >> 31)) + v200;
              if (v199 > v197)
                LOWORD(v197) = v199;
              WORD2(v1006) = v197;
              v201 = v28[5];
              v202 = v134[5];
              HIDWORD(v1012) = v202 + v201;
              v203 = (v202 - v201) & ((v202 - v201) >> 31);
              HIWORD(v1004) = v201 + v203;
              WORD3(v1006) = v202 - v203;
              v204 = v1001[6];
              v205 = v1003[6];
              v206 = v30[6];
              LODWORD(v1013) = v205 + v204 + v206;
              v207 = ((v205 - v204) & ((v205 - v204) >> 31)) + v204;
              if (v205 > v204)
                v204 = v205;
              LOWORD(v1005) = ((v206 - v207) & ((v206 - v207) >> 31)) + v207;
              if (v206 > v204)
                LOWORD(v204) = v206;
              WORD4(v1006) = v204;
              v208 = v28[7];
              v209 = v134[7];
              v210 = v209 + v208;
              DWORD1(v1013) = v209 + v208;
              v211 = (v209 - v208) & ((v209 - v208) >> 31);
              WORD1(v1005) = v208 + v211;
              WORD5(v1006) = v209 - v211;
              v172 = v1001[8];
              v212 = v1003[8];
              v175 = v30;
              v213 = v30[8];
              v214 = v212 + v172 + v213;
              DWORD2(v1013) = v214;
              v215 = ((v212 - v172) & ((v212 - v172) >> 31)) + v172;
              if (v212 > v172)
                v172 = v212;
              WORD2(v1005) = ((v213 - v215) & ((v213 - v215) >> 31)) + v215;
              if (v213 > v172)
                LOWORD(v172) = v213;
              WORD6(v1006) = v172;
              v167 = v28;
              v216 = v28[9];
              v168 = v134;
              v173 = v134[9];
              v217 = v173 + v216;
              HIDWORD(v1013) = v173 + v216;
              v218 = (v173 - v216) & ((v173 - v216) >> 31);
              if (v173 <= v216)
                v173 = v216;
              WORD3(v1005) = v216 + v218;
              HIWORD(v1006) = v173;
              v219 = v1012 + v1000;
              v220 = v1012 + v1000 - v138 + DWORD1(v1012);
              v221 = v220 - v139 + DWORD2(v1012);
              v222 = v221 - v140 + HIDWORD(v1012);
              v223.i32[0] = v222 - v141 + v1013;
              v223.i32[1] = v223.i32[0] - v1012 + v210;
              v223.i32[2] = v223.i32[1] - DWORD1(v1012) + v214;
              v1000 = v223.i32[2] - DWORD2(v1012) + v217 - HIDWORD(v1012);
              v223.i32[3] = v223.i32[2] - DWORD2(v1012) + v217;
              v224.i64[0] = __PAIR64__(v220, v219);
              v224.i64[1] = __PAIR64__(v222, v221);
              v225 = vmulq_s32(v223, (int32x4_t)xmmword_1D544D910);
              v226 = vmulq_s32(v224, (int32x4_t)xmmword_1D544D910);
              *(int16x8_t *)((char *)&v1007[1] + 12) = vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(vaddq_s32(v226, (int32x4_t)xmmword_1D544D930), vshlq_s32(v226, (int32x4_t)xmmword_1D544D920)), 0xCuLL), vaddq_s32(vaddq_s32(v225, (int32x4_t)xmmword_1D544D930), vshlq_s32(v225, (int32x4_t)xmmword_1D544D920)), 0xCuLL);
            }
            else
            {
              v142 = v28[2];
              v143 = v134[2];
              LODWORD(v1012) = v143 + v142;
              v144 = (v143 - v142) & ((v143 - v142) >> 31);
              WORD4(v1004) = v142 + v144;
              LOWORD(v1006) = v143 - v144;
              v145 = v1001;
              v146 = v1001[3];
              v147 = v1003;
              v148 = v1003[3];
              v149 = v30[3];
              DWORD1(v1012) = v148 + v146 + v149;
              v150 = ((v148 - v146) & ((v148 - v146) >> 31)) + v146;
              if (v148 > v146)
                v146 = v148;
              WORD5(v1004) = ((v149 - v150) & ((v149 - v150) >> 31)) + v150;
              if (v149 > v146)
                LOWORD(v146) = v149;
              WORD1(v1006) = v146;
              v151 = v28[4];
              v152 = v134[4];
              DWORD2(v1012) = v152 + v151;
              v153 = (v152 - v151) & ((v152 - v151) >> 31);
              WORD6(v1004) = v151 + v153;
              WORD2(v1006) = v152 - v153;
              v154 = v1001[5];
              v155 = v1003[5];
              v156 = v30[5];
              HIDWORD(v1012) = v155 + v154 + v156;
              v157 = ((v155 - v154) & ((v155 - v154) >> 31)) + v154;
              if (v155 > v154)
                v154 = v155;
              HIWORD(v1004) = ((v156 - v157) & ((v156 - v157) >> 31)) + v157;
              if (v156 > v154)
                LOWORD(v154) = v156;
              WORD3(v1006) = v154;
              v158 = v28[6];
              v159 = v134[6];
              LODWORD(v1013) = v159 + v158;
              v160 = (v159 - v158) & ((v159 - v158) >> 31);
              LOWORD(v1005) = v158 + v160;
              WORD4(v1006) = v159 - v160;
              v161 = v1001[7];
              v162 = v1003[7];
              v163 = v30[7];
              v164 = v162 + v161 + v163;
              DWORD1(v1013) = v164;
              v165 = ((v162 - v161) & ((v162 - v161) >> 31)) + v161;
              if (v162 > v161)
                v161 = v162;
              WORD1(v1005) = ((v163 - v165) & ((v163 - v165) >> 31)) + v165;
              if (v163 > v161)
                LOWORD(v161) = v163;
              WORD5(v1006) = v161;
              v166 = v30;
              v167 = v28;
              v172 = v28[8];
              v168 = v134;
              v169 = v134[8];
              v170 = v169 + v172;
              DWORD2(v1013) = v169 + v172;
              v171 = (v169 - v172) & ((v169 - v172) >> 31);
              WORD2(v1005) = v172 + v171;
              LOWORD(v172) = v169 - v171;
              WORD6(v1006) = v169 - v171;
              v173 = v1001[9];
              v174 = v1003[9];
              v175 = v166;
              v176 = v166[9];
              v177 = v174 + v173 + v176;
              HIDWORD(v1013) = v177;
              v178 = ((v174 - v173) & ((v174 - v173) >> 31)) + v173;
              if (v174 > v173)
                v173 = v174;
              WORD3(v1005) = ((v176 - v178) & ((v176 - v178) >> 31)) + v178;
              if (v176 > v173)
                v173 = v176;
              v179 = v1012 + v1000 - v138 + DWORD1(v1012);
              v180 = v179 - v139 + DWORD2(v1012);
              v181 = v180 - v140 + HIDWORD(v1012);
              v182 = v181 - v141 + v1013;
              v183 = v182 - v1012 + v164;
              v184 = v183 - DWORD1(v1012) + v170;
              v185 = v184 - DWORD2(v1012) + v177;
              v186.i64[0] = __PAIR64__(v183, v182);
              v186.i64[1] = __PAIR64__(v185, v184);
              HIWORD(v1006) = v173;
              v187.i32[0] = v1012 + v1000;
              v187.i32[1] = v179;
              v187.i64[1] = __PAIR64__(v181, v180);
              v1000 = v185 - HIDWORD(v1012);
              v188 = vmulq_s32(v186, (int32x4_t)xmmword_1D544D940);
              v189 = vmulq_s32(v187, (int32x4_t)xmmword_1D544D940);
              *(int16x8_t *)((char *)&v1007[1] + 12) = vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(vaddq_s32(v189, (int32x4_t)xmmword_1D544D960), vshlq_s32(v189, (int32x4_t)xmmword_1D544D950)), 0xCuLL), vaddq_s32(vaddq_s32(v188, (int32x4_t)xmmword_1D544D960), vshlq_s32(v188, (int32x4_t)xmmword_1D544D950)), 0xCuLL);
            }
            v227.i16[0] = v1006;
            v228 = v136.u16[0];
            v229.i16[0] = WORD4(v1004);
            v230 = v137.u16[0];
            v231 = v136.u16[2];
            v232 = v137.u16[2];
            v233.i16[0] = vdup_lane_s16(v136, 3).u16[0];
            v233.i16[1] = WORD1(v1006);
            v233.i16[2] = WORD3(v1006);
            v233.i16[3] = WORD5(v1006);
            v234.i16[0] = vdup_lane_s16(v137, 3).u16[0];
            v234.i16[1] = *(_WORD *)((unint64_t)&v1004 | 0xA);
            v235 = (int32x4_t)vmovl_u16(v233);
            v234.i16[2] = *(_WORD *)((unint64_t)&v1004 | 0xE);
            v234.i16[3] = WORD1(v1005);
            v236 = (int8x16_t)vmovl_u16(v234);
            v227.i16[1] = WORD2(v1006);
            v227.i16[2] = WORD4(v1006);
            v227.i16[3] = v172;
            v237 = (int32x4_t)vmovl_u16(v227);
            v238 = vmaxq_s32(v237, v235);
            v229.i16[1] = *(_WORD *)((unint64_t)&v1004 | 0xC);
            v229.i16[2] = v1005;
            v229.i16[3] = WORD2(v1005);
            v239 = (int32x4_t)vmovl_u16(v229);
            v240 = (int32x4_t)vaddw_u16((uint32x4_t)vminq_s32((int32x4_t)vsubl_u16(v229, v234), (int32x4_t)0), v234);
            v241 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v238, 0xCuLL);
            v241.i32[0] = v999;
            v242 = vmaxq_s32(v238, v241);
            v243 = (int32x4_t)vextq_s8((int8x16_t)0, (int8x16_t)v240, 0xCuLL);
            v243.i32[0] = v998;
            v244 = vaddq_s32(vminq_s32(vsubq_s32(v240, v243), (int32x4_t)0), v243);
            v245 = vzip2q_s32(v244, v244);
            v246.i64[0] = __PAIR64__(v235.u32[1], v228);
            v246.i64[1] = __PAIR64__(v235.u32[2], v231);
            v247 = vzip1q_s32(v237, (int32x4_t)vextq_s8((int8x16_t)v235, (int8x16_t)v235, 0xCuLL));
            v247.i32[3] = v173;
            v248 = vzip1q_s32(v244, v244);
            v249.i64[0] = __PAIR64__(v236.u32[1], v230);
            v249.i64[1] = __PAIR64__(v236.u32[2], v232);
            v250 = vzip1q_s32(v239, (int32x4_t)vextq_s8(v236, v236, 0xCuLL));
            v250.i32[3] = WORD3(v1005);
            *(int16x8_t *)((char *)v1007 + 4) = vuzp1q_s16((int16x8_t)vsubq_s32(vmaxq_s32(v246, vzip1q_s32(v242, v242)), vaddq_s32(v248, vminq_s32(vsubq_s32(v249, v248), (int32x4_t)0))), (int16x8_t)vsubq_s32(vmaxq_s32(v247, vzip2q_s32(v242, v242)), vaddq_s32(v245, vminq_s32(vsubq_s32(v250, v245), (int32x4_t)0))));
            *(_QWORD *)((char *)&v1029 + 4) = *(_QWORD *)((char *)&v1031 + 4);
            *(_QWORD *)((char *)&v1032 + 4) = v1035;
            *((float *)&v1032 + 3) = v1036;
            v1037 = v1042;
            v1043 = v1050;
            v1044 = v1051;
            v251 = v167;
            if ((v1002 & 1) != 0)
            {
              v256 = v175;
              v343 = v251[1];
              v253 = v168;
              v344 = v168[1];
              v345 = v145[2];
              v346 = v147[2];
              v347 = v175[2];
              v348 = (float)((float)v345 - (float)*v145) * *(float *)(v14 + 4 * (v345 + *v145));
              v349 = (float)((float)v346 - (float)*v147) * *(float *)(v14 + 4 * (v346 + *v147));
              v350 = (float)((float)v347 - (float)*v175) * *(float *)(v14 + 4 * (v347 + *v175));
              *((float *)&v1029 + 3) = (float)((float)(v349 * v349) + (float)(v348 * v348)) + (float)(v350 * v350);
              v351 = (float)((float)v345 - (float)v343) * *(float *)(v14 + 4 * (v345 + v343));
              v352 = (float)((float)v346 - (float)v344) * *(float *)(v14 + 4 * (v346 + v344));
              *(float *)&v1033 = (float)(v352 * v352) + (float)(v351 * v351);
              v353 = (float)((float)v345 - (float)v346) * *(float *)(v14 + 4 * (v346 + v345));
              v354 = (float)((float)v346 - (float)v347) * *(float *)(v14 + 4 * (v347 + v346));
              v1038 = (float)(v354 * v354) + (float)(v353 * v353);
              v355 = (float)((float)v343 - (float)v346) * *(float *)(v14 + 4 * (v346 + v343));
              v356 = (float)((float)v344 - (float)v347) * *(float *)(v14 + 4 * (v347 + v344));
              v1045 = (float)(v356 * v356) + (float)(v355 * v355);
              v357 = v251[3];
              v358 = v168[3];
              v359 = (float)((float)v357 - (float)v343) * *(float *)(v14 + 4 * (v357 + v343));
              v360 = (float)((float)v358 - (float)v344) * *(float *)(v14 + 4 * (v358 + v344));
              *(float *)&v1030 = (float)(v360 * v360) + (float)(v359 * v359);
              v361 = (float)((float)v357 - (float)v346) * *(float *)(v14 + 4 * (v357 + v346));
              v362 = (float)((float)v358 - (float)v347) * *(float *)(v14 + 4 * (v358 + v347));
              *((float *)&v1033 + 1) = (float)(v362 * v362) + (float)(v361 * v361);
              v363 = (float)((float)v357 - (float)v358) * *(float *)(v14 + 4 * (v358 + v357));
              v1039 = v363 * v363;
              v364 = (float)((float)v345 - (float)v357) * *(float *)(v14 + 4 * (v357 + v345));
              v365 = (float)((float)v346 - (float)v358) * *(float *)(v14 + 4 * (v358 + v346));
              v1046 = (float)(v365 * v365) + (float)(v364 * v364);
              v366 = v145[4];
              v367 = v147[4];
              v368 = v175[4];
              v369 = (float)((float)v366 - (float)v345) * *(float *)(v14 + 4 * (v366 + v345));
              v370 = (float)((float)v367 - (float)v346) * *(float *)(v14 + 4 * (v367 + v346));
              v371 = (float)((float)v368 - (float)v347) * *(float *)(v14 + 4 * (v368 + v347));
              *((float *)&v1030 + 1) = (float)((float)(v370 * v370) + (float)(v369 * v369)) + (float)(v371 * v371);
              v372 = (float)((float)v366 - (float)v357) * *(float *)(v14 + 4 * (v366 + v357));
              v373 = (float)((float)v367 - (float)v358) * *(float *)(v14 + 4 * (v367 + v358));
              *((float *)&v1033 + 2) = (float)(v373 * v373) + (float)(v372 * v372);
              v374 = (float)((float)v366 - (float)v367) * *(float *)(v14 + 4 * (v367 + v366));
              v375 = (float)((float)v367 - (float)v368) * *(float *)(v14 + 4 * (v368 + v367));
              v1040 = (float)(v375 * v375) + (float)(v374 * v374);
              v376 = (float)((float)v357 - (float)v367) * *(float *)(v14 + 4 * (v367 + v357));
              v377 = (float)((float)v358 - (float)v368) * *(float *)(v14 + 4 * (v368 + v358));
              v1047 = (float)(v377 * v377) + (float)(v376 * v376);
              v378 = v251[5];
              v379 = v168[5];
              v380 = (float)((float)v378 - (float)v357) * *(float *)(v14 + 4 * (v378 + v357));
              v381 = (float)((float)v379 - (float)v358) * *(float *)(v14 + 4 * (v379 + v358));
              *((float *)&v1030 + 2) = (float)(v381 * v381) + (float)(v380 * v380);
              v382 = (float)((float)v378 - (float)v367) * *(float *)(v14 + 4 * (v378 + v367));
              v383 = (float)((float)v379 - (float)v368) * *(float *)(v14 + 4 * (v379 + v368));
              *((float *)&v1033 + 3) = (float)(v383 * v383) + (float)(v382 * v382);
              v384 = (float)((float)v378 - (float)v379) * *(float *)(v14 + 4 * (v379 + v378));
              v1041 = v384 * v384;
              v385 = (float)((float)v366 - (float)v378) * *(float *)(v14 + 4 * (v378 + v366));
              v386 = (float)((float)v367 - (float)v379) * *(float *)(v14 + 4 * (v379 + v367));
              v1048 = (float)(v386 * v386) + (float)(v385 * v385);
              v387 = v145[6];
              v388 = v147[6];
              v389 = v175[6];
              v390 = (float)((float)v387 - (float)v366) * *(float *)(v14 + 4 * (v387 + v366));
              v391 = (float)((float)v388 - (float)v367) * *(float *)(v14 + 4 * (v388 + v367));
              v392 = (float)((float)v389 - (float)v368) * *(float *)(v14 + 4 * (v389 + v368));
              *((float *)&v1030 + 3) = (float)((float)(v391 * v391) + (float)(v390 * v390)) + (float)(v392 * v392);
              v393 = (float)((float)v387 - (float)v378) * *(float *)(v14 + 4 * (v387 + v378));
              v394 = (float)((float)v388 - (float)v379) * *(float *)(v14 + 4 * (v388 + v379));
              v1034 = (float)(v394 * v394) + (float)(v393 * v393);
              v395 = (float)((float)v387 - (float)v388) * *(float *)(v14 + 4 * (v388 + v387));
              v396 = (float)((float)v388 - (float)v389) * *(float *)(v14 + 4 * (v389 + v388));
              *(float *)&v1042 = (float)(v396 * v396) + (float)(v395 * v395);
              v397 = (float)((float)v378 - (float)v388) * *(float *)(v14 + 4 * (v388 + v378));
              v398 = (float)((float)v379 - (float)v389) * *(float *)(v14 + 4 * (v389 + v379));
              v1049 = (float)(v398 * v398) + (float)(v397 * v397);
              v399 = v251[7];
              v400 = v168[7];
              v401 = (float)((float)v399 - (float)v378) * *(float *)(v14 + 4 * (v399 + v378));
              v402 = (float)((float)v400 - (float)v379) * *(float *)(v14 + 4 * (v400 + v379));
              *(float *)&v1031 = (float)(v402 * v402) + (float)(v401 * v401);
              v403 = (float)((float)v399 - (float)v388) * *(float *)(v14 + 4 * (v399 + v388));
              v404 = (float)((float)v400 - (float)v389) * *(float *)(v14 + 4 * (v400 + v389));
              *(float *)&v1035 = (float)(v404 * v404) + (float)(v403 * v403);
              v405 = (float)((float)v399 - (float)v400) * *(float *)(v14 + 4 * (v400 + v399));
              *((float *)&v1042 + 1) = v405 * v405;
              v406 = (float)((float)v387 - (float)v399) * *(float *)(v14 + 4 * (v399 + v387));
              v407 = (float)((float)v388 - (float)v400) * *(float *)(v14 + 4 * (v400 + v388));
              *(float *)&v1050 = (float)(v407 * v407) + (float)(v406 * v406);
              v408 = v145[8];
              v409 = v147[8];
              v410 = v175[8];
              v411 = (float)((float)v408 - (float)v387) * *(float *)(v14 + 4 * (v408 + v387));
              v412 = (float)((float)v409 - (float)v388) * *(float *)(v14 + 4 * (v409 + v388));
              v413 = *(float *)(v14 + 4 * (v410 + v389));
              *((float *)&v1031 + 1) = (float)((float)(v412 * v412) + (float)(v411 * v411))
                                     + (float)((float)((float)((float)v410 - (float)v389) * v413)
                                             * (float)((float)((float)v410 - (float)v389) * v413));
              v414 = (float)((float)v408 - (float)v399) * *(float *)(v14 + 4 * (v408 + v399));
              v415 = (float)((float)v409 - (float)v400) * *(float *)(v14 + 4 * (v409 + v400));
              *((float *)&v1035 + 1) = (float)(v415 * v415) + (float)(v414 * v414);
              v416 = (float)((float)v408 - (float)v409) * *(float *)(v14 + 4 * (v409 + v408));
              v417 = (float)((float)v409 - (float)v410) * *(float *)(v14 + 4 * (v410 + v409));
              *((float *)&v1042 + 2) = (float)(v417 * v417) + (float)(v416 * v416);
              v418 = (float)((float)v399 - (float)v409) * *(float *)(v14 + 4 * (v409 + v399));
              v419 = (float)((float)v400 - (float)v410) * *(float *)(v14 + 4 * (v410 + v400));
              *((float *)&v1050 + 1) = (float)(v419 * v419) + (float)(v418 * v418);
              v420 = v251[9];
              v421 = v168[9];
              v422 = (float)((float)v420 - (float)v399) * *(float *)(v14 + 4 * (v420 + v399));
              v423 = (float)((float)v421 - (float)v400) * *(float *)(v14 + 4 * (v421 + v400));
              *((float *)&v1031 + 2) = (float)(v423 * v423) + (float)(v422 * v422);
              v424 = (float)((float)v420 - (float)v409) * *(float *)(v14 + 4 * (v420 + v409));
              v425 = (float)((float)v421 - (float)v410) * *(float *)(v14 + 4 * (v421 + v410));
              v1036 = (float)(v425 * v425) + (float)(v424 * v424);
              v426 = *(float *)(v14 + 4 * (v421 + v420));
              *((float *)&v1042 + 3) = (float)((float)((float)v420 - (float)v421) * v426)
                                     * (float)((float)((float)v420 - (float)v421) * v426);
              v340 = (float)((float)v408 - (float)v420) * *(float *)(v14 + 4 * (v420 + v408));
              v341 = (float)v409 - (float)v421;
              v342 = v421 + v409;
            }
            else
            {
              v252 = *v167;
              v253 = v168;
              v254 = v145[1];
              v255 = v147[1];
              v256 = v175;
              v257 = v175[1];
              v258 = v251[2];
              v259 = v168[2];
              v260 = (float)((float)v258 - (float)v252) * *(float *)(v14 + 4 * (v258 + v252));
              v261 = (float)((float)v259 - (float)*v168) * *(float *)(v14 + 4 * (v259 + *v168));
              *((float *)&v1029 + 3) = (float)(v261 * v261) + (float)(v260 * v260);
              v262 = (float)((float)v258 - (float)v255) * *(float *)(v14 + 4 * (v258 + v255));
              v263 = (float)((float)v259 - (float)v257) * *(float *)(v14 + 4 * (v259 + v257));
              *(float *)&v1033 = (float)(v263 * v263) + (float)(v262 * v262);
              v264 = (float)((float)v259 - (float)v258) * *(float *)(v14 + 4 * (v259 + v258));
              v1038 = v264 * v264;
              v265 = (float)((float)v258 - (float)v254) * *(float *)(v14 + 4 * (v258 + v254));
              v266 = (float)((float)v259 - (float)v255) * *(float *)(v14 + 4 * (v259 + v255));
              v1045 = (float)(v266 * v266) + (float)(v265 * v265);
              v267 = v145[3];
              v268 = v147[3];
              v269 = v175[3];
              v270 = (float)((float)v267 - (float)v254) * *(float *)(v14 + 4 * (v267 + v254));
              v271 = (float)((float)v268 - (float)v255) * *(float *)(v14 + 4 * (v268 + v255));
              v272 = (float)((float)v269 - (float)v257) * *(float *)(v14 + 4 * (v269 + v257));
              *(float *)&v1030 = (float)((float)(v271 * v271) + (float)(v270 * v270)) + (float)(v272 * v272);
              v273 = (float)((float)v267 - (float)v258) * *(float *)(v14 + 4 * (v267 + v258));
              v274 = (float)((float)v268 - (float)v259) * *(float *)(v14 + 4 * (v268 + v259));
              *((float *)&v1033 + 1) = (float)(v274 * v274) + (float)(v273 * v273);
              v275 = (float)((float)v268 - (float)v267) * *(float *)(v14 + 4 * (v268 + v267));
              v276 = (float)((float)v269 - (float)v268) * *(float *)(v14 + 4 * (v269 + v268));
              v1039 = (float)(v276 * v276) + (float)(v275 * v275);
              v277 = (float)((float)v268 - (float)v258) * *(float *)(v14 + 4 * (v268 + v258));
              v278 = (float)((float)v269 - (float)v259) * *(float *)(v14 + 4 * (v269 + v259));
              v1046 = (float)(v278 * v278) + (float)(v277 * v277);
              v279 = v251[4];
              v280 = v168[4];
              v281 = (float)((float)v279 - (float)v258) * *(float *)(v14 + 4 * (v279 + v258));
              v282 = (float)((float)v280 - (float)v259) * *(float *)(v14 + 4 * (v280 + v259));
              *((float *)&v1030 + 1) = (float)(v282 * v282) + (float)(v281 * v281);
              v283 = (float)((float)v279 - (float)v268) * *(float *)(v14 + 4 * (v279 + v268));
              v284 = (float)((float)v280 - (float)v269) * *(float *)(v14 + 4 * (v280 + v269));
              *((float *)&v1033 + 2) = (float)(v284 * v284) + (float)(v283 * v283);
              v285 = (float)((float)v280 - (float)v279) * *(float *)(v14 + 4 * (v280 + v279));
              v1040 = v285 * v285;
              v286 = (float)((float)v279 - (float)v267) * *(float *)(v14 + 4 * (v279 + v267));
              v287 = (float)((float)v280 - (float)v268) * *(float *)(v14 + 4 * (v280 + v268));
              v1047 = (float)(v287 * v287) + (float)(v286 * v286);
              v288 = v145[5];
              v289 = v147[5];
              v290 = v175[5];
              v291 = (float)((float)v288 - (float)v267) * *(float *)(v14 + 4 * (v288 + v267));
              v292 = (float)((float)v289 - (float)v268) * *(float *)(v14 + 4 * (v289 + v268));
              v293 = (float)((float)v290 - (float)v269) * *(float *)(v14 + 4 * (v290 + v269));
              *((float *)&v1030 + 2) = (float)((float)(v292 * v292) + (float)(v291 * v291)) + (float)(v293 * v293);
              v294 = (float)((float)v288 - (float)v279) * *(float *)(v14 + 4 * (v288 + v279));
              v295 = (float)((float)v289 - (float)v280) * *(float *)(v14 + 4 * (v289 + v280));
              *((float *)&v1033 + 3) = (float)(v295 * v295) + (float)(v294 * v294);
              v296 = (float)((float)v289 - (float)v288) * *(float *)(v14 + 4 * (v289 + v288));
              v297 = (float)((float)v290 - (float)v289) * *(float *)(v14 + 4 * (v290 + v289));
              v1041 = (float)(v297 * v297) + (float)(v296 * v296);
              v298 = (float)((float)v289 - (float)v279) * *(float *)(v14 + 4 * (v289 + v279));
              v299 = (float)((float)v290 - (float)v280) * *(float *)(v14 + 4 * (v290 + v280));
              v1048 = (float)(v299 * v299) + (float)(v298 * v298);
              v300 = v251[6];
              v301 = v168[6];
              v302 = (float)((float)v300 - (float)v279) * *(float *)(v14 + 4 * (v300 + v279));
              v303 = (float)((float)v301 - (float)v280) * *(float *)(v14 + 4 * (v301 + v280));
              *((float *)&v1030 + 3) = (float)(v303 * v303) + (float)(v302 * v302);
              v304 = (float)((float)v300 - (float)v289) * *(float *)(v14 + 4 * (v300 + v289));
              v305 = (float)((float)v301 - (float)v290) * *(float *)(v14 + 4 * (v301 + v290));
              v1034 = (float)(v305 * v305) + (float)(v304 * v304);
              v306 = (float)((float)v301 - (float)v300) * *(float *)(v14 + 4 * (v301 + v300));
              *(float *)&v1042 = v306 * v306;
              v307 = (float)((float)v300 - (float)v288) * *(float *)(v14 + 4 * (v300 + v288));
              v308 = (float)((float)v301 - (float)v289) * *(float *)(v14 + 4 * (v301 + v289));
              v1049 = (float)(v308 * v308) + (float)(v307 * v307);
              v309 = v145[7];
              v310 = v147[7];
              v311 = v175[7];
              v312 = (float)((float)v309 - (float)v288) * *(float *)(v14 + 4 * (v309 + v288));
              v313 = (float)((float)v310 - (float)v289) * *(float *)(v14 + 4 * (v310 + v289));
              v314 = (float)((float)v311 - (float)v290) * *(float *)(v14 + 4 * (v311 + v290));
              *(float *)&v1031 = (float)((float)(v313 * v313) + (float)(v312 * v312)) + (float)(v314 * v314);
              v315 = (float)((float)v309 - (float)v300) * *(float *)(v14 + 4 * (v309 + v300));
              v316 = (float)((float)v310 - (float)v301) * *(float *)(v14 + 4 * (v310 + v301));
              *(float *)&v1035 = (float)(v316 * v316) + (float)(v315 * v315);
              v317 = (float)((float)v310 - (float)v309) * *(float *)(v14 + 4 * (v310 + v309));
              v318 = (float)((float)v311 - (float)v310) * *(float *)(v14 + 4 * (v311 + v310));
              *((float *)&v1042 + 1) = (float)(v318 * v318) + (float)(v317 * v317);
              v319 = (float)((float)v310 - (float)v300) * *(float *)(v14 + 4 * (v310 + v300));
              v320 = (float)((float)v311 - (float)v301) * *(float *)(v14 + 4 * (v311 + v301));
              *(float *)&v1050 = (float)(v320 * v320) + (float)(v319 * v319);
              v321 = v251[8];
              v322 = v168[8];
              v323 = (float)((float)v321 - (float)v300) * *(float *)(v14 + 4 * (v321 + v300));
              v324 = (float)((float)v322 - (float)v301) * *(float *)(v14 + 4 * (v322 + v301));
              *((float *)&v1031 + 1) = (float)(v324 * v324) + (float)(v323 * v323);
              v325 = (float)((float)v321 - (float)v310) * *(float *)(v14 + 4 * (v321 + v310));
              v326 = (float)((float)v322 - (float)v311) * *(float *)(v14 + 4 * (v322 + v311));
              *((float *)&v1035 + 1) = (float)(v326 * v326) + (float)(v325 * v325);
              v327 = (float)((float)v322 - (float)v321) * *(float *)(v14 + 4 * (v322 + v321));
              *((float *)&v1042 + 2) = v327 * v327;
              v328 = (float)((float)v321 - (float)v309) * *(float *)(v14 + 4 * (v321 + v309));
              v329 = (float)((float)v322 - (float)v310) * *(float *)(v14 + 4 * (v322 + v310));
              *((float *)&v1050 + 1) = (float)(v329 * v329) + (float)(v328 * v328);
              v330 = v145[9];
              v331 = v147[9];
              v332 = v175[9];
              v333 = (float)((float)v330 - (float)v309) * *(float *)(v14 + 4 * (v330 + v309));
              v334 = (float)((float)v331 - (float)v310) * *(float *)(v14 + 4 * (v331 + v310));
              v335 = *(float *)(v14 + 4 * (v332 + v311));
              *((float *)&v1031 + 2) = (float)((float)(v334 * v334) + (float)(v333 * v333))
                                     + (float)((float)((float)((float)v332 - (float)v311) * v335)
                                             * (float)((float)((float)v332 - (float)v311) * v335));
              v336 = (float)((float)v330 - (float)v321) * *(float *)(v14 + 4 * (v330 + v321));
              v337 = (float)((float)v331 - (float)v322) * *(float *)(v14 + 4 * (v331 + v322));
              v1036 = (float)(v337 * v337) + (float)(v336 * v336);
              v338 = (float)((float)v331 - (float)v330) * *(float *)(v14 + 4 * (v331 + v330));
              v339 = *(float *)(v14 + 4 * (v332 + v331));
              *((float *)&v1042 + 3) = (float)((float)((float)((float)v332 - (float)v331) * v339)
                                             * (float)((float)((float)v332 - (float)v331) * v339))
                                     + (float)(v338 * v338);
              v340 = (float)((float)v331 - (float)v321) * *(float *)(v14 + 4 * (v331 + v321));
              v341 = (float)v332 - (float)v322;
              v342 = v332 + v322;
            }
            v1051 = (float)((float)(v341 * *(float *)(v14 + 4 * v342)) * (float)(v341 * *(float *)(v14 + 4 * v342)))
                  + (float)(v340 * v340);
            v1001 = v145 + 8;
            v28 = v251 + 8;
            v1003 = v147 + 8;
            v427 = WORD4(v1014);
            v134 = v253 + 8;
            v30 = v256 + 8;
            LODWORD(v1014) = DWORD2(v1014);
            v428 = (unsigned __int16)v1016;
            DWORD2(v1015) = v1016;
            v429 = WORD5(v1014);
            v430 = WORD1(v1016);
            v431 = WORD6(v1014);
            WORD2(v1014) = WORD6(v1014);
            v432 = WORD2(v1016);
            WORD6(v1015) = WORD2(v1016);
            DWORD2(v1018) = v1019;
            LODWORD(v1020) = DWORD2(v1020);
            result = WORD1(v1019);
            v433 = WORD2(v1019);
            WORD6(v1018) = WORD2(v1019);
            v434 = WORD6(v1020);
            WORD2(v1020) = WORD6(v1020);
            v999 = v238.i32[3];
            v9 = v995;
            v11 = v996;
            v998 = v240.i32[3];
            v989 = WORD5(v1020);
            v990 = WORD4(v1020);
            v991 = WORD1(v1019);
            v992 = (unsigned __int16)v1019;
            v993 = v134;
            v994 = v28;
            switch(WORD2(v1008))
            {
              case 0:
                v435 = &v132[v985];
                v436 = &v132[v987];
                v437 = &v132[v983];
                v438 = v132[v983 + 2] + v132[v987 + 2];
                v981 = v30;
                v439 = v132[v985 + 4] + v132[4];
                v440 = v132[v987 + 6];
                v441 = v132[v983 + 6];
                DWORD2(v1023) = v438 + v132[2 * v988] + *v132 + v439 + v441 + v440;
                HIDWORD(v1026) = v438 + v439 + v441 + v440;
                LODWORD(v1027) = HIDWORD(v1026) + v132[8] + v132[v985 + 8];
                DWORD1(v1024) = v1027 - v438;
                DWORD2(v1024) = v1027 - v438 + v132[v987 + 10] + v132[v983 + 10];
                HIDWORD(v1027) = DWORD2(v1024) - v439;
                LODWORD(v1028) = DWORD2(v1024) - v439 + v132[12] + v132[v985 + 12];
                DWORD1(v1025) = v1028 - (v441 + v440);
                v442 = (v441 - v440) & ((v441 - v440) >> 31);
                LOWORD(v443) = v440 + v442;
                WORD3(v1014) = v440 + v442;
                HIWORD(v1015) = v441 - v442;
                v444 = v132[v985 + 8];
                v445 = v132[8];
                v447 = (v444 - v445) & ((v444 - v445) >> 31);
                v446 = v445 + v447;
                WORD4(v1014) = v446;
                LOWORD(v447) = v444 - v447;
                LOWORD(v1016) = v447;
                v448 = v132[v983 + 10];
                v449 = v132[v987 + 10];
                v450 = (v448 - v449) & ((v448 - v449) >> 31);
                v451 = v449 + v450;
                WORD5(v1014) = v451;
                v452 = v448 - v450;
                WORD1(v1016) = v452;
                v453 = v132[v985 + 12];
                v454 = v132[12];
                v455 = (v453 - v454) & ((v453 - v454) >> 31);
                v456 = v454 + v455;
                WORD6(v1014) = v456;
                v457 = v453 - v455;
                WORD2(v1016) = v457;
                v458 = HIWORD(v1015);
                if (HIWORD(v1015) <= v432)
                  v459 = v432;
                else
                  v459 = HIWORD(v1015);
                if (v459 > v430)
                  v430 = v459;
                if (v430 > v428)
                  LOWORD(v428) = v430;
                v447 = (unsigned __int16)v447;
                if ((unsigned __int16)v447 <= v430)
                  v460 = v430;
                else
                  v460 = v447;
                if ((unsigned __int16)v447 > v459)
                  LOWORD(v459) = v447;
                if (v452 > (int)(unsigned __int16)v447)
                  v447 = v452;
                if (v447 > HIWORD(v1015))
                  v458 = v447;
                if (v458 > v432)
                  LOWORD(v432) = v458;
                if (v457 <= v458)
                  v461 = v458;
                else
                  v461 = v457;
                if (v457 <= v447)
                  v457 = v447;
                v443 = (unsigned __int16)v443;
                v462 = ((v443 - v431) & ((v443 - v431) >> 31)) + v431;
                v463 = ((v462 - v429) & ((v462 - v429) >> 31)) + v429;
                WORD2(v1017) = v428 - v427 - ((v463 - v427) & ((v463 - v427) >> 31));
                HIWORD(v1021) = v430 - v463;
                LOWORD(v1022) = v460 - v463 - ((v446 - v463) & ((v446 - v463) >> 31));
                v464 = v459 - (((v443 - v431) & (((unsigned __int16)v443 - v431) >> 31)) + v431);
                v30 = v981;
                WORD5(v1017) = v464 - ((v446 - v462) & ((v446 - v462) >> 31));
                v465 = ((v451 - v446) & ((v451 - v446) >> 31)) + v446;
                v471 = ((v465 - v443) & ((v465 - v443) >> 31)) + v443;
                WORD6(v1017) = v432 - v431 - ((v471 - v431) & ((v471 - v431) >> 31));
                WORD3(v1022) = v458 - v471;
                WORD4(v1022) = v461 - v471 - ((v456 - v471) & ((v456 - v471) >> 31));
                WORD1(v1018) = v457
                             - (((v451 - v446) & ((v451 - v446) >> 31))
                              + v446)
                             - ((v456 - v465) & ((v456 - v465) >> 31));
                v466 = v435[2] + v132[2];
                v467 = v437[4] + v436[4];
                v468 = v132[6];
                v469 = v435[6];
                DWORD2(v1026) = v466 + *v437 + *v436 + v467 + v469 + v468;
                HIDWORD(v1023) = v466 + v467 + v469 + v468;
                LODWORD(v1024) = HIDWORD(v1023) + v436[8] + v437[8];
                DWORD1(v1027) = v1024 - v466;
                DWORD2(v1027) = v1024 - v466 + v132[10] + v435[10];
                HIDWORD(v1024) = DWORD2(v1027) - v467;
                LODWORD(v1025) = DWORD2(v1027) - v467 + v436[12] + v437[12];
                DWORD1(v1028) = v1025 - (v469 + v468);
                v470 = (v469 - v468) & ((v469 - v468) >> 31);
                LOWORD(v471) = v468 + v470;
                HIWORD(v1018) = v468 + v470;
                WORD3(v1020) = v469 - v470;
                v475 = v437[8];
                v472 = v436[8];
                v473 = (v475 - v472) & ((v475 - v472) >> 31);
                v474 = v472 + v473;
                LOWORD(v1019) = v474;
                LOWORD(v475) = v475 - v473;
                WORD4(v1020) = v475;
                v476 = v435[10];
                v477 = v132[10];
                v478 = (v476 - v477) & ((v476 - v477) >> 31);
                v479 = v477 + v478;
                v480 = v476 - v478;
                WORD1(v1019) = v479;
                WORD5(v1020) = v480;
                v481 = v437[12];
                v482 = v436[12];
                v483 = (v481 - v482) & ((v481 - v482) >> 31);
                v484 = v482 + v483;
                v485 = v481 - v483;
                v486 = WORD3(v1020);
                if (WORD3(v1020) <= (int)WORD6(v1020))
                  v487 = WORD6(v1020);
                else
                  v487 = WORD3(v1020);
                v488 = v989;
                v489 = v990;
                WORD2(v1019) = v484;
                if (v487 > v989)
                  v488 = v487;
                WORD6(v1020) = v485;
                if (v488 > v990)
                  v489 = v488;
                v475 = (unsigned __int16)v475;
                if ((unsigned __int16)v475 <= v488)
                  v490 = v488;
                else
                  v490 = v475;
                if ((unsigned __int16)v475 > v487)
                  LOWORD(v487) = v475;
                if (v480 > (int)(unsigned __int16)v475)
                  v475 = v480;
                if (v475 > WORD3(v1020))
                  v486 = v475;
                if (v486 > v434)
                  LOWORD(v434) = v486;
                v491 = v485;
                if (v485 <= v486)
                  v485 = v486;
                if (v491 > v475)
                  LOWORD(v475) = v491;
                v471 = (unsigned __int16)v471;
                v492 = ((v471 - v433) & ((v471 - v433) >> 31)) + v433;
                v493 = ((v492 - v991) & ((v492 - v991) >> 31)) + v991;
                WORD6(v1021) = v489 - v992 - ((v493 - v992) & ((v493 - v992) >> 31));
                WORD3(v1017) = v488 - (((v492 - v991) & ((v492 - v991) >> 31)) + v991);
                WORD4(v1017) = v490 - v493 - ((v474 - v493) & ((v474 - v493) >> 31));
                WORD1(v1022) = v487 - v492 - ((v474 - v492) & ((v474 - v492) >> 31));
                v494 = ((v479 - v474) & ((v479 - v474) >> 31)) + v474;
                v495 = ((v494 - v471) & ((v494 - v471) >> 31)) + v471;
                result = (v495 - v433) & ((v495 - v433) >> 31);
                WORD2(v1022) = v434 - v433 - ((v495 - v433) & ((v495 - v433) >> 31));
                HIWORD(v1017) = v486 - v495;
                LOWORD(v1018) = v485 - v495 - ((v484 - v495) & ((v484 - v495) >> 31));
                v496 = v484 - v494;
                v497 = (char *)&v1022 + 10;
                goto LABEL_285;
              case 1:
                v498 = (unsigned __int16 *)((char *)v132 + v988);
                v499 = (unsigned __int16 *)((char *)v132 + v984);
                v500 = (unsigned __int16 *)((char *)v132 + v986);
                v501 = *(unsigned __int16 *)((char *)v132 + v986 + 4);
                v502 = *(unsigned __int16 *)((char *)v132 + v984 + 8) + *(unsigned __int16 *)((char *)v132 + v988 + 8);
                v503 = *(unsigned __int16 *)((char *)v132 + v986 + 12);
                DWORD2(v1023) = *(unsigned __int16 *)((char *)v132 + 5 * v988)
                              + *(unsigned __int16 *)((char *)v132 + v988)
                              + v501
                              + v502
                              + v503;
                HIDWORD(v1026) = v501 + v502 + v503;
                LODWORD(v1027) = HIDWORD(v1026)
                               + *(unsigned __int16 *)((char *)v132 + v988 + 16)
                               + *(unsigned __int16 *)((char *)v132 + v984 + 16);
                DWORD1(v1024) = v1027 - v501;
                DWORD2(v1024) = v1027 - v501 + *(unsigned __int16 *)((char *)v132 + v986 + 20);
                HIDWORD(v1027) = DWORD2(v1024) - v502;
                LODWORD(v1028) = DWORD2(v1024)
                               - v502
                               + *(unsigned __int16 *)((char *)v132 + v988 + 24)
                               + *(unsigned __int16 *)((char *)v132 + v984 + 24);
                DWORD1(v1025) = v1028 - v503;
                WORD3(v1014) = v503;
                HIWORD(v1015) = v503;
                v507 = *(unsigned __int16 *)((char *)v132 + v984 + 16);
                v504 = *(unsigned __int16 *)((char *)v132 + v988 + 16);
                v505 = (v507 - v504) & ((v507 - v504) >> 31);
                v506 = v504 + v505;
                WORD4(v1014) = v506;
                LOWORD(v507) = v507 - v505;
                LOWORD(v1016) = v507;
                v508 = *(unsigned __int16 *)((char *)v132 + v986 + 20);
                WORD5(v1014) = v508;
                WORD1(v1016) = v508;
                v509 = *(unsigned __int16 *)((char *)v132 + v984 + 24);
                v510 = *(unsigned __int16 *)((char *)v132 + v988 + 24);
                v511 = (v509 - v510) & ((v509 - v510) >> 31);
                v512 = v510 + v511;
                WORD6(v1014) = v512;
                v513 = v509 - v511;
                WORD2(v1016) = v513;
                if (v503 <= v432)
                  v514 = v432;
                else
                  v514 = v503;
                if (v514 > v430)
                  v430 = v514;
                if (v430 > v428)
                  LOWORD(v428) = v430;
                v507 = (unsigned __int16)v507;
                if ((unsigned __int16)v507 <= v430)
                  v515 = v430;
                else
                  v515 = v507;
                if ((unsigned __int16)v507 > v514)
                  LOWORD(v514) = v507;
                if (v508 > (unsigned __int16)v507)
                  v507 = v508;
                if (v507 <= v503)
                  v516 = v503;
                else
                  v516 = v507;
                if (v516 > v432)
                  LOWORD(v432) = v516;
                if (v513 <= v516)
                  v517 = v516;
                else
                  v517 = v513;
                if (v513 > v507)
                  LOWORD(v507) = v513;
                v518 = ((v503 - v431) & ((v503 - v431) >> 31)) + v431;
                v519 = ((v518 - v429) & ((v518 - v429) >> 31)) + v429;
                WORD2(v1017) = v428 - v427 - ((v519 - v427) & ((v519 - v427) >> 31));
                HIWORD(v1021) = v430 - v519;
                LOWORD(v1022) = v515 - v519 - ((v506 - v519) & ((v506 - v519) >> 31));
                WORD5(v1017) = v514
                             - (((v503 - v431) & ((v503 - v431) >> 31))
                              + v431)
                             - ((v506 - v518) & ((v506 - v518) >> 31));
                v520 = ((v508 - v506) & ((v508 - v506) >> 31)) + v506;
                v521 = ((v520 - v503) & ((v520 - v503) >> 31)) + v503;
                WORD6(v1017) = v432 - v431 - ((v521 - v431) & ((v521 - v431) >> 31));
                WORD3(v1022) = v516 - v521;
                WORD4(v1022) = v517 - v521 - ((v512 - v521) & ((v512 - v521) >> 31));
                WORD1(v1018) = v507 - v520 - ((v512 - v520) & ((v512 - v520) >> 31));
                v522 = v499[2] + v498[2];
                v526 = v500[4];
                v523 = v498[6];
                v524 = v499[6];
                DWORD2(v1026) = v522 + *v500 + v526 + v524 + v523;
                HIDWORD(v1023) = v522 + v526 + v524 + v523;
                LODWORD(v1024) = HIDWORD(v1023) + v500[8];
                DWORD1(v1027) = v1024 - v522;
                DWORD2(v1027) = v1024 - v522 + v498[10] + v499[10];
                HIDWORD(v1024) = DWORD2(v1027) - v526;
                LODWORD(v1025) = DWORD2(v1027) - v526 + v500[12];
                DWORD1(v1028) = v1025 - (v524 + v523);
                v525 = (v524 - v523) & ((v524 - v523) >> 31);
                LOWORD(v526) = v523 + v525;
                HIWORD(v1018) = v523 + v525;
                WORD3(v1020) = v524 - v525;
                v527 = v500[8];
                LOWORD(v1019) = v527;
                WORD4(v1020) = v527;
                v528 = v499[10];
                v529 = v498[10];
                v530 = (v528 - v529) & ((v528 - v529) >> 31);
                v531 = v529 + v530;
                v532 = v528 - v530;
                v533 = WORD3(v1020);
                if (WORD3(v1020) <= (int)WORD6(v1020))
                  v534 = WORD6(v1020);
                else
                  v534 = WORD3(v1020);
                v535 = WORD5(v1020);
                v536 = v990;
                if (v534 > WORD5(v1020))
                  v535 = v534;
                if (v535 > v990)
                  v536 = v535;
                if (v527 <= v535)
                  v537 = v535;
                else
                  v537 = v527;
                WORD1(v1019) = v531;
                if (v527 > v534)
                  LOWORD(v534) = v527;
                WORD5(v1020) = v532;
                v538 = v500[12];
                WORD2(v1019) = v538;
                WORD6(v1020) = v538;
                if (v532 <= v527)
                  v539 = v527;
                else
                  v539 = v532;
                if (v539 > WORD3(v1020))
                  v533 = v539;
                if (v533 > v434)
                  LOWORD(v434) = v533;
                if (v538 <= v533)
                  v540 = v533;
                else
                  v540 = v538;
                if (v538 <= v539)
                  LOWORD(v475) = v539;
                else
                  LOWORD(v475) = v538;
                v526 = (unsigned __int16)v526;
                v541 = ((v526 - v433) & ((v526 - v433) >> 31)) + v433;
                v542 = ((v541 - v991) & ((v541 - v991) >> 31)) + v991;
                WORD6(v1021) = v536 - v992 - ((v542 - v992) & ((v542 - v992) >> 31));
                WORD3(v1017) = v535 - (((v541 - v991) & ((v541 - v991) >> 31)) + v991);
                WORD4(v1017) = v537 - v542 - ((v527 - v542) & ((v527 - v542) >> 31));
                WORD1(v1022) = v534 - v541 - ((v527 - v541) & ((v527 - v541) >> 31));
                v494 = ((v531 - v527) & ((v531 - v527) >> 31)) + v527;
                v543 = ((v494 - v526) & ((v494 - v526) >> 31)) + v526;
                result = (v543 - v433) & ((v543 - v433) >> 31);
                WORD2(v1022) = v434 - v433 - ((v543 - v433) & ((v543 - v433) >> 31));
                HIWORD(v1017) = v533 - v543;
                LOWORD(v1018) = v540 - v543 - ((v538 - v543) & ((v538 - v543) >> 31));
                v496 = v538 - v494;
                v497 = (char *)&v1022 + 10;
                goto LABEL_285;
              case 2:
                v544 = &v132[v987];
                v545 = &v132[v985];
                v546 = &v132[v983];
                v547 = v132[v985 + 1] + v132[1];
                v548 = v132[v983 + 3] + v132[v987 + 3];
                v549 = v132[v985 + 5] + v132[5];
                DWORD2(v1023) = v548 + v547 + v549;
                v550 = v132[v987 + 7];
                v551 = v132[v983 + 7];
                HIDWORD(v1023) = DWORD2(v1023) + v550 + v551;
                LODWORD(v1027) = HIDWORD(v1023) - v547;
                DWORD1(v1027) = HIDWORD(v1023) - v547 + v132[9] + v132[v985 + 9];
                DWORD2(v1024) = DWORD1(v1027) - v548;
                HIDWORD(v1024) = DWORD1(v1027) - v548 + v132[v987 + 11] + v132[v983 + 11];
                LODWORD(v1028) = HIDWORD(v1024) - v549;
                DWORD1(v1028) = HIDWORD(v1024) - v549 + v132[13] + v132[v985 + 13];
                v553 = (v551 - v550) & ((v551 - v550) >> 31);
                v552 = v550 + v553;
                WORD3(v1014) = v552;
                LOWORD(v553) = v551 - v553;
                HIWORD(v1015) = v553;
                v554 = v132[v985 + 9];
                v556 = v132[9];
                v555 = (v554 - v556) & ((v554 - v556) >> 31);
                LOWORD(v556) = v556 + v555;
                WORD4(v1014) = v556;
                v557 = v554 - v555;
                LOWORD(v1016) = v557;
                v558 = v132[v983 + 11];
                v559 = v132[v987 + 11];
                v560 = (v558 - v559) & ((v558 - v559) >> 31);
                v561 = v559 + v560;
                WORD5(v1014) = v559 + v560;
                v562 = v558 - v560;
                WORD1(v1016) = v562;
                v563 = v132[v985 + 13];
                v564 = v132[13];
                v565 = (v563 - v564) & ((v563 - v564) >> 31);
                v566 = v564 + v565;
                WORD6(v1014) = v564 + ((v563 - v564) & ((v563 - v564) >> 31));
                v567 = v563 - v565;
                WORD2(v1016) = v567;
                if (v432 > v430)
                  v430 = v432;
                if (v430 > v428)
                  v428 = v430;
                v553 = (unsigned __int16)v553;
                if ((unsigned __int16)v553 <= v428)
                  v568 = v428;
                else
                  v568 = v553;
                if ((unsigned __int16)v553 > v430)
                  v430 = (unsigned __int16)v553;
                if (v557 <= v430)
                  v569 = v430;
                else
                  v569 = v557;
                if (v557 > (int)(unsigned __int16)v553)
                  v553 = v557;
                if (v553 <= v432)
                  v570 = v432;
                else
                  v570 = v553;
                if (v562 <= v570)
                  v571 = v570;
                else
                  v571 = v562;
                if (v562 > v553)
                  v553 = v562;
                v572 = v567;
                if (v567 <= v553)
                  v572 = v553;
                v573 = ((v431 - v429) & ((v431 - v429) >> 31)) + v429;
                v574 = ((v573 - v427) & ((v573 - v427) >> 31)) + v427;
                WORD2(v1017) = v428 - v574;
                WORD3(v1017) = v568 - v574 - ((v552 - v574) & ((v552 - v574) >> 31));
                v575 = ((v552 - v573) & ((v552 - v573) >> 31)) + v573;
                LOWORD(v1022) = v430 - (((v552 - v573) & ((v552 - v573) >> 31)) + v573);
                v556 = (unsigned __int16)v556;
                WORD1(v1022) = v569
                             - (((v552 - v573) & ((v552 - v573) >> 31))
                              + v573)
                             - ((v556 - v575) & (((unsigned __int16)v556 - v575) >> 31));
                v576 = ((v556 - v552) & ((v556 - v552) >> 31)) + v552;
                v577 = ((v576 - v431) & ((v576 - v431) >> 31)) + v431;
                WORD6(v1017) = v570 - v577;
                HIWORD(v1017) = v571 - v577 - ((v561 - v577) & ((v561 - v577) >> 31));
                v578 = ((v561 - v576) & ((v561 - v576) >> 31)) + v576;
                WORD4(v1022) = v553 - v578;
                WORD5(v1022) = v572 - v578 - ((v566 - v578) & ((v566 - v578) >> 31));
                v579 = v546[1] + v544[1];
                v580 = v545[3] + v132[3];
                v581 = v546[5] + v544[5];
                DWORD2(v1026) = v580 + v579 + v581;
                v582 = v132[7];
                v583 = v545[7];
                HIDWORD(v1026) = DWORD2(v1026) + v582 + v583;
                LODWORD(v1024) = HIDWORD(v1026) - v579;
                DWORD1(v1024) = HIDWORD(v1026) - v579 + v544[9] + v546[9];
                DWORD2(v1027) = DWORD1(v1024) - v580;
                HIDWORD(v1027) = DWORD1(v1024) - v580 + v132[11] + v545[11];
                LODWORD(v1025) = HIDWORD(v1027) - v581;
                DWORD1(v1025) = HIDWORD(v1027) - v581 + v544[13] + v546[13];
                v584 = (v583 - v582) & ((v583 - v582) >> 31);
                LOWORD(v428) = v582 + v584;
                HIWORD(v1018) = v582 + v584;
                LOWORD(v584) = v583 - v584;
                WORD3(v1020) = v584;
                v585 = v546[9];
                v586 = v544[9];
                v587 = (v585 - v586) & ((v585 - v586) >> 31);
                v588 = v586 + v587;
                LOWORD(v1019) = v586 + v587;
                v589 = v585 - v587;
                WORD4(v1020) = v589;
                v590 = v545[11];
                v592 = v132[11];
                v591 = (v590 - v592) & ((v590 - v592) >> 31);
                LOWORD(v592) = v592 + v591;
                v593 = v590 - v591;
                WORD1(v1019) = v592;
                WORD5(v1020) = v593;
                v594 = v546[13];
                v595 = v544[13];
                v596 = (v594 - v595) & ((v594 - v595) >> 31);
                v597 = v595 + v596;
                v598 = v594 - v596;
                v599 = v989;
                v600 = v990;
                if (WORD6(v1020) > v989)
                  v599 = WORD6(v1020);
                if (v599 > v990)
                  v600 = v599;
                v584 = (unsigned __int16)v584;
                WORD2(v1019) = v597;
                if ((unsigned __int16)v584 <= v600)
                  v601 = v600;
                else
                  v601 = v584;
                WORD6(v1020) = v598;
                if ((unsigned __int16)v584 > v599)
                  v599 = (unsigned __int16)v584;
                if (v589 <= v599)
                  v602 = v599;
                else
                  v602 = v589;
                if (v589 > (int)(unsigned __int16)v584)
                  v584 = v589;
                if (v584 > v434)
                  v434 = v584;
                v603 = v593;
                if (v593 <= v434)
                  v593 = v434;
                if (v603 > v584)
                  v584 = v603;
                LOWORD(v475) = v598;
                if (v598 <= v584)
                  LOWORD(v475) = v584;
                v604 = ((v433 - v991) & ((v433 - v991) >> 31)) + v991;
                v605 = ((v604 - v992) & ((v604 - v992) >> 31)) + v992;
                WORD6(v1021) = v600 - (((v604 - v992) & ((v604 - v992) >> 31)) + v992);
                v428 = (unsigned __int16)v428;
                HIWORD(v1021) = v601 - v605 - ((v428 - v605) & (((unsigned __int16)v428 - v605) >> 31));
                v606 = ((v428 - v604) & ((v428 - v604) >> 31)) + v604;
                WORD4(v1017) = v599 - v606;
                WORD5(v1017) = v602 - v606 - ((v588 - v606) & ((v588 - v606) >> 31));
                result = ((v588 - v428) & ((v588 - v428) >> 31)) + v428;
                v607 = ((result - v433) & (((int)result - v433) >> 31)) + v433;
                WORD2(v1022) = v434 - v607;
                v592 = (unsigned __int16)v592;
                WORD3(v1022) = v593 - v607 - ((v592 - v607) & (((unsigned __int16)v592 - v607) >> 31));
                v494 = ((v592 - result) & ((v592 - (int)result) >> 31)) + result;
                LOWORD(v1018) = v584 - v494;
                v496 = v597 - v494;
                goto LABEL_284;
              case 3:
                v608 = (unsigned __int16 *)((char *)v132 + v988);
                v609 = (unsigned __int16 *)((char *)v132 + v986);
                v610 = (unsigned __int16 *)((char *)v132 + v984);
                v611 = *(unsigned __int16 *)((char *)v132 + v986 + 6);
                v612 = *(unsigned __int16 *)((char *)v132 + v984 + 10) + *(unsigned __int16 *)((char *)v132 + v988 + 10);
                DWORD2(v1023) = *(unsigned __int16 *)((char *)v132 + v984 + 2)
                              + *(unsigned __int16 *)((char *)v132 + v988 + 2)
                              + v611
                              + v612;
                v613 = *(unsigned __int16 *)((char *)v132 + v986 + 14);
                HIDWORD(v1023) = DWORD2(v1023) + v613;
                LODWORD(v1027) = v611 + v612 + v613;
                DWORD1(v1027) = v1027
                              + *(unsigned __int16 *)((char *)v132 + v988 + 18)
                              + *(unsigned __int16 *)((char *)v132 + v984 + 18);
                DWORD2(v1024) = DWORD1(v1027) - v611;
                HIDWORD(v1024) = DWORD1(v1027) - v611 + *(unsigned __int16 *)((char *)v132 + v986 + 22);
                LODWORD(v1028) = HIDWORD(v1024) - v612;
                DWORD1(v1028) = HIDWORD(v1024)
                              - v612
                              + *(unsigned __int16 *)((char *)v132 + v988 + 26)
                              + *(unsigned __int16 *)((char *)v132 + v984 + 26);
                WORD3(v1014) = v613;
                HIWORD(v1015) = v613;
                v616 = *(unsigned __int16 *)((char *)v132 + v984 + 18);
                v615 = *(unsigned __int16 *)((char *)v132 + v988 + 18);
                v614 = (v616 - v615) & ((v616 - v615) >> 31);
                LOWORD(v615) = v615 + v614;
                WORD4(v1014) = v615;
                LOWORD(v616) = v616 - v614;
                LOWORD(v1016) = v616;
                v617 = *(unsigned __int16 *)((char *)v132 + v986 + 22);
                WORD5(v1014) = v617;
                WORD1(v1016) = v617;
                v618 = *(unsigned __int16 *)((char *)v132 + v984 + 26);
                v619 = *(unsigned __int16 *)((char *)v132 + v988 + 26);
                v620 = (v618 - v619) & ((v618 - v619) >> 31);
                v621 = v619 + v620;
                WORD6(v1014) = v621;
                v622 = v618 - v620;
                WORD2(v1016) = v622;
                if (v432 > v430)
                  v430 = v432;
                if (v430 > v428)
                  v428 = v430;
                if (v613 <= v428)
                  v623 = v428;
                else
                  v623 = v613;
                if (v613 > v430)
                  v430 = v613;
                v616 = (unsigned __int16)v616;
                if ((unsigned __int16)v616 <= v430)
                  v624 = v430;
                else
                  v624 = v616;
                if ((unsigned __int16)v616 <= v613)
                  v616 = v613;
                if (v616 <= v432)
                  v625 = v432;
                else
                  v625 = v616;
                if (v617 <= v625)
                  v626 = v625;
                else
                  v626 = v617;
                if (v617 > v616)
                  v616 = v617;
                if (v622 <= v616)
                  v622 = v616;
                v627 = ((v431 - v429) & ((v431 - v429) >> 31)) + v429;
                v628 = ((v627 - v427) & ((v627 - v427) >> 31)) + v427;
                WORD2(v1017) = v428 - v628;
                WORD3(v1017) = v623 - v628 - ((v613 - v628) & ((v613 - v628) >> 31));
                v629 = ((v613 - v627) & ((v613 - v627) >> 31)) + v627;
                LOWORD(v1022) = v430 - v629;
                v615 = (unsigned __int16)v615;
                WORD1(v1022) = v624 - v629 - ((v615 - v629) & (((unsigned __int16)v615 - v629) >> 31));
                v630 = ((v615 - v613) & ((v615 - v613) >> 31)) + v613;
                v631 = ((v630 - v431) & ((v630 - v431) >> 31)) + v431;
                WORD6(v1017) = v625 - v631;
                HIWORD(v1017) = v626 - v631 - ((v617 - v631) & ((v617 - v631) >> 31));
                v632 = ((v617 - v630) & ((v617 - v630) >> 31)) + v630;
                WORD4(v1022) = v616 - v632;
                WORD5(v1022) = v622 - v632 - ((v621 - v632) & ((v621 - v632) >> 31));
                v633 = v610[3] + v608[3];
                v636 = v609[5];
                DWORD2(v1026) = v633 + v609[1] + v636;
                v634 = v608[7];
                v635 = v610[7];
                HIDWORD(v1026) = DWORD2(v1026) + v634 + v635;
                LODWORD(v1024) = v633 + v636 + v634 + v635;
                DWORD1(v1024) = v1024 + v609[9];
                DWORD2(v1027) = DWORD1(v1024) - v633;
                HIDWORD(v1027) = DWORD1(v1024) - v633 + v608[11] + v610[11];
                LODWORD(v1025) = HIDWORD(v1027) - v636;
                DWORD1(v1025) = HIDWORD(v1027) - v636 + v609[13];
                v637 = (v635 - v634) & ((v635 - v634) >> 31);
                LOWORD(v636) = v634 + v637;
                HIWORD(v1018) = v634 + v637;
                LOWORD(v637) = v635 - v637;
                WORD3(v1020) = v637;
                v638 = v609[9];
                LOWORD(v1019) = v638;
                WORD4(v1020) = v638;
                v639 = v610[11];
                v640 = v608[11];
                v641 = (v639 - v640) & ((v639 - v640) >> 31);
                v642 = v640 + v641;
                v643 = v639 - v641;
                v644 = WORD5(v1020);
                v645 = v990;
                if (WORD6(v1020) > (int)WORD5(v1020))
                  v644 = WORD6(v1020);
                if (v644 > v990)
                  v645 = v644;
                v637 = (unsigned __int16)v637;
                if ((unsigned __int16)v637 <= v645)
                  v646 = v645;
                else
                  v646 = v637;
                if ((unsigned __int16)v637 > v644)
                  v644 = (unsigned __int16)v637;
                if (v638 <= v644)
                  v647 = v644;
                else
                  v647 = v638;
                WORD1(v1019) = v642;
                if (v638 > (unsigned __int16)v637)
                  v637 = v638;
                WORD5(v1020) = v643;
                v648 = v609[13];
                WORD2(v1019) = v648;
                WORD6(v1020) = v648;
                if (v637 <= v434)
                  v649 = v434;
                else
                  v649 = v637;
                if (v643 <= v649)
                  v650 = v649;
                else
                  v650 = v643;
                if (v643 > v637)
                  v637 = v643;
                if (v648 <= v637)
                  LOWORD(v475) = v637;
                else
                  LOWORD(v475) = v648;
                v651 = ((v433 - v991) & ((v433 - v991) >> 31)) + v991;
                v652 = ((v651 - v992) & ((v651 - v992) >> 31)) + v992;
                WORD6(v1021) = v645 - (((v651 - v992) & ((v651 - v992) >> 31)) + v992);
                v636 = (unsigned __int16)v636;
                HIWORD(v1021) = v646 - v652 - ((v636 - v652) & (((unsigned __int16)v636 - v652) >> 31));
                v653 = ((v636 - v651) & ((v636 - v651) >> 31)) + v651;
                WORD4(v1017) = v644 - v653;
                WORD5(v1017) = v647 - v653 - ((v638 - v653) & ((v638 - v653) >> 31));
                v654 = ((v638 - v636) & ((v638 - v636) >> 31)) + v636;
                v655 = ((v654 - v433) & ((v654 - v433) >> 31)) + v433;
                WORD2(v1022) = v649 - v655;
                result = (v642 - v655) & ((v642 - v655) >> 31);
                WORD3(v1022) = v650 - v655 - ((v642 - v655) & ((v642 - v655) >> 31));
                v494 = ((v642 - v654) & ((v642 - v654) >> 31)) + v654;
                LOWORD(v1018) = v637 - (((v642 - v654) & ((v642 - v654) >> 31)) + v654);
                v496 = v648 - v494;
LABEL_284:
                v497 = (char *)&v1018 + 2;
LABEL_285:
                *(_WORD *)v497 = v475 - v494 - (v496 & (v496 >> 31));
                v20 = (float *)&v1004 + 2;
                v21 = (unsigned __int16 *)&v1004 + 2;
                v9 = v995;
                v11 = v996;
                v13 = v982;
                v134 = v993;
                v28 = v994;
                break;
              default:
                v20 = (float *)&v1004 + 2;
                v21 = (unsigned __int16 *)&v1004 + 2;
                v13 = v982;
                break;
            }
          }
          if (v21[24] >= (v13 * *(unsigned __int16 *)(v9 + 2 * *(unsigned __int16 *)(v11 + 2 * v21[36])) + 0x8000) >> 16)
          {
            v656 = (float)(v20[107] + v20[108]) + v20[109];
            v657 = (float)((float)((float)(v20[130] + v20[131]) + v20[132]) + v20[133]) + v20[134];
            v658 = v657 < v656;
            v659 = v656 / v657;
            v660 = v657 / v656;
            if (v658)
            {
              v660 = v659;
              v661 = 2;
            }
            else
            {
              v661 = 0;
            }
            v662 = (float)((float)(v20[119] + v20[120]) + v20[121]) + v20[122];
            v663 = (float)((float)(v20[142] + v20[143]) + v20[144]) + v20[145];
            v658 = v663 < v662;
            v664 = v662 / v663;
            v665 = v663 / v662;
            if (v658)
            {
              v665 = v664;
              v666 = 3;
            }
            else
            {
              v666 = 1;
            }
            if (v665 <= v660)
            {
              v135 = v661;
            }
            else
            {
              v660 = v665;
              v135 = v666;
            }
            if (v660 >= v7)
              goto LABEL_46;
          }
          v667 = &v1052[v21[60]];
          v668 = *v667;
          result = v667[1];
          v669 = v21[48];
          v670 = v21[120];
          v671 = *((_DWORD *)v20 + 84);
          if (v669 > 1)
          {
            if (v669 == 2)
            {
              if (v670 < (v13
                         * *(unsigned __int16 *)(v668
                                               + 2
                                               * *(unsigned __int16 *)(v11
                                                                     + 2 * ((683 * v671 + 2048) >> 12)))
                         + 0x8000) >> 16)
                goto LABEL_334;
              v732 = v132[1];
              v733 = v132[5];
              v734 = v132[v987 + 3];
              v735 = v132[v985 + 1];
              v736 = v132[v985 + 5];
              v737 = v132[v983 + 3];
              v738 = (float)((float)v733 - (float)v732) * *(float *)(v14 + 4 * (v733 + v732));
              v739 = (float)v736;
              v740 = (float)v735;
              v741 = (float)((float)v736 - (float)v735) * *(float *)(v14 + 4 * (v736 + v735));
              v742 = (float)(v741 * v741) + (float)(v738 * v738);
              v743 = (float)((float)v735 - (float)v732) * *(float *)(v14 + 4 * (v735 + v732));
              v744 = (float)v737;
              v745 = (float)v734;
              v746 = (float)((float)v737 - (float)v734) * *(float *)(v14 + 4 * (v737 + v734));
              v747 = (float)((float)v736 - (float)v733) * *(float *)(v14 + 4 * (v736 + v733));
              v748 = (float)((float)(v746 * v746) + (float)(v743 * v743)) + (float)(v747 * v747);
              v749 = v742 * 1.5;
              v658 = v748 < v749;
              v750 = v749 / v748;
              v751 = v748 / v749;
              if (v658)
              {
                v751 = v750;
                v752 = 2;
              }
              else
              {
                v752 = 0;
              }
              v753 = (float)(v740 - v745) * *(float *)(v14 + 4 * (v735 + v734));
              v754 = (float)(v745 - (float)v733) * *(float *)(v14 + 4 * (v734 + v733));
              v755 = *(float *)(v14 + 4 * (v737 + v736));
              v756 = (float)((float)((float)((float)(v744 - v739) * v755) * (float)((float)(v744 - v739) * v755))
                           + (float)(v754 * v754))
                   + (float)(v753 * v753);
              v757 = (float)(v745 - (float)v732) * *(float *)(v14 + 4 * (v734 + v732));
              v758 = (float)(v744 - v740) * *(float *)(v14 + 4 * (v737 + v735));
              v759 = *(float *)(v14 + 4 * (v736 + v734));
              v760 = (float)((float)(v758 * v758) + (float)(v757 * v757))
                   + (float)((float)((float)(v739 - v745) * v759) * (float)((float)(v739 - v745) * v759));
              v658 = v760 < v756;
              v761 = v756 / v760;
              v25 = v760 / v756;
              if (v658)
              {
                v25 = v761;
                v762 = 3;
              }
              else
              {
                v762 = 1;
              }
              if (v25 > v751)
              {
                v135 = v762;
              }
              else
              {
                v25 = v751;
                v135 = v752;
              }
              if (v25 < v7)
LABEL_334:
                v135 = 4;
              if (v21[156] < (v13
                             * *(unsigned __int16 *)(result
                                                   + 2
                                                   * *(unsigned __int16 *)(v11
                                                                         + 2
                                                                         * ((683 * *((_DWORD *)v20 + 96)
                                                                                         + 2048) >> 12)))
                             + 0x8000) >> 16)
                goto LABEL_46;
              v763 = v132[3];
              v764 = v132[v987 + 1];
              v765 = v132[v987 + 5];
              v766 = v132[v985 + 3];
              v767 = v132[v983 + 1];
              v768 = (float)v765;
              v769 = (float)v764;
              v770 = v132[v983 + 5];
              v771 = (float)((float)v765 - (float)v764) * *(float *)(v14 + 4 * (v765 + v764));
              v772 = (float)((float)v770 - (float)v767) * *(float *)(v14 + 4 * (v770 + v767));
              v773 = (float)(v772 * v772) + (float)(v771 * v771);
              v774 = (float)((float)v767 - (float)v764) * *(float *)(v14 + 4 * (v767 + v764));
              v775 = (float)v766;
              v776 = (float)v763;
              v777 = (float)((float)v766 - (float)v763) * *(float *)(v14 + 4 * (v766 + v763));
              v778 = (float)((float)v770 - (float)v765) * *(float *)(v14 + 4 * (v770 + v765));
              v779 = (float)((float)(v777 * v777) + (float)(v774 * v774)) + (float)(v778 * v778);
              v780 = v773 * 1.5;
              v658 = v779 < v780;
              v781 = v780 / v779;
              v782 = v779 / v780;
              if (v658)
              {
                v782 = v781;
                v783 = 2;
              }
              else
              {
                v783 = 0;
              }
              v784 = (float)(v769 - v776) * *(float *)(v14 + 4 * (v764 + v763));
              v785 = (float)((float)v767 - v775) * *(float *)(v14 + 4 * (v767 + v766));
              v786 = (float)(v775 - v768) * *(float *)(v14 + 4 * (v766 + v765));
              v787 = (float)((float)(v785 * v785) + (float)(v784 * v784)) + (float)(v786 * v786);
              result = v766 + v764;
              v788 = (float)(v775 - v769) * *(float *)(v14 + 4 * result);
              v789 = (float)(v768 - v776) * *(float *)(v14 + 4 * (v765 + v763));
              v790 = *(float *)(v14 + 4 * (v770 + v766));
              v791 = (float)((float)((float)((float)((float)v770 - v775) * v790)
                                   * (float)((float)((float)v770 - v775) * v790))
                           + (float)(v789 * v789))
                   + (float)(v788 * v788);
              v658 = v791 < v787;
              v792 = v787 / v791;
              v730 = v791 / v787;
              if (v658)
              {
                v730 = v792;
                v731 = 3;
              }
              else
              {
                v731 = 1;
              }
              if (v730 <= v782)
              {
                v730 = v782;
                v731 = v783;
              }
              if (v730 < v7)
                goto LABEL_46;
            }
            else
            {
              if (v670 < (v13
                         * *(unsigned __int16 *)(v668
                                               + 2
                                               * *(unsigned __int16 *)(v11
                                                                     + 2 * ((819 * v671 + 2048) >> 12)))
                         + 0x8000) >> 16)
                goto LABEL_359;
              v793 = *(unsigned __int16 *)((char *)v132 + v988 + 2);
              v794 = *(unsigned __int16 *)((char *)v132 + v988 + 10);
              v795 = *(unsigned __int16 *)((char *)v132 + v986 + 6);
              v796 = *(unsigned __int16 *)((char *)v132 + v984 + 2);
              v797 = *(unsigned __int16 *)((char *)v132 + v984 + 10);
              v798 = (float)((float)v794 - (float)v793) * *(float *)(v14 + 4 * (v794 + v793));
              v799 = (float)((float)v797 - (float)v796) * *(float *)(v14 + 4 * (v797 + v796));
              v800 = (float)(v799 * v799) + (float)(v798 * v798);
              v801 = (float)((float)v796 - (float)v793) * *(float *)(v14 + 4 * (v796 + v793));
              v802 = *(float *)(v14 + 4 * (v797 + v794));
              v803 = (float)((float)((float)((float)v797 - (float)v794) * v802)
                           * (float)((float)((float)v797 - (float)v794) * v802))
                   + (float)(v801 * v801);
              v658 = v803 < v800;
              v804 = v800 / v803;
              v805 = v803 / v800;
              if (v658)
              {
                v805 = v804;
                v806 = 2;
              }
              else
              {
                v806 = 0;
              }
              v807 = (float)((float)v796 - (float)v795) * *(float *)(v14 + 4 * (v796 + v795));
              v808 = *(float *)(v14 + 4 * (v795 + v794));
              v809 = (float)((float)((float)((float)v795 - (float)v794) * v808)
                           * (float)((float)((float)v795 - (float)v794) * v808))
                   + (float)(v807 * v807);
              v810 = *(float *)(v14 + 4 * (v795 + v793));
              v811 = *(float *)(v14 + 4 * (v797 + v795));
              v812 = (float)((float)((float)((float)v797 - (float)v795) * v811)
                           * (float)((float)((float)v797 - (float)v795) * v811))
                   + (float)((float)((float)((float)v795 - (float)v793) * v810)
                           * (float)((float)((float)v795 - (float)v793) * v810));
              v658 = v812 < v809;
              v813 = v809 / v812;
              v25 = v812 / v809;
              if (v658)
              {
                v25 = v813;
                v814 = 3;
              }
              else
              {
                v814 = 1;
              }
              if (v25 > v805)
              {
                v135 = v814;
              }
              else
              {
                v25 = v805;
                v135 = v806;
              }
              if (v25 < v7)
LABEL_359:
                v135 = 4;
              if (v21[156] < (v13
                             * *(unsigned __int16 *)(result
                                                   + 2
                                                   * *(unsigned __int16 *)(v11
                                                                         + 2
                                                                         * ((*((_DWORD *)v20 + 96) + 2) >> 2)))
                             + 0x8000) >> 16)
                goto LABEL_46;
              v815 = *(unsigned __int16 *)((char *)v132 + v988 + 6);
              v816 = *(unsigned __int16 *)((char *)v132 + v986 + 2);
              v817 = *(unsigned __int16 *)((char *)v132 + v986 + 10);
              v818 = *(unsigned __int16 *)((char *)v132 + v984 + 6);
              v819 = (float)v817;
              v820 = (float)v816;
              v821 = (float)((float)v817 - (float)v816) * *(float *)(v14 + 4 * (v817 + v816));
              v822 = v821 * v821;
              v823 = (float)v818;
              v824 = (float)v815;
              v825 = (float)((float)v818 - (float)v815) * *(float *)(v14 + 4 * (v818 + v815));
              v826 = v825 * v825;
              v658 = v826 < v822;
              v827 = v822 / v826;
              v828 = v826 / v822;
              if (v658)
              {
                v828 = v827;
                result = 2;
              }
              else
              {
                result = 0;
              }
              v829 = (float)(v820 - v824) * *(float *)(v14 + 4 * (v816 + v815));
              v830 = *(float *)(v14 + 4 * (v818 + v817));
              v831 = (float)((float)((float)(v823 - v819) * v830) * (float)((float)(v823 - v819) * v830))
                   + (float)(v829 * v829);
              v832 = (float)(v823 - v820) * *(float *)(v14 + 4 * (v818 + v816));
              v833 = *(float *)(v14 + 4 * (v817 + v815));
              v834 = (float)((float)((float)(v819 - v824) * v833) * (float)((float)(v819 - v824) * v833))
                   + (float)(v832 * v832);
              v658 = v834 < v831;
              v835 = v831 / v834;
              v730 = v834 / v831;
              if (v658)
              {
                v730 = v835;
                v731 = 3;
              }
              else
              {
                v731 = 1;
              }
              if (v730 <= v828)
              {
                v730 = v828;
                v731 = result;
              }
              if (v730 < v7)
                goto LABEL_46;
            }
          }
          else if (v669 == 1)
          {
            if (v670 < (v13
                       * *(unsigned __int16 *)(v668
                                             + 2
                                             * *(unsigned __int16 *)(v11
                                                                   + 2 * ((683 * v671 + 2048) >> 12)))
                       + 0x8000) >> 16)
              goto LABEL_310;
            v672 = *(unsigned __int16 *)((char *)v132 + v988);
            v673 = *(unsigned __int16 *)((char *)v132 + v988 + 8);
            v674 = *(unsigned __int16 *)((char *)v132 + v986 + 4);
            v675 = *(unsigned __int16 *)((char *)v132 + v986 + 12);
            v676 = *(unsigned __int16 *)((char *)v132 + 5 * v988);
            v677 = (float)v673;
            v678 = *(unsigned __int16 *)((char *)v132 + v984 + 8);
            v679 = (float)((float)v673 - (float)v672) * *(float *)(v14 + 4 * (v673 + v672));
            v680 = (float)v678;
            v681 = (float)v675;
            v682 = (float)v674;
            v683 = (float)((float)v678 - (float)v676) * *(float *)(v14 + 4 * (v678 + v676));
            v684 = (float)((float)v675 - (float)v674) * *(float *)(v14 + 4 * (v675 + v674));
            v685 = (float)((float)(v683 * v683) + (float)(v679 * v679)) + (float)(v684 * v684);
            v686 = (float)((float)v676 - (float)v672) * *(float *)(v14 + 4 * (v676 + v672));
            v687 = *(float *)(v14 + 4 * (v678 + v673));
            v688 = (float)((float)((float)((float)((float)v678 - (float)v673) * v687)
                                 * (float)((float)((float)v678 - (float)v673) * v687))
                         + (float)(v686 * v686))
                 * 1.5;
            v658 = v688 < v685;
            v689 = v685 / v688;
            v690 = v688 / v685;
            if (v658)
            {
              v690 = v689;
              v691 = 2;
            }
            else
            {
              v691 = 0;
            }
            v692 = (float)((float)v676 - v682) * *(float *)(v14 + 4 * (v676 + v674));
            v693 = (float)(v682 - v677) * *(float *)(v14 + 4 * (v674 + v673));
            v694 = (float)(v680 - v681) * *(float *)(v14 + 4 * (v678 + v675));
            v695 = (float)((float)(v693 * v693) + (float)(v692 * v692)) + (float)(v694 * v694);
            v696 = (float)(v682 - (float)v672) * *(float *)(v14 + 4 * (v674 + v672));
            v697 = (float)(v680 - v682) * *(float *)(v14 + 4 * (v678 + v674));
            v698 = *(float *)(v14 + 4 * (v675 + v673));
            v699 = (float)((float)(v697 * v697) + (float)(v696 * v696))
                 + (float)((float)((float)(v681 - v677) * v698) * (float)((float)(v681 - v677) * v698));
            v658 = v699 < v695;
            v700 = v695 / v699;
            v25 = v699 / v695;
            if (v658)
            {
              v25 = v700;
              v701 = 3;
            }
            else
            {
              v701 = 1;
            }
            if (v25 > v690)
            {
              v135 = v701;
            }
            else
            {
              v25 = v690;
              v135 = v691;
            }
            if (v25 < v7)
LABEL_310:
              v135 = 4;
            if (v21[156] < (v13
                           * *(unsigned __int16 *)(result
                                                 + 2
                                                 * *(unsigned __int16 *)(v11
                                                                       + 2
                                                                       * ((683 * *((_DWORD *)v20 + 96)
                                                                                       + 2048) >> 12)))
                           + 0x8000) >> 16)
              goto LABEL_46;
            v702 = *(unsigned __int16 *)((char *)v132 + v988 + 4);
            v703 = *(unsigned __int16 *)((char *)v132 + v988 + 12);
            result = *(unsigned __int16 *)((char *)v132 + 3 * v988);
            v704 = *(unsigned __int16 *)((char *)v132 + v986 + 8);
            v705 = *(unsigned __int16 *)((char *)v132 + v984 + 4);
            v706 = (float)v704;
            v707 = (float)result;
            v708 = *(unsigned __int16 *)((char *)v132 + v984 + 12);
            v709 = (float)((float)v704 - (float)result)
                 * *(float *)(v14 + 4 * (v704 + result));
            v710 = (float)v702;
            v711 = (float)v705;
            v712 = (float)((float)v703 - (float)v702) * *(float *)(v14 + 4 * (v703 + v702));
            v713 = (float)((float)v708 - (float)v705) * *(float *)(v14 + 4 * (v708 + v705));
            v714 = (float)((float)(v713 * v713) + (float)(v712 * v712)) + (float)(v709 * v709);
            v715 = (float)((float)v705 - (float)v702) * *(float *)(v14 + 4 * (v705 + v702));
            v716 = *(float *)(v14 + 4 * (v708 + v703));
            v717 = (float)((float)((float)((float)((float)v708 - (float)v703) * v716)
                                 * (float)((float)((float)v708 - (float)v703) * v716))
                         + (float)(v715 * v715))
                 * 1.5;
            v658 = v717 < v714;
            v718 = v714 / v717;
            v719 = v717 / v714;
            if (v658)
            {
              v719 = v718;
              v720 = 2;
            }
            else
            {
              v720 = 0;
            }
            v721 = (float)(v707 - v710) * *(float *)(v14 + 4 * (result + v702));
            v722 = (float)(v711 - v706) * *(float *)(v14 + 4 * (v705 + v704));
            v723 = *(float *)(v14 + 4 * (v704 + v703));
            v724 = (float)((float)(v722 * v722) + (float)(v721 * v721))
                 + (float)((float)((float)(v706 - (float)v703) * v723) * (float)((float)(v706 - (float)v703) * v723));
            v725 = (float)(v711 - v707) * *(float *)(v14 + 4 * (v705 + result));
            v726 = (float)(v706 - v710) * *(float *)(v14 + 4 * (v704 + v702));
            v727 = *(float *)(v14 + 4 * (v708 + v704));
            v728 = (float)((float)(v726 * v726) + (float)(v725 * v725))
                 + (float)((float)((float)((float)v708 - v706) * v727) * (float)((float)((float)v708 - v706) * v727));
            v658 = v728 < v724;
            v729 = v724 / v728;
            v730 = v728 / v724;
            if (v658)
            {
              v730 = v729;
              v731 = 3;
            }
            else
            {
              v731 = 1;
            }
            if (v730 <= v719)
            {
              v730 = v719;
              v731 = v720;
            }
            if (v730 < v7)
              goto LABEL_46;
          }
          else
          {
            if (v670 >= (v13
                        * *(unsigned __int16 *)(v668
                                              + 2 * *(unsigned __int16 *)(v11 + 2 * ((v671 + 4) >> 3)))
                        + 0x8000) >> 16)
            {
              v836 = v134;
              v837 = *v132;
              v838 = v132[4];
              v839 = v132[v987 + 2];
              v840 = v132[v987 + 6];
              v841 = v132[2 * v988];
              v842 = v132[v985 + 4];
              v843 = v132[v983 + 2];
              v844 = v132[v983 + 6];
              v845 = (float)v838;
              v846 = (float)((float)v838 - (float)v837) * *(float *)(v14 + 4 * (v838 + v837));
              v847 = (float)v842;
              v848 = (float)v841;
              v849 = (float)((float)v842 - (float)v841) * *(float *)(v14 + 4 * (v842 + v841));
              v850 = (float)v840;
              v851 = (float)v839;
              v852 = (float)((float)v840 - (float)v839) * *(float *)(v14 + 4 * (v840 + v839));
              v853 = (float)v843;
              v854 = (float)((float)v844 - (float)v843) * *(float *)(v14 + 4 * (v844 + v843));
              v855 = (float)((float)(v849 * v849) + (float)(v846 * v846))
                   + (float)((float)(v854 * v854) + (float)(v852 * v852));
              v856 = (float)((float)v841 - (float)v837) * *(float *)(v14 + 4 * (v841 + v837));
              v857 = (float)((float)v843 - (float)v839) * *(float *)(v14 + 4 * (v843 + v839));
              v858 = (float)((float)v842 - (float)v838) * *(float *)(v14 + 4 * (v842 + v838));
              v859 = (float)((float)v844 - (float)v840) * *(float *)(v14 + 4 * (v844 + v840));
              v860 = (float)((float)((float)(v857 * v857) + (float)(v856 * v856)) + (float)(v858 * v858))
                   + (float)(v859 * v859);
              v658 = v860 < v855;
              v861 = v855 / v860;
              v862 = v860 / v855;
              if (v658)
              {
                v862 = v861;
                v863 = 2;
              }
              else
              {
                v863 = 0;
              }
              v864 = (float)(v848 - v851) * *(float *)(v14 + 4 * (v841 + v839));
              v865 = (float)(v851 - v845) * *(float *)(v14 + 4 * (v839 + v838));
              v866 = (float)(v853 - v847) * *(float *)(v14 + 4 * (v843 + v842));
              v867 = (float)(v847 - v850) * *(float *)(v14 + 4 * (v842 + v840));
              v868 = (float)((float)((float)(v866 * v866) + (float)(v865 * v865)) + (float)(v864 * v864))
                   + (float)(v867 * v867);
              v869 = (float)(v851 - (float)v837) * *(float *)(v14 + 4 * (v839 + v837));
              v870 = (float)(v853 - v848) * *(float *)(v14 + 4 * (v843 + v841));
              v871 = (float)(v847 - v851) * *(float *)(v14 + 4 * (v842 + v839));
              v872 = (float)(v850 - v845) * *(float *)(v14 + 4 * (v840 + v838));
              v873 = (float)((float)v844 - v847) * *(float *)(v14 + 4 * (v844 + v842));
              v874 = (float)((float)((float)((float)(v870 * v870) + (float)(v869 * v869)) + (float)(v871 * v871))
                           + (float)((float)(v873 * v873) + (float)(v872 * v872)))
                   * 1.6;
              v658 = v874 < (float)(v868 + v868);
              v875 = (float)(v868 + v868) / v874;
              v25 = v874 / (float)(v868 + v868);
              if (v658)
              {
                v25 = v875;
                v876 = 3;
              }
              else
              {
                v876 = 1;
              }
              if (v25 > v862)
              {
                v135 = v876;
              }
              else
              {
                v25 = v862;
                v135 = v863;
              }
              if (v25 < v7)
                v135 = 4;
              v134 = v836;
            }
            else
            {
              v135 = 4;
            }
            if (v21[156] < (v13
                           * *(unsigned __int16 *)(result
                                                 + 2
                                                 * *(unsigned __int16 *)(v11
                                                                       + 2
                                                                       * ((*((_DWORD *)v20 + 96) + 4) >> 3)))
                           + 0x8000) >> 16)
              goto LABEL_46;
            v877 = v132[2];
            v878 = v132[6];
            v879 = v132[v988];
            v880 = v132[v987 + 4];
            result = v132[v985 + 2];
            v881 = v132[v985 + 6];
            v882 = v132[3 * v988];
            v883 = v132[v983 + 4];
            v884 = (float)v880;
            v885 = (float)v879;
            v886 = (float)((float)v880 - (float)v879) * *(float *)(v14 + 4 * (v880 + v879));
            v887 = (float)v883;
            v888 = (float)((float)v883 - (float)v882) * *(float *)(v14 + 4 * (v883 + v882));
            v889 = (float)v877;
            v890 = (float)((float)v878 - (float)v877) * *(float *)(v14 + 4 * (v878 + v877));
            v891 = (float)v881;
            v892 = (float)result;
            v893 = (float)((float)v881 - (float)result)
                 * *(float *)(v14 + 4 * (v881 + result));
            v894 = (float)((float)(v888 * v888) + (float)(v886 * v886))
                 + (float)((float)(v893 * v893) + (float)(v890 * v890));
            v895 = (float)((float)v882 - (float)v879) * *(float *)(v14 + 4 * (v882 + v879));
            v896 = (float)((float)result - (float)v877)
                 * *(float *)(v14 + 4 * (result + v877));
            v897 = (float)((float)v883 - (float)v880) * *(float *)(v14 + 4 * (v883 + v880));
            v898 = (float)((float)v881 - (float)v878) * *(float *)(v14 + 4 * (v881 + v878));
            v899 = (float)((float)((float)(v896 * v896) + (float)(v895 * v895)) + (float)(v897 * v897))
                 + (float)(v898 * v898);
            v658 = v899 < v894;
            v900 = v894 / v899;
            v901 = v899 / v894;
            if (v658)
            {
              v901 = v900;
              v902 = 2;
            }
            else
            {
              v902 = 0;
            }
            v903 = (float)(v885 - v889) * *(float *)(v14 + 4 * (v879 + v877));
            v904 = (float)((float)v882 - v892) * *(float *)(v14 + 4 * (v882 + result));
            v905 = (float)(v892 - v884) * *(float *)(v14 + 4 * (result + v880));
            v906 = (float)(v884 - (float)v878) * *(float *)(v14 + 4 * (v880 + v878));
            v907 = (float)(v887 - v891) * *(float *)(v14 + 4 * (v883 + v881));
            v908 = (float)(v892 - v885) * *(float *)(v14 + 4 * (result + v879));
            v909 = (float)(v884 - v889) * *(float *)(v14 + 4 * (v880 + v877));
            v910 = (float)(v887 - v892) * *(float *)(v14 + 4 * (v883 + result));
            v911 = *(float *)(v14 + 4 * (v881 + v880));
            v912 = (float)((float)((float)(v910 * v910) + (float)(v909 * v909)) + (float)(v908 * v908))
                 + (float)((float)((float)(v891 - v884) * v911) * (float)((float)(v891 - v884) * v911));
            v913 = (float)((float)((float)((float)(v904 * v904) + (float)(v903 * v903)) + (float)(v905 * v905))
                         + (float)((float)(v907 * v907) + (float)(v906 * v906)))
                 * 1.6;
            v914 = v912 + v912;
            v658 = v914 < v913;
            v915 = v913 / v914;
            v730 = v914 / v913;
            if (v658)
            {
              v730 = v915;
              v731 = 3;
            }
            else
            {
              v731 = 1;
            }
            if (v730 <= v901)
            {
              v730 = v901;
              v731 = v902;
            }
            if (v730 < v7)
              goto LABEL_46;
          }
          if (v135 == 4)
          {
            v135 = v731;
          }
          else if (v25 <= v730)
          {
            v135 = v731;
          }
LABEL_46:
          v129 |= v135 << v130;
          v130 += 4;
          if (v130 == 32)
          {
            v130 = 0;
            *(_DWORD *)v131 = v129;
            v131 += 4;
            v129 = 0;
          }
          ++v21;
          ++v20;
          ++v133;
          ++v132;
          if (v997 == v133)
          {
            v917 = v970;
            v916 = v971;
            v918 = v979;
            if (v130 < 8)
              goto LABEL_12;
            goto LABEL_408;
          }
        }
      }
LABEL_407:
      v129 = 1092;
      v130 = 12;
      v918 = v979;
      v131 = v979;
      v917 = v970;
      v916 = v971;
      do
      {
LABEL_408:
        *v131++ = v129;
        v129 >>= 8;
        v130 -= 8;
      }
      while (v130 > 7);
LABEL_12:
      *v131 = v129 | 0x40;
      v26 = v976 + 1;
      v24 = v977 + v988;
      v131[1] = 68;
      v22 = &v918[v916];
      v980 = (unsigned __int16 *)((char *)v980 + v988);
      v23 = v978;
      if (v976 + 1 == v917)
        return result;
    }
  }
  v15 = v3 - 3;
  if (v3 - 3 >= 4)
    goto LABEL_11;
  return result;
}

void sub_1D53832D0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  char *v3;
  size_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  char *v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  char v30;
  int v31;
  unsigned int v32;
  __int16 v33;
  unsigned int v34;
  __int16 v35;
  unint64_t v36;
  int v37;
  char *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  __int16 v56;
  int v57;
  int v58;
  char v59;
  int v60;
  unsigned int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  size_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unsigned int v72;
  int v73;
  char v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  int v81;

  v78 = a2[135];
  v2 = a2[136];
  v68 = a2[138];
  v70 = a2[137];
  v3 = (char *)a2[139];
  v4 = a2[140];
  v75 = *(_QWORD *)(a1 + 1128);
  v63 = *(_QWORD *)(a1 + 1136);
  v5 = *(_QWORD *)(a1 + 1144);
  v6 = *(_DWORD *)(a1 + 1152);
  v7 = *(_DWORD *)(a1 + 1156);
  v8 = *(_DWORD *)(a1 + 1160);
  v9 = *(_DWORD *)(a1 + 1164);
  v10 = *(_DWORD *)(a1 + 1168);
  v11 = *(_DWORD *)(a1 + 160);
  bzero(v3, v4);
  v12 = &v3[v4];
  if ((unint64_t)(v2 - 3) < 3)
  {
    v21 = &v3[v4];
  }
  else
  {
    v80 = v9;
    v81 = v10;
    v72 = v8;
    v73 = v7;
    v74 = v6;
    v79 = v78 - 2;
    if (v79 <= 2)
    {
      v62 = 2;
      do
      {
        v62 += 2;
        v21 = &v12[v4];
        *(_QWORD *)v12 = 0;
        v12 += v4;
      }
      while (v62 < v2 - 3);
    }
    else
    {
      v77 = v5;
      v13 = 0;
      v14 = 0;
      v76 = 0;
      v15 = -(uint64_t)(v68 >> 1);
      v16 = (v68 >> 1) + 2;
      v17 = (v68 & 0xFFFFFFFFFFFFFFFELL) - 1;
      v18 = v68 | 1;
      v64 = 2 * v68;
      v19 = 2;
      v20 = 2 * (v68 >> 1);
      v21 = &v3[v4];
      v22 = v70 + 2 * (v68 & 0xFFFFFFFFFFFFFFFELL) + 2 * (v11 != 4);
      v23 = 1;
      v24 = 3 * (v68 >> 1);
      v25 = v81;
      v65 = v2 - 3;
      v66 = v4;
      do
      {
        v69 = v19;
        v71 = v21;
        *(_DWORD *)v21 = 0;
        v26 = v21 + 4;
        v67 = v22;
        v27 = v22;
        v28 = 2;
        do
        {
          v36 = v27 + 4;
          v37 = *(unsigned __int16 *)(v27 + 4 + 2 * v15);
          v38 = v26;
          v39 = *(unsigned __int16 *)(v27 + 2);
          v40 = *(unsigned __int16 *)(v27 + v20);
          v41 = *(unsigned __int16 *)(v27 + 4 + v20);
          v42 = *(unsigned __int16 *)(v27 + 4 + 2 * v16);
          v43 = *(unsigned __int16 *)(v27 + 4 + 2 * v17);
          v44 = *(unsigned __int16 *)(v27 + 4 + 2 * v18);
          v45 = *(unsigned __int16 *)(v27 + 6);
          v46 = *(unsigned __int16 *)(v27 + 4 + 2 * v24);
          v47 = ((v43 - v45) & ((v43 - v45) >> 31)) + v45;
          if (v43 <= v45)
            v48 = *(unsigned __int16 *)(v27 + 6);
          else
            v48 = *(unsigned __int16 *)(v27 + 4 + 2 * v17);
          v49 = 16 * v48 / v47;
          if (v47 >= 100)
            v50 = v49;
          else
            v50 = 0;
          v51 = ((v44 - v39) & ((v44 - v39) >> 31)) + v39;
          if (v44 <= v39)
            v52 = v39;
          else
            v52 = v44;
          v53 = 16 * v52 / v51;
          if (v51 >= 100)
            v54 = v53;
          else
            v54 = 0;
          v55 = v50 * v50 + v54 * v54;
          if (v55 >= 0xFFFF)
            v56 = -1;
          else
            v56 = v55;
          v57 = (v25
               * *(unsigned __int16 *)(v63
                                     + 2
                                     * *(unsigned __int16 *)(v77
                                                           + ((v41 + ((v37 + v40 + v42 + v46 + 2) >> 2) + 1) & 0x7FFFFFFE)))
               + 2048) >> 12;
          v58 = 6 * v57 * v57;
          if (v58 <= v80)
          {
            v31 = v73;
            v30 = v74;
            v29 = v72;
          }
          else
          {
            if ((v58 & v76) != v23)
            {
              if (v58 < 0x1000)
              {
                v14 = 0;
                v13 = 0;
              }
              else
              {
                v59 = -1;
                v60 = v58;
                do
                {
                  v61 = v60 >> 13;
                  v60 >>= 1;
                  ++v59;
                }
                while (v61);
                v13 = 1 << v59;
                v14 = v59 + 1;
              }
              v76 = -2048 << v14;
              v23 = 2048 << v14;
            }
            v29 = (*(_DWORD *)(v75 + 4 * ((v13 + v58) >> v14)) + 1024) >> 11;
            v30 = v14;
            v31 = v13;
          }
          v32 = (((v41 - v40) * (v41 - v40)
                + (v41 - v37) * (v41 - v37)
                + (v41 - v42) * (v41 - v42)
                + (v45 - v43) * (v45 - v43)
                + (v39 - v44) * (v39 - v44)
                + (v41 - v46) * (v41 - v46)
                + v31) >> v30)
              * v29
              + 32;
          v33 = v32 > 0x3FFF7F;
          v34 = ((int)((v32 >> 3) - 1048560) >> 5) + 0x4000;
          v35 = v33 << 15;
          if (v34 > 0x8000)
            LOWORD(v34) = v35;
          *((_WORD *)v21 + 2) = v34;
          *((_WORD *)v21 + 3) = v56;
          v28 += 2;
          v26 = v38 + 4;
          v21 = v38;
          v27 = v36;
          v25 = v81;
        }
        while (v28 < v79);
        *((_DWORD *)v38 + 1) = 0;
        v19 = v69 + 2;
        v22 = v67 + v64;
        v4 = v66;
        v21 = &v71[v66];
      }
      while (v69 + 2 < v65);
    }
  }
  bzero(v21, v4);
}

uint64_t sub_1D5383678(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  uint64_t result;
  char *v14;
  size_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned __int16 *v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned __int16 *v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  char *v49;
  int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned __int16 *v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned __int16 *v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  unsigned __int16 *v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  unsigned __int16 *v116;
  int v117;
  int v118;
  int v119;
  BOOL v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  int v148;
  int v149;
  unsigned int v150;
  BOOL v151;
  uint64_t v152;
  char *v153;
  char *v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  int v172;
  char *v173;
  char *v174;
  unsigned int v175;
  unsigned int v176;
  uint64_t v177;
  unsigned int v178;
  unsigned int v179;
  __int16 v180;
  uint64_t v181;
  char *v182;
  __int128 v183;
  __int128 v184;
  unsigned __int16 *v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  uint64_t v192;

  v192 = *MEMORY[0x1E0C80C00];
  v3 = a2[141];
  v4 = a2[142];
  v5 = (char *)a2[143];
  v6 = a2[144];
  v181 = a2[145];
  v156 = a2[146];
  v165 = *(_DWORD *)(a1 + 1216);
  v155 = *(_DWORD *)(a1 + 1220);
  v170 = *(_DWORD *)(a1 + 1224);
  v163 = *(_QWORD *)(a1 + 1240);
  v164 = *(_QWORD *)(a1 + 1232);
  v162 = *(_QWORD *)(a1 + 1248);
  v169 = *(_QWORD *)(a1 + 1256);
  v185 = 0;
  v183 = 0u;
  v184 = 0u;
  v7 = (char *)a2[147];
  v8 = (char *)a2[148];
  v9 = (char *)a2[149];
  v10 = 6 * v3;
  memmove(v7, v5, 6 * v3);
  memmove(v8, &v5[v6], 6 * v3);
  v177 = v6;
  v11 = v5;
  v12 = &v5[2 * v6];
  result = (uint64_t)memmove(v9, v12, 6 * v3);
  if ((unint64_t)(v4 - 2) >= 3)
  {
    v14 = v12;
    v15 = 6 * v3;
    v16 = v3 - 2;
    if (v16 > 2)
    {
      v17 = v181 + 2 * v156;
      v166 = a1 + 1264;
      v167 = v16;
      v18 = (uint64_t)&v11[4 * v6 + 24];
      v19 = (uint64_t)&v11[3 * v6 + 24];
      v20 = 2;
      v168 = v6;
      while (1)
      {
        v161 = v18;
        v157 = v20;
        v182 = v7;
        v21 = v14;
        v22 = v17;
        result = (uint64_t)memmove(v9, v14, v15);
        v159 = v22;
        v160 = v21;
        v23 = (unsigned __int16 *)(v21 + 12);
        v24 = (_BYTE *)(v22 + 2);
        v25 = v9 + 24;
        v26 = v8;
        v158 = v19;
        v27 = v19;
        v28 = v161;
        v29 = v182;
        v30 = 2;
        v173 = v9;
        v174 = v8;
        do
        {
          if (*v24)
          {
            v32 = 0;
            v33 = 0;
            v34 = 6 * v30 - 12;
            *(_QWORD *)&v183 = &v182[v34];
            *((_QWORD *)&v183 + 1) = &v8[v34];
            *(_QWORD *)&v184 = &v9[v34];
            *((_QWORD *)&v184 + 1) = (char *)v23 + v6 - 12;
            v185 = &v23[v177 - 6];
            do
            {
              v35 = (unsigned __int16 *)&v29[v33];
              v36 = *(unsigned __int16 *)&v29[v33];
              v37 = *(unsigned __int16 *)&v29[v33 + 6];
              if ((int)v36 >= (int)v37)
                v38 = *(unsigned __int16 *)&v29[v33 + 6];
              else
                v38 = *(unsigned __int16 *)&v29[v33];
              if (v36 <= v37)
                v36 = *(unsigned __int16 *)&v29[v33 + 6];
              v39 = v35[6];
              if (v38 >= (int)v39)
                v38 = v35[6];
              v40 = v35[9];
              if (v36 <= v39)
                v36 = v35[6];
              if (v38 >= (int)v40)
                v41 = v35[9];
              else
                v41 = v38;
              if (v36 <= v40)
                v36 = v35[9];
              v42 = v35[12];
              if (v41 >= (int)v42)
                v41 = v42;
              if (v36 > v42)
                v42 = v36;
              v43 = (unsigned __int16 *)&v26[v33];
              v44 = *(unsigned __int16 *)&v26[v33];
              if (v41 >= v44)
                v41 = *(unsigned __int16 *)&v26[v33];
              if ((int)v42 <= v44)
                v42 = *(unsigned __int16 *)&v26[v33];
              v45 = v43[3];
              if (v41 >= (int)v45)
                v41 = v43[3];
              if (v42 <= v45)
                v42 = v43[3];
              v46 = v43[6];
              if (v41 >= (int)v46)
                v41 = v43[6];
              if (v42 <= v46)
                v42 = v43[6];
              v47 = v43[9];
              if (v41 >= (int)v47)
                v41 = v43[9];
              if (v42 <= v47)
                v42 = v43[9];
              v48 = v43[12];
              if (v41 >= (int)v48)
                v41 = v48;
              v49 = &v25[v33];
              if (v42 <= v48)
                v42 = v48;
              v50 = *((unsigned __int16 *)v49 - 12);
              if (v41 >= v50)
                v41 = *((unsigned __int16 *)v49 - 12);
              v51 = *((unsigned __int16 *)v49 - 9);
              if ((int)v42 <= v50)
                v42 = *((unsigned __int16 *)v49 - 12);
              if (v41 >= (int)v51)
                v52 = *((unsigned __int16 *)v49 - 9);
              else
                v52 = v41;
              if (v42 <= v51)
                v42 = *((unsigned __int16 *)v49 - 9);
              v53 = *((unsigned __int16 *)v49 - 6);
              if (v52 >= (int)v53)
                v52 = *((unsigned __int16 *)v49 - 6);
              if (v42 <= v53)
                v42 = *((unsigned __int16 *)v49 - 6);
              v54 = *((unsigned __int16 *)v49 - 3);
              if (v52 >= (int)v54)
                v52 = *((unsigned __int16 *)v49 - 3);
              if (v42 <= v54)
                v42 = *((unsigned __int16 *)v49 - 3);
              v55 = *(unsigned __int16 *)v49;
              if (v52 >= (int)v55)
                v52 = *(unsigned __int16 *)v49;
              if (v42 <= v55)
                v42 = *(unsigned __int16 *)v49;
              v56 = (unsigned __int16 *)(v27 + v33);
              v57 = *(unsigned __int16 *)(v27 + v33 - 24);
              if (v52 >= v57)
                v52 = *(unsigned __int16 *)(v27 + v33 - 24);
              if ((int)v42 <= v57)
                v42 = *(unsigned __int16 *)(v27 + v33 - 24);
              v58 = *(v56 - 9);
              if (v52 >= (int)v58)
                v52 = *(v56 - 9);
              if (v42 <= v58)
                v42 = *(v56 - 9);
              v59 = *(v56 - 6);
              if (v52 >= (int)v59)
                v52 = *(v56 - 6);
              v60 = *(v56 - 3);
              if (v42 <= v59)
                v42 = *(v56 - 6);
              if (v52 >= (int)v60)
                v52 = *(v56 - 3);
              if (v42 <= v60)
                v42 = *(v56 - 3);
              v61 = *v56;
              if (v52 >= (int)v61)
                v52 = v61;
              if (v42 <= v61)
                v42 = v61;
              v62 = (unsigned __int16 *)(v28 + v33);
              v63 = *(unsigned __int16 *)(v28 + v33 - 24);
              if (v52 >= v63)
                v52 = *(unsigned __int16 *)(v28 + v33 - 24);
              if ((int)v42 <= v63)
                v42 = *(unsigned __int16 *)(v28 + v33 - 24);
              v64 = *(v62 - 9);
              if (v52 >= (int)v64)
                v52 = *(v62 - 9);
              if (v42 <= v64)
                v42 = *(v62 - 9);
              v65 = *(v62 - 6);
              if (v52 >= (int)v65)
                v52 = *(v62 - 6);
              if (v42 <= v65)
                v42 = *(v62 - 6);
              v66 = *(v62 - 3);
              if (v52 >= (int)v66)
                v52 = *(v62 - 3);
              if (v42 <= v66)
                v42 = *(v62 - 3);
              v67 = *v62;
              if (v52 >= (int)v67)
                v52 = v67;
              *(int *)((char *)&v189 + v32) = v52;
              if (v42 <= v67)
                v42 = v67;
              *(int *)((char *)&v186 + v32) = v42;
              v33 += 2;
              v32 += 4;
            }
            while (v33 != 6);
            v68 = v186 - v189;
            result = v187 - v190 > v186 - v189;
            if (v187 - v190 > v186 - v189)
              v68 = v187 - v190;
            if (v188 - v191 > v68)
            {
              v68 = v188 - v191;
              result = 2;
            }
            if (v68)
            {
              v69 = 0;
              v70 = 0;
              v71 = 0;
              v72 = 0;
              v73 = 0;
              v74 = 0;
              v75 = 0;
              v76 = 0;
              v77 = 0;
              v78 = (*(&v186 + result) + *(&v189 + result) + 1) >> 1;
              do
              {
                v79 = *(unsigned __int16 **)((char *)&v183 + v69);
                v80 = *v79;
                v81 = v75 + v80;
                v82 = v79[1];
                v83 = v76 + v82;
                v84 = v79[2];
                v85 = v77 + v84;
                v86 = v71 + v80;
                v87 = v72 + v82;
                v88 = v73 + v84;
                if (v78 <= v79[result])
                {
                  v81 = v75;
                }
                else
                {
                  v77 = v85;
                  v76 = v83;
                }
                if (v78 <= v79[result])
                  v73 = v88;
                else
                  ++v74;
                if (v78 > v79[result])
                {
                  v86 = v71;
                }
                else
                {
                  v72 = v87;
                  ++v70;
                }
                v89 = v79[3];
                v90 = v79[4];
                v91 = v79[5];
                v92 = v81 + v89;
                v93 = v76 + v90;
                v94 = v77 + v91;
                v95 = v86 + v89;
                v96 = v72 + v90;
                v97 = v73 + v91;
                if (v78 <= v79[result + 3])
                {
                  v73 = v97;
                }
                else
                {
                  v77 = v94;
                  v76 = v93;
                  v81 = v92;
                  ++v74;
                }
                if (v78 <= v79[result + 3])
                {
                  v72 = v96;
                  v86 = v95;
                  ++v70;
                }
                v98 = v79[6];
                v99 = v79[7];
                v100 = v79[8];
                v101 = v81 + v98;
                v102 = v76 + v99;
                v103 = v77 + v100;
                v104 = v86 + v98;
                v105 = v72 + v99;
                v106 = v73 + v100;
                if (v78 <= v79[result + 6])
                {
                  v73 = v106;
                }
                else
                {
                  v77 = v103;
                  v76 = v102;
                  v81 = v101;
                  ++v74;
                }
                if (v78 <= v79[result + 6])
                {
                  v72 = v105;
                  v86 = v104;
                  ++v70;
                }
                v107 = v79[9];
                v108 = v79[10];
                v109 = v79[11];
                v110 = v81 + v107;
                v111 = v76 + v108;
                v112 = v77 + v109;
                v113 = v86 + v107;
                v114 = v72 + v108;
                v115 = v73 + v109;
                if (v78 <= v79[result + 9])
                {
                  v73 = v115;
                }
                else
                {
                  v77 = v112;
                  v76 = v111;
                  v81 = v110;
                  ++v74;
                }
                if (v78 <= v79[result + 9])
                {
                  v72 = v114;
                  v86 = v113;
                  ++v70;
                }
                v117 = v79[12];
                v116 = v79 + 12;
                v118 = v116[result];
                v119 = v116[1];
                LODWORD(v116) = v116[2];
                v120 = v78 <= v118;
                v121 = v81 + v117;
                v122 = v76 + v119;
                v123 = v77 + (_DWORD)v116;
                v124 = v86 + v117;
                v125 = v72 + v119;
                v126 = v73 + (_DWORD)v116;
                if (v120)
                {
                  v75 = v81;
                }
                else
                {
                  v77 = v123;
                  v76 = v122;
                  v75 = v121;
                }
                if (v120)
                  v73 = v126;
                else
                  ++v74;
                if (v120)
                  v72 = v125;
                if (v120)
                  v71 = v124;
                else
                  v71 = v86;
                if (v120)
                  ++v70;
                v69 += 8;
              }
              while (v69 != 40);
              v127 = *(unsigned __int16 *)(v169 + 2 * *v23);
              v128 = *(unsigned __int16 *)(v169 + 2 * v23[1]);
              v129 = *(unsigned __int16 *)(v169 + 2 * v23[2]);
              v130 = *(_DWORD *)(v166 + 4 * v74);
              v179 = v130 * v75;
              v131 = (v130 * v75) >> 15;
              v178 = v130 * v76;
              v132 = (v130 * v76) >> 15;
              v133 = (v130 * v77) >> 15;
              v134 = *(_DWORD *)(v166 + 4 * v70);
              v176 = v134 * v71;
              v135 = (v134 * v71) >> 15;
              v175 = v134 * v72;
              v136 = (v134 * v72) >> 15;
              v171 = v71 + v75;
              v172 = v72 + v76;
              v137 = *(unsigned __int16 *)(v169 + 2 * v131);
              v138 = *(unsigned __int16 *)(v169 + 2 * v132);
              v180 = v133;
              v139 = *(unsigned __int16 *)(v169 + 2 * v133);
              v140 = (v134 * v73) >> 15;
              v141 = *(unsigned __int16 *)(v169 + 2 * v135);
              v142 = *(unsigned __int16 *)(v169 + 2 * v136);
              v143 = v73 + v77;
              v144 = *(unsigned __int16 *)(v169 + 2 * v140);
              v145 = (((int)v127 - v137) >> 1) * (((int)v127 - v137) >> 1);
              if (v170)
              {
                result = (3 * v137);
                if (result >= v141
                  && (result = (3 * v138), result >= v142)
                  && (result = (3 * v139), result >= v144)
                  || v74 == 1)
                {
                  v146 = v145
                       + (((int)v128 - v138) >> 1) * (((int)v128 - v138) >> 1)
                       + (((int)v129 - v139) >> 1) * (((int)v129 - v139) >> 1);
                  v147 = ((int)(v127 - v141) >> 1) * ((int)(v127 - v141) >> 1)
                       + ((int)(v128 - v142) >> 1) * ((int)(v128 - v142) >> 1)
                       + ((int)(v129 - v144) >> 1) * ((int)(v129 - v144) >> 1);
                  result = 9 * v146;
                  if (result >= v147)
                  {
                    result = 9 * v147;
                    v16 = v167;
                    v6 = v168;
                    v9 = v173;
                    v8 = v174;
                    if (result < v146)
                      goto LABEL_6;
                    if (v74 <= 16)
                    {
                      if (v70 <= 16)
                      {
                        *v23 = (v171 * v155) >> 15;
                        v23[1] = (v172 * v155) >> 15;
                        v31 = (v143 * v155) >> 15;
                        goto LABEL_7;
                      }
LABEL_6:
                      *v23 = v176 >> 15;
                      v23[1] = v175 >> 15;
                      LOWORD(v31) = v140;
LABEL_7:
                      v23[2] = v31;
                      goto LABEL_8;
                    }
LABEL_176:
                    *v23 = v179 >> 15;
                    v23[1] = v178 >> 15;
LABEL_169:
                    LOWORD(v31) = v180;
                    goto LABEL_7;
                  }
                }
              }
              else
              {
                v148 = (v165 * *(unsigned __int16 *)(v164 + 2 * v127) + 2048) >> 12;
                v149 = (v165 * *(unsigned __int16 *)(v163 + 2 * v128) + 2048) >> 12;
                v150 = v148 * v148
                     + v149 * v149
                     + ((v165 * *(unsigned __int16 *)(v162 + 2 * v129) + 2048) >> 12)
                     * ((v165 * *(unsigned __int16 *)(v162 + 2 * v129) + 2048) >> 12);
                result = (v145
                                      + (((int)v128 - v138) >> 1) * (((int)v128 - v138) >> 1)
                                      + (((int)v129 - v139) >> 1) * (((int)v129 - v139) >> 1));
                if (result >= v150 || v74 == 1)
                {
                  result = (((int)(v127 - v141) >> 1) * ((int)(v127 - v141) >> 1)
                                        + ((int)(v128 - v142) >> 1) * ((int)(v128 - v142) >> 1)
                                        + ((int)(v129 - v144) >> 1) * ((int)(v129 - v144) >> 1));
                  v151 = result >= v150 || v70 == 1;
                  v9 = v173;
                  v8 = v174;
                  if (!v151)
                  {
                    *v23 = v176 >> 15;
                    v23[1] = v175 >> 15;
                    LOWORD(v31) = v140;
                    v16 = v167;
                    v6 = v168;
                    goto LABEL_7;
                  }
                  v16 = v167;
                  v6 = v168;
                  if (v74 <= 16)
                  {
                    if (v70 <= 16)
                    {
                      *v23 = (v171 * v155) >> 15;
                      v23[1] = (v172 * v155) >> 15;
                      v31 = (v143 * v155) >> 15;
                      goto LABEL_7;
                    }
                    goto LABEL_6;
                  }
                  goto LABEL_176;
                }
              }
              *v23 = v179 >> 15;
              v23[1] = v178 >> 15;
              v16 = v167;
              v6 = v168;
              v9 = v173;
              v8 = v174;
              goto LABEL_169;
            }
          }
LABEL_8:
          ++v30;
          v23 += 3;
          ++v24;
          v29 += 6;
          v28 += 6;
          v27 += 6;
          v25 += 6;
          v26 += 6;
        }
        while (v30 != v16);
        v20 = v157 + 1;
        v14 = &v160[v6];
        v17 = v159 + v156;
        v15 = v10;
        v18 = v161 + v6;
        v19 = v158 + v6;
        v7 = v8;
        v8 = v9;
        v9 = v182;
        if (v157 + 1 == v4 - 2)
          return result;
      }
    }
    v152 = v4 - 4;
    do
    {
      v153 = v7;
      v154 = v14;
      result = (uint64_t)memmove(v9, v14, v10);
      v14 = &v154[v6];
      v7 = v8;
      v8 = v9;
      v9 = v153;
      --v152;
    }
    while (v152);
  }
  return result;
}

uint64_t sub_1D538401C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t result;
  uint64_t (*v16)(uint64_t, _QWORD *);

  v4 = a2[150];
  v5 = a2[151];
  if (v5)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = 0;
    v8 = a2[154];
    v9 = *(_QWORD *)(a1 + 1408);
    v10 = a2[152];
    v11 = a2[153];
    do
    {
      v12 = 0;
      v13 = v4;
      do
      {
        v14 = (_WORD *)(v11 + v12);
        *v14 = *(_WORD *)(v9 + 2 * *(unsigned __int16 *)(v10 + v12));
        v14[1] = *(_WORD *)(v9 + 2 * *(unsigned __int16 *)(v10 + v12 + 2));
        v14[2] = *(_WORD *)(v9 + 2 * *(unsigned __int16 *)(v10 + v12 + 4));
        v12 += 6;
        --v13;
      }
      while (v13);
      ++v7;
      v10 += v8;
      v11 += v8;
    }
    while (v7 != v5);
  }
  result = (*(uint64_t (**)(uint64_t, _QWORD *))(a1 + 1488))(a1, a2);
  v16 = *(uint64_t (**)(uint64_t, _QWORD *))(a1 + 1496);
  if (v16)
    return v16(a1, a2);
  return result;
}

unint64_t sub_1D53840E4(unint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  char v11;
  _WORD *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unint64_t v16;
  __int16 *v17;
  const __int16 *v18;
  const __int16 *v19;
  uint16x8_t v20;
  const __int16 *v21;
  const __int16 *v22;
  const __int16 *v23;
  const __int16 *v24;
  unint64_t v25;
  unsigned __int16 *v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  _WORD *v36;
  unsigned __int16 *v37;
  unsigned __int16 *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  signed int v43;
  unsigned int v44;
  int v45;
  signed int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int16 *v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  signed int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  unsigned __int16 *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  signed int v80;
  uint64_t v82;
  uint64_t v83;
  unsigned __int16 *v84;
  uint64_t v85;
  unsigned __int16 *v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  signed int v99;
  signed int v100;
  signed int v101;
  int v102;
  int v103;
  unsigned __int16 *v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  signed int v112;
  unsigned __int16 *v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  unint64_t v123;
  BOOL v124;
  unint64_t v125;
  char v127;
  unsigned __int16 *v128;
  uint16x8_t v129;
  unsigned __int16 *v130;
  uint64_t v131;
  unsigned __int16 *v132;
  unsigned __int16 *v133;
  unsigned __int16 *v134;
  uint64_t v135;
  unint64_t v136;
  __int16 *v137;
  const __int16 *v138;
  const __int16 *v139;
  const __int16 *v140;
  const __int16 *v141;
  const __int16 *v142;
  const __int16 *v143;
  unint64_t v144;
  unsigned __int16 *v145;
  int v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  int v150;
  uint64_t v151;
  _WORD *v152;
  unsigned __int16 *v153;
  unsigned __int16 *v154;
  unsigned __int16 *v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  signed int v160;
  unsigned int v161;
  int v162;
  signed int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  unsigned __int16 *v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  unsigned int v179;
  int v180;
  signed int v181;
  int v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  unsigned __int16 *v191;
  uint64_t v192;
  unsigned __int16 *v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  unsigned __int16 *v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  signed int v208;
  unsigned __int16 *v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  uint64_t v218;
  unsigned __int16 *v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  signed int v226;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  signed int v234;
  signed int v235;
  signed int v236;
  int v237;
  int v238;
  int v239;
  unsigned __int16 *v240;
  unsigned __int16 *v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  char v245;
  unsigned __int16 *v246;
  unsigned __int16 *v247;
  uint64_t __len;
  size_t __lena;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char v253;
  uint64_t v254;
  unint64_t v255;
  _WORD *v256;
  uint64_t v257;
  uint64_t v258;
  _WORD *v259;
  unsigned __int16 *v260;
  unsigned __int16 *v261;
  unint64_t v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  unsigned __int16 *__dst;
  unsigned __int16 v268;
  unsigned __int16 v269;
  unint64_t v270;
  __int16 v271;
  uint64_t v272;
  int v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  int v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  signed int v289;
  int v290;
  int v291;
  int v292;
  unsigned __int16 *v293;
  unsigned __int16 *v294;
  unsigned __int16 *v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  int16x8x3_t v299;
  int16x8x3_t v300;
  int16x8x3_t v301;
  int16x8x3_t v302;
  int16x8x3_t v303;
  int16x8x3_t v304;
  int16x8x3_t v305;
  int16x8x3_t v306;
  int16x8x3_t v307;
  int16x8x3_t v308;
  int16x8x3_t v309;
  int16x8x3_t v310;

  v2 = a2[150];
  v3 = a2[151];
  v259 = (_WORD *)a2[153];
  v4 = a2[154];
  v5 = (unsigned __int16 *)a2[155];
  v297 = a2[156];
  v258 = a2[160];
  __dst = (unsigned __int16 *)a2[157];
  v260 = (unsigned __int16 *)a2[158];
  v290 = *(_DWORD *)(result + 1444);
  v291 = *(_DWORD *)(result + 1440);
  v289 = *(_DWORD *)(result + 1448);
  v274 = *(_DWORD *)(result + 1452);
  v292 = *(_DWORD *)(result + 1456);
  v239 = *(_DWORD *)(result + 1460);
  v278 = *(_DWORD *)(result + 1464);
  v277 = *(_QWORD *)(result + 1472);
  v298 = *(_DWORD *)(result + 1480);
  v264 = *(_DWORD *)(result + 1484);
  v287 = *(_QWORD *)(result + 1424);
  v288 = *(_QWORD *)(result + 1416);
  v265 = a2[161];
  v275 = 2 * v265;
  v286 = *(_QWORD *)(result + 1432);
  v266 = v2;
  v272 = v3;
  v276 = v4;
  if (v3)
  {
    v6 = 0;
    v250 = v2 - 2;
    v262 = v2 - 1;
    __len = 6 * v2;
    v7 = v2 - 4;
    v8 = v260 + 6 >= &__dst[3 * v2] || __dst >= &v260[3 * v2 - 6];
    v242 = v7 & 0xFFFFFFFFFFFFFFF8 | 2;
    v243 = v2 - 4;
    v244 = v7 & 0xFFFFFFFFFFFFFFF8;
    v9 = 3 * (v7 & 0xFFFFFFFFFFFFFFF8);
    v240 = &__dst[v9 + 6];
    v241 = &v260[v9 + 6];
    v11 = !v8 || v7 < 8;
    v245 = v11;
    v257 = a2[160];
    v295 = (unsigned __int16 *)a2[155];
    v12 = (_WORD *)a2[153];
    v293 = v5;
    while (1)
    {
      v254 = v6;
      v256 = v12;
      result = (unint64_t)memmove(__dst, v12, __len);
      *v260 = (__dst[6] - *__dst + 8 * *__dst + 4 * (__dst[3] + *__dst) + 8) >> 4;
      v260[1] = (__dst[7] - __dst[1] + 8 * __dst[1] + 4 * (__dst[4] + __dst[1]) + 8) >> 4;
      v260[2] = (__dst[8] - __dst[2] + 8 * __dst[2] + 4 * (__dst[5] + __dst[2]) + 8) >> 4;
      v260[3] = (*__dst + 6 * __dst[3] + __dst[9] + 4 * (*__dst + __dst[6]) + 8) >> 4;
      v260[4] = (__dst[1] + 6 * __dst[4] + __dst[10] + 4 * (__dst[1] + __dst[7]) + 8) >> 4;
      v260[5] = (__dst[2] + 6 * __dst[5] + __dst[11] + 4 * (__dst[2] + __dst[8]) + 8) >> 4;
      v13 = v260 + 6;
      v14 = __dst + 6;
      if (v250 < 3)
        goto LABEL_21;
      if ((v245 & 1) != 0)
        break;
      v16 = v244;
      v17 = (__int16 *)(v260 + 6);
      v18 = (const __int16 *)(__dst + 6);
      v19 = (const __int16 *)(__dst + 6);
      v20.i64[0] = 0x6000600060006;
      v20.i64[1] = 0x6000600060006;
      do
      {
        v21 = v18 + 3;
        v22 = v18 - 3;
        v299 = vld3q_s16(v19);
        v19 += 24;
        v301 = vld3q_s16(v21);
        v304 = vld3q_s16(v22);
        v23 = v18 + 6;
        v306 = vld3q_s16(v23);
        v24 = v18 - 6;
        v308 = vld3q_s16(v24);
        v310.val[0] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vaddw_u16((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*(uint16x4_t *)v299.val[0].i8, (uint16x4_t)0x6000600060006), *(uint16x4_t *)v306.val[0].i8), vshlq_n_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v304.val[0].i8, *(uint16x4_t *)v301.val[0].i8), 2uLL)), *(uint16x4_t *)v308.val[0].i8), 4uLL), (int32x4_t)vaddw_high_u16((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmovl_high_u16((uint16x8_t)v306.val[0]),
                                                                (uint16x8_t)v299.val[0],
                                                                v20),
                                                   vshlq_n_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v304.val[0], (uint16x8_t)v301.val[0]), 2uLL)), (uint16x8_t)v308.val[0]), 4uLL);
        v310.val[1] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vaddw_u16((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*(uint16x4_t *)v299.val[1].i8, (uint16x4_t)0x6000600060006), *(uint16x4_t *)v306.val[1].i8), vshlq_n_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v304.val[1].i8, *(uint16x4_t *)v301.val[1].i8), 2uLL)), *(uint16x4_t *)v308.val[1].i8), 4uLL), (int32x4_t)vaddw_high_u16((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmovl_high_u16((uint16x8_t)v306.val[1]),
                                                                (uint16x8_t)v299.val[1],
                                                                v20),
                                                   vshlq_n_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v304.val[1], (uint16x8_t)v301.val[1]), 2uLL)), (uint16x8_t)v308.val[1]), 4uLL);
        v310.val[2] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vaddw_u16((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*(uint16x4_t *)v299.val[2].i8, (uint16x4_t)0x6000600060006), *(uint16x4_t *)v306.val[2].i8), vshlq_n_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v304.val[2].i8, *(uint16x4_t *)v301.val[2].i8), 2uLL)), *(uint16x4_t *)v308.val[2].i8), 4uLL), (int32x4_t)vaddw_high_u16((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmovl_high_u16((uint16x8_t)v306.val[2]),
                                                                (uint16x8_t)v299.val[2],
                                                                v20),
                                                   vshlq_n_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v304.val[2], (uint16x8_t)v301.val[2]), 2uLL)), (uint16x8_t)v308.val[2]), 4uLL);
        vst3q_s16(v17, v310);
        v17 += 24;
        v18 = v19;
        v16 -= 8;
      }
      while (v16);
      v13 = v241;
      v15 = v242;
      v14 = v240;
      if (v243 != v244)
        goto LABEL_19;
LABEL_21:
      *v13 = (v14[3] + 6 * *v14 + *(v14 - 6) + 4 * (*(v14 - 3) + v14[3]) + 8) >> 4;
      v13[1] = (v14[4] + 6 * v14[1] + *(v14 - 5) + 4 * (*(v14 - 2) + v14[4]) + 8) >> 4;
      v13[2] = (v14[5] + 6 * v14[2] + *(v14 - 4) + 4 * (*(v14 - 1) + v14[5]) + 8) >> 4;
      v13[3] = (*(v14 - 3) - v14[3] + 8 * v14[3] + 4 * (*v14 + v14[3]) + 8) >> 4;
      v13[4] = (*(v14 - 2) - v14[4] + 8 * v14[4] + 4 * (v14[1] + v14[4]) + 8) >> 4;
      v13[5] = (*(v14 - 1) - v14[5] + 8 * v14[5] + 4 * (v14[2] + v14[5]) + 8) >> 4;
      if (v2)
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 1;
        v33 = 2;
        v34 = -v292;
        v36 = v256;
        v35 = v257;
        v37 = v295;
        v38 = v260;
        result = (unint64_t)__dst;
        do
        {
          v40 = *v38;
          v41 = v38[1];
          v42 = v38[2];
          v43 = ((*(unsigned __int16 *)(v288 + 2 * v40) * *(unsigned __int16 *)(v288 + 2 * v40)
                + *(unsigned __int16 *)(v287 + 2 * v41) * *(unsigned __int16 *)(v287 + 2 * v41)
                + *(unsigned __int16 *)(v286 + 2 * v42) * *(unsigned __int16 *)(v286 + 2 * v42))
               * v291) >> v290;
          v44 = *v37;
          v45 = v37[1];
          v283 = v30;
          v284 = v29;
          v281 = v33;
          v279 = v34;
          if (v44 <= 0x7F && v298 > v45)
          {
            if (v289 <= v43)
              v46 = ((*(unsigned __int16 *)(v288 + 2 * v40) * *(unsigned __int16 *)(v288 + 2 * v40)
                    + *(unsigned __int16 *)(v287 + 2 * v41) * *(unsigned __int16 *)(v287 + 2 * v41)
                    + *(unsigned __int16 *)(v286 + 2 * v42) * *(unsigned __int16 *)(v286 + 2 * v42))
                   * v291) >> v290;
            else
              v46 = v289;
            v47 = (v31 - v292) & ~(((int)v31 - v292) >> 31);
            if (v292 + (int)v31 < (int)v2)
              v48 = v292 + v31 + 1;
            else
              v48 = v2;
            v49 = *(unsigned __int16 *)result;
            v50 = *(unsigned __int16 *)(result + 2);
            v51 = *(unsigned __int16 *)(result + 4);
            if (v47 >= v48)
            {
              v58 = 1;
            }
            else
            {
              v52 = 3 * (v34 & ~(v34 >> 31));
              v53 = v29 - v52 * 2;
              v54 = &__dst[v52 + 2];
              v55 = v49 + 2;
              v56 = v50 + 1;
              v57 = v51 + 2;
              v58 = 1;
              do
              {
                if (v53)
                {
                  v59 = *(v54 - 2);
                  v60 = *(v54 - 1);
                  v61 = *v54;
                  if (((v55 - v59) >> 2) * ((v55 - v59) >> 2)
                     + ((v56 - v60) >> 1) * ((v56 - v60) >> 1)
                     + ((v57 - v61) >> 2) * ((v57 - v61) >> 2) <= v46)
                  {
                    ++v58;
                    v49 += v59;
                    v50 += v60;
                    v51 += v61;
                  }
                }
                ++v47;
                v53 -= 6;
                v54 += 3;
              }
              while (v47 < v48);
            }
            if (!v278 || !v31 || v58 != 1 || v31 >= v262)
              goto LABEL_23;
LABEL_76:
            v93 = *(unsigned __int16 *)(result - 6);
            v94 = *(unsigned __int16 *)(result - 4);
            v95 = *(unsigned __int16 *)(result - 2);
            v96 = *(unsigned __int16 *)(result + 6);
            v97 = *(unsigned __int16 *)(result + 8);
            v98 = *(unsigned __int16 *)(result + 10);
            v99 = (2404 * v94 + 1225 * v93 + 467 * v95 + 2048) >> 12;
            v100 = (2404 * *(unsigned __int16 *)(result + 2)
                  + 1225 * *(unsigned __int16 *)result
                  + 467 * *(unsigned __int16 *)(result + 4)
                  + 2048) >> 12;
            v101 = (2404 * v97 + 1225 * v96 + 467 * v98 + 2048) >> 12;
            v102 = ((v100 - v99) & ((v100 - v99) >> 31)) + v99;
            if (v100 <= v99)
              v100 = (2404 * v94 + 1225 * v93 + 467 * v95 + 2048) >> 12;
            v103 = ((v101 - v102) & ((v101 - v102) >> 31)) + v102;
            if (v101 > v100)
              v100 = (2404 * v97 + 1225 * v96 + 467 * v98 + 2048) >> 12;
            if (3 * v103 < v100)
            {
              LODWORD(v40) = (v93 + v96 + 1) >> 1;
              LODWORD(v41) = (v94 + v97 + 1) >> 1;
              LODWORD(v42) = (v95 + v98 + 1) >> 1;
            }
            else
            {
LABEL_23:
              v39 = *(_DWORD *)(v277 + 4 * v58);
              LODWORD(v40) = (v39 * v49 + 0x8000) >> 16;
              LODWORD(v41) = (v39 * v50 + 0x8000) >> 16;
              LODWORD(v42) = (v39 * v51 + 0x8000) >> 16;
            }
            goto LABEL_24;
          }
          v62 = (v44 + 128) >> 8;
          v63 = v292 + ((int)(v62 * (v239 - v292) + 64) >> 7);
          if ((int)(v289 + v62 * v274) <= v43)
            v64 = ((*(unsigned __int16 *)(v288 + 2 * v40) * *(unsigned __int16 *)(v288 + 2 * v40)
                  + *(unsigned __int16 *)(v287 + 2 * v41) * *(unsigned __int16 *)(v287 + 2 * v41)
                  + *(unsigned __int16 *)(v286 + 2 * v42) * *(unsigned __int16 *)(v286 + 2 * v42))
                 * v291) >> v290;
          else
            v64 = v289 + v62 * v274;
          v65 = (v31 - v63) & ~(((int)v31 - v63) >> 31);
          if (v63 + (int)v31 < (int)v2)
            v66 = v63 + v31 + 1;
          else
            v66 = v2;
          if (v298 <= v45)
          {
            if (v65 >= v66)
              goto LABEL_24;
            v268 = v38[2];
            v269 = v38[1];
            v271 = *v38;
            v51 = 0;
            v50 = 0;
            v49 = 0;
            v58 = 0;
            v82 = ((_DWORD)v31 - v63) & ~(((int)v31 - v63) >> 31);
            v83 = (4 * v82) | 2;
            v84 = &__dst[(3 * v82) + 1];
            do
            {
              if (v298 > *(unsigned __int16 *)((char *)v295 + v83))
              {
                ++v58;
                v49 += *(v84 - 1);
                v50 += *v84;
                v51 += v84[1];
              }
              ++v65;
              v84 += 3;
              v83 += 4;
            }
            while (v65 < v66);
          }
          else
          {
            v268 = v38[2];
            v269 = v38[1];
            v271 = *v38;
            v67 = v33;
            v68 = v30;
            v69 = *(unsigned __int16 *)result + 2;
            v70 = *(unsigned __int16 *)(result + 2) + 1;
            v71 = *(unsigned __int16 *)(result + 4) + 2;
            if ((v264 & *(_BYTE *)(v35 + v265)) != 0)
            {
              if (v65 <= (int)v31)
              {
                v51 = 0;
                v50 = 0;
                v49 = 0;
                v58 = 0;
                v104 = &__dst[3 * (_DWORD)v31];
                v105 = v32;
                do
                {
                  v106 = *v104;
                  v107 = v104[1];
                  v108 = v104[2];
                  v109 = (v69 - v106) >> 2;
                  v110 = (v71 - v108) >> 2;
                  v111 = ((v70 - v107) >> 1) * ((v70 - v107) >> 1);
                  if (v111 + v109 * v109 + v110 * v110 > 3 * v64)
                    break;
                  v112 = v111 + (v110 + v109) * (v110 + v109);
                  if (v295[v68] >= 0x80u && v112 <= v64)
                  {
                    ++v58;
                    v49 += v106;
                    v50 += v107;
                    v51 += v108;
                  }
                  --v105;
                  v68 -= 2;
                  v104 -= 3;
                }
                while (v105 > v65);
              }
              else
              {
                v58 = 0;
                v49 = 0;
                v50 = 0;
                v51 = 0;
              }
              v72 = (int)v31 + 1;
              v2 = v266;
              if ((int)v72 < v66)
              {
                v73 = &__dst[3 * v72];
                do
                {
                  v74 = *v73;
                  v75 = v73[1];
                  v76 = v73[2];
                  v77 = (v69 - v74) >> 2;
                  v78 = (v71 - v76) >> 2;
                  v79 = ((v70 - v75) >> 1) * ((v70 - v75) >> 1);
                  if (v79 + v77 * v77 + v78 * v78 > 3 * v64)
                    break;
                  v80 = v79 + (v78 + v77) * (v78 + v77);
                  if (v295[v67] >= 0x80u && v80 <= v64)
                  {
                    ++v58;
                    v49 += v74;
                    v50 += v75;
                    v51 += v76;
                  }
                  --v66;
                  v67 += 2;
                  v73 += 3;
                }
                while (v32 != v66);
              }
            }
            else
            {
              if (v65 <= (int)v31)
              {
                v51 = 0;
                v50 = 0;
                v49 = 0;
                v58 = 0;
                v114 = &__dst[3 * (_DWORD)v31];
                v115 = v32;
                do
                {
                  v116 = *v114;
                  v117 = v114[1];
                  v118 = v114[2];
                  v119 = (v69 - v116) >> 2;
                  v120 = (v70 - v117) >> 1;
                  v121 = (v71 - v118) >> 2;
                  if (v119 * v119 + v120 * v120 + v121 * v121 > 3 * v64)
                    break;
                  if (v295[v68] >= 0x80u
                    && (v120 + ((v119 + v121 + 1) >> 1)) * (v120 + ((v119 + v121 + 1) >> 1)) <= v64)
                  {
                    ++v58;
                    v49 += v116;
                    v50 += v117;
                    v51 += v118;
                  }
                  --v115;
                  v68 -= 2;
                  v114 -= 3;
                }
                while (v115 > v65);
              }
              else
              {
                v58 = 0;
                v49 = 0;
                v50 = 0;
                v51 = 0;
              }
              v85 = (int)v31 + 1;
              v2 = v266;
              if ((int)v85 < v66)
              {
                v86 = &__dst[3 * v85];
                do
                {
                  v87 = *v86;
                  v88 = v86[1];
                  v89 = v86[2];
                  v90 = (v69 - v87) >> 2;
                  v91 = (v70 - v88) >> 1;
                  v92 = (v71 - v89) >> 2;
                  if (v90 * v90 + v91 * v91 + v92 * v92 > 3 * v64)
                    break;
                  if (v295[v67] >= 0x80u && (v91 + ((v90 + v92 + 1) >> 1)) * (v91 + ((v90 + v92 + 1) >> 1)) <= v64)
                  {
                    ++v58;
                    v49 += v87;
                    v50 += v88;
                    v51 += v89;
                  }
                  --v66;
                  v67 += 2;
                  v86 += 3;
                }
                while (v32 != v66);
              }
            }
          }
          LOWORD(v40) = v271;
          v3 = v272;
          LOWORD(v42) = v268;
          LOWORD(v41) = v269;
          if (v58)
            goto LABEL_76;
LABEL_24:
          *v36 = v40;
          ++v31;
          result += 6;
          v38 += 3;
          v36[1] = v41;
          v36[2] = v42;
          v36 += 3;
          v37 += 2;
          ++v35;
          ++v32;
          v30 = v283 + 2;
          v33 = v281 + 2;
          v29 = v284 + 6;
          v34 = v279 + 1;
        }
        while (v31 != v2);
      }
      v6 = v254 + 1;
      v4 = v276;
      v12 = (_WORD *)((char *)v256 + v276);
      v295 = (unsigned __int16 *)((char *)v295 + v297);
      v257 += v275;
      v5 = v293;
      if (v254 + 1 == v3)
        goto LABEL_101;
    }
    v15 = 2;
    v13 = v260 + 6;
    v14 = __dst + 6;
LABEL_19:
    v25 = v250 - v15;
    do
    {
      v26 = v14;
      v27 = *v14;
      v28 = v14[3];
      v14 += 3;
      *v13 = (v26[6] + 6 * v27 + 4 * (*(v26 - 3) + v28) + *(v26 - 6) + 8) >> 4;
      v13[1] = (v26[7] + 6 * v26[1] + 4 * (*(v26 - 2) + v26[4]) + *(v26 - 5) + 8) >> 4;
      v13[2] = (v26[8] + 6 * v26[2] + 4 * (*(v26 - 1) + v26[5]) + *(v26 - 4) + 8) >> 4;
      v13 += 3;
      --v25;
    }
    while (v25);
    goto LABEL_21;
  }
LABEL_101:
  if (v2)
  {
    v122 = 0;
    v255 = v3 - 2;
    v270 = v3 - 1;
    v123 = v3 - 4;
    v124 = v260 + 6 >= &__dst[3 * v3] || __dst >= &v260[3 * v3 - 6];
    __lena = v123 & 0xFFFFFFFFFFFFFFF8 | 2;
    v251 = v3 - 4;
    v252 = v123 & 0xFFFFFFFFFFFFFFF8;
    v125 = 3 * (v123 & 0xFFFFFFFFFFFFFFF8);
    v246 = &__dst[v125 + 6];
    v247 = &v260[v125 + 6];
    v127 = !v124 || v123 < 8;
    v253 = v127;
    v128 = v259 + 1;
    v129.i64[0] = 0x6000600060006;
    v129.i64[1] = 0x6000600060006;
    do
    {
      v263 = v122;
      if (v3)
      {
        v130 = v128;
        v131 = v3;
        v132 = __dst;
        do
        {
          *v132 = *(v130 - 1);
          v132[1] = *v130;
          v132[2] = v130[1];
          v130 = (unsigned __int16 *)((char *)v130 + v4);
          v132 += 3;
          --v131;
        }
        while (v131);
      }
      v261 = v128;
      *v260 = (__dst[6] - *__dst + 8 * *__dst + 4 * (__dst[3] + *__dst) + 8) >> 4;
      v260[1] = (__dst[7] - __dst[1] + 8 * __dst[1] + 4 * (__dst[4] + __dst[1]) + 8) >> 4;
      v260[2] = (__dst[8] - __dst[2] + 8 * __dst[2] + 4 * (__dst[5] + __dst[2]) + 8) >> 4;
      v260[3] = (*__dst + 6 * __dst[3] + __dst[9] + 4 * (*__dst + __dst[6]) + 8) >> 4;
      v260[4] = (__dst[1] + 6 * __dst[4] + __dst[10] + 4 * (__dst[1] + __dst[7]) + 8) >> 4;
      v260[5] = (__dst[2] + 6 * __dst[5] + __dst[11] + 4 * (__dst[2] + __dst[8]) + 8) >> 4;
      v133 = v260 + 6;
      v134 = __dst + 6;
      if (v255 >= 3)
      {
        if ((v253 & 1) != 0)
        {
          v135 = 2;
          v133 = v260 + 6;
          v134 = __dst + 6;
LABEL_122:
          v144 = v255 - v135;
          do
          {
            v145 = v134;
            v146 = *v134;
            v147 = v134[3];
            v134 += 3;
            *v133 = (v145[6] + 6 * v146 + 4 * (*(v145 - 3) + v147) + *(v145 - 6) + 8) >> 4;
            v133[1] = (v145[7] + 6 * v145[1] + 4 * (*(v145 - 2) + v145[4]) + *(v145 - 5) + 8) >> 4;
            v133[2] = (v145[8] + 6 * v145[2] + 4 * (*(v145 - 1) + v145[5]) + *(v145 - 4) + 8) >> 4;
            v133 += 3;
            --v144;
          }
          while (v144);
          goto LABEL_124;
        }
        v136 = v252;
        v137 = (__int16 *)(v260 + 6);
        v138 = (const __int16 *)(__dst + 6);
        v139 = (const __int16 *)(__dst + 6);
        do
        {
          v140 = v138 + 3;
          v141 = v138 - 3;
          v300 = vld3q_s16(v139);
          v139 += 24;
          v302 = vld3q_s16(v140);
          v305 = vld3q_s16(v141);
          v142 = v138 + 6;
          v307 = vld3q_s16(v142);
          v143 = v138 - 6;
          v309 = vld3q_s16(v143);
          v303.val[0] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vaddw_u16((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*(uint16x4_t *)v300.val[0].i8, (uint16x4_t)0x6000600060006), *(uint16x4_t *)v307.val[0].i8), vshlq_n_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v305.val[0].i8, *(uint16x4_t *)v302.val[0].i8), 2uLL)), *(uint16x4_t *)v309.val[0].i8), 4uLL), (int32x4_t)vaddw_high_u16((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmovl_high_u16((uint16x8_t)v307.val[0]),
                                                                  (uint16x8_t)v300.val[0],
                                                                  v129),
                                                     vshlq_n_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v305.val[0], (uint16x8_t)v302.val[0]), 2uLL)), (uint16x8_t)v309.val[0]), 4uLL);
          v303.val[1] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vaddw_u16((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*(uint16x4_t *)v300.val[1].i8, (uint16x4_t)0x6000600060006), *(uint16x4_t *)v307.val[1].i8), vshlq_n_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v305.val[1].i8, *(uint16x4_t *)v302.val[1].i8), 2uLL)), *(uint16x4_t *)v309.val[1].i8), 4uLL), (int32x4_t)vaddw_high_u16((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmovl_high_u16((uint16x8_t)v307.val[1]),
                                                                  (uint16x8_t)v300.val[1],
                                                                  v129),
                                                     vshlq_n_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v305.val[1], (uint16x8_t)v302.val[1]), 2uLL)), (uint16x8_t)v309.val[1]), 4uLL);
          v303.val[2] = vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vaddw_u16((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*(uint16x4_t *)v300.val[2].i8, (uint16x4_t)0x6000600060006), *(uint16x4_t *)v307.val[2].i8), vshlq_n_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v305.val[2].i8, *(uint16x4_t *)v302.val[2].i8), 2uLL)), *(uint16x4_t *)v309.val[2].i8), 4uLL), (int32x4_t)vaddw_high_u16((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmovl_high_u16((uint16x8_t)v307.val[2]),
                                                                  (uint16x8_t)v300.val[2],
                                                                  v129),
                                                     vshlq_n_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v305.val[2], (uint16x8_t)v302.val[2]), 2uLL)), (uint16x8_t)v309.val[2]), 4uLL);
          vst3q_s16(v137, v303);
          v137 += 24;
          v138 = v139;
          v136 -= 8;
        }
        while (v136);
        v133 = v247;
        v135 = __lena;
        v134 = v246;
        if (v251 != v252)
          goto LABEL_122;
      }
LABEL_124:
      *v133 = (v134[3] + 6 * *v134 + *(v134 - 6) + 4 * (*(v134 - 3) + v134[3]) + 8) >> 4;
      v133[1] = (v134[4] + 6 * v134[1] + *(v134 - 5) + 4 * (*(v134 - 2) + v134[4]) + 8) >> 4;
      v133[2] = (v134[5] + 6 * v134[2] + *(v134 - 4) + 4 * (*(v134 - 1) + v134[5]) + 8) >> 4;
      v133[3] = (*(v134 - 3) - v134[3] + 8 * v134[3] + 4 * (*v134 + v134[3]) + 8) >> 4;
      v133[4] = (*(v134 - 2) - v134[4] + 8 * v134[4] + 4 * (v134[1] + v134[4]) + 8) >> 4;
      v133[5] = (*(v134 - 1) - v134[5] + 8 * v134[5] + 4 * (v134[2] + v134[5]) + 8) >> 4;
      if (v3)
      {
        v148 = 0;
        v149 = 0;
        LODWORD(result) = 1;
        v150 = -v292;
        v151 = v258;
        v152 = v259;
        v153 = v5;
        v154 = v260;
        v155 = __dst;
        v294 = v5;
        do
        {
          v157 = *v154;
          v158 = v154[1];
          v159 = v154[2];
          v160 = ((*(unsigned __int16 *)(v288 + 2 * v157) * *(unsigned __int16 *)(v288 + 2 * v157)
                 + *(unsigned __int16 *)(v287 + 2 * v158) * *(unsigned __int16 *)(v287 + 2 * v158)
                 + *(unsigned __int16 *)(v286 + 2 * v159) * *(unsigned __int16 *)(v286 + 2 * v159))
                * v291) >> v290;
          v161 = *v153;
          v162 = v153[1];
          v296 = v148;
          v285 = v150;
          if (v161 <= 0x7F && v298 > v162)
          {
            v163 = v289;
            if (v289 <= v160)
              v163 = ((*(unsigned __int16 *)(v288 + 2 * v157) * *(unsigned __int16 *)(v288 + 2 * v157)
                     + *(unsigned __int16 *)(v287 + 2 * v158) * *(unsigned __int16 *)(v287 + 2 * v158)
                     + *(unsigned __int16 *)(v286 + 2 * v159) * *(unsigned __int16 *)(v286 + 2 * v159))
                    * v291) >> v290;
            v164 = (v149 - v292) & ~(((int)v149 - v292) >> 31);
            if (v292 + (int)v149 < (int)v3)
              v165 = v292 + v149 + 1;
            else
              v165 = v3;
            v166 = *v155;
            v167 = v155[1];
            v168 = v155[2];
            if (v164 >= v165)
            {
              v175 = 1;
            }
            else
            {
              v169 = 3 * (v150 & ~(v150 >> 31));
              v170 = v148 - v169 * 2;
              v171 = &__dst[v169 + 2];
              v172 = v166 + 2;
              v173 = v167 + 1;
              v174 = v168 + 2;
              v175 = 1;
              do
              {
                if (v170)
                {
                  v176 = *(v171 - 2);
                  v177 = *(v171 - 1);
                  v178 = *v171;
                  if (((v172 - v176) >> 2) * ((v172 - v176) >> 2)
                     + ((v173 - v177) >> 1) * ((v173 - v177) >> 1)
                     + ((v174 - v178) >> 2) * ((v174 - v178) >> 2) <= v163)
                  {
                    ++v175;
                    v166 += v176;
                    v167 += v177;
                    v168 += v178;
                  }
                }
                ++v164;
                v170 -= 6;
                v171 += 3;
              }
              while (v164 < v165);
            }
            if (!v278 || !v149 || v175 != 1 || v149 >= v270)
              goto LABEL_126;
LABEL_196:
            v228 = *(v155 - 3);
            v229 = *(v155 - 2);
            v230 = *(v155 - 1);
            v231 = v155[3];
            v232 = v155[4];
            v233 = v155[5];
            v234 = (2404 * v229 + 1225 * v228 + 467 * v230 + 2048) >> 12;
            v235 = (2404 * v155[1] + 1225 * *v155 + 467 * v155[2] + 2048) >> 12;
            v236 = (2404 * v232 + 1225 * v231 + 467 * v233 + 2048) >> 12;
            v237 = ((v235 - v234) & ((v235 - v234) >> 31)) + v234;
            if (v235 <= v234)
              v235 = (2404 * v229 + 1225 * v228 + 467 * v230 + 2048) >> 12;
            v238 = ((v236 - v237) & ((v236 - v237) >> 31)) + v237;
            if (v236 > v235)
              v235 = (2404 * v232 + 1225 * v231 + 467 * v233 + 2048) >> 12;
            if (3 * v238 < v235)
            {
              LODWORD(v157) = (v228 + v231 + 1) >> 1;
              LODWORD(v158) = (v229 + v232 + 1) >> 1;
              LODWORD(v159) = (v230 + v233 + 1) >> 1;
            }
            else
            {
LABEL_126:
              v156 = *(_DWORD *)(v277 + 4 * v175);
              LODWORD(v157) = (v156 * v166 + 0x8000) >> 16;
              LODWORD(v158) = (v156 * v167 + 0x8000) >> 16;
              LODWORD(v159) = (v156 * v168 + 0x8000) >> 16;
            }
            goto LABEL_127;
          }
          v179 = (v161 + 128) >> 8;
          v180 = v292 + ((int)(v179 * (v239 - v292) + 64) >> 7);
          if ((int)(v289 + v179 * v274) <= v160)
            v181 = ((*(unsigned __int16 *)(v288 + 2 * v157) * *(unsigned __int16 *)(v288 + 2 * v157)
                   + *(unsigned __int16 *)(v287 + 2 * v158) * *(unsigned __int16 *)(v287 + 2 * v158)
                   + *(unsigned __int16 *)(v286 + 2 * v159) * *(unsigned __int16 *)(v286 + 2 * v159))
                  * v291) >> v290;
          else
            v181 = v289 + v179 * v274;
          v182 = (v149 - v180) & ~(((int)v149 - v180) >> 31);
          if (v180 + (int)v149 < (int)v3)
            v183 = v180 + v149 + 1;
          else
            v183 = v3;
          if (v298 <= v162)
          {
            if (v182 >= v183)
              goto LABEL_127;
            v273 = v154[2];
            v280 = v154[1];
            v282 = *v154;
            v168 = 0;
            v167 = 0;
            v166 = 0;
            v175 = 0;
            v189 = ((_DWORD)v149 - v180) & ~(((int)v149 - v180) >> 31);
            v190 = v297 * v189 + 2;
            v191 = &__dst[(3 * v189) + 1];
            do
            {
              if (v298 > *(unsigned __int16 *)((char *)v5 + v190))
              {
                ++v175;
                v166 += *(v191 - 1);
                v167 += *v191;
                v168 += v191[1];
              }
              v190 += v297;
              ++v182;
              v191 += 3;
            }
            while (v182 < v183);
          }
          else
          {
            v280 = v154[1];
            v184 = v297 * (int)result;
            v185 = v297 * (int)v149;
            v186 = *v155 + 2;
            v187 = v155[1] + 1;
            v188 = v155[2] + 2;
            v282 = *v154;
            v273 = v154[2];
            if ((v264 & *(_BYTE *)(v151 + v265)) != 0)
            {
              if (v182 <= (int)v149)
              {
                v168 = 0;
                v167 = 0;
                v166 = 0;
                v175 = 0;
                v200 = &__dst[3 * (_DWORD)v149];
                v201 = result;
                while (1)
                {
                  v202 = *v200;
                  v203 = v200[1];
                  v204 = v200[2];
                  v205 = (v186 - v202) >> 2;
                  v206 = (v188 - v204) >> 2;
                  v207 = ((v187 - v203) >> 1) * ((v187 - v203) >> 1);
                  if (v207 + v205 * v205 + v206 * v206 > 3 * v181)
                    break;
                  v208 = v207 + (v206 + v205) * (v206 + v205);
                  if (*(unsigned __int16 *)((char *)v294 + v185) >= 0x80u && v208 <= v181)
                  {
                    ++v175;
                    v166 += v202;
                    v167 += v203;
                    v168 += v204;
                  }
                  v5 = v294;
                  v185 -= v297;
                  --v201;
                  v200 -= 3;
                  if (v201 <= v182)
                    goto LABEL_184;
                }
                v5 = v294;
              }
              else
              {
                v175 = 0;
                v166 = 0;
                v167 = 0;
                v168 = 0;
              }
LABEL_184:
              v218 = (int)v149 + 1;
              if ((int)v218 >= v183)
              {
                v2 = v266;
              }
              else
              {
                v2 = v266;
                v219 = &__dst[3 * v218];
                do
                {
                  v220 = *v219;
                  v221 = v219[1];
                  v222 = v219[2];
                  v223 = (v186 - v220) >> 2;
                  v224 = (v188 - v222) >> 2;
                  v225 = ((v187 - v221) >> 1) * ((v187 - v221) >> 1);
                  if (v225 + v223 * v223 + v224 * v224 > 3 * v181)
                    break;
                  v226 = v225 + (v224 + v223) * (v224 + v223);
                  if (*(unsigned __int16 *)((char *)v5 + v184) >= 0x80u && v226 <= v181)
                  {
                    ++v175;
                    v166 += v220;
                    v167 += v221;
                    v168 += v222;
                  }
                  v184 += v297;
                  --v183;
                  v219 += 3;
                }
                while ((_DWORD)result != v183);
              }
            }
            else
            {
              if (v182 <= (int)v149)
              {
                v168 = 0;
                v167 = 0;
                v166 = 0;
                v175 = 0;
                v210 = &__dst[3 * (_DWORD)v149];
                v211 = result;
                do
                {
                  v212 = *v210;
                  v213 = v210[1];
                  v214 = v210[2];
                  v215 = (v186 - v212) >> 2;
                  v216 = (v187 - v213) >> 1;
                  v217 = (v188 - v214) >> 2;
                  if (v215 * v215 + v216 * v216 + v217 * v217 > 3 * v181)
                    break;
                  if (*(unsigned __int16 *)((char *)v294 + v185) >= 0x80u
                    && (v216 + ((v215 + v217 + 1) >> 1)) * (v216 + ((v215 + v217 + 1) >> 1)) <= v181)
                  {
                    ++v175;
                    v166 += v212;
                    v167 += v213;
                    v168 += v214;
                  }
                  v185 -= v297;
                  --v211;
                  v210 -= 3;
                }
                while (v211 > v182);
              }
              else
              {
                v175 = 0;
                v166 = 0;
                v167 = 0;
                v168 = 0;
              }
              v192 = (int)v149 + 1;
              if ((int)v192 >= v183)
              {
                v2 = v266;
                v5 = v294;
              }
              else
              {
                v2 = v266;
                v193 = &__dst[3 * v192];
                v5 = v294;
                do
                {
                  v194 = *v193;
                  v195 = v193[1];
                  v196 = v193[2];
                  v197 = (v186 - v194) >> 2;
                  v198 = (v187 - v195) >> 1;
                  v199 = (v188 - v196) >> 2;
                  if (v197 * v197 + v198 * v198 + v199 * v199 > 3 * v181)
                    break;
                  if (*(unsigned __int16 *)((char *)v294 + v184) >= 0x80u
                    && (v198 + ((v197 + v199 + 1) >> 1)) * (v198 + ((v197 + v199 + 1) >> 1)) <= v181)
                  {
                    ++v175;
                    v166 += v194;
                    v167 += v195;
                    v168 += v196;
                  }
                  v184 += v297;
                  --v183;
                  v193 += 3;
                }
                while ((_DWORD)result != v183);
              }
            }
          }
          v3 = v272;
          LODWORD(v159) = v273;
          LODWORD(v158) = v280;
          LODWORD(v157) = v282;
          if (v175)
            goto LABEL_196;
LABEL_127:
          ++v149;
          v155 += 3;
          *v152 = (v157 * v157 + 0x8000) >> 16;
          v152[1] = (v158 * v158 + 0x8000) >> 16;
          v152[2] = (v159 * v159 + 0x8000) >> 16;
          v154 += 3;
          v4 = v276;
          v152 = (_WORD *)((char *)v152 + v276);
          v153 = (unsigned __int16 *)((char *)v153 + v297);
          v151 += v275;
          result = (result + 1);
          v148 = v296 + 6;
          v150 = v285 + 1;
        }
        while (v149 != v3);
      }
      v122 = v263 + 1;
      v5 += 2;
      ++v258;
      v259 += 3;
      v128 = v261 + 3;
    }
    while (v263 + 1 != v2);
  }
  return result;
}

unint64_t sub_1D53859B4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t result;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  char *v19;
  unsigned __int16 *v20;
  size_t v21;
  char *v22;
  const __int16 *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  _WORD *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned __int16 *v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unsigned __int16 *v49;
  unsigned int v50;
  signed int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unsigned __int16 *v58;
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  unsigned __int16 *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  unsigned __int16 *v70;
  int v71;
  int v72;
  int v73;
  char *v74;
  int v75;
  int v76;
  int v77;
  unsigned __int16 *v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unsigned __int16 *v87;
  unsigned __int16 *v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  unsigned __int16 *v98;
  unsigned __int16 *v99;
  int v100;
  int v101;
  int v102;
  BOOL v103;
  char v104;
  BOOL v105;
  char v106;
  BOOL v107;
  unsigned __int16 *v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  const __int16 *v114;
  const __int16 *v115;
  int32x4_t v116;
  __int16 *v117;
  unint64_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  uint64_t v134;
  char *v135;
  unsigned __int16 *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned __int16 *v148;
  unsigned __int16 *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned __int16 *v153;
  uint64_t v154;
  const __int16 *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  int v165;
  int v166;
  unsigned __int16 *v167;
  char *v168;
  char *v169;
  int v170;
  uint64_t v171;
  int16x8x3_t v172;
  int16x8x3_t v173;
  int16x8x3_t v174;
  int16x8x3_t v175;

  v2 = a2[150];
  v3 = a2[151];
  v4 = (char *)a2[153];
  v5 = a2[154];
  v6 = (unsigned __int16 *)a2[155];
  v157 = a2[156];
  v7 = (unsigned __int16 *)a2[157];
  v8 = (unsigned __int16 *)a2[158];
  v9 = a2[159];
  v165 = *(_DWORD *)(a1 + 1444);
  v166 = *(_DWORD *)(a1 + 1440);
  v163 = *(_DWORD *)(a1 + 1452);
  v164 = *(_DWORD *)(a1 + 1448);
  v159 = *(_DWORD *)(a1 + 1468);
  v156 = *(_QWORD *)(a1 + 1472);
  v10 = *(_DWORD *)(a1 + 1480);
  v161 = *(_QWORD *)(a1 + 1424);
  v162 = *(_QWORD *)(a1 + 1416);
  v160 = *(_QWORD *)(a1 + 1432);
  result = (unint64_t)memmove(v7, v4, 6 * v2);
  v147 = v3 - 1;
  if ((unint64_t)(v3 - 1) < 2)
    return result;
  v13 = 6 * v2;
  v144 = v2 - 1;
  v11 = 6 * v2;
  v154 = 6 * v2;
  if ((unint64_t)(v2 - 1) <= 1)
  {
    v134 = v3 - 2;
    v135 = &v4[v5];
    do
    {
      v136 = v8;
      result = (unint64_t)memmove(v8, v135, v13);
      v13 = v154;
      v135 += v5;
      v8 = v7;
      v7 = v136;
      --v134;
    }
    while (v134);
    return result;
  }
  v143 = v11 + v9 - 6;
  v145 = v2 - 2;
  v14 = (v2 - 2) & 0xFFFFFFFFFFFFFFF8;
  v168 = (char *)(v9 + 6);
  v139 = 3 * v14;
  v140 = v14;
  v138 = v9 + 6 + 6 * v14;
  v137 = v14 | 1;
  v169 = &v4[2 * v5];
  v155 = (const __int16 *)(v169 + 12);
  v171 = v157;
  v142 = &v4[2 * v5 + v11];
  v141 = &v4[2 * v5 + 12];
  v15 = 1;
  v16 = v5;
  v146 = v5;
  v17 = v7;
  v18 = 0;
  v19 = &v4[v5];
  while (2)
  {
    v151 = v15;
    v20 = v8 + 6;
    v21 = v13;
    memmove(v8, v19, v13);
    v158 = v19;
    v22 = &v19[v16 + 12];
    v23 = (const __int16 *)(v17 + 6);
    v24 = v17[5] + 2 * v8[5] + *(unsigned __int16 *)&v19[v16 + 10];
    v25 = v17[2] + 2 * v8[2] + *(unsigned __int16 *)&v19[v16 + 4];
    v26 = v17[4] + 2 * v8[4] + *(unsigned __int16 *)&v19[v16 + 8];
    v27 = v17[1] + 2 * v8[1] + *(unsigned __int16 *)&v19[v16 + 2];
    v28 = v17[3] + 2 * v8[3] + *(unsigned __int16 *)&v19[v16 + 6];
    v29 = *v17 + 2 * *v8 + *(unsigned __int16 *)&v19[v16];
    v30 = v17;
    v152 = v18;
    v150 = &v19[v16];
    if (v145 <= 7
      || (v168 < (char *)v17 + v21 ? (v103 = (unint64_t)v23 >= v143) : (v103 = 1),
          v103 ? (v104 = 0) : (v104 = 1),
          v168 < &v142[v16 * v18] ? (v105 = (unint64_t)&v141[v16 * v18] >= v143) : (v105 = 1),
          v105 ? (v106 = 0) : (v106 = 1),
          (unint64_t)v20 < v143 ? (v107 = v168 >= (char *)v8 + v21) : (v107 = 1),
          !v107 || (v104 & 1) != 0))
    {
      v31 = v8 + 6;
      v32 = v168;
      v33 = v169;
      v34 = 1;
      v36 = v157;
      v35 = v158;
    }
    else
    {
      v36 = v157;
      v35 = v19;
      v33 = v169;
      if ((v106 & 1) != 0)
      {
        v31 = v8 + 6;
        v32 = v168;
        v34 = 1;
      }
      else
      {
        v22 += v139 * 2;
        v31 = &v20[v139];
        v108 = (unsigned __int16 *)&v23[v139];
        v109 = vdupq_n_s32(v24);
        v110 = vdupq_n_s32(v25);
        v111 = vdupq_n_s32(v26);
        v112 = vdupq_n_s32(v27);
        v113 = vdupq_n_s32(v28);
        v114 = v155;
        v115 = (const __int16 *)(v8 + 6);
        v116 = vdupq_n_s32(v29);
        v117 = (__int16 *)v168;
        v118 = v140;
        do
        {
          v172 = vld3q_s16(v23);
          v23 += 24;
          v173 = vld3q_s16(v115);
          v115 += 24;
          v174 = vld3q_s16(v114);
          v114 += 24;
          v119 = vaddq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v174.val[0].i8, *(uint16x4_t *)v172.val[0].i8), (int32x4_t)vshll_n_u16(*(uint16x4_t *)v173.val[0].i8, 1uLL));
          v120 = (int32x4_t)vextq_s8((int8x16_t)v113, (int8x16_t)v119, 0xCuLL);
          v121 = vuzp2q_s32(v116, v113);
          v113 = vaddq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v174.val[0], (uint16x8_t)v172.val[0]), (int32x4_t)vshll_high_n_u16((uint16x8_t)v173.val[0], 1uLL));
          v122.i64[0] = vuzp2q_s32(v121, v116).u64[0];
          v116 = (int32x4_t)vextq_s8((int8x16_t)v119, (int8x16_t)v113, 0xCuLL);
          v122.i64[1] = v119.i64[0];
          v123 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v119, (int8x16_t)v113, 8uLL), v113);
          v124 = vaddq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v174.val[1].i8, *(uint16x4_t *)v172.val[1].i8), (int32x4_t)vshll_n_u16(*(uint16x4_t *)v173.val[1].i8, 1uLL));
          v125 = vaddq_s32(vaddq_s32(v120, v120), v119);
          v126 = (int32x4_t)vextq_s8((int8x16_t)v111, (int8x16_t)v124, 0xCuLL);
          v127 = vuzp2q_s32(v112, v111);
          v111 = vaddq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v174.val[1], (uint16x8_t)v172.val[1]), (int32x4_t)vshll_high_n_u16((uint16x8_t)v173.val[1], 1uLL));
          v128.i64[0] = vuzp2q_s32(v127, v112).u64[0];
          v112 = (int32x4_t)vextq_s8((int8x16_t)v124, (int8x16_t)v111, 0xCuLL);
          v128.i64[1] = v124.i64[0];
          v129 = vaddq_s32(v122, v125);
          v130 = vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v124, (int8x16_t)v111, 8uLL), v111), vaddq_s32(v112, v112));
          v131 = vaddq_s32(v128, vaddq_s32(vaddq_s32(v126, v126), v124));
          v172.val[0] = (int16x8_t)vaddl_high_u16((uint16x8_t)v174.val[2], (uint16x8_t)v172.val[2]);
          v172.val[1] = (int16x8_t)vaddq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v174.val[2].i8, *(uint16x4_t *)v172.val[2].i8), (int32x4_t)vshll_n_u16(*(uint16x4_t *)v173.val[2].i8, 1uLL));
          v172.val[2] = (int16x8_t)vextq_s8((int8x16_t)v109, (int8x16_t)v172.val[1], 0xCuLL);
          v175.val[0] = vrshrn_high_n_s32(vrshrn_n_s32(v129, 4uLL), vaddq_s32(v123, vaddq_s32(v116, v116)), 4uLL);
          v173.val[0] = (int16x8_t)vuzp2q_s32(v110, v109);
          v109 = vaddq_s32((int32x4_t)v172.val[0], (int32x4_t)vshll_high_n_u16((uint16x8_t)v173.val[2], 1uLL));
          v132.i64[0] = vuzp2q_s32((int32x4_t)v173.val[0], v110).u64[0];
          v132.i64[1] = v172.val[1].i64[0];
          v133 = (int32x4_t)vextq_s8((int8x16_t)v172.val[1], (int8x16_t)v109, 0xCuLL);
          v175.val[1] = vrshrn_high_n_s32(vrshrn_n_s32(v131, 4uLL), v130, 4uLL);
          v175.val[2] = vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v132, vaddq_s32(vaddq_s32((int32x4_t)v172.val[2], (int32x4_t)v172.val[2]), (int32x4_t)v172.val[1])), 4uLL), vaddq_s32(vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v172.val[1], (int8x16_t)v109, 8uLL), v109), vaddq_s32(v133, v133)), 4uLL);
          vst3q_s16(v117, v175);
          v117 += 24;
          v110 = v133;
          v118 -= 8;
        }
        while (v118);
        if (v145 == v140)
          goto LABEL_9;
        v24 = v109.u32[3];
        v25 = v109.u32[2];
        v26 = v111.u32[3];
        v23 = (const __int16 *)v108;
        v27 = v111.u32[2];
        v28 = v113.u32[3];
        v34 = v137;
        v32 = (_WORD *)v138;
        v29 = v113.u32[2];
      }
    }
    v37 = v144 - v34;
    do
    {
      v38 = v29 + 2 * v28;
      v29 = v28;
      v28 = *(unsigned __int16 *)v22 + *(unsigned __int16 *)v23 + 2 * *v31;
      *v32 = (v38 + v28 + 8) >> 4;
      v39 = v27 + 2 * v26;
      v27 = v26;
      v26 = *((unsigned __int16 *)v22 + 1) + *((unsigned __int16 *)v23 + 1) + 2 * v31[1];
      v32[1] = (v39 + v26 + 8) >> 4;
      v40 = v25 + 2 * v24;
      v25 = v24;
      v24 = *((unsigned __int16 *)v22 + 2) + *((unsigned __int16 *)v23 + 2) + 2 * v31[2];
      v32[2] = (v40 + v24 + 8) >> 4;
      v23 += 3;
      v31 += 3;
      v22 += 6;
      v32 += 3;
      --v37;
    }
    while (v37);
LABEL_9:
    v41 = 0;
    v148 = (unsigned __int16 *)((char *)v6 + v36);
    v149 = v8;
    v153 = v30;
    v42 = v30 + 8;
    v43 = v145;
    v167 = v8 + 6;
    do
    {
      v48 = &v33[v41 * 2];
      v49 = &v42[v41];
      v50 = *(unsigned __int16 *)((char *)v6 + v36 + 4);
      result = *(unsigned __int16 *)&v168[v41 * 2];
      v45 = *(unsigned __int16 *)&v168[v41 * 2 + 2];
      v46 = *(unsigned __int16 *)&v168[v41 * 2 + 4];
      if ((int)(v164 + ((v50 + 128) >> 8) * v163) <= (int)(((*(unsigned __int16 *)(v162 + 2 * result)
                                                            * *(unsigned __int16 *)(v162 + 2 * result)
                                                            + *(unsigned __int16 *)(v161 + 2 * v45)
                                                            * *(unsigned __int16 *)(v161 + 2 * v45)
                                                            + *(unsigned __int16 *)(v160 + 2 * v46)
                                                            * *(unsigned __int16 *)(v160 + 2 * v46))
                                                           * v166) >> v165))
        v51 = ((*(unsigned __int16 *)(v162 + 2 * result) * *(unsigned __int16 *)(v162 + 2 * result)
              + *(unsigned __int16 *)(v161 + 2 * v45) * *(unsigned __int16 *)(v161 + 2 * v45)
              + *(unsigned __int16 *)(v160 + 2 * v46) * *(unsigned __int16 *)(v160 + 2 * v46))
             * v166) >> v165;
      else
        v51 = v164 + ((v50 + 128) >> 8) * v163;
      if (v10 > *(unsigned __int16 *)((char *)v6 + v36 + 6))
      {
        v52 = v20[v41 - 3];
        v53 = v20[v41 - 2];
        v54 = v20[v41 - 1];
        v55 = v52 + 2;
        v56 = v53 + 1;
        v57 = v54 + 2;
        if (v50 < 0x80)
        {
          v58 = &v42[v41];
          v59 = v42[v41 - 8];
          v60 = v42[v41 - 7];
          v61 = v42[v41 - 6];
          if (((v55 - v59) >> 2) * ((v55 - v59) >> 2)
             + ((v56 - v60) >> 1) * ((v56 - v60) >> 1)
             + ((v57 - v61) >> 2) * ((v57 - v61) >> 2) <= v51)
          {
            v52 += v59;
            v53 += v60;
            v54 += v61;
            v62 = 2;
          }
          else
          {
            v62 = 1;
          }
          v67 = *(v49 - 5);
          v68 = *(v58 - 4);
          v83 = *(v58 - 3);
          v170 = v83;
          if (((v55 - v67) >> 2) * ((v55 - v67) >> 2)
             + ((v56 - v68) >> 1) * ((v56 - v68) >> 1)
             + ((v57 - v83) >> 2) * ((v57 - v83) >> 2) <= v51)
          {
            ++v62;
            v52 += v67;
            v53 += v68;
            v54 += v83;
          }
          v84 = v42[v41 - 2];
          v85 = v42[v41 - 1];
          v86 = v42[v41];
          if (((v55 - v84) >> 2) * ((v55 - v84) >> 2)
             + ((v56 - v85) >> 1) * ((v56 - v85) >> 1)
             + ((v57 - v86) >> 2) * ((v57 - v86) >> 2) <= v51)
          {
            ++v62;
            v52 += v84;
            v53 += v85;
            v54 += v86;
          }
          v87 = &v20[v41];
          v71 = v20[v41 - 6];
          v72 = v20[v41 - 5];
          v73 = v20[v41 - 4];
          if (((v55 - v71) >> 2) * ((v55 - v71) >> 2)
             + ((v56 - v72) >> 1) * ((v56 - v72) >> 1)
             + ((v57 - v73) >> 2) * ((v57 - v73) >> 2) <= v51)
          {
            ++v62;
            v52 += v71;
            v53 += v72;
            v54 += v73;
          }
          v75 = *v87;
          v76 = v87[1];
          v77 = v87[2];
          if (((v55 - v75) >> 2) * ((v55 - v75) >> 2)
             + ((v56 - v76) >> 1) * ((v56 - v76) >> 1)
             + ((v57 - v77) >> 2) * ((v57 - v77) >> 2) <= v51)
          {
            ++v62;
            v52 += v75;
            v53 += v76;
            v54 += v77;
          }
          v88 = (unsigned __int16 *)&v33[v41 * 2];
          v89 = *v88;
          v90 = v88[1];
          v91 = v88[2];
          if (((v55 - v89) >> 2) * ((v55 - v89) >> 2)
             + ((v56 - v90) >> 1) * ((v56 - v90) >> 1)
             + ((v57 - v91) >> 2) * ((v57 - v91) >> 2) <= v51)
          {
            ++v62;
            v52 += v89;
            v53 += v90;
            v54 += v91;
          }
          v80 = *((unsigned __int16 *)v48 + 3);
          v81 = v88[4];
          v82 = v88[5];
          if (((v55 - v80) >> 2) * ((v55 - v80) >> 2)
             + ((v56 - v81) >> 1) * ((v56 - v81) >> 1)
             + ((v57 - v82) >> 2) * ((v57 - v82) >> 2) <= v51)
          {
            ++v62;
            v52 += v80;
            v53 += v81;
            v54 += v82;
          }
          v92 = *(unsigned __int16 *)&v169[v41 * 2 + 12];
          v93 = *(unsigned __int16 *)&v169[v41 * 2 + 14];
          v94 = *(unsigned __int16 *)&v169[v41 * 2 + 16];
          if (((v55 - v92) >> 2) * ((v55 - v92) >> 2)
             + ((v56 - v93) >> 1) * ((v56 - v93) >> 1)
             + ((v57 - v94) >> 2) * ((v57 - v94) >> 2) > v51)
            goto LABEL_58;
          goto LABEL_57;
        }
        v63 = &v42[v41];
        if (*v6 >= 0x80u
          && (v64 = *(v63 - 8),
              v65 = *(v63 - 7),
              v66 = *(v63 - 6),
              ((v56 - v65) >> 1) * ((v56 - v65) >> 1)
            + (((v57 - v66) >> 2) + ((v55 - v64) >> 2)) * (((v57 - v66) >> 2) + ((v55 - v64) >> 2)) <= v51))
        {
          v52 += v64;
          v53 += v65;
          v54 += v66;
          v62 = 2;
          v67 = *(v49 - 5);
          v68 = *(v63 - 4);
          v69 = *(v63 - 3);
          if (v6[2] < 0x80u)
            goto LABEL_62;
        }
        else
        {
          v62 = 1;
          v67 = *(v49 - 5);
          v68 = *(v63 - 4);
          v69 = *(v63 - 3);
          if (v6[2] < 0x80u)
            goto LABEL_62;
        }
        if (((v56 - v68) >> 1) * ((v56 - v68) >> 1)
           + (((v57 - v69) >> 2) + ((v55 - v67) >> 2)) * (((v57 - v69) >> 2) + ((v55 - v67) >> 2)) <= v51)
        {
          ++v62;
          v52 += v67;
          v53 += v68;
          v54 += v69;
        }
LABEL_62:
        v170 = v69;
        if (v6[4] >= 0x80u)
        {
          v95 = v42[v41 - 2];
          v96 = v42[v41 - 1];
          v97 = v42[v41];
          if (((v56 - v96) >> 1) * ((v56 - v96) >> 1)
             + (((v57 - v97) >> 2) + ((v55 - v95) >> 2)) * (((v57 - v97) >> 2) + ((v55 - v95) >> 2)) <= v51)
          {
            ++v62;
            v52 += v95;
            v53 += v96;
            v54 += v97;
          }
        }
        v98 = &v20[v41];
        v71 = v20[v41 - 6];
        v72 = v20[v41 - 5];
        v73 = v20[v41 - 4];
        if (*(unsigned __int16 *)((char *)v6 + v36) >= 0x80u
          && ((v56 - v72) >> 1) * ((v56 - v72) >> 1)
           + (((v57 - v73) >> 2) + ((v55 - v71) >> 2)) * (((v57 - v73) >> 2) + ((v55 - v71) >> 2)) <= v51)
        {
          ++v62;
          v52 += v71;
          v53 += v72;
          v54 += v73;
        }
        v75 = *v98;
        v76 = v98[1];
        v77 = v98[2];
        if (*(unsigned __int16 *)((char *)v6 + v36 + 8) >= 0x80u)
        {
          if (((v56 - v76) >> 1) * ((v56 - v76) >> 1)
             + (((v57 - v77) >> 2) + ((v55 - v75) >> 2)) * (((v57 - v77) >> 2) + ((v55 - v75) >> 2)) <= v51)
          {
            ++v62;
            v52 += v75;
            v53 += v76;
            v54 += v77;
          }
          v33 = v169;
        }
        v99 = (unsigned __int16 *)&v33[v41 * 2];
        if (v6[v157] >= 0x80u)
        {
          v100 = *v99;
          v101 = v99[1];
          v102 = v99[2];
          if (((v56 - v101) >> 1) * ((v56 - v101) >> 1)
             + (((v57 - v102) >> 2) + ((v55 - v100) >> 2)) * (((v57 - v102) >> 2) + ((v55 - v100) >> 2)) <= v51)
          {
            ++v62;
            v52 += v100;
            v53 += v101;
            v54 += v102;
          }
          v36 = v157;
          v35 = v158;
        }
        v80 = *((unsigned __int16 *)v48 + 3);
        v81 = v99[4];
        v82 = v99[5];
        if (v6[v171 + 2] >= 0x80u)
        {
          if (((v56 - v81) >> 1) * ((v56 - v81) >> 1)
             + (((v57 - v82) >> 2) + ((v55 - v80) >> 2)) * (((v57 - v82) >> 2) + ((v55 - v80) >> 2)) <= v51)
          {
            ++v62;
            v52 += v80;
            v53 += v81;
            v54 += v82;
          }
          v35 = v158;
        }
        if (v6[v171 + 4] < 0x80u)
          goto LABEL_83;
        v92 = *(unsigned __int16 *)&v169[v41 * 2 + 12];
        v93 = *(unsigned __int16 *)&v169[v41 * 2 + 14];
        v94 = *(unsigned __int16 *)&v169[v41 * 2 + 16];
        if (((v56 - v93) >> 1) * ((v56 - v93) >> 1)
           + (((v57 - v94) >> 2) + ((v55 - v92) >> 2)) * (((v57 - v94) >> 2) + ((v55 - v92) >> 2)) > v51)
        {
LABEL_58:
          v36 = v157;
          v35 = v158;
LABEL_83:
          v33 = v169;
          goto LABEL_84;
        }
LABEL_57:
        ++v62;
        v52 += v92;
        v53 += v93;
        v54 += v94;
        goto LABEL_58;
      }
      if (v10 <= v6[1])
      {
        v62 = 0;
        v52 = 0;
        v53 = 0;
        v54 = 0;
      }
      else
      {
        v54 = v42[v41 - 6];
        v53 = v42[v41 - 7];
        v52 = v42[v41 - 8];
        v62 = 1;
      }
      v67 = *(v49 - 5);
      v68 = v42[v41 - 4];
      if (v10 > v6[3])
      {
        ++v62;
        v52 += v67;
        v53 += v68;
        v54 += v42[v41 - 3];
      }
      v170 = v42[v41 - 3];
      if (v10 > v6[5])
      {
        ++v62;
        v52 += v42[v41 - 2];
        v53 += v42[v41 - 1];
        v54 += v42[v41];
      }
      v70 = &v20[v41];
      v71 = v20[v41 - 6];
      v72 = v20[v41 - 5];
      v73 = v20[v41 - 4];
      v74 = (char *)v6 + v36;
      if (v10 <= *(unsigned __int16 *)((char *)v6 + v36 + 2))
      {
        v75 = *v70;
        v76 = v70[1];
        v77 = v70[2];
        if (v10 <= *((unsigned __int16 *)v74 + 5))
        {
LABEL_32:
          v78 = &v6[v171];
          if (v10 <= v6[v171 + 1])
            goto LABEL_34;
LABEL_33:
          v79 = *(unsigned __int16 *)&v33[v41 * 2 + 4];
          ++v62;
          v52 += *(unsigned __int16 *)&v33[v41 * 2];
          v53 += *(unsigned __int16 *)&v33[v41 * 2 + 2];
          v33 = v169;
          v54 += v79;
          goto LABEL_34;
        }
      }
      else
      {
        ++v62;
        v52 += v71;
        v53 += v72;
        v54 += v73;
        v75 = *v70;
        v76 = v70[1];
        v77 = v70[2];
        if (v10 <= *((unsigned __int16 *)v74 + 5))
          goto LABEL_32;
      }
      ++v62;
      v52 += v75;
      v53 += v76;
      v54 += v77;
      v78 = &v6[v171];
      if (v10 > v6[v171 + 1])
        goto LABEL_33;
LABEL_34:
      v80 = *((unsigned __int16 *)v48 + 3);
      v81 = *(unsigned __int16 *)&v33[v41 * 2 + 8];
      v82 = *(unsigned __int16 *)&v33[v41 * 2 + 10];
      if (v10 > v78[3])
      {
        ++v62;
        v52 += v80;
        v53 += v81;
        v54 += v82;
      }
      if (v10 <= v6[v171 + 5])
      {
        if (!v62)
          goto LABEL_11;
      }
      else
      {
        ++v62;
        v52 += *(unsigned __int16 *)&v33[v41 * 2 + 12];
        v53 += *(unsigned __int16 *)&v33[v41 * 2 + 14];
        v54 += *(unsigned __int16 *)&v33[v41 * 2 + 16];
      }
LABEL_84:
      if (v159 && v62 < 3)
      {
        result = (v80 + v75 + v71 + v67 + 2) >> 2;
        LODWORD(v45) = (v81 + v76 + v72 + v68 + 2) >> 2;
        LODWORD(v46) = (v82 + v77 + v73 + v170 + 2) >> 2;
      }
      else
      {
        v44 = *(_DWORD *)(v156 + 4 * v62);
        result = (v44 * v52 + 0x8000) >> 16;
        LODWORD(v45) = (v44 * v53 + 0x8000) >> 16;
        LODWORD(v46) = (v44 * v54 + 0x8000) >> 16;
      }
LABEL_11:
      v20 = v167;
      *(_WORD *)&v35[v41 * 2 + 6] = result;
      v47 = &v35[v41 * 2];
      *((_WORD *)v47 + 4) = v45;
      *((_WORD *)v47 + 5) = v46;
      v41 += 3;
      v6 += 2;
      --v43;
    }
    while (v43);
    v15 = v151 + 1;
    v18 = v152 + 1;
    v16 = v146;
    v155 = (const __int16 *)((char *)v155 + v146);
    v169 = &v33[v146];
    v6 = v148;
    v17 = v149;
    v8 = v153;
    v13 = v154;
    v19 = v150;
    if (v151 + 1 != v147)
      continue;
    return result;
  }
}

unint64_t sub_1D5386740(_DWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unsigned int v8;
  int v9;
  char *v10;
  size_t v11;
  char *v12;
  unint64_t result;
  size_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t i;
  char *v29;
  char *v30;
  unsigned int v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  signed int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned __int16 *v54;
  unsigned int v55;
  signed int v56;
  unsigned int v57;
  int v58;
  signed int v59;
  int32x2_t v61;
  unsigned int v62;
  signed int v64;
  int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  int v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  size_t __len;
  int v82;

  v2 = a2[162];
  v3 = a2[163];
  v4 = (char *)a2[164];
  v5 = a2[165];
  v74 = a2[167];
  v76 = a2[166];
  v6 = v5 >> 1;
  v7 = (char *)a2[168];
  v8 = a1[388];
  v9 = a1[389];
  v72 = a1[390];
  v78 = a1[391];
  v82 = a1[392];
  v10 = &v7[2 * (v5 >> 1)];
  v11 = v5 & 0xFFFFFFFFFFFFFFFELL;
  memmove(v7, v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  v12 = v4;
  result = (unint64_t)memmove(v10, &v4[2 * v11], v11);
  if ((unint64_t)(v3 - 4) >= 5)
  {
    v14 = v11;
    v79 = 4 * v6;
    v80 = v3 - 4;
    v15 = &v4[8 * v6];
    v16 = v2 - 4;
    v17 = &v7[2 * v11];
    __len = v11;
    if (v16 > 4)
    {
      v18 = v4;
      v71 = 2 * v74;
      v19 = v76 + 4 * v74;
      v20 = (uint64_t)&v12[12 * v6 + 12];
      v21 = (uint64_t)&v18[10 * v6 + 8];
      v22 = (uint64_t)&v18[6 * v6 + 6];
      v23 = 4;
      while (1)
      {
        v75 = v23;
        v77 = v7;
        v24 = v10;
        v10 = v17;
        v73 = v24;
        v25 = v24 + 12;
        result = (unint64_t)memmove(v17, v15, v14);
        v26 = 0;
        v27 = 2;
        for (i = 4; i < v16; i += 2)
        {
          v29 = &v10[v26];
          v30 = &v15[v26];
          v31 = *(_BYTE *)(v19 + v27) & 0xF;
          if (((v8 >> v31) & 1) == 0)
            goto LABEL_56;
          v32 = &v25[v26];
          v33 = *((unsigned __int16 *)v29 + 4);
          if (v31 >= 2)
          {
            if (v31 >= 4)
            {
              v50 = *(unsigned __int16 *)(v22 + v26)
                  + *(unsigned __int16 *)(v22 + v26 + 4)
                  + *(unsigned __int16 *)(v21 + v26 - 2)
                  + *(unsigned __int16 *)(v21 + v26 + 2)
                  + 2;
              v51 = v50 >> 2;
              v52 = v50 >> 4;
              if (v51 + v52 < v33 || (int)(v51 - v52) > v33)
                LOWORD(v33) = v51;
            }
            else if (v31 == 2)
            {
              v43 = *((unsigned __int16 *)v32 - 2);
              v44 = *(unsigned __int16 *)(v20 + v26 - 4);
              v45 = (v43 + v44 + 1) >> 1;
              v46 = (*(unsigned __int16 *)(v22 + v26) + *(unsigned __int16 *)(v21 + v26 - 2) + 1) >> 1;
              result = (*(unsigned __int16 *)(v22 + v26 + 4) + *(unsigned __int16 *)(v21 + v26 + 2) + 1) >> 1;
              if (v46 < 4 * (int)result && result < 4 * v46)
              {
                v47 = ((v46 + result + 1) >> 1) - v33;
                LODWORD(result) = v45 - v33;
                if (v47 < 0)
                  v47 = -v47;
                if ((result & 0x80000000) == 0)
                  result = result;
                else
                  result = v33 - v45;
                if (3 * v47 < result)
                {
                  v48 = v43 - v33;
                  v49 = v44 - v33;
                  if ((int)(v43 - v33) < 0)
                    v48 = v33 - v43;
                  if (v49 < 0)
                    v49 = v33 - v44;
                  if (v48 <= v49)
                    v45 = v43;
                  else
                    v45 = *(unsigned __int16 *)(v20 + v26 - 4);
                }
              }
              v33 = (v45 + v33 + 1) >> 1;
            }
            else
            {
              v62 = *(unsigned __int16 *)&v25[v26 - 8] + *(unsigned __int16 *)(v20 + v26) + 1;
              if (v33 <= v62 >> 2 || (v62 & 0x3FFFE) <= v33)
                goto LABEL_56;
              v64 = v33
                  - ((v33 + (v62 >> 1) + 1) >> 1)
                  + ((*(unsigned __int16 *)(v21 + v26 + 2) + *(unsigned __int16 *)(v22 + v26) + 1) >> 1);
              v33 = v64 & ~(v64 >> 31);
              if (v33 >= 0xFFFF)
                LOWORD(v33) = -1;
            }
            goto LABEL_55;
          }
          if ((*(_BYTE *)(v19 + v27) & 0xF) == 0)
          {
            v54 = (unsigned __int16 *)&v10[v26];
            v55 = (*(unsigned __int16 *)&v10[v26] + *(unsigned __int16 *)&v10[v26 + 16] + 1) >> 1;
            if ((int)(v33 - v55 - 2 * ((v33 - v55) & ((int)(v33 - v55) >> 31))) >= (int)((v33 + 2) >> 2))
              goto LABEL_56;
            v56 = (v33 + v55 + 1) >> 1;
            v57 = (v54[6] + v54[2] + 1) >> 1;
            v58 = (int)(v57 * v78 + 0x8000) >> 16;
            result = v58 + v57;
            v59 = v57 - v58;
            if (v56 <= (int)result && v56 >= v59)
              goto LABEL_56;
            v61 = vmin_s32(vmax_s32(vadd_s32(vdup_n_s32((int)(v57 - v56 + 1) >> 1), (int32x2_t)__PAIR64__(v54[5], v33)), 0), (int32x2_t)0xFFFF0000FFFFLL);
            *((_WORD *)v30 + 5) = v61.i16[2];
            LOWORD(v33) = v61.i16[0];
            goto LABEL_55;
          }
          v34 = *((unsigned __int16 *)v32 - 2);
          v35 = *(unsigned __int16 *)(v22 + v26 + 4);
          v36 = *(unsigned __int16 *)(v21 + v26 - 2);
          v37 = (*(unsigned __int16 *)&v25[v26 - 8]
               + *(unsigned __int16 *)(v22 + v26)
               + *(unsigned __int16 *)(v21 + v26 + 2)
               + *(unsigned __int16 *)(v20 + v26)
               + 2) >> 2;
          v38 = ((21845 * (v35 + v34 + *(unsigned __int16 *)&v10[v26 + 12]) + 0x8000) >> 16)
              + 2 * v37
              + ((21845
                * (v36 + *(unsigned __int16 *)&v10[v26 + 4] + *(unsigned __int16 *)(v20 + v26 - 4))
                + 0x8000) >> 16)
              + 2;
          result = (v37 - (v38 >> 2)) * (v37 - (v38 >> 2));
          if (result >= 0x65)
          {
            v39 = (v33
                 + ((*(unsigned __int16 *)&v25[v26] + *(unsigned __int16 *)(v20 + v26 - 8) + 1) >> 1)
                 + 1) >> 1;
            v40 = v35 + v36 + 1;
            v41 = v40 >> 1;
            v42 = (int)((v40 >> 1) * v82 + 0x8000) >> 16;
            result = v42 + (v40 >> 1);
            if (v39 > (int)result || v39 < (int)(v41 - v42))
            {
              v33 += v41 - v39;
              if (v33 < (int)(v40 >> 2))
                v33 = v40 >> 1;
              if (v33 >= 0xFFFF)
                LOWORD(v33) = -1;
LABEL_55:
              *((_WORD *)v30 + 4) = v33;
            }
          }
LABEL_56:
          if (v9 == *(unsigned __int8 *)(v19 + v27) >> 4)
          {
            v65 = *((unsigned __int16 *)v29 + 4);
            result = *(unsigned __int16 *)&v10[v26 + 10];
            v66 = *(unsigned __int16 *)(v22 + v26 + 4) + *(unsigned __int16 *)(v21 + v26 + 2) + 1;
            v67 = v65
                - ((*(unsigned __int16 *)(v22 + v26 + 2) + *(unsigned __int16 *)(v21 + v26) + 1) >> 1);
            v68 = *(unsigned __int16 *)&v10[v26 + 12]
                - ((*(unsigned __int16 *)(v22 + v26 + 6) + *(unsigned __int16 *)(v21 + v26 + 4) + 1) >> 1);
            if ((int)(v67 * v67 + (result - (v66 >> 1)) * (result - (v66 >> 1)) + v68 * v68) < v72)
              *((_WORD *)v30 + 5) = v66 >> 1;
          }
          ++v27;
          v26 += 4;
        }
        v7 = v73;
        v23 = v75 + 2;
        v15 += v79;
        v19 += v71;
        v20 += v79;
        v21 += v79;
        v22 += v79;
        v17 = v77;
        v14 = __len;
        if (v75 + 2 >= v80)
          return result;
      }
    }
    v69 = 4;
    do
    {
      v70 = v10;
      v10 = v17;
      result = (unint64_t)memmove(v17, v15, v11);
      v69 += 2;
      v15 += v79;
      v17 = v7;
      v7 = v70;
    }
    while (v69 < v80);
  }
  return result;
}

char *sub_1D5386CE8(char *result, _QWORD *a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  BOOL v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  BOOL v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  BOOL v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  size_t v86;
  char *v87;

  v2 = *((_DWORD *)result + 40);
  v3 = v2 > 7;
  v4 = (1 << v2) & 0xB0;
  if (!v3 && v4 != 0)
  {
    v6 = a2[162];
    v7 = a2[165];
    v8 = a2[167];
    v9 = v7 >> 1;
    v78 = *((_QWORD *)result + 193);
    v10 = *((_DWORD *)result + 388);
    v11 = a2[163];
    v12 = (char *)a2[168];
    v13 = a2[166];
    v14 = (char *)a2[164];
    v15 = &v12[2 * (v7 >> 1)];
    v16 = v7 & 0xFFFFFFFFFFFFFFFELL;
    memmove(v12, v14, v7 & 0xFFFFFFFFFFFFFFFELL);
    result = (char *)memmove(v15, &v14[2 * v16], v16);
    v17 = v11 - 4;
    if ((unint64_t)(v11 - 4) >= 5)
    {
      v18 = v16;
      v19 = v15;
      v84 = 4 * v9;
      v20 = v14;
      v21 = &v14[8 * v9];
      v22 = v6 - 4;
      v23 = &v12[2 * v16];
      v86 = v16;
      v85 = v17;
      if (v78 < v6 - 4)
      {
        v24 = 4 * (v78 & 1);
        v77 = 2 * v8;
        v25 = v13 + 4 * v8;
        v26 = 2 * v78;
        v27 = &v20[16 * v9];
        v28 = (uint64_t)&v20[6 * v9 - 2];
        v29 = (uint64_t)&v20[12 * v9 - 4];
        v30 = (uint64_t)&v20[10 * v9 - 2];
        v31 = 4;
        while (1)
        {
          v79 = v29;
          v87 = v12;
          v81 = v31;
          v12 = v19;
          v80 = v23;
          memmove(v23, v21, v18);
          v32 = &v12[v26];
          v33 = -4;
          v34 = v21;
          v35 = v87;
          v82 = v30;
          result = (char *)v78;
          v36 = v79;
          v83 = v27;
          v37 = v28;
          v38 = v80;
          v39 = v78 >> 1;
          do
          {
            v45 = (*(unsigned __int8 *)(v25 + v39) >> v24) & 0xF;
            if (((v10 >> ((*(unsigned __int8 *)(v25 + v39) >> v24) & 0xF)) & 1) == 0)
              goto LABEL_20;
            v46 = *(unsigned __int16 *)&v38[2 * v78];
            if (v45 >= 2)
            {
              if (v45 == 2)
              {
                v52 = *(unsigned __int16 *)&v35[2 * v78];
                v53 = *(unsigned __int16 *)&v27[2 * v78];
                v54 = *(unsigned __int16 *)&v32[v33 + 4];
                v55 = *(unsigned __int16 *)(v36 + v26 + 4);
                v56 = 3 * v46 >= v52 && 3 * v46 >= v53;
                v57 = (v52 + 2 * v46 + v53 + 2) >> 2;
                if (!v56)
                  v57 = *(unsigned __int16 *)&v38[2 * v78];
                if (3 * v54 < v55 || 3 * v55 < v54)
                {
                  v73 = v54 - v57;
                  v74 = v55 - v57;
                  if ((int)(v54 - v57) < 0)
                    v73 = v57 - v54;
                  if (v74 < 0)
                    v74 = v57 - v55;
                  if (v73 >= v74)
                    v54 = *(unsigned __int16 *)(v36 + v26 + 4);
                  v58 = v54 - v57;
                }
                else
                {
                  v58 = ((v54 + v55 + 1) >> 1) - v57;
                }
                goto LABEL_75;
              }
              v59 = *(unsigned __int16 *)&v32[v33];
              v60 = *(unsigned __int16 *)(v36 + v26 + 8);
              v61 = 3 * v46 >= v59 && 3 * v46 >= v60;
              v50 = (v59 + 2 * v46 + v60 + 2) >> 2;
              if (!v61)
                v50 = *(unsigned __int16 *)&v38[2 * v78];
              v42 = *(unsigned __int16 *)(v37 + 2 * v78);
              v51 = *(unsigned __int16 *)(v30 + v26 + 4);
              if (3 * v51 < v42 || 3 * v42 < v51)
              {
LABEL_10:
                v40 = v51 - v50;
                v41 = v42 - v50;
                if ((int)(v51 - v50) < 0)
                  v40 = v50 - v51;
                if (v41 < 0)
                  v41 = v50 - v42;
                if (v40 < v41)
                  v42 = v51;
                v43 = v42 - v50;
                goto LABEL_17;
              }
            }
            else
            {
              if (!v45)
              {
                v62 = *(unsigned __int16 *)&v38[v26 - 8];
                v63 = *(unsigned __int16 *)&v38[v26 + 8];
                v64 = *(unsigned __int16 *)&v38[v26 - 4];
                v65 = *(unsigned __int16 *)&v38[v26 + 4];
                v66 = 3 * v46 >= v62 && 3 * v46 >= v63;
                v67 = (v62 + 2 * v46 + v63 + 2) >> 2;
                if (!v66)
                  v67 = *(unsigned __int16 *)&v38[2 * v78];
                v68 = v64 - v67;
                v69 = v65 - v67;
                if ((int)(v64 - v67) < 0)
                  v68 = v67 - v64;
                if (v69 < 0)
                  v69 = v67 - v65;
                if (v68 >= v69)
                  v70 = *(unsigned __int16 *)&v38[v26 + 4];
                else
                  v70 = *(unsigned __int16 *)&v38[v26 - 4];
                if (3 * v64 >= v65 && 3 * v65 >= v64)
                  v72 = (v64 + v65 + 1) >> 1;
                else
                  v72 = v70;
                v58 = v72 - v67;
LABEL_75:
                v43 = (int)(v58 + 1) >> 1;
                goto LABEL_17;
              }
              v47 = *(unsigned __int16 *)&v32[v33 + 8];
              v48 = *(unsigned __int16 *)(v36 + 2 * v78);
              v49 = 3 * v46 >= v47 && 3 * v46 >= v48;
              v50 = (v47 + 2 * v46 + v48 + 2) >> 2;
              if (!v49)
                v50 = *(unsigned __int16 *)&v38[2 * v78];
              v42 = *(unsigned __int16 *)(v37 + v26 + 4);
              v51 = *(unsigned __int16 *)(v30 + 2 * v78);
              if (3 * v51 < v42 || 3 * v42 < v51)
                goto LABEL_10;
            }
            v43 = ((v42 + v51 + 1) >> 1) - v50;
LABEL_17:
            v44 = (v43 + v46) & ~((v43 + v46) >> 31);
            if (v44 >= 0xFFFF)
              LOWORD(v44) = -1;
            *(_WORD *)&v34[2 * v78] = v44;
LABEL_20:
            result += 2;
            v38 += 4;
            v27 += 4;
            v37 += 4;
            v36 += 4;
            v30 += 4;
            v33 += 4;
            v35 += 4;
            v34 += 4;
            ++v39;
          }
          while ((unint64_t)result < v22);
          v31 = v81 + 2;
          v21 += v84;
          v25 += v77;
          v27 = &v83[v84];
          v19 = v80;
          v28 += v84;
          v29 = v79 + v84;
          v30 = v82 + v84;
          v18 = v86;
          v23 = v87;
          if (v81 + 2 >= v85)
            return result;
        }
      }
      v75 = 4;
      do
      {
        v76 = v15;
        v15 = v23;
        result = (char *)memmove(v23, v21, v16);
        v75 += 2;
        v21 += v84;
        v23 = v12;
        v12 = v76;
      }
      while (v75 < v85);
    }
  }
  return result;
}

unint64_t sub_1D5387158(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  signed int v28;
  int v29;
  int v30;
  signed int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;

  v2 = a2[169];
  v3 = a2[170];
  v4 = (char *)a2[171];
  v5 = a2[173];
  v42 = a2[174];
  v43 = a2[172];
  v6 = *(_DWORD *)(a1 + 1616);
  v7 = *(_QWORD *)(a1 + 1624);
  v8 = 2 * v43;
  v47 = (char *)a2[175];
  result = (unint64_t)memmove(v47, v4, 2 * v43);
  v41 = v3 - 2;
  if ((unint64_t)(v3 - 2) >= 3)
  {
    v10 = v5 + 2 * v42;
    v11 = &v47[2 * (v43 & 0xFFFFFFFFFFFFFFFELL)];
    v12 = &v4[v8];
    v13 = v2 - 2;
    v14 = (uint64_t)&v4[v8 + 4];
    v15 = &v47[2 * (v43 >> 1)];
    v16 = (unint64_t)&v4[v8 + 4 + (v43 & 0xFFFFFFFFFFFFFFFELL)];
    v17 = 4;
    v18 = 2;
    v19 = 1;
    do
    {
      v44 = v15;
      v45 = v18;
      v15 = v11;
      v46 = v12;
      v20 = v19;
      result = (unint64_t)memmove(v11, v12, v43 & 0xFFFFFFFFFFFFFFFELL);
      v21 = v20 + 2;
      if (v13 > v20 + 2)
      {
        v22 = 2 * v20;
        v23 = v15 + 4;
        v24 = v44 + 4;
        v25 = v16;
        v26 = v14;
        v27 = 1;
        do
        {
          v28 = *(unsigned __int16 *)&v24[2 * v20];
          v29 = *(unsigned __int16 *)&v23[v22 - 2];
          v30 = *(unsigned __int16 *)&v23[v22 + 2];
          v31 = *(unsigned __int16 *)(v25 + 2 * v20);
          switch((*(unsigned __int8 *)(v10 + v27) >> v17) & 0xF)
          {
            case 0:
              v32 = ((v30 - v29) & ((v30 - v29) >> 31)) + v29;
              if (v30 <= v29)
                v31 = *(unsigned __int16 *)&v23[v22 - 2];
              else
                v31 = *(unsigned __int16 *)&v23[v22 + 2];
              break;
            case 1:
              v28 = (v28 + v30 + 1) >> 1;
              v35 = v29 + v31;
              goto LABEL_19;
            case 2:
              goto LABEL_20;
            case 3:
              v28 = (v28 + v29 + 1) >> 1;
              v35 = v30 + v31;
LABEL_19:
              v31 = (v35 + 1) >> 1;
LABEL_20:
              v32 = ((v31 - v28) & ((v31 - v28) >> 31)) + v28;
              if (v31 <= v28)
                v31 = v28;
              break;
            default:
              v33 = ((v30 - v29) & ((v30 - v29) >> 31)) + v29;
              if (v30 > v29)
                v29 = *(unsigned __int16 *)&v23[v22 + 2];
              v34 = ((v31 - v28) & ((v31 - v28) >> 31)) + v28;
              if (v31 <= v28)
                v31 = *(unsigned __int16 *)&v24[2 * v20];
              v32 = ((v33 - v34) & ((v33 - v34) >> 31)) + v34;
              if (v31 <= v29)
                v31 = v29;
              break;
          }
          v36 = (v32 * v6 + 512) >> 10;
          v37 = *(unsigned __int16 *)&v23[2 * v20];
          v38 = v37 - v31;
          result = (v32 - v37);
          if (v38 > v36 || (int)result > v36)
          {
            v40 = (*(unsigned __int16 *)(v7 + 2 * v32)
                 + *(unsigned __int16 *)(v7 + 2 * v31)
                 + 1) >> 1;
            *(_WORD *)(v26 + 2 * v20) = (v40 * v40 + 0x8000) >> 16;
          }
          v25 += 4;
          v21 += 2;
          v26 += 4;
          v23 += 4;
          v24 += 4;
          ++v27;
        }
        while (v21 < v13);
      }
      v19 = v20 ^ 1;
      v17 ^= 4u;
      v18 = v45 + 1;
      v12 = &v46[v43];
      v10 += v42;
      v14 += v43;
      v16 += v43;
      v11 = v47;
      v47 = v44;
    }
    while (v45 + 1 != v41);
  }
  return result;
}

uint64_t sub_1D53873E8(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _WORD *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;

  v2 = a2[177] - 2;
  if (v2 >= 3)
  {
    v3 = a2[179];
    v4 = a2[181];
    v5 = v3 >> 1;
    v6 = *(_QWORD *)(result + 1680);
    v7 = a2[180] + 2 * v4;
    v8 = a2[178];
    v9 = v3 & 0xFFFFFFFFFFFFFFFELL;
    v10 = v8 + 2 * v9;
    v11 = *(_DWORD *)(result + 1688);
    v12 = 4 * (v11 & 1);
    v13 = a2[176] - 2;
    v14 = v8 + v9;
    result = v8 + 6 * v5;
    v15 = 2;
    do
    {
      v16 = v11 + 2;
      if (v13 > v16)
      {
        v17 = v16 >> 1;
        v18 = (_WORD *)(v10 + 2 * v16);
        v19 = *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v10 + 2 * v11 + 2));
        do
        {
          v20 = *(unsigned __int8 *)(v7 + v17) >> v12;
          v21 = *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(v14 + 2 * v16));
          v22 = *(unsigned __int16 *)(v6 + 2 * (unsigned __int16)v18[1]);
          v23 = *(unsigned __int16 *)(v6 + 2 * *(unsigned __int16 *)(result + 2 * v16));
          v24 = (v23 + v21 + 1) >> 1;
          if ((v20 & 0xF) == 0)
            v24 = (v19 + v22 + 1) >> 1;
          v25 = (v19 + v21 + v22 + v23 + 2) >> 2;
          if ((v20 & 5) == 0)
            v25 = v24;
          *v18 = (v25 * v25 + 0x8000) >> 16;
          v18 += 2;
          v16 += 2;
          ++v17;
          v19 = v22;
        }
        while (v16 < v13);
      }
      v11 ^= 1u;
      v12 ^= 4u;
      ++v15;
      v10 += 2 * v5;
      v7 += v4;
      v14 += v9;
      result += v9;
    }
    while (v15 != v2);
  }
  return result;
}

char *sub_1D5387530(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *result;
  char *v11;
  char *v12;
  char *v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  char *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  __int16 v58;
  __int16 v59;
  __int16 v60;
  unsigned __int8 *v61;
  unsigned int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  BOOL v71;
  __int16 v72;
  uint64_t v73;
  unsigned __int8 *v74;
  __int16 v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  __int16 v84;
  __int16 v85;
  __int16 v86;
  __int16 v87;
  int v88;
  __int16 v89;
  __int16 v90;
  __int16 v91;
  __int16 v92;
  unsigned int v93;
  int v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  BOOL v99;
  unsigned int v100;
  __int16 v101;
  __int16 v102;
  unsigned __int8 *v103;
  __int16 v104;
  __int16 v105;
  __int16 v106;
  __int16 v107;
  __int16 v108;
  uint64_t v109;
  char *v110;
  char *v111;
  size_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  unsigned int v119;
  int v120;
  int v121;
  int v122;
  unsigned int v123;
  unsigned __int8 *v124;
  unsigned __int8 *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  int v137;
  unsigned int v138;
  int v139;
  int v140;
  char *v141;
  char *v142;
  unsigned int v143;
  char *v144;
  unint64_t v145;
  int v146;
  _DWORD *v147;
  unsigned int v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;

  v2 = a2[182];
  v3 = a2[183];
  v4 = (char *)a2[184];
  v5 = a2[185];
  v6 = a2[186];
  v7 = a2[188];
  v114 = a2[187];
  v115 = a2[189];
  v8 = (char *)a2[190];
  v146 = *(_DWORD *)(a1 + 1736);
  v9 = 2 * v5;
  result = (char *)memmove(v8, v4, 2 * v5);
  v113 = v3 - 2;
  if ((unint64_t)(v3 - 2) >= 3)
  {
    v11 = &v4[v9];
    v12 = &v8[v9];
    v13 = &v8[v5];
    if (v115 > 3)
    {
      v14 = (_DWORD *)(v7 + 2 * v115);
      v133 = v6 + 2 * v114;
      v131 = (uint64_t)&v4[4 * (v5 >> 1) + 4 + v9];
      v132 = (uint64_t)&v4[v9 + 4];
      v130 = (unint64_t)&v4[v9 + 10 + (v5 & 0xFFFFFFFFFFFFFFFELL)];
      v15 = 2;
      v112 = v5;
      v145 = v2 - 3;
      while (1)
      {
        v147 = v14;
        v128 = v13;
        v129 = v8;
        v134 = v15;
        v152 = 2 * (v15 & 1);
        v126 = v11;
        v127 = v12;
        result = (char *)memmove(v12, v11, v5);
        v16 = v145;
        v17 = v147;
        v18 = 0;
        v19 = v146;
        while (!v147[v18])
        {
          if (v115 >> 2 == ++v18)
            goto LABEL_4;
        }
        v20 = v134 & 1 | 2;
        if (v20 < v145)
          break;
LABEL_4:
        v14 = (_DWORD *)((char *)v17 + v115);
        v15 = v134 + 1;
        v5 = v112;
        v13 = v127;
        v11 = &v126[v112];
        v131 += v112;
        v12 = v129;
        v130 += v112;
        v132 += v112;
        v133 += v114;
        v8 = v128;
        if (v134 + 1 == v113)
          return result;
      }
      v21 = v132;
      v22 = (unsigned __int8 *)(v133 + 1);
      v23 = 1 << v20;
      v24 = v127;
      v25 = v128 + 6;
      v27 = v8;
      v26 = v130;
      v28 = v131;
      v29 = (char *)v147;
      while (1)
      {
        if ((*(_DWORD *)v29 & v23) != 0)
        {
          if (v19 == 2)
          {
            v33 = v152;
            v34 = &v24[v152];
            v35 = &v25[v152];
            v31 = v20 & 1;
            v36 = *v22;
            v37 = v36 >> 4;
            v38 = v36 & 0xF;
            if ((v20 & 1) != 0)
              v38 = v37;
            switch(v38)
            {
              case 0:
                v39 = *(unsigned __int16 *)&v24[v152 + 2];
                v40 = *((unsigned __int16 *)v34 + 2);
                v41 = *(unsigned __int16 *)&v24[v152 + 6];
                if (v39 >= v40)
                  goto LABEL_48;
                goto LABEL_54;
              case 1:
                v39 = *(unsigned __int16 *)&v25[v152];
                v40 = *((unsigned __int16 *)v34 + 2);
                v41 = *(unsigned __int16 *)(v26 + v152 - 8);
                if (v39 < v40)
                  goto LABEL_54;
                goto LABEL_48;
              case 2:
                v39 = *((unsigned __int16 *)v35 - 1);
                v40 = *((unsigned __int16 *)v34 + 2);
                v41 = *(unsigned __int16 *)(v26 + v152 - 6);
                if (v39 >= v40)
                  goto LABEL_48;
                goto LABEL_54;
              case 3:
                v39 = *(unsigned __int16 *)&v25[v152 - 4];
                v40 = *((unsigned __int16 *)v34 + 2);
                v41 = *(unsigned __int16 *)(v26 + v152 - 4);
                if (v39 >= v40)
                {
LABEL_48:
                  if ((int)v41 > (int)v40)
                    LOWORD(v40) = v41;
                  if (v39 >= v41)
                    v60 = v40;
                  else
                    v60 = v39;
                }
                else
                {
LABEL_54:
                  if ((int)v39 <= (int)v41)
                    LOWORD(v39) = v41;
                  if (v40 >= v41)
                    v60 = v39;
                  else
                    v60 = v40;
                }
                goto LABEL_60;
              case 4:
                v61 = v22;
                v60 = sub_1D5387E8C(*((unsigned __int16 *)v35 - 1), *(unsigned __int16 *)&v24[v152 + 2], *((unsigned __int16 *)v34 + 2), *(unsigned __int16 *)&v24[v152 + 6], *(unsigned __int16 *)(v26 + v152 - 6));
                v35 = &v25[v152];
                v34 = &v24[v152];
                v31 = v20 & 1;
                v33 = v152;
                v22 = v61;
                v16 = v145;
                v17 = v147;
                v19 = v146;
LABEL_60:
                *(_WORD *)(v21 + v33) = v60;
                break;
              default:
                break;
            }
            result = &v29[4 * (2 * v23 == 0)];
            if ((2 * v23) <= 1)
              v30 = 1;
            else
              v30 = 2 * v23;
            v62 = v22[v31];
            v32 = v20 + 1;
            v63 = v62 >> 4;
            v64 = v62 & 0xF;
            if ((v32 & 1) != 0)
              v64 = v63;
            switch(v64)
            {
              case 0:
                v65 = *((unsigned __int16 *)v34 + 2);
                v66 = *(unsigned __int16 *)&v24[v33 + 6];
                v67 = *(unsigned __int16 *)&v24[v33 + 8];
                if (v65 >= v66)
                  goto LABEL_84;
                goto LABEL_89;
              case 1:
                v65 = *(unsigned __int16 *)&v25[v33 + 2];
                v66 = *(unsigned __int16 *)&v24[v33 + 6];
                v67 = *(unsigned __int16 *)(v26 + v33 - 6);
                if (v65 < v66)
                  goto LABEL_89;
                goto LABEL_84;
              case 2:
                v65 = *(unsigned __int16 *)&v25[v33];
                v66 = *(unsigned __int16 *)&v24[v33 + 6];
                v67 = *(unsigned __int16 *)(v26 + v33 - 4);
                if (v65 >= v66)
                  goto LABEL_84;
                goto LABEL_89;
              case 3:
                v65 = *((unsigned __int16 *)v35 - 1);
                v66 = *(unsigned __int16 *)&v24[v33 + 6];
                v67 = *(unsigned __int16 *)(v26 + v33 - 2);
                if (v65 >= v66)
                {
LABEL_84:
                  if ((int)v67 > (int)v66)
                    LOWORD(v66) = v67;
                  if (v65 >= v67)
                    LOWORD(v65) = v66;
                }
                else
                {
LABEL_89:
                  if ((int)v65 <= (int)v67)
                    LOWORD(v65) = v67;
                  if (v66 < v67)
                    LOWORD(v65) = v66;
                }
                *(_WORD *)(v21 + v33 + 2) = v65;
                break;
              case 4:
                v141 = result;
                v149 = v31;
                v73 = v33;
                v74 = v22;
                v75 = sub_1D5387E8C(*(unsigned __int16 *)&v25[v33], *((unsigned __int16 *)v34 + 2), *(unsigned __int16 *)&v24[v33 + 6], *(unsigned __int16 *)&v24[v33 + 8], *(unsigned __int16 *)(v26 + v33 - 4));
                v17 = v147;
                v31 = v149;
                v22 = v74;
                v19 = v146;
                *(_WORD *)(v21 + v73 + 2) = v75;
                result = v141;
                v16 = v145;
                break;
              default:
                goto LABEL_15;
            }
            goto LABEL_15;
          }
          v42 = v152;
          v43 = *(unsigned __int16 *)(v21 + v152);
          v44 = *(unsigned __int16 *)&v27[v152 + 4];
          v45 = *(unsigned __int16 *)&v25[v152 - 4];
          v46 = *(unsigned __int16 *)&v25[v152];
          v47 = *(unsigned __int16 *)&v24[v152];
          v48 = *(unsigned __int16 *)&v24[v152 + 8];
          v49 = *(unsigned __int16 *)(v26 + v152 - 8);
          v50 = *(unsigned __int16 *)(v26 + v152 - 4);
          v51 = v28 + v152;
          v52 = *(unsigned __int16 *)(v28 + v152);
          if (!v19)
          {
            v31 = v20 & 1;
            v55 = *v22;
            v56 = v55 >> 4;
            v57 = v55 & 0xF;
            if ((v20 & 1) != 0)
              v57 = v56;
            switch(v57)
            {
              case 0:
                if (v47 >= v43)
                {
                  if (v48 <= (int)v43)
                    v89 = *(_WORD *)(v21 + v152);
                  else
                    v89 = *(_WORD *)&v24[v152 + 8];
                  if (v47 >= v48)
                    v59 = v89;
                  else
                    v59 = *(_WORD *)&v24[v152];
                }
                else
                {
                  if ((int)v47 <= v48)
                    v58 = *(_WORD *)&v24[v152 + 8];
                  else
                    v58 = *(_WORD *)&v24[v152];
                  if (v43 >= v48)
                    v59 = v58;
                  else
                    v59 = *(_WORD *)(v21 + v152);
                }
                goto LABEL_161;
              case 1:
                if (v46 >= v43)
                {
                  if (v49 <= (int)v43)
                    v90 = *(_WORD *)(v21 + v152);
                  else
                    v90 = *(_WORD *)(v26 + v152 - 8);
                  if (v46 >= v49)
                    v59 = v90;
                  else
                    v59 = *(_WORD *)&v25[v152];
                }
                else
                {
                  if ((int)v46 <= v49)
                    v85 = *(_WORD *)(v26 + v152 - 8);
                  else
                    v85 = *(_WORD *)&v25[v152];
                  if (v43 >= v49)
                    v59 = v85;
                  else
                    v59 = *(_WORD *)(v21 + v152);
                }
                goto LABEL_161;
              case 2:
                if (v44 >= v43)
                {
                  if ((int)v52 <= (int)v43)
                    v91 = *(_WORD *)(v21 + v152);
                  else
                    v91 = *(_WORD *)(v28 + v152);
                  if (v44 >= v52)
                    v59 = v91;
                  else
                    v59 = *(_WORD *)&v27[v152 + 4];
                }
                else
                {
                  if ((int)v44 <= (int)v52)
                    v86 = *(_WORD *)(v28 + v152);
                  else
                    v86 = *(_WORD *)&v27[v152 + 4];
                  if (v43 >= v52)
                    v59 = v86;
                  else
                    v59 = *(_WORD *)(v21 + v152);
                }
                goto LABEL_161;
              case 3:
                if (v45 >= v43)
                {
                  if (v50 <= (int)v43)
                    v92 = *(_WORD *)(v21 + v152);
                  else
                    v92 = *(_WORD *)(v26 + v152 - 4);
                  if (v45 >= v50)
                    v59 = v92;
                  else
                    v59 = *(_WORD *)&v25[v152 - 4];
                }
                else
                {
                  if ((int)v45 <= v50)
                    v87 = *(_WORD *)(v26 + v152 - 4);
                  else
                    v87 = *(_WORD *)&v25[v152 - 4];
                  if (v43 >= v50)
                    v59 = v87;
                  else
                    v59 = *(_WORD *)(v21 + v152);
                }
                goto LABEL_161;
              case 4:
                v88 = *(unsigned __int16 *)(v26 + v152 - 4);
                v125 = v22;
                v143 = *(unsigned __int16 *)&v25[v152];
                v123 = *(unsigned __int16 *)&v25[v152 - 4];
                v139 = *(unsigned __int16 *)(v26 + v152 - 8);
                v120 = *(unsigned __int16 *)&v24[v152 + 8];
                v59 = sub_1D5387E8C(*(unsigned __int16 *)&v25[v152 - 4], v143, v43, v49, v50);
                v48 = v120;
                v49 = v139;
                v45 = v123;
                v46 = v143;
                v50 = v88;
                v31 = v20 & 1;
                v42 = v152;
                v22 = v125;
                v16 = v145;
                v17 = v147;
                v19 = v146;
LABEL_161:
                *(_WORD *)(v21 + v42) = v59;
                break;
              default:
                break;
            }
            result = &v29[4 * (2 * v23 == 0)];
            if ((2 * v23) <= 1)
              v30 = 1;
            else
              v30 = 2 * v23;
            v32 = v20 + 1;
            v93 = v22[v31];
            v94 = v93 >> 4;
            v95 = v93 & 0xF;
            if ((v32 & 1) != 0)
              v95 = v94;
            v96 = v21 + v42;
            v97 = *(unsigned __int16 *)(v21 + v42 + 2);
            switch(v95)
            {
              case 1:
                v98 = *(unsigned __int16 *)&v25[v42 + 4];
                if (v98 < v97)
                {
                  if ((int)v98 <= v49)
                    LOWORD(v98) = v49;
                  v99 = v49 > v97;
                  goto LABEL_177;
                }
                if (v49 <= (int)v97)
                  v105 = *(_WORD *)(v21 + v42 + 2);
                else
                  v105 = v49;
                if (v49 <= v98)
                  LOWORD(v98) = v105;
                *(_WORD *)(v96 + 2) = v98;
                break;
              case 2:
                if (v46 >= v97)
                {
                  if (v50 <= (int)v97)
                    v106 = *(_WORD *)(v21 + v42 + 2);
                  else
                    v106 = v50;
                  if (v46 < v50)
                    v106 = v46;
                  *(_WORD *)(v96 + 2) = v106;
                }
                else
                {
                  if ((int)v46 <= v50)
                    LOWORD(v98) = v50;
                  else
                    LOWORD(v98) = v46;
                  v99 = v50 > v97;
LABEL_177:
                  if (v99)
                    LOWORD(v98) = *(_WORD *)(v21 + v42 + 2);
                  *(_WORD *)(v96 + 2) = v98;
                }
                break;
              case 3:
                v100 = *(unsigned __int16 *)(v26 + v42);
                if (v45 >= v97)
                {
                  if ((int)v100 <= (int)v97)
                    v107 = *(_WORD *)(v21 + v42 + 2);
                  else
                    v107 = *(_WORD *)(v26 + v42);
                  if (v45 >= v100)
                    v108 = v107;
                  else
                    v108 = v45;
                  *(_WORD *)(v96 + 2) = v108;
                }
                else
                {
                  if ((int)v45 <= (int)v100)
                    v101 = *(_WORD *)(v26 + v42);
                  else
                    v101 = v45;
                  if (v97 >= v100)
                    v102 = v101;
                  else
                    v102 = *(_WORD *)(v21 + v42 + 2);
                  *(_WORD *)(v96 + 2) = v102;
                }
                break;
              case 4:
                v144 = result;
                v151 = v31;
                v103 = v22;
                v104 = sub_1D5387E8C(v46, v97, v97, v48, v50);
                v17 = v147;
                v31 = v151;
                v22 = v103;
                v19 = v146;
                *(_WORD *)(v96 + 2) = v104;
                result = v144;
                v16 = v145;
                break;
              default:
                goto LABEL_15;
            }
            goto LABEL_15;
          }
          if (v19 == 1)
          {
            v118 = v28;
            v136 = *(unsigned __int16 *)(v28 + v152);
            v119 = *(unsigned __int16 *)&v24[v152 + 8];
            v137 = *(unsigned __int16 *)(v26 + v152 - 4);
            v138 = *(unsigned __int16 *)(v26 + v152 - 8);
            v124 = v22;
            v116 = *(unsigned __int16 *)(v51 - 4);
            v135 = *(unsigned __int16 *)(v51 + 4);
            v148 = *(unsigned __int16 *)&v27[v152 + 4];
            v117 = *(unsigned __int16 *)&v27[v152 + 8];
            v121 = *(unsigned __int16 *)&v25[v152 - 4];
            v140 = *(unsigned __int16 *)&v25[v152];
            v53 = sub_1D5387E8C(*(unsigned __int16 *)&v27[v152], v44, v117, v45, v46);
            if (v47 >= v43)
            {
              if ((int)v119 <= (int)v43)
                v68 = v43;
              else
                v68 = v119;
              if (v47 >= v119)
                v47 = v68;
            }
            else
            {
              if ((int)v47 <= (int)v119)
                v54 = v119;
              else
                v54 = v47;
              if (v43 >= v119)
                v47 = v54;
              else
                v47 = v43;
            }
            v69 = sub_1D5387E8C(v138, v137, v116, v136, v135);
            v70 = v53;
            v71 = v53 >= v47;
            v28 = v118;
            if (v71)
            {
              if ((int)v69 <= (int)v47)
                v72 = v47;
              else
                v72 = v69;
              if (v70 < v69)
                v72 = v70;
            }
            else
            {
              if ((int)v70 <= (int)v69)
                v72 = v69;
              else
                v72 = v70;
              if (v47 < v69)
                v72 = v47;
            }
            v76 = v140;
            v77 = v121;
            v78 = v148;
            *(_WORD *)(v21 + v152) = v72;
            v79 = 2 * v23;
            v142 = &v29[4 * (2 * v23 == 0)];
            if ((2 * v23) <= 1)
              v79 = 1;
            v122 = v79;
            v150 = v20 & 1;
            v32 = v20 + 1;
            v80 = *(unsigned __int16 *)(v21 + v152 + 2);
            v81 = *(unsigned __int16 *)(v26 + v152);
            v82 = sub_1D5387E8C(v78, v117, v77, v76, *(unsigned __int16 *)&v25[v152 + 4]);
            v83 = sub_1D5387E8C(v138, v137, v81, v136, v135);
            if (v82 >= v80)
            {
              if ((int)v83 <= (int)v80)
                v84 = v80;
              else
                v84 = v83;
              if (v82 < v83)
                v84 = v82;
            }
            else
            {
              if ((int)v82 <= (int)v83)
                v84 = v83;
              else
                v84 = v82;
              if (v83 > v80)
                v84 = v80;
            }
            *(_WORD *)(v21 + v152 + 2) = v84;
            v19 = v146;
            v17 = v147;
            v31 = v150;
            result = v142;
            v16 = v145;
            v22 = v124;
            v30 = v122;
            goto LABEL_15;
          }
        }
        result = &v29[4 * (2 * v23 == 0)];
        if ((2 * v23) <= 1)
          v30 = 1;
        else
          v30 = 2 * v23;
        v31 = v20 & 1;
        v32 = v20 + 1;
LABEL_15:
        v29 = &result[4 * (2 * v30 == 0)];
        if ((2 * v30) <= 1)
          v23 = 1;
        else
          v23 = 2 * v30;
        v22 += v31 + (v32 & 1);
        v20 = v32 + 1;
        v28 += 4;
        v26 += 4;
        v21 += 4;
        v27 += 4;
        v24 += 4;
        v25 += 4;
        if (v20 >= v16)
          goto LABEL_4;
      }
    }
    v109 = v3 - 4;
    v110 = &v8[v5];
    do
    {
      v111 = v8;
      result = (char *)memmove(v12, v11, v5);
      v11 += v5;
      v8 = v110;
      v110 = v12;
      v12 = v111;
      --v109;
    }
    while (v109);
  }
  return result;
}

uint64_t sub_1D5387E8C(uint64_t result, int a2, int a3, int a4, int a5)
{
  if ((int)result >= a2)
  {
    if (a3 >= a4)
    {
      if ((int)result < a3)
      {
        if (a4 < a5)
        {
          if ((int)result < a5)
          {
            if ((int)result <= a4)
              return a4;
            else
              return result;
          }
LABEL_58:
          if (a2 <= a5)
            return a5;
          else
            return a2;
        }
        if ((int)result < a4)
          goto LABEL_55;
        goto LABEL_74;
      }
      if (a2 >= a5)
      {
        if (a2 >= a3)
          goto LABEL_80;
        goto LABEL_74;
      }
      if (a3 < a5)
        goto LABEL_66;
    }
    else
    {
      if ((int)result < a4)
      {
        if (a3 < a5)
        {
          if ((int)result < a5)
          {
            if ((int)result <= a3)
              return a3;
            else
              return result;
          }
          goto LABEL_58;
        }
        if ((int)result >= a3)
        {
LABEL_66:
          if (a2 <= a3)
            return a3;
          else
            return a2;
        }
LABEL_55:
        if ((int)result <= a5)
          return a5;
        else
          return result;
      }
      if (a2 < a5)
      {
        if (a4 >= a5)
        {
LABEL_80:
          if (a3 <= a5)
            return a5;
          else
            return a3;
        }
LABEL_74:
        if (a2 <= a4)
          return a4;
        else
          return a2;
      }
      if (a2 < a4)
        goto LABEL_66;
    }
    if (a4 <= a5)
      return a5;
    else
      return a4;
  }
  if (a3 < a4)
  {
    if ((int)result < a3)
    {
      if (a2 < a5)
      {
        if (a2 >= a3)
          goto LABEL_51;
        goto LABEL_48;
      }
      if (a3 < a5)
      {
LABEL_39:
        if (a4 >= a5)
          return a5;
        else
          return a4;
      }
      goto LABEL_42;
    }
    if (a4 < a5)
    {
      if ((int)result < a4)
      {
LABEL_51:
        if (a2 >= a4)
          return a4;
        else
          return a2;
      }
      goto LABEL_32;
    }
    if ((int)result >= a5)
    {
      if ((int)result >= a4)
        return a4;
      else
        return result;
    }
    goto LABEL_70;
  }
  if ((int)result < a4)
  {
    if (a2 >= a5)
    {
      if (a4 >= a5)
        goto LABEL_51;
LABEL_48:
      if (a3 >= a5)
        return a5;
      else
        return a3;
    }
    if (a2 < a4)
      goto LABEL_39;
    goto LABEL_42;
  }
  if (a3 < a5)
  {
    if ((int)result >= a3)
    {
LABEL_32:
      if ((int)result >= a5)
        return a5;
      else
        return result;
    }
LABEL_42:
    if (a2 >= a3)
      return a3;
    else
      return a2;
  }
  if ((int)result < a5)
  {
LABEL_70:
    if (a2 >= a5)
      return a5;
    else
      return a2;
  }
  if ((int)result >= a3)
    return a3;
  else
    return result;
}

unint64_t sub_1D538805C(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint16x8_t *v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  BOOL v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint16x8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint16x8_t *v23;
  unsigned __int128 *v24;
  unsigned __int128 *v25;
  uint16x8_t *v26;
  unint64_t v27;
  uint16x8_t v28;
  uint32x4_t v29;
  unsigned __int128 v30;
  uint64_t v31;
  uint16x8_t *v32;
  unsigned __int128 *v33;
  uint16x8_t *v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int128 *v37;
  uint16x8_t *v38;
  uint16x8_t v39;
  uint32x4_t v40;
  unsigned __int128 v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t result;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint16x4_t *v63;
  uint16x4_t *v64;
  uint16x4_t v65;
  uint16x4_t v66;
  uint16x4_t *v67;
  uint16x4_t *v68;
  uint16x4_t v69;
  uint16x4_t v70;
  __int16 *v71;
  __int16 *v72;
  __int16 *v73;
  __int16 *v74;
  __int16 *v75;
  __int16 *v76;
  __int16 *v77;
  __int16 *v78;
  uint16x4_t *v79;
  uint16x4_t *v80;
  uint16x4_t v81;
  uint32x4_t v82;
  uint32x4_t v83;
  uint16x4_t v84;
  uint32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  uint32x4_t v91;
  int32x4_t v92;
  uint32x4_t v93;
  uint32x4_t v94;
  uint32x4_t v95;
  uint32x4_t v96;
  uint32x4_t v97;
  uint32x4_t v98;
  uint32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  uint32x4_t v102;
  uint32x4_t v103;
  __int32 v104;
  __int32 v105;
  __int32 v106;
  __int32 v107;
  __int32 v108;
  __int32 v109;
  int v110;
  __int32 v111;
  __int32 v112;
  __int32 v113;
  __int32 v114;
  __int32 v115;
  __int32 v116;
  unsigned int v117;
  __int32 v118;
  unsigned __int16 *v119;
  unsigned __int16 *v120;
  int v121;
  unsigned __int16 *v122;
  unsigned __int16 *v123;
  unsigned __int16 *v124;
  unsigned __int16 *v125;
  unsigned __int16 *v126;
  unsigned __int16 *v127;
  int v128;
  __int32 v129;
  __int32 v130;
  int v131;
  unsigned int v132;
  __int32 v133;
  __int32 v134;
  __int32 v135;
  __int32 v136;
  signed int v137;
  uint64_t v138;
  uint16x4_t *v139;
  uint16x4_t *v140;
  int32x4_t v141;
  int32x4_t v142;
  uint32x4_t v143;
  uint32x4_t v144;
  uint16x4_t v145;
  uint16x4_t *v146;
  uint16x4_t *v147;
  uint16x4_t v148;
  uint16x4_t *v149;
  char *v150;
  uint16x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  uint32x4_t v157;
  int32x4_t v158;
  uint32x4_t v159;
  uint32x4_t v160;
  uint32x4_t v161;
  uint32x4_t v162;
  int32x4_t v163;
  __int32 v164;
  __int32 v165;
  unsigned int v166;
  __int32 v167;
  __int32 v168;
  __int32 v169;
  __int32 v170;
  unsigned int v171;
  int32x4_t v172;
  unsigned __int16 *v173;
  unsigned __int16 *v174;
  int v175;
  unsigned int v176;
  int v177;
  unsigned __int16 *v178;
  unsigned __int16 *v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  int32x4_t v183;
  int32x4_t v184;
  __int32 v185;
  __int32 v186;
  uint32x4_t v187;
  uint32x4_t v188;
  uint32x4_t v189;
  uint32x4_t v190;
  uint32x4_t v191;
  unsigned int v192;
  __int32 v193;
  __int32 v194;
  __int32 v195;
  __int32 v196;
  __int32 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  int v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  unsigned __int16 *v206;
  int v207;
  __int32 v208;
  __int32 v209;
  uint64_t v210;
  __int32 v211;
  __int32 v212;
  int v213;
  __int32 v214;
  int v215;
  unsigned int v216;
  __int32 v217;
  __int32 v218;
  int v219;
  int v220;
  __int32 v221;
  unsigned __int16 *v222;
  uint64_t v223;
  __int32 v224;
  unsigned __int16 *v225;
  __int32 v226;
  unsigned __int16 *v227;
  unsigned __int16 *v228;
  int v229;
  unsigned __int16 *v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  unsigned int v238;
  signed int v239;
  __int32 v240;
  unsigned int v241;
  signed int v242;
  signed int v243;
  _WORD *v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int *v247;
  _WORD *v248;
  unint64_t v249;
  uint32x2_t *v250;
  _WORD *v251;
  uint32x2_t v252;
  int32x2_t v253;
  int32x2_t v254;
  uint32x2_t v255;
  unsigned int v256;
  int v257;
  unint64_t v258;
  char v260;
  uint64_t v261;
  _WORD *v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  int v269;
  int v270;
  uint64_t v271;
  char *v272;
  char *v273;
  char *v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint16x8_t *v280;
  _QWORD *v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  unint64_t v315;
  char *v316;
  char *v317;
  char *v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  __int32 v326;
  unsigned int v327;
  unsigned int v328;
  __int32 v329;
  __int32 v330;
  __int32 v331;
  __int32 v332;
  __int32 v333;
  int v334;
  unsigned int v335;
  __int32 v336;
  __int32 v337;
  __int32 v338;
  unsigned int v339;
  unsigned int v340;
  __int32 v341;
  __int32 v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  __int32 v346;
  __int32 v347;
  __int32 v348;
  __int32 v349;
  int v350;
  __int32 v351;
  __int32 v352;
  __int32 v353;
  __int32 v354;
  unsigned int v355;
  __int32 v356;
  int v357;
  int v358;
  int v359;
  int v360;
  unsigned int v361;
  uint64_t v362;
  __int32 v363;
  uint64_t v364;
  unsigned int v365;
  uint64_t v366;
  __int32 v367;
  uint64_t v368;
  unsigned int v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  __int32 v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  __int32 v378;
  __int32 v379;
  unsigned int v380;
  __int32 v381;
  __int32 v382;
  __int32 v383;
  __int32 v384;
  unsigned int v385;
  __int32 v386;
  unsigned int v387;
  __int32 v388;
  __int32 v389;
  unsigned int v390;
  unsigned int v391;
  unsigned int v392;
  __int32 v393;
  unsigned int v394;
  __int32 v395;
  unsigned int v396;
  unsigned int v397;
  __int32 v398;
  unsigned int v399;
  unsigned int v400;
  uint64_t v401;
  unsigned int v402;
  uint64_t v403;
  uint64_t v404;
  __int32 v405;
  unsigned int v406;
  int v407;
  __int32 v408;
  int v409;

  v374 = *(_QWORD *)(a1 + 1792);
  v2 = a2[191];
  v3 = a2[192];
  v4 = a2[194];
  v5 = (uint16x8_t *)a2[199];
  if (v3)
    v6 = v2 == 0;
  else
    v6 = 1;
  v7 = 4 * v2;
  v8 = v4 >> 1;
  v261 = 4 * v2;
  v262 = (_WORD *)a2[193];
  if (v6)
  {
    v9 = (_QWORD *)a2[43];
    if (v2)
      v10 = v3 == 0;
    else
      v10 = 1;
    v11 = v10;
    v260 = v11;
  }
  else
  {
    v12 = 0;
    v13 = *(_QWORD *)(a1 + 1784);
    v14 = a2[199];
    v15 = a2[193];
    do
    {
      v16 = 0;
      do
      {
        *(_WORD *)(v14 + 2 * v16) = *(_WORD *)(v13 + 2 * *(unsigned __int16 *)(v15 + 2 * v16));
        ++v16;
      }
      while (v2 != v16);
      ++v12;
      v15 += v4;
      v14 += v4;
    }
    while (v12 != v3);
    v9 = (_QWORD *)a2[43];
    v17 = 2 * v8;
    if (v2 > 0xF)
    {
      if (v2 == (v2 & 0xFFFFFFFFFFFFFFF0))
      {
        v22 = 0;
        v23 = v5 + 1;
        v24 = (unsigned __int128 *)(v9 + 4);
        do
        {
          v25 = v24;
          v26 = v23;
          v27 = v2 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v28 = v26[-1];
            v29 = vmovl_high_u16(*v26);
            v30 = *(_OWORD *)&vmovl_u16(*(uint16x4_t *)v26->i8) | __PAIR128__(0x100000001000000, 0x100000001000000);
            *(v25 - 2) = *(_OWORD *)&vmovl_u16(*(uint16x4_t *)v28.i8) | __PAIR128__(0x100000001000000, 0x100000001000000);
            *(v25 - 1) = *(_OWORD *)&vmovl_high_u16(v28) | __PAIR128__(0x100000001000000, 0x100000001000000);
            *v25 = v30;
            v25[1] = *(_OWORD *)&v29 | __PAIR128__(0x100000001000000, 0x100000001000000);
            v25 += 4;
            v26 += 2;
            v27 -= 16;
          }
          while (v27);
          ++v22;
          v23 = (uint16x8_t *)((char *)v23 + v17);
          v24 = (unsigned __int128 *)((char *)v24 + v7);
        }
        while (v22 != v3);
      }
      else
      {
        v31 = 0;
        v32 = v5 + 1;
        v33 = (unsigned __int128 *)(v9 + 4);
        v34 = v5;
        v35 = a2[43];
        do
        {
          v36 = v2 & 0xFFFFFFFFFFFFFFF0;
          v37 = v33;
          v38 = v32;
          do
          {
            v39 = v38[-1];
            v40 = vmovl_high_u16(*v38);
            v41 = *(_OWORD *)&vmovl_u16(*(uint16x4_t *)v38->i8) | __PAIR128__(0x100000001000000, 0x100000001000000);
            *(v37 - 2) = *(_OWORD *)&vmovl_u16(*(uint16x4_t *)v39.i8) | __PAIR128__(0x100000001000000, 0x100000001000000);
            *(v37 - 1) = *(_OWORD *)&vmovl_high_u16(v39) | __PAIR128__(0x100000001000000, 0x100000001000000);
            *v37 = v41;
            v37[1] = *(_OWORD *)&v40 | __PAIR128__(0x100000001000000, 0x100000001000000);
            v37 += 4;
            v38 += 2;
            v36 -= 16;
          }
          while (v36);
          v42 = v2 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            *(_DWORD *)(v35 + 4 * v42) = v34->u16[v42] | 0x1000000;
            ++v42;
          }
          while (v2 != v42);
          ++v31;
          v32 = (uint16x8_t *)((char *)v32 + v17);
          v33 = (unsigned __int128 *)((char *)v33 + v7);
          v35 += v7;
          v34 = (uint16x8_t *)((char *)v34 + v17);
        }
        while (v31 != v3);
      }
    }
    else
    {
      v18 = 0;
      v19 = v5;
      v20 = a2[43];
      do
      {
        v21 = 0;
        do
        {
          *(_DWORD *)(v20 + 4 * v21) = v19->u16[v21] | 0x1000000;
          ++v21;
        }
        while (v2 != v21);
        ++v18;
        v20 += v7;
        v19 = (uint16x8_t *)((char *)v19 + v17);
      }
      while (v18 != v3);
    }
    v260 = 0;
  }
  v263 = v3;
  v264 = v2;
  v268 = v3 - 2;
  v283 = v2 - 2;
  v282 = (int)((2 * v8) ^ 0xFFFFFFFE);
  v43 = (uint64_t)v5->i64 - 4 * (int)v8;
  v258 = v8;
  v266 = v43 - 2;
  v267 = (int)v2;
  v278 = v43 + 4;
  v279 = (int)v8;
  v265 = v43 - 6;
  v301 = 16 * (_DWORD)v2;
  LODWORD(result) = 3;
  v45 = -3;
  v309 = 4 * (int)v2;
  v46 = 2 * (int)v8;
  v47 = 5;
  v300 = 8 * (_DWORD)v8;
  v377 = v46;
  v280 = v5;
  v281 = v9;
  do
  {
    v48 = result & ((int)result >> 31);
    v269 = v47;
    v49 = v47 - v48;
    v295 = v266 + v279 * (2 * (v45 + v49) + 14);
    v294 = v266 + v279 * (2 * (v45 + v49) + 12);
    v293 = v266 + v279 * (2 * (v45 + v49) + 10);
    v291 = v266 + v46 * (v45 + v49);
    v292 = v266 + v279 * (2 * (v45 + v49) + 8);
    v290 = v266 + v279 * (2 * (v45 + v49) + 6);
    v289 = v266 + v279 * (2 * (v45 + v49) + 2);
    v288 = v266 + v279 * (2 * (v45 + v49) + 4);
    v270 = result;
    v50 = (int)(result - (-(int)v45 & (-(int)v45 >> 31)) + 2);
    v277 = (uint64_t)v5->i64 + 2 * (int)v279 * v50;
    v285 = v50;
    v276 = (uint64_t)v5->i64 + 2 * (v45 + v50) * v279;
    v310 = v268 + v48;
    v302 = v310 - 3;
    v275 = (char *)v9 + v267 * (4 * v49 + 12);
    v273 = (char *)v9 + v267 * (4 * v49 + 4);
    v274 = (char *)v9 + v267 * (4 * v49 + 8);
    v51 = -3;
    v299 = 5;
    v298 = 3;
    v296 = v265;
    v297 = v266;
    v271 = v278 + v46 * v49;
    v272 = (char *)v9 + v309 * v49;
    v286 = v45;
    do
    {
      if (v51 | v45)
      {
        v52 = v298 & (v298 >> 31);
        v375 = v299 - v52;
        v284 = 4 * v375;
        v404 = 2 * v375;
        v376 = v283 + v52;
        v287 = v298 - (-(int)v51 & (-(int)v51 >> 31)) + 2;
        v311 = 2 * v282;
        v312 = 2 * v287;
        v53 = v285;
        v313 = v51;
        if (v302 > v285)
        {
          v53 = v285;
          if (v287 >= v376)
          {
            do
              v53 += 4;
            while (v53 < v302);
          }
          else
          {
            v319 = &v275[v284];
            v318 = &v274[v284];
            v317 = &v273[v284];
            v324 = v295 + v404;
            v54 = v293;
            v323 = v294 + v404;
            v316 = &v272[v284];
            v322 = v271 + v404;
            v55 = v290;
            v321 = v291 + v404;
            v56 = v288;
            v320 = v289 + v404;
            v57 = v292;
            v59 = v276;
            v58 = v277;
            v53 = v285;
            do
            {
              v315 = v53;
              v138 = 0;
              v303 = v58;
              v304 = v59;
              v139 = (uint16x4_t *)(v58 + v312 + v311);
              v140 = (uint16x4_t *)(v59 + v312 + 2 * v51 + v311);
              v141 = (int32x4_t)vsubl_u16(*v139, *v140);
              v142.i64[0] = 0x1000000010;
              v142.i64[1] = 0x1000000010;
              v143 = (uint32x4_t)vmlaq_s32(v142, v141, v141);
              v144 = vshrq_n_u32(v143, 5uLL);
              v145 = *(uint16x4_t *)((char *)v139 + v46);
              v146 = (uint16x4_t *)((char *)v139 + v46 + v46);
              v147 = (uint16x4_t *)((char *)v140 + v46 + v46);
              v148 = *v146;
              v149 = (uint16x4_t *)((char *)v146 + v46);
              v150 = (char *)v147 + v46;
              v151 = *(uint16x4_t *)((char *)v149 + v46);
              v152 = (int32x4_t)vsubl_u16(*v149, *(uint16x4_t *)((char *)v147 + v46));
              v153 = (int32x4_t)vsubl_u16(v151, *(uint16x4_t *)((char *)v147 + v46 + v46));
              v154 = (int32x4_t)vsubl_u16(v145, *(uint16x4_t *)((char *)v140 + v46));
              v155 = (int32x4_t)vsubl_u16(v148, *v147);
              v156.i64[0] = 0x1000000010;
              v156.i64[1] = 0x1000000010;
              v157 = (uint32x4_t)vmlaq_s32(v156, v152, v152);
              v158.i64[0] = 0x1000000010;
              v158.i64[1] = 0x1000000010;
              v159 = (uint32x4_t)vmlaq_s32(v158, v153, v153);
              v152.i64[0] = 0x1000000010;
              v152.i64[1] = 0x1000000010;
              v160 = (uint32x4_t)vmlaq_s32(v152, v154, v154);
              v153.i64[0] = 0x1000000010;
              v153.i64[1] = 0x1000000010;
              v161 = vshrq_n_u32(v157, 5uLL);
              v162 = vshrq_n_u32((uint32x4_t)vmlaq_s32(v153, v155, v155), 5uLL);
              v163 = (int32x4_t)vshrq_n_u32(v160, 5uLL);
              v164 = v163.i32[1];
              v165 = v163.i32[2];
              v166 = v163.u32[3];
              v167 = v163.i32[0];
              v168 = v162.i32[0];
              v169 = v162.i32[1];
              v170 = v162.i32[2];
              v171 = v162.u32[3];
              v172 = vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v163, v157, 5uLL), (int32x4_t)vsraq_n_u32(v162, v159, 5uLL));
              v173 = (unsigned __int16 *)((char *)v149 + v46 + v46);
              v174 = (unsigned __int16 *)&v150[v46 + v46];
              v175 = *v173 - *v174;
              v176 = (v175 * v175 + 16) >> 5;
              v357 = v173[1];
              v409 = v173[2];
              v399 = ((v357 - v174[1]) * (v357 - v174[1]) + 16) >> 5;
              v397 = ((v409 - v174[2]) * (v409 - v174[2]) + 16) >> 5;
              v371 = v173[3];
              v391 = ((v371 - v174[3]) * (v371 - v174[3]) + 16) >> 5;
              v177 = vaddvq_s32(v172) + v176 + v399 + v397 + v391;
              v178 = (unsigned __int16 *)((char *)v173 + v46);
              v179 = (unsigned __int16 *)((char *)v174 + v46);
              v180 = *v178 - *v179;
              v359 = v178[1];
              v385 = (v180 * v180 + 16) >> 5;
              v361 = ((v359 - v179[1]) * (v359 - v179[1]) + 16) >> 5;
              v181 = ((v178[2] - v179[2]) * (v178[2] - v179[2]) + 16) >> 5;
              v407 = v178[3];
              v369 = ((v407 - v179[3]) * (v407 - v179[3]) + 16) >> 5;
              v157.i64[0] = *(_QWORD *)((char *)v178 + v46);
              v163.i64[0] = *(_QWORD *)((char *)v179 + v46);
              v182 = v171;
              v183 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v157.i8, *(uint16x4_t *)v163.i8);
              v163.i64[0] = 0x1000000010;
              v163.i64[1] = 0x1000000010;
              v184 = (int32x4_t)vshrq_n_u32((uint32x4_t)vmlaq_s32(v163, v183, v183), 5uLL);
              v185 = v184.i32[1];
              v186 = v184.i32[2];
              v355 = v184.u32[3];
              v395 = v161.i32[1];
              v360 = v177 - (v164 + v167 + v165 + v166) + v385 + v361 + v181 + v369;
              v358 = vaddvq_s32(v184) + v360 - (v169 + v168 + v170 + v171);
              v393 = v161.i32[2];
              v187 = vmovl_u16(v151);
              v188 = vmovl_u16(*v149);
              v189 = vmovl_u16(v148);
              v190 = vmovl_u16(v145);
              v191 = vshrq_n_u32(v159, 5uLL);
              v192 = v161.u32[3];
              v389 = v191.i32[1];
              v365 = v191.u32[3];
              v387 = v191.u32[2];
              v193 = v190.i32[1];
              v194 = v190.i32[2];
              v353 = v190.i32[3];
              v195 = v189.i32[1];
              v354 = v189.i32[2];
              v350 = vaddvq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v172, v143, 5uLL));
              v196 = v184.i32[0];
              v351 = v161.i32[0];
              v363 = v189.i32[3];
              v197 = v188.i32[1];
              v352 = v188.i32[3];
              v383 = v188.i32[2];
              v347 = v187.i32[1];
              v367 = v187.i32[3];
              v381 = v187.i32[2];
              v379 = v144.i32[1];
              v356 = v144.i32[3];
              v373 = v144.i32[2];
              v349 = v191.i32[0];
              v348 = v144.i32[0];
              v307 = v55;
              v308 = v56;
              v198 = v56;
              v305 = v54;
              v306 = v57;
              v199 = v57;
              v200 = v54;
              v201 = v178[2];
              do
              {
                v333 = v196;
                v334 = v177;
                v336 = v168;
                v339 = v176;
                v342 = v167;
                v204 = v199;
                v205 = v55;
                v206 = (unsigned __int16 *)(v322 + 2 * v138);
                v207 = *v206 - *(unsigned __int16 *)(v321 + 2 * v138);
                v208 = v354;
                v209 = v197;
                v210 = v198;
                v211 = v383;
                v383 = v352;
                v212 = v209 + v352;
                v337 = v353;
                v213 = v209 + v352 + 4 * v354 + v353 + v193;
                v354 = v363;
                v214 = v195 + v363;
                v338 = v194;
                v215 = v213 + 2 * (v195 + v363 + v211 + v194);
                v332 = v379;
                v379 = v373;
                v373 = v356;
                v331 = v164;
                v346 = v165;
                v345 = v166;
                v343 = v182;
                v330 = v395;
                v395 = v393;
                v393 = v192;
                v329 = v389;
                v389 = v387;
                v387 = v365;
                v328 = v399;
                v399 = v397;
                v397 = v391;
                v327 = v361;
                v216 = v369;
                v326 = v185;
                v341 = v186;
                v340 = v355;
                v217 = v381;
                v218 = v367;
                v219 = v409;
                v409 = v371;
                v325 = v201;
                v220 = v407;
                v353 = *(unsigned __int16 *)((char *)v206 + v377);
                v221 = v353 - *(unsigned __int16 *)(v320 + 2 * v138);
                v222 = (unsigned __int16 *)((char *)v206 + v377 + v377);
                v223 = v210;
                v363 = *v222;
                v224 = v363 - *(unsigned __int16 *)(v210 + 2 * v375);
                v225 = (unsigned __int16 *)((char *)v222 + v377);
                v403 = v205;
                v352 = *v225;
                v226 = v352 - *(unsigned __int16 *)(v205 + 2 * v375);
                v227 = (unsigned __int16 *)((char *)v225 + v377);
                v401 = v204;
                v367 = *v227;
                v228 = (unsigned __int16 *)((char *)v227 + v377);
                v229 = *v228;
                v230 = (unsigned __int16 *)((char *)v228 + v377);
                v407 = *v230;
                v231 = *(unsigned __int16 *)((char *)v230 + v377);
                v232 = *(unsigned __int16 *)(v323 + 2 * v138);
                v233 = *(unsigned __int16 *)(v324 + 2 * v138);
                LODWORD(v205) = (v207 * v207 + 16) >> 5;
                v182 = (v224 * v224 + 16) >> 5;
                v335 = (v226 * v226 + 16) >> 5;
                v365 = ((v367 - *(unsigned __int16 *)(v204 + 2 * v375))
                      * (v367 - *(unsigned __int16 *)(v204 + 2 * v375))
                      + 16) >> 5;
                v344 = (v221 * v221 + 16) >> 5;
                v234 = v182 + v344 + v365 + v335;
                v356 = v205;
                v235 = v205 + v350 + v234;
                v236 = *(_DWORD *)(v374 + 4 * ((v215 + 8) >> 4));
                v237 = *(unsigned __int16 *)(v200 + 2 * v375);
                if (v235 < v236)
                  *(_DWORD *)&v316[4 * v138] += *(unsigned __int16 *)(v223 + v404 - 4) + 0x1000000;
                v238 = ((v229 - v237) * (v229 - v237) + 16) >> 5;
                v239 = v238 + v334 + v234;
                v195 = v208;
                v381 = v218;
                v240 = v347 + v218;
                v371 = v229;
                if (v239 < *(_DWORD *)(v374
                                      + 4
                                      * ((v347 + v218 + 4 * v211 + v214 + 2 * (v212 + v217 + v208) + 8) >> 4)))
                  *(_DWORD *)&v317[4 * v138] += *(unsigned __int16 *)(v403 + v404 - 4) + 0x1000000;
                v391 = v238;
                v369 = ((v407 - v232) * (v407 - v232) + 16) >> 5;
                v241 = v238 + v365 + v335 + v369;
                v242 = v182 + v360 + v241;
                v197 = v211;
                v361 = v181;
                if (v242 < *(_DWORD *)(v374
                                      + 4
                                      * ((v357 + v409 + 4 * v217 + v212 + 2 * (v240 + v219 + v211) + 8) >> 4)))
                  *(_DWORD *)&v318[4 * v138] += *(unsigned __int16 *)(v204 + v404 - 4) + 0x1000000;
                v355 = ((v231 - v233) * (v231 - v233) + 16) >> 5;
                v243 = v241 + v358 + v355;
                v201 = v220;
                v181 = v216;
                if (v243 < *(_DWORD *)(v374
                                      + 4
                                      * ((v220
                                                      + v359
                                                      + 4 * v219
                                                      + v240
                                                      + 2 * (v357 + v409 + v325 + v217)
                                                      + 8) >> 4)))
                  *(_DWORD *)&v319[4 * v138] += *(unsigned __int16 *)(v200 + v404 - 4) + 0x1000000;
                v202 = v342 + v336 + v351 + v349;
                v350 = v235 - (v348 + v202);
                v177 = v239 - (v202 + v339);
                v203 = v351 + v349 + v339 + v385;
                v360 = v242 - (v336 + v203);
                v358 = v243 - (v203 + v333);
                ++v138;
                v200 += 2;
                v199 = v401 + 2;
                v55 = v403 + 2;
                v198 = v223 + 2;
                v359 = v325;
                v357 = v219;
                v347 = v217;
                v196 = v326;
                v385 = v327;
                v176 = v328;
                v349 = v329;
                v351 = v330;
                v168 = v169;
                v167 = v331;
                v348 = v332;
                v164 = v346;
                v165 = v345;
                v166 = v344;
                v169 = v170;
                v170 = v343;
                v185 = v341;
                v186 = v340;
                v193 = v338;
                v194 = v337;
                v192 = v335;
              }
              while (v375 + v138 < v376);
              v53 = v315 + 4;
              v58 = v303 + v300;
              v59 = v304 + v300;
              v319 += v301;
              v318 += v301;
              v317 += v301;
              v324 += v300;
              v323 += v300;
              v54 = v305 + v300;
              v316 += v301;
              v322 += v300;
              v57 = v306 + v300;
              v321 += v300;
              v55 = v307 + v300;
              v320 += v300;
              v56 = v308 + v300;
              v46 = v377;
              v51 = v313;
            }
            while (v315 + 4 < v302);
          }
        }
        if (v53 < v310 && v287 < v376)
        {
          v60 = (uint64_t)v280->i64 + 2 * v53 * v279;
          v61 = (uint64_t)v280->i64 + 2 * (v53 + v286) * v279;
          v368 = (uint64_t)v281 + v284 + v309 * v53;
          v366 = v296 + v404 + v279 * (2 * (v53 + v286) + 4);
          v372 = v297 + v404 + v46 * (v53 + v286);
          v370 = v278 + v404 + v46 * v53;
          do
          {
            v314 = v53;
            v62 = 0;
            v364 = v60;
            v63 = (uint16x4_t *)(v60 + v312 + v311);
            v362 = v61;
            v64 = (uint16x4_t *)(v61 + v312 + 2 * v51 + v311);
            v65 = *v63;
            v66 = *v64;
            v67 = (uint16x4_t *)((char *)v63 + v46);
            v68 = (uint16x4_t *)((char *)v64 + v46);
            v69 = *v67;
            v70 = *v68;
            v71 = (__int16 *)((char *)v67 + v46);
            v72 = (__int16 *)((char *)v68 + v46);
            v73 = (__int16 *)((char *)v67 + v46 + 2);
            v74 = (__int16 *)((char *)v68 + v46 + 2);
            v75 = (__int16 *)((char *)v67 + v46 + 4);
            v76 = (__int16 *)((char *)v68 + v46 + 4);
            v77 = (__int16 *)((char *)v67 + v46 + 6);
            v78 = (__int16 *)((char *)v68 + v46 + 6);
            v79 = (uint16x4_t *)((char *)v67 + v46 + v46);
            v80 = (uint16x4_t *)((char *)v68 + v46 + v46);
            v81.i16[0] = *v71;
            v81.i16[1] = *v73;
            v81.i16[2] = *v75;
            v81.i16[3] = *v77;
            v82 = vmovl_u16(*v79);
            v83 = vmovl_u16(v81);
            v84.i16[0] = *v72;
            v84.i16[1] = *v74;
            v85 = vmovl_u16(v69);
            v84.i16[2] = *v76;
            v84.i16[3] = *v78;
            v86 = (int32x4_t)vsubl_u16(v81, v84);
            v87 = (int32x4_t)vsubl_u16(*v79, *v80);
            v88 = (int32x4_t)vsubl_u16(v65, v66);
            v89 = (int32x4_t)vsubl_u16(v69, v70);
            v90.i64[0] = 0x1000000010;
            v90.i64[1] = 0x1000000010;
            v91 = (uint32x4_t)vmlaq_s32(v90, v86, v86);
            v92.i64[0] = 0x1000000010;
            v92.i64[1] = 0x1000000010;
            v93 = (uint32x4_t)vmlaq_s32(v92, v87, v87);
            v87.i64[0] = 0x1000000010;
            v87.i64[1] = 0x1000000010;
            v94 = (uint32x4_t)vmlaq_s32(v87, v88, v88);
            v86.i64[0] = 0x1000000010;
            v86.i64[1] = 0x1000000010;
            v95 = (uint32x4_t)vmlaq_s32(v86, v89, v89);
            v96 = vshrq_n_u32(v93, 5uLL);
            v97 = vshrq_n_u32(v91, 5uLL);
            v98 = vshrq_n_u32(v95, 5uLL);
            v99 = vshrq_n_u32(v94, 5uLL);
            v100 = (int32x4_t)vsubl_u16(*(uint16x4_t *)((char *)v79 + v46), *(uint16x4_t *)((char *)v80 + v46));
            v101.i64[0] = 0x1000000010;
            v101.i64[1] = 0x1000000010;
            v102 = (uint32x4_t)vmlaq_s32(v101, v100, v100);
            v103 = vshrq_n_u32(v102, 5uLL);
            v104 = v99.i32[0];
            v105 = v99.i32[1];
            v106 = v99.i32[2];
            v402 = v99.u32[3];
            v408 = v98.i32[1];
            v406 = v98.u32[2];
            v107 = v98.i32[0];
            v396 = v98.u32[3];
            v405 = v97.i32[1];
            v392 = v97.u32[3];
            v400 = v97.u32[2];
            v398 = v96.i32[1];
            v390 = v96.u32[3];
            v394 = v96.u32[2];
            v108 = v85.i32[1];
            v109 = v85.i32[2];
            v110 = vaddvq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32(v99, v91, 5uLL), (int32x4_t)vsraq_n_u32(v98, v93, 5uLL)), v102, 5uLL));
            v111 = v97.i32[0];
            v386 = v85.i32[3];
            v112 = v83.i32[1];
            v113 = v83.i32[2];
            v114 = v83.i32[3];
            v388 = v82.i32[1];
            v384 = v82.i32[2];
            v115 = v82.i32[3];
            v382 = v103.i32[1];
            v116 = v96.i32[0];
            v380 = v103.u32[2];
            v117 = v103.u32[3];
            v118 = v103.i32[0];
            do
            {
              v378 = v104;
              v119 = (unsigned __int16 *)(v372 + 2 * v62);
              v120 = (unsigned __int16 *)(v370 + 2 * v62);
              v121 = *v120 - *v119;
              v122 = (unsigned __int16 *)((char *)v120 + v46);
              v123 = (unsigned __int16 *)((char *)v119 + v46);
              v124 = (unsigned __int16 *)((char *)v120 + v46 + v46);
              v125 = (unsigned __int16 *)((char *)v119 + v46 + v46);
              v126 = (unsigned __int16 *)((char *)v124 + v46);
              v127 = (unsigned __int16 *)((char *)v125 + v46);
              v128 = *(unsigned __int16 *)((char *)v124 + v46 + v46) - *(unsigned __int16 *)((char *)v125 + v46 + v46);
              LODWORD(v120) = v108;
              v108 = v109;
              LODWORD(v119) = v112 + v109;
              v112 = v113;
              v129 = v114;
              v130 = v388;
              v113 = v129;
              v388 = v384;
              LODWORD(v119) = v129 + v384 + (_DWORD)v119;
              v384 = v115;
              v109 = v386;
              v131 = v115 + v130 + 4 * v112 + v386 + (_DWORD)v120 + 2 * (_DWORD)v119;
              v104 = v105;
              v132 = v402;
              v133 = v408;
              v408 = v406;
              v406 = v396;
              v134 = v405;
              v405 = v400;
              v400 = v392;
              v135 = v398;
              v398 = v394;
              v394 = v390;
              v136 = v382;
              v382 = v380;
              v380 = v117;
              v386 = *v122;
              v114 = *v124;
              v115 = *v126;
              v117 = (v128 * v128 + 16) >> 5;
              v402 = (v121 * v121 + 16) >> 5;
              v396 = ((v386 - *v123) * (v386 - *v123) + 16) >> 5;
              v392 = ((v114 - *v125) * (v114 - *v125) + 16) >> 5;
              v390 = ((v115 - *v127) * (v115 - *v127) + 16) >> 5;
              v137 = v402 + v110 + v396 + v392 + v390 + v117;
              if (v137 < *(_DWORD *)(v374 + 4 * ((v131 + 8) >> 4)))
                *(_DWORD *)(v368 + 4 * v62) += *(unsigned __int16 *)(v366 + 2 * v62) + 0x1000000;
              v110 = v137 - (v116 + v118 + v111 + v107 + v378);
              ++v62;
              v118 = v136;
              v116 = v135;
              v111 = v134;
              v107 = v133;
              v46 = v377;
              v105 = v106;
              v106 = v132;
            }
            while (v375 + v62 < v376);
            v53 = v314 + 1;
            v60 = v364 + v377;
            v61 = v362 + v377;
            v368 += v309;
            v366 += v377;
            v372 += v377;
            v370 += v377;
            v51 = v313;
          }
          while (v314 + 1 != v310);
        }
      }
      ++v51;
      --v298;
      --v299;
      v294 += 2;
      v295 += 2;
      v292 += 2;
      v293 += 2;
      v290 += 2;
      v291 += 2;
      v288 += 2;
      v289 += 2;
      v296 += 2;
      v297 += 2;
      LODWORD(v45) = v286;
    }
    while (v51 != 4);
    v45 = v286 + 1;
    result = (v270 - 1);
    v47 = v269 - 1;
    v5 = v280;
    v9 = v281;
  }
  while (v286 != 3);
  v244 = v262;
  if ((v260 & 1) == 0)
  {
    v245 = 0;
    v246 = a1 + 1800;
    do
    {
      if (v264 >= 2)
      {
        v247 = (unsigned int *)v9 + (v264 & 0xFFFFFFFFFFFFFFFELL);
        v248 = &v244[v264 & 0xFFFFFFFFFFFFFFFELL];
        v249 = v264 & 0xFFFFFFFFFFFFFFFELL;
        v250 = (uint32x2_t *)v9;
        v251 = v244;
        do
        {
          v252 = *v250++;
          v253 = (int32x2_t)vshr_n_u32(v252, 0x18uLL);
          v253.i32[0] = *(_DWORD *)(v246 + 4 * v253.u32[0]);
          v253.i32[1] = *(_DWORD *)(v246 + 4 * v253.u32[1]);
          v254 = vshr_n_s32(vmla_s32((int32x2_t)0x200000002000, (int32x2_t)(*(_QWORD *)&v252 & 0xFFFFFF00FFFFFFLL), v253), 0xEuLL);
          v255 = vshr_n_u32((uint32x2_t)vmla_s32((int32x2_t)0x800000008000, v254, v254), 0x10uLL);
          v251[1] = v255.i16[2];
          *v251 = v255.i16[0];
          v251 += 2;
          v249 -= 2;
        }
        while (v249);
        result = v264 & 0xFFFFFFFFFFFFFFFELL;
        if (v264 == (v264 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_66;
      }
      else
      {
        result = 0;
        v247 = (unsigned int *)v9;
        v248 = v244;
      }
      result = v264 - result;
      do
      {
        v256 = *v247++;
        v257 = (int)((v256 & 0xFFFFFF) * *(_DWORD *)(v246 + (((unint64_t)v256 >> 22) & 0x3FC)) + 0x2000) >> 14;
        *v248++ = (v257 * v257 + 0x8000) >> 16;
        --result;
      }
      while (result);
LABEL_66:
      ++v245;
      v244 += v258;
      v9 = (_QWORD *)((char *)v9 + v261);
    }
    while (v245 != v263);
  }
  return result;
}

void *sub_1D538955C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  __int128 v17;
  __int128 v18;

  v4 = *(_QWORD *)(a2 + 1600);
  v5 = *(_QWORD *)(a2 + 1608);
  v6 = *(_QWORD *)(a2 + 1632);
  v7 = *(_QWORD *)(a1 + 2040);
  v17 = 0u;
  v18 = 0u;
  v8 = *(_QWORD *)(a2 + 1624);
  if (v5)
    v9 = v4 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = 0;
    v11 = *(_QWORD *)(a2 + 1616);
    v12 = *(_QWORD *)(a2 + 1624);
    do
    {
      v13 = 0;
      do
      {
        *(_WORD *)(v12 + 2 * v13) = *(_WORD *)(v7 + 2 * *(unsigned __int16 *)(v11 + 2 * v13));
        ++v13;
      }
      while (v4 != v13);
      ++v10;
      v11 += v6;
      v12 += v6;
    }
    while (v10 != v5);
  }
  v16[0] = *(_QWORD *)(a1 + 2056);
  v14 = *(_QWORD *)(a1 + 2072);
  v16[1] = *(_QWORD *)(a1 + 2048);
  v16[2] = v14;
  if (*(_BYTE *)(a1 + 2064))
    return sub_1D538B43C(v8, v4, v5, v6, v8, *(char **)(a2 + 1640), a1 + 2080, *(void (**)(char *))(a1 + 2152), *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(a1 + 2176), (uint64_t)v16);
  sub_1D538B43C(v8, v4, v5, v6, *(_QWORD *)(a2 + 1648), *(char **)(a2 + 1640), a1 + 2080, *(void (**)(char *))(a1 + 2152), *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(a1 + 2168), (uint64_t)v16);
  v18 = *(_OWORD *)(a2 + 1648);
  *(_QWORD *)&v17 = v6;
  *((_QWORD *)&v17 + 1) = v18;
  return sub_1D538B43C(*(_QWORD *)(a2 + 1624), v4, v5, v6, *(_QWORD *)(a2 + 1624), *(char **)(a2 + 1640), a1 + 2116, *(void (**)(char *))(a1 + 2160), *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(a1 + 2184), (uint64_t)v16);
}

float sub_1D53896A0(float32x2_t *a1, float a2)
{
  double v3;
  float v4;
  double v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float64x2_t v15;
  float64x2_t v21;
  float32x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float32x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float32x2_t v29;
  float result;
  float64x2_t __x;
  float64x2_t __xa;
  long double v33;
  long double v34;
  float64x2_t v35;
  float64x2_t v36;
  float v37;
  long double v38;
  double v39;

  v37 = 1.0 / a2;
  v3 = (float)(1.0 / a2);
  v39 = v3 * 0.39894228;
  v4 = v3 * 0.39894228 * exp((float)((float)(1.0 / a2) * 0.0) * -0.5 * (float)((float)(1.0 / a2) * 0.0));
  v5 = v4;
  v6 = v3 * 0.39894228 * exp((float)(v37 * 0.33333) * -0.5 * (float)(v37 * 0.33333));
  *(float *)&v5 = (v5 + v6 * 2.0) / 3.0;
  v7 = v3 * 0.39894228 * exp((float)(v37 * 0.66667) * -0.5 * (float)(v37 * 0.66667));
  v8 = v3 * 0.39894228 * exp(v3 * -0.5 * v3);
  *(float *)&v3 = v8 + v7;
  v9 = v39 * exp((float)(v37 * 1.3333) * -0.5 * (float)(v37 * 1.3333));
  *(float *)&v3 = (float)(*(float *)&v3 + v9) / 3.0;
  v10 = v39 * exp((float)(v37 * 3.6667) * -0.5 * (float)(v37 * 3.6667));
  v11 = v39 * exp((float)(v37 * 4.0) * -0.5 * (float)(v37 * 4.0));
  v12 = v11 + v10;
  v13 = v39 * exp((float)(v37 * 4.3333) * -0.5 * (float)(v37 * 4.3333));
  v14 = (float)(v12 + v13) / 3.0;
  v15 = vcvtq_f64_f32(vmul_n_f32((float32x2_t)0x402AAAAB3FD55555, v37));
  __asm { FMOV            V1.2D, #-0.5 }
  v35 = _Q1;
  __x = vmulq_f64(vmulq_f64(v15, _Q1), v15);
  v33 = exp(__x.f64[1]);
  v21.f64[0] = exp(__x.f64[0]);
  v21.f64[1] = v33;
  v22 = vcvt_f32_f64(vmulq_n_f64(v21, v39));
  v23 = vcvtq_f64_f32(vmul_n_f32((float32x2_t)0x4040000040000000, v37));
  __xa = vmulq_f64(vmulq_f64(v23, v35), v23);
  v34 = exp(__xa.f64[1]);
  v24.f64[0] = exp(__xa.f64[0]);
  v24.f64[1] = v34;
  v25 = vadd_f32(vcvt_f32_f64(vmulq_n_f64(v24, v39)), v22);
  v26 = vcvtq_f64_f32(vmul_n_f32((float32x2_t)0x4055555540155555, v37));
  v36 = vmulq_f64(vmulq_f64(v26, v35), v26);
  v38 = exp(v36.f64[1]);
  v27.f64[0] = exp(v36.f64[0]);
  v27.f64[1] = v38;
  __asm { FMOV            V1.2S, #3.0 }
  *(float32x2_t *)&v27.f64[0] = vdiv_f32(vadd_f32(v25, vcvt_f32_f64(vmulq_n_f64(v27, v39))), _D1);
  v29 = vadd_f32(*(float32x2_t *)&v27.f64[0], *(float32x2_t *)&v27.f64[0]);
  v29.f32[0] = 1.0
             / (float)((float)((float)((float)((float)(*(float *)&v3 + *(float *)&v3) + *(float *)&v5) + v29.f32[0])
                             + v29.f32[1])
                     + (float)(v14 + v14));
  a1->f32[0] = v29.f32[0] * *(float *)&v5;
  a1->f32[1] = v29.f32[0] * *(float *)&v3;
  a1[1] = vmul_n_f32(*(float32x2_t *)&v27.f64[0], v29.f32[0]);
  result = v29.f32[0] * v14;
  a1[2].f32[0] = v29.f32[0] * v14;
  return result;
}

uint64_t sub_1D53899CC(__int16 *a1, unsigned __int16 *a2, int a3, unsigned __int16 *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  __int16 *v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  __int16 *v22;
  unsigned int v23;
  signed int v24;
  int v25;
  __int16 *v26;
  unsigned __int16 *v27;
  unsigned int v28;
  uint64_t v29;
  __int16 *v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  __int16 *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned __int16 *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  int v64;
  uint64_t result;
  uint64_t v66;
  uint64_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint64_t v73;
  const __int16 *v74;
  const __int16 *v75;
  const __int16 *v76;
  uint64_t v77;
  uint64_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  uint16x8_t v83;
  uint64_t v84;
  int v85;
  int16x8x4_t v86;
  int16x8x4_t v87;
  int16x8x4_t v88;
  int16x8x4_t v89;

  v4 = *a4;
  v5 = a4[1];
  v6 = a4[2];
  v7 = a4[3];
  v8 = a4[4];
  v9 = *a2;
  v10 = v8 + v7 + v6 + v5;
  v11 = a2[1];
  v12 = a2[2];
  v13 = a2[3];
  v14 = (__int16 *)(a2 + 4);
  v15 = a2[4];
  v16 = (v11 * v5 + v12 * v6 + (v10 + v4) * v9 + v13 * v7 + v15 * v8) >> 16;
  v17 = v12 * v5;
  v18 = a2[5];
  v19 = a2[6];
  v20 = (v11 * v5 + (v8 + v7 + v6) * v9 + v12 * v4 + v13 * v5 + v15 * v6 + v18 * v7 + v19 * v8) >> 16;
  v21 = a2[7];
  *a1 = v16;
  a1[1] = (v11 * v4 + v10 * v9 + v17 + v13 * v6 + v15 * v7 + v18 * v8) >> 16;
  a1[2] = v20;
  a1[3] = (v17 + (v8 + v7) * v9 + v13 * v4 + v15 * v5 + v19 * v7 + (v18 + v11) * v6 + v21 * v8) >> 16;
  v22 = a1 + 4;
  v23 = a3 - 12;
  if (a3 >= 12)
  {
    v85 = a3 & 0x7FFFFFFC;
    if (v23 >= 0x1C)
    {
      v28 = v23 >> 2;
      v29 = 4 * (v23 >> 2);
      v24 = 4;
      if (v22 >= (__int16 *)&a2[v29 + 12] || &a1[v29 + 8] <= (__int16 *)a2)
      {
        v66 = v28 + 1;
        v67 = 4 * (v66 & 0x7FFFFFF8);
        v30 = &v22[v67];
        v31 = (unsigned __int16 *)&v14[v67];
        a1 = (__int16 *)((char *)a1 + v67 * 2);
        v24 = (32 * ((v66 & 0x7FFFFFF8) >> 3)) | 4;
        v68 = vdupq_n_s32(v6);
        v69 = vdupq_n_s32(v7);
        v70 = vdupq_n_s32(v8);
        v71 = (uint16x8_t)vdupq_n_s16(v5);
        v72 = (uint16x8_t)vdupq_n_s16(v4);
        v73 = v66 & 0x7FFFFFF8;
        v74 = v14;
        do
        {
          v75 = v14 - 4;
          v87 = vld4q_s16(v75);
          v88 = vld4q_s16(v74);
          v74 += 32;
          v76 = v14 + 4;
          v89 = vld4q_s16(v76);
          v86.val[0] = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v72.i8, *(uint16x4_t *)v88.val[0].i8), *(uint16x4_t *)v71.i8, *(uint16x4_t *)v87.val[3].i8), *(uint16x4_t *)v71.i8, *(uint16x4_t *)v88.val[1].i8), (int32x4_t)vaddl_u16(*(uint16x4_t *)v88.val[2].i8, *(uint16x4_t *)v87.val[2].i8), v68), (int32x4_t)vaddl_u16(*(uint16x4_t *)v88.val[3].i8, *(uint16x4_t *)v87.val[1].i8), v69), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v89.val[0].i8, *(uint16x4_t *)v87.val[0].i8), v70)), vmlaq_s32(vmlaq_s32(
                             (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v72, (uint16x8_t)v88.val[0]), v71, (uint16x8_t)v87.val[3]), v71, (uint16x8_t)v88.val[1]), (int32x4_t)vaddl_high_u16((uint16x8_t)v88.val[2], (uint16x8_t)v87.val[2]), v68), (int32x4_t)vaddl_high_u16((uint16x8_t)v88.val[3], (uint16x8_t)v87.val[1]), v69), vmulq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v89.val[0], (uint16x8_t)v87.val[0]), v70));
          v86.val[1] = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v72.i8, *(uint16x4_t *)v88.val[1].i8), *(uint16x4_t *)v71.i8, *(uint16x4_t *)v88.val[0].i8), *(uint16x4_t *)v71.i8, *(uint16x4_t *)v88.val[2].i8), (int32x4_t)vaddl_u16(*(uint16x4_t *)v88.val[3].i8, *(uint16x4_t *)v87.val[3].i8), v68), (int32x4_t)vaddl_u16(*(uint16x4_t *)v89.val[0].i8, *(uint16x4_t *)v87.val[2].i8), v69), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v89.val[1].i8, *(uint16x4_t *)v87.val[1].i8), v70)), vmlaq_s32(vmlaq_s32(
                             (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v72, (uint16x8_t)v88.val[1]), v71, (uint16x8_t)v88.val[0]), v71, (uint16x8_t)v88.val[2]), (int32x4_t)vaddl_high_u16((uint16x8_t)v88.val[3], (uint16x8_t)v87.val[3]), v68), (int32x4_t)vaddl_high_u16((uint16x8_t)v89.val[0], (uint16x8_t)v87.val[2]), v69), vmulq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v89.val[1], (uint16x8_t)v87.val[1]), v70));
          v86.val[2] = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v72.i8, *(uint16x4_t *)v88.val[2].i8), *(uint16x4_t *)v71.i8, *(uint16x4_t *)v88.val[1].i8), *(uint16x4_t *)v71.i8, *(uint16x4_t *)v88.val[3].i8), (int32x4_t)vaddl_u16(*(uint16x4_t *)v89.val[0].i8, *(uint16x4_t *)v88.val[0].i8), v68), (int32x4_t)vaddl_u16(*(uint16x4_t *)v89.val[1].i8, *(uint16x4_t *)v87.val[3].i8), v69), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v89.val[2].i8, *(uint16x4_t *)v87.val[2].i8), v70)), vmlaq_s32(vmlaq_s32(
                             (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v72, (uint16x8_t)v88.val[2]), v71, (uint16x8_t)v88.val[1]), v71, (uint16x8_t)v88.val[3]), (int32x4_t)vaddl_high_u16((uint16x8_t)v89.val[0], (uint16x8_t)v88.val[0]), v68), (int32x4_t)vaddl_high_u16((uint16x8_t)v89.val[1], (uint16x8_t)v87.val[3]), v69), vmulq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v89.val[2], (uint16x8_t)v87.val[2]), v70));
          v86.val[3] = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v72.i8, *(uint16x4_t *)v88.val[3].i8), *(uint16x4_t *)v71.i8, *(uint16x4_t *)v88.val[2].i8), *(uint16x4_t *)v71.i8, *(uint16x4_t *)v89.val[0].i8), (int32x4_t)vaddl_u16(*(uint16x4_t *)v89.val[1].i8, *(uint16x4_t *)v88.val[1].i8), v68), (int32x4_t)vaddl_u16(*(uint16x4_t *)v89.val[2].i8, *(uint16x4_t *)v88.val[0].i8), v69), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v89.val[3].i8, *(uint16x4_t *)v87.val[3].i8), v70)), vmlaq_s32(vmlaq_s32(
                             (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v72, (uint16x8_t)v88.val[3]), v71, (uint16x8_t)v88.val[2]), v71, (uint16x8_t)v89.val[0]), (int32x4_t)vaddl_high_u16((uint16x8_t)v89.val[1], (uint16x8_t)v88.val[1]), v68), (int32x4_t)vaddl_high_u16((uint16x8_t)v89.val[2], (uint16x8_t)v88.val[0]), v69), vmulq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v89.val[3], (uint16x8_t)v87.val[3]), v70));
          vst4q_s16(v22, v86);
          v22 += 32;
          v14 = (__int16 *)v74;
          v73 -= 8;
        }
        while (v73);
        if ((v66 & 0x7FFFFFF8) == v66)
        {
LABEL_11:
          v25 = v85 - 4;
          v14 = (__int16 *)v31;
          v22 = v30;
          if (v85 - 4 < a3 - 4)
            goto LABEL_12;
LABEL_5:
          v26 = v22;
          v27 = (unsigned __int16 *)v14;
          goto LABEL_18;
        }
LABEL_9:
        v32 = v31;
        do
        {
          v33 = v30;
          v34 = *(v32 - 3);
          v35 = *(v32 - 2);
          v36 = *(v32 - 1);
          v37 = *v32;
          v38 = v32[1];
          v39 = v32[2];
          v40 = v32[3];
          v41 = v31[4];
          v31 += 4;
          v42 = (v36 * v5 + v37 * v4 + v38 * v5 + (v39 + v35) * v6 + (v40 + v34) * v7 + (v41 + *(v32 - 4)) * v8) >> 16;
          v43 = v32[5];
          v44 = (v37 * v5 + v38 * v4 + v39 * v5 + (v40 + v36) * v6 + (v41 + v35) * v7 + (v43 + v34) * v8) >> 16;
          v45 = v32[6];
          v46 = v32[7] + v36;
          *v30 = v42;
          v30 += 4;
          a1[5] = v44;
          a1[6] = (v38 * v5 + v39 * v4 + v40 * v5 + (v41 + v37) * v6 + (v43 + v36) * v7 + (v45 + v35) * v8) >> 16;
          a1[7] = (v39 * v5 + v40 * v4 + v41 * v5 + (v43 + v38) * v6 + (v45 + v37) * v7 + v46 * v8) >> 16;
          v24 += 4;
          v32 = v31;
          a1 = v33;
        }
        while (v24 < a3 - 7);
        goto LABEL_11;
      }
    }
    else
    {
      v24 = 4;
    }
    v30 = a1 + 4;
    v31 = a2 + 4;
    goto LABEL_9;
  }
  v25 = 4;
  if (a3 - 4 <= 4)
    goto LABEL_5;
LABEL_12:
  v47 = (a3 - v25 - 5);
  if (v47 < 7 || v22 < &v14[v47 + 5] && v14 - 4 < &v22[v47 + 1])
  {
    v27 = (unsigned __int16 *)v14;
    v26 = v22;
LABEL_16:
    v48 = a3 - v25 - 4;
    v49 = v27;
    do
    {
      v50 = v27[1];
      ++v27;
      *v26++ = (*v49 * v4
              + (v50 + *(v49 - 1)) * v5
              + (v49[2] + *(v49 - 2)) * v6
              + (v49[3] + *(v49 - 3)) * v7
              + (v49[4] + *(v49 - 4)) * v8) >> 16;
      v49 = v27;
      --v48;
    }
    while (v48);
    goto LABEL_18;
  }
  v77 = v47 + 1;
  v78 = (v47 + 1) & 0x1FFFFFFF8;
  v27 = (unsigned __int16 *)&v14[v78];
  v26 = &v22[v78];
  v79 = vdupq_n_s32(v5);
  v80 = vdupq_n_s32(v6);
  v81 = vdupq_n_s32(v7);
  v25 += v78;
  v82 = vdupq_n_s32(v8);
  v83 = (uint16x8_t)vdupq_n_s16(v4);
  v84 = v78;
  do
  {
    *(int16x8_t *)v22 = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)(v14 + 1), *(uint16x4_t *)(v14 - 1)), v79), *(uint16x4_t *)v83.i8, *(uint16x4_t *)v14), (int32x4_t)vaddl_u16(*(uint16x4_t *)(v14 + 2), *(uint16x4_t *)(v14 - 2)), v80), (int32x4_t)vaddl_u16(*(uint16x4_t *)(v14 + 3), *(uint16x4_t *)(v14 - 3)), v81), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)(v14 + 4), *(uint16x4_t *)(v14 - 4)), v82)), vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_high_u16(
                                           (uint32x4_t)vmulq_s32((int32x4_t)vaddl_high_u16(*(uint16x8_t *)(v14 + 1), *(uint16x8_t *)(v14 - 1)), v79), v83, *(uint16x8_t *)v14), (int32x4_t)vaddl_high_u16(*(uint16x8_t *)(v14 + 2), *(uint16x8_t *)(v14 - 2)), v80), (int32x4_t)vaddl_high_u16(*(uint16x8_t *)(v14 + 3), *(uint16x8_t *)(v14 - 3)), v81), vmulq_s32((int32x4_t)vaddl_high_u16(*(uint16x8_t *)(v14 + 4), *(uint16x8_t *)(v14 - 4)), v82));
    v22 += 8;
    v14 += 8;
    v84 -= 8;
  }
  while (v84);
  if (v77 != v78)
    goto LABEL_16;
LABEL_18:
  v51 = *(v27 - 4);
  v52 = *(v27 - 3);
  v53 = *(v27 - 2);
  v54 = *(v27 - 1);
  v55 = *v27;
  v56 = v27[1];
  v57 = v56 * v5;
  v58 = v27[2];
  v59 = v27[3];
  v60 = (v8 + v7) * v59;
  v61 = (v60 + v51 * v8 + v52 * v7 + v54 * v5 + v55 * v4 + v56 * v5 + (v58 + v53) * v6) >> 16;
  v62 = v58 * v5;
  v63 = (v60 + v52 * v8 + v53 * v7 + v54 * v6 + v55 * v5 + v56 * v4 + v58 * v5 + v59 * v6) >> 16;
  v64 = v59 * v5 + v59 * v6;
  result = (v60 + v53 * v8 + v54 * v7 + v55 * v6 + v57 + v58 * v4 + v64) >> 16;
  *v26 = v61;
  v26[1] = v63;
  v26[2] = result;
  v26[3] = (v60 + v54 * v8 + v55 * v7 + v56 * v6 + v62 + v59 * v4 + v64) >> 16;
  return result;
}

uint64_t sub_1D538A058(__int16 *a1, uint16x4_t *a2, int a3, unsigned __int16 *a4, uint64_t a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint16x4_t *v8;
  unsigned __int16 *v9;
  signed int v10;
  signed int v11;
  int32x4_t v12;
  unsigned int v13;
  int8x16_t v14;
  uint32x4_t v15;
  int32x4_t v16;
  int16x4_t *v17;
  uint16x4_t v18;
  uint16x4_t v19;
  uint64_t v20;
  uint32x4_t v21;
  unsigned __int16 v22;
  int8x16_t v23;
  int8x16_t v24;
  uint16x4_t v25;
  __int16 *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  signed int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  __int16 *v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  __int16 *v53;
  unsigned int v54;
  signed int v55;
  int v56;
  __int16 *v57;
  unsigned __int16 *v58;
  unsigned int v59;
  uint64_t v60;
  __int16 *v61;
  unsigned __int16 *v62;
  unsigned __int16 *v63;
  __int16 *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  unsigned __int16 *v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t result;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint64_t v102;
  const __int16 *v103;
  const __int16 *v104;
  const __int16 *v105;
  uint64_t v106;
  uint64_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  uint16x8_t v112;
  uint64_t v113;
  int16x8x4_t v114;
  int16x8x4_t v115;
  int16x8x4_t v116;
  int16x8x4_t v117;

  v5 = *(_DWORD *)a5;
  v6 = *(_DWORD *)(a5 + 4);
  v7 = *(_QWORD *)(a5 + 8);
  v8 = *(uint16x4_t **)(a5 + 40);
  v9 = *(unsigned __int16 **)(a5 + 48);
  *(_QWORD *)(a5 + 40) = (char *)v8 + *(_QWORD *)(a5 + 24);
  v10 = a3 & 0xFFFFFFFC;
  v11 = 0;
  if ((int)(a3 & 0xFFFFFFFC) < 1)
  {
    v17 = (int16x4_t *)v9;
    v27 = a3;
    if (a3 <= 0)
      goto LABEL_12;
  }
  else
  {
    v12 = vdupq_n_s32(v5);
    v13 = ((a3 & 0xFFFFFFFC) - 1) & 0xFFFFFFFC;
    v14.i64[0] = 0xFFFFLL;
    v14.i64[1] = 0xFFFFLL;
    v15 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v6));
    v16.i64[0] = 0xFFFF0000FFFFLL;
    v16.i64[1] = 0xFFFF0000FFFFLL;
    v17 = (int16x4_t *)v9;
    do
    {
      v18 = *v8++;
      v19 = v18;
      v20 = v18.u16[0];
      v21 = vmovl_u16(v18);
      v22 = v18.u16[1];
      v23.i64[0] = v21.u32[2];
      v23.i64[1] = v21.u32[3];
      v24 = vandq_s8(v23, v14);
      v25 = *a2++;
      v26 = (__int16 *)(v7 + 2 * v24.i64[0]);
      v24.i16[0] = *(_WORD *)(v7 + 2 * v20);
      v24.i16[1] = *(_WORD *)(v7 + 2 * v22);
      v24.i16[2] = *v26;
      v24.i16[3] = *(_WORD *)(v7 + 2 * v24.i64[1]);
      *v17++ = vmovn_s32(vminq_s32(vmaxq_s32((int32x4_t)vshlq_u32((uint32x4_t)vmulq_s32(vmaxq_s32((int32x4_t)vsubl_u16(vabd_u16(v25, v19), *(uint16x4_t *)v24.i8), (int32x4_t)0), v12), v15), (int32x4_t)0), v16));
      v11 += 4;
    }
    while (v11 < v10);
    v27 = a3 - (v13 + 4);
    if (a3 <= (int)(v13 + 4))
      goto LABEL_12;
  }
  do
  {
    v29 = v8->u16[0];
    v8 = (uint16x4_t *)((char *)v8 + 2);
    v28 = v29;
    v30 = a2->u16[0];
    a2 = (uint16x4_t *)((char *)a2 + 2);
    v31 = *(unsigned __int16 *)(v7 + 2 * v28);
    v32 = v30 - v28;
    if (v32 < 0)
      v32 = -v32;
    v33 = (((v32 - v31) & ~((v32 - v31) >> 31)) * v5) >> v6;
    if (v33 >= 0xFFFF)
      LOWORD(v33) = -1;
    v17->i16[0] = v33;
    v17 = (int16x4_t *)((char *)v17 + 2);
    --v27;
  }
  while (v27);
LABEL_12:
  v34 = *a4;
  v35 = a4[1];
  v36 = a4[2];
  v37 = a4[3];
  v38 = a4[4];
  v39 = *v9;
  v40 = v38 + v37;
  v41 = v38 + v37 + v36 + v35;
  v42 = v9[1];
  v43 = v9[2];
  v44 = v9[3];
  v45 = (__int16 *)(v9 + 4);
  v46 = v9[4];
  v47 = (v42 * v35 + v43 * v36 + (v41 + v34) * v39 + v44 * v37 + v46 * v38) >> 16;
  v48 = v43 * v35;
  v49 = v9[5];
  v50 = v9[6];
  v51 = (v42 * v35 + (v38 + v37 + v36) * v39 + v43 * v34 + v44 * v35 + v46 * v36 + v49 * v37 + v50 * v38) >> 16;
  v52 = v9[7];
  *a1 = v47;
  a1[1] = (v42 * v34 + v41 * v39 + v48 + v44 * v36 + v46 * v37 + v49 * v38) >> 16;
  a1[2] = v51;
  a1[3] = (v48 + (v38 + v37) * v39 + v44 * v34 + v46 * v35 + v50 * v37 + (v49 + v42) * v36 + v52 * v38) >> 16;
  v53 = a1 + 4;
  v54 = a3 - 12;
  if (a3 >= 12)
  {
    if (v54 >= 0x1C)
    {
      v59 = v54 >> 2;
      v60 = 4 * (v54 >> 2);
      v55 = 4;
      if (v53 >= (__int16 *)&v9[v60 + 12] || v9 >= (unsigned __int16 *)&a1[v60 + 8])
      {
        v95 = v59 + 1;
        v96 = 4 * (v95 & 0x7FFFFFF8);
        v61 = &v53[v96];
        v62 = (unsigned __int16 *)&v45[v96];
        a1 = (__int16 *)((char *)a1 + v96 * 2);
        v55 = (32 * ((v95 & 0x7FFFFFF8) >> 3)) | 4;
        v97 = vdupq_n_s32(v36);
        v98 = vdupq_n_s32(v37);
        v99 = vdupq_n_s32(v38);
        v100 = (uint16x8_t)vdupq_n_s16(v35);
        v101 = (uint16x8_t)vdupq_n_s16(v34);
        v102 = v95 & 0x7FFFFFF8;
        v103 = v45;
        do
        {
          v104 = v45 - 4;
          v115 = vld4q_s16(v104);
          v116 = vld4q_s16(v103);
          v103 += 32;
          v105 = v45 + 4;
          v117 = vld4q_s16(v105);
          v114.val[0] = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v101.i8, *(uint16x4_t *)v116.val[0].i8), *(uint16x4_t *)v100.i8, *(uint16x4_t *)v115.val[3].i8), *(uint16x4_t *)v100.i8, *(uint16x4_t *)v116.val[1].i8), (int32x4_t)vaddl_u16(*(uint16x4_t *)v116.val[2].i8, *(uint16x4_t *)v115.val[2].i8), v97), (int32x4_t)vaddl_u16(*(uint16x4_t *)v116.val[3].i8, *(uint16x4_t *)v115.val[1].i8), v98), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v117.val[0].i8, *(uint16x4_t *)v115.val[0].i8), v99)), vmlaq_s32(vmlaq_s32(
                              (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v101, (uint16x8_t)v116.val[0]), v100, (uint16x8_t)v115.val[3]), v100, (uint16x8_t)v116.val[1]), (int32x4_t)vaddl_high_u16((uint16x8_t)v116.val[2], (uint16x8_t)v115.val[2]), v97), (int32x4_t)vaddl_high_u16((uint16x8_t)v116.val[3], (uint16x8_t)v115.val[1]), v98), vmulq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v117.val[0], (uint16x8_t)v115.val[0]), v99));
          v114.val[1] = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v101.i8, *(uint16x4_t *)v116.val[1].i8), *(uint16x4_t *)v100.i8, *(uint16x4_t *)v116.val[0].i8), *(uint16x4_t *)v100.i8, *(uint16x4_t *)v116.val[2].i8), (int32x4_t)vaddl_u16(*(uint16x4_t *)v116.val[3].i8, *(uint16x4_t *)v115.val[3].i8), v97), (int32x4_t)vaddl_u16(*(uint16x4_t *)v117.val[0].i8, *(uint16x4_t *)v115.val[2].i8), v98), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v117.val[1].i8, *(uint16x4_t *)v115.val[1].i8), v99)), vmlaq_s32(vmlaq_s32(
                              (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v101, (uint16x8_t)v116.val[1]), v100, (uint16x8_t)v116.val[0]), v100, (uint16x8_t)v116.val[2]), (int32x4_t)vaddl_high_u16((uint16x8_t)v116.val[3], (uint16x8_t)v115.val[3]), v97), (int32x4_t)vaddl_high_u16((uint16x8_t)v117.val[0], (uint16x8_t)v115.val[2]), v98), vmulq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v117.val[1], (uint16x8_t)v115.val[1]), v99));
          v114.val[2] = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v101.i8, *(uint16x4_t *)v116.val[2].i8), *(uint16x4_t *)v100.i8, *(uint16x4_t *)v116.val[1].i8), *(uint16x4_t *)v100.i8, *(uint16x4_t *)v116.val[3].i8), (int32x4_t)vaddl_u16(*(uint16x4_t *)v117.val[0].i8, *(uint16x4_t *)v116.val[0].i8), v97), (int32x4_t)vaddl_u16(*(uint16x4_t *)v117.val[1].i8, *(uint16x4_t *)v115.val[3].i8), v98), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v117.val[2].i8, *(uint16x4_t *)v115.val[2].i8), v99)), vmlaq_s32(vmlaq_s32(
                              (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v101, (uint16x8_t)v116.val[2]), v100, (uint16x8_t)v116.val[1]), v100, (uint16x8_t)v116.val[3]), (int32x4_t)vaddl_high_u16((uint16x8_t)v117.val[0], (uint16x8_t)v116.val[0]), v97), (int32x4_t)vaddl_high_u16((uint16x8_t)v117.val[1], (uint16x8_t)v115.val[3]), v98), vmulq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v117.val[2], (uint16x8_t)v115.val[2]), v99));
          v114.val[3] = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v101.i8, *(uint16x4_t *)v116.val[3].i8), *(uint16x4_t *)v100.i8, *(uint16x4_t *)v116.val[2].i8), *(uint16x4_t *)v100.i8, *(uint16x4_t *)v117.val[0].i8), (int32x4_t)vaddl_u16(*(uint16x4_t *)v117.val[1].i8, *(uint16x4_t *)v116.val[1].i8), v97), (int32x4_t)vaddl_u16(*(uint16x4_t *)v117.val[2].i8, *(uint16x4_t *)v116.val[0].i8), v98), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v117.val[3].i8, *(uint16x4_t *)v115.val[3].i8), v99)), vmlaq_s32(vmlaq_s32(
                              (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v101, (uint16x8_t)v116.val[3]), v100, (uint16x8_t)v116.val[2]), v100, (uint16x8_t)v117.val[0]), (int32x4_t)vaddl_high_u16((uint16x8_t)v117.val[1], (uint16x8_t)v116.val[1]), v97), (int32x4_t)vaddl_high_u16((uint16x8_t)v117.val[2], (uint16x8_t)v116.val[0]), v98), vmulq_s32((int32x4_t)vaddl_high_u16((uint16x8_t)v117.val[3], (uint16x8_t)v115.val[3]), v99));
          vst4q_s16(v53, v114);
          v53 += 32;
          v45 = (__int16 *)v103;
          v102 -= 8;
        }
        while (v102);
        if ((v95 & 0x7FFFFFF8) == v95)
        {
LABEL_22:
          v56 = v10 - 4;
          v45 = (__int16 *)v62;
          v53 = v61;
          if (v10 - 4 < a3 - 4)
            goto LABEL_23;
LABEL_16:
          v57 = v53;
          v58 = (unsigned __int16 *)v45;
          goto LABEL_29;
        }
LABEL_20:
        v63 = v62;
        do
        {
          v64 = v61;
          v65 = *(v63 - 3);
          v66 = *(v63 - 2);
          v67 = *(v63 - 1);
          v68 = *v63;
          v69 = v63[1];
          v70 = v63[2];
          v71 = v63[3];
          v72 = v62[4];
          v62 += 4;
          v73 = (v67 * v35 + v68 * v34 + v69 * v35 + (v70 + v66) * v36 + (v71 + v65) * v37 + (v72 + *(v63 - 4)) * v38) >> 16;
          v74 = v63[5];
          v75 = (v68 * v35 + v69 * v34 + v70 * v35 + (v71 + v67) * v36 + (v72 + v66) * v37 + (v74 + v65) * v38) >> 16;
          v76 = v63[6];
          v77 = v63[7] + v67;
          *v61 = v73;
          v61 += 4;
          a1[5] = v75;
          a1[6] = (v69 * v35 + v70 * v34 + v71 * v35 + (v72 + v68) * v36 + (v74 + v67) * v37 + (v76 + v66) * v38) >> 16;
          a1[7] = (v70 * v35 + v71 * v34 + v72 * v35 + (v74 + v69) * v36 + (v76 + v68) * v37 + v77 * v38) >> 16;
          v55 += 4;
          v63 = v62;
          a1 = v64;
        }
        while (v55 < a3 - 7);
        goto LABEL_22;
      }
    }
    else
    {
      v55 = 4;
    }
    v61 = a1 + 4;
    v62 = (unsigned __int16 *)v45;
    goto LABEL_20;
  }
  v56 = 4;
  if (a3 - 4 <= 4)
    goto LABEL_16;
LABEL_23:
  v78 = (a3 - v56 - 5);
  if (v78 < 7 || v53 < &v45[v78 + 5] && v45 - 4 < &v53[v78 + 1])
  {
    v58 = (unsigned __int16 *)v45;
    v57 = v53;
LABEL_27:
    v79 = a3 - v56 - 4;
    v80 = v58;
    do
    {
      v81 = v58[1];
      ++v58;
      *v57++ = (*v80 * v34
              + (v81 + *(v80 - 1)) * v35
              + (v80[2] + *(v80 - 2)) * v36
              + (v80[3] + *(v80 - 3)) * v37
              + (v80[4] + *(v80 - 4)) * v38) >> 16;
      v80 = v58;
      --v79;
    }
    while (v79);
    goto LABEL_29;
  }
  v106 = v78 + 1;
  v107 = (v78 + 1) & 0x1FFFFFFF8;
  v58 = (unsigned __int16 *)&v45[v107];
  v57 = &v53[v107];
  v108 = vdupq_n_s32(v35);
  v109 = vdupq_n_s32(v36);
  v110 = vdupq_n_s32(v37);
  v56 += v107;
  v111 = vdupq_n_s32(v38);
  v112 = (uint16x8_t)vdupq_n_s16(v34);
  v113 = v107;
  do
  {
    *(int16x8_t *)v53 = vaddhn_high_s32(vaddhn_s32(vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_u16((uint32x4_t)vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)(v45 + 1), *(uint16x4_t *)(v45 - 1)), v108), *(uint16x4_t *)v112.i8, *(uint16x4_t *)v45), (int32x4_t)vaddl_u16(*(uint16x4_t *)(v45 + 2), *(uint16x4_t *)(v45 - 2)), v109), (int32x4_t)vaddl_u16(*(uint16x4_t *)(v45 + 3), *(uint16x4_t *)(v45 - 3)), v110), vmulq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)(v45 + 4), *(uint16x4_t *)(v45 - 4)), v111)), vmlaq_s32(vmlaq_s32((int32x4_t)vmlal_high_u16(
                                           (uint32x4_t)vmulq_s32((int32x4_t)vaddl_high_u16(*(uint16x8_t *)(v45 + 1), *(uint16x8_t *)(v45 - 1)), v108), v112, *(uint16x8_t *)v45), (int32x4_t)vaddl_high_u16(*(uint16x8_t *)(v45 + 2), *(uint16x8_t *)(v45 - 2)), v109), (int32x4_t)vaddl_high_u16(*(uint16x8_t *)(v45 + 3), *(uint16x8_t *)(v45 - 3)), v110), vmulq_s32((int32x4_t)vaddl_high_u16(*(uint16x8_t *)(v45 + 4), *(uint16x8_t *)(v45 - 4)), v111));
    v53 += 8;
    v45 += 8;
    v113 -= 8;
  }
  while (v113);
  if (v106 != v107)
    goto LABEL_27;
LABEL_29:
  v82 = *(v58 - 4);
  v83 = *(v58 - 3);
  v84 = *(v58 - 2);
  result = *(v58 - 1);
  v86 = *v58;
  v87 = v58[1];
  v88 = v87 * v35;
  v89 = v58[2];
  v90 = v58[3];
  v91 = (v40 * v90 + v82 * v38 + v83 * v37 + (_DWORD)result * v35 + v86 * v34 + v87 * v35 + (v89 + v84) * v36) >> 16;
  v92 = v89 * v35;
  v93 = (v40 * v90 + v83 * v38 + v84 * v37 + (_DWORD)result * v36 + v86 * v35 + v87 * v34 + v89 * v35 + v90 * v36) >> 16;
  v94 = v90 * v35 + v90 * v36;
  *v57 = v91;
  v57[1] = v93;
  v57[2] = (v40 * v90 + v84 * v38 + (_DWORD)result * v37 + v86 * v36 + v88 + v89 * v34 + v94) >> 16;
  v57[3] = (v40 * v90 + (_DWORD)result * v38 + v86 * v37 + v87 * v36 + v92 + v90 * v34 + v94) >> 16;
  return result;
}

uint16x8_t *sub_1D538A7F4(uint16x8_t *result, unsigned int a2, int a3, int16x8_t *a4, unsigned __int16 *a5)
{
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t *v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint32x4_t v14;
  uint32x4_t v15;
  uint16x4_t *v16;
  uint16x8_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint16x8_t *v20;
  uint16x8_t v21;
  uint32x4_t v22;
  uint32x4_t v23;
  uint16x4_t *v24;
  uint16x8_t v25;
  uint32x4_t v26;
  uint32x4_t v27;
  uint16x8_t *v28;
  uint16x8_t v29;
  uint32x4_t v30;
  uint32x4_t v31;
  uint16x4_t *v32;
  uint16x8_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  uint16x8_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int16x8_t *v42;
  unsigned __int16 *v43;
  uint64_t v44;
  unsigned __int16 *v45;
  int v46;
  unsigned __int16 *v47;
  int v48;
  unsigned __int16 *v49;
  int v50;
  unsigned __int16 *v51;
  uint64_t v52;
  unint64_t v53;
  __int8 *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  __int8 *v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v65;
  BOOL v67;
  BOOL v69;
  BOOL v71;
  BOOL v73;
  BOOL v75;
  BOOL v77;
  BOOL v79;
  BOOL v81;
  const __int16 *v83;
  uint16x4_t v84;
  const __int16 *v85;
  uint16x4_t v86;
  int16x8_t v87;
  int16x8_t v88;
  const __int16 *v89;
  uint16x4_t v90;
  int16x8_t v91;
  const __int16 *v92;
  uint16x4_t v93;
  const __int16 *v94;
  uint16x4_t v95;
  int16x8_t v96;
  int16x8_t v97;
  const __int16 *v98;
  uint16x4_t v99;
  int16x8_t v100;
  const __int16 *v101;
  uint16x4_t v102;
  int16x8_t v103;
  int16x8_t v104;
  uint16x4_t *v105;
  uint16x8_t v106;
  uint16x4_t v107;
  uint16x8_t v108;
  uint16x4_t v109;
  uint16x8_t v110;
  uint16x4_t v111;
  uint16x8_t v112;
  uint16x4_t v113;
  uint16x8_t v114;
  uint16x4_t v115;
  uint16x8_t v116;
  uint16x4_t v117;
  uint16x8_t v118;
  uint16x4_t v119;
  uint16x8_t v120;
  unint64_t v121;
  uint16x8_t v122;
  uint16x4_t *v123;
  uint32x4_t v124;
  uint32x4_t v125;
  uint16x4_t *v126;
  uint16x8_t v127;
  uint32x4_t v128;
  uint16x4_t *v129;
  uint32x4_t v130;
  uint32x4_t v131;
  uint16x8_t *v132;
  uint32x4_t v133;
  uint32x4_t v134;
  uint16x4_t *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;

  v5 = *a5;
  v6 = a5[8];
  v7 = a2 & 0xFFFFFFF8;
  if ((int)v7 < 1)
  {
    LODWORD(v8) = 0;
    if ((int)a2 <= 0)
      return result;
LABEL_7:
    v37 = a3;
    v38 = v8;
    v39 = a2;
    v40 = a2 - (unint64_t)v8;
    if (v40 < 0x10)
    {
LABEL_8:
      v41 = v38;
      v42 = a4;
      goto LABEL_9;
    }
    v136 = v40;
    v52 = 2 * a2;
    v53 = (unint64_t)a4->u64 + v52 - 2 * v38;
    v138 = (unint64_t)result + 5 * a3 + 2 * v38;
    v139 = a2;
    v137 = (unint64_t)result + 5 * a3 + v52;
    v54 = &result->i8[4 * a3];
    v55 = (unint64_t)result + 2 * v37 + 2 * a2;
    v56 = (unint64_t)result->u64 + v37 + v52;
    v57 = (unint64_t)result + 2 * v38;
    v58 = (unint64_t)result->u64 + v52;
    v59 = (unint64_t)result + 6 * v37 + v52;
    v60 = (unint64_t)result + 7 * v37 + v52;
    v61 = &result->i8[8 * v37];
    v62 = (unint64_t)&v61[2 * v38];
    v63 = (unint64_t)&v61[v52];
    v65 = a4 < (int16x8_t *)&v54[2 * a2] && (unint64_t)&v54[2 * v38] < v53;
    v67 = a4 < (int16x8_t *)((char *)result + 3 * v37 + 2 * a2) && (unint64_t)result + 3 * v37 + 2 * v38 < v53;
    v69 = (unint64_t)a4 < v55 && (unint64_t)result + 2 * v37 + 2 * v38 < v53;
    v71 = (unint64_t)a4 < v56 && (unint64_t)result + 2 * v38 + v37 < v53;
    v73 = (unint64_t)a4 < v58 && v57 < v53;
    v75 = a4 < (int16x8_t *)a5 + 1 && (unint64_t)(a5 + 1) < v53;
    v77 = (unint64_t)a4 < v59 && v57 + 6 * v37 < v53;
    v79 = (unint64_t)a4 < v60 && (unint64_t)result + 7 * v37 + 2 * v38 < v53;
    v81 = (unint64_t)a4 < v63 && v62 < v53;
    if (v138 >= v53 || (unint64_t)a4 >= v137)
    {
      v39 = v139;
      if (v65 || v67 || v69 || v71 || v73 || v75 || v77 || v79 || v81)
        goto LABEL_8;
      v41 = (v136 & 0xFFFFFFFFFFFFFFF8) + v38;
      v42 = (int16x8_t *)((char *)a4 + 2 * (v136 & 0xFFFFFFFFFFFFFFF8));
      v83 = (const __int16 *)(a5 + 1);
      v84 = (uint16x4_t)vld1_dup_s16(v83);
      v85 = (const __int16 *)(a5 + 2);
      v86 = (uint16x4_t)vld1_dup_s16(v85);
      v87 = (int16x8_t)vmovl_u16(v84);
      v88 = (int16x8_t)vmovl_u16(v86);
      v89 = (const __int16 *)(a5 + 3);
      v90 = (uint16x4_t)vld1_dup_s16(v89);
      v91 = (int16x8_t)vmovl_u16(v90);
      v92 = (const __int16 *)(a5 + 4);
      v93 = (uint16x4_t)vld1_dup_s16(v92);
      v94 = (const __int16 *)(a5 + 5);
      v95 = (uint16x4_t)vld1_dup_s16(v94);
      v96 = (int16x8_t)vmovl_u16(v93);
      v97 = (int16x8_t)vmovl_u16(v95);
      v98 = (const __int16 *)(a5 + 6);
      v99 = (uint16x4_t)vld1_dup_s16(v98);
      v100 = (int16x8_t)vmovl_u16(v99);
      v101 = (const __int16 *)(a5 + 7);
      v102 = (uint16x4_t)vld1_dup_s16(v101);
      v103 = (int16x8_t)vmovl_u16(v102);
      v104 = vdupq_n_s16(v5);
      v105 = (uint16x4_t *)((char *)result + 2 * v38);
      v106 = (uint16x8_t)vuzp1q_s16(v104, v87);
      v107 = (uint16x4_t)vmovn_s32((int32x4_t)v87);
      v108 = (uint16x8_t)vuzp1q_s16(v104, v88);
      v109 = (uint16x4_t)vmovn_s32((int32x4_t)v88);
      v110 = (uint16x8_t)vuzp1q_s16(v104, v91);
      v111 = (uint16x4_t)vmovn_s32((int32x4_t)v91);
      v112 = (uint16x8_t)vuzp1q_s16(v104, v96);
      v113 = (uint16x4_t)vmovn_s32((int32x4_t)v96);
      v114 = (uint16x8_t)vuzp1q_s16(v104, v97);
      v115 = (uint16x4_t)vmovn_s32((int32x4_t)v97);
      v116 = (uint16x8_t)vuzp1q_s16(v104, v100);
      v117 = (uint16x4_t)vmovn_s32((int32x4_t)v100);
      v118 = (uint16x8_t)vuzp1q_s16(v104, v103);
      v119 = (uint16x4_t)vmovn_s32((int32x4_t)v103);
      v120 = (uint16x8_t)vdupq_n_s16(v6);
      v121 = v136 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v122 = *(uint16x8_t *)&v105->i8[v37];
        v123 = (uint16x4_t *)((char *)v105 + v37 + v37);
        v124 = vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v122.i8, v107), *(uint16x4_t *)v104.i8, *v105), *v123, v109);
        v125 = vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v122, v106), (uint16x8_t)v104, *(uint16x8_t *)v105->i8), *(uint16x8_t *)v123->i8, v108);
        v126 = (uint16x4_t *)((char *)v123 + v37);
        v127 = *(uint16x8_t *)v126->i8;
        v128 = vmlal_u16(v124, *v126, v111);
        v129 = (uint16x4_t *)((char *)v126 + v37);
        v130 = vmlal_u16(v128, *v129, v113);
        v131 = vmlal_high_u16(vmlal_high_u16(v125, v127, v110), *(uint16x8_t *)v129->i8, v112);
        v132 = (uint16x8_t *)((char *)v129 + v37);
        v133 = vmlal_high_u16(v131, *v132, v114);
        v134 = vmlal_u16(v130, *(uint16x4_t *)v132->i8, v115);
        v135 = (uint16x4_t *)&v132->i8[v37];
        *a4++ = vaddhn_high_s32(vaddhn_s32((int32x4_t)vmull_u16(*(uint16x4_t *)v120.i8, *(uint16x4_t *)((char *)v135 + v37 + v37)), (int32x4_t)vmlal_u16(vmlal_u16(v134, *v135, v117), *(uint16x4_t *)((char *)v135 + v37), v119)), (int32x4_t)vmull_high_u16(v120, *(uint16x8_t *)&v135->i8[v37 + v37]), (int32x4_t)vmlal_high_u16(vmlal_high_u16(v133, *(uint16x8_t *)v135->i8, v116), *(uint16x8_t *)&v135->i8[v37], v118));
        v105 += 2;
        v121 -= 8;
      }
      while (v121);
      if (v136 == (v136 & 0xFFFFFFFFFFFFFFF8))
        return result;
    }
    else
    {
      v41 = v38;
      v42 = a4;
      v39 = v139;
    }
LABEL_9:
    v43 = (unsigned __int16 *)result + v41;
    v44 = v39 - v41;
    do
    {
      v45 = (unsigned __int16 *)((char *)v43 + v37 + v37);
      v46 = *v43 * v5 + *(unsigned __int16 *)((char *)v43 + v37) * a5[1] + *v45 * a5[2];
      v47 = (unsigned __int16 *)((char *)v45 + v37);
      v48 = v46 + *v47 * a5[3];
      v49 = (unsigned __int16 *)((char *)v47 + v37);
      v50 = *v49;
      result = (uint16x8_t *)a5[5];
      v51 = (unsigned __int16 *)((char *)v49 + v37);
      v42->i16[0] = (v48
                   + v50 * a5[4]
                   + *v51 * (_DWORD)result
                   + *(unsigned __int16 *)((char *)v51 + v37) * a5[6]
                   + *(unsigned __int16 *)((char *)v51 + v37 + v37) * a5[7]
                   + *(unsigned __int16 *)((char *)v51 + v37 + v37 + v37) * v6) >> 16;
      v42 = (int16x8_t *)((char *)v42 + 2);
      ++v43;
      --v44;
    }
    while (v44);
    return result;
  }
  v8 = 0;
  v9 = (uint16x8_t)vdupq_n_s16(v5);
  v10 = (uint16x8_t)vdupq_n_s16(v6);
  v11 = result;
  do
  {
    v12 = *(uint16x8_t *)((char *)v11 + a3);
    v13 = (uint16x8_t)vdupq_n_s16(a5[1]);
    v14 = vmull_u16(*(uint16x4_t *)v13.i8, *(uint16x4_t *)v12.i8);
    v15 = vmlal_high_u16(vmull_high_u16(v13, v12), v9, *v11);
    v16 = (uint16x4_t *)&v11->i8[a3 + a3];
    v17 = (uint16x8_t)vdupq_n_s16(a5[2]);
    v18 = vmlal_u16(vmlal_u16(v14, *(uint16x4_t *)v9.i8, *(uint16x4_t *)v11->i8), *(uint16x4_t *)v17.i8, *v16);
    v19 = vmlal_high_u16(v15, v17, *(uint16x8_t *)v16->i8);
    v20 = (uint16x8_t *)((char *)v16 + a3);
    v21 = (uint16x8_t)vdupq_n_s16(a5[3]);
    v22 = vmlal_high_u16(v19, v21, *v20);
    v23 = vmlal_u16(v18, *(uint16x4_t *)v21.i8, *(uint16x4_t *)v20->i8);
    v24 = (uint16x4_t *)&v20->i8[a3];
    v25 = (uint16x8_t)vdupq_n_s16(a5[4]);
    v26 = vmlal_u16(v23, *(uint16x4_t *)v25.i8, *v24);
    v27 = vmlal_high_u16(v22, v25, *(uint16x8_t *)v24->i8);
    v28 = (uint16x8_t *)((char *)v24 + a3);
    v29 = (uint16x8_t)vdupq_n_s16(a5[5]);
    v30 = vmlal_high_u16(v27, v29, *v28);
    v31 = vmlal_u16(v26, *(uint16x4_t *)v29.i8, *(uint16x4_t *)v28->i8);
    v32 = (uint16x4_t *)&v28->i8[a3];
    v33 = (uint16x8_t)vdupq_n_s16(a5[6]);
    v34 = vmlal_u16(v31, *(uint16x4_t *)v33.i8, *v32);
    v35 = vmlal_high_u16(v30, v33, *(uint16x8_t *)v32->i8);
    v36 = (uint16x8_t)vdupq_n_s16(a5[7]);
    *a4++ = vaddhn_high_s32(vaddhn_s32((int32x4_t)vmull_u16(*(uint16x4_t *)v10.i8, *(uint16x4_t *)((char *)v32 + a3 + a3)), (int32x4_t)vmlal_u16(v34, *(uint16x4_t *)v36.i8, *(uint16x4_t *)((char *)v32 + a3))), (int32x4_t)vmull_high_u16(v10, *(uint16x8_t *)&v32->i8[a3 + a3]), (int32x4_t)vmlal_high_u16(v35, v36, *(uint16x8_t *)&v32->i8[a3]));
    v8 += 8;
    ++v11;
  }
  while (v8 < v7);
  if ((int)v8 < (int)a2)
    goto LABEL_7;
  return result;
}

uint64_t sub_1D538ACCC(uint64_t result, int a2, int a3, uint16x4_t *a4, unsigned __int16 *a5, uint64_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  int32x4_t v14;
  uint16x4_t *v15;
  uint16x4_t v16;
  uint16x4_t v17;
  uint32x4_t v18;
  int32x4_t v19;
  const __int16 *v20;
  const __int16 *v21;
  const __int16 *v22;
  const __int16 *v23;
  const __int16 *v24;
  const __int16 *v25;
  const __int16 *v26;
  uint16x4_t *v27;
  uint16x4_t v28;
  uint16x4_t v29;
  uint16x4_t *v30;
  uint16x4_t v31;
  uint16x4_t v32;
  uint16x4_t *v33;
  uint32x4_t v34;
  uint16x4_t v35;
  uint16x4_t v36;
  uint16x4_t *v37;
  uint16x4_t v38;
  uint16x4_t v39;
  uint16x4_t *v40;
  uint16x4_t v41;
  uint32x4_t v42;
  uint16x4_t v43;
  uint16x4_t *v44;
  uint16x4_t v45;
  uint32x4_t v46;
  uint16x4_t *v47;
  uint32x4_t v48;
  uint16x4_t v49;
  uint16x4_t *v50;
  uint32x4_t v51;
  uint16x4_t *v52;
  uint32x4_t v53;
  uint16x4_t *v54;
  uint16x4_t v55;
  uint16x4_t *v56;
  uint16x4_t v57;
  uint16x4_t *v58;
  uint16x4_t v59;
  uint16x4_t *v60;
  uint16x4_t v61;
  uint16x4_t *v62;
  int32x4_t v63;
  uint32x4_t v64;
  uint16x4_t v65;
  int32x4_t v66;
  uint32x4_t v67;
  uint32x4_t v68;
  int32x4_t v69;
  uint32x4_t v70;
  uint32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  uint32x4_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 *v80;
  int32x4_t v81;
  int32x4_t v82;
  uint64_t v83;
  unsigned __int16 *v84;
  unint64_t v85;
  unsigned __int16 *v86;
  int v87;
  unsigned __int16 *v88;
  int v89;
  unsigned __int16 *v90;
  int v91;
  unsigned __int16 *v92;
  unsigned int v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  signed int v98;
  unsigned int v99;
  int v100;

  v6 = *(_DWORD *)a6;
  v7 = *(_DWORD *)(a6 + 4);
  v8 = *(_QWORD *)(a6 + 8);
  v9 = *(_QWORD *)(a6 + 16);
  v10 = *a5;
  v11 = a5[8];
  v12 = a2 & 0xFFFFFFF8;
  if ((int)v12 < 1)
  {
    LODWORD(v13) = 0;
    if (a2 <= 0)
      return result;
  }
  else
  {
    v13 = 0;
    v14 = vdupq_n_s32(v6);
    v15 = (uint16x4_t *)(result + 8);
    v16 = (uint16x4_t)vdup_n_s16(v10);
    v17 = (uint16x4_t)vdup_n_s16(v11);
    v18 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v7));
    v19.i64[0] = 0xFFFF0000FFFFLL;
    v19.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      v20 = (const __int16 *)(a5 + 1);
      v21 = (const __int16 *)(a5 + 2);
      v22 = (const __int16 *)(a5 + 3);
      v23 = (const __int16 *)(a5 + 4);
      v24 = (const __int16 *)(a5 + 5);
      v25 = (const __int16 *)(a5 + 6);
      v26 = (const __int16 *)(a5 + 7);
      v27 = (uint16x4_t *)((char *)v15 + a3 - 8);
      v28 = (uint16x4_t)vld1_dup_s16(v20);
      v29 = (uint16x4_t)vld1_dup_s16(v21);
      v30 = (uint16x4_t *)((char *)v27 + a3 + a3);
      v31 = *v30;
      v32 = (uint16x4_t)vld1_dup_s16(v22);
      v33 = (uint16x4_t *)((char *)v30 + a3);
      v34 = vmlal_u16(vmlal_u16(vmlal_u16(vmull_u16(v28, *v27), v16, v15[-1]), v29, *(uint16x4_t *)((char *)v27 + a3)), v32, v31);
      v35 = *v33;
      v36 = (uint16x4_t)vld1_dup_s16(v23);
      v37 = (uint16x4_t *)((char *)v33 + a3);
      v38 = *v37;
      v39 = (uint16x4_t)vld1_dup_s16(v24);
      v40 = (uint16x4_t *)((char *)v37 + a3);
      v41 = (uint16x4_t)vld1_dup_s16(v25);
      v42 = vmlal_u16(vmlal_u16(v34, v36, v35), v39, v38);
      v43 = *v40;
      v44 = (uint16x4_t *)((char *)v40 + a3);
      v45 = (uint16x4_t)vld1_dup_s16(v26);
      v46 = vmlal_u16(vmlal_u16(v42, v41, v43), v45, *v44);
      v47 = (uint16x4_t *)((char *)v44 + a3);
      v48 = vmlal_u16(v46, v17, *v47);
      v49 = *v15;
      v15 += 2;
      v50 = (uint16x4_t *)((char *)v47 - 7 * a3 + 8);
      v51 = vmull_u16(v28, *v50);
      v52 = (uint16x4_t *)((char *)v50 + a3);
      v53 = vmlal_u16(vmlal_u16(v51, v16, v49), v29, *v52);
      v54 = (uint16x4_t *)((char *)v52 + a3);
      v55 = *v54;
      v56 = (uint16x4_t *)((char *)v54 + a3);
      v57 = *v56;
      v58 = (uint16x4_t *)((char *)v56 + a3);
      v59 = *v58;
      v60 = (uint16x4_t *)((char *)v58 + a3);
      v61 = *v60;
      v62 = (uint16x4_t *)((char *)v60 + a3);
      v63 = (int32x4_t)vshrq_n_u32(v48, 0x10uLL);
      v64 = vmlal_u16(vmlal_u16(vmlal_u16(v53, v32, v55), v36, v57), v39, v59);
      v65 = a4[1];
      v66 = (int32x4_t)vmovl_u16(*a4);
      v67 = vmlal_u16(v64, v41, v61);
      v41.i16[0] = *(_WORD *)(v8 + 2 * v63.u32[0]);
      v41.i16[1] = *(_WORD *)(v8 + 2 * v63.u32[1]);
      v68 = vmlal_u16(v67, v45, *v62);
      v41.i16[2] = *(_WORD *)(v8 + 2 * v63.u32[2]);
      v41.i16[3] = *(_WORD *)(v8 + 2 * v63.u32[3]);
      v69 = vsubq_s32(v66, v63);
      v70 = vabdq_u32((uint32x4_t)v63, (uint32x4_t)v66);
      v71 = (uint32x4_t)vmulq_s32(vmaxq_s32((int32x4_t)vsubw_u16(v70, v41), (int32x4_t)0), v14);
      v70.i16[0] = *(_WORD *)(v9 + 2 * v70.u32[0]);
      v70.i16[1] = *(_WORD *)(v9 + 2 * v70.u32[1]);
      v70.i16[2] = *(_WORD *)(v9 + 2 * v70.u32[2]);
      v70.i16[3] = *(_WORD *)(v9 + 2 * v70.u32[3]);
      v72 = vminq_s32(vmaxq_s32(vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v66, (uint32x4_t)v69, 0x1FuLL), (int32x4_t)veorq_s8((int8x16_t)vshrq_n_u32(vmull_u16((uint16x4_t)vmovn_s32(vminq_s32(vmaxq_s32((int32x4_t)vshlq_u32(v71, v18), (int32x4_t)0), v19)), *(uint16x4_t *)v70.i8), 0x10uLL), (int8x16_t)vcltzq_s32(v69))), (int32x4_t)0), v19);
      v73 = (int32x4_t)vshrq_n_u32(vmlal_u16(v68, v17, *(uint16x4_t *)((char *)v62 + a3)), 0x10uLL);
      *a4 = (uint16x4_t)vraddhn_s32(vmulq_s32(v72, v72), (int32x4_t)0);
      v72.i16[0] = *(_WORD *)(v8 + 2 * v73.u32[0]);
      v72.i16[1] = *(_WORD *)(v8 + 2 * v73.u32[1]);
      v72.i16[2] = *(_WORD *)(v8 + 2 * v73.u32[2]);
      v72.i16[3] = *(_WORD *)(v8 + 2 * v73.u32[3]);
      v74 = (int32x4_t)vmovl_u16(v65);
      v75 = vsubq_s32(v74, v73);
      v76 = vabdq_u32((uint32x4_t)v73, (uint32x4_t)v74);
      v77 = v76.u32[2];
      v78 = v76.u32[3];
      v79 = v76.u32[0];
      v80 = (__int16 *)(v9 + 2 * v76.u32[1]);
      v81 = (int32x4_t)vshlq_u32((uint32x4_t)vmulq_s32(vmaxq_s32((int32x4_t)vsubw_u16(v76, *(uint16x4_t *)v72.i8), (int32x4_t)0), v14), v18);
      v72.i16[0] = *(_WORD *)(v9 + 2 * v79);
      v72.i16[1] = *v80;
      v72.i16[2] = *(_WORD *)(v9 + 2 * v77);
      v72.i16[3] = *(_WORD *)(v9 + 2 * v78);
      v82 = vminq_s32(vmaxq_s32(vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v74, (uint32x4_t)v75, 0x1FuLL), (int32x4_t)veorq_s8((int8x16_t)vshrq_n_u32(vmull_u16((uint16x4_t)vmovn_s32(vminq_s32(vmaxq_s32(v81, (int32x4_t)0), v19)), *(uint16x4_t *)v72.i8), 0x10uLL), (int8x16_t)vcltzq_s32(v75))), (int32x4_t)0), v19);
      a4[1] = (uint16x4_t)vraddhn_s32(vmulq_s32(v82, v82), (int32x4_t)0);
      a4 += 2;
      v13 += 8;
    }
    while (v13 < v12);
    if ((int)v13 >= a2)
      return result;
  }
  v83 = a3;
  v84 = (unsigned __int16 *)(result + 2 * v13);
  result = 0x8000;
  v85 = a2 - (unint64_t)v13;
  do
  {
    v86 = (unsigned __int16 *)((char *)v84 + v83 + v83);
    v87 = *v84 * v10 + *(unsigned __int16 *)((char *)v84 + v83) * a5[1] + *v86 * a5[2];
    v88 = (unsigned __int16 *)((char *)v86 + v83);
    v89 = v87 + *v88 * a5[3];
    v90 = (unsigned __int16 *)((char *)v88 + v83);
    v91 = v89 + *v90 * a5[4];
    v92 = (unsigned __int16 *)((char *)v90 + v83);
    v93 = (v91
         + *v92 * a5[5]
         + *(unsigned __int16 *)((char *)v92 + v83) * a5[6]
         + *(unsigned __int16 *)((char *)v92 + v83 + v83) * a5[7]
         + *(unsigned __int16 *)((char *)v92 + v83 + v83 + v83) * v11) >> 16;
    v94 = a4->u16[0];
    v95 = *(unsigned __int16 *)(v8 + 2 * v93);
    v96 = v94 - v93;
    if (v96 >= 0)
      v97 = v96;
    else
      v97 = -v96;
    v98 = (((v97 - v95) & ~((int)(v97 - v95) >> 31)) * v6) >> v7;
    if (v98 >= 0xFFFF)
      v98 = 0xFFFF;
    v99 = ((v98 * *(unsigned __int16 *)(v9 + 2 * v97)) >> 16) ^ (v96 >> 31);
    v100 = (v94 + (v96 >> 31) + v99) & ~((int)(v94 + (v96 >> 31) + v99) >> 31);
    if (v100 >= 0xFFFF)
      v100 = 0xFFFF;
    a4->i16[0] = (v100 * v100 + 0x8000) >> 16;
    a4 = (uint16x4_t *)((char *)a4 + 2);
    ++v84;
    --v85;
  }
  while (v85);
  return result;
}

uint16x4_t *sub_1D538B0EC(uint16x4_t *result, int a2, int a3, uint16x4_t *a4, unsigned __int16 *a5, uint64_t a6)
{
  uint64_t v6;
  uint16x4_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint16x4_t *v13;
  uint16x4_t v14;
  uint16x4_t v15;
  int32x4_t v16;
  const __int16 *v17;
  const __int16 *v18;
  const __int16 *v19;
  const __int16 *v20;
  const __int16 *v21;
  const __int16 *v22;
  const __int16 *v23;
  uint16x4_t *v24;
  uint16x4_t v25;
  uint16x4_t v26;
  uint16x4_t *v27;
  uint16x4_t v28;
  uint32x4_t v29;
  uint16x4_t *v30;
  uint16x4_t v31;
  uint32x4_t v32;
  uint16x4_t *v33;
  uint16x4_t v34;
  uint32x4_t v35;
  uint16x4_t *v36;
  uint16x4_t v37;
  uint32x4_t v38;
  uint16x4_t *v39;
  uint16x4_t v40;
  int32x4_t v41;
  uint16x4_t *v42;
  int32x4_t v43;
  uint16x4_t v44;
  uint16x4_t *v45;
  uint32x4_t v46;
  uint16x4_t *v47;
  uint32x4_t v48;
  uint16x4_t *v49;
  uint32x4_t v50;
  uint16x4_t *v51;
  uint32x4_t v52;
  uint16x4_t *v53;
  uint32x4_t v54;
  uint16x4_t *v55;
  uint32x4_t v56;
  uint16x4_t *v57;
  int32x4_t v58;
  int32x4_t v59;
  uint16x4_t v60;
  int32x4_t v61;
  uint32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  uint32x4_t v65;
  int32x4_t v66;
  unsigned __int16 *v67;
  unint64_t v68;
  unsigned __int16 *v69;
  int v70;
  unsigned __int16 *v71;
  int v72;
  unsigned __int16 *v73;
  int v74;
  unsigned __int16 *v75;
  unsigned int v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;

  v6 = *(_QWORD *)(a6 + 16);
  v7 = *(uint16x4_t **)(a6 + 32);
  v8 = a3;
  *(_QWORD *)(a6 + 32) = (char *)v7 + a3;
  v9 = *a5;
  v10 = a5[8];
  v11 = a2 & 0xFFFFFFF8;
  if ((int)v11 < 1)
  {
    LODWORD(v12) = 0;
    if (a2 <= 0)
      return result;
  }
  else
  {
    v12 = 0;
    v13 = result + 1;
    v14 = (uint16x4_t)vdup_n_s16(v9);
    v15 = (uint16x4_t)vdup_n_s16(v10);
    v16.i64[0] = 0xFFFF0000FFFFLL;
    v16.i64[1] = 0xFFFF0000FFFFLL;
    do
    {
      v17 = (const __int16 *)(a5 + 1);
      v18 = (const __int16 *)(a5 + 2);
      v19 = (const __int16 *)(a5 + 3);
      v20 = (const __int16 *)(a5 + 4);
      v21 = (const __int16 *)(a5 + 5);
      v22 = (const __int16 *)(a5 + 6);
      v23 = (const __int16 *)(a5 + 7);
      v24 = (uint16x4_t *)((char *)v13 + v8 - 8);
      v25 = (uint16x4_t)vld1_dup_s16(v17);
      v26 = (uint16x4_t)vld1_dup_s16(v18);
      v27 = (uint16x4_t *)((char *)v24 + v8 + v8);
      v28 = (uint16x4_t)vld1_dup_s16(v19);
      v29 = vmlal_u16(vmlal_u16(vmlal_u16(vmull_u16(v25, *v24), v14, v13[-1]), v26, *(uint16x4_t *)((char *)v24 + v8)), v28, *v27);
      v30 = (uint16x4_t *)((char *)v27 + v8);
      v31 = (uint16x4_t)vld1_dup_s16(v20);
      v32 = vmlal_u16(v29, v31, *v30);
      v33 = (uint16x4_t *)((char *)v30 + v8);
      v34 = (uint16x4_t)vld1_dup_s16(v21);
      v35 = vmlal_u16(v32, v34, *v33);
      v36 = (uint16x4_t *)((char *)v33 + v8);
      v37 = (uint16x4_t)vld1_dup_s16(v22);
      v38 = vmlal_u16(v35, v37, *v36);
      v39 = (uint16x4_t *)((char *)v36 + v8);
      v40 = (uint16x4_t)vld1_dup_s16(v23);
      v41 = (int32x4_t)vmlal_u16(v38, v40, *v39);
      v42 = (uint16x4_t *)((char *)v39 + v8);
      v43 = (int32x4_t)vmull_u16(v15, *v42);
      v44 = *v13;
      v13 += 2;
      v45 = (uint16x4_t *)((char *)v42 - 7 * v8 + 8);
      v46 = vmlal_u16(vmull_u16(v25, *v45), v14, v44);
      v47 = (uint16x4_t *)((char *)v45 + v8);
      v48 = vmlal_u16(v46, v26, *v47);
      v49 = (uint16x4_t *)((char *)v47 + v8);
      v50 = vmlal_u16(v48, v28, *v49);
      v51 = (uint16x4_t *)((char *)v49 + v8);
      v52 = vmlal_u16(v50, v31, *v51);
      v53 = (uint16x4_t *)((char *)v51 + v8);
      v54 = vmlal_u16(v52, v34, *v53);
      v55 = (uint16x4_t *)((char *)v53 + v8);
      v56 = vmlal_u16(v54, v37, *v55);
      v57 = (uint16x4_t *)((char *)v55 + v8);
      v58 = (int32x4_t)vmlal_u16(v56, v40, *v57);
      v59 = (int32x4_t)vmull_u16(v15, *(uint16x4_t *)((char *)v57 + v8));
      v60 = a4[1];
      v61 = (int32x4_t)vsubl_u16(*a4, *v7);
      v62 = vabdl_u16(*a4, *v7);
      v62.i16[0] = *(_WORD *)(v6 + 2 * v62.u32[0]);
      v62.i16[1] = *(_WORD *)(v6 + 2 * v62.u32[1]);
      v62.i16[2] = *(_WORD *)(v6 + 2 * v62.u32[2]);
      v62.i16[3] = *(_WORD *)(v6 + 2 * v62.u32[3]);
      v63 = vminq_s32(vmaxq_s32(vaddq_s32((int32x4_t)vsraq_n_u32(vmovl_u16(*a4), (uint32x4_t)v61, 0x1FuLL), (int32x4_t)veorq_s8((int8x16_t)vshrq_n_u32(vmull_u16((uint16x4_t)vaddhn_s32(v43, v41), *(uint16x4_t *)v62.i8), 0x10uLL), (int8x16_t)vcltzq_s32(v61))), (int32x4_t)0), v16);
      *a4 = (uint16x4_t)vraddhn_s32(vmulq_s32(v63, v63), (int32x4_t)0);
      *(uint16x4_t *)v63.i8 = v7[1];
      v64 = (int32x4_t)vsubl_u16(v60, *(uint16x4_t *)v63.i8);
      v65 = vabdl_u16(v60, *(uint16x4_t *)v63.i8);
      v65.i16[0] = *(_WORD *)(v6 + 2 * v65.u32[0]);
      v65.i16[1] = *(_WORD *)(v6 + 2 * v65.u32[1]);
      v65.i16[2] = *(_WORD *)(v6 + 2 * v65.u32[2]);
      v65.i16[3] = *(_WORD *)(v6 + 2 * v65.u32[3]);
      v66 = vminq_s32(vmaxq_s32(vaddq_s32((int32x4_t)vsraq_n_u32(vmovl_u16(v60), (uint32x4_t)v64, 0x1FuLL), (int32x4_t)veorq_s8((int8x16_t)vshrq_n_u32(vmull_u16((uint16x4_t)vaddhn_s32(v59, v58), *(uint16x4_t *)v65.i8), 0x10uLL), (int8x16_t)vcltzq_s32(v64))), (int32x4_t)0), v16);
      a4[1] = (uint16x4_t)vraddhn_s32(vmulq_s32(v66, v66), (int32x4_t)0);
      a4 += 2;
      v7 += 2;
      v12 += 8;
    }
    while (v12 < v11);
    if ((int)v12 >= a2)
      return result;
  }
  v67 = (unsigned __int16 *)result + v12;
  v68 = a2 - (unint64_t)v12;
  do
  {
    v69 = (unsigned __int16 *)((char *)v67 + v8 + v8);
    v70 = *v67 * v9 + *(unsigned __int16 *)((char *)v67 + v8) * a5[1] + *v69 * a5[2];
    v71 = (unsigned __int16 *)((char *)v69 + v8);
    v72 = v70 + *v71 * a5[3];
    v73 = (unsigned __int16 *)((char *)v71 + v8);
    v74 = v72 + *v73 * a5[4];
    v75 = (unsigned __int16 *)((char *)v73 + v8);
    v76 = v74
        + *v75 * a5[5]
        + *(unsigned __int16 *)((char *)v75 + v8) * a5[6]
        + *(unsigned __int16 *)((char *)v75 + v8 + v8) * a5[7]
        + *(unsigned __int16 *)((char *)v75 + v8 + v8 + v8) * v10;
    v77 = v7->u16[0];
    v7 = (uint16x4_t *)((char *)v7 + 2);
    v78 = a4->u16[0];
    v79 = HIWORD(v76);
    v80 = v78 - v77;
    if (v78 - v77 >= 0)
      v81 = v80;
    else
      v81 = -v80;
    v82 = ((v79 * *(unsigned __int16 *)(v6 + 2 * v81)) >> 16) ^ (v80 >> 31);
    result = (uint16x4_t *)(v78 + (v80 >> 31));
    v83 = ((_DWORD)result + v82) & ~((int)((_DWORD)result + v82) >> 31);
    if (v83 >= 0xFFFF)
      v83 = 0xFFFF;
    a4->i16[0] = (v83 * v83 + 0x8000) >> 16;
    a4 = (uint16x4_t *)((char *)a4 + 2);
    ++v67;
    --v68;
  }
  while (v68);
  return result;
}

void *sub_1D538B43C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, void (*a8)(char *), uint64_t (*a9)(char *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t), uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *result;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  uint64_t __n;
  uint64_t v50;
  char *v52;
  _QWORD v53[11];

  v53[9] = *MEMORY[0x1E0C80C00];
  v53[0] = a7 + 10;
  v53[1] = a7 + 8;
  v53[2] = a7 + 6;
  v53[3] = a7 + 4;
  v53[6] = a7 + 16;
  v53[7] = a7 + 14;
  v53[8] = a7 + 12;
  v16 = 9 * a4;
  v53[4] = a7 + 2;
  v53[5] = a7;
  a8(a6);
  memcpy(&a6[a4], a6, 2 * a2);
  memcpy(&a6[a4 + a4], a6, 2 * a2);
  memcpy(&a6[a4 + a4 + a4], a6, 2 * a2);
  __n = 2 * a2;
  memcpy(&a6[a4 + a4 + a4 + a4], a6, 2 * a2);
  v17 = a5;
  v18 = &a6[a4 + a4 + a4 + a4 + a4];
  v19 = &a6[v16];
  v20 = a5 + a4;
  v52 = v19;
  if (a3 < 2)
  {
    v22 = 5;
    v21 = &a6[a4 + a4 + a4 + a4 + a4];
    goto LABEL_8;
  }
  v50 = v17;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))a8)(&a6[a4 + a4 + a4 + a4 + a4], a1 + a4, a2, a7, a10);
  if (&v18[a4] == v19)
    v21 = a6;
  else
    v21 = &v18[a4];
  v20 += a4;
  if (a3 == 2)
  {
    v22 = 6;
LABEL_8:
    v23 = v20;
LABEL_9:
    v24 = a10;
    goto LABEL_10;
  }
  v37 = a1 + a4 + a4;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))a8)(v21, v37, a2, a7, a10);
  v38 = &v21[a4];
  if (&v21[a4] == v19)
    v38 = a6;
  v20 += a4;
  if (a3 == 3)
  {
    v22 = 7;
    v18 = v21;
    v21 = v38;
    goto LABEL_8;
  }
  v40 = v37 + a4;
  v41 = v38;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))a8)(v38, v40, a2, a7, a10);
  if (&v41[a4] == v19)
    v21 = a6;
  else
    v21 = &v41[a4];
  v45 = v20 + a4;
  if (a3 == 4)
  {
    v42 = v41;
    v22 = 8;
    v18 = v42;
    v23 = v20 + a4;
    goto LABEL_9;
  }
  v43 = 0;
  v48 = a3;
  v44 = 4;
  v22 = 8;
  v47 = a1 + 4 * a4;
  do
  {
    v18 = v21;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))a8)(v21, v47 + v43, a2, a7, a10);
    if (&v21[a4] == v19)
      v21 = a6;
    else
      v21 += a4;
    if (v22 == 8)
      v22 = 0;
    else
      ++v22;
    result = (void *)a9(a6, a2, a4, v50 + v43, v53[v22], a10);
    ++v44;
    v43 += a4;
  }
  while (v48 != v44);
  if (v48 > 0xFFFFFFFFFFFFFFFBLL)
    return result;
  v23 = v45 + v43;
  v24 = a10;
  a3 = v48;
LABEL_10:
  v25 = a3 + 4;
  result = memcpy(v21, v18, __n);
  v27 = a3;
  if (&v21[a4] == v52)
    v28 = a6;
  else
    v28 = &v21[a4];
  if (v22 == 8)
    v29 = 0;
  else
    v29 = v22 + 1;
  v30 = v27;
  if (v27 > 3)
    result = (void *)a9(a6, a2, a4, v23 - 4 * a4, v53[v29], v24);
  if (v30 + 1 < v25)
  {
    v31 = v23 + a4;
    memcpy(v28, v21, __n);
    if (&v28[a4] == v52)
      v32 = a6;
    else
      v32 = &v28[a4];
    if (v29 == 8)
      v33 = 0;
    else
      v33 = v29 + 1;
    if (v30 >= 3)
      a9(a6, a2, a4, v31 - 4 * a4, v53[v33], a10);
    v34 = v31 + a4;
    memcpy(v32, v28, __n);
    if (&v32[a4] == v52)
      v35 = a6;
    else
      v35 = &v32[a4];
    if (v33 == 8)
      v36 = 0;
    else
      v36 = v33 + 1;
    if (v30 < 2)
    {
      result = memcpy(v35, v32, __n);
      if (!v30)
        return result;
    }
    else
    {
      a9(a6, a2, a4, v34 - 4 * a4, v53[v36], a10);
      memcpy(v35, v32, __n);
    }
    if (v36 == 8)
      v39 = 0;
    else
      v39 = v36 + 1;
    return (void *)a9(a6, a2, a4, v34 + a4 - 4 * a4, v53[v39], a10);
  }
  return result;
}

unsigned __int16 *sub_1D538B90C(unsigned __int16 *result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int16 *v17;
  _WORD *v18;
  unsigned int v19;
  unint64_t v20;
  unsigned __int16 *v21;
  _WORD *v22;
  unsigned int v23;
  unint64_t v24;
  unsigned __int16 *v25;
  _WORD *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unint64_t v34;
  unint64_t v35;
  signed int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned __int16 *v48;
  uint64_t v49;
  unint64_t v50;
  _WORD *v51;
  unsigned __int16 *v52;
  unsigned int v53;
  unint64_t v54;
  _WORD *v55;
  unsigned __int16 *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  unsigned int v111;
  int v112;
  int v113;
  int v114;
  BOOL v115;
  int v116;
  unsigned int v117;
  int v118;
  int v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  unsigned int v142;
  int v143;
  int v144;
  unsigned int v145;
  int v146;
  int v147;
  int v148;
  unsigned int v149;
  int v150;
  int v151;
  int v152;
  unsigned int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  unsigned int v202;
  int v203;
  unsigned int v204;
  unsigned int v205;
  int v206;
  int v207;
  unsigned int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  uint64_t v248;
  __int128 *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t i;
  signed int v254;
  int v255;
  unsigned int v256;
  int v257;
  int v258;
  int v259;
  unsigned int v260;
  signed int v261;
  int v262;
  int v263;
  unsigned int v264;
  int v265;
  signed int v266;
  int v267;
  int v268;
  unsigned int v269;
  signed int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  _WORD *v281;
  unsigned __int16 *v282;
  unsigned int v283;
  unint64_t v284;
  _WORD *v285;
  unsigned __int16 *v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unsigned __int16 *v295;
  unsigned __int16 *v296;
  unsigned __int8 *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned __int16 *v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  uint64_t v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  uint64_t v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  int v354;
  uint64_t v355;
  int v356;
  int v357;
  int v358;
  int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  int v366;
  unsigned int v367;
  unsigned int v368;
  unsigned __int8 v369;
  int v370;
  int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  int v376;
  int v377;
  int v378;
  int v379;
  int v380;
  int v381;
  int v382;
  int v383;
  int v384;
  int v385;
  int v386;
  unsigned int v387;
  unsigned int v388;
  unsigned int v389;
  int v390;
  int v391;
  unsigned int v392;
  unsigned int v393;
  unsigned __int8 *v394;
  uint64_t v395;
  unsigned __int16 *v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  int v406;
  unsigned __int16 *v407;
  unsigned __int16 *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unsigned __int16 *v412;
  unsigned __int16 *v413;
  unsigned __int16 *v414;
  unsigned __int16 *v415;
  int v416;
  int v417;
  int v418;
  int v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  uint64_t v436;

  v436 = *MEMORY[0x1E0C80C00];
  v2 = a2[208];
  v3 = a2[210];
  v4 = a2[211];
  v5 = a2[212];
  v6 = a2[213];
  v7 = a2[214];
  v8 = a2[215];
  v9 = a2[216];
  v10 = a2[217];
  v292 = a2[218];
  v11 = a2[219];
  v291 = a2[220];
  v12 = a2[221];
  v355 = a2[222];
  v13 = *((_QWORD *)result + 280);
  v14 = 4 * v4;
  v293 = a2[209] - 8;
  v294 = 4 * v9;
  v354 = *((_DWORD *)result + 40);
  v15 = 2 * (v354 != 4);
  if (v2)
  {
    v16 = 0;
    v17 = (unsigned __int16 *)(2 * v9 + v6 + v15 + 6);
    v18 = (_WORD *)(2 * v4 + v3 + v15 + 6);
    do
    {
      *(v18 - 2) = *(_WORD *)(v13 + 2 * (unsigned __int16)*(v18 - 2));
      *v18 = *(_WORD *)(v13 + 2 * (unsigned __int16)*v18);
      *(v18 - 3) = *(_WORD *)(v13 + 2 * *(v17 - 2));
      v19 = *v17;
      v17 += 4;
      *(v18 - 1) = *(_WORD *)(v13 + 2 * v19);
      v16 += 4;
      v18 += 4;
    }
    while (v16 < v2);
    v20 = 0;
    v21 = (unsigned __int16 *)(v294 + v15 + v6 + 6);
    v22 = (_WORD *)(v14 + v15 + v3 + 6);
    do
    {
      *(v22 - 2) = *(_WORD *)(v13 + 2 * (unsigned __int16)*(v22 - 2));
      *v22 = *(_WORD *)(v13 + 2 * (unsigned __int16)*v22);
      *(v22 - 3) = *(_WORD *)(v13 + 2 * *(v21 - 2));
      v23 = *v21;
      v21 += 4;
      *(v22 - 1) = *(_WORD *)(v13 + 2 * v23);
      v20 += 4;
      v22 += 4;
    }
    while (v20 < v2);
    v24 = 0;
    v25 = (unsigned __int16 *)(v15 + 6 * v9 + v6 + 6);
    v26 = (_WORD *)(v15 + 6 * v4 + v3 + 6);
    do
    {
      *(v26 - 2) = *(_WORD *)(v13 + 2 * (unsigned __int16)*(v26 - 2));
      *v26 = *(_WORD *)(v13 + 2 * (unsigned __int16)*v26);
      *(v26 - 3) = *(_WORD *)(v13 + 2 * *(v25 - 2));
      v27 = *v25;
      v25 += 4;
      *(v26 - 1) = *(_WORD *)(v13 + 2 * v27);
      v24 += 4;
      v26 += 4;
    }
    while (v24 < v2);
  }
  if (v293)
  {
    v353 = v2 - 8;
    if (v2 != 8)
    {
      v28 = 0;
      v29 = v5 + v294 + 8;
      v30 = v7 + v294 + 8;
      v31 = v8 + v294 + 8;
      v32 = 2 * v292 + v10 + 12;
      v33 = (unsigned __int8 *)(v12 + 4 * v355 + 2);
      v34 = v4 >> 1;
      v35 = v9 >> 1;
      v36 = *((_DWORD *)result + 558);
      v37 = *((_DWORD *)result + 559);
      v38 = v4 & 0xFFFFFFFFFFFFFFFELL;
      v351 = v4 | 1;
      v39 = 2 * (v4 >> 1);
      v350 = 1 - v39;
      v40 = 4 * (v4 >> 1);
      v348 = v40 | 3;
      v41 = (v15 | (8 * v9)) + v6;
      v42 = v15 + 10 * v9 + v6;
      v43 = v15 | (8 * v4);
      v44 = v15 + 10 * v4;
      v347 = (4 * v34) | 2;
      v352 = (4 * v34) | 1;
      v346 = (2 * (v39 + v34)) | 1;
      v45 = 2 * (v39 + v34);
      v345 = 3 - v39;
      v344 = 2 - v39;
      v310 = 4 - v39;
      v343 = -v39;
      v320 = ~v39;
      v307 = v39 ^ 0xFFFFFFFFFFFFFFFELL;
      v46 = 2 * v291 + v11 + 8;
      v47 = v37 << 14;
      v48 = (unsigned __int16 *)(v41 + 6);
      result = (unsigned __int16 *)(v14 + v3 + 8);
      v306 = v43 + v3 + 6;
      v304 = v44 + v3 + 6;
      v305 = (unsigned __int16 *)(v42 + 6);
      v49 = 2 * v35;
      v342 = v38 + 5;
      v340 = v38 - 3;
      v341 = v40 - 1;
      v338 = v40 - 2;
      v339 = v38 + 4;
      v336 = v38 - 1;
      v337 = v38 + 3;
      v309 = v40 + 5;
      v334 = v38 - 2;
      v335 = v38 + 2;
      v332 = v45 + 2;
      v333 = v40 + 4;
      v349 = v40;
      v308 = v40 - 3;
      v289 = v13;
      v290 = v2;
      v288 = v14;
      while (1)
      {
        if (v2)
        {
          v50 = 0;
          v51 = (_WORD *)v306;
          v52 = v48;
          do
          {
            *(v51 - 2) = *(_WORD *)(v13 + 2 * (unsigned __int16)*(v51 - 2));
            *v51 = *(_WORD *)(v13 + 2 * (unsigned __int16)*v51);
            *(v51 - 3) = *(_WORD *)(v13 + 2 * *(v52 - 2));
            v53 = *v52;
            v52 += 4;
            *(v51 - 1) = *(_WORD *)(v13 + 2 * v53);
            v50 += 4;
            v51 += 4;
          }
          while (v50 < v2);
          v54 = 0;
          v55 = (_WORD *)v304;
          v56 = v305;
          do
          {
            *(v55 - 2) = *(_WORD *)(v13 + 2 * (unsigned __int16)*(v55 - 2));
            *v55 = *(_WORD *)(v13 + 2 * (unsigned __int16)*v55);
            *(v55 - 3) = *(_WORD *)(v13 + 2 * *(v56 - 2));
            v57 = *v56;
            v56 += 4;
            *(v55 - 1) = *(_WORD *)(v13 + 2 * v57);
            v54 += 4;
            v55 += 4;
          }
          while (v54 < v2);
        }
        v302 = v29;
        v303 = v28;
        v58 = 0;
        v295 = (unsigned __int16 *)((char *)result + v14);
        v296 = v48;
        v415 = (unsigned __int16 *)(v32 - v292);
        v414 = (unsigned __int16 *)(v32 + v292);
        v413 = (unsigned __int16 *)(v46 - v291);
        v412 = (unsigned __int16 *)(v46 + v291);
        v411 = v29;
        v300 = v31;
        v301 = v30;
        v410 = v30;
        v409 = v31;
        v297 = v33;
        v298 = v46;
        v408 = (unsigned __int16 *)v46;
        v299 = v32;
        v407 = (unsigned __int16 *)v32;
        do
        {
          v395 = v58;
          v435 = 0uLL;
          v433 = 0uLL;
          v434 = 0uLL;
          v431 = 0uLL;
          v432 = 0uLL;
          v429 = 0uLL;
          v430 = 0uLL;
          v427 = 0uLL;
          v428 = 0uLL;
          v425 = 0uLL;
          v426 = 0uLL;
          v423 = 0uLL;
          v424 = 0uLL;
          v421 = 0uLL;
          v422 = 0uLL;
          v420 = 0uLL;
          v59 = *v33;
          v60 = v59 & 0xF;
          v61 = v59 >> 4;
          v62 = v33[1];
          v63 = v62 & 0xF;
          v64 = v62 >> 4;
          v65 = v33[2 * v355];
          v66 = v65 & 0xF;
          v67 = v33[(2 * v355) | 1];
          v389 = v65;
          v367 = v65 >> 4;
          v391 = v67 & 0xF;
          v387 = v33[v355];
          v388 = v33[v355 + 1];
          v368 = v67 >> 4;
          v68 = v33[3 * v355];
          v394 = v33;
          v396 = result;
          v393 = v33[3 * v355 + 1];
          v392 = v67;
          if (v354 == 4)
          {
            v331 = v65 & 0xF;
            v417 = result[v351];
            v398 = result[3];
            v378 = result[v350];
            v402 = *(result - 1);
            v384 = result[v342];
            v329 = result[v348];
            v363 = result[v341];
            v317 = result[v340];
            v311 = result[v346];
            v366 = result[v38];
            v380 = result[v343];
            v82 = result[2];
            v83 = *(result - 2);
            v386 = result[v339];
            v357 = result[v347];
            v365 = result[v338];
            v319 = result[v38 - 4];
            v312 = result[v45];
            v326 = result[v337];
            v400 = result[v336];
            v376 = result[v352];
            v418 = result[1];
            v359 = result[v345];
            v372 = result[5];
            v324 = result[v309];
            v315 = result[v45 + 3];
            v84 = *(result - 3);
            v85 = *result;
            v86 = result[v335];
            v370 = result[v334];
            v87 = result[v349];
            v361 = result[v344];
            v374 = result[4];
            v322 = result[v333];
            v313 = result[v332];
            v88 = *(result - 4);
            v382 = v82;
            v406 = v85;
            v404 = v83;
            if ((v59 & 0xF) != 0)
            {
              v89 = v68;
              v90 = result[v320];
              v91 = result[v307];
              if (v60 == 2)
              {
                v92 = result[v351];
                LOWORD(v420) = (3 * (v378 + v417) + 10 * v402 + 8) >> 4;
                WORD4(v420) = (3 * (v380 + v366) + 10 * v83 + 8) >> 4;
                LOWORD(v421) = (3 * (v90 + v400) + 10 * v418 + 8) >> 4;
                v93 = (3 * (v91 + v370) + 10 * v85 + 8) >> 4;
              }
              else
              {
                LOWORD(v420) = (v398 + 9 * v402 + 3 * (v378 + v417) + 8) >> 4;
                WORD4(v420) = (v82 + 9 * v83 + 3 * (v380 + v366) + 8) >> 4;
                LOWORD(v421) = (9 * v418 + v84 + 3 * (v90 + v400) + 8) >> 4;
                v109 = 9 * v85 + v88;
                v92 = v417;
                v93 = (v109 + 3 * (v91 + v370) + 8) >> 4;
              }
              v68 = v89;
              v100 = v86;
              v61 = v59 >> 4;
              v63 = v62 & 0xF;
              WORD4(v421) = v93;
              if (v59 < 0x10)
              {
LABEL_41:
                v103 = v398;
                v106 = v402;
                WORD1(v420) = (v402 + v398 + 1) >> 1;
                v102 = v366;
                v104 = v406;
                v105 = v400;
                WORD5(v420) = (v404 + v82 + 1) >> 1;
                WORD1(v421) = v418;
                WORD5(v421) = v406;
                if (v63)
                  goto LABEL_42;
LABEL_53:
                WORD2(v420) = (3 * v103 + v106 + 2) >> 2;
                WORD6(v420) = (3 * v82 + v404 + 2) >> 2;
                WORD2(v421) = (3 * v418 + v372 + 2) >> 2;
                v111 = v389;
                v110 = v326;
                WORD6(v421) = (3 * v104 + v374 + 2) >> 2;
                if (v62 < 0x10)
                {
LABEL_54:
                  v117 = v68;
                  WORD3(v420) = v103;
                  HIWORD(v420) = v82;
                  v116 = v418;
                  WORD3(v421) = (v372 + v418 + 1) >> 1;
                  v118 = v374 + v104;
LABEL_55:
                  v142 = (v118 + 1) >> 1;
                  goto LABEL_88;
                }
LABEL_49:
                WORD3(v420) = v103;
                HIWORD(v420) = v82;
                v114 = v359 + v110;
                v115 = v64 == 2;
                v116 = v418;
                v117 = v68;
                if (v115)
                {
                  WORD3(v421) = (v114 + 1) >> 1;
                  v118 = v361 + v100;
                  goto LABEL_55;
                }
                WORD3(v421) = (v114 + v418 + v372 + 2) >> 2;
                v106 = v402;
                v142 = (v361 + v100 + v104 + v374 + 2) >> 2;
LABEL_88:
                HIWORD(v421) = v142;
                v327 = v92 + 1;
                LOWORD(v424) = (v92 + 1 + v106) >> 1;
                v390 = v102 + 1;
                WORD4(v424) = (v102 + 1 + v404) >> 1;
                LOWORD(v425) = (v116 + v105 + 1) >> 1;
                WORD4(v425) = (v104 + v370 + 1) >> 1;
                if (v387 < 0x10)
                {
                  WORD1(v424) = (3 * (v106 + v103) + 10 * v92 + 8) >> 4;
                  WORD5(v424) = (3 * (v404 + v82) + 10 * v102 + 8) >> 4;
                  WORD1(v425) = (3 * (v105 + v110) + 10 * v116 + 8) >> 4;
                  v143 = v370;
                  v144 = 3 * (v370 + v100) + 10 * v104;
                  goto LABEL_111;
                }
                if ((v387 & 0xF0) == 0x20)
                {
                  v143 = v370;
                  WORD1(v424) = (v378 + 3 * v92 + 2) >> 2;
                  WORD5(v424) = (v380 + 3 * v102 + 2) >> 2;
                  WORD1(v425) = (3 * v116 + v376 + 2) >> 2;
                  v145 = (3 * v104 + v87 + 2) >> 2;
                }
                else
                {
                  WORD1(v424) = (9 * v92 + v378 + 3 * (v106 + v103) + 8) >> 4;
                  WORD5(v424) = (9 * v102 + v380 + 3 * (v404 + v82) + 8) >> 4;
                  WORD1(v425) = (9 * v116 + v376 + 3 * (v105 + v110) + 8) >> 4;
                  v143 = v370;
                  v144 = 9 * v104 + v87 + 3 * (v370 + v100);
LABEL_111:
                  v145 = (v144 + 8) >> 4;
                }
                v188 = v117;
                WORD5(v425) = v145;
                v189 = v92 + v103;
                WORD2(v424) = (v92 + v103 + 1) >> 1;
                WORD6(v424) = (v102 + v82 + 1) >> 1;
                WORD2(v425) = (v110 + v116 + 1) >> 1;
                WORD6(v425) = (v100 + v104 + 1) >> 1;
                v190 = v87;
                if (v388 >= 0x10)
                {
                  if ((v388 & 0xF0) == 0x20)
                  {
                    v192 = v329;
                    WORD3(v424) = (3 * v103 + v329 + 2) >> 2;
                    HIWORD(v424) = (3 * v82 + v357 + 2) >> 2;
                    WORD3(v425) = (3 * v110 + v359 + 2) >> 2;
                    v191 = v331;
                    HIWORD(v425) = (3 * v100 + v361 + 2) >> 2;
                    if (!v331)
                      goto LABEL_124;
                  }
                  else
                  {
                    v192 = v329;
                    WORD3(v424) = (9 * v103 + v329 + 3 * (v384 + v417) + 8) >> 4;
                    HIWORD(v424) = (9 * v82 + v357 + 3 * (v386 + v102) + 8) >> 4;
                    WORD3(v425) = (9 * v110 + v359 + 3 * (v372 + v418) + 8) >> 4;
                    v191 = v331;
                    HIWORD(v425) = (9 * v100 + v361 + 3 * (v374 + v406) + 8) >> 4;
                    if (!v331)
                      goto LABEL_124;
                  }
                }
                else
                {
                  WORD3(v424) = (3 * (v384 + v92) + 10 * v103 + 8) >> 4;
                  HIWORD(v424) = (3 * (v386 + v102) + 10 * v82 + 8) >> 4;
                  WORD3(v425) = (3 * (v372 + v116) + 10 * v110 + 8) >> 4;
                  v191 = v331;
                  v192 = v329;
                  HIWORD(v425) = (3 * (v374 + v104) + 10 * v100 + 8) >> 4;
                  if (!v331)
                  {
LABEL_124:
                    LOWORD(v428) = (3 * v417 + v317 + 2) >> 2;
                    WORD4(v428) = (3 * v102 + v319 + 2) >> 2;
                    LOWORD(v429) = (v110 + 3 * v400 + 2) >> 2;
                    v193 = v190;
                    WORD4(v429) = (v100 + 3 * v143 + 2) >> 2;
                    if (v111 >= 0x10)
                      goto LABEL_125;
LABEL_121:
                    WORD1(v428) = v417;
                    WORD5(v428) = v102;
                    v195 = v400;
                    WORD1(v429) = (v400 + v110 + 1) >> 1;
                    v196 = v376;
                    WORD5(v429) = (v143 + v100 + 1) >> 1;
                    v197 = v391;
                    v198 = v357;
                    if (!v391)
                    {
LABEL_133:
                      WORD2(v428) = (3 * v417 + v384 + 2) >> 2;
                      WORD6(v428) = (3 * v102 + v386 + 2) >> 2;
                      WORD2(v429) = (v195 + 3 * v110 + 2) >> 2;
                      WORD6(v429) = (v143 + 3 * v100 + 2) >> 2;
                      if (v392 >= 0x10)
                        goto LABEL_134;
LABEL_131:
                      v200 = v327;
                      WORD3(v428) = (v327 + v384) >> 1;
                      v201 = v102 + 1;
                      v202 = (v390 + v386) >> 1;
                      v203 = v365;
                      goto LABEL_138;
                    }
LABEL_127:
                    if (v197 == 2)
                    {
                      WORD2(v428) = (3 * (v192 + v398) + 10 * v417 + 8) >> 4;
                      WORD6(v428) = (3 * (v198 + v82) + 10 * v102 + 8) >> 4;
                      WORD2(v429) = (3 * (v196 + v418) + 10 * v110 + 8) >> 4;
                      v199 = 3 * (v193 + v406) + 10 * v100;
                    }
                    else
                    {
                      WORD2(v428) = (9 * v417 + v384 + 3 * (v192 + v398) + 8) >> 4;
                      WORD6(v428) = (9 * v102 + v386 + 3 * (v198 + v82) + 8) >> 4;
                      WORD2(v429) = (9 * v110 + v195 + 3 * (v196 + v418) + 8) >> 4;
                      v199 = 9 * v100 + v143 + 3 * (v193 + v406);
                    }
                    WORD6(v429) = (v199 + 8) >> 4;
                    if (v392 < 0x10)
                      goto LABEL_131;
LABEL_134:
                    v203 = v365;
                    if (v368 == 2)
                    {
                      WORD3(v428) = (v192 + v398 + 1) >> 1;
                      v202 = (v198 + v82 + 1) >> 1;
                    }
                    else
                    {
                      WORD3(v428) = (v189 + v384 + v192 + 2) >> 2;
                      v202 = (v102 + v82 + v386 + v198 + 2) >> 2;
                    }
                    v200 = v327;
                    v201 = v102 + 1;
LABEL_138:
                    HIWORD(v428) = v202;
                    WORD3(v429) = v110;
                    HIWORD(v429) = v100;
                    LOWORD(v432) = (v200 + v363) >> 1;
                    WORD4(v432) = (v201 + v203) >> 1;
                    LOWORD(v433) = (v195 + v196 + 1) >> 1;
                    WORD4(v433) = (v143 + v193 + 1) >> 1;
                    if (v188 >= 0x10)
                    {
                      v206 = v188 & 0xF0;
                      v205 = v393;
                      if (v206 == 32)
                      {
                        WORD1(v432) = (3 * v417 + v311 + 2) >> 2;
                        WORD5(v432) = (3 * v102 + v312 + 2) >> 2;
                        WORD1(v433) = (v418 + 3 * v196 + 2) >> 2;
                        v204 = (v406 + 3 * v193 + 2) >> 2;
                      }
                      else
                      {
                        WORD1(v432) = (9 * v417 + v311 + 3 * (v363 + v192) + 8) >> 4;
                        WORD5(v432) = (9 * v102 + v312 + 3 * (v203 + v198) + 8) >> 4;
                        WORD1(v433) = (v418 + 9 * v196 + 3 * (v195 + v110) + 8) >> 4;
                        v102 = v366;
                        v204 = (v406 + 9 * v193 + 3 * (v143 + v100) + 8) >> 4;
                      }
                    }
                    else
                    {
                      WORD1(v432) = (3 * (v363 + v192) + 10 * v417 + 8) >> 4;
                      WORD5(v432) = (3 * (v203 + v198) + 10 * v102 + 8) >> 4;
                      WORD1(v433) = (3 * (v195 + v110) + 10 * v196 + 8) >> 4;
                      v204 = (3 * (v143 + v100) + 10 * v193 + 8) >> 4;
                      v205 = v393;
                    }
                    WORD5(v433) = v204;
                    WORD2(v432) = (v200 + v192) >> 1;
                    WORD6(v432) = (v390 + v198) >> 1;
                    WORD2(v433) = (v110 + v196 + 1) >> 1;
                    WORD6(v433) = (v100 + v193 + 1) >> 1;
                    if (v205 < 0x10)
                    {
                      WORD3(v432) = (3 * (v384 + v417) + 10 * v192 + 8) >> 4;
                      HIWORD(v432) = (3 * (v386 + v102) + 10 * v198 + 8) >> 4;
                      WORD3(v433) = (3 * (v324 + v196) + 10 * v110 + 8) >> 4;
                      v207 = 3 * (v322 + v193) + 10 * v100;
                      goto LABEL_148;
                    }
                    if ((v205 & 0xF0) == 0x20)
                    {
                      WORD3(v432) = (v398 + 3 * v192 + 2) >> 2;
                      HIWORD(v432) = (v382 + 3 * v198 + 2) >> 2;
                      WORD3(v433) = (3 * v110 + v315 + 2) >> 2;
                      v208 = (3 * v100 + v313 + 2) >> 2;
                    }
                    else
                    {
                      WORD3(v432) = (v398 + 9 * v192 + 3 * (v384 + v417) + 8) >> 4;
                      HIWORD(v432) = (v382 + 9 * v198 + 3 * (v386 + v102) + 8) >> 4;
                      WORD3(v433) = (9 * v110 + v315 + 3 * (v324 + v196) + 8) >> 4;
                      v207 = 9 * v100 + v313 + 3 * (v322 + v193);
LABEL_148:
                      v208 = (v207 + 8) >> 4;
                    }
                    HIWORD(v433) = v208;
                    v209 = *v415;
                    v210 = v415[3];
                    v211 = v415[6];
                    v212 = *v407;
                    v213 = v407[3];
                    v214 = v407[6];
                    v215 = *v414;
                    v216 = v414[3];
                    v217 = v414[6];
                    LOWORD(v422) = (v212 + 1 + v209) >> 1;
                    v218 = v213 + v210;
                    WORD1(v422) = (v218 + 2 + v209 + v212) >> 2;
                    WORD2(v422) = (v218 + 1) >> 1;
                    WORD3(v422) = (v218 + 2 + v211 + v214) >> 2;
                    LOWORD(v426) = v212;
                    WORD1(v426) = (v213 + v212 + 1) >> 1;
                    WORD2(v426) = v213;
                    WORD3(v426) = (v214 + v213 + 1) >> 1;
                    LOWORD(v430) = (v212 + 1 + v215) >> 1;
                    WORD1(v430) = (v216 + 2 + v213 + v212 + v215) >> 2;
                    WORD2(v430) = (v216 + 1 + v213) >> 1;
                    WORD3(v430) = (v216 + 2 + v214 + v213 + v217) >> 2;
                    LOWORD(v434) = v215;
                    WORD1(v434) = (v216 + 1 + v215) >> 1;
                    WORD2(v434) = v216;
                    WORD3(v434) = (v216 + 1 + v217) >> 1;
                    v219 = v415[1];
                    v220 = v415[4];
                    v221 = v415[7];
                    v222 = v407[1];
                    v223 = v407[4];
                    v224 = v407[7];
                    v225 = v414[1];
                    v226 = v414[4];
                    v227 = v414[7];
                    WORD4(v422) = (v222 + 1 + v219) >> 1;
                    v228 = v223 + v220;
                    WORD5(v422) = (v228 + 2 + v219 + v222) >> 2;
                    WORD6(v422) = (v228 + 1) >> 1;
                    HIWORD(v422) = (v228 + 2 + v221 + v224) >> 2;
                    WORD4(v426) = v222;
                    WORD5(v426) = (v223 + v222 + 1) >> 1;
                    WORD6(v426) = v223;
                    HIWORD(v426) = (v224 + v223 + 1) >> 1;
                    WORD4(v430) = (v222 + 1 + v225) >> 1;
                    WORD5(v430) = (v226 + 2 + v223 + v222 + v225) >> 2;
                    WORD6(v430) = (v226 + 1 + v223) >> 1;
                    HIWORD(v430) = (v226 + 2 + v224 + v223 + v227) >> 2;
                    WORD4(v434) = v225;
                    WORD5(v434) = (v226 + 1 + v225) >> 1;
                    WORD6(v434) = v226;
                    HIWORD(v434) = (v226 + 1 + v227) >> 1;
                    v229 = v415[2];
                    v230 = v415[5];
                    v231 = v415[8];
                    v232 = v407[2];
                    v233 = v407[5];
                    v234 = v407[8];
                    v235 = v414[2];
                    v236 = v414[5];
                    v237 = v414[8];
                    LOWORD(v423) = (v232 + 1 + v229) >> 1;
                    v238 = v233 + v230;
                    WORD1(v423) = (v238 + 2 + v229 + v232) >> 2;
                    WORD2(v423) = (v238 + 1) >> 1;
                    WORD3(v423) = (v238 + 2 + v231 + v234) >> 2;
                    LOWORD(v427) = v232;
                    WORD1(v427) = (v233 + v232 + 1) >> 1;
                    WORD2(v427) = v233;
                    WORD3(v427) = (v234 + v233 + 1) >> 1;
                    LOWORD(v431) = (v232 + 1 + v235) >> 1;
                    WORD1(v431) = (v236 + 2 + v233 + v232 + v235) >> 2;
                    WORD2(v431) = (v236 + 1 + v233) >> 1;
                    WORD3(v431) = (v236 + 2 + v234 + v233 + v237) >> 2;
                    LOWORD(v435) = v235;
                    WORD1(v435) = (v236 + 1 + v235) >> 1;
                    WORD2(v435) = v236;
                    WORD3(v435) = (v236 + 1 + v237) >> 1;
                    v239 = v413[1];
                    v240 = v413[5];
                    v241 = v408[1];
                    v242 = v408[3];
                    v243 = v408[5];
                    v244 = v412[1];
                    v245 = v412[3];
                    v246 = v242 + v413[3];
                    v247 = v412[5];
                    WORD4(v423) = (v241 + 1 + v239) >> 1;
                    WORD5(v423) = (v246 + 2 + v239 + v241) >> 2;
                    WORD6(v423) = (v246 + 1) >> 1;
                    HIWORD(v423) = (v246 + 2 + v240 + v243) >> 2;
                    WORD4(v427) = v241;
                    WORD5(v427) = (v242 + v241 + 1) >> 1;
                    WORD6(v427) = v242;
                    HIWORD(v427) = (v243 + v242 + 1) >> 1;
                    WORD4(v431) = (v241 + 1 + v244) >> 1;
                    WORD5(v431) = (v245 + 2 + v242 + v241 + v244) >> 2;
                    WORD6(v431) = (v245 + 1 + v242) >> 1;
                    HIWORD(v431) = (v245 + 2 + v243 + v242 + v247) >> 2;
                    WORD4(v435) = v244;
                    WORD5(v435) = (v245 + 1 + v244) >> 1;
                    v187 = (v245 + 1 + v247) >> 1;
                    WORD6(v435) = v245;
                    goto LABEL_150;
                  }
                }
                if (v191 == 2)
                {
                  LOWORD(v428) = (3 * (v363 + v402) + 10 * v417 + 8) >> 4;
                  WORD4(v428) = (3 * (v365 + v404) + 10 * v102 + 8) >> 4;
                  LOWORD(v429) = (3 * (v376 + v418) + 10 * v400 + 8) >> 4;
                  v193 = v190;
                  v194 = 3 * (v190 + v406) + 10 * v143;
                }
                else
                {
                  LOWORD(v428) = (9 * v417 + v317 + 3 * (v363 + v402) + 8) >> 4;
                  WORD4(v428) = (9 * v102 + v319 + 3 * (v365 + v404) + 8) >> 4;
                  LOWORD(v429) = (v110 + 9 * v400 + 3 * (v376 + v418) + 8) >> 4;
                  v193 = v190;
                  v194 = v100 + 9 * v143 + 3 * (v190 + v406);
                }
                WORD4(v429) = (v194 + 8) >> 4;
                if (v111 < 0x10)
                  goto LABEL_121;
LABEL_125:
                WORD1(v428) = v417;
                WORD5(v428) = v102;
                v196 = v376;
                if (v367 == 2)
                {
                  WORD1(v429) = (v376 + v418 + 1) >> 1;
                  v195 = v400;
                  WORD5(v429) = (v193 + v406 + 1) >> 1;
                  v197 = v391;
                  v198 = v357;
                  if (!v391)
                    goto LABEL_133;
                }
                else
                {
                  v195 = v400;
                  WORD1(v429) = (v400 + v110 + v116 + v376 + 2) >> 2;
                  WORD5(v429) = (v143 + v100 + v104 + v193 + 2) >> 2;
                  v197 = v391;
                  v198 = v357;
                  if (!v391)
                    goto LABEL_133;
                }
                goto LABEL_127;
              }
            }
            else
            {
              LOWORD(v420) = (v398 + 3 * v402 + 2) >> 2;
              WORD4(v420) = (v82 + 3 * v83 + 2) >> 2;
              LOWORD(v421) = (3 * v418 + v84 + 2) >> 2;
              v99 = (3 * v85 + v88 + 2) >> 2;
              v100 = v86;
              v92 = v417;
              WORD4(v421) = v99;
              if (v59 < 0x10)
                goto LABEL_41;
            }
            v101 = v378 + v92;
            v102 = v366;
            v103 = v398;
            v104 = v406;
            v105 = v400;
            v106 = v402;
            if (v61 == 2)
            {
              WORD1(v420) = (v101 + 1) >> 1;
              WORD5(v420) = (v380 + v366 + 1) >> 1;
              WORD1(v421) = v418;
              WORD5(v421) = v406;
              if (v63)
                goto LABEL_42;
              goto LABEL_53;
            }
            WORD1(v420) = (v101 + v398 + v402 + 2) >> 2;
            v106 = v402;
            WORD5(v420) = (v380 + v366 + v82 + v404 + 2) >> 2;
            WORD1(v421) = v418;
            WORD5(v421) = v406;
            if (!v63)
              goto LABEL_53;
LABEL_42:
            if (v63 == 2)
            {
              WORD2(v420) = (3 * (v378 + v92) + 10 * v103 + 8) >> 4;
              WORD6(v420) = (3 * (v380 + v102) + 10 * v82 + 8) >> 4;
              v110 = v326;
              WORD2(v421) = (3 * (v359 + v326) + 10 * v418 + 8) >> 4;
              v111 = v389;
              v106 = v402;
              WORD6(v421) = (3 * (v361 + v100) + 10 * v104 + 8) >> 4;
              if (v62 < 0x10)
                goto LABEL_54;
            }
            else
            {
              WORD2(v420) = (9 * v103 + v402 + 3 * (v378 + v92) + 8) >> 4;
              WORD6(v420) = (9 * v82 + v404 + 3 * (v380 + v102) + 8) >> 4;
              v110 = v326;
              WORD2(v421) = (9 * v418 + v372 + 3 * (v359 + v326) + 8) >> 4;
              v106 = v402;
              v111 = v389;
              WORD6(v421) = (9 * v104 + v374 + 3 * (v361 + v100) + 8) >> 4;
              if (v62 < 0x10)
                goto LABEL_54;
            }
            goto LABEL_49;
          }
          v69 = v59 >> 4;
          v369 = v33[3 * v355];
          v70 = *result;
          v71 = result[v335];
          v72 = result[v344];
          v397 = result[4];
          v399 = result[v334];
          v73 = result[v349];
          v364 = result[v333];
          v360 = result[v38 + 6];
          v328 = result[v332];
          v74 = result[v351];
          v75 = *(result - 1);
          v76 = result[v350];
          v385 = result[3];
          v373 = result[v340];
          v401 = result[v341];
          v371 = result[v348];
          v362 = result[v342];
          v330 = result[v346];
          v77 = result[v38];
          v405 = result[v339];
          v78 = result[2];
          v379 = result[v347];
          v375 = result[v343];
          v381 = *(result - 2);
          v314 = result[v310];
          v321 = result[v338];
          v318 = result[v45];
          v356 = result[6];
          v79 = result[1];
          v80 = result[v336];
          v403 = result[v337];
          v416 = result[v352];
          v377 = result[v320];
          v316 = result[v345];
          v383 = *(result - 3);
          v325 = result[v308];
          v323 = result[v45 - 1];
          v358 = result[5];
          if ((v59 & 0xF) == 0)
          {
            LOWORD(v420) = *result;
            WORD4(v420) = v75;
            LOWORD(v421) = (v381 + v78 + 1) >> 1;
            v81 = v383 + v79;
LABEL_27:
            v94 = v76;
            WORD4(v421) = (v81 + 1) >> 1;
            v419 = v73;
            if (v59 < 0x10)
              goto LABEL_28;
            goto LABEL_37;
          }
          if (v60 == 2)
          {
            LOWORD(v420) = *result;
            WORD4(v420) = v75;
            LOWORD(v421) = (v375 + v77 + 1) >> 1;
            v81 = v377 + v80;
            goto LABEL_27;
          }
          LOWORD(v420) = *result;
          WORD4(v420) = v75;
          LOWORD(v421) = (v375 + v77 + v78 + v381 + 2) >> 2;
          v94 = v76;
          WORD4(v421) = (v377 + v80 + v79 + v383 + 2) >> 2;
          v419 = v73;
          if (v59 < 0x10)
          {
LABEL_28:
            WORD1(v420) = (3 * v70 + v397 + 2) >> 2;
            v95 = v75;
            v96 = v385;
            WORD5(v420) = (3 * v75 + v385 + 2) >> 2;
            WORD1(v421) = (3 * v78 + v381 + 2) >> 2;
            WORD5(v421) = (3 * v79 + v383 + 2) >> 2;
            v97 = v62 & 0xF;
            if ((v62 & 0xF) != 0)
              goto LABEL_29;
            goto LABEL_58;
          }
LABEL_37:
          v107 = 3 * (v72 + v71);
          v96 = v385;
          if (v69 == 2)
          {
            WORD1(v420) = (v107 + 10 * v70 + 8) >> 4;
            v95 = v75;
            WORD5(v420) = (3 * (v94 + v74) + 10 * v75 + 8) >> 4;
            WORD1(v421) = (3 * (v375 + v77) + 10 * v78 + 8) >> 4;
            v108 = 3 * (v377 + v80) + 10 * v79;
          }
          else
          {
            v94 = v76;
            WORD1(v420) = (9 * v70 + v397 + v107 + 8) >> 4;
            v95 = v75;
            WORD5(v420) = (9 * v75 + v385 + 3 * (v76 + v74) + 8) >> 4;
            WORD1(v421) = (9 * v78 + v381 + 3 * (v375 + v77) + 8) >> 4;
            v108 = 9 * v79 + v383 + 3 * (v377 + v80);
          }
          v73 = v419;
          WORD5(v421) = (v108 + 8) >> 4;
          v97 = v62 & 0xF;
          if ((v62 & 0xF) != 0)
          {
LABEL_29:
            if (v97 == 2)
            {
              WORD2(v420) = (v72 + v71 + 1) >> 1;
              v98 = v397;
              WORD6(v420) = (v94 + v74 + 1) >> 1;
              WORD2(v421) = v78;
              WORD6(v421) = v79;
              if (v62 < 0x10)
                goto LABEL_59;
            }
            else
            {
              v98 = v397;
              WORD2(v420) = (v72 + v71 + v70 + v397 + 2) >> 2;
              v73 = v419;
              WORD6(v420) = (v94 + v74 + v95 + v96 + 2) >> 2;
              WORD2(v421) = v78;
              WORD6(v421) = v79;
              if (v62 < 0x10)
                goto LABEL_59;
            }
            goto LABEL_46;
          }
LABEL_58:
          v98 = v397;
          WORD2(v420) = (v397 + v70 + 1) >> 1;
          WORD6(v420) = (v96 + v95 + 1) >> 1;
          WORD2(v421) = v78;
          WORD6(v421) = v79;
          if (v62 < 0x10)
          {
LABEL_59:
            WORD3(v420) = (v70 + 3 * v98 + 2) >> 2;
            HIWORD(v420) = (v95 + 3 * v96 + 2) >> 2;
            WORD3(v421) = (3 * v78 + v356 + 2) >> 2;
            HIWORD(v421) = (3 * v79 + v358 + 2) >> 2;
            v119 = v387 & 0xF;
            if ((v387 & 0xF) == 0)
              goto LABEL_65;
            goto LABEL_60;
          }
LABEL_46:
          v112 = 3 * (v72 + v71);
          if (v64 == 2)
          {
            WORD3(v420) = (v112 + 10 * v98 + 8) >> 4;
            HIWORD(v420) = (3 * (v94 + v74) + 10 * v96 + 8) >> 4;
            WORD3(v421) = (3 * (v314 + v405) + 10 * v78 + 8) >> 4;
            v113 = 3 * (v316 + v403) + 10 * v79;
          }
          else
          {
            WORD3(v420) = (v70 + v112 + 9 * v98 + 8) >> 4;
            HIWORD(v420) = (v95 + 9 * v96 + 3 * (v94 + v74) + 8) >> 4;
            WORD3(v421) = (9 * v78 + v356 + 3 * (v314 + v405) + 8) >> 4;
            v113 = 9 * v79 + v358 + 3 * (v316 + v403);
          }
          v73 = v419;
          HIWORD(v421) = (v113 + 8) >> 4;
          v119 = v387 & 0xF;
          if ((v387 & 0xF) == 0)
          {
LABEL_65:
            LOWORD(v424) = (3 * (v399 + v71) + 10 * v70 + 8) >> 4;
            WORD4(v424) = (3 * (v373 + v74) + 10 * v95 + 8) >> 4;
            LOWORD(v425) = (3 * (v381 + v78) + 10 * v77 + 8) >> 4;
            v121 = 3 * (v383 + v79) + 10 * v80;
            goto LABEL_66;
          }
LABEL_60:
          if (v119 == 2)
          {
            LOWORD(v424) = (3 * v70 + v73 + 2) >> 2;
            WORD4(v424) = (3 * v95 + v401 + 2) >> 2;
            LOWORD(v425) = (3 * v77 + v375 + 2) >> 2;
            v120 = (3 * v80 + v377 + 2) >> 2;
            goto LABEL_67;
          }
          LOWORD(v424) = (9 * v70 + v73 + 3 * (v399 + v71) + 8) >> 4;
          WORD4(v424) = (9 * v95 + v401 + 3 * (v373 + v74) + 8) >> 4;
          LOWORD(v425) = (9 * v77 + v375 + 3 * (v381 + v78) + 8) >> 4;
          v121 = 9 * v80 + v377 + 3 * (v383 + v79);
LABEL_66:
          v120 = (v121 + 8) >> 4;
LABEL_67:
          WORD4(v425) = v120;
          WORD1(v424) = (v71 + v70 + 1) >> 1;
          WORD5(v424) = (v74 + v95 + 1) >> 1;
          WORD1(v425) = (v77 + v78 + 1) >> 1;
          WORD5(v425) = (v80 + v79 + 1) >> 1;
          if ((v388 & 0xF) != 0)
          {
            if ((v388 & 0xF) == 2)
            {
              WORD2(v424) = (v72 + 3 * v71 + 2) >> 2;
              WORD6(v424) = (v94 + 3 * v74 + 2) >> 2;
              WORD2(v425) = (3 * v78 + v379 + 2) >> 2;
              v122 = (3 * v79 + v416 + 2) >> 2;
              v123 = v405;
              v124 = v403;
              v125 = v385;
              goto LABEL_73;
            }
            v126 = v66;
            WORD2(v424) = (9 * v71 + v72 + 3 * (v98 + v70) + 8) >> 4;
            v125 = v385;
            WORD6(v424) = (9 * v74 + v94 + 3 * (v385 + v95) + 8) >> 4;
            v123 = v405;
            WORD2(v425) = (9 * v78 + v379 + 3 * (v405 + v77) + 8) >> 4;
            v124 = v403;
            v98 = v397;
            v127 = 9 * v79 + v416 + 3 * (v403 + v80);
          }
          else
          {
            v126 = v66;
            WORD2(v424) = (3 * (v98 + v70) + 10 * v71 + 8) >> 4;
            v125 = v385;
            WORD6(v424) = (3 * (v385 + v95) + 10 * v74 + 8) >> 4;
            v123 = v405;
            WORD2(v425) = (3 * (v405 + v77) + 10 * v78 + 8) >> 4;
            v124 = v403;
            v127 = 3 * (v403 + v80) + 10 * v79;
          }
          v66 = v126;
          v122 = (v127 + 8) >> 4;
LABEL_73:
          WORD6(v425) = v122;
          v128 = v71 + 1;
          WORD3(v424) = (v71 + 1 + v98) >> 1;
          v129 = v74 + 1;
          HIWORD(v424) = (v74 + 1 + v125) >> 1;
          WORD3(v425) = (v78 + v123 + 1) >> 1;
          HIWORD(v425) = (v79 + v124 + 1) >> 1;
          if (v66)
          {
            v130 = v379;
            if (v66 == 2)
            {
              LOWORD(v428) = (v419 + v70 + 1) >> 1;
              v131 = v364;
              v132 = v373;
              WORD4(v428) = (v401 + v95 + 1) >> 1;
              LOWORD(v429) = v77;
              WORD4(v429) = v80;
              if (v389 < 0x10)
                goto LABEL_81;
            }
            else
            {
              LOWORD(v428) = (v71 + v70 + v399 + v419 + 2) >> 2;
              v132 = v373;
              v131 = v364;
              WORD4(v428) = (v74 + v95 + v373 + v401 + 2) >> 2;
              LOWORD(v429) = v77;
              WORD4(v429) = v80;
              if (v389 < 0x10)
              {
LABEL_81:
                WORD1(v428) = (3 * v71 + v399 + 2) >> 2;
                WORD5(v428) = (3 * v74 + v132 + 2) >> 2;
                WORD1(v429) = (v405 + 3 * v77 + 2) >> 2;
                WORD5(v429) = (v403 + 3 * v80 + 2) >> 2;
                v135 = v391;
                if (v391)
                  goto LABEL_82;
                goto LABEL_94;
              }
            }
          }
          else
          {
            LOWORD(v428) = (v128 + v399) >> 1;
            v132 = v373;
            v131 = v364;
            v130 = v379;
            WORD4(v428) = (v129 + v373) >> 1;
            LOWORD(v429) = v77;
            WORD4(v429) = v80;
            if (v389 < 0x10)
              goto LABEL_81;
          }
          v133 = 3 * (v419 + v70);
          if (v367 == 2)
          {
            WORD1(v428) = (v133 + 10 * v71 + 8) >> 4;
            WORD5(v428) = (3 * (v401 + v95) + 10 * v74 + 8) >> 4;
            WORD1(v429) = (3 * (v130 + v78) + 10 * v77 + 8) >> 4;
            v134 = 3 * (v416 + v79) + 10 * v80;
          }
          else
          {
            WORD1(v428) = (9 * v71 + v399 + v133 + 8) >> 4;
            WORD5(v428) = (9 * v74 + v132 + 3 * (v401 + v95) + 8) >> 4;
            v146 = 3 * (v130 + v78);
            v130 = v379;
            WORD1(v429) = (9 * v77 + v405 + v146 + 8) >> 4;
            v134 = 9 * v80 + v403 + 3 * (v416 + v79);
          }
          WORD5(v429) = (v134 + 8) >> 4;
          v135 = v391;
          if (v391)
          {
LABEL_82:
            if (v135 == 2)
            {
              WORD2(v428) = v71;
              WORD6(v428) = v74;
              WORD2(v429) = (v130 + v78 + 1) >> 1;
              v136 = v405;
              v137 = v403;
              v138 = v419;
              WORD6(v429) = (v416 + v79 + 1) >> 1;
              if (v392 < 0x10)
                goto LABEL_95;
            }
            else
            {
              WORD2(v428) = v71;
              WORD6(v428) = v74;
              v136 = v405;
              WORD2(v429) = (v405 + v77 + v78 + v130 + 2) >> 2;
              v137 = v403;
              v138 = v419;
              WORD6(v429) = (v403 + v80 + v79 + v416 + 2) >> 2;
              if (v392 < 0x10)
                goto LABEL_95;
            }
            goto LABEL_86;
          }
LABEL_94:
          WORD2(v428) = v71;
          WORD6(v428) = v74;
          v136 = v405;
          WORD2(v429) = (v405 + v77 + 1) >> 1;
          v137 = v403;
          v138 = v419;
          WORD6(v429) = (v403 + v80 + 1) >> 1;
          if (v392 < 0x10)
          {
LABEL_95:
            v139 = v131;
            WORD3(v428) = (3 * v71 + v360 + 2) >> 2;
            HIWORD(v428) = (3 * v74 + v362 + 2) >> 2;
            WORD3(v429) = (v77 + 3 * v136 + 2) >> 2;
            HIWORD(v429) = (v80 + 3 * v137 + 2) >> 2;
            v147 = v369 & 0xF;
            if ((v369 & 0xF) == 0)
              goto LABEL_101;
            goto LABEL_96;
          }
LABEL_86:
          v139 = v131;
          v140 = 3 * (v131 + v397);
          if (v368 == 2)
          {
            WORD3(v428) = (v140 + 10 * v71 + 8) >> 4;
            HIWORD(v428) = (3 * (v371 + v385) + 10 * v74 + 8) >> 4;
            WORD3(v429) = (3 * (v130 + v78) + 10 * v136 + 8) >> 4;
            v141 = 3 * (v416 + v79) + 10 * v137;
          }
          else
          {
            WORD3(v428) = (9 * v71 + v360 + v140 + 8) >> 4;
            HIWORD(v428) = (9 * v74 + v362 + 3 * (v371 + v385) + 8) >> 4;
            WORD3(v429) = (v77 + 9 * v136 + 3 * (v130 + v78) + 8) >> 4;
            v141 = v80 + 9 * v137 + 3 * (v416 + v79);
          }
          v138 = v419;
          HIWORD(v429) = (v141 + 8) >> 4;
          v147 = v369 & 0xF;
          if ((v369 & 0xF) == 0)
          {
LABEL_101:
            LOWORD(v432) = (3 * (v399 + v71) + 10 * v138 + 8) >> 4;
            v151 = v401;
            WORD4(v432) = (3 * (v132 + v74) + 10 * v401 + 8) >> 4;
            LOWORD(v433) = (3 * (v321 + v130) + 10 * v77 + 8) >> 4;
            v150 = v416;
            v152 = 3 * (v325 + v416) + 10 * v80;
            goto LABEL_102;
          }
LABEL_96:
          if (v147 == 2)
          {
            LOWORD(v432) = (v70 + 3 * v138 + 2) >> 2;
            v148 = v401;
            WORD4(v432) = (v95 + 3 * v401 + 2) >> 2;
            LOWORD(v433) = (3 * v77 + v318 + 2) >> 2;
            v149 = (3 * v80 + v323 + 2) >> 2;
            v150 = v416;
            goto LABEL_103;
          }
          LOWORD(v432) = (v70 + 9 * v138 + 3 * (v399 + v71) + 8) >> 4;
          v151 = v401;
          WORD4(v432) = (v95 + 9 * v401 + 3 * (v132 + v74) + 8) >> 4;
          LOWORD(v433) = (9 * v77 + v318 + 3 * (v321 + v130) + 8) >> 4;
          v150 = v416;
          v152 = 9 * v80 + v323 + 3 * (v325 + v416);
LABEL_102:
          v148 = v151;
          v138 = v419;
          v149 = (v152 + 8) >> 4;
LABEL_103:
          WORD4(v433) = v149;
          WORD1(v432) = (v128 + v138) >> 1;
          WORD5(v432) = (v129 + v148) >> 1;
          WORD1(v433) = (v77 + v130 + 1) >> 1;
          WORD5(v433) = (v80 + v150 + 1) >> 1;
          if ((v393 & 0xF) == 0)
          {
            WORD2(v432) = (3 * (v139 + v138) + 10 * v71 + 8) >> 4;
            v154 = v371;
            WORD6(v432) = (3 * (v371 + v148) + 10 * v74 + 8) >> 4;
            WORD2(v433) = (3 * (v136 + v77) + 10 * v130 + 8) >> 4;
            v155 = 3 * (v137 + v80) + 10 * v150;
LABEL_108:
            v153 = (v155 + 8) >> 4;
            goto LABEL_109;
          }
          if ((v393 & 0xF) != 2)
          {
            WORD2(v432) = (9 * v71 + v328 + 3 * (v139 + v138) + 8) >> 4;
            v154 = v371;
            WORD6(v432) = (9 * v74 + v330 + 3 * (v371 + v148) + 8) >> 4;
            WORD2(v433) = (v78 + 9 * v130 + 3 * (v136 + v77) + 8) >> 4;
            v155 = v79 + 9 * v150 + 3 * (v137 + v80);
            goto LABEL_108;
          }
          WORD2(v432) = (3 * v71 + v328 + 2) >> 2;
          WORD6(v432) = (3 * v74 + v330 + 2) >> 2;
          WORD2(v433) = (v78 + 3 * v130 + 2) >> 2;
          v153 = (v79 + 3 * v150 + 2) >> 2;
          v154 = v371;
LABEL_109:
          WORD6(v433) = v153;
          WORD3(v432) = (v128 + v139) >> 1;
          HIWORD(v432) = (v129 + v154) >> 1;
          WORD3(v433) = (v136 + v130 + 1) >> 1;
          HIWORD(v433) = (v137 + v150 + 1) >> 1;
          v156 = v415[3];
          v157 = *(v407 - 3);
          v158 = *v407;
          v159 = v407[3];
          v160 = *(v414 - 3);
          v161 = *v414;
          v162 = v414[3];
          v163 = v158 + *v415;
          LOWORD(v422) = (v163 + 2 + *(v415 - 3) + v157) >> 2;
          WORD1(v422) = (v163 + 1) >> 1;
          WORD2(v422) = (v163 + 2 + v156 + v159) >> 2;
          WORD3(v422) = (v159 + 1 + v156) >> 1;
          LOWORD(v426) = (v158 + v157 + 1) >> 1;
          WORD1(v426) = v158;
          WORD2(v426) = (v159 + v158 + 1) >> 1;
          WORD3(v426) = v159;
          LOWORD(v430) = (v161 + 2 + v158 + v157 + v160) >> 2;
          WORD1(v430) = (v161 + 1 + v158) >> 1;
          WORD2(v430) = (v161 + 2 + v159 + v158 + v162) >> 2;
          WORD3(v430) = (v159 + 1 + v162) >> 1;
          LOWORD(v434) = (v161 + 1 + v160) >> 1;
          WORD1(v434) = v161;
          WORD2(v434) = (v161 + 1 + v162) >> 1;
          WORD3(v434) = v162;
          v164 = v415[4];
          v165 = *(v407 - 2);
          v166 = v407[1];
          v167 = v407[4];
          v168 = *(v414 - 2);
          v169 = v414[1];
          v170 = v414[4];
          v171 = v166 + v415[1];
          WORD4(v422) = (v171 + 2 + *(v415 - 2) + v165) >> 2;
          WORD5(v422) = (v171 + 1) >> 1;
          WORD6(v422) = (v171 + 2 + v164 + v167) >> 2;
          HIWORD(v422) = (v167 + 1 + v164) >> 1;
          WORD4(v426) = (v166 + v165 + 1) >> 1;
          WORD5(v426) = v166;
          WORD6(v426) = (v167 + v166 + 1) >> 1;
          HIWORD(v426) = v167;
          WORD4(v430) = (v169 + 2 + v166 + v165 + v168) >> 2;
          WORD5(v430) = (v169 + 1 + v166) >> 1;
          WORD6(v430) = (v169 + 2 + v167 + v166 + v170) >> 2;
          HIWORD(v430) = (v167 + 1 + v170) >> 1;
          WORD4(v434) = (v169 + 1 + v168) >> 1;
          WORD5(v434) = v169;
          WORD6(v434) = (v169 + 1 + v170) >> 1;
          HIWORD(v434) = v170;
          v172 = v415[5];
          v173 = *(v407 - 1);
          v174 = v407[2];
          v175 = v407[5];
          v176 = *(v414 - 1);
          v177 = v414[2];
          v178 = v414[5];
          v179 = v174 + v415[2];
          LOWORD(v423) = (v179 + 2 + *(v415 - 1) + v173) >> 2;
          WORD1(v423) = (v179 + 1) >> 1;
          WORD2(v423) = (v179 + 2 + v172 + v175) >> 2;
          WORD3(v423) = (v175 + 1 + v172) >> 1;
          LOWORD(v427) = (v174 + v173 + 1) >> 1;
          WORD1(v427) = v174;
          WORD2(v427) = (v175 + v174 + 1) >> 1;
          WORD3(v427) = v175;
          LOWORD(v431) = (v177 + 2 + v174 + v173 + v176) >> 2;
          WORD1(v431) = (v177 + 1 + v174) >> 1;
          WORD2(v431) = (v177 + 2 + v175 + v174 + v178) >> 2;
          WORD3(v431) = (v175 + 1 + v178) >> 1;
          LOWORD(v435) = (v177 + 1 + v176) >> 1;
          WORD1(v435) = v177;
          WORD2(v435) = (v177 + 1 + v178) >> 1;
          WORD3(v435) = v178;
          v180 = v413[3];
          v181 = *(v408 - 1);
          v182 = v408[1];
          v183 = v408[3];
          v184 = *(v412 - 1);
          v185 = v182 + v413[1];
          v186 = v412[1];
          v187 = v412[3];
          WORD4(v423) = (v185 + 2 + *(v413 - 1) + v181) >> 2;
          WORD5(v423) = (v185 + 1) >> 1;
          WORD6(v423) = (v185 + 2 + v180 + v183) >> 2;
          HIWORD(v423) = (v183 + 1 + v180) >> 1;
          WORD4(v427) = (v182 + v181 + 1) >> 1;
          WORD5(v427) = v182;
          WORD6(v427) = (v183 + v182 + 1) >> 1;
          HIWORD(v427) = v183;
          WORD4(v431) = (v186 + 2 + v182 + v181 + v184) >> 2;
          WORD5(v431) = (v186 + 1 + v182) >> 1;
          WORD6(v431) = (v186 + 2 + v183 + v182 + v187) >> 2;
          HIWORD(v431) = (v183 + 1 + v187) >> 1;
          WORD4(v435) = (v186 + 1 + v184) >> 1;
          WORD5(v435) = v186;
          WORD6(v435) = (v186 + 1 + v187) >> 1;
LABEL_150:
          v248 = 0;
          HIWORD(v435) = v187;
          v249 = &v420;
          v250 = v411;
          v251 = v410;
          v252 = v409;
          do
          {
            for (i = 0; i != 8; i += 2)
            {
              v260 = (*(unsigned __int16 *)((char *)v249 + i) * *(unsigned __int16 *)((char *)v249 + i)
                    + 0x8000) >> 16;
              v261 = (*(unsigned __int16 *)((char *)v249 + i + 8)
                    * *(unsigned __int16 *)((char *)v249 + i + 8)
                    + 0x8000) >> 16;
              v262 = *(unsigned __int16 *)(v252 + i);
              v263 = v262 - v261;
              v264 = *(unsigned __int16 *)((char *)v249 + i + 40)
                   + ((*(unsigned __int16 *)((char *)v249 + i + 40) - 1) >> 31);
              v265 = ((int)(8389 * v260 - 25164952) >> 12) & ~((int)(8389 * v260 - 25164952) >> 31);
              v266 = (((4096 - v265) & ((4096 - v265) >> 31)) + v265)
                   * (((*(unsigned __int16 *)((char *)v249 + i + 32) << 16) / v264 + 2048) >> 12);
              if (v266 >= 0x10000)
              {
                if (v266 > 0x20000)
                {
                  v267 = (v47 * v261 + 0x8000) >> 16;
                  if (v261 >= v36)
                    v267 = 0x4000;
                  v268 = (v267 * v261 + 0x8000) >> 16;
                  if (-v268 > ((v268 - v263) & ((v268 - v263) >> 31)) + v263)
                    v263 = -v268;
                  else
                    v263 += (v268 - v263) & ((v268 - v263) >> 31);
                }
              }
              else
              {
                v266 = 0x10000;
              }
              v269 = (*(unsigned __int16 *)((char *)v249 + i + 16)
                    * *(unsigned __int16 *)((char *)v249 + i + 16)
                    + 0x8000) >> 16;
              v270 = (*(unsigned __int16 *)((char *)v249 + i + 24)
                    * *(unsigned __int16 *)((char *)v249 + i + 24)
                    + 0x8000) >> 16;
              v271 = v262 - v270;
              v272 = ((int)(8389 * v269 - 25164952) >> 12) & ~((int)(8389 * v269 - 25164952) >> 31);
              v254 = (((4096 - v272) & ((4096 - v272) >> 31)) + v272)
                   * (((*(unsigned __int16 *)((char *)v249 + i + 48) << 16) / v264 + 2048) >> 12);
              if (v254 < 0x10000)
              {
                v254 = 0x10000;
              }
              else if (v254 > 0x20000)
              {
                v273 = (v47 * v270 + 0x8000) >> 16;
                if (v270 >= v36)
                  v273 = 0x4000;
                v274 = (v273 * v270 + 0x8000) >> 16;
                if (-v274 > ((v274 - v271) & ((v274 - v271) >> 31)) + v271)
                  v271 = -v274;
                else
                  v271 += (v274 - v271) & ((v274 - v271) >> 31);
              }
              v255 = (49152 - *(unsigned __int16 *)((char *)v249 + i + 56)) & ~((49152
                                                                               - *(unsigned __int16 *)((char *)v249 + i + 56)) >> 31);
              v256 = ((((0x8000 - v255) & ((0x8000 - v255) >> 31)) + v255) * ((v266 + 2) >> 2) + 0x4000) >> 15;
              v257 = (v260 + ((int)(v256 * v263 + 0x2000) >> 14)) & ~((int)(v260 + ((int)(v256 * v263 + 0x2000) >> 14)) >> 31);
              if (v257 >= 0xFFFF)
                LOWORD(v257) = -1;
              *(_WORD *)(v250 + i) = v257;
              v258 = v269 + ((int)(((v254 + 2) >> 2) * v271 + 0x2000) >> 14);
              v259 = v258 & ~(v258 >> 31);
              if (v259 >= 0xFFFF)
                LOWORD(v259) = -1;
              *(_WORD *)(v251 + i) = v259;
            }
            v249 += 4;
            ++v248;
            v252 += v49;
            v251 += v49;
            v250 += v49;
          }
          while (v248 != 4);
          v58 = v395 + 4;
          result = v396 + 4;
          v33 = v394 + 2;
          v415 += 6;
          v407 += 6;
          v414 += 6;
          v413 += 4;
          v408 += 4;
          v412 += 4;
          v409 += 8;
          v410 += 8;
          v411 += 8;
        }
        while (v395 + 4 < v353);
        v28 = v303 + 4;
        v29 = v302 + v294;
        v30 = v301 + v294;
        v31 = v300 + v294;
        v14 = v288;
        v32 = v299 + 2 * v292;
        v46 = v298 + 2 * v291;
        v33 = &v297[4 * v355];
        v48 = &v296[(unint64_t)v294 / 2];
        v306 += v288;
        v304 += v288;
        v305 = (unsigned __int16 *)((char *)v305 + v294);
        result = v295;
        v13 = v289;
        v2 = v290;
        if (v303 + 4 >= v293)
          return result;
      }
    }
    v275 = 0;
    v276 = (v15 | (8 * v9)) + v6 + 6;
    v277 = (v15 | (8 * v4)) + v3 + 6;
    v278 = v15 + 10 * v9 + v6 + 6;
    v279 = v15 + 10 * v4 + v3 + 6;
    do
    {
      v280 = 0;
      v281 = (_WORD *)v277;
      v282 = (unsigned __int16 *)v276;
      do
      {
        *(v281 - 2) = *(_WORD *)(v13 + 2 * (unsigned __int16)*(v281 - 2));
        *v281 = *(_WORD *)(v13 + 2 * (unsigned __int16)*v281);
        *(v281 - 3) = *(_WORD *)(v13 + 2 * *(v282 - 2));
        v283 = *v282;
        v282 += 4;
        *(v281 - 1) = *(_WORD *)(v13 + 2 * v283);
        v280 += 4;
        v281 += 4;
      }
      while (v280 < 8);
      v284 = 0;
      v285 = (_WORD *)v279;
      v286 = (unsigned __int16 *)v278;
      do
      {
        *(v285 - 2) = *(_WORD *)(v13 + 2 * (unsigned __int16)*(v285 - 2));
        *v285 = *(_WORD *)(v13 + 2 * (unsigned __int16)*v285);
        *(v285 - 3) = *(_WORD *)(v13 + 2 * *(v286 - 2));
        v287 = *v286;
        v286 += 4;
        *(v285 - 1) = *(_WORD *)(v13 + 2 * v287);
        v284 += 4;
        v285 += 4;
      }
      while (v284 < 8);
      v275 += 4;
      v276 += v294;
      v277 += v14;
      v278 += v294;
      v279 += v14;
    }
    while (v275 < v293);
  }
  return result;
}

uint64_t sub_1D538EEE0(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int16 *v26;
  _WORD *v27;
  int v28;
  int v29;
  int v30;
  __int16 v31;
  __int16 v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned __int16 *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  int v103;
  int v104;
  unint64_t v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  int v114;
  int v115;
  int v116;
  unsigned int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  signed int v138;
  signed int v139;
  BOOL v140;
  unsigned int v141;
  BOOL v142;
  int v143;
  int v144;
  int v145;
  int v146;
  unsigned int v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned __int16 *v153;
  unsigned __int16 *v154;
  unsigned __int16 *v155;
  unsigned __int16 *v156;
  unsigned __int16 *v157;
  _WORD *v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  unint64_t v170;
  unsigned __int16 *v171;
  unint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;

  v169 = *(_DWORD *)(result + 156);
  v172 = a2[223];
  v2 = a2[224];
  v3 = a2[225];
  v4 = a2[226];
  v5 = (_WORD *)a2[227];
  v149 = a2[228];
  v6 = a2[231];
  v7 = a2[232];
  v8 = a2[233];
  v9 = a2[235];
  v151 = a2[236];
  v152 = a2[234];
  v10 = a2[237];
  v150 = a2[238];
  v11 = *(_QWORD *)(result + 2352);
  v12 = *(_QWORD *)(result + 2360);
  v13 = *(_QWORD *)(result + 2368);
  v165 = *(_DWORD *)(result + 2376);
  v164 = *(_DWORD *)(result + 2380);
  v168 = *(_DWORD *)(result + 2384);
  v163 = *(_DWORD *)(result + 2388);
  v162 = *(_DWORD *)(result + 2392);
  v161 = *(_DWORD *)(result + 2396);
  v167 = *(_DWORD *)(result + 2400);
  v160 = *(_DWORD *)(result + 2404);
  v166 = *(_DWORD *)(result + 2408);
  v159 = *(_DWORD *)(result + 2412);
  v14 = *(_QWORD *)(result + 2336);
  v175 = 0u;
  v176 = 0u;
  v173 = 0u;
  v174 = 0u;
  if (v2)
  {
    if (v172)
    {
      v15 = 0;
      LODWORD(v170) = 0;
      v16 = (unsigned __int16 *)(v6 + 2 * v3 + v152 * v4);
      v17 = (unsigned __int16 *)(v7 + 2 * v3 + v152 * v4);
      v18 = (unsigned __int16 *)(v8 + 2 * v3 + v152 * v4);
      v19 = v4 >> 1;
      v20 = v3 & 0xFFFFFFFFFFFFFFFELL;
      v21 = (unsigned __int16 *)(v9 + v151 * v19 + 3 * v20);
      v22 = (unsigned __int16 *)(v10 + v150 * v19 + 2 * v20);
      v148 = v2;
      while (1)
      {
        LODWORD(v25) = 0;
        v26 = (unsigned __int16 *)((char *)v21 - v151);
        v171 = (unsigned __int16 *)((char *)v22 - v150);
        v157 = v16;
        v158 = v5;
        v27 = v5;
        v155 = v18;
        v156 = v17;
        v153 = v22;
        v154 = v21;
        do
        {
          if ((v25 & 7) == 0)
          {
            if (v169 == 4)
            {
              v34 = *v21;
              if ((v170 & 1) == 0)
              {
                v35 = v34 + *v26 + 1;
                LOWORD(v173) = v35 >> 1;
                v36 = v21[3] + v26[3] + 1;
                WORD1(v173) = (v36 + v35) >> 2;
                WORD2(v173) = v36 >> 1;
                v37 = v21[6] + v26[6] + 1;
                WORD3(v173) = (v37 + v36) >> 2;
                WORD4(v173) = v37 >> 1;
                v38 = v21[9] + v26[9] + 1;
                WORD5(v173) = (v38 + v37) >> 2;
                WORD6(v173) = v38 >> 1;
                HIWORD(v173) = (v38 + v21[12] + v26[12] + 1) >> 2;
                v39 = v21[1] + v26[1] + 1;
                LOWORD(v174) = v39 >> 1;
                v40 = v21[4] + v26[4] + 1;
                WORD1(v174) = (v40 + v39) >> 2;
                WORD2(v174) = v40 >> 1;
                v41 = v21[7] + v26[7] + 1;
                WORD3(v174) = (v41 + v40) >> 2;
                WORD4(v174) = v41 >> 1;
                v42 = v21[10] + v26[10] + 1;
                WORD5(v174) = (v42 + v41) >> 2;
                WORD6(v174) = v42 >> 1;
                HIWORD(v174) = (v42 + v21[13] + v26[13] + 1) >> 2;
                v43 = v21[2] + v26[2] + 1;
                LOWORD(v175) = v43 >> 1;
                v44 = v21[5] + v26[5] + 1;
                WORD1(v175) = (v44 + v43) >> 2;
                WORD2(v175) = v44 >> 1;
                v45 = v21[8] + v26[8] + 1;
                WORD3(v175) = (v45 + v44) >> 2;
                WORD4(v175) = v45 >> 1;
                v46 = v21[11] + v26[11] + 1;
                WORD5(v175) = (v46 + v45) >> 2;
                WORD6(v175) = v46 >> 1;
                HIWORD(v175) = (v46 + v21[14] + v26[14] + 1) >> 2;
                v47 = v171;
                v48 = v22[1] + v171[1] + 1;
                v33 = (unsigned __int16)(v48 >> 1);
                LOWORD(v176) = v48 >> 1;
                v49 = v22[3] + v171[3] + 1;
                WORD1(v176) = (v49 + v48) >> 2;
                WORD2(v176) = v49 >> 1;
                v50 = v22[5] + v171[5] + 1;
                WORD3(v176) = (v50 + v49) >> 2;
                WORD4(v176) = v50 >> 1;
                v51 = v22[7] + v171[7] + 1;
                WORD5(v176) = (v51 + v50) >> 2;
                WORD6(v176) = v51 >> 1;
                v52 = (v51 + v22[9] + v171[9] + 1) >> 2;
LABEL_25:
                v21 += 12;
                HIWORD(v176) = v52;
                v26 += 12;
                v22 += 8;
                v171 = v47 + 8;
                v15 = (unsigned __int16 *)&v173;
                goto LABEL_26;
              }
              LOWORD(v173) = *v21;
              v71 = v21[3];
              WORD1(v173) = (v71 + 1 + v34) >> 1;
              WORD2(v173) = v71;
              v72 = v21[6];
              WORD3(v173) = (v71 + 1 + v72) >> 1;
              WORD4(v173) = v72;
              v73 = v21[9];
              WORD5(v173) = (v72 + v73 + 1) >> 1;
              WORD6(v173) = v73;
              HIWORD(v173) = (v73 + v21[12] + 1) >> 1;
              LOWORD(v174) = v21[1];
              v74 = v21[4];
              WORD1(v174) = (v74 + 1 + (unsigned __int16)v174) >> 1;
              WORD2(v174) = v74;
              v75 = v21[7];
              WORD3(v174) = (v74 + 1 + v75) >> 1;
              WORD4(v174) = v75;
              v76 = v21[10];
              WORD5(v174) = (v75 + v76 + 1) >> 1;
              WORD6(v174) = v76;
              HIWORD(v174) = (v76 + v21[13] + 1) >> 1;
              LOWORD(v175) = v21[2];
              v77 = v21[5];
              WORD1(v175) = (v77 + 1 + (unsigned __int16)v175) >> 1;
              WORD2(v175) = v77;
              v78 = v21[8];
              WORD3(v175) = (v77 + 1 + v78) >> 1;
              WORD4(v175) = v78;
              v79 = v21[11];
              WORD5(v175) = (v78 + v79 + 1) >> 1;
              WORD6(v175) = v79;
              HIWORD(v175) = (v79 + v21[14] + 1) >> 1;
              LOWORD(v176) = v22[1];
              v33 = (unsigned __int16)v176;
              v80 = v22[3];
              v81 = v80 + 1;
              WORD1(v176) = (v80 + 1 + (unsigned __int16)v176) >> 1;
              WORD2(v176) = v80;
              v82 = v22[5];
              WORD3(v176) = (v81 + v82) >> 1;
              WORD4(v176) = v82;
              v83 = v22[7];
              WORD5(v176) = (v82 + v83 + 1) >> 1;
              WORD6(v176) = v83;
              v52 = (v83 + v22[9] + 1) >> 1;
            }
            else
            {
              v53 = *(v21 - 3);
              if ((v170 & 1) == 0)
              {
                v54 = *v21 + *v26 + 1;
                LOWORD(v173) = (v53 + *(v26 - 3) + v54 + 1) >> 2;
                WORD1(v173) = v54 >> 1;
                v55 = v21[3] + v26[3] + 1;
                WORD2(v173) = (v55 + v54) >> 2;
                WORD3(v173) = v55 >> 1;
                v56 = v21[6] + v26[6] + 1;
                WORD4(v173) = (v56 + v55) >> 2;
                WORD5(v173) = v56 >> 1;
                v57 = v21[9] + v26[9] + 1;
                WORD6(v173) = (v57 + v56) >> 2;
                HIWORD(v173) = v57 >> 1;
                v58 = v21[1] + v26[1] + 1;
                LOWORD(v174) = (*(v21 - 2) + *(v26 - 2) + v58 + 1) >> 2;
                WORD1(v174) = v58 >> 1;
                v59 = v21[4] + v26[4] + 1;
                WORD2(v174) = (v59 + v58) >> 2;
                WORD3(v174) = v59 >> 1;
                v60 = v21[7] + v26[7] + 1;
                WORD4(v174) = (v60 + v59) >> 2;
                WORD5(v174) = v60 >> 1;
                v61 = v21[10] + v26[10] + 1;
                WORD6(v174) = (v61 + v60) >> 2;
                HIWORD(v174) = v61 >> 1;
                v62 = v21[2] + v26[2] + 1;
                LOWORD(v175) = (*(v21 - 1) + *(v26 - 1) + v62 + 1) >> 2;
                WORD1(v175) = v62 >> 1;
                v63 = v21[5] + v26[5] + 1;
                WORD2(v175) = (v63 + v62) >> 2;
                WORD3(v175) = v63 >> 1;
                v64 = v21[8] + v26[8] + 1;
                WORD4(v175) = (v64 + v63) >> 2;
                WORD5(v175) = v64 >> 1;
                v65 = v21[11] + v26[11] + 1;
                WORD6(v175) = (v65 + v64) >> 2;
                HIWORD(v175) = v65 >> 1;
                v47 = v171;
                v66 = v22[1] + v171[1] + 1;
                v67 = *(v22 - 1) + *(v171 - 1) + v66 + 1;
                v33 = (unsigned __int16)(v67 >> 2);
                LOWORD(v176) = v67 >> 2;
                WORD1(v176) = v66 >> 1;
                v68 = v22[3] + v171[3] + 1;
                WORD2(v176) = (v68 + v66) >> 2;
                WORD3(v176) = v68 >> 1;
                v69 = v22[5] + v171[5] + 1;
                WORD4(v176) = (v69 + v68) >> 2;
                WORD5(v176) = v69 >> 1;
                v70 = v22[7] + v171[7] + 1;
                WORD6(v176) = (v70 + v69) >> 2;
                v52 = v70 >> 1;
                goto LABEL_25;
              }
              v84 = *v21;
              LOWORD(v173) = (v84 + 1 + v53) >> 1;
              WORD1(v173) = v84;
              v85 = v21[3];
              WORD2(v173) = (v84 + 1 + v85) >> 1;
              WORD3(v173) = v85;
              v86 = v21[6];
              WORD4(v173) = (v85 + v86 + 1) >> 1;
              WORD5(v173) = v86;
              v87 = v21[9];
              WORD6(v173) = (v86 + v87 + 1) >> 1;
              HIWORD(v173) = v87;
              v88 = v21[1];
              LOWORD(v174) = (v88 + 1 + *(v21 - 2)) >> 1;
              WORD1(v174) = v88;
              v89 = v21[4];
              WORD2(v174) = (v88 + 1 + v89) >> 1;
              WORD3(v174) = v89;
              v90 = v21[7];
              WORD4(v174) = (v89 + v90 + 1) >> 1;
              WORD5(v174) = v90;
              v91 = v21[10];
              WORD6(v174) = (v90 + v91 + 1) >> 1;
              HIWORD(v174) = v91;
              v92 = v21[2];
              LOWORD(v175) = (v92 + 1 + *(v21 - 1)) >> 1;
              WORD1(v175) = v92;
              v93 = v21[5];
              WORD2(v175) = (v92 + 1 + v93) >> 1;
              WORD3(v175) = v93;
              v94 = v21[8];
              WORD4(v175) = (v93 + v94 + 1) >> 1;
              WORD5(v175) = v94;
              v95 = v21[11];
              WORD6(v175) = (v94 + v95 + 1) >> 1;
              HIWORD(v175) = v95;
              v96 = v22[1];
              v97 = v96 + 1 + *(v22 - 1);
              v33 = (unsigned __int16)(v97 >> 1);
              LOWORD(v176) = v97 >> 1;
              WORD1(v176) = v96;
              v98 = v22[3];
              WORD2(v176) = (v96 + 1 + v98) >> 1;
              WORD3(v176) = v98;
              v99 = v22[5];
              WORD4(v176) = (v98 + v99 + 1) >> 1;
              WORD5(v176) = v99;
              v52 = v22[7];
              WORD6(v176) = (v99 + v52 + 1) >> 1;
            }
            v47 = v171;
            goto LABEL_25;
          }
          v33 = v15[24];
LABEL_26:
          v100 = *v17;
          v101 = (2417 * v100 + 1229 * *v16 + 450 * *v18 + 2048) >> 12;
          v102 = *v15;
          v103 = v15[8];
          v104 = v15[16];
          v105 = (unint64_t)(2417 * v103 + 1229 * v102 + 450 * v104 + 2048) >> 12;
          if (v33 >> 4 > 0x270)
            goto LABEL_36;
          v106 = *(unsigned __int16 *)(v13 + 2 * *v15);
          v107 = *(unsigned __int16 *)(v13 + 2 * v15[8]);
          v108 = *(unsigned __int16 *)(v13 + 2 * v15[16]);
          v109 = (v107 - v106) & ((v107 - v106) >> 31);
          v110 = v109 + v106;
          v111 = v109 - v107;
          v112 = ((v108 - v110) & ((v108 - v110) >> 31)) + v110;
          if (v108 > v110)
            v110 = *(unsigned __int16 *)(v13 + 2 * v15[16]);
          v113 = v110 - ((v111 + v110) & ((v111 + v110) >> 31));
          v114 = 2 * (v113 - v112) - v112;
          if (v114 < 1)
          {
LABEL_36:
            v117 = ((0x80000u >> *(_BYTE *)(v12 + v105))
                  + (((1 << (*(_BYTE *)(v12 + v105) - 1)) + *(_DWORD *)(v11 + 4 * v105)) >> *(_BYTE *)(v12 + v105))
                  * v101) >> (20 - *(_BYTE *)(v12 + v105));
            goto LABEL_37;
          }
          if (v113 == v108)
          {
            if (v102 < v168)
              goto LABEL_36;
            v115 = ((v102 - v168) * v165) >> v164;
            if (v163 <= v102)
              v115 = 0x10000;
            v100 = *v16;
            v116 = *v15;
          }
          else
          {
            if (v103 < v167)
              goto LABEL_36;
            v115 = ((v103 - v167) * v162) >> v161;
            if (v160 <= v103)
              v115 = 0x10000;
            v116 = v15[8];
          }
          if (v100 < 0x100)
            v115 = (int)(v115 * v100) >> 8;
          if (v114 < v113 >> 1)
            v115 = ((v114 << 11) / (int)v113 * v115 + 512) >> 10;
          v135 = (v115 * v166 + 0x8000) >> 16;
          v136 = v135 * (v100 - v101) + 2048;
          v137 = v105 + ((v135 * (v116 - (int)v105) + 2048) >> 12);
          v117 = ((0x80000u >> *(_BYTE *)(v12 + v137))
                + (v101 + (v136 >> 12))
                * (((1 << (*(_BYTE *)(v12 + v137) - 1)) + *(_DWORD *)(v11 + 4 * v137)) >> *(_BYTE *)(v12 + v137))) >> (20 - *(_BYTE *)(v12 + v137));
          v138 = ((0x80000u >> *(_BYTE *)(v12 + v105))
                + (((1 << (*(_BYTE *)(v12 + v105) - 1)) + *(_DWORD *)(v11 + 4 * v105)) >> *(_BYTE *)(v12 + v105))
                * v101) >> (20 - *(_BYTE *)(v12 + v105));
          if (v138 != v117)
          {
            v139 = v138;
            if (v138 >= 66000)
            {
              do
              {
                v117 = (int)(v117 + 1) >> 1;
                v140 = v139 > 0x2039E;
                v139 = (v139 + 1) >> 1;
              }
              while (v140);
            }
            v141 = ((0x80000u >> *(_BYTE *)(v12 + v139))
                  + ((*(_DWORD *)(v11 + 4 * v139) + (1 << *(_BYTE *)(v12 + v139) >> 1)) >> *(_BYTE *)(v12 + v139))
                  * v117) >> (20 - *(_BYTE *)(v12 + v139));
            v143 = v141 - 4096;
            v142 = (int)(v141 - 4096) < 0;
            v144 = 4096 - v141;
            if (!v142)
              v144 = v143;
            v117 = (int)((((((v159 - v144) & ((v159 - v144) >> 31)) + v144) ^ (v143 >> 31))
                        + (v143 >> 31)
                        + 4096)
                       * v138
                       + 2048) >> 12;
          }
LABEL_37:
          v118 = (int)(v117 * v103 + 2048) >> 14;
          v119 = ((int)(v117 * v102 + 2048) >> 14) * *(_DWORD *)(result + 2288);
          v28 = v119 >> 10;
          v120 = v118 * *(_DWORD *)(result + 2304);
          v29 = v120 >> 10;
          v121 = ((int)(v117 * v104 + 2048) >> 14) * *(_DWORD *)(result + 2320);
          v30 = v121 >> 10;
          if (((v119 >> 10) | (v120 >> 10) | (v121 >> 10)) < 0x10000)
            goto LABEL_14;
          if (v29 >= v28)
            v122 = v119 >> 10;
          else
            v122 = v120 >> 10;
          if (v29 <= v28)
            v123 = v119 >> 10;
          else
            v123 = v120 >> 10;
          if (v30 >= v122)
            v124 = v122;
          else
            v124 = v121 >> 10;
          if (v30 <= v123)
            v125 = v123;
          else
            v125 = v121 >> 10;
          if ((v125 & 0x80000000) == 0 && v124 < 0x10000)
          {
            if (v119 >= 0)
              v126 = 0xFFFF;
            else
              v126 = 0;
            if (!(v119 >> 26))
              v126 = v119 >> 10;
            if (v120 >= 0)
              v127 = 0xFFFF;
            else
              v127 = 0;
            if (!(v120 >> 26))
              v127 = v120 >> 10;
            if (v121 >= 0)
              v128 = 0xFFFF;
            else
              v128 = 0;
            if (v121 >> 26)
              v129 = v128;
            else
              v129 = v121 >> 10;
            v130 = v127 + 341 * (v126 + v127 + v129);
            v131 = (v130 + 512) >> 10;
            if (v130 >= 0x1FFFA00)
              v132 = (v130 + 512) >> 10;
            else
              v132 = 0xFFFF - v131;
            v133 = (((v132 + 2) >> 2) * v131 + 0x2000) >> 14;
            if (v125 < 0x10000)
            {
              v134 = 4096;
              if (v124 < 0)
              {
LABEL_78:
                if (v134 >= (int)(float)((float)(int)(-4096 * v133) / (float)(int)(v124 - v133)))
                  v134 = (int)(float)((float)(int)(-4096 * v133) / (float)(int)(v124 - v133));
              }
            }
            else
            {
              if ((int)(float)((float)(int)(268431360 - (v133 << 12)) / (float)(int)(v125 - v133)) >= 4096)
                v134 = 4096;
              else
                v134 = (int)(float)((float)(int)(268431360 - (v133 << 12)) / (float)(int)(v125 - v133));
              if (v124 < 0)
                goto LABEL_78;
            }
            v28 = v133 + ((int)(v134 * (v28 - v133) + 2048) >> 12);
            v29 = v133 + ((int)(v134 * (v29 - v133) + 2048) >> 12);
            v30 = v133 + ((int)(v134 * (v30 - v133) + 2048) >> 12);
            goto LABEL_14;
          }
          if (v125 >= 0)
            v28 = 0xFFFF;
          else
            v28 = 0;
          v29 = v28;
          v30 = v28;
LABEL_14:
          v31 = *(_WORD *)(v14 + 2 * v29);
          v32 = *(_WORD *)(v14 + 2 * v30);
          *v27 = *(_WORD *)(v14 + 2 * v28);
          ++v15;
          v25 = (v25 + 1);
          ++v16;
          v27[1] = v31;
          v27[2] = v32;
          ++v17;
          ++v18;
          v27 += 3;
        }
        while (v172 > v25);
        v23 = v151;
        if ((v170 & 1) == 0)
          v23 = 0;
        v21 = (unsigned __int16 *)((char *)v154 + v23);
        v24 = v150;
        if ((v170 & 1) == 0)
          v24 = 0;
        v22 = (unsigned __int16 *)((char *)v153 + v24);
        v16 = (unsigned __int16 *)((char *)v157 + v152);
        v17 = (unsigned __int16 *)((char *)v156 + v152);
        v18 = (unsigned __int16 *)((char *)v155 + v152);
        v5 = (_WORD *)((char *)v158 + v149);
        v170 = (v170 + 1);
        if (v148 <= v170)
          return result;
      }
    }
    if (v2 < 2)
    {
      v145 = 0;
LABEL_102:
      v147 = v145 + 1;
      do
        v140 = v2 > v147++;
      while (v140);
      return result;
    }
    v145 = 0;
    if (!(_DWORD)v2)
      goto LABEL_102;
    if ((v2 - 1) >> 32)
      goto LABEL_102;
    v145 = v2 & 0xFFFFFFFE;
    v146 = v2 & 0xFFFFFFFE;
    do
      v146 -= 2;
    while (v146);
    if (v145 != (_DWORD)v2)
      goto LABEL_102;
  }
  return result;
}

int32x2_t *sub_1D538FE14(int32x2_t *result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  int32x2_t v14;
  unsigned __int16 *v15;
  int32x2_t *v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int16 *v27;
  _WORD *v28;
  signed int v29;
  int32x2_t v30;
  __int16 v31;
  __int16 v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned __int16 *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  __int32 v102;
  __int32 v103;
  int v104;
  unint64_t v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  int v114;
  int v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  signed int v121;
  signed int v122;
  int v123;
  int v124;
  int32x2_t v125;
  int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  signed int v131;
  int32x2_t v132;
  int v133;
  int v134;
  int v135;
  signed int v136;
  signed int v137;
  BOOL v138;
  unsigned int v139;
  BOOL v140;
  int v141;
  int v142;
  int v143;
  int v144;
  unsigned int v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int16 *v151;
  unsigned __int16 *v152;
  unsigned __int16 *v153;
  unsigned __int16 *v154;
  unsigned __int16 *v155;
  _WORD *v156;
  __int32 v157;
  __int32 v158;
  __int32 v159;
  __int32 v160;
  __int32 v161;
  __int32 v162;
  __int32 v163;
  __int32 v164;
  __int32 v165;
  __int32 v166;
  __int32 v167;
  unint64_t v168;
  unsigned __int16 *v169;
  unint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;

  v167 = result[19].i32[1];
  v170 = a2[223];
  v2 = a2[224];
  v3 = a2[225];
  v4 = a2[226];
  v5 = (_WORD *)a2[227];
  v147 = a2[228];
  v6 = a2[231];
  v7 = a2[232];
  v8 = a2[233];
  v150 = a2[234];
  v9 = a2[235];
  v149 = a2[236];
  v10 = a2[237];
  v148 = a2[238];
  v11 = result[294];
  v12 = result[295];
  v13 = result[296];
  v163 = result[297].i32[0];
  v162 = result[297].i32[1];
  v166 = result[298].i32[0];
  v161 = result[298].i32[1];
  v160 = result[299].i32[0];
  v159 = result[299].i32[1];
  v165 = result[300].i32[0];
  v158 = result[300].i32[1];
  v164 = result[301].i32[0];
  v157 = result[301].i32[1];
  v14 = result[292];
  v173 = 0u;
  v174 = 0u;
  v171 = 0u;
  v172 = 0u;
  if (v2)
  {
    if (v170)
    {
      v15 = 0;
      LODWORD(v168) = 0;
      v16 = (int32x2_t *)((char *)result + 2300);
      v17 = (unsigned __int16 *)(v6 + 2 * v3 + v150 * v4);
      v18 = (unsigned __int16 *)(v7 + 2 * v3 + v150 * v4);
      v19 = (unsigned __int16 *)(v8 + 2 * v3 + v150 * v4);
      v20 = v4 >> 1;
      v21 = v3 & 0xFFFFFFFFFFFFFFFELL;
      v22 = (unsigned __int16 *)(v9 + v149 * v20 + 3 * v21);
      v23 = (unsigned __int16 *)(v10 + v148 * v20 + 2 * v21);
      v146 = v2;
      while (1)
      {
        LODWORD(v26) = 0;
        v27 = (unsigned __int16 *)((char *)v22 - v149);
        v169 = (unsigned __int16 *)((char *)v23 - v148);
        v155 = v17;
        v156 = v5;
        v28 = v5;
        v153 = v19;
        v154 = v18;
        v151 = v23;
        v152 = v22;
        do
        {
          if ((v26 & 7) == 0)
          {
            if (v167 == 4)
            {
              v34 = *v22;
              if ((v168 & 1) == 0)
              {
                v35 = v34 + *v27 + 1;
                LOWORD(v171) = v35 >> 1;
                v36 = v22[3] + v27[3] + 1;
                WORD1(v171) = (v36 + v35) >> 2;
                WORD2(v171) = v36 >> 1;
                v37 = v22[6] + v27[6] + 1;
                WORD3(v171) = (v37 + v36) >> 2;
                WORD4(v171) = v37 >> 1;
                v38 = v22[9] + v27[9] + 1;
                WORD5(v171) = (v38 + v37) >> 2;
                WORD6(v171) = v38 >> 1;
                HIWORD(v171) = (v38 + v22[12] + v27[12] + 1) >> 2;
                v39 = v22[1] + v27[1] + 1;
                LOWORD(v172) = v39 >> 1;
                v40 = v22[4] + v27[4] + 1;
                WORD1(v172) = (v40 + v39) >> 2;
                WORD2(v172) = v40 >> 1;
                v41 = v22[7] + v27[7] + 1;
                WORD3(v172) = (v41 + v40) >> 2;
                WORD4(v172) = v41 >> 1;
                v42 = v22[10] + v27[10] + 1;
                WORD5(v172) = (v42 + v41) >> 2;
                WORD6(v172) = v42 >> 1;
                HIWORD(v172) = (v42 + v22[13] + v27[13] + 1) >> 2;
                v43 = v22[2] + v27[2] + 1;
                LOWORD(v173) = v43 >> 1;
                v44 = v22[5] + v27[5] + 1;
                WORD1(v173) = (v44 + v43) >> 2;
                WORD2(v173) = v44 >> 1;
                v45 = v22[8] + v27[8] + 1;
                WORD3(v173) = (v45 + v44) >> 2;
                WORD4(v173) = v45 >> 1;
                v46 = v22[11] + v27[11] + 1;
                WORD5(v173) = (v46 + v45) >> 2;
                WORD6(v173) = v46 >> 1;
                HIWORD(v173) = (v46 + v22[14] + v27[14] + 1) >> 2;
                v47 = v169;
                v48 = v23[1] + v169[1] + 1;
                v33 = (unsigned __int16)(v48 >> 1);
                LOWORD(v174) = v48 >> 1;
                v49 = v23[3] + v169[3] + 1;
                WORD1(v174) = (v49 + v48) >> 2;
                WORD2(v174) = v49 >> 1;
                v50 = v23[5] + v169[5] + 1;
                WORD3(v174) = (v50 + v49) >> 2;
                WORD4(v174) = v50 >> 1;
                v51 = v23[7] + v169[7] + 1;
                WORD5(v174) = (v51 + v50) >> 2;
                WORD6(v174) = v51 >> 1;
                v52 = (v51 + v23[9] + v169[9] + 1) >> 2;
LABEL_25:
                v22 += 12;
                HIWORD(v174) = v52;
                v27 += 12;
                v23 += 8;
                v169 = v47 + 8;
                v15 = (unsigned __int16 *)&v171;
                goto LABEL_26;
              }
              LOWORD(v171) = *v22;
              v71 = v22[3];
              WORD1(v171) = (v71 + 1 + v34) >> 1;
              WORD2(v171) = v71;
              v72 = v22[6];
              WORD3(v171) = (v71 + 1 + v72) >> 1;
              WORD4(v171) = v72;
              v73 = v22[9];
              WORD5(v171) = (v72 + v73 + 1) >> 1;
              WORD6(v171) = v73;
              HIWORD(v171) = (v73 + v22[12] + 1) >> 1;
              LOWORD(v172) = v22[1];
              v74 = v22[4];
              WORD1(v172) = (v74 + 1 + (unsigned __int16)v172) >> 1;
              WORD2(v172) = v74;
              v75 = v22[7];
              WORD3(v172) = (v74 + 1 + v75) >> 1;
              WORD4(v172) = v75;
              v76 = v22[10];
              WORD5(v172) = (v75 + v76 + 1) >> 1;
              WORD6(v172) = v76;
              HIWORD(v172) = (v76 + v22[13] + 1) >> 1;
              LOWORD(v173) = v22[2];
              v77 = v22[5];
              WORD1(v173) = (v77 + 1 + (unsigned __int16)v173) >> 1;
              WORD2(v173) = v77;
              v78 = v22[8];
              WORD3(v173) = (v77 + 1 + v78) >> 1;
              WORD4(v173) = v78;
              v79 = v22[11];
              WORD5(v173) = (v78 + v79 + 1) >> 1;
              WORD6(v173) = v79;
              HIWORD(v173) = (v79 + v22[14] + 1) >> 1;
              LOWORD(v174) = v23[1];
              v33 = (unsigned __int16)v174;
              v80 = v23[3];
              v81 = v80 + 1;
              WORD1(v174) = (v80 + 1 + (unsigned __int16)v174) >> 1;
              WORD2(v174) = v80;
              v82 = v23[5];
              WORD3(v174) = (v81 + v82) >> 1;
              WORD4(v174) = v82;
              v83 = v23[7];
              WORD5(v174) = (v82 + v83 + 1) >> 1;
              WORD6(v174) = v83;
              v52 = (v83 + v23[9] + 1) >> 1;
            }
            else
            {
              v53 = *(v22 - 3);
              if ((v168 & 1) == 0)
              {
                v54 = *v22 + *v27 + 1;
                LOWORD(v171) = (v53 + *(v27 - 3) + v54 + 1) >> 2;
                WORD1(v171) = v54 >> 1;
                v55 = v22[3] + v27[3] + 1;
                WORD2(v171) = (v55 + v54) >> 2;
                WORD3(v171) = v55 >> 1;
                v56 = v22[6] + v27[6] + 1;
                WORD4(v171) = (v56 + v55) >> 2;
                WORD5(v171) = v56 >> 1;
                v57 = v22[9] + v27[9] + 1;
                WORD6(v171) = (v57 + v56) >> 2;
                HIWORD(v171) = v57 >> 1;
                v58 = v22[1] + v27[1] + 1;
                LOWORD(v172) = (*(v22 - 2) + *(v27 - 2) + v58 + 1) >> 2;
                WORD1(v172) = v58 >> 1;
                v59 = v22[4] + v27[4] + 1;
                WORD2(v172) = (v59 + v58) >> 2;
                WORD3(v172) = v59 >> 1;
                v60 = v22[7] + v27[7] + 1;
                WORD4(v172) = (v60 + v59) >> 2;
                WORD5(v172) = v60 >> 1;
                v61 = v22[10] + v27[10] + 1;
                WORD6(v172) = (v61 + v60) >> 2;
                HIWORD(v172) = v61 >> 1;
                v62 = v22[2] + v27[2] + 1;
                LOWORD(v173) = (*(v22 - 1) + *(v27 - 1) + v62 + 1) >> 2;
                WORD1(v173) = v62 >> 1;
                v63 = v22[5] + v27[5] + 1;
                WORD2(v173) = (v63 + v62) >> 2;
                WORD3(v173) = v63 >> 1;
                v64 = v22[8] + v27[8] + 1;
                WORD4(v173) = (v64 + v63) >> 2;
                WORD5(v173) = v64 >> 1;
                v65 = v22[11] + v27[11] + 1;
                WORD6(v173) = (v65 + v64) >> 2;
                HIWORD(v173) = v65 >> 1;
                v47 = v169;
                v66 = v23[1] + v169[1] + 1;
                v67 = *(v23 - 1) + *(v169 - 1) + v66 + 1;
                v33 = (unsigned __int16)(v67 >> 2);
                LOWORD(v174) = v67 >> 2;
                WORD1(v174) = v66 >> 1;
                v68 = v23[3] + v169[3] + 1;
                WORD2(v174) = (v68 + v66) >> 2;
                WORD3(v174) = v68 >> 1;
                v69 = v23[5] + v169[5] + 1;
                WORD4(v174) = (v69 + v68) >> 2;
                WORD5(v174) = v69 >> 1;
                v70 = v23[7] + v169[7] + 1;
                WORD6(v174) = (v70 + v69) >> 2;
                v52 = v70 >> 1;
                goto LABEL_25;
              }
              v84 = *v22;
              LOWORD(v171) = (v84 + 1 + v53) >> 1;
              WORD1(v171) = v84;
              v85 = v22[3];
              WORD2(v171) = (v84 + 1 + v85) >> 1;
              WORD3(v171) = v85;
              v86 = v22[6];
              WORD4(v171) = (v85 + v86 + 1) >> 1;
              WORD5(v171) = v86;
              v87 = v22[9];
              WORD6(v171) = (v86 + v87 + 1) >> 1;
              HIWORD(v171) = v87;
              v88 = v22[1];
              LOWORD(v172) = (v88 + 1 + *(v22 - 2)) >> 1;
              WORD1(v172) = v88;
              v89 = v22[4];
              WORD2(v172) = (v88 + 1 + v89) >> 1;
              WORD3(v172) = v89;
              v90 = v22[7];
              WORD4(v172) = (v89 + v90 + 1) >> 1;
              WORD5(v172) = v90;
              v91 = v22[10];
              WORD6(v172) = (v90 + v91 + 1) >> 1;
              HIWORD(v172) = v91;
              v92 = v22[2];
              LOWORD(v173) = (v92 + 1 + *(v22 - 1)) >> 1;
              WORD1(v173) = v92;
              v93 = v22[5];
              WORD2(v173) = (v92 + 1 + v93) >> 1;
              WORD3(v173) = v93;
              v94 = v22[8];
              WORD4(v173) = (v93 + v94 + 1) >> 1;
              WORD5(v173) = v94;
              v95 = v22[11];
              WORD6(v173) = (v94 + v95 + 1) >> 1;
              HIWORD(v173) = v95;
              v96 = v23[1];
              v97 = v96 + 1 + *(v23 - 1);
              v33 = (unsigned __int16)(v97 >> 1);
              LOWORD(v174) = v97 >> 1;
              WORD1(v174) = v96;
              v98 = v23[3];
              WORD2(v174) = (v96 + 1 + v98) >> 1;
              WORD3(v174) = v98;
              v99 = v23[5];
              WORD4(v174) = (v98 + v99 + 1) >> 1;
              WORD5(v174) = v99;
              v52 = v23[7];
              WORD6(v174) = (v99 + v52 + 1) >> 1;
            }
            v47 = v169;
            goto LABEL_25;
          }
          v33 = v15[24];
LABEL_26:
          v100 = *v18;
          v101 = (2417 * v100 + 1229 * *v17 + 450 * *v19 + 2048) >> 12;
          v102 = *v15;
          v103 = v15[8];
          v104 = v15[16];
          v105 = (unint64_t)(2417 * v103 + 1229 * v102 + 450 * v104 + 2048) >> 12;
          if (v33 >> 4 > 0x270)
            goto LABEL_37;
          v106 = *(unsigned __int16 *)(*(_QWORD *)&v13 + 2 * *v15);
          v107 = *(unsigned __int16 *)(*(_QWORD *)&v13 + 2 * v15[8]);
          v108 = *(unsigned __int16 *)(*(_QWORD *)&v13 + 2 * v15[16]);
          v109 = (v107 - v106) & ((v107 - v106) >> 31);
          v110 = v109 + v106;
          v111 = v109 - v107;
          v112 = ((v108 - v110) & ((v108 - v110) >> 31)) + v110;
          if (v108 > v110)
            v110 = *(unsigned __int16 *)(*(_QWORD *)&v13 + 2 * v15[16]);
          v113 = v110 - ((v111 + v110) & ((v111 + v110) >> 31));
          v114 = 2 * (v113 - v112) - v112;
          if (v114 < 1)
          {
LABEL_37:
            v117 = ((0x80000u >> *(_BYTE *)(*(_QWORD *)&v12 + v105))
                  + (((1 << (*(_BYTE *)(*(_QWORD *)&v12 + v105) - 1))
                                  + *(_DWORD *)(*(_QWORD *)&v11 + 4 * v105)) >> *(_BYTE *)(*(_QWORD *)&v12 + v105))
                  * v101) >> (20 - *(_BYTE *)(*(_QWORD *)&v12 + v105));
            goto LABEL_38;
          }
          if (v113 == v108)
          {
            if (v102 < v166)
              goto LABEL_37;
            if (v161 > v102)
              v115 = ((v102 - v166) * v163) >> v162;
            else
              v115 = 0x10000;
            v100 = *v17;
            v116 = *v15;
          }
          else
          {
            if (v103 < v165)
              goto LABEL_37;
            if (v158 > v103)
              v115 = ((v103 - v165) * v160) >> v159;
            else
              v115 = 0x10000;
            v116 = v15[8];
          }
          if (v100 < 0x100)
            v115 = (int)(v115 * v100) >> 8;
          if (v114 < v113 >> 1)
            v115 = ((v114 << 11) / (int)v113 * v115 + 512) >> 10;
          v133 = (v115 * v164 + 0x8000) >> 16;
          v134 = v133 * (v100 - v101) + 2048;
          v135 = v105 + ((v133 * (v116 - (int)v105) + 2048) >> 12);
          v117 = ((0x80000u >> *(_BYTE *)(*(_QWORD *)&v12 + v135))
                + (v101 + (v134 >> 12))
                * (((1 << (*(_BYTE *)(*(_QWORD *)&v12 + v135) - 1))
                                + *(_DWORD *)(*(_QWORD *)&v11 + 4 * v135)) >> *(_BYTE *)(*(_QWORD *)&v12 + v135))) >> (20 - *(_BYTE *)(*(_QWORD *)&v12 + v135));
          v136 = ((0x80000u >> *(_BYTE *)(*(_QWORD *)&v12 + v105))
                + (((1 << (*(_BYTE *)(*(_QWORD *)&v12 + v105) - 1))
                                + *(_DWORD *)(*(_QWORD *)&v11 + 4 * v105)) >> *(_BYTE *)(*(_QWORD *)&v12 + v105))
                * v101) >> (20 - *(_BYTE *)(*(_QWORD *)&v12 + v105));
          if (v136 != v117)
          {
            v137 = ((0x80000u >> *(_BYTE *)(*(_QWORD *)&v12 + v105))
                  + (((1 << (*(_BYTE *)(*(_QWORD *)&v12 + v105) - 1))
                                  + *(_DWORD *)(*(_QWORD *)&v11 + 4 * v105)) >> *(_BYTE *)(*(_QWORD *)&v12 + v105))
                  * v101) >> (20 - *(_BYTE *)(*(_QWORD *)&v12 + v105));
            if (v136 >= 66000)
            {
              do
              {
                v117 = (int)(v117 + 1) >> 1;
                v138 = v137 > 0x2039E;
                v137 = (v137 + 1) >> 1;
              }
              while (v138);
            }
            v139 = ((0x80000u >> *(_BYTE *)(*(_QWORD *)&v12 + v137))
                  + ((*(_DWORD *)(*(_QWORD *)&v11 + 4 * v137)
                                  + (1 << *(_BYTE *)(*(_QWORD *)&v12 + v137) >> 1)) >> *(_BYTE *)(*(_QWORD *)&v12 + v137))
                  * v117) >> (20 - *(_BYTE *)(*(_QWORD *)&v12 + v137));
            v141 = v139 - 4096;
            v140 = (int)(v139 - 4096) < 0;
            v142 = 4096 - v139;
            if (!v140)
              v142 = v141;
            v117 = (int)((((((v157 - v142) & ((v157 - v142) >> 31)) + v142) ^ (v141 >> 31))
                        + (v141 >> 31)
                        + 4096)
                       * v136
                       + 2048) >> 12;
          }
          v16 = (int32x2_t *)((char *)result + 2300);
LABEL_38:
          v118 = (int)(v117 * v102 + 2048) >> 14;
          v119 = (int)(v117 * v103 + 2048) >> 14;
          v120 = (int)(v117 * v104 + 2048) >> 14;
          v30 = vadd_s32(vsra_n_s32(vsra_n_s32(vshr_n_s32(vmul_s32(*v16, vdup_n_s32(v119)), 0xAuLL), vmul_s32(vdup_n_s32(v118), result[286]), 0xAuLL), vmul_s32(result[289], vdup_n_s32(v120)), 0xAuLL), v16[3]);
          v29 = ((int)(result[288].i32[1] * v119) >> 10)
              + ((int)(v118 * result[287].i32[0]) >> 10)
              + ((int)(result[290].i32[0] * v120) >> 10)
              + result[291].i32[1];
          v121 = v30.i32[0];
          if ((v30.i32[1] | v30.i32[0] | v29) < 0x10000)
            goto LABEL_14;
          if (v30.i32[1] >= v30.i32[0])
            v122 = v30.i32[0];
          else
            v122 = v30.i32[1];
          if (v30.i32[1] > v30.i32[0])
            v121 = v30.i32[1];
          if (v29 >= v122)
            v123 = v122;
          else
            v123 = v29;
          if (v29 <= v121)
            v124 = v121;
          else
            v124 = v29;
          if ((v124 & 0x80000000) == 0 && v123 < 0x10000)
          {
            v125 = vmin_s32(vmax_s32(v30, 0), (int32x2_t)0xFFFF0000FFFFLL);
            v126 = v29 & ~(v29 >> 31);
            if (v126 >= 0xFFFF)
              v126 = 0xFFFF;
            v127 = v125.i32[1] + 341 * (v125.i32[1] + v125.i32[0] + v126);
            v128 = (v127 + 512) >> 10;
            if (v127 >= 0x1FFFA00)
              v129 = (v127 + 512) >> 10;
            else
              v129 = 0xFFFF - v128;
            v130 = (((v129 + 2) >> 2) * v128 + 0x2000) >> 14;
            if (v124 < 0x10000)
            {
              v131 = 4096;
              if (v123 < 0)
              {
LABEL_64:
                if (v131 >= (int)(float)((float)(int)(-4096 * v130) / (float)(int)(v123 - v130)))
                  v131 = (int)(float)((float)(int)(-4096 * v130) / (float)(int)(v123 - v130));
              }
            }
            else
            {
              if ((int)(float)((float)(int)(268431360 - (v130 << 12)) / (float)(int)(v124 - v130)) >= 4096)
                v131 = 4096;
              else
                v131 = (int)(float)((float)(int)(268431360 - (v130 << 12)) / (float)(int)(v124 - v130));
              if (v123 < 0)
                goto LABEL_64;
            }
            v132 = vdup_n_s32(v130);
            v29 = v130 + ((int)(v131 * (v29 - v130) + 2048) >> 12);
            v30 = vsra_n_s32(v132, vmla_s32((int32x2_t)0x80000000800, vdup_n_s32(v131), vsub_s32(v30, v132)), 0xCuLL);
            goto LABEL_14;
          }
          if (v124 >= 0)
            v29 = 0xFFFF;
          else
            v29 = 0;
          v30 = vdup_n_s32(v29);
LABEL_14:
          v31 = *(_WORD *)(*(_QWORD *)&v14 + 2 * v30.i32[1]);
          v32 = *(_WORD *)(*(_QWORD *)&v14 + 2 * v29);
          *v28 = *(_WORD *)(*(_QWORD *)&v14 + 2 * v30.i32[0]);
          ++v15;
          v26 = (v26 + 1);
          ++v17;
          v28[1] = v31;
          v28[2] = v32;
          ++v18;
          ++v19;
          v28 += 3;
        }
        while (v170 > v26);
        v24 = v149;
        if ((v168 & 1) == 0)
          v24 = 0;
        v22 = (unsigned __int16 *)((char *)v152 + v24);
        v25 = v148;
        if ((v168 & 1) == 0)
          v25 = 0;
        v23 = (unsigned __int16 *)((char *)v151 + v25);
        v17 = (unsigned __int16 *)((char *)v155 + v150);
        v18 = (unsigned __int16 *)((char *)v154 + v150);
        v19 = (unsigned __int16 *)((char *)v153 + v150);
        v5 = (_WORD *)((char *)v156 + v147);
        v168 = (v168 + 1);
        if (v146 <= v168)
          return result;
      }
    }
    if (v2 < 2)
    {
      v143 = 0;
LABEL_89:
      v145 = v143 + 1;
      do
        v138 = v2 > v145++;
      while (v138);
      return result;
    }
    v143 = 0;
    if (!(_DWORD)v2)
      goto LABEL_89;
    if ((v2 - 1) >> 32)
      goto LABEL_89;
    v143 = v2 & 0xFFFFFFFE;
    v144 = v2 & 0xFFFFFFFE;
    do
      v144 -= 2;
    while (v144);
    if (v143 != (_DWORD)v2)
      goto LABEL_89;
  }
  return result;
}

uint64_t sub_1D5390D7C(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  _WORD *v21;
  int v22;
  int v23;
  int v24;
  __int16 v25;
  __int16 v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  unsigned int v46;
  int v48;

  v2 = a2[224];
  if (v2)
  {
    v3 = a2[223];
    if (v3)
    {
      LODWORD(v4) = 0;
      v5 = a2[225];
      v6 = (_WORD *)a2[227];
      v7 = a2[228];
      v8 = a2[231];
      v9 = a2[232];
      v10 = a2[233];
      v11 = a2[234];
      v12 = v11 * a2[226];
      v13 = 2 * v5;
      v14 = v8 + 2 * v5 + v12;
      v15 = v9 + v13 + v12;
      v16 = v10 + v13 + v12;
      v17 = *(_QWORD *)(result + 2336);
      v18 = *(_DWORD *)(result + 2288);
      v19 = *(_DWORD *)(result + 2304);
      result = *(unsigned int *)(result + 2320);
      while (1)
      {
        v20 = 0;
        v21 = v6;
        do
        {
          v27 = v18 * (*(unsigned __int16 *)(v14 + 2 * v20) >> 2);
          v22 = v27 >> 10;
          v28 = v19 * (*(unsigned __int16 *)(v15 + 2 * v20) >> 2);
          v23 = v28 >> 10;
          v29 = result * (*(unsigned __int16 *)(v16 + 2 * v20) >> 2);
          v24 = v29 >> 10;
          if (((v28 >> 10) | (v27 >> 10) | (v29 >> 10)) < 0x10000)
            goto LABEL_10;
          if (v23 >= v22)
            v30 = v27 >> 10;
          else
            v30 = v28 >> 10;
          if (v23 <= v22)
            v31 = v27 >> 10;
          else
            v31 = v28 >> 10;
          if (v24 < v30)
            v30 = v29 >> 10;
          if (v24 > v31)
            v31 = v29 >> 10;
          if ((v31 & 0x80000000) == 0 && v30 < 0x10000)
          {
            if (v27 >= 0)
              v32 = 0xFFFF;
            else
              v32 = 0;
            if (v27 >> 26)
              v33 = v32;
            else
              v33 = v27 >> 10;
            if (v28 >= 0)
              v34 = 0xFFFF;
            else
              v34 = 0;
            if (v28 >> 26)
              v35 = v34;
            else
              v35 = v28 >> 10;
            if (v29 >= 0)
              v36 = 0xFFFF;
            else
              v36 = 0;
            if (v29 >> 26)
              v37 = v36;
            else
              v37 = v29 >> 10;
            v38 = v35 + 341 * (v35 + v33 + v37);
            v39 = (v38 + 512) >> 10;
            if (v38 >= 0x1FFFA00)
              v40 = (v38 + 512) >> 10;
            else
              v40 = 0xFFFF - v39;
            v41 = (((v40 + 2) >> 2) * v39 + 0x2000) >> 14;
            if (v31 < 0x10000)
            {
              v42 = 4096;
              if (v30 < 0)
                goto LABEL_51;
            }
            else
            {
              v42 = (int)(float)((float)(int)(268431360 - (v41 << 12)) / (float)(int)(v31 - v41));
              if (v42 >= 4096)
                v42 = 4096;
              if (v30 < 0)
              {
LABEL_51:
                v43 = (int)(float)((float)(int)(-4096 * v41) / (float)(int)(v30 - v41));
                if (v42 >= v43)
                  v42 = v43;
              }
            }
            v22 = v41 + ((int)(v42 * (v22 - v41) + 2048) >> 12);
            v23 = v41 + ((int)(v42 * (v23 - v41) + 2048) >> 12);
            v24 = v41 + ((int)(v42 * (v24 - v41) + 2048) >> 12);
            goto LABEL_10;
          }
          if (v31 >= 0)
            v22 = 0xFFFF;
          else
            v22 = 0;
          v23 = v22;
          v24 = v22;
LABEL_10:
          v25 = *(_WORD *)(v17 + 2 * v23);
          v26 = *(_WORD *)(v17 + 2 * v24);
          *v21 = *(_WORD *)(v17 + 2 * v22);
          v21[1] = v25;
          v21[2] = v26;
          ++v20;
          v21 += 3;
        }
        while (v3 > v20);
        v4 = (v4 + 1);
        v14 += v11;
        v15 += v11;
        v16 += v11;
        v6 = (_WORD *)((char *)v6 + v7);
        if (v2 <= v4)
          return result;
      }
    }
    if (v2 < 2 || ((_DWORD)v2 ? (v44 = (v2 - 1) >> 32 == 0) : (v44 = 0), !v44))
    {
      v45 = 0;
LABEL_60:
      v46 = v45 + 1;
      while (v2 > v46++)
        ;
      return result;
    }
    v45 = v2 & 0xFFFFFFFE;
    v48 = v2 & 0xFFFFFFFE;
    do
      v48 -= 2;
    while (v48);
    if (v45 != (_DWORD)v2)
      goto LABEL_60;
  }
  return result;
}

uint64_t sub_1D539103C(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int32x2_t v21;
  int32x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  uint64_t v25;
  _WORD *v26;
  signed int v27;
  int32x2_t v28;
  __int16 v29;
  __int16 v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  signed int v34;
  signed int v35;
  int v36;
  int v37;
  int32x2_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  signed int v44;
  int v45;
  int32x2_t v46;
  BOOL v47;
  int v48;
  unsigned int v49;
  int v51;

  v2 = a2[224];
  if (v2)
  {
    v3 = a2[223];
    if (v3)
    {
      LODWORD(v4) = 0;
      v5 = a2[225];
      v6 = (_WORD *)a2[227];
      v7 = a2[228];
      v8 = a2[231];
      v9 = a2[232];
      v10 = a2[233];
      v11 = a2[234];
      v12 = v11 * a2[226];
      v13 = 2 * v5;
      v14 = v8 + 2 * v5 + v12;
      v15 = v9 + v13 + v12;
      v16 = v10 + v13 + v12;
      v17 = *(_QWORD *)(result + 2336);
      v18 = *(_DWORD *)(result + 2296);
      v19 = *(_DWORD *)(result + 2308);
      v20 = *(_DWORD *)(result + 2320);
      v21 = *(int32x2_t *)(result + 2288);
      v22 = *(int32x2_t *)(result + 2300);
      v23 = *(int32x2_t *)(result + 2312);
      v24 = *(int32x2_t *)(result + 2324);
      result = *(unsigned int *)(result + 2332);
      while (1)
      {
        v25 = 0;
        v26 = v6;
        do
        {
          v31 = *(unsigned __int16 *)(v14 + 2 * v25) >> 2;
          v32 = *(unsigned __int16 *)(v15 + 2 * v25) >> 2;
          v33 = *(unsigned __int16 *)(v16 + 2 * v25) >> 2;
          v28 = vadd_s32(vsra_n_s32(vsra_n_s32(vshr_n_s32(vmul_s32(v22, vdup_n_s32(v32)), 0xAuLL), vmul_s32(v21, vdup_n_s32(v31)), 0xAuLL), vmul_s32(v23, vdup_n_s32(v33)), 0xAuLL), v24);
          v27 = ((int)(v19 * v32) >> 10) + ((int)(v18 * v31) >> 10) + ((int)(v20 * v33) >> 10) + result;
          v34 = v28.i32[1];
          if ((v28.i32[1] | v28.i32[0] | v27) < 0x10000)
            goto LABEL_10;
          if (v28.i32[1] >= v28.i32[0])
            v35 = v28.i32[0];
          else
            v35 = v28.i32[1];
          if (v28.i32[1] <= v28.i32[0])
            v34 = v28.i32[0];
          if (v27 >= v35)
            v36 = v35;
          else
            v36 = v27;
          if (v27 <= v34)
            v37 = v34;
          else
            v37 = v27;
          if ((v37 & 0x80000000) == 0 && v36 < 0x10000)
          {
            v38 = vmin_s32(vmax_s32(v28, 0), (int32x2_t)0xFFFF0000FFFFLL);
            v39 = v27 & ~(v27 >> 31);
            if (v39 >= 0xFFFF)
              v39 = 0xFFFF;
            v40 = v38.i32[1] + 341 * (v38.i32[1] + v38.i32[0] + v39);
            v41 = (v40 + 512) >> 10;
            if (v40 >= 0x1FFFA00)
              v42 = (v40 + 512) >> 10;
            else
              v42 = 0xFFFF - v41;
            v43 = (((v42 + 2) >> 2) * v41 + 0x2000) >> 14;
            if (v37 < 0x10000)
            {
              v44 = 4096;
              if (v36 < 0)
                goto LABEL_36;
            }
            else
            {
              v44 = (int)(float)((float)(int)(268431360 - (v43 << 12)) / (float)(int)(v37 - v43));
              if (v44 >= 4096)
                v44 = 4096;
              if (v36 < 0)
              {
LABEL_36:
                v45 = (int)(float)((float)(int)(-4096 * v43) / (float)(int)(v36 - v43));
                if (v44 >= v45)
                  v44 = v45;
              }
            }
            v46 = vdup_n_s32(v43);
            v27 = v43 + ((int)(v44 * (v27 - v43) + 2048) >> 12);
            v28 = vsra_n_s32(v46, vmla_s32((int32x2_t)0x80000000800, vdup_n_s32(v44), vsub_s32(v28, v46)), 0xCuLL);
            goto LABEL_10;
          }
          if (v37 >= 0)
            v27 = 0xFFFF;
          else
            v27 = 0;
          v28 = vdup_n_s32(v27);
LABEL_10:
          v29 = *(_WORD *)(v17 + 2 * v28.i32[1]);
          v30 = *(_WORD *)(v17 + 2 * v27);
          *v26 = *(_WORD *)(v17 + 2 * v28.i32[0]);
          v26[1] = v29;
          v26[2] = v30;
          ++v25;
          v26 += 3;
        }
        while (v3 > v25);
        v4 = (v4 + 1);
        v14 += v11;
        v15 += v11;
        v16 += v11;
        v6 = (_WORD *)((char *)v6 + v7);
        if (v2 <= v4)
          return result;
      }
    }
    if (v2 < 2 || ((_DWORD)v2 ? (v47 = (v2 - 1) >> 32 == 0) : (v47 = 0), !v47))
    {
      v48 = 0;
LABEL_45:
      v49 = v48 + 1;
      while (v2 > v49++)
        ;
      return result;
    }
    v48 = v2 & 0xFFFFFFFE;
    v51 = v2 & 0xFFFFFFFE;
    do
      v51 -= 2;
    while (v51);
    if (v48 != (_DWORD)v2)
      goto LABEL_45;
  }
  return result;
}

uint64_t sub_1D5391330(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 512))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D53913B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53913C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *__p[2];
  char v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v10);
  v2 = v10;
  sub_1D52850A0(__p, "IFD0:EPExposureIndex");
  v3 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v2 + 264))(v2, __p);
  if (v9 < 0)
    operator delete(__p[0]);
  v4 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((_DWORD)v3)
        return v3;
      return sub_1D52973E0(a1);
    }
  }
  if (!(_DWORD)v3)
    return sub_1D52973E0(a1);
  return v3;
}

void sub_1D5391490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1D53914BC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  _WORD *v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int i;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  __int16 v33;
  char *v34;
  unsigned int v35;
  char v36;
  unsigned int v37;
  unsigned __int8 v38;
  char v39;
  unsigned int v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  char v48;
  int v49;
  unsigned __int8 v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  __int16 v59;
  void (**v60)(_QWORD);
  int v61;
  int v62;
  _QWORD v63[5];
  uint8_t buf[2];
  _BYTE v65[480];
  _BYTE v66[264];
  uint64_t v67;

  v1 = MEMORY[0x1E0C80A78](a1);
  v67 = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CKodakCompressedUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v63[0] = MEMORY[0x1E0C809B0];
  v63[1] = 3221225472;
  v63[2] = sub_1D5391B90;
  v63[3] = &unk_1E996F870;
  v63[4] = v1;
  v4 = MEMORY[0x1D82721B4](v63);
  memset(v66, 0, 256);
  memset(v65, 0, sizeof(v65));
  v5 = (_WORD *)sub_1D530B618(v1);
  v60 = (void (**)(_QWORD))v4;
  v7 = *(_DWORD *)(v1 + 44);
  v6 = *(_DWORD *)(v1 + 48);
  (*(void (**)(uint64_t, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v1 + 176))(v1, buf, 4096, 12, 0);
  if (v6)
  {
    v8 = 0;
    v61 = v6;
    do
    {
      v62 = v8;
      if (v7)
      {
        for (i = 0; i < v7; i += 2 * v10)
        {
          if (v7 - i >= 0x100)
            v10 = 128;
          else
            v10 = (v7 - i) >> 1;
          (*(void (**)(_QWORD, _BYTE *, uint64_t))(**(_QWORD **)(v1 + 24) + 32))(*(_QWORD *)(v1 + 24), v65, v10);
          v11 = v10 >> 2;
          if (v10 >= 4)
          {
            v12 = 0;
            if (v11 <= 1)
              v15 = 1;
            else
              v15 = v10 >> 2;
            v14 = v66;
            v13 = v65;
            do
            {
              v16 = *v13;
              v17 = v13[1];
              v18 = v13[2];
              v19 = v13[3];
              v13 += 4;
              *v14 = v16 & 0xF;
              v14[1] = v16 >> 4;
              v14[2] = v17 & 0xF;
              v14[3] = v17 >> 4;
              v14[4] = v18 & 0xF;
              v14[5] = v18 >> 4;
              v14[6] = v19 & 0xF;
              v14[7] = v19 >> 4;
              v14 += 8;
              v12 = (0x10000 << (v16 & 0xF)) | (0x10000 << (v16 >> 4)) | (0x10000 << (v17 >> 4)) | (0x10000 << (v17 & 0xF)) | (0x10000 << (v18 >> 4)) | (0x10000 << (v18 & 0xF)) | (0x10000 << (v19 >> 4)) | (0x10000 << (v19 & 0xF)) | (v12 + (v16 >> 4) + (v16 & 0xF) + (v17 >> 4) + (v17 & 0xF) + (v18 >> 4) + (v18 & 0xF) + (v19 >> 4) + (v19 & 0xF));
              --v15;
            }
            while (v15);
          }
          else
          {
            v12 = 0;
            v13 = v65;
            v14 = v66;
          }
          v20 = v10 & 3;
          if ((v10 & 3) != 0)
          {
            v21 = (v20 - 1) + 1;
            do
            {
              v22 = *v13++;
              *v14 = v22 & 0xF;
              v14[1] = v22 >> 4;
              v12 = (0x10000 << (v22 & 0xF)) | (0x10000 << (v22 >> 4)) | (v12 + (v22 >> 4) + (v22 & 0xF));
              v14 += 2;
              --v21;
            }
            while (v21);
          }
          if (v12 >> 29)
          {
            (*(void (**)(_QWORD, _BYTE *, _QWORD))(**(_QWORD **)(v1 + 24) + 32))(*(_QWORD *)(v1 + 24), &v65[v10], 12 * ((2 * v10 + 7) >> 3) - v10);
            if (v10 >= 4)
            {
              if (v11 <= 1)
                v35 = 1;
              else
                v35 = v10 >> 2;
              v34 = v65;
              do
              {
                v36 = v34[4];
                v37 = v34[8];
                v38 = v34[2];
                v39 = v34[6];
                v40 = v34[10];
                v41 = *(_WORD *)&buf[2 * (v36 & 0xF0 | (*v34 >> 4 << 8) | (v37 >> 4))];
                v42 = *(_WORD *)&buf[2 * (v39 & 0xF0 | (v38 >> 4 << 8) | (v40 >> 4))];
                v43 = *(_WORD *)&buf[2 * (v34[1] | ((*v34 & 0xF) << 8))];
                v44 = *(_WORD *)&buf[2 * (v34[3] | ((v38 & 0xF) << 8))];
                v45 = *(_WORD *)&buf[2 * (v34[5] | ((v36 & 0xF) << 8))];
                v46 = *(_WORD *)&buf[2 * (v34[7] | ((v39 & 0xF) << 8))];
                LOWORD(v37) = *(_WORD *)&buf[2 * (v34[9] | ((v37 & 0xF) << 8))];
                v47 = *(_WORD *)&buf[2 * (v34[11] | ((v40 & 0xF) << 8))];
                *v5 = v41;
                v5[1] = v42;
                v5[2] = v43;
                v5[3] = v44;
                v5[4] = v45;
                v5[5] = v46;
                v5[6] = v37;
                v5[7] = v47;
                v34 += 12;
                v5 += 8;
                --v35;
              }
              while (v35);
            }
            else
            {
              v34 = v65;
            }
            if ((v10 & 3) != 0)
            {
              v48 = *v34;
              v49 = v34[4];
              v50 = v34[2];
              v51 = v34[6];
              v52 = v51 & 0xF0 | (v50 >> 4 << 8) | (v34[10] >> 4);
              v53 = v34[1];
              v54 = v34[3];
              v55 = v34[5];
              v56 = *(_WORD *)&buf[2 * (v49 & 0xF0 | (*v34 >> 4 << 8) | (v34[8] >> 4))];
              v57 = v34[7];
              LOWORD(v52) = *(_WORD *)&buf[2 * v52];
              *v5 = v56;
              v5[1] = v52;
              if (v20 == 1)
              {
                v5 += 2;
              }
              else
              {
                v58 = *(_WORD *)&buf[2 * (v54 & 0xFFFFF0FF | ((v50 & 0xF) << 8))];
                v5[2] = *(_WORD *)&buf[2 * (v53 & 0xFFFFF0FF | ((v48 & 0xF) << 8))];
                v5[3] = v58;
                if (v20 == 3)
                {
                  v59 = *(_WORD *)&buf[2 * ((v51 << 8) & 0xF00 | v57)];
                  v5[4] = *(_WORD *)&buf[2 * ((v49 << 8) & 0xF00 | v55)];
                  v5[5] = v59;
                  v5 += 6;
                }
                else
                {
                  v5 += 4;
                }
              }
            }
          }
          else
          {
            (*(void (**)(_QWORD, _BYTE *, _QWORD))(**(_QWORD **)(v1 + 24) + 32))(*(_QWORD *)(v1 + 24), v65, (((8 * (_DWORD)v10 + (unsigned __int16)v12 + 31) >> 3) & 0xFFFFFFC) - v10);
            if ((_DWORD)v10)
            {
              v23 = 0;
              v24 = 0;
              v25 = 0;
              v26 = 0;
              v27 = v66;
              v28 = v65;
              v29 = v10;
              do
              {
                if (v23 <= 15)
                {
                  v23 += 16;
                  v26 = HIWORD(v26) | (*v28 << 24) | (v28[1] << 16);
                  v28 += 2;
                }
                v30 = *v27;
                v31 = v23 - v30;
                if (*v27)
                  v30 = (v26 << v31 >> -(char)v30) - (((v26 << v31 >> 31) - 1) >> -(char)v30);
                if (v31 <= 15)
                {
                  v31 += 16;
                  v26 = HIWORD(v26) | (*v28 << 24) | (v28[1] << 16);
                  v28 += 2;
                }
                v32 = v27[1];
                v23 = v31 - v32;
                if (v27[1])
                  v32 = (v26 << v23 >> -(char)v32) - (((v26 << v23 >> 31) - 1) >> -(char)v32);
                v24 += v30;
                v25 += v32;
                v33 = *(_WORD *)&buf[2 * (v25 & 0xFFF)];
                *v5 = *(_WORD *)&buf[2 * (v24 & 0xFFF)];
                v5[1] = v33;
                v27 += 2;
                v5 += 2;
                --v29;
              }
              while (v29);
            }
          }
        }
      }
      v8 = v62 + 1;
    }
    while (v62 + 1 != v61);
  }
  v60[2](v60);

}

void sub_1D5391B40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5391B90(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CKodakCompressedUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D5391C14(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  void (**v4)(_QWORD);
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  void *exception;
  _QWORD v18[5];
  uint8_t buf[2];
  uint64_t v20;

  v1 = MEMORY[0x1E0C80A78](a1);
  v20 = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CKodakUncompressedUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_1D5391F08;
  v18[3] = &unk_1E996F870;
  v18[4] = v1;
  v4 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v18);
  v5 = (unsigned __int8 *)sub_1D530B618(v1);
  v6 = *(unsigned int *)(v1 + 44);
  v7 = *(_DWORD *)(v1 + 48);
  if (v7 * (int)v6 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 152))(v1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  (*(void (**)(uint64_t, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v1 + 176))(v1, buf, 4096, 12, 0);
  if (v7)
  {
    v8 = 0;
    if (v6 >> 2 <= 1)
      v9 = 1;
    else
      v9 = v6 >> 2;
    do
    {
      (*(void (**)(_QWORD, unsigned __int8 *, uint64_t))(**(_QWORD **)(v1 + 24) + 32))(*(_QWORD *)(v1 + 24), v5, 2 * v6);
      v10 = v5;
      v11 = v9;
      v12 = v5;
      if (v6 >= 4)
      {
        do
        {
          v13 = *(_WORD *)&buf[2 * v12[1]];
          v14 = *(_WORD *)&buf[2 * v12[2]];
          v15 = *(_WORD *)&buf[2 * v12[3]];
          *(_WORD *)v5 = *(_WORD *)&buf[2 * *v12];
          *((_WORD *)v5 + 1) = v13;
          *((_WORD *)v5 + 2) = v14;
          *((_WORD *)v5 + 3) = v15;
          v12 += 4;
          v5 += 8;
          --v11;
        }
        while (v11);
        v10 = v5;
        v5 = v12;
        if ((v6 & 2) != 0)
        {
LABEL_15:
          v16 = *(_WORD *)&buf[2 * v5[1]];
          *(_WORD *)v10 = *(_WORD *)&buf[2 * *v5];
          *((_WORD *)v10 + 1) = v16;
          v5 += 2;
          v10 += 4;
          if ((v6 & 1) == 0)
            goto LABEL_11;
LABEL_10:
          *(_WORD *)v10 = *(_WORD *)&buf[2 * *v5];
          v10 += 2;
          goto LABEL_11;
        }
      }
      else if ((v6 & 2) != 0)
      {
        goto LABEL_15;
      }
      if ((v6 & 1) != 0)
        goto LABEL_10;
LABEL_11:
      ++v8;
      v5 = v10;
    }
    while (v8 != v7);
  }
  v4[2](v4);

}

void sub_1D5391EAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5391F08(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CKodakUncompressedUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

double sub_1D5391F8C(uint64_t a1)
{
  void *v2;
  void **p_lpsrc;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  int v8;
  double v9;
  double v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *lpsrc;
  std::__shared_weak_count *v19;
  char v20;
  double v21;
  void *v22;
  std::__shared_weak_count *v23;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v2 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9990738, 0)) != 0)
  {
    v22 = v2;
    v23 = v19;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v22;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v4 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v22;
  if (v22)
  {
    v21 = 0.0;
    sub_1D52850A0(&lpsrc, "IFD0:EXIF:MAKERNOTE:ISOInfo");
    v8 = (*(uint64_t (**)(void *, void **, double *))(*(_QWORD *)v7 + 808))(v7, &lpsrc, &v21);
    if (v20 < 0)
      operator delete(lpsrc);
    if (v8)
      v9 = v21 + 0.0;
    else
      v9 = 0.0;
  }
  else
  {
    v9 = 0.0;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1)
      && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1) & 1) == 0)
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&lpsrc, a1);
      v10 = (*(double (**)(void *))(*(_QWORD *)lpsrc + 352))(lpsrc);
      v11 = v19;
      if (v19)
      {
        v12 = (unint64_t *)&v19->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v9 = v10 + 0.0;
    }
  }
  v14 = v23;
  if (v23)
  {
    v15 = (unint64_t *)&v23->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v9;
}

void sub_1D539216C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  sub_1D5282EB4((uint64_t)&__p);
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53921B0(uint64_t a1, int a2)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  int v15;
  __int16 v16;
  BOOL v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t i;
  __int16 v23;
  unsigned int v24;
  int v25;
  __int16 v26;

  v4 = *(unsigned int *)(a1 + 44);
  v5 = *(_DWORD *)(a1 + 48);
  v6 = (v5 + 3) >> 2;
  v7 = *(_QWORD *)(a1 + 192);
  v8 = *(_WORD *)(v7 + 112);
  v9 = *(unsigned __int16 *)(v7 + 114);
  v10 = *(_DWORD *)(v7 + 72);
  v11 = sub_1D530B618(a1);
  result = sub_1D530CBD0(a1);
  v13 = v6 * a2;
  v14 = v6 * a2 + v6;
  if (v5 < v14)
    v14 = v5;
  if (v13 < v14)
  {
    if (v10 == 1)
      v15 = 21845;
    else
      v15 = 4948;
    v16 = ~(_WORD)v15;
    v18 = result == 1 || (_DWORD)v4 == 0;
    v19 = v4 * a2 * v6;
    do
    {
      if (!v18)
      {
        v20 = v4;
        v21 = v19;
        do
        {
          *(_WORD *)(v11 + 2 * v21) = bswap32(*(unsigned __int16 *)(v11 + 2 * v21)) >> 16;
          ++v21;
          --v20;
        }
        while (v20);
      }
      if ((_DWORD)v4)
      {
        for (i = 0; i < v4; i += 2)
        {
          v23 = *(_WORD *)(v11 + 2 * (v19 + i)) ^ v8;
          v24 = v19 + i + 1;
          v25 = *(unsigned __int16 *)(v11 + 2 * v24) ^ v9;
          v26 = v25 & v16 | v15 & v23;
          result = v15 & v25;
          *(_WORD *)(v11 + 2 * (v19 + i)) = v26;
          *(_WORD *)(v11 + 2 * v24) = result | v23 & v16;
        }
      }
      ++v13;
      v19 += v4;
    }
    while (v13 != v14);
  }
  return result;
}

void sub_1D53922E0(uint64_t *a1)
{
  NSObject *v2;
  NSObject *v3;
  void (**v4)(_QWORD);
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8[3];
  uint64_t buf[3];
  _QWORD v10[5];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((unint64_t)a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    LOWORD(buf[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)a1, "CPhaseOneUnpacker", (const char *)&unk_1D548AF1A, (uint8_t *)buf, 2u);
  }

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D53924A0;
  v10[3] = &unk_1E996F870;
  v10[4] = a1;
  v4 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v10);
  v5 = sub_1D530CBD0((uint64_t)a1);
  sub_1D5293C20(buf, a1 + 3, v5);
  sub_1D5285164(v8, a1 + 3, (uint64_t)(a1 + 5), 0);
  v6 = (*(uint64_t (**)(uint64_t *))(*a1 + 152))(a1);
  v7 = sub_1D530B618((uint64_t)a1);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1[3] + 32))(a1[3], v7, v6);
  if (*(_DWORD *)(a1[24] + 72))
    sub_1D536BADC((uint64_t)sub_1D5392524, 4, (uint64_t)a1, 0, 0);
  sub_1D5285200(v8);
  sub_1D5293C98(buf);
  v4[2](v4);

}

void sub_1D5392450(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void (**v2)(_QWORD);
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_1D5285200((uint64_t *)va);
  sub_1D5293C98((uint64_t *)va1);
  v2[2](v2);

  _Unwind_Resume(a1);
}

void sub_1D53924A0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CPhaseOneUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

uint64_t sub_1D5392524(uint64_t a1)
{
  return sub_1D53921B0(*(_QWORD *)(a1 + 16), *(_DWORD *)a1);
}

_QWORD *sub_1D5392534(_QWORD *a1)
{
  *a1 = &unk_1E998FE08;
  sub_1D5282EB4((uint64_t)(a1 + 24));
  return sub_1D5282F0C(a1);
}

void sub_1D5392568(_QWORD *a1)
{
  *a1 = &unk_1E998FE08;
  sub_1D5282EB4((uint64_t)(a1 + 24));
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D53925B0(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void (**v4)(_QWORD);
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  void *v8;
  int v9;
  unsigned int v10;
  void *exception;
  void *v12;
  _QWORD v13[2];
  uint64_t v14[3];
  uint64_t buf[3];
  _QWORD v16[5];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    LOWORD(buf[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CPhaseOneCompressedUnpacker", (const char *)&unk_1D548AF1A, (uint8_t *)buf, 2u);
  }

  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_1D53928A8;
  v16[3] = &unk_1E996F870;
  v16[4] = a1;
  v4 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v16);
  v5 = sub_1D530CBD0(a1);
  sub_1D5293C20(buf, (uint64_t *)(a1 + 24), v5);
  sub_1D5285164(v14, (uint64_t *)(a1 + 24), a1 + 40, 0);
  if (*(int *)(a1 + 48) > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v6 = (*(uint64_t (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1);
  LODWORD(v13[0]) = v6;
  v7 = *sub_1D52B0860(v13, &dword_1D544A1AC);
  v8 = (void *)operator new[]();
  bzero(v8, v7);
  sub_1D5284728(*(_QWORD *)(a1 + 24), (uint64_t)v8, v6);
  *(_QWORD *)(a1 + 216) = v8;
  v9 = *(_DWORD *)(a1 + 48);
  v10 = (v9 + 4) >> 2;
  *(_DWORD *)(a1 + 288) = v10;
  v13[0] = a1;
  v13[1] = sub_1D530B618(a1);
  sub_1D536BADC((uint64_t)sub_1D539292C, (v9 + v10 - 1) / v10, (uint64_t)v13, 0, 0);
  if (*(_BYTE *)(a1 + 208))
  {
    v12 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v12, "RawCameraException");
    __cxa_throw(v12, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  MEMORY[0x1D8271AC4](v8, 0x1000C8077774924);
  sub_1D5285200(v14);
  sub_1D5293C98(buf);
  v4[2](v4);

}

void sub_1D5392814(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53928A8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CPhaseOneCompressedUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

uint64_t sub_1D539292C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t result;
  void *exception;

  v2 = *(uint64_t **)(a1 + 16);
  result = *v2;
  if (!*v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (!*(_BYTE *)(result + 208))
    return sub_1D53929BC(result, *(_DWORD *)(result + 288) * *(_DWORD *)a1, v2[1]);
  return result;
}

void sub_1D53929A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53929BC(uint64_t result, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  char v17;
  int v18;
  char v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  int v24;
  int64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  _DWORD *v29;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _WORD *v38;
  int v39;
  int v40;
  _WORD *v41;
  uint64_t v42;
  int v43;
  void *exception;
  uint64_t v45;
  _QWORD v46[2];

  v46[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(result + 48);
  if (*(_DWORD *)(result + 288) + a2 < v3)
    v3 = *(_DWORD *)(result + 288) + a2;
  if (v3 > a2)
  {
    v4 = *(_QWORD *)(result + 232);
    v5 = *(unsigned int *)(result + 44);
    v6 = (*(_QWORD *)(result + 240) - v4) >> 2;
    v7 = v5 * a2;
    do
    {
      if (v6 <= a2)
        sub_1D528EAE0();
      v8 = a2;
      v9 = *(_QWORD *)(result + 216);
      v10 = *(unsigned int *)(v4 + 4 * a2);
      v45 = 0;
      v46[0] = 0;
      if ((int)v5 >= 1)
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = a3 + 2 * v5 * a2;
        v15 = (unsigned int *)(v9 + v10);
        do
        {
          if (v11 >= (uint64_t)((int)v5 & 0xFFFFFFFFFFFFFFF8))
          {
            v45 = 0xE0000000ELL;
          }
          else if ((v11 & 7) == 0)
          {
            v16 = 0;
            v17 = 1;
            do
            {
              v18 = 0;
              v19 = v17;
              while (1)
              {
                if (v12 <= 0)
                {
                  v21 = *v15++;
                  v13 = v21 | (v13 << 32);
                  v20 = v12 + 32;
                }
                else
                {
                  v20 = v12;
                }
                v12 = v20 - 1;
                if (((v13 << -(char)v20) & 0x8000000000000000) != 0)
                  break;
                if (++v18 == 5)
                  goto LABEL_19;
              }
              if (!v18)
                goto LABEL_22;
LABEL_19:
              if (v20 <= 1)
              {
                v22 = *v15++;
                v13 = v22 | (v13 << 32);
                v12 = v20 + 31;
              }
              v23 = v13 << -(char)v12-- >> 63;
              *((_DWORD *)&v46[-1] + v16) = dword_1D544DAA0[(2 * v18 - 2) | v23];
LABEL_22:
              v17 = 0;
              v16 = 1;
            }
            while ((v19 & 1) != 0);
          }
          v24 = *(_DWORD *)((unint64_t)&v45 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v11 & 1)));
          if (v24 <= 0)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](exception, "RawCameraException");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
          v25 = v11 & 1;
          if (v24 == 14)
          {
            if (v12 <= 15)
            {
              v26 = *v15++;
              v13 = v26 | (v13 << 32);
              v12 += 32;
            }
            v27 = v13 << -(char)v12 >> 48;
            v12 -= 16;
            *(_DWORD *)((unint64_t)v46 | (4 * v25)) = v27;
          }
          else
          {
            if (v12 < v24)
            {
              v28 = *v15++;
              v13 = v28 | (v13 << 32);
              v12 += 32;
            }
            v29 = (_DWORD *)((unint64_t)v46 | (4 * v25));
            LODWORD(v27) = (-1 << (v24 - 1)) + *v29 + (v13 << -(char)v12 >> -(char)v24) + 1;
            *v29 = v27;
            if (WORD1(v27))
            {
              *(_BYTE *)(result + 208) = 1;
              return result;
            }
            v12 -= v24;
          }
          if (v27 <= 0xFF && *(_DWORD *)(result + 224) == 5)
            LOWORD(v27) = word_1D544DAC8[v27];
          *(_WORD *)(v14 + 2 * v11++) = v27;
        }
        while (v11 != v5);
      }
      v31 = *(_DWORD *)(result + 256);
      v32 = v8 << (v31 != 0);
      v33 = v32 + 1;
      v34 = *(_QWORD *)(result + 264);
      if (v32 + 1 < (unint64_t)((*(_QWORD *)(result + 272) - v34) >> 1))
      {
        v35 = (*(_DWORD *)(result + 52) + v31);
        if ((int)v35 < 1)
        {
          LODWORD(v35) = 0;
        }
        else
        {
          v36 = *(__int16 *)(v34 + 2 * v32);
          v37 = v35;
          v38 = (_WORD *)(a3 + 2 * v7);
          do
          {
            v39 = (unsigned __int16)*v38 + v36;
            if (v39 >= 1)
            {
              if (v39 >= 0xFFFF)
                LOWORD(v39) = -1;
              *v38 = v39;
            }
            ++v38;
            --v37;
          }
          while (v37);
        }
        if ((int)v35 < (int)v5)
        {
          v40 = *(__int16 *)(v34 + 2 * v33);
          v41 = (_WORD *)(a3 + 2 * v7 + 2 * v35);
          v42 = v5 - v35;
          do
          {
            v43 = (unsigned __int16)*v41 + v40;
            if (v43 >= 1)
            {
              if (v43 >= 0xFFFF)
                LOWORD(v43) = -1;
              *v41 = v43;
            }
            ++v41;
            --v42;
          }
          while (v42);
        }
      }
      a2 = v8 + 1;
      v7 += v5;
    }
    while (v8 + 1 != v3);
  }
  return result;
}

void sub_1D5392D34(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5392D48(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E998FEE0;
  v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = v3;
    operator delete(v3);
  }
  *a1 = &unk_1E998FE08;
  sub_1D5282EB4((uint64_t)(a1 + 24));
  return sub_1D5282F0C(a1);
}

void sub_1D5392DAC(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E998FEE0;
  v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = v3;
    operator delete(v3);
  }
  *a1 = &unk_1E998FE08;
  sub_1D5282EB4((uint64_t)(a1 + 24));
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D5392E24(_QWORD *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, _OWORD *a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  void *exception;
  __int128 v12;
  unint64_t v13;

  v13 = a2;
  *a6 = 0;
  a6[1] = 0;
  if (!*a5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (*(int *)(*a5 + 72) < 3)
  {
    sub_1D53931C8(a1, &v13, a3, a4, a5, &v12);
    sub_1D5292548((uint64_t)a6, &v12);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
    if (!*((_QWORD *)&v12 + 1))
      return;
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v9 = __ldaxr(v10);
    while (__stlxr(v9 - 1, v10));
  }
  else
  {
    sub_1D5392F74(a1, &v13, a3, a4, a5, &v12);
    sub_1D5292548((uint64_t)a6, &v12);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
    if (!*((_QWORD *)&v12 + 1))
      return;
    v8 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
  }
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1D5392F48(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1);
  _Unwind_Resume(a1);
}

void sub_1D5392F74(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;

  v12 = operator new(0x140uLL);
  sub_1D5393004(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  sub_1D5285658((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1D5392FF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5393004(_QWORD *a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5, _QWORD *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E998FFD0;
  sub_1D53930AC((uint64_t)(a1 + 3), a2, *a3, a4, a5, a6);
  return a1;
}

void sub_1D5393040(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5393054(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E998FFD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5393068(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E998FFD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D539309C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D53930AC(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4, _OWORD *a5, _QWORD *a6)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = (_QWORD *)sub_1D530B330(a1, a2, a3, a4, a5);
  *v8 = &unk_1E998FE08;
  v9 = a6[1];
  v8[24] = *a6;
  v8[25] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)a1 = &off_1E998FEE0;
  *(_BYTE *)(a1 + 208) = 0;
  v12 = *a6;
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(*a6 + 72);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  sub_1D5287D44((_QWORD *)(a1 + 232), *(const void **)(v12 + 48), *(_QWORD *)(v12 + 56), (uint64_t)(*(_QWORD *)(v12 + 56) - *(_QWORD *)(v12 + 48)) >> 2);
  v13 = *a6;
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(*a6 + 144);
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  sub_1D5287CCC((_QWORD *)(a1 + 264), *(const void **)(v13 + 120), *(_QWORD *)(v13 + 128), (uint64_t)(*(_QWORD *)(v13 + 128) - *(_QWORD *)(v13 + 120)) >> 1);
  *(_DWORD *)(a1 + 288) = 20;
  return a1;
}

void sub_1D539318C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void *v6;

  v6 = *v3;
  if (*v3)
  {
    v1[30] = v6;
    operator delete(v6);
  }
  *v1 = v4 + 16;
  sub_1D5282EB4(v2);
  sub_1D5282F0C(v1);
  _Unwind_Resume(a1);
}

void sub_1D53931C8(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;

  v12 = operator new(0xE8uLL);
  sub_1D5393258(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  sub_1D5285658((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1D5393244(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5393258(_QWORD *a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5, _QWORD *a6)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E9990020;
  sub_1D530B330((uint64_t)(a1 + 3), a2, *a3, a4, a5);
  a1[3] = &unk_1E998FE08;
  v8 = a6[1];
  a1[27] = *a6;
  a1[28] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  a1[3] = &unk_1E998FD00;
  return a1;
}

void sub_1D53932D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53932EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9990020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5393300(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9990020;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5393334(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1D5393344(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned __int16 *v8;
  uint64_t v9;
  int v10;
  char *v11;
  unsigned __int16 *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  __int16 v26;
  int v27;
  uint8_t *v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  __int128 *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  int *v42;
  int *v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  int v51;
  __int16 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  size_t v69;
  __int16 *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  __int16 v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unsigned __int16 *v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unsigned __int16 *v91;
  int v92;
  int v93;
  __int16 v94;
  uint64_t v95;
  uint64_t v96;
  __int16 *v97;
  __int16 *v98;
  int v99;
  int v100;
  uint64_t v101;
  __int16 *v102;
  uint64_t v103;
  __int16 *v104;
  uint64_t v105;
  __int16 *v106;
  unsigned int v107;
  unsigned int v108;
  __int16 *v109;
  uint64_t i;
  unsigned int v111;
  unsigned int v112;
  __int16 v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  int32x2_t v118;
  unsigned int v119;
  int32x2_t v120;
  int v121;
  unsigned int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  __int16 v132;
  __int16 v133;
  int v134;
  int v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *exception;
  void *v141;
  void *v142;
  void (**v143)(_QWORD);
  unsigned int v144;
  uint64_t v145;
  int v146;
  unint64_t v147;
  int v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  unsigned __int16 *__dst;
  int v153;
  uint64_t v154;
  unint64_t v155;
  unsigned __int16 *v156;
  uint64_t v157;
  int v158;
  unint64_t v159;
  unint64_t v160;
  void *v161;
  unsigned int v162;
  uint64_t v163;
  _BOOL4 v164;
  uint64_t v165;
  unsigned int v166;
  unsigned int v167;
  unsigned __int32 v168;
  int v169;
  _QWORD v170[5];
  __n128 v171;
  uint64_t v172;
  uint8_t buf[2];
  _DWORD v174[3078];
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;

  v1 = MEMORY[0x1E0C80A78](a1);
  v178 = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CLosslessJpegSRawUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v170[0] = MEMORY[0x1E0C809B0];
  v170[1] = 3221225472;
  v170[2] = sub_1D539440C;
  v170[3] = &unk_1E996F870;
  v170[4] = v1;
  v4 = MEMORY[0x1D82721B4](v170);
  v149 = sub_1D530B618(v1);
  v151 = *(int *)(v1 + 44);
  v169 = *(_DWORD *)(v1 + 48);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 152))(v1);
  if (!v5
    || (v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 24) + 16))(*(_QWORD *)(v1 + 24)),
        v7 = *(_DWORD *)(v1 + 40),
        (v7 & 0x80000000) == 0)
    && v7 >= v6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v8 = (unsigned __int16 *)operator new[]();
  bzero(v8, v5 + 128);
  (*(void (**)(_QWORD, unsigned __int16 *, _QWORD))(**(_QWORD **)(v1 + 24) + 32))(*(_QWORD *)(v1 + 24), v8, v5);
  if (bswap32(*v8) >> 16 != 65496)
    goto LABEL_172;
  v145 = v1;
  v143 = (void (**)(_QWORD))v4;
  v162 = 0;
  v166 = 0;
  v9 = 0;
  v10 = 0;
  v144 = 0;
  v164 = 0;
  v11 = (char *)v8 + v5 + 128;
  v12 = v8 + 1;
  v176 = 0u;
  v177 = 0u;
  v175 = 0u;
  v13 = v151;
  do
  {
    v14 = __rev16(*v12);
    if (v14 == 0xFFFF)
    {
      v12 = (unsigned __int16 *)((char *)v12 + 1);
    }
    else
    {
      if (v14 < 0xFF01)
        goto LABEL_172;
      v15 = __rev16(v12[1]) - 2;
      if (v15 >= 0x100)
        goto LABEL_172;
      v16 = (unsigned __int8 *)(v12 + 2);
      v17 = (unint64_t)v12 + v15 + 4;
      if (v14 == 65475)
      {
        v162 = *((unsigned __int8 *)v12 + 4);
        v166 = __rev16(*(unsigned __int16 *)((char *)v12 + 5));
        v9 = __rev16(*(unsigned __int16 *)((char *)v12 + 7));
        v164 = *((unsigned __int8 *)v12 + 11) != 17;
        v144 = ((*((_BYTE *)v12 + 11) >> 4) * *((_BYTE *)v12 + 11) - 1) & 3;
        v10 = v144 + *((unsigned __int8 *)v12 + 9);
      }
      else if (v14 == 65476)
      {
        while ((unint64_t)v16 < v17)
        {
          v18 = *v16;
          if (v18 > 5)
            break;
          v19 = v11;
          v20 = v9;
          v21 = &v174[512 * v18 + 6];
          *((_QWORD *)&v175 + v18) = v21;
          v16 = sub_1D53126BC(v16 + 1, (uint64_t)v21, 2);
          v13 = v151;
          v9 = v20;
          v11 = v19;
          if (!v16)
          {
            v136 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](v136, "RawCameraException");
            __cxa_throw(v136, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
        }
      }
      v12 = (unsigned __int16 *)v17;
    }
  }
  while (v14 != 65498);
  if (!v164 || v10 >= 7 || (int)(v9 * v166) > v169 * v13)
  {
LABEL_172:
    v139 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v139, "RawCameraException");
    __cxa_throw(v139, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v22 = (unint64_t)v11;
  v150 = v9;
  (*(void (**)(uint64_t, uint8_t *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v145 + 176))(v145, buf, 0x10000, v162, 0);
  LODWORD(v23) = 1 << v162;
  if (1 << v162 <= 0x10000)
    v24 = 0x10000 - (1 << v162);
  else
    v24 = 65537 - (1 << v162);
  v25 = 0x10000 - (v24 >> 1);
  if ((int)v23 < v25)
  {
    v26 = *(_WORD *)&buf[2 * (int)v23 - 2];
    v27 = -(v24 >> 1);
    v28 = &buf[2 * (int)v23];
    v29 = v27 - (uint64_t)(int)v23 + 0x10000;
    do
    {
      *(_WORD *)v28 = v26;
      v28 += 2;
      --v29;
    }
    while (v29);
    LODWORD(v23) = v25;
  }
  if ((int)v23 < 0x10000)
  {
    v30 = *(_WORD *)buf;
    v23 = (int)v23;
    do
      *(_WORD *)&buf[2 * v23++] = v30;
    while ((_DWORD)v23 != 0x10000);
  }
  if (v144)
  {
    *(_QWORD *)&v176 = *((_QWORD *)&v175 + 1);
    *((_QWORD *)&v176 + 1) = *((_QWORD *)&v175 + 1);
    *(_QWORD *)&v177 = *((_QWORD *)&v175 + 1);
    *((_QWORD *)&v177 + 1) = *((_QWORD *)&v175 + 1);
    v31 = v175;
    v32 = v144;
    v33 = (_QWORD *)&v175 + 1;
    do
    {
      *v33++ = v31;
      --v32;
    }
    while (v32);
  }
  if (v10 >= 1)
  {
    v34 = &v175;
    v35 = v10;
    do
    {
      if (!*(_QWORD *)v34)
      {
        v137 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v137, "RawCameraException");
        __cxa_throw(v137, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v34 = (__int128 *)((char *)v34 + 8);
      --v35;
    }
    while (v35);
    v36 = v174;
    v37 = v10;
    do
    {
      *v36++ = 1 << (v162 - 1);
      --v37;
    }
    while (v37);
  }
  v38 = (void *)operator new[]();
  bzero(v38, 4 * v150 * v10);
  v171.n128_u32[0] = 0;
  sub_1D5285A24(&v168, (unsigned int *)&v171);
  v39 = *(_QWORD *)(v145 + 192);
  if (*(_QWORD *)(v145 + 200) != v39)
  {
    v40 = 0;
    v41 = 1;
    do
    {
      v42 = (int *)(v39 + 4 * v40);
      if (*v42 < 0)
      {
        v138 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v138, "RawCameraException");
        __cxa_throw(v138, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      sub_1D5285B70(&v168, v42);
      v40 = v41;
      v39 = *(_QWORD *)(v145 + 192);
      ++v41;
    }
    while (v40 < (*(_QWORD *)(v145 + 200) - v39) >> 2);
  }
  v171.n128_u32[0] = v168;
  v43 = sub_1D52DCE44((int *)&v171, (unsigned int *)&v169);
  v49 = v10;
  v48 = v150;
  v50 = v150 >> 1;
  v51 = (v150 >> 1) * v166 * v10;
  v52 = (__int16 *)v149;
  v53 = v151;
  if (v51 < 0 || *v43 != v51)
  {
    v141 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v141, "RawCameraException");
    __cxa_throw(v141, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v161 = v38;
  v55 = *(_QWORD *)(v145 + 192);
  v54 = *(_QWORD *)(v145 + 200);
  v56 = v169;
  if (v54 == v55)
  {
    v156 = 0;
  }
  else
  {
    v57 = v22;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = v50 * v10;
    v160 = 8 * v50 * v10;
    v64 = (v10 - 2);
    if (v50 <= 1)
      v50 = 1;
    v167 = v50;
    v156 = 0;
    v65 = 32;
    v66 = v169;
    v148 = v63;
    do
    {
      v158 = 2 * *(_DWORD *)(v55 + 4 * v58) / v49;
      v67 = v158 + v61;
      if (v66 >= 1)
      {
        v146 = v158 + v61;
        v147 = v58;
        v157 = v61;
        v163 = 0;
        v165 = v67;
        do
        {
          if ((unint64_t)&v12[v160 / 2] >= v57)
          {
            v153 = v60;
            v154 = v59;
            v155 = v57;
            v159 = ((v66 - v163) * v160) | 4;
            __dst = (unsigned __int16 *)operator new[]();
            bzero(__dst, v159);
            if (v156)
              MEMORY[0x1D8271AC4](v156, 0x1000C8077774924);
            if (v159 >= v155 - (unint64_t)v12 + 4)
              v69 = v155 - (_QWORD)v12 + 4;
            else
              v69 = v159;
            memmove(__dst, v12 - 2, v69);
            v12 = __dst + 2;
            v56 = v169;
            v64 = (v10 - 2);
            v68 = v163;
            v57 = (unint64_t)__dst + (((v169 - v163) * v160) | 4) + 4;
            v156 = __dst;
            v52 = (__int16 *)v149;
            v53 = v151;
            v49 = v10;
            v48 = v150;
            v63 = v148;
            v59 = v154;
            v60 = v153;
          }
          else
          {
            v68 = v163;
          }
          v70 = &v52[3 * v68 * v53];
          v71 = v157;
          if (v158 >= 1)
          {
            do
            {
              v72 = v60 % v63;
              if (!(v60 % v63))
              {
                v73 = 0;
                v171 = 0uLL;
                v172 = 0;
                do
                {
                  v171.n128_u64[v73] = (unint64_t)v161
                                     + 2 * ((((int)v163 + (int)v73) << 31 >> 31) & v63);
                  ++v73;
                }
                while (v73 != 3);
                if (v48 >= 2)
                {
                  v74 = 0;
                  v75 = 0;
                  v44 = v171;
                  do
                  {
                    if (v49 >= 1)
                    {
                      v76 = 0;
                      do
                      {
                        if (v65 >= 16)
                        {
                          v77 = *(unsigned __int8 *)v12;
                          if (v77 == 255)
                            v78 = 3;
                          else
                            v78 = 2;
                          if (v77 == 255)
                            v79 = 2;
                          else
                            v79 = 1;
                          v80 = *((unsigned __int8 *)v12 + v79);
                          v81 = (unsigned __int16 *)((char *)v12 + v78);
                          v82 = (v62 << 16) | (v77 << 8);
                          if (v80 == 255)
                            v12 = (unsigned __int16 *)((char *)v81 + 1);
                          else
                            v12 = v81;
                          v62 = v82 | v80;
                          v65 -= 16;
                        }
                        v83 = v62 << v65;
                        v84 = *((_QWORD *)&v175 + v76);
                        v85 = *(unsigned __int16 *)(v84 + 2 * ((v62 << v65) >> 23));
                        v65 += (v85 >> 10) & 0x1F;
                        if (v85 > 0x8000)
                        {
                          v85 = (char)v85;
                        }
                        else
                        {
                          if ((v85 & 0x8000) != 0)
                          {
                            v85 = *(unsigned __int16 *)(v84 + 2 * (HIWORD(v83) & 0x3FF));
                            v65 += (v85 >> 10) & 0x1F;
                          }
                          v86 = v85 & 0x1F;
                          if ((v85 & 0x1F) != 0)
                          {
                            if (v65 >= 16)
                            {
                              v87 = *(unsigned __int8 *)v12;
                              if (v87 == 255)
                                v88 = 3;
                              else
                                v88 = 2;
                              if (v87 == 255)
                                v89 = 2;
                              else
                                v89 = 1;
                              v90 = *((unsigned __int8 *)v12 + v89);
                              v91 = (unsigned __int16 *)((char *)v12 + v88);
                              v92 = (v62 << 16) | (v87 << 8);
                              if (v90 == 255)
                                v12 = (unsigned __int16 *)((char *)v91 + 1);
                              else
                                v12 = v91;
                              v62 = v92 | v90;
                              v65 -= 16;
                            }
                            v85 = ((v62 << v65) >> -(char)v86)
                                - ((((v62 << v65) >> 31) - 1) >> -(char)v86);
                            v65 += v86;
                          }
                          else
                          {
                            v85 = (v85 << 8) & 0x8000;
                          }
                        }
                        if (v76 > v144 || (LOWORD(v93) = v75, !(v74 | v76)))
                        {
                          if (v74)
                          {
                            LOWORD(v93) = *(_WORD *)(v44.n128_u64[0] + 2 * -v10);
                          }
                          else
                          {
                            v93 = v174[v76];
                            v174[v76] = v93 + v85;
                          }
                        }
                        v94 = v93 + v85;
                        *(_WORD *)v44.n128_u64[0] = v94;
                        if (v76 <= v144)
                          v75 = v94;
                        v45 = (__n128)vdupq_n_s64(2uLL);
                        v44 = (__n128)vaddq_s64((int64x2_t)v44, (int64x2_t)v45);
                        v171 = v44;
                        ++v76;
                      }
                      while (v10 != v76);
                    }
                    ++v74;
                  }
                  while (v74 != v167);
                }
                v59 = v172;
                v64 = (v10 - 2);
              }
              if (v49 >= 3)
              {
                v95 = 0;
                do
                {
                  v70[3 * (int)((v95 & 1) + v71 + (v95 >> 1) * v53)] = *(_WORD *)(v59 + 2 * v72 + 2 * v95);
                  ++v95;
                }
                while (v64 != v95);
              }
              v60 = v72 + v49;
              v96 = v59 + 2 * (v72 + v49);
              v97 = &v70[3 * v71];
              v97[1] = *(_WORD *)(v96 - 4) - 0x4000;
              v97[2] = *(_WORD *)(v96 - 2) - 0x4000;
              v71 += 2;
            }
            while (v71 < v165);
          }
          v163 += ((unint64_t)v10 >> 1) - 1;
          v66 = v56;
        }
        while (v163 < v56);
        v67 = v146;
        v55 = *(_QWORD *)(v145 + 192);
        v54 = *(_QWORD *)(v145 + 200);
        v66 = v56;
        v58 = v147;
      }
      ++v58;
      v61 = v67;
    }
    while (v58 < (v54 - v55) >> 2);
  }
  v98 = v52;
  v99 = v56 - 1;
  if (v56 >= 1)
  {
    v100 = 0;
    v101 = (v53 - 1);
    v102 = v52 + 2;
    v103 = 6 * v53;
    v104 = v52 + 4;
    v98 = v52;
    do
    {
      if ((v100 & (v144 >> 1)) != 0 && (int)v53 >= 1)
      {
        v105 = 0;
        v106 = v102;
        do
        {
          v107 = v106[-3 * v53 - 1];
          if (v100 != v99)
            v107 = (v107 + v106[(unint64_t)v103 / 2 - 1] + 1) >> 1;
          *(v106 - 1) = v107;
          v108 = v106[-3 * v53];
          if (v100 != v99)
            v108 = (v108 + v106[3 * v53] + 1) >> 1;
          *v106 = v108;
          v106 += 6;
          v105 += 2;
        }
        while (v105 < v53);
      }
      if ((int)v53 > 1)
      {
        v109 = v104;
        for (i = 1; i < v53; i += 2)
        {
          v111 = *(v109 - 3);
          if (v101 != i)
            v111 = (v111 + v109[3] + 1) >> 1;
          *v109 = v111;
          v112 = *(v109 - 2);
          if (v101 != i)
            v112 = (v112 + v109[4] + 1) >> 1;
          v109[1] = v112;
          v109 += 6;
        }
      }
      ++v100;
      v98 += 3 * (int)v53;
      v102 = (__int16 *)((char *)v102 + v103);
      v104 = (__int16 *)((char *)v104 + v103);
    }
    while (v100 != v56);
  }
  if (*(_BYTE *)(v145 + 248))
    v113 = 2 * v144;
  else
    v113 = 4 * v144 + 4;
  v114 = *(_DWORD *)(v145 + 252);
  switch(v114)
  {
    case 0:
      if (v52 < v98)
      {
        v124 = *(_QWORD *)(v145 + 224);
        do
        {
          v125 = 0;
          v126 = v52[2];
          v127 = *v52 - 512;
          v171.n128_u32[0] = v127 + v126;
          v128 = v52[1];
          v171.n128_u32[2] = v127 + v128;
          v171.n128_u32[1] = v127 + ((-778 * v128 - (v126 << 11)) >> 12);
          do
          {
            v129 = (signed __int32)(*(_DWORD *)(v124 + 4 * v125) * v171.n128_u32[v125]) >> 10;
            if (v129 >= 0xFFFF)
              v129 = 0xFFFF;
            v52[v125++] = v129 & ~(unsigned __int16)(v129 >> 31);
          }
          while (v125 != 3);
          v52 += 3;
        }
        while (v52 < v98);
      }
      break;
    case 1:
    case 3:
      if (v52 < v98)
      {
        v115 = *(_QWORD *)(v145 + 224);
        v44.n128_u64[0] = 0x4A2B00004A45;
        v45.n128_u64[0] = 0xFFFFF18EFFFFFFA5;
        v46.n128_u64[0] = 0xFFFFD9E800004A27;
        v47.n128_u64[0] = 0x200000002000;
        do
        {
          v116 = 0;
          v117 = *v52;
          v118 = vdup_n_s32(v117);
          v119 = v52[1];
          v120 = vdup_n_s32(v119);
          v121 = 19189 * v119 + 19084 * v117;
          v122 = v52[2];
          v171.n128_u64[0] = (unint64_t)vshr_n_s32(vadd_s32(vmla_s32(vmla_s32(vmul_s32(v120, (int32x2_t)0xFFFFF18EFFFFFFA5), v118, (int32x2_t)0x4A2B00004A45), vdup_n_s32(v122), (int32x2_t)0xFFFFD9E800004A27), (int32x2_t)0x200000002000), 0xEuLL);
          v171.n128_u32[2] = (int)(v121 - 161 * v122 + 0x2000) >> 14;
          do
          {
            v123 = (signed __int32)(*(_DWORD *)(v115 + 4 * v116) * v171.n128_u32[v116]) >> 10;
            if (v123 >= 0xFFFF)
              v123 = 0xFFFF;
            v52[v116++] = v123 & ~(unsigned __int16)(v123 >> 31);
          }
          while (v116 != 3);
          if (v114 == 3)
            v52[1] *= 4;
          v52 += 3;
        }
        while (v52 < v98);
      }
      break;
    case 2:
      if (v52 < v98)
      {
        v130 = *(_QWORD *)(v145 + 224);
        do
        {
          v131 = 0;
          v132 = v113 + 4 * v52[1];
          v52[1] = v132;
          v133 = v113 + 4 * v52[2];
          v52[2] = v133;
          v134 = *v52;
          v171.n128_u32[0] = v134 + ((200 * v132 + 22929 * v133) >> 14);
          v171.n128_u32[1] = v134 + ((-5640 * v132 - 11751 * v133) >> 14);
          v171.n128_u32[2] = v134 + ((29040 * v132 - 101 * v133) >> 14);
          do
          {
            v135 = (signed __int32)(*(_DWORD *)(v130 + 4 * v131) * v171.n128_u32[v131]) >> 10;
            if (v135 >= 0xFFFF)
              v135 = 0xFFFF;
            v52[v131++] = v135 & ~(unsigned __int16)(v135 >> 31);
          }
          while (v131 != 3);
          v52 += 3;
        }
        while (v52 < v98);
      }
      break;
    default:
      v142 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v142, "RawCameraException");
      __cxa_throw(v142, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v156)
    v44.n128_f64[0] = MEMORY[0x1D8271AC4](v156, 0x1000C8077774924, v44, v45, v46, v47);
  MEMORY[0x1D8271AC4](v161, 0x1000C80BDFB0063, v44, v45, v46, v47);
  MEMORY[0x1D8271AC4](v8, 0x1000C8077774924);
  v143[2](v143);

}

void sub_1D53942BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(_QWORD), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a25)
    MEMORY[0x1D8271AC4](a25, 0x1000C8077774924);
  MEMORY[0x1D8271AC4](a30, 0x1000C80BDFB0063);
  MEMORY[0x1D8271AC4](a10, 0x1000C8077774924);
  a11[2](a11);

  _Unwind_Resume(a1);
}

void sub_1D539440C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CLosslessJpegSRawUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

uint64_t sub_1D5394490(int *a1)
{
  return 3 * (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 128))(a1) * a1[12];
}

_QWORD *sub_1D53944C4(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E9990070;
  v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  *a1 = &off_1E99781A0;
  v3 = (void *)a1[24];
  if (v3)
  {
    a1[25] = v3;
    operator delete(v3);
  }
  return sub_1D5282F0C(a1);
}

void sub_1D5394520(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E9990070;
  v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  *a1 = &off_1E99781A0;
  v3 = (void *)a1[24];
  if (v3)
  {
    a1[25] = v3;
    operator delete(v3);
  }
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

char *sub_1D5394590@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  char *result;

  v4 = operator new(0x58uLL);
  v4[2] = 0;
  *v4 = &unk_1E99901B0;
  v4[1] = 0;
  v4[4] = 0;
  v4[5] = 0;
  *((_BYTE *)v4 + 48) = 0;
  v4[7] = *a1;
  v4[9] = 0;
  v4[10] = 0;
  v4[8] = 0;
  a2[1] = v4;
  v4[3] = off_1E9990168;
  result = (char *)(v4 + 3);
  *a2 = result;
  return result;
}

_QWORD *sub_1D53945F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D5394734(a1, a2);
}

double sub_1D539461C()
{
  return 0.4;
}

_QWORD *sub_1D5394628@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = 0x3FD999999999999ALL;
  return sub_1D528F9B4(a1, 4uLL, &v2);
}

void sub_1D5394664(_QWORD *a1)
{
  sub_1D5394688(a1);
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D5394688(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E9990168;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  *a1 = off_1E9986FB8;
  sub_1D5282EB4((uint64_t)(a1 + 1));
  return a1;
}

void sub_1D53946DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99901B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53946F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99901B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5394724(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

_QWORD *sub_1D5394734@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x58uLL);
  result = sub_1D539478C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D5394778(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D539478C(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E99901B0;
  a1[1] = 0;
  sub_1D53947D8((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1D53947C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53947D8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E9990168;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_1D5282C70((_QWORD *)(a1 + 40), *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  return a1;
}

void sub_1D5394844(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = off_1E9986FB8;
  sub_1D5282EB4(v2);
  _Unwind_Resume(a1);
}

void sub_1D5394868(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void (**v4)(_QWORD);
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  char *v12;
  unsigned int i;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  void *exception;
  _QWORD v19[5];
  uint8_t buf[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CNikonNRWUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = sub_1D5394AA4;
  v19[3] = &unk_1E996F870;
  v19[4] = a1;
  v4 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v19);
  v5 = *(_DWORD *)(a1 + 44);
  v6 = *(_DWORD *)(a1 + 48);
  v7 = ((3 * v5) >> 1) & 0x1FFFFFFF;
  if ((*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1) < v7 * v6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v8 = sub_1D530B618(a1);
  if (v6)
  {
    v9 = (char *)v8;
    v10 = 0;
    v11 = 2 * v5 - v7;
    do
    {
      v12 = &v9[v11];
      (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), &v9[v11], ((3 * v5) >> 1) & 0x1FFFFFFF);
      if (v5)
      {
        for (i = 0; i < v5; i += 8)
        {
          v14 = *(_DWORD *)v12;
          v15 = *((_DWORD *)v12 + 1);
          v16 = *((_DWORD *)v12 + 2);
          v17 = (*(_DWORD *)v12 >> 8) & 0xFFF;
          *(_WORD *)v9 = *(_DWORD *)v12 >> 20;
          *((_WORD *)v9 + 1) = v17;
          *((_WORD *)v9 + 2) = (v15 >> 28) & 0xF | (16 * v14);
          *((_WORD *)v9 + 3) = HIWORD(v15) & 0xFFF;
          *((_WORD *)v9 + 4) = (unsigned __int16)v15 >> 4;
          *((_WORD *)v9 + 5) = HIBYTE(v16) | ((v15 & 0xF) << 8);
          *((_WORD *)v9 + 6) = (v16 >> 12) & 0xFFF;
          *((_WORD *)v9 + 7) = v16 & 0xFFF;
          v9 += 16;
          v12 += 12;
        }
      }
      ++v10;
    }
    while (v10 != v6);
  }
  v4[2](v4);

}

void sub_1D5394A64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5394AA4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CNikonNRWUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

uint64_t sub_1D5394B28(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  char **v6;
  int v7;
  int v8;
  int i;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  int j;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  _DWORD *v31;
  unint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char **v44;

  v5 = sub_1D544098C(a1, a2);
  *(_QWORD *)v5 = &off_1E99902F0;
  *(_OWORD *)(v5 + 16) = 0u;
  v6 = (char **)(v5 + 16);
  v44 = (char **)(v5 + 40);
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_DWORD *)(a1 + 12) = sub_1D52847F8(*a3);
  v7 = sub_1D52847F8(*a3);
  v8 = sub_1D52847F8(*a3);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      v10 = sub_1D52847F8(*a3);
      v11 = sub_1D52847F8(*a3);
      v12 = v11;
      v14 = *(unint64_t **)(a1 + 24);
      v13 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)v14 >= v13)
      {
        v16 = ((char *)v14 - *v6) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          sub_1D5282B8C();
        v17 = v13 - (_QWORD)*v6;
        v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v20 = (char *)sub_1D5282D28(a1 + 32, v19);
        else
          v20 = 0;
        v21 = (unint64_t *)&v20[8 * v16];
        *v21 = v10 | (unint64_t)(v12 << 32);
        v15 = v21 + 1;
        v23 = *(char **)(a1 + 16);
        v22 = *(char **)(a1 + 24);
        if (v22 != v23)
        {
          do
          {
            v24 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *--v21 = v24;
          }
          while (v22 != v23);
          v22 = *v6;
        }
        *(_QWORD *)(a1 + 16) = v21;
        *(_QWORD *)(a1 + 24) = v15;
        *(_QWORD *)(a1 + 32) = &v20[8 * v19];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v14 = v10 | (unint64_t)(v11 << 32);
        v15 = v14 + 1;
      }
      *(_QWORD *)(a1 + 24) = v15;
    }
  }
  if (v8)
  {
    for (j = 0; j != v8; ++j)
    {
      v26 = sub_1D52847F8(*a3);
      v27 = sub_1D52847F8(*a3);
      v28 = sub_1D52847F8(*a3);
      v29 = sub_1D52847F8(*a3);
      v30 = v29;
      v31 = *(_DWORD **)(a1 + 48);
      v32 = *(_QWORD *)(a1 + 56);
      if ((unint64_t)v31 >= v32)
      {
        v34 = ((char *)v31 - *v44) >> 4;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 60)
          sub_1D5282B8C();
        v36 = v32 - (_QWORD)*v44;
        if (v36 >> 3 > v35)
          v35 = v36 >> 3;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
          v37 = 0xFFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
          v38 = (char *)sub_1D5284334(a1 + 56, v37);
        else
          v38 = 0;
        v39 = &v38[16 * v34];
        *(_DWORD *)v39 = v26;
        *((_DWORD *)v39 + 1) = v27;
        *((_DWORD *)v39 + 2) = v28;
        *((_DWORD *)v39 + 3) = v30;
        v41 = *(char **)(a1 + 40);
        v40 = *(char **)(a1 + 48);
        v42 = v39;
        if (v40 != v41)
        {
          do
          {
            *((_OWORD *)v42 - 1) = *((_OWORD *)v40 - 1);
            v42 -= 16;
            v40 -= 16;
          }
          while (v40 != v41);
          v40 = *v44;
        }
        v33 = v39 + 16;
        *(_QWORD *)(a1 + 40) = v42;
        *(_QWORD *)(a1 + 48) = v39 + 16;
        *(_QWORD *)(a1 + 56) = &v38[16 * v37];
        if (v40)
          operator delete(v40);
      }
      else
      {
        *v31 = v26;
        v31[1] = v27;
        v33 = v31 + 4;
        v31[2] = v28;
        v31[3] = v29;
      }
      *(_QWORD *)(a1 + 48) = v33;
    }
  }
  return a1;
}

void sub_1D5394DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void *v13;
  void *v14;

  v13 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v10 + 48) = v13;
    operator delete(v13);
  }
  v14 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 24) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

id sub_1D5394E3C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *i;
  unint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unsigned int *j;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  RAWOpcodeFixBadPixelsList *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v70;
  void *v71;
  _QWORD v72[4];
  _QWORD v73[4];
  _QWORD v74[2];
  _QWORD v75[3];

  v75[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4, a5);
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v6, *(unsigned int *)(a1 + 12), v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v70, v10, (uint64_t)v9, (uint64_t)CFSTR("BayerPhase"), v11);

  objc_msgSend_array(MEMORY[0x1E0C99DE8], v12, v13, v14, v15);
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = *(unint64_t **)(a1 + 16);
  for (i = *(unint64_t **)(a1 + 24); v19 != i; ++v19)
  {
    v21 = *v19;
    v74[0] = CFSTR("BadRow");
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v16, v21, v17, v18);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v74[1] = CFSTR("BadCol");
    v75[0] = v22;
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v23, HIDWORD(v21), v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v75[1] = v26;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v27, (uint64_t)v75, (uint64_t)v74, 2);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v71, v29, (uint64_t)v28, v30, v31);

  }
  objc_msgSend_setObject_forKeyedSubscript_(v70, v16, (uint64_t)v71, (uint64_t)CFSTR("BadPoints"), v18);
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v32, v33, v34, v35);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v41 = *(unsigned int **)(a1 + 40);
  for (j = *(unsigned int **)(a1 + 48); v41 != j; v41 += 4)
  {
    v42 = *v41;
    v43 = v41[1];
    v44 = v41[2];
    v45 = v41[3];
    v72[0] = CFSTR("Top");
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v36, v42, v37, v38);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v73[0] = v46;
    v72[1] = CFSTR("Left");
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v47, v43, v48, v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v73[1] = v50;
    v72[2] = CFSTR("Bottom");
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v51, v44, v52, v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v73[2] = v54;
    v72[3] = CFSTR("Right");
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v55, v45, v56, v57);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    v73[3] = v58;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v59, (uint64_t)v73, (uint64_t)v72, 4);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v39, v61, (uint64_t)v60, v62, v63);

  }
  objc_msgSend_setObject_forKeyedSubscript_(v70, v36, (uint64_t)v39, (uint64_t)CFSTR("BadRects"), v38);
  v64 = [RAWOpcodeFixBadPixelsList alloc];
  v68 = (void *)objc_msgSend_initWithArguments_(v64, v65, (uint64_t)v70, v66, v67);

  return v68;
}

void sub_1D53950F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_1D53951A4(_QWORD *a1)
{
  sub_1D53951D0(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53951C8()
{
  return 5;
}

_QWORD *sub_1D53951D0(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E99902F0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

id sub_1D539521C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  _QWORD v48[11];
  _QWORD v49[11];
  _QWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[11];
  _QWORD v61[4];

  v61[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], a2, (uint64_t)sub_1D53955C8, a4, a5);
  v5 = objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v6, (uint64_t)sub_1D5395634, v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v10, (uint64_t)sub_1D5395640, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v14, (uint64_t)sub_1D52E8DA4, v15, v16);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v17, (uint64_t)sub_1D539564C, v18, v19);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v20, (uint64_t)sub_1D5395658, v21, v22);
  v23 = objc_claimAutoreleasedReturnValue();
  v43 = *MEMORY[0x1E0CBD388];
  v50[0] = *MEMORY[0x1E0CBD368];
  v44 = v50[0];
  v50[1] = v43;
  v60[0] = MEMORY[0x1E0C9AAB0];
  v60[1] = CFSTR("com.nikon.raw-image");
  v41 = *MEMORY[0x1E0CBD380];
  v51 = *MEMORY[0x1E0CBD348];
  v42 = v51;
  v52 = v41;
  v60[2] = CFSTR(".nef.");
  v60[3] = &unk_1E99CB5B0;
  v39 = *MEMORY[0x1E0CBD378];
  v53 = *MEMORY[0x1E0CBD370];
  v40 = v53;
  v54 = v39;
  v60[4] = &unk_1E99CB5C8;
  v60[5] = v5;
  v24 = (void *)v5;
  v26 = *MEMORY[0x1E0CBD350];
  v55 = *MEMORY[0x1E0CBD330];
  v25 = v55;
  v56 = v26;
  v60[6] = v9;
  v60[7] = v13;
  v27 = (void *)v9;
  v29 = *MEMORY[0x1E0CBD358];
  v57 = *MEMORY[0x1E0CBD338];
  v28 = v57;
  v58 = v29;
  v60[8] = v47;
  v60[9] = v46;
  v59 = *MEMORY[0x1E0CBD360];
  v30 = v59;
  v45 = (void *)v23;
  v60[10] = v23;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v31, (uint64_t)v60, (uint64_t)v50, 11);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v61[0] = v38;
  v48[0] = v44;
  v48[1] = v43;
  v49[0] = MEMORY[0x1E0C9AAB0];
  v49[1] = CFSTR("com.nikon.nrw-raw-image");
  v48[2] = v42;
  v48[3] = v41;
  v49[2] = CFSTR(".nrw.");
  v49[3] = &unk_1E99CB5B0;
  v48[4] = v40;
  v48[5] = v39;
  v49[4] = &unk_1E99CB5C8;
  v49[5] = v24;
  v48[6] = v25;
  v48[7] = v26;
  v49[6] = v27;
  v49[7] = v13;
  v48[8] = v28;
  v48[9] = v29;
  v49[8] = v47;
  v49[9] = v46;
  v48[10] = v30;
  v49[10] = v45;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v32, (uint64_t)v49, (uint64_t)v48, 11);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v61[1] = v33;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v34, (uint64_t)v61, 2, v35);
  v36 = (void *)objc_claimAutoreleasedReturnValue();

  return v36;
}

void sub_1D5395528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

BOOL sub_1D53955C8(unsigned __int8 *a1, unint64_t a2, void *a3)
{
  unsigned __int16 v5;

  v5 = 42;
  return sub_1D52C0354(a1, a2, &v5)
      && ((sub_1D52EB764(CFSTR("com.nikon.raw-image"), a3) & 1) != 0
       || (sub_1D52EB764(CFSTR("com.nikon.nrw-raw-image"), a3) & 1) != 0);
}

void sub_1D5395634(const void *a1, uint64_t a2, uint64_t a3)
{
  sub_1D52E7A20(a1, a2, a3, &unk_1E9990328);
}

uint64_t sub_1D5395640(os_signpost_id_t a1)
{
  return sub_1D52E8C40(a1);
}

uint64_t sub_1D539564C(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1D52E7438(a1, a2, a3, &unk_1E9990328);
}

uint64_t sub_1D5395658(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1D52E9A7C(a1, a2, a3, &unk_1E9990328);
}

void sub_1D5395664(uint64_t *a1@<X1>, char a2@<W2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X8>)
{
  __int128 v8;
  id v9;
  id v10;
  char v11;

  v11 = a2;
  v10 = a3;
  v9 = a4;
  sub_1D539D16C(a1, &v11, &v10, &v9, &v8);
  *a5 = v8;

}

void sub_1D53956E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

double sub_1D53956FC(uint64_t a1, uint64_t *a2, char a3, void *a4, void *a5)
{
  uint64_t v5;
  double result;

  sub_1D52A7E98(a1, a2, a3, a4, a5);
  *(_QWORD *)v5 = off_1E9990358;
  *(_QWORD *)(v5 + 1184) = 0;
  result = 0.0;
  *(_OWORD *)(v5 + 1192) = 0u;
  *(_OWORD *)(v5 + 1216) = 0u;
  *(_QWORD *)(v5 + 1208) = v5 + 1216;
  *(_OWORD *)(v5 + 1240) = 0u;
  *(_DWORD *)(v5 + 1264) = 0;
  *(_BYTE *)(v5 + 1316) = 0;
  *(_QWORD *)(v5 + 1320) = 0;
  *(_WORD *)(v5 + 1328) = 0;
  *(_OWORD *)(v5 + 1280) = 0u;
  *(_QWORD *)(v5 + 1293) = 0;
  *(_DWORD *)(v5 + 1332) = 1;
  *(_BYTE *)(v5 + 1336) = 0;
  *(_BYTE *)(v5 + 1340) = 0;
  *(_BYTE *)(v5 + 1344) = 0;
  *(_QWORD *)(v5 + 1584) = 0;
  *(_DWORD *)(v5 + 1348) = 0;
  *(_WORD *)(v5 + 1384) = 0;
  *(_QWORD *)(v5 + 1376) = 0;
  *(_OWORD *)(v5 + 1360) = 0u;
  *(_QWORD *)(v5 + 1408) = 0;
  *(_OWORD *)(v5 + 1392) = 0u;
  *(_BYTE *)(v5 + 1416) = 0;
  *(_QWORD *)(v5 + 1440) = 0;
  *(_OWORD *)(v5 + 1424) = 0u;
  *(_BYTE *)(v5 + 1448) = 0;
  *(_QWORD *)(v5 + 1472) = 0;
  *(_OWORD *)(v5 + 1456) = 0u;
  *(_BYTE *)(v5 + 1480) = 0;
  *(_OWORD *)(v5 + 1488) = 0u;
  *(_OWORD *)(v5 + 1504) = 0u;
  *(_OWORD *)(v5 + 1520) = 0u;
  *(_OWORD *)(v5 + 1536) = 0u;
  *(_OWORD *)(v5 + 1552) = 0u;
  *(_QWORD *)(v5 + 1568) = 0;
  return result;
}

uint64_t sub_1D53957C0(uint64_t a1)
{
  const void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)a1 = off_1E9990358;
  v2 = *(const void **)(a1 + 1584);
  if (v2)
    CFRelease(v2);
  v3 = *(void **)(a1 + 1552);
  if (v3)
  {
    *(_QWORD *)(a1 + 1560) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 1512);
  if (v4)
  {
    *(_QWORD *)(a1 + 1520) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 1488);
  if (v5)
  {
    *(_QWORD *)(a1 + 1496) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 1456);
  if (v6)
  {
    *(_QWORD *)(a1 + 1464) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 1424);
  if (v7)
  {
    *(_QWORD *)(a1 + 1432) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 1392);
  if (v8)
  {
    *(_QWORD *)(a1 + 1400) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 1360);
  if (v9)
  {
    *(_QWORD *)(a1 + 1368) = v9;
    operator delete(v9);
  }
  sub_1D5282EB4(a1 + 1240);
  sub_1D52940F4(a1 + 1208, *(char **)(a1 + 1216));
  if (*(char *)(a1 + 1207) < 0)
    operator delete(*(void **)(a1 + 1184));
  return sub_1D52B2190(a1);
}

void sub_1D5395894(uint64_t a1)
{
  sub_1D53957C0(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53958B8(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::string::size_type size;
  std::string *p_str;
  int data;
  int v15;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  int v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  std::string __str;

  memset(&__str, 0, sizeof(__str));
  v48 = 0;
  sub_1D52917E4(a1, &v44);
  v2 = (*(int (**)(uint64_t))(*(_QWORD *)v44 + 48))(v44);
  v3 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v48 = v2;
  sub_1D52917E4(a1, &v44);
  v6 = v44;
  LODWORD(v46) = 8;
  sub_1D5285A24(&v42, (unsigned int *)&v46);
  v7 = sub_1D52849DC(v6, (unsigned int *)&v42, (uint64_t)&__str);
  v8 = v7;
  v9 = v45;
  if (!v45)
    goto LABEL_10;
  v10 = (unint64_t *)&v45->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_10:
    if (v7)
      goto LABEL_11;
LABEL_59:
    sub_1D528594C(&v44, &v48);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 160))(a1, &v44);
LABEL_60:
    v39 = 1;
    goto LABEL_61;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!v8)
    goto LABEL_59;
LABEL_11:
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size != 5)
    goto LABEL_59;
  p_str = &__str;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  data = (int)p_str->__r_.__value_.__l.__data_;
  v15 = p_str->__r_.__value_.__s.__data_[4];
  if (data != 1869310286 || v15 != 110)
    goto LABEL_59;
  v47 = 0;
  sub_1D52917E4(a1, &v44);
  *(_DWORD *)(a1 + 1232) = sub_1D52847F8(v44);
  v17 = v45;
  if (v45)
  {
    v18 = (unint64_t *)&v45->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  std::string::operator=((std::string *)(a1 + 1184), &__str);
  v46 = 0;
  sub_1D52917E4(a1, &v44);
  v20 = (*(int (**)(uint64_t))(*(_QWORD *)v44 + 48))(v44);
  v21 = v45;
  if (v45)
  {
    v22 = (unint64_t *)&v45->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v46 = v20;
  sub_1D528594C(&v44, &v46);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 144))(a1, &v44);
  sub_1D52917E4(a1, &v42);
  sub_1D528594C(&v41, &v46);
  sub_1D52B1CC8((uint64_t)&v44, &v42, &v41);
  v24 = v43;
  if (v43)
  {
    v25 = (unint64_t *)&v43->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  sub_1D52917E4(a1, &v42);
  v27 = sub_1D528479C(v42);
  v28 = v43;
  if (v43)
  {
    v29 = (unint64_t *)&v43->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v27 == 18761 || v27 == 19789)
  {
    if (v27 == 19789)
      v31 = 2;
    else
      v31 = 1;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v31);
    sub_1D52917E4(a1, &v42);
    v32 = sub_1D528479C(v42);
    v33 = v43;
    if (v43)
    {
      v34 = (unint64_t *)&v43->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v32 == (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 664))(a1))
    {
      sub_1D52917E4(a1, &v42);
      v47 = sub_1D52847F8(v42);
      v36 = v43;
      if (v43)
      {
        v37 = (unint64_t *)&v43->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      sub_1D5282F74((int *)&v42, &v47);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 160))(a1, &v42);
      sub_1D52B1D54((uint64_t)&v44);
      goto LABEL_60;
    }
  }
  sub_1D52B1D54((uint64_t)&v44);
  v39 = 0;
LABEL_61:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v39;
}

void sub_1D5395D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_1D5282EB4((uint64_t)va);
  sub_1D52B1D54((uint64_t)va1);
  if (*(char *)(v2 - 33) < 0)
    operator delete(*(void **)(v2 - 56));
  _Unwind_Resume(a1);
}

uint64_t *sub_1D5395D98(uint64_t *result, __int128 *a2, int a3)
{
  unint64_t v3;
  __int128 *v4;

  switch(a3)
  {
    case 257:
      v4 = a2;
      result = sub_1D52B4328((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1D544A5C4, &v4);
      v3 = 0x3F9EB851EB851EB8;
      goto LABEL_17;
    case 258:
      v4 = a2;
      result = sub_1D52B4328((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1D544A5C4, &v4);
      v3 = 0x3FA999999999999ALL;
      goto LABEL_17;
    case 259:
      v4 = a2;
      result = sub_1D52B4328((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1D544A5C4, &v4);
      v3 = 0x3FB1EB851EB851ECLL;
      goto LABEL_17;
    case 260:
      v4 = a2;
      result = sub_1D52B4328((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1D544A5C4, &v4);
      v3 = 0x3FB999999999999ALL;
      goto LABEL_17;
    case 261:
      v4 = a2;
      result = sub_1D52B4328((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1D544A5C4, &v4);
      v3 = 0x3FC0A3D70A3D70A4;
      goto LABEL_17;
    case 262:
      v4 = a2;
      result = sub_1D52B4328((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1D544A5C4, &v4);
      v3 = 0x3FC3333333333333;
      goto LABEL_17;
    case 263:
      v4 = a2;
      result = sub_1D52B4328((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1D544A5C4, &v4);
      v3 = 0x3FC5C28F5C28F5C3;
      goto LABEL_17;
    case 264:
      v4 = a2;
      result = sub_1D52B4328((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1D544A5C4, &v4);
      v3 = 0x3FC999999999999ALL;
LABEL_17:
      result[7] = v3;
      break;
    default:
      switch(a3)
      {
        case 513:
          v4 = a2;
          result = sub_1D52B4328((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1D544A5C4, &v4);
          v3 = 0xBF9EB851EB851EB8;
          goto LABEL_17;
        case 514:
          v4 = a2;
          result = sub_1D52B4328((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1D544A5C4, &v4);
          v3 = 0xBFA999999999999ALL;
          goto LABEL_17;
        case 515:
          v4 = a2;
          result = sub_1D52B4328((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1D544A5C4, &v4);
          v3 = 0xBFB1EB851EB851ECLL;
          goto LABEL_17;
        case 516:
          v4 = a2;
          result = sub_1D52B4328((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1D544A5C4, &v4);
          v3 = 0xBFB999999999999ALL;
          goto LABEL_17;
        default:
          if (!a3)
          {
            v4 = a2;
            result = sub_1D52B4328((uint64_t **)result + 151, (void **)a2, (uint64_t)&unk_1D544A5C4, &v4);
            result[7] = 0;
          }
          break;
      }
      break;
  }
  return result;
}

void sub_1D5396044(uint64_t a1, std::string::size_type a2, unsigned __int16 *a3)
{
  unsigned int v6;
  BOOL v7;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  BOOL v25;
  int v27;
  std::__shared_weak_count *size;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unsigned int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned int v39;
  char *v40;
  _OWORD *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  _BOOL4 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unsigned int v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _BOOL4 v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unsigned int v63;
  int i;
  int v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _BOOL4 v69;
  unsigned __int16 *v70;
  int v71;
  int v72;
  const void *v73;
  int v74;
  CGColorSpace *v75;
  CGColorSpaceRef v76;
  _BOOL4 v77;
  int v78;
  std::string::size_type v79;
  uint64_t v80;
  unsigned int v81;
  char v82;
  double *v83;
  double v84;
  double *v85;
  double *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  double *v92;
  uint64_t v93;
  char *v94;
  _BOOL4 v95;
  int v96;
  int v97;
  char v98;
  std::string::size_type v99;
  std::string *p_dst;
  int data_low;
  int v102;
  unsigned int v104;
  uint64_t *v105;
  CGColorSpace *v106;
  unsigned int v107;
  int v108;
  uint64_t *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  int v113;
  int v114;
  int v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  char *v124;
  int v125;
  int v126;
  double v127;
  std::__shared_weak_count *v128;
  unint64_t *p_shared_owners;
  unint64_t v130;
  char *v131;
  _DWORD *v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  int v140;
  _DWORD *v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int *v145;
  int v146;
  uint64_t *v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  uint64_t *v153;
  unsigned int v154;
  int v155;
  uint64_t *v156;
  char *v157;
  char *v158;
  char *v159;
  void **v160;
  BOOL v161;
  uint64_t *v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t *v167;
  int v168;
  unint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  void *exception;
  void *v173[2];
  char v174;
  __int128 __p;
  double *v176;
  std::string __dst;
  void **v178;
  void *__src;
  std::__shared_weak_count *v180;
  uint64_t v181;
  __int128 v182;
  _QWORD v183[2];

  v183[1] = *MEMORY[0x1E0C80C00];
  nullsub_6();
  v6 = *a3;
  if (v6 > 0x3C)
  {
    if (*a3 > 0x92u)
    {
      if (*a3 > 0x96u)
      {
        if (v6 != 151)
        {
          if (v6 == 167)
          {
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) == 0)
              *(_DWORD *)(a1 + 1268) = *((_DWORD *)a3 + 2);
          }
          else if (v6 == 176)
          {
            v7 = !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) && a3[1] == 7;
            if (v7 && *((_DWORD *)a3 + 1) == 16)
            {
              sub_1D52917E4(a1, &__p);
              LODWORD(__src) = sub_1D52A5CC8((uint64_t)a3);
              sub_1D5285B08((int *)&v182, (int *)&__src);
              sub_1D5285164((uint64_t *)&__dst, (uint64_t *)&__p, (uint64_t)&v182, 0);
              v9 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
              if (*((_QWORD *)&__p + 1))
              {
                v10 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
                do
                  v11 = __ldaxr(v10);
                while (__stlxr(v11 - 1, v10));
                if (!v11)
                {
                  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                  std::__shared_weak_count::__release_weak(v9);
                }
              }
              sub_1D52917E4(a1, &__p);
              sub_1D52847F8(__p);
              v12 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
              if (*((_QWORD *)&__p + 1))
              {
                v13 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
                do
                  v14 = __ldaxr(v13);
                while (__stlxr(v14 - 1, v13));
                if (!v14)
                {
                  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                  std::__shared_weak_count::__release_weak(v12);
                }
              }
              sub_1D52917E4(a1, &__p);
              v15 = sub_1D52847F8(__p);
              v16 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
              if (*((_QWORD *)&__p + 1))
              {
                v17 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
                do
                  v18 = __ldaxr(v17);
                while (__stlxr(v18 - 1, v17));
                if (!v18)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
              }
              sub_1D52917E4(a1, &__p);
              sub_1D52847F8(__p);
              v19 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
              if (*((_QWORD *)&__p + 1))
              {
                v20 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
                do
                  v21 = __ldaxr(v20);
                while (__stlxr(v21 - 1, v20));
                if (!v21)
                {
                  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                  std::__shared_weak_count::__release_weak(v19);
                }
              }
              sub_1D52917E4(a1, &__p);
              sub_1D52847F8(__p);
              v22 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
              if (*((_QWORD *)&__p + 1))
              {
                v23 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
                do
                  v24 = __ldaxr(v23);
                while (__stlxr(v24 - 1, v23));
                if (!v24)
                {
                  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                  std::__shared_weak_count::__release_weak(v22);
                }
              }
              *(_BYTE *)(a1 + 1328) = v15 != 0;
              sub_1D5285200((uint64_t *)&__dst);
            }
          }
          return;
        }
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) != 0)
          return;
        if (*(char *)(a2 + 23) < 0)
          sub_1D5290130(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
        else
          __dst = *(std::string *)a2;
        std::string::append(&__dst, ":ColorBalance", 0xDuLL);
        sub_1D52917E4(a1, &v182);
        LODWORD(v173[0]) = *((_DWORD *)a3 + 2);
        sub_1D5282F74((int *)&__src, (int *)v173);
        sub_1D5285164((uint64_t *)&__p, (uint64_t *)&v182, (uint64_t)&__src, 0);
        v110 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
        if (*((_QWORD *)&v182 + 1))
        {
          v111 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
          do
            v112 = __ldaxr(v111);
          while (__stlxr(v112 - 1, v111));
          if (!v112)
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
          }
        }
        v113 = 0;
        v114 = 0;
        do
        {
          sub_1D52917E4(a1, &v182);
          v115 = sub_1D52846FC(v182);
          v116 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
          if (*((_QWORD *)&v182 + 1))
          {
            v117 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
          v114 = 16 * v114 + v115 - 48;
          ++v113;
        }
        while (v113 != 4);
        if (v114 > 258)
        {
          if (v114 != 259)
          {
            if (v114 == 1282)
            {
              sub_1D52917E4(a1, &__src);
              sub_1D52B1C58((uint64_t *)&v182, (uint64_t *)&__src);
              sub_1D5282EB4((uint64_t)&__src);
              sub_1D52917E4(a1, &__src);
              LODWORD(v173[0]) = 52;
              (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)__src + 40))(__src, v173, 1);
              sub_1D5282EB4((uint64_t)&__src);
              sub_1D52917E4(a1, &__src);
              sub_1D528479C((uint64_t)__src);
              sub_1D5282EB4((uint64_t)&__src);
              sub_1D52917E4(a1, &__src);
              v123 = sub_1D528479C((uint64_t)__src);
              sub_1D5282EB4((uint64_t)&__src);
              sub_1D52917E4(a1, &__src);
              sub_1D528479C((uint64_t)__src);
              sub_1D5282EB4((uint64_t)&__src);
              *(double *)v173 = (double)v123;
              sub_1D528F9B4(&__src, 4uLL, v173);
              sub_1D52AFE84(":BLACKLEVELS", (const void **)a2, v173);
              v178 = v173;
              v124 = (char *)sub_1D52BA2C8((uint64_t **)(a1 + 264), v173, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v178) + 56;
              if (v124 != (char *)&__src)
                sub_1D528FA34(v124, (char *)__src, (uint64_t)v180, ((char *)v180 - (_BYTE *)__src) >> 3);
              if (v174 < 0)
                operator delete(v173[0]);
              if (__src)
              {
                v180 = (std::__shared_weak_count *)__src;
                operator delete(__src);
              }
              sub_1D5285200((uint64_t *)&v182);
              goto LABEL_338;
            }
            goto LABEL_331;
          }
          std::string::append(&__dst, ":103", 4uLL);
          sub_1D52917E4(a1, &v182);
          LODWORD(__src) = 16;
          (*(void (**)(_QWORD, void **, uint64_t))(*(_QWORD *)v182 + 40))(v182, &__src, 1);
          sub_1D5282EB4((uint64_t)&v182);
          sub_1D52917E4(a1, &v182);
          v119 = sub_1D528479C(v182);
          sub_1D5282EB4((uint64_t)&v182);
          sub_1D52917E4(a1, &v182);
          v120 = sub_1D528479C(v182);
          sub_1D5282EB4((uint64_t)&v182);
          sub_1D52917E4(a1, &v182);
          v122 = sub_1D528479C(v182);
          sub_1D5282EB4((uint64_t)&v182);
          sub_1D52917E4(a1, &v182);
          v166 = sub_1D528479C(v182);
        }
        else
        {
          if (v114 != 256)
          {
            if (v114 == 258)
            {
              std::string::append(&__dst, ":102", 4uLL);
              sub_1D52917E4(a1, &v182);
              LODWORD(__src) = 6;
              (*(void (**)(_QWORD, void **, uint64_t))(*(_QWORD *)v182 + 40))(v182, &__src, 1);
              sub_1D5282EB4((uint64_t)&v182);
              sub_1D52917E4(a1, &v182);
              v119 = sub_1D528479C(v182);
              sub_1D5282EB4((uint64_t)&v182);
              sub_1D52917E4(a1, &v182);
              v120 = sub_1D528479C(v182);
              sub_1D5282EB4((uint64_t)&v182);
              sub_1D52917E4(a1, &v182);
              v121 = sub_1D528479C(v182);
              sub_1D5282EB4((uint64_t)&v182);
              sub_1D52917E4(a1, &v182);
              v122 = sub_1D528479C(v182);
LABEL_337:
              sub_1D5282EB4((uint64_t)&v182);
              *(_QWORD *)&v182 = __PAIR64__(v120, v119);
              *((_QWORD *)&v182 + 1) = __PAIR64__(v121, v122);
              __src = &__dst;
              v167 = sub_1D52B3E7C((uint64_t **)(a1 + 120), (void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&__src);
              sub_1D5282A44((char *)v167 + 56, (char *)&v182, (uint64_t)v183, 4uLL);
              goto LABEL_338;
            }
LABEL_331:
            if ((v114 & 0xFFFFFF00) != 0x200)
              goto LABEL_338;
            if (v114 == 517)
            {
              v165 = 14;
            }
            else
            {
              sub_1D52917E4(a1, &v182);
              LODWORD(__src) = 280;
              (*(void (**)(_QWORD, void **, uint64_t))(*(_QWORD *)v182 + 40))(v182, &__src, 1);
              sub_1D5282EB4((uint64_t)&v182);
              *(_QWORD *)(a1 + 1256) = 6;
              if ((v114 - 521) <= 0xB && ((1 << (v114 - 9)) & 0xA01) != 0)
                *(_QWORD *)(a1 + 1256) = 10;
              if ((v114 & 0xFFFFFFFE) != 0x216)
                goto LABEL_357;
              v165 = 4;
            }
            *(_QWORD *)(a1 + 1256) = v165;
LABEL_357:
            if (*(_QWORD *)(a1 + 1240))
            {
              exception = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1D8271938](exception, "RawCameraException");
              __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
            }
            sub_1D530AD68(0x144uLL, &v182);
            sub_1D5292548(a1 + 1240, &v182);
            sub_1D5282EB4((uint64_t)&v182);
            sub_1D52917E4(a1, &v182);
            v170 = v182;
            v171 = sub_1D52E658C(*(_QWORD *)(a1 + 1240));
            (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v170 + 32))(v170, v171, *(_QWORD *)(*(_QWORD *)(a1 + 1240) + 24));
            sub_1D5282EB4((uint64_t)&v182);
            sub_1D52917E4(a1, &v182);
            *(_QWORD *)(a1 + 1272) = sub_1D52845E4(v182);
            sub_1D5282EB4((uint64_t)&v182);
            goto LABEL_338;
          }
          std::string::append(&__dst, ":100", 4uLL);
          sub_1D52917E4(a1, &v182);
          LODWORD(__src) = 68;
          (*(void (**)(_QWORD, void **, uint64_t))(*(_QWORD *)v182 + 40))(v182, &__src, 1);
          sub_1D5282EB4((uint64_t)&v182);
          sub_1D52917E4(a1, &v182);
          v119 = sub_1D528479C(v182);
          sub_1D5282EB4((uint64_t)&v182);
          sub_1D52917E4(a1, &v182);
          v122 = sub_1D528479C(v182);
          sub_1D5282EB4((uint64_t)&v182);
          sub_1D52917E4(a1, &v182);
          v120 = sub_1D528479C(v182);
          sub_1D5282EB4((uint64_t)&v182);
          sub_1D52917E4(a1, &v182);
          v166 = sub_1D528479C(v182);
        }
        v121 = v166;
        goto LABEL_337;
      }
      if (v6 == 147)
      {
        LODWORD(__p) = 0;
        sub_1D5285A24(&__dst, (unsigned int *)&__p);
        *(_DWORD *)(a1 + 1340) = sub_1D52A7E28((uint64_t)a3, (unsigned int *)&__dst);
        *(_BYTE *)(a1 + 1344) = 1;
        return;
      }
      if (v6 != 150 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) != 0)
        return;
      if (*(_BYTE *)(a1 + 1344))
        goto LABEL_346;
      if (sub_1D52AA7F0((uint64_t)a3) == 46)
      {
        v31 = 3;
      }
      else
      {
        if (sub_1D52AA7F0((uint64_t)a3) != 624)
        {
LABEL_346:
          sub_1D52917E4(a1, &__dst);
          v168 = sub_1D52845F4((uint64_t)__dst.__r_.__value_.__l.__data_);
          LODWORD(v182) = *((_DWORD *)a3 + 2);
          LODWORD(__p) = v168;
          *(_QWORD *)(a1 + 1320) = *sub_1D5294254((int *)&__p, (unsigned int *)&v182);
          size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
          if (!__dst.__r_.__value_.__l.__size_)
            return;
          v169 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
          do
            v30 = __ldaxr(v169);
          while (__stlxr(v30 - 1, v169));
LABEL_349:
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
          return;
        }
        v31 = 4;
      }
      *(_DWORD *)(a1 + 1340) = v31;
      *(_BYTE *)(a1 + 1344) = 1;
      goto LABEL_346;
    }
    if (*a3 > 0x44u)
    {
      if (v6 != 69)
      {
        if (v6 != 140)
          return;
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) != 0)
          return;
        sub_1D52917E4(a1, &__dst);
        v27 = sub_1D52845F4((uint64_t)__dst.__r_.__value_.__l.__data_);
        LODWORD(v182) = *((_DWORD *)a3 + 2);
        LODWORD(__p) = v27;
        *(_QWORD *)(a1 + 1320) = *sub_1D5294254((int *)&__p, (unsigned int *)&v182);
        size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
        if (!__dst.__r_.__value_.__l.__size_)
          return;
        v29 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        goto LABEL_349;
      }
      if (a3[1] != 3 || *((_DWORD *)a3 + 1) != 4)
        return;
      memset(&__dst, 0, sizeof(__dst));
      v95 = sub_1D52AE554(a1, (uint64_t)a3, &__dst.__r_.__value_.__l.__data_);
      v70 = (unsigned __int16 *)__dst.__r_.__value_.__r.__words[0];
      if (v95)
      {
        v96 = *(unsigned __int8 *)(a1 + 1316);
        *(uint32x4_t *)(a1 + 1300) = vmovl_u16(*(uint16x4_t *)__dst.__r_.__value_.__l.__data_);
        if (!v96)
          *(_BYTE *)(a1 + 1316) = 1;
LABEL_192:
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v70;
LABEL_341:
        operator delete(v70);
        return;
      }
    }
    else
    {
      if (v6 != 61)
      {
        if (v6 == 62
          && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) == 0
          && *((_DWORD *)a3 + 1) == 1)
        {
          *(_DWORD *)(a1 + 1332) = sub_1D52AD670((uint64_t)a3);
        }
        return;
      }
      if (a3[1] != 3 || *((_DWORD *)a3 + 1) != 4)
        return;
      memset(&__dst, 0, sizeof(__dst));
      v77 = sub_1D52AE554(a1, (uint64_t)a3, &__dst.__r_.__value_.__l.__data_);
      v70 = (unsigned __int16 *)__dst.__r_.__value_.__r.__words[0];
      if (v77
        && *((_DWORD *)a3 + 1) == (uint64_t)(__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0]) >> 1)
      {
        __p = 0uLL;
        v176 = 0;
        v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 520))(a1);
        if ((v78 & 0xFFFFFFFD) == 0xC)
        {
          v79 = __dst.__r_.__value_.__r.__words[0];
          if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
          {
            v80 = 0;
            v81 = 0;
            v82 = 14 - v78;
            v83 = (double *)*((_QWORD *)&__p + 1);
            do
            {
              v84 = (double)(*(unsigned __int16 *)(v79 + 2 * v80) >> v82);
              if (v83 >= v176)
              {
                v86 = (double *)__p;
                v87 = (uint64_t)((uint64_t)v83 - __p) >> 3;
                v88 = v87 + 1;
                if ((unint64_t)(v87 + 1) >> 61)
                  sub_1D5282B8C();
                v89 = (uint64_t)v176 - __p;
                if ((uint64_t)((uint64_t)v176 - __p) >> 2 > v88)
                  v88 = v89 >> 2;
                if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
                  v90 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v90 = v88;
                if (v90)
                {
                  v91 = (char *)sub_1D5282D28((uint64_t)&v176, v90);
                  v83 = (double *)*((_QWORD *)&__p + 1);
                  v86 = (double *)__p;
                }
                else
                {
                  v91 = 0;
                }
                v92 = (double *)&v91[8 * v87];
                *v92 = v84;
                v85 = v92 + 1;
                while (v83 != v86)
                {
                  v93 = *((_QWORD *)v83-- - 1);
                  *((_QWORD *)v92-- - 1) = v93;
                }
                *(_QWORD *)&__p = v92;
                *((_QWORD *)&__p + 1) = v85;
                v176 = (double *)&v91[8 * v90];
                if (v86)
                  operator delete(v86);
              }
              else
              {
                *v83 = v84;
                v85 = v83 + 1;
              }
              *((_QWORD *)&__p + 1) = v85;
              v79 = __dst.__r_.__value_.__r.__words[0];
              v83 = v85;
              v80 = ++v81;
            }
            while (v81 < (unint64_t)((uint64_t)(__dst.__r_.__value_.__l.__size_
                                                     - __dst.__r_.__value_.__r.__words[0]) >> 1));
          }
          sub_1D52AFE84(":BLACKLEVELS", (const void **)a2, (void **)&v182);
          __src = &v182;
          v94 = (char *)sub_1D52BA2C8((uint64_t **)(a1 + 264), (void **)&v182, (uint64_t)&unk_1D544A5C4, (_OWORD **)&__src)+ 56;
          if (v94 != (char *)&__p)
            sub_1D528FA34(v94, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3);
          if (SHIBYTE(v183[0]) < 0)
            operator delete((void *)v182);
        }
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        v70 = (unsigned __int16 *)__dst.__r_.__value_.__r.__words[0];
      }
    }
LABEL_191:
    if (!v70)
      return;
    goto LABEL_192;
  }
  if (*a3 > 0xFu)
  {
    switch(*a3)
    {
      case 0x10u:
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1)
          && *((_DWORD *)a3 + 1) >= 0x84u
          && a3[1] == 7)
        {
          if (*(char *)(a2 + 23) < 0)
            sub_1D5290130(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
          else
            __dst = *(std::string *)a2;
          std::string::append(&__dst, ":DataDump", 9uLL);
          sub_1D52917E4(a1, &v182);
          __src = (void *)(*((unsigned int *)a3 + 2) + 128);
          sub_1D5282FE0(v173, (unint64_t *)&__src);
          sub_1D5285164((uint64_t *)&__p, (uint64_t *)&v182, (uint64_t)v173, 0);
          sub_1D5282EB4((uint64_t)&v182);
          sub_1D52917E4(a1, &v182);
          v107 = sub_1D528479C(v182);
          sub_1D5282EB4((uint64_t)&v182);
          sub_1D52917E4(a1, &v182);
          v108 = sub_1D528479C(v182);
          sub_1D5282EB4((uint64_t)&v182);
          *(_QWORD *)&v182 = v107 | 0x10000000000;
          DWORD2(v182) = v108;
          __src = &__dst;
          v109 = sub_1D52B3E7C((uint64_t **)(a1 + 120), (void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&__src);
          sub_1D5282A44((char *)v109 + 56, (char *)&v182, (uint64_t)&v182 + 12, 3uLL);
          sub_1D5285200((uint64_t *)&__p);
          goto LABEL_339;
        }
        break;
      case 0x11u:
        if (a3[1] == 4 && *((_DWORD *)a3 + 1) == 1)
          (*(void (**)(uint64_t, std::string::size_type, unsigned __int16 *))(*(_QWORD *)a1 + 720))(a1, a2, a3);
        break;
      case 0x12u:
      case 0x13u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Cu:
        return;
      case 0x14u:
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) == 0)
        {
          sub_1D52917E4(a1, &__p);
          LODWORD(__src) = *((_DWORD *)a3 + 2);
          sub_1D5282F74((int *)&v182, (int *)&__src);
          sub_1D5285164((uint64_t *)&__dst, (uint64_t *)&__p, (uint64_t)&v182, 0);
          v55 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1))
          {
            v56 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          __p = 0uLL;
          v176 = 0;
          sub_1D52917E4(a1, &v182);
          v58 = v182;
          LODWORD(v173[0]) = 4;
          sub_1D5285A24(&__src, (unsigned int *)v173);
          v59 = sub_1D52849DC(v58, (unsigned int *)&__src, (uint64_t)&__p);
          v60 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
          if (*((_QWORD *)&v182 + 1))
          {
            v61 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          if (v59)
          {
            v63 = 0;
            if (sub_1D52B18D0((const void **)&__p, "NRW "))
            {
              for (i = 0; i != 4; ++i)
              {
                sub_1D52917E4(a1, &v182);
                v65 = sub_1D52846FC(v182);
                v66 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
                if (*((_QWORD *)&v182 + 1))
                {
                  v67 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
                  do
                    v68 = __ldaxr(v67);
                  while (__stlxr(v68 - 1, v67));
                  if (!v68)
                  {
                    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                    std::__shared_weak_count::__release_weak(v66);
                  }
                }
                v63 = (v65 - 48) | (v63 << 8);
              }
              v59 = 1;
              *(_BYTE *)(a1 + 1329) = 1;
            }
            else
            {
              v59 = 0;
            }
          }
          else
          {
            v63 = 0;
          }
          if (SHIBYTE(v176) < 0)
            operator delete((void *)__p);
          sub_1D5285200((uint64_t *)&__dst);
          if (v59)
          {
            if (v63 <= 0x10000)
              v148 = 5096;
            else
              v148 = 56;
            if (v148 + 16 <= (unint64_t)*((unsigned int *)a3 + 1) && a3[1] == 7)
            {
              sub_1D52917E4(a1, &__p);
              *(_QWORD *)&v182 = v148 + *((unsigned int *)a3 + 2);
              sub_1D528594C(&__src, (uint64_t *)&v182);
              sub_1D5285164((uint64_t *)&__dst, (uint64_t *)&__p, (uint64_t)&__src, 0);
              sub_1D5282EB4((uint64_t)&__p);
              sub_1D52AFE84(":0x14", (const void **)a2, (void **)&__p);
              sub_1D52917E4(a1, &v182);
              v149 = sub_1D52847F8(v182);
              sub_1D5282EB4((uint64_t)&v182);
              sub_1D52917E4(a1, &v182);
              v150 = sub_1D52847F8(v182);
              sub_1D5282EB4((uint64_t)&v182);
              sub_1D52917E4(a1, &v182);
              v151 = sub_1D52847F8(v182);
              sub_1D5282EB4((uint64_t)&v182);
              sub_1D52917E4(a1, &v182);
              v152 = sub_1D52847F8(v182);
              sub_1D5282EB4((uint64_t)&v182);
              LODWORD(v182) = 4 * v149;
              DWORD1(v182) = v151 + v150;
              DWORD2(v182) = 4 * v152;
              __src = &__p;
              v153 = sub_1D52B3E7C((uint64_t **)(a1 + 120), (void **)&__p, (uint64_t)&unk_1D544A5C4, (__int128 **)&__src);
              sub_1D5282A44((char *)v153 + 56, (char *)&v182, (uint64_t)&v182 + 12, 3uLL);
              if (SHIBYTE(v176) < 0)
                operator delete((void *)__p);
              sub_1D5285200((uint64_t *)&__dst);
            }
          }
          else if (*((_DWORD *)a3 + 1) == 2560 && a3[1] == 7)
          {
            sub_1D52AFE84(":0x14", (const void **)a2, (void **)&__dst.__r_.__value_.__l.__data_);
            sub_1D52917E4(a1, &v182);
            LODWORD(v173[0]) = *((_DWORD *)a3 + 2) + 1248;
            sub_1D5282F74((int *)&__src, (int *)v173);
            sub_1D5285164((uint64_t *)&__p, (uint64_t *)&v182, (uint64_t)&__src, 0);
            sub_1D5282EB4((uint64_t)&v182);
            sub_1D52917E4(a1, &__src);
            sub_1D5293C20((uint64_t *)&v182, (uint64_t *)&__src, 2);
            sub_1D5282EB4((uint64_t)&__src);
            sub_1D52917E4(a1, &__src);
            v154 = sub_1D528479C((uint64_t)__src);
            sub_1D5282EB4((uint64_t)&__src);
            sub_1D52917E4(a1, &__src);
            v155 = sub_1D528479C((uint64_t)__src);
            sub_1D5282EB4((uint64_t)&__src);
            __src = (void *)(v154 | 0x10000000000);
            LODWORD(v180) = v155;
            v173[0] = &__dst;
            v156 = sub_1D52B3E7C((uint64_t **)(a1 + 120), (void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)v173);
            sub_1D5282A44((char *)v156 + 56, (char *)&__src, (uint64_t)&v180 + 4, 3uLL);
            sub_1D5293C98((uint64_t *)&v182);
            sub_1D5285200((uint64_t *)&__p);
            goto LABEL_339;
          }
        }
        break;
      case 0x1Bu:
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) == 0)
        {
          memset(&__dst, 0, sizeof(__dst));
          if (a3[1] == 3 && *((_DWORD *)a3 + 1) >= 7u)
          {
            v69 = sub_1D52AE554(a1, (uint64_t)a3, &__dst.__r_.__value_.__l.__data_);
            v70 = (unsigned __int16 *)__dst.__r_.__value_.__r.__words[0];
            if (!v69)
              goto LABEL_191;
            *(_DWORD *)(a1 + 1280) = *(unsigned __int16 *)__dst.__r_.__value_.__l.__data_;
            v71 = v70[3];
            v72 = v70[4];
            *(_QWORD *)(a1 + 1284) = 0;
            *(_DWORD *)(a1 + 1292) = v71;
            *(_DWORD *)(a1 + 1296) = v72;
            goto LABEL_192;
          }
        }
        break;
      case 0x1Du:
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) == 0)
        {
          sub_1D52917E4(a1, &__p);
          LODWORD(__src) = *((_DWORD *)a3 + 2);
          sub_1D5282F74((int *)&v182, (int *)&__src);
          sub_1D5285164((uint64_t *)&__dst, (uint64_t *)&__p, (uint64_t)&v182, 0);
          v43 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1))
          {
            v44 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          *(_DWORD *)(a1 + 1264) = 0;
          v46 = *((_DWORD *)a3 + 1);
          v47 = MEMORY[0x1E0C80978];
          while (1)
          {
            sub_1D52917E4(a1, &__p);
            v48 = sub_1D52846FC(__p);
            v50 = v46-- != 0 && v48 != 0;
            v51 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
            if (*((_QWORD *)&__p + 1))
            {
              v52 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            if (!v50)
              break;
            if ((*(_DWORD *)(v47 + 4 * v48 + 60) & 0x400) != 0)
              v54 = v48 - 48;
            else
              v54 = (v48 - 10 * ((205 * v48) >> 11));
            *(_DWORD *)(a1 + 1264) = v54 + 10 * *(_DWORD *)(a1 + 1264);
          }
          goto LABEL_330;
        }
        break;
      case 0x1Eu:
        v73 = *(const void **)(a1 + 1584);
        if (v73)
          CFRelease(v73);
        LODWORD(__p) = 0;
        sub_1D5285A24(&__dst, (unsigned int *)&__p);
        v74 = sub_1D52A7E28((uint64_t)a3, (unsigned int *)&__dst);
        if (v74 == 4)
        {
          v106 = (CGColorSpace *)sub_1D543ECE0();
          v76 = CGColorSpaceRetain(v106);
        }
        else
        {
          if (v74 == 2)
            v75 = (CGColorSpace *)sub_1D543EAE8();
          else
            v75 = (CGColorSpace *)sub_1D543EA64();
          v76 = CGColorSpaceRetain(v75);
        }
        *(_QWORD *)(a1 + 1584) = v76;
        break;
      default:
        if (v6 == 37
          && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) == 0
          && a3[1] == 7
          && *((_DWORD *)a3 + 1) >= 4u)
        {
          sub_1D52917E4(a1, &__p);
          LODWORD(__src) = *((_DWORD *)a3 + 2);
          sub_1D5282F74((int *)&v182, (int *)&__src);
          sub_1D5285164((uint64_t *)&__dst, (uint64_t *)&__p, (uint64_t)&v182, 0);
          v32 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1))
          {
            v33 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          sub_1D52917E4(a1, &__p);
          v35 = sub_1D52846FC(__p);
          v36 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1))
          {
            v37 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          v39 = (exp2((double)v35 / 12.0 + -5.0) * 100.0);
          switch(v35)
          {
            case '<':
              LODWORD(__src) = 100;
              sub_1D52AFE84(":ISOInfo", (const void **)a2, (void **)&__p);
              *(_QWORD *)&v182 = &__p;
              v158 = (char *)sub_1D52BA2C8((uint64_t **)(a1 + 192), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v182);
              sub_1D5282A44(v158 + 56, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
              if (SHIBYTE(v176) < 0)
                operator delete((void *)__p);
              sub_1D52AFE84(":ISOInfo", (const void **)a2, (void **)&__p);
              *(_QWORD *)&v182 = &__p;
              v41 = sub_1D52D8024((uint64_t **)(a1 + 1208), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v182);
              v42 = 0xBFE0000000000000;
              break;
            case '@':
              LODWORD(__src) = 125;
              sub_1D52AFE84(":ISOInfo", (const void **)a2, (void **)&__p);
              *(_QWORD *)&v182 = &__p;
              v157 = (char *)sub_1D52BA2C8((uint64_t **)(a1 + 192), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v182);
              sub_1D5282A44(v157 + 56, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
              if (SHIBYTE(v176) < 0)
                operator delete((void *)__p);
              sub_1D52AFE84(":ISOInfo", (const void **)a2, (void **)&__p);
              *(_QWORD *)&v182 = &__p;
              v41 = sub_1D52D8024((uint64_t **)(a1 + 1208), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v182);
              v42 = 0xBFC5C28F5C28F5C3;
              break;
            case 'D':
              LODWORD(__src) = 160;
              sub_1D52AFE84(":ISOInfo", (const void **)a2, (void **)&__p);
              *(_QWORD *)&v182 = &__p;
              v40 = (char *)sub_1D52BA2C8((uint64_t **)(a1 + 192), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v182);
              sub_1D5282A44(v40 + 56, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
              if (SHIBYTE(v176) < 0)
                operator delete((void *)__p);
              sub_1D52AFE84(":ISOInfo", (const void **)a2, (void **)&__p);
              *(_QWORD *)&v182 = &__p;
              v41 = sub_1D52D8024((uint64_t **)(a1 + 1208), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v182);
              v42 = 0x3FC5C28F5C28F5C3;
              break;
            default:
              LODWORD(__src) = v39;
              sub_1D52AFE84(":ISOInfo", (const void **)a2, (void **)&__p);
              *(_QWORD *)&v182 = &__p;
              v159 = (char *)sub_1D52BA2C8((uint64_t **)(a1 + 192), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v182);
              sub_1D5282A44(v159 + 56, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
              if (SHIBYTE(v176) < 0)
                operator delete((void *)__p);
              sub_1D52AFE84(":ISOInfo", (const void **)a2, (void **)&__p);
              *(_QWORD *)&v182 = &__p;
              v41 = sub_1D52D8024((uint64_t **)(a1 + 1208), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v182);
              v42 = 0x3FE0000000000000;
              break;
          }
          *((_QWORD *)v41 + 7) = v42;
          if (SHIBYTE(v176) < 0)
            operator delete((void *)__p);
          (*(void (**)(__int128 *__return_ptr, uint64_t, std::string::size_type))(*(_QWORD *)a1 + 392))(&__p, a1, a2);
          v160 = sub_1D5294144(a1 + 192, (void **)&__p);
          v161 = (void **)(a1 + 200) != v160 && v160[8] != v160[7];
          if (SHIBYTE(v176) < 0)
            operator delete((void *)__p);
          if (!v161)
          {
            LODWORD(v182) = v39;
            *(_QWORD *)&__p = a2;
            v162 = sub_1D52B3E7C((uint64_t **)(a1 + 192), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&__p);
            sub_1D5282A44((char *)v162 + 56, (char *)&v182, (uint64_t)&v182 + 4, 1uLL);
          }
          if (*((_DWORD *)a3 + 1) >= 6u)
          {
            sub_1D52917E4(a1, &__p);
            v163 = __p;
            LODWORD(__src) = *((_DWORD *)a3 + 2) + 4;
            sub_1D5282F74((int *)&v182, (int *)&__src);
            (*(void (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)v163 + 40))(v163, &v182, 0);
            sub_1D5282EB4((uint64_t)&__p);
            sub_1D52917E4(a1, &__p);
            v164 = sub_1D528479C(__p);
            sub_1D5282EB4((uint64_t)&__p);
            sub_1D52AFE84(":ISOExpansion", (const void **)a2, (void **)&__p);
            sub_1D5395D98((uint64_t *)a1, &__p, v164);
            if (SHIBYTE(v176) < 0)
              operator delete((void *)__p);
          }
LABEL_330:
          sub_1D5285200((uint64_t *)&__dst);
        }
        break;
    }
    return;
  }
  if (v6 == 2)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) != 0)
      return;
    if ((a3[1] | 4) != 7)
      return;
    if (!*((_DWORD *)a3 + 1))
      return;
    LODWORD(__p) = 0;
    sub_1D5285A24(&__dst, (unsigned int *)&__p);
    if (sub_1D52A7E28((uint64_t)a3, (unsigned int *)&__dst))
    {
      LODWORD(__src) = 0;
      sub_1D5285A24(&v182, (unsigned int *)&__src);
      if (sub_1D52A7E28((uint64_t)a3, (unsigned int *)&v182) != 1)
        return;
    }
    if (a3[1] == 7)
    {
      v104 = *((_DWORD *)a3 + 1);
      if (v104 < 2)
      {
LABEL_225:
        LODWORD(__src) = v104 != 1;
        sub_1D5285A24(&v182, (unsigned int *)&__src);
        LODWORD(__p) = sub_1D52A7E28((uint64_t)a3, (unsigned int *)&v182);
        __dst.__r_.__value_.__r.__words[0] = a2;
        v105 = sub_1D52B3E7C((uint64_t **)(a1 + 192), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&__dst);
        sub_1D5282A44((char *)v105 + 56, (char *)&__p, (uint64_t)&__p + 4, 1uLL);
        return;
      }
      LODWORD(__p) = 0;
      sub_1D5285A24(&__dst, (unsigned int *)&__p);
      if (!sub_1D52A7E28((uint64_t)a3, (unsigned int *)&__dst))
      {
        LODWORD(__src) = 1;
        sub_1D5285A24(&v182, (unsigned int *)&__src);
        if (!sub_1D52A7E28((uint64_t)a3, (unsigned int *)&v182))
          return;
      }
    }
    v104 = *((_DWORD *)a3 + 1);
    goto LABEL_225;
  }
  if (v6 != 4)
  {
    if (v6 != 12)
      return;
    v25 = !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) && a3[1] == 5;
    if (!v25 || *((_DWORD *)a3 + 1) != 4)
      return;
    if (*(char *)(a2 + 23) < 0)
      sub_1D5290130(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
    else
      __dst = *(std::string *)a2;
    std::string::append(&__dst, ":ColorBalance1", 0xEuLL);
    sub_1D52917E4(a1, &v182);
    LODWORD(v173[0]) = *((_DWORD *)a3 + 2);
    sub_1D5282F74((int *)&__src, (int *)v173);
    sub_1D5285164((uint64_t *)&__p, (uint64_t *)&v182, (uint64_t)&__src, 0);
    sub_1D5282EB4((uint64_t)&v182);
    v125 = 0;
    v182 = 0uLL;
    v183[0] = 0;
    do
    {
      sub_1D52917E4(a1, &__src);
      v126 = sub_1D52847F8((uint64_t)__src);
      v128 = v180;
      if (v180)
      {
        p_shared_owners = (unint64_t *)&v180->__shared_owners_;
        do
          v130 = __ldaxr(p_shared_owners);
        while (__stlxr(v130 - 1, p_shared_owners));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
      }
      v131 = (char *)*((_QWORD *)&v182 + 1);
      if (*((_QWORD *)&v182 + 1) >= v183[0])
      {
        v133 = (char *)v182;
        v134 = (uint64_t)(*((_QWORD *)&v182 + 1) - v182) >> 2;
        v135 = v134 + 1;
        if ((unint64_t)(v134 + 1) >> 62)
          sub_1D5282B8C();
        v136 = v183[0] - v182;
        if ((uint64_t)(v183[0] - v182) >> 1 > v135)
          v135 = v136 >> 1;
        if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL)
          v137 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v137 = v135;
        if (v137)
        {
          v138 = (char *)sub_1D5282BA0((uint64_t)v183, v137);
          v131 = (char *)*((_QWORD *)&v182 + 1);
          v133 = (char *)v182;
        }
        else
        {
          v138 = 0;
        }
        v139 = &v138[4 * v134];
        *(_DWORD *)v139 = v126;
        v132 = v139 + 4;
        while (v131 != v133)
        {
          v140 = *((_DWORD *)v131 - 1);
          v131 -= 4;
          *((_DWORD *)v139 - 1) = v140;
          v139 -= 4;
        }
        *(_QWORD *)&v182 = v139;
        *((_QWORD *)&v182 + 1) = v132;
        v183[0] = &v138[4 * v137];
        if (v133)
          operator delete(v133);
      }
      else
      {
        **((_DWORD **)&v182 + 1) = v126;
        v132 = v131 + 4;
      }
      *((_QWORD *)&v182 + 1) = v132;
      ++v125;
    }
    while (v125 != 8);
    v141 = (_DWORD *)v182;
    v142 = *(_DWORD *)(v182 + 4);
    if (v142 != *(_DWORD *)(v182 + 12) || v142 != *(_DWORD *)(v182 + 20) || v142 != *(_DWORD *)(v182 + 28))
    {
      v143 = 0;
      v144 = 0;
      do
      {
        v145 = &v141[v143 + 1];
        if (*v145)
        {
          LODWORD(v127) = v141[v143];
          v127 = (double)*(unint64_t *)&v127 / (double)*v145 * 256.0;
          v141[v143] = llround(v127);
        }
        else
        {
          *v145 = 256;
          v145 = &v141[2 * v144];
        }
        *v145 = 256;
        ++v144;
        v143 += 2;
      }
      while (v143 != 8);
    }
    v146 = v141[4];
    LODWORD(__src) = *v141;
    HIDWORD(__src) = v146;
    v180 = (std::__shared_weak_count *)__PAIR64__(v141[6], v141[2]);
    v173[0] = &__dst;
    v147 = sub_1D52B3E7C((uint64_t **)(a1 + 120), (void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)v173);
    sub_1D5282A44((char *)v147 + 56, (char *)&__src, (uint64_t)&v181, 4uLL);
    if ((_QWORD)v182)
    {
      *((_QWORD *)&v182 + 1) = v182;
      operator delete((void *)v182);
    }
LABEL_338:
    sub_1D5285200((uint64_t *)&__p);
LABEL_339:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_340;
  }
  if (a3[1] == 2)
  {
    memset(&__dst, 0, sizeof(__dst));
    v97 = sub_1D52ADD1C(a1, (uint64_t)a3, &__dst, 1);
    v98 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if (v97)
    {
      v99 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(__dst.__r_.__value_.__r.__words[2])
          : __dst.__r_.__value_.__l.__size_;
      if (v99 == 3)
      {
        p_dst = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        data_low = LOWORD(p_dst->__r_.__value_.__l.__data_);
        v102 = p_dst->__r_.__value_.__s.__data_[2];
        if (data_low == 21070 && v102 == 87)
          *(_BYTE *)(a1 + 1329) = 1;
      }
    }
    if (v98 < 0)
    {
LABEL_340:
      v70 = (unsigned __int16 *)__dst.__r_.__value_.__r.__words[0];
      goto LABEL_341;
    }
  }
}

void sub_1D5398010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  sub_1D5282EB4((uint64_t)&a32);
  sub_1D5285200((uint64_t *)&a15);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1D539849C(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  sub_1D52B0DE4(a1, 0, __p);
  v2 = sub_1D52B0BBC(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D53984F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D539850C(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  sub_1D52B0DE4(a1, 0, __p);
  v2 = sub_1D52B0C2C(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D5398560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1D539857C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 448))(a1);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 456))(a1);
  return ((v3 & 0xFFFFFFFF00000000) + v2) & 0xFFFFFFFF00000000 | (v3 + v2);
}

uint64_t sub_1D53985CC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1316))
    return *(_QWORD *)(a1 + 1300);
  else
    return sub_1D529192C(a1);
}

uint64_t sub_1D53985F4(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
  return 0;
}

unint64_t sub_1D5398618(uint64_t a1)
{
  unint64_t v2;
  void *__p[2];
  char v5;

  sub_1D52B0DE4(a1, 0, __p);
  v2 = sub_1D52B0D58(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D539866C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D5398688(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1328);
}

void sub_1D5398690(uint64_t a1@<X0>, char **a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  void *__p[2];
  char v16;
  __int128 v17;

  sub_1D52B08D0(a1, (uint64_t)a2);
  sub_1D52B0DE4(a1, 1, __p);
  sub_1D52AFFE8(a1, __p, &v17);
  if (v16 < 0)
    operator delete(__p[0]);
  sub_1D52850A0(__p, "IFD0:SUBIFD2");
  sub_1D52AFFE8(a1, __p, &v14);
  if (v16 < 0)
    operator delete(__p[0]);
  sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE:SUBIFD0");
  sub_1D52AFFE8(a1, __p, &v13);
  if (v16 < 0)
    operator delete(__p[0]);
  if ((_QWORD)v17)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v17 + 64))(v17, *(_QWORD *)(a1 + 1584));
    sub_1D52B0A7C(a2, &v17);
  }
  if ((_QWORD)v14)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v14 + 64))(v14, *(_QWORD *)(a1 + 1584));
    sub_1D52B0A7C(a2, &v14);
  }
  if ((_QWORD)v13)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v13 + 64))(v13, *(_QWORD *)(a1 + 1584));
    sub_1D52B0A7C(a2, &v13);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1D5398860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a12);
  sub_1D5282EB4(v19 - 32);
  sub_1D5282E44((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1D53988F0(std::string *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, int a4@<W3>, void **a5@<X8>)
{
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  double *v30;
  void *exception;
  _BYTE v32[324];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a4 != 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (std::string::compare(this, "encrypted") && std::string::compare(this, "encrypted2")
    || (v9 = *(_QWORD *)(a2 + 1240)) == 0
    || *(_QWORD *)(v9 + 24) < 0x144uLL
    || *(_QWORD *)(a2 + 1256) > 0x13BuLL)
  {
    sub_1D5291CB0(a2, (void **)&this->__r_.__value_.__l.__data_, a3, 3, a5);
    return;
  }
  v10 = byte_1D544DEA0[*(unsigned __int8 *)(a2 + 1264)];
  v11 = byte_1D544DEA0[((HIWORD(*(_DWORD *)(a2 + 1268)) ^ BYTE1(*(_DWORD *)(a2 + 1268)) ^ *(_DWORD *)(a2 + 1268)) ^ HIBYTE(*(_DWORD *)(a2 + 1268)))
                     + 256];
  v12 = sub_1D52E658C(v9);
  v13 = 0;
  v14 = 96;
  do
  {
    v11 += v14 * v10;
    ++v14;
    v32[v13] = *(_BYTE *)(v12 + v13) ^ v11;
    ++v13;
  }
  while (v13 != 324);
  v15 = &v32[*(_QWORD *)(a2 + 1256)];
  if (!std::string::compare(this, "encrypted"))
  {
    v25 = *v15;
    v26 = v15[2];
    v27 = v15[4];
    v23 = v15[6];
    if (*(_QWORD *)(a2 + 1272) == 1)
    {
      v16 = (double)(v25 | (v15[1] << 8));
      v17 = (double)(v26 | (v15[3] << 8));
      v19 = (double)(v27 | (v15[5] << 8));
      v24 = v15[7];
      goto LABEL_16;
    }
    v16 = (double)(v15[1] | (v25 << 8));
    v17 = (double)(v15[3] | (v26 << 8));
    v19 = (double)(v15[5] | (v27 << 8));
    v29 = v15[7];
LABEL_19:
    v28 = v29 | (v23 << 8);
    goto LABEL_20;
  }
  v16 = 1.0;
  v17 = 1.0;
  v18 = 1.0;
  v19 = 1.0;
  if (!std::string::compare(this, "encrypted2"))
  {
    v20 = v15[2];
    v21 = *v15;
    v22 = v15[6];
    v23 = v15[4];
    if (*(_QWORD *)(a2 + 1272) == 1)
    {
      v16 = (double)(v20 | (v15[3] << 8));
      v17 = (double)(v21 | (v15[1] << 8));
      v19 = (double)(v22 | (v15[7] << 8));
      v24 = v15[5];
LABEL_16:
      v28 = v23 | (v24 << 8);
LABEL_20:
      v18 = (double)v28;
      goto LABEL_21;
    }
    v16 = (double)(v15[3] | (v20 << 8));
    v17 = (double)(v15[1] | (v21 << 8));
    v19 = (double)(v15[7] | (v22 << 8));
    v29 = v15[5];
    goto LABEL_19;
  }
LABEL_21:
  sub_1D528EB68(a5, 3uLL);
  v30 = (double *)*a5;
  *v30 = v16 / v17;
  v30[1] = 1.0;
  v30[2] = v18 / v19;
}

void sub_1D5398BF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5398C08(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  int *v4;
  int v5;
  int v6;
  uint64_t result;
  void *__p[2];
  char v9;

  v2 = a1 + 656;
  sub_1D52B0DE4(a1, 0, __p);
  v3 = sub_1D5294144(v2, __p);
  if ((void **)(a1 + 664) == v3 || (v4 = (int *)v3[7], v3[8] == v4))
  {
    LOBYTE(v5) = 0;
    v6 = 0;
  }
  else
  {
    v5 = *v4;
    v6 = 1;
  }
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (v6)
      goto LABEL_7;
LABEL_9:
    LOWORD(result) = sub_1D52919BC();
    return (unsigned __int16)result;
  }
  if (!v6)
    goto LABEL_9;
LABEL_7:
  LODWORD(result) = ~(-1 << v5);
  return (unsigned __int16)result;
}

void sub_1D5398CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D5398CCC(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  unsigned int *v4;
  uint64_t v5;
  char v6;
  void *__p[2];
  char v9;

  v2 = a1 + 656;
  sub_1D52B0DE4(a1, 0, __p);
  v3 = sub_1D5294144(v2, __p);
  if ((void **)(a1 + 664) == v3 || (v4 = (unsigned int *)v3[7], v3[8] == v4))
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v5 = *v4;
    v6 = 1;
  }
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if ((v6 & 1) != 0)
      return v5;
    return sub_1D52919C4();
  }
  if ((v6 & 1) == 0)
    return sub_1D52919C4();
  return v5;
}

void sub_1D5398D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D5398D88(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void **v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  v2 = a1 + 584;
  sub_1D52B0DE4(a1, 0, __p);
  v3 = sub_1D5294144(v2, __p);
  v4 = v3;
  if ((void **)(a1 + 592) == v3)
    v5 = 0;
  else
    v5 = *((unsigned int *)v3 + 14);
  if (v8 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 592) == v4)
    return sub_1D52919D4();
  return v5;
}

void sub_1D5398E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D5398E30(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1280);
}

uint64_t sub_1D5398E38(uint64_t a1)
{
  return *(_QWORD *)(a1 + 1320);
}

BOOL sub_1D5398E40(uint64_t a1, void **a2, _QWORD *a3)
{
  void **v5;

  v5 = sub_1D5294144(a1 + 1208, a2);
  if ((void **)(a1 + 1216) != v5)
    *a3 = v5[7];
  return a1 + 1216 != (_QWORD)v5;
}

uint64_t sub_1D5398E84(uint64_t a1)
{
  void *exception;

  if (!*(_BYTE *)(a1 + 1336))
  {
    if (!*(_BYTE *)(a1 + 1344))
    {
      if (!*(_BYTE *)(a1 + 1329))
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 536))(a1) == 34713)
          return 3;
        else
          return 2;
      }
      return 5;
    }
    return *(unsigned int *)(a1 + 1340);
  }
  if (*(_BYTE *)(a1 + 1344))
    return *(unsigned int *)(a1 + 1340);
  if (*(_BYTE *)(a1 + 1329))
    return 5;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 520))(a1) == 12)
    return 6;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 520))(a1) != 14)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return 100006;
}

void sub_1D5398F68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1D5398F7C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 1332) == 3;
}

BOOL sub_1D5398F8C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 1332) == 2;
}

void sub_1D5398F9C(_BYTE *a1@<X0>, uint64_t *a2@<X8>)
{
  std::string *v4;
  uint64_t v5;
  char v6;
  std::string::size_type size;
  std::string::size_type v8;
  int64_t v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  int v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  void *__p[2];
  uint64_t v63;
  std::string v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t *v69;

  v4 = &v64;
  sub_1D5293780((uint64_t)a1, &v64);
  v5 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  size = v64.__r_.__value_.__l.__size_;
  v8 = v64.__r_.__value_.__r.__words[0];
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  else
    v9 = v64.__r_.__value_.__l.__size_;
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v64;
  else
    v10 = (std::string *)v64.__r_.__value_.__r.__words[0];
  if (v9 >= 5)
  {
    v11 = (std::string *)((char *)v10 + v9);
    v12 = v10;
    while (1)
    {
      v13 = (std::string *)memchr(v12, 78, v9 - 4);
      if (!v13)
      {
LABEL_15:
        v4 = &v64;
        goto LABEL_16;
      }
      if (LODWORD(v13->__r_.__value_.__l.__data_) == 1330334030 && v13->__r_.__value_.__s.__data_[4] == 78)
        break;
      v12 = (std::string *)((char *)&v13->__r_.__value_.__l.__data_ + 1);
      v9 = (char *)v11 - (char *)v12;
      if ((char *)v11 - (char *)v12 < 5)
        goto LABEL_15;
    }
    v4 = &v64;
    if (v13 != v11 && v13 == v10)
    {
      std::string::erase(&v64, 0, 5uLL);
      v5 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
      size = v64.__r_.__value_.__l.__size_;
      v8 = v64.__r_.__value_.__r.__words[0];
      v6 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
    }
  }
LABEL_16:
  if (v6 >= 0)
    v15 = v5;
  else
    v15 = size;
  if (v6 < 0)
    v4 = (std::string *)v8;
  if (v15 >= 7)
  {
    v16 = (std::string *)((char *)v4 + v15);
    v17 = v4;
    do
    {
      v18 = (std::string *)memchr(v17, 67, v15 - 6);
      if (!v18)
        break;
      if (LODWORD(v18->__r_.__value_.__l.__data_) == 1280266051
        && *(_DWORD *)((char *)v18->__r_.__value_.__r.__words + 3) == 1481199692)
      {
        if (v18 != v16 && v18 == v4)
          std::string::erase(&v64, 0, 7uLL);
        break;
      }
      v17 = (std::string *)((char *)&v18->__r_.__value_.__l.__data_ + 1);
      v15 = (char *)v16 - (char *)v17;
    }
    while ((char *)v16 - (char *)v17 >= 7);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1[1329])
    v20 = "nrw";
  else
    v20 = "nef";
  sub_1D52850A0(__p, v20);
  v21 = a2[2];
  v22 = a2[1];
  if (v22 >= v21)
  {
    v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 3);
    v25 = v24 + 1;
    if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *a2) >> 3);
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x555555555555555)
      v27 = 0xAAAAAAAAAAAAAAALL;
    else
      v27 = v25;
    v69 = a2 + 2;
    if (v27)
      v28 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v27);
    else
      v28 = 0;
    v29 = &v28[24 * v24];
    v65 = v28;
    v66 = v29;
    v68 = &v28[24 * v27];
    v30 = *(_OWORD *)__p;
    *((_QWORD *)v29 + 2) = v63;
    *(_OWORD *)v29 = v30;
    __p[1] = 0;
    v63 = 0;
    __p[0] = 0;
    v67 = v29 + 24;
    sub_1D5293D58(a2, &v65);
    v31 = a2[1];
    sub_1D5293F24((uint64_t)&v65);
    v32 = SHIBYTE(v63);
    a2[1] = v31;
    if (v32 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v23 = *(_OWORD *)__p;
    *(_QWORD *)(v22 + 16) = v63;
    *(_OWORD *)v22 = v23;
    a2[1] = v22 + 24;
  }
  sub_1D52850A0(__p, "nikon");
  v34 = a2[1];
  v33 = a2[2];
  if (v34 >= v33)
  {
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *a2) >> 3);
    v38 = v37 + 1;
    if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - *a2) >> 3);
    if (2 * v39 > v38)
      v38 = 2 * v39;
    if (v39 >= 0x555555555555555)
      v40 = 0xAAAAAAAAAAAAAAALL;
    else
      v40 = v38;
    v69 = a2 + 2;
    if (v40)
      v41 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v40);
    else
      v41 = 0;
    v42 = &v41[24 * v37];
    v65 = v41;
    v66 = v42;
    v68 = &v41[24 * v40];
    v43 = *(_OWORD *)__p;
    *((_QWORD *)v42 + 2) = v63;
    *(_OWORD *)v42 = v43;
    __p[1] = 0;
    v63 = 0;
    __p[0] = 0;
    v67 = v42 + 24;
    sub_1D5293D58(a2, &v65);
    v36 = a2[1];
    sub_1D5293F24((uint64_t)&v65);
    v44 = SHIBYTE(v63);
    a2[1] = v36;
    if (v44 < 0)
    {
      operator delete(__p[0]);
      v36 = a2[1];
    }
  }
  else
  {
    v35 = *(_OWORD *)__p;
    *(_QWORD *)(v34 + 16) = v63;
    *(_OWORD *)v34 = v35;
    v36 = v34 + 24;
    a2[1] = v34 + 24;
  }
  if (v36 >= a2[2])
  {
    v46 = sub_1D52B2070(a2, (__int128 *)&v64);
  }
  else
  {
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1D5290130((_BYTE *)v36, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
    }
    else
    {
      v45 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
      *(_QWORD *)(v36 + 16) = *((_QWORD *)&v64.__r_.__value_.__l + 2);
      *(_OWORD *)v36 = v45;
    }
    v46 = v36 + 24;
    a2[1] = v36 + 24;
  }
  a2[1] = v46;
  if (!(*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 824))(a1))
  {
    if (!(*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 832))(a1))
      goto LABEL_96;
    sub_1D52850A0(__p, "rawm");
    v48 = a2[1];
    v53 = a2[2];
    if (v48 >= v53)
    {
      v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - *a2) >> 3);
      v55 = v49 + 1;
      if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_1D5282B8C();
      v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - *a2) >> 3);
      if (2 * v56 > v55)
        v55 = 2 * v56;
      if (v56 >= 0x555555555555555)
        v52 = 0xAAAAAAAAAAAAAAALL;
      else
        v52 = v55;
      v69 = a2 + 2;
      if (v52)
        goto LABEL_91;
      v57 = 0;
      goto LABEL_94;
    }
LABEL_83:
    v54 = *(_OWORD *)__p;
    *(_QWORD *)(v48 + 16) = v63;
    *(_OWORD *)v48 = v54;
    a2[1] = v48 + 24;
    goto LABEL_96;
  }
  sub_1D52850A0(__p, "raws");
  v48 = a2[1];
  v47 = a2[2];
  if (v48 < v47)
    goto LABEL_83;
  v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - *a2) >> 3);
  v50 = v49 + 1;
  if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1D5282B8C();
  v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - *a2) >> 3);
  if (2 * v51 > v50)
    v50 = 2 * v51;
  if (v51 >= 0x555555555555555)
    v52 = 0xAAAAAAAAAAAAAAALL;
  else
    v52 = v50;
  v69 = a2 + 2;
  if (v52)
  {
LABEL_91:
    v57 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v52);
    goto LABEL_94;
  }
  v57 = 0;
LABEL_94:
  v58 = &v57[24 * v49];
  v65 = v57;
  v66 = v58;
  v68 = &v57[24 * v52];
  v59 = *(_OWORD *)__p;
  *((_QWORD *)v58 + 2) = v63;
  *(_OWORD *)v58 = v59;
  __p[1] = 0;
  v63 = 0;
  __p[0] = 0;
  v67 = v58 + 24;
  sub_1D5293D58(a2, &v65);
  v60 = a2[1];
  sub_1D5293F24((uint64_t)&v65);
  v61 = SHIBYTE(v63);
  a2[1] = v60;
  if (v61 < 0)
    operator delete(__p[0]);
LABEL_96:
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
}

void sub_1D53995A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  sub_1D5293F24((uint64_t)&a22);
  if (a15 < 0)
    operator delete(__p);
  sub_1D5293CCC((void ***)&__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_1D539962C(uint64_t a1)
{
  uint64_t **v1;
  uint64_t v2;
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  _BOOL4 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  void **v17;
  int v18;
  int v19;
  unsigned __int16 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  std::__shared_weak_count *size;
  unint64_t *v47;
  unint64_t v48;
  unsigned int v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unsigned int v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *v64;
  void *v65;
  BOOL v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::string *v73;
  std::string *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  void *v78;
  void *v79;
  BOOL v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::string *v87;
  std::string *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  void *v93;
  BOOL v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::string *v101;
  std::string *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void *v106;
  void *v107;
  BOOL v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::string *v115;
  std::string *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  void *v120;
  void *v121;
  BOOL v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::string *v129;
  std::string *v130;
  int v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void *v135;
  void *v136;
  BOOL v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::string *v144;
  std::string *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  void *v149;
  void *v150;
  BOOL v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::string *v158;
  std::string *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  void *v163;
  void *v164;
  BOOL v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  unsigned int v172;
  int v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  float v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  float v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  float v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  float v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  int v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  char *v197;
  char *v198;
  char *v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  char *v205;
  char *v206;
  int v207;
  char *v208;
  char *v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  char *v214;
  char *v215;
  int v216;
  char *v217;
  char *v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  char *v223;
  char *v224;
  int v225;
  _DWORD *v226;
  char *v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  char *v232;
  float *v233;
  int v234;
  float v235;
  unint64_t v236;
  int v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  int v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  float v245;
  float *v246;
  unint64_t v247;
  float *v248;
  float *v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  char *v254;
  float *v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  int v268;
  int v269;
  unint64_t v270;
  int v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  int v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  double v279;
  double *v280;
  unint64_t v281;
  double *v282;
  double *v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  char *v288;
  double *v289;
  uint64_t v290;
  int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  float v297;
  int v298;
  int v299;
  int v300;
  float v301;
  int v302;
  int v303;
  int v304;
  unsigned int v305;
  int v306;
  int v307;
  unint64_t v308;
  uint64_t v309;
  int v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  int v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  double v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  int v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  double v329;
  _BOOL4 v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  float v337;
  float v338;
  int v339;
  int v340;
  int v341;
  void *exception;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  void **v348;
  void **v349;
  void **v350;
  char **v351;
  uint64_t v352;
  uint64_t v353;
  std::__shared_weak_count *v354;
  void *v355;
  std::__shared_weak_count *v356;
  void *v357;
  std::__shared_weak_count *v358;
  unsigned int v359;
  unsigned int v360;
  std::string v361;
  std::string v362;
  unsigned int v363;
  void *__p[2];
  char v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t v368;
  void **v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372[4];

  v1 = (uint64_t **)MEMORY[0x1E0C80A78](a1);
  v4 = (uint64_t)v3;
  v5 = (uint64_t)v1;
  v6 = *v3;
  if (v6 == 51158)
  {
    if (v3[1] == 1 && *((_DWORD *)v3 + 1) == 1)
    {
      LODWORD(v372[0]) = 0;
      sub_1D5285A24(&v366, (unsigned int *)v372);
      if (sub_1D52B19D0(v4, (unsigned int *)&v366) == 1)
        *(_BYTE *)(v5 + 1348) = 1;
    }
  }
  else
  {
    if (v6 != 51157)
    {
      sub_1D52ABE88(v1, v2, v3);
      return;
    }
    if (v3[1] == 7)
    {
      sub_1D52917E4((uint64_t)v1, &v366);
      LODWORD(__p[0]) = sub_1D52A5CC8(v4);
      sub_1D5285B08((int *)&v369, (int *)__p);
      sub_1D5285164(v372, &v366, (uint64_t)&v369, 0);
      v7 = v367;
      if (v367)
      {
        p_shared_owners = (unint64_t *)&v367->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v369 = 0;
      v370 = 0;
      v371 = 0;
      sub_1D52917E4(v5, &v366);
      v10 = v366;
      LODWORD(v362.__r_.__value_.__l.__data_) = 6;
      sub_1D5285A24(__p, (unsigned int *)&v362);
      v11 = sub_1D52849DC(v10, (unsigned int *)__p, (uint64_t)&v369);
      v12 = v11;
      v13 = v367;
      if (!v367)
        goto LABEL_13;
      v14 = (unint64_t *)&v367->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        if (v12)
        {
LABEL_14:
          v16 = HIBYTE(v371);
          if (v371 < 0)
            v16 = v370;
          if (v16 == 5)
          {
            v17 = (void **)&v369;
            if (v371 < 0)
              v17 = v369;
            v18 = *(_DWORD *)v17;
            v19 = *((unsigned __int8 *)v17 + 4);
            if (v18 == 1869310286 && v19 == 110)
            {
              *(_BYTE *)(v5 + 1336) = 1;
              sub_1D52917E4(v5, &v366);
              v21 = sub_1D52848D4(v366);
              v22 = v367;
              if (v367)
              {
                v23 = (unint64_t *)&v367->__shared_owners_;
                do
                  v24 = __ldaxr(v23);
                while (__stlxr(v24 - 1, v23));
                if (!v24)
                {
                  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                  std::__shared_weak_count::__release_weak(v22);
                }
              }
              if (v21 - 256 < 2 || v21 == 513 || v21 == 769)
              {
                sub_1D52917E4(v5, &v366);
                v25 = sub_1D52848D4(v366);
                v26 = v367;
                if (v367)
                {
                  v27 = (unint64_t *)&v367->__shared_owners_;
                  do
                    v28 = __ldaxr(v27);
                  while (__stlxr(v28 - 1, v27));
                  if (!v28)
                  {
                    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                    std::__shared_weak_count::__release_weak(v26);
                  }
                }
                if (!v25)
                {
                  v368 = 0;
                  sub_1D52917E4(v5, &v366);
                  v29 = (*(int (**)(uint64_t))(*(_QWORD *)v366 + 48))(v366);
                  v30 = v367;
                  if (v367)
                  {
                    v31 = (unint64_t *)&v367->__shared_owners_;
                    do
                      v32 = __ldaxr(v31);
                    while (__stlxr(v32 - 1, v31));
                    if (!v32)
                    {
                      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                      std::__shared_weak_count::__release_weak(v30);
                    }
                  }
                  v368 = v29;
                  sub_1D52917E4(v5, &v366);
                  v33 = sub_1D52847F8(v366);
                  v34 = v367;
                  if (v367)
                  {
                    v35 = (unint64_t *)&v367->__shared_owners_;
                    do
                      v36 = __ldaxr(v35);
                    while (__stlxr(v36 - 1, v35));
                    if (!v36)
                    {
                      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                      std::__shared_weak_count::__release_weak(v34);
                    }
                  }
                  if (v33 == 2771273)
                  {
                    sub_1D52917E4(v5, &v366);
                    v37 = sub_1D52847F8(v366);
                    v38 = v367;
                    if (v367)
                    {
                      v39 = (unint64_t *)&v367->__shared_owners_;
                      do
                        v40 = __ldaxr(v39);
                      while (__stlxr(v40 - 1, v39));
                      if (!v40)
                      {
                        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                        std::__shared_weak_count::__release_weak(v38);
                      }
                    }
                    if (v37 == 8)
                    {
                      *(_BYTE *)(v5 + 1349) = 1;
                      sub_1D52850A0(__p, "");
                      v41 = sub_1D52AA374(v5, (uint64_t)__p, &v366);
                      if (v365 < 0)
                        operator delete(__p[0]);
                      if (v41)
                      {
                        v42 = 0;
                        v350 = (void **)(v5 + 1552);
                        v351 = (char **)(v5 + 1568);
                        v344 = v5 + 1512;
                        v345 = v5 + 1488;
                        v347 = v5 + 1456;
                        v348 = (void **)(v5 + 1360);
                        v349 = (void **)(v5 + 1392);
                        v346 = v5 + 1424;
                        v352 = v41;
                        while (2)
                        {
                          v43 = (char *)&v366 + 12 * v42;
                          v45 = *((unsigned __int16 *)v43 + 2);
                          v44 = (uint64_t)(v43 + 4);
                          switch(v45)
                          {
                            case 1:
                              if (*((_WORD *)&v366 + 6 * v42 + 3) != 7 || *((_DWORD *)&v366 + 3 * v42 + 2) != 12)
                                goto LABEL_425;
                              sub_1D52917E4(v5, &v362);
                              sub_1D528304C(&v353, &v368);
                              v363 = sub_1D52A5CC8(v44);
                              LODWORD(v361.__r_.__value_.__l.__data_) = v353;
                              LODWORD(v355) = *sub_1D52B0860(&v361, &v363);
                              sub_1D5285B08((int *)&v357, (int *)&v355);
                              sub_1D5285164((uint64_t *)__p, (uint64_t *)&v362, (uint64_t)&v357, 0);
                              size = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
                              if (v362.__r_.__value_.__l.__size_)
                              {
                                v47 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
                                do
                                  v48 = __ldaxr(v47);
                                while (__stlxr(v48 - 1, v47));
                                if (!v48)
                                {
                                  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                                  std::__shared_weak_count::__release_weak(size);
                                }
                              }
                              sub_1D52917E4(v5, &v362);
                              v49 = sub_1D52847F8((uint64_t)v362.__r_.__value_.__l.__data_);
                              v50 = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
                              if (v362.__r_.__value_.__l.__size_)
                              {
                                v51 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
                                do
                                  v52 = __ldaxr(v51);
                                while (__stlxr(v52 - 1, v51));
                                if (!v52)
                                {
                                  ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                                  std::__shared_weak_count::__release_weak(v50);
                                }
                              }
                              sub_1D52917E4(v5, &v362);
                              v53 = sub_1D52847F8((uint64_t)v362.__r_.__value_.__l.__data_);
                              v54 = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
                              if (v362.__r_.__value_.__l.__size_)
                              {
                                v55 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
                                do
                                  v56 = __ldaxr(v55);
                                while (__stlxr(v56 - 1, v55));
                                if (!v56)
                                {
                                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                                  std::__shared_weak_count::__release_weak(v54);
                                }
                              }
                              sub_1D52917E4(v5, &v362);
                              v57 = sub_1D528479C((uint64_t)v362.__r_.__value_.__l.__data_);
                              v58 = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
                              if (v362.__r_.__value_.__l.__size_)
                              {
                                v59 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
                                do
                                  v60 = __ldaxr(v59);
                                while (__stlxr(v60 - 1, v59));
                                if (!v60)
                                {
                                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                                  std::__shared_weak_count::__release_weak(v58);
                                }
                              }
                              if (!v57)
                                *(float *)(v5 + 1576) = (float)v49 / (float)v53;
                              goto LABEL_424;
                            case 2:
                              if (*((_WORD *)&v366 + 6 * v42 + 3) != 7)
                                goto LABEL_425;
                              sub_1D52917E4(v5, &v362);
                              sub_1D528304C(&v353, &v368);
                              v363 = sub_1D52A5CC8(v44);
                              LODWORD(v361.__r_.__value_.__l.__data_) = v353;
                              LODWORD(v355) = *sub_1D52B0860(&v361, &v363);
                              sub_1D5285B08((int *)&v357, (int *)&v355);
                              sub_1D5285164((uint64_t *)__p, (uint64_t *)&v362, (uint64_t)&v357, 0);
                              v75 = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
                              if (v362.__r_.__value_.__l.__size_)
                              {
                                v76 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
                                do
                                  v77 = __ldaxr(v76);
                                while (__stlxr(v77 - 1, v76));
                                if (!v77)
                                {
                                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                                  std::__shared_weak_count::__release_weak(v75);
                                }
                              }
                              memset(&v362, 0, sizeof(v362));
                              memset(&v361, 0, sizeof(v361));
                              sub_1D52917E4(v5, &v357);
                              v78 = v357;
                              v363 = 2;
                              sub_1D5285A24(&v353, &v363);
                              if (sub_1D52849DC((uint64_t)v78, (unsigned int *)&v353, (uint64_t)&v362))
                              {
                                sub_1D52917E4(v5, &v355);
                                v79 = v355;
                                v359 = 2;
                                sub_1D5285A24(&v360, &v359);
                                v80 = sub_1D52849DC((uint64_t)v79, &v360, (uint64_t)&v361);
                                v81 = v356;
                                if (v356)
                                {
                                  v82 = (unint64_t *)&v356->__shared_owners_;
                                  do
                                    v83 = __ldaxr(v82);
                                  while (__stlxr(v83 - 1, v82));
                                  if (!v83)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                                    std::__shared_weak_count::__release_weak(v81);
                                  }
                                }
                              }
                              else
                              {
                                v80 = 0;
                              }
                              v84 = v358;
                              if (v358)
                              {
                                v85 = (unint64_t *)&v358->__shared_owners_;
                                do
                                  v86 = __ldaxr(v85);
                                while (__stlxr(v86 - 1, v85));
                                if (!v86)
                                {
                                  ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                                  std::__shared_weak_count::__release_weak(v84);
                                }
                              }
                              if (v80)
                              {
                                if (!std::string::compare(&v362, "01") && !std::string::compare(&v361, "00"))
                                {
                                  sub_1D52917E4(v5, &v357);
                                  *(_BYTE *)(v5 + 1350) = sub_1D52846FC((uint64_t)v357);
                                  sub_1D5282EB4((uint64_t)&v357);
                                  if (*(_BYTE *)(v5 + 1350))
                                  {
                                    sub_1D52917E4(v5, &v357);
                                    *(_BYTE *)(v5 + 1352) = sub_1D52846FC((uint64_t)v357);
                                    sub_1D5282EB4((uint64_t)&v357);
                                    sub_1D52917E4(v5, &v357);
                                    *(_BYTE *)(v5 + 1351) = sub_1D52846FC((uint64_t)v357);
                                    sub_1D5282EB4((uint64_t)&v357);
                                    if (*(unsigned __int8 *)(v5 + 1351) >= 2u)
                                    {
                                      sub_1D52917E4(v5, &v357);
                                      *(_BYTE *)(v5 + 1353) = sub_1D52846FC((uint64_t)v357);
                                      sub_1D5282EB4((uint64_t)&v357);
                                      if (*(_BYTE *)(v5 + 1351))
                                      {
                                        v270 = 0;
                                        do
                                        {
                                          sub_1D52917E4(v5, &v357);
                                          v271 = sub_1D52847F8((uint64_t)v357);
                                          v272 = v358;
                                          if (v358)
                                          {
                                            v273 = (unint64_t *)&v358->__shared_owners_;
                                            do
                                              v274 = __ldaxr(v273);
                                            while (__stlxr(v274 - 1, v273));
                                            if (!v274)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
                                              std::__shared_weak_count::__release_weak(v272);
                                            }
                                          }
                                          sub_1D52917E4(v5, &v357);
                                          v275 = sub_1D52847F8((uint64_t)v357);
                                          v276 = v358;
                                          if (v358)
                                          {
                                            v277 = (unint64_t *)&v358->__shared_owners_;
                                            do
                                              v278 = __ldaxr(v277);
                                            while (__stlxr(v278 - 1, v277));
                                            if (!v278)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                                              std::__shared_weak_count::__release_weak(v276);
                                            }
                                          }
                                          if (!(v275 | v271))
                                            break;
                                          v279 = (double)v271 / (double)v275;
                                          v280 = *(double **)(v5 + 1368);
                                          v281 = *(_QWORD *)(v5 + 1376);
                                          if ((unint64_t)v280 >= v281)
                                          {
                                            v283 = (double *)*v348;
                                            v284 = ((char *)v280 - (_BYTE *)*v348) >> 3;
                                            v285 = v284 + 1;
                                            if ((unint64_t)(v284 + 1) >> 61)
                                              sub_1D5282B8C();
                                            v286 = v281 - (_QWORD)v283;
                                            if (v286 >> 2 > v285)
                                              v285 = v286 >> 2;
                                            if ((unint64_t)v286 >= 0x7FFFFFFFFFFFFFF8)
                                              v287 = 0x1FFFFFFFFFFFFFFFLL;
                                            else
                                              v287 = v285;
                                            if (v287)
                                            {
                                              v288 = (char *)sub_1D5282D28(v5 + 1376, v287);
                                              v280 = *(double **)(v5 + 1368);
                                              v283 = *(double **)(v5 + 1360);
                                            }
                                            else
                                            {
                                              v288 = 0;
                                            }
                                            v289 = (double *)&v288[8 * v284];
                                            *v289 = v279;
                                            v282 = v289 + 1;
                                            while (v280 != v283)
                                            {
                                              v290 = *((_QWORD *)v280-- - 1);
                                              *((_QWORD *)v289-- - 1) = v290;
                                            }
                                            *(_QWORD *)(v5 + 1360) = v289;
                                            *(_QWORD *)(v5 + 1368) = v282;
                                            *(_QWORD *)(v5 + 1376) = &v288[8 * v287];
                                            if (v283)
                                              operator delete(v283);
                                          }
                                          else
                                          {
                                            *v280 = v279;
                                            v282 = v280 + 1;
                                          }
                                          *(_QWORD *)(v5 + 1368) = v282;
                                          ++v270;
                                        }
                                        while (v270 < *(unsigned __int8 *)(v5 + 1351));
                                      }
                                      sub_1D52917E4(v5, &v357);
                                      sub_1D528479C((uint64_t)v357);
                                      sub_1D5282EB4((uint64_t)&v357);
                                    }
                                  }
                                }
                                else
                                {
                                  v87 = &v362;
                                  if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                    v87 = (std::string *)v362.__r_.__value_.__r.__words[0];
                                  v88 = &v361;
                                  if ((v361.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                    v88 = (std::string *)v361.__r_.__value_.__r.__words[0];
                                  printf("Unknown version for Nikon Lens Distortion Correction.  The values are major: %s and minor: %s", (const char *)v87, (const char *)v88);
                                }
                              }
                              if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v361.__r_.__value_.__l.__data_);
                              if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v362.__r_.__value_.__l.__data_);
                              goto LABEL_424;
                            case 3:
                              if (*((_WORD *)&v366 + 6 * v42 + 3) != 7)
                                goto LABEL_425;
                              sub_1D52917E4(v5, &v362);
                              sub_1D528304C(&v353, &v368);
                              v363 = sub_1D52A5CC8(v44);
                              LODWORD(v361.__r_.__value_.__l.__data_) = v353;
                              LODWORD(v355) = *sub_1D52B0860(&v361, &v363);
                              sub_1D5285B08((int *)&v357, (int *)&v355);
                              sub_1D5285164((uint64_t *)__p, (uint64_t *)&v362, (uint64_t)&v357, 0);
                              v117 = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
                              if (v362.__r_.__value_.__l.__size_)
                              {
                                v118 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
                                do
                                  v119 = __ldaxr(v118);
                                while (__stlxr(v119 - 1, v118));
                                if (!v119)
                                {
                                  ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                                  std::__shared_weak_count::__release_weak(v117);
                                }
                              }
                              memset(&v362, 0, sizeof(v362));
                              memset(&v361, 0, sizeof(v361));
                              sub_1D52917E4(v5, &v357);
                              v120 = v357;
                              v363 = 2;
                              sub_1D5285A24(&v353, &v363);
                              if (sub_1D52849DC((uint64_t)v120, (unsigned int *)&v353, (uint64_t)&v362))
                              {
                                sub_1D52917E4(v5, &v355);
                                v121 = v355;
                                v359 = 2;
                                sub_1D5285A24(&v360, &v359);
                                v122 = sub_1D52849DC((uint64_t)v121, &v360, (uint64_t)&v361);
                                v123 = v356;
                                if (v356)
                                {
                                  v124 = (unint64_t *)&v356->__shared_owners_;
                                  do
                                    v125 = __ldaxr(v124);
                                  while (__stlxr(v125 - 1, v124));
                                  if (!v125)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                                    std::__shared_weak_count::__release_weak(v123);
                                  }
                                }
                              }
                              else
                              {
                                v122 = 0;
                              }
                              v126 = v358;
                              if (v358)
                              {
                                v127 = (unint64_t *)&v358->__shared_owners_;
                                do
                                  v128 = __ldaxr(v127);
                                while (__stlxr(v128 - 1, v127));
                                if (!v128)
                                {
                                  ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                                  std::__shared_weak_count::__release_weak(v126);
                                }
                              }
                              if (!v122)
                                goto LABEL_230;
                              if (std::string::compare(&v362, "01") || std::string::compare(&v361, "00"))
                              {
                                v129 = &v362;
                                if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                  v129 = (std::string *)v362.__r_.__value_.__r.__words[0];
                                v130 = &v361;
                                if ((v361.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                  v130 = (std::string *)v361.__r_.__value_.__r.__words[0];
                                printf("Unknown version for Nikon Lens CA Correction.  The values are major: %s and minor: %s", (const char *)v129, (const char *)v130);
LABEL_230:
                                v131 = 16;
                                goto LABEL_231;
                              }
                              sub_1D52917E4(v5, &v357);
                              v304 = sub_1D52846FC((uint64_t)v357);
                              sub_1D5282EB4((uint64_t)&v357);
                              if (!v304)
                                goto LABEL_230;
                              sub_1D52917E4(v5, &v357);
                              v305 = sub_1D52846FC((uint64_t)v357);
                              sub_1D5282EB4((uint64_t)&v357);
                              if (v305 < 2)
                                goto LABEL_230;
                              sub_1D52917E4(v5, &v357);
                              v306 = sub_1D52846FC((uint64_t)v357);
                              sub_1D5282EB4((uint64_t)&v357);
                              if (!v306)
                                goto LABEL_230;
                              sub_1D52917E4(v5, &v357);
                              v307 = sub_1D52846FC((uint64_t)v357);
                              sub_1D5282EB4((uint64_t)&v357);
                              if (v307)
                                goto LABEL_230;
                              v308 = v305 >> 1;
                              sub_1D528EB68(&v357, v308);
                              sub_1D528EB68(&v355, v308);
                              v309 = 0;
                              do
                              {
                                sub_1D52917E4(v5, &v353);
                                v310 = sub_1D52847F8(v353);
                                v311 = v354;
                                if (v354)
                                {
                                  v312 = (unint64_t *)&v354->__shared_owners_;
                                  do
                                    v313 = __ldaxr(v312);
                                  while (__stlxr(v313 - 1, v312));
                                  if (!v313)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                                    std::__shared_weak_count::__release_weak(v311);
                                  }
                                }
                                sub_1D52917E4(v5, &v353);
                                v314 = sub_1D52847F8(v353);
                                v315 = v354;
                                if (v354)
                                {
                                  v316 = (unint64_t *)&v354->__shared_owners_;
                                  do
                                    v317 = __ldaxr(v316);
                                  while (__stlxr(v317 - 1, v316));
                                  if (!v317)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
                                    std::__shared_weak_count::__release_weak(v315);
                                  }
                                }
                                if (v314)
                                  v318 = (double)v310 / (double)v314;
                                else
                                  v318 = 0.0;
                                *((double *)v357 + v309++) = v318;
                              }
                              while (v309 != v308);
                              v319 = 0;
                              if (v308 <= 1)
                                v320 = 1;
                              else
                                v320 = v308;
                              do
                              {
                                sub_1D52917E4(v5, &v353);
                                v321 = sub_1D52847F8(v353);
                                v322 = v354;
                                if (v354)
                                {
                                  v323 = (unint64_t *)&v354->__shared_owners_;
                                  do
                                    v324 = __ldaxr(v323);
                                  while (__stlxr(v324 - 1, v323));
                                  if (!v324)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
                                    std::__shared_weak_count::__release_weak(v322);
                                  }
                                }
                                sub_1D52917E4(v5, &v353);
                                v325 = sub_1D52847F8(v353);
                                v326 = v354;
                                if (v354)
                                {
                                  v327 = (unint64_t *)&v354->__shared_owners_;
                                  do
                                    v328 = __ldaxr(v327);
                                  while (__stlxr(v328 - 1, v327));
                                  if (!v328)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
                                    std::__shared_weak_count::__release_weak(v326);
                                  }
                                }
                                if (v325)
                                  v329 = (double)v321 / (double)v325;
                                else
                                  v329 = 0.0;
                                *((double *)v355 + v319++) = v329;
                              }
                              while (v319 != v320);
                              sub_1D52917E4(v5, &v353);
                              v330 = sub_1D528479C(v353) != 0;
                              sub_1D5282EB4((uint64_t)&v353);
                              if (v355)
                              {
                                v356 = (std::__shared_weak_count *)v355;
                                operator delete(v355);
                              }
                              if (v357)
                              {
                                v358 = (std::__shared_weak_count *)v357;
                                operator delete(v357);
                              }
                              v131 = 16 * v330;
LABEL_231:
                              if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v361.__r_.__value_.__l.__data_);
                              if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v362.__r_.__value_.__l.__data_);
                              sub_1D5285200((uint64_t *)__p);
                              if (!v131)
                              {
LABEL_236:
                                if (*((_WORD *)&v366 + 6 * v42 + 3) == 7)
                                {
                                  sub_1D52917E4(v5, &v362);
                                  sub_1D528304C(&v353, &v368);
                                  v363 = sub_1D52A5CC8(v44);
                                  LODWORD(v361.__r_.__value_.__l.__data_) = v353;
                                  LODWORD(v355) = *sub_1D52B0860(&v361, &v363);
                                  sub_1D5285B08((int *)&v357, (int *)&v355);
                                  sub_1D5285164((uint64_t *)__p, (uint64_t *)&v362, (uint64_t)&v357, 0);
                                  v132 = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
                                  if (v362.__r_.__value_.__l.__size_)
                                  {
                                    v133 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
                                    do
                                      v134 = __ldaxr(v133);
                                    while (__stlxr(v134 - 1, v133));
                                    if (!v134)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                                      std::__shared_weak_count::__release_weak(v132);
                                    }
                                  }
                                  memset(&v362, 0, sizeof(v362));
                                  memset(&v361, 0, sizeof(v361));
                                  sub_1D52917E4(v5, &v357);
                                  v135 = v357;
                                  v363 = 2;
                                  sub_1D5285A24(&v353, &v363);
                                  if (sub_1D52849DC((uint64_t)v135, (unsigned int *)&v353, (uint64_t)&v362))
                                  {
                                    sub_1D52917E4(v5, &v355);
                                    v136 = v355;
                                    v359 = 2;
                                    sub_1D5285A24(&v360, &v359);
                                    v137 = sub_1D52849DC((uint64_t)v136, &v360, (uint64_t)&v361);
                                    v138 = v356;
                                    if (v356)
                                    {
                                      v139 = (unint64_t *)&v356->__shared_owners_;
                                      do
                                        v140 = __ldaxr(v139);
                                      while (__stlxr(v140 - 1, v139));
                                      if (!v140)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                                        std::__shared_weak_count::__release_weak(v138);
                                      }
                                    }
                                  }
                                  else
                                  {
                                    v137 = 0;
                                  }
                                  v141 = v358;
                                  if (v358)
                                  {
                                    v142 = (unint64_t *)&v358->__shared_owners_;
                                    do
                                      v143 = __ldaxr(v142);
                                    while (__stlxr(v143 - 1, v142));
                                    if (!v143)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                                      std::__shared_weak_count::__release_weak(v141);
                                    }
                                  }
                                  if (v137)
                                  {
                                    if (!std::string::compare(&v362, "01") && !std::string::compare(&v361, "00"))
                                    {
                                      sub_1D52917E4(v5, &v357);
                                      *(_BYTE *)(v5 + 1384) = sub_1D52846FC((uint64_t)v357);
                                      sub_1D5282EB4((uint64_t)&v357);
                                      sub_1D52917E4(v5, &v357);
                                      *(_BYTE *)(v5 + 1385) = sub_1D52846FC((uint64_t)v357);
                                      sub_1D5282EB4((uint64_t)&v357);
                                      if (*(unsigned __int8 *)(v5 + 1385) >= 2u)
                                      {
                                        sub_1D52917E4(v5, &v357);
                                        *(_BYTE *)(v5 + 1386) = sub_1D52846FC((uint64_t)v357);
                                        sub_1D5282EB4((uint64_t)&v357);
                                        sub_1D52917E4(v5, &v357);
                                        v235 = (double)sub_1D52846FC((uint64_t)v357) / 100.0;
                                        *(float *)(v5 + 1388) = v235;
                                        sub_1D5282EB4((uint64_t)&v357);
                                        *(_QWORD *)(v5 + 1400) = *(_QWORD *)(v5 + 1392);
                                        if (*(_BYTE *)(v5 + 1385))
                                        {
                                          v236 = 0;
                                          do
                                          {
                                            sub_1D52917E4(v5, &v357);
                                            v237 = sub_1D52847F8((uint64_t)v357);
                                            v238 = v358;
                                            if (v358)
                                            {
                                              v239 = (unint64_t *)&v358->__shared_owners_;
                                              do
                                                v240 = __ldaxr(v239);
                                              while (__stlxr(v240 - 1, v239));
                                              if (!v240)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                                                std::__shared_weak_count::__release_weak(v238);
                                              }
                                            }
                                            sub_1D52917E4(v5, &v357);
                                            v241 = sub_1D52847F8((uint64_t)v357);
                                            v242 = v358;
                                            if (v358)
                                            {
                                              v243 = (unint64_t *)&v358->__shared_owners_;
                                              do
                                                v244 = __ldaxr(v243);
                                              while (__stlxr(v244 - 1, v243));
                                              if (!v244)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                                                std::__shared_weak_count::__release_weak(v242);
                                              }
                                            }
                                            if (v237 | v241)
                                            {
                                              v245 = (float)v237 / (float)v241;
                                              v246 = *(float **)(v5 + 1400);
                                              v247 = *(_QWORD *)(v5 + 1408);
                                              if ((unint64_t)v246 >= v247)
                                              {
                                                v249 = (float *)*v349;
                                                v250 = ((char *)v246 - (_BYTE *)*v349) >> 2;
                                                v251 = v250 + 1;
                                                if ((unint64_t)(v250 + 1) >> 62)
                                                  sub_1D5282B8C();
                                                v252 = v247 - (_QWORD)v249;
                                                if (v252 >> 1 > v251)
                                                  v251 = v252 >> 1;
                                                if ((unint64_t)v252 >= 0x7FFFFFFFFFFFFFFCLL)
                                                  v253 = 0x3FFFFFFFFFFFFFFFLL;
                                                else
                                                  v253 = v251;
                                                if (v253)
                                                {
                                                  v254 = (char *)sub_1D5282BA0(v5 + 1408, v253);
                                                  v246 = *(float **)(v5 + 1400);
                                                  v249 = *(float **)(v5 + 1392);
                                                }
                                                else
                                                {
                                                  v254 = 0;
                                                }
                                                v255 = (float *)&v254[4 * v250];
                                                *v255 = v245;
                                                v248 = v255 + 1;
                                                while (v246 != v249)
                                                {
                                                  v256 = *((_DWORD *)v246-- - 1);
                                                  *((_DWORD *)v255-- - 1) = v256;
                                                }
                                                *(_QWORD *)(v5 + 1392) = v255;
                                                *(_QWORD *)(v5 + 1400) = v248;
                                                *(_QWORD *)(v5 + 1408) = &v254[4 * v253];
                                                if (v249)
                                                  operator delete(v249);
                                              }
                                              else
                                              {
                                                *v246 = v245;
                                                v248 = v246 + 1;
                                              }
                                              *(_QWORD *)(v5 + 1400) = v248;
                                            }
                                            ++v236;
                                          }
                                          while (v236 < *(unsigned __int8 *)(v5 + 1385));
                                        }
                                        sub_1D52917E4(v5, &v357);
                                        sub_1D528479C((uint64_t)v357);
                                        sub_1D5282EB4((uint64_t)&v357);
                                      }
                                    }
                                    else
                                    {
                                      v144 = &v362;
                                      if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                        v144 = (std::string *)v362.__r_.__value_.__r.__words[0];
                                      v145 = &v361;
                                      if ((v361.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                        v145 = (std::string *)v361.__r_.__value_.__r.__words[0];
                                      printf("Unknown version for Nikon Lens Vignette Correction.  The values are major: %s and minor: %s", (const char *)v144, (const char *)v145);
                                    }
                                  }
                                  if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v361.__r_.__value_.__l.__data_);
                                  if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v362.__r_.__value_.__l.__data_);
LABEL_424:
                                  sub_1D5285200((uint64_t *)__p);
                                }
                              }
LABEL_425:
                              if (++v42 == v352)
                                break;
                              continue;
                            case 4:
                              goto LABEL_236;
                            case 5:
                              if (*((_WORD *)&v366 + 6 * v42 + 3) != 7)
                                goto LABEL_425;
                              sub_1D52917E4(v5, &v362);
                              sub_1D528304C(&v353, &v368);
                              v363 = sub_1D52A5CC8(v44);
                              LODWORD(v361.__r_.__value_.__l.__data_) = v353;
                              LODWORD(v355) = *sub_1D52B0860(&v361, &v363);
                              sub_1D5285B08((int *)&v357, (int *)&v355);
                              sub_1D5285164((uint64_t *)__p, (uint64_t *)&v362, (uint64_t)&v357, 0);
                              v146 = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
                              if (v362.__r_.__value_.__l.__size_)
                              {
                                v147 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
                                do
                                  v148 = __ldaxr(v147);
                                while (__stlxr(v148 - 1, v147));
                                if (!v148)
                                {
                                  ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                                  std::__shared_weak_count::__release_weak(v146);
                                }
                              }
                              memset(&v362, 0, sizeof(v362));
                              memset(&v361, 0, sizeof(v361));
                              sub_1D52917E4(v5, &v357);
                              v149 = v357;
                              v363 = 2;
                              sub_1D5285A24(&v353, &v363);
                              if (sub_1D52849DC((uint64_t)v149, (unsigned int *)&v353, (uint64_t)&v362))
                              {
                                sub_1D52917E4(v5, &v355);
                                v150 = v355;
                                v359 = 2;
                                sub_1D5285A24(&v360, &v359);
                                v151 = sub_1D52849DC((uint64_t)v150, &v360, (uint64_t)&v361);
                                v152 = v356;
                                if (v356)
                                {
                                  v153 = (unint64_t *)&v356->__shared_owners_;
                                  do
                                    v154 = __ldaxr(v153);
                                  while (__stlxr(v154 - 1, v153));
                                  if (!v154)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                                    std::__shared_weak_count::__release_weak(v152);
                                  }
                                }
                              }
                              else
                              {
                                v151 = 0;
                              }
                              v155 = v358;
                              if (v358)
                              {
                                v156 = (unint64_t *)&v358->__shared_owners_;
                                do
                                  v157 = __ldaxr(v156);
                                while (__stlxr(v157 - 1, v156));
                                if (!v157)
                                {
                                  ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                                  std::__shared_weak_count::__release_weak(v155);
                                }
                              }
                              if (v151)
                              {
                                if (!std::string::compare(&v362, "01") && !std::string::compare(&v361, "00"))
                                {
                                  sub_1D52917E4(v5, &v357);
                                  v331 = sub_1D52846FC((uint64_t)v357);
                                  sub_1D5282EB4((uint64_t)&v357);
                                  if (v331)
                                  {
                                    sub_1D52917E4(v5, &v357);
                                    v332 = sub_1D52846FC((uint64_t)v357);
                                    sub_1D5282EB4((uint64_t)&v357);
                                    if (v332 == 1)
                                    {
                                      sub_1D52917E4(v5, &v357);
                                      v333 = sub_1D528479C((uint64_t)v357);
                                      sub_1D5282EB4((uint64_t)&v357);
                                      if (!v333)
                                      {
                                        sub_1D52917E4(v5, &v357);
                                        sub_1D52849A0((uint64_t)v357);
                                        sub_1D5282EB4((uint64_t)&v357);
                                        sub_1D52917E4(v5, &v357);
                                        v334 = sub_1D52846FC((uint64_t)v357);
                                        sub_1D5282EB4((uint64_t)&v357);
                                        if (v334 == 4)
                                        {
                                          sub_1D52917E4(v5, &v357);
                                          v335 = sub_1D528479C((uint64_t)v357);
                                          sub_1D5282EB4((uint64_t)&v357);
                                          if (!v335)
                                          {
                                            sub_1D52917E4(v5, &v357);
                                            v336 = sub_1D52846FC((uint64_t)v357);
                                            sub_1D5282EB4((uint64_t)&v357);
                                            if (!v336)
                                            {
                                              sub_1D52917E4(v5, &v357);
                                              LODWORD(v355) = sub_1D5284964((uint64_t)v357);
                                              sub_1D539CBB8(v346, &v355);
                                              sub_1D5282EB4((uint64_t)&v357);
                                              sub_1D52917E4(v5, &v357);
                                              LODWORD(v355) = sub_1D5284964((uint64_t)v357);
                                              sub_1D539CBB8(v346, &v355);
                                              sub_1D5282EB4((uint64_t)&v357);
                                              sub_1D52917E4(v5, &v357);
                                              LODWORD(v355) = sub_1D5284964((uint64_t)v357);
                                              sub_1D539CBB8(v346, &v355);
                                              sub_1D5282EB4((uint64_t)&v357);
                                              sub_1D52917E4(v5, &v357);
                                              v337 = sub_1D5284964((uint64_t)v357);
                                              sub_1D5282EB4((uint64_t)&v357);
                                              if (v337 == 0.0)
                                              {
                                                sub_1D52917E4(v5, &v357);
                                                v338 = sub_1D5284964((uint64_t)v357);
                                                sub_1D5282EB4((uint64_t)&v357);
                                                if (v338 == 0.0)
                                                {
                                                  sub_1D52917E4(v5, &v357);
                                                  v339 = sub_1D528479C((uint64_t)v357);
                                                  sub_1D5282EB4((uint64_t)&v357);
                                                  if (!v339)
                                                  {
                                                    sub_1D52917E4(v5, &v357);
                                                    v340 = sub_1D528479C((uint64_t)v357);
                                                    sub_1D5282EB4((uint64_t)&v357);
                                                    if (!v340)
                                                    {
                                                      sub_1D52917E4(v5, &v357);
                                                      *(float *)(v5 + 1420) = sub_1D5284964((uint64_t)v357);
                                                      sub_1D5282EB4((uint64_t)&v357);
                                                      sub_1D52917E4(v5, &v357);
                                                      v341 = sub_1D528479C((uint64_t)v357);
                                                      sub_1D5282EB4((uint64_t)&v357);
                                                      if (!v341)
                                                        *(_BYTE *)(v5 + 1416) = v331;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  v158 = &v362;
                                  if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                    v158 = (std::string *)v362.__r_.__value_.__r.__words[0];
                                  v159 = &v361;
                                  if ((v361.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                    v159 = (std::string *)v361.__r_.__value_.__r.__words[0];
                                  printf("Unknown version for Nikon DistortionCorrectionCurve.  The values are major: %s and minor: %s", (const char *)v158, (const char *)v159);
                                }
                              }
                              if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v361.__r_.__value_.__l.__data_);
                              if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v362.__r_.__value_.__l.__data_);
                              goto LABEL_424;
                            case 6:
                              if (*((_WORD *)&v366 + 6 * v42 + 3) != 7)
                                goto LABEL_425;
                              sub_1D52917E4(v5, &v362);
                              sub_1D528304C(&v353, &v368);
                              v363 = sub_1D52A5CC8(v44);
                              LODWORD(v361.__r_.__value_.__l.__data_) = v353;
                              LODWORD(v355) = *sub_1D52B0860(&v361, &v363);
                              sub_1D5285B08((int *)&v357, (int *)&v355);
                              sub_1D5285164((uint64_t *)__p, (uint64_t *)&v362, (uint64_t)&v357, 0);
                              v61 = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
                              if (v362.__r_.__value_.__l.__size_)
                              {
                                v62 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
                                do
                                  v63 = __ldaxr(v62);
                                while (__stlxr(v63 - 1, v62));
                                if (!v63)
                                {
                                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                                  std::__shared_weak_count::__release_weak(v61);
                                }
                              }
                              memset(&v362, 0, sizeof(v362));
                              memset(&v361, 0, sizeof(v361));
                              sub_1D52917E4(v5, &v357);
                              v64 = v357;
                              v363 = 2;
                              sub_1D5285A24(&v353, &v363);
                              if (sub_1D52849DC((uint64_t)v64, (unsigned int *)&v353, (uint64_t)&v362))
                              {
                                sub_1D52917E4(v5, &v355);
                                v65 = v355;
                                v359 = 2;
                                sub_1D5285A24(&v360, &v359);
                                v66 = sub_1D52849DC((uint64_t)v65, &v360, (uint64_t)&v361);
                                v67 = v356;
                                if (v356)
                                {
                                  v68 = (unint64_t *)&v356->__shared_owners_;
                                  do
                                    v69 = __ldaxr(v68);
                                  while (__stlxr(v69 - 1, v68));
                                  if (!v69)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                                    std::__shared_weak_count::__release_weak(v67);
                                  }
                                }
                              }
                              else
                              {
                                v66 = 0;
                              }
                              v70 = v358;
                              if (v358)
                              {
                                v71 = (unint64_t *)&v358->__shared_owners_;
                                do
                                  v72 = __ldaxr(v71);
                                while (__stlxr(v72 - 1, v71));
                                if (!v72)
                                {
                                  ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                                  std::__shared_weak_count::__release_weak(v70);
                                }
                              }
                              if (v66)
                              {
                                if (!std::string::compare(&v362, "01") && !std::string::compare(&v361, "00"))
                                {
                                  sub_1D52917E4(v5, &v357);
                                  v257 = sub_1D52846FC((uint64_t)v357);
                                  sub_1D5282EB4((uint64_t)&v357);
                                  if (v257)
                                  {
                                    sub_1D52917E4(v5, &v357);
                                    v258 = sub_1D52846FC((uint64_t)v357);
                                    sub_1D5282EB4((uint64_t)&v357);
                                    if (v258 == 1)
                                    {
                                      sub_1D52917E4(v5, &v357);
                                      v259 = sub_1D528479C((uint64_t)v357);
                                      sub_1D5282EB4((uint64_t)&v357);
                                      if (!v259)
                                      {
                                        sub_1D52917E4(v5, &v357);
                                        sub_1D52849A0((uint64_t)v357);
                                        sub_1D5282EB4((uint64_t)&v357);
                                        sub_1D52917E4(v5, &v357);
                                        v260 = sub_1D52846FC((uint64_t)v357);
                                        sub_1D5282EB4((uint64_t)&v357);
                                        if (v260 == 8)
                                        {
                                          sub_1D52917E4(v5, &v357);
                                          v261 = sub_1D528479C((uint64_t)v357);
                                          sub_1D5282EB4((uint64_t)&v357);
                                          if (!v261)
                                          {
                                            sub_1D52917E4(v5, &v357);
                                            v262 = sub_1D52846FC((uint64_t)v357);
                                            sub_1D5282EB4((uint64_t)&v357);
                                            if (!v262)
                                            {
                                              sub_1D52917E4(v5, &v357);
                                              LODWORD(v355) = sub_1D5284964((uint64_t)v357);
                                              sub_1D539CBB8(v347, &v355);
                                              sub_1D5282EB4((uint64_t)&v357);
                                              sub_1D52917E4(v5, &v357);
                                              v263 = sub_1D5284964((uint64_t)v357);
                                              sub_1D5282EB4((uint64_t)&v357);
                                              if (v263 == 0.0)
                                              {
                                                sub_1D52917E4(v5, &v357);
                                                LODWORD(v355) = sub_1D5284964((uint64_t)v357);
                                                sub_1D539CBB8(v347, &v355);
                                                sub_1D5282EB4((uint64_t)&v357);
                                                sub_1D52917E4(v5, &v357);
                                                v264 = sub_1D5284964((uint64_t)v357);
                                                sub_1D5282EB4((uint64_t)&v357);
                                                if (v264 == 0.0)
                                                {
                                                  sub_1D52917E4(v5, &v357);
                                                  LODWORD(v355) = sub_1D5284964((uint64_t)v357);
                                                  sub_1D539CBB8(v347, &v355);
                                                  sub_1D5282EB4((uint64_t)&v357);
                                                  sub_1D52917E4(v5, &v357);
                                                  v265 = sub_1D5284964((uint64_t)v357);
                                                  sub_1D5282EB4((uint64_t)&v357);
                                                  if (v265 == 0.0)
                                                  {
                                                    sub_1D52917E4(v5, &v357);
                                                    LODWORD(v355) = sub_1D5284964((uint64_t)v357);
                                                    sub_1D539CBB8(v347, &v355);
                                                    sub_1D5282EB4((uint64_t)&v357);
                                                    sub_1D52917E4(v5, &v357);
                                                    v266 = sub_1D5284964((uint64_t)v357);
                                                    sub_1D5282EB4((uint64_t)&v357);
                                                    if (v266 == 0.0)
                                                    {
                                                      sub_1D52917E4(v5, &v357);
                                                      v267 = sub_1D5284964((uint64_t)v357);
                                                      sub_1D5282EB4((uint64_t)&v357);
                                                      if (v267 == 1.0)
                                                      {
                                                        sub_1D52917E4(v5, &v357);
                                                        v268 = sub_1D528479C((uint64_t)v357);
                                                        sub_1D5282EB4((uint64_t)&v357);
                                                        if (!v268)
                                                        {
                                                          sub_1D52917E4(v5, &v357);
                                                          v269 = sub_1D528479C((uint64_t)v357);
                                                          sub_1D5282EB4((uint64_t)&v357);
                                                          if (!v269)
                                                          {
                                                            sub_1D52917E4(v5, &v357);
                                                            *(float *)(v5 + 1452) = sub_1D5284964((uint64_t)v357);
                                                            sub_1D5282EB4((uint64_t)&v357);
                                                            *(_BYTE *)(v5 + 1448) = v257;
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  v73 = &v362;
                                  if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                    v73 = (std::string *)v362.__r_.__value_.__r.__words[0];
                                  v74 = &v361;
                                  if ((v361.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                    v74 = (std::string *)v361.__r_.__value_.__r.__words[0];
                                  printf("Unknown version for Nikon VignetteCorrectionCurve.  The values are major: %s and minor: %s", (const char *)v73, (const char *)v74);
                                }
                              }
                              if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v361.__r_.__value_.__l.__data_);
                              if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v362.__r_.__value_.__l.__data_);
                              goto LABEL_424;
                            case 7:
                              if (*((_WORD *)&v366 + 6 * v42 + 3) != 7)
                                goto LABEL_425;
                              sub_1D52917E4(v5, &v362);
                              sub_1D528304C(&v353, &v368);
                              v363 = sub_1D52A5CC8(v44);
                              LODWORD(v361.__r_.__value_.__l.__data_) = v353;
                              LODWORD(v355) = *sub_1D52B0860(&v361, &v363);
                              sub_1D5285B08((int *)&v357, (int *)&v355);
                              sub_1D5285164((uint64_t *)__p, (uint64_t *)&v362, (uint64_t)&v357, 0);
                              v89 = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
                              if (v362.__r_.__value_.__l.__size_)
                              {
                                v90 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
                                do
                                  v91 = __ldaxr(v90);
                                while (__stlxr(v91 - 1, v90));
                                if (!v91)
                                {
                                  ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                                  std::__shared_weak_count::__release_weak(v89);
                                }
                              }
                              memset(&v362, 0, sizeof(v362));
                              memset(&v361, 0, sizeof(v361));
                              sub_1D52917E4(v5, &v357);
                              v92 = v357;
                              v363 = 2;
                              sub_1D5285A24(&v353, &v363);
                              if (sub_1D52849DC((uint64_t)v92, (unsigned int *)&v353, (uint64_t)&v362))
                              {
                                sub_1D52917E4(v5, &v355);
                                v93 = v355;
                                v359 = 2;
                                sub_1D5285A24(&v360, &v359);
                                v94 = sub_1D52849DC((uint64_t)v93, &v360, (uint64_t)&v361);
                                v95 = v356;
                                if (v356)
                                {
                                  v96 = (unint64_t *)&v356->__shared_owners_;
                                  do
                                    v97 = __ldaxr(v96);
                                  while (__stlxr(v97 - 1, v96));
                                  if (!v97)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                                    std::__shared_weak_count::__release_weak(v95);
                                  }
                                }
                              }
                              else
                              {
                                v94 = 0;
                              }
                              v98 = v358;
                              if (v358)
                              {
                                v99 = (unint64_t *)&v358->__shared_owners_;
                                do
                                  v100 = __ldaxr(v99);
                                while (__stlxr(v100 - 1, v99));
                                if (!v100)
                                {
                                  ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                                  std::__shared_weak_count::__release_weak(v98);
                                }
                              }
                              if (v94)
                              {
                                if (!std::string::compare(&v362, "01") && !std::string::compare(&v361, "00"))
                                {
                                  sub_1D52917E4(v5, &v357);
                                  v291 = sub_1D52846FC((uint64_t)v357);
                                  sub_1D5282EB4((uint64_t)&v357);
                                  if (v291)
                                  {
                                    sub_1D52917E4(v5, &v357);
                                    v292 = sub_1D52846FC((uint64_t)v357);
                                    sub_1D5282EB4((uint64_t)&v357);
                                    if (v292 == 2)
                                    {
                                      sub_1D52917E4(v5, &v357);
                                      v293 = sub_1D528479C((uint64_t)v357);
                                      sub_1D5282EB4((uint64_t)&v357);
                                      if (!v293)
                                      {
                                        sub_1D52917E4(v5, &v357);
                                        sub_1D52849A0((uint64_t)v357);
                                        sub_1D5282EB4((uint64_t)&v357);
                                        sub_1D52917E4(v5, &v357);
                                        v294 = sub_1D52846FC((uint64_t)v357);
                                        sub_1D5282EB4((uint64_t)&v357);
                                        if (v294 == 3)
                                        {
                                          sub_1D52917E4(v5, &v357);
                                          v295 = sub_1D528479C((uint64_t)v357);
                                          sub_1D5282EB4((uint64_t)&v357);
                                          if (!v295)
                                          {
                                            sub_1D52917E4(v5, &v357);
                                            v296 = sub_1D52846FC((uint64_t)v357);
                                            sub_1D5282EB4((uint64_t)&v357);
                                            if (!v296)
                                            {
                                              sub_1D52917E4(v5, &v357);
                                              LODWORD(v355) = sub_1D5284964((uint64_t)v357);
                                              sub_1D539CBB8(v345, &v355);
                                              sub_1D5282EB4((uint64_t)&v357);
                                              sub_1D52917E4(v5, &v357);
                                              LODWORD(v355) = sub_1D5284964((uint64_t)v357);
                                              sub_1D539CBB8(v345, &v355);
                                              sub_1D5282EB4((uint64_t)&v357);
                                              sub_1D52917E4(v5, &v357);
                                              v297 = sub_1D5284964((uint64_t)v357);
                                              sub_1D5282EB4((uint64_t)&v357);
                                              if (v297 == 0.0)
                                              {
                                                sub_1D52917E4(v5, &v357);
                                                LODWORD(v355) = sub_1D5284964((uint64_t)v357);
                                                sub_1D539CBB8(v345, &v355);
                                                sub_1D5282EB4((uint64_t)&v357);
                                                sub_1D52917E4(v5, &v357);
                                                v298 = sub_1D52846FC((uint64_t)v357);
                                                sub_1D5282EB4((uint64_t)&v357);
                                                if (v298 == 3)
                                                {
                                                  sub_1D52917E4(v5, &v357);
                                                  v299 = sub_1D528479C((uint64_t)v357);
                                                  sub_1D5282EB4((uint64_t)&v357);
                                                  if (!v299)
                                                  {
                                                    sub_1D52917E4(v5, &v357);
                                                    v300 = sub_1D52846FC((uint64_t)v357);
                                                    sub_1D5282EB4((uint64_t)&v357);
                                                    if (!v300)
                                                    {
                                                      sub_1D52917E4(v5, &v357);
                                                      LODWORD(v355) = sub_1D5284964((uint64_t)v357);
                                                      sub_1D539CBB8(v344, &v355);
                                                      sub_1D5282EB4((uint64_t)&v357);
                                                      sub_1D52917E4(v5, &v357);
                                                      LODWORD(v355) = sub_1D5284964((uint64_t)v357);
                                                      sub_1D539CBB8(v344, &v355);
                                                      sub_1D5282EB4((uint64_t)&v357);
                                                      sub_1D52917E4(v5, &v357);
                                                      v301 = sub_1D5284964((uint64_t)v357);
                                                      sub_1D5282EB4((uint64_t)&v357);
                                                      if (v301 == 0.0)
                                                      {
                                                        sub_1D52917E4(v5, &v357);
                                                        LODWORD(v355) = sub_1D5284964((uint64_t)v357);
                                                        sub_1D539CBB8(v344, &v355);
                                                        sub_1D5282EB4((uint64_t)&v357);
                                                        sub_1D52917E4(v5, &v357);
                                                        v302 = sub_1D528479C((uint64_t)v357);
                                                        sub_1D5282EB4((uint64_t)&v357);
                                                        if (!v302)
                                                        {
                                                          sub_1D52917E4(v5, &v357);
                                                          *(_BYTE *)(v5 + 1481) = sub_1D52846FC((uint64_t)v357);
                                                          sub_1D5282EB4((uint64_t)&v357);
                                                          sub_1D52917E4(v5, &v357);
                                                          v303 = sub_1D52846FC((uint64_t)v357);
                                                          sub_1D5282EB4((uint64_t)&v357);
                                                          if (!v303)
                                                            *(_BYTE *)(v5 + 1480) = v291;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  v101 = &v362;
                                  if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                    v101 = (std::string *)v362.__r_.__value_.__r.__words[0];
                                  v102 = &v361;
                                  if ((v361.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                    v102 = (std::string *)v361.__r_.__value_.__r.__words[0];
                                  printf("Unknown version for Nikon LateralChromaticAberrationCorrectionCurve.  The values are major: %s and minor: %s", (const char *)v101, (const char *)v102);
                                }
                              }
                              if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v361.__r_.__value_.__l.__data_);
                              if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v362.__r_.__value_.__l.__data_);
                              goto LABEL_424;
                            case 8:
                              if (*((_WORD *)&v366 + 6 * v42 + 3) != 7)
                                goto LABEL_425;
                              sub_1D52917E4(v5, &v362);
                              sub_1D528304C(&v353, &v368);
                              v363 = sub_1D52A5CC8(v44);
                              LODWORD(v361.__r_.__value_.__l.__data_) = v353;
                              LODWORD(v355) = *sub_1D52B0860(&v361, &v363);
                              sub_1D5285B08((int *)&v357, (int *)&v355);
                              sub_1D5285164((uint64_t *)__p, (uint64_t *)&v362, (uint64_t)&v357, 0);
                              v103 = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
                              if (v362.__r_.__value_.__l.__size_)
                              {
                                v104 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
                                do
                                  v105 = __ldaxr(v104);
                                while (__stlxr(v105 - 1, v104));
                                if (!v105)
                                {
                                  ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                                  std::__shared_weak_count::__release_weak(v103);
                                }
                              }
                              memset(&v362, 0, sizeof(v362));
                              memset(&v361, 0, sizeof(v361));
                              sub_1D52917E4(v5, &v357);
                              v106 = v357;
                              v363 = 2;
                              sub_1D5285A24(&v353, &v363);
                              if (sub_1D52849DC((uint64_t)v106, (unsigned int *)&v353, (uint64_t)&v362))
                              {
                                sub_1D52917E4(v5, &v355);
                                v107 = v355;
                                v359 = 2;
                                sub_1D5285A24(&v360, &v359);
                                v108 = sub_1D52849DC((uint64_t)v107, &v360, (uint64_t)&v361);
                                v109 = v356;
                                if (v356)
                                {
                                  v110 = (unint64_t *)&v356->__shared_owners_;
                                  do
                                    v111 = __ldaxr(v110);
                                  while (__stlxr(v111 - 1, v110));
                                  if (!v111)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                                    std::__shared_weak_count::__release_weak(v109);
                                  }
                                }
                              }
                              else
                              {
                                v108 = 0;
                              }
                              v112 = v358;
                              if (v358)
                              {
                                v113 = (unint64_t *)&v358->__shared_owners_;
                                do
                                  v114 = __ldaxr(v113);
                                while (__stlxr(v114 - 1, v113));
                                if (!v114)
                                {
                                  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                                  std::__shared_weak_count::__release_weak(v112);
                                }
                              }
                              if (v108)
                              {
                                if (!std::string::compare(&v362, "01") && !std::string::compare(&v361, "00"))
                                {
                                  sub_1D52917E4(v5, &v357);
                                  sub_1D5284964((uint64_t)v357);
                                  sub_1D5282EB4((uint64_t)&v357);
                                  sub_1D52917E4(v5, &v357);
                                  sub_1D5284964((uint64_t)v357);
                                  sub_1D5282EB4((uint64_t)&v357);
                                  sub_1D52917E4(v5, &v357);
                                  sub_1D528479C((uint64_t)v357);
                                  sub_1D5282EB4((uint64_t)&v357);
                                }
                                else
                                {
                                  v115 = &v362;
                                  if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                    v115 = (std::string *)v362.__r_.__value_.__r.__words[0];
                                  v116 = &v361;
                                  if ((v361.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                    v116 = (std::string *)v361.__r_.__value_.__r.__words[0];
                                  printf("Unknown version for Nikon OpticalCenterOffset.  The values are major: %s and minor: %s", (const char *)v115, (const char *)v116);
                                }
                              }
                              if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v361.__r_.__value_.__l.__data_);
                              if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v362.__r_.__value_.__l.__data_);
                              goto LABEL_424;
                            case 9:
                              if (*((_WORD *)&v366 + 6 * v42 + 3) != 7)
                                goto LABEL_425;
                              sub_1D52917E4(v5, &v362);
                              sub_1D528304C(&v353, &v368);
                              v363 = sub_1D52A5CC8(v44);
                              LODWORD(v361.__r_.__value_.__l.__data_) = v353;
                              LODWORD(v355) = *sub_1D52B0860(&v361, &v363);
                              sub_1D5285B08((int *)&v357, (int *)&v355);
                              sub_1D5285164((uint64_t *)__p, (uint64_t *)&v362, (uint64_t)&v357, 0);
                              v174 = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
                              if (v362.__r_.__value_.__l.__size_)
                              {
                                v175 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
                                do
                                  v176 = __ldaxr(v175);
                                while (__stlxr(v176 - 1, v175));
                                if (!v176)
                                {
                                  ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                                  std::__shared_weak_count::__release_weak(v174);
                                }
                              }
                              sub_1D52917E4(v5, &v362);
                              v177 = sub_1D52849A0((uint64_t)v362.__r_.__value_.__l.__data_);
                              v178 = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
                              if (v362.__r_.__value_.__l.__size_)
                              {
                                v179 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
                                do
                                  v180 = __ldaxr(v179);
                                while (__stlxr(v180 - 1, v179));
                                if (!v180)
                                {
                                  ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                                  std::__shared_weak_count::__release_weak(v178);
                                }
                              }
                              sub_1D52917E4(v5, &v362);
                              v181 = sub_1D52849A0((uint64_t)v362.__r_.__value_.__l.__data_);
                              v182 = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
                              if (v362.__r_.__value_.__l.__size_)
                              {
                                v183 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
                                do
                                  v184 = __ldaxr(v183);
                                while (__stlxr(v184 - 1, v183));
                                if (!v184)
                                {
                                  ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                                  std::__shared_weak_count::__release_weak(v182);
                                }
                              }
                              sub_1D52917E4(v5, &v362);
                              v185 = sub_1D52849A0((uint64_t)v362.__r_.__value_.__l.__data_);
                              v186 = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
                              if (v362.__r_.__value_.__l.__size_)
                              {
                                v187 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
                                do
                                  v188 = __ldaxr(v187);
                                while (__stlxr(v188 - 1, v187));
                                if (!v188)
                                {
                                  ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                                  std::__shared_weak_count::__release_weak(v186);
                                }
                              }
                              sub_1D52917E4(v5, &v362);
                              v189 = sub_1D52849A0((uint64_t)v362.__r_.__value_.__l.__data_);
                              v190 = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
                              if (v362.__r_.__value_.__l.__size_)
                              {
                                v191 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
                                do
                                  v192 = __ldaxr(v191);
                                while (__stlxr(v192 - 1, v191));
                                if (!v192)
                                {
                                  ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                                  std::__shared_weak_count::__release_weak(v190);
                                }
                              }
                              sub_1D52917E4(v5, &v362);
                              v193 = sub_1D528479C((uint64_t)v362.__r_.__value_.__l.__data_);
                              v194 = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
                              if (v362.__r_.__value_.__l.__size_)
                              {
                                v195 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
                                do
                                  v196 = __ldaxr(v195);
                                while (__stlxr(v196 - 1, v195));
                                if (!v196)
                                {
                                  ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                                  std::__shared_weak_count::__release_weak(v194);
                                }
                              }
                              if (v193)
                                goto LABEL_424;
                              v197 = *(char **)(v5 + 1560);
                              v198 = *(char **)(v5 + 1568);
                              if (v197 >= v198)
                              {
                                v200 = (char *)*v350;
                                v201 = (v197 - (_BYTE *)*v350) >> 2;
                                v202 = v201 + 1;
                                if ((unint64_t)(v201 + 1) >> 62)
                                  goto LABEL_599;
                                v203 = v198 - v200;
                                if (v203 >> 1 > v202)
                                  v202 = v203 >> 1;
                                if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFFCLL)
                                  v204 = 0x3FFFFFFFFFFFFFFFLL;
                                else
                                  v204 = v202;
                                if (v204)
                                {
                                  v205 = (char *)sub_1D5282BA0((uint64_t)v351, v204);
                                  v197 = *(char **)(v5 + 1560);
                                  v200 = *(char **)(v5 + 1552);
                                }
                                else
                                {
                                  v205 = 0;
                                }
                                v206 = &v205[4 * v201];
                                *(float *)v206 = v177;
                                v199 = v206 + 4;
                                while (v197 != v200)
                                {
                                  v207 = *((_DWORD *)v197 - 1);
                                  v197 -= 4;
                                  *((_DWORD *)v206 - 1) = v207;
                                  v206 -= 4;
                                }
                                *(_QWORD *)(v5 + 1552) = v206;
                                v198 = &v205[4 * v204];
                                *(_QWORD *)(v5 + 1560) = v199;
                                *(_QWORD *)(v5 + 1568) = v198;
                                if (v200)
                                {
                                  operator delete(v200);
                                  v198 = *v351;
                                }
                              }
                              else
                              {
                                *(float *)v197 = v177;
                                v199 = v197 + 4;
                              }
                              *(_QWORD *)(v5 + 1560) = v199;
                              if (v199 >= v198)
                              {
                                v209 = (char *)*v350;
                                v210 = (v199 - (_BYTE *)*v350) >> 2;
                                v211 = v210 + 1;
                                if ((unint64_t)(v210 + 1) >> 62)
                                  goto LABEL_599;
                                v212 = v198 - v209;
                                if (v212 >> 1 > v211)
                                  v211 = v212 >> 1;
                                if ((unint64_t)v212 >= 0x7FFFFFFFFFFFFFFCLL)
                                  v213 = 0x3FFFFFFFFFFFFFFFLL;
                                else
                                  v213 = v211;
                                if (v213)
                                {
                                  v214 = (char *)sub_1D5282BA0((uint64_t)v351, v213);
                                  v199 = *(char **)(v5 + 1560);
                                  v209 = *(char **)(v5 + 1552);
                                }
                                else
                                {
                                  v214 = 0;
                                }
                                v215 = &v214[4 * v210];
                                *(float *)v215 = v181;
                                v208 = v215 + 4;
                                while (v199 != v209)
                                {
                                  v216 = *((_DWORD *)v199 - 1);
                                  v199 -= 4;
                                  *((_DWORD *)v215 - 1) = v216;
                                  v215 -= 4;
                                }
                                *(_QWORD *)(v5 + 1552) = v215;
                                v198 = &v214[4 * v213];
                                *(_QWORD *)(v5 + 1560) = v208;
                                *(_QWORD *)(v5 + 1568) = v198;
                                if (v209)
                                {
                                  operator delete(v209);
                                  v198 = *v351;
                                }
                              }
                              else
                              {
                                *(float *)v199 = v181;
                                v208 = v199 + 4;
                              }
                              *(_QWORD *)(v5 + 1560) = v208;
                              if (v208 >= v198)
                              {
                                v218 = (char *)*v350;
                                v219 = (v208 - (_BYTE *)*v350) >> 2;
                                v220 = v219 + 1;
                                if ((unint64_t)(v219 + 1) >> 62)
                                  goto LABEL_599;
                                v221 = v198 - v218;
                                if (v221 >> 1 > v220)
                                  v220 = v221 >> 1;
                                if ((unint64_t)v221 >= 0x7FFFFFFFFFFFFFFCLL)
                                  v222 = 0x3FFFFFFFFFFFFFFFLL;
                                else
                                  v222 = v220;
                                if (v222)
                                {
                                  v223 = (char *)sub_1D5282BA0((uint64_t)v351, v222);
                                  v208 = *(char **)(v5 + 1560);
                                  v218 = *(char **)(v5 + 1552);
                                }
                                else
                                {
                                  v223 = 0;
                                }
                                v224 = &v223[4 * v219];
                                *(float *)v224 = v185;
                                v217 = v224 + 4;
                                while (v208 != v218)
                                {
                                  v225 = *((_DWORD *)v208 - 1);
                                  v208 -= 4;
                                  *((_DWORD *)v224 - 1) = v225;
                                  v224 -= 4;
                                }
                                *(_QWORD *)(v5 + 1552) = v224;
                                v198 = &v223[4 * v222];
                                *(_QWORD *)(v5 + 1560) = v217;
                                *(_QWORD *)(v5 + 1568) = v198;
                                if (v218)
                                {
                                  operator delete(v218);
                                  v198 = *v351;
                                }
                              }
                              else
                              {
                                *(float *)v208 = v185;
                                v217 = v208 + 4;
                              }
                              *(_QWORD *)(v5 + 1560) = v217;
                              if (v217 >= v198)
                              {
                                v227 = (char *)*v350;
                                v228 = (v217 - (_BYTE *)*v350) >> 2;
                                v229 = v228 + 1;
                                if ((unint64_t)(v228 + 1) >> 62)
LABEL_599:
                                  sub_1D5282B8C();
                                v230 = v198 - v227;
                                if (v230 >> 1 > v229)
                                  v229 = v230 >> 1;
                                if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFFCLL)
                                  v231 = 0x3FFFFFFFFFFFFFFFLL;
                                else
                                  v231 = v229;
                                if (v231)
                                {
                                  v232 = (char *)sub_1D5282BA0((uint64_t)v351, v231);
                                  v217 = *(char **)(v5 + 1560);
                                  v227 = *(char **)(v5 + 1552);
                                }
                                else
                                {
                                  v232 = 0;
                                }
                                v233 = (float *)&v232[4 * v228];
                                *v233 = v189;
                                v226 = v233 + 1;
                                while (v217 != v227)
                                {
                                  v234 = *((_DWORD *)v217 - 1);
                                  v217 -= 4;
                                  *((_DWORD *)v233-- - 1) = v234;
                                }
                                *(_QWORD *)(v5 + 1552) = v233;
                                *(_QWORD *)(v5 + 1560) = v226;
                                *(_QWORD *)(v5 + 1568) = &v232[4 * v231];
                                if (v227)
                                  operator delete(v227);
                              }
                              else
                              {
                                *(float *)v217 = v189;
                                v226 = v217 + 4;
                              }
                              *(_QWORD *)(v5 + 1560) = v226;
                              goto LABEL_424;
                            case 13:
                              if (*((_WORD *)&v366 + 6 * v42 + 3) != 7)
                                goto LABEL_425;
                              sub_1D52917E4(v5, &v362);
                              sub_1D528304C(&v353, &v368);
                              v363 = sub_1D52A5CC8(v44);
                              LODWORD(v361.__r_.__value_.__l.__data_) = v353;
                              LODWORD(v355) = *sub_1D52B0860(&v361, &v363);
                              sub_1D5285B08((int *)&v357, (int *)&v355);
                              sub_1D5285164((uint64_t *)__p, (uint64_t *)&v362, (uint64_t)&v357, 0);
                              v160 = (std::__shared_weak_count *)v362.__r_.__value_.__l.__size_;
                              if (v362.__r_.__value_.__l.__size_)
                              {
                                v161 = (unint64_t *)(v362.__r_.__value_.__l.__size_ + 8);
                                do
                                  v162 = __ldaxr(v161);
                                while (__stlxr(v162 - 1, v161));
                                if (!v162)
                                {
                                  ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                                  std::__shared_weak_count::__release_weak(v160);
                                }
                              }
                              memset(&v362, 0, sizeof(v362));
                              memset(&v361, 0, sizeof(v361));
                              sub_1D52917E4(v5, &v357);
                              v163 = v357;
                              v363 = 2;
                              sub_1D5285A24(&v353, &v363);
                              if (sub_1D52849DC((uint64_t)v163, (unsigned int *)&v353, (uint64_t)&v362))
                              {
                                sub_1D52917E4(v5, &v355);
                                v164 = v355;
                                v359 = 2;
                                sub_1D5285A24(&v360, &v359);
                                v165 = sub_1D52849DC((uint64_t)v164, &v360, (uint64_t)&v361);
                                v166 = v356;
                                if (v356)
                                {
                                  v167 = (unint64_t *)&v356->__shared_owners_;
                                  do
                                    v168 = __ldaxr(v167);
                                  while (__stlxr(v168 - 1, v167));
                                  if (!v168)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                                    std::__shared_weak_count::__release_weak(v166);
                                  }
                                }
                              }
                              else
                              {
                                v165 = 0;
                              }
                              v169 = v358;
                              if (v358)
                              {
                                v170 = (unint64_t *)&v358->__shared_owners_;
                                do
                                  v171 = __ldaxr(v170);
                                while (__stlxr(v171 - 1, v170));
                                if (!v171)
                                {
                                  ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                                  std::__shared_weak_count::__release_weak(v169);
                                }
                              }
                              if (!v165 || std::string::compare(&v362, "01") || std::string::compare(&v361, "00"))
                                goto LABEL_322;
                              sub_1D52917E4(v5, &v357);
                              v172 = sub_1D528479C((uint64_t)v357);
                              sub_1D5282EB4((uint64_t)&v357);
                              if (v172 <= 0xE && ((1 << v172) & 0x6458) != 0)
                              {
                                *(_DWORD *)(v5 + 1340) = v172;
                                v173 = 1;
                                *(_BYTE *)(v5 + 1344) = 1;
                              }
                              else
                              {
                                v173 = *(unsigned __int8 *)(v5 + 1344);
                                v172 = *(_DWORD *)(v5 + 1340);
                                if (!*(_BYTE *)(v5 + 1344))
                                  goto LABEL_320;
                              }
                              if (v172 == 13)
                                goto LABEL_598;
LABEL_320:
                              if (v173 && v172 == 14)
                              {
LABEL_598:
                                exception = __cxa_allocate_exception(0x10uLL);
                                MEMORY[0x1D8271938](exception, "RawCameraException");
                                __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
                              }
LABEL_322:
                              if (SHIBYTE(v361.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v361.__r_.__value_.__l.__data_);
                              if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v362.__r_.__value_.__l.__data_);
                              goto LABEL_424;
                            default:
                              goto LABEL_425;
                          }
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
LABEL_13:
        if (v11)
          goto LABEL_14;
      }
      if (SHIBYTE(v371) < 0)
        operator delete(v369);
      sub_1D5285200(v372);
    }
  }
}

void sub_1D539C468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51)
{
  uint64_t v51;

  sub_1D5282EB4((uint64_t)&a28);
  if (a37 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  sub_1D5285200((uint64_t *)&a45);
  if (*(char *)(v51 - 161) < 0)
    operator delete(*(void **)(v51 - 184));
  sub_1D5285200((uint64_t *)(v51 - 160));
  _Unwind_Resume(a1);
}

void sub_1D539CBB8(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      sub_1D5282B8C();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_1D5282BA0(v4, v12);
      v8 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

uint64_t sub_1D539CC9C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1348);
}

uint64_t sub_1D539CCA4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1349);
}

uint64_t sub_1D539CCAC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1350);
}

uint64_t sub_1D539CCB4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1352);
}

uint64_t sub_1D539CCBC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1353);
}

_QWORD *sub_1D539CCC4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_1D5282C70(a2, *(const void **)(a1 + 1360), *(_QWORD *)(a1 + 1368), (uint64_t)(*(_QWORD *)(a1 + 1368) - *(_QWORD *)(a1 + 1360)) >> 3);
}

uint64_t sub_1D539CCE4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1351);
}

uint64_t sub_1D539CCEC(uint64_t a1, int a2)
{
  if (a2)
    return ((*(_BYTE *)(a1 + 1416) - 1) & 0xFD) == 0;
  else
    return (*(unsigned __int8 *)(a1 + 1416) + 255) >> 8;
}

_QWORD *sub_1D539CD10@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_1D5287D44(a2, *(const void **)(a1 + 1424), *(_QWORD *)(a1 + 1432), (uint64_t)(*(_QWORD *)(a1 + 1432) - *(_QWORD *)(a1 + 1424)) >> 2);
}

float sub_1D539CD30(uint64_t a1)
{
  return *(float *)(a1 + 1420);
}

uint64_t sub_1D539CD38(uint64_t a1, int a2)
{
  if (a2)
    return ((*(_BYTE *)(a1 + 1448) - 1) & 0xFD) == 0;
  else
    return (*(unsigned __int8 *)(a1 + 1448) + 255) >> 8;
}

_QWORD *sub_1D539CD5C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_1D5287D44(a2, *(const void **)(a1 + 1456), *(_QWORD *)(a1 + 1464), (uint64_t)(*(_QWORD *)(a1 + 1464) - *(_QWORD *)(a1 + 1456)) >> 2);
}

float sub_1D539CD7C(uint64_t a1)
{
  return *(float *)(a1 + 1452);
}

double sub_1D539CD84(uint64_t a1)
{
  return *(double *)(a1 + 1536);
}

id sub_1D539CD90(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD v21[5];
  _QWORD v22[3];
  _QWORD v23[3];
  _QWORD v24[12];
  _QWORD v25[13];

  v25[12] = *MEMORY[0x1E0C80C00];
  sub_1D52A947C();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend_mutableCopy(v2, v3, v4, v5, v6);

  v24[0] = &unk_1E99CB5E0;
  v24[1] = &unk_1E99CB5F8;
  v25[0] = &unk_1E99D0ED0;
  v25[1] = &unk_1E99D0EF8;
  v24[2] = &unk_1E99CB610;
  v24[3] = &unk_1E99CB5B0;
  v25[2] = &unk_1E99D0F20;
  v25[3] = &unk_1E99D0F48;
  v24[4] = &unk_1E99CB628;
  v24[5] = &unk_1E99CB640;
  v25[4] = &unk_1E99D0F70;
  v25[5] = &unk_1E99D0F98;
  v24[6] = &unk_1E99CB658;
  v24[7] = &unk_1E99CB670;
  v25[6] = &unk_1E99D0FC0;
  v25[7] = &unk_1E99D0FE8;
  v24[8] = &unk_1E99CB688;
  v24[9] = &unk_1E99CB6A0;
  v25[8] = &unk_1E99D1010;
  v25[9] = &unk_1E99D1038;
  v24[10] = &unk_1E99CB6B8;
  v22[0] = CFSTR("Name");
  v22[1] = CFSTR("Type");
  v23[0] = CFSTR("PreviewIFD");
  v23[1] = &unk_1E99CB6D0;
  v22[2] = CFSTR("Namespace");
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = sub_1D539D028;
  v21[3] = &unk_1E9972460;
  v21[4] = a1;
  v8 = (void *)MEMORY[0x1D82721B4](v21);
  v23[2] = v8;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v9, (uint64_t)v23, (uint64_t)v22, 3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v24[11] = &unk_1E99CB6E8;
  v25[10] = v10;
  v25[11] = &unk_1E99D1060;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v11, (uint64_t)v25, (uint64_t)v24, 12);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addEntriesFromDictionary_(v7, v13, (uint64_t)v12, v14, v15);

  objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E0C99D80], v16, (uint64_t)v7, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  return v19;
}

void sub_1D539CFDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D539D02C(uint64_t a1, const char *a2)
{
  _QWORD v3[8];
  _QWORD v4[9];

  v4[8] = *MEMORY[0x1E0C80C00];
  v3[0] = &unk_1E99CB700;
  v3[1] = &unk_1E99CB718;
  v4[0] = &unk_1E99D1088;
  v4[1] = &unk_1E99D10B0;
  v3[2] = &unk_1E99CB730;
  v3[3] = &unk_1E99CB748;
  v4[2] = &unk_1E99D10D8;
  v4[3] = &unk_1E99D1100;
  v3[4] = &unk_1E99CB760;
  v3[5] = &unk_1E99CB778;
  v4[4] = &unk_1E99D1128;
  v4[5] = &unk_1E99D1150;
  v3[6] = &unk_1E99CB790;
  v3[7] = &unk_1E99CB7A8;
  v4[6] = &unk_1E99D1178;
  v4[7] = &unk_1E99D11A0;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v4, (uint64_t)v3, 8);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t sub_1D539D12C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1384);
}

uint64_t sub_1D539D134(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1385);
}

uint64_t sub_1D539D13C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1386);
}

float sub_1D539D144(uint64_t a1)
{
  return *(float *)(a1 + 1388);
}

_QWORD *sub_1D539D14C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_1D5287D44(a2, *(const void **)(a1 + 1392), *(_QWORD *)(a1 + 1400), (uint64_t)(*(_QWORD *)(a1 + 1400) - *(_QWORD *)(a1 + 1392)) >> 2);
}

void sub_1D539D16C(uint64_t *a1@<X1>, char *a2@<X2>, void **a3@<X3>, void **a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x650uLL);
  sub_1D539D1EC(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D539D1D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D539D1EC(_QWORD *a1, uint64_t *a2, char *a3, void **a4, void **a5)
{
  a1[2] = 0;
  *a1 = &unk_1E9990760;
  a1[1] = 0;
  sub_1D53956FC((uint64_t)(a1 + 3), a2, *a3, *a4, *a5);
  return a1;
}

void sub_1D539D230(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D539D244(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9990760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D539D258(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9990760;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D539D28C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

id sub_1D539D29C(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  void *exception;

  v3 = a1;
  v4 = a2;
  sub_1D539D36C();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_URLForResource_withExtension_(v5, v6, (uint64_t)v3, (uint64_t)v4, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }

  return v8;
}

void sub_1D539D340(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_1D539D36C()
{
  if (qword_1ED5899F0 != -1)
    dispatch_once(&qword_1ED5899F0, &unk_1E99907A0);
  return (id)qword_1ED5899E8;
}

void sub_1D539D3AC()
{
  std::string::size_type size;
  std::string *p_str;
  unint64_t v2;
  void **v3;
  unsigned __int8 *v4;
  std::string *v5;
  std::string *v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  int64_t v11;
  std::string *p_p;
  CFIndex v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  CFURLRef v17;
  uint64_t v18;
  void *v19;
  void *exception;
  void *v21;
  std::string __p;
  void *v23[2];
  unsigned __int8 v24;
  std::string __str;
  Dl_info v26;
  char v27;

  if (!dladdr(sub_1D539D36C, &v26))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D52850A0(&__str, (char *)v26.dli_fname);
  sub_1D52850A0(v23, "/RawCamera.bundle");
  size = __str.__r_.__value_.__l.__size_;
  p_str = &__str;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  v2 = v24;
  v3 = (void **)v23[0];
  if ((v24 & 0x80u) != 0)
    v2 = (unint64_t)v23[1];
  else
    v3 = v23;
  v4 = (unsigned __int8 *)p_str + size;
  if (size && v2)
  {
    v5 = p_str;
    v6 = (std::string *)((char *)p_str + size);
    do
    {
      if (v5->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v3)
      {
        v7 = 1;
        while (v2 != v7)
        {
          if ((unsigned __int8 *)((char *)v5 + v7) == v4)
            goto LABEL_21;
          v8 = v5->__r_.__value_.__s.__data_[v7];
          v9 = *((unsigned __int8 *)v3 + v7++);
          if (v8 != v9)
            goto LABEL_12;
        }
        v6 = v5;
      }
LABEL_12:
      v5 = (std::string *)((char *)v5 + 1);
    }
    while (v5 != (std::string *)v4);
  }
  else
  {
    v6 = (std::string *)((char *)p_str + size);
  }
LABEL_21:
  v10 = v6 != (std::string *)v4 || v2 == 0;
  if (!v10 || (v11 = (char *)v6 - (char *)p_str, v11 == -1))
  {
    v21 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v21, "RawCameraException");
    __cxa_throw(v21, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  std::string::basic_string(&__p, &__str, 0, v11 + v2, (std::allocator<char> *)&v27);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v13 = __p.__r_.__value_.__l.__size_;
  v17 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)p_p, v13, 1u);
  if (v17)
  {
    objc_msgSend_bundleWithURL_(MEMORY[0x1E0CB34D0], v14, (uint64_t)v17, v15, v16);
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = (void *)qword_1ED5899E8;
    qword_1ED5899E8 = v18;

  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v24 < 0)
    operator delete(v23[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1D539D5C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  void *v29;

  v27 = v26;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  __cxa_begin_catch(a1);
  v29 = (void *)qword_1ED5899E8;
  qword_1ED5899E8 = 0;

  __cxa_end_catch();
  JUMPOUT(0x1D539D54CLL);
}

id sub_1D539D668()
{
  if (qword_1EFF38740 != -1)
    dispatch_once(&qword_1EFF38740, &unk_1E99907C0);
  return (id)qword_1EFF38738;
}

void sub_1D539D6A8()
{
  const char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  sub_1D539D36C();
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForInfoDictionaryKey_(v5, v0, (uint64_t)CFSTR("CFBundleShortVersionString"), v1, v2);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)qword_1EFF38738;
  qword_1EFF38738 = v3;

}

void sub_1D539D6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D539D70C(void *a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;

  v2 = (void *)MEMORY[0x1D8272058]();
  objc_msgSend_componentsSeparatedByString_(a1, v3, (uint64_t)CFSTR("."), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_count(v6, v7, v8, v9, v10);
  v15 = v11;
  if (v11 >= 4)
    v16 = 4;
  else
    v16 = v11;
  if (v16)
  {
    v17 = 0;
    LODWORD(v18) = 0;
    do
    {
      objc_msgSend_objectAtIndexedSubscript_(v6, v12, v17, v13, v14);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = objc_msgSend_intValue(v19, v20, v21, v22, v23);

      v18 = (v24 + 100 * v18);
      ++v17;
    }
    while (v16 != v17);
  }
  else
  {
    v18 = 0;
  }
  if (v15 <= 3)
  {
    v25 = (uint64x2_t)vdupq_n_s64(3 - v16);
    v26.i64[1] = 0x100000001;
    v26.i64[0] = v18 | 0x100000000;
    v27.i32[1] = 100;
    v27.i64[1] = 0x6400000064;
    v27.i32[0] = 100 * v18;
    v28 = vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)xmmword_1D5447F70, v25), (int32x4_t)vcgtq_u64((uint64x2_t)xmmword_1D5447FA0, v25)), v26, v27);
    *(int32x2_t *)v28.i8 = vmul_s32(*(int32x2_t *)v28.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
    v18 = (v28.i32[0] * v28.i32[1]);
  }

  objc_autoreleasePoolPop(v2);
  return v18;
}

void sub_1D539D834(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D539D854(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void (**v4)(_QWORD);
  char *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  _WORD *v11;
  int v12;
  int v13;
  unsigned int i;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  void (**v38)(_QWORD);
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  _QWORD v47[5];
  uint64_t v48;
  uint8_t buf[8];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CPanasonicUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v47[0] = MEMORY[0x1E0C809B0];
  v47[1] = 3221225472;
  v47[2] = sub_1D539DE24;
  v47[3] = &unk_1E996F870;
  v47[4] = a1;
  v4 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v47);
  if (*(_DWORD *)(a1 + 188))
  {
    v46 = *(_DWORD *)(a1 + 44);
    v39 = *(_DWORD *)(a1 + 48);
    v5 = (char *)operator new[]();
    v38 = v4;
    bzero(v5, 0x4001uLL);
    if (*(_DWORD *)(a1 + 196) == 14)
      v6 = 10;
    else
      v6 = 8;
    v43 = v6;
    if (*(_DWORD *)(a1 + 196) == 14)
      v7 = 11;
    else
      v7 = 14;
    v45 = v7;
    if (*(_DWORD *)(a1 + 196) == 14)
      v8 = -512;
    else
      v8 = -128;
    v41 = v8;
    v9 = sub_1D530B618(a1);
    v10 = v43;
    if (v39 >= 1)
    {
      v11 = (_WORD *)v9;
      v12 = 0;
      v42 = 0;
      v13 = 0;
      v44 = ~(-1 << v43);
      do
      {
        v40 = v12;
        if (v46 >= 1)
        {
          for (i = 0; i != v46; ++i)
          {
            v15 = i % v45;
            if (i % v45)
            {
              if (-1431655765 * v15 - 1431655766 <= 0x55555554)
              {
                if (!v13)
                {
                  if (*(_BYTE *)(a1 + 192))
                    v16 = 8200;
                  else
                    v16 = 0;
                  (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), &v5[v16], (0x4000 - v16));
                  (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5, v16);
                  v10 = v43;
                }
                v17 = v13 - 2;
                v13 = (v13 - 2) & 0x1FFFF;
                v42 = 4u >> (~(*(unsigned __int16 *)&v5[(v17 >> 3) & 0x3FFF ^ 0x3FF0] >> (v17 & 7)) & 3);
              }
            }
            else
            {
              v48 = 0;
              *(_QWORD *)buf = 0;
            }
            v18 = v15 & 1;
            v19 = (_DWORD *)((unint64_t)&v48 | (4 * v18));
            v20 = (_DWORD *)((unint64_t)buf | (4 * v18));
            if (*v19)
            {
              if (!v13)
              {
                if (*(_BYTE *)(a1 + 192))
                  v21 = 8200;
                else
                  v21 = 0;
                (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), &v5[v21], (0x4000 - v21));
                (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5, v21);
                v10 = v43;
              }
              v22 = v13 - v10;
              v13 = (v13 - v10) & 0x1FFFF;
              v23 = (*(unsigned __int16 *)&v5[(v22 >> 3) & 0x3FFF ^ 0x3FF0] >> (v22 & 7)) & v44;
              if (v23)
              {
                v24 = *v20 + (v41 << v42);
                if (v42 == 4 || v24 < 0)
                  v26 = ~(-1 << v42);
                else
                  v26 = -1;
                *v20 = (v26 & v24) + (v23 << v42);
              }
            }
            else
            {
              if (!v13)
              {
                if (*(_BYTE *)(a1 + 192))
                  v27 = 8200;
                else
                  v27 = 0;
                (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), &v5[v27], (0x4000 - v27));
                (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5, v27);
                v10 = v43;
              }
              v28 = v13 - v10;
              v13 = (v13 - v10) & 0x1FFFF;
              v29 = (*(unsigned __int16 *)&v5[(v28 >> 3) & 0x3FFF ^ 0x3FF0] >> (v28 & 7)) & v44;
              *v19 = v29;
              if (v29)
                v30 = 1;
              else
                v30 = v15 > v45 - 3;
              if (v30)
              {
                v31 = 0;
                v32 = 0;
                v33 = *(_DWORD *)(a1 + 196);
                if (*(_BYTE *)(a1 + 192))
                  v34 = 8200;
                else
                  v34 = 0;
                v35 = v33 - v10;
                if (v33 != v10)
                {
                  if (!v13)
                  {
                    (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), &v5[v34], (0x4000 - v34));
                    (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5, v34);
                    v10 = v43;
                  }
                  v31 = (v13 - v35) & 0x1FFFF;
                  v32 = (*(unsigned __int16 *)&v5[((v13 - v35) >> 3) & 0x3FFF ^ 0x3FF0] >> ((v13 - v35) & 7)) & ~(-1 << v35);
                }
                *v20 = v32 | (v29 << v35);
                v13 = v31;
              }
            }
            v36 = *(_DWORD *)(a1 + 196);
            if (v36 == 14 && v15 == v45 - 1)
            {
              if (v13)
              {
                LOBYTE(v36) = 14;
              }
              else
              {
                if (*(_BYTE *)(a1 + 192))
                  v37 = 8200;
                else
                  v37 = 0;
                (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), &v5[v37], (0x4000 - v37));
                (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5, v37);
                v10 = v43;
                v36 = *(_DWORD *)(a1 + 196);
              }
              v13 = (v13 + 131068) & 0x1FFFF;
            }
            *v11++ = ((~(-1 << v36) - *v20) & ((~(-1 << v36) - *v20) >> 31)) + *v20;
          }
        }
        v12 = v40 + 1;
      }
      while (v40 + 1 != v39);
    }
    MEMORY[0x1D8271AC4](v5, 0x1000C8077774924);
    v4 = v38;
  }
  v4[2](v4);

}

void sub_1D539DDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (**a10)(_QWORD))
{
  uint64_t v10;

  MEMORY[0x1D8271AC4](v10, 0x1000C8077774924);
  a10[2](a10);

  _Unwind_Resume(a1);
}

void sub_1D539DE24(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CPanasonicUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D539DEA8(_QWORD *a1)
{
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D539DECC()
{
  return 1;
}

_QWORD *sub_1D539DED4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = 0;
  return sub_1D528F9B4(a1, 4uLL, &v2);
}

uint64_t sub_1D539DF00()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF38750);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF38750))
  {
    v2 = operator new();
    sub_1D539DFAC(v2);
    qword_1EFF38748 = v2;
    __cxa_guard_release(&qword_1EFF38750);
  }
  return qword_1EFF38748;
}

void sub_1D539DF74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1D8271ADC](v1, 0x10A0C40AD2D8FC7);
  __cxa_guard_abort(&qword_1EFF38750);
  _Unwind_Resume(a1);
}

uint64_t sub_1D539DFAC(uint64_t a1)
{
  void *exception;

  *(_QWORD *)a1 = dispatch_queue_create("PurgableImageStore", 0);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 32) = 2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = nullsub_9;
  *(_QWORD *)(a1 + 48) = sub_1D539E0DC;
  *(_QWORD *)(a1 + 56) = sub_1D539E0E8;
  *(_QWORD *)(a1 + 64) = nullsub_10;
  *(_QWORD *)(a1 + 96) = a1;
  *(_QWORD *)(a1 + 104) = nullsub_11;
  *(_QWORD *)(a1 + 72) = sub_1D539E0F8;
  *(_QWORD *)(a1 + 80) = sub_1D539E150;
  *(_QWORD *)(a1 + 88) = sub_1D539E234;
  if (cache_create("com.apple.rawcamera.images", (const cache_attributes_t *)(a1 + 32), (cache_t **)(a1 + 112)))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_1D539E0A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  __cxa_free_exception(v3);
  sub_1D529496C(v2, *(_QWORD **)(v1 + 16));

  _Unwind_Resume(a1);
}

BOOL sub_1D539E0DC(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_1D539E0E8(uint64_t result, _QWORD *a2)
{
  *a2 = result;
  return result;
}

void sub_1D539E0F8(uint64_t a1, NSObject **a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *a2;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1D539E640;
  v3[3] = &unk_1E99914A0;
  v3[4] = a2;
  v3[5] = a1;
  dispatch_sync(v2, v3);
}

uint64_t sub_1D539E150(unint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v11[3];
  unint64_t *v12;

  if (!a1)
    return 0;
  v11[0] = a1;
  v12 = v11;
  v2 = sub_1D539EAB8((uint64_t **)(a2 + 8), v11, (uint64_t)&unk_1D544A5C4, (uint64_t **)&v12);
  v3 = v2[5];
  v4 = (std::__shared_weak_count *)v2[6];
  v11[1] = v3;
  v11[2] = (unint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v3)
  {
    v7 = sub_1D529729C(v3);
    if (!v4)
      return v7;
  }
  else
  {
    v7 = 0;
    if (!v4)
      return v7;
  }
  v8 = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v7;
}

void sub_1D539E220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D539E234(unint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9[3];
  unint64_t *v10;

  if (a1)
  {
    v9[0] = a1;
    v10 = v9;
    v2 = sub_1D539EAB8((uint64_t **)(a2 + 8), v9, (uint64_t)&unk_1D544A5C4, (uint64_t **)&v10);
    v3 = v2[5];
    v4 = (std::__shared_weak_count *)v2[6];
    v9[1] = v3;
    v9[2] = (unint64_t)v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    if (v3)
      sub_1D529728C(v3);
    if (v4)
    {
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1D539E2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D539E2FC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *exception;
  void *v18;
  void *value_out;

  value_out = 0;
  result = cache_get_and_retain(*(cache_t **)(a1 + 112), a2, &value_out);
  if ((_DWORD)result == 2)
  {
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v8 = *(_QWORD **)(a1 + 16);
  v7 = (_QWORD *)(a1 + 16);
  v6 = v8;
  if (!v8)
    goto LABEL_21;
  v9 = v7;
  do
  {
    v10 = v6[4];
    v11 = v10 >= (unint64_t)value_out;
    if (v10 >= (unint64_t)value_out)
      v12 = v6;
    else
      v12 = v6 + 1;
    if (v11)
      v9 = v6;
    v6 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 == v7 || v9[4] > (unint64_t)value_out)
  {
LABEL_21:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_22;
  }
  v14 = v9[5];
  v13 = v9[6];
  *a3 = v14;
  a3[1] = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (!v14)
  {
LABEL_22:
    v18 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v18, "RawCameraException");
    __cxa_throw(v18, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D539E414(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D539E44C(uint64_t a1, void **a2)
{
  uint64_t result;
  void *exception;

  result = cache_release_value(*(cache_t **)(a1 + 112), *a2);
  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D539E4A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D539E4B8(uint64_t a1, void *a2, void **a3)
{
  NSObject *v5;
  void *exception;
  _QWORD v7[6];

  if (cache_set_and_retain(*(cache_t **)(a1 + 112), a2, *a3, 0x64uLL))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v5 = *(NSObject **)a1;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D539E574;
  v7[3] = &unk_1E99914A0;
  v7[4] = a1;
  v7[5] = a3;
  dispatch_sync(v5, v7);
}

void sub_1D539E560(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D539E574(uint64_t a1)
{
  uint64_t *v1;
  uint64_t **v2;
  uint64_t *v3;
  unint64_t v5;
  unint64_t *v6;

  v1 = *(uint64_t **)(a1 + 40);
  v2 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *v1;
  v6 = &v5;
  v3 = sub_1D539EAB8(v2, &v5, (uint64_t)&unk_1D544A5C4, (uint64_t **)&v6);
  return sub_1D52908C8(v3 + 5, v1);
}

uint64_t sub_1D539E5D0(uint64_t a1, void *a2)
{
  uint64_t result;
  void *exception;

  result = cache_remove(*(cache_t **)(a1 + 112), a2);
  if ((result | 2) != 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D539E62C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D539E640(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)(v1 + 16);
  v2 = (uint64_t *)(v1 + 16);
  v3 = v4;
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v6 = v2;
    do
    {
      v7 = v3[4];
      v8 = v7 >= v5;
      if (v7 >= v5)
        v9 = v3;
      else
        v9 = v3 + 1;
      if (v8)
        v6 = v3;
      v3 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 != v2 && v6[4] <= v5)
    {
      sub_1D539E6C4((uint64_t **)v2 - 1, v6);
      sub_1D5282EB4((uint64_t)(v6 + 5));
      operator delete(v6);
    }
  }
}

uint64_t *sub_1D539E6C4(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_1D539E734(v6, a2);
  return v3;
}

uint64_t *sub_1D539E734(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t *sub_1D539EAB8(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x38uLL);
    v14[1] = v7;
    v12[4] = **a4;
    v12[5] = 0;
    v12[6] = 0;
    v15 = 1;
    sub_1D528EFCC(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    sub_1D539EB9C((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

void sub_1D539EB9C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1D5282EB4((uint64_t)v2 + 40);
    operator delete(v2);
  }
}

char *sub_1D539EBE0(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  char *v7;
  char *result;

  *(_DWORD *)(a1 + 224) = a2;
  *(_DWORD *)(a1 + 228) = a3;
  v7 = (char *)(a1 + 232);
  if (v7 != (char *)a4)
    sub_1D5282A44(v7, *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  result = (char *)(a1 + 256);
  if (a1 + 256 != a5)
    return sub_1D5282A44(result, *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return result;
}

uint64_t sub_1D539EC44(_DWORD *a1)
{
  int v1;

  v1 = a1[17];
  if (((a1[70] + 2 * v1) & 0xFLL) != 0)
    return (2 * (a1[15] + 2 * v1) + 31) & 0x3FFFFFFE0;
  else
    return 2 * (a1[70] + 2 * v1);
}

uint64_t sub_1D539EC7C(uint64_t a1)
{
  dispatch_once_t *v2;
  _QWORD block[5];

  v2 = (dispatch_once_t *)(a1 + 131368);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D539ECF4;
  block[3] = &unk_1E996F870;
  block[4] = a1;
  if (*v2 != -1)
    dispatch_once(v2, block);
  return a1 + 288;
}

void sub_1D539ECF4(uint64_t a1)
{
  _QWORD *v1;
  _WORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  NSObject *v14;
  const void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double *v20;
  uint64_t v21;
  double v22;
  double v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  __int16 v29;
  uint64_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint8_t buf[8];
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1 + 16420;
  v4 = v1[24];
  v3 = v1[25];
  v5 = v3 - v4;
  if (v3 == v4 || (unint64_t)v5 > 0x20001)
  {
    v8 = v1[16422];
    v7 = v1[16423];
    *v2 = 1;
    if (v7 == v8)
    {
      v30 = 0;
      v31 = (int16x8_t)xmmword_1D5447F60;
      v32.i64[0] = 0x8000800080008;
      v32.i64[1] = 0x8000800080008;
      do
      {
        *(int16x8_t *)&v1[v30 + 36] = v31;
        v31 = vaddq_s16(v31, v32);
        v30 += 2;
      }
      while (v30 != 0x4000);
      return;
    }
    while (1)
    {
      v9 = __dynamic_cast(*(const void **)v8, (const struct __class_type_info *)&unk_1E996FA38, (const struct __class_type_info *)&unk_1E99A3A48, 0);
      v10 = *(std::__shared_weak_count **)(v8 + 8);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      v13 = *((_DWORD *)v9 + 7);
      if (v13)
        break;
      v15 = (const void *)*((_QWORD *)v9 + 6);
      v16 = *((_QWORD *)v9 + 7);
      v17 = (v16 - (uint64_t)v15) >> 3;
      *(_QWORD *)buf = 0;
      v34 = 0uLL;
      sub_1D5282C70(buf, v15, v16, v17);
      v18 = 0;
      v19 = v17 - 1;
      v20 = *(double **)buf;
      do
      {
        v21 = 0;
        v22 = 0.0;
        do
        {
          v23 = v20[v21];
          v22 = v22 + v23 * pow((float)((float)v18 / 65535.0), (double)v21++);
        }
        while (v19 >= v21);
        *((_WORD *)v1 + v18++ + 144) = (int)(v22 * 65535.0);
      }
      while (v18 != 0x10000);
      *(_QWORD *)&v34 = v20;
      operator delete(v20);
      if (v10)
        goto LABEL_20;
LABEL_24:
      v8 += 16;
      if (v8 == v7)
        return;
    }
    sub_1D540E834();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v13;
      LOWORD(v34) = 2048;
      *(_QWORD *)((char *)&v34 + 2) = 1;
      _os_log_impl(&dword_1D527F000, v14, OS_LOG_TYPE_INFO, "Plane %d will be ignored. Only expected up to %zu planes\n", buf, 0x12u);
    }

    if (!v10)
      goto LABEL_24;
LABEL_20:
    v24 = (unint64_t *)&v10->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    goto LABEL_24;
  }
  v26 = 0;
  v27 = v5 >> 1;
  v28 = -1;
  do
  {
    *((_WORD *)v1 + v26 + 144) = *(_WORD *)(v4 + 2 * v26);
    v26 = v28 + 2;
    ++v28;
  }
  while (v27 > v26);
  if (!((v28 + 1) >> 16))
  {
    v29 = *((_WORD *)v1 + v28 + 144);
    do
      *((_WORD *)v1 + v26++ + 144) = v29;
    while ((_DWORD)v26 != 0x10000);
  }
  *v2 = 1;
}

void sub_1D539EFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1D539EFEC(uint64_t a1, int a2, unsigned int a3)
{
  void *v5;
  uint64_t v6;
  int v8;
  int v9;

  v9 = a2;
  v5 = malloc_type_malloc(a3 + 64, 0x4AD844B7uLL);
  v6 = *(_QWORD *)(a1 + 24);
  sub_1D5282F74(&v8, &v9);
  (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v6 + 40))(v6, &v8, 0);
  (*(void (**)(_QWORD, void *, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5, a3);
  return v5;
}

void sub_1D539F080(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    free(v1);
  __cxa_end_catch();
  JUMPOUT(0x1D539F068);
}

void sub_1D539F0A4(os_signpost_id_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v14;
  NSObject *v15;
  void (**v16)(_QWORD);
  const char *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  id v23;
  double x;
  double y;
  double width;
  uint64_t v27;
  double height;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int16 *v39;
  uint64_t v40;
  _WORD *v41;
  unsigned __int16 *v42;
  unint64_t v43;
  unsigned int v44;
  void *exception;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  _QWORD v50[5];
  uint8_t buf[16];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _BYTE v62[28];
  uint64_t v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;

  v63 = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (a1 + 1 >= 2 && os_signpost_enabled(v14))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v15, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CDNGJPEGXLBayerUnpacker::unpackTile", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v50[0] = MEMORY[0x1E0C809B0];
  v50[1] = 3221225472;
  v50[2] = sub_1D539F690;
  v50[3] = &unk_1E996F870;
  v50[4] = a1;
  v16 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v50);
  JxlDecoderCreate();
  JxlDecoderSubscribeEvents();
  if (JxlDecoderSetInput() || JxlDecoderProcessInput() != 64)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v61 = 0u;
  memset(v62, 0, sizeof(v62));
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  *(_OWORD *)buf = 0u;
  v52 = 0u;
  if (JxlDecoderGetBasicInfo() || JxlDecoderProcessInput() != 256)
  {
    v46 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v46, "RawCameraException");
    __cxa_throw(v46, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (JxlDecoderGetColorAsEncodedProfile() || JxlDecoderSetPreferredColorProfile())
  {
    v47 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v47, "RawCameraException");
    __cxa_throw(v47, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (JxlDecoderImageOutBufferSize())
  {
    v48 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v48, "RawCameraException");
    __cxa_throw(v48, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v20 = a3[2];
  v19 = a3[3];
  if (!(2 * v19 * (uint64_t)v20) && (v21 = *a3, v22 = a3[1], v22 == a5[1]) && v21 == *a5)
  {
    v23 = 0;
    x = (double)v21;
    y = (double)v22;
    width = (double)v20;
    v27 = a2;
    height = (double)v19;
  }
  else
  {
    objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v17, 0, 0, v18);
    v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v27 = objc_msgSend_mutableBytes(v23, v29, v30, v31, v32);
    v64.origin.x = (double)*a3;
    v64.origin.y = (double)a3[1];
    v64.size.width = (double)a3[2];
    v64.size.height = (double)a3[3];
    v66.origin.x = (double)*a5;
    v66.origin.y = (double)a5[1];
    v66.size.width = (double)a5[2];
    v66.size.height = (double)a5[3];
    v65 = CGRectIntersection(v64, v66);
    x = v65.origin.x;
    y = v65.origin.y;
    width = v65.size.width;
    height = v65.size.height;
  }
  if (JxlDecoderSetImageOutBuffer() || JxlDecoderProcessInput() != 4096 || (a4 & 1) != 0)
  {
    v49 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v49, "RawCameraException");
    __cxa_throw(v49, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v33 = (unint64_t)y;
  v34 = (unint64_t)(y + height);
  if ((unint64_t)y < v34)
  {
    v35 = (unint64_t)(x + width);
    v36 = a5[2];
    v37 = a2 + 2 * (unint64_t)x - 2 * *a3;
    v38 = a4 * (v33 - a3[1]);
    v39 = (unsigned __int16 *)(v27 + 2 * (v33 - a5[1]) * v36 + 2 * (unint64_t)x - 2 * *a5);
    v40 = 2 * v36;
    do
    {
      if (v35 > (unint64_t)x)
      {
        v41 = (_WORD *)(v37 + (v38 & 0xFFFFFFFFFFFFFFFELL));
        v42 = v39;
        v43 = v35 - (unint64_t)x;
        do
        {
          v44 = *v42++;
          *v41++ = *(_WORD *)(a8 + 2 * v44);
          --v43;
        }
        while (v43);
      }
      ++v33;
      v38 += a4;
      v39 = (unsigned __int16 *)((char *)v39 + v40);
    }
    while (v33 != v34);
  }
  JxlDecoderDestroy();

  v16[2](v16);
}

void sub_1D539F5F0(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD);
  void *v2;

  v1[2](v1);
  _Unwind_Resume(a1);
}

void sub_1D539F690(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGJPEGXLBayerUnpacker::unpackTile", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D539F714(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  void *v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _WORD *v34;
  unint64_t v35;
  unint64_t v36;
  void *exception;
  void *v38;
  BOOL v39;
  void *v40;
  void (**v41)(_QWORD);
  int v42;
  NSObject *queue;
  NSObject *group;
  unint64_t v45;
  _QWORD block[7];
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  uint8_t buf[8];
  unsigned int v56;
  _QWORD v57[6];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CDNGJPEGXLBayerUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v57[0] = MEMORY[0x1E0C809B0];
  v57[1] = 3221225472;
  v57[2] = sub_1D539FC84;
  v57[3] = &unk_1E996F870;
  v57[4] = a1;
  v4 = MEMORY[0x1D82721B4](v57);
  v5 = *(unsigned int *)(a1 + 44);
  v45 = *(unsigned int *)(a1 + 48);
  v7 = *(_DWORD *)(a1 + 224);
  v6 = *(_DWORD *)(a1 + 228);
  *(_QWORD *)buf = (uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 2;
  sub_1D528304C(&v56, (unint64_t *)buf);
  v8 = v56;
  v42 = (*(uint64_t (**)(os_signpost_id_t))(*(_QWORD *)a1 + 40))(a1);
  if (*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232) != *(_QWORD *)(a1 + 264) - *(_QWORD *)(a1 + 256)
    || (v5 - 100000) < 0xFFFE7961
    || (v45 - 100000) < 0xFFFE7961
    || v7 - 100000 < 0xFFFE7961
    || v6 - 100000 < 0xFFFE7961
    || v8 >> 5 >= 0x271)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if ((v45 + v6 - 1) / v6 * ((v5 + v7 - 1) / v7) != (_DWORD)v8)
  {
    v38 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v38, "RawCameraException");
    __cxa_throw(v38, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  group = dispatch_group_create();
  queue = dispatch_queue_create("JPEGXL DNG Tile Unpacker Queue", MEMORY[0x1E0C80D50]);
  v9 = *(_DWORD *)(a1 + 131400) != 1 || *(_DWORD *)(a1 + 131404) != 1;
  v41 = (void (**)(_QWORD))v4;
  v10 = sub_1D530B618(a1);
  v14 = (_WORD *)v10;
  v39 = v9;
  if (v9)
  {
    objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v11, 2 * (v45 * v5), v12, v13);
    v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v20 = objc_msgSend_mutableBytes(v15, v16, v17, v18, v19);
    v40 = v15;
    if (!(_DWORD)v8)
      goto LABEL_26;
  }
  else
  {
    v40 = 0;
    v20 = v10;
    if (!(_DWORD)v8)
      goto LABEL_26;
  }
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 4 * v8;
  do
  {
    v25 = sub_1D539EFEC(a1, *(_DWORD *)(*(_QWORD *)(a1 + 232) + v21), *(_DWORD *)(*(_QWORD *)(a1 + 256) + v21));
    if (v25)
    {
      v26 = *(_DWORD *)(*(_QWORD *)(a1 + 256) + v21);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_1D539FD08;
      block[3] = &unk_1E996F8B0;
      block[4] = a1;
      block[5] = v25;
      block[6] = v20;
      v47 = v26;
      v48 = v5;
      v49 = v45;
      v50 = v42;
      v51 = v22;
      v52 = v23;
      v53 = v7;
      v54 = v6;
      dispatch_group_async(group, queue, block);
    }
    v21 += 4;
    if (v22 + v7 >= v5)
      v27 = v6;
    else
      v27 = 0;
    v23 += v27;
    if (v22 + v7 >= v5)
      v22 = 0;
    else
      v22 += v7;
  }
  while (v24 != v21);
LABEL_26:
  dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
  if (v39 && (_DWORD)v45)
  {
    v28 = 0;
    v29 = *(unsigned int *)(a1 + 131400);
    v30 = *(unsigned int *)(a1 + 131404);
    v31 = *(int *)(a1 + 280) / v29;
    v32 = *(int *)(a1 + 284) / v30;
    do
    {
      if ((_DWORD)v5)
      {
        v33 = 0;
        v34 = v14;
        do
        {
          v35 = v33 / v29 + v28 * v5 / v30;
          *v34 = *(_WORD *)(v20 + 2 * v35);
          v34[1] = *(_WORD *)(v20 + 2 * (v35 + v31));
          v36 = (v28 / v30 + v32) * v5 + v33 / v29;
          v34[v5] = *(_WORD *)(v20 + 2 * v36);
          v34[v5 + 1] = *(_WORD *)(v20 + 2 * (v36 + v31));
          v33 += 2;
          v34 += 2;
        }
        while (v33 < v5);
      }
      v28 += 2;
      v14 += 2 * v5;
    }
    while (v28 < v45);
  }

  v41[2](v41);
}

void sub_1D539FBF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D539FC84(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGJPEGXLBayerUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D539FD08(uint64_t a1)
{
  os_signpost_id_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 60);
  v4 = *(_QWORD *)(a1 + 40) + *(unsigned int *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_DWORD *)(a1 + 64);
  v14 = 0;
  sub_1D5282DF0(&v15, v3, v6);
  v7 = 2 * (*(_DWORD *)(a1 + 68) * *(_DWORD *)(a1 + 60));
  v8 = *(_DWORD *)(a1 + 80);
  v9 = *(_DWORD *)(a1 + 84);
  sub_1D5282DF0(&v12, *(_DWORD *)(a1 + 72), *(_DWORD *)(a1 + 76));
  sub_1D5282DF0(&v13, v8, v9);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = sub_1D539EC7C(v2);
  sub_1D539F0A4(v2, v5, (int *)&v14, v7, &v12, v10, v4, v11);
  free(*(void **)(a1 + 40));
}

_QWORD *sub_1D539FDD4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  *(_QWORD *)a1 = off_1E99914D0;
  v6 = (void **)(a1 + 131376);
  sub_1D5282E44(&v6);
  v2 = *(void **)(a1 + 256);
  if (v2)
  {
    *(_QWORD *)(a1 + 264) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(_QWORD *)(a1 + 240) = v3;
    operator delete(v3);
  }
  *(_QWORD *)a1 = &unk_1E998DB60;
  v4 = *(void **)(a1 + 192);
  if (v4)
  {
    *(_QWORD *)(a1 + 200) = v4;
    operator delete(v4);
  }
  return sub_1D5282F0C((_QWORD *)a1);
}

uint64_t sub_1D539FE60(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  void **v7;

  *(_QWORD *)a1 = off_1E99914D0;
  v7 = (void **)(a1 + 131376);
  sub_1D5282E44(&v7);
  v2 = *(void **)(a1 + 256);
  if (v2)
  {
    *(_QWORD *)(a1 + 264) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(_QWORD *)(a1 + 240) = v3;
    operator delete(v3);
  }
  *(_QWORD *)a1 = &unk_1E998DB60;
  v4 = *(void **)(a1 + 192);
  if (v4)
  {
    *(_QWORD *)(a1 + 200) = v4;
    operator delete(v4);
  }
  v5 = sub_1D5282F0C((_QWORD *)a1);
  return MEMORY[0x1D8271ADC](v5, 0x10B1C4032A9F176);
}

double sub_1D53A00B0(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  float64x2_t v3;
  double result;

  *(double *)v2.i64 = pow(fabs(*(double *)a2.i64), *(long double *)(a1 + 32));
  v3.f64[0] = NAN;
  v3.f64[1] = NAN;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vnegq_f64(v3), v2, a2).u64[0];
  return result;
}

double sub_1D53A00E8(uint64_t a1, int8x16_t a2)
{
  int8x16_t v2;
  float64x2_t v3;
  double result;

  *(double *)v2.i64 = pow(fabs(*(double *)a2.i64), 1.0 / *(double *)(a1 + 32));
  v3.f64[0] = NAN;
  v3.f64[1] = NAN;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vnegq_f64(v3), v2, a2).u64[0];
  return result;
}

double sub_1D53A02B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double (**v7)(double);
  double v8;

  objc_msgSend_inverse(*(void **)(a1 + 32), a2, a3, a4, a5);
  v7 = (double (**)(double))objc_claimAutoreleasedReturnValue();
  v8 = v7[2](a6);

  return v8;
}

double sub_1D53A02FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double (**v7)(double);
  double v8;

  objc_msgSend_function(*(void **)(a1 + 32), a2, a3, a4, a5);
  v7 = (double (**)(double))objc_claimAutoreleasedReturnValue();
  v8 = v7[2](a6);

  return v8;
}

double sub_1D53A0530(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double (**v8)(_QWORD);
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(double);
  double v14;

  objc_msgSend_function(*(void **)(a1 + 32), a2, a3, a4, a5);
  v8 = (double (**)(_QWORD))objc_claimAutoreleasedReturnValue();
  objc_msgSend_function(*(void **)(a1 + 40), v9, v10, v11, v12);
  v13 = (void (**)(double))objc_claimAutoreleasedReturnValue();
  v13[2](a6);
  v14 = v8[2](v8);

  return v14;
}

double sub_1D53A05A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double (**v8)(_QWORD);
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(double);
  double v14;

  objc_msgSend_inverse(*(void **)(a1 + 32), a2, a3, a4, a5);
  v8 = (double (**)(_QWORD))objc_claimAutoreleasedReturnValue();
  objc_msgSend_inverse(*(void **)(a1 + 40), v9, v10, v11, v12);
  v13 = (void (**)(double))objc_claimAutoreleasedReturnValue();
  v13[2](a6);
  v14 = v8[2](v8);

  return v14;
}

id sub_1D53A08C0(void *a1, double a2, double a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  _QWORD v10[4];
  id v11;
  double v12;
  double v13;

  v5 = a1;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D53A101C;
  v10[3] = &unk_1E99916E0;
  v12 = a2;
  v13 = a3;
  v11 = v5;
  v6 = v5;
  v7 = (void *)MEMORY[0x1D82721B4](v10);
  v8 = (void *)MEMORY[0x1D82721B4]();

  return v8;
}

double sub_1D53A0CBC(uint64_t a1, double a2)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  double v11;
  int v12;

  v4 = objc_retainAutorelease(*(id *)(a1 + 32));
  v9 = objc_msgSend_mutableBytes(v4, v5, v6, v7, v8);
  v10 = *(_DWORD *)(a1 + 56);
  v11 = (a2 - *(double *)(a1 + 40)) / (*(double *)(a1 + 48) - *(double *)(a1 + 40)) * (double)v10;
  v12 = (int)fmin(floor(fmax(v11, 0.0)), (double)(v10 - 1));
  return *(double *)(v9 + 8 * v12) * ((double)(v12 + 1) - v11)
       + (v11 - (double)v12) * *(double *)(v9 + 8 * (v12 + 1));
}

uint64_t sub_1D53A0D50(uint64_t a1, double a2)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = objc_retainAutorelease(*(id *)(a1 + 32));
  result = objc_msgSend_mutableBytes(v4, v5, v6, v7, v8);
  v10 = *(unsigned int *)(a1 + 56);
  do
  {
    if ((int)v10 < 1)
      break;
    if (!--v10)
      break;
  }
  while (*(double *)(result + 8 * v10) > a2);
  return result;
}

uint64_t sub_1D53A0DE4(uint64_t a1, double a2)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  double v14;

  v4 = objc_retainAutorelease(*(id *)(a1 + 32));
  result = objc_msgSend_mutableBytes(v4, v5, v6, v7, v8);
  v10 = 0;
  v11 = *(unsigned int *)(a1 + 56);
  v12 = -1;
  do
  {
    v13 = v11 + v10;
    if ((int)v11 + (int)v10 < 1)
      break;
    v14 = *(double *)(result + 8 * (v11 + v10-- - 1));
    ++v12;
    if (v13 == 1)
      break;
  }
  while (v14 < a2);
  return result;
}

double sub_1D53A101C(uint64_t a1, double a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  BOOL v20;
  double v23;
  double v24;

  v4 = *(double *)(a1 + 40);
  v5 = *(double *)(a1 + 48);
  v6 = (*(double (**)(double))(*(_QWORD *)(a1 + 32) + 16))(v4);
  v7 = (*(double (**)(double))(*(_QWORD *)(a1 + 32) + 16))(v5);
  v8 = v6;
  v9 = v4;
  v10 = v7;
  v11 = -21;
  while (1)
  {
    if (v8 >= v10)
      v12 = v10;
    else
      v12 = v8;
    if (v8 >= v10)
      v13 = v5;
    else
      v13 = v9;
    if (v8 <= v10)
      v14 = v10;
    else
      v14 = v8;
    if (v8 <= v10)
      v15 = v5;
    else
      v15 = v9;
    if (v12 >= a2)
      return v13;
    if (v14 <= a2)
      return v15;
    v23 = v5;
    v24 = v8;
    v16 = (v9 + v5) * 0.5;
    v17 = v9;
    (*(void (**)(double))(*(_QWORD *)(a1 + 32) + 16))(v16);
    if (v12 > a2 || v18 < a2)
    {
      v20 = v14 < a2 || v18 > a2;
      v9 = v17;
      v5 = v23;
      v8 = v24;
      if (v20)
        goto LABEL_27;
      v9 = v15;
      v5 = v16;
      v8 = v14;
    }
    else
    {
      v9 = v13;
      v5 = v16;
      v8 = v12;
    }
    v10 = v18;
LABEL_27:
    if (__CFADD__(v11++, 1))
      return v16;
  }
}

_QWORD *sub_1D53A1140@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D53A1264(a1);
}

uint64_t sub_1D53A1160(uint64_t a1)
{
  void *exception;

  *(_QWORD *)a1 = &off_1E9991710;
  if (pthread_mutex_init((pthread_mutex_t *)(a1 + 8), 0))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_1D53A11C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A11DC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E9991710;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 8));
  return a1;
}

void sub_1D53A1210(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E9991710;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 8));
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53A1254(uint64_t a1)
{
  return pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
}

uint64_t sub_1D53A125C(uint64_t a1)
{
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 8));
}

_QWORD *sub_1D53A1264@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x60uLL);
  result = sub_1D53A12AC(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1D53A1298(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53A12AC(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E9991740;
  a1[1] = 0;
  sub_1D53A1160((uint64_t)(a1 + 3));
  return a1;
}

void sub_1D53A12E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53A12F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9991740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53A130C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9991740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53A1340(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D53A1350(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  int i;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  void *__p;
  void *v19;
  _QWORD *v20;

  v5 = sub_1D544098C(a1, a2);
  *(_QWORD *)v5 = off_1E9991790;
  *(_OWORD *)(v5 + 16) = 0u;
  v6 = (uint64_t *)(v5 + 16);
  *(_OWORD *)(v5 + 32) = 0u;
  *(_QWORD *)(v5 + 48) = 0;
  for (i = sub_1D52847F8(*a3); i; --i)
  {
    v8 = sub_1D528494C(*a3);
    v9 = sub_1D528494C(*a3);
    v10 = sub_1D528494C(*a3);
    v11 = sub_1D528494C(*a3);
    v12 = sub_1D528494C(*a3);
    v13 = sub_1D528494C(*a3);
    v14 = (double *)operator new(0x30uLL);
    v19 = v14 + 6;
    v20 = v14 + 6;
    *v14 = v8;
    v14[1] = v9;
    v14[2] = v10;
    v14[3] = v11;
    v14[4] = v12;
    v14[5] = v13;
    __p = v14;
    sub_1D5338274(v6, (uint64_t)&__p);
    if (__p)
    {
      v19 = __p;
      operator delete(__p);
    }
  }
  v15 = sub_1D528494C(*a3);
  v16 = sub_1D528494C(*a3);
  *(double *)(a1 + 40) = v15;
  *(double *)(a1 + 48) = v16;
  return a1;
}

void sub_1D53A1474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  sub_1D5304DA8((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1D53A14CC(_QWORD *a1@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t i;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v4 = a1[5];
  v5 = a1[6];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = a2 + 2;
  v7 = (char *)operator new(0x10uLL);
  v8 = v7 + 16;
  *v6 = v7 + 16;
  *(_QWORD *)v7 = v4;
  *((_QWORD *)v7 + 1) = v5;
  *a2 = v7;
  a2[1] = v7 + 16;
  v10 = a1[2];
  for (i = a1[3]; v10 != i; v10 += 24)
  {
    v11 = *(_QWORD **)v10;
    v12 = *(_QWORD **)(v10 + 8);
    while (v11 != v12)
    {
      if ((unint64_t)v8 >= *v6)
      {
        v14 = *a2;
        v15 = (v8 - *a2) >> 3;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          sub_1D5282B8C();
        v17 = *v6 - (_QWORD)v14;
        if (v17 >> 2 > v16)
          v16 = v17 >> 2;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)sub_1D5282D28((uint64_t)v6, v18);
          v14 = *a2;
          v8 = a2[1];
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[8 * v15];
        *(_QWORD *)v20 = *v11;
        v13 = v20 + 8;
        while (v8 != v14)
        {
          v21 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *((_QWORD *)v20 - 1) = v21;
          v20 -= 8;
        }
        *a2 = v20;
        a2[1] = v13;
        a2[2] = &v19[8 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v8 = *v11;
        v13 = v8 + 8;
      }
      a2[1] = v13;
      ++v11;
      v8 = v13;
    }
  }
}

void sub_1D53A1624(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id sub_1D53A1644(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double **v13;
  double **i;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  RAWOpcodeWarpRectilinear *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v69;
  void *v70;
  _QWORD v71[2];
  _QWORD v72[6];
  _QWORD v73[8];

  v73[6] = *MEMORY[0x1E0C80C00];
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4, a5);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v5, v6, v7, v8);
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = *(double ***)(a1 + 16);
  for (i = *(double ***)(a1 + 24); v13 != i; v13 += 3)
  {
    v72[0] = CFSTR("kr0");
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v9, v10, v11, v12, **v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v73[0] = v15;
    v72[1] = CFSTR("kr1");
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v16, v17, v18, v19, (*v13)[1]);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v73[1] = v20;
    v72[2] = CFSTR("kr2");
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v21, v22, v23, v24, (*v13)[2]);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v73[2] = v25;
    v72[3] = CFSTR("kr3");
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v26, v27, v28, v29, (*v13)[3]);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v73[3] = v30;
    v72[4] = CFSTR("kt0");
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v31, v32, v33, v34, (*v13)[4]);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v73[4] = v35;
    v72[5] = CFSTR("kt1");
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v36, v37, v38, v39, (*v13)[5]);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v73[5] = v40;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v41, (uint64_t)v73, (uint64_t)v72, 6);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v70, v43, (uint64_t)v42, v44, v45);

  }
  objc_msgSend_setObject_forKeyedSubscript_(v69, v9, (uint64_t)v70, (uint64_t)CFSTR("CoefficientSets"), v12);
  v46 = *(double *)(a1 + 48);
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v47, v48, v49, v50, *(double *)(a1 + 40));
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v71[0] = v51;
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v52, v53, v54, v55, v46);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v71[1] = v56;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v57, (uint64_t)v71, 2, v58);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v69, v60, (uint64_t)v59, (uint64_t)CFSTR("NormalizedCenter"), v61);

  v62 = [RAWOpcodeWarpRectilinear alloc];
  v66 = (void *)objc_msgSend_initWithArguments_(v62, v63, (uint64_t)v69, v64, v65);

  return v66;
}

void sub_1D53A18EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1D53A1998(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1E9991790;
  v3 = (void **)(a1 + 16);
  sub_1D5304DA8(&v3);
  return a1;
}

uint64_t sub_1D53A19DC(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1E9991790;
  v3 = (void **)(a1 + 16);
  sub_1D5304DA8(&v3);
  return MEMORY[0x1D8271ADC](a1, 0x10A1C40C9E8D6FDLL);
}

uint64_t sub_1D53A1A34(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D53A1AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A1AC8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D53A1B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A1B5C(uint64_t a1)
{
  int v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  v3 = 2184;
  if (v2)
    v3 = 2176;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v3))(a1);
}

uint64_t sub_1D53A1BA0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 504))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D53A1C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A1C34(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 504))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D53A1CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D53A1CC8(uint64_t a1)
{
  double v2;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1) & 1) == 0)
  {
    v2 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1600))(a1);
    fmin(fmax(v2 * (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2088))(a1), 0.0), 1.0);
  }
}

uint64_t sub_1D53A1D3C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unsigned __int8 v11;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1240))(a1);
  v11 = result;
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 2864))(&v9, a1);
    v11 = sub_1D5371138(v9, &v11, v3, v4, v5);
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    return v11 != 0;
  }
  return result;
}

void sub_1D53A1DDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D53A1DF0(uint64_t a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  double v12;

  v2 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1456))(a1);
  v12 = v2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2224))(a1))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 2864))(&v10, a1);
    v12 = sub_1D537114C(v10, &v12, v3, v4, v5);
    v6 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v2 = v12;
  }
  return fmin(fmax(v2, 0.0), 1.04);
}

void sub_1D53A1EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D53A1ECC(uint64_t a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  double v12;

  v2 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1472))(a1);
  v12 = v2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2224))(a1))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 2864))(&v10, a1);
    v12 = sub_1D53711D8(v10, &v12, v3, v4, v5);
    v6 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v2 = v12;
  }
  return fmin(fmax(v2, 1.5), 3.1);
}

void sub_1D53A1F94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D53A1FA8(uint64_t a1)
{
  void *exception;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return 1.0;
}

void sub_1D53A2008(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1D53A201C(uint64_t a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  double v12;

  v2 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1464))(a1);
  v12 = v2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2224))(a1))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 2864))(&v10, a1);
    v12 = sub_1D53711EC(v10, &v12, v3, v4, v5);
    v6 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    return v12;
  }
  return v2;
}

void sub_1D53A20D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A20E8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unsigned __int8 v11;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1248))(a1);
  v11 = result;
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 2864))(&v9, a1);
    v11 = sub_1D5371200(v9, &v11, v3, v4, v5);
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    return v11 != 0;
  }
  return result;
}

void sub_1D53A2188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D53A219C(uint64_t a1)
{
  double v2;
  double result;
  void *exception;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v2 = (*(double (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 2664))(a1, 0, 0);
  result = 4.0;
  if (v2 >= 0.5)
    return ceil(sqrt((v2 + -0.5) * 60.0)) + 4.0;
  return result;
}

void sub_1D53A224C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1D53A2260(uint64_t a1)
{
  double v2;

  v2 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2296))(a1);
  return fmax(v2, (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2272))(a1));
}

void sub_1D53A22A8(uint64_t a1)
{
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *exception;
  uint64_t v11;
  std::__shared_weak_count *v12;
  double v13;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v2 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1776))(a1);
  if (v2 == 0.0)
    v3 = 0.5;
  else
    v3 = v2;
  v13 = v3;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2264))(a1))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 2864))(&v11, a1);
    v13 = sub_1D5371228(v11, &v13, v4, v5, v6);
    v7 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1D53A23C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D53A23E8(uint64_t a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  double v12;

  v2 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1544))(a1);
  v12 = v2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2264))(a1))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 2864))(&v10, a1);
    v12 = sub_1D537123C(v10, &v12, v3, v4, v5);
    v6 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v2 = v12;
  }
  return fmin(fmax(v2, 0.1), 25.0);
}

void sub_1D53A24B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D53A24C4(uint64_t a1)
{
  double v2;
  double v3;
  double v4;

  v2 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1512))(a1);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1) & 1) == 0
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1112))(a1) & 1) == 0)
  {
    v3 = v2 * ((*(double (**)(uint64_t))(*(_QWORD *)a1 + 1560))(a1) + -1.0);
    v2 = v2 + v3 * (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2088))(a1);
  }
  v4 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1520))(a1) - v2;
  return v2 + v4 * (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2288))(a1);
}

double sub_1D53A2578(uint64_t a1)
{
  double v2;
  double v3;
  double v4;

  v2 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1528))(a1);
  v3 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1536))(a1) - v2;
  v4 = v2 + v3 * (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2288))(a1);
  return fmax(v4, (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2304))(a1));
}

double sub_1D53A25E8()
{
  return 0.00184;
}

double sub_1D53A25F4(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;

  v2 = operator new(0x18uLL);
  *(_OWORD *)v2 = xmmword_1D544E310;
  v2[2] = 0x400D99999999999ALL;
  v3 = (char *)operator new(0x18uLL);
  *(_OWORD *)v3 = xmmword_1D544E328;
  *((_QWORD *)v3 + 2) = 0x3FB1EB851EB851ECLL;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 2664))(a1, 0, 0);
  v5 = 0;
  while (1)
  {
    v6 = *(double *)&v2[v5];
    if (v4 < v6)
      break;
    if (++v5 == 3)
    {
      v7 = *((double *)v3 + 2);
      goto LABEL_8;
    }
  }
  if (v5 * 8)
    v7 = *(double *)&v3[v5 * 8 - 8]
       + (v4 - *(double *)&v2[v5 - 1])
       / (v6 - *(double *)&v2[v5 - 1])
       * (*(double *)&v3[v5 * 8] - *(double *)&v3[v5 * 8 - 8]);
  else
    v7 = *(double *)v3;
LABEL_8:
  operator delete(v3);
  operator delete(v2);
  return v7;
}

void sub_1D53A26E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_1D53A270C(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(_QWORD *)a1 + 1752))(a1), 0.5), 3.5);
}

double sub_1D53A2738(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(_QWORD *)a1 + 1320))(a1), -0.2), 0.2);
}

double sub_1D53A276C(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(_QWORD *)a1 + 1328))(a1), -0.2), 0.2);
}

double sub_1D53A27A0(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(_QWORD *)a1 + 1336))(a1), -0.2), 0.2);
}

double sub_1D53A27D4(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(_QWORD *)a1 + 1344))(a1), -0.2), 0.2);
}

double sub_1D53A2808(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(_QWORD *)a1 + 1352))(a1), -0.2), 0.2);
}

double sub_1D53A283C(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(_QWORD *)a1 + 1360))(a1), -0.2), 0.2);
}

uint64_t sub_1D53A2870(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1264))(a1);
}

double sub_1D53A287C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  double v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 2864))(&v12);
  v2 = v12;
  v11 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1312))(a1);
  v6 = sub_1D5371250(v2, &v11, v3, v4, v5);
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return fmin(fmax(v6, 0.0), 1.0);
}

void sub_1D53A2928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A293C(uint64_t a1, int a2)
{
  if (a2)
    return 0;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1256))(a1);
}

double sub_1D53A2954(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(_QWORD *)a1 + 1288))(a1), 0.0), 1.0);
}

double sub_1D53A2980(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(_QWORD *)a1 + 1304))(a1), 0.0), 1.0);
}

double sub_1D53A29AC(uint64_t a1)
{
  return fmin(fmax((*(double (**)(uint64_t))(*(_QWORD *)a1 + 1416))(a1), 0.0), 1.0);
}

BOOL sub_1D53A29D8(uint64_t a1)
{
  return (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2432))(a1) > 0.125;
}

BOOL sub_1D53A2A00(uint64_t a1)
{
  return ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2464))(a1) & 1) != 0
      || (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1416))(a1) <= 0.125;
}

BOOL sub_1D53A2A50(uint64_t a1)
{
  void *exception;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return (*(double (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 2664))(a1, 0, 0) > 0.7;
}

void sub_1D53A2AD8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A2AEC(uint64_t a1)
{
  void *exception;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1)
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1))
  {
    return (*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) > 7;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2152))(a1))
    return 1;
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) < 8)
    return 0;
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1) ^ 1;
}

void sub_1D53A2BE0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1D53A2BF4(uint64_t a1)
{
  int v2;
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  double v12;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2480))(a1);
  result = 0.0;
  if (v2)
  {
    v12 = 0.5;
    if ((*(double (**)(uint64_t, _QWORD, _QWORD, double))(*(_QWORD *)a1 + 2664))(a1, 0, 0, 0.0) < 0.5)
      v12 = 0.0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 2864))(&v10, a1);
    v12 = sub_1D537150C(v10, &v12, v4, v5, v6);
    v7 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return fmin(fmax(v12, 0.0), 1.0);
  }
  return result;
}

void sub_1D53A2CCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A2CE0(uint64_t a1)
{
  double v2;
  int v3;
  double v4;
  _BOOL4 v5;
  double v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  double v18;
  double v19;
  void *exception;
  unsigned __int8 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) > 8)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 2864))(&v22, a1);
    v9 = v22;
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2264))(a1);
    v13 = sub_1D537151C(v9, &v21, v10, v11, v12);
    v14 = v13;
    v15 = v23;
    if (!v23)
      goto LABEL_12;
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if ((v14 & 1) != 0)
      {
LABEL_13:
        v18 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2504))(a1);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2512))(a1);
        return v19 > 0.0 && v18 > 0.0;
      }
    }
    else
    {
LABEL_12:
      if ((v13 & 1) != 0)
        goto LABEL_13;
    }
    return 0;
  }
  v2 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2264))(a1);
  v4 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2504))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2512))(a1);
  v5 = v4 != 0.0;
  if (v6 == 0.0)
    v5 = 0;
  v7 = v5 & v3;
  if (v2 <= 3.0)
    return v7;
  else
    return 0;
}

void sub_1D53A2E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D53A2EBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  double v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 2864))(&v12);
  v2 = v12;
  v11 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1776))(a1);
  v6 = sub_1D537152C(v2, &v11, v3, v4, v5);
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1D53A2F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D53A2F70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  double v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 2864))(&v12);
  v2 = v12;
  v11 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1544))(a1);
  v6 = sub_1D537153C(v2, &v11, v3, v4, v5);
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1D53A3010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D53A3024(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  BOOL v10;
  double v11;
  double v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 2864))(&v14);
  v2 = v14;
  v13 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1784))(a1);
  v6 = sub_1D537154C(v2, &v13, v3, v4, v5);
  v7 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (*(double (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 2664))(a1, 0, 0) > 1.0 && v6 == 0.0;
  v11 = 0.1;
  if (!v10)
    v11 = v6;
  return fmin(fmax(v11, 0.0), 1.3);
}

void sub_1D53A3104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D53A3118(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  double v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 2864))(&v12);
  v2 = v12;
  v11 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1792))(a1);
  v6 = sub_1D537155C(v2, &v11, v3, v4, v5);
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return fmin(fmax(v6, 0.0), 1.0);
}

void sub_1D53A31C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A31D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unsigned __int8 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 2864))(&v12);
  v2 = v12;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1800))(a1);
  v6 = sub_1D537156C(v2, &v11, v3, v4, v5);
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1D53A3270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D53A3284(uint64_t a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  double v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1)
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1))
  {
    v2 = fmax((*(double (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1) + -0.5, 0.0);
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 2864))(&v13, a1);
    v3 = v13;
    v12 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1808))(a1);
    v7 = sub_1D537157C(v3, &v12, v4, v5, v6);
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v2 = fmax(v7, 0.0);
  }
  return fmin(v2, 1.0);
}

void sub_1D53A337C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D53A3390(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  double v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 2864))(&v12);
  v2 = v12;
  v11 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1816))(a1);
  v6 = sub_1D537158C(v2, &v11, v3, v4, v5);
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return fmin(fmax(v6, -2.0), 2.0);
}

void sub_1D53A343C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D53A3450(uint64_t a1)
{
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  double v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1)
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1))
  {
    v2 = fmax((*(double (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1) * 0.1 / 1.5, 0.0);
    v3 = 0.2;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 2864))(&v14, a1);
    v4 = v14;
    v13 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1824))(a1);
    v8 = sub_1D537159C(v4, &v13, v5, v6, v7);
    v9 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v2 = fmax(v8, 0.0);
    v3 = 1.0;
  }
  return fmin(v2, v3);
}

void sub_1D53A355C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D53A3570(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  double v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 2864))(&v12);
  v2 = v12;
  v11 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1832))(a1);
  v6 = sub_1D53715AC(v2, &v11, v3, v4, v5);
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return fmin(fmax(v6, 0.0), 4.0);
}

void sub_1D53A361C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A3630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned __int8 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 2864))(&v10);
  v9 = 0;
  v4 = sub_1D53715BC(v10, &v9, v1, v2, v3);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D53A36B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A36C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned __int8 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 2864))(&v10);
  v9 = 0;
  v4 = sub_1D53715CC(v10, &v9, v1, v2, v3);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D53A3744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A3758(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned __int8 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 2864))(&v10);
  v9 = 0;
  v4 = sub_1D53715DC(v10, &v9, v1, v2, v3);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D53A37D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A37EC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2272))(a1);
}

double sub_1D53A37F8()
{
  return 0.12;
}

double sub_1D53A3804()
{
  return 1.0;
}

void sub_1D53A380C(uint64_t a1@<X0>, int a2@<W2>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *exception;
  __int128 v12;

  *a3 = 0;
  a3[1] = 0;
  if (((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2408))(a1) | a2) == 1)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 1720))(&v12, a1);
    sub_1D5292548((uint64_t)a3, &v12);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
    if (*((_QWORD *)&v12 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2712))(a1))
      sub_1D52C1240(*a3);
  }
  if (!*a3)
  {
    sub_1D52C1058(&v12);
    sub_1D5292548((uint64_t)a3, &v12);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
    if (*((_QWORD *)&v12 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (!*a3)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
}

void sub_1D53A3960(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1);
  _Unwind_Resume(a1);
}

double sub_1D53A398C()
{
  return 10000.0;
}

void sub_1D53A3998(uint64_t a1, _DWORD *a2, _DWORD *a3, char *a4)
{
  double v8;
  char v9;
  void *exception;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v8 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
  if (v8 <= (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2448))(a1))
  {
    v9 = 0;
    *a3 = 1065353216;
    *a2 = 1065353216;
  }
  else
  {
    *a2 = 1071300739;
    *a3 = 1084393259;
    v9 = 1;
  }
  *a4 = v9;
}

void sub_1D53A3A74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1D53A3A88(uint64_t a1, int a2)
{
  double result;

  result = 2.2;
  if (a2)
    return 1.0;
  return result;
}

double sub_1D53A3AA0()
{
  return 1.0;
}

double sub_1D53A3AA8()
{
  return 1.0;
}

uint64_t sub_1D53A3AB0(uint64_t a1)
{
  unsigned int v2;
  signed int v4;
  void *exception;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2168))(a1);
  if (v2 >> 8 == 8487297)
  {
    if (v2 + 2122219136 >= 0x12)
      return 23;
    else
      return v2 + 2122219145;
  }
  else
  {
    v4 = (v2 >> 4) & 0xF0F0F0F | (16 * v2) & 0xF0F0F0F0;
    if (v4 > 555819296)
    {
      if (v4 > 1229539656)
      {
        if (v4 == 1229539657)
          return 3;
        if (v4 == 1633771873)
          return 2;
      }
      else
      {
        if (v4 == 555819297)
          return 30;
        if (v4 == 825307441)
          return 29;
      }
    }
    else if (v4 > 320017170)
    {
      if (v4 == 320017171)
        return 28;
      if (v4 == 370546198)
        return 1;
    }
    else
    {
      if (v4 == -1802201964)
        return 0;
      if (v4 == 303174162)
        return 27;
    }
    return 0xFFFFFFFFLL;
  }
}

void sub_1D53A3C58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D53A3C6C(uint64_t a1, double *a2, double *a3)
{
  __n128 v6;
  char v7;
  _BOOL4 v8;
  unint64_t v9;
  double v10;
  unint64_t v11;
  double v12;
  void *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  double v18;
  void (***v19)(_QWORD, uint64_t, void **, char *);
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  double v28;
  double v29;
  double v30;
  void *exception;
  void (***v32)(_QWORD, uint64_t, void **, char *);
  std::__shared_weak_count *v33;
  char v34;
  void *v35;
  _BYTE *v36;
  void *__p;
  std::__shared_weak_count *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1)
    || (v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2152))(a1), v6.n128_u64[0] = 1.0, (v7 & 1) == 0))
  {
    if ((*(unsigned int (**)(uint64_t, __n128))(*(_QWORD *)a1 + 2656))(a1, v6))
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2656))(a1) == 1;
    else
      v8 = 1;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1016))(&__p, a1);
    v9 = !v8;
    if (v9 >= ((char *)v38 - (_BYTE *)__p) >> 3)
      sub_1D528EAE0();
    v10 = *((double *)__p + v9);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1016))(&v35, a1);
    v11 = 2;
    if (v8)
      v11 = 3;
    if (v11 >= (v36 - (_BYTE *)v35) >> 3)
      sub_1D528EAE0();
    v12 = *((double *)v35 + v11);
    v36 = v35;
    operator delete(v35);
    if (__p)
    {
      v38 = (std::__shared_weak_count *)__p;
      operator delete(__p);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1120))(&__p, a1);
    v13 = __p;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
    (*(void (**)(void **__return_ptr, void *, uint64_t))(*(_QWORD *)v13 + 8))(&v35, v13, v14);
    v15 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v9 >= (v36 - (_BYTE *)v35) >> 3)
      sub_1D528EAE0();
    v18 = *((double *)v35 + v9);
    v34 = 0;
    (*(void (**)(void (****__return_ptr)(_QWORD, uint64_t, void **, char *), uint64_t))(*(_QWORD *)a1 + 2128))(&v32, a1);
    v19 = v32;
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
    (**v19)(v19, v20, &__p, &v34);
    v21 = v33;
    if (v33)
    {
      v22 = (unint64_t *)&v33->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (float *)(&__p + 2 * v9);
    if (v34)
      v25 = v24[2];
    else
      v25 = v24[3] * v24[3];
    v26 = *v24;
    v27 = v24[1];
    v28 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 904))(a1);
    v29 = (v10 + v12) * 0.5;
    v30 = v28 - v29;
    if (a2)
      *a2 = (v26 + (v29 + (v28 - v29) * 0.150000006) * (v27 + (v29 + (v28 - v29) * 0.150000006) * v25))
          / (v30
           * v30)
          / 0.150000006;
    if (a3)
      *a3 = v18 * v18 / (v30 * v30);
    if (v35)
    {
      v36 = v35;
      operator delete(v35);
    }
  }
}

void sub_1D53A4008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

long double sub_1D53A4094(uint64_t a1)
{
  double v2;
  long double v3;

  v2 = (*(double (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 2664))(a1, 0, 0);
  v3 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
  return v2 * exp2(v3);
}

float sub_1D53A40EC@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X8>)
{
  float v11;
  int v12;
  float v13;
  float v14;
  float v15;
  double v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  int v28;
  int v29;
  double *v30;
  unint64_t v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  float v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  float v58;
  double *v59;
  char *v60;
  int v61;
  char *v62;
  int v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  void *v77;
  uint64_t v78;
  float v79;
  void *v80;
  uint64_t v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  float result;
  int v106;
  void *v107;
  void *exception;
  void *__p[2];
  __int128 v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  std::__shared_weak_count *v115;

  bzero(a3, 0x4D8uLL);
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)a3 + 13) = _D0;
  a3[50] = 1045220557;
  a3[61] = 0;
  a3[64] = 0;
  *((_QWORD *)a3 + 27) = 0;
  *(_QWORD *)((char *)a3 + 221) = 0;
  *((_QWORD *)a3 + 29) = 0;
  *((_BYTE *)a3 + 240) = 0;
  a3[17] = 1077936128;
  *((_BYTE *)a3 + 9) = 1;
  a3[3] = 1077936128;
  *((_BYTE *)a3 + 20) = 1;
  a3[12] = 1063665663;
  (*(void (**)(uint64_t, int *, int *, uint64_t))(*(_QWORD *)a1 + 2456))(a1, a3 + 14, a3 + 15, (uint64_t)a3 + 53);
  v11 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1080))(a1);
  *((float *)a3 + 29) = v11;
  a3[33] = 1059760816;
  a3[49] = 1077936128;
  *(_OWORD *)(a3 + 78) = xmmword_1D544E260;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2168))(a1);
  if (!v12)
    v12 = -1802201964;
  *a3 = v12;
  a3[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2656))(a1);
  *((_BYTE *)a3 + 21) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  v13 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2216))(a1);
  *((float *)a3 + 124) = v13;
  *((_BYTE *)a3 + 52) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2112))(a1);
  *((_BYTE *)a3 + 272) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2224))(a1);
  v14 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2232))(a1);
  *((float *)a3 + 70) = v14;
  v15 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2256))(a1);
  *((float *)a3 + 71) = v15;
  v16 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2240))(a1);
  v17 = __exp10(v16);
  *((float *)a3 + 72) = v17;
  *((_BYTE *)a3 + 160) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2264))(a1);
  v18 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2272))(a1);
  *((float *)a3 + 41) = v18;
  v19 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2280))(a1);
  *((float *)a3 + 42) = v19;
  v20 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2304))(a1);
  *((float *)a3 + 44) = v20;
  v21 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2312))(a1);
  *((float *)a3 + 45) = v21;
  v22 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2320))(a1);
  *((float *)a3 + 28) = v22;
  *((_BYTE *)a3 + 420) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 2408))(a1, a2);
  v23 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 2632))(a1, a2);
  *((float *)a3 + 115) = v23;
  v24 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2640))(a1);
  *((float *)a3 + 125) = v24;
  v25 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2648))(a1);
  *((float *)a3 + 126) = v25;
  v26 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
  *((float *)a3 + 103) = v26;
  *((float *)a3 + 102) = v26;
  *((float *)a3 + 101) = v26;
  v27 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2080))(a1);
  *((float *)a3 + 4) = v27;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
  a3[23] = v28 & 0xFFFFFFFC;
  a3[24] = v29 & 0xFFFFFFFE;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 744))(&v114, a1);
  v30 = (double *)v114;
  v31 = (char *)v115 - (_BYTE *)v114;
  if (v115 == v114
    || (v32 = *(double *)v114, *((float *)a3 + 82) = v32, v31 < 9)
    || (v33 = v30[1], *((float *)a3 + 83) = v33, v31 <= 0x10))
  {
    sub_1D528EAE0();
  }
  v34 = v30[2];
  *((float *)a3 + 84) = v34;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 792))(__p, a1, a2);
  if (sub_1D53393A0((uint64_t)__p) < 5 || sub_1D5339398((unsigned int *)__p) <= 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v112 = sub_1D5339044((uint64_t)__p, 0);
  v113 = v35;
  v36 = *(double *)sub_1D53390D4((uint64_t)&v112, 0);
  *((float *)a3 + 85) = v36;
  v112 = sub_1D5339044((uint64_t)__p, 0);
  v113 = v37;
  v38 = *(double *)sub_1D53390D4((uint64_t)&v112, 1u);
  *((float *)a3 + 86) = v38;
  v112 = sub_1D5339044((uint64_t)__p, 0);
  v113 = v39;
  v40 = *(double *)sub_1D53390D4((uint64_t)&v112, 2u);
  *((float *)a3 + 87) = v40;
  v112 = sub_1D5339044((uint64_t)__p, 1u);
  v113 = v41;
  v42 = *(double *)sub_1D53390D4((uint64_t)&v112, 0);
  *((float *)a3 + 88) = v42;
  v112 = sub_1D5339044((uint64_t)__p, 1u);
  v113 = v43;
  v44 = *(double *)sub_1D53390D4((uint64_t)&v112, 1u);
  *((float *)a3 + 89) = v44;
  v112 = sub_1D5339044((uint64_t)__p, 1u);
  v113 = v45;
  v46 = *(double *)sub_1D53390D4((uint64_t)&v112, 2u);
  *((float *)a3 + 90) = v46;
  v112 = sub_1D5339044((uint64_t)__p, 2u);
  v113 = v47;
  v48 = *(double *)sub_1D53390D4((uint64_t)&v112, 0);
  *((float *)a3 + 91) = v48;
  v112 = sub_1D5339044((uint64_t)__p, 2u);
  v113 = v49;
  v50 = *(double *)sub_1D53390D4((uint64_t)&v112, 1u);
  *((float *)a3 + 92) = v50;
  v112 = sub_1D5339044((uint64_t)__p, 2u);
  v113 = v51;
  v52 = *(double *)sub_1D53390D4((uint64_t)&v112, 2u);
  *((float *)a3 + 93) = v52;
  v112 = sub_1D5339044((uint64_t)__p, 0);
  v113 = v53;
  v54 = *(double *)sub_1D53390D4((uint64_t)&v112, 4u);
  *((float *)a3 + 94) = v54;
  v112 = sub_1D5339044((uint64_t)__p, 1u);
  v113 = v55;
  v56 = *(double *)sub_1D53390D4((uint64_t)&v112, 4u);
  *((float *)a3 + 95) = v56;
  v112 = sub_1D5339044((uint64_t)__p, 2u);
  v113 = v57;
  v58 = *(double *)sub_1D53390D4((uint64_t)&v112, 4u);
  *((float *)a3 + 96) = v58;
  if (__p[1])
  {
    *(void **)&v110 = __p[1];
    operator delete(__p[1]);
  }
  if (v114)
  {
    v115 = (std::__shared_weak_count *)v114;
    operator delete(v114);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1016))(__p, a1);
  v59 = (double *)__p[0];
  v60 = (char *)__p[1];
  if (__p[0] != __p[1])
  {
    v61 = 0;
    v62 = (char *)__p[0];
    do
    {
      *(float *)&v63 = v59[v61];
      a3[v61 + 97] = v63;
      if ((v63 & 0x7FFFFFFFu) >= 0x7F800000)
      {
        v107 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v107, "RawCameraException");
        __cxa_throw(v107, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v62 += 8;
      ++v61;
    }
    while (v62 != v60);
    goto LABEL_18;
  }
  if (__p[0])
  {
LABEL_18:
    __p[1] = v59;
    operator delete(v59);
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 2624))(&v114, a1, a2, 0);
  sub_1D52C1274((uint64_t)v114, (uint64_t)__p);
  a3[114] = v111;
  v64 = v110;
  *(_OWORD *)(a3 + 106) = *(_OWORD *)__p;
  *(_OWORD *)(a3 + 110) = v64;
  v65 = v115;
  if (v115)
  {
    p_shared_owners = (unint64_t *)&v115->__shared_owners_;
    do
      v67 = __ldaxr(p_shared_owners);
    while (__stlxr(v67 - 1, p_shared_owners));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  a3[136] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
  *((_BYTE *)a3 + 161) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2440))(a1);
  *((_BYTE *)a3 + 162) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2464))(a1);
  v68 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1384))(a1);
  *((float *)a3 + 6) = v68;
  v69 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1392))(a1);
  *((float *)a3 + 7) = v69;
  v70 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1400))(a1);
  *((float *)a3 + 8) = v70;
  a3[9] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1408))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1))
    a3[9] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
  *((_BYTE *)a3 + 44) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1208))(a1);
  *((_BYTE *)a3 + 64) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1232))(a1);
  v71 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1448))(a1);
  *((float *)a3 + 69) = v71;
  v72 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1488))(a1);
  *((float *)a3 + 73) = v72;
  v73 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1496))(a1);
  *((float *)a3 + 74) = v73;
  v74 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1584))(a1);
  *((float *)a3 + 122) = v74;
  v75 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1592))(a1);
  *((float *)a3 + 123) = v75;
  *((_BYTE *)a3 + 8) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1376))(a1);
  v76 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1768))(a1);
  *((float *)a3 + 43) = v76;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 2056))(__p, a1);
  if (__p[0])
  {
    if ((*(unsigned int (**)(void *))(*(_QWORD *)__p[0] + 16))(__p[0]))
    {
      *((_BYTE *)a3 + 636) = 1;
      *((float *)a3 + 160) = (float)(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
      v77 = __p[0];
      v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
      v79 = (*(double (**)(void *, uint64_t))(*(_QWORD *)v77 + 32))(v77, v78);
      *((float *)a3 + 161) = v79;
      v80 = __p[0];
      v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
      v82 = (*(double (**)(void *, uint64_t))(*(_QWORD *)v80 + 40))(v80, v81);
      *((float *)a3 + 162) = v82;
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)__p[0] + 48))(__p[0]))
    {
      a3[127] = (*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 56))(__p[0]);
      v83 = (*(double (**)(void *))(*(_QWORD *)__p[0] + 64))(__p[0]);
      *((float *)a3 + 128) = v83;
      v84 = (*(double (**)(void *))(*(_QWORD *)__p[0] + 72))(__p[0]);
      *((float *)a3 + 129) = v84;
      v85 = (*(double (**)(void *))(*(_QWORD *)__p[0] + 80))(__p[0]);
      *((float *)a3 + 130) = v85;
      a3[131] = (*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 88))(__p[0]);
      v86 = (*(double (**)(void *))(*(_QWORD *)__p[0] + 96))(__p[0]);
      *((float *)a3 + 132) = v86;
      v87 = (*(double (**)(void *))(*(_QWORD *)__p[0] + 104))(__p[0]);
      *((float *)a3 + 133) = v87;
      v88 = (*(double (**)(void *))(*(_QWORD *)__p[0] + 112))(__p[0]);
      *((float *)a3 + 134) = v88;
      a3[135] = (*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 120))(__p[0]);
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)__p[0] + 128))(__p[0]))
    {
      *((_BYTE *)a3 + 548) = 1;
      v89 = (*(double (**)(void *))(*(_QWORD *)__p[0] + 144))(__p[0]);
      *((float *)a3 + 138) = v89;
      a3[139] = (*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 136))(__p[0]);
      v90 = (*(double (**)(void *))(*(_QWORD *)__p[0] + 152))(__p[0]);
      *((float *)a3 + 140) = v90;
      v91 = (*(double (**)(void *))(*(_QWORD *)__p[0] + 160))(__p[0]);
      *((float *)a3 + 141) = v91;
      v92 = (*(double (**)(void *))(*(_QWORD *)__p[0] + 168))(__p[0]);
      *((float *)a3 + 142) = v92;
      a3[143] = (*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 176))(__p[0]);
      v93 = (*(double (**)(void *))(*(_QWORD *)__p[0] + 184))(__p[0]);
      *((float *)a3 + 144) = v93;
      v94 = (*(double (**)(void *))(*(_QWORD *)__p[0] + 192))(__p[0]);
      *((float *)a3 + 145) = v94;
      v95 = (*(double (**)(void *))(*(_QWORD *)__p[0] + 200))(__p[0]);
      *((float *)a3 + 146) = v95;
      a3[147] = (*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 208))(__p[0]);
      v96 = (*(double (**)(void *))(*(_QWORD *)__p[0] + 216))(__p[0]);
      *((float *)a3 + 148) = v96;
      v97 = (*(double (**)(void *))(*(_QWORD *)__p[0] + 224))(__p[0]);
      *((float *)a3 + 149) = v97;
      v98 = (*(double (**)(void *))(*(_QWORD *)__p[0] + 232))(__p[0]);
      *((float *)a3 + 150) = v98;
      a3[151] = (*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 240))(__p[0]);
      v99 = (*(double (**)(void *))(*(_QWORD *)__p[0] + 248))(__p[0]);
      *((float *)a3 + 152) = v99;
      v100 = (*(double (**)(void *))(*(_QWORD *)__p[0] + 256))(__p[0]);
      *((float *)a3 + 153) = v100;
      v101 = (*(double (**)(void *))(*(_QWORD *)__p[0] + 264))(__p[0]);
      *((float *)a3 + 154) = v101;
    }
  }
  v102 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v103 = (unint64_t *)((char *)__p[1] + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  if (getenv("RAWCAMERA_DENOISE_BAYER"))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1) >> 9 <= 0x18)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1) >> 8 <= 0x18)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1) < 0xC80)
        {
LABEL_46:
          result = *((float *)a3 + 4) / 10.0;
          *((float *)a3 + 4) = result;
          a3[9] = 1;
          return result;
        }
        v106 = -1139844055;
      }
      else
      {
        v106 = -1131455447;
      }
    }
    else
    {
      v106 = -1123066839;
    }
    a3[7] = v106;
    a3[8] = v106;
    goto LABEL_46;
  }
  return result;
}

void sub_1D53A4D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1D53A4E1C(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  _OWORD *v6;
  float v12;
  float v13;
  float v14;
  int v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  unint64_t v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  float v63;
  uint64_t v64;
  float v65;
  double *v66;
  double *v67;
  uint64_t v68;
  float v69;
  int v70;
  unint64_t v71;
  int v72;
  void *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  double *v78;
  void *v79;
  uint64_t v80;
  double *v81;
  float v82;
  int v83;
  unint64_t v84;
  int v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  __int128 v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  double v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  char v107;
  void (***v108)(void *, uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  char v113;
  float v114;
  int v115;
  float v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  float v124;
  double v125;
  double v126;
  float v127;
  double v128;
  double v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  BOOL v148;
  float v149;
  void *v150;
  void *v151;
  void *exception;
  void *v153;
  void *v154;
  void *v155;
  void *__p[2];
  __int128 v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  std::__shared_weak_count *v162;

  v6 = a3 + 162;
  bzero(a3, 0x478uLL);
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)a3 + 25) = _D0;
  a3[3] = 1075838976;
  *((_BYTE *)a3 + 16) = 1;
  a3[10] = 1063665663;
  *((_QWORD *)a3 + 6) = 0x4051999A3F94DD2FLL;
  a3[14] = 1075838976;
  *((_BYTE *)a3 + 60) = (*(double (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 2664))(a1, 0, 0) >= 0.85;
  a3[16] = 1065856532;
  v12 = (*(double (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 2664))(a1, 0, 0) * -1.5 + 5.19999981;
  *((float *)a3 + 17) = v12;
  v13 = (*(double (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 2664))(a1, 0, 0) * 1136.0;
  *((float *)a3 + 25) = v13;
  *((_QWORD *)a3 + 9) = 0x3F4DD2F200000001;
  *((_OWORD *)a3 + 5) = xmmword_1D544E270;
  v14 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1080))(a1);
  *((float *)a3 + 139) = v14;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v16 = 3.0;
  if (v15 >= 9)
  {
    v17 = (*(double (**)(uint64_t, _QWORD, _QWORD, float))(*(_QWORD *)a1 + 2664))(a1, 0, 0, 3.0);
    v16 = 5.0;
    if (v17 <= 0.5)
    {
      v16 = 1.0;
      if (v17 > 0.15)
        v16 = (float)(v17 * 11.429) + -0.71429;
    }
  }
  *((float *)a3 + 151) = v16;
  *((_BYTE *)a3 + 608) = 0;
  a3[153] = 0;
  *((_WORD *)a3 + 308) = 256;
  v18 = 7.1;
  if ((a3[1] - 27) >= 4)
    v18 = 12.0;
  *((float *)a3 + 155) = v18;
  *((_QWORD *)a3 + 78) = 0x6800000000;
  a3[158] = 1052334096;
  a3[160] = 1065353216;
  *((_BYTE *)a3 + 644) = 0;
  *v6 = xmmword_1D544E280;
  a3[166] = 0;
  *((_BYTE *)a3 + 600) = (*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) > 8;
  *(_QWORD *)(a3 + 167) = 0x3F00000000000000;
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 456))(a1);
  v21 = v20;
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 520))(a1);
  v23 = sub_1D5297E34(a1);
  if (v23 == 3)
  {
    if (!sub_1D5297E44(a1))
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1);
  }
  else if (v23 == 2)
  {
    v22 = v21;
  }
  *((float *)a3 + 169) = (float)(int)v22 / (float)(int)v21;
  *((float *)a3 + 170) = (float)((float)SHIDWORD(v22) + (float)SHIDWORD(v22)) / (float)SHIDWORD(v21);
  *(_QWORD *)(a3 + 171) = 0x404000003F543958;
  a3[173] = 1;
  *((_QWORD *)a3 + 87) = v19;
  *((_QWORD *)a3 + 88) = 0x4190000041400000;
  *a3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2168))(a1);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2152))(a1) & 1) == 0 && !*a3)
    *a3 = -1802201964;
  a3[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2656))(a1);
  a3[246] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2656))(a1);
  *((_BYTE *)a3 + 17) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  v24 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2216))(a1);
  *((float *)a3 + 210) = v24;
  *((_BYTE *)a3 + 44) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2112))(a1);
  *((_BYTE *)a3 + 560) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2264))(a1);
  v25 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2272))(a1);
  *((float *)a3 + 141) = v25;
  v26 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2280))(a1);
  *((float *)a3 + 142) = v26;
  v27 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2304))(a1);
  *((float *)a3 + 148) = v27;
  v28 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2312))(a1);
  *((float *)a3 + 149) = v28;
  v29 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2320))(a1);
  *((float *)a3 + 138) = v29;
  *((_BYTE *)a3 + 788) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 2408))(a1, a2);
  v30 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 2632))(a1, a2);
  *((float *)a3 + 207) = v30;
  v31 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2640))(a1);
  *((float *)a3 + 211) = v31;
  v32 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2648))(a1);
  *((float *)a3 + 212) = v32;
  v33 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
  *((float *)a3 + 195) = v33;
  *((float *)a3 + 194) = v33;
  *((float *)a3 + 193) = v33;
  v34 = *(_QWORD *)a1;
  if ((a3[1] - 27) > 3)
  {
    (*(void (**)(uint64_t))(v34 + 432))(a1);
    v35 = v36;
  }
  else
  {
    v35 = (*(uint64_t (**)(uint64_t))(v34 + 520))(a1);
  }
  *(_QWORD *)(a3 + 47) = v35;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 744))(&v161, a1);
  v37 = (double *)v161;
  v38 = (char *)v162 - (_BYTE *)v161;
  if (v162 == v161
    || (v39 = *(double *)v161, *((float *)a3 + 178) = v39, v38 < 9)
    || (v40 = v37[1], *((float *)a3 + 179) = v40, v38 <= 0x10))
  {
    sub_1D528EAE0();
  }
  v41 = v37[2];
  *((float *)a3 + 180) = v41;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 792))(__p, a1, a2);
  if (sub_1D53393A0((uint64_t)__p) < 5 || sub_1D5339398((unsigned int *)__p) <= 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v159 = sub_1D5339044((uint64_t)__p, 0);
  v160 = v42;
  v43 = *(double *)sub_1D53390D4((uint64_t)&v159, 0);
  *((float *)a3 + 181) = v43;
  v159 = sub_1D5339044((uint64_t)__p, 0);
  v160 = v44;
  v45 = *(double *)sub_1D53390D4((uint64_t)&v159, 1u);
  *((float *)a3 + 182) = v45;
  v159 = sub_1D5339044((uint64_t)__p, 0);
  v160 = v46;
  v47 = *(double *)sub_1D53390D4((uint64_t)&v159, 2u);
  *((float *)a3 + 183) = v47;
  v159 = sub_1D5339044((uint64_t)__p, 1u);
  v160 = v48;
  v49 = *(double *)sub_1D53390D4((uint64_t)&v159, 0);
  *((float *)a3 + 184) = v49;
  v159 = sub_1D5339044((uint64_t)__p, 1u);
  v160 = v50;
  v51 = *(double *)sub_1D53390D4((uint64_t)&v159, 1u);
  *((float *)a3 + 185) = v51;
  v159 = sub_1D5339044((uint64_t)__p, 1u);
  v160 = v52;
  v53 = *(double *)sub_1D53390D4((uint64_t)&v159, 2u);
  *((float *)a3 + 186) = v53;
  v159 = sub_1D5339044((uint64_t)__p, 2u);
  v160 = v54;
  v55 = *(double *)sub_1D53390D4((uint64_t)&v159, 0);
  *((float *)a3 + 187) = v55;
  v159 = sub_1D5339044((uint64_t)__p, 2u);
  v160 = v56;
  v57 = *(double *)sub_1D53390D4((uint64_t)&v159, 1u);
  *((float *)a3 + 188) = v57;
  v159 = sub_1D5339044((uint64_t)__p, 2u);
  v160 = v58;
  v59 = *(double *)sub_1D53390D4((uint64_t)&v159, 2u);
  *((float *)a3 + 189) = v59;
  v159 = sub_1D5339044((uint64_t)__p, 0);
  v160 = v60;
  v61 = *(double *)sub_1D53390D4((uint64_t)&v159, 4u);
  *((float *)a3 + 190) = v61;
  v159 = sub_1D5339044((uint64_t)__p, 1u);
  v160 = v62;
  v63 = *(double *)sub_1D53390D4((uint64_t)&v159, 4u);
  *((float *)a3 + 191) = v63;
  v159 = sub_1D5339044((uint64_t)__p, 2u);
  v160 = v64;
  v65 = *(double *)sub_1D53390D4((uint64_t)&v159, 4u);
  *((float *)a3 + 192) = v65;
  a3[196] = 0;
  if (__p[1])
  {
    *(void **)&v157 = __p[1];
    operator delete(__p[1]);
  }
  if (v161)
  {
    v162 = (std::__shared_weak_count *)v161;
    operator delete(v161);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1016))(__p, a1);
  v66 = (double *)__p[0];
  v67 = (double *)__p[1];
  if (__p[0] == __p[1])
  {
    v72 = 0;
LABEL_36:
    bzero((char *)a3 + (4 * v72 + 856), ((4 * v72) ^ 0xCu) + 4);
    goto LABEL_37;
  }
  v68 = 214;
  do
  {
    v69 = *v66;
    if ((LODWORD(v69) & 0x7FFFFFFFu) >= 0x7F800000)
    {
      v150 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v150, "RawCameraException");
      __cxa_throw(v150, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    *(float *)&a3[v68] = v69;
    ++v66;
    v70 = v68 + 1;
    if (v66 == v67)
      break;
    v71 = v68 - 214;
    ++v68;
  }
  while (v71 < 3);
  if (v66 != v67)
  {
    v155 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v155, "RawCameraException");
    __cxa_throw(v155, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v72 = v70 - 214;
  if ((v70 - 214) <= 3)
    goto LABEL_36;
LABEL_37:
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 2680))(a1, a3 + 214);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1120))(&v161, a1);
  v73 = v161;
  v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
  (*(void (**)(void **__return_ptr, void *, uint64_t))(*(_QWORD *)v73 + 8))(__p, v73, v74);
  v75 = v162;
  if (v162)
  {
    p_shared_owners = (unint64_t *)&v162->__shared_owners_;
    do
      v77 = __ldaxr(p_shared_owners);
    while (__stlxr(v77 - 1, p_shared_owners));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v79 = __p[0];
  v78 = (double *)__p[1];
  if ((void *)((char *)__p[1] - (char *)__p[0]) != (void *)32)
  {
    v153 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v153, "RawCameraException");
    __cxa_throw(v153, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (__p[0] == __p[1])
  {
    v85 = 0;
    goto LABEL_78;
  }
  v80 = 218;
  v81 = (double *)__p[0];
  do
  {
    v82 = *v81;
    if ((LODWORD(v82) & 0x7FFFFFFFu) >= 0x7F800000)
    {
      v151 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v151, "RawCameraException");
      __cxa_throw(v151, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    *(float *)&a3[v80] = v82;
    ++v81;
    v83 = v80 + 1;
    if (v81 == v78)
      break;
    v84 = v80 - 218;
    ++v80;
  }
  while (v84 < 3);
  if (v81 != v78)
  {
    v154 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v154, "RawCameraException");
    __cxa_throw(v154, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v85 = v83 - 218;
  if ((v83 - 218) <= 3)
  {
LABEL_78:
    bzero((char *)a3 + (4 * v85 + 872), ((4 * v85) ^ 0xCu) + 4);
    if (!v79)
      goto LABEL_54;
    goto LABEL_53;
  }
  if (v79)
  {
LABEL_53:
    __p[1] = v79;
    operator delete(v79);
  }
LABEL_54:
  v86 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2344))(a1);
  *((float *)a3 + 240) = v86;
  v87 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2352))(a1);
  *((float *)a3 + 241) = v87;
  v88 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2360))(a1);
  *((float *)a3 + 242) = v88;
  v89 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2368))(a1);
  *((float *)a3 + 243) = v89;
  v90 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2376))(a1);
  *((float *)a3 + 244) = v90;
  v91 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2384))(a1);
  *((float *)a3 + 245) = v91;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 2624))(&v161, a1, a2, 0);
  sub_1D52C1274((uint64_t)v161, (uint64_t)__p);
  a3[206] = v158;
  v92 = v157;
  *(_OWORD *)(a3 + 198) = *(_OWORD *)__p;
  *(_OWORD *)(a3 + 202) = v92;
  v93 = v162;
  if (v162)
  {
    v94 = (unint64_t *)&v162->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  a3[213] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
  *((_BYTE *)a3 + 561) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2440))(a1);
  v96 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
  if (v96 > (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2448))(a1))
  {
    *((_BYTE *)a3 + 561) = 1;
    a3[148] = 998445679;
  }
  v97 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2328))(a1);
  *((float *)a3 + 143) = v97;
  v98 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2608))(a1);
  *((float *)a3 + 144) = v98;
  v99 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2600))(a1);
  *((float *)a3 + 145) = v99;
  v100 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2616))(a1);
  *((float *)a3 + 147) = v100;
  v101 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2528))(a1);
  *((float *)a3 + 146) = v101;
  v102 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1384))(a1);
  *((float *)a3 + 5) = v102;
  v103 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1392))(a1);
  *((float *)a3 + 6) = v103;
  v104 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1400))(a1);
  *((float *)a3 + 7) = v104;
  a3[8] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1408))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1))
    a3[8] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
  *((_BYTE *)a3 + 36) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1208))(a1);
  v105 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1584))(a1);
  *((float *)a3 + 208) = v105;
  v106 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1592))(a1);
  *((float *)a3 + 209) = v106;
  if ((*(double (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 2664))(a1, 0, 0) >= 0.5)
    v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1376))(a1);
  else
    v107 = 0;
  *((_BYTE *)a3 + 8) = v107;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 2128))(__p, a1);
  v108 = (void (***)(void *, uint64_t, uint64_t, uint64_t))__p[0];
  v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
  (**v108)(v108, v109, (uint64_t)(a3 + 223), (uint64_t)(a3 + 222));
  v110 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v111 = (unint64_t *)((char *)__p[1] + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 7)
    v113 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2496))(a1);
  else
    v113 = 0;
  *((_BYTE *)a3 + 956) = v113;
  v114 = (*(double (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 2664))(a1, 0, 0);
  if ((a3[1] - 9) <= 0x11)
  {
    *((_BYTE *)a3 + 44) = 0;
    if (v114 <= 0.65)
    {
      v115 = 0;
    }
    else
    {
      a3[16] = 1084227584;
      v115 = 1;
    }
    *((_BYTE *)a3 + 60) = v115;
    a3[156] = v115;
    v116 = fmaxf(fminf((float)((float)(int)a3[213] + -2500.0) / 3900.0, 1.0), 0.0);
    a3[157] = llroundf((float)(v116 * 396.0) + 104.0);
    *((float32x2_t *)a3 + 79) = vmla_n_f32((float32x2_t)0x3F0000003EB95810, (float32x2_t)0x3F000000BEB95810, v116);
  }
  v117 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2528))(a1);
  v118 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2520))(a1);
  v119 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2544))(a1);
  v120 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2560))(a1);
  v121 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2568))(a1);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 744))(__p, a1);
  if (__p[1] == __p[0])
    goto LABEL_120;
  v122 = *(double *)__p[0];
  v123 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 800))(a1, a2);
  v124 = v122;
  *(float *)&v123 = v124 / v123;
  a3[268] = LODWORD(v123);
  if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)9
    || (v125 = *((double *)__p[0] + 1),
        v126 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 800))(a1, a2),
        v127 = v125,
        *(float *)&v126 = v127 / v126,
        a3[269] = LODWORD(v126),
        (void *)((char *)__p[1] - (char *)__p[0]) <= (void *)0x10))
  {
LABEL_120:
    sub_1D528EAE0();
  }
  v128 = *((double *)__p[0] + 2);
  v129 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 800))(a1, a2);
  v130 = v117;
  v131 = v128;
  *(float *)&v129 = v131 / v129;
  a3[270] = LODWORD(v129);
  *((float *)a3 + 271) = v114;
  *((_BYTE *)a3 + 989) = v130 != 0.0;
  *((float *)a3 + 272) = v130;
  v132 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2608))(a1);
  *((float *)a3 + 274) = v132;
  v133 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2600))(a1);
  *((float *)a3 + 273) = v133;
  v134 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2616))(a1);
  *((float *)a3 + 275) = v134;
  a3[276] = 16843009;
  *(_OWORD *)((char *)v6 + 460) = xmmword_1D544E290;
  *((_BYTE *)a3 + 1124) = 1;
  *((_QWORD *)a3 + 141) = 0x138800000005;
  a3[284] = 1076258406;
  if (v114 <= 3.7633)
  {
    if (v114 <= 2.1287)
    {
      if (v114 <= 1.6717)
      {
        if (v114 <= 0.8968)
        {
          if (v114 <= 0.5)
          {
            v135 = 0.0021;
            goto LABEL_96;
          }
          v136 = (float)(v114 + -0.5) / 0.3968;
          v137 = 0.0021;
          v138 = 0.0039;
        }
        else
        {
          v136 = (float)(v114 + -0.8968) / 0.7749;
          v137 = 0.006;
          v138 = 0.0038;
        }
      }
      else
      {
        v136 = (float)(v114 + -1.6717) / 0.457;
        v137 = 0.0098;
        v138 = 0.0085;
      }
    }
    else
    {
      v136 = (float)(v114 + -2.1287) / 1.6346;
      v137 = 0.0183;
      v138 = 0.0067;
    }
    v135 = v137 + (float)(v136 * v138);
  }
  else
  {
    v135 = 0.025;
  }
LABEL_96:
  v139 = v114 * 50.0;
  v140 = v114 * 25.0;
  v141 = 0.0;
  v142 = 0.0;
  if ((float)(v114 * 25.0) >= 18.0)
  {
    v142 = 1.0;
    if (v140 < 36.0)
      v142 = (float)(v140 + -18.0) / 18.0;
  }
  v143 = v114 * 100.0;
  if (v139 >= 18.0)
  {
    v141 = 1.0;
    if (v139 < 36.0)
      v141 = (float)(v139 + -18.0) / 18.0;
  }
  v144 = v118;
  v145 = v120;
  v146 = v121;
  v147 = 0.0;
  if (v143 >= 18.0)
  {
    v147 = 1.0;
    if (v143 < 36.0)
      v147 = (float)(v143 + -18.0) / 18.0;
  }
  v148 = v144 > 0.0;
  if (v145 > 0.0)
    v148 = 1;
  if (v146 > 0.0)
    v148 = 1;
  *((_BYTE *)a3 + 988) = v148;
  *((float *)a3 + 248) = v144;
  *((_WORD *)a3 + 498) = 257;
  *((_QWORD *)a3 + 125) = 0x3DCCCCCD3EBC6A7FLL;
  *((float *)a3 + 252) = v147;
  v149 = v119;
  *((float *)a3 + 253) = v141;
  *((float *)a3 + 254) = v142;
  *((float *)a3 + 255) = v135 + v135;
  *((float *)a3 + 257) = v135;
  *((float *)a3 + 259) = v135 * 0.5;
  a3[256] = 1061158912;
  a3[258] = 1061158912;
  a3[260] = 1061158912;
  *((float *)a3 + 261) = v147;
  *((float *)a3 + 262) = v141;
  *((float *)a3 + 263) = v142;
  *((float *)a3 + 264) = v145;
  *((_BYTE *)a3 + 1060) = v149 != 0.0;
  *((float *)a3 + 266) = v149;
  *((float *)a3 + 267) = v146;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1D53A61AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  sub_1D5282EB4((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_1D53A629C(uint64_t a1@<X0>, _OWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;

  v4 = a1;
  sub_1D53A6B20(&v4, a2, a3, a4);
}

void sub_1D53A62CC(uint64_t a1@<X0>, _OWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *exception;
  __int128 v12;

  *(_QWORD *)&v12 = a1;
  sub_1D53A6B20((uint64_t *)&v12, a2, a3, a5);
  if (sub_1D53A697C() != 16)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D53A6CAC(a4, a2, &v12);
  sub_1D52B0A7C((char **)(*a5 + 24), &v12);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1D53A63B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_1D5282EB4((uint64_t)va);
  sub_1D5282EB4(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A63F0()
{
  return sub_1D53A697C();
}

uint64_t sub_1D53A63F8(uint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  void *exception;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E99917D8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = *a3;
  *(_QWORD *)(a1 + 64) = *a4;
  v5 = CGImageProviderRetain();
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_1D53A649C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v13;

  __cxa_free_exception(v11);
  sub_1D5282E44((void ***)&a10);
  v13 = *(std::__shared_weak_count **)(v10 + 16);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A64D0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  void **v4;

  *(_QWORD *)a1 = &off_1E99917D8;
  CGImageProviderRelease();
  *(_QWORD *)(a1 + 80) = 0;
  v4 = (void **)(a1 + 24);
  sub_1D5282E44(&v4);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_1D53A6534(uint64_t a1)
{
  sub_1D53A64D0(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53A6558(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  CGFloat y;
  CGFloat x;
  CGFloat height;
  CGFloat width;
  _QWORD *i;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *exception;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void *__p;
  uint64_t *v33;
  uint64_t *v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;

  result = a1[10];
  if (!result)
  {
    v3 = a1[4] - a1[3];
    if (!v3 || (unint64_t)v3 >= 0x1F31)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    __p = 0;
    v33 = 0;
    v34 = 0;
    sub_1D53A68B4(&__p, v3 >> 4);
    x = *MEMORY[0x1E0C9D628];
    y = *(double *)(MEMORY[0x1E0C9D628] + 8);
    width = *(double *)(MEMORY[0x1E0C9D628] + 16);
    height = *(double *)(MEMORY[0x1E0C9D628] + 24);
    v9 = (_QWORD *)a1[3];
    for (i = (_QWORD *)a1[4]; v9 != i; v9 += 2)
    {
      v37.origin.x = (double)*(int *)(*v9 + 28);
      v37.origin.y = (double)*(int *)(*v9 + 32);
      v37.size.width = (double)*(int *)(*v9 + 36);
      v37.size.height = (double)*(int *)(*v9 + 40);
      v35.origin.x = x;
      v35.origin.y = y;
      v35.size.width = width;
      v35.size.height = height;
      v36 = CGRectUnion(v35, v37);
      x = v36.origin.x;
      y = v36.origin.y;
      width = v36.size.width;
      height = v36.size.height;
      v10 = (**(uint64_t (***)(_QWORD))*v9)(*v9);
      v11 = v10;
      v12 = v33;
      if (v33 >= v34)
      {
        v14 = ((char *)v33 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          sub_1D5282B8C();
        v15 = ((char *)v34 - (_BYTE *)__p) >> 2;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if ((unint64_t)((char *)v34 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)sub_1D5282D28((uint64_t)&v34, v16);
        else
          v17 = 0;
        v18 = (uint64_t *)&v17[8 * v14];
        *v18 = v11;
        v13 = v18 + 1;
        v20 = (char *)__p;
        v19 = (char *)v33;
        if (v33 != __p)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *--v18 = v21;
          }
          while (v19 != v20);
          v19 = (char *)__p;
        }
        __p = v18;
        v33 = v13;
        v34 = (uint64_t *)&v17[8 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v33 = v10;
        v13 = v12 + 1;
      }
      v33 = v13;
    }
    v22 = (_QWORD *)operator new();
    sub_1D5285A94(&v30, a1 + 1);
    v23 = v31;
    *v22 = v30;
    v22[1] = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    a1[10] = CGImageBlockSetCreate();
    v26 = v31;
    if (v31)
    {
      v27 = (unint64_t *)&v31->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (__p)
    {
      v33 = (uint64_t *)__p;
      operator delete(__p);
    }
    return a1[10];
  }
  return result;
}

void sub_1D53A6844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  sub_1D5282EB4((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1D53A68B4(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_1D5282B8C();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1D5282D28(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_1D53A6948(uint64_t result)
{
  if (result)
  {
    sub_1D5282EB4(result);
    JUMPOUT(0x1D8271ADCLL);
  }
  return result;
}

uint64_t sub_1D53A6974(uint64_t a1, __int128 *a2)
{
  return sub_1D52B0A7C((char **)(a1 + 24), a2);
}

uint64_t sub_1D53A697C()
{
  int ComponentType;
  void *exception;

  ComponentType = CGImageProviderGetComponentType();
  if (ComponentType == 1)
    return 8;
  if (ComponentType != 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return 16;
}

void sub_1D53A69E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A69F8(uint64_t *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v1 = *a1;
  v2 = (std::__shared_weak_count *)a1[1];
  v13 = *a1;
  v14 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  if (v1)
  {
    v5 = (unint64_t *)(v1 + 88);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    v8 = *(_QWORD *)(v13 + 24);
    if (v7 < (*(_QWORD *)(v13 + 32) - v8) >> 4)
      (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 16 * v7) + 16))(*(_QWORD *)(v8 + 16 * v7));
  }
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  result = (uint64_t)a1;
  if (a1)
  {
    v12 = sub_1D5282EB4((uint64_t)a1);
    return MEMORY[0x1D8271ADC](v12, 0x20C40A4A59CD2);
  }
  return result;
}

void sub_1D53A6AE0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_1D5282EB4((uint64_t)&a9);
  sub_1D53A6C40(&a11, 0);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53A6ACCLL);
}

void sub_1D53A6B08(_Unwind_Exception *a1)
{
  sub_1D52E1E54();
  _Unwind_Resume(a1);
}

void sub_1D53A6B20(uint64_t *a1@<X1>, _OWORD *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0x78uLL);
  sub_1D53A6B98(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  sub_1D5285658((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_1D53A6B84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53A6B98(_QWORD *a1, uint64_t *a2, _OWORD *a3, _QWORD *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E9991840;
  sub_1D53A63F8((uint64_t)(a1 + 3), *a2, a3, a4);
  return a1;
}

void sub_1D53A6BD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53A6BE8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9991840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53A6BFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9991840;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53A6C30(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D53A6C40(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1D5282EB4(result);
    JUMPOUT(0x1D8271ADCLL);
  }
  return result;
}

void sub_1D53A6C7C(_OWORD *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v3;

  v3 = a2;
  sub_1D53A7270(a1, &v3, a3);
}

double sub_1D53A6CAC@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  double v5[3];

  sub_1D53A7358(a1, a2, v5);
  result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

_QWORD *sub_1D53A6CEC(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  *a1 = off_1E9991890;
  v2 = (void *)a1[7];
  if (v2)
  {
    sub_1D5438B24(v2);
    a1[7] = 0;
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_1D53A6D3C(_QWORD *a1)
{
  sub_1D53A6CEC(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53A6D60(uint64_t result)
{
  if (result)
  {
    sub_1D5282EB4(result);
    JUMPOUT(0x1D8271ADCLL);
  }
  return result;
}

uint64_t sub_1D53A6D8C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 8))(a1, 0);
  if (!*(_DWORD *)(a1 + 24))
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 8))(a1, 0);
  v2 = (_QWORD *)operator new();
  sub_1D5285A94(&v11, (_QWORD *)(a1 + 8));
  v3 = v12;
  *v2 = v11;
  v2[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = CGImageBlockCreate();
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1D53A6EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A6EE8(unsigned int *a1)
{
  uint64_t result;

  result = a1[6];
  if (!(_DWORD)result)
  {
    (*(void (**)(unsigned int *, _QWORD))(*(_QWORD *)a1 + 8))(a1, 0);
    return a1[6];
  }
  return result;
}

uint64_t *sub_1D53A6F24(uint64_t a1, int a2)
{
  uint64_t *result;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  void *exception;
  unsigned int v9;
  unsigned int v10[7];
  unsigned int v11;

  result = *(uint64_t **)(a1 + 56);
  if (!result)
  {
    *(_OWORD *)v10 = *(_OWORD *)(a1 + 28);
    sub_1D5285A24(&v11, (unsigned int *)((unint64_t)v10 | 0xC));
    *(_OWORD *)v10 = *(_OWORD *)(a1 + 28);
    sub_1D5285A24(&v9, &v10[2]);
    if (a2)
      v5 = 3;
    else
      v5 = 4;
    v10[0] = (*(_DWORD *)(a1 + 44) >> 3) * v5;
    sub_1D52B42B4(&v9, v10);
    v6 = v9;
    if (*(_BYTE *)(a1 + 52) && (v9 & 0xF) != 0)
    {
      v10[0] = 16 - (v9 & 0xF);
      sub_1D52B0860(&v9, v10);
      v6 = v9;
    }
    *(_DWORD *)(a1 + 24) = v6;
    v10[0] = v11;
    v7 = sub_1D52B42B4(v10, &v9);
    result = sub_1D5438BCC((uint64_t *)*v7, 0, 2);
    *(_QWORD *)(a1 + 56) = result;
    if (!result)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
  return result;
}

void sub_1D53A7040(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A7058(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  int v4;

  result = *(_QWORD *)(a1 + 56);
  if (!result)
  {
    *(_QWORD *)(a1 + 56) = sub_1D530D4CC(*(_QWORD *)(a1 + 64));
    v3 = 2 * *(unsigned int *)(*(_QWORD *)(a1 + 64) + 56);
    sub_1D528304C(&v4, &v3);
    *(_DWORD *)(a1 + 24) = v4;
    return *(_QWORD *)(a1 + 56);
  }
  return result;
}

uint64_t sub_1D53A70B8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  sub_1D530D4CC(*(_QWORD *)(a1 + 64));
  v2 = (_QWORD *)operator new();
  sub_1D5285A94(&v11, (_QWORD *)(a1 + 8));
  v3 = v12;
  *v2 = v11;
  v2[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = CGImageBlockCreate();
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1D53A71D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D53A7208(_QWORD *a1)
{
  sub_1D53A722C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D53A722C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E9991920;
  v2 = (uint64_t)(a1 + 8);
  sub_1D530D7B0(a1[8]);
  sub_1D5282EB4(v2);
  return sub_1D53A6CEC(a1);
}

void sub_1D53A7270(_OWORD *a1@<X1>, int *a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  int v7;

  v6 = (char *)operator new(0x58uLL);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &unk_1E9991970;
  *((_QWORD *)v6 + 1) = 0;
  v7 = *a2;
  *((_QWORD *)v6 + 3) = off_1E9991890;
  *((_QWORD *)v6 + 5) = 0;
  *((_DWORD *)v6 + 12) = 0;
  *(_OWORD *)(v6 + 52) = *a1;
  *((_DWORD *)v6 + 17) = v7;
  *((_DWORD *)v6 + 18) = -1;
  v6[76] = 1;
  *((_QWORD *)v6 + 10) = 0;
  *a3 = v6 + 24;
  a3[1] = v6;
  *((_QWORD *)v6 + 4) = 0;
  sub_1D5285658((uint64_t)a3, (_QWORD *)v6 + 4, (uint64_t)(v6 + 24));
}

void sub_1D53A7300(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9991970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53A7314(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9991970;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53A7348(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 24))(a1 + 24);
}

void sub_1D53A7358(uint64_t *a1@<X1>, _OWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x68uLL);
  sub_1D53A73C0(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  sub_1D5285658((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1D53A73AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53A73C0(_QWORD *a1, uint64_t *a2, _OWORD *a3)
{
  a1[2] = 0;
  *a1 = &unk_1E99919C0;
  a1[1] = 0;
  sub_1D53A7464((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1D53A73F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53A740C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99919C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53A7420(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99919C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53A7454(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 24))(a1 + 24);
}

uint64_t sub_1D53A7464(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  void *exception;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E9991890;
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 28) = *a3;
  *(_QWORD *)(a1 + 44) = 0xFFFFFFFF00000010;
  *(_BYTE *)(a1 + 52) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E9991920;
  v5 = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 64) = *a2;
  v7 = (uint64_t *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v5 = *v7;
  }
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D530D7C8(v5);
  return a1;
}

void sub_1D53A7534(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  __cxa_free_exception(v3);
  sub_1D5282EB4(v2);
  sub_1D53A6CEC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A7560(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 448))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D53A75F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A7604(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 456))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D53A7694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D53A76A8(uint64_t a1)
{
  int *v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int *v7;
  int v8;
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14[2];
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void *__p;
  int v19;
  void *v20;
  void *v21;
  uint64_t v22;
  int *v23;
  std::__shared_weak_count *v24;

  (*(void (**)(int **__return_ptr))(*(_QWORD *)a1 + 160))(&v23);
  v2 = v23;
  sub_1D52850A0(&__p, "IFD0:EXIF");
  v3 = (*(uint64_t (**)(int *, void **))(*(_QWORD *)v2 + 272))(v2, &__p);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  v4 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_1D52854D0(&v23, 3uLL);
  v7 = v23;
  if (v3 == 2)
    v8 = 473000;
  else
    v8 = 550000;
  if (v3 == 2)
    v9 = 359000;
  else
    v9 = 418000;
  *v23 = v8;
  v7[1] = 256000;
  v7[2] = v9;
  v19 = 0;
  __p = &unk_1E99925C0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  sub_1D5287D44(&v20, v7, (uint64_t)v24, ((char *)v24 - (char *)v7) >> 2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v16, a1);
  v10 = v16;
  sub_1D52850A0(v14, "IFD0:EXIF:MAKERNOTE:WhitePoint");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v10 + 600))(v10, v14, &__p, 3);
  if (v15 < 0)
    operator delete(v14[0]);
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  __p = &unk_1E99925C0;
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v23)
  {
    v24 = (std::__shared_weak_count *)v23;
    operator delete(v23);
  }
}

void sub_1D53A7894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  void *v24;

  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  a18 = (void *)(v21 + 16);
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  v24 = *(void **)(v22 - 56);
  if (v24)
  {
    *(_QWORD *)(v22 - 48) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53A7920(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E99925C0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1D53A7960(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;

  v16 = 0x4050000000000000;
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1) == 10)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v12, a1);
    v4 = v12;
    sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE");
    v5 = (*(uint64_t (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v4 + 248))(v4, __p, v14, 0);
    if ((void *)((char *)v14[1] - (char *)v14[0]) == (void *)32)
      v6 = v5;
    else
      v6 = 0;
    if (v11 < 0)
      operator delete(__p[0]);
    v7 = v13;
    if (!v13)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((v6 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
LABEL_11:
      if ((v6 & 1) != 0)
      {
LABEL_12:
        *(_OWORD *)a2 = *(_OWORD *)v14;
        a2[2] = v15;
        return;
      }
    }
  }
  sub_1D528F9B4(a2, 4uLL, &v16);
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
}

void sub_1D53A7A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void sub_1D53A7AD4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  sub_1D5299C2C((uint64_t)a1);
  if (!a1[3])
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 160))(&v15, a1);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v15 + 384))(&v17);
    v2 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
    v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
    *(_QWORD *)&v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
    *((_QWORD *)&v12 + 1) = v5;
    sub_1D53A7DA0(&v17, (unint64_t *)&v14, &v13, &v12, &v15);
    sub_1D5319484(v15, 1);
    sub_1D52908C8(a1 + 3, &v15);
    v6 = v16;
    if (v16)
    {
      v7 = (unint64_t *)&v16->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = v18;
    if (v18)
    {
      v10 = (unint64_t *)&v18->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1D53A7C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_1D5282EB4((uint64_t)va);
  sub_1D5282EB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1D53A7C90(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E99925C0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53A7CE0(uint64_t a1, uint64_t a2, void **a3, unsigned int a4, uint64_t *a5)
{
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;

  v8 = sub_1D531C458(a1, a2, a3, a4, a5);
  if (a4 == 3 && v8 && *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16) == 12)
  {
    sub_1D52854D0(&v15, 3uLL);
    v9 = *(_DWORD **)(a1 + 16);
    v10 = (_DWORD *)*a5;
    v11 = v15;
    v12 = v15;
    *(_DWORD *)v15 = *(_DWORD *)*a5 * *v9;
    *(_DWORD *)(v12 + 4) = v10[1] * v9[1];
    *(_DWORD *)(v12 + 8) = v10[2] * v9[2];
    *(_OWORD *)a5 = v11;
    v13 = a5[2];
    a5[2] = v16;
    *((_QWORD *)&v15 + 1) = v10;
    v16 = v13;
    *(_QWORD *)&v15 = v10;
    operator delete(v10);
  }
  return 1;
}

void sub_1D53A7DA0(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xE0uLL);
  sub_1D52C0BA8((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D53A7E0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A7E20(int a1, unsigned int a2)
{
  unsigned int *v2;
  int v4;
  void *exception;

  v2 = (unsigned int *)&unk_1D544E524;
  if ((a1 + 2122219136) < 0x12)
    return v2[a2];
  if (a1 > 370546197)
  {
    if (a1 > 1229539656)
    {
      if (a1 == 1229539657)
      {
        if (a2 < 4)
        {
          v2 = (unsigned int *)&unk_1D544E514;
          return v2[a2];
        }
      }
      else
      {
        if (a1 == 1364283729)
          return v2[a2];
        if (a1 == 1633771873 && a2 < 4)
        {
          v2 = (unsigned int *)&unk_1D544E504;
          return v2[a2];
        }
      }
LABEL_26:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (a1 == 370546198)
    {
      if (a2 < 4)
      {
        v2 = (unsigned int *)&unk_1D544E4F4;
        return v2[a2];
      }
      goto LABEL_26;
    }
    v4 = 1094795585;
LABEL_18:
    if (a1 == v4)
      return v2[a2];
    goto LABEL_26;
  }
  if (a1 > 336860179)
  {
    if (a1 == 336860180)
      return v2[a2];
    v4 = 353703189;
    goto LABEL_18;
  }
  if (a1 == -1802201964)
  {
    if (a2 < 4)
    {
      v2 = (unsigned int *)&unk_1D544E524;
      return v2[a2];
    }
    goto LABEL_26;
  }
  if (a1)
    goto LABEL_26;
  return 1;
}

void sub_1D53A8000(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D53A8024(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  double *v6;
  int *v7;
  unint64_t v8;
  int v9;
  int *v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int *v17;
  int v18;
  void *v19;
  int v20;
  _BYTE *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *exception;
  void *v29;
  void *v30[3];
  int v31;
  BOOL v32;
  uint64_t v33;
  _BYTE *v34;
  std::__shared_weak_count *v35;
  void *__p;
  int *v37;
  int *v38;
  void *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  char *v44;
  char *v45;

  (*(void (**)(char **__return_ptr))(*a1 + 2888))(&v44);
  if (v45 == v44 || *(_DWORD *)v44 != 11)
  {
    sub_1D5330864(a1);
  }
  else
  {
    if ((unint64_t)(v45 - v44) <= 0xB)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
LABEL_52:
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 160))(&v39, a1);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v39 + 384))(&v42);
    v2 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v41 = 0;
    v41 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 3016))(a1);
    (*(void (**)(void **__return_ptr, _QWORD *, uint64_t))(*a1 + 2960))(&v39, a1, v5);
    v6 = (double *)v39;
    if ((char *)v40 - (_BYTE *)v39 != 24)
    {
      v29 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v29, "RawCameraException");
      __cxa_throw(v29, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    __p = 0;
    v37 = 0;
    v38 = 0;
    if (v40 != v39)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = (int)(v6[v8] * 0.5);
        if (v7 >= v38)
        {
          v11 = (int *)__p;
          v12 = ((char *)v7 - (_BYTE *)__p) >> 2;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62)
            sub_1D5282B8C();
          v14 = (char *)v38 - (_BYTE *)__p;
          if (((char *)v38 - (_BYTE *)__p) >> 1 > v13)
            v13 = v14 >> 1;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
            v15 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            v16 = (char *)sub_1D5282BA0((uint64_t)&v38, v15);
            v11 = (int *)__p;
            v7 = v37;
          }
          else
          {
            v16 = 0;
          }
          v17 = (int *)&v16[4 * v12];
          *v17 = v9;
          v10 = v17 + 1;
          while (v7 != v11)
          {
            v18 = *--v7;
            *--v17 = v18;
          }
          __p = v17;
          v37 = v10;
          v38 = (int *)&v16[4 * v15];
          if (v11)
            operator delete(v11);
        }
        else
        {
          *v7 = v9;
          v10 = v7 + 1;
        }
        v37 = v10;
        ++v8;
        v6 = (double *)v39;
        v7 = v10;
      }
      while (v8 < ((char *)v40 - (_BYTE *)v39) >> 3);
    }
    v33 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
    v30[0] = (void *)(*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
    v30[1] = v19;
    v20 = *((_DWORD *)v44 + 2);
    v32 = *((_DWORD *)v44 + 1) != 0;
    v31 = v20;
    sub_1D53A86AC(&v42, (unint64_t *)&v41, &v33, v30, (uint64_t)&__p, (char *)&v32, &v31, &v34);
    v21 = v34;
    v34[185] = 0;
    sub_1D5330730((uint64_t)a1, (uint64_t)v30);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)v21 + 200))(v21, v30);
    if (v30[0])
    {
      v30[1] = v30[0];
      operator delete(v30[0]);
    }
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v34 + 48))(v34, 3);
    sub_1D52908C8(a1 + 3, (uint64_t *)&v34);
    v22 = v35;
    if (v35)
    {
      v23 = (unint64_t *)&v35->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (__p)
    {
      v37 = (int *)__p;
      operator delete(__p);
    }
    if (v39)
    {
      v40 = (std::__shared_weak_count *)v39;
      operator delete(v39);
    }
    v25 = v43;
    if (v43)
    {
      v26 = (unint64_t *)&v43->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  if (!a1[3])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    goto LABEL_52;
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
}

void sub_1D53A8438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;
  void *v25;

  sub_1D5282EB4((uint64_t)&a14);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  sub_1D5282EB4((uint64_t)&a23);
  v25 = *(void **)(v23 - 112);
  if (v25)
  {
    *(_QWORD *)(v23 - 104) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A850C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 2960))(a1, 63);
}

uint64_t sub_1D53A851C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 464))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D53A85AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53A85C0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = 0;
  return sub_1D528F9B4(a1, 4uLL, &v2);
}

uint64_t sub_1D53A85EC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = sub_1D53676B0(v2, CFSTR("srawMultipliersOffset"), v3, &unk_1E99925F8);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D53A8690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53A86A4()
{
  return 0xFFFFFFFFLL;
}

void sub_1D53A86AC(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, uint64_t a5@<X5>, char *a6@<X6>, int *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;

  v16 = operator new(0x118uLL);
  sub_1D53A8754(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  sub_1D5285658((uint64_t)a8, v16 + 4, (uint64_t)(v16 + 3));
}

void sub_1D53A8740(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53A8754(_QWORD *a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5, uint64_t a6, char *a7, int *a8)
{
  a1[2] = 0;
  *a1 = &unk_1E9993220;
  a1[1] = 0;
  sub_1D53A8804((uint64_t)(a1 + 3), a2, *a3, a4, a5, a6, *a7, *a8);
  return a1;
}

void sub_1D53A8798(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53A87AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9993220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53A87C0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9993220;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53A87F4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D53A8804(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4, _OWORD *a5, uint64_t a6, char a7, int a8)
{
  uint64_t v12;

  v12 = sub_1D530B330(a1, a2, a3, a4, a5);
  *(_QWORD *)(v12 + 200) = 0;
  *(_QWORD *)(v12 + 208) = 0;
  *(_QWORD *)(v12 + 192) = 0;
  *(_WORD *)(v12 + 216) = -1;
  *(_QWORD *)v12 = &off_1E9990070;
  *(_QWORD *)(v12 + 232) = 0;
  *(_QWORD *)(v12 + 240) = 0;
  *(_QWORD *)(v12 + 224) = 0;
  sub_1D5287D44((_QWORD *)(v12 + 224), *(const void **)a6, *(_QWORD *)(a6 + 8), (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2);
  *(_BYTE *)(a1 + 248) = a7;
  *(_DWORD *)(a1 + 252) = a8;
  return a1;
}

void sub_1D53A887C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1D53A8890(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53A8890(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E99781A0;
  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  return sub_1D5282F0C(a1);
}

void sub_1D53A88D0(uint64_t *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  sub_1D53AB358(a1, &v4);
  sub_1D53A8954(v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1D53A8940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D53A8954(uint64_t a1)
{
  sub_1D53A8AD8(a1);
  sub_1D53A8DAC((uint64_t *)a1);
  if (*(_QWORD *)(a1 + 128))
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a1 + 128);
}

uint64_t sub_1D53A89A0(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *exception;

  *(_QWORD *)result = &unk_1E9993270;
  v2 = *a2;
  *(_QWORD *)(result + 8) = *a2;
  v3 = a2[1];
  *(_QWORD *)(result + 16) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v2 = *(_QWORD *)(result + 8);
  }
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  *(_DWORD *)(result + 24) = *(_DWORD *)(v2 + 48);
  return result;
}

void sub_1D53A8A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;

  sub_1D5282EB4((uint64_t)(v11 + 16));
  a10 = v11 + 13;
  sub_1D5304DA8(&a10);
  a10 = v11 + 10;
  sub_1D5304DA8(&a10);
  a10 = v11 + 7;
  sub_1D5304DA8(&a10);
  sub_1D5304DA8(&a10);
  sub_1D5282EB4(v10);
  _Unwind_Resume(a1);
}

void sub_1D53A8AD8(uint64_t a1)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 **v14;
  unsigned __int16 *v15;
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  void *__p;
  _BYTE *v20;
  unsigned __int16 **v21[3];
  void **v22;

  sub_1D52853F0(&__p, *(unsigned int *)(a1 + 24));
  sub_1D53AAB7C(v21, 4uLL, (uint64_t)&__p);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  sub_1D52853F0(v17, *(unsigned int *)(a1 + 24));
  sub_1D53AAB7C(&__p, 4uLL, (uint64_t)v17);
  v2 = v17[0];
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  v3 = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 24);
  do
  {
    if ((_DWORD)v4)
    {
      v5 = 0;
      v2 = *(_DWORD **)(a1 + 8);
      do
      {
        v6 = v2[13];
        v7 = sub_1D530D4CC((uint64_t)v2);
        if (0xAAAAAAAAAAAAAAABLL * ((v20 - (_BYTE *)__p) >> 3) <= v3)
          sub_1D528EAE0();
        v8 = (uint64_t *)((char *)__p + 24 * v3);
        v9 = *v8;
        if (v5 >= (v8[1] - *v8) >> 1)
          sub_1D528EAE0();
        v10 = v6 >> 1;
        v11 = *(_QWORD *)(a1 + 8);
        *(_WORD *)(v9 + 2 * v5) = *(_WORD *)(v7
                                           + 2 * (*(_DWORD *)(v11 + 56) * v5)
                                           + 2 * (v10 + ~(_DWORD)v3));
        v12 = sub_1D530D4CC(v11);
        if (0xAAAAAAAAAAAAAAABLL * (v21[1] - v21[0]) <= v3)
          sub_1D528EAE0();
        v13 = v12;
        v14 = &v21[0][3 * v3];
        v15 = *v14;
        if (v5 >= v14[1] - *v14)
          sub_1D528EAE0();
        v2 = *(_DWORD **)(a1 + 8);
        v15[v5] = *(_WORD *)(v13 + 2 * (v2[14] * v5) + 2 * (v3 + v10));
        ++v5;
        v4 = *(unsigned int *)(a1 + 24);
      }
      while (v5 < v4);
    }
    ++v3;
  }
  while (v3 != 4);
  sub_1D53A92FC((uint64_t)v2, (uint64_t *)v21);
  sub_1D53A92FC(v16, (uint64_t *)&__p);
  sub_1D53A9648(v21, (uint64_t *)(a1 + 56), (uint64_t **)v17);
  sub_1D53AAC34((uint64_t *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v17;
  *(_QWORD *)(a1 + 48) = v18;
  v17[1] = 0;
  v18 = 0;
  v17[0] = 0;
  v22 = v17;
  sub_1D5304DA8(&v22);
  sub_1D53A9648((unsigned __int16 ***)&__p, (uint64_t *)(a1 + 104), (uint64_t **)v17);
  sub_1D53AAC34((uint64_t *)(a1 + 80));
  *(_OWORD *)(a1 + 80) = *(_OWORD *)v17;
  *(_QWORD *)(a1 + 96) = v18;
  v17[1] = 0;
  v18 = 0;
  v17[0] = 0;
  v22 = v17;
  sub_1D5304DA8(&v22);
  v17[0] = &__p;
  sub_1D5304DA8((void ***)v17);
  __p = v21;
  sub_1D5304DA8((void ***)&__p);
}

void sub_1D53A8D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **__p, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, char a15)
{
  __p = &a12;
  sub_1D5304DA8((void ***)&__p);
  a12 = &a15;
  sub_1D5304DA8((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1D53A8DAC(uint64_t *a1)
{
  _BOOL4 v2;
  double v3;
  __n128 v4;
  double v5;
  double ***v6;
  std::__shared_weak_count **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  double v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  double v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  double v46;
  __int128 v47;
  double **v48;
  std::__shared_weak_count *v49;
  double v50;
  double **v51;
  std::__shared_weak_count *v52;
  double v53;
  double **v54;
  std::__shared_weak_count *v55;
  double v56;
  double v57;
  double v58;
  BOOL v59;
  uint64_t v60;
  std::__shared_weak_count *v61;

  v60 = 0;
  v61 = 0;
  v59 = 0;
  v57 = 0.0;
  v58 = 0.0;
  sub_1D53A9C44(a1, &v59, &v58, &v57);
  v2 = v58 > 0.15 && v58 / v57 > 0.7;
  v56 = 0.0;
  sub_1D53A9E3C(a1, 1u, 1, 1, 1, 1, 0, &v56, &v54);
  sub_1D52908C8(&v60, (uint64_t *)&v54);
  v3 = v56;
  v53 = 0.0;
  sub_1D53A9E3C(a1, 1u, 0, 0, 1, 1, 0, &v53, &v51);
  v50 = 0.0;
  sub_1D53A9E3C(a1, 1u, 1, 1, 0, 0, 0, &v50, &v48);
  if (v59)
  {
    if (v53 >= v50)
      v5 = v50;
    else
      v5 = v53;
    if (v53 >= v50)
      v6 = &v48;
    else
      v6 = &v51;
    *(_QWORD *)&v47 = *v6;
    v7 = &v49;
    if (v53 < v50)
      v7 = &v52;
    v8 = *v7;
    *((_QWORD *)&v47 + 1) = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v4.n128_f64[0] = v5 / v3;
    if (v5 / v3 < 1.05)
    {
      sub_1D52908C8(&v60, (uint64_t *)&v47);
      v3 = v5;
    }
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v4);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    sub_1D52908C8(&v60, (uint64_t *)&v48);
    v3 = v50;
  }
  v46 = 0.0;
  sub_1D53A9E3C(a1, 1u, 1, 0, 0, 0, 0, &v46, (double ***)&v47);
  v14 = v46;
  if (v46 / v3 < 1.05)
  {
    sub_1D52908C8(&v60, (uint64_t *)&v47);
    v3 = v14;
  }
  sub_1D53A9E3C(a1, 1u, 0, 0, 0, 0, 0, &v46, (double ***)&v45);
  v15 = v45;
  v45 = 0uLL;
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  v47 = v15;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
  if (*((_QWORD *)&v45 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v46;
  if (v46 / v3 < 1.05)
  {
    sub_1D52908C8(&v60, (uint64_t *)&v47);
    v3 = v22;
  }
  if (v2)
  {
    sub_1D53A9E3C(a1, 0, 0, 0, 0, 0, 1, &v46, (double ***)&v45);
    v23 = v45;
    v45 = 0uLL;
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
    v47 = v23;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (*((_QWORD *)&v45 + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (v46 / v3 < 1.05)
      sub_1D52908C8(&v60, (uint64_t *)&v47);
  }
  if (v60)
    nullsub_1(v60);
  sub_1D52908C8(a1 + 16, &v60);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v49;
  if (v49)
  {
    v34 = (unint64_t *)&v49->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v52;
  if (v52)
  {
    v37 = (unint64_t *)&v52->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v55;
  if (v55)
  {
    v40 = (unint64_t *)&v55->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v61;
  if (v61)
  {
    v43 = (unint64_t *)&v61->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
}

void sub_1D53A929C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va2;
  uint64_t v16;
  uint64_t v17;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v14 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  sub_1D5282EB4((uint64_t)va);
  sub_1D5282EB4((uint64_t)va1);
  sub_1D5282EB4((uint64_t)va2);
  sub_1D5282EB4((uint64_t)va3);
  sub_1D5282EB4(v5 - 80);
  _Unwind_Resume(a1);
}

void sub_1D53A92FC(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  _WORD *v17;
  _WORD *v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;

  v3 = (_QWORD *)*a2;
  v4 = a2[1];
  if ((_QWORD *)v4 == v3)
    sub_1D528EAE0();
  v6 = v3[1] - *v3;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  sub_1D53AAC6C(&v46, (uint64_t)v3, v4, 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v3) >> 3));
  v9 = *(_QWORD *)*a2;
  v10 = *(_QWORD *)(*a2 + 24);
  v11 = *(_QWORD *)(*a2 + 48);
  v12 = 0.0;
  v13 = 0.0;
  v14 = *(_QWORD *)(*a2 + 72);
  v15 = (_WORD *)(v9 + 2);
  v16 = (_WORD *)(v10 + 2);
  v17 = (_WORD *)(v11 + 2);
  v18 = (_WORD *)(v14 + 2);
  v19 = -2;
  v20 = 0.0;
  v21 = 0.0;
  v22 = 0.0;
  v23 = 0.0;
  v24 = 0.0;
  v25 = 0.0;
  do
  {
    LOWORD(v7) = *(v15 - 1);
    *(double *)&v26 = (double)*(unint64_t *)&v7;
    v12 = v12 + *(double *)&v26;
    LOWORD(v26) = *(v16 - 1);
    *(double *)&v27 = (double)v26;
    v25 = v25 + *(double *)&v27;
    LOWORD(v27) = *(v17 - 1);
    *(double *)&v28 = (double)v27;
    v24 = v24 + *(double *)&v28;
    LOWORD(v28) = *(v18 - 1);
    *(double *)&v29 = (double)v28;
    v23 = v23 + *(double *)&v29;
    LOWORD(v29) = *v15;
    *(double *)&v30 = (double)v29;
    v22 = v22 + *(double *)&v30;
    LOWORD(v30) = *v16;
    *(double *)&v31 = (double)v30;
    v21 = v21 + *(double *)&v31;
    LOWORD(v31) = *v17;
    *(double *)&v32 = (double)v31;
    v20 = v20 + *(double *)&v32;
    LOWORD(v32) = *v18;
    v7 = (double)v32;
    v19 += 2;
    v15 += 2;
    v13 = v13 + v7;
    v16 += 2;
    v17 += 2;
    v18 += 2;
  }
  while (v19 < 0x62);
  if ((unint64_t)v6 >= 0xCB)
  {
    v33 = 0;
    v34 = *v46;
    v35 = v46[3];
    v36 = v46[6];
    v37 = v46[9];
    v38 = 101;
    do
    {
      LOWORD(v8) = *(_WORD *)(v9 + 2 * (v33 + 50));
      *(double *)&v39 = (v12 / 50.0 + (double)*(unint64_t *)&v8) * 0.5;
      *(_WORD *)(v34 + 2 * (v33 + 50)) = (int)*(double *)&v39;
      LOWORD(v39) = *(_WORD *)(v10 + 2 * (v33 + 50));
      *(double *)&v40 = (v25 / 50.0 + (double)v39) * 0.5;
      *(_WORD *)(v35 + 2 * (v33 + 50)) = (int)*(double *)&v40;
      LOWORD(v40) = *(_WORD *)(v11 + 2 * (v33 + 50));
      *(double *)&v41 = (v24 / 50.0 + (double)v40) * 0.5;
      *(_WORD *)(v36 + 2 * (v33 + 50)) = (int)*(double *)&v41;
      LOWORD(v41) = *(_WORD *)(v14 + 2 * (v33 + 50));
      *(double *)&v42 = (v23 / 50.0 + (double)v41) * 0.5;
      *(_WORD *)(v37 + 2 * (v33 + 50)) = (int)*(double *)&v42;
      LOWORD(v42) = *(_WORD *)(v9 + 2 * (v33 + 51));
      *(double *)&v43 = (v22 / 50.0 + (double)v42) * 0.5;
      *(_WORD *)(v34 + 2 * (v33 + 51)) = (int)*(double *)&v43;
      LOWORD(v43) = *(_WORD *)(v10 + 2 * (v33 + 51));
      *(double *)&v44 = (v21 / 50.0 + (double)v43) * 0.5;
      *(_WORD *)(v35 + 2 * (v33 + 51)) = (int)*(double *)&v44;
      LOWORD(v44) = *(_WORD *)(v11 + 2 * (v33 + 51));
      *(double *)&v45 = (v20 / 50.0 + (double)v44) * 0.5;
      *(_WORD *)(v36 + 2 * (v33 + 51)) = (int)*(double *)&v45;
      LOWORD(v45) = *(_WORD *)(v14 + 2 * (v33 + 51));
      *(_WORD *)(v37 + 2 * (v33 + 51)) = (int)((v13 / 50.0 + (double)v45) * 0.5);
      v12 = v12 + (double)(*(unsigned __int16 *)(v9 + 2 * (v33 + 100)) - *(unsigned __int16 *)(v9 + 2 * v33));
      v25 = v25 + (double)(*(unsigned __int16 *)(v10 + 2 * (v33 + 100)) - *(unsigned __int16 *)(v10 + 2 * v33));
      v24 = v24 + (double)(*(unsigned __int16 *)(v11 + 2 * (v33 + 100)) - *(unsigned __int16 *)(v11 + 2 * v33));
      v23 = v23 + (double)(*(unsigned __int16 *)(v14 + 2 * (v33 + 100)) - *(unsigned __int16 *)(v14 + 2 * v33));
      v22 = v22 + (double)(*(unsigned __int16 *)(v9 + 2 * v38) - *(unsigned __int16 *)(v9 + 2 * (v33 + 1)));
      v21 = v21 + (double)(*(unsigned __int16 *)(v10 + 2 * v38) - *(unsigned __int16 *)(v10 + 2 * (v33 + 1)));
      v20 = v20 + (double)(*(unsigned __int16 *)(v11 + 2 * v38) - *(unsigned __int16 *)(v11 + 2 * (v33 + 1)));
      v8 = (double)(*(unsigned __int16 *)(v14 + 2 * v38) - *(unsigned __int16 *)(v14 + 2 * (v33 + 1)));
      v13 = v13 + v8;
      v38 = v33 + 103;
      v33 += 2;
    }
    while (v6 >> 1 > v38);
  }
  if (&v46 != (uint64_t **)a2)
    sub_1D53AADD4((uint64_t)a2, (uint64_t)v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - (uint64_t)v46) >> 3));
  v49 = (void **)&v46;
  sub_1D5304DA8(&v49);
}

void sub_1D53A962C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_1D5304DA8(&a12);
  _Unwind_Resume(a1);
}

void sub_1D53A9648(unsigned __int16 ***a1@<X1>, uint64_t *a2@<X2>, uint64_t **a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  double *v16;
  double *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  double v26;
  double v27;
  int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t i;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  BOOL v73;
  double v74;
  double v75;
  uint64_t v76;
  char v77;
  unsigned __int16 **v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  double v88;
  double v89;
  double v90;
  uint64_t v91;
  double *v92;
  double v93;
  double v94;
  void *v96;
  void *v97;
  void *__p[2];
  uint64_t v99;
  _QWORD v100[3];
  void **v101;

  if (a1[1] == *a1)
    sub_1D528EAE0();
  v5 = (char *)(*a1)[1] - (char *)**a1;
  v96 = (void *)0x4197D78400000000;
  sub_1D528F9B4(__p, ((unint64_t)(int)(v5 >> 1) >> 1) + 1, &v96);
  sub_1D53AAFC8(v100, (int)(v5 >> 1), (uint64_t)__p);
  v6 = (unint64_t)v5 >> 1;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v7 = 2;
  v8 = 2;
  do
  {
    sub_1D528EB68(__p, 9uLL);
    sub_1D528EB68(&v96, 9uLL);
    v9 = 0;
    v10 = 0;
    v11 = v7 + 4;
    v12 = **a1;
    v13 = (*a1)[3];
    v14 = (*a1)[6];
    v15 = (*a1)[9];
    v16 = (double *)__p[0];
    v17 = (double *)v96;
    v18 = *v12;
    v19 = *v13;
    v20 = *v14;
    v21 = *v15;
    v22 = &v12[v8];
    v23 = &v13[v8];
    v24 = &v14[v8];
    v25 = &v15[v8];
    v26 = 0.0;
    v27 = 0.0;
    do
    {
      v28 = v18 - v22[v10];
      v18 = v12[v10 + 1];
      v29 = (double)(v18 - v22[v10 + 1]);
      v30 = (double)(v19 - v23[v10]);
      v19 = v13[v10 + 1];
      v31 = (double)(v19 - v23[v10 + 1]);
      v32 = (double)(v20 - v24[v10]);
      v33 = (double)v28 * (double)v28 + 0.0 + v30 * v30;
      v20 = v14[v10 + 1];
      v34 = (double)(v20 - v24[v10 + 1]);
      v35 = v29 * v29 + 0.0 + v31 * v31;
      v36 = (double)(v21 - v25[v10]);
      v21 = v15[v10 + 1];
      v37 = (double)(v21 - v25[v10 + 1]);
      v38 = v33 + v32 * v32 + v36 * v36;
      v16[v9] = v38;
      v39 = v35 + v34 * v34 + v37 * v37;
      v26 = v26 + v38;
      v17[v9] = v39;
      v27 = v27 + v39;
      ++v10;
      ++v9;
    }
    while (v10 != 9);
    v40 = (double)(int)v7 * 5.0 / 400.0;
    v41 = v100[0];
    v42 = *(_QWORD *)(v100[0] + 24 * v11);
    v43 = 4 * v11;
    *(double *)(*(_QWORD *)(v100[0] + 96) + v43) = v40 * v26;
    *(double *)(v42 + 16) = v40 * v27;
    *(double *)(*(_QWORD *)(v41 + 120) + v43) = v40 * v27;
    v44 = (v6 - 4 + ~(_DWORD)v7);
    if ((int)v44 < 7)
      goto LABEL_13;
    for (i = 6; i < v44; i += 2)
    {
      v46 = 0;
      v47 = 0.0;
      v48 = 0.0;
      do
      {
        v49 = v16[v46 + 1];
        v16[v46] = v49;
        v47 = v47 + v49;
        v50 = v17[v46 + 1];
        v17[v46] = v50;
        v48 = v48 + v50;
        ++v46;
      }
      while (v46 != 8);
      v51 = 2 * i + 8;
      v52 = i + v7;
      v53 = v52 * 2 + 8;
      v54 = (double)(*(unsigned __int16 *)((char *)v12 + v51) - v12[v52 + 4]);
      v55 = 2 * i + 10;
      v52 += 5;
      v56 = (double)(*(unsigned __int16 *)((char *)v12 + v55) - v12[v52]);
      v57 = (double)(*(unsigned __int16 *)((char *)v13 + v51) - *(unsigned __int16 *)((char *)v13 + v53));
      v58 = (double)(*(unsigned __int16 *)((char *)v13 + v55) - v13[v52]);
      v59 = v54 * v54 + 0.0 + v57 * v57;
      v60 = (double)(*(unsigned __int16 *)((char *)v14 + v51) - *(unsigned __int16 *)((char *)v14 + v53));
      v61 = v56 * v56 + 0.0 + v58 * v58;
      v62 = (double)(*(unsigned __int16 *)((char *)v14 + v55) - v14[v52]);
      v63 = v59 + v60 * v60;
      v64 = (double)(*(unsigned __int16 *)((char *)v15 + v51) - *(unsigned __int16 *)((char *)v15 + v53));
      v65 = v61 + v62 * v62;
      v66 = (double)(*(unsigned __int16 *)((char *)v15 + v55) - v15[v52]);
      v67 = v63 + v64 * v64;
      v16[8] = v67;
      v68 = v47 + v67;
      v69 = v65 + v66 * v66;
      v17[8] = v69;
      v70 = *(_QWORD *)(v41 + 24 * (i + v7));
      v71 = 4 * (i + v7);
      *(double *)(*(_QWORD *)(v41 + 24 * i) + v71) = v40 * v68;
      v72 = v40 * (v48 + v69);
      *(double *)(v70 + 4 * i) = v72;
      *(double *)(*(_QWORD *)(v41 + 24 * (i | 1)) + v71) = v72;
    }
    v17 = (double *)v96;
    if (v96)
    {
LABEL_13:
      v97 = v17;
      operator delete(v17);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v8 += 2;
    v73 = v7 >= 0x18E;
    v7 += 2;
  }
  while (!v73);
  sub_1D528EB68(__p, (int)(v5 >> 1));
  sub_1D53AAFC8(a3, 2uLL, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_1D528EB68(&v96, (int)(v5 >> 1));
  sub_1D53AAFC8(__p, 2uLL, (uint64_t)&v96);
  sub_1D53AAC34(a2);
  *(_OWORD *)a2 = *(_OWORD *)__p;
  a2[2] = v99;
  __p[1] = 0;
  v99 = 0;
  __p[0] = 0;
  v101 = __p;
  sub_1D5304DA8(&v101);
  if (v96)
  {
    v97 = v96;
    operator delete(v96);
  }
  if ((int)v6 >= 1)
  {
    v76 = 0;
    v77 = 0;
    v78 = *a1;
    v79 = v100[0];
    v80 = **a3;
    v81 = (*a3)[3];
    v82 = *(_QWORD *)(*a2 + 24);
    v83 = *(_QWORD *)*a2;
    v84 = -400;
    do
    {
      if (v84 <= (v77 & 1))
        v85 = v77 & 1;
      else
        v85 = v84;
      v86 = v76 & 1;
      if ((int)v76 - 400 > v86)
        v86 = v76 - 400;
      v87 = v76 + 400;
      if ((int)v76 + 400 >= (int)v6)
        v87 = (unint64_t)v5 >> 1;
      v88 = 0.0;
      v89 = 0.0;
      v90 = 0.0;
      if (v86 < v87)
      {
        if (v84 <= (v77 & 1))
          v91 = v77 & 1;
        else
          v91 = v84;
        v92 = (double *)(*(_QWORD *)(v79 + 24 * v76) + ((4 * v85) & 0x1FFFFFFF8));
        do
        {
          LOWORD(v74) = (*v78)[v91];
          v74 = (double)*(unint64_t *)&v74;
          LOWORD(v75) = v78[3][v91];
          v75 = (double)*(unint64_t *)&v75;
          v93 = *v92++;
          v88 = v88 + v74 * (1.0 / v93);
          v89 = v89 + v75 * (1.0 / v93);
          v90 = v90 + 1.0 / v93;
          v91 += 2;
        }
        while (v91 < v87);
      }
      *(double *)(v80 + 8 * v76) = v88 / v90;
      *(double *)(v81 + 8 * v76) = v89 / v90;
      v94 = v90 * v90;
      *(double *)(v82 + 8 * v76) = v94;
      *(double *)(v83 + 8 * v76++) = v94;
      ++v77;
      ++v84;
    }
    while (v76 != ((unint64_t)v5 >> 1));
  }
  __p[0] = v100;
  sub_1D5304DA8((void ***)__p);
}

void sub_1D53A9BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, void *__p, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
    operator delete(__p);
  a13 = a9;
  sub_1D5304DA8((void ***)&a13);
  a13 = &a17;
  sub_1D5304DA8((void ***)&a13);
  _Unwind_Resume(a1);
}

double sub_1D53A9C44(_QWORD *a1, BOOL *a2, double *a3, double *a4)
{
  _QWORD *v5;
  uint64_t v9;
  double v10;
  double v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  double v15;
  double v16;
  unint64_t v17;
  char v18;
  char v19;
  unint64_t v20;
  double v21;
  unsigned int v22;
  double v23;
  BOOL v24;
  double v25;
  double v26;
  double result;

  v5 = (_QWORD *)a1[4];
  if ((_QWORD *)a1[5] == v5)
    sub_1D528EAE0();
  v9 = (uint64_t)(v5[1] - *v5) >> 3;
  v10 = sub_1D53AA5E8((uint64_t)a1);
  v11 = (double)v9;
  if ((_DWORD)v9)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0.0;
    v16 = 0.0;
    do
    {
      v17 = 0;
      v18 = 0;
      do
      {
        v19 = v17;
        v20 = v14 + (v17++ >> 1);
        v21 = *(double *)(*(_QWORD *)(a1[4] + 24 * (v17 & 1)) + 8 * v20);
        v22 = v19 & 1;
        v23 = *(double *)(*(_QWORD *)(a1[10] + 24 * (v19 & 1)) + 8 * v20);
        v24 = v21 > 600.0;
        if (v23 > 600.0)
          v24 = 1;
        if (v21 <= 1500.0
          && v23 <= 1500.0
          && fmin(fmax((v21 - v23)/ 133.333333* ((v21 - v23)/ 133.333333* -((v21 - v23) / 133.333333 * ((v21 - v23) / 133.333333)))* ((v21 - v23)/ 133.333333)+ 1.0, 0.0), 1.0)* fmin(fmax((fmin(*(double *)(*(_QWORD *)(a1[7] + 24 * (v17 & 1)) + 8 * v20), *(double *)(*(_QWORD *)(a1[13] + 24 * v22) + 8 * v20))- v10)/ v10, 0.0),
               2.0) >= 0.00001)
        {
          v18 |= v24;
          v16 = (double)v14 / v11 + v16;
          v15 = v15 + 1.0;
          ++v13;
        }
        else
        {
          v18 = 1;
        }
      }
      while (v17 != 4);
      if ((v18 & 1) == 0)
        v12 += 4;
      v14 += 2;
    }
    while (v14 < v9);
    v25 = v16 / v15 + -0.5;
    v26 = (double)v12;
  }
  else
  {
    v13 = 0;
    v26 = 0.0;
    v25 = NAN;
  }
  *a2 = fabs(v25) < 0.15;
  *a3 = v26 / v11;
  result = (double)v13 / v11;
  *a4 = result;
  return result;
}

void sub_1D53A9E3C(uint64_t *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, double *a8@<X7>, double ***a9@<X8>)
{
  _QWORD *v9;
  unint64_t v16;
  int v17;
  unint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  double *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  _BOOL4 v41;
  double v42;
  double v43;
  double v44;
  double *v45;
  double v46;
  uint64_t v47;
  double *v48;
  double *v49;
  double *v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  double *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  double *v63;
  double v66;
  unsigned int v68;
  uint64_t v69;
  size_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  void *v77[3];
  void *v78[3];
  void *v79[3];
  void *v80[3];
  void *__p;
  _BYTE *v82;
  _QWORD v83[4];

  v9 = (_QWORD *)a1[4];
  if ((_QWORD *)a1[5] == v9)
    sub_1D528EAE0();
  v16 = v9[1] - *v9;
  v70 = a3 + a2;
  v72 = (v70 + a4);
  v73 = (v72 + a5);
  if (a7)
    v17 = 4;
  else
    v17 = 0;
  v69 = (v73 + a6);
  v18 = (v73 + a6 + v17);
  v80[0] = 0;
  sub_1D528F9B4(&__p, (v18 + 1), v80);
  sub_1D53AAFC8(v83, (v16 >> 2) & 0xFFFFFFFE, (uint64_t)&__p);
  if (__p)
  {
    v82 = __p;
    operator delete(__p);
  }
  v19 = sub_1D53AA5E8((uint64_t)a1);
  if (!(v16 >> 3))
  {
LABEL_54:
    *a8 = 1.0e10;
    *a9 = 0;
    a9[1] = 0;
    goto LABEL_68;
  }
  v20 = v19;
  v21 = 0;
  v68 = 0;
  v66 = (double)(v16 >> 3);
  v22 = (v17 | a6) + a5 + a4 + a3 + a2 + 1;
  do
  {
    sub_1D528EB68(&__p, 4uLL);
    sub_1D528EB68(v80, 4uLL);
    sub_1D528EB68(v79, 4uLL);
    sub_1D528EB68(v78, 4uLL);
    sub_1D528EB68(v77, 4uLL);
    v23 = 0;
    v24 = a1[4];
    v25 = (double)v68 / v66;
    v26 = __p;
    v27 = a1[10];
    v28 = v80[0];
    v29 = a1[7];
    v30 = v79[0];
    v31 = a1[13];
    v32 = v78[0];
    v33 = 1;
    v34 = (double *)v77[0];
    do
    {
      v35 = v23 + 1;
      v36 = (8 * ((v23 + 1) & 1)) & 0xEF | (16 * ((v23 + 1) & 1));
      v37 = v68 + (v23 >> 1);
      v26[v23] = *(_QWORD *)(*(_QWORD *)(v24 + v36) + 8 * v37);
      v38 = (8 * (v23 & 1)) & 0xEF | (16 * (v23 & 1));
      v28[v23] = *(_QWORD *)(*(_QWORD *)(v27 + v38) + 8 * v37);
      v30[v23] = *(_QWORD *)(*(_QWORD *)(v29 + v36) + 8 * v37);
      v32[v23] = *(_QWORD *)(*(_QWORD *)(v31 + v38) + 8 * v37);
      v39 = *(double *)&v26[v23];
      if (v39 <= 1500.0 && (v40 = *(double *)&v28[v23], v40 <= 1500.0))
      {
        v41 = v39 <= 600.0;
        if (v40 > 600.0)
          v41 = 0;
        v42 = fmin(fmax((v39 - v40)/ 133.333333* ((v39 - v40)/ 133.333333* -((v39 - v40) / 133.333333 * ((v39 - v40) / 133.333333)))* ((v39 - v40)/ 133.333333)+ 1.0, 0.0), 1.0);
        v34[v23] = v42;
        v43 = v42 * fmin(fmax((fmin(*(double *)&v30[v23], *(double *)&v32[v23]) - v20) / v20, 0.0), 2.0);
        v34[v23] = v43;
        if (v43 < 0.00001)
          v41 = 0;
        v33 &= v41;
        v44 = fmin(*(double *)&v26[v23], *(double *)&v28[v23]);
        v34[v23] = v43 * ((v44 * -0.5 + 2000.0) / 2000.0 * ((v44 * -0.5 + 2000.0) / 2000.0));
      }
      else
      {
        v33 = 0;
      }
      ++v23;
    }
    while (v35 != 4);
    if ((a7 & 1) != 0)
    {
      v45 = (double *)v77[0];
      v46 = (*(double *)v77[0] + *((double *)v77[0] + 1) + *((double *)v77[0] + 2) + *((double *)v77[0] + 3)) * 0.25;
      *((double *)v77[0] + 2) = v46;
      v45[3] = v46;
      *v45 = v46;
      v45[1] = v46;
    }
    v47 = 0;
    v48 = (double *)v77[0];
    v49 = (double *)__p;
    v50 = (double *)v80[0];
    v51 = v83[0];
    do
    {
      if (v48[v47] < 0.00001)
        goto LABEL_41;
      v52 = v49[v47];
      v53 = v50[v47];
      if (a2)
        **(_QWORD **)(v51 + 24 * v21) = 0x3FF0000000000000;
      v54 = (v52 + v53) * 0.5;
      if (a3)
      {
        *(double *)(*(_QWORD *)(v51 + 24 * v21) + 8 * a2) = v54;
        if (!a4)
        {
LABEL_27:
          if (!a5)
            goto LABEL_28;
          goto LABEL_33;
        }
      }
      else if (!a4)
      {
        goto LABEL_27;
      }
      *(double *)(*(_QWORD *)(v51 + 24 * v21) + 8 * v70) = v54 * v54;
      if (!a5)
      {
LABEL_28:
        if (!a6)
          goto LABEL_29;
        goto LABEL_34;
      }
LABEL_33:
      *(double *)(*(_QWORD *)(v51 + 24 * v21) + 8 * v72) = v25;
      if (!a6)
      {
LABEL_29:
        if (!a7)
          goto LABEL_38;
        goto LABEL_35;
      }
LABEL_34:
      *(double *)(*(_QWORD *)(v51 + 24 * v21) + 8 * v73) = v25 * v25;
      if (!a7)
        goto LABEL_38;
LABEL_35:
      if (v33)
      {
        *(_QWORD *)(*(_QWORD *)(v51 + 24 * v21) + 8 * (v47 + v69)) = 0x3FF0000000000000;
      }
      else if (!(a5 | a6 | a3 | a2 | a4))
      {
        goto LABEL_41;
      }
LABEL_38:
      v55 = *(double **)(v51 + 24 * v21);
      v55[v18] = v49[v47] - v50[v47];
      v56 = v22;
      do
      {
        *v55 = v48[v47] * *v55;
        ++v55;
        --v56;
      }
      while (v56);
      v21 = (v21 + 1);
LABEL_41:
      ++v47;
    }
    while (v47 != 4);
    if (v77[0])
    {
      v77[1] = v77[0];
      operator delete(v77[0]);
      v32 = v78[0];
    }
    if (v32)
    {
      v78[1] = v32;
      operator delete(v32);
    }
    if (v79[0])
    {
      v79[1] = v79[0];
      operator delete(v79[0]);
    }
    if (v80[0])
    {
      v80[1] = v80[0];
      operator delete(v80[0]);
    }
    if (__p)
    {
      v82 = __p;
      operator delete(__p);
    }
    v68 += 2;
  }
  while (v68 < (v16 >> 3));
  if (v21 < 0x64)
    goto LABEL_54;
  sub_1D528EB68(&__p, v18);
  v57 = (void *)operator new[]();
  bzero(v57, 8 * (v21 * v18));
  v71 = (void *)operator new[]();
  bzero(v71, 8 * v21);
  v58 = 0;
  v59 = v83[0];
  do
  {
    v60 = *(_QWORD *)(v59 + 24 * v58);
    if ((_DWORD)v18)
    {
      v61 = 0;
      v62 = v58;
      do
      {
        *((_QWORD *)v57 + v62) = *(_QWORD *)(v60 + 8 * v61++);
        v62 += v21;
      }
      while (v61 < v18);
    }
    *((_QWORD *)v71 + v58++) = *(_QWORD *)(v60 + 8 * v18);
  }
  while (v58 != v21);
  sub_1D53AA624((uint64_t)v57, v18, v21, v71, __p);
  MEMORY[0x1D8271AC4](v71, 0x1000C8000313F17);
  MEMORY[0x1D8271AC4](v57, 0x1000C8000313F17);
  v63 = (double *)__p;
  if (a5)
    *((double *)__p + v72) = *((double *)__p + v72) / v66;
  if (a6)
    v63[v73] = v63[v73] / (v66 * v66);
  v74 = 0;
  v75 = 0;
  v76 = 0;
  sub_1D5282C70(&v74, v63, (uint64_t)v82, (v82 - (_BYTE *)v63) >> 3);
  sub_1D52E3EA4(a2, a3, a4, a5, a6, a7, (double **)&v74, a9);
  if (v74)
  {
    v75 = v74;
    operator delete(v74);
  }
  *a8 = sub_1D53AA784(a1, a9);
  nullsub_1(*a9);
  if (__p)
  {
    v82 = __p;
    operator delete(__p);
  }
LABEL_68:
  __p = v83;
  sub_1D5304DA8((void ***)&__p);
}

void sub_1D53AA4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  uint64_t v35;

  if (__p)
    operator delete(__p);
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  a34 = (void *)(v35 - 176);
  sub_1D5304DA8((void ***)&a34);
  _Unwind_Resume(a1);
}

double sub_1D53AA5E8(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 32);
  if (*(_QWORD **)(a1 + 40) == v1)
    sub_1D528EAE0();
  return (double)(unint64_t)((uint64_t)(v1[1] - *v1) >> 3) * 0.0000000018;
}

void *sub_1D53AA624(uint64_t a1, int a2, uint64_t a3, const void *a4, void *a5)
{
  uint64_t v7;

  v7 = dgels_NEWLAPACK();
  MEMORY[0x1E0C80A78](v7);
  dgels_NEWLAPACK();
  return memcpy(a5, a4, 8 * a2);
}

double sub_1D53AA784(uint64_t *a1, double ***a2)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t i;
  unint64_t v6;
  float v7;
  float v8;
  double v9;
  void **v11[3];
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void ***v15;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  memset(v11, 0, sizeof(v11));
  sub_1D53AA8C0(a1, a2, (uint64_t *)&v12, (uint64_t *)v11);
  if (v13 == v12)
    sub_1D528EAE0();
  v2 = v12[1] - *v12;
  if ((v2 >> 3))
  {
    v3 = 0;
    v4 = 0.0;
    do
    {
      for (i = 0; i != 4; ++i)
      {
        v6 = v3 + (i >> 1);
        v7 = *(double *)(v12[3 * (((int)i + 1) & 1)] + 8 * v6);
        v8 = *((double *)v11[0][3 * (i & 1)] + v6);
        v4 = v4 + (float)(v7 - v8) * (float)(v7 - v8);
      }
      v3 += 2;
    }
    while (v3 < (v2 >> 3));
  }
  else
  {
    v4 = 0.0;
  }
  v9 = v4 / (double)(v2 >> 3);
  v15 = v11;
  sub_1D5304DA8((void ***)&v15);
  v11[0] = (void **)&v12;
  sub_1D5304DA8(v11);
  return v9;
}

void sub_1D53AA890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 - 40) = &a10;
  sub_1D5304DA8((void ***)(v13 - 40));
  a10 = (void **)&a13;
  sub_1D5304DA8(&a10);
  _Unwind_Resume(a1);
}

void sub_1D53AA8C0(uint64_t *a1, double ***a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v8;
  double **v9;
  double *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  unint64_t v15;
  double *v16;
  unint64_t v17;
  float v18;
  unint64_t v19;
  unint64_t v20;
  double *v21;
  double **v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;

  if (a1 + 4 != a3)
    sub_1D53AB080((uint64_t)a3, a1[4], a1[5], 0xAAAAAAAAAAAAAAABLL * ((a1[5] - a1[4]) >> 3));
  if (a1 + 10 != a4)
    sub_1D53AB080((uint64_t)a4, a1[10], a1[11], 0xAAAAAAAAAAAAAAABLL * ((a1[11] - a1[10]) >> 3));
  v8 = (_QWORD *)*a3;
  if (a3[1] == *a3)
    sub_1D528EAE0();
  v9 = *a2;
  v10 = **a2;
  v11 = 0.0;
  v12 = 0.0;
  v13 = 0.0;
  v14 = 0.0;
  v15 = (char *)(*a2)[1] - (char *)v10;
  if (v15)
  {
    v13 = *v10;
    if (v15 >= 9)
    {
      v12 = v10[1];
      if (v15 >= 0x11)
        v14 = v10[2];
    }
  }
  v16 = v9[6];
  v17 = (char *)v9[7] - (char *)v16;
  if (v17)
  {
    v18 = *v16;
    if (v17 >= 9)
      v11 = v16[1];
  }
  else
  {
    v18 = 0.0;
  }
  v19 = ((v8[1] - *v8) >> 3);
  if (((v8[1] - *v8) >> 3))
  {
    v20 = 0;
    v22 = v9 + 3;
    v21 = v9[3];
    v23 = (char *)v22[1] - (char *)v21;
    v24 = *a4;
    do
    {
      v25 = 0;
      do
      {
        v26 = v25 + 1;
        v27 = v20 + (v25 >> 1);
        v28 = v8[3 * (((int)v25 + 1) & 1)];
        v29 = *(double *)(v28 + 8 * v27);
        v30 = *(_QWORD *)(v24 + 24 * (v25 & 1));
        v31 = *(double *)(v30 + 8 * v27);
        if (v29 <= 2000.0 && v31 <= 2000.0)
        {
          if (v23 == 32)
          {
            v33 = v21[v25];
            v34 = v29 + (float)((float)((float)((float)(v29 * v29) * -0.0000015625) + 1.0) * (float)(v33 * 0.5));
            if (v29 <= 800.0)
              v29 = v34;
          }
          v35 = (float)((float)(v11 * (float)v27) * (float)v27) + (float)(v18 * (float)v27);
          if (v29 <= 2000.0)
            v29 = v29
                + (float)((float)((float)((float)(v29 * v29) * -0.00000025) + 1.0)
                        * (float)((float)(v35
                                        + (float)((float)(v13 + (float)(v12 * v29)) + (float)((float)(v14 * v29) * v29)))
                                * 0.5));
          if (v23 == 32)
          {
            v36 = v21[v25];
            v37 = v31 + (float)((float)((float)((float)(v31 * v31) * -0.0000015625) + 1.0) * (float)(v36 * -0.5));
            if (v31 <= 800.0)
              v31 = v37;
          }
          v38 = v31
              + (float)((float)((float)((float)(v31 * v31) * -0.00000025) + 1.0)
                      * (float)((float)(v35
                                      + (float)((float)(v13 + (float)(v12 * v31)) + (float)((float)(v14 * v31) * v31)))
                              * -0.5));
          if (v31 <= 2000.0)
            v31 = v38;
          *(double *)(v28 + 8 * v27) = v29;
          *(double *)(v30 + 8 * v27) = v31;
        }
        ++v25;
      }
      while (v26 != 4);
      v20 += 2;
    }
    while (v20 < v19);
  }
}

void sub_1D53AAB58(uint64_t a1)
{
  sub_1D53AB454(a1);
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D53AAB7C(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D5304C28(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      sub_1D5287CCC(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 1);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1D53AAC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1D5304DA8(&a9);
  _Unwind_Resume(a1);
}

void sub_1D53AAC34(uint64_t *a1)
{
  if (*a1)
  {
    sub_1D5304DE8(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *sub_1D53AAC6C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1D5304C28(result, a4);
    result = sub_1D53AACF0((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1D53AACD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1D5304DA8(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53AACF0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_1D5287CCC(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 1);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_1D53AADA0((uint64_t)v8);
  return v4;
}

void sub_1D53AAD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D53AADA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53AADA0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D5304D5C(a1);
  return a1;
}

void sub_1D53AADD4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_1D53AAC34((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_1D5304C28((_QWORD *)a1, v11);
    v12 = sub_1D53AACF0(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    sub_1D53AAF5C((int)&v20, a2, v13, v9);
    v12 = sub_1D53AACF0(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_1D53AAF5C((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1D53AAF4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1D53AAF54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1D53AAF5C(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        sub_1D52B1D94(a4, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 1);
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *sub_1D53AAFC8(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D5304C28(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      sub_1D5282C70(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1D53AB060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1D5304DA8(&a9);
  _Unwind_Resume(a1);
}

void sub_1D53AB080(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_1D53AAC34((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_1D5304C28((_QWORD *)a1, v11);
    v12 = sub_1D53AB208(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    sub_1D53AB2EC((int)&v20, a2, v13, v9);
    v12 = sub_1D53AB208(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_1D53AB2EC((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1D53AB1F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1D53AB200(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53AB208(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_1D5282C70(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_1D53AB2B8((uint64_t)v8);
  return v4;
}

void sub_1D53AB2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D53AB2B8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53AB2B8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D5304D5C(a1);
  return a1;
}

uint64_t sub_1D53AB2EC(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        sub_1D528FA34(a4, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *sub_1D53AB358@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xA8uLL);
  result = sub_1D53AB3B0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D53AB39C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53AB3B0(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E99932A0;
  a1[1] = 0;
  sub_1D53A89A0((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1D53AB3E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53AB3FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99932A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53AB410(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99932A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53AB444(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D53AB454(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = &unk_1E9993270;
  v2 = a1 + 8;
  sub_1D5282EB4(a1 + 128);
  v4 = (void **)(a1 + 104);
  sub_1D5304DA8(&v4);
  v4 = (void **)(a1 + 80);
  sub_1D5304DA8(&v4);
  v4 = (void **)(a1 + 56);
  sub_1D5304DA8(&v4);
  v4 = (void **)(a1 + 32);
  sub_1D5304DA8(&v4);
  sub_1D5282EB4(v2);
  return a1;
}

_QWORD *sub_1D53AB4E0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  v4 = a1;
  return sub_1D53AB8F4(&v4, a2, a3);
}

double sub_1D53AB50C(uint64_t a1)
{
  double v1;
  double *v2;
  double v3;
  double v4;
  double *v6;
  double *v7;

  (*(void (**)(double **__return_ptr))(*(_QWORD *)a1 + 8))(&v6);
  v1 = -1.0;
  if (v6 != v7)
  {
    v2 = v6;
    do
    {
      v3 = *v2++;
      v4 = v3;
      if (v3 > v1)
        v1 = v4;
    }
    while (v2 != v7);
  }
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
  return v1;
}

_QWORD *sub_1D53AB574@<X0>(uint64_t a1@<X1>, unsigned int a2@<W2>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;

  v8 = a2;
  result = sub_1D528EB68(a3, a2);
  if (a2)
  {
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *a3;
    v13 = (a3[1] - *a3) >> 3;
    do
    {
      v14 = v11 + 16 * v10;
      v15 = *(unsigned int *)(v14 + 4);
      if ((_DWORD)v15)
      {
        v16 = 0;
        v17 = *(double **)(v14 + 8);
        while (*v17 <= a4)
        {
          ++v16;
          v17 += 3;
          if (v15 == v16)
          {
            LODWORD(v16) = v15;
            break;
          }
        }
      }
      else
      {
        LODWORD(v16) = 0;
      }
      if (v13 <= v10)
        sub_1D528EAE0();
      v18 = *(_QWORD *)(v11 + 16 * v10 + 8) + 24 * (v16 - ((_DWORD)v16 == (_DWORD)v15));
      *(double *)(v12 + 8 * v10++) = *(double *)(v18 + 8) + *(double *)(v18 + 16) * a4;
    }
    while (v10 != v8);
  }
  return result;
}

void sub_1D53AB658(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D53AB674(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  unint64_t v4;
  double v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  double *v19;
  double *v20;
  double *v21;
  double *v22;
  double v23;
  void *exception;
  void *__p;
  _BYTE *v26;
  void *v27;
  double *v28;

  v5 = a4;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(unsigned int *)(v7 + 4);
  if (!(_DWORD)v8)
    goto LABEL_10;
  v11 = 0;
  v12 = *(unsigned int **)(v7 + 8);
  while (*v12 < a2)
  {
    ++v11;
    v12 += 4;
    if (v8 == v11)
    {
      LODWORD(v11) = *(_DWORD *)(v7 + 4);
      goto LABEL_7;
    }
  }
  if (*v12 == a2)
    goto LABEL_11;
LABEL_7:
  if (!(_DWORD)v11)
  {
LABEL_10:
    v12 = *(unsigned int **)(v7 + 8);
    goto LABEL_11;
  }
  if ((_DWORD)v11 == (_DWORD)v8)
  {
    v12 = (unsigned int *)(*(_QWORD *)(v7 + 8) + 16 * (v8 - 1));
LABEL_11:
    sub_1D53AB574((uint64_t)v12, *(_DWORD *)v7, a3, a4);
    return;
  }
  v13 = (v11 - 1);
  sub_1D53AB574(*(_QWORD *)(v7 + 8) + 16 * v13, *(_DWORD *)v7, (uint64_t *)&v27, a4);
  sub_1D53AB574(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 16 * v11, **(_DWORD **)(a1 + 24), (uint64_t *)&__p, v5);
  v14 = v27;
  v15 = (uint64_t)v28;
  v16 = ((char *)v28 - (_BYTE *)v27) >> 3;
  if (v16 != (v26 - (_BYTE *)__p) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  LODWORD(v4) = *(_DWORD *)(v17 + 16 * v13);
  LODWORD(v5) = *(_DWORD *)(v17 + 16 * v11);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_1D5282C70(a3, v14, v15, v16);
  v18 = __p;
  v19 = (double *)v27;
  v20 = v28;
  if (v27 != v28)
  {
    v21 = (double *)v27;
    v22 = (double *)__p;
    do
    {
      v23 = *v22++;
      *v21 = *v21 + (*v21 + v23) * (((double)a2 - (double)v4) / ((double)*(unint64_t *)&v5 - (double)v4));
      ++v21;
    }
    while (v21 != v20);
  }
  if (v18)
  {
    v26 = v18;
    operator delete(v18);
    v19 = (double *)v27;
  }
  if (v19)
  {
    v28 = v19;
    operator delete(v19);
  }
}

void sub_1D53AB868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_1D53AB8B0(_QWORD *a1)
{
  *a1 = off_1E9986FB8;
  sub_1D5282EB4((uint64_t)(a1 + 1));
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D53AB8F4@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x38uLL);
  result = sub_1D53AB954(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1D53AB940(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53AB954(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E9993338;
  sub_1D53AB9FC(a1 + 3, *a2, a3);
  return a1;
}

void sub_1D53AB990(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53AB9A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9993338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53AB9B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9993338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53AB9EC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

_QWORD *sub_1D53AB9FC(_QWORD *result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *exception;

  *result = off_1E9986FB8;
  v3 = a3[1];
  result[1] = *a3;
  result[2] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *result = off_1E99932F0;
  result[3] = a2;
  if (!a2 || !*(_DWORD *)(a2 + 4))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D53ABAD0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  __cxa_free_exception(v3);
  *v1 = v4 + 16;
  sub_1D5282EB4(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53ABB00@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  v4 = a1;
  return sub_1D53AC524(&v4, a2, a3);
}

void sub_1D53ABB2C(uint64_t a1, unsigned int a2, float *a3, _BYTE *a4)
{
  uint64_t v4;
  double *v8;
  double *v9;
  float *v10;
  double *v11;
  double v12;
  float v13;
  double *v14;
  double *v15;
  float *v16;
  double *v17;
  double v18;
  float v19;
  double *v20;
  double *v21;
  float *v22;
  double *v23;
  double v24;
  float v25;
  double *v26;
  double *v27;
  float *v28;
  double *v29;
  double v30;
  float v31;
  double *v32;
  double *v33;
  double *v34;
  double *v35;

  *((_OWORD *)a3 + 2) = 0u;
  *((_OWORD *)a3 + 3) = 0u;
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    *a4 = *(_BYTE *)(v4 + 8);
    sub_1D53ABC9C(a1, a2, &v34);
    v9 = v34;
    v8 = v35;
    if (v34 != v35)
    {
      v10 = a3;
      v11 = v34;
      do
      {
        v12 = *v11++;
        v13 = v12;
        *v10 = v13;
        v10 += 4;
      }
      while (v11 != v8);
    }
    sub_1D53ABF18(a1, a2, &v32);
    if (v9)
      operator delete(v9);
    v15 = v32;
    v14 = v33;
    if (v32 != v33)
    {
      v16 = a3 + 1;
      v17 = v32;
      do
      {
        v18 = *v17++;
        v19 = v18;
        *v16 = v19;
        v16 += 4;
      }
      while (v17 != v14);
    }
    sub_1D53AC19C(a1, a2, &v32);
    if (v15)
      operator delete(v15);
    v21 = v32;
    v20 = v33;
    if (v32 != v33)
    {
      v22 = a3 + 2;
      v23 = v32;
      do
      {
        v24 = *v23++;
        v25 = v24;
        *v22 = v25;
        v22 += 4;
      }
      while (v23 != v20);
    }
    sub_1D53AC420(a1, (uint64_t *)&v32);
    if (v21)
      operator delete(v21);
    v26 = v32;
    v27 = v33;
    if (v32 != v33)
    {
      v28 = a3 + 3;
      v29 = v32;
      do
      {
        v30 = *v29++;
        v31 = v30;
        *v28 = v31;
        v28 += 4;
      }
      while (v29 != v27);
    }
    if (v26)
      operator delete(v26);
  }
}

void sub_1D53ABC7C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_1D53ABC9C(uint64_t a1@<X0>, unsigned int a2@<W1>, double **a3@<X8>)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  double *v25;
  double *v26;
  double v27;
  double *v28;
  double v29;
  void *exception;
  double *v31;
  uint64_t v32;
  void *__p;
  double *v34;
  double *v35;

  sub_1D528EB68(&__p, **(unsigned int **)(a1 + 8));
  v6 = *(unsigned int **)(a1 + 8);
  v7 = (unsigned int *)*((_QWORD *)v6 + 3);
  v8 = v6[1];
  if (!v8)
    goto LABEL_14;
  v9 = 0;
  v10 = (uint64_t)&v7[4 * v8];
  while (*v7 < a2)
  {
    ++v9;
    v7 += 4;
    if (v8 == v9)
    {
      v7 = (unsigned int *)v10;
      goto LABEL_9;
    }
  }
  if (!v9 || *v7 == a2)
  {
LABEL_14:
    v18 = *v6;
    v12 = (double *)__p;
    v13 = v34;
    if ((_DWORD)v18)
    {
      v19 = 0;
      v20 = ((char *)v34 - (_BYTE *)__p) >> 3;
      v21 = 24 * v18;
      v22 = __p;
      while (v20)
      {
        *v22++ = *(_QWORD *)(*((_QWORD *)v7 + 1) + v19);
        --v20;
        v19 += 24;
        if (v21 == v19)
          goto LABEL_18;
      }
LABEL_29:
      sub_1D528EAE0();
    }
    goto LABEL_18;
  }
  if (v8 == v9)
  {
LABEL_9:
    v11 = *v6;
    v12 = (double *)__p;
    v13 = v34;
    if ((_DWORD)v11)
    {
      v14 = 0;
      v15 = ((char *)v34 - (_BYTE *)__p) >> 3;
      v16 = 24 * v11;
      v17 = __p;
      while (v15)
      {
        *v17++ = *(_QWORD *)(*((_QWORD *)v7 - 1) + v14);
        --v15;
        v14 += 24;
        if (v16 == v14)
          goto LABEL_18;
      }
      goto LABEL_29;
    }
LABEL_18:
    *a3 = v12;
    a3[1] = v13;
    a3[2] = v35;
    return;
  }
  sub_1D53ABC9C(a1, *(v7 - 4));
  sub_1D53ABC9C(a1, *v7);
  v26 = *a3;
  v25 = a3[1];
  if ((char *)v25 - (char *)*a3 != v32 - (_QWORD)v31)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v26 != v25)
  {
    LODWORD(v23) = *(v7 - 4);
    LODWORD(v24) = *v7;
    v27 = ((double)a2 - (double)v23) / ((double)v24 - (double)v23);
    v28 = v31;
    do
    {
      v29 = *v28++;
      *v26 = *v26 + (v29 - *v26) * v27;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v31)
    operator delete(v31);
  if (__p)
  {
    v34 = (double *)__p;
    operator delete(__p);
  }
}

void sub_1D53ABEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  uint64_t v15;
  void *__pa;

  __pa = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = __pa;
    operator delete(__pa);
  }
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1D53ABF18(uint64_t a1@<X0>, unsigned int a2@<W1>, double **a3@<X8>)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  double *v25;
  double *v26;
  double v27;
  double *v28;
  double v29;
  void *exception;
  double *v31;
  uint64_t v32;
  void *__p;
  double *v34;
  double *v35;

  sub_1D528EB68(&__p, **(unsigned int **)(a1 + 8));
  v6 = *(unsigned int **)(a1 + 8);
  v7 = (unsigned int *)*((_QWORD *)v6 + 3);
  v8 = v6[1];
  if (!v8)
    goto LABEL_14;
  v9 = 0;
  v10 = (uint64_t)&v7[4 * v8];
  while (*v7 < a2)
  {
    ++v9;
    v7 += 4;
    if (v8 == v9)
    {
      v7 = (unsigned int *)v10;
      goto LABEL_9;
    }
  }
  if (!v9 || *v7 == a2)
  {
LABEL_14:
    v18 = *v6;
    v12 = (double *)__p;
    v13 = v34;
    if ((_DWORD)v18)
    {
      v19 = 0;
      v20 = ((char *)v34 - (_BYTE *)__p) >> 3;
      v21 = 24 * v18;
      v22 = __p;
      while (v20)
      {
        *v22++ = *(_QWORD *)(*((_QWORD *)v7 + 1) + v19 + 8);
        --v20;
        v19 += 24;
        if (v21 == v19)
          goto LABEL_18;
      }
LABEL_29:
      sub_1D528EAE0();
    }
    goto LABEL_18;
  }
  if (v8 == v9)
  {
LABEL_9:
    v11 = *v6;
    v12 = (double *)__p;
    v13 = v34;
    if ((_DWORD)v11)
    {
      v14 = 0;
      v15 = ((char *)v34 - (_BYTE *)__p) >> 3;
      v16 = 24 * v11;
      v17 = __p;
      while (v15)
      {
        *v17++ = *(_QWORD *)(*((_QWORD *)v7 - 1) + v14 + 8);
        --v15;
        v14 += 24;
        if (v16 == v14)
          goto LABEL_18;
      }
      goto LABEL_29;
    }
LABEL_18:
    *a3 = v12;
    a3[1] = v13;
    a3[2] = v35;
    return;
  }
  sub_1D53ABF18(a1, *(v7 - 4));
  sub_1D53ABF18(a1, *v7);
  v26 = *a3;
  v25 = a3[1];
  if ((char *)v25 - (char *)*a3 != v32 - (_QWORD)v31)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v26 != v25)
  {
    LODWORD(v23) = *(v7 - 4);
    LODWORD(v24) = *v7;
    v27 = ((double)a2 - (double)v23) / ((double)v24 - (double)v23);
    v28 = v31;
    do
    {
      v29 = *v28++;
      *v26 = *v26 + (v29 - *v26) * v27;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v31)
    operator delete(v31);
  if (__p)
  {
    v34 = (double *)__p;
    operator delete(__p);
  }
}

void sub_1D53AC138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  uint64_t v15;
  void *__pa;

  __pa = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = __pa;
    operator delete(__pa);
  }
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1D53AC19C(uint64_t a1@<X0>, unsigned int a2@<W1>, double **a3@<X8>)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  double *v25;
  double *v26;
  double v27;
  double *v28;
  double v29;
  void *exception;
  double *v31;
  uint64_t v32;
  void *__p;
  double *v34;
  double *v35;

  sub_1D528EB68(&__p, **(unsigned int **)(a1 + 8));
  v6 = *(unsigned int **)(a1 + 8);
  v7 = (unsigned int *)*((_QWORD *)v6 + 3);
  v8 = v6[1];
  if (!v8)
    goto LABEL_14;
  v9 = 0;
  v10 = (uint64_t)&v7[4 * v8];
  while (*v7 < a2)
  {
    ++v9;
    v7 += 4;
    if (v8 == v9)
    {
      v7 = (unsigned int *)v10;
      goto LABEL_9;
    }
  }
  if (!v9 || *v7 == a2)
  {
LABEL_14:
    v18 = *v6;
    v12 = (double *)__p;
    v13 = v34;
    if ((_DWORD)v18)
    {
      v19 = 0;
      v20 = ((char *)v34 - (_BYTE *)__p) >> 3;
      v21 = 24 * v18;
      v22 = __p;
      while (v20)
      {
        *v22++ = *(_QWORD *)(*((_QWORD *)v7 + 1) + v19 + 16);
        --v20;
        v19 += 24;
        if (v21 == v19)
          goto LABEL_18;
      }
LABEL_29:
      sub_1D528EAE0();
    }
    goto LABEL_18;
  }
  if (v8 == v9)
  {
LABEL_9:
    v11 = *v6;
    v12 = (double *)__p;
    v13 = v34;
    if ((_DWORD)v11)
    {
      v14 = 0;
      v15 = ((char *)v34 - (_BYTE *)__p) >> 3;
      v16 = 24 * v11;
      v17 = __p;
      while (v15)
      {
        *v17++ = *(_QWORD *)(*((_QWORD *)v7 - 1) + v14 + 16);
        --v15;
        v14 += 24;
        if (v16 == v14)
          goto LABEL_18;
      }
      goto LABEL_29;
    }
LABEL_18:
    *a3 = v12;
    a3[1] = v13;
    a3[2] = v35;
    return;
  }
  sub_1D53AC19C(a1, *(v7 - 4));
  sub_1D53AC19C(a1, *v7);
  v26 = *a3;
  v25 = a3[1];
  if ((char *)v25 - (char *)*a3 != v32 - (_QWORD)v31)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v26 != v25)
  {
    LODWORD(v23) = *(v7 - 4);
    LODWORD(v24) = *v7;
    v27 = ((double)a2 - (double)v23) / ((double)v24 - (double)v23);
    v28 = v31;
    do
    {
      v29 = *v28++;
      *v26 = *v26 + (v29 - *v26) * v27;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v31)
    operator delete(v31);
  if (__p)
  {
    v34 = (double *)__p;
    operator delete(__p);
  }
}

void sub_1D53AC3BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  uint64_t v15;
  void *__pa;

  __pa = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = __pa;
    operator delete(__pa);
  }
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

double sub_1D53AC420@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double result;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1D528EB68(a2, **(unsigned int **)(a1 + 8));
  v5 = *(unsigned int **)(a1 + 8);
  v6 = *v5;
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = *a2;
    v9 = (a2[1] - *a2) >> 3;
    do
    {
      if (v9 == v7)
        sub_1D528EAE0();
      result = *(double *)(*((_QWORD *)v5 + 2) + 8 * v7);
      *(double *)(v8 + 8 * v7++) = result;
    }
    while (v6 != v7);
  }
  return result;
}

void sub_1D53AC498(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D53AC4B4(_QWORD *a1)
{
  *a1 = off_1E9993388;
  sub_1D5282EB4((uint64_t)(a1 + 2));
  return a1;
}

void sub_1D53AC4E4(_QWORD *a1)
{
  *a1 = off_1E9993388;
  sub_1D5282EB4((uint64_t)(a1 + 2));
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D53AC524@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  result = operator new(0x38uLL);
  result[2] = 0;
  *result = &unk_1E99933C0;
  result[1] = 0;
  result[3] = off_1E9993388;
  v8 = *a2;
  v7 = a2[1];
  result[4] = *a1;
  result[5] = v8;
  result[6] = v7;
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *a3 = result + 3;
  a3[1] = result;
  return result;
}

void sub_1D53AC5A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99933C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53AC5BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99933C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53AC5F0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

_QWORD *sub_1D53AC600@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  v4 = a1;
  return sub_1D53AC9F8(&v4, a2, a3);
}

_QWORD *sub_1D53AC62C@<X0>(uint64_t a1@<X1>, unsigned int a2@<W2>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;

  v8 = a2;
  result = sub_1D528EB68(a3, a2);
  if (a2)
  {
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *a3;
    v13 = (a3[1] - *a3) >> 3;
    do
    {
      v14 = v11 + 16 * v10;
      v15 = *(unsigned int *)(v14 + 4);
      if ((_DWORD)v15)
      {
        v16 = 0;
        v17 = *(double **)(v14 + 8);
        while (*v17 <= a4)
        {
          ++v16;
          v17 += 3;
          if (v15 == v16)
          {
            LODWORD(v16) = v15;
            break;
          }
        }
      }
      else
      {
        LODWORD(v16) = 0;
      }
      if (v13 <= v10)
        sub_1D528EAE0();
      *(double *)(v12 + 8 * v10) = *(double *)(*(_QWORD *)(v11 + 16 * v10 + 8)
                                             + 24 * (v16 - ((_DWORD)v16 == (_DWORD)v15))
                                             + 8)
                                 + *(double *)(*(_QWORD *)(v11 + 16 * v10 + 8)
                                             + 24 * (v16 - ((_DWORD)v16 == (_DWORD)v15))
                                             + 16)
                                 * fmin(a4, *(double *)(*(_QWORD *)(v11 + 16 * v10 + 8) + 24 * (v15 - 1)));
      ++v10;
    }
    while (v10 != v8);
  }
  return result;
}

void sub_1D53AC720(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D53AC73C(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  unint64_t v4;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  double *v19;
  double *v20;
  double *v21;
  double *v22;
  double v23;
  void *exception;
  void *__p;
  _BYTE *v26;
  void *v27;
  double *v28;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = a4;
    v8 = *(unsigned int *)(v6 + 4);
    if (!(_DWORD)v8)
      goto LABEL_11;
    v11 = 0;
    v12 = *(unsigned int **)(v6 + 8);
    while (*v12 < a2)
    {
      ++v11;
      v12 += 4;
      if (v8 == v11)
      {
        LODWORD(v11) = *(_DWORD *)(v6 + 4);
        goto LABEL_8;
      }
    }
    if (*v12 == a2)
      goto LABEL_12;
LABEL_8:
    if (!(_DWORD)v11)
    {
LABEL_11:
      v12 = *(unsigned int **)(v6 + 8);
      goto LABEL_12;
    }
    if ((_DWORD)v11 == (_DWORD)v8)
    {
      v12 = (unsigned int *)(*(_QWORD *)(v6 + 8) + 16 * (v8 - 1));
LABEL_12:
      sub_1D53AC62C((uint64_t)v12, *(_DWORD *)v6, a3, a4);
      return;
    }
    v13 = (v11 - 1);
    sub_1D53AC62C(*(_QWORD *)(v6 + 8) + 16 * v13, *(_DWORD *)v6, (uint64_t *)&v27, a4);
    sub_1D53AC62C(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 16 * v11, **(_DWORD **)(a1 + 8), (uint64_t *)&__p, v7);
    v14 = v27;
    v15 = (uint64_t)v28;
    v16 = ((char *)v28 - (_BYTE *)v27) >> 3;
    if (v16 != (v26 - (_BYTE *)__p) >> 3)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    LODWORD(v4) = *(_DWORD *)(v17 + 16 * v13);
    LODWORD(v7) = *(_DWORD *)(v17 + 16 * v11);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    sub_1D5282C70(a3, v14, v15, v16);
    v18 = __p;
    v19 = (double *)v27;
    v20 = v28;
    if (v27 != v28)
    {
      v21 = (double *)v27;
      v22 = (double *)__p;
      do
      {
        v23 = *v22++;
        *v21 = *v21 + (*v21 + v23) * (((double)a2 - (double)v4) / ((double)*(unint64_t *)&v7 - (double)v4));
        ++v21;
      }
      while (v21 != v20);
    }
    if (v18)
    {
      v26 = v18;
      operator delete(v18);
      v19 = (double *)v27;
    }
    if (v19)
    {
      v28 = v19;
      operator delete(v19);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_1D53AC940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D53AC988(_QWORD *a1)
{
  *a1 = off_1E9993410;
  sub_1D5282EB4((uint64_t)(a1 + 2));
  return a1;
}

void sub_1D53AC9B8(_QWORD *a1)
{
  *a1 = off_1E9993410;
  sub_1D5282EB4((uint64_t)(a1 + 2));
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D53AC9F8@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  result = operator new(0x38uLL);
  result[2] = 0;
  *result = &unk_1E9993448;
  result[1] = 0;
  result[3] = off_1E9993410;
  v8 = *a2;
  v7 = a2[1];
  result[4] = *a1;
  result[5] = v8;
  result[6] = v7;
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *a3 = result + 3;
  a3[1] = result;
  return result;
}

void sub_1D53ACA7C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9993448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53ACA90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9993448;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53ACAC4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

uint64_t sub_1D53ACAD4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  void *exception;

  *(_QWORD *)a1 = &unk_1E9993498;
  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  v8 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v6 = *v8;
  }
  *(_QWORD *)(a1 + 24) = 0x80000000800;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 520))(v6);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 32) = v11;
  v13 = *(_DWORD *)(a1 + 24);
  v12 = *(_DWORD *)(a1 + 28);
  v14 = (v13 + (int)v11 - 1) / v13;
  v15 = (HIDWORD(v11) + v12 - 1) / v12;
  *(_DWORD *)(a1 + 40) = v14;
  *(_DWORD *)(a1 + 44) = v15;
  v16 = (v15 * v14);
  *(_DWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 76) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = *a3;
  if ((v13 - 10000) < 0xFFFFD8F1
    || (v12 - 10000) <= 0xFFFFD8F0
    || (v11 - 100000) < 0xFFFE7961
    || (HIDWORD(v11) - 100000) < 0xFFFE7961)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D53ACCEC(a1 + 56, v16);
  return a1;
}

void sub_1D53ACC90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1);
  _Unwind_Resume(a1);
}

void sub_1D53ACCEC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    sub_1D53AD944((void **)a1, a2 - v2);
  }
}

_QWORD *sub_1D53ACD1C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_1D53ADBD4(a1, a2, a3);
}

void sub_1D53ACD44(uint64_t a1, uint64_t *a2)
{
  int v4;
  _QWORD *i;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  void *__p;
  void *v16;
  uint64_t v17;
  __int128 v18;
  void *v19;
  _BYTE *v20;

  v4 = sub_1D53A63F0();
  sub_1D53ACF0C(a1, v4);
  v18 = *(_OWORD *)(*a2 + 48);
  sub_1D53ACF7C(a1, (int *)&v18, (char *)&v19);
  v16 = 0;
  v17 = 0;
  __p = 0;
  sub_1D5287D44(&__p, v19, (uint64_t)v20, (v20 - (_BYTE *)v19) >> 2);
  sub_1D53AD34C((uint64_t *)a1, (unsigned int **)&__p, (uint64_t)&v18);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  for (i = (_QWORD *)v18; i != *((_QWORD **)&v18 + 1); i += 2)
  {
    v6 = i[1];
    *(_QWORD *)&v14 = *i;
    *((_QWORD *)&v14 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    sub_1D53A6974(*a2, &v14);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v13 = *(char **)(a1 + 104);
  v12 = *(char **)(a1 + 112);
  if (*(_DWORD *)(a1 + 48) == (v12 - v13) >> 4)
  {
    while (v13 != v12)
    {
      if (!*(_QWORD *)v13)
        goto LABEL_19;
      v13 += 16;
    }
    sub_1D52972D4(*(_QWORD *)(a1 + 8));
  }
LABEL_19:
  *(_QWORD *)&v14 = &v18;
  sub_1D5282E44((void ***)&v14);
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
}

void sub_1D53ACEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;
  void *v17;

  a10 = &a15;
  sub_1D5282E44((void ***)&a10);
  v17 = *(void **)(v15 - 56);
  if (v17)
  {
    *(_QWORD *)(v15 - 48) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D53ACF0C(uint64_t result, int a2)
{
  int v2;
  void *exception;

  v2 = *(_DWORD *)(result + 52);
  if (v2 != a2 && v2 != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  *(_DWORD *)(result + 52) = a2;
  return result;
}

void sub_1D53ACF68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D53ACF7C(uint64_t a1@<X0>, int *a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  int v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unsigned int *v30;
  _DWORD *v31;
  unsigned int *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  unsigned int *v38;
  unsigned int v39;
  char *v40;
  void *exception;
  void *v42;
  char v43;
  unint64_t *v44;
  uint64_t v45;
  unint64_t v46;

  v6 = *a2;
  v7 = a2[1];
  v8 = v6 >= 0x8000 || v7 >= 0x8000;
  v9 = a2[2];
  v10 = a2[3];
  v13 = !v8 && v9 < 0x8000 && v10 < 0x8000;
  v14 = (v7 << 32) + (v6 << 48) + (v9 << 16) + v10;
  v46 = v14;
  if (v13 != 1)
    goto LABEL_25;
  v15 = *(_QWORD **)(a1 + 88);
  if (!v15)
    goto LABEL_25;
  v16 = a1 + 88;
  do
  {
    v17 = v15[4];
    v18 = v17 >= v14;
    if (v17 >= v14)
      v19 = v15;
    else
      v19 = v15 + 1;
    if (v18)
      v16 = (uint64_t)v15;
    v15 = (_QWORD *)*v19;
  }
  while (*v19);
  if (v16 != a1 + 88 && v14 >= *(_QWORD *)(v16 + 32))
  {
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    sub_1D5287D44(a3, *(const void **)(v16 + 40), *(_QWORD *)(v16 + 48), (uint64_t)(*(_QWORD *)(v16 + 48) - *(_QWORD *)(v16 + 40)) >> 2);
  }
  else
  {
LABEL_25:
    v44 = 0;
    v45 = *(_QWORD *)(a1 + 32);
    if (!sub_1D53ADD44(a2, (int *)&v44))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    v20 = *(_DWORD *)(a1 + 40);
    sub_1D52B1A40((void **)a3, *(unsigned int *)(a1 + 48));
    if (*(_DWORD *)(a1 + 44))
    {
      v21 = 0;
      v43 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      do
      {
        if (v23 >= v20)
        {
          v24 = v23;
        }
        else
        {
          while (1)
          {
            v25 = v23 + *(_DWORD *)(a1 + 40) * v21;
            v26 = (uint64_t *)sub_1D53AD6FC(a1, v25);
            v44 = (unint64_t *)v26;
            v45 = v27;
            if (a2[2] + *a2 <= (int)v26)
              break;
            v28 = a2[1];
            if (v28 >= HIDWORD(v27) + HIDWORD(v26))
              goto LABEL_60;
            if (a2[3] + v28 <= SHIDWORD(v26))
            {
              v21 = *(_DWORD *)(a1 + 44);
              goto LABEL_60;
            }
            if ((v22 & 1) != 0)
              v24 = v24;
            else
              v24 = v23;
            if (sub_1D53ADDB8((int *)&v44, a2))
            {
              v30 = (unsigned int *)*((_QWORD *)a3 + 1);
              v29 = *((_QWORD *)a3 + 2);
              if ((unint64_t)v30 >= v29)
              {
                v32 = *(unsigned int **)a3;
                v33 = ((uint64_t)v30 - *(_QWORD *)a3) >> 2;
                v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 62)
                  sub_1D5282B8C();
                v35 = v29 - (_QWORD)v32;
                if (v35 >> 1 > v34)
                  v34 = v35 >> 1;
                if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                  v36 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v36 = v34;
                if (v36)
                {
                  v37 = (char *)sub_1D5282BA0((uint64_t)(a3 + 16), v36);
                  v32 = *(unsigned int **)a3;
                  v30 = (unsigned int *)*((_QWORD *)a3 + 1);
                }
                else
                {
                  v37 = 0;
                }
                v38 = (unsigned int *)&v37[4 * v33];
                *v38 = v25;
                v31 = v38 + 1;
                while (v30 != v32)
                {
                  v39 = *--v30;
                  *--v38 = v39;
                }
                *(_QWORD *)a3 = v38;
                *((_QWORD *)a3 + 1) = v31;
                *((_QWORD *)a3 + 2) = &v37[4 * v36];
                if (v32)
                  operator delete(v32);
              }
              else
              {
                *v30 = v25;
                v31 = v30 + 1;
              }
              *((_QWORD *)a3 + 1) = v31;
            }
            LODWORD(v23) = v23 + 1;
            v22 = 1;
            if ((_DWORD)v23 == v20)
              goto LABEL_60;
          }
          if ((v43 & 1) == 0)
            v20 = v23;
          v43 = 1;
        }
LABEL_60:
        ++v21;
        v23 = v24;
      }
      while (v21 < *(_DWORD *)(a1 + 44));
    }
    if (*((_QWORD *)a3 + 1) == *(_QWORD *)a3)
    {
      v42 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v42, "RawCameraException");
      __cxa_throw(v42, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (v13 && *(_QWORD *)(a1 + 96) <= 0x3FFuLL)
    {
      v44 = &v46;
      v40 = (char *)(sub_1D532DC34((uint64_t **)(a1 + 80), &v46, (uint64_t)&unk_1D544A5C4, (uint64_t **)&v44) + 5);
      if (v40 != a3)
        sub_1D5282A44(v40, *(char **)a3, *((_QWORD *)a3 + 1), (uint64_t)(*((_QWORD *)a3 + 1) - *(_QWORD *)a3) >> 2);
    }
  }
}

void sub_1D53AD308(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D53AD34C(uint64_t *a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  char *v29[3];

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  memset(v29, 0, sizeof(v29));
  v5 = *a2;
  if (*a2 != a2[1])
  {
    v7 = a1 + 13;
    do
    {
      v8 = *v5;
      v9 = a1[13];
      v10 = (v8 + 1);
      if (v10 > (a1[14] - v9) >> 4)
      {
        v28 = 0uLL;
        sub_1D53AD588((uint64_t)(a1 + 13), v10, &v28);
        v11 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
        if (*((_QWORD *)&v28 + 1))
        {
          v12 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 = *v7;
      }
      v14 = *(_OWORD *)(v9 + 16 * v8);
      v28 = v14;
      if (*((_QWORD *)&v14 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      if (!(_QWORD)v14)
      {
        sub_1D53AD5F4((uint64_t)a1, v8, (uint64_t *)&v27);
        v17 = v27;
        v27 = 0uLL;
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
        v28 = v17;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
        if (*((_QWORD *)&v27 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        sub_1D52B0A7C(v29, &v28);
      }
      sub_1D52B0A7C((char **)a3, &v28);
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
      if (*((_QWORD *)&v28 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      ++v5;
    }
    while (v5 != a2[1]);
  }
  sub_1D53AD660(a1[1], (uint64_t)v29);
  *(_QWORD *)&v28 = v29;
  sub_1D5282E44((void ***)&v28);
}

void sub_1D53AD548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy((va_list)v4, va1);
  sub_1D5282E44((void ***)va);
  sub_1D5282E44((void ***)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53AD588(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)(a1 + 8);
  v5 = (result - *(_QWORD *)a1) >> 4;
  if (a2 > v5)
    return sub_1D53ADA50((char **)a1, a2 - v5, a3);
  if (a2 < v5)
  {
    v6 = *(_QWORD *)a1 + 16 * a2;
    while (result != v6)
      result = sub_1D5282EB4(result - 16);
    *(_QWORD *)(a1 + 8) = v6;
  }
  return result;
}

_QWORD *sub_1D53AD5F4@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  int v7;
  __int128 v9;

  *(_QWORD *)&v9 = sub_1D53AD6FC(a1, a2);
  *((_QWORD *)&v9 + 1) = v6;
  v7 = sub_1D53AD8B8(a1);
  sub_1D53A6C7C(&v9, v7, a3);
  *(_DWORD *)(*a3 + 48) = a2;
  return sub_1D52908C8((_QWORD *)(*(_QWORD *)(a1 + 104) + 16 * a2), a3);
}

uint64_t sub_1D53AD660(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (***v8)(_QWORD, uint64_t);
  std::__shared_weak_count *v9;

  (*(void (**)(uint64_t (****__return_ptr)(_QWORD, uint64_t)))(*(_QWORD *)a1 + 2720))(&v8);
  v3 = (**v8)(v8, a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_1D53AD6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53AD6FC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v6;
  uint64_t result;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  void *exception;
  unsigned int v28;
  unsigned int v29;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = a2;
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 64) - v2) >> 4))
    goto LABEL_29;
  v6 = (_DWORD *)(v2 + 16 * a2);
  if (v6[2] && v6[3])
    return *(_QWORD *)v6;
  v8 = *(_DWORD *)(a1 + 40);
  v9 = a2 / v8;
  v10 = a2 / v8 * v8;
  v11 = a2 % v8;
  if (a2 % v8 >= v8)
  {
LABEL_29:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    goto LABEL_32;
  }
  sub_1D5282DF0(&v28, *(_DWORD *)(a1 + 24) * v11, *(_DWORD *)(a1 + 28) * v9);
  v12 = v29;
  v13 = *(_DWORD *)(a1 + 24);
  v14 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 32);
  v16 = *(_DWORD *)(a1 + 36);
  if ((int)(v13 + v28) > v15)
    v13 = v15 - v28;
  if ((int)(v14 + v29) > v16)
    v14 = v16 - v29;
  v18 = *(_DWORD *)(a1 + 128);
  v17 = *(_DWORD *)(a1 + 132);
  if (v11 == v8 - 1)
    v19 = *(_DWORD *)(a1 + 128);
  else
    v19 = 0;
  v20 = v13 - v19;
  LODWORD(v21) = v18 + v13;
  if (a2 == v10)
    v22 = v28;
  else
    v22 = v18 + v28;
  if (a2 == v10)
    v21 = v21;
  else
    v21 = v20;
  if (v8 <= a2)
  {
    v12 = v17 + v29;
    if (v9 != *(_DWORD *)(a1 + 44) - 1)
      v17 = 0;
    v23 = (v14 - v17);
  }
  else
  {
    v23 = (v17 + v14);
  }
  if ((int)v21 < 1 || (int)v23 <= 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
LABEL_32:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v25 = v21 | (v23 << 32);
  v26 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v3);
  result = v22 | (v12 << 32);
  *v26 = result;
  v26[1] = v25;
  return result;
}

void sub_1D53AD89C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53AD8B8(uint64_t a1)
{
  uint64_t result;
  void *exception;

  result = *(unsigned int *)(a1 + 52);
  if (!(_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D53AD908(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D53AD920(uint64_t a1)
{
  sub_1D53ADCD8(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D53AD944(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      sub_1D5282B8C();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_1D5284334(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

uint64_t sub_1D53ADA50(char **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t result;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;
  int64x2_t v32;
  char *v33;
  uint64_t v34;

  v8 = a1[2];
  result = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(char **)(result - 8);
  if (a2 <= (v8 - v9) >> 4)
  {
    if (a2)
    {
      v16 = &v9[16 * a2];
      do
      {
        *(_QWORD *)v9 = *a3;
        v17 = a3[1];
        *((_QWORD *)v9 + 1) = v17;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v9 += 16;
      }
      while (v9 != v16);
      v9 = v16;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = v9 - *a1;
    v11 = a2 + (v10 >> 4);
    if (v11 >> 60)
      sub_1D5282B8C();
    v12 = v10 >> 4;
    v13 = v7 - *a1;
    if (v13 >> 3 > v11)
      v11 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    v34 = result;
    if (v14)
      v15 = (char *)sub_1D5284334(result, v14);
    else
      v15 = 0;
    v20 = &v15[16 * v12];
    v33 = &v15[16 * v14];
    v21 = &v20[16 * a2];
    v22 = v20;
    do
    {
      *(_QWORD *)v22 = *a3;
      v23 = a3[1];
      *((_QWORD *)v22 + 1) = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v22 += 16;
    }
    while (v22 != v21);
    v32.i64[1] = (uint64_t)&v20[16 * a2];
    v27 = *a1;
    v26 = a1[1];
    if (v26 == *a1)
    {
      v29 = vdupq_n_s64((unint64_t)v26);
    }
    else
    {
      do
      {
        v28 = *((_OWORD *)v26 - 1);
        v26 -= 16;
        *((_OWORD *)v20 - 1) = v28;
        v20 -= 16;
        *(_QWORD *)v26 = 0;
        *((_QWORD *)v26 + 1) = 0;
      }
      while (v26 != v27);
      v29 = *(int64x2_t *)a1;
      v21 = (char *)v32.i64[1];
    }
    *a1 = v20;
    a1[1] = v21;
    v32 = v29;
    v30 = a1[2];
    a1[2] = v33;
    v33 = v30;
    v31 = v29.i64[0];
    return sub_1D52B2024((uint64_t)&v31);
  }
  return result;
}

_QWORD *sub_1D53ADBD4@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0xA0uLL);
  result = sub_1D53ADC34(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1D53ADC20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53ADC34(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  a1[2] = 0;
  *a1 = &unk_1E99934C8;
  a1[1] = 0;
  sub_1D53ACAD4((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1D53ADC6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53ADC80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99934C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53ADC94(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99934C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53ADCC8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D53ADCD8(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &unk_1E9993498;
  v4 = (void **)(a1 + 104);
  sub_1D5282E44(&v4);
  sub_1D528EEB8(a1 + 80, *(_QWORD **)(a1 + 88));
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  sub_1D5282EB4(a1 + 8);
  return a1;
}

BOOL sub_1D53ADD44(int *a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v7;
  int v8;
  int v9;
  int v11;

  v2 = *a2;
  v3 = *a1;
  if (*a2 > *a1)
    return 0;
  v4 = a2[2] + v2;
  if (v3 > v4)
    return 0;
  v5 = a1[2] + v3;
  if (v2 > v5 || v5 > v4)
    return 0;
  v7 = a2[1];
  v8 = a1[1];
  if (v7 > v8)
    return 0;
  v9 = a2[3] + v7;
  if (v8 > v9)
    return 0;
  v11 = a1[3] + v8;
  return v7 <= v11 && v11 <= v9;
}

uint64_t sub_1D53ADDB8(int *a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v2 = a1[2];
  if (v2 < 1)
    return 0;
  v3 = a2[2];
  if (v3 < 1)
    return 0;
  v4 = a1[3];
  if (v4 < 1)
    return 0;
  v5 = a2[3];
  if (v5 < 1)
    return 0;
  v6 = *a1;
  v7 = *a2;
  if (*a1 >= *a2)
  {
    if (v7 + v3 <= v6)
      return 0;
  }
  else if (v6 + v2 <= v7)
  {
    return 0;
  }
  v8 = a1[1];
  v9 = a2[1];
  if (v8 >= v9)
  {
    if (v9 + v5 <= v8)
      return 0;
  }
  else if (v8 + v4 <= v9)
  {
    return 0;
  }
  return 1;
}

id sub_1D53ADE4C(int a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[3];
  _QWORD v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  if (qword_1EFF38768 != -1)
    dispatch_once(&qword_1EFF38768, &unk_1E9993508);
  v2 = (id)qword_1EFF38758[a1];
  objc_sync_enter(v2);
  if (objc_msgSend_count(v2, v3, v4, v5, v6))
  {
    objc_msgSend_firstObject(v2, v7, v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_removeObjectAtIndex_(v2, v12, 0, v13, v14);
  }
  else
  {
    v23[0] = *MEMORY[0x1E0C9DF88];
    v23[1] = CFSTR("kCIContextUseMetalRenderer");
    v15 = (void *)MEMORY[0x1E0C9DD90];
    v24[0] = CFSTR("RawCamera-Internal-Context");
    v24[1] = MEMORY[0x1E0C9AAB0];
    v23[2] = *MEMORY[0x1E0C9DFC8];
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v7, *MEMORY[0x1E0C9E080], v9, v10);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v24[2] = v16;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v17, (uint64_t)v24, (uint64_t)v23, 3);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_contextWithOptions_(v15, v19, (uint64_t)v18, v20, v21);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  objc_sync_exit(v2);

  return v11;
}

void sub_1D53ADFDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D53AE01C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;

  v0 = objc_opt_new();
  v1 = (void *)qword_1EFF38758;
  qword_1EFF38758 = v0;

  v2 = objc_opt_new();
  v3 = (void *)qword_1EFF38760;
  qword_1EFF38760 = v2;

}

void sub_1D53AE064(void *a1, int a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v11 = a1;
  v3 = (id)qword_1EFF38758[a2];
  objc_sync_enter(v3);
  if ((unint64_t)objc_msgSend_count(v3, v4, v5, v6, v7) <= 4)
    objc_msgSend_addObject_(v3, v8, (uint64_t)v11, v9, v10);
  objc_sync_exit(v3);

}

void sub_1D53AE0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

_QWORD *sub_1D53AE100@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D53AEE94(a1, a2);
}

id sub_1D53AE124(uint64_t a1)
{
  dispatch_once_t *v2;
  uint64_t v3;
  _QWORD block[5];

  v3 = *(_QWORD *)(a1 + 32);
  v2 = (dispatch_once_t *)(a1 + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D53AE194;
  block[3] = &unk_1E996F870;
  block[4] = a1;
  if (v3 != -1)
    dispatch_once(v2, block);
  return *(id *)(a1 + 24);
}

void sub_1D53AE194(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;

  v1 = *(_QWORD *)(a1 + 32);
  sub_1D53AE248(v1, &v7);
  sub_1D532D0B0(v7, 1);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v2;

  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1D53AE218(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  sub_1D5282EB4((uint64_t)&a9);
  __cxa_begin_catch(a1);
  v11 = *(void **)(v9 + 24);
  *(_QWORD *)(v9 + 24) = 0;

  __cxa_end_catch();
  JUMPOUT(0x1D53AE208);
}

uint64_t sub_1D53AE248@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *exception;

  v2 = *(_QWORD *)(result + 8);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v3 = *(_QWORD *)(result + 16);
  *a2 = v2;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_1D53AE2B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53AE2CC(uint64_t a1, unsigned int ***a2)
{
  unsigned __int8 v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  std::__shared_weak_count *height;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23;
  double v24;
  double v25;
  unsigned int **v26;
  void *v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  int v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  int v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  void *v67;
  const char *v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  const char *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  void *context;
  unsigned int **v145;
  int v146;
  CFTypeRef v147;
  unsigned int v148;
  void *v149;
  void *v150;
  void *v151;
  unsigned int v152;
  void (**v153)(_QWORD);
  void *v154;
  void *v156;
  int v157;
  _QWORD v158[6];
  vImage_Buffer dest;
  const __CFString *v160;
  _QWORD v161[3];

  v161[1] = *MEMORY[0x1E0C80C00];
  v3 = atomic_load((unsigned __int8 *)&qword_1EFF38778);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF38778))
  {
    byte_1EFF38770 = getenv("RAWCAMERA_ENABLE_INFO_OVERLAY") != 0;
    __cxa_guard_release(&qword_1EFF38778);
  }
  v4 = (void *)MEMORY[0x1D8272058]();
  if (*a2 != a2[1])
  {
    context = v4;
    v146 = *MEMORY[0x1E0C9E080];
    if ((**a2)[11] == 16)
      v5 = *MEMORY[0x1E0C9E080];
    else
      v5 = *MEMORY[0x1E0C9E070];
    v148 = v5;
    sub_1D53AE248(a1, &dest);
    v6 = sub_1D5297E34((uint64_t)dest.data);
    v7 = v6;
    height = (std::__shared_weak_count *)dest.height;
    if (!dest.height)
      goto LABEL_10;
    v9 = (unint64_t *)(dest.height + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
      std::__shared_weak_count::__release_weak(height);
      if (v7)
      {
LABEL_11:
        if (v7 != 3)
          goto LABEL_36;
        sub_1D53AE248(a1, &dest);
        v11 = sub_1D5297E3C((uint64_t)dest.data);
        v12 = (std::__shared_weak_count *)dest.height;
        if (dest.height)
        {
          v13 = (unint64_t *)(dest.height + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        if (v11 == 3)
        {
          v147 = sub_1D543E61C();
          v148 = *MEMORY[0x1E0C9E010];
LABEL_37:
          sub_1D53AE124(a1);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = *MEMORY[0x1E0C9D538];
          v25 = *(double *)(MEMORY[0x1E0C9D538] + 8);
          sub_1D53ADE4C(0);
          v154 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = *a2;
          v145 = a2[1];
          if (*a2 != v145)
          {
            do
            {
              v27 = v23;
              sub_1D52EB130();
              v28 = objc_claimAutoreleasedReturnValue();
              v29 = v28;
              if ((unint64_t)v23 + 1 >= 2 && os_signpost_enabled(v28))
              {
                objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v134, (uint64_t)CFSTR("{{%d, %d}, {%d, %d}}"), v135, v136, *(_QWORD *)(*v26 + 7), HIDWORD(*(_QWORD *)(*v26 + 7)), *(_QWORD *)(*v26 + 9), HIDWORD(*(_QWORD *)(*v26 + 9)));
                v137 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                v142 = (void *)objc_msgSend_UTF8String(v137, v138, v139, v140, v141);
                LODWORD(dest.data) = 136315138;
                *(void **)((char *)&dest.data + 4) = v142;
                _os_signpost_emit_with_name_impl(&dword_1D527F000, v29, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v27, "renderToBlock", "%s", (uint8_t *)&dest, 0xCu);

              }
              v158[0] = MEMORY[0x1E0C809B0];
              v158[1] = 3221225472;
              v158[2] = sub_1D53AECDC;
              v158[3] = &unk_1E99914A0;
              v158[4] = v27;
              v158[5] = v26;
              v153 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v158);
              v30 = *(_QWORD *)(*v26 + 7);
              v31 = *(_QWORD *)(*v26 + 9);
              v152 = sub_1D53A6EE8(*v26);
              v32 = v27;
              v156 = (void *)(*(uint64_t (**)(unsigned int *, _QWORD))(*(_QWORD *)*v26 + 8))(*v26, 0);
              if (byte_1EFF38770)
              {
                v37 = (void *)MEMORY[0x1E0CB3940];
                sub_1D53AE248(a1, &dest);
                v38 = sub_1D5297E3C((uint64_t)dest.data);
                sub_1D536C28C(v38);
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_stringWithFormat_(v37, v40, (uint64_t)CFSTR("Requested Sushi Mode : %@"), v41, v42, v39);
                v151 = (void *)objc_claimAutoreleasedReturnValue();

                v43 = (std::__shared_weak_count *)dest.height;
                if (dest.height)
                {
                  v44 = (unint64_t *)(dest.height + 8);
                  do
                    v45 = __ldaxr(v44);
                  while (__stlxr(v45 - 1, v44));
                  if (!v45)
                  {
                    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                    std::__shared_weak_count::__release_weak(v43);
                  }
                }
                v46 = (void *)MEMORY[0x1E0CB3940];
                sub_1D53AE248(a1, &dest);
                v47 = sub_1D5297E34((uint64_t)dest.data);
                sub_1D536C28C(v47);
                v48 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_stringWithFormat_(v46, v49, (uint64_t)CFSTR("Sushi Mode : %@"), v50, v51, v48);
                v150 = (void *)objc_claimAutoreleasedReturnValue();

                v52 = (std::__shared_weak_count *)dest.height;
                if (dest.height)
                {
                  v53 = (unint64_t *)(dest.height + 8);
                  do
                    v54 = __ldaxr(v53);
                  while (__stlxr(v54 - 1, v53));
                  if (!v54)
                  {
                    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                    std::__shared_weak_count::__release_weak(v52);
                  }
                }
                v55 = (void *)MEMORY[0x1E0CB3940];
                sub_1D53AE248(a1, &dest);
                v157 = (*(uint64_t (**)(void *))(*(_QWORD *)dest.data + 120))(dest.data);
                sub_1D52B4860(&v157);
                v56 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_stringWithFormat_(v55, v57, (uint64_t)CFSTR("Version : %@"), v58, v59, v56);
                v149 = (void *)objc_claimAutoreleasedReturnValue();

                v63 = (std::__shared_weak_count *)dest.height;
                if (dest.height)
                {
                  v64 = (unint64_t *)(dest.height + 8);
                  do
                    v65 = __ldaxr(v64);
                  while (__stlxr(v65 - 1, v64));
                  if (!v65)
                  {
                    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                    std::__shared_weak_count::__release_weak(v63);
                  }
                }
                objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v60, (uint64_t)CFSTR(" %@ \n %@ \n %@ "), v61, v62, v151, v150, v149);
                v66 = (void *)objc_claimAutoreleasedReturnValue();
                v67 = (void *)MEMORY[0x1E0C9DDB8];
                v160 = CFSTR("inputText");
                v161[0] = v66;
                objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v68, (uint64_t)v161, (uint64_t)&v160, 1);
                v69 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_filterWithName_withInputParameters_(v67, v70, (uint64_t)CFSTR("CITextImageGenerator"), (uint64_t)v69, v71);
                v72 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend_extent(v27, v73, v74, v75, v76);
                v78 = v77;
                objc_msgSend_outputImage(v72, v79, v80, v81, v82);
                v83 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_extent(v83, v84, v85, v86, v87);
                v89 = v88;

                objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v90, v91, v92, v93, v78 * 0.25 / v89);
                v94 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_setValue_forKey_(v72, v95, (uint64_t)v94, (uint64_t)CFSTR("inputScaleFactor"), v96);

                objc_msgSend_whiteImage(MEMORY[0x1E0C9DDC8], v97, v98, v99, v100);
                v101 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_outputImage(v72, v102, v103, v104, v105);
                v106 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_extent(v106, v107, v108, v109, v110);
                objc_msgSend_imageByCroppingToRect_(v101, v111, v112, v113, v114);
                v115 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend_outputImage(v72, v116, v117, v118, v119);
                v120 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_imageByCompositingOverImage_(v120, v121, (uint64_t)v115, v122, v123);
                v124 = (void *)objc_claimAutoreleasedReturnValue();

                objc_msgSend_imageByCompositingOverImage_(v124, v125, (uint64_t)v27, v126, v127);
                v32 = (void *)objc_claimAutoreleasedReturnValue();

              }
              objc_msgSend_extent(v32, v33, v34, v35, v36);
              objc_msgSend_render_toBitmap_rowBytes_bounds_format_colorSpace_(v154, v129, (uint64_t)v32, (uint64_t)v156, v152, v148, v147, (double)(int)v30 - v24, v128 - (double)SHIDWORD(v30) - (double)SHIDWORD(v31) - v25, (double)(int)v31);
              if (v148 == v146)
              {
                dest.data = v156;
                dest.height = v31 >> 32;
                dest.width = 4 * (int)v31;
                dest.rowBytes = v152;
                vImageConvert_16Fto16U(&dest, &dest, 0);
              }
              objc_msgSend_clearCaches(v154, v130, v131, v132, v133);
              v153[2](v153);

              v26 += 2;
              v23 = v32;
            }
            while (v26 != v145);
          }
          sub_1D53AE064(v154, 0);

          v4 = context;
          goto LABEL_63;
        }
        sub_1D53AE248(a1, &dest);
        v6 = sub_1D5297E44((uint64_t)dest.data);
        v18 = v6;
        v19 = (std::__shared_weak_count *)dest.height;
        if (dest.height)
        {
          v20 = (unint64_t *)(dest.height + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        if (!v18)
        {
LABEL_36:
          v147 = (CFTypeRef)sub_1D543E528(v6);
          goto LABEL_37;
        }
        sub_1D53AE248(a1, &dest);
        v147 = sub_1D5297E64((uint64_t)dest.data);
        v15 = (std::__shared_weak_count *)dest.height;
        if (!dest.height)
          goto LABEL_37;
        v22 = (unint64_t *)(dest.height + 8);
        do
          v17 = __ldaxr(v22);
        while (__stlxr(v17 - 1, v22));
LABEL_24:
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        goto LABEL_37;
      }
    }
    else
    {
LABEL_10:
      if ((_DWORD)v6)
        goto LABEL_11;
    }
    sub_1D53AE248(a1, &dest);
    v147 = sub_1D5297E64((uint64_t)dest.data);
    v15 = (std::__shared_weak_count *)dest.height;
    if (!dest.height)
      goto LABEL_37;
    v16 = (unint64_t *)(dest.height + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    goto LABEL_24;
  }
LABEL_63:
  objc_autoreleasePoolPop(v4);
  return 1;
}

void sub_1D53AEB24(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1 - 192);
  _Unwind_Resume(a1);
}

void sub_1D53AECDC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  sub_1D52EB130();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v5, (uint64_t)CFSTR("{{%d, %d}, {%d, %d}}"), v6, v7, *(_QWORD *)(**(_QWORD **)(a1 + 40) + 28), HIDWORD(*(_QWORD *)(**(_QWORD **)(a1 + 40) + 28)), *(_QWORD *)(**(_QWORD **)(a1 + 40) + 36), HIDWORD(*(_QWORD *)(**(_QWORD **)(a1 + 40) + 36)));
    v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    *(_DWORD *)buf = 136315138;
    v14 = objc_msgSend_UTF8String(v8, v9, v10, v11, v12);
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "renderToBlock", "%s", buf, 0xCu);

  }
}

void sub_1D53AEDE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1D53AEE0C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E9993538;

  sub_1D5282EB4(a1 + 8);
  return a1;
}

void sub_1D53AEE48(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E9993538;

  sub_1D5282EB4(a1 + 8);
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D53AEE94@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x40uLL);
  result = sub_1D53AEEEC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D53AEED8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53AEEEC(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9993570;
  a1[1] = 0;
  sub_1D53AEF90(a1 + 3, a2);
  return a1;
}

void sub_1D53AEF24(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53AEF38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9993570;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53AEF4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9993570;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53AEF80(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

_QWORD *sub_1D53AEF90(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *exception;

  *result = off_1E9993538;
  v2 = *a2;
  v3 = a2[1];
  result[1] = *a2;
  result[2] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v2 = result[1];
  }
  result[3] = 0;
  result[4] = 0;
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D53AF028(_Unwind_Exception *a1)
{
  uint64_t v1;
  id *v2;

  sub_1D5282EB4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53AF054(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;

  result = (_QWORD *)sub_1D5337D24(a1, a2, a3);
  *result = &off_1E99935C0;
  result[4] = a4;
  result[5] = a5;
  return result;
}

uint64_t sub_1D53AF088(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_1D53AF090(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_1D53AF098(uint64_t a1, uint64_t *a2)
{
  size_t v4;
  uint64_t v5;
  int ColorAsICCProfile;
  int v8;
  void *__p[3];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18[3];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[28];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  sub_1D52B1C58(v18, a2);
  v29 = 0u;
  memset(v30, 0, sizeof(v30));
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v13 = 0;
  v14 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  JxlDecoderCreate();
  JxlDecoderSubscribeEvents();
  v4 = *(_QWORD *)(a1 + 40);
  sub_1D5285340(__p, v4);
  v5 = *a2;
  sub_1D528594C(&v8, (uint64_t *)(a1 + 32));
  (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v5 + 40))(v5, &v8, 0);
  (*(void (**)(uint64_t, void *, size_t))(*(_QWORD *)*a2 + 32))(*a2, __p[0], v4);
  if (!JxlDecoderSetInput()
    && JxlDecoderProcessInput() == 64
    && !JxlDecoderGetBasicInfo()
    && JxlDecoderProcessInput() == 256)
  {
    if (JxlDecoderGetColorAsEncodedProfile())
    {
      if (JxlDecoderGetICCProfileSize())
        goto LABEL_15;
      if (v14)
        sub_1D53AF5F8((unint64_t *)&v15, v14);
      ColorAsICCProfile = JxlDecoderGetColorAsICCProfile();
    }
    else
    {
      ColorAsICCProfile = JxlDecoderSetPreferredColorProfile();
    }
    if (!ColorAsICCProfile)
    {
      v10 = 0x200000003;
      v12 = 1;
      if (!JxlDecoderImageOutBufferSize() && !JxlDecoderSetImageOutBuffer())
        JxlDecoderProcessInput();
    }
  }
LABEL_15:
  JxlDecoderDestroy();
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  return sub_1D5285200(v18);
}

void sub_1D53AF2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (__p)
    operator delete(__p);
  sub_1D5285200(&a34);
  _Unwind_Resume(a1);
}

CGColorSpaceRef sub_1D53AF334(uint64_t a1, uint64_t *a2)
{
  size_t v4;
  uint64_t v5;
  CFStringRef *v6;
  CFDataRef v7;
  CGColorSpaceRef v8;
  int v10;
  int v11;
  int v12;
  int v13;
  void *__p[3];
  size_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19[3];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[28];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  sub_1D52B1C58(v19, a2);
  v30 = 0u;
  memset(v31, 0, sizeof(v31));
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v15 = 0;
  JxlDecoderCreate();
  JxlDecoderSubscribeEvents();
  v4 = *(_QWORD *)(a1 + 40);
  sub_1D5285340(__p, v4);
  v5 = *a2;
  sub_1D528594C(&v13, (uint64_t *)(a1 + 32));
  (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v5 + 40))(v5, &v13, 0);
  (*(void (**)(uint64_t, void *, size_t))(*(_QWORD *)*a2 + 32))(*a2, __p[0], v4);
  if (JxlDecoderSetInput()
    || JxlDecoderProcessInput() != 64
    || JxlDecoderGetBasicInfo()
    || JxlDecoderProcessInput() != 256)
  {
LABEL_25:
    v8 = 0;
    goto LABEL_20;
  }
  if (JxlDecoderGetColorAsEncodedProfile())
  {
    if (!JxlDecoderGetICCProfileSize())
    {
      if (v15)
        sub_1D53AF5F8((unint64_t *)&v16, v15);
      if (!JxlDecoderGetColorAsICCProfile())
      {
        v7 = CFDataCreate(0, (const UInt8 *)v16, v15);
        v8 = (CGColorSpaceRef)MEMORY[0x1D82714B8]();
        CFRelease(v7);
        goto LABEL_20;
      }
    }
    goto LABEL_25;
  }
  if (v10 == 1 && v11 == 1 && v12 == 13)
  {
    v6 = (CFStringRef *)MEMORY[0x1E0C9DA10];
LABEL_19:
    v8 = CGColorSpaceCreateWithName(*v6);
    goto LABEL_20;
  }
  v8 = 0;
  if (v10 == 1 && v11 == 11 && v12 == 13)
  {
    v6 = (CFStringRef *)MEMORY[0x1E0C9D908];
    goto LABEL_19;
  }
LABEL_20:
  JxlDecoderDestroy();
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  sub_1D5285200(v19);
  return v8;
}

void sub_1D53AF590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (__p)
    operator delete(__p);
  sub_1D5285200(&a30);
  _Unwind_Resume(a1);
}

void sub_1D53AF5F8(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      sub_1D5282B8C();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_1D53AF720(uint64_t a1, int a2, uint64_t *a3)
{
  _QWORD *v5;
  void **v6;
  int v7;
  int i;
  float v9;
  float v10;
  unint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  float *v20;
  int v21;

  v5 = (_QWORD *)sub_1D544098C(a1, a2);
  *v5 = &off_1E9993630;
  v5[6] = 0;
  v6 = (void **)(v5 + 6);
  v5[7] = 0;
  v5[8] = 0;
  *(_DWORD *)(a1 + 12) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 16) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 20) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 24) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 28) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 32) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 36) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 40) = sub_1D52847F8(*a3);
  v7 = sub_1D52847F8(*a3);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      v9 = sub_1D5284934(*a3);
      v10 = v9;
      v12 = *(float **)(a1 + 56);
      v11 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v12 >= v11)
      {
        v14 = (float *)*v6;
        v15 = ((char *)v12 - (_BYTE *)*v6) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          sub_1D5282B8C();
        v17 = v11 - (_QWORD)v14;
        if (v17 >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)sub_1D5282BA0(a1 + 64, v18);
          v14 = *(float **)(a1 + 48);
          v12 = *(float **)(a1 + 56);
        }
        else
        {
          v19 = 0;
        }
        v20 = (float *)&v19[4 * v15];
        *v20 = v10;
        v13 = v20 + 1;
        while (v12 != v14)
        {
          v21 = *((_DWORD *)v12-- - 1);
          *((_DWORD *)v20-- - 1) = v21;
        }
        *(_QWORD *)(a1 + 48) = v20;
        *(_QWORD *)(a1 + 56) = v13;
        *(_QWORD *)(a1 + 64) = &v19[4 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v12 = v9;
        v13 = v12 + 1;
      }
      *(_QWORD *)(a1 + 56) = v13;
    }
  }
  return a1;
}

void sub_1D53AF8C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

id sub_1D53AF8F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  double v64;
  _DWORD *v65;
  _DWORD *v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  RAWOpcodeScalePerRow *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;

  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v7, *(unsigned int *)(a1 + 12), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v11, (uint64_t)v10, (uint64_t)CFSTR("Top"), v12);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v13, *(unsigned int *)(a1 + 16), v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v17, (uint64_t)v16, (uint64_t)CFSTR("Left"), v18);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v19, *(unsigned int *)(a1 + 20), v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v23, (uint64_t)v22, (uint64_t)CFSTR("Bottom"), v24);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v25, *(unsigned int *)(a1 + 24), v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v29, (uint64_t)v28, (uint64_t)CFSTR("Right"), v30);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v31, *(unsigned int *)(a1 + 28), v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v35, (uint64_t)v34, (uint64_t)CFSTR("Plane"), v36);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v37, *(unsigned int *)(a1 + 32), v38, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v41, (uint64_t)v40, (uint64_t)CFSTR("Planes"), v42);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v43, *(unsigned int *)(a1 + 36), v44, v45);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v47, (uint64_t)v46, (uint64_t)CFSTR("RowPitch"), v48);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v49, *(unsigned int *)(a1 + 40), v50, v51);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v53, (uint64_t)v52, (uint64_t)CFSTR("ColPitch"), v54);

  objc_msgSend_array(MEMORY[0x1E0C99DE8], v55, v56, v57, v58);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v65 = *(_DWORD **)(a1 + 48);
  v66 = *(_DWORD **)(a1 + 56);
  while (v65 != v66)
  {
    LODWORD(v64) = *v65;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v59, v60, v61, v62, v64);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v63, v68, (uint64_t)v67, v69, v70);

    ++v65;
  }
  objc_msgSend_setObject_forKeyedSubscript_(v6, v59, (uint64_t)v63, (uint64_t)CFSTR("Scale"), v62);
  v71 = [RAWOpcodeScalePerRow alloc];
  v75 = (void *)objc_msgSend_initWithArguments_(v71, v72, (uint64_t)v6, v73, v74);

  return v75;
}

void sub_1D53AFB1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D53AFB70(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E9993630;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1D53AFBAC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E9993630;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53AFBF8()
{
  return 12;
}

double sub_1D53AFC00@<D0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  double result;
  __int128 v7;
  double v8;
  int v9;
  double v10;

  v10 = a4;
  v9 = a2;
  v8 = a5;
  sub_1D53AFE80(a1, &v10, &v9, &v8, &v7);
  result = *(double *)&v7;
  *a3 = v7;
  return result;
}

uint64_t sub_1D53AFC58(uint64_t a1, unsigned int a2, _OWORD *a3, _BYTE *a4)
{
  long double v7;
  unint64_t v8;
  double v9;
  _DWORD *v10;
  uint64_t v16;
  uint64_t result;
  float *v18;
  double v19;
  int v20;
  double v21;
  float64x2_t v22;
  float64x2_t v23;
  float64_t v24;
  double v25;

  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  v7 = log((double)a2);
  v8 = 0;
  v9 = pow(1.9, v7 + -5.768321) * (*(double *)(a1 + 56) / 12810.0);
  v10 = (_DWORD *)a3 + 3;
  __asm { FMOV            V0.2D, #2.0 }
  v24 = *((double *)&_Q0 + 1);
  do
  {
    v16 = *(_QWORD *)(a1 + 32);
    if (v8 >= (*(_QWORD *)(a1 + 40) - v16) >> 3)
      sub_1D528EAE0();
    v25 = dbl_1D544E880[v8] - *(double *)(v16 + 8 * v8);
    result = sub_1D53A7E20(*(_DWORD *)(a1 + 64), v8);
    if ((_DWORD)result == 2)
      v18 = (float *)&unk_1D544E870;
    else
      v18 = (float *)&unk_1D544E850;
    if ((_DWORD)result == 3)
      v18 = (float *)&unk_1D544E860;
    v19 = v9 * *(double *)(a1 + 72);
    v20 = *((_DWORD *)v18 + 3);
    v21 = v18[2];
    v22.f64[0] = *v18 + v18[1] * v25;
    v22.f64[1] = v18[1];
    v23.f64[1] = v24;
    v23.f64[0] = v25;
    *(float32x2_t *)(v10 - 3) = vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(v22, vmulq_n_f64(v23, v21), v25), v19));
    *(float *)&v19 = v19 * v21;
    *(v10 - 1) = LODWORD(v19);
    *v10 = v20;
    ++v8;
    v10 += 4;
  }
  while (v8 != 4);
  *a4 = 0;
  return result;
}

_QWORD *sub_1D53AFDC8(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E9993678;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  *a1 = off_1E9993388;
  sub_1D5282EB4((uint64_t)(a1 + 2));
  return a1;
}

void sub_1D53AFE1C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E9993678;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  *a1 = off_1E9993388;
  sub_1D5282EB4((uint64_t)(a1 + 2));
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D53AFE80@<X0>(uint64_t a1@<X1>, double *a2@<X2>, int *a3@<X3>, double *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x68uLL);
  result = sub_1D53AFEF8(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1D53AFEE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53AFEF8(_QWORD *a1, uint64_t a2, double *a3, int *a4, double *a5)
{
  a1[2] = 0;
  *a1 = &unk_1E99936B8;
  a1[1] = 0;
  sub_1D53AFFA8((uint64_t)(a1 + 3), a2, *a4, *a3, *a5);
  return a1;
}

void sub_1D53AFF3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53AFF50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99936B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53AFF64(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99936B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53AFF98(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

uint64_t sub_1D53AFFA8(uint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = off_1E9993678;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_1D5282C70((_QWORD *)(a1 + 32), *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(double *)(a1 + 56) = a4;
  *(_DWORD *)(a1 + 64) = a3;
  *(double *)(a1 + 72) = a5;
  return a1;
}

void sub_1D53B0014(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_1E9993388;
  sub_1D5282EB4((uint64_t)(v1 + 2));
  _Unwind_Resume(a1);
}

uint64_t sub_1D53B0038(_QWORD *a1)
{
  size_t v2;
  uint64_t v3;
  size_t v4;
  int v5;
  char *v6;
  uint64_t result;
  void *exception;

  v2 = NSPageSize();
  v3 = (v2 + a1[3] - 1) & -(uint64_t)v2;
  v4 = v3 + 2 * v2;
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 40))(a1))
    v5 = 1325400066;
  else
    v5 = 1325400064;
  a1[5] = v4;
  v6 = (char *)j__mmap(0, v4, 3, 4098, v5, 0);
  if (v6 == (char *)-1
    || (a1[4] = v6, a1[2] = &v6[v2], mprotect(v6, v2, 1), result = mprotect((void *)(a1[2] + v3), v2, 1), !a1[2]))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D53B0144(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53B015C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E9993708;
  v2 = (void *)a1[4];
  if (v2)
  {
    munmap(v2, a1[5]);
    a1[4] = 0;
  }
  return sub_1D530AFDC((uint64_t)a1);
}

void sub_1D53B01A4(_QWORD *a1)
{
  sub_1D53B015C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53B01C8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_1E9993748;
  *(_DWORD *)(a1 + 48) = 1;
  sub_1D53A1140((_QWORD *)(a1 + 56));
  return a1;
}

void sub_1D53B0210(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1D53B015C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53B0228(uint64_t a1)
{
  uint64_t result;
  int v3;
  BOOL v4;
  uint64_t v5[2];

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if ((_DWORD)result && *(_QWORD *)(a1 + 16))
  {
    sub_1D52E1E7C(v5, (uint64_t *)(a1 + 56));
    v3 = *(_DWORD *)(a1 + 48);
    v4 = __OFSUB__(v3--, 1);
    *(_DWORD *)(a1 + 48) = v3;
    if ((v3 < 0) ^ v4 | (v3 == 0))
      sub_1D52E658C(a1);
    return sub_1D52E1F44(v5);
  }
  return result;
}

void sub_1D53B0290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D52E1F44(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53B02A4(uint64_t a1)
{
  int v2;
  uint64_t v4[2];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) && *(_QWORD *)(a1 + 16))
  {
    sub_1D52E1E7C(v4, (uint64_t *)(a1 + 56));
    v2 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v2 + 1;
    if (v2 <= 1)
      sub_1D52E658C(a1);
    sub_1D52E1F44(v4);
  }
  return 1;
}

void sub_1D53B0314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D52E1F44(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53B0328(_QWORD *a1)
{
  *a1 = off_1E9993748;
  sub_1D5282EB4((uint64_t)(a1 + 7));
  return sub_1D53B015C(a1);
}

void sub_1D53B0358(_QWORD *a1)
{
  *a1 = off_1E9993748;
  sub_1D5282EB4((uint64_t)(a1 + 7));
  sub_1D53B015C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D53B039C(_DWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _WORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  __int16 v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  __int16 v32;
  void *v33;
  void *exception;
  void (**v35)(_QWORD);
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint8_t buf[8];
  std::__shared_weak_count *v41;
  _QWORD v42[5];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((unint64_t)a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)a1, "CPacked14Unpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v42[0] = MEMORY[0x1E0C809B0];
  v42[1] = 3221225472;
  v42[2] = sub_1D53B07BC;
  v42[3] = &unk_1E996F870;
  v42[4] = a1;
  v4 = MEMORY[0x1D82721B4](v42);
  v5 = a1[11];
  v6 = a1[12];
  if ((int)v6 * v5 > (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 152))(a1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  (*(void (**)(uint8_t *__return_ptr, _DWORD *))(*(_QWORD *)a1 + 112))(buf, a1);
  v35 = (void (**)(_QWORD))v4;
  v7 = (_WORD *)sub_1D52E658C(*(uint64_t *)buf);
  v8 = v41;
  if (!v41)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v41->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!(_DWORD)v6)
      goto LABEL_28;
  }
  else
  {
LABEL_7:
    if (!(_DWORD)v6)
      goto LABEL_28;
  }
  v11 = 0;
  v12 = 0;
  v13 = (14 * v5) >> 3;
  v14 = (2 * v5) & 0x1FFFFFFE;
  v39 = (v14 - v13);
  v37 = 14 * v5;
  v38 = (14 * v5) & 0x18;
  LODWORD(v15) = (14 * v5) >> 5;
  v16 = v5 & 0xFFFFFFFC;
  if (v15 <= 1)
    v15 = 1;
  else
    v15 = v15;
  v36 = v15;
  do
  {
    v17 = v6;
    (*(void (**)(uint8_t *__return_ptr, _DWORD *))(*(_QWORD *)a1 + 112))(buf, a1);
    v18 = sub_1D52E658C(*(uint64_t *)buf);
    v19 = v41;
    if (v41)
    {
      v20 = (unint64_t *)&v41->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = (unsigned __int8 *)(v18 + v39 + (v14 * v12));
    if ((unint64_t)&v22[v13] > (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 120))(a1)
      || ((*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)a1 + 3) + 32))(*((_QWORD *)a1 + 3), v18 + v39 + (v14 * v12), v13), v38))
    {
      v33 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v33, "RawCameraException");
      __cxa_throw(v33, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (v37 >= 0x20)
    {
      v23 = (unsigned int *)(v18 + v39 + v11);
      v24 = v36;
      do
      {
        *v23 = bswap32(*v23);
        ++v23;
        --v24;
      }
      while (v24);
    }
    if (v16)
    {
      v25 = 0;
      v6 = v17;
      do
      {
        v26 = v22[1];
        v27 = v22[3];
        v28 = v22[4];
        v29 = v22[5];
        v30 = v26 >> 2;
        v31 = (16 * v22[2]) & 0xCFFF | ((v26 & 3) << 12) | (v27 >> 4);
        v32 = v22[6] | ((v29 & 0x3F) << 8);
        *v7 = v30 | (*v22 << 6);
        v7[1] = v31;
        v7[2] = (4 * v28) & 0xC3FF | ((v27 & 0xF) << 10) | (v29 >> 6);
        v7[3] = v32;
        v7 += 4;
        v25 += 4;
        v22 += 7;
      }
      while (v25 < v16);
    }
    else
    {
      v6 = v17;
    }
    ++v12;
    v11 += v14;
  }
  while (v12 != v6);
LABEL_28:
  v35[2](v35);

}

void sub_1D53B0744(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53B07BC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CPacked14Unpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

double sub_1D53B0840(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)(a1 + 56) = *a2;
  return sub_1D53B0854(a1, a1 + 64, a1 + 96);
}

double sub_1D53B0854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  int32x2_t v14;
  int64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  float64x2_t v26;
  float64x2_t v27;
  int32x2_t v28;
  double v29;
  int64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  uint64_t i;
  double v34;
  uint64_t j;
  uint64_t v36;
  double v37;
  double v38;
  double v40[100];
  double v41[100];
  double v42[101];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  bzero(v42, 0x328uLL);
  v6 = 0;
  v7 = *(double *)(a1 + 40);
  v8 = *(double *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(double *)(a1 + 24) + 1.0;
  v11 = (float64x2_t)vdupq_lane_s64(v9, 0);
  v12 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10, 0);
  v13 = (float64x2_t)vdupq_n_s64(0x3F84AFD6A052BF5BuLL);
  v14 = (int32x2_t)0x100000000;
  __asm { FMOV            V2.2D, #1.0 }
  do
  {
    v20.i64[0] = v14.i32[0];
    v20.i64[1] = v14.i32[1];
    v21 = vmulq_f64(vcvtq_f64_s64(v20), v13);
    v22 = vmulq_f64(v21, v21);
    *(float64x2_t *)&v42[v6] = vdivq_f64(vmulq_f64(v21, vmlaq_f64(vmlaq_f64(vmlaq_f64(_Q2, v22, v11), v22, vmulq_n_f64(v22, v7)), v22, vmulq_f64(v22, vmulq_n_f64(v22, v8)))), v12);
    v14 = vadd_s32(v14, (int32x2_t)0x200000002);
    v6 += 2;
  }
  while (v6 != 100);
  v23 = 0;
  while (v42[v23] + -1.0 <= 1.0)
  {
    if (++v23 == 100)
    {
      v24 = 1.0;
      goto LABEL_8;
    }
  }
  v24 = (double)(int)v23 * 0.0101010101;
LABEL_8:
  v25 = 0;
  v26 = (float64x2_t)vdupq_lane_s64(v9, 0);
  v27 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10, 0);
  v28 = (int32x2_t)0x100000000;
  v29 = v24 / 99.0;
  do
  {
    v30.i64[0] = v28.i32[0];
    v30.i64[1] = v28.i32[1];
    v31 = vmulq_n_f64(vcvtq_f64_s64(v30), v29);
    v32 = vmulq_f64(v31, v31);
    *(float64x2_t *)&v42[v25] = vdivq_f64(vmulq_f64(v31, vmlaq_f64(vmlaq_f64(vmlaq_f64(_Q2, v32, v26), v32, vmulq_n_f64(v32, v7)), v32, vmulq_f64(v32, vmulq_n_f64(v32, v8)))), v27);
    v28 = vadd_s32(v28, (int32x2_t)0x200000002);
    v25 += 2;
  }
  while (v25 != 100);
  for (i = 0; i != 100; ++i)
  {
    v34 = (double)(int)i * 0.0101010101;
    v41[i] = v34;
    for (j = 1; j != 100; ++j)
    {
      if (v42[j] >= v34)
        break;
    }
    v40[i] = v29 * ((v34 - v42[(int)j - 1]) / (v42[j] - v42[(int)j - 1]) + (double)((int)j - 1));
  }
  v36 = 0;
  v37 = v40[0];
  do
  {
    if (v36 * 8)
    {
      v38 = v41[v36];
      v40[v36] = v40[v36] / v38;
    }
    else
    {
      v37 = 1.0;
      v38 = v41[0];
    }
    v41[v36++] = v38 * v38;
  }
  while (v36 != 100);
  v40[0] = v37;
  return sub_1D53B0AE4(a1, a2, a3, (uint64_t)v41, (uint64_t)v40, 100);
}

double sub_1D53B0AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v12;
  int v13;
  void *v14;
  double v15;
  uint64_t v16;
  double v17;
  __int128 v18;
  uint64_t v19;
  double v20;
  double v21;
  double result;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double v26[3];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a6 < 2)
  {
    LODWORD(v12) = 1;
  }
  else
  {
    v12 = 1;
    while (*(double *)(a4 + 8 * v12) < *(double *)(a1 + 128))
    {
      if (a6 == ++v12)
      {
        LODWORD(v12) = a6;
        break;
      }
    }
  }
  v13 = v12 - 1;
  v25 = xmmword_1D544E958;
  *(_OWORD *)v26 = unk_1D544E968;
  v23 = xmmword_1D544E958;
  v24 = unk_1D544E968;
  v14 = sub_1D53B0C5C(a1, &v25, a4, a5, 0, (int)v12 - 1);
  sub_1D53B0C5C((uint64_t)v14, &v23, a4, a5, v13, a6 - v13);
  v15 = *(double *)(a1 + 128) * *(double *)(a1 + 128);
  v16 = *((_QWORD *)&v25 + 1);
  v17 = v26[0];
  v18 = v23;
  v19 = v24;
  v20 = *((double *)&v24 + 1)
      + v15 * (v15 * *((double *)&v23 + 1))
      + v15 * (v15 * *(double *)&v23) * v15
      + *(double *)&v24 * v15
      - (v26[1]
       + v15 * (v15 * *((double *)&v25 + 1))
       + v15 * (*(double *)&v25 * v15) * v15
       + v26[0] * v15);
  v21 = v26[1] + v20 * 0.8;
  result = *((double *)&v24 + 1) + v20 * -0.2;
  *(_QWORD *)a2 = v25;
  *(_QWORD *)(a2 + 8) = v16;
  *(double *)(a2 + 16) = v17;
  *(double *)(a2 + 24) = v21;
  *(_OWORD *)a3 = v18;
  *(_QWORD *)(a3 + 16) = v19;
  *(double *)(a3 + 24) = result;
  return result;
}

void *sub_1D53B0C5C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6)
{
  uint64_t v11;
  _BYTE *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  size_t v17;
  _BYTE *v18;
  uint64_t v19;
  void *result;
  void *exception;
  _BYTE v22[15];
  char v23[5];
  int v24;
  double v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a6 - 2000 <= 0xFFFFF830)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v11 = a6;
  MEMORY[0x1E0C80A78](a1);
  v12 = &v22[-32 * v11];
  bzero(v12, v13);
  v15 = 0;
  do
  {
    v16 = *(double *)(a3 + 8 * a5 + v15);
    *(double *)&v12[v15] = v16 * (v16 * v16);
    *(double *)&v12[8 * a6 + v15] = v16 * v16;
    *(double *)&v12[16 * a6 + v15] = v16;
    *(_QWORD *)&v12[24 * a6 + v15] = 0x3FF0000000000000;
    v15 += 8;
  }
  while (8 * a6 != v15);
  MEMORY[0x1E0C80A78](v14);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFF0)];
  memcpy(v18, (const void *)(a4 + 8 * v19), v17);
  v29 = 4;
  v30 = a6;
  v27 = a6;
  v28 = 1;
  v26 = a6;
  v25 = 0.0;
  v23[2] = 0;
  *(_WORD *)&v23[3] = 0;
  v24 = -1;
  strcpy(v23, "N");
  result = (void *)dgels_NEWLAPACK();
  if (!*(_DWORD *)&v23[1])
  {
    v24 = llround(ceil(v25));
    MEMORY[0x1E0C80A78](result);
    result = (void *)dgels_NEWLAPACK();
    if (!*(_DWORD *)&v23[1])
      return memcpy(a2, v18, 8 * v29);
  }
  return result;
}

void sub_1D53B0ECC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

double sub_1D53B0EE8(uint64_t a1)
{
  return (double)*(int *)(a1 + 56) / *(double *)(a1 + 8) * *(double *)(a1 + 16);
}

void sub_1D53B0F00()
{
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53B0F14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v15);
  v2 = v15;
  sub_1D52850A0(__p, "IFD0");
  v3 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v2 + 264))(v2, __p);
  if (v14 < 0)
    operator delete(__p[0]);
  v4 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if ((_DWORD)v3 == 0xFFFF)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v15, a1);
    v7 = v15;
    sub_1D52850A0(__p, "EmbeddedThumbnail:IFD0:EXIF");
    v8 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v7 + 264))(v7, __p);
    if (v14 < 0)
      operator delete(__p[0]);
    v9 = v16;
    if (v16)
    {
      v10 = (unint64_t *)&v16->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (v8 < 0x10000)
      return 0xFFFFLL;
    else
      return v8;
  }
  return v3;
}

void sub_1D53B1068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1D53B109C(uint64_t a1@<X0>, double **a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  double *v11;
  double *v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *__p[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v23;
  _BYTE *v24;
  double *v25;
  double v26;

  v26 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2952))(a1);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v21, a1);
  v4 = v21;
  sub_1D52850A0(__p, "IFD0:OBCorrection");
  if ((*(unsigned int (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v4 + 248))(v4, __p, &v23, 0))
  {
    v6 = v23;
    v5 = v24;
    if (v20 < 0)
      operator delete(__p[0]);
    v7 = v5 - v6;
    v8 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v7 == 32)
    {
      v12 = (double *)v23;
      v11 = (double *)v24;
      if (v24 != v23)
      {
        v13 = 0;
        v14 = (v24 - (_BYTE *)v23) >> 3;
        v15 = v26;
        do
        {
          v12[v13] = v15 + v12[v13];
          ++v13;
        }
        while (v14 > v13);
      }
      *a2 = v12;
      a2[1] = v11;
      a2[2] = v25;
      return;
    }
  }
  else
  {
    if (v20 < 0)
      operator delete(__p[0]);
    v16 = v22;
    if (v22)
    {
      v17 = (unint64_t *)&v22->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  sub_1D528F9B4(a2, 4uLL, &v26);
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
}

void sub_1D53B122C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D53B1274(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *__p[2];
  char v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *v9;

  v9 = &unk_1E997C018;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v7);
  v1 = v7;
  sub_1D52850A0(__p, "redGreenBlue");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v1 + 600))(v1, __p, &v9, 3);
  if (v6 < 0)
    operator delete(__p[0]);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1D53B1334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53B1360(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2784))(a1);
}

BOOL sub_1D53B136C(uint64_t a1)
{
  void *v1;
  void **p_lpsrc;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BOOL8 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v12;
  void *v13;
  std::__shared_weak_count *v14;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v1 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9973F70, 0)) != 0)
  {
    v13 = v1;
    v14 = v12;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v13;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v13)
  {
    (*(void (**)(void *, void **))(*(_QWORD *)v13 + 800))(v13, &lpsrc);
    v6 = (_BYTE)lpsrc != 0;
  }
  else
  {
    v6 = 0;
  }
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1D53B1478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53B148C(uint64_t a1)
{
  void *v2;
  void **p_lpsrc;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *lpsrc;
  std::__shared_weak_count *v14;
  void *v15;
  std::__shared_weak_count *v16;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v2 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9973F70, 0)) != 0)
  {
    v15 = v2;
    v16 = v14;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v15;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v15)
    v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v15 + 792))(v15);
  else
    v7 = sub_1D532C160(a1);
  v8 = v7;
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v8;
}

void sub_1D53B1594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1D53B15A8(uint64_t a1, unsigned int a2)
{
  void *v3;
  id v4;
  void *v5;
  void **p_lpsrc;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  id v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  void *lpsrc;
  std::__shared_weak_count *v96;
  __int16 v97;
  __int16 v98;
  __int16 v99;
  __int16 v100;
  __int16 v101;
  void *v102;
  std::__shared_weak_count *v103;

  sub_1D5320418(a1, a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (sub_1D5297E1C(a1))
  {
    v4 = v3;
  }
  else
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&lpsrc, a1);
    if (lpsrc
      && (v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9973F70, 0)) != 0)
    {
      v102 = v5;
      v103 = v96;
      p_lpsrc = &lpsrc;
    }
    else
    {
      p_lpsrc = &v102;
    }
    *p_lpsrc = 0;
    p_lpsrc[1] = 0;
    v7 = v96;
    if (v96)
    {
      p_shared_owners = (unint64_t *)&v96->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v102)
    {
      (*(void (**)(void *, void **))(*(_QWORD *)v102 + 800))(v102, &lpsrc);
      if ((_BYTE)lpsrc)
      {
        sub_1D52E1FDC(v3, CFSTR("PanasonicChromaticAberration"), 0);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = (void *)MEMORY[0x1D8272058]();
        objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], v12, lpsrc, v13, v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v10, v16, (uint64_t)v15, (uint64_t)CFSTR("ChAber_SW"), v17);

        objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v18, WORD1(lpsrc), v19, v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v10, v22, (uint64_t)v21, (uint64_t)CFSTR("CA1"), v23);

        objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v24, WORD2(lpsrc), v25, v26);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v10, v28, (uint64_t)v27, (uint64_t)CFSTR("CA2"), v29);

        objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v30, HIWORD(lpsrc), v31, v32);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v10, v34, (uint64_t)v33, (uint64_t)CFSTR("CA3"), v35);

        objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v36, (unsigned __int16)v96, v37, v38);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v10, v40, (uint64_t)v39, (uint64_t)CFSTR("CA4"), v41);

        objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v42, SWORD1(v96), v43, v44);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v10, v46, (uint64_t)v45, (uint64_t)CFSTR("RG1"), v47);

        objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v48, SWORD2(v96), v49, v50);
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v10, v52, (uint64_t)v51, (uint64_t)CFSTR("RG2"), v53);

        objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v54, SHIWORD(v96), v55, v56);
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v10, v58, (uint64_t)v57, (uint64_t)CFSTR("RG3"), v59);

        objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v60, v97, v61, v62);
        v63 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v10, v64, (uint64_t)v63, (uint64_t)CFSTR("RG4"), v65);

        objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v66, v98, v67, v68);
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v10, v70, (uint64_t)v69, (uint64_t)CFSTR("BG1"), v71);

        objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v72, v99, v73, v74);
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v10, v76, (uint64_t)v75, (uint64_t)CFSTR("BG2"), v77);

        objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v78, v100, v79, v80);
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v10, v82, (uint64_t)v81, (uint64_t)CFSTR("BG3"), v83);

        objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v84, v101, v85, v86);
        v87 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v10, v88, (uint64_t)v87, (uint64_t)CFSTR("BG4"), v89);

        objc_autoreleasePoolPop(v11);
      }
    }
    v90 = v3;
    v91 = v103;
    if (v103)
    {
      v92 = (unint64_t *)&v103->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
  }

  return v3;
}

void sub_1D53B1958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a5);

  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1D53B19C8(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  const char *v27;

  v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, (uint64_t)CFSTR("leicaCropRect"), v5, v6))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v24, a1);
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 448))(v24);
    v27 = v10;
    sub_1D53318E0((unsigned int *)&v26, v10, v11, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v25;
    if (!v25)
      goto LABEL_13;
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    goto LABEL_10;
  }
  if (!objc_msgSend_isEqualToString_(v3, v7, (uint64_t)CFSTR("cropRectFromTag"), v8, v9))
  {
    sub_1D54210E0(a1, v3);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_13;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v24, a1);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 456))(v24);
  v27 = v18;
  sub_1D53318E0((unsigned int *)&v26, v18, v19, v20, v21);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v25;
  if (v25)
  {
    v22 = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(v22);
    while (__stlxr(v17 - 1, v22));
LABEL_10:
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_13:

  return v14;
}

void sub_1D53B1B08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1D53B1B34(uint64_t a1)
{
  uint64_t v2;
  int v3;
  double v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = sub_1D534D428(v2, CFSTR("blackLevelOffsetAdjustment"), v3, &unk_1E99938D8);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D53B1BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_1D53B1BF4()
{
  return 0.0;
}

char *sub_1D53B1BFC(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  char *v7;
  char *result;

  *(_DWORD *)(a1 + 188) = a2;
  *(_DWORD *)(a1 + 192) = a3;
  v7 = (char *)(a1 + 200);
  if (v7 != (char *)a4)
    sub_1D5282A44(v7, *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  result = (char *)(a1 + 224);
  if (a1 + 224 != a5)
    return sub_1D5282A44(result, *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return result;
}

void *sub_1D53B1C60(uint64_t a1, int a2, size_t size)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v8;
  int v9;

  v9 = a2;
  v4 = size;
  v5 = malloc_type_malloc(size, 0x8AFC5D55uLL);
  v6 = *(_QWORD *)(a1 + 24);
  sub_1D5282F74(&v8, &v9);
  (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v6 + 40))(v6, &v8, 0);
  (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5, v4);
  return v5;
}

void sub_1D53B1CF4(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    free(v1);
  __cxa_end_catch();
  JUMPOUT(0x1D53B1CDCLL);
}

void sub_1D53B1D18(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int16 v34;
  __int16 v35;
  _WORD *v36;
  int v37;
  int v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;

  applejpeg_decode_create();
  if (applejpeg_decode_open_mem()
    || applejpeg_decode_set_option_outformat()
    || applejpeg_decode_get_image_info()
    || a5[2] != 2 * v37
    || a5[3] != 2 * v38
    || applejpeg_decode_get_output_buffer_size()
    || 2 * a5[2] * a5[2])
  {
    v26 = 0;
  }
  else
  {
    objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v9, 0, v10, v11);
    v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    objc_msgSend_mutableBytes(v12, v13, v14, v15, v16);
    if (applejpeg_decode_image_all())
      goto LABEL_16;
    v39.origin.x = (double)*a3;
    v39.origin.y = (double)a3[1];
    v39.size.width = (double)a3[2];
    v39.size.height = (double)a3[3];
    v41.origin.x = (double)*a5;
    v41.origin.y = (double)a5[1];
    v41.size.width = (double)a5[2];
    v41.size.height = (double)a5[3];
    v40 = CGRectIntersection(v39, v41);
    v17 = (unint64_t)(v40.origin.y - (double)a3[1]);
    v18 = v17 + (unint64_t)v40.size.height;
    if (v18 <= v17)
    {
LABEL_16:
      v26 = v12;
    }
    else
    {
      v19 = (unint64_t)(v40.origin.x - (double)*a3);
      v20 = v19 + (unint64_t)v40.size.width;
      v21 = v17 * a4 + 2 * v19;
      v22 = v21 + a4 + a2 + 2;
      v23 = 2 * a4;
      v24 = a2 + v21;
      v25 = v17;
      do
      {
        v26 = objc_retainAutorelease(v12);
        v31 = objc_msgSend_bytes(v26, v27, v28, v29, v30);
        if (v20 > v19)
        {
          v32 = 0;
          v33 = v19;
          do
          {
            v34 = *(_WORD *)(v31 + ((2 * v32) | 4));
            v35 = *(_WORD *)(v31 + ((2 * v32) | 6));
            *(_DWORD *)(v24 + v32) = *(_DWORD *)(v31 + 2 * (v32 & 0x7FFFFFFFFFFFFFFCLL));
            v36 = (_WORD *)(v22 + v32);
            *(v36 - 1) = v34;
            *v36 = v35;
            v33 += 2;
            v32 += 4;
          }
          while (v33 < v20);
        }
        v25 += 2;
        v22 += v23;
        v24 += v23;
      }
      while (v25 < v18);
    }
  }
  applejpeg_decode_destroy();

}

void sub_1D53B1F94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *sub_1D53B1FB8(size_t a1)
{
  return malloc_type_malloc(a1, 0x5167B75AuLL);
}

void sub_1D53B1FC8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unsigned int v13;
  void *exception;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v3 = *(unsigned int *)(a1 + 44);
  v2 = *(_DWORD *)(a1 + 48);
  v4 = *(_DWORD *)(a1 + 188);
  v5 = *(_DWORD *)(a1 + 192);
  v16 = (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 2;
  sub_1D5282FE0(&v19, (unint64_t *)&v16);
  if (*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200) != *(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)
    || (v3 - 100000) < 0xFFFE7961
    || (v2 - 100000) < 0xFFFE7961
    || v4 - 100000 < 0xFFFE7961
    || v5 - 100000 < 0xFFFE7961
    || (v6 = v19, v19 >= 20000)
    || (v2 + v5 - 1) / v5 * ((v3 + v4 - 1) / v4) != v19)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v15 = sub_1D530B618(a1);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 4 * v6;
    do
    {
      v16 = __PAIR64__(v9, v8);
      v17 = v4;
      v18 = v5;
      v11 = sub_1D53B1C60(a1, *(_DWORD *)(*(_QWORD *)(a1 + 200) + v7), *(unsigned int *)(*(_QWORD *)(a1 + 224) + v7));
      if (v11)
      {
        v12 = v11;
        sub_1D53B1D18((uint64_t)v11, v15 + 2 * (int)(v9 * v3) + 2 * (int)v8, (int *)&v16, 2 * v3, (int *)&v16);
        free(v12);
      }
      v7 += 4;
      if ((int)(v8 + v4) >= (int)v3)
        v13 = v5;
      else
        v13 = 0;
      v9 += v13;
      if ((int)(v8 + v4) >= (int)v3)
        v8 = 0;
      else
        v8 += v4;
    }
    while (v10 != v7);
  }
}

void sub_1D53B2238(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D53B2264(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unsigned int v16;
  void *exception;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;

  v7 = *(_DWORD *)(a1 + 44);
  v6 = *(_DWORD *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 188);
  v9 = *(_DWORD *)(a1 + 192);
  v20 = (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 2;
  sub_1D5282FE0(&v23, (unint64_t *)&v20);
  if (*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200) != *(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)
    || (v7 - 100000) < 0xFFFE7961
    || (v6 - 100000) < 0xFFFE7961
    || v8 - 100000 < 0xFFFE7961
    || v9 - 100000 < 0xFFFE7961
    || v23 >= 20000
    || (v6 + v9 - 1) / v9 * ((v7 + v8 - 1) / v8) != v23)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v23)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 4 * v23;
    do
    {
      v20 = __PAIR64__(v12, v11);
      v21 = v8;
      v22 = v9;
      if (sub_1D53ADDB8((int *)&v20, a3))
      {
        v14 = sub_1D53B1C60(a1, *(_DWORD *)(*(_QWORD *)(a1 + 200) + v10), *(unsigned int *)(*(_QWORD *)(a1 + 224) + v10));
        if (v14)
        {
          v15 = v14;
          sub_1D53B1D18((uint64_t)v14, a2, a3, a4, (int *)&v20);
          free(v15);
        }
      }
      if ((int)(v11 + v8) >= v7)
        v16 = v9;
      else
        v16 = 0;
      v12 += v16;
      if ((int)(v11 + v8) >= v7)
        v11 = 0;
      else
        v11 += v8;
      v10 += 4;
    }
    while (v13 != v10);
  }
}

void sub_1D53B24CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53B24F8(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E99944D8;
  v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[25];
  if (v3)
  {
    a1[26] = v3;
    operator delete(v3);
  }
  return sub_1D5282F0C(a1);
}

void sub_1D53B2544(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E99944D8;
  v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[25];
  if (v3)
  {
    a1[26] = v3;
    operator delete(v3);
  }
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D53B2618(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53B2734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id sub_1D53B27E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[11];
  _QWORD v43[2];

  v43[1] = *MEMORY[0x1E0C80C00];
  v5 = *MEMORY[0x1E0CBD388];
  v34 = *MEMORY[0x1E0CBD368];
  v35 = v5;
  v42[0] = MEMORY[0x1E0C9AAB0];
  v42[1] = CFSTR("com.samsung.raw-image");
  v6 = *MEMORY[0x1E0CBD380];
  v36 = *MEMORY[0x1E0CBD348];
  v42[2] = CFSTR(".srw.");
  v42[3] = &unk_1E99CB7C0;
  v42[4] = &unk_1E99CB7D8;
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], a2, (uint64_t)sub_1D53B2A98, a4, a5, v34, v35, v36, v6, *MEMORY[0x1E0CBD370], *MEMORY[0x1E0CBD378]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v42[5] = v7;
  v37 = *MEMORY[0x1E0CBD330];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v8, (uint64_t)sub_1D53B2AE0, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v42[6] = v11;
  v38 = *MEMORY[0x1E0CBD350];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v12, (uint64_t)sub_1D53B2AEC, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v42[7] = v15;
  v39 = *MEMORY[0x1E0CBD338];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v16, (uint64_t)sub_1D52E8DA4, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v42[8] = v19;
  v40 = *MEMORY[0x1E0CBD358];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v20, (uint64_t)sub_1D53B2AF8, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v42[9] = v23;
  v41 = *MEMORY[0x1E0CBD360];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v24, (uint64_t)sub_1D53B2B04, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v42[10] = v27;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v28, (uint64_t)v42, (uint64_t)&v34, 11);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v43[0] = v29;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v30, (uint64_t)v43, 1, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  return v32;
}

void sub_1D53B2A38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

uint64_t sub_1D53B2A98(unsigned __int8 *a1, unint64_t a2, void *a3)
{
  uint64_t result;
  unsigned __int16 v5;

  v5 = 42;
  result = sub_1D52C0354(a1, a2, &v5);
  if ((_DWORD)result)
    return sub_1D52EB764(CFSTR("com.samsung.raw-image"), a3);
  return result;
}

void sub_1D53B2AE0(const void *a1, uint64_t a2, uint64_t a3)
{
  sub_1D52E7A20(a1, a2, a3, &unk_1E99945C0);
}

uint64_t sub_1D53B2AEC(os_signpost_id_t a1)
{
  return sub_1D52E8C40(a1);
}

uint64_t sub_1D53B2AF8(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1D52E7438(a1, a2, a3, &unk_1E99945C0);
}

uint64_t sub_1D53B2B04(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1D52E9A7C(a1, a2, a3, &unk_1E99945C0);
}

void sub_1D53B2B10(uint64_t *a1@<X1>, char a2@<W2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X8>)
{
  __int128 v8;
  id v9;
  id v10;
  char v11;

  v11 = a2;
  v10 = a3;
  v9 = a4;
  sub_1D53B45E8(a1, &v11, &v10, &v9, &v8);
  *a5 = v8;

}

void sub_1D53B2B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D53B2BA8(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  v13 = 0;
  sub_1D52917E4(a1, &v11);
  v2 = (*(int (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v13 = v2;
  sub_1D52917E4(a1, &v11);
  v6 = sub_1D52845E4(v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v6);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_1D528594C(&v11, &v13);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 144))(a1, &v11);
  LODWORD(v11) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 160))(a1, &v11);
  return 1;
}

void sub_1D53B2CCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D53B2CE4(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  unsigned int v6;
  std::__shared_weak_count *size;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  std::string::size_type v20;
  std::string::size_type v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int shared_weak_owners_high;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  char *v59;
  char *v60;
  void *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unsigned int v65;
  int v66;
  int v67;
  std::string::size_type v68;
  std::string::size_type v69;
  void *v70;
  uint64_t v71;
  unint64_t v72;
  int64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  int v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  __int128 v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  void *v86;
  void *exception;
  int v88;
  int v89;
  std::string *p_dst;
  std::__shared_weak_count *v91;
  __int128 *v92[3];
  void *v93[2];
  uint64_t v94;
  void *v95;
  std::__shared_weak_count *v96;
  unint64_t v97;
  std::string __p;
  std::string __dst;

  nullsub_6();
  v6 = *a3;
  if (v6 <= 0xA01F)
  {
    if (v6 == 53)
    {
      if (a3[1] == 4 && *((_DWORD *)a3 + 1) == 1)
        (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(_QWORD *)a1 + 720))(a1, a2, a3);
      return;
    }
    if (v6 != 40976
      || a3[1] != 4
      || *((_DWORD *)a3 + 1) != 8
      || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) != 0)
    {
      return;
    }
    sub_1D52917E4(a1, &__p);
    LODWORD(v93[0]) = *((_DWORD *)a3 + 2);
    sub_1D5282F74((int *)&v95, (int *)v93);
    sub_1D5285164((uint64_t *)&__dst, (uint64_t *)&__p, (uint64_t)&v95, 0);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v8 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    sub_1D52917E4(a1, &v95);
    LODWORD(v93[0]) = *((_DWORD *)a3 + 1);
    sub_1D5284E3C(v95, (unsigned int *)v93, (uint64_t *)&__p);
    v10 = v96;
    if (v96)
    {
      p_shared_owners = (unint64_t *)&v96->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (char *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
LABEL_78:
      operator delete(v13);
    }
LABEL_79:
    sub_1D5285200((uint64_t *)&__dst);
    return;
  }
  if (v6 == 40992)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) != 0
      || a3[1] != 4
      || *((_DWORD *)a3 + 1) != 11)
    {
      return;
    }
    sub_1D52917E4(a1, &__p);
    LODWORD(v93[0]) = *((_DWORD *)a3 + 2);
    sub_1D5282F74((int *)&v95, (int *)v93);
    sub_1D5285164((uint64_t *)&__dst, (uint64_t *)&__p, (uint64_t)&v95, 0);
    v14 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v15 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    memset(&__p, 0, sizeof(__p));
    if (*((_DWORD *)a3 + 1))
    {
      v17 = 0;
      do
      {
        sub_1D52917E4(a1, &v95);
        v18 = sub_1D52847F8((uint64_t)v95);
        v19 = v18;
        v20 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
        {
          v22 = (void *)__p.__r_.__value_.__r.__words[0];
          v23 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
            sub_1D5282B8C();
          v25 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v24)
            v24 = v25 >> 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)sub_1D5282BA0((uint64_t)&__p.__r_.__value_.__r.__words[2], v26);
            v20 = __p.__r_.__value_.__l.__size_;
            v22 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            v27 = 0;
          }
          v28 = &v27[4 * v23];
          *(_DWORD *)v28 = v19;
          v21 = (std::string::size_type)(v28 + 4);
          while ((void *)v20 != v22)
          {
            v29 = *(_DWORD *)(v20 - 4);
            v20 -= 4;
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
          __p.__r_.__value_.__l.__size_ = v21;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v27[4 * v26];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *(_DWORD *)__p.__r_.__value_.__l.__size_ = v18;
          v21 = v20 + 4;
        }
        __p.__r_.__value_.__l.__size_ = v21;
        v30 = v96;
        if (v96)
        {
          v31 = (unint64_t *)&v96->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        ++v17;
      }
      while (v17 < *((_DWORD *)a3 + 1));
      v33 = (char *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      v33 = 0;
    }
    if ((std::string *)(a1 + 1184) != &__p)
    {
      sub_1D5282A44((char *)(a1 + 1184), v33, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - (_QWORD)v33) >> 2);
      v33 = (char *)__p.__r_.__value_.__r.__words[0];
    }
    if (v33)
    {
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
      v13 = v33;
      goto LABEL_78;
    }
    goto LABEL_79;
  }
  if (v6 == 40993)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) != 0
      || a3[1] != 4
      || *((_DWORD *)a3 + 1) != 4)
    {
      return;
    }
    if (*(_QWORD *)(a1 + 1192) - *(_QWORD *)(a1 + 1184) != 44)
      goto LABEL_166;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1D5290130(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
      if (*(char *)(a2 + 23) < 0)
      {
        sub_1D5290130(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_82:
        std::string::append(&__dst, ":WhitePoint", 0xBuLL);
        std::string::append(&__p, ":WhitePointDecrypted", 0x14uLL);
        v95 = 0;
        v96 = 0;
        v97 = 0;
        v93[0] = 0;
        v93[1] = 0;
        v94 = 0;
        sub_1D52917E4(a1, &p_dst);
        v88 = *((_DWORD *)a3 + 2);
        sub_1D5282F74(&v89, &v88);
        sub_1D5285164((uint64_t *)v92, (uint64_t *)&p_dst, (uint64_t)&v89, 0);
        v35 = v91;
        if (v91)
        {
          v36 = (unint64_t *)&v91->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        if (*((_DWORD *)a3 + 1))
        {
          v38 = 0;
          do
          {
            sub_1D52917E4(a1, &p_dst);
            v39 = sub_1D52847F8((uint64_t)p_dst);
            v40 = v39;
            v41 = v96;
            if ((unint64_t)v96 >= v97)
            {
              v43 = (std::__shared_weak_count *)v95;
              v44 = ((char *)v96 - (_BYTE *)v95) >> 2;
              v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 62)
                sub_1D5282B8C();
              v46 = v97 - (_QWORD)v95;
              if ((uint64_t)(v97 - (_QWORD)v95) >> 1 > v45)
                v45 = v46 >> 1;
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
                v47 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v47 = v45;
              if (v47)
              {
                v48 = (char *)sub_1D5282BA0((uint64_t)&v97, v47);
                v43 = (std::__shared_weak_count *)v95;
                v41 = v96;
              }
              else
              {
                v48 = 0;
              }
              v49 = &v48[4 * v44];
              *(_DWORD *)v49 = v40;
              v42 = (std::__shared_weak_count *)(v49 + 4);
              while (v41 != v43)
              {
                shared_weak_owners_high = HIDWORD(v41[-1].__shared_weak_owners_);
                v41 = (std::__shared_weak_count *)((char *)v41 - 4);
                *((_DWORD *)v49 - 1) = shared_weak_owners_high;
                v49 -= 4;
              }
              v95 = v49;
              v96 = v42;
              v97 = (unint64_t)&v48[4 * v47];
              if (v43)
                operator delete(v43);
            }
            else
            {
              LODWORD(v96->__vftable) = v39;
              v42 = (std::__shared_weak_count *)((char *)&v41->__vftable + 4);
            }
            v96 = v42;
            v51 = v91;
            if (v91)
            {
              v52 = (unint64_t *)&v91->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            ++v38;
          }
          while (v38 < *((_DWORD *)a3 + 1));
        }
        sub_1D5282A44((char *)v93, (char *)v95, (uint64_t)v96, ((char *)v96 - (_BYTE *)v95) >> 2);
        v54 = v93[0];
        if (v93[1] != v93[0])
        {
          v55 = 0;
          v56 = ((char *)v93[1] - (char *)v93[0]) >> 2;
          v57 = *(_QWORD *)(a1 + 1184);
          do
          {
            v54[v55] -= *(_DWORD *)(v57 + 4 * ((v55 + 4) % v56));
            ++v55;
          }
          while (v56 > v55);
        }
        v58 = (uint64_t **)(a1 + 120);
        p_dst = &__dst;
        v59 = (char *)(sub_1D52B3E7C(v58, (void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_dst)+ 7);
        if (v59 != (char *)&v95)
          sub_1D5282A44(v59, (char *)v95, (uint64_t)v96, ((char *)v96 - (_BYTE *)v95) >> 2);
        p_dst = &__p;
        v60 = (char *)(sub_1D52B3E7C(v58, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_dst)+ 7);
        if (v60 != (char *)v93)
          sub_1D5282A44(v60, (char *)v93[0], (uint64_t)v93[1], ((char *)v93[1] - (char *)v93[0]) >> 2);
        sub_1D5285200((uint64_t *)v92);
        if (v93[0])
        {
          v93[1] = v93[0];
          operator delete(v93[0]);
        }
        if (v95)
        {
          v96 = (std::__shared_weak_count *)v95;
          operator delete(v95);
        }
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_162;
        v61 = (void *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_161;
      }
    }
    else
    {
      __dst = *(std::string *)a2;
    }
    __p = *(std::string *)a2;
    goto LABEL_82;
  }
  if (v6 == 41000
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) == 0
    && a3[1] == 9
    && *((_DWORD *)a3 + 1) == 4)
  {
    if (*(_QWORD *)(a1 + 1192) - *(_QWORD *)(a1 + 1184) == 44)
    {
      if (*(char *)(a2 + 23) < 0)
        sub_1D5290130(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
      else
        __dst = *(std::string *)a2;
      std::string::append(&__dst, ":BlackLevel", 0xBuLL);
      memset(&__p, 0, sizeof(__p));
      sub_1D52917E4(a1, v93);
      LODWORD(p_dst) = *((_DWORD *)a3 + 2);
      sub_1D5282F74((int *)v92, (int *)&p_dst);
      sub_1D5285164((uint64_t *)&v95, (uint64_t *)v93, (uint64_t)v92, 0);
      v62 = (std::__shared_weak_count *)v93[1];
      if (v93[1])
      {
        v63 = (unint64_t *)((char *)v93[1] + 8);
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      if (*((_DWORD *)a3 + 1))
      {
        v65 = 0;
        do
        {
          sub_1D52917E4(a1, v93);
          v66 = sub_1D52847F8((uint64_t)v93[0]);
          v67 = v66;
          v68 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v70 = (void *)__p.__r_.__value_.__r.__words[0];
            v71 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
            v72 = v71 + 1;
            if ((unint64_t)(v71 + 1) >> 62)
              sub_1D5282B8C();
            v73 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
            if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v72)
              v72 = v73 >> 1;
            if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
              v74 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v74 = v72;
            if (v74)
            {
              v75 = (char *)sub_1D5282BA0((uint64_t)&__p.__r_.__value_.__r.__words[2], v74);
              v68 = __p.__r_.__value_.__l.__size_;
              v70 = (void *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              v75 = 0;
            }
            v76 = &v75[4 * v71];
            *(_DWORD *)v76 = v67;
            v69 = (std::string::size_type)(v76 + 4);
            while ((void *)v68 != v70)
            {
              v77 = *(_DWORD *)(v68 - 4);
              v68 -= 4;
              *((_DWORD *)v76 - 1) = v77;
              v76 -= 4;
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
            __p.__r_.__value_.__l.__size_ = v69;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v75[4 * v74];
            if (v70)
              operator delete(v70);
          }
          else
          {
            *(_DWORD *)__p.__r_.__value_.__l.__size_ = v66;
            v69 = v68 + 4;
          }
          __p.__r_.__value_.__l.__size_ = v69;
          v78 = (std::__shared_weak_count *)v93[1];
          if (v93[1])
          {
            v79 = (unint64_t *)((char *)v93[1] + 8);
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          ++v65;
        }
        while (v65 < *((_DWORD *)a3 + 1));
      }
      v81 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v82 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        v83 = 0;
        v84 = *(_QWORD *)(a1 + 1184);
        do
        {
          *(_DWORD *)(v81 + 4 * v83) -= *(_DWORD *)(v84 + 4 * (v83 % v82));
          ++v83;
        }
        while (v82 > v83);
      }
      v93[0] = 0;
      v93[1] = 0;
      v94 = 0;
      sub_1D53B4538((char *)v93, (int *)v81, *((int **)&v81 + 1), v82);
      v92[0] = (__int128 *)&__dst;
      v85 = sub_1D52B3E7C((uint64_t **)(a1 + 264), (void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, v92);
      v86 = (void *)v85[7];
      if (v86)
      {
        v85[8] = (uint64_t)v86;
        operator delete(v86);
        v85[7] = 0;
        v85[8] = 0;
        v85[9] = 0;
      }
      *(_OWORD *)(v85 + 7) = *(_OWORD *)v93;
      v85[9] = v94;
      sub_1D5285200((uint64_t *)&v95);
      v61 = (void *)__p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_162;
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
LABEL_161:
      operator delete(v61);
LABEL_162:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    }
LABEL_166:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
}

void sub_1D53B3764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 73) < 0)
    operator delete(*(void **)(v26 - 96));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D53B38EC(uint64_t a1)
{
  _BOOL4 v2;
  void *__p[2];
  char v5;
  unsigned int v6;

  v6 = 1;
  sub_1D52850A0(__p, "IFD0:SUBIFD1");
  v2 = sub_1D52A89D8(a1, __p, &v6);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v2)
    return v6;
  else
    return 1;
}

void sub_1D53B3958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D53B3974(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  sub_1D52850A0(__p, "IFD0:SUBIFD1");
  v2 = sub_1D52B0BBC(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D53B39CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D53B39E8(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  sub_1D52850A0(__p, "IFD0:SUBIFD1");
  v2 = sub_1D52B0C2C(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D53B3A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1D53B3A5C(uint64_t a1)
{
  unint64_t v2;
  void *__p[2];
  char v5;

  sub_1D52850A0(__p, "IFD0:SUBIFD1");
  v2 = sub_1D52B0D58(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D53B3AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D53B3AD0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *__p[2];
  char v18;

  v4 = a1 + 704;
  sub_1D52850A0(__p, "IFD0");
  sub_1D5294144(v4, __p);
  if (v18 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_1D52850A0(__p, "IFD0:SUBIFD0");
  sub_1D52AFFE8(a1, __p, &v16);
  if (v18 < 0)
    operator delete(__p[0]);
  sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE:SUBIFD0");
  sub_1D52AFFE8(a1, __p, &v15);
  if (v18 < 0)
    operator delete(__p[0]);
  sub_1D52850A0(__p, "IFD1:SUBIFD0");
  sub_1D52AFFE8(a1, __p, &v14);
  if (v18 < 0)
    operator delete(__p[0]);
  if ((_QWORD)v16)
    sub_1D52B0A7C((char **)a2, &v16);
  if ((_QWORD)v15)
    sub_1D52B0A7C((char **)a2, &v15);
  if ((_QWORD)v14)
    sub_1D52B0A7C((char **)a2, &v14);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1D53B3CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a12);
  sub_1D5282EB4((uint64_t)&a14);
  sub_1D5282E44((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53B3D54(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  int *v4;
  int v5;
  int v6;
  uint64_t result;
  void *__p[2];
  char v9;

  v2 = a1 + 656;
  sub_1D52850A0(__p, "IFD0:SUBIFD1");
  v3 = sub_1D5294144(v2, __p);
  if ((void **)(a1 + 664) == v3 || (v4 = (int *)v3[7], v3[8] == v4))
  {
    LOBYTE(v5) = 0;
    v6 = 0;
  }
  else
  {
    v5 = *v4;
    v6 = 1;
  }
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (v6)
      goto LABEL_7;
LABEL_9:
    LOWORD(result) = sub_1D52919BC();
    return (unsigned __int16)result;
  }
  if (!v6)
    goto LABEL_9;
LABEL_7:
  LODWORD(result) = ~(-1 << v5);
  return (unsigned __int16)result;
}

void sub_1D53B3E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D53B3E1C(_QWORD *a1)
{
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 536))(a1) == 32769)
    return 1;
  else
    return sub_1D5290950(a1);
}

void sub_1D53B3E64(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  __int128 v18;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 536))(a1);
  if (v8 == 32769)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 384))(&v16, a1);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1);
    sub_1D52C0774(&v16, (unint64_t *)&v15, a2, a3, &v18);
    v12 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    goto LABEL_14;
  }
  if (v8 == 32770)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 384))(&v16, a1);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1);
    sub_1D52C0B28(&v16, (unint64_t *)&v15, a2, a3, &v18);
    v9 = v17;
    if (v17)
    {
      v10 = (unint64_t *)&v17->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    sub_1D5319468(v18, 0);
    sub_1D5319470(v18, 1);
LABEL_14:
    *(_OWORD *)a4 = v18;
    return;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
}

void sub_1D53B3FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D53B400C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  std::string __p;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t *v45;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_1D52850A0(&__p, "srw");
  v4 = a2[2];
  v5 = a2[1];
  if (v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a2) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a2) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v45 = a2 + 2;
    if (v10)
      v11 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v10);
    else
      v11 = 0;
    v12 = &v11[24 * v7];
    v41 = v11;
    v42 = v12;
    v44 = &v11[24 * v10];
    v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v12 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v12 = v13;
    memset(&__p, 0, sizeof(__p));
    v43 = v12 + 24;
    sub_1D5293D58(a2, &v41);
    v14 = a2[1];
    sub_1D5293F24((uint64_t)&v41);
    v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v14;
    if (v15 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v5 = v6;
    a2[1] = v5 + 24;
  }
  sub_1D52850A0(&__p, "samsung");
  v17 = a2[1];
  v16 = a2[2];
  if (v17 >= v16)
  {
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a2) >> 3);
    v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a2) >> 3);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v20;
    v45 = a2 + 2;
    if (v22)
      v23 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v22);
    else
      v23 = 0;
    v24 = &v23[24 * v19];
    v41 = v23;
    v42 = v24;
    v44 = &v23[24 * v22];
    v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v24 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v24 = v25;
    memset(&__p, 0, sizeof(__p));
    v43 = v24 + 24;
    sub_1D5293D58(a2, &v41);
    v26 = a2[1];
    sub_1D5293F24((uint64_t)&v41);
    v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v26;
    if (v27 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v17 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v17 = v18;
    a2[1] = v17 + 24;
  }
  sub_1D5293780(a1, &__p);
  v29 = a2[1];
  v28 = a2[2];
  if (v29 >= v28)
  {
    v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *a2) >> 3);
    v32 = v31 + 1;
    if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a2) >> 3);
    if (2 * v33 > v32)
      v32 = 2 * v33;
    if (v33 >= 0x555555555555555)
      v34 = 0xAAAAAAAAAAAAAAALL;
    else
      v34 = v32;
    v45 = a2 + 2;
    if (v34)
      v35 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v34);
    else
      v35 = 0;
    v36 = &v35[24 * v31];
    v41 = v35;
    v42 = v36;
    v44 = &v35[24 * v34];
    v37 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v36 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v36 = v37;
    memset(&__p, 0, sizeof(__p));
    v43 = v36 + 24;
    sub_1D5293D58(a2, &v41);
    v38 = a2[1];
    sub_1D5293F24((uint64_t)&v41);
    v39 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v38;
    if (v39 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v29 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v29 = v30;
    a2[1] = v29 + 24;
  }
}

void sub_1D53B4360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1D5293F24((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_1D5293CCC((void ***)&__p);
  _Unwind_Resume(a1);
}

id sub_1D53B43B8()
{
  void *v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD v16[5];
  _QWORD v17[6];

  v17[5] = *MEMORY[0x1E0C80C00];
  sub_1D52A947C();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend_mutableCopy(v0, v1, v2, v3, v4);

  v16[0] = &unk_1E99CB7F0;
  v16[1] = &unk_1E99CB820;
  v17[0] = &unk_1E99D11C8;
  v17[1] = &unk_1E99D11F0;
  v16[2] = &unk_1E99CB838;
  v16[3] = &unk_1E99CB850;
  v17[2] = &unk_1E99D1218;
  v17[3] = &unk_1E99D1240;
  v16[4] = &unk_1E99CB868;
  v17[4] = &unk_1E99D1268;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v6, (uint64_t)v17, (uint64_t)v16, 5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addEntriesFromDictionary_(v5, v8, (uint64_t)v7, v9, v10);

  objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E0C99D80], v11, (uint64_t)v5, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

void sub_1D53B44D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1D53B4514(_QWORD *a1)
{
  sub_1D53B45AC(a1);
  JUMPOUT(0x1D8271ADCLL);
}

char *sub_1D53B4538(char *result, int *a2, int *a3, unint64_t a4)
{
  char *v6;
  double *v7;
  int v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D5282CE8(result, a4);
    v7 = (double *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = (double)v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1D53B4590(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D53B45AC(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E99945F0;
  v2 = (void *)a1[148];
  if (v2)
  {
    a1[149] = v2;
    operator delete(v2);
  }
  return sub_1D52B2190((uint64_t)a1);
}

void sub_1D53B45E8(uint64_t *a1@<X1>, char *a2@<X2>, void **a3@<X3>, void **a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x4D0uLL);
  sub_1D53B4668(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D53B4654(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53B4668(_QWORD *a1, uint64_t *a2, char *a3, void **a4, void **a5)
{
  a1[2] = 0;
  *a1 = &unk_1E9994928;
  a1[1] = 0;
  sub_1D52A7E98((uint64_t)(a1 + 3), a2, *a3, *a4, *a5);
  a1[3] = off_1E99945F0;
  a1[151] = 0;
  a1[153] = 0;
  a1[152] = 0;
  return a1;
}

void sub_1D53B46C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53B46D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9994928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53B46EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9994928;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53B4720(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

id sub_1D53B4730(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  void *v8;
  id v9;
  void *v10;

  v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, (uint64_t)CFSTR("isSonySRFCompressedRaw"), v5, v6))
  {
    v7 = sub_1D53B47B8(a1);
    v8 = (void *)MEMORY[0x1E0C9AAA0];
    if (v7)
      v8 = (void *)MEMORY[0x1E0C9AAB0];
    v9 = v8;
  }
  else
  {
    sub_1D54210E0(a1, v3);
    v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  v10 = v9;

  return v10;
}

void sub_1D53B47A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1D53B47B8(uint64_t a1)
{
  void *v2;
  void **p_lpsrc;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BOOL8 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *lpsrc;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v2 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9975D70, 0)) != 0)
  {
    v14 = (uint64_t)v2;
    v15 = v13;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = (void **)&v14;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v14)
  {
    v7 = sub_1D52EE230(v14) == 2;
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    v7 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 864))(a1) > 0xFFF;
  }
  else
  {
    v7 = 0;
  }
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v7;
}

void sub_1D53B48E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D53B4900(uint64_t a1)
{
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  void *v8;
  int v9;
  int v10;
  void *__p[2];
  char v12;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2192))(a1);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 2200))(__p, a1);
  v8 = &unk_1E99851F0;
  v9 = 0;
  v10 = v2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v6, a1);
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v6 + 600))(v6, __p, &v8, 3);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_1D53B49E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_1D5282EB4((uint64_t)&a10);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1D53B4A10(uint64_t a1@<X0>, void **a2@<X8>)
{
  int v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15;
  void *v16;
  __CFString *v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD v22[5];
  void *__p;
  std::__shared_weak_count *v24;
  char v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
  if (v4 == 11)
  {
LABEL_23:
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&__p, a1);
    v16 = __p;
    v17 = off_1EFF31DF0[0];
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = sub_1D53B4C84;
    v22[3] = &unk_1E9978FB8;
    v22[4] = a1;
    sub_1D531B308((uint64_t)v16, v17, v18, v22, a2);
    v19 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    return;
  }
  if (v4 != 10)
  {
    sub_1D5422158(a1, a2);
    return;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v26, a1);
  v5 = v26;
  sub_1D52850A0(&__p, "IFD0:DNGPrivate:SR2Private:SR2SubIFD:BlackLevels");
  if (!(*(unsigned int (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v5 + 248))(v5, &__p, a2, 0))
  {
    if (v25 < 0)
      operator delete(__p);
    v12 = v27;
    if (v27)
    {
      v13 = (unint64_t *)&v27->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    goto LABEL_21;
  }
  v7 = *a2;
  v6 = a2[1];
  if (v25 < 0)
    operator delete(__p);
  v8 = v6 - v7;
  v9 = v27;
  if (v27)
  {
    v10 = (unint64_t *)&v27->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v8 != 32)
  {
LABEL_21:
    v15 = *a2;
    if (*a2)
    {
      a2[1] = v15;
      operator delete(v15);
    }
    goto LABEL_23;
  }
}

void sub_1D53B4C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  void *v22;

  if (a19 < 0)
    operator delete(__p);
  sub_1D5282EB4(v20 - 48);
  v22 = *(void **)v19;
  if (*(_QWORD *)v19)
  {
    *(_QWORD *)(v19 + 8) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

void sub_1D53B4C84(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1D5422158(*(_QWORD *)(a1 + 32), a2);
}

uint64_t sub_1D53B4C8C(uint64_t a1)
{
  uint64_t result;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1)
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2808))(a1) == 7)
  {
    return 1;
  }
  if ((sub_1D5297E24(a1) & 1) != 0)
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2792))(a1);
    if ((_DWORD)result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2800))(a1);
  }
  return result;
}

uint64_t sub_1D53B4D2C(uint64_t a1)
{
  void *v1;
  void **p_lpsrc;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *lpsrc;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v1 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9975D70, 0)) != 0)
  {
    v17 = (uint64_t)v1;
    v18 = v16;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = (void **)&v17;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v3 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v17)
  {
    v6 = sub_1D52EDD00(v17);
    v7 = v6 & 1;
    if ((v6 & 0x10) != 0)
      v7 = 0;
    if ((~v6 & 0x11) != 0)
      v8 = v7;
    else
      v8 = 1;
    if (v6 == 255)
      v9 = 0;
    else
      v9 = v8;
    if (v6)
      v10 = v9;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v10;
}

void sub_1D53B4E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53B4E64(uint64_t a1)
{
  int v2;
  uint64_t v4;
  void *v5;
  void **p_lpsrc;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int16 v10;
  int v11;
  int v12;
  unsigned int v13;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *lpsrc;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2808))(a1);
  if (v2 == 3 || v2 == 5)
    return 1;
  if (v2 != 4)
    return 0;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&lpsrc, a1);
  if (lpsrc
    && (v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9975D70, 0)) != 0)
  {
    v21 = (uint64_t)v5;
    v22 = v20;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = (void **)&v21;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v7 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v21)
  {
    v10 = sub_1D52EDD00(v21);
    v11 = v10 & 1;
    if ((v10 & 0x10) != 0)
      v11 = 0;
    if ((~v10 & 0x11) != 0)
      v12 = v11;
    else
      v12 = 1;
    if (v10 == 255)
      v13 = 0;
    else
      v13 = v12;
    if ((unsigned __int16)(v10 - 1) <= 0xFEFEu && (v10 & 0x100) == 0)
      v4 = v13;
    else
      v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v4;
}

void sub_1D53B4FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53B4FE4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2800))(a1);
}

void sub_1D53B5064(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53B5180(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1D53B5230(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2784))(a1);
}

uint64_t sub_1D53B523C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2800))(a1);
}

BOOL sub_1D53B5248(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v4;
  void *v5;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 2824))(&v4);
  v1 = v4;
  v2 = v5;
  if (v4)
  {
    v5 = v4;
    operator delete(v4);
  }
  return v2 != v1;
}

void sub_1D53B5294(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double *v14;
  unint64_t v15;
  uint64_t v17;
  double *v18;
  char *v19;
  double v20;
  double *v21;
  int64x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  float64x2_t *v26;
  int64x2_t v27;
  int32x2_t v28;
  int32x2_t v29;
  int32x2_t v30;
  __int128 v31;
  __int128 v32;
  void *exception;
  void *v34;
  void *v35;
  _OWORD v36[2];
  _BYTE v37[34];
  double *v38;
  double *v39;

  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 496) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_1D53A4E1C(a1, a2, (_DWORD *)a3);
  if ((sub_1D5297E1C(a1) & 1) == 0)
  {
    (*(void (**)(double **__return_ptr, uint64_t))(*(_QWORD *)a1 + 2824))(&v38, a1);
    v9 = v38;
    v10 = (char *)v39 - (char *)v38;
    if (v39 == v38)
    {
      if (!v39)
        return;
    }
    else
    {
      if ((v10 & 8) != 0 || (v11 = v10 >> 3, (unint64_t)((v10 >> 3) - 6) >= 0x1D))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      LOBYTE(v36[0]) = 1;
      v12 = (unint64_t)*v38;
      if (v12 - 9 < 0xFFFFFFFFFFFFFFF8 || (v13 = (unint64_t)(v11 - 4) >> 1, v13 < v12))
      {
        v34 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v34, "RawCameraException");
        __cxa_throw(v34, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v14 = &v38[2 * v12];
      v15 = (unint64_t)v14[1];
      if (v15 - 9 < 0xFFFFFFFFFFFFFFF8 || v13 < v15)
      {
        v35 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v35, "RawCameraException");
        __cxa_throw(v35, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v17 = 0;
      v18 = v14 + 2;
      do
      {
        v19 = (char *)v36 + 2 * v17;
        v20 = v18[v17];
        *((_WORD *)v19 + 1) = (int)v9[v17 + 1];
        *((_WORD *)v19 + 9) = (int)v20;
        ++v17;
      }
      while (v12 != v17);
      v21 = &v9[v12];
      v22 = vcvtq_s64_f64(*(float64x2_t *)(v21 + 7));
      v23 = vmovn_s64(v22);
      v24 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(v21 + 5)));
      v25 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(v21 + 3)));
      *(int32x2_t *)v22.i8 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(v21 + 1)));
      *(int8x16_t *)&v37[2] = vqtbl4q_s8(*(int8x16x4_t *)(&v5 - 3), (int8x16_t)xmmword_1D544EA50);
      v26 = (float64x2_t *)&v9[3 * v12];
      v27 = vcvtq_s64_f64(v26[4]);
      v28 = vmovn_s64(v27);
      v29 = vmovn_s64(vcvtq_s64_f64(v26[3]));
      v30 = vmovn_s64(vcvtq_s64_f64(v26[2]));
      *(int32x2_t *)v27.i8 = vmovn_s64(vcvtq_s64_f64(v26[1]));
      *(int8x16_t *)&v37[18] = vqtbl4q_s8(*(int8x16x4_t *)(&v6 - 3), (int8x16_t)xmmword_1D544EA50);
      v31 = v36[0];
      *(_OWORD *)(a3 + 120) = v36[1];
      *(_OWORD *)(a3 + 104) = v31;
      v32 = *(_OWORD *)&v37[16];
      *(_OWORD *)(a3 + 136) = *(_OWORD *)v37;
      *(_OWORD *)(a3 + 152) = v32;
      *(_WORD *)(a3 + 168) = *(_WORD *)&v37[32];
    }
    v39 = v9;
    operator delete(v9);
  }
}

void sub_1D53B5518(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 40);
  if (v3)
  {
    *(_QWORD *)(v1 - 32) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id sub_1D53B5554(uint64_t a1, unsigned int a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double *v15;
  unint64_t v16;
  uint64_t v18;
  char *v19;
  _BYTE *v20;
  double v21;
  double *v22;
  int64x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  float64x2_t *v27;
  int64x2_t v28;
  int32x2_t v29;
  int32x2_t v30;
  int32x2_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  const char *v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  const char *v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  const char *v139;
  uint64_t v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  const char *v145;
  uint64_t v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  const char *v151;
  uint64_t v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  const char *v157;
  uint64_t v158;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  const char *v163;
  uint64_t v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  const char *v169;
  uint64_t v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  const char *v175;
  uint64_t v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  const char *v181;
  uint64_t v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  const char *v187;
  uint64_t v188;
  const char *v189;
  uint64_t v190;
  uint64_t v191;
  void *v192;
  const char *v193;
  uint64_t v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  const char *v199;
  uint64_t v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  const char *v205;
  uint64_t v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  const char *v211;
  uint64_t v212;
  const char *v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  const char *v217;
  uint64_t v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  const char *v223;
  uint64_t v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  const char *v229;
  uint64_t v230;
  id v231;
  id v232;
  void *exception;
  void *v235;
  void *v236;
  _BYTE v237[2];
  unsigned __int16 v238;
  unsigned __int16 v239;
  unsigned __int16 v240;
  unsigned __int16 v241;
  unsigned __int16 v242;
  unsigned __int16 v243;
  unsigned __int16 v244;
  unsigned __int16 v245;
  unsigned __int16 v246;
  unsigned __int16 v247;
  unsigned __int16 v248;
  unsigned __int16 v249;
  unsigned __int16 v250;
  unsigned __int16 v251;
  unsigned __int16 v252;
  unsigned __int16 v253;
  int8x16_t v254;
  int8x16_t v255;
  double *v256;
  double *v257;

  sub_1D5320418(a1, a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (sub_1D5297E1C(a1))
  {
    v4 = v3;
  }
  else
  {
    (*(void (**)(double **__return_ptr, uint64_t))(*(_QWORD *)a1 + 2824))(&v256, a1);
    v9 = v256;
    v10 = (char *)v257 - (char *)v256;
    if (v257 == v256)
    {
      v232 = v3;
    }
    else
    {
      if ((v10 & 8) != 0 || (v11 = v10 >> 3, (unint64_t)((v10 >> 3) - 6) >= 0x1D))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v12 = (unint64_t)*v256;
      v237[0] = 1;
      v13 = (unint64_t)(v11 - 4) >> 1;
      if (v12 - 1 > 7 || v13 < v12)
      {
        v235 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v235, "RawCameraException");
        __cxa_throw(v235, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v15 = &v256[2 * v12];
      v16 = (unint64_t)v15[1];
      if (v16 - 1 > 7 || v13 < v16)
      {
        v236 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v236, "RawCameraException");
        __cxa_throw(v236, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v18 = 0;
      v19 = (char *)(v15 + 2);
      do
      {
        v20 = &v237[2 * v18];
        v21 = *(double *)&v19[8 * v18];
        *((_WORD *)v20 + 1) = (int)v9[v18 + 1];
        *((_WORD *)v20 + 9) = (int)v21;
        ++v18;
      }
      while (v12 != v18);
      v22 = &v9[v12];
      v23 = vcvtq_s64_f64(*(float64x2_t *)(v22 + 7));
      v24 = vmovn_s64(v23);
      v25 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(v22 + 5)));
      v26 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(v22 + 3)));
      *(int32x2_t *)v23.i8 = vmovn_s64(vcvtq_s64_f64(*(float64x2_t *)(v22 + 1)));
      v254 = vqtbl4q_s8(*(int8x16x4_t *)(&v5 - 3), (int8x16_t)xmmword_1D544EA50);
      v27 = (float64x2_t *)&v9[3 * v12];
      v28 = vcvtq_s64_f64(v27[4]);
      v29 = vmovn_s64(v28);
      v30 = vmovn_s64(vcvtq_s64_f64(v27[3]));
      v31 = vmovn_s64(vcvtq_s64_f64(v27[2]));
      *(int32x2_t *)v28.i8 = vmovn_s64(vcvtq_s64_f64(v27[1]));
      v255 = vqtbl4q_s8(*(int8x16x4_t *)(&v6 - 3), (int8x16_t)xmmword_1D544EA50);
      sub_1D52E1FDC(v3, CFSTR("PanasonicChromaticAberrationExtended"), 0);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], v33, 1, v34, v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v37, (uint64_t)v36, (uint64_t)CFSTR("ChAber_SW_Extended"), v38);

      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v39, v238, v40, v41);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v43, (uint64_t)v42, (uint64_t)CFSTR("CA_blu0"), v44);

      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v45, v239, v46, v47);
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v49, (uint64_t)v48, (uint64_t)CFSTR("CA_blu1"), v50);

      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v51, v240, v52, v53);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v55, (uint64_t)v54, (uint64_t)CFSTR("CA_blu2"), v56);

      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v57, v241, v58, v59);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v61, (uint64_t)v60, (uint64_t)CFSTR("CA_blu3"), v62);

      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v63, v242, v64, v65);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v67, (uint64_t)v66, (uint64_t)CFSTR("CA_blu4"), v68);

      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v69, v243, v70, v71);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v73, (uint64_t)v72, (uint64_t)CFSTR("CA_blu5"), v74);

      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v75, v244, v76, v77);
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v79, (uint64_t)v78, (uint64_t)CFSTR("CA_blu6"), v80);

      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v81, v245, v82, v83);
      v84 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v85, (uint64_t)v84, (uint64_t)CFSTR("CA_blu7"), v86);

      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v87, v246, v88, v89);
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v91, (uint64_t)v90, (uint64_t)CFSTR("CA_red0"), v92);

      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v93, v247, v94, v95);
      v96 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v97, (uint64_t)v96, (uint64_t)CFSTR("CA_red1"), v98);

      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v99, v248, v100, v101);
      v102 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v103, (uint64_t)v102, (uint64_t)CFSTR("CA_red2"), v104);

      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v105, v249, v106, v107);
      v108 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v109, (uint64_t)v108, (uint64_t)CFSTR("CA_red3"), v110);

      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v111, v250, v112, v113);
      v114 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v115, (uint64_t)v114, (uint64_t)CFSTR("CA_red4"), v116);

      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v117, v251, v118, v119);
      v120 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v121, (uint64_t)v120, (uint64_t)CFSTR("CA_red5"), v122);

      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v123, v252, v124, v125);
      v126 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v127, (uint64_t)v126, (uint64_t)CFSTR("CA_red6"), v128);

      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v129, v253, v130, v131);
      v132 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v133, (uint64_t)v132, (uint64_t)CFSTR("CA_red7"), v134);

      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v135, v254.i16[0], v136, v137);
      v138 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v139, (uint64_t)v138, (uint64_t)CFSTR("BG0"), v140);

      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v141, v254.i16[1], v142, v143);
      v144 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v145, (uint64_t)v144, (uint64_t)CFSTR("BG1"), v146);

      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v147, v254.i16[2], v148, v149);
      v150 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v151, (uint64_t)v150, (uint64_t)CFSTR("BG2"), v152);

      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v153, v254.i16[3], v154, v155);
      v156 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v157, (uint64_t)v156, (uint64_t)CFSTR("BG3"), v158);

      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v159, v254.i16[4], v160, v161);
      v162 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v163, (uint64_t)v162, (uint64_t)CFSTR("BG4"), v164);

      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v165, v254.i16[5], v166, v167);
      v168 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v169, (uint64_t)v168, (uint64_t)CFSTR("BG5"), v170);

      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v171, v254.i16[6], v172, v173);
      v174 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v175, (uint64_t)v174, (uint64_t)CFSTR("BG6"), v176);

      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v177, v254.i16[7], v178, v179);
      v180 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v181, (uint64_t)v180, (uint64_t)CFSTR("BG7"), v182);

      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v183, v255.i16[0], v184, v185);
      v186 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v187, (uint64_t)v186, (uint64_t)CFSTR("RG0"), v188);

      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v189, v255.i16[1], v190, v191);
      v192 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v193, (uint64_t)v192, (uint64_t)CFSTR("RG1"), v194);

      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v195, v255.i16[2], v196, v197);
      v198 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v199, (uint64_t)v198, (uint64_t)CFSTR("RG2"), v200);

      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v201, v255.i16[3], v202, v203);
      v204 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v205, (uint64_t)v204, (uint64_t)CFSTR("RG3"), v206);

      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v207, v255.i16[4], v208, v209);
      v210 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v211, (uint64_t)v210, (uint64_t)CFSTR("RG4"), v212);

      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v213, v255.i16[5], v214, v215);
      v216 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v217, (uint64_t)v216, (uint64_t)CFSTR("RG5"), v218);

      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v219, v255.i16[6], v220, v221);
      v222 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v223, (uint64_t)v222, (uint64_t)CFSTR("RG6"), v224);

      objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v225, v255.i16[7], v226, v227);
      v228 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v32, v229, (uint64_t)v228, (uint64_t)CFSTR("RG7"), v230);

      v231 = v3;
    }
    if (v256)
    {
      v257 = v256;
      operator delete(v256);
    }
  }

  return v3;
}

void sub_1D53B5D60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v5 = *(void **)(v4 - 56);
  if (v5)
  {
    *(_QWORD *)(v4 - 48) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

BOOL sub_1D53B5E4C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _BOOL8 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = sub_1D532B128(v2, CFSTR("applyLensCorrection"), v3, &unk_1E9995518);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D53B5EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53B5F04()
{
  return 0;
}

uint64_t sub_1D53B5F0C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = sub_1D531AEB8(v2, CFSTR("lensCorrectionFilter"), v3, &unk_1E9995538);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D53B5FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53B5FC4()
{
  return 0;
}

void sub_1D53B5FCC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v4 = v9;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  sub_1D531B308(v4, CFSTR("lensCorrectionParameters"), v5, &unk_1E9995558, a2);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1D53B6078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D53B608C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_1D53B6098(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v4 = v9;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  sub_1D531B308(v4, CFSTR("chromaticAberrationParameters"), v5, &unk_1E9995578, a2);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1D53B6144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D53B6158(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_1D53B6164()
{
  return 2;
}

void sub_1D53B616C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *__p[2];
  char v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *v9;

  v9 = &unk_1E997C018;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v7);
  v1 = v7;
  sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE:0x14");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v1 + 600))(v1, __p, &v9, 3);
  if (v6 < 0)
    operator delete(__p[0]);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1D53B622C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *sub_1D53B6258(uint64_t *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;

  v3 = a2;
  *a1 = 0;
  a1[1] = 0;
  objc_msgSend_dataWithContentsOfFile_(MEMORY[0x1E0C99D50], v4, (uint64_t)v3, v5, v6);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)*a1;
  *a1 = v7;

  v9 = (void *)MEMORY[0x1E0CEC3F8];
  objc_msgSend_pathExtension(v3, v10, v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_typeWithFilenameExtension_(v9, v15, (uint64_t)v14, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_identifier(v18, v19, v20, v21, v22);
  v23 = objc_claimAutoreleasedReturnValue();
  v24 = (void *)a1[1];
  a1[1] = v23;

  return a1;
}

void sub_1D53B62F8(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1D53B6334(float a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  id v13;

  v13 = a3;
  v6 = a4;
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v7, (uint64_t)CFSTR("%af\t// %g"), v8, v9, a1, a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setValue_forKey_(v13, v11, (uint64_t)v10, (uint64_t)v6, v12);

}

void sub_1D53B63BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1D53B63E0(uint64_t a1, void *a2, void *a3, uint64_t a4, int a5)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  id v20;

  v20 = a2;
  v11 = a3;
  if (a5)
  {
    v12 = 0;
    do
    {
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v8, (uint64_t)CFSTR("%af\t// %g"), v9, v10, *(float *)(a4 + 4 * v12), *(float *)(a4 + 4 * v12));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v14, (uint64_t)CFSTR("%@[%d]"), v15, v16, v11, v12);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setValue_forKey_(v20, v18, (uint64_t)v13, (uint64_t)v17, v19);

      ++v12;
    }
    while (a5 != v12);
  }

}

void sub_1D53B64C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1D53B64F0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  id v17;

  v17 = a2;
  sub_1D53B6334(*(float *)a3, (uint64_t)v17, v17, CFSTR("otrc.s0"));
  sub_1D53B6334(*(float *)(a3 + 4), v4, v17, CFSTR("otrc.y1"));
  sub_1D53B6334(*(float *)(a3 + 8), v5, v17, CFSTR("otrc.s1"));
  sub_1D53B6334(*(float *)(a3 + 12), v6, v17, CFSTR("otrc.y2"));
  sub_1D53B6334(*(float *)(a3 + 16), v7, v17, CFSTR("otrc.s2"));
  sub_1D53B6334(*(float *)(a3 + 20), v8, v17, CFSTR("otrc.y3"));
  sub_1D53B6334(*(float *)(a3 + 24), v9, v17, CFSTR("otrc.s3"));
  sub_1D53B6334(*(float *)(a3 + 28), v10, v17, CFSTR("otrc.s4"));
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v11, *(unsigned __int8 *)(a3 + 32), v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v17, v15, (uint64_t)v14, (uint64_t)CFSTR("otrc.disabled"), v16);

}

void sub_1D53B65F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id sub_1D53B6610(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  const char *v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  const char *v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int16 *v126;
  void *v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  const char *v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  const char *v142;
  uint64_t v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const char *v152;
  uint64_t v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  const char *v162;
  uint64_t v163;
  void *v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  const char *v175;
  uint64_t v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  const char *v181;
  uint64_t v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  const char *v195;
  uint64_t v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  const char *v201;
  uint64_t v202;
  const char *v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  const char *v213;
  uint64_t v214;
  uint64_t v215;
  const char *v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  const char *v220;
  uint64_t v221;
  const char *v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  const char *v235;
  uint64_t v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  const char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  const char *v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  const char *v256;
  uint64_t v257;
  const char *v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  const char *v262;
  uint64_t v263;
  const char *v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  const char *v268;
  uint64_t v269;
  const char *v270;
  uint64_t v271;
  uint64_t v272;
  void *v273;
  const char *v274;
  uint64_t v275;
  uint64_t v276;
  const char *v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  const char *v281;
  uint64_t v282;
  const char *v283;
  uint64_t v284;
  uint64_t v285;
  void *v286;
  const char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  const char *v292;
  uint64_t v293;
  uint64_t v294;
  void *v295;
  const char *v296;
  uint64_t v297;
  const char *v298;
  uint64_t v299;
  uint64_t v300;
  void *v301;
  const char *v302;
  uint64_t v303;
  const char *v304;
  uint64_t v305;
  uint64_t v306;
  void *v307;
  const char *v308;
  uint64_t v309;
  const char *v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  const char *v314;
  uint64_t v315;
  const char *v316;
  uint64_t v317;
  uint64_t v318;
  void *v319;
  const char *v320;
  uint64_t v321;
  const char *v322;
  uint64_t v323;
  uint64_t v324;
  void *v325;
  const char *v326;
  uint64_t v327;
  const char *v328;
  uint64_t v329;
  uint64_t v330;
  void *v331;
  const char *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  const char *v346;
  uint64_t v347;
  uint64_t v348;
  void *v349;
  const char *v350;
  uint64_t v351;
  const char *v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  const char *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  const char *v365;
  uint64_t v366;
  uint64_t v367;
  void *v368;
  const char *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  const char *v373;
  uint64_t v374;
  uint64_t v375;
  void *v376;
  const char *v377;
  uint64_t v378;
  const char *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  float *v383;
  void *v384;
  const char *v385;
  uint64_t v386;
  uint64_t v387;
  void *v388;
  const char *v389;
  uint64_t v390;
  uint64_t v391;
  void *v392;
  const char *v393;
  uint64_t v394;
  uint64_t v395;
  void *v396;
  void *v397;
  const char *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  const char *v406;
  uint64_t v407;
  uint64_t v408;
  void *v409;
  const char *v410;
  uint64_t v411;
  const char *v412;
  uint64_t v413;
  uint64_t v414;
  void *v415;
  const char *v416;
  uint64_t v417;
  const char *v418;
  uint64_t v419;
  uint64_t v420;
  void *v421;
  const char *v422;
  uint64_t v423;
  uint64_t v424;
  const char *v425;
  uint64_t v426;
  uint64_t v427;
  void *v428;
  const char *v429;
  uint64_t v430;
  const char *v431;
  uint64_t v432;
  uint64_t v433;
  void *v434;
  const char *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  const char *v452;
  uint64_t v453;
  uint64_t v454;
  void *v455;
  const char *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  const char *v466;
  uint64_t v467;
  uint64_t v468;
  void *v469;
  const char *v470;
  uint64_t v471;
  const char *v472;
  uint64_t v473;
  uint64_t v474;
  void *v475;
  const char *v476;
  uint64_t v477;
  const char *v478;
  uint64_t v479;
  uint64_t v480;
  void *v481;
  const char *v482;
  uint64_t v483;
  const char *v484;
  uint64_t v485;
  uint64_t v486;
  void *v487;
  const char *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  const char *v494;
  uint64_t v495;
  uint64_t v496;
  void *v497;
  const char *v498;
  uint64_t v499;
  const char *v500;
  uint64_t v501;
  uint64_t v502;
  void *v503;
  const char *v504;
  uint64_t v505;
  const char *v506;
  uint64_t v507;
  uint64_t v508;
  void *v509;
  const char *v510;
  uint64_t v511;
  uint64_t v512;
  const char *v513;
  uint64_t v514;
  uint64_t v515;
  void *v516;
  const char *v517;
  uint64_t v518;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  _OWORD v533[12];
  __int128 v534;
  _OWORD v535[8];
  float v536;
  float v537;
  unsigned __int8 v538;
  unsigned __int8 v539;
  float v540;
  float v541;
  float v542;
  float v543;
  float v544;
  float v545;
  float v546;
  float v547;
  float v548;
  unsigned __int8 v549;
  unsigned int v550;
  unsigned __int8 v551;
  unsigned __int8 v552;
  float v553;
  unsigned int v554;
  unsigned int v555;
  float v556;
  float v557;
  float v558;
  unsigned __int8 v559;
  unsigned int v560;
  unsigned int v561;
  unsigned int v562;
  unsigned int v563;
  unsigned int v564;
  unsigned int v565;
  float v566;
  float v567;
  float v568;
  float v569;
  float v570;
  float v571;
  uint64_t v572;
  int v573;
  uint64_t v574;
  int v575;
  uint64_t v576;
  _DWORD v577[4];
  unsigned __int8 v578;
  float v579[16];
  uint64_t v580;
  _BYTE v581[32];
  _BYTE v582[56];
  float v583;
  float v584;
  float v585;
  float v586;
  float v587;
  float v588;
  unsigned int v589;
  unsigned __int8 v590;
  unsigned __int8 v591;
  float v592;
  unsigned __int8 v593;
  unsigned __int8 v594;
  float v595;
  float v596;
  float v597;
  float v598;
  float v599;
  float v600;
  float v601;
  float v602;
  float v603;
  float v604;
  float v605;
  float v606;
  float v607;
  float v608;
  float v609;
  unsigned __int8 v610;
  float v611;
  float v612;
  float v613[8];
  unsigned __int8 v614;
  unsigned __int8 v615;
  unsigned __int8 v616;
  unsigned __int8 v617;
  float v618;
  float v619;
  float v620;
  float v621;
  unsigned __int8 v622;
  unsigned int v623;
  unsigned int v624;
  float v625;
  unsigned __int8 v626;

  memset(v535, 0, 96);
  v534 = 0u;
  v532 = 0u;
  memset(v533, 0, sizeof(v533));
  v530 = 0u;
  v531 = 0u;
  v528 = 0u;
  v529 = 0u;
  v526 = 0u;
  v527 = 0u;
  v524 = 0u;
  v525 = 0u;
  v522 = 0u;
  v523 = 0u;
  v520 = 0u;
  v521 = 0u;
  v2 = *a2;
  v3 = sub_1D5297E34(*a2);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v2 + 2696))(&v520, v2, v3);
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v9, (uint64_t)CFSTR("%#x"), v10, v11, v520);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v13, (uint64_t)v12, (uint64_t)CFSTR("pattern"), v14);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v15, DWORD1(v520), v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v19, (uint64_t)v18, (uint64_t)CFSTR("bitmapType"), v20);

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v21, BYTE8(v520), v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v25, (uint64_t)v24, (uint64_t)CFSTR("despeckleBlackNoiseEnabled"), v26);

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v27, BYTE9(v520), v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v31, (uint64_t)v30, (uint64_t)CFSTR("blackLevelExtendEnabled"), v32);

  sub_1D53B6334(*((float *)&v520 + 3), v33, v8, CFSTR("blackDespeckleNoiseFactor"));
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v34, v521, v35, v36);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v38, (uint64_t)v37, (uint64_t)CFSTR("greenSplitEnabled"), v39);

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v40, BYTE1(v521), v41, v42);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v44, (uint64_t)v43, (uint64_t)CFSTR("unknownDNGCamera"), v45);

  sub_1D53B6334(*((float *)&v521 + 1), v46, v8, CFSTR("greenSplitRed"));
  sub_1D53B6334(*((float *)&v521 + 2), v47, v8, CFSTR("greenSplitGreen1"));
  sub_1D53B6334(*((float *)&v521 + 3), v48, v8, CFSTR("greenSplitBlue"));
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v49, v522, v50, v51);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v53, (uint64_t)v52, (uint64_t)CFSTR("greenBayerSplit"), v54);

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v55, BYTE4(v522), v56, v57);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v59, (uint64_t)v58, (uint64_t)CFSTR("HREnabled"), v60);

  sub_1D53B6334(*((float *)&v522 + 2), v61, v8, CFSTR("HRGreenClip"));
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v62, BYTE12(v522), v63, v64);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v66, (uint64_t)v65, (uint64_t)CFSTR("SPEEnabled"), v67);

  sub_1D53B6334(*(float *)&v523, v68, v8, CFSTR("SPEDeadNoiseFactor"));
  sub_1D53B6334(*((float *)&v523 + 1), v69, v8, CFSTR("SPEDeadNoticeabilityFactor"));
  sub_1D53B6334(*((float *)&v523 + 2), v70, v8, CFSTR("SPEHotNoiseFactor"));
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v71, BYTE12(v523), v72, v73);
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v75, (uint64_t)v74, (uint64_t)CFSTR("DESEnabled"), v76);

  sub_1D53B6334(*(float *)&v524, v77, v8, CFSTR("DESNoiseFactor"));
  sub_1D53B6334(*((float *)&v524 + 1), v78, v8, CFSTR("DESSignalToNoiseThreshold"));
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v79, DWORD2(v524), v80, v81);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v83, (uint64_t)v82, (uint64_t)CFSTR("DESDoEarlyOut"), v84);

  sub_1D53B6334(*((float *)&v524 + 3), v85, v8, CFSTR("DESEarlyOutFactor"));
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v86, v525, v87, v88);
  v89 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v90, (uint64_t)v89, (uint64_t)CFSTR("DESDoRed"), v91);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v92, DWORD1(v525), v93, v94);
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v96, (uint64_t)v95, (uint64_t)CFSTR("DESDoGreen"), v97);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v98, DWORD2(v525), v99, v100);
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v102, (uint64_t)v101, (uint64_t)CFSTR("DESDoBlue"), v103);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v104, HIDWORD(v525), v105, v106);
  v107 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v108, (uint64_t)v107, (uint64_t)CFSTR("DESTaperMethod"), v109);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v110, v526, v111, v112);
  v113 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v114, (uint64_t)v113, (uint64_t)CFSTR("DESMethod"), v115);

  objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], v116, BYTE8(v526), v117, v118);
  v119 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v120, (uint64_t)v119, (uint64_t)CFSTR("CAParameters.ChAber_SW_Extended"), v121);

  v125 = 0;
  v126 = (__int16 *)&v529 + 5;
  do
  {
    objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v122, (unsigned __int16)*(v126 - 24), v123, v124);
    v127 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v128, (uint64_t)CFSTR("CAParameters.CA_blu[%d]"), v129, v130, v125);
    v131 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setValue_forKey_(v8, v132, (uint64_t)v127, (uint64_t)v131, v133);

    objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v134, (unsigned __int16)*(v126 - 16), v135, v136);
    v137 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v138, (uint64_t)CFSTR("CAParameters.CA_red[%d]"), v139, v140, v125);
    v141 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setValue_forKey_(v8, v142, (uint64_t)v137, (uint64_t)v141, v143);

    objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v144, *(v126 - 8), v145, v146);
    v147 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v148, (uint64_t)CFSTR("CAParameters.BG[%d]"), v149, v150, v125);
    v151 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setValue_forKey_(v8, v152, (uint64_t)v147, (uint64_t)v151, v153);

    objc_msgSend_numberWithShort_(MEMORY[0x1E0CB37E8], v154, *v126, v155, v156);
    v157 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v158, (uint64_t)CFSTR("CAParameters.RG[%d]"), v159, v160, v125);
    v161 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setValue_forKey_(v8, v162, (uint64_t)v157, (uint64_t)v161, v163);

    ++v125;
    ++v126;
  }
  while (v125 != 8);
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v122, BYTE10(v530), v123, v124);
  v164 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v165, (uint64_t)v164, (uint64_t)CFSTR("CACorrectionEnabled"), v166);

  sub_1D53B6334(*((float *)&v530 + 3), v167, v8, CFSTR("CACorrectionRedPower"));
  sub_1D53B6334(*(float *)&v531, v168, v8, CFSTR("CACorrectionBluePower"));
  sub_1D53B6334(*((float *)&v531 + 1), v169, v8, CFSTR("CACorrectionRedScale"));
  sub_1D53B6334(*((float *)&v531 + 2), v170, v8, CFSTR("CACorrectionBlueScale"));
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v171, HIDWORD(v531), v172, v173);
  v174 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v175, (uint64_t)v174, (uint64_t)CFSTR("fullWidth"), v176);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v177, v532, v178, v179);
  v180 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v181, (uint64_t)v180, (uint64_t)CFSTR("fullHeight"), v182);

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v183, BYTE4(v532), v184, v185);
  v186 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v187, (uint64_t)v186, (uint64_t)CFSTR("vignetteCorrectionEnabled"), v188);

  sub_1D53B6334(*((float *)&v532 + 2), v189, v8, CFSTR("vignetteCorrectionPower"));
  sub_1D53B6334(*((float *)&v532 + 3), v190, v8, CFSTR("vignetteCorrectionAmount"));
  objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], v191, LOBYTE(v533[0]), v192, v193);
  v194 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v195, (uint64_t)v194, (uint64_t)CFSTR("fujiCAParameters.FujiCAEnable"), v196);

  if (LOBYTE(v533[0]))
  {
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v197, DWORD1(v533[0]), v198, v199);
    v200 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v201, (uint64_t)v200, (uint64_t)CFSTR("fujiCAParameters.numberOfPoints"), v202);

    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v203, DWORD2(v533[0]), v204, v205);
    v206 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v207, (uint64_t)v206, (uint64_t)CFSTR("fujiCAParameters.maxDistance"), v208);

    sub_1D53B63E0(v209, v8, CFSTR("fujiCAParameters.CA_LR"), (uint64_t)v533 + 12, 16);
    sub_1D53B63E0(v210, v8, CFSTR("fujiCAParameters.CA_red"), (uint64_t)&v533[4] + 12, 16);
    sub_1D53B63E0(v211, v8, CFSTR("fujiCAParameters.CA_blu"), (uint64_t)&v533[8] + 12, 16);
  }
  objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], v197, BYTE12(v534), v198, v199);
  v212 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v213, (uint64_t)v212, (uint64_t)CFSTR("fujiLensParameters.FujiLensCorrectionEnable"), v214);

  if (BYTE12(v534))
  {
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v216, LODWORD(v535[0]), v217, v218);
    v219 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v220, (uint64_t)v219, (uint64_t)CFSTR("fujiLensParameters.maxDistance"), v221);

    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v222, DWORD1(v535[0]), v223, v224);
    v225 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v226, (uint64_t)v225, (uint64_t)CFSTR("fujiLensParameters.numberOfPoints"), v227);

    sub_1D53B63E0(v228, v8, CFSTR("fujiLensParameters.lengthRatio"), (uint64_t)v535 + 8, 16);
    sub_1D53B63E0(v229, v8, CFSTR("fujiLensParameters.factor"), (uint64_t)&v535[4] + 8, 16);
  }
  sub_1D53B6334(v536, v215, v8, off_1EFF31E10[0]);
  sub_1D53B6334(v537, v230, v8, off_1EFF31DE0[0]);
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v231, v538, v232, v233);
  v234 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v235, (uint64_t)v234, (uint64_t)CFSTR("chromaBlurEnabled"), v236);

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v237, v539, v238, v239);
  v240 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v241, (uint64_t)v240, (uint64_t)CFSTR("noAntiAliasingFilter"), v242);

  sub_1D53B6334(v540, v243, v8, off_1EFF31F18[0]);
  sub_1D53B6334(v541, v244, v8, CFSTR("chromaBlurRadius2"));
  sub_1D53B6334(v542, v245, v8, off_1EFF31E28[0]);
  sub_1D53B6334(v543, v246, v8, CFSTR("cnrNoiseFactor"));
  sub_1D53B6334(v544, v247, v8, CFSTR("cnrRadius"));
  sub_1D53B6334(v545, v248, v8, CFSTR("cnrAmount"));
  sub_1D53B6334(v546, v249, v8, off_1EFF31F20[0]);
  sub_1D53B6334(v547, v250, v8, CFSTR("chromaBlurEdgeThreshold2"));
  sub_1D53B6334(v548, v251, v8, CFSTR("adaptiveNormalizationNoiseFactor"));
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v252, v549, v253, v254);
  v255 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v256, (uint64_t)v255, (uint64_t)CFSTR("adaptiveNormalizationSimple"), v257);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v258, v550, v259, v260);
  v261 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v262, (uint64_t)v261, (uint64_t)CFSTR("adaptiveNormalizationDirectionFindingMethod"), v263);

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v264, v551, v265, v266);
  v267 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v268, (uint64_t)v267, (uint64_t)CFSTR("fujiGreenReconstructionCopyRaw"), v269);

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v270, v552, v271, v272);
  v273 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v274, (uint64_t)v273, (uint64_t)CFSTR("fujiGreenReconstructionHighFrequency"), v275);

  sub_1D53B6334(v553, v276, v8, CFSTR("fujiDirectionsNoiseFactor"));
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v277, v554, v278, v279);
  v280 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v281, (uint64_t)v280, (uint64_t)CFSTR("fujiGreenSmoothingEnabled"), v282);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v283, v555, v284, v285);
  v286 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v287, (uint64_t)v286, (uint64_t)CFSTR("fujiGreenSmoothingThreshold"), v288);

  sub_1D53B6334(v556, v289, v8, CFSTR("fujiGreenSmoothingSharpeningAmount"));
  sub_1D53B6334(v557, v290, v8, CFSTR("fujiGreenSmoothingCornerThreshold"));
  sub_1D53B6334(v558, v291, v8, CFSTR("fujiGreenSmoothingAdjuster"));
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v292, v559, v293, v294);
  v295 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v296, (uint64_t)v295, (uint64_t)CFSTR("fujiRedBluePlanarValidity"), v297);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v298, v560, v299, v300);
  v301 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v302, (uint64_t)v301, (uint64_t)CFSTR("redBlueDefringe"), v303);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v304, v561, v305, v306);
  v307 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v308, (uint64_t)v307, (uint64_t)CFSTR("redBlueRangeLimit"), v309);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v310, v562, v311, v312);
  v313 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v314, (uint64_t)v313, (uint64_t)CFSTR("redBlueGradientThreshold"), v315);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v316, v563, v317, v318);
  v319 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v320, (uint64_t)v319, (uint64_t)CFSTR("redBlueDumbOnly"), v321);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v322, v564, v323, v324);
  v325 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v326, (uint64_t)v325, (uint64_t)CFSTR("redBlueGreenOnly"), v327);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v328, v565, v329, v330);
  v331 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v332, (uint64_t)v331, (uint64_t)CFSTR("colorSmoothingEnabled"), v333);

  sub_1D53B6334(v566, v334, v8, CFSTR("colorSmoothingSharpnessAmount"));
  sub_1D53B6334(v567, v335, v8, CFSTR("resampleHorizScale"));
  sub_1D53B6334(v568, v336, v8, CFSTR("resampleVertScale"));
  sub_1D53B6334(v569, v337, v8, CFSTR("resampleVSharpness"));
  sub_1D53B6334(v570, v338, v8, CFSTR("minimumSignalToNoiseRatio"));
  sub_1D53B6334(v571, v339, v8, CFSTR("maximumSignalToNoiseRatio"));
  sub_1D53B63E0(v340, v8, CFSTR("factors"), (uint64_t)&v572, 3);
  sub_1D53B63E0(v341, v8, CFSTR("RVector"), (uint64_t)&v573, 3);
  sub_1D53B63E0(v342, v8, CFSTR("GVector"), (uint64_t)&v574, 3);
  sub_1D53B63E0(v343, v8, CFSTR("BVector"), (uint64_t)&v575, 3);
  sub_1D53B63E0(v344, v8, CFSTR("bias"), (uint64_t)&v576, 3);
  sub_1D53B63E0(v345, v8, CFSTR("clipLevels"), (uint64_t)v577, 3);
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v346, v577[3], v347, v348);
  v349 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v350, (uint64_t)v349, (uint64_t)CFSTR("biasOff"), v351);

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v352, v578, v353, v354);
  v355 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v356, (uint64_t)v355, (uint64_t)CFSTR("boostEnabled"), v357);

  sub_1D53B64F0(v358, v8, (uint64_t)v579);
  sub_1D53B6334(v579[9], v359, v8, CFSTR("gamma"));
  sub_1D53B6334(v579[10], v360, v8, CFSTR("shadowDesaturatePoint"));
  sub_1D53B6334(v579[11], v361, v8, CFSTR("shadowDesaturateWidth"));
  sub_1D53B6334(v579[12], v362, v8, CFSTR("shadowDesaturateAmount"));
  sub_1D53B6334(v579[13], v363, v8, off_1EFF31E38[0]);
  sub_1D53B6334(v579[14], v364, v8, off_1EFF31E40[0]);
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v365, LODWORD(v579[15]), v366, v367);
  v368 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v369, (uint64_t)v368, (uint64_t)CFSTR("ISO"), v370);

  sub_1D53B63E0(v371, v8, CFSTR("blackLevels"), (uint64_t)&v580, 4);
  sub_1D53B63E0(v372, v8, CFSTR("darkNoise"), (uint64_t)v581, 4);
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v373, v581[16], v374, v375);
  v376 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v377, (uint64_t)v376, (uint64_t)CFSTR("individualQuadratics"), v378);

  v382 = 0;
  v383 = (float *)v582;
  do
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v379, (uint64_t)CFSTR("signalNoiseModels[%d].a"), v380, v381, v382);
    v384 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53B6334(*(v383 - 3), (uint64_t)v384, v8, v384);

    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v385, (uint64_t)CFSTR("signalNoiseModels[%d].b"), v386, v387, v382);
    v388 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53B6334(*(v383 - 2), (uint64_t)v388, v8, v388);

    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v389, (uint64_t)CFSTR("signalNoiseModels[%d].c"), v390, v391, v382);
    v392 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53B6334(*(v383 - 1), (uint64_t)v392, v8, v392);

    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v393, (uint64_t)CFSTR("signalNoiseModels[%d].PRNU"), v394, v395, v382);
    v396 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53B6334(*v383, (uint64_t)v396, v8, v396);

    ++v382;
    v383 += 4;
  }
  while (v382 != 4);
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v379, v582[52], v380, v381);
  v397 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v398, (uint64_t)v397, (uint64_t)CFSTR("moireSuppressionEnabled"), v399);

  sub_1D53B6334(v583, v400, v8, CFSTR("hueMagMR"));
  sub_1D53B6334(v584, v401, v8, CFSTR("hueMagRY"));
  sub_1D53B6334(v585, v402, v8, CFSTR("hueMagYG"));
  sub_1D53B6334(v586, v403, v8, CFSTR("hueMagGC"));
  sub_1D53B6334(v587, v404, v8, CFSTR("hueMagCB"));
  sub_1D53B6334(v588, v405, v8, CFSTR("hueMagBM"));
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v406, v589, v407, v408);
  v409 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v410, (uint64_t)v409, (uint64_t)CFSTR("bitmapType"), v411);

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v412, v590, v413, v414);
  v415 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v416, (uint64_t)v415, (uint64_t)CFSTR("luminanceNoiseReductionEnabled"), v417);

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v418, v591, v419, v420);
  v421 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v422, (uint64_t)v421, (uint64_t)CFSTR("chromaNoiseReductionEnabled"), v423);

  sub_1D53B6334(v592, v424, v8, CFSTR("luminanceNoiseReductionAmount"));
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v425, v593, v426, v427);
  v428 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v429, (uint64_t)v428, (uint64_t)CFSTR("vectorFieldProcessingEnabled"), v430);

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v431, v594, v432, v433);
  v434 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v435, (uint64_t)v434, (uint64_t)CFSTR("vectorFieldCorners"), v436);

  sub_1D53B6334(v595, v437, v8, CFSTR("vectorFieldSmoothingCoefficient"));
  sub_1D53B6334(v596, v438, v8, CFSTR("vectorFieldCornerThreshold"));
  sub_1D53B6334(v597, v439, v8, CFSTR("fullSizeSmoothingAmount"));
  sub_1D53B6334(v598, v440, v8, CFSTR("halfSizeSmoothingAmount"));
  sub_1D53B6334(v599, v441, v8, CFSTR("quarterSizeSmoothingAmount"));
  sub_1D53B6334(v600, v442, v8, CFSTR("fullSizeThreshold"));
  sub_1D53B6334(v601, v443, v8, CFSTR("fullSizeThresholdSoftness"));
  sub_1D53B6334(v602, v444, v8, CFSTR("halfSizeThreshold"));
  sub_1D53B6334(v603, v445, v8, CFSTR("halfSizeThresholdSoftness"));
  sub_1D53B6334(v604, v446, v8, CFSTR("quarterSizeThreshold"));
  sub_1D53B6334(v605, v447, v8, CFSTR("quarterSizeThresholdSoftness"));
  sub_1D53B6334(v606, v448, v8, CFSTR("fullSizeGradientMaskAmount"));
  sub_1D53B6334(v607, v449, v8, CFSTR("halfSizeGradientMaskAmount"));
  sub_1D53B6334(v608, v450, v8, CFSTR("quarterSizeGradientMaskAmount"));
  sub_1D53B6334(v609, v451, v8, CFSTR("contrastOverdrive"));
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v452, v610, v453, v454);
  v455 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v456, (uint64_t)v455, (uint64_t)CFSTR("sharpenEdgesEnabled"), v457);

  sub_1D53B6334(v611, v458, v8, CFSTR("sharpenIntensity"));
  sub_1D53B6334(v612, v459, v8, CFSTR("addNoiseAmount"));
  sub_1D53B63E0(v460, v8, CFSTR("factors"), (uint64_t)v613, 3);
  sub_1D53B7DC8(v613[3], v461, v8, CFSTR("representativeNoiseAmount"));
  sub_1D53B7DC8(v613[4], v462, v8, CFSTR("CNR_value"));
  sub_1D53B7DC8(v613[5], v463, v8, CFSTR("CNR_radius"));
  sub_1D53B6334(v613[7], v464, v8, CFSTR("CNR_bias"));
  sub_1D53B7DC8(v613[6], v465, v8, CFSTR("CNR_noiseFactor"));
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v466, v614, v467, v468);
  v469 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v470, (uint64_t)v469, (uint64_t)CFSTR("powerBlurPass1Enabled"), v471);

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v472, v615, v473, v474);
  v475 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v476, (uint64_t)v475, (uint64_t)CFSTR("powerBlurPass2Enabled"), v477);

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v478, v616, v479, v480);
  v481 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v482, (uint64_t)v481, (uint64_t)CFSTR("powerBlurPass3Enabled"), v483);

  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v484, v617, v485, v486);
  v487 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v488, (uint64_t)v487, (uint64_t)CFSTR("powerBlurPass4Enabled"), v489);

  sub_1D53B6334(v618, v490, v8, CFSTR("powerBlurPass1Threshold"));
  sub_1D53B6334(v619, v491, v8, CFSTR("powerBlurPass2Threshold"));
  sub_1D53B6334(v620, v492, v8, CFSTR("powerBlurPass3Threshold"));
  sub_1D53B6334(v621, v493, v8, CFSTR("powerBlurPass4Threshold"));
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v494, v622, v495, v496);
  v497 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v498, (uint64_t)v497, (uint64_t)CFSTR("powerBlurPass2Despeckle"), v499);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v500, v623, v501, v502);
  v503 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v504, (uint64_t)v503, (uint64_t)CFSTR("powerBlurPass2DespeckleCountThreshold"), v505);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v506, v624, v507, v508);
  v509 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v510, (uint64_t)v509, (uint64_t)CFSTR("powerBlurPass2DespeckleLuminanceThreshold"), v511);

  sub_1D53B6334(v625, v512, v8, CFSTR("powerBlurPass2DespeckleDifferenceAmount"));
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v513, v626, v514, v515);
  v516 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v517, (uint64_t)v516, (uint64_t)CFSTR("powerBlurPass2DespeckleAverageCloseIn"), v518);

  return v8;
}

void sub_1D53B7C68(void *a1)
{
  void *v1;
  void *v2;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53B7C44);
}

void sub_1D53B7DC8(double a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  id v13;

  v13 = a3;
  v6 = a4;
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v7, (uint64_t)CFSTR("%a\t// %lg"), v8, v9, *(_QWORD *)&a1, *(_QWORD *)&a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setValue_forKey_(v13, v11, (uint64_t)v10, (uint64_t)v6, v12);

}

void sub_1D53B7E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

id sub_1D53B7E70(void **a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  id v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  void *v28;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v3 = a2;
  sub_1D53B7FF0(a1, v3, 0, &v30);
  v8 = v30;
  if (v30)
  {
    objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v4, v5, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v10, v11, v12, v13);
    objc_msgSend_setObject_forKeyedSubscript_(v9, v15, v14, (uint64_t)CFSTR("ReconstructionData"), v16);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 2152))(v30) & 1) == 0)
    {
      v21 = objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v17, v18, v19, v20);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v22, v21, (uint64_t)CFSTR("SushiImageFilterParameters"), v23);
    }
    objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E0C99D80], v17, (uint64_t)v9, v19, v20);
    v24 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v24 = 0;
  }
  v25 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      if (v8)
        goto LABEL_10;
LABEL_12:
      v28 = 0;
      goto LABEL_13;
    }
  }
  if (!v8)
    goto LABEL_12;
LABEL_10:
  v24 = v24;
  v28 = v24;
LABEL_13:

  return v28;
}

void sub_1D53B7FA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_1D5282EB4((uint64_t)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53B7F4CLL);
}

void sub_1D53B7FE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53B7FF0(void **a1@<X0>, void *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void *exception;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;

  v7 = a2;
  v49 = 0;
  v50 = 0;
  sub_1D52B47A0(v7, &v49, &v51);
  v12 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = objc_msgSend_bytes(*a1, v8, v9, v10, v11);
  v45 = objc_msgSend_length(*a1, v16, v17, v18, v19);
  sub_1D528304C(&v47, (unint64_t *)&v45);
  sub_1D52843AC(v15, (uint64_t)&v47, 0, &v48);
  v45 = 0;
  v46 = 0;
  sub_1D5295614(&v45, &v51, a4);
  v24 = v46;
  if (v46)
  {
    v25 = (unint64_t *)&v46->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (!*a4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v20, v21, v22, v23);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setValue_forKey_(v27, v28, (uint64_t)v7, *MEMORY[0x1E0CBD270], v29);
  sub_1D536C28C(a3);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setValue_forKey_(v27, v31, (uint64_t)v30, *MEMORY[0x1E0CBD258], v32);

  sub_1D52977A0(*a4, v27);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a4 + 112))(&v43);
  v33 = v44;
  if (v44)
  {
    v34 = (unint64_t *)&v44->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }

  v36 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v52;
  if (v52)
  {
    v40 = (unint64_t *)&v52->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }

}

void sub_1D53B8260(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _QWORD *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  va_list va;

  va_start(va, a7);

  sub_1D5282EB4((uint64_t)v7);
  sub_1D5282EB4((uint64_t)va);
  sub_1D5282EB4(v10 - 64);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  *v7 = 0;
  v7[1] = 0;
  JUMPOUT(0x1D53B8210);
}

void sub_1D53B82E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D53B82F4(void **a1, int a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  id v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  void *v45;
  uint64_t v47;
  std::__shared_weak_count *v48;

  sub_1D53B7FF0(a1, CFSTR("6.dng"), a2, &v47);
  v8 = v47;
  if (v47)
  {
    objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v4, v5, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v10, v11, v12, v13);
    objc_msgSend_setObject_forKeyedSubscript_(v9, v15, v14, (uint64_t)CFSTR("DebayerParameters"), v16);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 2152))(v47) & 1) == 0)
    {
      sub_1D53B6610((uint64_t)a1, &v47);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v18, (uint64_t)v17, (uint64_t)CFSTR("ReconstructionData"), v19);

      v24 = objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v20, v21, v22, v23);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v25, v24, (uint64_t)CFSTR("SushiImageFilterParameters"), v26);
    }
    sub_1D53B8538((uint64_t)a1, CFSTR("6.dng"), a2);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = v27;
    if (v27)
    {
      objc_msgSend_objectAtIndexedSubscript_(v27, v28, 0, v29, v30);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v33, (uint64_t)v32, (uint64_t)CFSTR("CoreImageInitialTreePre"), v34);

      objc_msgSend_objectAtIndexedSubscript_(v31, v35, 1, v36, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v39, (uint64_t)v38, (uint64_t)CFSTR("CoreImageInitialTreePost"), v40);

    }
    objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E0C99D80], v28, (uint64_t)v9, v29, v30);
    v41 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v41 = 0;
  }
  v42 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      if (v8)
        goto LABEL_12;
LABEL_14:
      v45 = 0;
      goto LABEL_15;
    }
  }
  if (!v8)
    goto LABEL_14;
LABEL_12:
  v41 = v41;
  v45 = v41;
LABEL_15:

  return v45;
}

void sub_1D53B84D0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_1D5282EB4((uint64_t)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53B8478);
}

id sub_1D53B8538(uint64_t a1, void *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  CGImageSource *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  const __CFDictionary *v12;
  CFDictionaryRef v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void *v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v66;
  void *v67;
  void *v68;
  CGImage *image;
  CFDictionaryRef v70;
  const __CFDictionary *options;
  void *v72;
  void *v73;
  void *context;
  const __CFDictionary *v75;
  id v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _QWORD v81[2];
  _BYTE v82[128];
  _QWORD v83[2];
  _QWORD v84[2];
  _QWORD v85[2];
  _QWORD v86[2];
  uint64_t v87;
  _QWORD v88[3];

  v88[1] = *MEMORY[0x1E0C80C00];
  v76 = a2;
  v5 = MEMORY[0x1D8272058]();
  v6 = *(_QWORD *)(a1 + 8);
  v87 = *MEMORY[0x1E0CBD2A8];
  v88[0] = v6;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v7, (uint64_t)v88, (uint64_t)&v87, 1);
  v75 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v8 = CGImageSourceCreateWithData(*(CFDataRef *)a1, v75);
  context = (void *)v5;
  if (v8)
  {
    v9 = *MEMORY[0x1E0CBD258];
    v85[0] = *MEMORY[0x1E0CBD258];
    sub_1D536C28C(1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v85[1] = *MEMORY[0x1E0CBD200];
    v86[0] = v10;
    v86[1] = MEMORY[0x1E0C9AAB0];
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v11, (uint64_t)v86, (uint64_t)v85, 2);
    v12 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

    v13 = CGImageSourceCopyPropertiesAtIndex(v8, 0, v12);
    objc_msgSend_valueForKeyPath_(v13, v14, (uint64_t)CFSTR("kCGImageSourceRawReconstructionOptions.kCGImageSourceSupportedSushiLevels"), v15, v16);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_valueForKeyPath_(v13, v17, (uint64_t)CFSTR("kCGImageSourceRawReconstructionOptions.kCGImageSourceRawReconstructionMethodVersions"), v18, v19);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D536C28C(a3);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_containsObject_(v73, v21, (uint64_t)v20, v22, v23))
    {
      v27 = objc_msgSend_containsObject_(v72, v24, (uint64_t)v76, v25, v26);

      if (!v27)
      {
        v64 = 0;
        goto LABEL_20;
      }
      v83[0] = v9;
      sub_1D536C28C(a3);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v83[1] = *MEMORY[0x1E0CBD270];
      v84[0] = v28;
      v84[1] = v76;
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v29, (uint64_t)v84, (uint64_t)v83, 2);
      options = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

      image = CGImageSourceCreateImageAtIndex(v8, 0, options);
      v70 = CGImageSourceCopyPropertiesAtIndex(v8, 0, options);

      objc_msgSend_imageWithCGImage_(MEMORY[0x1E0C9DDC8], v30, (uint64_t)image, v31, v32);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_debugDescription(v20, v33, v34, v35, v36);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v70, v37, (uint64_t)CFSTR("{Raw}"), v38, v39);
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v66 = v40;
      if (v40)
      {
        objc_msgSend_objectForKeyedSubscript_(v40, v41, (uint64_t)CFSTR("filters"), v43, v44, v40);
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v45 = (id)objc_claimAutoreleasedReturnValue();
        v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(v45, v46, (uint64_t)&v77, (uint64_t)v82, 16);
        if (v49)
        {
          v50 = *(_QWORD *)v78;
          v51 = *MEMORY[0x1E0C9E1F8];
          v52 = *MEMORY[0x1E0C9E298];
          do
          {
            v53 = 0;
            v54 = v20;
            do
            {
              if (*(_QWORD *)v78 != v50)
                objc_enumerationMutation(v45);
              v55 = *(void **)(*((_QWORD *)&v77 + 1) + 8 * v53);
              objc_msgSend_setValue_forKey_(v55, v47, (uint64_t)v54, v51, v48);
              objc_msgSend_valueForKey_(v55, v56, v52, v57, v58);
              v20 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend_setValue_forKey_(v55, v59, 0, v51, v60);
              ++v53;
              v54 = v20;
            }
            while (v49 != v53);
            v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(v45, v47, (uint64_t)&v77, (uint64_t)v82, 16);
          }
          while (v49);
        }

      }
      objc_msgSend_debugDescription(v20, v41, v42, v43, v44, v66);
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      if (image)
        CGImageRelease(image);
      v81[0] = v68;
      v81[1] = v63;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v61, (uint64_t)v81, 2, v62);
      v64 = (void *)objc_claimAutoreleasedReturnValue();

      v13 = v70;
      v12 = options;
    }
    else
    {
      v64 = 0;
    }

LABEL_20:
    CFRelease(v8);

    goto LABEL_21;
  }
  v64 = 0;
LABEL_21:

  objc_autoreleasePoolPop(context);
  return v64;
}

void sub_1D53B8948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18)
{
  void *v18;
  void *v19;

  if (a2)
  {

    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1D53B8900);
  }
  _Unwind_Resume(exception_object);
}

id sub_1D53B8AD0(void **a1, int a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  id v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  void *v48;
  uint64_t v50;
  std::__shared_weak_count *v51;

  sub_1D53B7FF0(a1, CFSTR("6"), a2, &v50);
  v8 = v50;
  if (v50)
  {
    objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v4, v5, v6, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v10, v11, v12, v13);
    objc_msgSend_setObject_forKeyedSubscript_(v9, v15, v14, (uint64_t)CFSTR("DebayerParameters"), v16);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 2152))(v50) & 1) == 0)
    {
      sub_1D53B6610((uint64_t)a1, &v50);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v18, (uint64_t)v17, (uint64_t)CFSTR("ReconstructionData"), v19);

      v24 = objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v20, v21, v22, v23);
      objc_msgSend_setObject_forKeyedSubscript_(v9, v25, v24, (uint64_t)CFSTR("SushiImageFilterParameters"), v26);
    }
    sub_1D53B8538((uint64_t)a1, CFSTR("6"), a2);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = v27;
    if (v27)
    {
      objc_msgSend_objectAtIndexedSubscript_(v27, v28, 0, v29, v30);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v33, (uint64_t)v32, (uint64_t)CFSTR("CoreImageInitialTreePre"), v34);

      objc_msgSend_objectAtIndexedSubscript_(v31, v35, 1, v36, v37);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v39, (uint64_t)v38, (uint64_t)CFSTR("CoreImageInitialTreePost"), v40);

    }
    if (a2 == 2)
    {
      sub_1D53B8D50((uint64_t)a1);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      if (v43)
        objc_msgSend_setObject_forKeyedSubscript_(v9, v41, (uint64_t)v43, (uint64_t)CFSTR("BayerImageHash"), v42);

    }
    objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E0C99D80], v28, (uint64_t)v9, v29, v30);
    v44 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v44 = 0;
  }
  v45 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      if (v8)
        goto LABEL_16;
LABEL_18:
      v48 = 0;
      goto LABEL_19;
    }
  }
  if (!v8)
    goto LABEL_18;
LABEL_16:
  v44 = v44;
  v48 = v44;
LABEL_19:

  return v48;
}

void sub_1D53B8CE0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  sub_1D5282EB4((uint64_t)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53B8C88);
}

id sub_1D53B8D50(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  const char *v4;
  const __CFDictionary *v5;
  CGImageSource *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  const __CFDictionary *v10;
  CFDictionaryRef v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const char *v26;
  uint64_t v27;
  const __CFDictionary *v28;
  CGImage *ImageAtIndex;
  CGDataProvider *DataProvider;
  const __CFData *v31;
  const UInt8 *BytePtr;
  CC_LONG Length;
  unint64_t v34;
  char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *exception;
  CGImageRef image;
  void *v43;
  void *v44;
  char *__s2;
  CC_SHA256_CTX c;
  char __s1[81];
  unsigned __int8 md[32];
  _QWORD v49[2];
  _QWORD v50[2];
  _QWORD v51[2];
  _QWORD v52[2];
  uint64_t v53;
  _QWORD v54[3];

  v54[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D8272058]();
  v3 = *(_QWORD *)(a1 + 8);
  v53 = *MEMORY[0x1E0CBD2A8];
  v54[0] = v3;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v4, (uint64_t)v54, (uint64_t)&v53, 1);
  v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v6 = CGImageSourceCreateWithData(*(CFDataRef *)a1, v5);
  if (v6)
  {
    v7 = *MEMORY[0x1E0CBD258];
    v51[0] = *MEMORY[0x1E0CBD258];
    sub_1D536C28C(1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v51[1] = *MEMORY[0x1E0CBD200];
    v52[0] = v8;
    v52[1] = MEMORY[0x1E0C9AAB0];
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v9, (uint64_t)v52, (uint64_t)v51, 2);
    v10 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

    v11 = CGImageSourceCopyPropertiesAtIndex(v6, 0, v10);
    objc_msgSend_valueForKeyPath_(v11, v12, (uint64_t)CFSTR("kCGImageSourceRawReconstructionOptions.kCGImageSourceSupportedSushiLevels"), v13, v14);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_valueForKeyPath_(v11, v15, (uint64_t)CFSTR("kCGImageSourceRawReconstructionOptions.kCGImageSourceRawReconstructionMethodVersions"), v16, v17);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D536C28C(2);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_containsObject_(v44, v19, (uint64_t)v18, v20, v21))
    {
      v25 = objc_msgSend_containsObject_(v43, v22, (uint64_t)CFSTR("6"), v23, v24);

      if (v25)
      {
        v27 = *MEMORY[0x1E0CBD270];
        v49[0] = v7;
        v49[1] = v27;
        v50[0] = CFSTR("2");
        v50[1] = CFSTR("6");
        objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v26, (uint64_t)v50, (uint64_t)v49, 2);
        v28 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

        ImageAtIndex = CGImageSourceCreateImageAtIndex(v6, 0, v28);
        DataProvider = CGImageGetDataProvider(ImageAtIndex);
        v31 = CGDataProviderCopyData(DataProvider);
        if (v31)
        {
          CC_SHA256_Init(&c);
          BytePtr = CFDataGetBytePtr(v31);
          Length = CFDataGetLength(v31);
          CC_SHA256_Update(&c, BytePtr, Length);
          image = ImageAtIndex;
          CC_SHA256_Final(md, &c);
          v34 = 0;
          __s1[0] = 0;
          do
          {
            __s2 = 0;
            if (asprintf(&__s2, "%02xd", md[v34]) != 3)
            {
              exception = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1D8271938](exception, "RawCameraException");
              __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
            }
            v35 = __s2;
            strncat(__s1, __s2, 2uLL);
            if (v34 <= 0x1E && (v34 & 1) != 0)
              *(_WORD *)&__s1[strlen(__s1)] = 58;
            if (v35)
              free(v35);
            ++v34;
          }
          while (v34 != 32);
          objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v36, (uint64_t)__s1, v37, v38);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          CFRelease(v31);
          ImageAtIndex = image;
          if (!image)
            goto LABEL_20;
        }
        else
        {
          v39 = 0;
          if (!ImageAtIndex)
          {
LABEL_20:
            v10 = v28;
            goto LABEL_21;
          }
        }
        CGImageRelease(ImageAtIndex);
        goto LABEL_20;
      }
    }
    else
    {

    }
    v39 = 0;
LABEL_21:
    CFRelease(v6);

    goto LABEL_22;
  }
  v39 = 0;
LABEL_22:

  objc_autoreleasePoolPop(v2);
  return v39;
}

void sub_1D53B90D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  void *v15;

  if (a2)
  {

    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1D53B9060);
  }
  _Unwind_Resume(exception_object);
}

id sub_1D53B9218(void **a1)
{
  id v1;
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *v12;
  std::__shared_weak_count *v13;

  sub_1D53B7FF0(a1, CFSTR("best"), 0, (uint64_t *)&v12);
  v1 = v12;
  if (v12)
  {
    (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v12 + 160))(&v10, v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 400))(v10);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  else
  {
    v2 = 0;
  }
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v1)
  {
    v1 = v2;
    v2 = v1;
  }

  return v1;
}

void sub_1D53B9318(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1D5282EB4((uint64_t)&a9);
  sub_1D5282EB4((uint64_t)&a11);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53B92E8);
}

id sub_1D53B9350(void **a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  id v15;
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  sub_1D53B7FF0(a1, CFSTR("best"), 0, &v23);
  if (v23)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v23 + 2872))(&v21);
    if (v21)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v21 + 24))(&v19);
      if (v19)
      {
        sub_1D530EC7C(v19, __p);
        if (v18 >= 0)
          objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v1, (uint64_t)__p, v2, v3);
        else
          objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v1, (uint64_t)__p[0], v2, v3);
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        if (v18 < 0)
          operator delete(__p[0]);
        v5 = 0;
      }
      else
      {
        v4 = 0;
        v5 = 1;
      }
      v6 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    else
    {
      v4 = 0;
      v5 = 1;
    }
    v9 = v22;
    if (v22)
    {
      v10 = (unint64_t *)&v22->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v4 = 0;
    v5 = 1;
  }
  v12 = v24;
  if (v24)
  {
    v13 = (unint64_t *)&v24->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v5)
        goto LABEL_25;
LABEL_27:
      v15 = v4;
      v4 = v15;
      goto LABEL_28;
    }
  }
  if (!v5)
    goto LABEL_27;
LABEL_25:
  v15 = 0;
LABEL_28:

  return v15;
}

void sub_1D53B94F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  sub_1D5282EB4((uint64_t)&a18);
  sub_1D5282EB4(v18 - 48);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53B94ACLL);
}

void sub_1D53B9550()
{
  JUMPOUT(0x1D53B953CLL);
}

id sub_1D53B9558(void **a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  void *__p;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void **v27;

  sub_1D53B7FF0(a1, CFSTR("best"), 0, &v25);
  if (v25)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v25 + 80))(&__p);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v25 + 144))(&v21);
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v1, v2, v3, v4);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v21;
    for (i = v22; v9 != i; v9 += 24)
    {
      v11 = v9;
      if (*(char *)(v9 + 23) < 0)
        v11 = *(_QWORD *)v9;
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v5, v11, v6, v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v8, v13, (uint64_t)v12, v14, v15);

    }
    objc_msgSend_arrayWithArray_(MEMORY[0x1E0C99D20], v5, (uint64_t)v8, v6, v7);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    v27 = (void **)&v21;
    sub_1D5293CCC(&v27);
    if (v24 < 0)
      operator delete(__p);
  }
  else
  {
    v16 = 0;
  }
  v17 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v16;
}

void sub_1D53B96A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  void *v19;
  uint64_t v20;

  *(_QWORD *)(v20 - 56) = &a10;
  sub_1D5293CCC((void ***)(v20 - 56));
  if (a18 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a19);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53B968CLL);
}

void *RawCameraTP(void *a1)
{
  id v1;
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t i;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  int v47;
  void *v48;
  void *v50;
  void *v51;
  id v52;
  void *v53;
  void *v54[2];

  v1 = a1;
  v2 = (void *)MEMORY[0x1D8272058]();
  if (!v1 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    v53 = 0;
    v47 = 1;
    goto LABEL_38;
  }
  objc_msgSend_objectForKeyedSubscript_(v1, v3, (uint64_t)CFSTR("path"), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    v53 = 0;
    v47 = 1;
    goto LABEL_37;
  }
  sub_1D53B6258((uint64_t *)v54, v6);
  v50 = v2;
  v51 = v6;
  v52 = v1;
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v7, v8, v9, v10);
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v11, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53B9558(v54);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = 0; i < objc_msgSend_count(v20, v16, v17, v18, v19); ++i)
  {
    objc_msgSend_objectAtIndexedSubscript_(v20, v22, i, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_isEqualToString_(v25, v26, (uint64_t)CFSTR("6"), v27, v28))
    {
      sub_1D53B7E70(v54, CFSTR("6"));
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53B8AD0(v54, 0);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53B8AD0(v54, 1);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53B8AD0(v54, 2);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53B8AD0(v54, 3);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      if (v32)
        objc_msgSend_setObject_forKeyedSubscript_(v15, v36, (uint64_t)v32, (uint64_t)CFSTR("v6 halfsize"), v37);
      if (v33)
        objc_msgSend_setObject_forKeyedSubscript_(v15, v36, (uint64_t)v33, (uint64_t)CFSTR("v6"), v37);
      if (v34)
        objc_msgSend_setObject_forKeyedSubscript_(v15, v36, (uint64_t)v34, (uint64_t)CFSTR("v6 sushi"), v37);
      if (v35)
        objc_msgSend_setObject_forKeyedSubscript_(v15, v36, (uint64_t)v35, (uint64_t)CFSTR("v6 sushi 2"), v37);
      if (v38)
        objc_msgSend_setObject_forKeyedSubscript_(v15, v36, (uint64_t)v38, (uint64_t)CFSTR("v6 sushi 3"), v37);

    }
    else
    {
      if (!objc_msgSend_isEqualToString_(v25, v29, (uint64_t)CFSTR("6.dng"), v30, v31))
        goto LABEL_29;
      sub_1D53B82F4(v54, 0);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53B82F4(v54, 1);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53B82F4(v54, 2);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53B82F4(v54, 3);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      if (v32)
        objc_msgSend_setObject_forKeyedSubscript_(v15, v39, (uint64_t)v32, (uint64_t)CFSTR("v6.dng"), v40);
      if (v33)
        objc_msgSend_setObject_forKeyedSubscript_(v15, v39, (uint64_t)v33, (uint64_t)CFSTR("v6.dng sushi"), v40);
      if (v34)
        objc_msgSend_setObject_forKeyedSubscript_(v15, v39, (uint64_t)v34, (uint64_t)CFSTR("v6.dng sushi 2"), v40);
      if (v35)
        objc_msgSend_setObject_forKeyedSubscript_(v15, v39, (uint64_t)v35, (uint64_t)CFSTR("v6.dng sushi 3"), v40);
    }

LABEL_29:
  }
  if (v15)
    objc_msgSend_setObject_forKeyedSubscript_(v53, v22, (uint64_t)v15, (uint64_t)CFSTR("reconstruction"), v24);
  sub_1D53B9218(v54);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  if (v43)
    objc_msgSend_setObject_forKeyedSubscript_(v53, v41, (uint64_t)v43, (uint64_t)CFSTR("metadata"), v42);
  sub_1D53B9350(v54);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  if (v46)
    objc_msgSend_setObject_forKeyedSubscript_(v53, v44, (uint64_t)v46, (uint64_t)CFSTR("rawdata_checksum"), v45);

  v47 = 0;
  v6 = v51;
  v1 = v52;
  v2 = v50;
LABEL_37:

LABEL_38:
  objc_autoreleasePoolPop(v2);
  if (v47)
    v48 = 0;
  else
    v48 = v53;

  return v48;
}

void sub_1D53B9ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t sub_1D53B9BCC(uint64_t a1)
{
  int v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v7);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 504))(v7);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  result = 1;
  if ((v1 + 2122219136) >= 0x12)
  {
    if (v1 > 555819296)
    {
      if (v1 > 1229539656)
      {
        if (v1 == 1229539657)
          return result;
        v6 = 1633771873;
      }
      else
      {
        if (v1 == 555819297)
          return result;
        v6 = 825307441;
      }
    }
    else if (v1 > 320017170)
    {
      if (v1 == 320017171)
        return result;
      v6 = 370546198;
    }
    else
    {
      if (v1 == -1802201964)
        return result;
      v6 = 303174162;
    }
    if (v1 != v6)
      return 0;
  }
  return result;
}

void sub_1D53B9D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D53B9D20(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *__p[2];
  char v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  _QWORD v9[2];

  v9[0] = &unk_1E99851F0;
  v9[1] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v7);
  v1 = v7;
  sub_1D52850A0(__p, "IFD0");
  (*(void (**)(uint64_t, void **, _QWORD *, uint64_t))(*(_QWORD *)v1 + 600))(v1, __p, v9, 3);
  if (v6 < 0)
    operator delete(__p[0]);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1D53B9DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1D53B9E0C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p[2];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *v17[2];
  uint64_t v18;

  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v15);
  v3 = v15;
  sub_1D52850A0(__p, "IFD0");
  if ((*(unsigned int (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v3 + 248))(v3, __p, v17, 0))
  {
    v5 = v17[0];
    v4 = v17[1];
    if (v14 < 0)
      operator delete(__p[0]);
    v6 = v4 - v5;
    v7 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v6 == 32)
    {
      *(_OWORD *)a2 = *(_OWORD *)v17;
      a2[2] = v18;
      return;
    }
  }
  else
  {
    if (v14 < 0)
      operator delete(__p[0]);
    v10 = v16;
    if (v16)
    {
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  __p[0] = 0;
  sub_1D528F9B4(a2, 4uLL, __p);
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
}

void sub_1D53B9F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1D53B9FA4(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void **p_lpsrc;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void **v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  void *lpsrc;
  std::__shared_weak_count *v38;
  void *v39;
  std::__shared_weak_count *v40;

  v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, (uint64_t)CFSTR("automaticDynamicRange"), v5, v6))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&lpsrc, a1);
    if (lpsrc
      && (v13 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9974B38, 0)) != 0)
    {
      v39 = v13;
      v40 = v38;
      p_lpsrc = &lpsrc;
    }
    else
    {
      p_lpsrc = &v39;
    }
    *p_lpsrc = 0;
    p_lpsrc[1] = 0;
    v20 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v39)
      v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v39 + 808))(v39);
    else
      v23 = 0;
    v25 = v40;
    if (v40)
    {
      v26 = (unint64_t *)&v40->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v10, v23, v11, v12);
    v24 = objc_claimAutoreleasedReturnValue();
  }
  else if (objc_msgSend_isEqualToString_(v3, v7, (uint64_t)CFSTR("hasExtendedRawData"), v8, v9))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&lpsrc, a1);
    if (lpsrc
      && (v18 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9974B38, 0)) != 0)
    {
      v39 = v18;
      v40 = v38;
      v19 = &lpsrc;
    }
    else
    {
      v19 = &v39;
    }
    *v19 = 0;
    v19[1] = 0;
    v28 = v38;
    if (v38)
    {
      v29 = (unint64_t *)&v38->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v39)
      v31 = (*(uint64_t (**)(void *))(*(_QWORD *)v39 + 800))(v39);
    else
      v31 = 0;
    v32 = v40;
    if (v40)
    {
      v33 = (unint64_t *)&v40->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v15, v31, v16, v17);
    v24 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    sub_1D54210E0(a1, v3);
    v24 = objc_claimAutoreleasedReturnValue();
  }
  v35 = (void *)v24;

  return v35;
}

void sub_1D53BA208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_1D53BA23C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2784))(a1);
}

BOOL sub_1D53BA248(uint64_t a1)
{
  void *v1;
  void **v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  _BOOL8 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *lpsrc[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD v22[7];
  void *v23;
  std::__shared_weak_count *v24;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(lpsrc);
  if (lpsrc[0]
    && (v1 = __dynamic_cast(lpsrc[0], (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9974B38, 0)) != 0)
  {
    v23 = v1;
    v24 = (std::__shared_weak_count *)lpsrc[1];
    v2 = lpsrc;
  }
  else
  {
    v2 = &v23;
  }
  *v2 = 0;
  v2[1] = 0;
  v3 = (std::__shared_weak_count *)lpsrc[1];
  if (lpsrc[1])
  {
    v4 = (unint64_t *)((char *)lpsrc[1] + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v23)
  {
    v21 = 0u;
    memset(v22, 0, sizeof(v22));
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    *(_OWORD *)lpsrc = 0u;
    v12 = 0u;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v23 + 848))(lpsrc);
    v6 = LOBYTE(lpsrc[0]) != 0;
  }
  else
  {
    v6 = 0;
  }
  v7 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1D53BA37C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53BA390(uint64_t a1)
{
  char v1;
  void *v3;
  void **p_lpsrc;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *lpsrc;
  std::__shared_weak_count *v14;
  void *v15;
  std::__shared_weak_count *v16;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9974B38, 0)) != 0)
  {
    v15 = v3;
    v16 = v14;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v15;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v15;
  if (v15)
    v1 = (*(uint64_t (**)(void *))(*(_QWORD *)v15 + 824))(v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (v8)
        return v1 & 1;
      goto LABEL_17;
    }
  }
  if (!v8)
LABEL_17:
    v1 = sub_1D532C160(a1);
  return v1 & 1;
}

void sub_1D53BA4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D53BA4C8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *lpsrc[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[32];
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  void *v35;
  std::__shared_weak_count *v36;

  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 496) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_1D53A4E1C(a1, a2, (_DWORD *)a3);
  if ((sub_1D5297E1C(a1) & 1) == 0)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(lpsrc, a1);
    if (lpsrc[0]
      && (v5 = __dynamic_cast(lpsrc[0], (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9974B38, 0)) != 0)
    {
      v35 = v5;
      v36 = (std::__shared_weak_count *)lpsrc[1];
      v6 = lpsrc;
    }
    else
    {
      v6 = &v35;
    }
    *v6 = 0;
    v6[1] = 0;
    v7 = (std::__shared_weak_count *)lpsrc[1];
    if (lpsrc[1])
    {
      v8 = (unint64_t *)((char *)lpsrc[1] + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v35;
    if (v35)
    {
      (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v35 + 848))(lpsrc, v35);
      v11 = v34[0];
      *(_OWORD *)(a3 + 368) = v33;
      *(_OWORD *)(a3 + 384) = v11;
      v12 = *(_OWORD *)v31;
      *(_OWORD *)(a3 + 304) = v30;
      *(_OWORD *)(a3 + 320) = v12;
      v13 = v32;
      *(_OWORD *)(a3 + 336) = *(_OWORD *)&v31[16];
      *(_OWORD *)(a3 + 352) = v13;
      v14 = v27;
      *(_OWORD *)(a3 + 240) = v26;
      *(_OWORD *)(a3 + 256) = v14;
      v15 = v29;
      *(_OWORD *)(a3 + 272) = v28;
      *(_OWORD *)(a3 + 288) = v15;
      v16 = v25;
      *(_OWORD *)(a3 + 208) = *(_OWORD *)lpsrc;
      *(_OWORD *)(a3 + 224) = v16;
      *(_OWORD *)(a3 + 396) = *(_OWORD *)((char *)v34 + 12);
      (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v10 + 856))(lpsrc, v10);
      v17 = *(_OWORD *)v31;
      *(_OWORD *)(a3 + 508) = v30;
      *(_OWORD *)(a3 + 524) = v17;
      *(_OWORD *)(a3 + 536) = *(_OWORD *)&v31[12];
      v18 = v27;
      *(_OWORD *)(a3 + 444) = v26;
      *(_OWORD *)(a3 + 460) = v18;
      v19 = v29;
      *(_OWORD *)(a3 + 476) = v28;
      *(_OWORD *)(a3 + 492) = v19;
      v20 = v25;
      *(_OWORD *)(a3 + 412) = *(_OWORD *)lpsrc;
      *(_OWORD *)(a3 + 428) = v20;
    }
    v21 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
}

void sub_1D53BA6A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53BA6BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = sub_1D53A1B5C(a1);
  if (v2 >> 8 == 8487297)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
    v4 = (12 * HIDWORD(v3) + v2 - 128) % 18;
    return (v4
                        - 2122219264
                        - (char)(v4 - 6 * ((((43 * (char)v4) & 0x8000) != 0) + ((unsigned __int16)(43 * (char)v4) >> 8)))
                        + ((int)v3
                         + (char)(v4 - 6
                                     * ((((43 * (char)v4) & 0x8000) != 0) + ((unsigned __int16)(43 * (char)v4) >> 8))))
                        % 6
                        + 128);
  }
  return v2;
}

double sub_1D53BA798(uint64_t a1)
{
  void *v1;
  void **p_lpsrc;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  double v14;
  double v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *exception;
  void *lpsrc;
  std::__shared_weak_count *v22;
  void *v23;
  std::__shared_weak_count *v24;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v1 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9974B38, 0)) != 0)
  {
    v23 = v1;
    v24 = v22;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v23;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v3 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v23)
  {
    v6 = (void *)*((_QWORD *)v23 + 3);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v23 + 4);
    lpsrc = v6;
    v22 = v7;
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    sub_1D53BBFC4((uint64_t)v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      v11 = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (!v10)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v13 = sub_1D539D70C(v10);
    v14 = 0.0;
    if (v13 >= (int)sub_1D539D70C(CFSTR("9.20")))
    {
      v15 = 0.0;
      if (*((_BYTE *)v23 + 1640))
        v15 = *((double *)v23 + 204);
      v14 = 0.0 - v15;
    }

  }
  else
  {
    v14 = 0.0;
  }
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v14;
}

void sub_1D53BA974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D53BA9B4(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  __int128 v18;

  v3 = objc_retainAutorelease(a1);
  v8 = objc_msgSend_bytes(v3, v4, v5, v6, v7);
  v16 = objc_msgSend_length(v3, v9, v10, v11, v12);
  sub_1D528304C(&v17, &v16);
  sub_1D52843AC(v8, (uint64_t)&v17, 0, &v18);
  sub_1D53BAA90(&v18, v3, a2);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

}

void sub_1D53BAA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1D53BAA90(_QWORD *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  id v5;

  v5 = a2;
  sub_1D53BB84C(a1, &v5, a3);
  sub_1D53BAC24(*a3);

}

void sub_1D53BAAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  sub_1D5282EB4(v9);

  _Unwind_Resume(a1);
}

void sub_1D53BAB08(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  const char *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;

  v3 = a1;
  objc_msgSend_dataWithContentsOfURL_options_error_(MEMORY[0x1E0C99D50], v4, (uint64_t)v3, 1, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v5;
  if (v5)
  {
    sub_1D53BA9B4(v5, a2);
  }
  else
  {
    objc_msgSend_path(v3, v6, v7, v8, v9);
    v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v16 = objc_msgSend_UTF8String(v11, v12, v13, v14, v15);
    sub_1D5284368(v16, 0, &v20);

    sub_1D53BAA90(&v20, 0, a2);
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }

}

void sub_1D53BABE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_1D5282EB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1D53BAC24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _BOOL4 v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  void *exception;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  unsigned int v57;
  void *__p[2];
  uint64_t v59;
  unsigned int v60;
  _BYTE v61[278];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (!*(_QWORD *)(a1 + 48))
  {
    sub_1D52845EC(v2, 1);
    v3 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)v61 = -278;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v3 + 40))(v3, v61, 2);
    memset(v61, 0, sizeof(v61));
    if ((*(unsigned int (**)(_QWORD, _BYTE *, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v61, 278) != 278)
    {
      v50 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v50, "RawCameraException");
      __cxa_throw(v50, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v4 = 277;
    while (v61[v4 - 3] != 80 || v61[v4 - 2] != 75 || v61[v4 - 1] != 5 || v61[v4] != 6)
    {
      if (--v4 == 2)
        return;
    }
    v5 = *(_QWORD *)(a1 + 24);
    LODWORD(__p[0]) = v4 - 281;
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v5 + 40))(v5, __p, 2);
    if (sub_1D52847F8(*(_QWORD *)(a1 + 24)) != 101010256)
    {
      v51 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v51, "RawCameraException");
      __cxa_throw(v51, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v6 = sub_1D528479C(*(_QWORD *)(a1 + 24));
    if (v6 != sub_1D528479C(*(_QWORD *)(a1 + 24)))
    {
      v52 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v52, "RawCameraException");
      __cxa_throw(v52, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v7 = sub_1D528479C(*(_QWORD *)(a1 + 24));
    v8 = sub_1D528479C(*(_QWORD *)(a1 + 24));
    if (v7 != v8)
    {
      v53 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v53, "RawCameraException");
      __cxa_throw(v53, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v9 = sub_1D52847F8(*(_QWORD *)(a1 + 24));
    v60 = 0;
    v60 = sub_1D52847F8(*(_QWORD *)(a1 + 24));
    if (v9 >= (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24)))
    {
      v54 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v54, "RawCameraException");
      __cxa_throw(v54, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
    if (v60 >= v10)
    {
      v55 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v55, "RawCameraException");
      __cxa_throw(v55, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v11 = sub_1D528479C(*(_QWORD *)(a1 + 24));
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24)) <= v11)
    {
      v56 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v56, "RawCameraException");
      __cxa_throw(v56, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    objc_msgSend_dictionaryWithCapacity_(MEMORY[0x1E0C99E08], v12, v7, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = *(_QWORD *)(a1 + 24);
    sub_1D5282F74((int *)__p, (int *)&v60);
    (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v16 + 40))(v16, __p, 0);
    if (v7)
    {
      do
      {
        if (sub_1D52847F8(*(_QWORD *)(a1 + 24)) != 33639248)
        {
          v44 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v44, "RawCameraException");
          __cxa_throw(v44, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        sub_1D528479C(*(_QWORD *)(a1 + 24));
        sub_1D528479C(*(_QWORD *)(a1 + 24));
        sub_1D528479C(*(_QWORD *)(a1 + 24));
        if (sub_1D528479C(*(_QWORD *)(a1 + 24)))
        {
          v45 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v45, "RawCameraException");
          __cxa_throw(v45, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        sub_1D528479C(*(_QWORD *)(a1 + 24));
        sub_1D528479C(*(_QWORD *)(a1 + 24));
        sub_1D52847F8(*(_QWORD *)(a1 + 24));
        v17 = sub_1D52847F8(*(_QWORD *)(a1 + 24));
        if (v17 != sub_1D52847F8(*(_QWORD *)(a1 + 24)))
        {
          v46 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v46, "RawCameraException");
          __cxa_throw(v46, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        v18 = sub_1D528479C(*(_QWORD *)(a1 + 24));
        if (!v18)
        {
          v47 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v47, "RawCameraException");
          __cxa_throw(v47, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        v19 = sub_1D528479C(*(_QWORD *)(a1 + 24));
        v20 = sub_1D528479C(*(_QWORD *)(a1 + 24));
        sub_1D528479C(*(_QWORD *)(a1 + 24));
        sub_1D528479C(*(_QWORD *)(a1 + 24));
        sub_1D52847F8(*(_QWORD *)(a1 + 24));
        v21 = sub_1D52847F8(*(_QWORD *)(a1 + 24));
        if (v21 >= (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24)))
        {
          v48 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v48, "RawCameraException");
          __cxa_throw(v48, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        __p[0] = 0;
        __p[1] = 0;
        v59 = 0;
        v22 = *(_QWORD *)(a1 + 24);
        v57 = v18;
        sub_1D52849DC(v22, &v57, (uint64_t)__p);
        v23 = *(_QWORD *)(a1 + 24);
        v57 = v19;
        (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v23 + 40))(v23, &v57, 1);
        v24 = *(_QWORD *)(a1 + 24);
        v57 = v20;
        (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v24 + 40))(v24, &v57, 1);
        sub_1D5288864((uint64_t)__p, v25, v26, v27, v28);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = sub_1D5297D80(v15, v29);

        if (v30)
        {
          v49 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v49, "RawCameraException");
          __cxa_throw(v49, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        sub_1D5288864((uint64_t)__p, v31, v32, v33, v34);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v36, v21, v37, v38);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v15, v40, (uint64_t)v39, (uint64_t)v35, v41);

        if (SHIBYTE(v59) < 0)
          operator delete(__p[0]);
        --v8;
      }
      while (v8);
    }
    v42 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v15;

  }
}

void sub_1D53BB340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D53BB45C(_QWORD *a1, _QWORD *a2, void *a3)
{
  id v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v5 = a3;
  *a1 = &unk_1E9997918;
  sub_1D53A1140(a1 + 1);
  v6 = a2[1];
  a1[3] = *a2;
  a1[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a1[5] = v5;
  a1[6] = 0;
  return a1;
}

void sub_1D53BB4CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53BB4DC(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;

  v9 = a2;
  if (sub_1D5297D80(*(void **)(a1 + 48), v9))
  {
    v8 = sub_1D5297AC0(*(void **)(a1 + 48), v9, v5, v6, v7);
    sub_1D53BB558(a1, v8, (_OWORD *)a3);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }

}

void sub_1D53BB544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D53BB558@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *exception;
  void *v15;
  void *v16;
  void *v17;
  __int128 v18;
  uint64_t v19[2];
  uint64_t v20;

  v20 = a2;
  sub_1D52E1E7C(v19, (uint64_t *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    goto LABEL_9;
  }
  sub_1D52845EC(v5, 1);
  v6 = *(_QWORD *)(a1 + 24);
  sub_1D528594C(&v18, &v20);
  (*(void (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)v6 + 40))(v6, &v18, 0);
  if (sub_1D52847F8(*(_QWORD *)(a1 + 24)) != 67324752)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
LABEL_9:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D528479C(*(_QWORD *)(a1 + 24));
  sub_1D528479C(*(_QWORD *)(a1 + 24));
  if (sub_1D528479C(*(_QWORD *)(a1 + 24)))
  {
    v15 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v15, "RawCameraException");
    __cxa_throw(v15, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D528479C(*(_QWORD *)(a1 + 24));
  sub_1D528479C(*(_QWORD *)(a1 + 24));
  sub_1D52847F8(*(_QWORD *)(a1 + 24));
  v7 = sub_1D52847F8(*(_QWORD *)(a1 + 24));
  if (v7 != sub_1D52847F8(*(_QWORD *)(a1 + 24)))
  {
    v16 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v16, "RawCameraException");
    __cxa_throw(v16, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v8 = sub_1D528479C(*(_QWORD *)(a1 + 24));
  if (!v8)
  {
    v17 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v17, "RawCameraException");
    __cxa_throw(v17, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v9 = sub_1D528479C(*(_QWORD *)(a1 + 24));
  v10 = *(_QWORD *)(a1 + 24);
  LODWORD(v18) = v9 + v8;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v10 + 40))(v10, &v18, 1);
  sub_1D530AD68(v7, &v18);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = sub_1D52E658C(v18);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, v12, *(_QWORD *)(v18 + 24));
  *a3 = v18;
  return sub_1D52E1F44(v19);
}

void sub_1D53BB7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1D52E1F44((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53BB81C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_allKeys(*(void **)(a1 + 48), a2, a3, a4, a5);
}

void sub_1D53BB828(uint64_t a1)
{
  sub_1D53BB954(a1);
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D53BB84C@<X0>(_QWORD *a1@<X1>, void **a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x50uLL);
  result = sub_1D53BB8AC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1D53BB898(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53BB8AC(_QWORD *a1, _QWORD *a2, void **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E9997948;
  sub_1D53BB45C(a1 + 3, a2, *a3);
  return a1;
}

void sub_1D53BB8E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53BB8FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9997948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53BB910(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9997948;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53BB944(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D53BB954(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E9997918;

  sub_1D5282EB4(a1 + 24);
  sub_1D5282EB4(a1 + 8);
  return a1;
}

uint64_t sub_1D53BB9A4(uint64_t a1, int a2, uint64_t *a3)
{
  _QWORD *v5;
  void **v6;
  int v7;
  int i;
  float v9;
  float v10;
  unint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  float *v20;
  int v21;

  v5 = (_QWORD *)sub_1D544098C(a1, a2);
  *v5 = &off_1E9997998;
  v5[6] = 0;
  v6 = (void **)(v5 + 6);
  v5[7] = 0;
  v5[8] = 0;
  *(_DWORD *)(a1 + 12) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 16) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 20) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 24) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 28) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 32) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 36) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 40) = sub_1D52847F8(*a3);
  v7 = sub_1D52847F8(*a3);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      v9 = sub_1D5284934(*a3);
      v10 = v9;
      v12 = *(float **)(a1 + 56);
      v11 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v12 >= v11)
      {
        v14 = (float *)*v6;
        v15 = ((char *)v12 - (_BYTE *)*v6) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          sub_1D5282B8C();
        v17 = v11 - (_QWORD)v14;
        if (v17 >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)sub_1D5282BA0(a1 + 64, v18);
          v14 = *(float **)(a1 + 48);
          v12 = *(float **)(a1 + 56);
        }
        else
        {
          v19 = 0;
        }
        v20 = (float *)&v19[4 * v15];
        *v20 = v10;
        v13 = v20 + 1;
        while (v12 != v14)
        {
          v21 = *((_DWORD *)v12-- - 1);
          *((_DWORD *)v20-- - 1) = v21;
        }
        *(_QWORD *)(a1 + 48) = v20;
        *(_QWORD *)(a1 + 56) = v13;
        *(_QWORD *)(a1 + 64) = &v19[4 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v12 = v9;
        v13 = v12 + 1;
      }
      *(_QWORD *)(a1 + 56) = v13;
    }
  }
  return a1;
}

void sub_1D53BBB4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

id sub_1D53BBB78(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  double v64;
  _DWORD *v65;
  _DWORD *v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  RAWOpcodeDeltaPerColumn *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;

  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v7, *(unsigned int *)(a1 + 12), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v11, (uint64_t)v10, (uint64_t)CFSTR("Top"), v12);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v13, *(unsigned int *)(a1 + 16), v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v17, (uint64_t)v16, (uint64_t)CFSTR("Left"), v18);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v19, *(unsigned int *)(a1 + 20), v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v23, (uint64_t)v22, (uint64_t)CFSTR("Bottom"), v24);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v25, *(unsigned int *)(a1 + 24), v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v29, (uint64_t)v28, (uint64_t)CFSTR("mRight"), v30);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v31, *(unsigned int *)(a1 + 28), v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v35, (uint64_t)v34, (uint64_t)CFSTR("Plane"), v36);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v37, *(unsigned int *)(a1 + 32), v38, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v41, (uint64_t)v40, (uint64_t)CFSTR("Planes"), v42);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v43, *(unsigned int *)(a1 + 36), v44, v45);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v47, (uint64_t)v46, (uint64_t)CFSTR("RowPitch"), v48);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v49, *(unsigned int *)(a1 + 40), v50, v51);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v53, (uint64_t)v52, (uint64_t)CFSTR("ColPitch"), v54);

  objc_msgSend_array(MEMORY[0x1E0C99DE8], v55, v56, v57, v58);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v65 = *(_DWORD **)(a1 + 48);
  v66 = *(_DWORD **)(a1 + 56);
  while (v65 != v66)
  {
    LODWORD(v64) = *v65;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v59, v60, v61, v62, v64);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v63, v68, (uint64_t)v67, v69, v70);

    ++v65;
  }
  objc_msgSend_setObject_forKeyedSubscript_(v6, v59, (uint64_t)v63, (uint64_t)CFSTR("Delta"), v62);
  v71 = [RAWOpcodeDeltaPerColumn alloc];
  v75 = (void *)objc_msgSend_initWithArguments_(v71, v72, (uint64_t)v6, v73, v74);

  return v75;
}

void sub_1D53BBDA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D53BBDF4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E9997998;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1D53BBE30(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E9997998;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53BBE7C()
{
  return 11;
}

void sub_1D53BBE84(void *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  id v6;

  v6 = a1;
  v5 = a2;
  sub_1D53BE1B0(&v6, &v5, a3);

}

void sub_1D53BBEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{

  _Unwind_Resume(a1);
}

id sub_1D53BBEFC(id *a1)
{
  return *a1;
}

id sub_1D53BBF04(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *exception;

  if (!*(_QWORD *)(a1 + 8))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D53BBFA4(a1, CFSTR("rawImageClass"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D5297D18(v1, CFSTR("className"), v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1D53BBF84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D53BBFA4(uint64_t a1, void *a2)
{
  sub_1D5297C60(*(void **)(a1 + 8), a2, 0);
  return (id)objc_claimAutoreleasedReturnValue();
}

id sub_1D53BBFC4(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *exception;

  if (!*(_QWORD *)(a1 + 8))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D53BBFA4(a1, CFSTR("version"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D5297D18(v1, CFSTR("minRawCameraVersion"), v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1D53BC044(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53BC064(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *exception;
  id v4;

  if (!*(_QWORD *)(a1 + 8))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D53BBFA4(a1, CFSTR("rawProperties"));
  v4 = (id)objc_claimAutoreleasedReturnValue();
  sub_1D528880C(v4, a2);

}

void sub_1D53BC0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL sub_1D53BC104(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  int v5;
  _BOOL8 v6;
  void *exception;

  sub_1D539D668();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53BBFC4(a1);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (!v2 || !v3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v5 = sub_1D539D70C(v2);
  v6 = v5 >= (int)sub_1D539D70C(v4);

  return v6;
}

void sub_1D53BC1C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53BC1FC(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  sub_1D53BC20C(a1, 0, a2, a3, a4);
}

void sub_1D53BC20C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  id v9;
  id v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(_QWORD, _QWORD);
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  void *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  BOOL v37;
  void *v38;
  void *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  id v45;
  __int128 v46;

  v9 = a2;
  v10 = a3;
  v44 = a1;
  v45 = a4;
  sub_1D53BBFA4(a1, CFSTR("rawPlugin"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *a5 = 0;
  a5[1] = 0;
  if ((objc_msgSend_isEqualToString_(v10, v12, (uint64_t)off_1EFF31F78[0], v13, v14) & 1) == 0)
  {
    v15 = (void (**)(_QWORD, _QWORD))MEMORY[0x1D82721B4](*(_QWORD *)(v44 + 16));
    ((void (**)(_QWORD, const __CFString *))v15)[2](v15, CFSTR("methodNumber"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    v43 = v16;
    v21 = objc_msgSend_shortValue(v16, v17, v18, v19, v20);
    if (!*a5 && (v21 & 0x80000000) == 0)
    {
      v22 = (unsigned __int16)v21;
      do
      {
        v23 = (void *)MEMORY[0x1E0CB3940];
        LODWORD(v46) = v22;
        sub_1D52B4860(&v46);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithFormat_(v23, v25, (uint64_t)CFSTR("v%@"), v26, v27, v24);
        v28 = (void *)objc_claimAutoreleasedReturnValue();

        sub_1D5297C60(v11, v28, 0);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = v29;
        if (v29)
        {
          if (v9 && sub_1D5297D80(v29, v9))
          {
            sub_1D5297C60(v30, v9, 0);
            v31 = objc_claimAutoreleasedReturnValue();

            v30 = (void *)v31;
          }
          if (sub_1D5297D80(v30, v10))
          {
            sub_1D53C2B44();
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            v33 = (void *)MEMORY[0x1D82721B4](*(_QWORD *)(v44 + 16));
            sub_1D53BE6A8(v30, v10, v32, v33, v45, &v46);
            sub_1D5292548((uint64_t)a5, &v46);
            v34 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
            if (*((_QWORD *)&v46 + 1))
            {
              v35 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
              do
                v36 = __ldaxr(v35);
              while (__stlxr(v36 - 1, v35));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
            }

          }
        }

        v37 = __OFSUB__(v22--, 1);
      }
      while (!*a5 && v22 < 0 == v37);
    }

  }
  if (!*a5 && sub_1D5297D80(v11, v10))
  {
    sub_1D53C2B44();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = (void *)MEMORY[0x1D82721B4](*(_QWORD *)(v44 + 16));
    sub_1D53BE6A8(v11, v10, v38, v39, v45, &v46);
    sub_1D5292548((uint64_t)a5, &v46);
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
    if (*((_QWORD *)&v46 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }

  }
}

void sub_1D53BC4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;

  sub_1D5282EB4(v15);
  _Unwind_Resume(a1);
}

void sub_1D53BC57C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  int v12;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  std::string::size_type size;
  char v19;
  std::string *v20;
  std::string *v21;
  std::string *p_str;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  void *exception;
  std::string v27;
  std::string __str;
  char v29;

  if (!*(_QWORD *)(a1 + 8))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_1D53BBFA4(a1, CFSTR("rawImageClass"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D52EAE5C(v3, CFSTR("supportedMethods"), v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = sub_1D53BC7D8();
  for (i = 0; i < objc_msgSend_count(v7, v8, v9, v10, v11); ++i)
  {
    v27.__r_.__value_.__r.__words[0] = i;
    sub_1D53BC854(v7, (const char *)&v27, v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D529A17C(v17, &__str);

    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    v19 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    v20 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
    {
      v10 = size - 1;
      v21 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__str
          : (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v21->__r_.__value_.__s.__data_[v10] == 112)
      {
        if (!v12)
          goto LABEL_26;
        std::string::basic_string(&v27, &__str, 0, v10, (std::allocator<char> *)&v29);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = v27;
        v19 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
        v20 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
    }
    if (v19 >= 0)
      p_str = &__str;
    else
      p_str = v20;
    if (atoi((const char *)p_str) >= 6)
    {
      v23 = a2[1];
      if (v23 >= a2[2])
      {
        v25 = sub_1D52B2070(a2, (__int128 *)&__str);
      }
      else
      {
        if (v19 < 0)
        {
          sub_1D5290130((_BYTE *)a2[1], v20, __str.__r_.__value_.__l.__size_);
        }
        else
        {
          v24 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          *(_QWORD *)(v23 + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
          *(_OWORD *)v23 = v24;
        }
        v25 = v23 + 24;
        a2[1] = v23 + 24;
      }
      a2[1] = v25;
      v19 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
LABEL_26:
    if (v19 < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }

}

void sub_1D53BC75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  sub_1D5293CCC((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53BC7D8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF32478);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF32478))
  {
    byte_1EFF32470 = getenv("RAWCAMERA_ENABLE_PRELIMINARY_SUPPORT") != 0;
    __cxa_guard_release(&qword_1EFF32478);
  }
  return byte_1EFF32470;
}

id sub_1D53BC854(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  id v7;

  objc_msgSend_objectAtIndexedSubscript_(a1, a2, *(_QWORD *)a2, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  return v7;
}

void sub_1D53BC8AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D53BC8BC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  sub_1D53BC20C(a1, a2, a3, 0, &v12);
  if (v12)
  {
    sub_1D53BE790(v12, v3, v4, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = 0;
  }
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v7;
}

void sub_1D53BC940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1D53BC954(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t i;
  uint64_t j;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  unsigned int *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *exception;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  void *v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  std::__shared_weak_count *v159;

  sub_1D53BC20C(a1, 0, CFSTR("blackNoiseModel"), 0, &v158);
  v7 = v158;
  if (v158)
  {
    sub_1D53BE790(v158, v3, v4, v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && (unint64_t)objc_msgSend_count(v8, v9, v10, v11, v12) >= 2)
    {
      *(_QWORD *)&v157 = 0;
      v16 = sub_1D53BD2F0(v8, (const char *)&v157, v13, v14, v15);
      v152 = v8;
      if (v16)
      {
        if (v16 != 1 || (unint64_t)objc_msgSend_count(v8, v17, v18, v19, v20) <= 2)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](exception, "RawCameraException");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        *(_QWORD *)&v157 = 1;
        v151 = sub_1D53BD2F0(v8, (const char *)&v157, v21, v22, v23);
        v28 = objc_msgSend_count(v8, v24, v25, v26, v27);
        v146 = a2;
        v147 = v7;
        v32 = (v28 - 2);
        if (v28 == 2)
        {
          v46 = 0;
          v34 = 0;
        }
        else
        {
          v33 = 0;
          v34 = 0;
          do
          {
            *(_QWORD *)&v157 = v33 + 2;
            sub_1D53BD380(v8, (const char *)&v157, v29, v30, v31);
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v38)
            {
              v141 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1D8271938](v141, "RawCameraException");
              __cxa_throw(v141, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
            }
            if (v151)
            {
              v39 = 0;
              do
              {
                *(_QWORD *)&v157 = ++v39;
                sub_1D53BD380(v38, (const char *)&v157, v35, v36, v37);
                v40 = (void *)objc_claimAutoreleasedReturnValue();
                v45 = v40;
                if (!v40)
                {
                  v139 = __cxa_allocate_exception(0x10uLL);
                  MEMORY[0x1D8271938](v139, "RawCameraException");
                  __cxa_throw(v139, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
                }
                v34 += objc_msgSend_count(v40, v41, v42, v43, v44);

              }
              while (v151 != v39);
            }

            ++v33;
          }
          while (v33 != v32);
          v46 = v32;
        }
        v86 = 16 * v46;
        v87 = v32 * v151;
        sub_1D530AD68(16 * v46 + 16 * v32 * v151 + 24 * v34 + 16, &v157);
        v88 = sub_1D52E658C(v157);
        *(_DWORD *)v88 = v151;
        *(_DWORD *)(v88 + 4) = v32;
        v145 = v88;
        v149 = v88 + 16;
        *(_QWORD *)(v88 + 8) = v88 + 16;
        if ((_DWORD)v32)
        {
          v92 = 0;
          v93 = v149 + v86;
          v94 = v149 + v86 + 16 * v87;
          v148 = v46;
          do
          {
            *(_QWORD *)&v154 = (v92 + 2);
            sub_1D53BD380(v8, (const char *)&v154, v89, v90, v91);
            v95 = (void *)objc_claimAutoreleasedReturnValue();
            v99 = v95;
            if (!v95)
            {
              v142 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1D8271938](v142, "RawCameraException");
              __cxa_throw(v142, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
            }
            *(_QWORD *)&v154 = 0;
            v100 = sub_1D53BD2F0(v95, (const char *)&v154, v96, v97, v98);
            v150 = v92;
            v104 = v149 + 16 * v92;
            *(_DWORD *)v104 = v100;
            *(_QWORD *)(v104 + 8) = v93;
            if (v151)
            {
              v105 = 0;
              do
              {
                v106 = v105 + 1;
                *(_QWORD *)&v154 = v105 + 1;
                sub_1D53BD380(v99, (const char *)&v154, v101, v102, v103);
                v107 = (void *)objc_claimAutoreleasedReturnValue();
                v112 = v107;
                if (!v107)
                {
                  v140 = __cxa_allocate_exception(0x10uLL);
                  MEMORY[0x1D8271938](v140, "RawCameraException");
                  __cxa_throw(v140, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
                }
                *(_DWORD *)(v93 + 16 * v105) = v105;
                v113 = objc_msgSend_count(v107, v108, v109, v110, v111, v145);
                v117 = v99;
                v118 = v93 + 16 * v105;
                *(_DWORD *)(v118 + 4) = v113 / 3;
                v119 = (unsigned int *)(v118 + 4);
                *(_QWORD *)(v119 + 1) = v94;
                if ((v113 / 3))
                {
                  v120 = 0;
                  v121 = 0;
                  do
                  {
                    *(_QWORD *)&v154 = v121;
                    *(double *)(v94 + 8 * v121) = sub_1D53BD334(v112, (const char *)&v154, v114, v115, v116);
                    *(_QWORD *)&v154 = v121 + 1;
                    v125 = v94 + 8 * v121;
                    *(double *)(v125 + 8) = sub_1D53BD334(v112, (const char *)&v154, v122, v123, v124);
                    *(_QWORD *)&v154 = v121 + 2;
                    *(double *)(v125 + 16) = sub_1D53BD334(v112, (const char *)&v154, v126, v127, v128);
                    ++v120;
                    v129 = *v119;
                    v121 += 3;
                  }
                  while (v120 < v129);
                }
                else
                {
                  LODWORD(v129) = 0;
                }
                v94 += 24 * v129;

                v105 = v106;
                v8 = v152;
                v99 = v117;
              }
              while (v106 != v151);
            }
            v93 += 16 * v151;

            v92 = v150 + 1;
          }
          while (v150 + 1 != v148);
        }
        v153 = v157;
        if (*((_QWORD *)&v157 + 1))
        {
          v130 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
          do
            v131 = __ldxr(v130);
          while (__stxr(v131 + 1, v130));
        }
        sub_1D53AB4E0(v145, &v153, &v154);
        v7 = v147;
        sub_1D5292548(v146, &v154);
        v132 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
        if (*((_QWORD *)&v154 + 1))
        {
          v133 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
        }
        v135 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
        if (*((_QWORD *)&v153 + 1))
        {
          v136 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
          do
            v137 = __ldaxr(v136);
          while (__stlxr(v137 - 1, v136));
          if (!v137)
          {
            ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
            std::__shared_weak_count::__release_weak(v135);
          }
        }
        v47 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
        if (!*((_QWORD *)&v157 + 1))
          goto LABEL_21;
        v138 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
        do
          v49 = __ldaxr(v138);
        while (__stlxr(v49 - 1, v138));
      }
      else
      {
        v58 = (objc_msgSend_count(v8, v17, v18, v19, v20) - 1) / 0xEuLL;
        if (objc_msgSend_count(v8, v54, v55, v56, v57) != ((14 * v58) | 1))
        {
          v144 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v144, "RawCameraException");
          __cxa_throw(v144, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        sub_1D530AD68(112 * (v58 + 1), &v157);
        v156 = 0;
        v62 = sub_1D52E658C(v157);
        v63 = a2;
        v64 = v7;
        v155 = v62;
        if ((_DWORD)v58)
        {
          v65 = 0;
          do
          {
            ++v156;
            *(_DWORD *)v62 = sub_1D53BD2F0(v8, (const char *)&v156, v59, v60, v61);
            ++v156;
            *(double *)(v62 + 8) = sub_1D53BD334(v8, (const char *)&v156, v66, v67, v68);
            ++v156;
            *(double *)(v62 + 16) = sub_1D53BD334(v8, (const char *)&v156, v69, v70, v71);
            for (i = 24; i != 64; i += 8)
            {
              ++v156;
              *(double *)(v62 + i) = sub_1D53BD334(v8, (const char *)&v156, v72, v73, v74);
            }
            ++v156;
            *(double *)(v62 + 64) = sub_1D53BD334(v8, (const char *)&v156, v72, v73, v74);
            for (j = 72; j != 112; j += 8)
            {
              ++v156;
              *(double *)(v62 + j) = sub_1D53BD334(v8, (const char *)&v156, v59, v60, v61);
            }
            ++v65;
            v62 += 112;
          }
          while (v65 != (_DWORD)v58);
        }
        *(_OWORD *)(v62 + 80) = 0u;
        *(_OWORD *)(v62 + 96) = 0u;
        *(_OWORD *)(v62 + 48) = 0u;
        *(_OWORD *)(v62 + 64) = 0u;
        *(_OWORD *)(v62 + 16) = 0u;
        *(_OWORD *)(v62 + 32) = 0u;
        *(_OWORD *)v62 = 0u;
        v153 = v157;
        if (*((_QWORD *)&v157 + 1))
        {
          v77 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }
        sub_1D535189C(&v155, &v153, &v154);
        v7 = v64;
        sub_1D5292548(v63, &v154);
        v79 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
        if (*((_QWORD *)&v154 + 1))
        {
          v80 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        v82 = (std::__shared_weak_count *)*((_QWORD *)&v153 + 1);
        if (*((_QWORD *)&v153 + 1))
        {
          v83 = (unint64_t *)(*((_QWORD *)&v153 + 1) + 8);
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        v47 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
        if (!*((_QWORD *)&v157 + 1))
          goto LABEL_21;
        v85 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
        do
          v49 = __ldaxr(v85);
        while (__stlxr(v49 - 1, v85));
      }
    }
    else
    {
      v157 = 0uLL;
      sub_1D5292548(a2, &v157);
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
      if (!*((_QWORD *)&v157 + 1))
      {
LABEL_21:

        goto LABEL_22;
      }
      v48 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
    }
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
    goto LABEL_21;
  }
LABEL_22:
  v50 = v159;
  if (v159)
  {
    p_shared_owners = (unint64_t *)&v159->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  return v7 != 0;
}

void sub_1D53BD190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  __cxa_free_exception(v24);

  v27 = *(std::__shared_weak_count **)(v25 - 96);
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D53BD2F0(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1D53BE148(a1, a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend_intValue(v5, v6, v7, v8, v9);

  return v10;
}

void sub_1D53BD324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1D53BD334(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;

  sub_1D53BE148(a1, a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_doubleValue(v5, v6, v7, v8, v9);
  v11 = v10;

  return v11;
}

void sub_1D53BD370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D53BD380(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  id v7;

  objc_msgSend_objectAtIndexedSubscript_(a1, a2, *(_QWORD *)a2, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  return v7;
}

void sub_1D53BD3D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1D53BD3E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  unsigned int *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  unint64_t v103;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *exception;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  std::__shared_weak_count *v124;

  sub_1D53BC20C(a1, 0, CFSTR("blackLevelModel"), 0, &v123);
  v7 = v123;
  if (v123)
  {
    sub_1D53BE790(v123, v3, v4, v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if ((unint64_t)objc_msgSend_count(v8, v9, v10, v11, v12) <= 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      *(_QWORD *)&v122 = 0;
      v116 = v8;
      if (sub_1D53BD2F0(v8, (const char *)&v122, v13, v14, v15)
        || (unint64_t)objc_msgSend_count(v8, v16, v17, v18, v19) <= 2)
      {
        v110 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v110, "RawCameraException");
        __cxa_throw(v110, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      *(_QWORD *)&v122 = 1;
      v23 = sub_1D53BD2F0(v8, (const char *)&v122, v20, v21, v22);
      v28 = objc_msgSend_count(v8, v24, v25, v26, v27);
      v112 = a2;
      v113 = v7;
      v32 = (v28 - 2);
      if (v28 == 2)
      {
        v46 = 0;
        v34 = 0;
      }
      else
      {
        v33 = 0;
        v34 = 0;
        do
        {
          *(_QWORD *)&v122 = (v33 + 2);
          sub_1D53BD380(v8, (const char *)&v122, v29, v30, v31);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v38)
          {
            v107 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](v107, "RawCameraException");
            __cxa_throw(v107, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
          if (v23)
          {
            v39 = 0;
            do
            {
              *(_QWORD *)&v122 = ++v39;
              sub_1D53BD380(v38, (const char *)&v122, v35, v36, v37);
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              v45 = v40;
              if (!v40)
              {
                v105 = __cxa_allocate_exception(0x10uLL);
                MEMORY[0x1D8271938](v105, "RawCameraException");
                __cxa_throw(v105, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
              }
              v34 += objc_msgSend_count(v40, v41, v42, v43, v44);

            }
            while (v23 != v39);
          }

          ++v33;
        }
        while (v33 != v32);
        v46 = v32;
      }
      sub_1D530AD68(16 * v46 + 16 * v32 * v23 + 24 * v34 + 16, &v122);
      v50 = sub_1D52E658C(v122);
      *(_DWORD *)v50 = v23;
      *(_DWORD *)(v50 + 4) = v32;
      v111 = v50;
      v117 = v50 + 16;
      *(_QWORD *)(v50 + 8) = v50 + 16;
      if ((_DWORD)v32)
      {
        v54 = 0;
        v55 = v117 + 16 * v46;
        v56 = v55 + 16 * v32 * v23;
        v119 = v23;
        v115 = v23;
        v114 = v46;
        do
        {
          *(_QWORD *)&v121 = (v54 + 2);
          sub_1D53BD380(v8, (const char *)&v121, v51, v52, v53);
          v57 = (void *)objc_claimAutoreleasedReturnValue();
          v61 = v57;
          if (!v57)
          {
            v108 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](v108, "RawCameraException");
            __cxa_throw(v108, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
          *(_QWORD *)&v121 = 0;
          v62 = sub_1D53BD2F0(v57, (const char *)&v121, v58, v59, v60);
          v118 = v54;
          v66 = v117 + 16 * v54;
          *(_DWORD *)v66 = v62;
          *(_QWORD *)(v66 + 8) = v55;
          if (v23)
          {
            v67 = 0;
            do
            {
              v68 = v67 + 1;
              *(_QWORD *)&v121 = v67 + 1;
              sub_1D53BD380(v61, (const char *)&v121, v63, v64, v65);
              v69 = (void *)objc_claimAutoreleasedReturnValue();
              v74 = v69;
              if (!v69)
              {
                v106 = __cxa_allocate_exception(0x10uLL);
                MEMORY[0x1D8271938](v106, "RawCameraException");
                __cxa_throw(v106, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
              }
              *(_DWORD *)(v55 + 16 * v67) = v67;
              v75 = objc_msgSend_count(v69, v70, v71, v72, v73);
              v79 = v61;
              v80 = v55 + 16 * v67;
              *(_DWORD *)(v80 + 4) = v75 / 3;
              v81 = (unsigned int *)(v80 + 4);
              *(_QWORD *)(v81 + 1) = v56;
              if ((v75 / 3))
              {
                v82 = 0;
                v83 = 0;
                do
                {
                  *(_QWORD *)&v121 = v83;
                  *(double *)(v56 + 8 * v83) = sub_1D53BD334(v74, (const char *)&v121, v76, v77, v78);
                  *(_QWORD *)&v121 = v83 + 1;
                  v87 = v56 + 8 * v83;
                  *(double *)(v87 + 8) = sub_1D53BD334(v74, (const char *)&v121, v84, v85, v86);
                  *(_QWORD *)&v121 = v83 + 2;
                  *(double *)(v87 + 16) = sub_1D53BD334(v74, (const char *)&v121, v88, v89, v90);
                  ++v82;
                  v91 = *v81;
                  v83 += 3;
                }
                while (v82 < v91);
              }
              else
              {
                LODWORD(v91) = 0;
              }
              v56 += 24 * v91;

              v67 = v68;
              v61 = v79;
            }
            while (v68 != v119);
          }
          v55 += 16 * v119;

          v54 = v118 + 1;
          v8 = v116;
          v23 = v115;
        }
        while (v118 + 1 != v114);
      }
      v120 = v122;
      if (*((_QWORD *)&v122 + 1))
      {
        v92 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
      }
      sub_1D53AC600(v111, (uint64_t *)&v120, &v121);
      v7 = v113;
      sub_1D5292548(v112, &v121);
      v94 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
      if (*((_QWORD *)&v121 + 1))
      {
        v95 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      v97 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
      if (*((_QWORD *)&v120 + 1))
      {
        v98 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v122 + 1);
      if (!*((_QWORD *)&v122 + 1))
        goto LABEL_51;
      v100 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
      do
        v49 = __ldaxr(v100);
      while (__stlxr(v49 - 1, v100));
    }
    else
    {
      v122 = 0uLL;
      sub_1D5292548(a2, &v122);
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v122 + 1);
      if (!*((_QWORD *)&v122 + 1))
      {
LABEL_51:

        goto LABEL_52;
      }
      v48 = (unint64_t *)(*((_QWORD *)&v122 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
    }
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
    goto LABEL_51;
  }
LABEL_52:
  v101 = v124;
  if (v124)
  {
    p_shared_owners = (unint64_t *)&v124->__shared_owners_;
    do
      v103 = __ldaxr(p_shared_owners);
    while (__stlxr(v103 - 1, p_shared_owners));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  return v7 != 0;
}

void sub_1D53BD9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  __cxa_free_exception(v24);

  v27 = *(std::__shared_weak_count **)(v25 - 88);
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  _Unwind_Resume(a1);
}

BOOL sub_1D53BDB64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void *exception;
  void *v81;
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  __int128 v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  __int128 __src[2];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  sub_1D53BC20C(a1, 0, CFSTR("signalNoiseModel"), 0, &v94);
  v7 = v94;
  if (v94)
  {
    sub_1D53BE790(v94, v3, v4, v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if ((unint64_t)objc_msgSend_count(v8, v9, v10, v11, v12) <= 1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      *(_QWORD *)&__src[0] = 0;
      if (sub_1D53BD2F0(v8, (const char *)__src, v13, v14, v15)
        || (unint64_t)objc_msgSend_count(v8, v16, v17, v18, v19) <= 2)
      {
        v81 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v81, "RawCameraException");
        __cxa_throw(v81, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      *(_QWORD *)&__src[0] = 1;
      v26 = sub_1D53BD2F0(v8, (const char *)__src, v20, v21, v22);
      if (v26 - 5 <= 0xFFFFFFFB)
      {
        v82 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v82, "RawCameraException");
        __cxa_throw(v82, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      objc_msgSend_objectAtIndexedSubscript_(v8, v23, 2, v24, v25);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v83 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v83, "RawCameraException");
        __cxa_throw(v83, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v86 = objc_msgSend_BOOLValue(v27, v28, v29, v30, v31);
      v85 = a2;
      v88 = v27;
      v36 = 0;
      v37 = v26 + 3;
      v41 = objc_msgSend_count(v8, v32, v33, v34, v35) - (v26 + 3);
      v42 = v26;
      v43 = v41 / (3 * v26 + 1);
      do
      {
        v92 = v36 + 3;
        *((double *)__src + v36++) = sub_1D53BD334(v8, (const char *)&v92, v38, v39, v40);
      }
      while (v26 != v36);
      sub_1D530AD68(8 * v26 + 16 * v43 + 24 * v43 * v26 + 32, &v92);
      v84 = v7;
      v44 = sub_1D52E658C(v92);
      v45 = v44 + 32 + 8 * v26;
      *(_DWORD *)v44 = v26;
      *(_DWORD *)(v44 + 4) = v43;
      *(_BYTE *)(v44 + 8) = v86;
      *(_QWORD *)(v44 + 16) = v44 + 32;
      memcpy((void *)(v44 + 32), __src, 8 * v26);
      v87 = v44;
      *(_QWORD *)(v44 + 24) = v45;
      if (3 * v26 < v41)
      {
        v49 = 0;
        v50 = v45 + 16 * v43;
        if (v43 <= 1)
          v51 = 1;
        else
          v51 = v43;
        do
        {
          *(_QWORD *)&v91 = v37;
          v52 = sub_1D53BD2F0(v8, (const char *)&v91, v46, v47, v48);
          v53 = 0;
          v54 = v45 + 16 * v49;
          *(_DWORD *)v54 = v52;
          *(_QWORD *)(v54 + 8) = v50;
          ++v37;
          v55 = v42;
          do
          {
            *(_QWORD *)&v91 = v37;
            *(double *)(v50 + 24 * v53) = sub_1D53BD334(v8, (const char *)&v91, v46, v47, v48);
            *(_QWORD *)&v91 = v37 + 1;
            *(double *)(v50 + 24 * v53 + 8) = sub_1D53BD334(v8, (const char *)&v91, v56, v57, v58);
            *(_QWORD *)&v91 = v37 + 2;
            *(double *)(v50 + 24 * v53++ + 16) = sub_1D53BD334(v8, (const char *)&v91, v59, v60, v61);
            v37 += 3;
            --v55;
          }
          while (v55);
          v50 += 24 * v42;
          ++v49;
        }
        while (v49 != v51);
      }
      v89 = v92;
      v90 = v93;
      if (v93)
      {
        p_shared_owners = (unint64_t *)&v93->__shared_owners_;
        do
          v63 = __ldxr(p_shared_owners);
        while (__stxr(v63 + 1, p_shared_owners));
      }
      sub_1D53ABB00(v87, &v89, &v91);
      v7 = v84;
      sub_1D5292548(v85, &v91);
      v64 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
      if (*((_QWORD *)&v91 + 1))
      {
        v65 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = v90;
      if (v90)
      {
        v68 = (unint64_t *)&v90->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = v93;
      if (v93)
      {
        v71 = (unint64_t *)&v93->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }

    }
    else
    {
      __src[0] = 0uLL;
      sub_1D5292548(a2, __src);
      v73 = (std::__shared_weak_count *)*((_QWORD *)&__src[0] + 1);
      if (*((_QWORD *)&__src[0] + 1))
      {
        v74 = (unint64_t *)(*((_QWORD *)&__src[0] + 1) + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
    }

  }
  v76 = v95;
  if (v95)
  {
    v77 = (unint64_t *)&v95->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  return v7 != 0;
}

void sub_1D53BE08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  void *v20;
  void *v21;

  __cxa_free_exception(v21);

  sub_1D5282EB4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

id sub_1D53BE148(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void *v6;
  id v7;

  objc_msgSend_objectAtIndexedSubscript_(a1, a2, *(_QWORD *)a2, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = v5;
  else
    v6 = 0;
  v7 = v6;

  return v7;
}

void sub_1D53BE1A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D53BE1B0@<X0>(id *a1@<X1>, void **a2@<X2>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t result;

  v6 = (char *)operator new(0x48uLL);
  result = sub_1D53BE210((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_1D53BE1FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53BE210(uint64_t a1, id *a2, void **a3)
{
  void *v4;
  id v5;
  id v6;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &unk_1E99979E0;
  v4 = *a3;
  v5 = *a2;
  v6 = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  return a1;
}

void sub_1D53BE278(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99979E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53BE28C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99979E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53BE2C0(uint64_t a1)
{
  return sub_1D53BE2CC(a1 + 24);
}

uint64_t sub_1D53BE2CC(uint64_t a1)
{
  sub_1D53BE310(a1 + 24, *(_QWORD **)(a1 + 32));

  return a1;
}

void sub_1D53BE310(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1D53BE310(a1, *a2);
    sub_1D53BE310(a1, a2[1]);
    sub_1D531BC50((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1D53BE358()
{
  unsigned __int8 v0;
  _QWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF38788);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF38788))
  {
    v2 = (_QWORD *)operator new();
    v2[2] = 0;
    v2[1] = 0;
    *v2 = v2 + 1;
    qword_1EFF38780 = (uint64_t)v2;
    __cxa_guard_release(&qword_1EFF38788);
  }
  return qword_1EFF38780;
}

void sub_1D53BE3D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EFF38788);
  _Unwind_Resume(a1);
}

void sub_1D53BE3EC(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  void *__p[2];
  uint64_t v6;
  uint64_t v7;

  v4 = (uint64_t **)sub_1D53BE358();
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v6 = *(_QWORD *)(a1 + 16);
  }
  v7 = a2;
  sub_1D53BE618(v4, __p, (uint64_t)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_1D53BE470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D53BE48C(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  void **v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *__p[2];
  char v19;

  *a2 = 0;
  a2[1] = 0;
  v4 = *a1;
  v5 = *(void **)(*a1 + 24);
  v6 = *(std::__shared_weak_count **)(v4 + 32);
  __p[0] = v5;
  __p[1] = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  sub_1D53BBF04((uint64_t)v5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v12 = sub_1D53BE358();
  sub_1D529A17C(v9, __p);
  v13 = sub_1D5294144(v12, __p);
  if (v19 < 0)
    operator delete(__p[0]);
  if ((void **)(sub_1D53BE358() + 8) != v13)
  {
    v14 = v13[7];
    if (v14)
    {
      (*(void (**)(void **__return_ptr, void *, uint64_t *))(*(_QWORD *)v14 + 16))(__p, v14, a1);
      sub_1D5292548((uint64_t)a2, (__int128 *)__p);
      v15 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v16 = (unint64_t *)((char *)__p[1] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
  }

}

void sub_1D53BE5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v16;

  sub_1D5282EB4(v15);
  _Unwind_Resume(a1);
}

void sub_1D53BE608(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  sub_1D5282EB4((uint64_t)va);
  JUMPOUT(0x1D53BE5F8);
}

_OWORD *sub_1D53BE618(uint64_t **a1, void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = (void **)sub_1D52B3CFC((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v8 = *(_QWORD *)(a3 + 16);
    v9 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = 0;
    *((_QWORD *)v6 + 6) = v8;
    *((_QWORD *)v6 + 7) = v9;
    sub_1D528EFCC(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_1D53BE6A8(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, _QWORD *a6@<X8>)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v15 = a1;
  v14 = a2;
  v13 = a3;
  v12 = a4;
  v11 = a5;
  sub_1D53BEE00(&v15, &v14, &v13, &v12, &v11, a6);

}

void sub_1D53BE75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

id sub_1D53BE790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *exception;
  const void *v23;
  void *v24;
  _QWORD v25[6];
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t);
  id v31;

  sub_1D5297D18(*(void **)(a1 + 16), *(const char **)(a1 + 24), a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v26 = 0;
    v27 = &v26;
    v28 = 0x3032000000;
    v29 = sub_1D53BE9BC;
    v30 = sub_1D53BE9E4;
    v31 = 0;
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = sub_1D53BE9EC;
    v25[3] = &unk_1E9997A28;
    v25[4] = &v26;
    v25[5] = a1;
    v7 = MEMORY[0x1D82721B4](v25);
    v8 = (void *)v27[5];
    v27[5] = v7;

    v9 = objc_retainAutorelease(v6);
    objc_msgSend_UTF8String(v9, v10, v11, v12, v13);
    sub_1D53BFE04();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (void *)v27[5];
    v27[5] = 0;

    if (!v14)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v16 = v14;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend_description(v16, v17, v18, v19, v20);
      v23 = (const void *)objc_claimAutoreleasedReturnValue();
      CFShow(v23);
      v24 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v24, "RawCameraException");
      __cxa_throw(v24, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }

    _Block_object_dispose(&v26, 8);
  }
  else
  {
    v16 = 0;
  }

  return v16;
}

void sub_1D53BE958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  __cxa_free_exception(v23);

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53BE9BC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x1D82721B4](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void sub_1D53BE9E4(uint64_t a1)
{

}

id sub_1D53BE9EC(uint64_t a1, char *a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v37;
  void *__p[2];
  char v39;

  v2 = *(_QWORD *)(a1 + 40);
  sub_1D52850A0(__p, a2);
  sub_1D5288864((uint64_t)__p, v3, v4, v5, v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v39 < 0)
    operator delete(__p[0]);
  if ((objc_msgSend_hasPrefix_(v10, v7, (uint64_t)CFSTR("@"), v8, v9) & 1) == 0)
  {
    if (objc_msgSend_isEqualToString_(v10, v11, (uint64_t)CFSTR("inherited"), v13, v14))
    {
      v32 = *(_QWORD *)(v2 + 48);
      if (!v32)
      {
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v29, (uint64_t)CFSTR("Inherited::%@"), v30, v31, *(_QWORD *)(v2 + 24));
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        v37 = *(_QWORD *)(v2 + 40);
        if (v37)
        {
          (*(void (**)(uint64_t, void *))(v37 + 16))(v37, v18);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v23 = 0;
        }
        goto LABEL_16;
      }
      (*(void (**)(void))(v32 + 16))();
      v33 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v34 = *(void **)(v2 + 32);
      if (v34)
      {
        objc_msgSend_objectForKeyedSubscript_(v34, v29, (uint64_t)v10, v30, v31);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        if (v23)
          goto LABEL_15;
      }
      v35 = *(_QWORD *)(v2 + 40);
      if (!v35)
      {
        v23 = 0;
        goto LABEL_15;
      }
      (*(void (**)(uint64_t, void *))(v35 + 16))(v35, v10);
      v33 = objc_claimAutoreleasedReturnValue();
    }
    v23 = (void *)v33;
LABEL_15:
    v18 = v10;
    goto LABEL_16;
  }
  v15 = objc_msgSend_length(v10, v11, v12, v13, v14);
  objc_msgSend_substringWithRange_(v10, v16, 1, v15 - 1, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_objectForKeyedSubscript_(*(void **)(v2 + 16), v19, (uint64_t)v18, v20, v21);
  v22 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v23 = v22;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v24 = objc_retainAutorelease(v22);
    objc_msgSend_UTF8String(v24, v25, v26, v27, v28);
    sub_1D53BFE04();
    v23 = (void *)objc_claimAutoreleasedReturnValue();

  }
LABEL_16:

  return v23;
}

void sub_1D53BEBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D53BEC0C(_QWORD *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *exception;

  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  *a1 = &unk_1E9997A58;
  a1[1] = 0;
  v16 = v11;
  a1[2] = v16;
  v17 = v12;
  a1[3] = v17;
  v18 = v13;
  a1[4] = v18;
  a1[5] = MEMORY[0x1D82721B4](v14);
  a1[6] = MEMORY[0x1D82721B4](v15);
  if (!v16 || !v17 || !v14)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v19, v20, v21, v22);
  v23 = objc_claimAutoreleasedReturnValue();
  v24 = (void *)a1[1];
  a1[1] = v23;

  return a1;
}

void sub_1D53BED70(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  __cxa_free_exception(v7);

  _Unwind_Resume(a1);
}

void sub_1D53BEDDC(id *a1)
{
  sub_1D53BEF40(a1);
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D53BEE00@<X0>(void **a1@<X1>, void **a2@<X2>, void **a3@<X3>, void **a4@<X4>, void **a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0x50uLL);
  result = sub_1D53BEE88(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1D53BEE74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53BEE88(_QWORD *a1, void **a2, void **a3, void **a4, void **a5, void **a6)
{
  a1[2] = 0;
  *a1 = &unk_1E9997A88;
  a1[1] = 0;
  sub_1D53BEC0C(a1 + 3, *a2, *a3, *a4, *a5, *a6);
  return a1;
}

void sub_1D53BEED4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53BEEE8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9997A88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53BEEFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9997A88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53BEF30(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

id *sub_1D53BEF40(id *a1)
{

  return a1;
}

void sub_1D53BEF90(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  _QWORD v7[2];
  void *__p[2];
  char v9;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 2200))(__p);
  v7[0] = &unk_1E99851F0;
  v7[1] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v5, a1);
  (*(void (**)(uint64_t, void **, _QWORD *, uint64_t))(*(_QWORD *)v5 + 600))(v5, __p, v7, 3);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_1D53BF054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_1D5282EB4((uint64_t)&a10);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1D53BF080(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14[2];
  uint64_t v15;

  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1) == 10)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v12, a1);
    v4 = v12;
    sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE:BlackLevel");
    v5 = (*(uint64_t (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v4 + 248))(v4, __p, v14, 0);
    if ((void *)((char *)v14[1] - (char *)v14[0]) == (void *)32)
      v6 = v5;
    else
      v6 = 0;
    if (v11 < 0)
      operator delete(__p[0]);
    v7 = v13;
    if (!v13)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((v6 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
LABEL_11:
      if ((v6 & 1) != 0)
      {
LABEL_12:
        *(_OWORD *)a2 = *(_OWORD *)v14;
        a2[2] = v15;
        return;
      }
    }
  }
  __p[0] = 0;
  sub_1D528F9B4(a2, 4uLL, __p);
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
}

void sub_1D53BF1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void sub_1D53BF1F4(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  unint64_t *v21;
  void *exception;
  void *v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  __int128 v32;
  char *v33;
  char *v34;

  (*(void (**)(char **__return_ptr))(*a1 + 2888))(&v33);
  v2 = v34 - v33;
  if (v34 == v33)
    goto LABEL_20;
  if (*(_DWORD *)v33 != 5)
  {
    if (*(_DWORD *)v33 == 4)
    {
      if (v2 > 7 && (*((_DWORD *)v33 + 1) & 0x80000000) == 0)
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 160))(&v28, a1);
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v28 + 384))(&v30);
        v27 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
        v26 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
        *(_QWORD *)&v25 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
        *((_QWORD *)&v25 + 1) = v3;
        v24 = *((_DWORD *)v33 + 1);
        sub_1D5358BD0(&v30, (unint64_t *)&v27, &v26, &v25, &v24, &v32);
        sub_1D5292548((uint64_t)(a1 + 3), &v32);
        v4 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
        if (*((_QWORD *)&v32 + 1))
        {
          v5 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
          do
            v6 = __ldaxr(v5);
          while (__stlxr(v6 - 1, v5));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        v7 = v31;
        if (v31)
        {
          p_shared_owners = (unint64_t *)&v31->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v10 = v29;
        if (v29)
        {
          v11 = (unint64_t *)&v29->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          goto LABEL_37;
        }
        goto LABEL_39;
      }
LABEL_45:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
LABEL_44:
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
LABEL_20:
    sub_1D5299C2C((uint64_t)a1);
    goto LABEL_39;
  }
  if (v2 <= 0xB)
    goto LABEL_45;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 160))(&v28, a1);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v28 + 384))(&v30);
  v27 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
  v26 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
  *(_QWORD *)&v25 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
  *((_QWORD *)&v25 + 1) = v13;
  sub_1D535B818(&v30, (unint64_t *)&v27, &v26, &v25, &v32);
  v14 = v31;
  if (v31)
  {
    v15 = (unint64_t *)&v31->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v29;
  if (v29)
  {
    v18 = (unint64_t *)&v29->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *((_DWORD *)v33 + 1);
  if (v20 < 0 || (*((_DWORD *)v33 + 2) & 0x80000000) != 0)
  {
    v23 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v23, "RawCameraException");
    __cxa_throw(v23, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D5319470(v32, v20);
  sub_1D5319468(v32, *((_DWORD *)v33 + 2));
  sub_1D52908C8(a1 + 3, (uint64_t *)&v32);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v12 = __ldaxr(v21);
    while (__stlxr(v12 - 1, v21));
LABEL_37:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_39:
  if (!a1[3])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    goto LABEL_44;
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
}

void sub_1D53BF5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_1D5282EB4((uint64_t)va1);
  sub_1D5282EB4((uint64_t)va);
  v9 = *(void **)(v7 - 48);
  if (v9)
  {
    *(_QWORD *)(v7 - 40) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void sub_1D53BF688(uint64_t a1)
{
  int v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *v11;
  int v12;
  int v13;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2192))(a1);
  v11 = &unk_1E99851F0;
  v12 = 0;
  v13 = v2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v9, a1);
  v3 = v9;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 2200))(__p, a1);
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v3 + 600))(v3, __p, &v11, 3);
  if (v8 < 0)
    operator delete(__p[0]);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1D53BF76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1D53BF798(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *exception;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __int128 v21;
  _DWORD *v22;
  _DWORD *v23;

  sub_1D5299C2C((uint64_t)a1);
  if (!a1[3])
  {
    (*(void (**)(_DWORD **__return_ptr, _QWORD *))(*a1 + 2888))(&v22, a1);
    v2 = v22;
    if (v23 == v22)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (*v22 != 10)
      goto LABEL_20;
    (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 160))(&v17, a1);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v17 + 384))(&v19);
    v16 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
    v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
    *(_QWORD *)&v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
    *((_QWORD *)&v14 + 1) = v3;
    sub_1D53BF9C8(&v19, (unint64_t *)&v16, &v15, &v14, &v21);
    sub_1D5292548((uint64_t)(a1 + 3), &v21);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v18;
    if (v18)
    {
      v11 = (unint64_t *)&v18->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v2 = v22;
    if (v22)
    {
LABEL_20:
      v23 = v2;
      operator delete(v2);
    }
  }
}

void sub_1D53BF970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_1D5282EB4((uint64_t)va1);
  sub_1D5282EB4((uint64_t)va);
  v7 = *(void **)(v5 - 48);
  if (v7)
  {
    *(_QWORD *)(v5 - 40) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void sub_1D53BF9C8(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xD8uLL);
  sub_1D53BFA48(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D53BFA34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53BFA48(_QWORD *a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5)
{
  a1[2] = 0;
  *a1 = &unk_1E9999250;
  a1[1] = 0;
  sub_1D530B330((uint64_t)(a1 + 3), a2, *a3, a4, a5);
  a1[3] = &unk_1E9978EB8;
  return a1;
}

void sub_1D53BFA94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53BFAA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9999250;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53BFABC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9999250;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53BFAF0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

float32x2_t *sub_1D53BFB00@<X0>(float32x2_t *result@<X0>, float32x2_t *a2@<X8>)
{
  float32x2_t v2;
  float v3;
  __int32 v4;
  float v5;
  float v6;
  __int32 v7;
  __int32 v8;
  float v9;
  float *v10;
  float v11;
  __int32 *v12;
  float32x2_t *v13;
  float v14;
  float *v15;
  float v16;
  __int32 *v17;
  float32x2_t *v18;
  float v19;
  float v20;
  __int32 v21;
  __int32 v22;
  __int32 v23;
  __int32 v24;
  float v25;
  float v26;
  float v32;
  float v33;

  v2 = result[89];
  v3 = result[90].f32[0];
  v4 = result->i32[1];
  if (v4 == 2)
  {
    v15 = (float *)&result[107];
    v5 = result[108].f32[1];
    v6 = result[110].f32[1] * result[110].f32[1];
    v17 = (__int32 *)&result[111] + 1;
    v7 = result[117].i32[1];
    v8 = result[118].i32[0];
    if (result[111].i8[0])
    {
      v9 = result[118].f32[1];
      v10 = (float *)&result[108];
      v11 = result[110].f32[0] * result[110].f32[0];
      v12 = (__int32 *)&result[115] + 1;
      v13 = result + 116;
      v14 = result[116].f32[1];
      v16 = result[109].f32[0] * result[109].f32[0];
      v18 = result + 112;
      v19 = result[112].f32[1];
      goto LABEL_17;
    }
    v9 = result[119].f32[0] * result[119].f32[0];
    v10 = (float *)&result[108];
    v11 = result[110].f32[0] * result[110].f32[0];
    v12 = (__int32 *)&result[115] + 1;
    v13 = result + 116;
    v14 = result[117].f32[0] * result[117].f32[0];
    v16 = result[109].f32[0] * result[109].f32[0];
    v18 = result + 112;
    v20 = result[113].f32[0];
  }
  else if (v4 == 1)
  {
    v5 = result[107].f32[1];
    v6 = result[109].f32[1] * result[109].f32[1];
    v7 = result[113].i32[1];
    v8 = result[114].i32[0];
    if (result[111].i8[0])
    {
      v9 = result[114].f32[1];
      v10 = (float *)&result[108] + 1;
      v11 = result[110].f32[1] * result[110].f32[1];
      v12 = (__int32 *)&result[117] + 1;
      v13 = result + 118;
      v14 = result[118].f32[1];
      v15 = (float *)&result[108];
      v16 = result[110].f32[0] * result[110].f32[0];
      v17 = (__int32 *)&result[115] + 1;
      v18 = result + 116;
      v19 = result[116].f32[1];
      goto LABEL_17;
    }
    v9 = result[115].f32[0] * result[115].f32[0];
    v10 = (float *)&result[108] + 1;
    v11 = result[110].f32[1] * result[110].f32[1];
    v12 = (__int32 *)&result[117] + 1;
    v13 = result + 118;
    v14 = result[119].f32[0] * result[119].f32[0];
    v15 = (float *)&result[108];
    v16 = result[110].f32[0] * result[110].f32[0];
    v17 = (__int32 *)&result[115] + 1;
    v18 = result + 116;
    v20 = result[117].f32[0];
  }
  else if (v4)
  {
    v5 = result[107].f32[0];
    v6 = result[109].f32[0] * result[109].f32[0];
    v7 = result[111].i32[1];
    v8 = result[112].i32[0];
    if (result[111].i8[0])
    {
      v9 = result[112].f32[1];
      v10 = (float *)&result[108];
      v11 = result[110].f32[0] * result[110].f32[0];
      v12 = (__int32 *)&result[115] + 1;
      v13 = result + 116;
      v14 = result[116].f32[1];
      v15 = (float *)&result[108] + 1;
      v16 = result[110].f32[1] * result[110].f32[1];
      v17 = (__int32 *)&result[117] + 1;
      v18 = result + 118;
      v19 = result[118].f32[1];
      goto LABEL_17;
    }
    v9 = result[113].f32[0] * result[113].f32[0];
    v10 = (float *)&result[108];
    v11 = result[110].f32[0] * result[110].f32[0];
    v12 = (__int32 *)&result[115] + 1;
    v13 = result + 116;
    v14 = result[117].f32[0] * result[117].f32[0];
    v15 = (float *)&result[108] + 1;
    v16 = result[110].f32[1] * result[110].f32[1];
    v17 = (__int32 *)&result[117] + 1;
    v18 = result + 118;
    v20 = result[119].f32[0];
  }
  else
  {
    v5 = result[108].f32[0];
    v6 = result[110].f32[0] * result[110].f32[0];
    v7 = result[115].i32[1];
    v8 = result[116].i32[0];
    if (result[111].i8[0])
    {
      v9 = result[116].f32[1];
      v10 = (float *)&result[108] + 1;
      v11 = result[110].f32[1] * result[110].f32[1];
      v12 = (__int32 *)&result[117] + 1;
      v13 = result + 118;
      v14 = result[118].f32[1];
      v15 = (float *)&result[107] + 1;
      v16 = result[109].f32[1] * result[109].f32[1];
      v17 = (__int32 *)&result[113] + 1;
      v18 = result + 114;
      v19 = result[114].f32[1];
      goto LABEL_17;
    }
    v9 = result[117].f32[0] * result[117].f32[0];
    v10 = (float *)&result[108] + 1;
    v11 = result[110].f32[1] * result[110].f32[1];
    v12 = (__int32 *)&result[117] + 1;
    v13 = result + 118;
    v14 = result[119].f32[0] * result[119].f32[0];
    v15 = (float *)&result[107] + 1;
    v16 = result[109].f32[1] * result[109].f32[1];
    v17 = (__int32 *)&result[113] + 1;
    v18 = result + 114;
    v20 = result[115].f32[0];
  }
  v19 = v20 * v20;
LABEL_17:
  v21 = v18->i32[0];
  v22 = v13->i32[0];
  v23 = *v17;
  v24 = *v12;
  v25 = *v15;
  v26 = *v10;
  if (v5 < 0.0)
    v5 = 0.0;
  __asm { FMOV            V26.2S, #1.0 }
  *a2 = v2;
  a2[1].f32[0] = v3;
  a2[1].i32[1] = 0;
  a2[2] = vdiv_f32(_D26, v2);
  a2[3].f32[0] = 1.0 / v3;
  a2[3].i32[1] = 0;
  if (v26 >= 0.0)
    v32 = v26;
  else
    v32 = 0.0;
  a2[4].f32[0] = v5;
  a2[4].f32[1] = v32;
  if (v25 >= 0.0)
    v33 = v25;
  else
    v33 = 0.0;
  a2[5].f32[0] = v33;
  a2[5].i32[1] = 0;
  a2[6].f32[0] = v6;
  a2[6].f32[1] = v11;
  a2[7].f32[0] = v16;
  a2[7].i32[1] = 0;
  a2[8].i32[0] = v7;
  a2[8].i32[1] = v24;
  a2[9].i32[0] = v23;
  a2[9].i32[1] = 0;
  a2[10].i32[0] = v8;
  a2[10].i32[1] = v22;
  a2[11].i32[0] = v21;
  a2[11].i32[1] = 0;
  a2[12].f32[0] = v9;
  a2[12].f32[1] = v14;
  a2[13].f32[0] = v19;
  a2[13].i32[1] = 0;
  return result;
}

id sub_1D53BFE04()
{
  void *v0;
  char *v1;
  char *v2;
  char v3;
  char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  int v18;
  unsigned int v19;
  int v20;
  char *v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char *v29;
  char *v30;
  char v31;
  uint64_t v32;
  const char **v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  int v42;
  _QWORD *v43;
  char v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  __CFString *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  id v85;
  void *v86;
  id v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v94;
  id v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  char *v102;
  char __s1[61440];
  uint64_t v104;

  v0 = (void *)MEMORY[0x1E0C80A78]();
  v2 = v1;
  v104 = *MEMORY[0x1E0C80C00];
  v95 = v0;
  bzero(__s1, 0xF000uLL);
  v102 = 0;
  v3 = *v2;
  if (!*v2)
  {
    v22 = 0;
    v5 = 0;
    goto LABEL_46;
  }
  v4 = 0;
  v5 = 0;
  v6 = MEMORY[0x1E0C80978];
  do
  {
    v7 = v3;
    if (v3 < 0)
      v8 = __maskrune(v3, 0x4000uLL);
    else
      v8 = *(_DWORD *)(v6 + 4 * v7 + 60) & 0x4000;
    if (v8)
    {
      v9 = 1;
      goto LABEL_39;
    }
    v10 = 0xCu;
    while (1)
    {
      v11 = strlen(*(const char **)&off_1E9999290[v10]);
      if (!strncmp(v2, *(const char **)&off_1E9999290[v10], v11))
        break;
      v10 += 6;
      if (v10 == 240)
        goto LABEL_14;
    }
    if (v10 * 4)
    {
      v15 = &v2[strlen(*(const char **)&off_1E9999290[v10])];
LABEL_22:
      v102 = v15;
      goto LABEL_37;
    }
LABEL_14:
    if ((v7 & 0x80000000) != 0)
      v16 = __maskrune(v7, 0x400uLL);
    else
      v16 = *(_DWORD *)(v6 + 4 * v7 + 60) & 0x400;
    if ((_DWORD)v7 != 46 && !v16)
    {
      if ((_DWORD)v7 == 39)
      {
        v17 = strchr(v2 + 1, 39);
        v102 = v17;
        if (!v17)
        {
          sub_1D53C090C(9, CFSTR("Error: Expression has unterminated quote."));
          v23 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_44;
        }
        v15 = v17 + 1;
        goto LABEL_22;
      }
      if ((v7 & 0x80000000) != 0)
        v18 = __maskrune(v7, 0x100uLL);
      else
        v18 = *(_DWORD *)(v6 + 4 * v7 + 60) & 0x100;
      if (!v18 && (_DWORD)v7 != 64 && v7 != 36)
      {
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v12, (uint64_t)CFSTR("Error: Expression has unexpected character #%d"), v13, v14, v7);
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53C090C(8, v94);
        v22 = (id)objc_claimAutoreleasedReturnValue();

        goto LABEL_45;
      }
      v15 = v2;
      while (1)
      {
        while (1)
        {
          v102 = v15 + 1;
          v19 = v15[1];
          if ((v19 & 0x80000000) != 0)
            break;
          ++v15;
          if ((*(_DWORD *)(v6 + 4 * v19 + 60) & 0x500) == 0)
            goto LABEL_36;
        }
        v20 = __maskrune(v19, 0x500uLL);
        v15 = v102;
        if (!v20)
        {
LABEL_36:
          if (*v15 != 95)
            goto LABEL_37;
        }
      }
    }
    strtod(v2, &v102);
    v15 = v102;
    if (v102 == v2)
    {
      sub_1D53C090C(10, CFSTR("Error: Expression has invalid number."));
      v23 = (id)objc_claimAutoreleasedReturnValue();
LABEL_44:
      v22 = v23;
LABEL_45:
      v5 = -1;
      goto LABEL_46;
    }
LABEL_37:
    v9 = v15 - v2;
    v21 = &v4[v15 - v2];
    if ((unint64_t)(v21 + 1) > 0xF000)
    {
      sub_1D53C090C(7, CFSTR("Error: Expression too long."));
      v23 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_44;
    }
    memcpy(&__s1[(_QWORD)v4], v2, v15 - v2);
    __s1[(_QWORD)v21] = 0;
    ++v5;
    v4 = v21 + 1;
LABEL_39:
    v2 += v9;
    v3 = *v2;
  }
  while (*v2);
  v22 = 0;
LABEL_46:
  v24 = v22;
  v25 = v24;
  if (v5 < 0)
  {
    v87 = v24;
    v25 = v87;
    goto LABEL_119;
  }
  if (!v5)
  {
    v87 = 0;
    goto LABEL_119;
  }
  v26 = operator new();
  *(_QWORD *)v26 = &unk_1E9999660;
  *(_OWORD *)(v26 + 8) = xmmword_1D544EC40;
  *(_QWORD *)(v26 + 24) = malloc_type_calloc(0xAuLL, 8uLL, 0x2004093837F09uLL);
  v27 = operator new();
  *(_QWORD *)v27 = &unk_1E9999660;
  *(_OWORD *)(v27 + 8) = xmmword_1D544EC40;
  v28 = 0;
  v29 = 0;
  v96 = v27;
  *(_QWORD *)(v27 + 24) = malloc_type_calloc(0xAuLL, 8uLL, 0x2004093837F09uLL);
  v30 = __s1;
  v31 = 1;
  do
  {
    if (!*v30)
      goto LABEL_100;
    v32 = -38;
    v33 = (const char **)&off_1E99992C0;
    do
    {
      if (!strcmp(v30, *v33))
      {
        v38 = (v32 + 40);
        if (!v29)
          goto LABEL_58;
LABEL_57:
        if (v38 == 2)
          goto LABEL_58;
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v34, (uint64_t)CFSTR("Error: missing open parentheses after function '%s'."), v35, v36, v29);
        v89 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53C090C(4, v89);
        v86 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_114:
        v80 = v96;
        goto LABEL_115;
      }
      v33 += 3;
    }
    while (!__CFADD__(v32++, 1));
    v38 = 0;
    if (v29)
      goto LABEL_57;
LABEL_58:
    if (v38 == 2)
    {
      v46 = operator new();
      *(_QWORD *)v46 = &unk_1E9999690;
      *(_DWORD *)(v46 + 8) = 2;
      v47 = 1;
LABEL_67:
      *(_QWORD *)(v46 + 16) = v47;
      *(_QWORD *)(v46 + 24) = 0;
      *(_QWORD *)(v46 + 32) = 0;
      *(_QWORD *)(v46 + 40) = 0;
      sub_1D53C09F0((_QWORD *)v26, v46);
LABEL_68:
      v31 = 1;
    }
    else
    {
      if (v38 == 3)
      {
        while (1)
        {
          v39 = *(_QWORD *)(v26 + 8);
          if (!v39)
          {
            objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v34, (uint64_t)CFSTR("Error: close parentheses without matching open."), v35, v36);
            v88 = (void *)objc_claimAutoreleasedReturnValue();
            sub_1D53C090C(3, v88);
            v86 = (void *)objc_claimAutoreleasedReturnValue();

            goto LABEL_114;
          }
          v40 = v39 - 1;
          v41 = *(_DWORD **)(*(_QWORD *)(v26 + 24) + 8 * v40);
          v42 = v41[2];
          *(_QWORD *)(v26 + 8) = v40;
          v43 = (_QWORD *)v96;
          if (v42 == 2)
            break;
          v101 = v25;
          v44 = sub_1D53C0A54((_QWORD *)v96, (uint64_t)v41, &v101, v35, v36);
          v45 = v101;

          v25 = v45;
          if ((v44 & 1) == 0)
            goto LABEL_113;
        }
        (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
        v53 = *(_QWORD *)(v26 + 8);
        if (v53
          && (unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v26 + 24) + 8 * v53 - 8) + 8) - 23 < 0x11)
        {
LABEL_76:
          v59 = v53 - 1;
          v60 = *(_QWORD *)(*(_QWORD *)(v26 + 24) + 8 * v59);
          if ((unint64_t)*(unsigned int *)(v60 + 8) - 23 > 0x10)
            goto LABEL_94;
          *(_QWORD *)(v26 + 8) = v59;
          v99 = v25;
          v61 = sub_1D53C0A54(v43, v60, &v99, v51, v52);
          v58 = v99;

          if ((v61 & 1) != 0)
            goto LABEL_78;
        }
        else
        {
          v54 = operator new();
          *(_QWORD *)v54 = &unk_1E9999690;
          *(_DWORD *)(v54 + 8) = 2;
          *(_QWORD *)(v54 + 16) = 1;
          *(_QWORD *)(v54 + 24) = 0;
          *(_QWORD *)(v54 + 32) = 0;
          *(_QWORD *)(v54 + 40) = 0;
          v100 = v25;
          v57 = sub_1D53C0A54((_QWORD *)v96, v54, &v100, v55, v56);
          v58 = v100;

          if (v57)
          {
            v53 = *(_QWORD *)(v26 + 8);
            if (v53)
            {
              v25 = v58;
              v43 = (_QWORD *)v96;
              goto LABEL_76;
            }
LABEL_78:
            v31 = 0;
            goto LABEL_96;
          }
        }
        v86 = 0;
        v25 = v58;
        goto LABEL_114;
      }
      if ((unint64_t)(v38 - 23) <= 0x10)
      {
        v46 = operator new();
        *(_QWORD *)v46 = &unk_1E9999690;
        *(_DWORD *)(v46 + 8) = v38;
        v47 = off_1E9999290[6 * v38 + 3];
        goto LABEL_67;
      }
      if ((unint64_t)(v38 - 19) > 2)
      {
        if (v38)
        {
          if ((v38 & 0xFFFFFFFE) == 6 && (v31 & 1) != 0)
          {
            v62 = operator new();
            *(_QWORD *)v62 = &unk_1E9999690;
            *(_DWORD *)(v62 + 8) = 1;
            *(_QWORD *)(v62 + 16) = 0;
            *(_QWORD *)(v62 + 24) = 0;
            *(_QWORD *)(v62 + 32) = 0;
            *(_QWORD *)(v62 + 40) = "0";
            sub_1D53C0A54((_QWORD *)v96, v62, 0, v63, v64);
          }
          v67 = operator new();
          *(_QWORD *)v67 = &unk_1E9999690;
          *(_DWORD *)(v67 + 8) = v38;
          *(_QWORD *)(v67 + 16) = off_1E9999290[6 * v38 + 3];
          *(_QWORD *)(v67 + 24) = 0;
          *(_QWORD *)(v67 + 32) = 0;
          *(_QWORD *)(v67 + 40) = 0;
          do
          {
            v68 = *(_QWORD *)(v26 + 8);
            if (!v68
              || (v69 = v68 - 1, v70 = *(_QWORD *)(*(_QWORD *)(v26 + 24) + 8 * v69), *(_QWORD *)(v70 + 16) != 2))
            {
LABEL_91:
              sub_1D53C09F0((_QWORD *)v26, v67);
              goto LABEL_68;
            }
            v71 = *(unsigned int *)(v67 + 8);
            v72 = v71 - 16;
            v73 = off_1E9999290[6 * v71 + 2];
            v74 = off_1E9999290[6 * *(unsigned int *)(v70 + 8) + 2];
            if (v72 >= 3)
            {
              if (v73 > v74)
                goto LABEL_91;
            }
            else if (v73 >= v74)
            {
              goto LABEL_91;
            }
            *(_QWORD *)(v26 + 8) = v69;
            v98 = v25;
            v75 = sub_1D53C0A54((_QWORD *)v96, v70, &v98, v65, v66);
            v45 = v98;

            v25 = v45;
          }
          while ((v75 & 1) != 0);
          (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
LABEL_113:
          v86 = 0;
          v25 = v45;
          goto LABEL_114;
        }
        v48 = operator new();
        *(_QWORD *)v48 = &unk_1E9999690;
        *(_DWORD *)(v48 + 8) = 1;
        *(_QWORD *)(v48 + 16) = 0;
        *(_QWORD *)(v48 + 24) = 0;
        *(_QWORD *)(v48 + 32) = 0;
        *(_QWORD *)(v48 + 40) = v30;
      }
      else
      {
        v48 = operator new();
        *(_QWORD *)v48 = &unk_1E9999690;
        *(_DWORD *)(v48 + 8) = v38;
        *(_QWORD *)(v48 + 16) = off_1E9999290[6 * v38 + 3];
        *(_QWORD *)(v48 + 24) = 0;
        *(_QWORD *)(v48 + 32) = 0;
        *(_QWORD *)(v48 + 40) = 0;
      }
      sub_1D53C0A54((_QWORD *)v96, v48, 0, v49, v50);
LABEL_94:
      v31 = 0;
    }
    v58 = v25;
LABEL_96:
    if ((unint64_t)(v38 - 23) >= 0x11)
      v29 = 0;
    else
      v29 = v30;
    v25 = v58;
LABEL_100:
    ++v28;
    v30 += strlen(v30) + 1;
  }
  while (v28 != v5);
  v78 = CFSTR("Error: open parentheses without matching close.");
  v79 = 2;
  v80 = v96;
  while (1)
  {
    v81 = *(_QWORD *)(v26 + 8);
    if (!v81)
      break;
    v82 = v81 - 1;
    v83 = *(_QWORD *)(*(_QWORD *)(v26 + 24) + 8 * v82);
    if (*(_DWORD *)(v83 + 8) == 2)
      goto LABEL_122;
    *(_QWORD *)(v26 + 8) = v82;
    v97 = v25;
    v84 = sub_1D53C0A54((_QWORD *)v96, v83, &v97, v76, v77);
    v85 = v97;

    v25 = v85;
    if ((v84 & 1) == 0)
    {
      v86 = 0;
      v25 = v85;
      goto LABEL_114;
    }
  }
  v80 = v96;
  v90 = *(_QWORD *)(v96 + 8);
  if (!v90)
  {
    v86 = 0;
    goto LABEL_115;
  }
  if (v90 == 1)
  {
    sub_1D53C0DF4(**(_QWORD **)(v96 + 24), v95);
    v91 = objc_claimAutoreleasedReturnValue();
    goto LABEL_123;
  }
  v78 = CFSTR("Error: expression could not be fully evaluated.");
  v79 = 1;
LABEL_122:
  sub_1D53C090C(v79, v78);
  v91 = objc_claimAutoreleasedReturnValue();
LABEL_123:
  v86 = (void *)v91;
LABEL_115:
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  if (v25)
    v92 = v25;
  else
    v92 = v86;
  v87 = v92;

LABEL_119:
  return v87;
}

void sub_1D53C0814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

id sub_1D53C090C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  void *v5;
  const char *v6;
  void *v7;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v9 = *MEMORY[0x1E0C9AFE0];
  v10[0] = v3;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v4, (uint64_t)v10, (uint64_t)&v9, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v6, (uint64_t)CFSTR("com.apple.RawExpression"), a1, (uint64_t)v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_1D53C09CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void *sub_1D53C09F0(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  void *result;

  v4 = a1[1];
  v5 = a1[2];
  result = (void *)a1[3];
  if (v4 >= v5)
  {
    result = malloc_type_realloc(result, 8 * v5 + 80, 0x2004093837F09uLL);
    v4 = a1[1];
    a1[2] += 10;
    a1[3] = result;
  }
  a1[1] = v4 + 1;
  *((_QWORD *)result + v4) = a2;
  return result;
}

uint64_t sub_1D53C0A54(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;

  v8 = *(_DWORD *)(a2 + 8);
  switch(*((_DWORD *)&off_1E9999290 + 6 * v8 + 5))
  {
    case 1:
      v9 = a1[1];
      if (v9)
      {
        v10 = v9 - 1;
        v11 = *(_QWORD *)(a1[3] + 8 * v10);
        if (*(_DWORD *)(v11 + 8) != 16)
          goto LABEL_13;
      }
      if (!a3)
        goto LABEL_33;
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], (const char *)a2, (uint64_t)CFSTR("Error: function '%s' requires 1 parameter."), a4, a5, *((_QWORD *)&off_1E9999290 + 3 * v8));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53C090C(6, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_32;
    case 2:
      v23 = a1[1];
      if (v23)
        goto LABEL_24;
      if (!a3)
        goto LABEL_33;
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], (const char *)a2, (uint64_t)CFSTR("Error: function '%s' requires 1 or more parameters."), a4, a5, *((_QWORD *)&off_1E9999290 + 3 * v8));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53C090C(6, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_32;
    case 3:
      v14 = a1[1];
      if (v14)
      {
        v15 = v14 - 1;
        v16 = *(_QWORD *)(a1[3] + 8 * v15);
        if (*(_DWORD *)(v16 + 8) == 16)
        {
          v17 = *(_QWORD *)(v16 + 32);
          if (*(_DWORD *)(v17 + 8) != 16)
          {
            a1[1] = v15;
            *(_QWORD *)(a2 + 24) = *(_QWORD *)(v16 + 24);
            *(_QWORD *)(a2 + 32) = v17;
            *(_QWORD *)(v16 + 24) = 0;
            *(_QWORD *)(v16 + 32) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
            goto LABEL_27;
          }
        }
      }
      if (!a3)
        goto LABEL_33;
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], (const char *)a2, (uint64_t)CFSTR("Error: function '%s' requires 2 parameters."), a4, a5, *((_QWORD *)&off_1E9999290 + 3 * v8));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53C090C(6, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_32;
    case 4:
      v18 = a1[1];
      if (v18)
      {
        v10 = v18 - 1;
        v11 = *(_QWORD *)(a1[3] + 8 * v10);
        if (*(_DWORD *)(v11 + 8) == 16)
        {
LABEL_13:
          a1[1] = v10;
          *(_QWORD *)(a2 + 24) = v11;
          goto LABEL_27;
        }
      }
      if (!a3)
        goto LABEL_33;
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], (const char *)a2, (uint64_t)CFSTR("Error: function '%s' requires 2 or more parameters."), a4, a5, *((_QWORD *)&off_1E9999290 + 3 * v8));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53C090C(6, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_32;
    case 5:
      v19 = a1[1];
      if (!v19)
        goto LABEL_27;
      v20 = a1[3];
      v21 = v19 - 1;
      a1[1] = v21;
      v22 = *(_QWORD *)(v20 + 8 * v21);
      goto LABEL_26;
    default:
      v23 = a1[1];
      if (v8 == 2 && v23 == 0)
        goto LABEL_27;
      v25 = *(_QWORD *)(a2 + 16);
      if (v23 >= v25)
      {
        if (v25 == 2)
        {
          if (!v23)
          {
            v22 = 0;
            *(_QWORD *)(a2 + 32) = 0;
            goto LABEL_26;
          }
          v29 = a1[3];
          a1[1] = v23 - 1;
          *(_QWORD *)(a2 + 32) = *(_QWORD *)(v29 + 8 * (v23 - 1));
          if (v23 == 1)
            goto LABEL_44;
          v26 = a1[3];
          v27 = v23 - 2;
        }
        else
        {
          if (v25 != 1)
          {
            if (v25)
            {
              if (!a3)
                goto LABEL_33;
              objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], (const char *)a2, (uint64_t)CFSTR("Error: unexpected operator '%s'.\n"), a4, a5, *((_QWORD *)&off_1E9999290 + 3 * v8));
              v12 = (void *)objc_claimAutoreleasedReturnValue();
              sub_1D53C090C(5, v12);
              v13 = (void *)objc_claimAutoreleasedReturnValue();
              goto LABEL_32;
            }
LABEL_27:
            sub_1D53C09F0(a1, a2);
            return 1;
          }
          if (!v23)
          {
LABEL_44:
            v22 = 0;
            goto LABEL_26;
          }
LABEL_24:
          v26 = a1[3];
          v27 = v23 - 1;
        }
        a1[1] = v27;
        v22 = *(_QWORD *)(v26 + 8 * v27);
LABEL_26:
        *(_QWORD *)(a2 + 24) = v22;
        goto LABEL_27;
      }
      if (a3)
      {
        objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], (const char *)a2, (uint64_t)CFSTR("Error: operator '%s' requires %zu operands."), a4, a5, *((_QWORD *)&off_1E9999290 + 3 * v8), v25);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53C090C(6, v12);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_32:
        *a3 = v13;

      }
LABEL_33:
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
      return 0;
  }
}

void sub_1D53C0DD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D53C0DF4(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (**v7)(_QWORD, __n128);
  void *v8;
  __n128 v9;
  id v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  const char *v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  double v31;
  double v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  void *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  int v64;
  void *v65;
  int v66;
  void *v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t i;
  void *v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  double v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  double v125;
  double v126;
  double v127;
  BOOL v128;
  double v129;
  void *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  void *v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  double v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  double v158;
  int v159;
  unint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  id v168;
  const char *v169;
  uint64_t v170;
  size_t v171;
  const char *v172;

  v7 = a2;
  v8 = 0;
  v9.n128_u64[0] = 0x7FF8000000000000;
  switch(*(_DWORD *)(a1 + 8))
  {
    case 0:
    case 0x15:
      objc_msgSend_null(MEMORY[0x1E0C99E38], v3, v4, v5, v6, NAN);
      v10 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_98;
    case 1:
      v27 = *(const char **)(a1 + 40);
      v28 = *v27;
      if ((v28 & 0x80000000) != 0)
      {
        v29 = __maskrune(v28, 0x400uLL);
        v27 = *(const char **)(a1 + 40);
      }
      else
      {
        v29 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v28 + 60) & 0x400;
      }
      if (v29)
        goto LABEL_95;
      v162 = *(unsigned __int8 *)v27;
      if (v162 == 39)
      {
        v168 = objc_alloc(MEMORY[0x1E0CB3940]);
        v169 = *(const char **)(a1 + 40);
        v170 = (uint64_t)(v169 + 1);
        v171 = strlen(v169);
        v10 = (id)objc_msgSend_initWithBytes_length_encoding_(v168, v172, v170, v171 - 2, 1);
        goto LABEL_98;
      }
      if (v162 != 46)
      {
        v7[2](v7, v9);
        v10 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_98;
      }
LABEL_95:
      v9.n128_f64[0] = strtod(v27, 0);
LABEL_96:
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v3, v4, v5, v6, v9.n128_f64[0]);
      goto LABEL_97;
    case 2:
      v30 = *(_QWORD *)(a1 + 24);
      if (v30)
        sub_1D53C0DF4(v30, v7);
      else
        objc_msgSend_null(MEMORY[0x1E0C99E38], v3, v4, v5, v6, NAN);
      goto LABEL_97;
    case 4:
      v31 = sub_1D53C1988(*(_QWORD *)(a1 + 24), (uint64_t)v7, 0);
      v32 = v31 * sub_1D53C1988(*(_QWORD *)(a1 + 32), (uint64_t)v7, 0);
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v33, v34, v35, v36, v32);
      goto LABEL_97;
    case 5:
      v37 = sub_1D53C1988(*(_QWORD *)(a1 + 24), (uint64_t)v7, 0);
      v38 = v37 / sub_1D53C1988(*(_QWORD *)(a1 + 32), (uint64_t)v7, 0);
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v39, v40, v41, v42, v38);
      goto LABEL_97;
    case 6:
      v43 = sub_1D53C1988(*(_QWORD *)(a1 + 24), (uint64_t)v7, 0);
      v44 = v43 + sub_1D53C1988(*(_QWORD *)(a1 + 32), (uint64_t)v7, 0);
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v45, v46, v47, v48, v44);
      goto LABEL_97;
    case 7:
      v49 = sub_1D53C1988(*(_QWORD *)(a1 + 24), (uint64_t)v7, 0);
      v50 = v49 - sub_1D53C1988(*(_QWORD *)(a1 + 32), (uint64_t)v7, 0);
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v51, v52, v53, v54, v50);
      goto LABEL_97;
    case 8:
      v55 = sub_1D53C1988(*(_QWORD *)(a1 + 24), (uint64_t)v7, 0);
      v56 = sub_1D53C1988(*(_QWORD *)(a1 + 32), (uint64_t)v7, 0);
      v57 = (void *)MEMORY[0x1E0C9AAA0];
      if (v55 >= v56)
        v57 = (void *)MEMORY[0x1E0C9AAB0];
      goto LABEL_29;
    case 9:
      v58 = sub_1D53C1988(*(_QWORD *)(a1 + 24), (uint64_t)v7, 0);
      v59 = sub_1D53C1988(*(_QWORD *)(a1 + 32), (uint64_t)v7, 0);
      v57 = (void *)MEMORY[0x1E0C9AAA0];
      if (v58 > v59)
        v57 = (void *)MEMORY[0x1E0C9AAB0];
      goto LABEL_29;
    case 0xA:
      v60 = sub_1D53C1988(*(_QWORD *)(a1 + 24), (uint64_t)v7, 0);
      v61 = sub_1D53C1988(*(_QWORD *)(a1 + 32), (uint64_t)v7, 0);
      v57 = (void *)MEMORY[0x1E0C9AAA0];
      if (v60 <= v61)
        v57 = (void *)MEMORY[0x1E0C9AAB0];
      goto LABEL_29;
    case 0xB:
      v62 = sub_1D53C1988(*(_QWORD *)(a1 + 24), (uint64_t)v7, 0);
      v63 = sub_1D53C1988(*(_QWORD *)(a1 + 32), (uint64_t)v7, 0);
      v57 = (void *)MEMORY[0x1E0C9AAA0];
      if (v62 < v63)
        v57 = (void *)MEMORY[0x1E0C9AAB0];
      goto LABEL_29;
    case 0xC:
      v64 = sub_1D53C1A64(*(_QWORD *)(a1 + 24), v7, *(_QWORD *)(a1 + 32));
      v57 = (void *)MEMORY[0x1E0C9AAA0];
      v65 = (void *)MEMORY[0x1E0C9AAB0];
      goto LABEL_27;
    case 0xD:
      v64 = sub_1D53C1A64(*(_QWORD *)(a1 + 24), v7, *(_QWORD *)(a1 + 32));
      v57 = (void *)MEMORY[0x1E0C9AAB0];
      v65 = (void *)MEMORY[0x1E0C9AAA0];
LABEL_27:
      if (v64)
        v57 = v65;
LABEL_29:
      v10 = v57;
      goto LABEL_98;
    case 0xE:
      v66 = sub_1D53C1BD8(*(_QWORD *)(a1 + 24), (uint64_t)v7);
      v67 = (void *)MEMORY[0x1E0C9AAA0];
      if (v66 && sub_1D53C1BD8(*(_QWORD *)(a1 + 32), (uint64_t)v7))
        v67 = (void *)MEMORY[0x1E0C9AAB0];
      v10 = v67;
      goto LABEL_98;
    case 0xF:
      if ((sub_1D53C1BD8(*(_QWORD *)(a1 + 24), (uint64_t)v7) & 1) != 0
        || sub_1D53C1BD8(*(_QWORD *)(a1 + 32), (uint64_t)v7))
      {
        goto LABEL_36;
      }
      goto LABEL_37;
    case 0x10:
      sub_1D53C1C78(a1, v7);
      v10 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_98;
    case 0x11:
      if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 8) == 18)
      {
        v144 = sub_1D53C1BD8(*(_QWORD *)(a1 + 24), (uint64_t)v7);
        v145 = *(_QWORD *)(a1 + 32);
        if (v144)
          sub_1D53C0DF4(*(_QWORD *)(v145 + 24), v7);
        else
          sub_1D53C0DF4(*(_QWORD *)(v145 + 32), v7);
LABEL_97:
        v10 = (id)objc_claimAutoreleasedReturnValue();
LABEL_98:
        v8 = v10;
      }
      else
      {
        v8 = 0;
      }
      goto LABEL_115;
    case 0x13:
LABEL_36:
      v8 = (void *)MEMORY[0x1E0C9AAB0];
      goto LABEL_115;
    case 0x14:
LABEL_37:
      v8 = (void *)MEMORY[0x1E0C9AAA0];
      goto LABEL_115;
    case 0x16:
      goto LABEL_96;
    case 0x17:
      sub_1D53C0DF4(*(_QWORD *)(a1 + 24), v7);
      v11 = (id)objc_claimAutoreleasedReturnValue();
      sub_1D53C0DF4(*(_QWORD *)(a1 + 32), v7);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        objc_msgSend_objectForKeyedSubscript_(v11, v69, (uint64_t)v68, v70, v71);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v8 = 0;
      }

      goto LABEL_114;
    case 0x18:
      sub_1D53C0DF4(*(_QWORD *)(a1 + 24), v7);
      v11 = (id)objc_claimAutoreleasedReturnValue();
      v72 = sub_1D53C1988(*(_QWORD *)(a1 + 32), (uint64_t)v7, 0);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & (v72 >= 0.0)) != 1
        || v72 > (double)(unint64_t)(objc_msgSend_count(v11, v73, v74, v75, v76) - 1))
      {
        goto LABEL_53;
      }
      objc_msgSend_objectAtIndexedSubscript_(v11, v77, (unint64_t)v72, v78, v79);
      v80 = objc_claimAutoreleasedReturnValue();
      goto LABEL_113;
    case 0x19:
      sub_1D53C1C78(*(_QWORD *)(a1 + 24), v7);
      v11 = (id)objc_claimAutoreleasedReturnValue();
      if (v11)
      {
        objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v81, v82, v83, v84);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v92 = objc_msgSend_count(v11, v85, v86, v87, v88);
        if (v92)
        {
          for (i = 0; i < v92; i = v95 + 1)
          {
            objc_msgSend_objectAtIndexedSubscript_(v11, v89, i, v90, v91);
            v94 = (void *)objc_claimAutoreleasedReturnValue();
            v95 = i + 1;
            objc_msgSend_objectAtIndexedSubscript_(v11, v96, v95, v97, v98);
            v99 = objc_claimAutoreleasedReturnValue();
            v102 = (void *)v99;
            if (v94 && v99)
              objc_msgSend_setObject_forKeyedSubscript_(v8, v100, v99, (uint64_t)v94, v101);

          }
        }
      }
      else
      {
LABEL_53:
        v8 = 0;
      }
      goto LABEL_114;
    case 0x1A:
      sub_1D53C1C78(*(_QWORD *)(a1 + 24), v7);
      v10 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_98;
    case 0x1B:
      v103 = *(_QWORD *)(a1 + 24);
      v104 = 0.0;
      if (v103)
      {
        sub_1D53C0DF4(v103, v7);
        v11 = (id)objc_claimAutoreleasedReturnValue();
        if (v11)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          {
            v163 = objc_msgSend_count(v11, v105, v106, v107, v108);
            objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v164, v165, v166, v167, (double)(unint64_t)v163);
            goto LABEL_112;
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v3, v4, v5, v6, 1.0);
            goto LABEL_112;
          }
          v104 = NAN;
        }
      }
      else
      {
        v11 = 0;
      }
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v3, v4, v5, v6, v104);
LABEL_112:
      v80 = objc_claimAutoreleasedReturnValue();
LABEL_113:
      v8 = (void *)v80;
      goto LABEL_114;
    case 0x1C:
    case 0x1D:
      sub_1D53C1C78(*(_QWORD *)(a1 + 24), v7);
      v11 = (id)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend_count(v11, v12, v13, v14, v15);
      objc_msgSend_objectAtIndexedSubscript_(v11, v17, 0, v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend_doubleValue(v20, v21, v22, v23, v24);
        v26 = v25;
      }
      else
      {
        v26 = NAN;
      }
      v151 = v16 - 1;
      objc_msgSend_objectAtIndexedSubscript_(v11, v21, v16 - 1, v23, v24);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (v151 < 2)
      {
        v156 = v20;
      }
      else
      {
        v155 = 2;
        while (1)
        {
          objc_msgSend_objectAtIndexedSubscript_(v11, v152, v155 - 1, v153, v154);
          v156 = (void *)objc_claimAutoreleasedReturnValue();

          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            objc_msgSend_doubleValue(v156, v152, v157, v153, v154);
          else
            v158 = NAN;
          v159 = *(_DWORD *)(a1 + 8);
          if (v159 == 29 && v26 == v158)
            break;
          if (v159 == 28 && v26 <= v158)
            break;
          v160 = v155 + 1;
          v155 += 2;
          v20 = v156;
          if (v160 >= v151)
            goto LABEL_91;
        }
        objc_msgSend_objectAtIndexedSubscript_(v11, v152, v155, v153, v154);
        v161 = objc_claimAutoreleasedReturnValue();

        v8 = (void *)v161;
      }
LABEL_91:

LABEL_114:
LABEL_115:

      return v8;
    case 0x1E:
      v109 = round(sub_1D53C1988(*(_QWORD *)(a1 + 24), (uint64_t)v7, 0));
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v110, v111, v112, v113, v109);
      goto LABEL_97;
    case 0x1F:
      v114 = floor(sub_1D53C1988(*(_QWORD *)(a1 + 24), (uint64_t)v7, 0));
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v115, v116, v117, v118, v114);
      goto LABEL_97;
    case 0x20:
      v119 = sqrt(sub_1D53C1988(*(_QWORD *)(a1 + 24), (uint64_t)v7, 0));
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v120, v121, v122, v123, v119);
      goto LABEL_97;
    case 0x21:
      v124 = sub_1D53C1988(*(_QWORD *)(a1 + 24), (uint64_t)v7, 0);
      v9.n128_f64[0] = exp(v124);
      goto LABEL_96;
    case 0x22:
      v146 = fabs(sub_1D53C1988(*(_QWORD *)(a1 + 24), (uint64_t)v7, 0));
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v147, v148, v149, v150, v146);
      goto LABEL_97;
    case 0x23:
      v125 = sub_1D53C1988(*(_QWORD *)(a1 + 24), (uint64_t)v7, 0);
      v126 = sub_1D53C1988(*(_QWORD *)(a1 + 32), (uint64_t)v7, 0);
      v9.n128_f64[0] = pow(v125, v126);
      goto LABEL_96;
    case 0x24:
      v127 = sub_1D53C1988(*(_QWORD *)(a1 + 24), (uint64_t)v7, 0);
      v9.n128_f64[0] = sub_1D53C1988(*(_QWORD *)(a1 + 32), (uint64_t)v7, 0);
      v128 = v9.n128_f64[0] < v127;
      goto LABEL_72;
    case 0x25:
      v127 = sub_1D53C1988(*(_QWORD *)(a1 + 24), (uint64_t)v7, 0);
      v9.n128_f64[0] = sub_1D53C1988(*(_QWORD *)(a1 + 32), (uint64_t)v7, 0);
      v128 = v127 < v9.n128_f64[0];
LABEL_72:
      if (!v128)
        v9.n128_f64[0] = v127;
      goto LABEL_96;
    case 0x26:
      v129 = sub_1D53C1988(*(_QWORD *)(a1 + 24), (uint64_t)v7, 0);
      v9.n128_f64[0] = log2(v129);
      goto LABEL_96;
    case 0x27:
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v3, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 40), v5, v6, NAN);
      v130 = (void *)objc_claimAutoreleasedReturnValue();
      v135 = objc_msgSend_length(v130, v131, v132, v133, v134);
      objc_msgSend_substringWithRange_(v130, v136, 1, v135 - 2, v137);
      v138 = (void *)objc_claimAutoreleasedReturnValue();

      v11 = objc_retainAutorelease(v138);
      v143 = objc_msgSend_UTF8String(v11, v139, v140, v141, v142);
      ((void (*)(void (**)(_QWORD, __n128), uint64_t))v7[2])(v7, v143);
      v80 = objc_claimAutoreleasedReturnValue();
      goto LABEL_113;
    default:
      goto LABEL_115;
  }
}

void sub_1D53C1788(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53C1848(_QWORD *a1)
{
  sub_1D53C186C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D53C186C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E9999660;
  v2 = a1[1];
  while (v2)
  {
    v3 = a1[3];
    a1[1] = --v2;
    v4 = *(_QWORD *)(v3 + 8 * v2);
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v2 = a1[1];
    }
  }
  v5 = (void *)a1[3];
  if (v5)
  {
    free(v5);
    a1[3] = 0;
  }
  return a1;
}

void sub_1D53C18E0(_QWORD *a1)
{
  sub_1D53C1904(a1);
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D53C1904(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E9999690;
  v3 = a1 + 3;
  v2 = a1[3];
  if (v2)
  {
    v4 = a1[4];
    (*(void (**)(_QWORD))(*(_QWORD *)v2 + 8))(a1[3]);
    if (v2 == v4)
      v3[1] = 0;
    *v3 = 0;
  }
  v5 = a1[4];
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    a1[4] = 0;
  }
  a1[5] = 0;
  return a1;
}

double sub_1D53C1988(uint64_t a1, uint64_t a2, int a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int isEqualToValue;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  double v15;
  CFTypeID v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;

  sub_1D53C0DF4();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v4;
  if (a3)
  {
    isEqualToValue = objc_msgSend_isEqualToValue_(v4, v5, MEMORY[0x1E0C9AAA0], v6, v7);
    v13 = objc_msgSend_isEqualToValue_(v8, v10, MEMORY[0x1E0C9AAB0], v11, v12);
    v14 = NAN;
    if (isEqualToValue)
      v14 = 0.0;
    if (v13)
      v15 = 1.0;
    else
      v15 = v14;
  }
  else
  {
    v15 = NAN;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v16 = CFGetTypeID(v8);
    if (v16 != CFBooleanGetTypeID())
    {
      objc_msgSend_doubleValue(v8, v17, v18, v19, v20);
      v15 = v21;
    }
  }

  return v15;
}

void sub_1D53C1A54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D53C1A64(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t isEqualToString;
  int isKindOfClass;
  double v13;

  v5 = a2;
  sub_1D53C0DF4(a1, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53C0DF4(a3, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6 == v7)
  {
    isEqualToString = 1;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      isEqualToString = objc_msgSend_isEqualToString_(v6, v8, (uint64_t)v7, v9, v10);
    }
    else
    {
      objc_opt_class();
      isKindOfClass = objc_opt_isKindOfClass();
      objc_opt_class();
      if ((isKindOfClass & objc_opt_isKindOfClass() & 1) != 0)
      {
        v13 = sub_1D53C1988(a1, (uint64_t)v5, 1);
        isEqualToString = v13 == sub_1D53C1988(a3, (uint64_t)v5, 1);
      }
      else
      {
        isEqualToString = 0;
      }
    }
  }

  return isEqualToString;
}

void sub_1D53C1BA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1D53C1BD8(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;

  sub_1D53C0DF4(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v3 = objc_retainAutorelease(v2);
    v8 = (const char *)objc_msgSend_objCType(v3, v4, v5, v6, v7);
    if (!strcmp(v8, "B"))
    {
      v14 = objc_msgSend_BOOLValue(v3, v9, v10, v11, v12);
    }
    else
    {
      objc_msgSend_doubleValue(v3, v9, v10, v11, v12);
      v14 = v13 != 0.0;
    }
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

void sub_1D53C1C68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D53C1C78(uint64_t a1, void *a2)
{
  void *v2;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;

  v4 = a2;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 16)
    {
      while (1)
      {
        v10 = *(_QWORD *)(a1 + 24);
        a1 = *(_QWORD *)(a1 + 32);
        sub_1D53C0DF4(v10, v4);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = (uint64_t)v14;
        if (!v14)
        {
          objc_msgSend_null(MEMORY[0x1E0C99E38], v11, 0, v12, v13);
          v2 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = (uint64_t)v2;
        }
        objc_msgSend_addObject_(v9, v11, v15, v12, v13);
        if (!v14)

        if (*(_DWORD *)(a1 + 8) != 16)
          break;

      }
      sub_1D53C0DF4(a1, v4);
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      v21 = v20;
      if (!v20)
      {
        objc_msgSend_null(MEMORY[0x1E0C99E38], v16, v22, v18, v19);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
      }
    }
    else
    {
      sub_1D53C0DF4(a1, v4);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = v20;
      if (!v20)
      {
        objc_msgSend_null(MEMORY[0x1E0C99E38], v16, v17, v18, v19);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
      }
    }
    objc_msgSend_addObject_(v9, v16, (uint64_t)v21, v18, v19);
    if (!v20)

  }
  return v9;
}

void sub_1D53C1DBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D53C1E38(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6;
  int v7;

  v7 = 0;
  v6 = &unk_1E997E9C8;
  sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE:ColorBalance1");
  (*(void (**)(uint64_t, uint64_t, void **, void **))(*(_QWORD *)a1 + 2976))(a1, a2, __p, &v6);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1D53C1EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D53C1EDC(uint64_t a1)
{
  void *v1;
  void **p_lpsrc;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v12;
  void *v13;
  std::__shared_weak_count *v14;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v1 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9972B38, 0)) != 0)
  {
    v13 = v1;
    v14 = v12;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v13;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v13)
    v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 800))(v13);
  else
    v6 = 0;
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1D53C1FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D53C1FF0(uint64_t a1)
{
  int v1;
  double result;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2992))(a1);
  result = 0.6;
  if (!v1)
    return 1.0;
  return result;
}

void sub_1D53C2020(uint64_t a1)
{
  void *v2;
  void **p_lpsrc;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *exception;
  void *lpsrc;
  std::__shared_weak_count *v17;
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  _QWORD v21[2];
  void *v22;
  std::__shared_weak_count *v23;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v2 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E99746A8, 0)) != 0)
  {
    v22 = v2;
    v23 = v17;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v22;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v4 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (!v22)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if ((*(unsigned int (**)(void *))(*(_QWORD *)v22 + 632))(v22))
  {
    v21[0] = &unk_1E99851F0;
    v21[1] = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v19, a1);
    v7 = v19;
    sub_1D52850A0(&lpsrc, "AsShotWhiteBalance");
    (*(void (**)(uint64_t, void **, _QWORD *, uint64_t))(*(_QWORD *)v7 + 600))(v7, &lpsrc, v21, 3);
    if (v18 < 0)
      operator delete(lpsrc);
    v8 = v20;
    if (v20)
    {
      v9 = (unint64_t *)&v20->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 3000))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 2960))(a1, v11);
  }
  v12 = v23;
  if (v23)
  {
    v13 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1D53C2224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  sub_1D5282EB4(v16 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53C2278(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = sub_1D5330F8C(v2, CFSTR("cameraMultipliersOffset"), v3, &unk_1E99996B0);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D53C231C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D53C2330()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1D8271938](exception, "RawCameraException");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
}

void sub_1D53C236C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53C2380(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = sub_1D5330F8C(v2, CFSTR("blackLevelTableOffset"), v3, &unk_1E99996D0);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D53C2424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D53C2438()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1D8271938](exception, "RawCameraException");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
}

void sub_1D53C2474(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53C2488(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = sub_1D5330F8C(v2, CFSTR("cameraMultipliersChannelCount"), v3, &unk_1E99996F0);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D53C252C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53C2540()
{
  return 4;
}

id sub_1D53C2548(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void **p_lpsrc;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void **v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;
  void *lpsrc;
  std::__shared_weak_count *v41;
  void *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, (uint64_t)CFSTR("aspectRatioCrop"), v5, v6))
  {
    v44 = 0;
    v45 = 0;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
    v12 = v11;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&lpsrc, a1);
    if (lpsrc
      && (v17 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9972B38, 0)) != 0)
    {
      v42 = v17;
      v43 = v41;
      p_lpsrc = &lpsrc;
    }
    else
    {
      p_lpsrc = &v42;
    }
    *p_lpsrc = 0;
    p_lpsrc[1] = 0;
    v24 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v42)
    {
      v10 = (*(uint64_t (**)(void *))(*(_QWORD *)v42 + 792))(v42);
      v12 = v13;
    }
    v44 = v10;
    v45 = (std::__shared_weak_count *)v12;
    v27 = v43;
    if (v43)
    {
      v28 = (unint64_t *)&v43->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    sub_1D53318E0((unsigned int *)&v44, v13, v14, v15, v16);
    v30 = objc_claimAutoreleasedReturnValue();
  }
  else if (objc_msgSend_isEqualToString_(v3, v7, (uint64_t)CFSTR("firmwareVersion"), v8, v9))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v42, a1);
    if (v42
      && (v22 = __dynamic_cast(v42, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9972B38, 0)) != 0)
    {
      v44 = (uint64_t)v22;
      v45 = v43;
      v23 = &v42;
    }
    else
    {
      v23 = (void **)&v44;
    }
    *v23 = 0;
    v23[1] = 0;
    v31 = v43;
    if (v43)
    {
      v32 = (unint64_t *)&v43->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v44)
      v34 = sub_1D52B89F8(v44);
    else
      v34 = 0;
    v35 = v45;
    if (v45)
    {
      v36 = (unint64_t *)&v45->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v19, v34, v20, v21);
    v30 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    sub_1D5367CB4(a1, v3);
    v30 = objc_claimAutoreleasedReturnValue();
  }
  v38 = (void *)v30;

  return v38;
}

void sub_1D53C27B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_1D5282EB4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1D53C27F4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void **p_lpsrc;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  char v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *exception;
  void *lpsrc;
  std::__shared_weak_count *v27;
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  std::__shared_weak_count *v32;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1) != 10)
  {
LABEL_38:
    sub_1D5367D44(a1, (void **)a2);
    return;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&lpsrc, a1);
  if (lpsrc
    && (v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E99746A8, 0)) != 0)
  {
    v31 = v4;
    v32 = v27;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v31;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v6 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (!v31)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if ((*(unsigned int (**)(void *))(*(_QWORD *)v31 + 632))(v31))
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v29, a1);
    v9 = v29;
    sub_1D52850A0(&lpsrc, "IFD0:EXIF:MAKERNOTE:BLACKLEVELS");
    v10 = (*(uint64_t (**)(uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v9 + 248))(v9, &lpsrc, a2, 0);
    if (v28 < 0)
      operator delete(lpsrc);
    v11 = v30;
    if (!v30)
      goto LABEL_19;
    v12 = (unint64_t *)&v30->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((v10 & 1) != 0)
        goto LABEL_20;
    }
    else
    {
LABEL_19:
      if ((v10 & 1) != 0)
      {
LABEL_20:
        v14 = 0;
        goto LABEL_32;
      }
    }
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 3016))(a1);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v29, a1);
    v16 = v29;
    sub_1D52850A0(&lpsrc, "IFD0:EXIF:MAKERNOTE:BLACKLEVELS");
    v17 = (*(uint64_t (**)(uint64_t, void **, uint64_t, _QWORD))(*(_QWORD *)v16 + 248))(v16, &lpsrc, a2, v15);
    if (v28 < 0)
      operator delete(lpsrc);
    v18 = v30;
    if (v30)
    {
      v19 = (unint64_t *)&v30->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if ((v17 & 1) != 0)
      goto LABEL_20;
  }
  v21 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v21;
    operator delete(v21);
  }
  v14 = 1;
LABEL_32:
  v22 = v32;
  if (v32)
  {
    v23 = (unint64_t *)&v32->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v14)
    goto LABEL_38;
}

void sub_1D53C2AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;
  void *v20;

  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  v20 = *(void **)v18;
  if (*(_QWORD *)v18)
  {
    *(_QWORD *)(v18 + 8) = v20;
    operator delete(v20);
  }
  sub_1D5282EB4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53C2B38(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2784))(a1);
}

void *sub_1D53C2B44()
{
  return &unk_1E99D1290;
}

char *sub_1D53C2B50@<X0>(char *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;

  v2 = a2;
  if (result[23] < 0)
  {
    result = (char *)sub_1D5290130(a2, *(void **)result, *((_QWORD *)result + 1));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)result;
    a2[2] = *((_QWORD *)result + 2);
  }
  v3 = *((unsigned __int8 *)v2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = v2[1];
  if (!v3)
  {
    if (v4 < 0)
    {
      v2[1] = 7;
      v2 = (uint64_t *)*v2;
    }
    else
    {
      *((_BYTE *)v2 + 23) = 7;
    }
    strcpy((char *)v2, "<empty>");
  }
  return result;
}

char *sub_1D53C2BE4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  char *v2;
  int v3;
  char *v4;
  int64_t v5;
  char *v6;
  char *v7;
  size_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  char *result;
  unint64_t v14;

  v2 = a2;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_1D5290130(a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *((_QWORD *)a2 + 2) = *(_QWORD *)(a1 + 16);
  }
  v3 = v2[23];
  v4 = *(char **)v2;
  if (v3 >= 0)
    v5 = v2[23];
  else
    v5 = *((_QWORD *)v2 + 1);
  if (v3 >= 0)
    v6 = v2;
  else
    v6 = *(char **)v2;
  v7 = &v6[v5];
  if (v5 < 1)
  {
    v11 = -1;
  }
  else
  {
    v8 = v5;
    v9 = v6;
    do
    {
      v10 = (char *)memchr(v9, 64, v8);
      if (!v10)
        break;
      if (*v10 == 64)
        goto LABEL_16;
      v9 = v10 + 1;
      v8 = v7 - (_BYTE *)v9;
    }
    while (v7 - (_BYTE *)v9 > 0);
    v10 = &v6[v5];
LABEL_16:
    if (v10 == v7)
      v11 = -1;
    else
      v11 = v10 - v6;
    v12 = v6;
    do
    {
      result = (char *)memchr(v12, 46, v5);
      if (!result)
        break;
      if (*result == 46)
        goto LABEL_26;
      v12 = result + 1;
      v5 = v7 - (_BYTE *)v12;
    }
    while (v7 - (_BYTE *)v12 > 0);
  }
  result = v7;
LABEL_26:
  v14 = result - v6;
  if (result == v7)
    v14 = -1;
  if (v11 != -1 && v14 != -1 && v14 > v11 + 1)
  {
    if (v3 < 0)
    {
      *((_QWORD *)v2 + 1) = 7;
      v2 = v4;
    }
    else
    {
      v2[23] = 7;
    }
    strcpy(v2, "<email>");
  }
  return result;
}

unint64_t sub_1D53C2D48(uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  int64_t v8;
  void *v9;
  char *v10;
  int64_t v11;
  char *v12;
  int v14;
  uint64_t v15;
  char *v16;

  v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v5 = *a1;
    v6 = a1[1];
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
  }
  v7 = strlen(__s);
  if (v6 < a3)
    return -1;
  v8 = v7;
  if (v7)
  {
    v9 = (void *)(v5 + a3);
    v10 = (char *)(v5 + v6);
    v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      v14 = *__s;
      do
      {
        v15 = v11 - v8;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16)
          break;
        v12 = v16;
        if (!memcmp(v16, __s, v8))
          goto LABEL_9;
        v9 = v12 + 1;
        v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    v12 = v10;
LABEL_9:
    if (v12 == v10)
      return -1;
    else
      return (unint64_t)&v12[-v5];
  }
  return a3;
}

void sub_1D53C2E1C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  std::string::size_type v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  std::string *v13;
  char *v14;
  uint64_t v16;
  std::string *v17;
  char *v18;
  uint64_t v20;
  std::string *v21;
  char *v22;
  std::string *v24;
  char *v25;
  int v27;
  int v28;
  _BYTE *v29;
  std::string v30;
  void *__dst[2];
  uint64_t v32;
  void *__p[2];
  char v34;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_1D5290130(__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a1;
    v32 = *(_QWORD *)(a1 + 16);
  }
  sub_1D53C2BE4((uint64_t)__dst, (char *)__p);
  sub_1D53C2B50((char *)__p, (uint64_t *)a2);
  if (v34 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v32) < 0)
    operator delete(__dst[0]);
  if (*(char *)(a2 + 23) < 0)
    sub_1D5290130(&v30, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    v30 = *(std::string *)a2;
  v3 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  v4 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  size = v30.__r_.__value_.__l.__size_;
  v5 = v30.__r_.__value_.__r.__words[0];
  v7 = &v30;
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = (std::string *)((char *)&v30 + HIBYTE(v30.__r_.__value_.__r.__words[2]));
  else
    v8 = (std::string *)(v30.__r_.__value_.__r.__words[0] + v30.__r_.__value_.__l.__size_);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v30;
  else
    v9 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if (v9 != v8)
  {
    do
    {
      v9->__r_.__value_.__s.__data_[0] = __toupper(v9->__r_.__value_.__s.__data_[0]);
      v9 = (std::string *)((char *)v9 + 1);
    }
    while (v9 != v8);
    v3 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    size = v30.__r_.__value_.__l.__size_;
    v5 = v30.__r_.__value_.__r.__words[0];
    v4 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  }
  if (v4 >= 0)
    v10 = v3;
  else
    v10 = size;
  if (v4 < 0)
    v7 = (std::string *)v5;
  if (v10 >= 5)
  {
    v11 = (char *)v7 + v10;
    v12 = v10;
    v13 = v7;
    do
    {
      v14 = (char *)memchr(v13, 78, v12 - 4);
      if (!v14)
        break;
      if (*(_DWORD *)v14 == 1330334030 && v14[4] == 78)
      {
        if (v14 != v11 && v14 - (char *)v7 != -1)
        {
          if (*(char *)(a2 + 23) < 0)
          {
            *(_QWORD *)(a2 + 8) = 5;
            a2 = *(_QWORD *)a2;
          }
          else
          {
            *(_BYTE *)(a2 + 23) = 5;
          }
          *(_BYTE *)(a2 + 4) = 78;
          v27 = 1330334030;
          goto LABEL_104;
        }
        break;
      }
      v13 = (std::string *)(v14 + 1);
      v12 = v11 - (char *)v13;
    }
    while (v11 - (char *)v13 >= 5);
    if (v10 >= 7)
    {
      v16 = v10;
      v17 = v7;
      do
      {
        v18 = (char *)memchr(v17, 79, v16 - 6);
        if (!v18)
          break;
        if (*(_DWORD *)v18 == 1297697871 && *(_DWORD *)(v18 + 3) == 1398100045)
        {
          if (v18 == v11 || v18 - (char *)v7 == -1)
            break;
          if (*(char *)(a2 + 23) < 0)
          {
            *(_QWORD *)(a2 + 8) = 7;
            a2 = *(_QWORD *)a2;
          }
          else
          {
            *(_BYTE *)(a2 + 23) = 7;
          }
          *(_DWORD *)(a2 + 3) = 1398100045;
          v28 = 1297697871;
          goto LABEL_91;
        }
        v17 = (std::string *)(v18 + 1);
        v16 = v11 - (char *)v17;
      }
      while (v11 - (char *)v17 >= 7);
    }
    v20 = v10;
    v21 = v7;
    do
    {
      v22 = (char *)memchr(v21, 76, v20 - 4);
      if (!v22)
        break;
      if (*(_DWORD *)v22 == 1128875340 && v22[4] == 65)
      {
        if (v22 != v11 && v22 - (char *)v7 != -1)
        {
          if (*(char *)(a2 + 23) < 0)
          {
            *(_QWORD *)(a2 + 8) = 5;
            a2 = *(_QWORD *)a2;
          }
          else
          {
            *(_BYTE *)(a2 + 23) = 5;
          }
          *(_BYTE *)(a2 + 4) = 65;
          v27 = 1128875340;
          goto LABEL_104;
        }
        break;
      }
      v21 = (std::string *)(v22 + 1);
      v20 = v11 - (char *)v21;
    }
    while (v11 - (char *)v21 >= 5);
    if (v10 > 5)
    {
      v24 = v7;
      do
      {
        v25 = (char *)memchr(v24, 80, v10 - 5);
        if (!v25)
          break;
        if (*(_DWORD *)v25 == 1414415696 && *((_WORD *)v25 + 2) == 22593)
        {
          if (v25 == v11 || v25 - (char *)v7 == -1)
            break;
          if (*(char *)(a2 + 23) < 0)
          {
            *(_QWORD *)(a2 + 8) = 6;
            a2 = *(_QWORD *)a2;
          }
          else
          {
            *(_BYTE *)(a2 + 23) = 6;
          }
          *(_WORD *)(a2 + 4) = 22593;
          *(_DWORD *)a2 = 1414415696;
          v29 = (_BYTE *)(a2 + 6);
          goto LABEL_105;
        }
        v24 = (std::string *)(v25 + 1);
        v10 = v11 - (char *)v24;
      }
      while (v11 - (char *)v24 >= 6);
    }
  }
  if (sub_1D53C2D48((uint64_t *)&v30, "MINOLTA", 0) != -1)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      *(_QWORD *)(a2 + 8) = 7;
      a2 = *(_QWORD *)a2;
    }
    else
    {
      *(_BYTE *)(a2 + 23) = 7;
    }
    *(_DWORD *)(a2 + 3) = 1096043599;
    v28 = 1330530637;
LABEL_91:
    *(_DWORD *)a2 = v28;
    v29 = (_BYTE *)(a2 + 7);
LABEL_105:
    *v29 = 0;
    goto LABEL_106;
  }
  if (sub_1D53C2D48((uint64_t *)&v30, "SAMSUNG", 0) != -1)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      *(_QWORD *)(a2 + 8) = 7;
      a2 = *(_QWORD *)a2;
    }
    else
    {
      *(_BYTE *)(a2 + 23) = 7;
    }
    *(_DWORD *)(a2 + 3) = 1196315987;
    v28 = 1397571923;
    goto LABEL_91;
  }
  if (sub_1D53C2D48((uint64_t *)&v30, "EPSON", 0) != -1)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      *(_QWORD *)(a2 + 8) = 5;
      a2 = *(_QWORD *)a2;
    }
    else
    {
      *(_BYTE *)(a2 + 23) = 5;
    }
    *(_BYTE *)(a2 + 4) = 78;
    v27 = 1330860101;
LABEL_104:
    *(_DWORD *)a2 = v27;
    v29 = (_BYTE *)(a2 + 5);
    goto LABEL_105;
  }
  if (sub_1D53C2D48((uint64_t *)&v30, "HASSELBLAD", 0) != -1)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      *(_QWORD *)(a2 + 8) = 10;
      a2 = *(_QWORD *)a2;
    }
    else
    {
      *(_BYTE *)(a2 + 23) = 10;
    }
    *(_WORD *)(a2 + 8) = 17473;
    *(_QWORD *)a2 = *(_QWORD *)"HASSELBLAD";
    v29 = (_BYTE *)(a2 + 10);
    goto LABEL_105;
  }
  if (sub_1D53C2D48((uint64_t *)&v30, "LEAF", 0) != -1)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      *(_QWORD *)(a2 + 8) = 4;
      a2 = *(_QWORD *)a2;
    }
    else
    {
      *(_BYTE *)(a2 + 23) = 4;
    }
    *(_DWORD *)a2 = 1178682700;
    v29 = (_BYTE *)(a2 + 4);
    goto LABEL_105;
  }
  if (sub_1D53C2D48((uint64_t *)&v30, "RICOH", 0) != -1)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      *(_QWORD *)(a2 + 8) = 5;
      a2 = *(_QWORD *)a2;
    }
    else
    {
      *(_BYTE *)(a2 + 23) = 5;
    }
    *(_BYTE *)(a2 + 4) = 72;
    v27 = 1329809746;
    goto LABEL_104;
  }
  if (sub_1D53C2D48((uint64_t *)&v30, "PHASE ONE", 0) != -1)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      *(_QWORD *)(a2 + 8) = 9;
      a2 = *(_QWORD *)a2;
    }
    else
    {
      *(_BYTE *)(a2 + 23) = 9;
    }
    *(_BYTE *)(a2 + 8) = 69;
    *(_QWORD *)a2 = *(_QWORD *)"PHASE ONE";
    v29 = (_BYTE *)(a2 + 9);
    goto LABEL_105;
  }
  std::string::operator=((std::string *)a2, &v30);
LABEL_106:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

void sub_1D53C3414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v27 + 23) < 0)
    operator delete(*(void **)v27);
  _Unwind_Resume(exception_object);
}

void sub_1D53C3478(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3[2];
  uint64_t v4;
  void *__p[2];
  char v6;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_1D5290130(v3, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)a1;
    v4 = *(_QWORD *)(a1 + 16);
  }
  sub_1D53C2BE4((uint64_t)v3, (char *)__p);
  sub_1D53C2B50((char *)__p, a2);
  if (v6 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
}

void sub_1D53C34FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

BOOL sub_1D53C3530(int a1, int a2, char *__s, uint64_t a4, uint64_t **a5)
{
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;

  v7 = __s;
  if (__s[23] < 0)
  {
    v8 = *((_QWORD *)__s + 1);
    if (!v8)
      goto LABEL_18;
    v7 = *(char **)__s;
  }
  else
  {
    v8 = __s[23];
    if (!__s[23])
      goto LABEL_18;
  }
  v9 = &v7[v8];
  if (v8 >= 4)
  {
    v10 = v7;
    do
    {
      v11 = (char *)memchr(v10, 100, v8 - 3);
      if (!v11)
        break;
      if (*(_DWORD *)v11 == 778530404)
        goto LABEL_12;
      v10 = v11 + 1;
      v8 = v9 - v10;
    }
    while (v9 - v10 > 3);
  }
  v11 = v9;
LABEL_12:
  LODWORD(v8) = v11 != v9 && v11 == v7;
LABEL_18:
  v13 = *(unsigned __int8 *)(a4 + 23);
  v14 = (char)v13;
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(a4 + 8);
  if (v13 != 14)
    return 0;
  if (v14 >= 0)
    v15 = (uint64_t *)a4;
  else
    v15 = *(uint64_t **)a4;
  v16 = *v15;
  v17 = *(uint64_t *)((char *)v15 + 6);
  if (v16 != 0x4F45206E6F6E6143 || v17 != 0x4430303320534F45)
    LODWORD(v8) = 0;
  if ((_DWORD)v8 != 1)
    return 0;
  v19 = (uint64_t *)*((unsigned __int8 *)a5 + 23);
  v20 = (char)v19;
  if ((char)v19 < 0)
    v19 = a5[1];
  if (v19 != (uint64_t *)10)
    return 0;
  if (v20 >= 0)
    v21 = (uint64_t *)a5;
  else
    v21 = *a5;
  v22 = *v21;
  v23 = *((unsigned __int16 *)v21 + 4);
  return v22 == 0x3831313330363830 && v23 == 14646;
}

void sub_1D53C3694(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  void *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v20;
  BOOL v21;
  void *v22;
  void *v23;
  int v24;
  int v25;
  BOOL v26;
  NSObject *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD v34[4];
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  int v43;
  BOOL v44;
  void *__p[2];
  uint64_t v46;
  void *v47[2];
  uint64_t v48;
  void *__s[2];
  uint64_t v50;
  void *v51[2];
  uint64_t v52;
  __int128 __dst;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;

  v4 = atomic_load((unsigned __int8 *)&qword_1EFF38798);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF38798))
  {
    qword_1EFF38790 = (uint64_t)dispatch_queue_create("CoreAnalytics Logging", 0);
    __cxa_guard_release(&qword_1EFF38798);
  }
  if (qword_1EFF387A0 != -1)
    dispatch_once(&qword_1EFF387A0, &unk_1E999A308);
  v5 = *a1;
  if (qword_1EFF38790)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    if (*a2)
    {
      LODWORD(v57) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 120))(*a2);
      v7 = sub_1D52B488C(&v57);
      sub_1D52B4860(&v57);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D529A17C(v8, &v63);

      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a2 + 144))(&v61);
      v9 = (unsigned __int8 *)v61;
      if (*((_QWORD *)&v61 + 1) == (_QWORD)v61)
        goto LABEL_28;
      v10 = *(unsigned __int8 *)(v61 + 23);
      if ((v10 & 0x80u) == 0)
        v11 = *(unsigned __int8 *)(v61 + 23);
      else
        v11 = *(_QWORD *)(v61 + 8);
      v12 = HIBYTE(v64);
      if (v64 < 0)
        v12 = *((_QWORD *)&v63 + 1);
      if (v11 != v12)
      {
LABEL_28:
        v21 = 0;
      }
      else
      {
        if (v64 >= 0)
          v13 = (unsigned __int8 *)&v63;
        else
          v13 = (unsigned __int8 *)v63;
        if ((v10 & 0x80) != 0)
        {
          v21 = memcmp(*(const void **)v61, v13, *(_QWORD *)(v61 + 8)) == 0;
        }
        else if (*(_BYTE *)(v61 + 23))
        {
          v14 = v10 - 1;
          do
          {
            v16 = *v9++;
            v15 = v16;
            v18 = *v13++;
            v17 = v18;
            v20 = v14-- != 0;
            v21 = v15 == v17;
          }
          while (v15 == v17 && v20);
        }
        else
        {
          v21 = 1;
        }
      }
      *(_QWORD *)&v59 = &v61;
      sub_1D5293CCC((void ***)&v59);
      if (SHIBYTE(v64) < 0)
        operator delete((void *)v63);
      v5 = *a1;
    }
    else
    {
      v21 = 0;
      v7 = -1;
    }
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v5 + 216))(&v63);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 224))(&v61);
    (**(void (***)(__int128 *__return_ptr))*a1)(&v59);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 232))(&v57);
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 400))(*a1);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53C3EE8(v22, (void *)*MEMORY[0x1E0CBCA28], (void *)*MEMORY[0x1E0CBCAF0]);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D529A17C(v23, &v55);

    if (SHIBYTE(v64) < 0)
    {
      v24 = sub_1D5290130(&__dst, (void *)v63, *((unint64_t *)&v63 + 1));
    }
    else
    {
      __dst = v63;
      v54 = v64;
    }
    if (SHIBYTE(v62) < 0)
    {
      v24 = sub_1D5290130(v51, (void *)v61, *((unint64_t *)&v61 + 1));
    }
    else
    {
      *(_OWORD *)v51 = v61;
      v52 = v62;
    }
    if (SHIBYTE(v60) < 0)
    {
      v24 = sub_1D5290130(__s, (void *)v59, *((unint64_t *)&v59 + 1));
    }
    else
    {
      *(_OWORD *)__s = v59;
      v50 = v60;
    }
    if (SHIBYTE(v58) < 0)
    {
      v24 = sub_1D5290130(v47, (void *)v57, *((unint64_t *)&v57 + 1));
    }
    else
    {
      *(_OWORD *)v47 = v57;
      v48 = v58;
    }
    if (SHIBYTE(v56) < 0)
    {
      v24 = sub_1D5290130(__p, (void *)v55, *((unint64_t *)&v55 + 1));
    }
    else
    {
      *(_OWORD *)__p = v55;
      v46 = v56;
    }
    v26 = sub_1D53C3530(v24, v25, (char *)__s, (uint64_t)v47, (uint64_t **)__p);
    if (SHIBYTE(v46) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v48) < 0)
      operator delete(v47[0]);
    if (SHIBYTE(v50) < 0)
      operator delete(__s[0]);
    if (SHIBYTE(v52) < 0)
      operator delete(v51[0]);
    if (SHIBYTE(v54) < 0)
    {
      operator delete((void *)__dst);
      if (v26)
      {
LABEL_83:
        if (SHIBYTE(v56) < 0)
          operator delete((void *)v55);

        if (SHIBYTE(v58) < 0)
          operator delete((void *)v57);
        if (SHIBYTE(v60) < 0)
          operator delete((void *)v59);
        if (SHIBYTE(v62) < 0)
          operator delete((void *)v61);
        if (SHIBYTE(v64) < 0)
          operator delete((void *)v63);
        return;
      }
    }
    else if (v26)
    {
      goto LABEL_83;
    }
    v27 = qword_1EFF38790;
    v34[0] = MEMORY[0x1E0C809B0];
    v34[1] = 3321888768;
    v34[2] = sub_1D53C3F68;
    v34[3] = &unk_1E999A3C0;
    if (SHIBYTE(v64) < 0)
    {
      sub_1D5290130(&v35, (void *)v63, *((unint64_t *)&v63 + 1));
    }
    else
    {
      v35 = v63;
      v36 = v64;
    }
    if (SHIBYTE(v62) < 0)
    {
      sub_1D5290130(&v37, (void *)v61, *((unint64_t *)&v61 + 1));
    }
    else
    {
      v37 = v61;
      v38 = v62;
    }
    if (SHIBYTE(v60) < 0)
    {
      sub_1D5290130(&v39, (void *)v59, *((unint64_t *)&v59 + 1));
    }
    else
    {
      v39 = v59;
      v40 = v60;
    }
    v28 = (std::__shared_weak_count *)a2[1];
    v41 = *a2;
    v42 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
    }
    v43 = v7;
    v44 = v21;
    dispatch_async(v27, v34);
    v31 = v42;
    if (v42)
    {
      v32 = (unint64_t *)&v42->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (SHIBYTE(v40) < 0)
      operator delete((void *)v39);
    if (SHIBYTE(v38) < 0)
      operator delete((void *)v37);
    if (SHIBYTE(v36) < 0)
      operator delete((void *)v35);
    goto LABEL_83;
  }
}

void sub_1D53C3BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  void *v54;
  uint64_t v55;

  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  if (*(char *)(v55 - 161) < 0)
    operator delete(*(void **)(v55 - 184));

  if (*(char *)(v55 - 137) < 0)
    operator delete(*(void **)(v55 - 160));
  if (*(char *)(v55 - 113) < 0)
    operator delete(*(void **)(v55 - 136));
  if (*(char *)(v55 - 89) < 0)
    operator delete(*(void **)(v55 - 112));
  if (*(char *)(v55 - 65) < 0)
    operator delete(*(void **)(v55 - 88));
  _Unwind_Resume(a1);
}

void sub_1D53C3D20()
{
  dispatch_async((dispatch_queue_t)qword_1EFF38790, &unk_1E999A328);
}

void sub_1D53C3D34()
{
  void *v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  BOOL v21;
  id v22;
  id v23;

  v0 = (void *)MEMORY[0x1D8272058]();
  objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], v1, v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_bundleIdentifier(v5, v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_bundleURL(v5, v11, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pathExtension(v15, v16, v17, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
    v21 = v20 == 0;
  else
    v21 = 1;
  if (!v21)
  {
    v22 = v10;
    v23 = v20;
    AnalyticsSendEventLazy();

  }
  objc_autoreleasePoolPop(v0);
}

void sub_1D53C3E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

id sub_1D53C3E6C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("Signature");
  v4[1] = CFSTR("Extension");
  v2 = *(_QWORD *)(a1 + 40);
  v5[0] = *(_QWORD *)(a1 + 32);
  v5[1] = v2;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v5, (uint64_t)v4, 2);
  return (id)objc_claimAutoreleasedReturnValue();
}

id sub_1D53C3EE8(void *a1, void *a2, void *a3)
{
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v5 = a3;
  sub_1D5297C60(a1, a2, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D5297D18(v6, v5, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1D53C3F4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53C3F68(uint64_t a1)
{
  void *v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __CFString *v9;
  __CFString *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  __CFString *v17;
  __CFString *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  __CFString *v25;
  __CFString *v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  double v31;
  unsigned int v32;
  double v33;
  id *v34;
  _QWORD v35[7];
  _QWORD v36[11];
  int v37;
  char v38;
  char v39;
  char v40;
  __int128 __p;
  uint64_t v42;
  __int128 __dst;
  uint64_t v44;
  void *v45[2];
  char v46;

  v2 = (void *)MEMORY[0x1D8272058]();
  v3 = (void *)MEMORY[0x1E0CB3940];
  if (*(char *)(a1 + 55) < 0)
  {
    sub_1D5290130(&__dst, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    __dst = *(_OWORD *)(a1 + 32);
    v44 = *(_QWORD *)(a1 + 48);
  }
  sub_1D53C2E1C((uint64_t)&__dst, (uint64_t)v45);
  if (v46 >= 0)
    objc_msgSend_stringWithUTF8String_(v3, v4, (uint64_t)v45, v5, v6);
  else
    objc_msgSend_stringWithUTF8String_(v3, v4, (uint64_t)v45[0], v5, v6);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)v7;
  v9 = CFSTR("Unknown Make");
  if (v7)
    v9 = (__CFString *)v7;
  v10 = v9;

  if (v46 < 0)
    operator delete(v45[0]);
  if (SHIBYTE(v44) < 0)
    operator delete((void *)__dst);
  v11 = (void *)MEMORY[0x1E0CB3940];
  if (*(char *)(a1 + 79) < 0)
  {
    sub_1D5290130(&__p, *(void **)(a1 + 56), *(_QWORD *)(a1 + 64));
  }
  else
  {
    __p = *(_OWORD *)(a1 + 56);
    v42 = *(_QWORD *)(a1 + 72);
  }
  sub_1D53C3478((uint64_t)&__p, (uint64_t *)v45);
  if (v46 >= 0)
    objc_msgSend_stringWithUTF8String_(v11, v12, (uint64_t)v45, v13, v14);
  else
    objc_msgSend_stringWithUTF8String_(v11, v12, (uint64_t)v45[0], v13, v14);
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = (void *)v15;
  v17 = CFSTR("Unknown Model");
  if (v15)
    v17 = (__CFString *)v15;
  v18 = v17;

  if (v46 < 0)
    operator delete(v45[0]);
  if (SHIBYTE(v42) < 0)
    operator delete((void *)__p);
  v22 = (_QWORD *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
    v22 = (_QWORD *)*v22;
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v19, (uint64_t)v22, v20, v21);
  v23 = objc_claimAutoreleasedReturnValue();
  v24 = (void *)v23;
  v25 = CFSTR("Unknown Key");
  if (v23)
    v25 = (__CFString *)v23;
  v26 = v25;

  v27 = *(_QWORD *)(a1 + 104);
  if (v27)
  {
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 2152))(v27);
    v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 176))(*(_QWORD *)(a1 + 104));
    v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 408))(*(_QWORD *)(a1 + 104));
    v31 = 0.0;
    if ((v28 & 1) == 0)
      v31 = (*(double (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 104) + 2664))(*(_QWORD *)(a1 + 104), 0, 0);
    v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 256))(*(_QWORD *)(a1 + 104));
    v33 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 264))(*(_QWORD *)(a1 + 104));
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3221225472;
    v36[2] = sub_1D53C43D8;
    v36[3] = &unk_1E999A378;
    v37 = *(_DWORD *)(a1 + 120);
    v38 = *(_BYTE *)(a1 + 124);
    v39 = v29;
    v40 = v28;
    v34 = (id *)v36;
    v36[4] = v10;
    v36[5] = v18;
    v36[6] = v26;
    *(double *)&v36[7] = v31;
    *(double *)&v36[8] = (double)(int)v30 * (double)SHIDWORD(v30);
    *(double *)&v36[9] = (double)v32;
    *(double *)&v36[10] = v33;
    AnalyticsSendEventLazy();
  }
  else
  {
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 3221225472;
    v35[2] = sub_1D53C4648;
    v35[3] = &unk_1E999A3A0;
    v34 = (id *)v35;
    v35[4] = v10;
    v35[5] = v18;
    v35[6] = v26;
    AnalyticsSendEventLazy();
  }

  objc_autoreleasePoolPop(v2);
}

void sub_1D53C42EC(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53C42C4);
}

void sub_1D53C4370()
{
  JUMPOUT(0x1D53C4350);
}

void sub_1D53C4378(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (*(char *)(v34 - 113) < 0)
    operator delete(*(void **)(v34 - 136));
  if (a34 < 0)
    operator delete(__p);
  JUMPOUT(0x1D53C4354);
}

void sub_1D53C43A8()
{
  uint64_t v0;

  if (*(char *)(v0 - 113) < 0)
    operator delete(*(void **)(v0 - 136));
  if (*(char *)(v0 - 137) < 0)
    operator delete(*(void **)(v0 - 160));
  JUMPOUT(0x1D53C4358);
}

id sub_1D53C43D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  void *v40;
  _QWORD v42[11];
  _QWORD v43[4];
  __int128 v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v42[0] = CFSTR("ProcessingVersion");
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], a2, *(unsigned int *)(a1 + 88), a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v43[0] = v6;
  v42[1] = CFSTR("LatestVersion");
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v7, *(unsigned __int8 *)(a1 + 92), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v43[1] = v10;
  v42[2] = CFSTR("DNG");
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v11, *(unsigned __int8 *)(a1 + 93), v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v43[2] = v14;
  v42[3] = CFSTR("Linearized");
  objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v15, *(unsigned __int8 *)(a1 + 94), v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v43[3] = v18;
  v44 = *(_OWORD *)(a1 + 32);
  v42[4] = CFSTR("CameraMake");
  v42[5] = CFSTR("CameraModel");
  v45 = *(_QWORD *)(a1 + 48);
  v42[6] = CFSTR("CameraKey");
  v42[7] = CFSTR("RepresentativeNoise");
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v19, v20, v21, v22, *(double *)(a1 + 56));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v46 = v23;
  v42[8] = CFSTR("Megapixel");
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v24, v25, v26, v27, *(double *)(a1 + 64));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = v28;
  v42[9] = CFSTR("ISO");
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v29, v30, v31, v32, *(double *)(a1 + 72));
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = v33;
  v42[10] = CFSTR("ExposureTime");
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v34, v35, v36, v37, *(double *)(a1 + 80));
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = v38;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v39, (uint64_t)v43, (uint64_t)v42, 11);
  v40 = (void *)objc_claimAutoreleasedReturnValue();

  return v40;
}

void sub_1D53C45DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

id sub_1D53C4648(uint64_t a1, const char *a2)
{
  __int128 v2;
  _QWORD v4[3];
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 32);
  v4[0] = CFSTR("CameraMake");
  v4[1] = CFSTR("CameraModel");
  v5 = v2;
  v4[2] = CFSTR("CameraKey");
  v6 = *(_QWORD *)(a1 + 48);
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)&v5, (uint64_t)v4, 3);
  return (id)objc_claimAutoreleasedReturnValue();
}

_BYTE *sub_1D53C46D8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *result;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (*(char *)(a2 + 55) < 0)
  {
    sub_1D5290130((_BYTE *)(a1 + 32), *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    sub_1D5290130((_BYTE *)(a1 + 56), *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  result = (_BYTE *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    result = sub_1D5290130(result, *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)result = v7;
  }
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

void sub_1D53C47AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1D53C47E0(uint64_t a1)
{
  sub_1D5282EB4(a1 + 104);
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_1D53C4B08(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D53C4B14(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1D5281424(a1);
  _Unwind_Resume(a1);
}

void sub_1D53C4B30(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWBayerInterleavedFilter", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D53C4BB4(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGAffineTransform v8;
  CGRect v9;
  CGRect v10;

  CGAffineTransformMakeScale(&v8, 0.5, 0.5);
  v9.origin.x = a1;
  v9.origin.y = a2;
  v9.size.width = a3;
  v9.size.height = a4;
  v10 = CGRectApplyAffineTransform(v9, &v8);
  CGRectIntegral(v10);
}

void sub_1D53C4CEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53C4E3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53C5144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53C560C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_1D53C588C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53C5A04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53C6904(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D53C6910(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1D5281424(a1);
  _Unwind_Resume(a1);
}

void sub_1D53C692C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWDemosaicFilter", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

double sub_1D53C69B0(CGFloat *a1, double a2, double a3, double a4, double a5)
{
  return sub_1D53C69DC(a2, a3, a4, a5, a1[4], a1[5], a1[6], a1[7], 1.0);
}

double sub_1D53C69DC(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, double a7, double a8, float a9)
{
  double v19;
  double v20;
  double result;
  CGRect v22;
  CGRect v23;

  v19 = a1 + a7;
  v20 = a2 + a8;
  v22 = CGRectInset(*(CGRect *)(&a3 - 2), (float)-a9, (float)-a9);
  v23.origin.x = 0.0;
  v23.origin.y = 0.0;
  v23.size.width = a5;
  v23.size.height = a6;
  *(_QWORD *)&result = (unint64_t)CGRectIntersection(v22, v23);
  return result;
}

double sub_1D53C6A28(CGFloat *a1, double a2, double a3, double a4, double a5)
{
  return sub_1D53C69DC(a2, a3, a4, a5, a1[4], a1[5], a1[6], a1[7], 2.0);
}

double sub_1D53C6A54(CGFloat *a1, double a2, double a3, double a4, double a5)
{
  return sub_1D53C69DC(a2, a3, a4, a5, a1[4], a1[5], a1[6], a1[7], 3.0);
}

double sub_1D53C6A80(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (!a6)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -2.0, -2.0);
  return result;
}

double sub_1D53C6AA4(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (!a6)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -3.0, -3.0);
  return result;
}

void sub_1D53C6BE4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void **p_lpsrc;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  double v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  double v19;
  std::__shared_weak_count *v20;
  void *lpsrc;
  std::__shared_weak_count *v22;
  void *v23;
  std::__shared_weak_count *v24;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E99A6EB0, 0)) != 0)
  {
    v23 = v4;
    v24 = v22;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v23;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v6 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v23)
  {
    (*(void (**)(double *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v19, a1);
    sub_1D5439914((uint64_t)&v19, &lpsrc);
    v9 = v20;
    if (v20)
    {
      v10 = (unint64_t *)&v20->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = 0.0;
    if (*((int *)lpsrc + 18) >= 3)
    {
      LODWORD(v12) = *((_DWORD *)lpsrc + 29);
      v12 = (double)*(unint64_t *)&v12;
    }
    v19 = v12;
    sub_1D528F9B4(a2, 4uLL, &v19);
    v13 = v22;
    if (v22)
    {
      v14 = (unint64_t *)&v22->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    lpsrc = 0;
    sub_1D528F9B4(a2, 4uLL, &lpsrc);
  }
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1D53C6DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D53C6DE8(_DWORD *a1)
{
  if (!a1[10])
    sub_1D5299D3C(a1);
}

uint64_t sub_1D53C6DF8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;

  *a2 = 0;
  a2[1] = 0;
  v4 = (char *)operator new(0x108uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E999B050;
  *((_QWORD *)v4 + 1) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  v4[72] = 1;
  *((_QWORD *)v4 + 10) = &unk_1E999B0A0;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *((_QWORD *)v4 + 15) = &unk_1E999B0D0;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_OWORD *)v4 + 12) = 0u;
  *((_OWORD *)v4 + 13) = 0u;
  v4[224] = 0;
  *((_QWORD *)v4 + 29) = 0;
  *((_QWORD *)v4 + 30) = 0;
  *((_DWORD *)v4 + 64) = 0;
  *((_QWORD *)v4 + 31) = 0;
  *(_QWORD *)&v9 = v4 + 24;
  *((_QWORD *)&v9 + 1) = v4;
  sub_1D5292548((uint64_t)a2, &v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return sub_1D53C6F20(*a2, a1);
}

void sub_1D53C6EFC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53C6EE8);
}

void sub_1D53C6F0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53C6F20(uint64_t a1, uint64_t *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  void *v9;
  void *exception;
  int v11;
  int v12;
  uint64_t v13[3];
  int v14;
  _BYTE v15[24];

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 48))(*a2);
  v14 = sub_1D52845F4(*a2);
  LODWORD(v13[0]) = v4;
  LODWORD(v13[0]) = *sub_1D5284C34(v13, &v14);
  sub_1D52B1CC8((uint64_t)v15, a2, v13);
  v5 = sub_1D52847F8(*a2);
  sub_1D52847F8(*a2);
  v14 = sub_1D52847F8(*a2);
  if (v5 != 1229539657 && v5 != 1296911693)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D5282F74(&v12, &v14);
  sub_1D5285164(v13, a2, (uint64_t)&v12, 0);
  v6 = sub_1D52847F8(*a2);
  sub_1D52847F8(*a2);
  if (v6 > 0x1FF)
  {
    v9 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v9, "RawCameraException");
    __cxa_throw(v9, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  for (; v6; --v6)
  {
    v7 = sub_1D52847F8(*a2);
    v12 = sub_1D52847F8(*a2);
    v11 = sub_1D52847F8(*a2);
    sub_1D53C7140(a1, a2, v7, &v12, &v11);
  }
  sub_1D5285200(v13);
  return sub_1D52B1D54((uint64_t)v15);
}

void sub_1D53C70D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  sub_1D52B1D54((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53C7140(uint64_t result, uint64_t *a2, int a3, _DWORD *a4, int *a5)
{
  uint64_t v7;
  int v8;
  int v9;
  void **v10;
  int v11;
  int v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  void **v25;
  int v26;
  int v27;
  unint64_t v28;
  char *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  void **v40;
  int v41;
  int v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  int v54;
  void **v55;
  int v56;
  int v57;
  unint64_t v58;
  char *v59;
  _DWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  int v68;
  uint64_t v69;
  int v70;
  int i;
  unsigned int v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  _DWORD *v85;
  _DWORD *v86;
  char *v87;
  uint64_t v88;
  int v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  char *v96;
  char **v97;
  void **v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  int v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  int v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  int v126;
  _DWORD *v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  int v136;
  void *v137;
  void *exception;
  int v139;
  uint64_t v140[3];
  char __s[8];
  uint64_t v142;
  int v143;
  uint64_t v144;

  v7 = result;
  v144 = *MEMORY[0x1E0C80C00];
  if (a3 > 1048)
  {
    if (a3 == 1049)
    {
      sub_1D5285B08((int *)__s, a5);
      sub_1D5285164(v140, a2, (uint64_t)__s, 0);
      if (*a4 >= 0x24u && sub_1D528479C(*a2) == 18761 && sub_1D528479C(*a2) == 1)
      {
        *(float *)(v7 + 64) = sub_1D5284934(*a2);
        *(float *)(v7 + 68) = sub_1D5284934(*a2);
        *(float *)(v7 + 72) = sub_1D5284934(*a2);
        *(float *)(v7 + 76) = sub_1D5284934(*a2);
        *(float *)(v7 + 80) = sub_1D5284934(*a2);
        *(float *)(v7 + 84) = sub_1D5284934(*a2);
        *(float *)(v7 + 88) = sub_1D5284934(*a2);
        v90 = sub_1D5284934(*a2);
        *(float *)(v7 + 92) = v90;
        *(_BYTE *)(v7 + 48) = 0;
        if ((*(_DWORD *)(v7 + 64) & 0x7FFFFFFFu) > 0x7F7FFFFF
          || (*(_DWORD *)(v7 + 68) & 0x7FFFFFFFu) > 0x7F7FFFFF
          || (*(_DWORD *)(v7 + 72) & 0x7FFFFFFFu) > 0x7F7FFFFF
          || (*(_DWORD *)(v7 + 76) & 0x7FFFFFFFu) > 0x7F7FFFFF
          || (*(_DWORD *)(v7 + 80) & 0x7FFFFFFFu) > 0x7F7FFFFF
          || (*(_DWORD *)(v7 + 84) & 0x7FFFFFFFu) > 0x7F7FFFFF
          || (*(_DWORD *)(v7 + 88) & 0x7FFFFFFFu) > 0x7F7FFFFF
          || (LODWORD(v90) & 0x7FFFFFFFu) > 0x7F7FFFFF)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](exception, "RawCameraException");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
      }
      return sub_1D5285200(v140);
    }
    if (a3 != 1050)
    {
      if (a3 != 1051)
        return result;
      sub_1D5285B08((int *)__s, a5);
      sub_1D5285164(v140, a2, (uint64_t)__s, 0);
      if (*a4 == 116)
      {
        v9 = 0;
        v10 = (void **)(v7 + 104);
        do
        {
          v11 = sub_1D52847F8(*a2);
          v12 = v11;
          v14 = *(char **)(v7 + 112);
          v13 = *(_QWORD *)(v7 + 120);
          if ((unint64_t)v14 >= v13)
          {
            v16 = (char *)*v10;
            v17 = (v14 - (_BYTE *)*v10) >> 2;
            v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62)
              sub_1D5282B8C();
            v19 = v13 - (_QWORD)v16;
            if (v19 >> 1 > v18)
              v18 = v19 >> 1;
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
              v20 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v20 = v18;
            if (v20)
            {
              v21 = (char *)sub_1D5282BA0(v7 + 120, v20);
              v16 = *(char **)(v7 + 104);
              v14 = *(char **)(v7 + 112);
            }
            else
            {
              v21 = 0;
            }
            v22 = &v21[4 * v17];
            *(_DWORD *)v22 = v12;
            v15 = v22 + 4;
            while (v14 != v16)
            {
              v23 = *((_DWORD *)v14 - 1);
              v14 -= 4;
              *((_DWORD *)v22 - 1) = v23;
              v22 -= 4;
            }
            *(_QWORD *)(v7 + 104) = v22;
            *(_QWORD *)(v7 + 112) = v15;
            *(_QWORD *)(v7 + 120) = &v21[4 * v20];
            if (v16)
              operator delete(v16);
          }
          else
          {
            *(_DWORD *)v14 = v11;
            v15 = v14 + 4;
          }
          *(_QWORD *)(v7 + 112) = v15;
          ++v9;
        }
        while (v9 != 5);
        v24 = 0;
        v25 = (void **)(v7 + 128);
        do
        {
          v26 = sub_1D52847F8(*a2);
          v27 = v26;
          v29 = *(char **)(v7 + 136);
          v28 = *(_QWORD *)(v7 + 144);
          if ((unint64_t)v29 >= v28)
          {
            v31 = (char *)*v25;
            v32 = (v29 - (_BYTE *)*v25) >> 2;
            v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 62)
              sub_1D5282B8C();
            v34 = v28 - (_QWORD)v31;
            if (v34 >> 1 > v33)
              v33 = v34 >> 1;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
              v35 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v35 = v33;
            if (v35)
            {
              v36 = (char *)sub_1D5282BA0(v7 + 144, v35);
              v31 = *(char **)(v7 + 128);
              v29 = *(char **)(v7 + 136);
            }
            else
            {
              v36 = 0;
            }
            v37 = &v36[4 * v32];
            *(_DWORD *)v37 = v27;
            v30 = v37 + 4;
            while (v29 != v31)
            {
              v38 = *((_DWORD *)v29 - 1);
              v29 -= 4;
              *((_DWORD *)v37 - 1) = v38;
              v37 -= 4;
            }
            *(_QWORD *)(v7 + 128) = v37;
            *(_QWORD *)(v7 + 136) = v30;
            *(_QWORD *)(v7 + 144) = &v36[4 * v35];
            if (v31)
              operator delete(v31);
          }
          else
          {
            *(_DWORD *)v29 = v26;
            v30 = v29 + 4;
          }
          *(_QWORD *)(v7 + 136) = v30;
          ++v24;
        }
        while (v24 != 5);
        v39 = 0;
        v40 = (void **)(v7 + 152);
        do
        {
          v41 = sub_1D52847F8(*a2);
          v42 = v41;
          v44 = *(char **)(v7 + 160);
          v43 = *(_QWORD *)(v7 + 168);
          if ((unint64_t)v44 >= v43)
          {
            v46 = (char *)*v40;
            v47 = (v44 - (_BYTE *)*v40) >> 2;
            v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 62)
              sub_1D5282B8C();
            v49 = v43 - (_QWORD)v46;
            if (v49 >> 1 > v48)
              v48 = v49 >> 1;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
              v50 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v50 = v48;
            if (v50)
            {
              v51 = (char *)sub_1D5282BA0(v7 + 168, v50);
              v46 = *(char **)(v7 + 152);
              v44 = *(char **)(v7 + 160);
            }
            else
            {
              v51 = 0;
            }
            v52 = &v51[4 * v47];
            *(_DWORD *)v52 = v42;
            v45 = v52 + 4;
            while (v44 != v46)
            {
              v53 = *((_DWORD *)v44 - 1);
              v44 -= 4;
              *((_DWORD *)v52 - 1) = v53;
              v52 -= 4;
            }
            *(_QWORD *)(v7 + 152) = v52;
            *(_QWORD *)(v7 + 160) = v45;
            *(_QWORD *)(v7 + 168) = &v51[4 * v50];
            if (v46)
              operator delete(v46);
          }
          else
          {
            *(_DWORD *)v44 = v41;
            v45 = v44 + 4;
          }
          *(_QWORD *)(v7 + 160) = v45;
          ++v39;
        }
        while (v39 != 5);
        v54 = 0;
        v55 = (void **)(v7 + 176);
        do
        {
          v56 = sub_1D52847F8(*a2);
          v57 = v56;
          v59 = *(char **)(v7 + 184);
          v58 = *(_QWORD *)(v7 + 192);
          if ((unint64_t)v59 >= v58)
          {
            v61 = (char *)*v55;
            v62 = (v59 - (_BYTE *)*v55) >> 2;
            v63 = v62 + 1;
            if ((unint64_t)(v62 + 1) >> 62)
              sub_1D5282B8C();
            v64 = v58 - (_QWORD)v61;
            if (v64 >> 1 > v63)
              v63 = v64 >> 1;
            if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
              v65 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v65 = v63;
            if (v65)
            {
              v66 = (char *)sub_1D5282BA0(v7 + 192, v65);
              v61 = *(char **)(v7 + 176);
              v59 = *(char **)(v7 + 184);
            }
            else
            {
              v66 = 0;
            }
            v67 = &v66[4 * v62];
            *(_DWORD *)v67 = v57;
            v60 = v67 + 4;
            while (v59 != v61)
            {
              v68 = *((_DWORD *)v59 - 1);
              v59 -= 4;
              *((_DWORD *)v67 - 1) = v68;
              v67 -= 4;
            }
            *(_QWORD *)(v7 + 176) = v67;
            *(_QWORD *)(v7 + 184) = v60;
            *(_QWORD *)(v7 + 192) = &v66[4 * v65];
            if (v61)
              operator delete(v61);
          }
          else
          {
            *(_DWORD *)v59 = v56;
            v60 = v59 + 4;
          }
          *(_QWORD *)(v7 + 184) = v60;
          ++v54;
        }
        while (v54 != 5);
        v69 = *a2;
        *(_DWORD *)__s = 32;
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v69 + 40))(v69, __s, 1);
        *(_BYTE *)(v7 + 200) = sub_1D52847F8(*a2) == 1;
      }
      return sub_1D5285200(v140);
    }
    sub_1D5285B08((int *)__s, a5);
    sub_1D5285164(v140, a2, (uint64_t)__s, 0);
    if (*a4 != 16)
      return sub_1D5285200(v140);
    v91 = sub_1D5284934(*a2);
    v92 = sub_1D5284934(*a2);
    v93 = sub_1D5284934(*a2);
    v94 = sub_1D5284934(*a2);
    if ((LODWORD(v91) & 0x7FFFFFFFu) > 0x7F7FFFFF
      || (LODWORD(v92) & 0x7FFFFFFFu) > 0x7F7FFFFF
      || (v95 = v94, (LODWORD(v93) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      || (LODWORD(v94) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    {
      v137 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v137, "RawCameraException");
      __cxa_throw(v137, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v97 = (char **)(v7 + 40);
    v96 = *(char **)(v7 + 40);
    v98 = (void **)(v7 + 24);
    v99 = *(char **)(v7 + 32);
    if (v99 >= v96)
    {
      v101 = (char *)*v98;
      v102 = (v99 - (_BYTE *)*v98) >> 2;
      v103 = v102 + 1;
      if ((unint64_t)(v102 + 1) >> 62)
        goto LABEL_200;
      v104 = v96 - v101;
      if (v104 >> 1 > v103)
        v103 = v104 >> 1;
      if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL)
        v105 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v105 = v103;
      if (v105)
      {
        v106 = (char *)sub_1D5282BA0(v7 + 40, v105);
        v101 = *(char **)(v7 + 24);
        v99 = *(char **)(v7 + 32);
      }
      else
      {
        v106 = 0;
      }
      v107 = &v106[4 * v102];
      v96 = &v106[4 * v105];
      *(float *)v107 = v91;
      v100 = v107 + 4;
      while (v99 != v101)
      {
        v108 = *((_DWORD *)v99 - 1);
        v99 -= 4;
        *((_DWORD *)v107 - 1) = v108;
        v107 -= 4;
      }
      *(_QWORD *)(v7 + 24) = v107;
      *(_QWORD *)(v7 + 32) = v100;
      *(_QWORD *)(v7 + 40) = v96;
      if (v101)
      {
        operator delete(v101);
        v96 = *v97;
      }
    }
    else
    {
      *(float *)v99 = v91;
      v100 = v99 + 4;
    }
    *(_QWORD *)(v7 + 32) = v100;
    if (v100 >= v96)
    {
      v110 = (char *)*v98;
      v111 = (v100 - (_BYTE *)*v98) >> 2;
      v112 = v111 + 1;
      if ((unint64_t)(v111 + 1) >> 62)
        goto LABEL_200;
      v113 = v96 - v110;
      if (v113 >> 1 > v112)
        v112 = v113 >> 1;
      if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL)
        v114 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v114 = v112;
      if (v114)
      {
        v115 = (char *)sub_1D5282BA0(v7 + 40, v114);
        v110 = *(char **)(v7 + 24);
        v100 = *(char **)(v7 + 32);
      }
      else
      {
        v115 = 0;
      }
      v116 = &v115[4 * v111];
      v96 = &v115[4 * v114];
      *(float *)v116 = v92;
      v109 = v116 + 4;
      while (v100 != v110)
      {
        v117 = *((_DWORD *)v100 - 1);
        v100 -= 4;
        *((_DWORD *)v116 - 1) = v117;
        v116 -= 4;
      }
      *(_QWORD *)(v7 + 24) = v116;
      *(_QWORD *)(v7 + 32) = v109;
      *(_QWORD *)(v7 + 40) = v96;
      if (v110)
      {
        operator delete(v110);
        v96 = *v97;
      }
    }
    else
    {
      *(float *)v100 = v92;
      v109 = v100 + 4;
    }
    *(_QWORD *)(v7 + 32) = v109;
    if (v109 >= v96)
    {
      v119 = (char *)*v98;
      v120 = (v109 - (_BYTE *)*v98) >> 2;
      v121 = v120 + 1;
      if ((unint64_t)(v120 + 1) >> 62)
        goto LABEL_200;
      v122 = v96 - v119;
      if (v122 >> 1 > v121)
        v121 = v122 >> 1;
      if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL)
        v123 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v123 = v121;
      if (v123)
      {
        v124 = (char *)sub_1D5282BA0(v7 + 40, v123);
        v119 = *(char **)(v7 + 24);
        v109 = *(char **)(v7 + 32);
      }
      else
      {
        v124 = 0;
      }
      v125 = &v124[4 * v120];
      v96 = &v124[4 * v123];
      *(float *)v125 = v93;
      v118 = v125 + 4;
      while (v109 != v119)
      {
        v126 = *((_DWORD *)v109 - 1);
        v109 -= 4;
        *((_DWORD *)v125 - 1) = v126;
        v125 -= 4;
      }
      *(_QWORD *)(v7 + 24) = v125;
      *(_QWORD *)(v7 + 32) = v118;
      *(_QWORD *)(v7 + 40) = v96;
      if (v119)
      {
        operator delete(v119);
        v96 = *v97;
      }
    }
    else
    {
      *(float *)v109 = v93;
      v118 = v109 + 4;
    }
    *(_QWORD *)(v7 + 32) = v118;
    if (v118 < v96)
    {
      *(float *)v118 = v95;
      v127 = v118 + 4;
LABEL_190:
      *(_QWORD *)(v7 + 32) = v127;
      return sub_1D5285200(v140);
    }
    v128 = (char *)*v98;
    v129 = (v118 - (_BYTE *)*v98) >> 2;
    v130 = v129 + 1;
    if (!((unint64_t)(v129 + 1) >> 62))
    {
      v131 = v96 - v128;
      if (v131 >> 1 > v130)
        v130 = v131 >> 1;
      if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL)
        v132 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v132 = v130;
      if (v132)
      {
        v133 = (char *)sub_1D5282BA0(v7 + 40, v132);
        v128 = *(char **)(v7 + 24);
        v118 = *(char **)(v7 + 32);
      }
      else
      {
        v133 = 0;
      }
      v134 = &v133[4 * v129];
      v135 = &v133[4 * v132];
      *(float *)v134 = v95;
      v127 = v134 + 4;
      while (v118 != v128)
      {
        v136 = *((_DWORD *)v118 - 1);
        v118 -= 4;
        *((_DWORD *)v134 - 1) = v136;
        v134 -= 4;
      }
      *(_QWORD *)(v7 + 24) = v134;
      *(_QWORD *)(v7 + 32) = v127;
      *(_QWORD *)(v7 + 40) = v135;
      if (v128)
        operator delete(v128);
      goto LABEL_190;
    }
LABEL_200:
    sub_1D5282B8C();
  }
  switch(a3)
  {
    case 1024:
      sub_1D5285B08((int *)__s, a5);
      sub_1D5285164(v140, a2, (uint64_t)__s, 0);
      v139 = 8;
      *(_DWORD *)__s = *a4;
      v70 = *sub_1D530F1B8(__s, &v139);
      if (v70)
      {
        for (i = 0; i != v70; ++i)
        {
          v72 = sub_1D528479C(*a2);
          v73 = sub_1D528479C(*a2);
          v74 = sub_1D528479C(*a2);
          sub_1D528479C(*a2);
          v75 = v72 | (unint64_t)(v73 << 32);
          v77 = *(_QWORD *)(v7 + 8);
          v76 = *(_QWORD *)(v7 + 16);
          if (v77 >= v76)
          {
            v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - *(_QWORD *)v7) >> 2);
            v80 = v79 + 1;
            if (v79 + 1 > 0x1555555555555555)
              sub_1D5282B8C();
            v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - *(_QWORD *)v7) >> 2);
            if (2 * v81 > v80)
              v80 = 2 * v81;
            if (v81 >= 0xAAAAAAAAAAAAAAALL)
              v82 = 0x1555555555555555;
            else
              v82 = v80;
            if (v82)
              v83 = (char *)sub_1D5337920(v7 + 16, v82);
            else
              v83 = 0;
            v84 = &v83[12 * v79];
            *(_DWORD *)v84 = v74;
            *(_QWORD *)(v84 + 4) = v75;
            v86 = *(_DWORD **)v7;
            v85 = *(_DWORD **)(v7 + 8);
            v87 = v84;
            if (v85 != *(_DWORD **)v7)
            {
              do
              {
                v88 = *(_QWORD *)(v85 - 3);
                v85 -= 3;
                v89 = v85[2];
                *(_QWORD *)(v87 - 12) = v88;
                v87 -= 12;
                *((_DWORD *)v87 + 2) = v89;
              }
              while (v85 != v86);
              v85 = *(_DWORD **)v7;
            }
            v78 = v84 + 12;
            *(_QWORD *)v7 = v87;
            *(_QWORD *)(v7 + 8) = v84 + 12;
            *(_QWORD *)(v7 + 16) = &v83[12 * v82];
            if (v85)
              operator delete(v85);
          }
          else
          {
            *(_DWORD *)v77 = v74;
            *(_QWORD *)(v77 + 4) = v75;
            v78 = (char *)(v77 + 12);
          }
          *(_QWORD *)(v7 + 8) = v78;
        }
      }
      return sub_1D5285200(v140);
    case 1026:
      if (!*a4)
        *(_DWORD *)(result + 232) = *a5;
      break;
    case 1031:
      sub_1D5285B08((int *)__s, a5);
      sub_1D5285164(v140, a2, (uint64_t)__s, 0);
      *(_QWORD *)__s = 0;
      v142 = 0;
      v143 = 0;
      if (*a4 <= 0x12u)
      {
        v8 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)*a2 + 32))(*a2, __s);
        if (*a4 == v8)
        {
          __s[v8] = 0;
          sub_1D528530C((std::string *)(v7 + 208), __s);
        }
      }
      return sub_1D5285200(v140);
    default:
      return result;
  }
  return result;
}

void sub_1D53C7CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1D5285200((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1D53C7DBC(uint64_t a1)
{
  return *(_BYTE *)(a1 + 48) == 0;
}

BOOL sub_1D53C7DCC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24) == 16;
}

BOOL sub_1D53C7DE0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104);
}

BOOL sub_1D53C7DF0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 232) < dword_1EFF32488 || *(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 104);
}

void sub_1D53C7E1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E999B050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53C7E30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E999B050;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53C7E64(uint64_t a1)
{
  return sub_1D53C7F1C(a1 + 24);
}

void sub_1D53C7E70()
{
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D53C7E88(_QWORD *a1)
{
  sub_1D53C7EAC(a1);
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D53C7EAC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &unk_1E999B0D0;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_1D53C7F1C(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(char *)(a1 + 231) < 0)
    operator delete(*(void **)(a1 + 208));
  sub_1D53C7EAC((_QWORD *)(a1 + 96));
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1D53C7FC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53C8028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D53C8224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53C82C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53C8330(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53C8428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D53C85B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D53C88A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1D53C8BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1D53C9028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1D53C92D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

id sub_1D53C9310(void *a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  v2 = (void *)objc_opt_class();
  objc_msgSend_description(v2, v3, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  NSLog(CFSTR("FIXME: outputImage of filter class %@ is unimplemented."), v7);

  objc_msgSend_inputKeys(a1, v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = *MEMORY[0x1E0C9E1F8];
  v17 = objc_msgSend_containsObject_(v12, v14, *MEMORY[0x1E0C9E1F8], v15, v16);

  if (v17)
  {
    objc_msgSend_valueForKey_(a1, v18, v13, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v21 = 0;
  }
  return v21;
}

void sub_1D53C93A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53C93BC(uint64_t a1@<X0>, double **a2@<X8>)
{
  double *v4;
  _QWORD *v5;
  void **p_lpsrc;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  float v11;
  float v12;
  double *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int16 v18;
  void *lpsrc;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (double *)operator new(0x18uLL);
  a2[1] = v4 + 3;
  a2[2] = v4 + 3;
  v4[2] = 1.0;
  *(_OWORD *)v4 = xmmword_1D544ED88;
  *a2 = v4;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&lpsrc, a1);
  if (lpsrc
    && (v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9975D70, 0)) != 0)
  {
    v21 = v5;
    v22 = v20;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = (void **)&v21;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v7 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v21)
  {
    sub_1D53C95E0(v21, &lpsrc);
    v10 = (std::__shared_weak_count *)lpsrc;
    if (*(float *)lpsrc != 0.0)
    {
      v11 = *((float *)lpsrc + 1);
      if (v11 != 0.0)
      {
        v12 = *((float *)lpsrc + 2);
        if (v12 != 0.0)
        {
          v13 = *a2;
          *v13 = (float)(v11 / *(float *)lpsrc);
          v13[1] = (float)(v11 / v11);
          v13[2] = (float)(v11 / v12);
LABEL_18:
          v20 = v10;
          operator delete(v10);
          goto LABEL_19;
        }
      }
    }
    sub_1D540E834();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      v18 = 0;
      _os_log_impl(&dword_1D527F000, v14, OS_LOG_TYPE_INFO, "Not applying LevelBalanceAdjustment as it would result in a divide by zero", (uint8_t *)&v18, 2u);
    }

    v10 = (std::__shared_weak_count *)lpsrc;
    if (lpsrc)
      goto LABEL_18;
  }
LABEL_19:
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1D53C9598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  if (__p)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a13);
  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53C95E0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (*((_BYTE *)result + 1400))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return sub_1D5287D44(a2, (const void *)result[172], result[173], (uint64_t)(result[173] - result[172]) >> 2);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

void sub_1D53C9614(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  void **p_lpsrc;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  float v14;
  float64x2_t *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int16 v20[8];
  void *lpsrc;
  std::__shared_weak_count *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  void *v25;
  int v26;
  int v27;
  void *v28[2];
  char v29;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2192))(a1);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 2200))(v28, a1);
  v25 = &unk_1E99851F0;
  v26 = 0;
  v27 = v4;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&lpsrc, a1);
  (*(void (**)(void *, void **, void **, uint64_t))(*(_QWORD *)lpsrc + 600))(lpsrc, v28, &v25, 3);
  v5 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&lpsrc, a1);
  if (lpsrc
    && (v8 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9975D70, 0)) != 0)
  {
    v23 = v8;
    v24 = v22;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = (void **)&v23;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v10 = v22;
  if (v22)
  {
    v11 = (unint64_t *)&v22->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v23 && *(_QWORD *)(a2 + 8) - *(_QWORD *)a2 >= 0x11uLL)
  {
    sub_1D53C95E0(v23, &lpsrc);
    v13 = (std::__shared_weak_count *)lpsrc;
    if (*(float *)lpsrc != 0.0 && *((float *)lpsrc + 1) != 0.0)
    {
      v14 = *((float *)lpsrc + 2);
      if (v14 != 0.0)
      {
        v15 = *(float64x2_t **)a2;
        *v15 = vdivq_f64(*(float64x2_t *)*(_QWORD *)a2, vcvtq_f64_f32(*(float32x2_t *)lpsrc));
        v15[1].f64[0] = v15[1].f64[0] / v14;
LABEL_24:
        v22 = v13;
        operator delete(v13);
        goto LABEL_25;
      }
    }
    sub_1D540E834();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      v20[0] = 0;
      _os_log_impl(&dword_1D527F000, v16, OS_LOG_TYPE_INFO, "Not applying LevelBalanceAdjustment as it would result in a divide by zero", (uint8_t *)v20, 2u);
    }

    v13 = (std::__shared_weak_count *)lpsrc;
    if (lpsrc)
      goto LABEL_24;
  }
LABEL_25:
  v17 = v24;
  if (v24)
  {
    v18 = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v29 < 0)
    operator delete(v28[0]);
}

void sub_1D53C9880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  void *v17;

  if (__p)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a14);
  v17 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    operator delete(v17);
  }
  if (*(char *)(v15 - 33) < 0)
    operator delete(*(void **)(v15 - 56));
  _Unwind_Resume(a1);
}

void sub_1D53C98EC(uint64_t a1)
{
  uint64_t v2;
  char v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  char v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1) & 1) != 0)
  {
LABEL_2:
    sub_1D5425BA8(a1);
    return;
  }
  v16 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v14, a1);
  v2 = v14;
  sub_1D52850A0(__p, "IFD0:DNGPrivate:SR2Private:SR2SubIFD:WhiteLevel");
  v3 = (*(uint64_t (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v2 + 240))(v2, __p, &v16);
  if (v13 < 0)
    operator delete(__p[0]);
  v4 = v15;
  if (!v15)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if ((v3 & 1) != 0)
      goto LABEL_20;
  }
  else
  {
LABEL_9:
    if ((v3 & 1) != 0)
      goto LABEL_20;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v14, a1);
  v7 = v14;
  sub_1D52850A0(__p, "IFD0:SR2Private:SR2SubIFD:0x7306");
  v8 = (*(uint64_t (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v7 + 240))(v7, __p, &v16);
  if (v13 < 0)
    operator delete(__p[0]);
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if ((v8 & 1) == 0)
    goto LABEL_2;
LABEL_20:
  (*(double (**)(uint64_t))(*(_QWORD *)a1 + 848))(a1);
}

void sub_1D53C9A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1D53C9AB4(uint64_t a1@<X0>, float64x2_t **a2@<X8>)
{
  uint64_t v4;
  char v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  float64x2_t *v9;
  float64x2_t v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1) & 1) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v13, a1);
    v4 = v13;
    sub_1D52850A0(__p, "IFD0:DNGPrivate:SR2Private:SR2SubIFD:BlackLevels");
    v5 = (*(uint64_t (**)(uint64_t, void **, float64x2_t **, _QWORD))(*(_QWORD *)v4 + 248))(v4, __p, a2, 0);
    if (v12 < 0)
      operator delete(__p[0]);
    v6 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = *a2;
    if ((v5 & 1) != 0)
    {
      v10 = vaddq_f64(v9[1], v9[1]);
      *v9 = vaddq_f64(*v9, *v9);
      v9[1] = v10;
      return;
    }
    if (v9)
    {
      a2[1] = v9;
      operator delete(v9);
    }
  }
  sub_1D5422158(a1, a2);
}

void sub_1D53C9BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  void *v18;

  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  v18 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

void sub_1D53C9C04(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void (**v4)(_QWORD);
  int v5;
  char *v6;
  uint64_t v7;
  _WORD *v8;
  int v9;
  int v10;
  int i;
  void (*v12)(void);
  char *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  void *exception;
  int v17;
  _QWORD v18[5];
  uint8_t buf[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CPanasonic14BitUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_1D53C9F80;
  v18[3] = &unk_1E996F870;
  v18[4] = a1;
  v4 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v18);
  v5 = *(_DWORD *)(a1 + 44);
  v17 = *(_DWORD *)(a1 + 48);
  v6 = (char *)operator new[]();
  bzero(v6, 0x4000uLL);
  v7 = sub_1D530B618(a1);
  if ((954437177 * v5 + 238609294) > 0x1C71C71C)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v17 >= 1)
  {
    v8 = (_WORD *)v7;
    v9 = 0;
    v10 = 0;
    do
    {
      if (v5 >= 1)
      {
        for (i = 0; i < v5; i += 9)
        {
          if (!v10)
          {
            v12 = *(void (**)(void))(**(_QWORD **)(a1 + 24) + 32);
            if (*(_BYTE *)(a1 + 186))
            {
              v12();
              v13 = v6;
              v14 = 8200;
            }
            else
            {
              v12();
              v13 = v6 + 0x2000;
              v14 = 0x2000;
            }
            (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v13, v14);
          }
          v15 = (unsigned __int8 *)&v6[v10];
          v8[8] = v15[14] | ((v15[15] & 0x3F) << 8);
          v8[7] = (v15[12] >> 2) | (v15[13] << 6);
          v8[6] = (16 * v15[11]) & 0xCFFF | ((v15[12] & 3) << 12) | (v15[10] >> 4);
          v8[5] = (4 * v15[9]) & 0xC3FF | ((v15[10] & 0xF) << 10) | (v15[8] >> 6);
          v8[4] = v15[7] | ((v15[8] & 0x3F) << 8);
          v8[3] = (v15[5] >> 2) | (v15[6] << 6);
          v8[2] = (16 * v15[4]) & 0xCFFF | ((v15[5] & 3) << 12) | (v15[3] >> 4);
          v8[1] = (4 * v15[2]) & 0xC3FF | ((v15[3] & 0xF) << 10) | (v15[1] >> 6);
          *v8 = *v15 | ((v15[1] & 0x3F) << 8);
          v8 += 9;
          if (v10 <= 16367)
            v10 += 16;
          else
            v10 = 0;
        }
      }
      ++v9;
    }
    while (v9 != v17);
  }
  MEMORY[0x1D8271AC4](v6, 0x1000C8077774924);
  v4[2](v4);

}

void sub_1D53C9F1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53C9F80(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CPanasonic14BitUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D53CA0EC(void *a1)
{
  void *v1;
  NSObject *v3;

  __cxa_begin_catch(a1);
  sub_1D540E834();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    sub_1D5444778(v3);

  __cxa_end_catch();
  JUMPOUT(0x1D53CA094);
}

void sub_1D53CA138(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D53CA14C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWLinearSpacePlaceholder", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D53CA2B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53CA38C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53CAF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42,void *a43,void *a44,void *a45,void *a46,void *a47,void *a48)
{
  void *v48;
  void *v49;
  void *v50;

  _Unwind_Resume(a1);
}

void sub_1D53CCA08()
{
  _Unwind_Exception *v0;

  __cxa_end_catch();
  _Unwind_Resume(v0);
}

void sub_1D53CCA14(void *a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
    sub_1D5281424(a1);
  _Unwind_Resume(v2);
}

void sub_1D53CCA30(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWAdjustColorTRC", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D53CCAB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t i;
  double (**v37)(double);
  _QWORD v44[2];

  v44[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 48);
  if (v7 < 5)
  {
    v26 = (char *)v44 - ((8 * v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    v27 = *(_QWORD *)(a1 + 48);
    v28 = (char *)v44 - ((8 * v27 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v27)
    {
      v29 = 0;
      do
      {
        objc_msgSend_valueAtIndex_(*(void **)(a1 + 32), a2, v29, a4, a5);
        *(_QWORD *)&v26[8 * v29] = v30;
        objc_msgSend_valueAtIndex_(*(void **)(a1 + 40), v31, v29, v32, v33);
        *(_QWORD *)&v28[8 * v29++] = v34;
        v35 = *(_QWORD *)(a1 + 48);
      }
      while (v29 < v35);
    }
    else
    {
      v35 = 0;
    }
    objc_msgSend_curveWithCount_xvalues_yvalues_(Curve, a2, v35, (uint64_t)v26, (uint64_t)v28);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = objc_retainAutorelease(*(id *)(a1 + 32));
    v13 = objc_msgSend__values(v8, v9, v10, v11, v12);
    v14 = objc_retainAutorelease(*(id *)(a1 + 40));
    v19 = objc_msgSend__values(v14, v15, v16, v17, v18);
    objc_msgSend_curveWithCount_xvalues_yvalues_(Curve, v20, *(unsigned int *)(a1 + 48), v13, v19);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
  }
  for (i = 0; i != 256; ++i)
  {
    objc_msgSend_function(v25, v21, v22, v23, v24);
    v37 = (double (**)(double))objc_claimAutoreleasedReturnValue();
    _D8 = v37[2]((double)i / 255.0);

    __asm { FCVT            H0, D8 }
    *(_WORD *)&a2[2 * i] = _H0;
  }

}

void sub_1D53CCC50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double sub_1D53CCC74(uint64_t a1, int a2)
{
  double result;

  if (a2)
    return *(double *)(a1 + 32);
  return result;
}

void sub_1D53CD034(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D53CD048(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWConvertSRGBtoLinear", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D53CD2C4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D53CD2D8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWConvertLinearToSRGB", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D53CD8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1D53CE16C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D53CE178(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1D5281424(a1);
  _Unwind_Resume(a1);
}

void sub_1D53CE194(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWHueMagnet", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D53CEAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  _Unwind_Resume(a1);
}

void sub_1D53CEDFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1D53CF044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1D53CF1F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D53CF344(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1D53CF4E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

double sub_1D53CF518(double a1)
{
  return a1 * 2.0 + 0.5;
}

void sub_1D53CF750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

double sub_1D53CF790(double a1)
{
  return a1 * 2.0 + 0.5;
}

void sub_1D53CF98C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

double sub_1D53CF9CC(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -1.0, -1.0);
  return result;
}

void sub_1D53CFAC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D53CFC98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

double sub_1D53CFCD4(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a2, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  return result;
}

void sub_1D53CFEC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

double sub_1D53CFF08(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a2, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  return result;
}

void sub_1D53D00B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

double sub_1D53D00F4(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a2, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  return result;
}

void sub_1D53D02B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

double sub_1D53D02F0(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a2, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  return result;
}

void sub_1D53D0468(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

double sub_1D53D04A8(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -4.0, -4.0);
  return result;
}

void sub_1D53D0658(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

double sub_1D53D0694(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a2, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  return result;
}

void sub_1D53D0888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

double sub_1D53D08D0(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a2, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  return result;
}

void sub_1D53D0A8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

double sub_1D53D0AC8(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a2, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  return result;
}

void sub_1D53D0CB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

double sub_1D53D0CFC(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a2, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  return result;
}

void sub_1D53D0EAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

double sub_1D53D0EF8(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -4.0, -4.0);
  return result;
}

void sub_1D53D0F88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53D1078(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1D53D1094(double a1, double a2, double a3, double a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  double result;
  CGRect v13;

  v4 = a1;
  v5 = (float)(v4 * 0.5) + 0.5;
  v6 = a1 + a3;
  v7 = (float)(v6 * 0.5) + 0.5;
  v8 = a2;
  v9 = (float)(v8 * 0.5) + 0.5;
  v10 = a2 + a4;
  v11 = (float)(v10 * 0.5) + 0.5;
  v13.origin.x = v5;
  v13.origin.y = v9;
  v13.size.width = (float)(v7 - v5);
  v13.size.height = (float)(v11 - v9);
  *(_QWORD *)&result = (unint64_t)CGRectInset(v13, -1.0, -1.0);
  return result;
}

void sub_1D53D1238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

double sub_1D53D1274(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -2.0, -2.0);
  return result;
}

void sub_1D53D142C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

double sub_1D53D1460(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1D53D1468(a6, a1, a2, a3, a4);
}

double sub_1D53D1468(int a1, double result, double a3, double a4, double a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  CGRect v13;

  if (a1 == 1)
  {
    v5 = result;
    v6 = (float)(v5 * 0.5) + 0.5;
    v7 = result + a4;
    v8 = (float)(v7 * 0.5) + 0.5;
    v9 = a3;
    v10 = (float)(v9 * 0.5) + 0.5;
    v11 = a3 + a5;
    v12 = (float)(v11 * 0.5) + 0.5;
    v13.origin.x = v6;
    v13.origin.y = v10;
    v13.size.width = (float)(v8 - v6);
    v13.size.height = (float)(v12 - v10);
    *(_QWORD *)&result = (unint64_t)CGRectInset(v13, -1.0, -1.0);
  }
  return result;
}

void sub_1D53D15A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1D53D15C4(double a1, double a2, double a3, double a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  double result;
  CGRect v13;

  v4 = a1;
  v5 = (float)(v4 * 2.0) + 0.5;
  v6 = a1 + a3;
  v7 = (float)(v6 * 2.0) + 0.5;
  v8 = a2;
  v9 = (float)(v8 * 2.0) + 0.5;
  v10 = a2 + a4;
  v11 = (float)(v10 * 2.0) + 0.5;
  v13.origin.x = v5;
  v13.origin.y = v9;
  v13.size.width = (float)(v7 - v5);
  v13.size.height = (float)(v11 - v9);
  *(_QWORD *)&result = (unint64_t)CGRectInset(v13, -2.0, -2.0);
  return result;
}

void sub_1D53D17FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

double sub_1D53D1850(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -2.0, -2.0);
  return result;
}

void sub_1D53D19B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

double sub_1D53D19EC(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

void sub_1D53D1A94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1D53D1AB0(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

void sub_1D53D1C94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

double sub_1D53D1CE0(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (!a6)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -2.0, -2.0);
  return result;
}

void sub_1D53D1EF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

double sub_1D53D1F34(uint64_t a1, int a2, double result, double a4, double a5, double a6)
{
  if (!a2)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, (float)-*(float *)(a1 + 32), (float)-*(float *)(a1 + 32));
  return result;
}

void sub_1D53D2154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

double sub_1D53D2194(uint64_t a1, int a2, double result, double a4, double a5, double a6)
{
  if (!a2)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, (float)-*(float *)(a1 + 32), (float)-*(float *)(a1 + 32));
  return result;
}

void sub_1D53D2400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

double sub_1D53D244C(uint64_t a1, int a2, double result, double a4, double a5, double a6)
{
  if (!a2)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  return result;
}

void sub_1D53D26C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

double sub_1D53D2710(uint64_t a1, int a2, double result, double a4, double a5, double a6)
{
  if (!a2)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, (float)(*(float *)(a1 + 32) * -2.0), (float)(*(float *)(a1 + 32) * -2.0));
  return result;
}

void sub_1D53D28B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

double sub_1D53D28F8(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -1.0, -1.0);
  return result;
}

void sub_1D53D2AC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

double sub_1D53D2B24(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -1.0, -1.0);
  return result;
}

void sub_1D53D2D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

double sub_1D53D2DBC(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1D53D1468(a6, a1, a2, a3, a4);
}

void sub_1D53D2FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

double sub_1D53D3070(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1D53D1468(a6, a1, a2, a3, a4);
}

void sub_1D53D325C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

double sub_1D53D32C4(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1D53D1468(a6, a1, a2, a3, a4);
}

void sub_1D53D34CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

double sub_1D53D353C(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1D53D1468(a6, a1, a2, a3, a4);
}

void sub_1D53D371C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

double sub_1D53D375C(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1D53D3764(a6, a1, a2, a3, a4);
}

double sub_1D53D3764(int a1, double result, double a3, double a4, double a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  CGRect v13;

  if (!a1)
  {
    v5 = result;
    v6 = (float)(v5 * 0.5) + 0.5;
    v7 = result + a4;
    v8 = (float)(v7 * 0.5) + 0.5;
    v9 = a3;
    v10 = (float)(v9 * 0.5) + 0.5;
    v11 = a3 + a5;
    v12 = (float)(v11 * 0.5) + 0.5;
    v13.origin.x = v6;
    v13.origin.y = v10;
    v13.size.width = (float)(v8 - v6);
    v13.size.height = (float)(v12 - v10);
    *(_QWORD *)&result = (unint64_t)CGRectInset(v13, -1.0, -1.0);
  }
  return result;
}

void sub_1D53D3940(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1D53D3B18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1D53D3D3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

double sub_1D53D3D7C(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1D53D3764(a6, a1, a2, a3, a4);
}

void sub_1D53D3E20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1D53D3E3C(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -1.0, -1.0);
  return result;
}

void sub_1D53D4000(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

double sub_1D53D4048(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -2.0, -2.0);
  return result;
}

void sub_1D53D42E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

double sub_1D53D4330(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1D53D3764(a6, a1, a2, a3, a4);
}

void sub_1D53D44FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D53D478C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

double sub_1D53D47DC(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1D53D1468(a6, a1, a2, a3, a4);
}

void sub_1D53D4A78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

double sub_1D53D4AC0(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1D53D3764(a6, a1, a2, a3, a4);
}

void sub_1D53D4C80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D53D4D44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53D4DFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1D53D4E18(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

void sub_1D53D4F74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

double sub_1D53D4FB0(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -4.0, -4.0);
  return result;
}

void sub_1D53D5164(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

double sub_1D53D5198(double a1, double a2, double a3, double a4, uint64_t a5, int a6)
{
  return sub_1D53D1468(a6, a1, a2, a3, a4);
}

void sub_1D53D52EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D53D5478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D53D561C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D53D57F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1D53D597C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D53D5B1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D53D5D38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D53D5ED0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D53D60E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D53D639C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1D53D6578(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D53D6704(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D53D6A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1D53D6D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1D53D741C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D53DBACC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D53DBAE0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWReduceNoise", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

id sub_1D53DBB64(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  id v11;
  id v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  void *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  void *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  CGAffineTransform v76;
  _QWORD v77[5];
  _QWORD v78[6];

  v78[5] = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a2;
  v77[0] = CFSTR("inputRVector");
  v13 = (void *)MEMORY[0x1E0C9DDF8];
  objc_msgSend_X(v12, v14, v15, v16, v17);
  objc_msgSend_vectorWithX_Y_Z_W_(v13, v18, v19, v20, v21, 0.0, 0.0, 0.0, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v78[0] = v23;
  v77[1] = CFSTR("inputGVector");
  v24 = (void *)MEMORY[0x1E0C9DDF8];
  objc_msgSend_Y(v12, v25, v26, v27, v28);
  objc_msgSend_vectorWithX_Y_Z_W_(v24, v29, v30, v31, v32, 0.0, 0.0, 0.0, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v78[1] = v34;
  v77[2] = CFSTR("inputBVector");
  v35 = (void *)MEMORY[0x1E0C9DDF8];
  objc_msgSend_Z(v12, v36, v37, v38, v39);
  objc_msgSend_vectorWithX_Y_Z_W_(v35, v40, v41, v42, v43, 0.0, 0.0, 0.0, v44);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v78[2] = v45;
  v77[3] = CFSTR("inputAVector");
  objc_msgSend_vectorWithX_Y_Z_W_(MEMORY[0x1E0C9DDF8], v46, v47, v48, v49, 0.0, 0.0, 0.0, 0.0);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v78[3] = v50;
  v77[4] = CFSTR("inputBiasVector");
  objc_msgSend_vectorWithX_Y_Z_W_(MEMORY[0x1E0C9DDF8], v51, v52, v53, v54, 0.0, 0.0, 0.0, 1.0);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v78[4] = v55;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v56, (uint64_t)v78, (uint64_t)v77, 5);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_imageByApplyingFilter_withInputParameters_(v11, v58, (uint64_t)CFSTR("CIColorMatrix"), (uint64_t)v57, v59);
  v60 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_imageByCroppingToRect_(v60, v61, v62, v63, v64, a3, a4, a5, a6);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend__imageBySamplingNearest(v65, v66, v67, v68, v69);
  v70 = (void *)objc_claimAutoreleasedReturnValue();

  CGAffineTransformMakeScale(&v76, 2.0, 2.0);
  objc_msgSend_imageByApplyingTransform_(v70, v71, (uint64_t)&v76, v72, v73);
  v74 = (void *)objc_claimAutoreleasedReturnValue();

  return v74;
}

void sub_1D53DBDD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D53DBF30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53DBFB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53DE294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,_Unwind_Exception *exception_object,void *a42,void *a43,void *a44)
{
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;

  _Unwind_Resume(a1);
}

double sub_1D53DE75C(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -1.0, -1.0);
  return result;
}

double sub_1D53DE768(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -4.0, -4.0);
  return result;
}

double sub_1D53DE778(double a1, double a2, double a3, double a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  double result;
  CGRect v13;

  v4 = floor(a1);
  v5 = (float)(v4 * 2.0) + 0.5;
  v6 = floor(a1 + a3);
  v7 = (float)(v6 * 2.0) + 0.5;
  v8 = floor(a2);
  v9 = (float)(v8 * 2.0) + 0.5;
  v10 = floor(a2 + a4);
  v11 = (float)(v10 * 2.0) + 0.5;
  v13.origin.x = v5;
  v13.origin.y = v9;
  v13.size.width = (float)(v7 - v5);
  v13.size.height = (float)(v11 - v9);
  *(_QWORD *)&result = (unint64_t)CGRectInset(v13, -2.0, -2.0);
  return result;
}

double sub_1D53DE7DC(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -2.0, -2.0);
  return result;
}

double sub_1D53DE7E8(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -6.0, -6.0);
  return result;
}

double sub_1D53DE7F4(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -6.0, -6.0);
  return result;
}

double sub_1D53DE800(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -14.0, -14.0);
  return result;
}

double sub_1D53DE80C(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -28.0, -28.0);
  return result;
}

double sub_1D53DE818(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -28.0, -28.0);
  return result;
}

double sub_1D53DE824(double a1, double a2, double a3, double a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  double result;
  CGRect v13;

  v4 = floor(a1 * 0.5);
  v5 = v4 + 0.5;
  v6 = floor((a1 + a3) * 0.5);
  v7 = v6 + 0.5;
  v8 = floor(a2 * 0.5);
  v9 = v8 + 0.5;
  v10 = floor((a2 + a4) * 0.5);
  v11 = v10 + 0.5;
  v13.origin.x = v5;
  v13.origin.y = v9;
  v13.size.width = (float)(v7 - v5);
  v13.size.height = (float)(v11 - v9);
  *(_QWORD *)&result = (unint64_t)CGRectInset(v13, -1.0, -1.0);
  return result;
}

void sub_1D53DEA2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53DEB94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D53EADB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,_Unwind_Exception *exception_objecta,void *a49,void *a50,void *a51,void *a52,void *a53,void *a54,void *a55,void *a56,void *a57,uint64_t a58,void *a59,void *a60,void *a61,void *a62,void *a63)
{
  void *a64;
  void *a67;
  void *a68;
  void *a69;
  void *a70;
  void *a71;
  void *a72;
  void *v72;
  unint64_t v73;
  void *v74;
  unint64_t v75;
  void *v76;

  STACK[0x320] = v75;
  STACK[0x228] = v73;
  STACK[0x2E0] = STACK[0x318];

  v76 = (void *)STACK[0x320];
  _Unwind_Resume(a1);
}

float sub_1D53EC904(float *a1, float *a2, float a3)
{
  uint64_t v4;
  uint64_t i;
  float v6;

  if (*a1 > a3)
    return *a2;
  v4 = 0;
  for (i = 0; ; i += 0x100000000)
  {
    v6 = a1[v4 + 1];
    if (v6 > a3)
      break;
    if (++v4 == 8)
      return a2[8];
  }
  return *(float *)((char *)a2 + (i >> 30))
       + (float)((float)((float)(a3 - *(float *)((char *)a1 + (i >> 30)))
                       / (float)(v6 - *(float *)((char *)a1 + (i >> 30))))
               * (float)(a2[v4 + 1] - *(float *)((char *)a2 + (i >> 30))));
}

double sub_1D53EC978(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1D53EC984(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -2.0, -2.0);
  return result;
}

float64_t sub_1D53EC994(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (a4 == 1)
    a1.f64[0] = sub_1D53EC9B0(a1, a2);
  return a1.f64[0];
}

float64_t sub_1D53EC9B0(float64x2_t a1, float64_t a2)
{
  a1.f64[1] = a2;
  __asm
  {
    FMOV            V1.2D, #0.5
    FMOV            V6.2S, #-1.0
  }
  *(_QWORD *)&a1.f64[0] = *(_OWORD *)&vcvtq_f64_f32(vadd_f32(vadd_f32(vcvt_f32_f64(vrndmq_f64(vmulq_f64(a1, _Q1))), (float32x2_t)0x3F0000003F000000), _D6));
  return a1.f64[0];
}

float64_t sub_1D53ECA10(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (a4 == 1)
    a1.f64[0] = sub_1D53EC9B0(a1, a2);
  return a1.f64[0];
}

float64_t sub_1D53ECA30(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (a4 == 1)
    a1.f64[0] = sub_1D53EC9B0(a1, a2);
  return a1.f64[0];
}

float64_t sub_1D53ECA50(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (a4 == 1)
    a1.f64[0] = sub_1D53EC9B0(a1, a2);
  return a1.f64[0];
}

double sub_1D53ECA6C(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1D53ECA78(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1D53ECA84(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -8.0, -8.0);
  return result;
}

double sub_1D53ECA90(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -1.0, -1.0);
  return result;
}

float64_t sub_1D53ECAB4(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (!a4)
    a1.f64[0] = sub_1D53EC9B0(a1, a2);
  return a1.f64[0];
}

float64_t sub_1D53ECAD0(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (!a4)
    a1.f64[0] = sub_1D53EC9B0(a1, a2);
  return a1.f64[0];
}

double sub_1D53ECAEC(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1D53ECAF8(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1D53ECB04(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -8.0, -8.0);
  return result;
}

double sub_1D53ECB10(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -1.0, -1.0);
  return result;
}

double sub_1D53ECB34(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -2.0, -2.0);
  return result;
}

double sub_1D53ECB58(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -4.0, -4.0);
  return result;
}

double sub_1D53ECB7C(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -8.0, -8.0);
  return result;
}

float64_t sub_1D53ECBA0(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (!a4)
    a1.f64[0] = sub_1D53EC9B0(a1, a2);
  return a1.f64[0];
}

float64_t sub_1D53ECBBC(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (!a4)
    a1.f64[0] = sub_1D53EC9B0(a1, a2);
  return a1.f64[0];
}

double sub_1D53ECBD8(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1D53ECBE4(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1D53ECBF0(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -8.0, -8.0);
  return result;
}

double sub_1D53ECBFC(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -1.0, -1.0);
  return result;
}

double sub_1D53ECC20(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -2.0, -2.0);
  return result;
}

double sub_1D53ECC44(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -4.0, -4.0);
  return result;
}

double sub_1D53ECC68(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -8.0, -8.0);
  return result;
}

double sub_1D53ECC8C(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -16.0, -16.0);
  return result;
}

float64_t sub_1D53ECCB0(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (!a4)
    a1.f64[0] = sub_1D53EC9B0(a1, a2);
  return a1.f64[0];
}

float64_t sub_1D53ECCCC(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (!a4)
    a1.f64[0] = sub_1D53EC9B0(a1, a2);
  return a1.f64[0];
}

double sub_1D53ECCE8(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1D53ECCF4(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -8.0, -8.0);
  return result;
}

double sub_1D53ECD00(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -1.0, -1.0);
  return result;
}

double sub_1D53ECD24(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -2.0, -2.0);
  return result;
}

double sub_1D53ECD48(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -4.0, -4.0);
  return result;
}

double sub_1D53ECD6C(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -8.0, -8.0);
  return result;
}

double sub_1D53ECD90(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -16.0, -16.0);
  return result;
}

double sub_1D53ECDB4(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -2.0, -2.0);
  return result;
}

float64_t sub_1D53ECDC0(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (!a4)
    a1.f64[0] = sub_1D53EC9B0(a1, a2);
  return a1.f64[0];
}

double sub_1D53ECDDC(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -2.0, -2.0);
  return result;
}

double sub_1D53ECDE8(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -1.0, -1.0);
  return result;
}

float64_t sub_1D53ECDF4(float64x2_t a1, float64_t a2, uint64_t a3, int a4)
{
  if (!a4)
    a1.f64[0] = sub_1D53EC9B0(a1, a2);
  return a1.f64[0];
}

void sub_1D53ED0BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53ED1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53ED42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1D53ED7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  void *v24;
  void *v25;
  void *v26;

  if (a2)
  {

    if (__p)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1D53ED788);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D53EDADC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D53EDAF0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWTemperatureAdjust", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D53EDC74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53EDF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1D53EE178(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D53EE3F4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D53EE408()
{
  JUMPOUT(0x1D53EE38CLL);
}

void sub_1D53EE410()
{
  JUMPOUT(0x1D53EE39CLL);
}

void sub_1D53EE418(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWAdjustExposureAndBias", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D53EE864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1D53EEE18(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D53EEE24(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1D5281424(a1);
  _Unwind_Resume(a1);
}

void sub_1D53EEE40(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWVignetteRadial", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D53EF000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53EF0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53EF998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42,void *a43,void *a44,void *a45,void *a46)
{
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;

  _Unwind_Resume(a1);
}

void sub_1D53EFDCC(void *a1)
{
  _OWORD *v1;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  sub_1D5339168(v1);
  JUMPOUT(0x1D53EFDA4);
}

void sub_1D53EFE14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53EFEFC(_Unwind_Exception *exception_object, int a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);
  if (a2)
  {

    sub_1D532D710((uint64_t *)va);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1D53EFEC4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D53F0594(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (a2)
  {
    if (__p)
      operator delete(__p);
    if (a37)
      operator delete(a37);
    sub_1D532D710(&a42);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1D53F054CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D53F076C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1D532D710((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D53F111C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D53F1128(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1D5281424(a1);
  _Unwind_Resume(a1);
}

void sub_1D53F1144(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWConvert", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D53F161C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;

  if (__p)
    operator delete(__p);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  sub_1D5367248(v12);
  JUMPOUT(0x1D53F15FCLL);
}

void sub_1D53F168C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1D532D710((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53F1A68(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_1E997DCA0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  sub_1D5338BF8((_QWORD *)(a1 + 16), a2 + 16);
  sub_1D5338BF8((_QWORD *)(a1 + 48), a2 + 48);
  sub_1D5338BF8((_QWORD *)(a1 + 80), a2 + 80);
  sub_1D5338BF8((_QWORD *)(a1 + 112), a2 + 112);
  sub_1D5338BF8((_QWORD *)(a1 + 144), a2 + 144);
  sub_1D5338BF8((_QWORD *)(a1 + 176), a2 + 176);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  sub_1D5338BF8((_QWORD *)(a1 + 216), a2 + 216);
  sub_1D5338BF8((_QWORD *)(a1 + 248), a2 + 248);
  return a1;
}

void sub_1D53F1B0C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = (void *)v1[28];
  if (v3)
  {
    v1[29] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[23];
  if (v4)
  {
    v1[24] = v4;
    operator delete(v4);
  }
  v5 = (void *)v1[19];
  if (v5)
  {
    v1[20] = v5;
    operator delete(v5);
  }
  v6 = (void *)v1[15];
  if (v6)
  {
    v1[16] = v6;
    operator delete(v6);
  }
  v7 = (void *)v1[11];
  if (v7)
  {
    v1[12] = v7;
    operator delete(v7);
  }
  v8 = (void *)v1[7];
  if (v8)
  {
    v1[8] = v8;
    operator delete(v8);
  }
  v9 = (void *)v1[3];
  if (v9)
  {
    v1[4] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D53F1C20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53F1F1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53F2144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  objc_sync_exit(v11);
  _Unwind_Resume(a1);
}

void sub_1D53F2208(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1D53F22B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1D53F232C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53F23AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53F2434(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D53F24C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53F253C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53F25B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53F2634(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53F26B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53F272C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53F27A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53F2824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53F28A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53F291C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53F2998(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53F2A14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53F2A90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53F2B0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53F3AD0()
{
  _Unwind_Exception *v0;

  __cxa_end_catch();
  _Unwind_Resume(v0);
}

void sub_1D53F3ADC(void *a1, int a2)
{
  _Unwind_Exception *v2;

  if (a2)
    sub_1D5281424(a1);
  _Unwind_Resume(v2);
}

void sub_1D53F3AF8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWDefringeFilter", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

double sub_1D53F3B80(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1D53F3B8C(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -3.0, -3.0);
  return result;
}

double sub_1D53F3B98(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -4.0, -4.0);
  return result;
}

double sub_1D53F3BA4(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -1.0, -1.0);
  return result;
}

double sub_1D53F3BB0(double a1, double a2, double a3, double a4)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a1, -1.0, -1.0);
  return result;
}

double sub_1D53F3BC0(uint64_t a1, double a2, double a3, double a4, double a5)
{
  double result;

  *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&a2, *(CGFloat *)(a1 + 32), *(CGFloat *)(a1 + 32));
  return result;
}

double sub_1D53F3BCC(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -5.0, -5.0);
  return result;
}

double sub_1D53F3BF0(uint64_t a1, int a2, double result, double a4, double a5, double a6)
{
  if (a2 < 1)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, (float)-*(float *)(a1 + 32), (float)-*(float *)(a1 + 32));
  return result;
}

double sub_1D53F3C20(double result, double a2, double a3, double a4, uint64_t a5, int a6)
{
  if (a6 != 1)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, -5.0, -5.0);
  return result;
}

double sub_1D53F3C44(uint64_t a1, int a2, double result, double a4, double a5, double a6)
{
  if (a2 < 1)
    *(_QWORD *)&result = (unint64_t)CGRectInset(*(CGRect *)&result, (float)-*(float *)(a1 + 32), (float)-*(float *)(a1 + 32));
  return result;
}

void sub_1D53F3CDC(int a1@<W0>, _DWORD *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  void *v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  void *v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  void *v31;
  double v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  void *exception;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  _BYTE *v47;
  uint64_t v48;
  void *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  void *__p;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  void *v63;
  void *v64;
  _BYTE v65[8];
  void *v66;
  void *v67;
  _BYTE v68[8];
  void *v69;
  void *v70;
  int v71;
  void *v72;
  void *v73;
  unsigned int v74;
  void *v75;
  void *v76;
  unsigned int v77;
  void *v78;
  void *v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  double v83[3];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  sub_1D5338F84(3u, (uint64_t)&v52);
  if (a1)
    sub_1D5339590((unsigned int *)&v52, (uint64_t)&v77, 2.55);
  else
    sub_1D5339590((unsigned int *)&v52, (uint64_t)&v77, 2.0);
  sub_1D53393A8(&v52, (uint64_t)&v77);
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  v83[0] = a4 / a5;
  v83[1] = 1.0;
  v83[2] = (1.0 - a4 - a5) / a5;
  v80 = xmmword_1D545A648;
  v81 = 0x3FEA6594AF4F0D84;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  sub_1D5282C70(&v49, v83, (uint64_t)&v84, 3uLL);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  sub_1D5282C70(&v46, &v80, (uint64_t)&v82, 3uLL);
  if (v50 - (_BYTE *)v49 != 24 || v47 - (_BYTE *)v46 != 24)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D5338D40((uint64_t)&v77, 3u, 3u, 0.8951, v10, v11, v12, v13, v14, 0x3FD10CB295E9E1B1);
  sub_1D5338D40((uint64_t)&v74, 3u, 3u, 0.986993, v15, v16, v17, v18, v19, 0xBFC2D2AA5C5F7C67);
  v20 = (_DWORD *)sub_1D5338D3C((uint64_t)&v71, 3u, 1u);
  sub_1D533A15C(v20, (uint64_t)&v49);
  sub_1D5339674(&v77, &v71, (uint64_t)v68);
  sub_1D533A15C(&v71, (uint64_t)&v46);
  sub_1D5339674(&v77, &v71, (uint64_t)v65);
  sub_1D5338F84(3u, (uint64_t)&v62);
  v55 = sub_1D5339044((uint64_t)v65, 0);
  __p = v21;
  v22 = *(double *)sub_1D53390D4((uint64_t)&v55, 0);
  v60 = sub_1D5339044((uint64_t)v68, 0);
  v61 = v23;
  v24 = *(double *)sub_1D53390D4((uint64_t)&v60, 0);
  v58 = sub_1D5339044((uint64_t)&v62, 0);
  v59 = v25;
  *(double *)sub_1D53390D4((uint64_t)&v58, 0) = v22 / v24;
  v55 = sub_1D5339044((uint64_t)v65, 1u);
  __p = v26;
  v27 = *(double *)sub_1D53390D4((uint64_t)&v55, 0);
  v60 = sub_1D5339044((uint64_t)v68, 1u);
  v61 = v28;
  v29 = *(double *)sub_1D53390D4((uint64_t)&v60, 0);
  v58 = sub_1D5339044((uint64_t)&v62, 1u);
  v59 = v30;
  *(double *)sub_1D53390D4((uint64_t)&v58, 1u) = v27 / v29;
  v55 = sub_1D5339044((uint64_t)v65, 2u);
  __p = v31;
  v32 = *(double *)sub_1D53390D4((uint64_t)&v55, 0);
  v60 = sub_1D5339044((uint64_t)v68, 2u);
  v61 = v33;
  v34 = *(double *)sub_1D53390D4((uint64_t)&v60, 0);
  v58 = sub_1D5339044((uint64_t)&v62, 2u);
  v59 = v35;
  *(double *)sub_1D53390D4((uint64_t)&v58, 2u) = v32 / v34;
  sub_1D5338D3C((uint64_t)&v43, 3u, 3u);
  sub_1D5339674(&v62, &v77, (uint64_t)&v55);
  sub_1D53393A8(&v43, (uint64_t)&v55);
  if (__p)
  {
    v57 = __p;
    operator delete(__p);
  }
  sub_1D5339674(&v74, &v43, (uint64_t)&v55);
  sub_1D53393A8(&v43, (uint64_t)&v55);
  if (__p)
  {
    v57 = __p;
    operator delete(__p);
  }
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  sub_1D5339674((unsigned int *)&v43, &v52, (uint64_t)&v77);
  sub_1D53393A8(&v52, (uint64_t)&v77);
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  v41 = (unsigned int *)sub_1D5338D40((uint64_t)&v74, 3u, 3u, 1.82412008, v36, v37, v38, v39, v40, 0xBFE026BD9F433306);
  sub_1D5339674(v41, &v52, (uint64_t)&v77);
  sub_1D53393A8(&v52, (uint64_t)&v77);
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
  sub_1D5339674((unsigned int *)&v52, a2, a3);
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
}

void sub_1D53F436C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  uint64_t v45;
  void *v47;

  v47 = *(void **)(v45 - 136);
  if (v47)
  {
    *(_QWORD *)(v45 - 128) = v47;
    operator delete(v47);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D53F4544(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t (*v5)();
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t (*v17)();
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _BOOL4 v23;
  uint64_t (*v24)();
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (**v42)();
  uint64_t v43;
  void *v44;
  id v45;
  id v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t (*context)();
  void *v61;
  void *v63;
  void *v64;
  char v65;
  void *v66;
  uint64_t v67;
  id v68;
  __int128 v70;
  __int128 v71;

  v8 = a2;
  v68 = a3;
  *a5 = 0;
  a5[1] = 0;
  v13 = (uint64_t (*)())MEMORY[0x1D8272058]();
  if (v8)
  {
    v14 = v8;
  }
  else
  {
    objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v9, v10, v11, v12);
    v14 = (id)objc_claimAutoreleasedReturnValue();
  }
  context = v13;
  v66 = v14;
  v63 = (void *)*MEMORY[0x1E0CBD0B0];
  v64 = (void *)*MEMORY[0x1E0CBD090];
  sub_1D53C3EE8(v14, (void *)*MEMORY[0x1E0CBD090], (void *)*MEMORY[0x1E0CBD0B0]);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v67 = 0;
  v61 = (void *)*MEMORY[0x1E0CBCB50];
  while (2)
  {
    if (!v15)
      goto LABEL_49;
    v16 = 0;
    while (1)
    {
      v17 = off_1E999C9F8[6 * v16 + 3];
      if (v17)
      {
        v5 = v17;
        if (sub_1D53F4BF8(v15, v5, 1))
          goto LABEL_12;
      }
      if ((v16 & 0x7FFFFFFE) != 0xA)
      {
        if (v16 != 11)
        {
          v22 = v5;
          if (!v17)
            goto LABEL_37;
          goto LABEL_36;
        }
LABEL_17:
        v23 = sub_1D53F4BF8(v15, CFSTR("ricoh"), 1);
        goto LABEL_19;
      }
      v13 = off_1E999C9F8[6 * v16 + 4];
      if (sub_1D53F4BF8(v15, v13, 1))
        break;
      if (v16 == 11)
        goto LABEL_17;
      v23 = 0;
LABEL_19:

      if (v17)
      {

        if (!v23)
          goto LABEL_37;
        goto LABEL_23;
      }
      if (v23)
        goto LABEL_23;
LABEL_37:
      if (++v16 == 14)
        goto LABEL_49;
    }

    if (v17)
LABEL_12:

LABEL_23:
    objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v18, v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = off_1E999C9F8[6 * v16 + 2];
    ((void (*)(__int128 *__return_ptr, uint64_t *, void *, id))v24)(&v71, a1, v22, v68);
    sub_1D5292548((uint64_t)a5, &v71);
    v25 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    if (*((_QWORD *)&v71 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (!*a5)
      goto LABEL_36;
    (**(void (***)(_QWORD))*a5)(*a5);
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 32))(*a5) & 1) == 0)
    {
      v71 = 0uLL;
      sub_1D5292548((uint64_t)a5, &v71);
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
      if (*((_QWORD *)&v71 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
    v31 = *a5;
    if (!*a5)
    {
LABEL_36:

      goto LABEL_37;
    }
    v32 = *(_QWORD *)(v31 + 24);
    v65 = *(_BYTE *)(v31 + 32);
    if (a4)
    {
      sub_1D5297C60(v22, v61, 0);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      if (v35)
        objc_msgSend_setObject_forKeyedSubscript_(v66, v33, (uint64_t)v35, (uint64_t)CFSTR("__ExifProperties"), v34);

    }
    v36 = v32;
    ((void (*)(__int128 *__return_ptr, uint64_t *, void *, id))v24)(&v71, a1, v66, v68);
    sub_1D5292548((uint64_t)a5, &v71);
    v37 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    if (*((_QWORD *)&v71 + 1))
    {
      v38 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = *a5;
    *(_QWORD *)(v40 + 24) = v36;
    *(_BYTE *)(v40 + 32) = v65;

LABEL_49:
    if (!*a5)
    {
      v41 = 0;
      v42 = &off_1E999CA08;
      while (((0x3934uLL >> v41) & 1) != 0 || !((unsigned int (*)(uint64_t *))*(v42 - 1))(a1))
      {
        ++v41;
        v42 += 6;
        if (v41 == 14)
          goto LABEL_54;
      }
      ((void (*)(__int128 *__return_ptr, uint64_t *, void *, id))*v42)(&v71, a1, v66, v68);
      sub_1D5292548((uint64_t)a5, &v71);
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
      if (*((_QWORD *)&v71 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
    }
LABEL_54:
    v43 = *a5;
    if ((*a5 != 0) | v67 & 1)
    {
      v44 = v15;
      if (!v43)
      {
LABEL_71:
        v15 = v44;
        if (HIDWORD(v67)++ >= 2u)
          break;
        continue;
      }
    }
    else
    {
      sub_1D540E580(a1, v66, v68, &v71);
      if ((_QWORD)v71)
      {
        (**(void (***)(_QWORD))v71)(v71);
        v45 = v64;
        v46 = v63;
        sub_1D53C3EE8(v66, v45, v46);
        v44 = (void *)objc_claimAutoreleasedReturnValue();

        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v71 + 24))(v71))
        {
          sub_1D53F5C60(a1, v66, v68, &v70);
          sub_1D5292548((uint64_t)a5, &v70);
          v47 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
          if (*((_QWORD *)&v70 + 1))
          {
            v48 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
        }
      }
      else
      {
        v44 = v15;
      }
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
      if (*((_QWORD *)&v71 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v43 = *a5;
      LOBYTE(v67) = 1;
      if (!*a5)
        goto LABEL_71;
    }
    break;
  }
  if (!v43)
  {
    sub_1D53F5C60(a1, v66, v68, &v71);
    sub_1D5292548((uint64_t)a5, &v71);
    v57 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    if (*((_QWORD *)&v71 + 1))
    {
      v58 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
  }

  objc_autoreleasePoolPop(context);
}

void sub_1D53F4B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19)
{
  uint64_t v19;
  void *v20;

  sub_1D5282EB4(v19);
  _Unwind_Resume(a1);
}

BOOL sub_1D53F4BF8(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  _BOOL8 v10;
  uint64_t v11;

  v5 = a1;
  v6 = a2;
  v9 = v6;
  v10 = 0;
  if (v5 && v6)
  {
    objc_msgSend_rangeOfString_options_(v5, v7, (uint64_t)v6, a3, v8);
    v10 = v11 != 0;
  }

  return v10;
}

void sub_1D53F4C60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53F4C74(uint64_t *a1@<X0>, int *a2@<X1>, unsigned int *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  int v9;
  unsigned int v10;
  BOOL v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  int v23;

  v23 = a4;
  LODWORD(v22) = *a2;
  v9 = *sub_1D5294254((int *)&v22, a3);
  sub_1D53AE248((uint64_t)a1, &v22);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v22 + 16))(v22);
  v12 = v9 < 0 || v10 >= v9;
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *a5 = 0;
  a5[1] = 0;
  if (v12)
  {
    v16 = *a3;
    if ((_DWORD)v16)
    {
      v17 = sub_1D53F4DE4(a1, *a2, v16);
      v21 = v17;
      if ((_DWORD)v17)
      {
        if (HIDWORD(v17))
        {
          sub_1D52942DC(&v21, &v23, a2, a3, &v22);
          sub_1D5292548((uint64_t)a5, &v22);
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
          if (*((_QWORD *)&v22 + 1))
          {
            v19 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
      }
    }
  }
}

void sub_1D53F4DBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_1D53F4DE4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int16 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned __int16 v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  BOOL v37;
  _BOOL4 v38;
  unint64_t v40;
  int v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46[3];
  uint64_t v47;

  v47 = a2;
  if (a3)
  {
    v3 = a3;
    sub_1D53AE248((uint64_t)a1, &v44);
    sub_1D528594C(&v42, &v47);
    sub_1D5285164(v46, &v44, (uint64_t)&v42, 0);
    v5 = v45;
    if (v45)
    {
      p_shared_owners = (unint64_t *)&v45->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = a1 + 1;
    sub_1D5293C20(&v44, a1 + 1, 2);
    sub_1D53AE248((uint64_t)a1, &v42);
    v9 = sub_1D528479C(v42);
    v10 = v43;
    if (v43)
    {
      v11 = (unint64_t *)&v43->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 64))(a1, v9);
    v14 = 0;
    v15 = 0;
    if (v13)
    {
      do
      {
        sub_1D53AE248((uint64_t)a1, &v42);
        v16 = sub_1D528479C(v42);
        v17 = v43;
        if (v43)
        {
          v18 = (unint64_t *)&v43->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        sub_1D53AE248((uint64_t)a1, &v42);
        v20 = sub_1D528479C(v42);
        v21 = v43;
        if (v43)
        {
          v22 = (unint64_t *)&v43->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v8 + 48))(*v8);
        if (v16 < 0xFF01)
          break;
        v25 = v24;
        if (v16 == 65472)
        {
          sub_1D52846FC(*v8);
          sub_1D53AE248((uint64_t)a1, &v42);
          v15 = sub_1D528479C(v42);
          v26 = v43;
          if (v43)
          {
            v27 = (unint64_t *)&v43->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          sub_1D53AE248((uint64_t)a1, &v42);
          v14 = sub_1D528479C(v42);
          v29 = v43;
          if (v43)
          {
            v30 = (unint64_t *)&v43->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
        }
        v32 = v20 - 2;
        v3 = v3 - 4 - (unsigned __int16)(v20 - 2);
        if (v3 >= 0)
        {
          sub_1D53AE248((uint64_t)a1, &v42);
          v33 = v42;
          v40 = v25 + (unint64_t)v32;
          sub_1D528594C(&v41, (uint64_t *)&v40);
          (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v33 + 40))(v33, &v41, 0);
          v34 = v43;
          if (v43)
          {
            v35 = (unint64_t *)&v43->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
        }
        v37 = !v14 || (_DWORD)v15 == 0;
        v38 = v37;
      }
      while (v3 >= 5 && v38 && v16 != 65498);
    }
    sub_1D5293C98(&v44);
    sub_1D5285200(v46);
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  return v14 | (unint64_t)(v15 << 32);
}

void sub_1D53F515C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_1D5293C98((uint64_t *)va);
  sub_1D5285200((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_1D53F51D8(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(uint64_t **)a1;
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v7 = *v4;
    v8 = v4[1];
    *a3 = v7;
    a3[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    if (v7)
      v11 = *(_DWORD *)(v7 + 16);
    else
      v11 = 0;
    v12 = *(uint64_t **)a1;
    if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
    {
      v13 = 0;
      v14 = 0;
      do
      {
        if (a2 > 0xA0)
        {
          v15 = sub_1D5337D88(*a3);
          v16 = sub_1D5337D88(*(_QWORD *)(*(_QWORD *)a1 + v13 * 8));
        }
        else
        {
          v15 = sub_1D5337D88(v12[v13]);
          v16 = sub_1D5337D88(*a3);
        }
        if ((int)v15 <= (int)v16 && SHIDWORD(v15) <= SHIDWORD(v16))
        {
          sub_1D52908C8(a3, (uint64_t *)(*(_QWORD *)a1 + v13 * 8));
          if (!v11)
            v11 = *(_DWORD *)(*a3 + 16);
        }
        ++v14;
        v12 = *(uint64_t **)a1;
        v13 += 2;
      }
      while (v14 < (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
      v7 = *a3;
    }
    if (!*(_DWORD *)(v7 + 16))
    {
      if (v11)
        *(_DWORD *)(v7 + 16) = v11;
    }
  }
}

void sub_1D53F5300(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53F5320(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *(_QWORD *)result = &unk_1E999CCA8;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  return result;
}

BOOL sub_1D53F5358(uint64_t a1, int a2)
{
  return a2 == 65496;
}

void sub_1D53F5368(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E999FB30, 0);
    if (v10)
      sub_1D53FB008((uint64_t)v10, v12, v11, a4, a5, a6);
  }

}

void sub_1D53F53E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53F53FC(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E999FB30, 0);
    if (v11)
      sub_1D53FB15C((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D53F548C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53F54A0(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E999FB30, 0);
    if (v11)
      sub_1D53FAAD0(v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D53F5530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *sub_1D53F5544(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  if (result)
  {
    result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E999FB30, 0);
    if (result && a7 != 0)
    {
      v11 = *(unsigned int *)(a4 + 4);
      if ((v11 - 1000001) >= 0xFFF0BDC0)
      {
        LODWORD(v12) = *(_DWORD *)(a4 + 8);
        v13 = bswap32(v12);
        if (a6)
          v12 = v13;
        else
          v12 = v12;
        result[19] = v12;
        result[20] = v11;
      }
    }
  }
  return result;
}

void sub_1D53F55C8(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v15 = a2;
  if (a1)
  {
    v12 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E999FB30, 0);
    if (v12)
      sub_1D53FA2B8((uint64_t)v12, v13, v14, a4, a5, a6, a7);
  }

}

void sub_1D53F5650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53F5664(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E999FB30, 0);
    if (v11)
      sub_1D53FAA00(v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D53F56F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53F5708(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E999FB30, 0);
    if (v11)
      sub_1D53FA3B0(v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D53F5798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53F57AC(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  id v14;

  v14 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E999FB30, 0);
    if (v10)
      sub_1D53F9BE0((uint64_t)v10, v13, v11, v12, a4, a5, a6);
  }

}

void sub_1D53F5828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53F583C(const void *a1, void *a2, uint64_t a3, unsigned __int8 *a4)
{
  void *v7;
  uint64_t v8;
  id v9;

  v9 = a2;
  if (a1)
  {
    v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E999FB30, 0);
    if (v7)
      sub_1D53F9A64((uint64_t)v7, v8, a3, a4);
  }

}

void sub_1D53F58B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53F58C8(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v10;
  uint64_t v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E999FB30, 0);
    if (v10)
      sub_1D53FA934((uint64_t)v10, v12, v11, a4, a5, a6);
  }

}

void sub_1D53F5948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53F595C(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  uint8x8_t v9;
  uint16x8_t v10;
  id v11;

  v11 = a2;
  if (a1)
  {
    v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E999FB30, 0);
    if (v7)
      sub_1D53F9880((uint64_t)v7, v9, v10, v8, a3, a4);
  }

}

void sub_1D53F59D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53F59E8(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v8;
  uint64_t v9;
  char *v10;

  v10 = a2;
  if (a1)
  {
    v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E999FB30, 0);
    if (v8)
      sub_1D53FA88C(v8, v10, v9, a4, a5);
  }

}

void sub_1D53F5A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53F5A7C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E999FB30, 0);
    if (v11)
      sub_1D53F9FE0((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D53F5B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53F5B1C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  id v12;

  v12 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E999FB30, 0);
    if (v11)
      sub_1D53FB40C((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D53F5BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53F5BC0(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  void *v11;
  uint64_t v12;
  id v13;

  v13 = a2;
  if (a1)
  {
    v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_1E999CCF8, (const struct __class_type_info *)&unk_1E999FB30, 0);
    if (v11)
      sub_1D53F9CF0((uint64_t)v11, v12, a3, a4, a5, a6);
  }

}

void sub_1D53F5C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53F5C60(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, _OWORD *a4@<X8>)
{
  __int128 v7;
  id v8;
  id v9;

  v9 = a2;
  v8 = a3;
  sub_1D53FEDCC(a1, &v9, &v8, &v7);
  *a4 = v7;

}

void sub_1D53F5CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

BOOL sub_1D53F5CF0(_BYTE *a1)
{
  return ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 24))(a1) & 1) != 0 || a1[194] != 0;
}

BOOL sub_1D53F5D30(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  if (!a2)
    return 1;
  do
  {
    v3 = *a2++;
    v2 = v3;
  }
  while (v3 == 32);
  return v2 == 0;
}

uint64_t sub_1D53F5D54(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  char v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;

  v3 = 0;
  if (!a3)
    return v3 & 1;
  while (1)
  {
    while (((char)*a2 & 0x80000000) == 0)
    {
      ++a2;
      if (!--a3)
        return v3 & 1;
    }
    v4 = *a2;
    if ((v4 + 2) < 0xC2u)
      break;
    v5 = 0;
    do
    {
      v6 = v5;
      v7 = v5++ + 2;
    }
    while (((v4 << v7) & 0x80) != 0);
    if (a3 < v5 + 1)
      break;
    v8 = v4 & ~(-1 << (6 - v5));
    if ((unint64_t)(v5 + 1) < 2)
    {
      v11 = v4 & ~(-1 << (6 - v5));
    }
    else
    {
      v9 = 0;
      v10 = v6 + 1;
      do
      {
        v11 = a2[++v9] & 0x3F | (v8 << 6);
        v8 = v11;
      }
      while (v10 != v9);
    }
    if (HIWORD(v11) > 0x10u || v11 < dword_1D545A694[v5 + 1])
      break;
    v13 = v5 + 1;
    a2 += v5 + 1;
    v14 = ~v5 + a3;
    v3 = 1;
    v15 = v13 == a3;
    a3 = v14;
    if (v15)
      return v3 & 1;
  }
  return 2;
}

unsigned __int16 *sub_1D53F5E44(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, _DWORD *a4)
{
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *a4 = 0;
  while (a3)
  {
    v8 = *a3;
    if (v8 != 0xFFFF)
    {
      v9 = *a2;
      do
      {
        if (v8 == v9)
        {
          v10 = a2[1];
          if ((v10 - 1) <= 0xC && ((v11 = a3[1], v10 == v11) || ((v11 >> v10) & 0x10) != 0))
          {
            if (!a3[2] || *((_DWORD *)a2 + 1) == a3[2])
            {
              *a4 = 0;
              return a3;
            }
            v12 = 2;
          }
          else
          {
            v12 = 1;
          }
          *a4 |= v12;
        }
        v13 = a3[20];
        a3 += 20;
        v8 = v13;
      }
      while (v13 != 0xFFFF);
    }
    if ((__int16)a3[2] != -1)
      return 0;
    v14 = *((_QWORD *)a3 + 2);
    if (!v14)
      return 0;
    v15 = sub_1D53F5E44(a1, a2, v14, a4);
    a3 += 20;
    if (v15)
      return (unsigned __int16 *)v15;
  }
  return a3;
}

uint64_t sub_1D53F5F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t v18;

  v5 = 0;
  if (__CFADD__(a5, a4))
    v6 = (a4 >> 63) + 1;
  else
    v6 = a4 >> 63;
  v7 = v6 << 63 >> 63;
  v18 = a5 + a4;
  if (v7 == v6 && (v7 & 0x8000000000000000) == 0)
  {
    sub_1D53AE248(a1, &v16);
    v10 = v16;
    sub_1D528304C(&v15, &v18);
    v5 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)v10 + 24))(v10, a2, a3, &v15);
    v11 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  return v5;
}

void sub_1D53F6008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D53F601C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11;
  size_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  void *__p;
  _BYTE *v63;

  v11 = a2;
  sub_1D5285340(&__p, *(unsigned int *)(a4 + 4));
  v12 = v63 - (_BYTE *)__p;
  v13 = (unsigned int *)(a4 + 8);
  if ((unint64_t)(v63 - (_BYTE *)__p) > 4)
  {
    v14 = bswap32(*v13);
    if (a6)
      v15 = v14;
    else
      v15 = *v13;
    v16 = sub_1D53F5F40(a1, (uint64_t)__p, v12, a5, v15);
    v17 = __p;
    if (v16 != v63 - (_BYTE *)__p)
      goto LABEL_25;
  }
  else
  {
    memmove(__p, v13, v12);
  }
  sub_1D53F6390(a3);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend_length(v18, v19, v20, v21, v22);

  if (v23)
  {
    sub_1D52B261C(*(unsigned int *)(a4 + 4));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_DWORD *)(a4 + 4))
    {
      v28 = 0;
      do
      {
        objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v24, *((unsigned __int8 *)__p + v28), v25, v26);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v27, v30, (uint64_t)v29, v31, v32);

        ++v28;
      }
      while (v28 < *(unsigned int *)(a4 + 4));
    }
    v33 = *(_WORD *)(a3 + 32);
    if ((v33 & 4) != 0)
    {
      sub_1D53F63AC(a1);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6410(a3);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52E1FDC(v34, v35, 1);
      v36 = (void *)objc_claimAutoreleasedReturnValue();

      if (*(_WORD *)(a3 + 4) != 1 || (*(_WORD *)(a3 + 32) & 2) != 0)
      {
        sub_1D53F6390(a3);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v36, v44, (uint64_t)v27, (uint64_t)v40, v45);
      }
      else
      {
        v61 = 0;
        sub_1D53BE148(v27, (const char *)&v61, v37, v38, v39);
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6390(a3);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v36, v42, (uint64_t)v40, (uint64_t)v41, v43);

      }
      v33 = *(_WORD *)(a3 + 32);
    }
    if ((v33 & 8) != 0)
    {
      v46 = (void *)MEMORY[0x1E0CB3940];
      sub_1D53F6390(a3);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_stringWithFormat_(v46, v48, (uint64_t)CFSTR("%@/%@"), v49, v50, v11, v47);
      v51 = (void *)objc_claimAutoreleasedReturnValue();

      if (*(_WORD *)(a3 + 4) != 1 || (*(_WORD *)(a3 + 32) & 2) != 0)
      {
        sub_1D53F642C(a1);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v55, v59, (uint64_t)v27, (uint64_t)v51, v60);
      }
      else
      {
        v61 = 0;
        sub_1D53BE148(v27, (const char *)&v61, v52, v53, v54);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F642C(a1);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v56, v57, (uint64_t)v55, (uint64_t)v51, v58);

      }
    }

  }
  v17 = __p;
LABEL_25:
  if (v17)
  {
    v63 = v17;
    operator delete(v17);
  }

}

void sub_1D53F62D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

__CFString *sub_1D53F6390(uint64_t a1)
{
  id *v1;

  v1 = *(id **)(a1 + 16);
  if (v1)
    return (__CFString *)*v1;
  else
    return &stru_1E99A7480;
}

id sub_1D53F63AC(uint64_t a1)
{
  void *v1;
  void *exception;

  v1 = *(void **)(a1 + 168);
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return v1;
}

void sub_1D53F63FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__CFString *sub_1D53F6410(uint64_t a1)
{
  id *v1;

  v1 = *(id **)(a1 + 8);
  if (v1)
    return (__CFString *)*v1;
  else
    return &stru_1E99A7480;
}

id sub_1D53F642C(uint64_t a1)
{
  void *v1;
  void *exception;

  v1 = *(void **)(a1 + 184);
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return v1;
}

void sub_1D53F647C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

id sub_1D53F6490(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  size_t v10;
  char *v11;
  char *v12;
  int v13;
  int v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *__s[3];

  if (a4 > 0x2710)
    return 0;
  sub_1D5285340(__s, a4 + 1);
  if (sub_1D53F5F40(a1, (uint64_t)__s[0], a4, a2, a3) != a4)
    goto LABEL_11;
  __s[0][a4] = 0;
  v10 = strlen(__s[0]);
  __s[0][v10] = 0;
  v11 = __s[0];
  if ((a5 & 1) == 0)
  {
    if (__s[0])
    {
      v12 = __s[0];
      while (1)
      {
        v13 = *v12;
        if (!*v12)
          break;
        ++v12;
        if (v13 != 32)
          goto LABEL_8;
      }
    }
    goto LABEL_11;
  }
LABEL_8:
  v14 = sub_1D53F5D54(v10, (unsigned __int8 *)__s[0], v10);
  if (!v14)
  {
    objc_msgSend_stringWithCString_encoding_(MEMORY[0x1E0CB3940], v15, (uint64_t)v11, 1, v17);
    v18 = objc_claimAutoreleasedReturnValue();
    goto LABEL_13;
  }
  if (v14 == 1)
  {
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v15, (uint64_t)v11, v16, v17);
    v18 = objc_claimAutoreleasedReturnValue();
LABEL_13:
    v19 = (void *)v18;
    goto LABEL_14;
  }
LABEL_11:
  v19 = 0;
LABEL_14:
  if (__s[0])
  {
    __s[1] = __s[0];
    operator delete(__s[0]);
  }
  return v19;
}

void sub_1D53F65B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D53F65D8(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7)
{
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  _BYTE *v23;
  int v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *__dst[3];

  v13 = a2;
  v14 = *(unsigned int *)(a5 + 4);
  if ((v14 - 10001) < 0xFFFFD8F0)
    goto LABEL_28;
  v15 = *(unsigned __int16 *)(a5 + 2);
  if (v15 > 0x6F)
    v16 = 0;
  else
    v16 = qword_1D545A700[v15];
  v17 = v16 * v14;
  sub_1D53FEA94(__dst, v16 * v14 + 1);
  v18 = (_DWORD *)(a5 + 8);
  if (v17 <= 4)
  {
    v19 = (uint64_t)memmove(__dst[0], v18, v17);
    *((_BYTE *)__dst[0] + v17) = 0;
    goto LABEL_10;
  }
  v20 = bswap32(*v18);
  if (a7)
    v21 = v20;
  else
    v21 = *v18;
  v19 = sub_1D53F5F40(a1, (uint64_t)__dst[0], v17, a6, v21);
  *((_BYTE *)__dst[0] + v17) = 0;
  if (v19 == v17)
  {
LABEL_10:
    v22 = __dst[0];
    if ((a4 & 1) == 0)
    {
      if (!__dst[0])
        goto LABEL_28;
      v23 = __dst[0];
      do
      {
        v24 = *v23;
        if (!*v23)
          goto LABEL_26;
        ++v23;
      }
      while (v24 == 32);
    }
    v25 = sub_1D53F5D54(v19, (unsigned __int8 *)__dst[0], v17);
    if (v25)
    {
      if (v25 != 1)
        goto LABEL_22;
      sub_1D53F63AC(a1);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6410(a3);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52E1FDC(v26, v27, 1);
      v28 = (void *)objc_claimAutoreleasedReturnValue();

      if (v28)
        goto LABEL_20;
    }
    else
    {
      sub_1D53F63AC(a1);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6410(a3);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52E1FDC(v32, v33, 1);
      v28 = (void *)objc_claimAutoreleasedReturnValue();

      if (v28)
      {
LABEL_20:
        objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v29, (uint64_t)__dst[0], v30, v31);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6390(a3);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v28, v36, (uint64_t)v34, (uint64_t)v35, v37);

      }
    }

LABEL_22:
    v22 = __dst[0];
    if (v17 >= 0x33)
    {
      *(_DWORD *)((char *)__dst[0] + 45) = 3026478;
LABEL_27:
      __dst[1] = v22;
      operator delete(v22);
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  v22 = __dst[0];
LABEL_26:
  if (v22)
    goto LABEL_27;
LABEL_28:

}

void sub_1D53F6848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D53F68C8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  __int16 v11;
  id v12;

  v12 = a2;
  if (*(_WORD *)(a4 + 2) == 2 || *(_DWORD *)(a4 + 4) <= 0x50u)
  {
    switch(*(_WORD *)(a4 + 2))
    {
      case 1:
        goto LABEL_10;
      case 2:
        v11 = *(_WORD *)(a3 + 32);
        goto LABEL_11;
      case 3:
        sub_1D53F6ABC(a1, v12, a3, a4, a5, a6);
        break;
      case 4:
        sub_1D53F732C(a1, v12, a3, a4, a5, a6);
        break;
      case 5:
        sub_1D53F84DC(a1, v12, a3, a4, a5, a6);
        break;
      case 7:
        v11 = *(_WORD *)(a3 + 32);
        if ((v11 & 0x10) != 0)
LABEL_11:
          sub_1D53F65D8(a1, v12, a3, (v11 & 0x20) != 0, a4, a5, a6);
        else
LABEL_10:
          sub_1D53F601C(a1, v12, a3, a4, a5, a6);
        break;
      case 8:
        sub_1D53F6EF4(a1, v12, a3, a4, a5, a6);
        break;
      case 9:
        sub_1D53F7764(a1, v12, a3, a4, a5, a6);
        break;
      case 0xA:
        sub_1D53F88E4(a1, v12, a3, a4, a5, a6);
        break;
      case 0xB:
        sub_1D53F7B9C(a1, v12, a3, a4, a5, a6);
        break;
      case 0xC:
        sub_1D53F803C(a1, v12, a3, a4, a5, a6);
        break;
      default:
        break;
    }
  }

}

void sub_1D53F6AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D53F6ABC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  _WORD *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  int v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v75;
  void *__dst;
  _BYTE *v77;

  v11 = a2;
  if (*(_WORD *)(a3 + 4) == 1 && (*(_WORD *)(a3 + 32) & 2) == 0)
  {
    v12 = *(_DWORD *)(a4 + 4);
    if (v12 == 1)
    {
      v13 = 0;
      goto LABEL_7;
    }
LABEL_38:
    v29 = 0;
    goto LABEL_37;
  }
  v12 = *(_DWORD *)(a4 + 4);
  if (v12 - 1 > 0xF423F)
    goto LABEL_38;
  v13 = 1;
LABEL_7:
  sub_1D52853F0(&__dst, v12);
  v14 = *(unsigned __int16 *)(a3 + 32);
  v15 = *(unsigned int *)(a4 + 4);
  if (v15 <= 2)
  {
    v16 = *(unsigned __int16 *)(a4 + 2);
    if (v16 > 0x6F)
      v17 = 0;
    else
      v17 = qword_1D545A700[v16];
    memmove(__dst, (const void *)(a4 + 8), v17 * v15);
LABEL_15:
    v26 = (unsigned __int16 *)__dst;
    if (a6 && v77 != __dst)
    {
      v27 = (v77 - (_BYTE *)__dst) >> 1;
      v28 = __dst;
      do
      {
        *v28 = bswap32((unsigned __int16)*v28) >> 16;
        ++v28;
        --v27;
      }
      while (v27);
    }
    v29 = *v26;
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v18, v19, v20, v21);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_DWORD *)(a4 + 4))
    {
      v34 = 0;
      v35 = (v14 << 31 >> 31) & a5;
      do
      {
        objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v30, v35 + *((unsigned __int16 *)__dst + v34), v31, v32);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v33, v37, (uint64_t)v36, v38, v39);

        ++v34;
      }
      while (v34 < *(unsigned int *)(a4 + 4));
    }
    sub_1D53F6390(a3);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = objc_msgSend_length(v40, v41, v42, v43, v44);

    if (v45)
    {
      v46 = *(_WORD *)(a3 + 32);
      if ((v46 & 4) != 0)
      {
        sub_1D53F63AC(a1);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6410(a3);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D52E1FDC(v47, v48, 1);
        v49 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          sub_1D53F6390(a3);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v49, v54, (uint64_t)v33, (uint64_t)v53, v55);
        }
        else
        {
          v75 = 0;
          sub_1D53BE148(v33, (const char *)&v75, v50, v51, v52);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F6390(a3);
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v49, v57, (uint64_t)v53, (uint64_t)v56, v58);

        }
        v46 = *(_WORD *)(a3 + 32);
      }
      if ((v46 & 8) != 0)
      {
        v59 = (void *)MEMORY[0x1E0CB3940];
        sub_1D53F6390(a3);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithFormat_(v59, v61, (uint64_t)CFSTR("%@/%@"), v62, v63, v11, v60);
        v64 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          sub_1D53F642C(a1);
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v68, v69, (uint64_t)v33, (uint64_t)v64, v70);
        }
        else
        {
          v75 = 0;
          sub_1D53BE148(v33, (const char *)&v75, v65, v66, v67);
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F642C(a1);
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v71, v72, (uint64_t)v68, (uint64_t)v64, v73);

        }
      }
    }

    goto LABEL_35;
  }
  v23 = *(_DWORD *)(a4 + 8);
  v24 = bswap32(v23);
  if (a6)
    v25 = v24;
  else
    v25 = v23;
  v22 = v77 - (_BYTE *)__dst;
  if (sub_1D53F5F40(a1, (uint64_t)__dst, v77 - (_BYTE *)__dst, a5, v25) == v22)
    goto LABEL_15;
  v29 = 0;
LABEL_35:
  if (__dst)
  {
    v77 = __dst;
    operator delete(__dst);
  }
LABEL_37:

  return v29;
}

void sub_1D53F6E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D53F6EF4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  __int16 *v26;
  uint64_t v27;
  _WORD *v28;
  __int16 v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  int v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v75;
  void *__dst;
  _BYTE *v77;

  v11 = a2;
  if (*(_WORD *)(a3 + 4) == 1 && (*(_WORD *)(a3 + 32) & 2) == 0)
  {
    v12 = *(_DWORD *)(a4 + 4);
    if (v12 == 1)
    {
      v13 = 0;
      goto LABEL_7;
    }
LABEL_38:
    v29 = 0;
    goto LABEL_37;
  }
  v12 = *(_DWORD *)(a4 + 4);
  if (v12 - 1 > 0xF423F)
    goto LABEL_38;
  v13 = 1;
LABEL_7:
  sub_1D52B2A2C(&__dst, v12);
  v14 = *(unsigned __int16 *)(a3 + 32);
  v15 = *(unsigned int *)(a4 + 4);
  if (v15 <= 2)
  {
    v16 = *(unsigned __int16 *)(a4 + 2);
    if (v16 > 0x6F)
      v17 = 0;
    else
      v17 = qword_1D545A700[v16];
    memmove(__dst, (const void *)(a4 + 8), v17 * v15);
LABEL_15:
    v26 = (__int16 *)__dst;
    if (a6 && v77 != __dst)
    {
      v27 = (v77 - (_BYTE *)__dst) >> 1;
      v28 = __dst;
      do
      {
        *v28 = bswap32((unsigned __int16)*v28) >> 16;
        ++v28;
        --v27;
      }
      while (v27);
    }
    v29 = *v26;
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v18, v19, v20, v21);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_DWORD *)(a4 + 4))
    {
      v34 = 0;
      v35 = (v14 << 31 >> 31) & a5;
      do
      {
        objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v30, (v35 + *((__int16 *)__dst + v34)), v31, v32);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v33, v37, (uint64_t)v36, v38, v39);

        ++v34;
      }
      while (v34 < *(unsigned int *)(a4 + 4));
    }
    sub_1D53F6390(a3);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = objc_msgSend_length(v40, v41, v42, v43, v44);

    if (v45)
    {
      v46 = *(_WORD *)(a3 + 32);
      if ((v46 & 4) != 0)
      {
        sub_1D53F63AC(a1);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6410(a3);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D52E1FDC(v47, v48, 1);
        v49 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          sub_1D53F6390(a3);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v49, v54, (uint64_t)v33, (uint64_t)v53, v55);
        }
        else
        {
          v75 = 0;
          sub_1D53BE148(v33, (const char *)&v75, v50, v51, v52);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F6390(a3);
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v49, v57, (uint64_t)v53, (uint64_t)v56, v58);

        }
        v46 = *(_WORD *)(a3 + 32);
      }
      if ((v46 & 8) != 0)
      {
        v59 = (void *)MEMORY[0x1E0CB3940];
        sub_1D53F6390(a3);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithFormat_(v59, v61, (uint64_t)CFSTR("%@/%@"), v62, v63, v11, v60);
        v64 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          sub_1D53F642C(a1);
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v68, v69, (uint64_t)v33, (uint64_t)v64, v70);
        }
        else
        {
          v75 = 0;
          sub_1D53BE148(v33, (const char *)&v75, v65, v66, v67);
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F642C(a1);
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v71, v72, (uint64_t)v68, (uint64_t)v64, v73);

        }
      }
    }

    goto LABEL_35;
  }
  v23 = *(_DWORD *)(a4 + 8);
  v24 = bswap32(v23);
  if (a6)
    v25 = v24;
  else
    v25 = v23;
  v22 = v77 - (_BYTE *)__dst;
  if (sub_1D53F5F40(a1, (uint64_t)__dst, v77 - (_BYTE *)__dst, a5, v25) == v22)
    goto LABEL_15;
  v29 = 0;
LABEL_35:
  if (__dst)
  {
    v77 = __dst;
    operator delete(__dst);
  }
LABEL_37:

  return v29;
}

void sub_1D53F7260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D53F732C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11;
  unsigned int v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v75;
  void *__dst;
  _BYTE *v77;

  v11 = a2;
  if (*(_WORD *)(a3 + 4) == 1 && (*(_WORD *)(a3 + 32) & 2) == 0)
  {
    v12 = *(_DWORD *)(a4 + 4);
    if (v12 == 1)
    {
      v13 = 0;
      goto LABEL_7;
    }
LABEL_40:
    v29 = 0;
    goto LABEL_39;
  }
  v12 = *(_DWORD *)(a4 + 4);
  if (v12 - 1 > 0xF423F)
    goto LABEL_40;
  v13 = 1;
LABEL_7:
  sub_1D52854D0(&__dst, v12);
  v14 = *(_WORD *)(a3 + 32);
  v15 = *(unsigned int *)(a4 + 4);
  if (v15 <= 1)
  {
    v16 = *(unsigned __int16 *)(a4 + 2);
    if (v16 > 0x6F)
      v17 = 0;
    else
      v17 = qword_1D545A700[v16];
    memmove(__dst, (const void *)(a4 + 8), v17 * v15);
LABEL_15:
    v26 = (unsigned int *)__dst;
    if (a6 && v77 != __dst)
    {
      v27 = (v77 - (_BYTE *)__dst) >> 2;
      v28 = (unsigned int *)__dst;
      do
      {
        *v28 = bswap32(*v28);
        ++v28;
        --v27;
      }
      while (v27);
    }
    v29 = *v26;
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v18, v19, v20, v21);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_DWORD *)(a4 + 4))
    {
      v34 = 0;
      if ((v14 & 1) != 0)
        v35 = (int)a5;
      else
        v35 = 0;
      do
      {
        objc_msgSend_numberWithLongLong_(MEMORY[0x1E0CB37E8], v30, v35 + *((unsigned int *)__dst + v34), v31, v32);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v33, v37, (uint64_t)v36, v38, v39);

        ++v34;
      }
      while (v34 < *(unsigned int *)(a4 + 4));
    }
    sub_1D53F6390(a3);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = objc_msgSend_length(v40, v41, v42, v43, v44);

    if (v45)
    {
      v46 = *(_WORD *)(a3 + 32);
      if ((v46 & 4) != 0)
      {
        sub_1D53F63AC(a1);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6410(a3);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D52E1FDC(v47, v48, 1);
        v49 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          sub_1D53F6390(a3);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v49, v54, (uint64_t)v33, (uint64_t)v53, v55);
        }
        else
        {
          v75 = 0;
          sub_1D53BE148(v33, (const char *)&v75, v50, v51, v52);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F6390(a3);
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v49, v57, (uint64_t)v53, (uint64_t)v56, v58);

        }
        v46 = *(_WORD *)(a3 + 32);
      }
      if ((v46 & 8) != 0)
      {
        v59 = (void *)MEMORY[0x1E0CB3940];
        sub_1D53F6390(a3);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithFormat_(v59, v61, (uint64_t)CFSTR("%@/%@"), v62, v63, v11, v60);
        v64 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          sub_1D53F642C(a1);
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v68, v69, (uint64_t)v33, (uint64_t)v64, v70);
        }
        else
        {
          v75 = 0;
          sub_1D53BE148(v33, (const char *)&v75, v65, v66, v67);
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F642C(a1);
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v71, v72, (uint64_t)v68, (uint64_t)v64, v73);

        }
      }
    }

    goto LABEL_37;
  }
  v23 = *(_DWORD *)(a4 + 8);
  v24 = bswap32(v23);
  if (a6)
    v25 = v24;
  else
    v25 = v23;
  v22 = v77 - (_BYTE *)__dst;
  if (sub_1D53F5F40(a1, (uint64_t)__dst, v77 - (_BYTE *)__dst, a5, v25) == v22)
    goto LABEL_15;
  v29 = 0;
LABEL_37:
  if (__dst)
  {
    v77 = __dst;
    operator delete(__dst);
  }
LABEL_39:

  return v29;
}

void sub_1D53F7698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D53F7764(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11;
  unsigned int v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v75;
  void *__dst;
  _BYTE *v77;

  v11 = a2;
  if (*(_WORD *)(a3 + 4) == 1 && (*(_WORD *)(a3 + 32) & 2) == 0)
  {
    v12 = *(_DWORD *)(a4 + 4);
    if (v12 == 1)
    {
      v13 = 0;
      goto LABEL_7;
    }
LABEL_40:
    v29 = 0;
    goto LABEL_39;
  }
  v12 = *(_DWORD *)(a4 + 4);
  if (v12 - 1 > 0xF423F)
    goto LABEL_40;
  v13 = 1;
LABEL_7:
  sub_1D52B2E9C(&__dst, v12);
  v14 = *(_WORD *)(a3 + 32);
  v15 = *(unsigned int *)(a4 + 4);
  if (v15 <= 1)
  {
    v16 = *(unsigned __int16 *)(a4 + 2);
    if (v16 > 0x6F)
      v17 = 0;
    else
      v17 = qword_1D545A700[v16];
    memmove(__dst, (const void *)(a4 + 8), v17 * v15);
LABEL_15:
    v26 = (unsigned int *)__dst;
    if (a6 && v77 != __dst)
    {
      v27 = (v77 - (_BYTE *)__dst) >> 2;
      v28 = (unsigned int *)__dst;
      do
      {
        *v28 = bswap32(*v28);
        ++v28;
        --v27;
      }
      while (v27);
    }
    v29 = *v26;
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v18, v19, v20, v21);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    if (*(_DWORD *)(a4 + 4))
    {
      v34 = 0;
      if ((v14 & 1) != 0)
        v35 = (int)a5;
      else
        v35 = 0;
      do
      {
        objc_msgSend_numberWithLongLong_(MEMORY[0x1E0CB37E8], v30, v35 + *((int *)__dst + v34), v31, v32);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v33, v37, (uint64_t)v36, v38, v39);

        ++v34;
      }
      while (v34 < *(unsigned int *)(a4 + 4));
    }
    sub_1D53F6390(a3);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = objc_msgSend_length(v40, v41, v42, v43, v44);

    if (v45)
    {
      v46 = *(_WORD *)(a3 + 32);
      if ((v46 & 4) != 0)
      {
        sub_1D53F63AC(a1);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6410(a3);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D52E1FDC(v47, v48, 1);
        v49 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          sub_1D53F6390(a3);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v49, v54, (uint64_t)v33, (uint64_t)v53, v55);
        }
        else
        {
          v75 = 0;
          sub_1D53BE148(v33, (const char *)&v75, v50, v51, v52);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F6390(a3);
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v49, v57, (uint64_t)v53, (uint64_t)v56, v58);

        }
        v46 = *(_WORD *)(a3 + 32);
      }
      if ((v46 & 8) != 0)
      {
        v59 = (void *)MEMORY[0x1E0CB3940];
        sub_1D53F6390(a3);
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithFormat_(v59, v61, (uint64_t)CFSTR("%@/%@"), v62, v63, v11, v60);
        v64 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          sub_1D53F642C(a1);
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v68, v69, (uint64_t)v33, (uint64_t)v64, v70);
        }
        else
        {
          v75 = 0;
          sub_1D53BE148(v33, (const char *)&v75, v65, v66, v67);
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F642C(a1);
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v71, v72, (uint64_t)v68, (uint64_t)v64, v73);

        }
      }
    }

    goto LABEL_37;
  }
  v23 = *(_DWORD *)(a4 + 8);
  v24 = bswap32(v23);
  if (a6)
    v25 = v24;
  else
    v25 = v23;
  v22 = v77 - (_BYTE *)__dst;
  if (sub_1D53F5F40(a1, (uint64_t)__dst, v77 - (_BYTE *)__dst, a5, v25) == v22)
    goto LABEL_15;
  v29 = 0;
LABEL_37:
  if (__dst)
  {
    v77 = __dst;
    operator delete(__dst);
  }
LABEL_39:

  return v29;
}

void sub_1D53F7AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

float sub_1D53F7B9C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  float v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  float *v42;
  uint64_t v43;
  unsigned int *v44;
  unint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  void *__p;
  float *v87;

  v15 = a2;
  if (*(_WORD *)(a3 + 4) == 1 && (*(_WORD *)(a3 + 32) & 2) == 0)
  {
    if (*(_DWORD *)(a4 + 4) == 1)
    {
      v16 = 0;
      goto LABEL_7;
    }
LABEL_41:
    v50 = 0.0;
    goto LABEL_40;
  }
  if ((*(_DWORD *)(a4 + 4) - 1) > 0xF423F)
    goto LABEL_41;
  v16 = 1;
LABEL_7:
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v11, v12, v13, v14);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = *(unsigned int *)(a4 + 4);
  v23 = *(unsigned __int16 *)(a4 + 2);
  if (v23 > 0x6F)
    v24 = 0;
  else
    v24 = qword_1D545A700[v23];
  if (v24 * v22 == 4)
  {
    v25 = *(_DWORD *)(a4 + 8);
    v26 = bswap32(v25);
    if (a6)
      v25 = v26;
    v27 = *(float *)&v25;
    LODWORD(v21) = v25;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], (const char *)v22, v17, v18, v19, v21);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v20, v29, (uint64_t)v28, v30, v31);

    goto LABEL_27;
  }
  sub_1D52854D0(&__p, v22);
  v32 = (char *)v87 - (_BYTE *)__p;
  v33 = *(_DWORD *)(a4 + 8);
  v34 = bswap32(v33);
  if (a6)
    v35 = v34;
  else
    v35 = v33;
  v40 = sub_1D53F5F40(a1, (uint64_t)__p, (char *)v87 - (_BYTE *)__p, a5, v35);
  v42 = (float *)__p;
  if (v40 == v32)
  {
    if (a6 && v87 != __p)
    {
      v43 = ((char *)v87 - (_BYTE *)__p) >> 2;
      v44 = (unsigned int *)__p;
      do
      {
        *v44 = bswap32(*v44);
        ++v44;
        --v43;
      }
      while (v43);
    }
    v27 = *v42;
    if (!*(_DWORD *)(a4 + 4))
      goto LABEL_25;
    v45 = 0;
    do
    {
      LODWORD(v41) = *((_DWORD *)__p + v45);
      objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v36, v37, v38, v39, v41);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v20, v47, (uint64_t)v46, v48, v49);

      ++v45;
    }
    while (v45 < *(unsigned int *)(a4 + 4));
    v42 = (float *)__p;
    if (__p)
      goto LABEL_25;
  }
  else
  {
    v27 = 0.0;
    if (__p)
    {
LABEL_25:
      v87 = v42;
      operator delete(v42);
    }
  }
  v50 = 0.0;
  if (v40 == v32)
  {
LABEL_27:
    sub_1D53F6390(a3);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = objc_msgSend_length(v51, v52, v53, v54, v55);

    if (v56)
    {
      v57 = *(_WORD *)(a3 + 32);
      if ((v57 & 4) != 0)
      {
        sub_1D53F63AC(a1);
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6410(a3);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D52E1FDC(v58, v59, 1);
        v60 = (void *)objc_claimAutoreleasedReturnValue();

        if (v16)
        {
          sub_1D53F6390(a3);
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v60, v65, (uint64_t)v20, (uint64_t)v64, v66);
        }
        else
        {
          __p = 0;
          sub_1D53BE148(v20, (const char *)&__p, v61, v62, v63);
          v64 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F6390(a3);
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v60, v68, (uint64_t)v64, (uint64_t)v67, v69);

        }
        v57 = *(_WORD *)(a3 + 32);
      }
      if ((v57 & 8) != 0)
      {
        v70 = (void *)MEMORY[0x1E0CB3940];
        sub_1D53F6390(a3);
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithFormat_(v70, v72, (uint64_t)CFSTR("%@/%@"), v73, v74, v15, v71);
        v75 = (void *)objc_claimAutoreleasedReturnValue();

        if (v16)
        {
          sub_1D53F642C(a1);
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v79, v80, (uint64_t)v20, (uint64_t)v75, v81);
        }
        else
        {
          __p = 0;
          sub_1D53BE148(v20, (const char *)&__p, v76, v77, v78);
          v79 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F642C(a1);
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v82, v83, (uint64_t)v79, (uint64_t)v75, v84);

        }
      }
    }
    v50 = v27;
  }

LABEL_40:
  return v50;
}

void sub_1D53F7F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

double sub_1D53F803C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  unsigned int v25;
  double v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  void *__p;
  double *v85;

  v15 = a2;
  if (*(_WORD *)(a3 + 4) == 1 && (*(_WORD *)(a3 + 32) & 2) == 0)
  {
    if (*(_DWORD *)(a4 + 4) == 1)
    {
      v16 = 0;
      goto LABEL_7;
    }
LABEL_42:
    v48 = 0.0;
    goto LABEL_41;
  }
  if ((*(_DWORD *)(a4 + 4) - 1) > 0xF423F)
    goto LABEL_42;
  v16 = 1;
LABEL_7:
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v11, v12, v13, v14);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = *(unsigned int *)(a4 + 4);
  v22 = *(unsigned __int16 *)(a4 + 2);
  if (v22 > 0x6F)
    v23 = 0;
  else
    v23 = qword_1D545A700[v22];
  if (v23 * v21 == 4)
  {
    LODWORD(v24) = *(_DWORD *)(a4 + 8);
    v25 = bswap32(LODWORD(v24));
    if (a6)
      *(_QWORD *)&v24 = v25;
    else
      *(_QWORD *)&v24 = LODWORD(v24);
    v26 = v24;
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], (const char *)v21, v17, v18, v19, v24);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v20, v28, (uint64_t)v27, v29, v30);

    goto LABEL_28;
  }
  sub_1D53FF02C(&__p, v21);
  v31 = (char *)v85 - (_BYTE *)__p;
  v32 = *(_DWORD *)(a4 + 8);
  v33 = bswap32(v32);
  if (a6)
    v34 = v33;
  else
    v34 = v32;
  v39 = sub_1D53F5F40(a1, (uint64_t)__p, (char *)v85 - (_BYTE *)__p, a5, v34);
  v40 = (double *)__p;
  if (v39 == v31)
  {
    if (a6 && v85 != __p)
    {
      v41 = ((char *)v85 - (_BYTE *)__p) >> 3;
      v42 = (unint64_t *)__p;
      do
      {
        *v42 = bswap64(*v42);
        ++v42;
        --v41;
      }
      while (v41);
    }
    v26 = *v40;
    if (!*(_DWORD *)(a4 + 4))
      goto LABEL_26;
    v43 = 0;
    do
    {
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v35, v36, v37, v38, *((double *)__p + v43));
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v20, v45, (uint64_t)v44, v46, v47);

      ++v43;
    }
    while (v43 < *(unsigned int *)(a4 + 4));
    v40 = (double *)__p;
    if (__p)
      goto LABEL_26;
  }
  else
  {
    v26 = 0.0;
    if (__p)
    {
LABEL_26:
      v85 = v40;
      operator delete(v40);
    }
  }
  v48 = 0.0;
  if (v39 == v31)
  {
LABEL_28:
    sub_1D53F6390(a3);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v54 = objc_msgSend_length(v49, v50, v51, v52, v53);

    if (v54)
    {
      v55 = *(_WORD *)(a3 + 32);
      if ((v55 & 4) != 0)
      {
        sub_1D53F63AC(a1);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6410(a3);
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D52E1FDC(v56, v57, 1);
        v58 = (void *)objc_claimAutoreleasedReturnValue();

        if (v16)
        {
          sub_1D53F6390(a3);
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v58, v63, (uint64_t)v20, (uint64_t)v62, v64);
        }
        else
        {
          __p = 0;
          sub_1D53BE148(v20, (const char *)&__p, v59, v60, v61);
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F6390(a3);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v58, v66, (uint64_t)v62, (uint64_t)v65, v67);

        }
        v55 = *(_WORD *)(a3 + 32);
      }
      if ((v55 & 8) != 0)
      {
        v68 = (void *)MEMORY[0x1E0CB3940];
        sub_1D53F6390(a3);
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithFormat_(v68, v70, (uint64_t)CFSTR("%@/%@"), v71, v72, v15, v69);
        v73 = (void *)objc_claimAutoreleasedReturnValue();

        if (v16)
        {
          sub_1D53F642C(a1);
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v77, v78, (uint64_t)v20, (uint64_t)v73, v79);
        }
        else
        {
          __p = 0;
          sub_1D53BE148(v20, (const char *)&__p, v74, v75, v76);
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F642C(a1);
          v80 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v80, v81, (uint64_t)v77, (uint64_t)v73, v82);

        }
      }
    }
    v48 = v26;
  }

LABEL_41:
  return v48;
}

void sub_1D53F83E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

double sub_1D53F84DC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11;
  int v12;
  int v13;
  int64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  double v32;
  unsigned int v33;
  double v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v74;
  void *__p;
  _BYTE *v76;

  v11 = a2;
  if (*(_WORD *)(a3 + 4) != 1 || (*(_WORD *)(a3 + 32) & 2) != 0)
  {
    v12 = *(_DWORD *)(a4 + 4);
    if ((v12 - 1) <= 0xF423F)
    {
      v13 = 1;
      goto LABEL_7;
    }
LABEL_39:
    v32 = 0.0;
    goto LABEL_38;
  }
  v12 = *(_DWORD *)(a4 + 4);
  if (v12 != 1)
    goto LABEL_39;
  v13 = 0;
LABEL_7:
  sub_1D52854D0(&__p, (2 * v12));
  v15 = *(_DWORD *)(a4 + 8);
  v16 = bswap32(v15);
  if (a6)
    v17 = v16;
  else
    v17 = v15;
  v14 = v76 - (_BYTE *)__p;
  if (sub_1D53F5F40(a1, (uint64_t)__p, v76 - (_BYTE *)__p, a5, v17) == v14)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v18, v19, v20, v21);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if (a6)
    {
      v28 = (unsigned int *)__p;
      if (v76 != __p)
      {
        v29 = (v76 - (_BYTE *)__p) >> 2;
        do
        {
          *v28 = bswap32(*v28);
          ++v28;
          --v29;
        }
        while (v29);
      }
    }
    if (*(_DWORD *)(a4 + 4))
    {
      v30 = 0;
      v31 = 0;
      v32 = 0.0;
      do
      {
        v33 = *(_DWORD *)((char *)__p + v30);
        v34 = 0.0;
        if (v33)
        {
          LODWORD(v27) = *(_DWORD *)((char *)__p + v30 + 4);
          v34 = (double)v33 / (double)v27;
        }
        if (!v31)
          v32 = v34;
        *(float *)&v34 = v34;
        objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v22, v23, v24, v25, v34);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v26, v36, (uint64_t)v35, v37, v38);

        ++v31;
        v30 += 8;
      }
      while (v31 < *(unsigned int *)(a4 + 4));
    }
    else
    {
      v32 = 0.0;
    }
    sub_1D53F6390(a3);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = objc_msgSend_length(v39, v40, v41, v42, v43);

    if (v44)
    {
      v45 = *(_WORD *)(a3 + 32);
      if ((v45 & 4) != 0)
      {
        sub_1D53F63AC(a1);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6410(a3);
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D52E1FDC(v46, v47, 1);
        v48 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          sub_1D53F6390(a3);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v48, v53, (uint64_t)v26, (uint64_t)v52, v54);
        }
        else
        {
          v74 = 0;
          sub_1D53BE148(v26, (const char *)&v74, v49, v50, v51);
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F6390(a3);
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v48, v56, (uint64_t)v52, (uint64_t)v55, v57);

        }
        v45 = *(_WORD *)(a3 + 32);
      }
      if ((v45 & 8) != 0)
      {
        v58 = (void *)MEMORY[0x1E0CB3940];
        sub_1D53F6390(a3);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithFormat_(v58, v60, (uint64_t)CFSTR("%@/%@"), v61, v62, v11, v59);
        v63 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          sub_1D53F642C(a1);
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v67, v68, (uint64_t)v26, (uint64_t)v63, v69);
        }
        else
        {
          v74 = 0;
          sub_1D53BE148(v26, (const char *)&v74, v64, v65, v66);
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F642C(a1);
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v70, v71, (uint64_t)v67, (uint64_t)v63, v72);

        }
      }
    }

  }
  else
  {
    v32 = 0.0;
  }
  if (__p)
  {
    v76 = __p;
    operator delete(__p);
  }
LABEL_38:

  return v32;
}

void sub_1D53F8824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

double sub_1D53F88E4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11;
  int v12;
  int v13;
  int64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  int v32;
  double v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v73;
  void *__p;
  _BYTE *v75;

  v11 = a2;
  if (*(_WORD *)(a3 + 4) != 1 || (*(_WORD *)(a3 + 32) & 2) != 0)
  {
    v12 = *(_DWORD *)(a4 + 4);
    if ((v12 - 1) <= 0xF423F)
    {
      v13 = 1;
      goto LABEL_7;
    }
LABEL_39:
    v31 = 0.0;
    goto LABEL_38;
  }
  v12 = *(_DWORD *)(a4 + 4);
  if (v12 != 1)
    goto LABEL_39;
  v13 = 0;
LABEL_7:
  sub_1D52B2E9C(&__p, (2 * v12));
  v15 = *(_DWORD *)(a4 + 8);
  v16 = bswap32(v15);
  if (a6)
    v17 = v16;
  else
    v17 = v15;
  v14 = v75 - (_BYTE *)__p;
  if (sub_1D53F5F40(a1, (uint64_t)__p, v75 - (_BYTE *)__p, a5, v17) == v14)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v18, v19, v20, v21);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if (a6)
    {
      v27 = (unsigned int *)__p;
      if (v75 != __p)
      {
        v28 = (v75 - (_BYTE *)__p) >> 2;
        do
        {
          *v27 = bswap32(*v27);
          ++v27;
          --v28;
        }
        while (v28);
      }
    }
    if (*(_DWORD *)(a4 + 4))
    {
      v29 = 0;
      v30 = 0;
      v31 = 0.0;
      do
      {
        v32 = *(_DWORD *)((char *)__p + v29);
        v33 = 0.0;
        if (v32)
          v33 = (double)v32 / (double)*(int *)((char *)__p + v29 + 4);
        if (!v30)
          v31 = v33;
        *(float *)&v33 = v33;
        objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v22, v23, v24, v25, v33);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v26, v35, (uint64_t)v34, v36, v37);

        ++v30;
        v29 += 8;
      }
      while (v30 < *(unsigned int *)(a4 + 4));
    }
    else
    {
      v31 = 0.0;
    }
    sub_1D53F6390(a3);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = objc_msgSend_length(v38, v39, v40, v41, v42);

    if (v43)
    {
      v44 = *(_WORD *)(a3 + 32);
      if ((v44 & 4) != 0)
      {
        sub_1D53F63AC(a1);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D53F6410(a3);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        sub_1D52E1FDC(v45, v46, 1);
        v47 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          sub_1D53F6390(a3);
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v47, v52, (uint64_t)v26, (uint64_t)v51, v53);
        }
        else
        {
          v73 = 0;
          sub_1D53BE148(v26, (const char *)&v73, v48, v49, v50);
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F6390(a3);
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v47, v55, (uint64_t)v51, (uint64_t)v54, v56);

        }
        v44 = *(_WORD *)(a3 + 32);
      }
      if ((v44 & 8) != 0)
      {
        v57 = (void *)MEMORY[0x1E0CB3940];
        sub_1D53F6390(a3);
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_stringWithFormat_(v57, v59, (uint64_t)CFSTR("%@/%@"), v60, v61, v11, v58);
        v62 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          sub_1D53F642C(a1);
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v66, v67, (uint64_t)v26, (uint64_t)v62, v68);
        }
        else
        {
          v73 = 0;
          sub_1D53BE148(v26, (const char *)&v73, v63, v64, v65);
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F642C(a1);
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v69, v70, (uint64_t)v66, (uint64_t)v62, v71);

        }
      }
    }

  }
  else
  {
    v31 = 0.0;
  }
  if (__p)
  {
    v75 = __p;
    operator delete(__p);
  }
LABEL_38:

  return v31;
}

void sub_1D53F8C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D53F8CEC(uint64_t a1, void *a2, uint64_t a3, void (*a4)(uint64_t, _QWORD))
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = a2;
  v12 = v7;
  if (!a4)
  {
    a3 = 0;
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (!(_DWORD)a3)
  {
    while (1)
    {
      a4(a1, (unsigned __int16)a3);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v13)
        break;
      a3 = (a3 + 1);
    }
  }
  if (v12)
LABEL_9:
    objc_msgSend_length(v12, v8, v9, v10, v11);
LABEL_10:
  if ((_DWORD)a3)
  {
    v14 = 0;
    do
    {
      a4(a1, (unsigned __int16)v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (v15)
      {
        a4(a1, (unsigned __int16)v14);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_length(v16, v17, v18, v19, v20);

      }
      ++v14;
    }
    while ((_DWORD)a3 != v14);
  }

  return a3;
}

void sub_1D53F8DC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53F8DE4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  float v17;
  float v18;
  int v19;
  int v20;
  float v21;
  float v22;
  BOOL v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *exception;
  void *v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43[4];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
  if (v1 >= 1)
  {
    sub_1D53F63AC(a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52E1FDC(v3, (void *)*MEMORY[0x1E0CBCA28], 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    v39 = v4;
    sub_1D533BA50(v4, CFSTR("AFInfo"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v5 || (v6 = *(_DWORD *)(a1 + 64)) == 0 || (v7 = *(_DWORD *)(a1 + 68)) == 0)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v41 = (float)v7;
    v42 = (float)v6;
    v40 = 0;
    v12 = (*(uint64_t (**)(uint64_t, char *, uint64_t *, float *, float *))(*(_QWORD *)a1 + 192))(a1, (char *)&v40 + 4, &v40, &v42, &v41);
    v14 = 0;
    if (v1 >> 4 <= 1)
      v15 = 1;
    else
      v15 = v1 >> 4;
    while (1)
    {
      v16 = (int *)(*(_QWORD *)(a1 + 72) + 16 * v14);
      v17 = (float)*v16;
      v18 = (float)v16[1];
      v19 = v16[2];
      v20 = v16[3];
      v21 = (float)v19;
      v22 = (float)v20;
      if (!v12)
        goto LABEL_12;
      if ((float)(vabds_f32(v17, (float)SHIDWORD(v40)) + (float)(fabsf(v21) * 0.5)) <= (float)(v42 * 0.5)
        && (float)(vabds_f32(v18, (float)(int)v40) + (float)(fabsf(v22) * 0.5)) <= (float)(v41 * 0.5))
      {
        break;
      }
LABEL_34:
      if (++v14 == v15)
      {

        return;
      }
    }
    v17 = v17 - (float)SHIDWORD(v40);
    v18 = v18 - (float)(int)v40;
LABEL_12:
    if (v19)
      v23 = v20 == 0;
    else
      v23 = 1;
    if (!v23)
    {
      v24 = 0;
      v43[2] = v21 / v42;
      v43[3] = v22 / v41;
      v43[0] = (float)((float)(v17 / v42) + 0.5) - (float)((float)(v21 / v42) * 0.5);
      v43[1] = (float)((float)(v18 / v41) + 0.5) - (float)((float)(v22 / v41) * 0.5);
      do
      {
        *(float *)&v13 = v43[v24];
        objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v8, v9, v10, v11, v13, v39);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v5, v26, (uint64_t)v25, v27, v28);

        ++v24;
      }
      while (v24 != 4);
      if (v14 == (int)v14)
      {
        v32 = *(_DWORD **)(a1 + 120);
        v31 = *(_DWORD **)(a1 + 128);
        if (v32 == v31)
        {
          v29 = 0;
        }
        else
        {
          while (*v32 != (_DWORD)v14)
          {
            if (++v32 == v31)
            {
              v32 = *(_DWORD **)(a1 + 128);
              break;
            }
          }
          v29 = v32 != v31;
        }
        v33 = *(_DWORD **)(a1 + 96);
        v30 = *(_DWORD **)(a1 + 104);
        if (v33 == v30)
        {
          v30 = *(_DWORD **)(a1 + 96);
        }
        else
        {
          while (*v33 != (_DWORD)v14)
          {
            if (++v33 == v30)
              goto LABEL_29;
          }
        }
      }
      else
      {
        v29 = 0;
        v30 = *(_DWORD **)(a1 + 104);
LABEL_29:
        v33 = v30;
      }
      if (v33 != v30)
        v29 |= 2u;
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v8, (uint64_t)off_1E999FA20[v29], v10, v11);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v5, v35, (uint64_t)v34, v36, v37);

    }
    goto LABEL_34;
  }
}

void sub_1D53F9120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1D53F918C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D5297C60(v2, CFSTR("{LensInfo}"), 0);
  v23 = (id)objc_claimAutoreleasedReturnValue();

  if (v23)
  {
    v6 = sub_1D53F92B8(v23, CFSTR("_MinFocalLength"), v3, v4, v5);
    v10 = sub_1D53F92B8(v23, CFSTR("_MaxFocalLength"), v7, v8, v9);
    v14 = sub_1D53F92B8(v23, CFSTR("_MaxApertureAtMinFocalLength"), v11, v12, v13);
    v18 = sub_1D53F92B8(v23, CFSTR("_MaxApertureAtMaxFocalLength"), v15, v16, v17);
    sub_1D53F9304(a1, v6, v10, v14, v18);
  }
  sub_1D53F63AC(a1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v19, v20, (uint64_t)CFSTR("{LensInfo}"), v21, v22);

}

void sub_1D53F927C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53F92B0()
{
  JUMPOUT(0x1D53F92A4);
}

float sub_1D53F92B8(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;

  sub_1D529EA84(a1, a2, a3, a4, a5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_floatValue(v5, v6, v7, v8, v9);
  v11 = v10;

  return v11;
}

void sub_1D53F92F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53F9304(uint64_t a1, double a2, double a3, double a4, double a5)
{
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;

  if (a2 > 0.0 && a3 > 0.0)
  {
    sub_1D53F63AC(a1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52E1FDC(v9, (void *)*MEMORY[0x1E0CBCA28], 0);
    v43 = (id)objc_claimAutoreleasedReturnValue();

    sub_1D53FA234(v43, (void *)*MEMORY[0x1E0CBCA50]);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v11, v12, v13, v14, a2);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v10, v16, (uint64_t)v15, v17, v18);

    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v19, v20, v21, v22, a3);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v10, v24, (uint64_t)v23, v25, v26);

    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v27, v28, v29, v30, fmax(round(a4 * 10.0) / 10.0, 0.0));
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v10, v32, (uint64_t)v31, v33, v34);

    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v35, v36, v37, v38, fmax(round(a5 * 10.0) / 10.0, 0.0));
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v10, v40, (uint64_t)v39, v41, v42);

  }
}

void sub_1D53F9484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1D53F94CC(uint64_t a1)
{
  void *v2;
  int v3;
  void *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  sub_1D53F63AC(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D5297C60(v2, CFSTR("{PictureStyle}"), 0);
  v13 = (id)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    if (!sub_1D5297D80(v13, CFSTR("Monochrome")))
      sub_1D53F9628(a1, CFSTR("Monochrome"), 0);
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    if ((v3 & 0x80000000) == 0)
    {
      if ((unsigned __int16)(v3 + 1) > 4u)
        v4 = 0;
      else
        v4 = *(&off_1E999FBB8 + (__int16)(v3 + 1));
      sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), CFSTR("PictStyleColorSpace"), v4, (float)v3, (float)v3);
    }
  }
  sub_1D53F63AC(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v5, v6, (uint64_t)CFSTR("{PictStyleSetting}"), v7, v8);

  sub_1D53F63AC(a1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v9, v10, (uint64_t)CFSTR("{PictStyleNormalized}"), v11, v12);

}

void sub_1D53F95E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53F9628(uint64_t a1, void *a2, int a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a2;
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v5, (uint64_t)CFSTR("%ld"), v6, v7, a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F96CC(a1, CFSTR("{PictureStyle}"), v9, v8, (float)a3, (float)a3);

}

void sub_1D53F96AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D53F96CC(uint64_t a1, void *a2, void *a3, void *a4, float a5, float a6)
{
  id v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;

  v42 = a2;
  v11 = a3;
  v12 = a4;
  v16 = v12;
  if (v12)
  {
    v17 = v12;
  }
  else
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v13, (uint64_t)CFSTR("%ld"), v14, v15, (uint64_t)a5, v42);
    v17 = (id)objc_claimAutoreleasedReturnValue();
  }
  v18 = v17;
  sub_1D53F63AC(a1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F99E4(v19, v42, v11);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_addObject_(v20, v21, (uint64_t)v18, v22, v23);
  *(float *)&v24 = a5;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v25, v26, v27, v28, v24);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v20, v30, (uint64_t)v29, v31, v32);

  *(float *)&v33 = a6;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v34, v35, v36, v37, v33);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v20, v39, (uint64_t)v38, v40, v41);

}

void sub_1D53F97F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1D53F984C(uint64_t a1, __int16 a2)
{
  if ((unsigned __int16)(a2 + 1) > 4u)
    return 0;
  else
    return (uint64_t)*(&off_1E999FBB8 + (__int16)(a2 + 1));
}

uint64_t sub_1D53F9878()
{
  return 1;
}

void sub_1D53F9880(uint64_t a1, uint8x8_t a2, uint16x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;

  a2.i32[0] = *(_DWORD *)(a6 + 8);
  a3.i32[0] = 13631696;
  a3.i16[2] = 208;
  a3.i16[3] = 208;
  *(_DWORD *)(a6 + 8) = vmovn_s16((int16x8_t)vaddw_u8(a3, a2)).u32[0];
  sub_1D53F63AC(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F6410(a5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F6390(a5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F99E4(v8, v9, v10);
  v32 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v11, (*(char *)(a6 + 9) + 10 * *(char *)(a6 + 8)), v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v32, v15, (uint64_t)v14, v16, v17);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v18, *(char *)(a6 + 10), v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v32, v22, (uint64_t)v21, v23, v24);

  if (*(_BYTE *)(a6 + 11))
  {
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v25, *(char *)(a6 + 11), v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v32, v29, (uint64_t)v28, v30, v31);

  }
}

void sub_1D53F9998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id sub_1D53F99E4(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;

  v5 = a3;
  sub_1D52E1FDC(a1, a2, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53FA234(v6, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_1D53F9A48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53F9A64(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  void *v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;

  sub_1D53F63AC(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F6410(a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F6390(a3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F99E4(v6, v7, v8);
  v37 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v9, a4[8], v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v37, v13, (uint64_t)v12, v14, v15);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v16, a4[9], v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v37, v20, (uint64_t)v19, v21, v22);

  if (*((_WORD *)a4 + 5))
  {
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v23, a4[10], v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v37, v27, (uint64_t)v26, v28, v29);

    if (a4[11])
    {
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v30, a4[11], v31, v32);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v37, v34, (uint64_t)v33, v35, v36);

    }
  }

}

void sub_1D53F9B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

double sub_1D53F9BE0(uint64_t a1, double result, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  double v19;
  unint64_t v20;
  double v21;
  unint64_t v22;
  double v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a5 + 4) >= 4u)
  {
    v24 = 0u;
    v25 = 0u;
    LODWORD(v10) = *(_DWORD *)(a5 + 8);
    v11 = bswap32(v10);
    v10 = a7 ? v11 : v10;
    if (sub_1D53F5F40(a1, (uint64_t)&v24, 32, a6, v10) == 32)
    {
      if (a7)
      {
        v16 = *(unsigned int *)(a5 + 4);
        if ((_DWORD)v16)
        {
          v17 = (unsigned int *)&v24;
          do
          {
            *v17 = bswap32(*v17);
            ++v17;
            --v16;
          }
          while (v16);
        }
      }
      LODWORD(v12) = DWORD1(v24);
      LODWORD(result) = v24;
      *(double *)&v18 = (double)v12;
      v19 = (double)*(unint64_t *)&result / *(double *)&v18;
      LODWORD(v13) = HIDWORD(v24);
      LODWORD(v18) = DWORD2(v24);
      *(double *)&v20 = (double)v13;
      v21 = (double)v18 / *(double *)&v20;
      LODWORD(v14) = DWORD1(v25);
      LODWORD(v20) = v25;
      *(double *)&v22 = (double)v14;
      v23 = (double)v20 / *(double *)&v22;
      LODWORD(v15) = HIDWORD(v25);
      LODWORD(v22) = DWORD2(v25);
      sub_1D53F9304(a1, v19, v21, v23, (double)v22 / (double)v15);
    }
  }
  return result;
}

void sub_1D53F9CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t i;
  double v15;
  BOOL v16;
  BOOL v17;
  double v18;
  double v19;
  void *v20;
  uint64_t v21;
  float v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v11 = *(_DWORD *)(a4 + 8);
  v12 = bswap32(v11);
  if (a6)
    v13 = v12;
  else
    v13 = v11;
  if (sub_1D53F5F40(a1, (uint64_t)&v34, 24, a5, v13) == 24)
  {
    if (a6)
    {
      for (i = 0; i != 24; i += 4)
        *(_DWORD *)((char *)&v34 + i) = bswap32(*(_DWORD *)((char *)&v34 + i));
    }
    v15 = 0.0;
    if ((_DWORD)v34)
      v16 = HIDWORD(v34) == 0;
    else
      v16 = 1;
    if (!v16)
      v15 = (double)v34 / (double)HIDWORD(v34);
    if ((_DWORD)v35)
      v17 = HIDWORD(v35) == 0;
    else
      v17 = 1;
    if (!v17)
      v15 = v15 + (double)v35 / ((double)HIDWORD(v35) * 60.0);
    if ((_DWORD)v36 && HIDWORD(v36))
      v15 = v15 + (double)v36 / ((double)HIDWORD(v36) * 3600.0);
    if (*(_WORD *)a4 == 7)
    {
      v18 = 2000000000.0;
      if (v15 <= 2000000000.0)
        v18 = v15;
      if (v15 >= -2000000000.0)
        v19 = v18;
      else
        v19 = -2000000000.0;
      v20 = (void *)MEMORY[0x1E0CB3940];
      v21 = (int)fmod(v19 * 60.0, 60.0);
      v22 = fmod(v19 * 3600.0, 60.0);
      objc_msgSend_stringWithFormat_(v20, v23, (uint64_t)CFSTR("%.2d:%.2d:%05.2f"), v24, v25, (int)v19, v21, v22);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F63AC(a1);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6410(a3);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6390(a3);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v27, v28, v29, v26);
    }
    else
    {
      sub_1D53F63AC(a1);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6410(a3);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D53F6390(a3);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v30, v31, v32, v33, v15);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D52DFEFC(v26, v27, v28, v29);
    }

  }
}

void sub_1D53F9F74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v2;

  _Unwind_Resume(a1);
}

void sub_1D53F9FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  size_t v6;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  CFStringEncoding v20;
  __CFString *v21;
  void *v22;
  void *v23;
  void *v24;
  void *__p;
  _BYTE *v26;

  v6 = *(unsigned int *)(a4 + 4);
  if ((v6 - 9) >> 3 <= 0x4E0 && *(_WORD *)(a4 + 2) == 7)
  {
    sub_1D5285340(&__p, v6);
    v13 = *(_DWORD *)(a4 + 8);
    v14 = bswap32(v13);
    if (a6)
      v15 = v14;
    else
      v15 = v13;
    v16 = sub_1D53F5F40(a1, (uint64_t)__p, v26 - (_BYTE *)__p, a5, v15);
    v17 = __p;
    if (v16 == v26 - (_BYTE *)__p)
    {
      v18 = *(_QWORD *)__p;
      if (*(_QWORD *)__p == 0x45444F43494E55)
        v19 = 256;
      else
        v19 = -1;
      if (v18 == 0x4949435341)
        v19 = 1536;
      if (v18 == 5458250)
        v20 = 1570;
      else
        v20 = v19;
      if (v20 != -1)
      {
        v21 = (__CFString *)CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)__p + 8, v16 - 8, v20, 1u);
        if (v21)
        {
          sub_1D53F63AC(a1);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F6410(a3);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D53F6390(a3);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D52DFEFC(v22, v23, v24, v21);

        }
      }
      v17 = __p;
    }
    if (v17)
    {
      v26 = v17;
      operator delete(v17);
    }
  }
}

void sub_1D53FA164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v15 = v11;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

id sub_1D53FA1B8(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  sub_1D53F63AC(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  v5 = (void *)*MEMORY[0x1E0CBCB50];
  if (a2)
    sub_1D52E1FDC(v3, v5, 0);
  else
    sub_1D5297C60(v3, v5, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_1D53FA220(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D53FA234(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;

  v3 = a1;
  v4 = a2;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v5, v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v3, v10, (uint64_t)v9, (uint64_t)v4, v11);

  return v9;
}

void sub_1D53FA298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D53FA2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v7;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  void *__p;
  _BYTE *v21;

  v7 = *(unsigned int *)(a4 + 4);
  if ((v7 - 1) <= 0xF423F && a7 != 0)
  {
    v13 = *(unsigned __int16 *)(a4 + 2);
    if (v13 > 0x6F)
      v14 = 0;
    else
      v14 = qword_1D545A700[v13];
    sub_1D5285340(&__p, v14 * v7);
    v15 = *(_DWORD *)(a4 + 8);
    v16 = bswap32(v15);
    if (a6)
      v17 = v16;
    else
      v17 = v15;
    v18 = sub_1D53F5F40(a1, (uint64_t)__p, v21 - (_BYTE *)__p, a5, v17);
    v19 = __p;
    if (v18 == v21 - (_BYTE *)__p)
    {
      sub_1D53F63AC(a1);
      CGImagePluginReadRawIPTCProps();
      v19 = __p;
    }
    if (v19)
    {
      v21 = v19;
      operator delete(v19);
    }
  }
}

void sub_1D53FA394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D53FA3B0(_BYTE *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  char *v15;

  v15 = a2;
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v15, (uint64_t)CFSTR("%@/GPS"), v11, v12, v15);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = sub_1D53F732C((uint64_t)a1, v15, a3, a4, a5, a6);
  sub_1D53FA480(a1, v13, word_1E999F520, v14, a5, a6);

}

void sub_1D53FA460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D53FA480(_BYTE *a1, void *a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11;
  uint64_t v12;
  unsigned __int16 v13;
  unsigned int v14;
  int64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int16 *v19;
  unsigned int v20;
  unsigned int v21;
  char *v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unsigned int v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(_BYTE *, id, unsigned __int16 *, unsigned __int16 *, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  void *exception;
  unsigned int v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *__p;
  _BYTE *v40;
  unsigned int v41;
  unsigned __int16 v42;

  v11 = a2;
  v12 = (*(uint64_t (**)(_BYTE *, unsigned __int16 *))(*(_QWORD *)a1 + 88))(a1, a3);
  v42 = 0;
  v41 = 0;
  if (sub_1D53F5F40((uint64_t)a1, (uint64_t)&v42, 2, a5, a4) != 2)
    goto LABEL_49;
  v13 = v42;
  v14 = bswap32(v42) >> 16;
  if ((_DWORD)a6)
    v13 = v14;
  v42 = v13;
  if (v13 > 0xFEu)
  {
LABEL_49:
    v33 = 0;
    goto LABEL_47;
  }
  sub_1D53FEB04(&__p, v13);
  v15 = v40 - (_BYTE *)__p;
  v16 = a4 + 2;
  if (sub_1D53F5F40((uint64_t)a1, (uint64_t)__p, v40 - (_BYTE *)__p, a5, v16) == v15
    && sub_1D53F5F40((uint64_t)a1, (uint64_t)&v41, 4, a5, v15 + v16) == 4)
  {
    v17 = v41;
    if ((_DWORD)a6)
    {
      v17 = bswap32(v41);
      if (v42)
      {
        v18 = 0;
        v19 = (unsigned __int16 *)__p;
        do
        {
          *v19 = bswap32(*v19) >> 16;
          v19[1] = bswap32(v19[1]) >> 16;
          *((_DWORD *)v19 + 1) = bswap32(*((_DWORD *)v19 + 1));
          ++v18;
          v19 += 6;
        }
        while (v18 < v42);
      }
    }
    if ((_DWORD)v12)
    {
      v20 = v42;
      if (v42)
      {
        v21 = 0;
        v22 = (char *)__p + 2;
        do
        {
          if (*((unsigned __int16 *)v22 - 1) == 50706 && *(_WORD *)v22 == 1 && *(_DWORD *)(v22 + 2) == 4)
            a1[193] = 1;
          ++v21;
          v22 += 12;
        }
        while (v21 < v20);
      }
      if (a3 == (unsigned __int16 *)&unk_1E999F520 && v20 < 2)
        goto LABEL_45;
      if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1) & 1) == 0
        && (*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 24))(a1))
      {
        a3 = (unsigned __int16 *)&unk_1E999E990;
      }
      goto LABEL_27;
    }
    if (a3 != (unsigned __int16 *)&unk_1E999F520 || v42 >= 2u)
    {
LABEL_27:
      sub_1D53AE248((uint64_t)a1, &v37);
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
      v36 = v17;
      v24 = v38;
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (v42)
      {
        v27 = 0;
        v28 = (unsigned __int16 *)__p;
        do
        {
          LODWORD(v37) = 0;
          v29 = sub_1D53F5E44((uint64_t)a1, v28, a3, &v37);
          if (v29)
          {
            v30 = v28[1];
            if (v30 > 0x6F)
              v31 = 0;
            else
              v31 = qword_1D545A700[v30];
            if (v31 * (unint64_t)*((unsigned int *)v28 + 1) >= v23)
            {
              exception = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1D8271938](exception, "RawCameraException");
              __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
            }
            v32 = (void (*)(_BYTE *, id, unsigned __int16 *, unsigned __int16 *, uint64_t, uint64_t, uint64_t))*((_QWORD *)v29 + 3);
            if (v32)
              v32(a1, v11, v29, v28, a5, a6, v12);
            else
              sub_1D53F68C8((uint64_t)a1, v11, (uint64_t)v29, (uint64_t)v28, a5, a6);
          }
          ++v27;
          v28 += 6;
        }
        while (v27 < v42);
      }
      v17 = v36;
    }
  }
  else
  {
    v17 = 0;
  }
LABEL_45:
  v33 = v17;
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
LABEL_47:

  return v33;
}

void sub_1D53FA830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;

  sub_1D5282EB4((uint64_t)&a11);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1D53FA88C(_BYTE *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6;

  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("%@/Makernote"), a4, a5, a2);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 136))(a1);
  a1[194] = 1;

}

void sub_1D53FA920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53FA934(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;

  v10 = a2;
  if (*(_DWORD *)(a4 + 4) >= 0x15u)
  {
    v17 = v10;
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v10, (uint64_t)CFSTR("%@/Makernote"), v11, v12, v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = *(_DWORD *)(a4 + 8);
    v15 = bswap32(v14);
    if ((_DWORD)a6)
      v16 = v15;
    else
      v16 = v14;
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v13, v16, a5, a6, 1);

    v10 = v17;
  }

}

void sub_1D53FA9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D53FAA00(_BYTE *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  char *v15;

  v15 = a2;
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v15, (uint64_t)CFSTR("%@/Exif"), v11, v12, v15);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = sub_1D53F732C((uint64_t)a1, v15, a3, a4, a5, a6);
  sub_1D53FA480(a1, v13, word_1E999EA08, v14, a5, a6);

}

void sub_1D53FAAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D53FAAD0(_BYTE *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _BOOL4 v35;
  void *v36;
  int v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  id v43;
  unint64_t v44;

  v43 = a2;
  sub_1D53F732C((uint64_t)a1, v43, a3, a4, a5, a6);
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 184))(a1))
  {
    sub_1D53F63AC((uint64_t)a1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6410(a3);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = a3;
    sub_1D53F6390(a3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53FAE18(v11, v12, v13);
    v42 = (void *)objc_claimAutoreleasedReturnValue();

    v18 = 0;
    v19 = 0;
    v20 = (void *)*MEMORY[0x1E0CBD090];
    while (v19 < objc_msgSend_count(v42, v14, v15, v16, v17))
    {
      v44 = v19;
      sub_1D53BE148(v42, (const char *)&v44, v21, v22, v23);
      v24 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v24)
        goto LABEL_13;
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v25, (uint64_t)CFSTR("%@/SubIFD%d"), v26, v27, v43, v19);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v33) = objc_msgSend_intValue(v24, v29, v30, v31, v32);
      sub_1D53F63AC((uint64_t)a1);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = sub_1D53FAE98(v34, v20, CFSTR("_SubfileType"));

      if (v35
        && (sub_1D53F63AC((uint64_t)a1),
            v36 = (void *)objc_claimAutoreleasedReturnValue(),
            v37 = sub_1D53FAF14(v36, v20, CFSTR("_SubfileType")),
            v36,
            !v37))
      {
        v33 = v33;
      }
      else
      {
        v33 = v33;
        sub_1D53FA480(a1, v28, word_1E999D268, v33, a5, a6);
      }
      sub_1D53FA480(a1, v28, word_1E999D060, v33, a5, a6);
      if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 24))(a1))
        sub_1D53FA480(a1, v28, word_1E999DAB8, v33, a5, a6);

      ++v19;
      v18 = v24;
    }

LABEL_13:
    a3 = v41;
  }
  sub_1D53F63AC((uint64_t)a1);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F6410(a3);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F6390(a3);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53FAF90(v38, v39, v40);

}

void sub_1D53FAD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id sub_1D53FAE18(void *a1, void *a2, void *a3)
{
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v5 = a3;
  sub_1D5297C60(a1, a2, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D52EAE5C(v6, v5, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1D53FAE7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_1D53FAE98(void *a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;

  v5 = a3;
  sub_1D5297C60(a1, a2, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = sub_1D5297D80(v6, v5);

  return v7;
}

void sub_1D53FAEF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1D53FAF14(void *a1, void *a2, void *a3)
{
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = a3;
  sub_1D5297C60(a1, a2, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = sub_1D5297AC0(v6, v5, v7, v8, v9);

  return v10;
}

void sub_1D53FAF74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53FAF90(void *a1, void *a2, void *a3)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v9 = a3;
  sub_1D5297C60(a1, a2, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_removeObjectForKey_(v5, v6, (uint64_t)v9, v7, v8);

}

void sub_1D53FAFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D53FB008(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  _OWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v11 = *(unsigned __int16 *)(a4 + 2);
  if (v11 > 0x6F)
    v12 = 0;
  else
    v12 = qword_1D545A700[v11];
  v13 = *(unsigned int *)(a4 + 4);
  v14 = v12 * v13;
  if ((unint64_t)(v12 * v13) > 0x28)
    goto LABEL_19;
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  if (v14 < 5)
  {
    if (v12 != 2 || !a6)
      goto LABEL_19;
    goto LABEL_16;
  }
  v15 = *(_DWORD *)(a4 + 8);
  v16 = bswap32(v15);
  if (a6)
    v17 = v16;
  else
    v17 = v15;
  v18 = sub_1D53F5F40(a1, (uint64_t)v21, v14, a5, v17);
  if (v12 == 2 && v18 == v14 && a6 != 0)
  {
    LODWORD(v13) = *(_DWORD *)(a4 + 4);
LABEL_16:
    if ((_DWORD)v13)
    {
      v20 = 0;
      do
      {
        *((_WORD *)v21 + (unsigned __int16)v20) = bswap32(*((unsigned __int16 *)v21 + (unsigned __int16)v20)) >> 16;
        ++v20;
      }
      while (v13 > (unsigned __int16)v20);
    }
  }
LABEL_19:

}

void sub_1D53FB144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53FB15C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  BOOL v23;
  char v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = *(unsigned __int16 *)(a4 + 2);
  if (v12 > 0x6F)
    v13 = 0;
  else
    v13 = qword_1D545A700[v12];
  v14 = v13 * *(unsigned int *)(a4 + 4);
  if (v14 > 0x28)
    goto LABEL_23;
  v40 = 0;
  v38 = 0u;
  v39 = 0u;
  v15 = *(_DWORD *)(a4 + 8);
  if (v14 < 5)
  {
    LODWORD(v38) = *(_DWORD *)(a4 + 8);
  }
  else
  {
    v16 = bswap32(v15);
    if (a6)
      v17 = v16;
    else
      v17 = v15;
    if (sub_1D53F5F40(a1, (uint64_t)&v38, v14, a5, v17) != v14)
      goto LABEL_23;
  }
  if (v13 == 2)
  {
    if (a6)
    {
      v18 = *(_DWORD *)(a4 + 4);
      if (v18)
      {
        v19 = 0;
        do
        {
          *((_WORD *)&v38 + (unsigned __int16)v19) = bswap32(*((unsigned __int16 *)&v38 + (unsigned __int16)v19)) >> 16;
          ++v19;
        }
        while (v18 > (unsigned __int16)v19);
      }
    }
  }
  sub_1D53F63AC(a1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F6410(a3);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D53F6390(a3);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = sub_1D53FAE98(v20, v21, v22);

  if (v14)
    v24 = v23;
  else
    v24 = 1;
  if ((v24 & 1) == 0)
  {
    sub_1D53F63AC(a1);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6410(a3);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6390(a3);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F99E4(v25, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    v32 = 0;
    v33 = 0;
    do
    {
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v29, *((unsigned __int8 *)&v38 + v32), v30, v31, v38, v39, v40, v41);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v28, v35, (uint64_t)v34, v36, v37);

      v32 = (unsigned __int16)++v33;
    }
    while (v14 > (unsigned __int16)v33);

  }
LABEL_23:

}

void sub_1D53FB38C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D53FB40C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  id v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = *(unsigned __int16 *)(a4 + 2);
  if (v12 > 0x6F)
    v13 = 0;
  else
    v13 = qword_1D545A700[v12];
  v14 = v13 * *(unsigned int *)(a4 + 4);
  if (v14 > 0x28)
    goto LABEL_19;
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v15 = *(_DWORD *)(a4 + 8);
  if (v14 >= 5)
  {
    v16 = bswap32(v15);
    if (a6)
      v17 = v16;
    else
      v17 = v15;
    if (sub_1D53F5F40(a1, (uint64_t)&v33, v14, a5, v17) != v14)
      goto LABEL_19;
  }
  else
  {
    LODWORD(v33) = *(_DWORD *)(a4 + 8);
  }
  if (v13 == 2)
  {
    if (a6)
    {
      v18 = *(_DWORD *)(a4 + 4);
      if (v18)
      {
        v19 = 0;
        do
        {
          *((_WORD *)&v33 + (unsigned __int16)v19) = bswap32(*((unsigned __int16 *)&v33 + (unsigned __int16)v19)) >> 16;
          ++v19;
        }
        while (v18 > (unsigned __int16)v19);
      }
    }
  }
  if (v14 >= 5)
  {
    sub_1D53F63AC(a1);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6410(a3);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F6390(a3);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D53F99E4(v20, v21, v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    v27 = 4;
    v28 = 4;
    do
    {
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v24, *((unsigned __int8 *)&v33 + v27), v25, v26, v33, v34, v35, v36);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v23, v30, (uint64_t)v29, v31, v32);

      v27 = (unsigned __int16)++v28;
    }
    while (v14 > (unsigned __int16)v28);

  }
LABEL_19:

}

void sub_1D53FB5E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *sub_1D53FB640()
{
  return &unk_1E999D478;
}

BOOL sub_1D53FB64C(uint64_t a1, void *a2)
{
  return a2 == &unk_1E999D478;
}

uint64_t sub_1D53FB660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v31 = 0;
  v30 = 0;
  if (sub_1D53F5F40(a1, (uint64_t)&v30, 10, a5, a3) != 10)
    return 0;
  if (v30 != 0x4F6920656C707041 || v31 != 83)
    return 0;
  v11 = (void *)MEMORY[0x1D8272058]();
  objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v12, a4 + 62, v13, v14);
  v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v20 = objc_msgSend_mutableBytes(v15, v16, v17, v18, v19);
  *(_OWORD *)v20 = xmmword_1D545A7C0;
  *(_QWORD *)(v20 + 16) = 0x100000004006987;
  *(_DWORD *)(v20 + 24) = 436207616;
  *(_DWORD *)(v20 + 28) = 0;
  *(_BYTE *)(v20 + 32) = 0;
  *(_OWORD *)(v20 + 33) = xmmword_1D545A7D0;
  *(_BYTE *)(v20 + 49) = 7;
  *(_DWORD *)(v20 + 50) = bswap32(a4);
  *(_DWORD *)(v20 + 54) = 939524096;
  *(_DWORD *)(v20 + 58) = 0;
  v21 = objc_retainAutorelease(v15);
  v26 = objc_msgSend_mutableBytes(v21, v22, v23, v24, v25);
  sub_1D53F5F40(a1, v26 + 62, a4, a5, a3);
  v29 = v21;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v27, (uint64_t)&v29, 1, v28);
  CGImageCreateMetadataFromDataArray();

  objc_autoreleasePoolPop(v11);
  return 1;
}

void sub_1D53FB86C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

BOOL sub_1D53FB8AC(_BYTE *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  int v12;
  void *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void *exception;
  uint64_t v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  _QWORD v32[4];

  v32[3] = *MEMORY[0x1E0C80C00];
  v9 = a2;
  memset(v32, 0, 21);
  v10 = sub_1D53F5F40((uint64_t)a1, (uint64_t)v32, 20, a4, a3);
  if (v10 == 20)
  {
    if (v32[0] == 0x614D0065626F6441 && LOWORD(v32[1]) == 20075)
    {
      v21 = *(_DWORD *)((char *)&v32[1] + 2);
      sub_1D53AE248((uint64_t)a1, &v31);
      v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v31 + 16))(v31);
      v23 = bswap32(v21);
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
      if (*((_QWORD *)&v31 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (v22 < v23)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      if ((*(unsigned int (**)(_BYTE *, id))(*(_QWORD *)a1 + 136))(a1, v9))
        sub_1D53FA480(a1, &stru_1E99A7480, word_1E999D9A8, a3, a4, a5);
    }
    else if (v32[0] == 0x205841544E4550 || v32[0] == 0x474E55534D4153)
    {
      v12 = LOBYTE(v32[1]);
      sub_1D53AE248((uint64_t)a1, &v29);
      sub_1D53F63AC((uint64_t)a1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      sub_1D541B814(&v29, v13, 0, &v31);

      v14 = a4 + a3;
      v15 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t, BOOL, uint64_t, _QWORD))(*(_QWORD *)v31 + 8))(v31, 10, 0, v14, v12 == 77, 1, 0);
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
      if (*((_QWORD *)&v31 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }

  return v10 == 20;
}

void sub_1D53FBBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_1D53FBC18()
{
  return 0;
}

uint64_t sub_1D53FBC20(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned __int16 v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned __int16 *v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *exception;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *__p;
  std::__shared_weak_count *v36;
  _QWORD v37[2];

  v37[1] = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  v37[0] = 0;
  v3 = v2;
  if (sub_1D53F5F40(a1, (uint64_t)v37, 8, v2, 0) != 8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v4 = LOBYTE(v37[0]);
  if (LOBYTE(v37[0]) != BYTE1(v37[0]))
  {
    v29 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v29, "RawCameraException");
    __cxa_throw(v29, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if ((LOBYTE(v37[0]) | 4) != 0x4D)
  {
    v34 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v34, "RawCameraException");
    __cxa_throw(v34, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v5 = bswap32(WORD1(v37[0])) >> 16;
  if (LOBYTE(v37[0]) == 77)
    v6 = v5;
  else
    v6 = WORD1(v37[0]);
  if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 120))(a1, v6) & 1) == 0)
  {
    v30 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v30, "RawCameraException");
    __cxa_throw(v30, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v7 = bswap32(HIDWORD(v37[0]));
  if (v4 == 77)
    v8 = v7;
  else
    v8 = HIDWORD(v37[0]);
  sub_1D53AE248(a1, &__p);
  v9 = (*(uint64_t (**)(void *))(*(_QWORD *)__p + 16))(__p);
  v10 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v8 >= v9)
  {
    v31 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v31, "RawCameraException");
    __cxa_throw(v31, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v13 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  v14 = sub_1D53FA480((_BYTE *)a1, CFSTR("IFD0"), v13, v8, v3, v4 == 77);
  if (v14 >= v9)
  {
    v32 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v32, "RawCameraException");
    __cxa_throw(v32, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) & 1) == 0)
  {
    if (v14)
    {
      v15 = sub_1D53FA480((_BYTE *)a1, CFSTR("IFD1"), word_1E999D818, v14, v3, v4 == 77);
      if (v15 >= v9)
      {
        v33 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v33, "RawCameraException");
        __cxa_throw(v33, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      if (v15)
        sub_1D53FA480((_BYTE *)a1, CFSTR("IFD2"), word_1E999D908, v15, v3, v4 == 77);
    }
    if (*(_QWORD *)(a1 + 144))
    {
      sub_1D53F63AC(a1);
      objc_msgSend_bytes(*(void **)(a1 + 144), v16, v17, v18, v19);
      objc_msgSend_length(*(void **)(a1 + 144), v20, v21, v22, v23);
      CGImagePluginReadRawXMPProps();
    }
    else if (*(_QWORD *)(a1 + 152))
    {
      v25 = *(_QWORD *)(a1 + 160);
      if (v25)
      {
        sub_1D5285340(&__p, v25);
        v26 = sub_1D53F5F40(a1, (uint64_t)__p, (char *)v36 - (_BYTE *)__p, v3, *(_QWORD *)(a1 + 152));
        v27 = (std::__shared_weak_count *)__p;
        if (v26 == (char *)v36 - (_BYTE *)__p)
        {
          sub_1D53F63AC(a1);
          CGImagePluginReadRawXMPProps();
          v27 = (std::__shared_weak_count *)__p;
        }
        if (v27)
        {
          v36 = v27;
          operator delete(v27);
        }
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
}

