void sub_1D52F5E9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D52F5EB8(uint64_t *a1@<X1>, char *a2@<X2>, void **a3@<X3>, void **a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x4E0uLL);
  sub_1D52F5F38((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D52F5F24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D52F5F38(uint64_t a1, uint64_t *a2, char *a3, void **a4, void **a5)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E9976A48;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D52A7E98(a1 + 24, a2, *a3, *a4, *a5);
  *(_QWORD *)(a1 + 24) = off_1E9976700;
  *(_DWORD *)(a1 + 1204) = 0;
  *(_QWORD *)(a1 + 1216) = 0;
  *(_BYTE *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  return a1;
}

void sub_1D52F5F9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D52F5FB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9976A48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D52F5FC4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9976A48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D52F5FF8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_1D52F6008(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xD8uLL);
  sub_1D52F6088((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D52F6074(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D52F6088(uint64_t a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E9976A98;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D530B330(a1 + 24, a2, *a3, a4, a5);
  *(_QWORD *)(a1 + 24) = &unk_1E998BE48;
  *(_WORD *)(a1 + 210) = -1;
  return a1;
}

void sub_1D52F60DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D52F60F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9976A98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D52F6104(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9976A98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D52F6138(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

id sub_1D52F6148(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  _QWORD v53[11];
  _QWORD v54[11];
  _QWORD v55[2];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[12];
  _QWORD v67[4];

  v67[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], a2, (uint64_t)sub_1D5280580, a4, a5);
  v5 = objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v6, (uint64_t)sub_1D52F6538, v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v10, (uint64_t)sub_1D52F6544, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v14, (uint64_t)sub_1D52E8DA4, v15, v16);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v17, (uint64_t)sub_1D52F6550, v18, v19);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v20, (uint64_t)sub_1D52F655C, v21, v22);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v23, (uint64_t)sub_1D52F6568, v24, v25);
  v26 = objc_claimAutoreleasedReturnValue();
  v47 = *MEMORY[0x1E0CBD388];
  v55[0] = *MEMORY[0x1E0CBD368];
  v48 = v55[0];
  v55[1] = v47;
  v66[0] = MEMORY[0x1E0C9AAB0];
  v66[1] = CFSTR("com.adobe.raw-image");
  v45 = *MEMORY[0x1E0CBD380];
  v56 = *MEMORY[0x1E0CBD348];
  v46 = v56;
  v57 = v45;
  v66[2] = CFSTR(".dng.");
  v66[3] = &unk_1E99CB010;
  v43 = *MEMORY[0x1E0CBD378];
  v58 = *MEMORY[0x1E0CBD370];
  v44 = v58;
  v59 = v43;
  v66[4] = &unk_1E99CB028;
  v66[5] = v5;
  v27 = (void *)v5;
  v28 = *MEMORY[0x1E0CBD350];
  v60 = *MEMORY[0x1E0CBD330];
  v42 = v60;
  v61 = v28;
  v66[6] = v9;
  v66[7] = v13;
  v30 = (void *)v9;
  v31 = *MEMORY[0x1E0CBD358];
  v62 = *MEMORY[0x1E0CBD338];
  v29 = v62;
  v63 = v31;
  v66[8] = v52;
  v66[9] = v51;
  v33 = *MEMORY[0x1E0CBD340];
  v64 = *MEMORY[0x1E0CBD360];
  v32 = v64;
  v65 = v33;
  v66[10] = v50;
  v66[11] = v26;
  v49 = (void *)v26;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v34, (uint64_t)v66, (uint64_t)v55, 12);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v67[0] = v41;
  v53[0] = v48;
  v53[1] = v47;
  v54[0] = MEMORY[0x1E0C9AAB0];
  v54[1] = CFSTR("com.dxo.raw-image");
  v53[2] = v46;
  v53[3] = v45;
  v54[2] = CFSTR(".dxo.");
  v54[3] = &unk_1E99CB010;
  v53[4] = v44;
  v53[5] = v43;
  v54[4] = &unk_1E99CB028;
  v54[5] = v27;
  v53[6] = v42;
  v53[7] = v28;
  v54[6] = v30;
  v54[7] = v13;
  v53[8] = v29;
  v53[9] = v31;
  v54[8] = v52;
  v54[9] = v51;
  v53[10] = v32;
  v54[10] = v50;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v35, (uint64_t)v54, (uint64_t)v53, 11);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v67[1] = v36;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v37, (uint64_t)v67, 2, v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();

  return v39;
}

void sub_1D52F6494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1D52F6538(const void *a1, uint64_t a2, uint64_t a3)
{
  sub_1D52E7A20(a1, a2, a3, &unk_1E9976C90);
}

uint64_t sub_1D52F6544(os_signpost_id_t a1)
{
  return sub_1D52E8C40(a1);
}

uint64_t sub_1D52F6550(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1D52E7438(a1, a2, a3, &unk_1E9976C90);
}

uint64_t sub_1D52F655C(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1D52E9A7C(a1, a2, a3, &unk_1E9976C90);
}

uint64_t sub_1D52F6568(os_signpost_id_t a1, unint64_t a2, void *a3)
{
  sub_1D52E9CD4(a1, a2, a3, &unk_1E9976C90);
  return objc_claimAutoreleasedReturnValue();
}

void sub_1D52F6588(uint64_t *a1@<X1>, char a2@<W2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X8>)
{
  __int128 v8;
  id v9;
  id v10;
  char v11;

  v11 = a2;
  v10 = a3;
  v9 = a4;
  sub_1D530544C(a1, &v11, &v10, &v9, &v8);
  *a5 = v8;

}

void sub_1D52F6604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D52F6620(uint64_t a1, uint64_t *a2, char a3, void *a4, void *a5)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  sub_1D52A7E98(a1, a2, a3, a4, a5);
  *v6 = off_1E9976CC0;
  sub_1D52850A0(v6 + 148, "IFD0");
  sub_1D52850A0((_QWORD *)(a1 + 1208), "IFD0:CAMERAPROFILES0:IFD0");
  *(_QWORD *)(a1 + 1232) = 0x1000000000000;
  *(_WORD *)(a1 + 1240) = 1;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  v7 = operator new(0x18uLL);
  *(_QWORD *)(a1 + 1288) = v7;
  *(_QWORD *)(a1 + 1304) = v7 + 3;
  v7[2] = 0x3FF0000000000000;
  *(_OWORD *)v7 = xmmword_1D5449948;
  *(_QWORD *)(a1 + 1296) = v7 + 3;
  *(_QWORD *)(a1 + 1328) = 0;
  *(_QWORD *)(a1 + 1320) = 0;
  *(_QWORD *)(a1 + 1312) = a1 + 1320;
  *(_QWORD *)(a1 + 1352) = 0;
  *(_QWORD *)(a1 + 1344) = 0;
  *(_QWORD *)(a1 + 1336) = a1 + 1344;
  *(_QWORD *)(a1 + 1376) = 0;
  *(_QWORD *)(a1 + 1368) = 0;
  *(_QWORD *)(a1 + 1360) = a1 + 1368;
  *(_QWORD *)(a1 + 1400) = 0;
  *(_QWORD *)(a1 + 1392) = 0;
  *(_QWORD *)(a1 + 1384) = a1 + 1392;
  *(_QWORD *)(a1 + 1416) = 0;
  *(_QWORD *)(a1 + 1424) = 0;
  *(_QWORD *)(a1 + 1408) = a1 + 1416;
  *(_QWORD *)(a1 + 1448) = 0;
  *(_QWORD *)(a1 + 1440) = 0;
  *(_QWORD *)(a1 + 1432) = a1 + 1440;
  *(_QWORD *)(a1 + 1464) = 0;
  *(_QWORD *)(a1 + 1472) = 0;
  *(_QWORD *)(a1 + 1456) = a1 + 1464;
  *(_QWORD *)(a1 + 1488) = 0;
  *(_QWORD *)(a1 + 1496) = 0;
  *(_QWORD *)(a1 + 1480) = a1 + 1488;
  *(_QWORD *)(a1 + 1512) = 0;
  *(_QWORD *)(a1 + 1520) = 0;
  *(_QWORD *)(a1 + 1504) = a1 + 1512;
  *(_QWORD *)(a1 + 1536) = 0;
  *(_QWORD *)(a1 + 1544) = 0;
  *(_QWORD *)(a1 + 1528) = a1 + 1536;
  *(_QWORD *)(a1 + 1568) = 0;
  *(_QWORD *)(a1 + 1560) = 0;
  *(_QWORD *)(a1 + 1552) = a1 + 1560;
  *(_QWORD *)(a1 + 1592) = 0;
  *(_QWORD *)(a1 + 1584) = 0;
  *(_QWORD *)(a1 + 1576) = a1 + 1584;
  *(double *)(a1 + 1600) = sub_1D536C2E0();
  *(_QWORD *)(a1 + 1608) = v8;
  *(_DWORD *)(a1 + 1616) = 0;
  *(_QWORD *)(a1 + 1640) = 0;
  *(_QWORD *)(a1 + 1632) = 0;
  *(_QWORD *)(a1 + 1624) = a1 + 1632;
  *(_QWORD *)(a1 + 1664) = 0;
  *(_QWORD *)(a1 + 1656) = 0;
  *(_QWORD *)(a1 + 1648) = a1 + 1656;
  *(_QWORD *)(a1 + 1688) = 0;
  *(_QWORD *)(a1 + 1680) = 0;
  *(_QWORD *)(a1 + 1672) = a1 + 1680;
  *(_QWORD *)(a1 + 1712) = 0;
  *(_QWORD *)(a1 + 1704) = 0;
  *(_QWORD *)(a1 + 1696) = a1 + 1704;
  *(_QWORD *)(a1 + 1736) = 0;
  *(_QWORD *)(a1 + 1728) = 0;
  *(_QWORD *)(a1 + 1720) = a1 + 1728;
  *(_QWORD *)(a1 + 1752) = 0;
  *(_QWORD *)(a1 + 1760) = 0;
  *(_QWORD *)(a1 + 1744) = a1 + 1752;
  *(_QWORD *)(a1 + 1784) = 0;
  *(_QWORD *)(a1 + 1776) = 0;
  *(_QWORD *)(a1 + 1768) = a1 + 1776;
  *(_QWORD *)(a1 + 1800) = 0;
  *(_QWORD *)(a1 + 1808) = 0;
  *(_QWORD *)(a1 + 1792) = a1 + 1800;
  *(_QWORD *)(a1 + 1824) = 0;
  *(_QWORD *)(a1 + 1832) = 0;
  *(_QWORD *)(a1 + 1816) = a1 + 1824;
  *(_QWORD *)(a1 + 1848) = 0;
  *(_QWORD *)(a1 + 1856) = 0;
  *(_QWORD *)(a1 + 1840) = a1 + 1848;
  *(_QWORD *)(a1 + 1872) = 0;
  *(_QWORD *)(a1 + 1880) = 0;
  *(_QWORD *)(a1 + 1864) = a1 + 1872;
  *(_QWORD *)(a1 + 1904) = 0;
  *(_QWORD *)(a1 + 1896) = 0;
  *(_QWORD *)(a1 + 1888) = a1 + 1896;
  *(_QWORD *)(a1 + 1912) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1920) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1944) = 0;
  *(_QWORD *)(a1 + 1936) = 0;
  *(_QWORD *)(a1 + 1928) = a1 + 1936;
  *(_BYTE *)(a1 + 1952) = 0;
  *(_BYTE *)(a1 + 1956) = 0;
  *(_BYTE *)(a1 + 1960) = 0;
  *(_BYTE *)(a1 + 1972) = 0;
  *(_BYTE *)(a1 + 1976) = 0;
  *(_BYTE *)(a1 + 1988) = 0;
  *(_BYTE *)(a1 + 1992) = 0;
  *(_BYTE *)(a1 + 2112) = 0;
  *(_QWORD *)(a1 + 2128) = 0;
  *(_QWORD *)(a1 + 2136) = 0;
  *(_QWORD *)(a1 + 2120) = a1 + 2128;
  *(_QWORD *)(a1 + 2152) = 0;
  *(_QWORD *)(a1 + 2160) = 0;
  *(_QWORD *)(a1 + 2144) = a1 + 2152;
  *(_QWORD *)(a1 + 2232) = 0;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_OWORD *)(a1 + 2216) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_QWORD *)(a1 + 2256) = 0;
  *(_QWORD *)(a1 + 2248) = 0;
  *(_QWORD *)(a1 + 2240) = a1 + 2248;
  *(_QWORD *)(a1 + 2280) = 0;
  *(_QWORD *)(a1 + 2272) = 0;
  *(_QWORD *)(a1 + 2264) = a1 + 2272;
  *(_QWORD *)(a1 + 2304) = 0;
  *(_QWORD *)(a1 + 2296) = 0;
  *(_QWORD *)(a1 + 2288) = a1 + 2296;
  *(_QWORD *)(a1 + 2328) = 0;
  *(_QWORD *)(a1 + 2320) = 0;
  *(_QWORD *)(a1 + 2312) = a1 + 2320;
  *(_QWORD *)(a1 + 2352) = 0;
  *(_QWORD *)(a1 + 2344) = 0;
  *(_QWORD *)(a1 + 2336) = a1 + 2344;
  *(_QWORD *)(a1 + 2376) = 0;
  *(_QWORD *)(a1 + 2368) = 0;
  *(_QWORD *)(a1 + 2360) = a1 + 2368;
  *(_QWORD *)(a1 + 2400) = 0;
  *(_QWORD *)(a1 + 2392) = 0;
  *(_QWORD *)(a1 + 2384) = a1 + 2392;
  *(_QWORD *)(a1 + 2424) = 0;
  *(_QWORD *)(a1 + 2416) = 0;
  *(_QWORD *)(a1 + 2408) = a1 + 2416;
  *(_QWORD *)(a1 + 2448) = 0;
  *(_QWORD *)(a1 + 2440) = 0;
  *(_QWORD *)(a1 + 2432) = a1 + 2440;
  *(_QWORD *)(a1 + 2472) = 0;
  *(_QWORD *)(a1 + 2464) = 0;
  *(_QWORD *)(a1 + 2456) = a1 + 2464;
  *(_QWORD *)(a1 + 2496) = 0;
  *(_QWORD *)(a1 + 2488) = 0;
  *(_QWORD *)(a1 + 2480) = a1 + 2488;
  return a1;
}

void sub_1D52F69DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v24;
  void *v25;

  sub_1D5294068(v16, *(_QWORD **)(v14 + 1584));
  sub_1D5294068(v22, *(_QWORD **)(v14 + 1560));
  sub_1D52940F4(v21, *(char **)(v14 + 1536));
  sub_1D52940F4(v20, *(char **)(v14 + 1512));
  sub_1D5294068(v19, *(_QWORD **)(v14 + 1488));
  sub_1D52940F4(v18, *(char **)(v14 + 1464));
  sub_1D52940F4(v15, *(char **)(v14 + 1440));
  sub_1D52940F4(v17, *(char **)(v14 + 1416));
  sub_1D52940F4(a10, *(char **)(v14 + 1392));
  sub_1D52940F4(a11, *(char **)(v14 + 1368));
  sub_1D52940F4(a12, *(char **)(v14 + 1344));
  sub_1D52B2424(a9, *(_QWORD **)(v14 + 1320));
  v24 = *(void **)(v14 + 1288);
  if (v24)
  {
    *(_QWORD *)(v14 + 1296) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(v14 + 1248);
  if (v25)
  {
    *(_QWORD *)(v14 + 1256) = v25;
    operator delete(v25);
  }
  if (*(char *)(v14 + 1231) < 0)
    operator delete(*a13);
  if (*(char *)(v14 + 1207) < 0)
    operator delete(*a14);
  sub_1D52B2190(v14);
  _Unwind_Resume(a1);
}

id sub_1D52F6AE4(uint64_t a1, int a2, int a3, int a4)
{
  void *v8;
  void *__p[2];
  char v11;

  sub_1D52850A0(__p, "");
  sub_1D52F6B7C(a1, a2, a3, (uint64_t)__p, a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11 < 0)
    operator delete(__p[0]);
  return v8;
}

void sub_1D52F6B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1D52F6B7C(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void **v11;
  unsigned int v12;
  void **v13;
  double v14;
  void **v15;
  double v16;
  void **v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  int64_t v22;
  char v23;
  void **v24;
  void *v25;
  void **v26;
  void **v27;
  char v28;
  _BYTE *v29;
  void **v30;
  int64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void **v36;
  unsigned int v37;
  void **v38;
  unsigned int v39;
  void **v40;
  int v41;
  void **v42;
  int *v43;
  int v44;
  void **v45;
  int v46;
  void **v47;
  void **v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  NSObject *v53;
  NSObject *v54;
  const char *v55;
  int v56;
  void *v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  unsigned int i;
  void **v62;
  _BYTE *v63;
  int v64;
  void **v65;
  _BYTE *v66;
  size_t v67;
  const char *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int output_buffer_size;
  const char *v103;
  uint64_t v104;
  void **v105;
  uint64_t v106;
  void **v107;
  int *v108;
  int v109;
  void **v110;
  unsigned int *v111;
  size_t v112;
  const char *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  NSObject *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  const char *v153;
  void *v154;
  const char *v155;
  uint64_t v156;
  void *v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  void *v163;
  void *v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  NSObject *v169;
  void *v171;
  void *exception;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void **v184;
  void **v185;
  uint64_t v186;
  unsigned int v187;
  id v188;
  int v189;
  NSObject *v190;
  void **v193;
  void **v195;
  uint64_t v196;
  std::string v197;
  char v198;
  void **v199;
  void **v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  void *__p[2];
  uint64_t v210;
  const __CFString *v211;
  uint64_t v212;
  _QWORD v213[4];
  _QWORD v214[4];
  uint64_t v215;
  __int128 v216;
  uint64_t v217;
  _BYTE __dst[32];
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  _BYTE v228[28];
  uint64_t v229;

  v229 = *MEMORY[0x1E0C80C00];
  sub_1D52B1028(a1, a2, (uint64_t *)&v199);
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v6, v7, v8, v9);
  v188 = (id)objc_claimAutoreleasedReturnValue();
  v10 = v199;
  v193 = v200;
  if (v199 != v200)
  {
    v195 = (void **)(a1 + 784);
    v196 = a1 + 776;
    v187 = *MEMORY[0x1E0C9E018];
    v185 = (void **)(a1 + 928);
    v186 = a1 + 920;
    v184 = (void **)(a1 + 952);
    v189 = a5;
    do
    {
      v11 = sub_1D5294144(a1 + 2264, v10);
      if ((void **)(a1 + 2272) != v11)
      {
        v12 = *((unsigned __int16 *)v11 + 28);
        if (v12 >= 3)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](exception, "RawCameraException");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        if (v12 != a5)
          goto LABEL_160;
      }
      v13 = sub_1D5294144(a1 + 2288, v10);
      if ((void **)(a1 + 2296) == v13)
        v14 = 0.0;
      else
        v14 = *((double *)v13 + 7);
      v15 = sub_1D5294144(a1 + 2312, v10);
      if ((void **)(a1 + 2320) == v15)
        v16 = 1.0;
      else
        v16 = *((double *)v15 + 7);
      sub_1D5294144(a1 + 2336, v10);
      sub_1D5294144(a1 + 2360, v10);
      v197.__r_.__value_.__s.__data_[0] = 0;
      v198 = 0;
      memset(__dst, 0, 24);
      v17 = sub_1D5294144(a1 + 2408, v10);
      if ((void **)(a1 + 2416) != v17 || (v17 = sub_1D5294144(a1 + 2384, v10), (void **)(a1 + 2392) != v17))
      {
        std::string::operator=((std::string *)__dst, (const std::string *)(v17 + 7));
        sub_1D52F80E4(&v197, (const std::string *)__dst);
      }
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      if (!v198)
      {
LABEL_65:
        v36 = sub_1D5294144(a1 + 536, v10);
        if ((void **)(a1 + 544) == v36)
        {
          v179 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v179, "RawCameraException");
          __cxa_throw(v179, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        v37 = *((_DWORD *)v36 + 14);
        v38 = sub_1D5294144(a1 + 560, v10);
        if ((void **)(a1 + 568) == v38)
        {
          v180 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v180, "RawCameraException");
          __cxa_throw(v180, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        v39 = *((_DWORD *)v38 + 14);
        v40 = sub_1D5294144(a1 + 680, v10);
        if ((void **)(a1 + 688) == v40)
        {
          v182 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v182, "RawCameraException");
          __cxa_throw(v182, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        v41 = *((_DWORD *)v40 + 14);
        v42 = sub_1D5294144(a1 + 656, v10);
        if ((void **)(a1 + 664) == v42 || (v43 = (int *)v42[7], v42[8] == v43))
        {
          v178 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v178, "RawCameraException");
          __cxa_throw(v178, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        v44 = *v43;
        v45 = sub_1D5294144(a1 + 584, v10);
        if ((void **)(a1 + 592) == v45)
        {
          v181 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v181, "RawCameraException");
          __cxa_throw(v181, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        v46 = *((_DWORD *)v45 + 14);
        v47 = sub_1D5294144(a1 + 632, v10);
        if ((void **)(a1 + 640) == v47)
        {
LABEL_164:
          v173 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v173, "RawCameraException");
          __cxa_throw(v173, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        if (v46 == 7 || v46 == 52546 || v46 == 34892)
        {
          if (*((_DWORD *)v47 + 14) != a3)
            goto LABEL_164;
          if (v44 == 8)
          {
            if (v41 == 1)
            {
              v48 = sub_1D5294144(v196, v10);
              if (v195 == v48)
                v52 = 0;
              else
                v52 = ((_BYTE *)v48[8] - (_BYTE *)v48[7]) >> 2;
              objc_msgSend_dataWithCapacity_(MEMORY[0x1E0C99DF0], v49, 30000, v50, v51, v184);
              v53 = objc_claimAutoreleasedReturnValue();
              if (v52)
              {
                v60 = 0;
                for (i = 0; i < v52; v60 = ++i)
                {
                  v62 = sub_1D5294144(v196, v10);
                  if (v195 == v62
                    || (v63 = v62[7], v60 >= ((_BYTE *)v62[8] - v63) >> 2)
                    || (v64 = *(_DWORD *)&v63[4 * v60], v65 = sub_1D5294144(a1 + 800, v10), (void **)(a1 + 808) == v65)
                    || (v66 = v65[7], v60 >= ((_BYTE *)v65[8] - v66) >> 2))
                  {
                    v171 = __cxa_allocate_exception(0x10uLL);
                    MEMORY[0x1D8271938](v171, "RawCameraException");
                    __cxa_throw(v171, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
                  }
                  v67 = *(unsigned int *)&v66[4 * v60];
                  sub_1D5285340(__dst, v67);
                  sub_1D52917E4(a1, __p);
                  LODWORD(v215) = v64;
                  (*(void (**)(void *, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)__p[0] + 24))(__p[0], *(_QWORD *)__dst, *(_QWORD *)&__dst[8] - *(_QWORD *)__dst, &v215);
                  v70 = (std::__shared_weak_count *)__p[1];
                  if (__p[1])
                  {
                    v71 = (unint64_t *)((char *)__p[1] + 8);
                    do
                      v72 = __ldaxr(v71);
                    while (__stlxr(v72 - 1, v71));
                    if (!v72)
                    {
                      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                      std::__shared_weak_count::__release_weak(v70);
                    }
                  }
                  objc_msgSend_appendBytes_length_(v53, v68, *(uint64_t *)__dst, v67, v69);
                  if (*(_QWORD *)__dst)
                  {
                    *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
                    operator delete(*(void **)__dst);
                  }
                }
                goto LABEL_110;
              }
              v105 = sub_1D5294144(v186, v10);
              if (v185 == v105)
                goto LABEL_174;
              v106 = ((_BYTE *)v105[8] - (_BYTE *)v105[7]) >> 2;
              if (v106 == 1)
              {
                v107 = sub_1D5294144(v186, v10);
                if (v185 == v107
                  || (v108 = (int *)v107[7], v107[8] == v108)
                  || (v109 = *v108, v110 = sub_1D5294144(a1 + 944, v10), v184 == v110)
                  || (v111 = (unsigned int *)v110[7], v110[8] == v111))
                {
                  v176 = __cxa_allocate_exception(0x10uLL);
                  MEMORY[0x1D8271938](v176, "RawCameraException");
                  __cxa_throw(v176, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
                }
                v112 = *v111;
                sub_1D5285340(__dst, v112);
                sub_1D52917E4(a1, __p);
                LODWORD(v215) = v109;
                (*(void (**)(void *, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)__p[0] + 24))(__p[0], *(_QWORD *)__dst, *(_QWORD *)&__dst[8] - *(_QWORD *)__dst, &v215);
                v115 = (std::__shared_weak_count *)__p[1];
                if (__p[1])
                {
                  v116 = (unint64_t *)((char *)__p[1] + 8);
                  do
                    v117 = __ldaxr(v116);
                  while (__stlxr(v117 - 1, v116));
                  if (!v117)
                  {
                    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                    std::__shared_weak_count::__release_weak(v115);
                  }
                }
                objc_msgSend_appendBytes_length_(v53, v113, *(uint64_t *)__dst, v112, v114);
                if (*(_QWORD *)__dst)
                {
                  *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
                  operator delete(*(void **)__dst);
                }
LABEL_110:
                if (!objc_msgSend_length(v53, v73, v74, v75, v76))
                {
                  v174 = __cxa_allocate_exception(0x10uLL);
                  MEMORY[0x1D8271938](v174, "RawCameraException");
                  __cxa_throw(v174, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
                }
                objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v77, (v37 & 0x1FFFFFFF) * (unint64_t)v39, v78, v79);
                v190 = objc_claimAutoreleasedReturnValue();
                if (v46 == 52546)
                {
                  v118 = objc_retainAutorelease(v53);
                  objc_msgSend_mutableBytes(v118, v119, v120, v121, v122);
                  objc_msgSend_length(v118, v123, v124, v125, v126);
                  v127 = objc_retainAutorelease(v190);
                  objc_msgSend_mutableBytes(v127, v128, v129, v130, v131);
                  JxlDecoderCreate();
                  JxlDecoderSubscribeEvents();
                  if (JxlDecoderSetInput())
                    goto LABEL_167;
                  if (JxlDecoderProcessInput() != 64)
                    goto LABEL_167;
                  v227 = 0u;
                  memset(v228, 0, sizeof(v228));
                  v225 = 0u;
                  v226 = 0u;
                  v223 = 0u;
                  v224 = 0u;
                  v221 = 0u;
                  v222 = 0u;
                  v219 = 0u;
                  v220 = 0u;
                  memset(__dst, 0, sizeof(__dst));
                  if (JxlDecoderGetBasicInfo()
                    || *(_DWORD *)&__dst[12] != 8
                    || DWORD1(v220) != 1
                    || JxlDecoderProcessInput() != 256
                    || JxlDecoderGetColorAsEncodedProfile()
                    || JxlDecoderSetPreferredColorProfile()
                    || (v215 = DWORD1(v220) | 0x200000000,
                        v216 = xmmword_1D5447F70,
                        *(_QWORD *)&v207 = 0,
                        JxlDecoderImageOutBufferSize())
                    || JxlDecoderSetImageOutBuffer()
                    || JxlDecoderProcessInput() != 4096)
                  {
LABEL_167:
                    v177 = __cxa_allocate_exception(0x10uLL);
                    MEMORY[0x1D8271938](v177, "RawCameraException");
                    __cxa_throw(v177, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
                  }
                  JxlDecoderDestroy();
                  v104 = (uint64_t)v190;
                }
                else
                {
                  v80 = objc_retainAutorelease(v53);
                  v85 = objc_msgSend_mutableBytes(v80, v81, v82, v83, v84);
                  v90 = objc_msgSend_length(v80, v86, v87, v88, v89);
                  v91 = objc_retainAutorelease(v190);
                  v96 = objc_msgSend_mutableBytes(v91, v92, v93, v94, v95);
                  v101 = objc_msgSend_length(v91, v97, v98, v99, v100);
                  v207 = xmmword_1E9977008;
                  v208 = 0;
                  v205 = v85;
                  v206 = v90;
                  applejpeg_decode_create();
                  v216 = 0uLL;
                  v217 = 0;
                  v215 = v37 & 0x1FFFFFFF;
                  applejpeg_decode_set_option_stride();
                  v203 = 0;
                  v204 = 0;
                  v201 = v96;
                  v202 = v101;
                  output_buffer_size = applejpeg_decode_open_mem();
                  if (!output_buffer_size)
                  {
                    output_buffer_size = applejpeg_decode_set_option_outformat();
                    if (!output_buffer_size)
                    {
                      output_buffer_size = applejpeg_decode_get_output_buffer_size();
                      if (!output_buffer_size)
                        output_buffer_size = applejpeg_decode_image_all();
                    }
                  }
                  applejpeg_decode_destroy();
                  v104 = (uint64_t)v190;
                  if (output_buffer_size)
                  {
                    v175 = __cxa_allocate_exception(0x10uLL);
                    MEMORY[0x1D8271938](v175, "RawCameraException");
                    __cxa_throw(v175, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
                  }
                }
                objc_msgSend_imageWithBitmapData_bytesPerRow_size_format_colorSpace_(MEMORY[0x1E0C9DDC8], v103, v104, v37 & 0x1FFFFFFF, v187, 0, (double)v37, (double)v39);
                v132 = (void *)objc_claimAutoreleasedReturnValue();
                v213[0] = CFSTR("inputRVector");
                objc_msgSend_vectorWithX_Y_Z_W_(MEMORY[0x1E0C9DDF8], v133, v134, v135, v136, v16, 0.0, 0.0, 0.0);
                v137 = (void *)objc_claimAutoreleasedReturnValue();
                v214[0] = v137;
                v213[1] = CFSTR("inputGVector");
                objc_msgSend_vectorWithX_Y_Z_W_(MEMORY[0x1E0C9DDF8], v138, v139, v140, v141, 0.0, v16, 0.0, 0.0);
                v142 = (void *)objc_claimAutoreleasedReturnValue();
                v214[1] = v142;
                v213[2] = CFSTR("inputBVector");
                objc_msgSend_vectorWithX_Y_Z_W_(MEMORY[0x1E0C9DDF8], v143, v144, v145, v146, 0.0, 0.0, v16, 0.0);
                v147 = (void *)objc_claimAutoreleasedReturnValue();
                v214[2] = v147;
                v213[3] = CFSTR("inputBiasVector");
                objc_msgSend_vectorWithX_Y_Z_W_(MEMORY[0x1E0C9DDF8], v148, v149, v150, v151, v14, v14, v14, 0.0);
                v152 = (void *)objc_claimAutoreleasedReturnValue();
                v214[3] = v152;
                objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v153, (uint64_t)v214, (uint64_t)v213, 4);
                v154 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_imageByApplyingFilter_withInputParameters_(v132, v155, (uint64_t)CFSTR("CIColorMatrix"), (uint64_t)v154, v156);
                v157 = (void *)objc_claimAutoreleasedReturnValue();

                memset(__dst, 0, 24);
                if (sub_1D52B1870(a1 + 2432, v10, (void **)__dst))
                {
                  objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v158, *(uint64_t *)__dst, *(_QWORD *)&__dst[8] - *(_QWORD *)__dst, v160);
                  v161 = objc_claimAutoreleasedReturnValue();
                  v163 = (void *)v161;
                  if (v161)
                  {
                    v211 = CFSTR("_XMP");
                    v212 = v161;
                    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v162, (uint64_t)&v212, (uint64_t)&v211, 1);
                    v164 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend_imageBySettingProperties_(v157, v165, (uint64_t)v164, v166, v167);
                    v168 = (void *)objc_claimAutoreleasedReturnValue();

                  }
                  else
                  {
                    v168 = v157;
                  }

                }
                else
                {
                  v168 = v157;
                }
                if (*(_QWORD *)__dst)
                {
                  *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
                  operator delete(*(void **)__dst);
                }
                objc_msgSend_addObject_(v188, v158, (uint64_t)v168, v159, v160);

                v169 = v190;
              }
              else
              {
                if (!v106)
                {
LABEL_174:
                  v183 = __cxa_allocate_exception(0x10uLL);
                  MEMORY[0x1D8271938](v183, "RawCameraException");
                  __cxa_throw(v183, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
                }
                sub_1D540E834();
                v169 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v169, OS_LOG_TYPE_INFO))
                {
                  *(_WORD *)__dst = 0;
                  _os_log_impl(&dword_1D527F000, v169, OS_LOG_TYPE_INFO, "Auxiliary image will be ignored since it has more than 1 tile.", __dst, 2u);
                }
              }

LABEL_156:
              goto LABEL_157;
            }
            sub_1D540E834();
            v53 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
              goto LABEL_156;
            *(_DWORD *)__dst = 67109120;
            *(_DWORD *)&__dst[4] = v41;
            v54 = v53;
            v55 = "Auxiliary image will be ignored since it has %d channels instead of 1.";
          }
          else
          {
            sub_1D540E834();
            v53 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
              goto LABEL_156;
            *(_DWORD *)__dst = 67109120;
            *(_DWORD *)&__dst[4] = v44;
            v54 = v53;
            v55 = "Auxiliary image will be ignored since it is not 8-bit.  It is %d bits per sample.";
          }
        }
        else
        {
          sub_1D540E834();
          v53 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
            goto LABEL_156;
          *(_DWORD *)__dst = 67109120;
          *(_DWORD *)&__dst[4] = v46;
          v54 = v53;
          v55 = "Auxiliary image will be ignored since it has an unrecognized compression value of %d.";
        }
        _os_log_impl(&dword_1D527F000, v54, OS_LOG_TYPE_INFO, v55, __dst, 8u);
        goto LABEL_156;
      }
      v18 = *(char *)(a4 + 23);
      if (v18 < 0)
      {
        if (!*(_QWORD *)(a4 + 8))
          goto LABEL_65;
      }
      else if (!*(_BYTE *)(a4 + 23))
      {
        goto LABEL_65;
      }
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_1D5290130(__dst, v197.__r_.__value_.__l.__data_, v197.__r_.__value_.__l.__size_);
        v19 = a4;
        if ((*(_BYTE *)(a4 + 23) & 0x80) == 0)
        {
LABEL_24:
          *(_OWORD *)__p = *(_OWORD *)v19;
          v210 = *(_QWORD *)(v19 + 16);
          goto LABEL_27;
        }
      }
      else
      {
        *(std::string *)__dst = v197;
        v19 = a4;
        if ((v18 & 0x80) == 0)
          goto LABEL_24;
      }
      sub_1D5290130(__p, *(void **)v19, *(_QWORD *)(v19 + 8));
LABEL_27:
      if (__dst[23] >= 0)
        v20 = &__dst[__dst[23]];
      else
        v20 = (_BYTE *)(*(_QWORD *)__dst + *(_QWORD *)&__dst[8]);
      if (__dst[23] >= 0)
        v21 = __dst;
      else
        v21 = *(_BYTE **)__dst;
      while (v21 != v20)
      {
        *v21 = __tolower((char)*v21);
        ++v21;
      }
      v22 = HIBYTE(v210);
      v23 = HIBYTE(v210);
      v24 = (void **)__p[0];
      v25 = __p[1];
      if (v210 >= 0)
        v26 = (void **)((char *)__p + HIBYTE(v210));
      else
        v26 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
      if (v210 >= 0)
        v27 = __p;
      else
        v27 = (void **)__p[0];
      if (v27 != v26)
      {
        do
        {
          *(_BYTE *)v27 = __tolower(*(char *)v27);
          v27 = (void **)((char *)v27 + 1);
        }
        while (v27 != v26);
        v22 = HIBYTE(v210);
        v24 = (void **)__p[0];
        v25 = __p[1];
        v23 = HIBYTE(v210);
      }
      v28 = __dst[23];
      if (__dst[23] >= 0)
        v29 = __dst;
      else
        v29 = *(_BYTE **)__dst;
      if (v23 >= 0)
        v30 = __p;
      else
        v30 = v24;
      if (v23 >= 0)
        v31 = v22;
      else
        v31 = (int64_t)v25;
      if (v31)
      {
        v32 = *(_QWORD *)&__dst[8];
        if (__dst[23] >= 0)
          v32 = __dst[23];
        v33 = &v29[v32];
        if (v32 >= v31)
        {
          v56 = *(char *)v30;
          v57 = v29;
          do
          {
            v58 = v32 - v31;
            if (v58 == -1)
              break;
            v59 = (char *)memchr(v57, v56, v58 + 1);
            if (!v59)
              break;
            v34 = v59;
            if (!memcmp(v59, v30, v31))
              goto LABEL_58;
            v57 = v34 + 1;
            v32 = v33 - (v34 + 1);
          }
          while (v32 >= v31);
        }
        v34 = v33;
LABEL_58:
        if (v34 == v33)
          v35 = -1;
        else
          v35 = v34 - v29;
      }
      else
      {
        v35 = 0;
      }
      a5 = v189;
      if (v23 < 0)
      {
        operator delete(v24);
        if ((__dst[23] & 0x80) == 0)
          goto LABEL_64;
      }
      else if ((v28 & 0x80) == 0)
      {
        goto LABEL_64;
      }
      operator delete(*(void **)__dst);
LABEL_64:
      if (v35 != -1)
        goto LABEL_65;
LABEL_157:
      if (v198 && SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v197.__r_.__value_.__l.__data_);
LABEL_160:
      v10 += 3;
    }
    while (v10 != v193);
  }
  *(_QWORD *)__dst = &v199;
  sub_1D5293CCC((void ***)__dst);
  return v188;
}

void sub_1D52F7D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,char a62,int a63)
{
  __int16 a64;
  void *v64;
  void *v66;

  v66 = (void *)STACK[0x2E0];
  if (STACK[0x2E0])
  {
    STACK[0x2E8] = (unint64_t)v66;
    operator delete(v66);
  }

  if (a62)
  {
    if (a61 < 0)
      operator delete(a56);
  }

  a56 = &a64;
  sub_1D5293CCC((void ***)&a56);
  _Unwind_Resume(a1);
}

id sub_1D52F8024(uint64_t a1, int a2, int a3, uint64_t a4)
{
  void *v7;
  void *__p[2];
  uint64_t v10;

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a4;
    v10 = *(_QWORD *)(a4 + 16);
  }
  sub_1D52F6B7C(a1, a2, a3, (uint64_t)__p, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_1D52F80B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D52F809CLL);
}

std::string *sub_1D52F80E4(std::string *__dst, const std::string *a2)
{
  __int128 v3;

  if (__dst[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(__dst, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1D5290130(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      __dst->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v3;
    }
    __dst[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return __dst;
}

id sub_1D52F814C(uint64_t a1, int a2, uint64_t a3, int a4)
{
  void *v7;
  void *__p[2];
  char v10;

  sub_1D52850A0(__p, "");
  sub_1D52F81E0(a1, a2, 0, (__int128 *)__p, a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10 < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_1D52F81C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1D52F81E0(uint64_t a1, int a2, uint64_t a3, __int128 *a4, int a5)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void **v14;
  void **v15;
  uint64_t v16;
  void **v17;
  void **v18;
  unsigned int v19;
  void **v20;
  int v21;
  std::string *v22;
  std::string *p_dst;
  int64_t v24;
  char v25;
  int64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char v30;
  std::string *v31;
  char *v32;
  int64_t v33;
  int64_t size;
  char *v35;
  char *v36;
  uint64_t v37;
  int v38;
  std::string *v39;
  int64_t v40;
  char *v41;
  BOOL v42;
  void **v43;
  void **v44;
  unsigned int v45;
  void **v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  void *exception;
  void *v63;
  void **v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  __int128 *v68;
  int v69;
  uint64_t v70;
  void **v71;
  uint64_t v72;
  uint64_t v73;
  void **v74;
  uint64_t v75;
  void **v76;
  unsigned int v77;
  __int128 v78;
  uint64_t v79;
  std::string __dst;
  std::string __p;
  char v82;
  void **v83;
  void **v84;
  _QWORD v85[2];
  _QWORD v86[4];

  v86[2] = *MEMORY[0x1E0C80C00];
  sub_1D52B1028(a1, a2, (uint64_t *)&v83);
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v8, v9, v10, v11);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (void *)v12;
  v14 = v83;
  v15 = v84;
  if (v83 != v84)
  {
    v16 = a1 + 2264;
    v17 = (void **)(a1 + 2272);
    v74 = (void **)(a1 + 2416);
    v75 = a1 + 2408;
    v64 = (void **)(a1 + 2392);
    v65 = a1 + 2384;
    v76 = (void **)(a1 + 544);
    v72 = a1 + 560;
    v73 = a1 + 536;
    v70 = a1 + 2272;
    v71 = (void **)(a1 + 568);
    v63 = (void *)v12;
    v69 = a5;
    v67 = v84;
    v68 = a4;
    v66 = a1 + 2264;
    do
    {
      v18 = sub_1D5294144(v16, v14);
      if (v17 != v18)
      {
        v19 = *((unsigned __int16 *)v18 + 28);
        if (v19 >= 3)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](exception, "RawCameraException");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        if (v19 != a5)
          goto LABEL_75;
      }
      __p.__r_.__value_.__s.__data_[0] = 0;
      v82 = 0;
      memset(&__dst, 0, sizeof(__dst));
      v20 = sub_1D5294144(v75, v14);
      if (v74 != v20 || (v20 = sub_1D5294144(v65, v14), v64 != v20))
      {
        std::string::operator=(&__dst, (const std::string *)(v20 + 7));
        sub_1D52F80E4(&__p, &__dst);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (!v82)
      {
LABEL_66:
        v43 = sub_1D5294144(v73, v14);
        v44 = v43;
        if (v76 == v43)
          v45 = v77 & 0xFFFFFF00;
        else
          v45 = *((_DWORD *)v43 + 14);
        v77 = v45;
        v46 = sub_1D5294144(v72, v14);
        if (v71 != v46 && v76 != v44)
        {
          v50 = *((unsigned int *)v46 + 14);
          v85[0] = CFSTR("Width");
          objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v47, v77, v48, v49);
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          v85[1] = CFSTR("Height");
          v86[0] = v51;
          objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v52, v50, v53, v54);
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          v86[1] = v55;
          objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v56, (uint64_t)v86, (uint64_t)v85, 2);
          v17 = (void **)v70;
          v57 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend_addObject_(v13, v58, (uint64_t)v57, v59, v60);
        }
        goto LABEL_72;
      }
      v21 = *((char *)a4 + 23);
      if (v21 < 0)
      {
        if (!*((_QWORD *)a4 + 1))
          goto LABEL_66;
      }
      else if (!*((_BYTE *)a4 + 23))
      {
        goto LABEL_66;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_1D5290130(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        if ((*((_BYTE *)a4 + 23) & 0x80) == 0)
        {
LABEL_18:
          v78 = *a4;
          v79 = *((_QWORD *)a4 + 2);
          goto LABEL_21;
        }
      }
      else
      {
        __dst = __p;
        if ((v21 & 0x80) == 0)
          goto LABEL_18;
      }
      sub_1D5290130(&v78, *(void **)a4, *((_QWORD *)a4 + 1));
LABEL_21:
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = (std::string *)((char *)&__dst + HIBYTE(__dst.__r_.__value_.__r.__words[2]));
      else
        v22 = (std::string *)(__dst.__r_.__value_.__r.__words[0] + __dst.__r_.__value_.__l.__size_);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_dst = &__dst;
      else
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      while (p_dst != v22)
      {
        p_dst->__r_.__value_.__s.__data_[0] = __tolower(p_dst->__r_.__value_.__s.__data_[0]);
        p_dst = (std::string *)((char *)p_dst + 1);
      }
      v24 = HIBYTE(v79);
      v25 = HIBYTE(v79);
      v26 = *((_QWORD *)&v78 + 1);
      v27 = (char *)v78;
      if (v79 >= 0)
        v28 = (char *)&v78 + HIBYTE(v79);
      else
        v28 = (char *)(v78 + *((_QWORD *)&v78 + 1));
      if (v79 >= 0)
        v29 = (char *)&v78;
      else
        v29 = (char *)v78;
      if (v29 != v28)
      {
        do
        {
          *v29 = __tolower(*v29);
          ++v29;
        }
        while (v29 != v28);
        v24 = HIBYTE(v79);
        v26 = *((_QWORD *)&v78 + 1);
        v27 = (char *)v78;
        v25 = HIBYTE(v79);
      }
      v30 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &__dst;
      else
        v31 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if (v25 >= 0)
        v32 = (char *)&v78;
      else
        v32 = v27;
      if (v25 >= 0)
        v33 = v24;
      else
        v33 = v26;
      if (v33)
      {
        size = __dst.__r_.__value_.__l.__size_;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        v35 = (char *)v31 + size;
        if (size >= v33)
        {
          v38 = *v32;
          v39 = v31;
          do
          {
            v40 = size - v33;
            if (v40 == -1)
              break;
            v41 = (char *)memchr(v39, v38, v40 + 1);
            if (!v41)
              break;
            v36 = v41;
            if (!memcmp(v41, v32, v33))
              goto LABEL_59;
            v39 = (std::string *)(v36 + 1);
            size = v35 - (v36 + 1);
          }
          while (size >= v33);
          v36 = v35;
LABEL_59:
          v13 = v63;
        }
        else
        {
          v36 = (char *)v31 + size;
        }
        if (v36 == v35)
          v37 = -1;
        else
          v37 = v36 - (char *)v31;
      }
      else
      {
        v37 = 0;
      }
      a4 = v68;
      if (v25 < 0)
      {
        operator delete(v27);
        if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_65;
      }
      else if ((v30 & 0x80) == 0)
      {
        goto LABEL_65;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_65:
      v42 = v37 == -1;
      a5 = v69;
      v16 = v66;
      v15 = v67;
      v17 = (void **)v70;
      if (!v42)
        goto LABEL_66;
LABEL_72:
      if (v82 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_75:
      v14 += 3;
    }
    while (v14 != v15);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
  sub_1D5293CCC((void ***)&__p);
  return v13;
}

void sub_1D52F8690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  uint64_t v41;

  __p = (void *)(v41 - 152);
  sub_1D5293CCC((void ***)&__p);
  _Unwind_Resume(a1);
}

id sub_1D52F8744(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  void *__p[2];
  uint64_t v9;

  if (*(char *)(a4 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a4;
    v9 = *(_QWORD *)(a4 + 16);
  }
  sub_1D52F81E0(a1, a2, 0, (__int128 *)__p, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_1D52F87C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1D52F87E4(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned __int16 v12;
  void *v13;
  uint64_t v14;
  double v15;
  double v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  const __CFData *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  CGImageMetadataRef v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  const char *v75;
  void *v76;
  CGImageMetadataRef v77;
  void *exception;
  _QWORD v80[4];
  _QWORD v81[4];
  _QWORD v82[3];
  _QWORD v83[4];

  v83[3] = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v9 = v4;
  if (!v4)
  {
    v13 = 0;
    goto LABEL_19;
  }
  if ((int)a3 <= 1717856626)
  {
    if ((_DWORD)a3 != 1278226488)
    {
      v12 = 25968;
      goto LABEL_9;
    }
    v10 = (unsigned int *)MEMORY[0x1E0C9E018];
    v11 = 1;
  }
  else
  {
    v10 = (unsigned int *)MEMORY[0x1E0C9E030];
    v11 = 2;
    if ((_DWORD)a3 != 1751411059 && (_DWORD)a3 != 1751410032)
    {
      v12 = 26995;
LABEL_9:
      if ((_DWORD)a3 != (v12 | 0x66640000))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v10 = (unsigned int *)MEMORY[0x1E0C9E028];
      v11 = 4;
    }
  }
  v14 = *v10;
  objc_msgSend_extent(v4, v5, v6, v7, v8);
  v16 = v15;
  objc_msgSend_extent(v9, v17, v18, v19, v20);
  v21 = (uint64_t)rint(floor(v16));
  v23 = (uint64_t)rint(floor(v22));
  v24 = v21 * v11;
  objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v25, v23 * v21 * v11, v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_context(MEMORY[0x1E0C9DD90], v29, v30, v31, v32, v28);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = objc_retainAutorelease(v28);
  v39 = objc_msgSend_mutableBytes(v34, v35, v36, v37, v38);
  objc_msgSend_extent(v9, v40, v41, v42, v43);
  objc_msgSend_render_toBitmap_rowBytes_bounds_format_colorSpace_(v33, v44, (uint64_t)v9, v39, v24, v14, 0);

  objc_msgSend_properties(v9, v45, v46, v47, v48);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v49, v50, (uint64_t)CFSTR("_XMP"), v51, v52);
  v53 = (const __CFData *)objc_claimAutoreleasedReturnValue();

  if (v53)
    v57 = CGImageMetadataCreateFromXMPData(v53);
  else
    v57 = 0;
  v58 = *MEMORY[0x1E0CBC6C0];
  v83[0] = v34;
  v59 = *MEMORY[0x1E0CBC6C8];
  v82[0] = v58;
  v82[1] = v59;
  v80[0] = CFSTR("BytesPerRow");
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v54, v24, v55, v56);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v81[0] = v60;
  v80[1] = CFSTR("Height");
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v61, v23, v62, v63);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  v81[1] = v64;
  v80[2] = CFSTR("PixelFormat");
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v65, a3, v66, v67);
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  v81[2] = v68;
  v80[3] = CFSTR("Width");
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v69, v21, v70, v71);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  v81[3] = v72;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v73, (uint64_t)v81, (uint64_t)v80, 4);
  v74 = objc_claimAutoreleasedReturnValue();
  v76 = (void *)v74;
  v82[2] = *MEMORY[0x1E0CBC6D0];
  if (v57)
    v77 = v57;
  else
    v77 = (CGImageMetadataRef)MEMORY[0x1E0C9AA70];
  v83[1] = v74;
  v83[2] = v77;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v75, (uint64_t)v83, (uint64_t)v82, 3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_19:
  return v13;
}

void sub_1D52F8B40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D52F8BF4(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  int isEqualToString;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  void *v126[2];
  char v127;
  void *v128[2];
  char v129;
  void *v130[2];
  char v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  void *v136[2];
  char v137;
  void *v138[2];
  char v139;
  void *v140[2];
  char v141;
  void *__p[2];
  char v143;
  void *v144[2];
  char v145;
  void *v146[2];
  char v147;
  void *v148[2];
  char v149;
  void *v150[2];
  char v151;
  void *v152[2];
  char v153;

  v3 = a2;
  isEqualToString = objc_msgSend_isEqualToString_(v3, v4, *MEMORY[0x1E0CBC700], v5, v6);
  v11 = objc_msgSend_isEqualToString_(v3, v8, *MEMORY[0x1E0CBC708], v9, v10);
  v15 = objc_msgSend_isEqualToString_(v3, v12, *MEMORY[0x1E0CBC720], v13, v14);
  v19 = objc_msgSend_isEqualToString_(v3, v16, (uint64_t)CFSTR("kCGImageAuxiliaryDataTypeHDRGainMap"), v17, v18);
  v23 = objc_msgSend_isEqualToString_(v3, v20, *MEMORY[0x1E0CBC738], v21, v22);
  v27 = objc_msgSend_isEqualToString_(v3, v24, *MEMORY[0x1E0CBC730], v25, v26);
  v31 = objc_msgSend_isEqualToString_(v3, v28, *MEMORY[0x1E0CBC748], v29, v30);
  v35 = objc_msgSend_isEqualToString_(v3, v32, (uint64_t)CFSTR("kCGImageAuxiliaryDataTypeSemanticSegmentationGlassesMatte"), v33, v34);
  v39 = objc_msgSend_isEqualToString_(v3, v36, (uint64_t)CFSTR("kCGImageAuxiliaryDataTypeSemanticSegmentationSkyMatte"), v37, v38);
  if (isEqualToString)
  {
    sub_1D52F6AE4(a1, 8, 1, 51177);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend_count(v40, v41, v42, v43, v44))
    {
      sub_1D52F6AE4(a1, 9, 1, 51177);
      v49 = objc_claimAutoreleasedReturnValue();

      v40 = (void *)v49;
    }
    objc_msgSend_firstObject(v40, v45, v46, v47, v48);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52F87E4((uint64_t)v50, v50, 1751410032);
    v51 = objc_claimAutoreleasedReturnValue();
  }
  else if (v11)
  {
    sub_1D52F6AE4(a1, 8, 51177, 2);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend_count(v40, v52, v53, v54, v55))
    {
      sub_1D52F6AE4(a1, 9, 51177, 2);
      v60 = objc_claimAutoreleasedReturnValue();

      v40 = (void *)v60;
    }
    objc_msgSend_firstObject(v40, v56, v57, v58, v59);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52F87E4((uint64_t)v50, v50, 1751411059);
    v51 = objc_claimAutoreleasedReturnValue();
  }
  else if (v15)
  {
    sub_1D52850A0(v152, "portraiteffectsmatte");
    sub_1D52F8024(a1, 65540, 52527, (uint64_t)v152);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    if (v153 < 0)
      operator delete(v152[0]);
    if (!objc_msgSend_count(v40, v61, v62, v63, v64))
    {
      sub_1D52850A0(v150, "portraiteffectsmatte");
      sub_1D52F8024(a1, 65540, 51182, (uint64_t)v150);
      v69 = objc_claimAutoreleasedReturnValue();

      if (v151 < 0)
        operator delete(v150[0]);
      v40 = (void *)v69;
    }
    objc_msgSend_firstObject(v40, v65, v66, v67, v68);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52F87E4((uint64_t)v50, v50, 1278226488);
    v51 = objc_claimAutoreleasedReturnValue();
  }
  else if (v19)
  {
    sub_1D52850A0(v148, "hdrgainmap");
    sub_1D52F8024(a1, 65540, 52527, (uint64_t)v148);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    if (v149 < 0)
      operator delete(v148[0]);
    if (!objc_msgSend_count(v40, v70, v71, v72, v73))
    {
      sub_1D52850A0(v146, "hdrgainmap");
      sub_1D52F8024(a1, 65540, 51182, (uint64_t)v146);
      v78 = objc_claimAutoreleasedReturnValue();

      if (v147 < 0)
        operator delete(v146[0]);
      v40 = (void *)v78;
    }
    objc_msgSend_firstObject(v40, v74, v75, v76, v77);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52F87E4((uint64_t)v50, v50, 1278226488);
    v51 = objc_claimAutoreleasedReturnValue();
  }
  else if (v23)
  {
    sub_1D52850A0(v144, "skinmatte");
    sub_1D52F8024(a1, 65540, 52527, (uint64_t)v144);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    if (v145 < 0)
      operator delete(v144[0]);
    if (!objc_msgSend_count(v40, v79, v80, v81, v82))
    {
      sub_1D52850A0(__p, "skinmatte");
      sub_1D52F8024(a1, 65540, 51182, (uint64_t)__p);
      v87 = objc_claimAutoreleasedReturnValue();

      if (v143 < 0)
        operator delete(__p[0]);
      v40 = (void *)v87;
    }
    objc_msgSend_firstObject(v40, v83, v84, v85, v86);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52F87E4((uint64_t)v50, v50, 1278226488);
    v51 = objc_claimAutoreleasedReturnValue();
  }
  else if (v27)
  {
    sub_1D52850A0(v140, "hairmatte");
    sub_1D52F8024(a1, 65540, 52527, (uint64_t)v140);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    if (v141 < 0)
      operator delete(v140[0]);
    if (!objc_msgSend_count(v40, v88, v89, v90, v91))
    {
      sub_1D52850A0(v138, "hairmatte");
      sub_1D52F8024(a1, 65540, 51182, (uint64_t)v138);
      v96 = objc_claimAutoreleasedReturnValue();

      if (v139 < 0)
        operator delete(v138[0]);
      v40 = (void *)v96;
    }
    objc_msgSend_firstObject(v40, v92, v93, v94, v95);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52F87E4((uint64_t)v50, v50, 1278226488);
    v51 = objc_claimAutoreleasedReturnValue();
  }
  else if (v31)
  {
    sub_1D52850A0(v136, "teethmatte");
    sub_1D52F8024(a1, 65540, 52527, (uint64_t)v136);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    if (v137 < 0)
      operator delete(v136[0]);
    if (!objc_msgSend_count(v40, v97, v98, v99, v100))
    {
      sub_1D52850A0(v134, "teethmatte");
      sub_1D52F8024(a1, 65540, 51182, (uint64_t)v134);
      v105 = objc_claimAutoreleasedReturnValue();

      if (v135 < 0)
        operator delete(v134[0]);
      v40 = (void *)v105;
    }
    objc_msgSend_firstObject(v40, v101, v102, v103, v104);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52F87E4((uint64_t)v50, v50, 1278226488);
    v51 = objc_claimAutoreleasedReturnValue();
  }
  else if (v35)
  {
    sub_1D52850A0(v132, "glassesmatte");
    sub_1D52F8024(a1, 65540, 52527, (uint64_t)v132);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    if (v133 < 0)
      operator delete(v132[0]);
    if (!objc_msgSend_count(v40, v106, v107, v108, v109))
    {
      sub_1D52850A0(v130, "glassesmatte");
      sub_1D52F8024(a1, 65540, 51182, (uint64_t)v130);
      v114 = objc_claimAutoreleasedReturnValue();

      if (v131 < 0)
        operator delete(v130[0]);
      v40 = (void *)v114;
    }
    objc_msgSend_firstObject(v40, v110, v111, v112, v113);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52F87E4((uint64_t)v50, v50, 1278226488);
    v51 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (!v39)
    {
      v124 = 0;
      goto LABEL_66;
    }
    sub_1D52850A0(v128, "skymatte");
    sub_1D52F8024(a1, 65540, 52527, (uint64_t)v128);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    if (v129 < 0)
      operator delete(v128[0]);
    if (!objc_msgSend_count(v40, v115, v116, v117, v118))
    {
      sub_1D52850A0(v126, "skymatte");
      sub_1D52F8024(a1, 65540, 51182, (uint64_t)v126);
      v123 = objc_claimAutoreleasedReturnValue();

      if (v127 < 0)
        operator delete(v126[0]);
      v40 = (void *)v123;
    }
    objc_msgSend_firstObject(v40, v119, v120, v121, v122);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52F87E4((uint64_t)v50, v50, 1278226488);
    v51 = objc_claimAutoreleasedReturnValue();
  }
  v124 = (void *)v51;

LABEL_66:
  return v124;
}

void sub_1D52F9344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *v63;
  void *v64;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id sub_1D52F9510(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  id v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  id v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  void *v57;
  id v58;
  const char *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t k;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  id obj;
  uint64_t v97;
  uint64_t v98;
  uint64_t j;
  void *v100;
  void *v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  void *v110[2];
  char v111;
  void *__p[2];
  char v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _BYTE v118[128];
  _BYTE v119[128];
  id v120;
  void *v121;
  _BYTE v122[128];
  _QWORD v123[7];
  _QWORD v124[7];
  uint64_t v125;
  void *v126;
  uint64_t v127;
  _QWORD v128[3];

  v128[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend_array(MEMORY[0x1E0C99DE8], a2, a3, a4, a5);
  v101 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v6, v7, v8, v9);
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  v127 = *MEMORY[0x1E0CBC700];
  sub_1D52F814C(a1, 8, 1, 51177);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v128[0] = v10;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v11, (uint64_t)v128, (uint64_t)&v127, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v100, v13, (uint64_t)v12, v14, v15);

  v125 = *MEMORY[0x1E0CBC708];
  sub_1D52F814C(a1, 8, 2, 51177);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v126 = v16;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v17, (uint64_t)&v126, (uint64_t)&v125, 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v100, v19, (uint64_t)v18, v20, v21);

  v22 = *MEMORY[0x1E0CBC720];
  v123[0] = CFSTR("portraiteffectsmatte");
  v123[1] = CFSTR("skinmatte");
  v23 = *MEMORY[0x1E0CBC738];
  v124[0] = v22;
  v124[1] = v23;
  v24 = *MEMORY[0x1E0CBC730];
  v123[2] = CFSTR("hairmatte");
  v123[3] = CFSTR("teetmatte");
  v25 = *MEMORY[0x1E0CBC748];
  v124[2] = v24;
  v124[3] = v25;
  v123[4] = CFSTR("glassesmatte");
  v123[5] = CFSTR("skymatte");
  v124[4] = CFSTR("kCGImageAuxiliaryDataTypeSemanticSegmentationGlassesMatte");
  v124[5] = CFSTR("kCGImageAuxiliaryDataTypeSemanticSegmentationSkyMatte");
  v123[6] = CFSTR("hdrgainmap");
  v124[6] = CFSTR("kCGImageAuxiliaryDataTypeHDRGainMap");
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v26, (uint64_t)v124, (uint64_t)v123, 7);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v116 = 0u;
  v117 = 0u;
  v114 = 0u;
  v115 = 0u;
  v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1E99C8700, v28, (uint64_t)&v114, (uint64_t)v122, 16);
  if (v29)
  {
    v30 = *(_QWORD *)v115;
    do
    {
      for (i = 0; i != v29; ++i)
      {
        if (*(_QWORD *)v115 != v30)
          objc_enumerationMutation(&unk_1E99C8700);
        v32 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v114 + 1) + 8 * i));
        v37 = (char *)objc_msgSend_UTF8String(v32, v33, v34, v35, v36);
        sub_1D52850A0(__p, v37);
        sub_1D52F8744(a1, 65540, 0, (uint64_t)__p);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        if (v113 < 0)
          operator delete(__p[0]);
        if (!objc_msgSend_count(v42, v38, v39, v40, v41))
        {
          v44 = objc_retainAutorelease(v32);
          v49 = (char *)objc_msgSend_UTF8String(v44, v45, v46, v47, v48);
          sub_1D52850A0(v110, v49);
          sub_1D52F8744(a1, 65540, 0, (uint64_t)v110);
          v50 = objc_claimAutoreleasedReturnValue();

          if (v111 < 0)
            operator delete(v110[0]);
          v42 = (void *)v50;
        }
        v120 = v32;
        v121 = v42;
        objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v43, (uint64_t)&v121, (uint64_t)&v120, 1);
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v100, v52, (uint64_t)v51, v53, v54);

      }
      v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1E99C8700, v55, (uint64_t)&v114, (uint64_t)v122, 16);
    }
    while (v29);
  }
  v108 = 0u;
  v109 = 0u;
  v106 = 0u;
  v107 = 0u;
  obj = v100;
  v98 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v56, (uint64_t)&v106, (uint64_t)v119, 16);
  if (v98)
  {
    v97 = *(_QWORD *)v107;
    do
    {
      for (j = 0; j != v98; ++j)
      {
        if (*(_QWORD *)v107 != v97)
          objc_enumerationMutation(obj);
        v57 = *(void **)(*((_QWORD *)&v106 + 1) + 8 * j);
        v102 = 0u;
        v103 = 0u;
        v104 = 0u;
        v105 = 0u;
        v58 = v57;
        v63 = objc_msgSend_countByEnumeratingWithState_objects_count_(v58, v59, (uint64_t)&v102, (uint64_t)v118, 16);
        if (v63)
        {
          v64 = *(_QWORD *)v103;
          do
          {
            for (k = 0; k != v63; ++k)
            {
              if (*(_QWORD *)v103 != v64)
                objc_enumerationMutation(v58);
              v66 = *(_QWORD *)(*((_QWORD *)&v102 + 1) + 8 * k);
              objc_msgSend_objectForKeyedSubscript_(v58, v60, v66, v61, v62);
              v67 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_firstObject(v67, v68, v69, v70, v71);
              v72 = (void *)objc_claimAutoreleasedReturnValue();

              if (v72)
              {
                objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v73, v74, v75, v76);
                v77 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_objectForKeyedSubscript_(v27, v78, v66, v79, v80);
                v83 = (void *)objc_claimAutoreleasedReturnValue();
                if (v83)
                {
                  objc_msgSend_setObject_forKeyedSubscript_(v77, v81, (uint64_t)v83, (uint64_t)CFSTR("AuxiliaryDataType"), v82);
                  objc_msgSend_addEntriesFromDictionary_(v77, v84, (uint64_t)v72, v85, v86);
                  objc_msgSend_addObject_(v101, v87, (uint64_t)v77, v88, v89);
                }

              }
            }
            v63 = objc_msgSend_countByEnumeratingWithState_objects_count_(v58, v60, (uint64_t)&v102, (uint64_t)v118, 16);
          }
          while (v63);
        }

      }
      v98 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v90, (uint64_t)&v106, (uint64_t)v119, 16);
    }
    while (v98);
  }

  objc_msgSend_arrayWithArray_(MEMORY[0x1E0C99D20], v91, (uint64_t)v101, v92, v93);
  v94 = (void *)objc_claimAutoreleasedReturnValue();

  return v94;
}

void sub_1D52F9A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;

  _Unwind_Resume(a1);
}

BOOL sub_1D52F9B90(uint64_t a1)
{
  int v2;
  void *__p[2];
  char v6;
  int v7;

  v7 = 0;
  sub_1D52B0DE4(a1, 0, __p);
  if (sub_1D52A8A60(a1, __p, &v7))
  {
    v2 = v7;
    if (v6 < 0)
      operator delete(__p[0]);
    return v2 == 34892 || v2 == 32803;
  }
  else
  {
    if (v6 < 0)
      operator delete(__p[0]);
    return 0;
  }
}

void sub_1D52F9C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D52F9C34()
{
  return 1;
}

uint64_t sub_1D52F9C3C(_BYTE *a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 72))(a1);
  if ((_DWORD)result)
    return a1[1233] != 0;
  return result;
}

BOOL sub_1D52F9C74(uint64_t a1)
{
  _BOOL4 v2;
  int v3;
  void *__p[2];
  char v6;
  int v7;

  v7 = 0;
  sub_1D52B0DE4(a1, 0, __p);
  v2 = sub_1D52A8A60(a1, __p, &v7);
  v3 = v7;
  if (v6 < 0)
    operator delete(__p[0]);
  return v3 == 34892 && v2;
}

void sub_1D52F9CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1D52F9CF8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 1240) == 3;
}

std::string *sub_1D52F9D08@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string *result;
  std::string v6;

  memset(&v6, 0, sizeof(v6));
  v4 = sub_1D5294144(a1 + 1312, (void **)(a1 + 1184));
  if ((void **)(a1 + 1320) == v4)
    return (std::string *)sub_1D5291908(a1);
  result = std::string::operator=(&v6, (const std::string *)(v4 + 7));
  *a2 = v6;
  return result;
}

void sub_1D52F9D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D52F9D98(uint64_t a1@<X0>, char **a2@<X8>)
{
  void **v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10[3];

  sub_1D52B08D0(a1, (uint64_t)a2);
  sub_1D52B1028(a1, 1, v10);
  v4 = (void **)v10[0];
  v5 = v10[1];
  while (v4 != (void **)v5)
  {
    sub_1D52AFFE8(a1, v4, &v9);
    if ((_QWORD)v9)
      sub_1D52B0A7C(a2, &v9);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 += 3;
  }
  *(_QWORD *)&v9 = v10;
  sub_1D5293CCC((void ***)&v9);
}

void sub_1D52F9E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1D5282E44((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1D52F9EA4(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t *v9;
  __int16 v10;
  uint64_t *v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t *v14;
  unsigned int v15;
  std::string *v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unsigned int v22;
  unint64_t v23;
  char *v24;
  std::string::size_type v25;
  unint64_t v26;
  double *v27;
  double *v28;
  uint64_t v29;
  double v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  int64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  int v41;
  int64_t v42;
  double v43;
  char v44;
  void *v45;
  double v46;
  char v47;
  void *v48;
  std::string::size_type v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  std::string *v60;
  int64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  float v65;
  float64_t v66;
  unint64_t *v67;
  unint64_t v68;
  float v69;
  float64_t v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  std::string *v75;
  char *v76;
  NSObject *v77;
  char *v78;
  uint64_t **v79;
  void **v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  void **v86;
  int v87;
  int v88;
  void **v89;
  int v90;
  int v91;
  void *v92;
  void **v93;
  int v94;
  void **v95;
  int v96;
  _QWORD *v97;
  std::string::size_type v98;
  std::string *v99;
  void **v100;
  int v101;
  int v102;
  int v103;
  uint64_t *v104;
  void **v105;
  unint64_t v106;
  int v107;
  int v108;
  int v109;
  int v110;
  uint64_t *v111;
  uint64_t *v112;
  void **v113;
  int v114;
  std::string *v115;
  void **v116;
  int v117;
  std::string::size_type v118;
  uint64_t v119;
  unint64_t v120;
  float64x2_t v121;
  void **v122;
  int v123;
  std::string::size_type v124;
  uint64_t v125;
  unint64_t v126;
  float64x2_t v127;
  void **v128;
  int v129;
  int v130;
  void *v131;
  void **v132;
  int v133;
  double v134;
  int v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t *v144;
  std::string *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  std::string::size_type v151;
  std::string *v152;
  void *v153;
  float64x2_t *v154;
  float64x2_t v155;
  _OWORD *v156;
  const double *v157;
  float64x2_t v158;
  _QWORD *v159;
  void *v160;
  void **v161;
  BOOL v162;
  void **v163;
  BOOL v164;
  void **v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  uint64_t *v172;
  void **v173;
  _BOOL4 v174;
  void **v175;
  _BOOL4 v176;
  void **v177;
  _BOOL4 v178;
  char v179;
  _BOOL4 v181;
  std::string *v182;
  NSObject *v183;
  void *v184;
  __int128 *i;
  std::string::size_type size;
  std::string *v187;
  NSObject *v188;
  void *v189;
  __int128 *j;
  std::string::size_type v191;
  std::string *v192;
  NSObject *v193;
  void *v194;
  __int128 *k;
  std::string::size_type v196;
  uint64_t *v197;
  uint64_t *v198;
  void **v199;
  _BOOL4 v200;
  double v201;
  int v202;
  std::string::pointer data;
  float v204;
  int v205;
  int v206;
  int v207;
  int v208;
  uint64_t *v209;
  int v210;
  float v211;
  int v212;
  float v213;
  float v214;
  int v215;
  void **v216;
  BOOL v217;
  void **v218;
  BOOL v219;
  uint64_t *v220;
  void *v221;
  _QWORD *v222;
  void **v223;
  int v224;
  void *exception;
  void *v226[2];
  uint64_t v227;
  void *v228[2];
  uint64_t v229;
  void *v230[2];
  uint64_t v231;
  void *v232[2];
  uint64_t v233;
  void *v234[2];
  uint64_t v235;
  void *v236[2];
  uint64_t v237;
  void *v238[2];
  uint64_t v239;
  void *v240[2];
  uint64_t v241;
  __int128 v242;
  uint64_t v243;
  void *v244[2];
  uint64_t v245;
  void *v246[2];
  uint64_t v247;
  void *__dst[2];
  uint64_t v249;
  void *v250[2];
  uint64_t v251;
  void *v252[2];
  uint64_t v253;
  void *v254[2];
  uint64_t v255;
  void *__p[2];
  uint64_t v257;
  void *v258[2];
  uint64_t v259;
  void *v260[2];
  uint64_t v261;
  void *v262[2];
  uint64_t v263;
  void *v264[2];
  uint64_t v265;
  void *v266[2];
  uint64_t v267;
  void *v268[2];
  uint64_t v269;
  void *v270[2];
  uint64_t v271;
  __int128 v272;
  uint64_t v273;
  float64x2_t *v274;
  std::string __str;
  float64x2_t v276;
  char v277;
  float64x2_t v278;
  float64x2_t v279;
  std::string buf;
  uint64_t v281;

  v281 = *MEMORY[0x1E0C80C00];
  sub_1D52ABE88((uint64_t **)a1, a2, a3);
  v6 = *a3;
  if (v6 > 0xC68C)
  {
    if (*a3 <= 0xC7E8u)
    {
      if (*a3 > 0xC71Eu)
      {
        if (*a3 <= 0xC74Du)
        {
          if (v6 != 50975)
          {
            if (v6 != 51008)
            {
              if (v6 == 51009)
              {
                if (*(char *)(a2 + 23) < 0)
                {
                  sub_1D5290130(v236, *(void **)a2, *(_QWORD *)(a2 + 8));
                }
                else
                {
                  *(_OWORD *)v236 = *(_OWORD *)a2;
                  v237 = *(_QWORD *)(a2 + 16);
                }
                v173 = sub_1D5294144(a1 + 512, v236);
                v174 = (void **)(a1 + 520) != v173 && *((_DWORD *)v173 + 14) == 0;
                if (SHIBYTE(v237) < 0)
                  operator delete(v236[0]);
                if (!v174)
                  return;
                sub_1D52FD898(a1, (uint64_t)a3, (uint64_t)&__str);
                v182 = (std::string *)(a1 + 2192);
                if (*(_QWORD *)(a1 + 2200) == *(_QWORD *)(a1 + 2192))
                {
                  if (v182 != &__str)
                    sub_1D53045D4(a1 + 2192, (uint64_t *)__str.__r_.__value_.__l.__data_, (uint64_t *)__str.__r_.__value_.__l.__size_, (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 4);
                }
                else
                {
                  sub_1D540E834();
                  v183 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v183, OS_LOG_TYPE_INFO))
                  {
                    if (*(char *)(a2 + 23) >= 0)
                      v184 = (void *)a2;
                    else
                      v184 = *(void **)a2;
                    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v184;
                    _os_log_impl(&dword_1D527F000, v183, OS_LOG_TYPE_INFO, "Did not expect a second opcodelist2 for path %s", (uint8_t *)&buf, 0xCu);
                  }

                  size = __str.__r_.__value_.__l.__size_;
                  for (i = (__int128 *)__str.__r_.__value_.__r.__words[0]; i != (__int128 *)size; ++i)
                    sub_1D52B0A7C(&v182->__r_.__value_.__l.__data_, i);
                }
                goto LABEL_623;
              }
LABEL_281:
              sub_1D540E834();
              v77 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
              {
                LODWORD(__str.__r_.__value_.__l.__data_) = 67109120;
                HIDWORD(__str.__r_.__value_.__r.__words[0]) = v6;
                _os_log_impl(&dword_1D527F000, v77, OS_LOG_TYPE_INFO, "Unhandled TIFF Tag by AdobeDNGImageParser %d", (uint8_t *)&__str, 8u);
              }

              return;
            }
            if (*(char *)(a2 + 23) < 0)
            {
              sub_1D5290130(v238, *(void **)a2, *(_QWORD *)(a2 + 8));
            }
            else
            {
              *(_OWORD *)v238 = *(_OWORD *)a2;
              v239 = *(_QWORD *)(a2 + 16);
            }
            v175 = sub_1D5294144(a1 + 512, v238);
            v176 = (void **)(a1 + 520) != v175 && *((_DWORD *)v175 + 14) == 0;
            if (SHIBYTE(v239) < 0)
              operator delete(v238[0]);
            if (!v176)
              return;
            sub_1D52FD898(a1, (uint64_t)a3, (uint64_t)&__str);
            v187 = (std::string *)(a1 + 2168);
            if (*(_QWORD *)(a1 + 2176) == *(_QWORD *)(a1 + 2168))
            {
              if (v187 != &__str)
                sub_1D53045D4(a1 + 2168, (uint64_t *)__str.__r_.__value_.__l.__data_, (uint64_t *)__str.__r_.__value_.__l.__size_, (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 4);
            }
            else
            {
              sub_1D540E834();
              v188 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v188, OS_LOG_TYPE_INFO))
              {
                if (*(char *)(a2 + 23) >= 0)
                  v189 = (void *)a2;
                else
                  v189 = *(void **)a2;
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v189;
                _os_log_impl(&dword_1D527F000, v188, OS_LOG_TYPE_INFO, "Did not expect a second opcodelist1 for path %s", (uint8_t *)&buf, 0xCu);
              }

              v191 = __str.__r_.__value_.__l.__size_;
              for (j = (__int128 *)__str.__r_.__value_.__r.__words[0]; j != (__int128 *)v191; ++j)
                sub_1D52B0A7C(&v187->__r_.__value_.__l.__data_, j);
            }
LABEL_623:
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
            sub_1D5282E44((void ***)&buf);
            return;
          }
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) != 0 || a3[1] - 3 > 1)
            return;
          if (*(char *)(a2 + 23) < 0)
          {
            sub_1D5290130(v228, *(void **)a2, *(_QWORD *)(a2 + 8));
          }
          else
          {
            *(_OWORD *)v228 = *(_OWORD *)a2;
            v229 = *(_QWORD *)(a2 + 16);
          }
          v218 = sub_1D5294144(a1 + 512, v228);
          v219 = (void **)(a1 + 520) == v218 || *((_DWORD *)v218 + 14) || *((_DWORD *)a3 + 1) != 1;
          if (SHIBYTE(v229) < 0)
            operator delete(v228[0]);
          if (v219)
            return;
          if (a3[1] == 4)
            v17 = *((_DWORD *)a3 + 2);
          else
            v17 = sub_1D52AD670((uint64_t)a3);
          __str.__r_.__value_.__r.__words[0] = a2;
          v18 = sub_1D52B3C68((uint64_t **)(a1 + 2456), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&__str);
LABEL_651:
          *((_DWORD *)v18 + 14) = v17;
          return;
        }
        if (v6 == 51022)
        {
          if (*(char *)(a2 + 23) < 0)
          {
            sub_1D5290130(v234, *(void **)a2, *(_QWORD *)(a2 + 8));
          }
          else
          {
            *(_OWORD *)v234 = *(_OWORD *)a2;
            v235 = *(_QWORD *)(a2 + 16);
          }
          v177 = sub_1D5294144(a1 + 512, v234);
          v178 = (void **)(a1 + 520) != v177 && *((_DWORD *)v177 + 14) == 0;
          if (SHIBYTE(v235) < 0)
            operator delete(v234[0]);
          if (!v178)
            return;
          sub_1D52FD898(a1, (uint64_t)a3, (uint64_t)&__str);
          v192 = (std::string *)(a1 + 2216);
          if (*(_QWORD *)(a1 + 2224) == *(_QWORD *)(a1 + 2216))
          {
            if (v192 != &__str)
              sub_1D53045D4(a1 + 2216, (uint64_t *)__str.__r_.__value_.__l.__data_, (uint64_t *)__str.__r_.__value_.__l.__size_, (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 4);
          }
          else
          {
            sub_1D540E834();
            v193 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v193, OS_LOG_TYPE_INFO))
            {
              if (*(char *)(a2 + 23) >= 0)
                v194 = (void *)a2;
              else
                v194 = *(void **)a2;
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v194;
              _os_log_impl(&dword_1D527F000, v193, OS_LOG_TYPE_INFO, "Did not expect a second opcodelist3 for path %s", (uint8_t *)&buf, 0xCu);
            }

            v196 = __str.__r_.__value_.__l.__size_;
            for (k = (__int128 *)__str.__r_.__value_.__r.__words[0]; k != (__int128 *)v196; ++k)
              sub_1D52B0A7C(&v192->__r_.__value_.__l.__data_, k);
          }
          goto LABEL_623;
        }
        if (v6 != 51041)
        {
          if (v6 != 51110)
            goto LABEL_281;
          if (a3[1] != 4 || *((_DWORD *)a3 + 1) != 1)
            return;
          if (!sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184))
            && !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1208)))
          {
            if (*(char *)(a2 + 23) < 0)
            {
              sub_1D5290130(v230, *(void **)a2, *(_QWORD *)(a2 + 8));
            }
            else
            {
              *(_OWORD *)v230 = *(_OWORD *)a2;
              v231 = *(_QWORD *)(a2 + 16);
            }
            v223 = sub_1D5294144(a1 + 512, v230);
            if ((void **)(a1 + 520) == v223)
            {
              if (SHIBYTE(v231) < 0)
              {
                v12 = v230[0];
                goto LABEL_605;
              }
              return;
            }
            v224 = *((_DWORD *)v223 + 14);
            if (SHIBYTE(v231) < 0)
              operator delete(v230[0]);
            if (v224)
              return;
          }
          v17 = *((_DWORD *)a3 + 2);
          __str.__r_.__value_.__r.__words[0] = a2;
          v18 = sub_1D52B3C68((uint64_t **)(a1 + 2240), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&__str);
          goto LABEL_651;
        }
        if (a3[1] != 12)
          return;
        sub_1D52917E4(a1, &buf);
        sub_1D52A75D8((uint64_t)a3, (uint64_t *)&buf, (void **)&__str.__r_.__value_.__l.__data_);
        sub_1D5282EB4((uint64_t)&buf);
        buf.__r_.__value_.__r.__words[0] = a1 + 1184;
        v60 = (std::string *)(sub_1D52B3E7C((uint64_t **)(a1 + 1928), (void **)(a1 + 1184), (uint64_t)&unk_1D544A5C4, (__int128 **)&buf)+ 7);
        if (v60 != &__str)
          sub_1D528FA34((char *)v60, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_, (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3);
LABEL_602:
        v12 = (_QWORD *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_603;
      }
      if (*a3 <= 0xC6FBu)
      {
        if (v6 != 50829)
        {
          if (v6 == 50935)
          {
            if (a3[1] == 5 && *((_DWORD *)a3 + 1) == 1)
            {
              if (*(char *)(a2 + 23) < 0)
              {
                sub_1D5290130(v232, *(void **)a2, *(_QWORD *)(a2 + 8));
              }
              else
              {
                *(_OWORD *)v232 = *(_OWORD *)a2;
                v233 = *(_QWORD *)(a2 + 16);
              }
              v199 = sub_1D5294144(a1 + 512, v232);
              v200 = (void **)(a1 + 520) != v199 && *((_DWORD *)v199 + 14) == 0;
              if (SHIBYTE(v233) < 0)
                operator delete(v232[0]);
              if (v200)
              {
                buf.__r_.__value_.__r.__words[0] = 0;
                sub_1D52917E4(a1, &__str);
                v202 = sub_1D52A7374((uint64_t)a3, (double *)&buf, (uint64_t *)&__str, v201);
                sub_1D5282EB4((uint64_t)&__str);
                if (v202)
                {
                  data = buf.__r_.__value_.__l.__data_;
                  if (!*(_BYTE *)(a1 + 1956))
                    *(_BYTE *)(a1 + 1956) = 1;
                  v204 = *(double *)&data;
                  *(float *)(a1 + 1952) = v204;
                }
              }
            }
            return;
          }
          goto LABEL_281;
        }
        if (*(char *)(a2 + 23) < 0)
        {
          sub_1D5290130(v240, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)v240 = *(_OWORD *)a2;
          v241 = *(_QWORD *)(a2 + 16);
        }
        v165 = sub_1D5294144(a1 + 512, v240);
        if ((void **)(a1 + 520) == v165 || *((_DWORD *)v165 + 14) || a3[1] - 3 > 1)
        {
          if (SHIBYTE(v241) < 0)
          {
            v12 = v240[0];
            goto LABEL_605;
          }
          return;
        }
        v166 = *((_DWORD *)a3 + 1);
        if (SHIBYTE(v241) < 0)
          operator delete(v240[0]);
        if (v166 != 4)
          return;
        v167 = a3[1];
        if (v167 == 4)
        {
          memset(&__str, 0, sizeof(__str));
          if (sub_1D52AD6B0(a1, (uint64_t)a3, (void **)&__str.__r_.__value_.__l.__data_))
          {
            v206 = *(_DWORD *)__str.__r_.__value_.__l.__data_;
            v205 = *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4);
            v208 = *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 8);
            v207 = *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 12);
            sub_1D5282DF0(&buf, v205, *(_DWORD *)__str.__r_.__value_.__l.__data_);
            sub_1D5282DF0(&buf.__r_.__value_.__r.__words[1], v207 - v205, v208 - v206);
            __p[0] = (void *)a2;
            v209 = sub_1D5305740((uint64_t **)(a1 + 1408), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)__p);
            *(_OWORD *)(v209 + 7) = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          }
        }
        else
        {
          if (v167 != 3)
            return;
          memset(&__str, 0, sizeof(__str));
          if (sub_1D52AE554(a1, (uint64_t)a3, &__str.__r_.__value_.__l.__data_))
          {
            v168 = *(unsigned __int16 *)(__str.__r_.__value_.__r.__words[0] + 2);
            v169 = *(unsigned __int16 *)__str.__r_.__value_.__l.__data_;
            v170 = *(unsigned __int16 *)(__str.__r_.__value_.__r.__words[0] + 6);
            v171 = *(unsigned __int16 *)(__str.__r_.__value_.__r.__words[0] + 4);
            buf.__r_.__value_.__r.__words[0] = a2;
            v172 = sub_1D5305740((uint64_t **)(a1 + 1408), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf);
            *((_DWORD *)v172 + 14) = v168;
            *((_DWORD *)v172 + 15) = v169;
            *((_DWORD *)v172 + 16) = v170 - v168;
            *((_DWORD *)v172 + 17) = v171 - v169;
          }
        }
        goto LABEL_602;
      }
      if (v6 != 50940)
      {
        if (v6 == 50964)
        {
          if (a3[1] != 10
            || !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184))
            && !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1208)))
          {
            return;
          }
          sub_1D52917E4(a1, &__str);
          sub_1D52A75D8((uint64_t)a3, (uint64_t *)&__str, (void **)&buf.__r_.__value_.__l.__data_);
          sub_1D5282EB4((uint64_t)&__str);
          if (*(_WORD *)(a1 + 1234))
          {
            v12 = (_QWORD *)buf.__r_.__value_.__r.__words[0];
            v61 = buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0];
            if (3 * *(unsigned __int16 *)(a1 + 1234) != (uint64_t)(buf.__r_.__value_.__l.__size_
                                                                   - buf.__r_.__value_.__r.__words[0]) >> 3)
              goto LABEL_568;
          }
          else
          {
            v61 = buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0];
          }
          *(_WORD *)(a1 + 1234) = (v61 >> 3) / 3uLL;
          sub_1D5338F80(&__str, (unsigned __int16)((v61 >> 3) / 3uLL), 3, &buf);
          __p[0] = (void *)a2;
          v198 = sub_1D530557C((uint64_t **)(a1 + 1768), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)__p);
          sub_1D53393A8(v198 + 7, (uint64_t)&__str);
        }
        else
        {
          if (v6 != 50965)
            goto LABEL_281;
          if (a3[1] != 10
            || !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184))
            && !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1208)))
          {
            return;
          }
          sub_1D52917E4(a1, &__str);
          sub_1D52A75D8((uint64_t)a3, (uint64_t *)&__str, (void **)&buf.__r_.__value_.__l.__data_);
          sub_1D5282EB4((uint64_t)&__str);
          if (*(_WORD *)(a1 + 1234))
          {
            v12 = (_QWORD *)buf.__r_.__value_.__r.__words[0];
            v13 = buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0];
            if (3 * *(unsigned __int16 *)(a1 + 1234) != (uint64_t)(buf.__r_.__value_.__l.__size_
                                                                   - buf.__r_.__value_.__r.__words[0]) >> 3)
            {
LABEL_568:
              if (!v12)
                return;
              buf.__r_.__value_.__l.__size_ = (std::string::size_type)v12;
              goto LABEL_605;
            }
          }
          else
          {
            v13 = buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0];
          }
          *(_WORD *)(a1 + 1234) = (v13 >> 3) / 3uLL;
          sub_1D5338F80(&__str, (unsigned __int16)((v13 >> 3) / 3uLL), 3, &buf);
          __p[0] = (void *)a2;
          v197 = sub_1D530557C((uint64_t **)(a1 + 1792), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)__p);
          sub_1D53393A8(v197 + 7, (uint64_t)&__str);
        }
LABEL_565:
        if (__str.__r_.__value_.__l.__size_)
        {
          __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
          operator delete((void *)__str.__r_.__value_.__l.__size_);
        }
        v12 = (_QWORD *)buf.__r_.__value_.__r.__words[0];
        goto LABEL_568;
      }
      sub_1D52917E4(a1, &buf);
      LODWORD(v276.f64[0]) = sub_1D52A5CC8((uint64_t)a3);
      sub_1D5285B08((int *)__p, (int *)&v276);
      sub_1D5285164((uint64_t *)&__str, (uint64_t *)&buf, (uint64_t)__p, 0);
      sub_1D5282EB4((uint64_t)&buf);
      if (a3[1] == 11
        && (sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184))
         || sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1208))))
      {
        v63 = *((unsigned int *)a3 + 1);
        if ((v63 & 1) == 0)
        {
          sub_1D528EB68(&buf, v63 >> 1);
          sub_1D528EB68(__p, (unint64_t)*((unsigned int *)a3 + 1) >> 1);
          if (*((_DWORD *)a3 + 1) >= 2u)
          {
            v64 = 0;
            do
            {
              sub_1D52917E4(a1, &v276);
              v65 = sub_1D5284934(*(uint64_t *)&v276.f64[0]);
              *(double *)(buf.__r_.__value_.__r.__words[0] + 8 * v64) = v65;
              v66 = v276.f64[1];
              if (*(_QWORD *)&v276.f64[1])
              {
                v67 = (unint64_t *)(*(_QWORD *)&v276.f64[1] + 8);
                do
                  v68 = __ldaxr(v67);
                while (__stlxr(v68 - 1, v67));
                if (!v68)
                {
                  (*(void (**)(float64_t))(**(_QWORD **)&v66 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v66));
                  std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v66);
                }
              }
              sub_1D52917E4(a1, &v276);
              v69 = sub_1D5284934(*(uint64_t *)&v276.f64[0]);
              *((double *)__p[0] + v64) = v69;
              v70 = v276.f64[1];
              if (*(_QWORD *)&v276.f64[1])
              {
                v71 = (unint64_t *)(*(_QWORD *)&v276.f64[1] + 8);
                do
                  v72 = __ldaxr(v71);
                while (__stlxr(v72 - 1, v71));
                if (!v72)
                {
                  (*(void (**)(float64_t))(**(_QWORD **)&v70 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v70));
                  std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v70);
                }
              }
              ++v64;
            }
            while (v64 < (unint64_t)*((unsigned int *)a3 + 1) >> 1);
          }
          v73 = __p[0];
          if (*(double *)buf.__r_.__value_.__l.__data_ == 0.0)
          {
            if (*(double *)__p[0] != 0.0
              || (v74 = ((uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 3) - 1,
                  fabs(*(double *)(buf.__r_.__value_.__r.__words[0] + 8 * v74) + -1.0) >= 0.0001)
              || fabs(*((double *)__p[0] + v74) + -1.0) >= 0.0001)
            {
LABEL_277:
              __p[1] = v73;
              operator delete(v73);
LABEL_278:
              if (buf.__r_.__value_.__r.__words[0])
              {
                buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              goto LABEL_616;
            }
            *(_QWORD *)&v276.f64[0] = a2;
            v75 = (std::string *)(sub_1D52B3E7C((uint64_t **)(a1 + 2120), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&v276)+ 7);
            if (v75 != &buf)
              sub_1D528FA34((char *)v75, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_, (uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 3);
            *(_QWORD *)&v276.f64[0] = a2;
            v76 = (char *)(sub_1D52B3E7C((uint64_t **)(a1 + 2144), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&v276)+ 7);
            v73 = __p[0];
            if (v76 != (char *)__p)
            {
              sub_1D528FA34(v76, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
              v73 = __p[0];
            }
          }
          if (!v73)
            goto LABEL_278;
          goto LABEL_277;
        }
      }
LABEL_616:
      sub_1D5285200((uint64_t *)&__str);
      return;
    }
    if (*a3 > 0xCD2Cu)
    {
      if (*a3 <= 0xCD3Fu)
      {
        if (v6 == 52525)
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) == 0
            && a3[1] == 7
            && (sub_1D52B18D0((const void **)a2, "IFD0") || sub_1D52B18D0((const void **)a2, "IFD0:SUBIFD0")))
          {
            v50 = *(unsigned __int8 *)(a1 + 1972);
            v51 = *((_DWORD *)a3 + 2);
            *(_QWORD *)(a1 + 1960) = *(_QWORD *)a3;
            *(_DWORD *)(a1 + 1968) = v51;
            if (!v50)
              *(_BYTE *)(a1 + 1972) = 1;
          }
          return;
        }
        if (v6 == 52526)
        {
          if (a3[1] == 2)
          {
            memset(&__str, 0, sizeof(__str));
            if (sub_1D52ADD1C(a1, (uint64_t)a3, &__str, 0))
            {
              buf.__r_.__value_.__r.__words[0] = a2;
              v14 = sub_1D52B3FFC((uint64_t **)(a1 + 2408), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf);
              std::string::operator=((std::string *)(v14 + 7), &__str);
            }
LABEL_249:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            {
              v12 = (_QWORD *)__str.__r_.__value_.__r.__words[0];
LABEL_605:
              operator delete(v12);
              return;
            }
          }
          return;
        }
        goto LABEL_281;
      }
      if (v6 == 52544)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) == 0
          && a3[1] == 7
          && (sub_1D52B18D0((const void **)a2, "IFD0") || sub_1D52B18D0((const void **)a2, "IFD0:SUBIFD0")))
        {
          v52 = *(unsigned __int8 *)(a1 + 1988);
          v53 = *((_DWORD *)a3 + 2);
          *(_QWORD *)(a1 + 1976) = *(_QWORD *)a3;
          *(_DWORD *)(a1 + 1984) = v53;
          if (!v52)
            *(_BYTE *)(a1 + 1988) = 1;
        }
        return;
      }
      if (v6 != 52547)
        goto LABEL_281;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) != 0 || a3[1] - 3 > 1)
        return;
      if (*(char *)(a2 + 23) < 0)
      {
        sub_1D5290130(v226, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)v226 = *(_OWORD *)a2;
        v227 = *(_QWORD *)(a2 + 16);
      }
      v216 = sub_1D5294144(a1 + 512, v226);
      v217 = (void **)(a1 + 520) == v216 || *((_DWORD *)v216 + 14) || *((_DWORD *)a3 + 1) != 1;
      if (SHIBYTE(v227) < 0)
        operator delete(v226[0]);
      if (v217)
        return;
      if (a3[1] == 4)
        v17 = *((_DWORD *)a3 + 2);
      else
        v17 = sub_1D52AD670((uint64_t)a3);
      __str.__r_.__value_.__r.__words[0] = a2;
      v18 = sub_1D52B3C68((uint64_t **)(a1 + 2480), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&__str);
      goto LABEL_651;
    }
    switch(*a3)
    {
      case 0xC7E9u:
        if (a3[1] != 3)
          return;
        if (*((_DWORD *)a3 + 1) != 1)
          return;
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        if (!sub_1D52A7580((uint64_t)a3, &buf))
          return;
        v10 = (__int16)buf.__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[0] = a2;
        v11 = sub_1D52B417C((uint64_t **)(a1 + 2264), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&__str);
        goto LABEL_336;
      case 0xC7EAu:
        if (a3[1] != 5 || *((_DWORD *)a3 + 1) != 1)
          return;
        sub_1D52917E4(a1, &buf);
        LODWORD(v276.f64[0]) = sub_1D52A5CC8((uint64_t)a3);
        sub_1D5285B08((int *)__p, (int *)&v276);
        sub_1D5285164((uint64_t *)&__str, (uint64_t *)&buf, (uint64_t)__p, 0);
        sub_1D5282EB4((uint64_t)&buf);
        sub_1D52917E4(a1, &buf);
        v54 = sub_1D52847F8((uint64_t)buf.__r_.__value_.__l.__data_);
        sub_1D5282EB4((uint64_t)&buf);
        sub_1D52917E4(a1, &buf);
        v55 = sub_1D52847F8((uint64_t)buf.__r_.__value_.__l.__data_);
        sub_1D5282EB4((uint64_t)&buf);
        if (v54 != 1 || v55)
        {
          v79 = (uint64_t **)(a1 + 2288);
          if (v54 | v55)
            goto LABEL_615;
          buf.__r_.__value_.__r.__words[0] = a2;
          v58 = sub_1D52B4328(v79, (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf);
          v59 = 0x7FF8000000000000;
        }
        else
        {
          buf.__r_.__value_.__r.__words[0] = a2;
          v58 = sub_1D52B4328((uint64_t **)(a1 + 2288), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf);
          v59 = 0x7FF0000000000000;
        }
        v58[7] = v59;
        goto LABEL_616;
      case 0xC7EBu:
        if (a3[1] != 5 || *((_DWORD *)a3 + 1) != 1)
          return;
        sub_1D52917E4(a1, &buf);
        LODWORD(v276.f64[0]) = sub_1D52A5CC8((uint64_t)a3);
        sub_1D5285B08((int *)__p, (int *)&v276);
        sub_1D5285164((uint64_t *)&__str, (uint64_t *)&buf, (uint64_t)__p, 0);
        sub_1D5282EB4((uint64_t)&buf);
        sub_1D52917E4(a1, &buf);
        v54 = sub_1D52847F8((uint64_t)buf.__r_.__value_.__l.__data_);
        sub_1D5282EB4((uint64_t)&buf);
        sub_1D52917E4(a1, &buf);
        v55 = sub_1D52847F8((uint64_t)buf.__r_.__value_.__l.__data_);
        sub_1D5282EB4((uint64_t)&buf);
        if (v54 != 1 || v55)
        {
          v79 = (uint64_t **)(a1 + 2312);
          if (v54 | v55)
          {
LABEL_615:
            buf.__r_.__value_.__r.__words[0] = a2;
            *((double *)sub_1D52B4328(v79, (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf) + 7) = (double)v54 / (double)v55;
            goto LABEL_616;
          }
          buf.__r_.__value_.__r.__words[0] = a2;
          v56 = sub_1D52B4328(v79, (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf);
          v57 = 0x7FF8000000000000;
        }
        else
        {
          buf.__r_.__value_.__r.__words[0] = a2;
          v56 = sub_1D52B4328((uint64_t **)(a1 + 2312), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf);
          v57 = 0x7FF0000000000000;
        }
        v56[7] = v57;
        goto LABEL_616;
      case 0xC7ECu:
        if (a3[1] != 3)
          return;
        if (*((_DWORD *)a3 + 1) != 1)
          return;
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        if (!sub_1D52A7580((uint64_t)a3, &buf))
          return;
        v10 = (__int16)buf.__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[0] = a2;
        v11 = sub_1D52B417C((uint64_t **)(a1 + 2336), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&__str);
        goto LABEL_336;
      case 0xC7EDu:
        if (a3[1] != 3)
          return;
        if (*((_DWORD *)a3 + 1) != 1)
          return;
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        if (!sub_1D52A7580((uint64_t)a3, &buf))
          return;
        v10 = (__int16)buf.__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[0] = a2;
        v11 = sub_1D52B417C((uint64_t **)(a1 + 2360), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&__str);
LABEL_336:
        *((_WORD *)v11 + 28) = v10;
        return;
      case 0xC7EEu:
        if (a3[1] != 2)
          return;
        memset(&__str, 0, sizeof(__str));
        if (sub_1D52ADD1C(a1, (uint64_t)a3, &__str, 0))
        {
          buf.__r_.__value_.__r.__words[0] = a2;
          v62 = sub_1D52B3FFC((uint64_t **)(a1 + 2384), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf);
          std::string::operator=((std::string *)(v62 + 7), &__str);
        }
        goto LABEL_249;
      default:
        goto LABEL_281;
    }
  }
  if (*a3 > 0xC611u)
  {
    switch(*a3)
    {
      case 0xC612u:
        if (!sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184))
          || a3[1] != 1
          || *((_DWORD *)a3 + 1) != 4)
        {
          return;
        }
        v7 = 0;
        LODWORD(__str.__r_.__value_.__l.__data_) = 0;
        do
        {
          sub_1D5285A24(&buf, (unsigned int *)&__str);
          v7 = (v7 << 8) | sub_1D52B19D0((uint64_t)a3, (unsigned int *)&buf);
          v8 = LODWORD(__str.__r_.__value_.__l.__data_)++;
        }
        while (v8 < 3);
        __str.__r_.__value_.__r.__words[0] = a2;
        v9 = sub_1D52B3C68((uint64_t **)(a1 + 1432), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&__str);
        goto LABEL_141;
      case 0xC613u:
        if (!sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184))
          || a3[1] != 1
          || *((_DWORD *)a3 + 1) != 4)
        {
          return;
        }
        v7 = 0;
        LODWORD(__str.__r_.__value_.__l.__data_) = 0;
        do
        {
          sub_1D5285A24(&buf, (unsigned int *)&__str);
          v7 = (v7 << 8) | sub_1D52B19D0((uint64_t)a3, (unsigned int *)&buf);
          v41 = LODWORD(__str.__r_.__value_.__l.__data_)++;
        }
        while (v41 < 3);
        if (v7 > 0x1070000)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](exception, "RawCameraException");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        __str.__r_.__value_.__r.__words[0] = a2;
        v9 = sub_1D52B3C68((uint64_t **)(a1 + 1456), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&__str);
LABEL_141:
        *((_DWORD *)v9 + 14) = v7;
        return;
      case 0xC614u:
        if (!sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184)) || a3[1] != 2)
          return;
        memset(&__str, 0, sizeof(__str));
        if (sub_1D52ADD1C(a1, (uint64_t)a3, &__str, 0))
        {
          buf.__r_.__value_.__r.__words[0] = a2;
          v39 = sub_1D52B3FFC((uint64_t **)(a1 + 1312), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf);
          std::string::operator=((std::string *)(v39 + 7), &__str);
        }
        goto LABEL_249;
      case 0xC616u:
        if (*(char *)(a2 + 23) < 0)
        {
          sub_1D5290130(v268, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)v268 = *(_OWORD *)a2;
          v269 = *(_QWORD *)(a2 + 16);
        }
        v89 = sub_1D5294144(a1 + 512, v268);
        if ((void **)(a1 + 520) == v89 || *((_DWORD *)v89 + 14))
        {
          if ((SHIBYTE(v269) & 0x80000000) == 0)
            return;
          v12 = v268[0];
          goto LABEL_605;
        }
        v90 = a3[1];
        if (SHIBYTE(v269) < 0)
          operator delete(v268[0]);
        if (v90 != 1)
          return;
        v91 = a3[2];
        if ((v91 - 5) < 0xFFFFFFFE || *(_WORD *)(a1 + 1234) && *(unsigned __int16 *)(a1 + 1234) != v91)
          return;
        *(_WORD *)(a1 + 1234) = v91;
        memset(&__str, 0, sizeof(__str));
        if (!sub_1D52AE9A4(a1, (uint64_t)a3, (unint64_t *)&__str))
          goto LABEL_602;
        v12 = (_QWORD *)__str.__r_.__value_.__r.__words[0];
        if (__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0] != *(unsigned __int16 *)(a1 + 1234))
        {
          v92 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v92, "RawCameraException");
          __cxa_throw(v92, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        goto LABEL_603;
      case 0xC617u:
        if (*(char *)(a2 + 23) < 0)
        {
          sub_1D5290130(v266, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)v266 = *(_OWORD *)a2;
          v267 = *(_QWORD *)(a2 + 16);
        }
        v93 = sub_1D5294144(a1 + 512, v266);
        if ((void **)(a1 + 520) != v93 && !*((_DWORD *)v93 + 14) && a3[1] == 3)
        {
          v94 = *((_DWORD *)a3 + 1);
          if (SHIBYTE(v267) < 0)
            operator delete(v266[0]);
          if (v94 == 1)
          {
            v10 = sub_1D52AD670((uint64_t)a3);
            __str.__r_.__value_.__r.__words[0] = a2;
            v11 = sub_1D52B417C((uint64_t **)(a1 + 1504), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&__str);
            goto LABEL_336;
          }
          return;
        }
        if ((SHIBYTE(v267) & 0x80000000) == 0)
          return;
        v12 = v266[0];
        goto LABEL_605;
      case 0xC618u:
        if (*(char *)(a2 + 23) < 0)
        {
          sub_1D5290130(v264, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)v264 = *(_OWORD *)a2;
          v265 = *(_QWORD *)(a2 + 16);
        }
        v113 = sub_1D5294144(a1 + 512, v264);
        if ((void **)(a1 + 520) == v113 || *((_DWORD *)v113 + 14))
        {
          if ((SHIBYTE(v265) & 0x80000000) == 0)
            return;
          v12 = v264[0];
          goto LABEL_605;
        }
        v114 = a3[1];
        if (SHIBYTE(v265) < 0)
          operator delete(v264[0]);
        if (v114 == 3)
        {
          memset(&__str, 0, sizeof(__str));
          if (sub_1D52AE554(a1, (uint64_t)a3, &__str.__r_.__value_.__l.__data_))
          {
            buf.__r_.__value_.__r.__words[0] = a2;
            v115 = (std::string *)(sub_1D52B3E7C((uint64_t **)(a1 + 1576), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf)+ 7);
            if (v115 != &__str)
              sub_1D52B1D94((char *)v115, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_, (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 1);
          }
          goto LABEL_602;
        }
        return;
      case 0xC619u:
        if (*(char *)(a2 + 23) < 0)
        {
          sub_1D5290130(v262, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)v262 = *(_OWORD *)a2;
          v263 = *(_QWORD *)(a2 + 16);
        }
        v100 = sub_1D5294144(a1 + 512, v262);
        if ((void **)(a1 + 520) != v100 && !*((_DWORD *)v100 + 14) && a3[1] == 3)
        {
          v101 = *((_DWORD *)a3 + 1);
          if (SHIBYTE(v263) < 0)
            operator delete(v262[0]);
          if (v101 == 2)
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 0;
            sub_1D5285A24(&__str, (unsigned int *)&buf);
            v102 = sub_1D52A7E28((uint64_t)a3, (unsigned int *)&__str);
            LODWORD(buf.__r_.__value_.__l.__data_) = 1;
            sub_1D5285A24(&__str, (unsigned int *)&buf);
            v103 = sub_1D52A7E28((uint64_t)a3, (unsigned int *)&__str);
            LOWORD(buf.__r_.__value_.__l.__data_) = v102;
            *(_WORD *)&buf.__r_.__value_.__s.__data_[2] = v103;
            __str.__r_.__value_.__r.__words[0] = a2;
            v104 = sub_1D52B3E7C((uint64_t **)(a1 + 1552), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&__str);
            sub_1D52B1D94((char *)v104 + 56, (char *)&buf, (uint64_t)buf.__r_.__value_.__r.__words + 4, 2uLL);
            if (((v102 * v103) & 0xFFFF0000) == 0)
              *(_WORD *)(a1 + 1238) = v102 * v103;
          }
          return;
        }
        if ((SHIBYTE(v263) & 0x80000000) == 0)
          return;
        v12 = v262[0];
        goto LABEL_605;
      case 0xC61Au:
        if (*(char *)(a2 + 23) < 0)
        {
          sub_1D5290130(v260, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)v260 = *(_OWORD *)a2;
          v261 = *(_QWORD *)(a2 + 16);
        }
        v95 = sub_1D5294144(a1 + 512, v260);
        if ((void **)(a1 + 520) == v95 || *((_DWORD *)v95 + 14))
        {
          if ((SHIBYTE(v261) & 0x80000000) == 0)
            return;
          v12 = v260[0];
          goto LABEL_605;
        }
        v96 = a3[1];
        if ((v96 - 3) >= 3)
        {
          if (SHIBYTE(v261) < 0)
            operator delete(v260[0]);
          if (v96 != 9)
            return;
        }
        else if (SHIBYTE(v261) < 0)
        {
          operator delete(v260[0]);
        }
        if (*((_DWORD *)a3 + 1) == *(unsigned __int16 *)(a1 + 1236) * *(unsigned __int16 *)(a1 + 1238))
        {
          sub_1D52917E4(a1, &buf);
          sub_1D52A75D8((uint64_t)a3, (uint64_t *)&buf, (void **)&__str.__r_.__value_.__l.__data_);
          v97 = (_QWORD *)sub_1D5282EB4((uint64_t)&buf);
          v98 = __str.__r_.__value_.__r.__words[0];
          if (*((_DWORD *)a3 + 1) == (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3)
          {
            if (__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0] == 8)
            {
              sub_1D528F9B4(v97, 4uLL, __str.__r_.__value_.__l.__data_);
              if (__str.__r_.__value_.__r.__words[0])
              {
                __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              __str = buf;
            }
            buf.__r_.__value_.__r.__words[0] = a2;
            v99 = (std::string *)(sub_1D52B3E7C((uint64_t **)(a1 + 264), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf)+ 7);
            v98 = __str.__r_.__value_.__r.__words[0];
            if (v99 != &__str)
            {
              sub_1D528FA34((char *)v99, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_, (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3);
              v98 = __str.__r_.__value_.__r.__words[0];
            }
          }
          if (v98)
          {
            __str.__r_.__value_.__l.__size_ = v98;
            v12 = (_QWORD *)v98;
            goto LABEL_605;
          }
        }
        return;
      case 0xC61Bu:
        if (*(char *)(a2 + 23) < 0)
        {
          sub_1D5290130(v258, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)v258 = *(_OWORD *)a2;
          v259 = *(_QWORD *)(a2 + 16);
        }
        v116 = sub_1D5294144(a1 + 512, v258);
        if ((void **)(a1 + 520) == v116 || *((_DWORD *)v116 + 14))
        {
          if ((SHIBYTE(v259) & 0x80000000) == 0)
            return;
          v12 = v258[0];
          goto LABEL_605;
        }
        v117 = a3[1];
        if (SHIBYTE(v259) < 0)
          operator delete(v258[0]);
        if (v117 != 10)
          return;
        sub_1D52917E4(a1, &buf);
        sub_1D52A75D8((uint64_t)a3, (uint64_t *)&buf, (void **)&__str.__r_.__value_.__l.__data_);
        sub_1D5282EB4((uint64_t)&buf);
        v276 = 0uLL;
        v279 = 0uLL;
        v118 = __str.__r_.__value_.__r.__words[0];
        if (__str.__r_.__value_.__l.__size_ == __str.__r_.__value_.__r.__words[0])
        {
          v121 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
        }
        else
        {
          v119 = 0;
          v120 = (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3;
          if (v120 <= 1)
            v120 = 1;
          do
          {
            *(double *)((unint64_t)&v276 & 0xFFFFFFFFFFFFFFF7 | (8 * (v119 & 1))) = *(double *)(v118 + 8 * v119)
                                                                                           + *(double *)((unint64_t)&v276 & 0xFFFFFFFFFFFFFFF7 | (8 * (v119 & 1)));
            *(double *)((unint64_t)&v279 & 0xFFFFFFFFFFFFFFF7 | (8 * (v119 & 1))) = *(double *)((unint64_t)&v279 & 0xFFFFFFFFFFFFFFF7 | (8 * (v119 & 1)))
                                                                                           + 1.0;
            ++v119;
          }
          while (v120 != v119);
          v121 = vdivq_f64(v276, v279);
        }
        v276 = v121;
        sub_1D528EB68(&buf, 4uLL);
        v150 = 0;
        v151 = buf.__r_.__value_.__r.__words[0];
        do
        {
          *(_QWORD *)(v151 + 8 * v150) = *(_QWORD *)((unint64_t)&v276 & 0xFFFFFFFFFFFFFFF7 | (8 * (v150 & 1)));
          ++v150;
        }
        while (v150 != 4);
        sub_1D52AFE84(":DeltaH", (const void **)a2, __p);
        *(_QWORD *)&v278.f64[0] = __p;
        v152 = (std::string *)((char *)sub_1D52BA2C8((uint64_t **)(a1 + 264), __p, (uint64_t)&unk_1D544A5C4, &v278) + 56);
        if (v152 != &buf)
          sub_1D528FA34((char *)v152, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_, (uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 3);
        if (SHIBYTE(v257) < 0)
        {
          v153 = __p[0];
          goto LABEL_471;
        }
        goto LABEL_472;
      case 0xC61Cu:
        if (*(char *)(a2 + 23) < 0)
        {
          sub_1D5290130(v254, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)v254 = *(_OWORD *)a2;
          v255 = *(_QWORD *)(a2 + 16);
        }
        v122 = sub_1D5294144(a1 + 512, v254);
        if ((void **)(a1 + 520) == v122 || *((_DWORD *)v122 + 14))
        {
          if ((SHIBYTE(v255) & 0x80000000) == 0)
            return;
          v12 = v254[0];
          goto LABEL_605;
        }
        v123 = a3[1];
        if (SHIBYTE(v255) < 0)
          operator delete(v254[0]);
        if (v123 != 10)
          return;
        sub_1D52917E4(a1, &buf);
        sub_1D52A75D8((uint64_t)a3, (uint64_t *)&buf, (void **)&__str.__r_.__value_.__l.__data_);
        sub_1D5282EB4((uint64_t)&buf);
        v279 = 0uLL;
        v278 = 0uLL;
        v124 = __str.__r_.__value_.__r.__words[0];
        if (__str.__r_.__value_.__l.__size_ == __str.__r_.__value_.__r.__words[0])
        {
          v127 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
        }
        else
        {
          v125 = 0;
          v126 = (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3;
          if (v126 <= 1)
            v126 = 1;
          do
          {
            *(double *)((unint64_t)&v279 & 0xFFFFFFFFFFFFFFF7 | (8 * (v125 & 1))) = *(double *)(v124 + 8 * v125)
                                                                                           + *(double *)((unint64_t)&v279 & 0xFFFFFFFFFFFFFFF7 | (8 * (v125 & 1)));
            *(double *)((unint64_t)&v278 & 0xFFFFFFFFFFFFFFF7 | (8 * (v125 & 1))) = *(double *)((unint64_t)&v278 & 0xFFFFFFFFFFFFFFF7 | (8 * (v125 & 1)))
                                                                                           + 1.0;
            ++v125;
          }
          while (v126 != v125);
          v127 = vdivq_f64(v279, v278);
        }
        v279 = v127;
        sub_1D528EB68(&buf, 4uLL);
        v154 = &v279;
        v155 = vld1q_dup_f64(v154->f64);
        v156 = (_OWORD *)buf.__r_.__value_.__r.__words[0];
        *(float64x2_t *)buf.__r_.__value_.__l.__data_ = v155;
        v157 = &v279.f64[1];
        v158 = vld1q_dup_f64(v157);
        v156[1] = v158;
        __p[1] = 0;
        v257 = 0;
        __p[0] = 0;
        sub_1D5282C70(__p, v156, buf.__r_.__value_.__l.__size_, (uint64_t)(buf.__r_.__value_.__l.__size_ - (_QWORD)v156) >> 3);
        sub_1D52AFE84(":DeltaV", (const void **)a2, (void **)&v276);
        v274 = &v276;
        v159 = sub_1D52BA2C8((uint64_t **)(a1 + 264), (void **)&v276, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v274);
        v160 = (void *)v159[7];
        if (v160)
        {
          v159[8] = v160;
          operator delete(v160);
          v159[7] = 0;
          v159[8] = 0;
          v159[9] = 0;
        }
        *(_OWORD *)(v159 + 7) = *(_OWORD *)__p;
        v159[9] = v257;
        __p[1] = 0;
        v257 = 0;
        __p[0] = 0;
        if (v277 < 0)
        {
          operator delete(*(void **)&v276.f64[0]);
          v153 = __p[0];
          if (__p[0])
          {
            __p[1] = __p[0];
LABEL_471:
            operator delete(v153);
          }
        }
LABEL_472:
        v78 = (char *)buf.__r_.__value_.__r.__words[0];
        if (buf.__r_.__value_.__r.__words[0])
        {
          buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
          goto LABEL_474;
        }
        goto LABEL_602;
      case 0xC61Du:
        if (*(char *)(a2 + 23) < 0)
        {
          sub_1D5290130(v252, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)v252 = *(_OWORD *)a2;
          v253 = *(_QWORD *)(a2 + 16);
        }
        v105 = sub_1D5294144(a1 + 512, v252);
        if ((void **)(a1 + 520) == v105
          || *((_DWORD *)v105 + 14)
          || (v107 = a3[1], (v107 - 3) >= 2) && v107 != 9)
        {
          if ((SHIBYTE(v253) & 0x80000000) == 0)
            return;
          v12 = v252[0];
          goto LABEL_605;
        }
        v108 = *((_DWORD *)a3 + 1);
        v109 = *(unsigned __int16 *)(a1 + 1236);
        if (SHIBYTE(v253) < 0)
          operator delete(v252[0]);
        if (v108 != v109)
          return;
        v110 = a3[1];
        if (*((_DWORD *)a3 + 1) == 1)
        {
          if (v110 == 3)
          {
            *(double *)&buf.__r_.__value_.__l.__data_ = (double)sub_1D52AD670((uint64_t)a3);
          }
          else
          {
            LODWORD(v106) = *((_DWORD *)a3 + 2);
            *(double *)&buf.__r_.__value_.__l.__data_ = (double)v106;
          }
          __str.__r_.__value_.__r.__words[0] = a2;
          v111 = sub_1D52B3E7C((uint64_t **)(a1 + 240), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&__str);
          sub_1D528FA34((char *)v111 + 56, (char *)&buf, (uint64_t)&buf.__r_.__value_.__l.__size_, 1uLL);
          return;
        }
        if (v110 == 4)
        {
          memset(&__str, 0, sizeof(__str));
          if (!sub_1D52AD6B0(a1, (uint64_t)a3, (void **)&__str.__r_.__value_.__l.__data_))
            goto LABEL_602;
          memset(&buf, 0, sizeof(buf));
          sub_1D5304560((char *)&buf, (unsigned int *)__str.__r_.__value_.__l.__data_, (unsigned int *)__str.__r_.__value_.__l.__size_, (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 2);
          __p[0] = (void *)a2;
          v112 = sub_1D52B3E7C((uint64_t **)(a1 + 240), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)__p);
          goto LABEL_644;
        }
        if (v110 != 3)
          return;
        memset(&__str, 0, sizeof(__str));
        if (sub_1D52AE554(a1, (uint64_t)a3, &__str.__r_.__value_.__l.__data_))
        {
          memset(&buf, 0, sizeof(buf));
          sub_1D52EFBC0((char *)&buf, (unsigned __int16 *)__str.__r_.__value_.__l.__data_, (unsigned __int16 *)__str.__r_.__value_.__l.__size_, (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 1);
          __p[0] = (void *)a2;
          v112 = sub_1D52B3E7C((uint64_t **)(a1 + 240), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)__p);
LABEL_644:
          v220 = v112;
          v222 = v112 + 7;
          v221 = (void *)v112[7];
          if (v221)
          {
            v220[8] = (uint64_t)v221;
            operator delete(v221);
            *v222 = 0;
            v222[1] = 0;
            v222[2] = 0;
          }
          *(std::string *)(v220 + 7) = buf;
          goto LABEL_602;
        }
        goto LABEL_602;
      case 0xC61Eu:
        if (*(char *)(a2 + 23) < 0)
        {
          sub_1D5290130(v244, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)v244 = *(_OWORD *)a2;
          v245 = *(_QWORD *)(a2 + 16);
        }
        v128 = sub_1D5294144(a1 + 512, v244);
        if ((void **)(a1 + 520) == v128 || *((_DWORD *)v128 + 14) || a3[1] - 3 > 2)
        {
          if ((SHIBYTE(v245) & 0x80000000) == 0)
            return;
          v12 = v244[0];
          goto LABEL_605;
        }
        v129 = *((_DWORD *)a3 + 1);
        if (SHIBYTE(v245) < 0)
          operator delete(v244[0]);
        if (v129 != 2)
          return;
        v130 = a3[1];
        if (v130 == 5)
        {
          memset(&__str, 0, sizeof(__str));
          v215 = sub_1D52ADF90(a1, (uint64_t)a3, (uint64_t)&__str);
          v12 = (_QWORD *)__str.__r_.__value_.__r.__words[0];
          if (!v215 || __str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0] != 8)
            goto LABEL_603;
          v213 = *(float *)__str.__r_.__value_.__l.__data_;
          if (fabsf(*(float *)__str.__r_.__value_.__l.__data_) != INFINITY)
          {
            v214 = *(float *)(__str.__r_.__value_.__r.__words[0] + 4);
            if (fabsf(v214) != INFINITY)
            {
              buf.__r_.__value_.__r.__words[0] = a2;
              v85 = sub_1D52B4328((uint64_t **)(a1 + 1384), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf);
              goto LABEL_612;
            }
          }
          goto LABEL_604;
        }
        if (v130 != 4)
        {
          if (v130 != 3)
            return;
          memset(&__str, 0, sizeof(__str));
          if (sub_1D52AE554(a1, (uint64_t)a3, &__str.__r_.__value_.__l.__data_))
          {
            v83 = *(unsigned __int16 *)__str.__r_.__value_.__l.__data_;
            v84 = *(unsigned __int16 *)(__str.__r_.__value_.__r.__words[0] + 2);
            buf.__r_.__value_.__r.__words[0] = a2;
            v85 = sub_1D52B4328((uint64_t **)(a1 + 1384), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf);
            goto LABEL_427;
          }
          goto LABEL_602;
        }
        memset(&__str, 0, sizeof(__str));
        if (!sub_1D52AD6B0(a1, (uint64_t)a3, (void **)&__str.__r_.__value_.__l.__data_))
          goto LABEL_602;
        sub_1D5282DF0(__p, *(_DWORD *)__str.__r_.__value_.__l.__data_, *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4));
        buf.__r_.__value_.__r.__words[0] = a2;
        v85 = sub_1D52B4328((uint64_t **)(a1 + 1384), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf);
        goto LABEL_600;
      case 0xC61Fu:
        if (*(char *)(a2 + 23) < 0)
        {
          sub_1D5290130(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)a2;
          v249 = *(_QWORD *)(a2 + 16);
        }
        v80 = sub_1D5294144(a1 + 512, __dst);
        if ((void **)(a1 + 520) == v80 || *((_DWORD *)v80 + 14) || a3[1] - 3 > 2)
        {
          if ((SHIBYTE(v249) & 0x80000000) == 0)
            return;
          v12 = __dst[0];
          goto LABEL_605;
        }
        v81 = *((_DWORD *)a3 + 1);
        if (SHIBYTE(v249) < 0)
          operator delete(__dst[0]);
        if (v81 != 2)
          return;
        v82 = a3[1];
        if (v82 == 5)
        {
          memset(&__str, 0, sizeof(__str));
          v210 = sub_1D52ADF90(a1, (uint64_t)a3, (uint64_t)&__str);
          v12 = (_QWORD *)__str.__r_.__value_.__r.__words[0];
          if (!v210 || __str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0] != 8)
            goto LABEL_603;
          if (fabsf(*(float *)__str.__r_.__value_.__l.__data_) != INFINITY)
          {
            v211 = *(float *)(__str.__r_.__value_.__r.__words[0] + 4);
            if (fabsf(v211) != INFINITY)
            {
              sub_1D5282DF0(__p, *(float *)__str.__r_.__value_.__l.__data_, v211);
              buf.__r_.__value_.__r.__words[0] = a2;
              v85 = sub_1D52B4328((uint64_t **)(a1 + 1336), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf);
              goto LABEL_600;
            }
          }
          goto LABEL_604;
        }
        if (v82 != 4)
        {
          if (v82 != 3)
            return;
          memset(&__str, 0, sizeof(__str));
          if (sub_1D52AE554(a1, (uint64_t)a3, &__str.__r_.__value_.__l.__data_))
          {
            v83 = *(unsigned __int16 *)__str.__r_.__value_.__l.__data_;
            v84 = *(unsigned __int16 *)(__str.__r_.__value_.__r.__words[0] + 2);
            buf.__r_.__value_.__r.__words[0] = a2;
            v85 = sub_1D52B4328((uint64_t **)(a1 + 1336), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf);
            goto LABEL_427;
          }
          goto LABEL_602;
        }
        memset(&__str, 0, sizeof(__str));
        if (!sub_1D52AD6B0(a1, (uint64_t)a3, (void **)&__str.__r_.__value_.__l.__data_))
          goto LABEL_602;
        sub_1D5282DF0(__p, *(_DWORD *)__str.__r_.__value_.__l.__data_, *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4));
        buf.__r_.__value_.__r.__words[0] = a2;
        v85 = sub_1D52B4328((uint64_t **)(a1 + 1336), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf);
        goto LABEL_600;
      case 0xC620u:
        if (*(char *)(a2 + 23) < 0)
        {
          sub_1D5290130(v246, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)v246 = *(_OWORD *)a2;
          v247 = *(_QWORD *)(a2 + 16);
        }
        v86 = sub_1D5294144(a1 + 512, v246);
        if ((void **)(a1 + 520) == v86 || *((_DWORD *)v86 + 14) || a3[1] - 3 > 2)
        {
          if ((SHIBYTE(v247) & 0x80000000) == 0)
            return;
          v12 = v246[0];
          goto LABEL_605;
        }
        v87 = *((_DWORD *)a3 + 1);
        if (SHIBYTE(v247) < 0)
          operator delete(v246[0]);
        if (v87 != 2)
          return;
        v88 = a3[1];
        if (v88 != 5)
        {
          if (v88 == 4)
          {
            memset(&__str, 0, sizeof(__str));
            if (!sub_1D52AD6B0(a1, (uint64_t)a3, (void **)&__str.__r_.__value_.__l.__data_))
              goto LABEL_602;
            sub_1D5282DF0(__p, *(_DWORD *)__str.__r_.__value_.__l.__data_, *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4));
            buf.__r_.__value_.__r.__words[0] = a2;
            v85 = sub_1D52B4328((uint64_t **)(a1 + 1360), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf);
LABEL_600:
            v131 = __p[0];
            goto LABEL_601;
          }
          if (v88 != 3)
            return;
          memset(&__str, 0, sizeof(__str));
          if (sub_1D52AE554(a1, (uint64_t)a3, &__str.__r_.__value_.__l.__data_))
          {
            v83 = *(unsigned __int16 *)__str.__r_.__value_.__l.__data_;
            v84 = *(unsigned __int16 *)(__str.__r_.__value_.__r.__words[0] + 2);
            buf.__r_.__value_.__r.__words[0] = a2;
            v85 = sub_1D52B4328((uint64_t **)(a1 + 1360), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf);
LABEL_427:
            v131 = (void *)(v83 | (v84 << 32));
            goto LABEL_601;
          }
          goto LABEL_602;
        }
        memset(&__str, 0, sizeof(__str));
        v212 = sub_1D52ADF90(a1, (uint64_t)a3, (uint64_t)&__str);
        v12 = (_QWORD *)__str.__r_.__value_.__r.__words[0];
        if (!v212 || __str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0] != 8)
          goto LABEL_603;
        v213 = *(float *)__str.__r_.__value_.__l.__data_;
        if (fabsf(*(float *)__str.__r_.__value_.__l.__data_) != INFINITY)
        {
          v214 = *(float *)(__str.__r_.__value_.__r.__words[0] + 4);
          if (fabsf(v214) != INFINITY)
          {
            buf.__r_.__value_.__r.__words[0] = a2;
            v85 = sub_1D52B4328((uint64_t **)(a1 + 1360), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf);
LABEL_612:
            v131 = (void *)((int)v213 | ((unint64_t)(int)v214 << 32));
LABEL_601:
            v85[7] = (uint64_t)v131;
            goto LABEL_602;
          }
        }
        break;
      case 0xC621u:
        if (a3[1] != 10
          || !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184))
          && !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1208)))
        {
          return;
        }
        sub_1D52917E4(a1, &__str);
        sub_1D52A75D8((uint64_t)a3, (uint64_t *)&__str, (void **)&buf.__r_.__value_.__l.__data_);
        sub_1D5282EB4((uint64_t)&__str);
        if (*(_WORD *)(a1 + 1234))
        {
          v12 = (_QWORD *)buf.__r_.__value_.__r.__words[0];
          v37 = buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0];
          if (3 * *(unsigned __int16 *)(a1 + 1234) != (uint64_t)(buf.__r_.__value_.__l.__size_
                                                                 - buf.__r_.__value_.__r.__words[0]) >> 3)
            goto LABEL_568;
        }
        else
        {
          v37 = buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0];
        }
        *(_WORD *)(a1 + 1234) = (v37 >> 3) / 3uLL;
        sub_1D5338F80(&__str, (unsigned __int16)((v37 >> 3) / 3uLL), 3, &buf);
        __p[0] = (void *)a2;
        v138 = sub_1D530557C((uint64_t **)(a1 + 1624), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)__p);
        sub_1D53393A8(v138 + 7, (uint64_t)&__str);
        goto LABEL_565;
      case 0xC622u:
        if (a3[1] != 10
          || !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184))
          && !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1208)))
        {
          return;
        }
        sub_1D52917E4(a1, &__str);
        sub_1D52A75D8((uint64_t)a3, (uint64_t *)&__str, (void **)&buf.__r_.__value_.__l.__data_);
        sub_1D5282EB4((uint64_t)&__str);
        if (*(_WORD *)(a1 + 1234))
        {
          v12 = (_QWORD *)buf.__r_.__value_.__r.__words[0];
          v21 = buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0];
          if (3 * *(unsigned __int16 *)(a1 + 1234) != (uint64_t)(buf.__r_.__value_.__l.__size_
                                                                 - buf.__r_.__value_.__r.__words[0]) >> 3)
            goto LABEL_568;
        }
        else
        {
          v21 = buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0];
        }
        *(_WORD *)(a1 + 1234) = (v21 >> 3) / 3uLL;
        sub_1D5338F80(&__str, (unsigned __int16)((v21 >> 3) / 3uLL), 3, &buf);
        __p[0] = (void *)a2;
        v137 = sub_1D530557C((uint64_t **)(a1 + 1648), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)__p);
        sub_1D53393A8(v137 + 7, (uint64_t)&__str);
        goto LABEL_565;
      case 0xC623u:
        if (a3[1] != 10 || !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184)))
          return;
        sub_1D52917E4(a1, &__str);
        sub_1D52A75D8((uint64_t)a3, (uint64_t *)&__str, (void **)&buf.__r_.__value_.__l.__data_);
        sub_1D5282EB4((uint64_t)&__str);
        if (*(_WORD *)(a1 + 1234))
        {
          v12 = (_QWORD *)buf.__r_.__value_.__r.__words[0];
          v38 = (uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 3;
          if (v38 != *(unsigned __int16 *)(a1 + 1234) * *(unsigned __int16 *)(a1 + 1234))
            goto LABEL_568;
        }
        else
        {
          v38 = (uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 3;
        }
        v143 = (int)sqrt((double)(unint64_t)v38);
        *(_WORD *)(a1 + 1234) = v143;
        sub_1D5338F80(&__str, v143, v143, &buf);
        __p[0] = (void *)a2;
        v144 = sub_1D530557C((uint64_t **)(a1 + 1720), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)__p);
        sub_1D53393A8(v144 + 7, (uint64_t)&__str);
        goto LABEL_565;
      case 0xC624u:
        if (a3[1] != 10 || !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184)))
          return;
        sub_1D52917E4(a1, &__str);
        sub_1D52A75D8((uint64_t)a3, (uint64_t *)&__str, (void **)&buf.__r_.__value_.__l.__data_);
        sub_1D5282EB4((uint64_t)&__str);
        if (*(_WORD *)(a1 + 1234))
        {
          v12 = (_QWORD *)buf.__r_.__value_.__r.__words[0];
          v20 = (uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 3;
          if (v20 != *(unsigned __int16 *)(a1 + 1234) * *(unsigned __int16 *)(a1 + 1234))
            goto LABEL_568;
        }
        else
        {
          v20 = (uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 3;
        }
        v141 = (int)sqrt((double)(unint64_t)v20);
        *(_WORD *)(a1 + 1234) = v141;
        sub_1D5338F80(&__str, v141, v141, &buf);
        __p[0] = (void *)a2;
        v142 = sub_1D530557C((uint64_t **)(a1 + 1744), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)__p);
        sub_1D53393A8(v142 + 7, (uint64_t)&__str);
        goto LABEL_565;
      case 0xC625u:
        if (a3[1] != 10
          || !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184))
          && !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1208)))
        {
          return;
        }
        sub_1D52917E4(a1, &__str);
        sub_1D52A75D8((uint64_t)a3, (uint64_t *)&__str, (void **)&buf.__r_.__value_.__l.__data_);
        sub_1D5282EB4((uint64_t)&__str);
        if (*(_WORD *)(a1 + 1234))
        {
          v12 = (_QWORD *)buf.__r_.__value_.__r.__words[0];
          v40 = buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0];
          if (3 * *(unsigned __int16 *)(a1 + 1234) != (uint64_t)(buf.__r_.__value_.__l.__size_
                                                                 - buf.__r_.__value_.__r.__words[0]) >> 3)
            goto LABEL_568;
        }
        else
        {
          v40 = buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0];
        }
        *(_WORD *)(a1 + 1234) = (v40 >> 3) / 3uLL;
        sub_1D5338F80(&__str, (unsigned __int16)((v40 >> 3) / 3uLL), 3, &buf);
        __p[0] = (void *)a2;
        v139 = sub_1D530557C((uint64_t **)(a1 + 1672), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)__p);
        sub_1D53393A8(v139 + 7, (uint64_t)&__str);
        goto LABEL_565;
      case 0xC626u:
        if (a3[1] != 10
          || !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184))
          && !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1208)))
        {
          return;
        }
        sub_1D52917E4(a1, &__str);
        sub_1D52A75D8((uint64_t)a3, (uint64_t *)&__str, (void **)&buf.__r_.__value_.__l.__data_);
        sub_1D5282EB4((uint64_t)&__str);
        if (*(_WORD *)(a1 + 1234))
        {
          v12 = (_QWORD *)buf.__r_.__value_.__r.__words[0];
          v42 = buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0];
          if (3 * *(unsigned __int16 *)(a1 + 1234) != (uint64_t)(buf.__r_.__value_.__l.__size_
                                                                 - buf.__r_.__value_.__r.__words[0]) >> 3)
            goto LABEL_568;
        }
        else
        {
          v42 = buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0];
        }
        *(_WORD *)(a1 + 1234) = (v42 >> 3) / 3uLL;
        sub_1D5338F80(&__str, (unsigned __int16)((v42 >> 3) / 3uLL), 3, &buf);
        __p[0] = (void *)a2;
        v140 = sub_1D530557C((uint64_t **)(a1 + 1696), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)__p);
        sub_1D53393A8(v140 + 7, (uint64_t)&__str);
        goto LABEL_565;
      case 0xC627u:
        if (a3[1] != 5 || !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184)))
          return;
        sub_1D52917E4(a1, &buf);
        sub_1D52A75D8((uint64_t)a3, (uint64_t *)&buf, (void **)&__str.__r_.__value_.__l.__data_);
        sub_1D5282EB4((uint64_t)&buf);
        if (*(_WORD *)(a1 + 1234))
        {
          v12 = (_QWORD *)__str.__r_.__value_.__r.__words[0];
          v49 = __str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0];
          if (*(unsigned __int16 *)(a1 + 1234) != (uint64_t)(__str.__r_.__value_.__l.__size_
                                                           - __str.__r_.__value_.__r.__words[0]) >> 3)
            goto LABEL_603;
        }
        else
        {
          v49 = __str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0];
        }
        *(_WORD *)(a1 + 1234) = v49 >> 3;
        buf.__r_.__value_.__r.__words[0] = a2;
        v145 = (std::string *)(sub_1D52B3E7C((uint64_t **)(a1 + 1864), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf)+ 7);
        if (v145 != &__str)
          sub_1D528FA34((char *)v145, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_, (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3);
        v12 = (_QWORD *)__str.__r_.__value_.__r.__words[0];
        if (__str.__r_.__value_.__l.__size_ == __str.__r_.__value_.__r.__words[0])
        {
          v12 = (_QWORD *)__str.__r_.__value_.__l.__size_;
          goto LABEL_603;
        }
        v146 = 0;
        v147 = (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 3;
        v148 = *(_QWORD *)(a1 + 1288);
        v149 = (*(_QWORD *)(a1 + 1296) - v148) >> 3;
        if (v147 <= 1)
          v147 = 1;
        do
        {
          if (v149 == v146)
            goto LABEL_603;
          *(double *)(v148 + 8 * v146) = *(double *)&v12[v146] * *(double *)(v148 + 8 * v146);
          ++v146;
        }
        while (v147 != v146);
        goto LABEL_604;
      case 0xC628u:
        v22 = a3[1];
        if (v22 > 0xA)
          return;
        if (((1 << v22) & 0x428) == 0)
          return;
        if (!sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184)))
          return;
        v23 = a3[2];
        if ((v23 - 5) < 0xFFFFFFFE
          || *(_WORD *)(a1 + 1234) && *(unsigned __int16 *)(a1 + 1234) != (_DWORD)v23)
        {
          return;
        }
        *(_WORD *)(a1 + 1234) = v23;
        buf.__r_.__value_.__r.__words[0] = 0x3FF0000000000000;
        sub_1D528F9B4(&__str, v23, &buf);
        sub_1D52917E4(a1, __p);
        sub_1D52A75D8((uint64_t)a3, (uint64_t *)__p, (void **)&buf.__r_.__value_.__l.__data_);
        sub_1D5282EB4((uint64_t)__p);
        v25 = buf.__r_.__value_.__l.__size_;
        v24 = (char *)buf.__r_.__value_.__r.__words[0];
        v26 = (uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 3;
        if (v26 != *(unsigned __int16 *)(a1 + 1234))
          goto LABEL_284;
        if (*(_WORD *)(a1 + 1234))
        {
          v27 = (double *)__str.__r_.__value_.__r.__words[0];
          v28 = (double *)buf.__r_.__value_.__r.__words[0];
          v29 = (uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 3;
          do
          {
            v30 = *v28++;
            v31 = v30;
            *v27 = *v27 / v31;
            ++v27;
            --v29;
          }
          while (v29);
        }
        *(_WORD *)(a1 + 1234) = v23;
        if ((std::string *)(a1 + 1248) != &buf)
        {
          sub_1D528FA34((char *)(a1 + 1248), v24, v25, v26);
          LODWORD(v23) = *(unsigned __int16 *)(a1 + 1234);
          v24 = (char *)buf.__r_.__value_.__r.__words[0];
        }
        v32 = *(_QWORD *)(a1 + 1288);
        v33 = (*(_QWORD *)(a1 + 1296) - v32) >> 3;
        if (v33 == v23 && (_DWORD)v23)
        {
          v34 = 0;
          do
          {
            v35 = *(double *)(v32 + 8 * v34);
            v36 = *(double *)&v24[8 * v34];
            *(double *)(v32 + 8 * v34++) = (float)(v35 / v36);
          }
          while (v33 != v34);
        }
        else
        {
LABEL_284:
          if (!v24)
            goto LABEL_602;
        }
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
        v78 = v24;
LABEL_474:
        operator delete(v78);
        goto LABEL_602;
      case 0xC629u:
        if (a3[1] != 5 || !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184)))
          return;
        sub_1D52917E4(a1, &buf);
        sub_1D52A75D8((uint64_t)a3, (uint64_t *)&buf, (void **)&__str.__r_.__value_.__l.__data_);
        sub_1D5282EB4((uint64_t)&buf);
        v12 = (_QWORD *)__str.__r_.__value_.__r.__words[0];
        if (__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0] != 16)
          goto LABEL_603;
        *(_QWORD *)(a1 + 1272) = *(_QWORD *)__str.__r_.__value_.__l.__data_;
        *(_QWORD *)(a1 + 1280) = v12[1];
        goto LABEL_604;
      case 0xC62Au:
        if (a3[1] != 10
          || *((_DWORD *)a3 + 1) != 1
          || !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184)))
        {
          return;
        }
        sub_1D52917E4(a1, &buf);
        sub_1D52A75D8((uint64_t)a3, (uint64_t *)&buf, (void **)&__str.__r_.__value_.__l.__data_);
        sub_1D5282EB4((uint64_t)&buf);
        v12 = (_QWORD *)__str.__r_.__value_.__r.__words[0];
        if (__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0] != 8)
          goto LABEL_603;
        v19 = *(_QWORD *)__str.__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[0] = a2;
        sub_1D52B4328((uint64_t **)(a1 + 1888), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&buf)[7] = v19;
        goto LABEL_602;
      case 0xC62Bu:
        if (sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184))
          && a3[1] == 5
          && *((_DWORD *)a3 + 1) == 1)
        {
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 384))(&__str, a1);
          v44 = sub_1D52A7374((uint64_t)a3, (double *)(a1 + 1912), (uint64_t *)&__str, v43);
          sub_1D5282EB4((uint64_t)&__str);
          if ((v44 & 1) == 0)
          {
            v45 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](v45, "RawCameraException");
            __cxa_throw(v45, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
        }
        return;
      case 0xC62Cu:
        if (sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184))
          && a3[1] == 5
          && *((_DWORD *)a3 + 1) == 1)
        {
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 384))(&__str, a1);
          v47 = sub_1D52A7374((uint64_t)a3, (double *)(a1 + 1920), (uint64_t *)&__str, v46);
          sub_1D5282EB4((uint64_t)&__str);
          if ((v47 & 1) == 0)
          {
            v48 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](v48, "RawCameraException");
            __cxa_throw(v48, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
        }
        return;
      case 0xC62Du:
        if (*(char *)(a2 + 23) < 0)
        {
          sub_1D5290130(&v242, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          v242 = *(_OWORD *)a2;
          v243 = *(_QWORD *)(a2 + 16);
        }
        sub_1D5294144(a1 + 512, (void **)&v242);
        if ((SHIBYTE(v243) & 0x80000000) == 0)
          return;
        v12 = (_QWORD *)v242;
        goto LABEL_605;
      case 0xC632u:
        if (*(char *)(a2 + 23) < 0)
        {
          sub_1D5290130(v250, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)v250 = *(_OWORD *)a2;
          v251 = *(_QWORD *)(a2 + 16);
        }
        v132 = sub_1D5294144(a1 + 512, v250);
        if ((void **)(a1 + 520) != v132 && !*((_DWORD *)v132 + 14) && a3[1] == 5)
        {
          v133 = *((_DWORD *)a3 + 1);
          if (SHIBYTE(v251) < 0)
            operator delete(v250[0]);
          if (v133 == 1)
          {
            buf.__r_.__value_.__r.__words[0] = 0;
            sub_1D52917E4(a1, &__str);
            v135 = sub_1D52A7374((uint64_t)a3, (double *)&buf, (uint64_t *)&__str, v134);
            sub_1D5282EB4((uint64_t)&__str);
            if (v135)
            {
              v136 = buf.__r_.__value_.__r.__words[0];
              __str.__r_.__value_.__r.__words[0] = a2;
              sub_1D52B4328((uint64_t **)(a1 + 1528), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&__str)[7] = v136;
            }
          }
          return;
        }
        if ((SHIBYTE(v251) & 0x80000000) == 0)
          return;
        v12 = v250[0];
        goto LABEL_605;
      case 0xC65Au:
        if (a3[1] != 3
          || *((_DWORD *)a3 + 1) != 1
          || !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184))
          && !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1208)))
        {
          return;
        }
        v10 = sub_1D52AD670((uint64_t)a3);
        __str.__r_.__value_.__r.__words[0] = a2;
        v11 = sub_1D52B417C((uint64_t **)(a1 + 1816), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&__str);
        goto LABEL_336;
      case 0xC65Bu:
        if (a3[1] != 3
          || *((_DWORD *)a3 + 1) != 1
          || !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1184))
          && !sub_1D52FD7F8((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 1208)))
        {
          return;
        }
        v10 = sub_1D52AD670((uint64_t)a3);
        __str.__r_.__value_.__r.__words[0] = a2;
        v11 = sub_1D52B417C((uint64_t **)(a1 + 1840), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&__str);
        goto LABEL_336;
      default:
        goto LABEL_281;
    }
    goto LABEL_604;
  }
  if (v6 == 277)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1D5290130(&v272, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v272 = *(_OWORD *)a2;
      v273 = *(_QWORD *)(a2 + 16);
    }
    v161 = sub_1D5294144(a1 + 512, (void **)&v272);
    v162 = (void **)(a1 + 520) == v161 || *((_DWORD *)v161 + 14) != 0;
    if (SHIBYTE(v273) < 0)
      operator delete((void *)v272);
    v179 = a3[1] != 3 || v162;
    if ((v179 & 1) == 0 && *((_DWORD *)a3 + 1) == 1)
      *(_WORD *)(a1 + 1236) = sub_1D52AD670((uint64_t)a3);
    return;
  }
  if (v6 == 339)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1D5290130(v270, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v270 = *(_OWORD *)a2;
      v271 = *(_QWORD *)(a2 + 16);
    }
    v163 = sub_1D5294144(a1 + 512, v270);
    v164 = (void **)(a1 + 520) != v163 && *((_DWORD *)v163 + 14) == 0;
    if (SHIBYTE(v271) < 0)
      operator delete(v270[0]);
    if (a3[1] != 3 || !v164)
      return;
    memset(&__str, 0, sizeof(__str));
    v181 = sub_1D52AE554(a1, (uint64_t)a3, &__str.__r_.__value_.__l.__data_);
    v12 = (_QWORD *)__str.__r_.__value_.__r.__words[0];
    if (__str.__r_.__value_.__r.__words[0] == __str.__r_.__value_.__l.__size_)
      v181 = 0;
    if (v181)
    {
      *(_WORD *)(a1 + 1240) = *(_WORD *)__str.__r_.__value_.__l.__data_;
LABEL_604:
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)v12;
      goto LABEL_605;
    }
LABEL_603:
    if (!v12)
      return;
    goto LABEL_604;
  }
  if (v6 != 700)
    goto LABEL_281;
  if (*((_DWORD *)a3 + 1) && a3[1] == 1)
  {
    sub_1D52917E4(a1, &buf);
    LODWORD(v276.f64[0]) = sub_1D52A5CC8((uint64_t)a3);
    sub_1D5285B08((int *)__p, (int *)&v276);
    sub_1D5285164((uint64_t *)&__str, (uint64_t *)&buf, (uint64_t)__p, 0);
    sub_1D5282EB4((uint64_t)&buf);
    v15 = sub_1D52AA7F0((uint64_t)a3);
    sub_1D5285340(&buf, v15);
    sub_1D52917E4(a1, __p);
    sub_1D5284728((uint64_t)__p[0], (uint64_t)buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]);
    sub_1D5282EB4((uint64_t)__p);
    __p[0] = (void *)a2;
    v16 = (std::string *)(sub_1D52B3E7C((uint64_t **)(a1 + 2432), (void **)a2, (uint64_t)&unk_1D544A5C4, (__int128 **)__p)
                        + 7);
    if (v16 != &buf)
      sub_1D52B1E94(v16, buf.__r_.__value_.__l.__data_, (char *)buf.__r_.__value_.__l.__size_, buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]);
    if (buf.__r_.__value_.__r.__words[0])
    {
      buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    goto LABEL_616;
  }
}

void sub_1D52FD2AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 208);
  if (v3)
  {
    *(_QWORD *)(v1 - 200) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1D52FD7F8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t sub_1D52FD898@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  unsigned int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned int v14;
  int64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  int v21;
  int i;
  int v23;
  unsigned int v24;
  unsigned int v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  __int128 v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  __int128 v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  __int128 v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  __int128 v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  __int128 v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  void *exception;
  void *v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  int v111;
  unsigned int v112;
  __int128 v113;
  void *__p;
  std::__shared_weak_count *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unsigned int v118;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = sub_1D52AA7F0(a2);
  v118 = result;
  if (result < 5)
    return result;
  sub_1D52917E4(a1, &v116);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v116 + 16))(v116);
  v8 = v117;
  if (v117)
  {
    p_shared_owners = (unint64_t *)&v117->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (sub_1D52A5CC8(a2) <= 8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    goto LABEL_173;
  }
  LODWORD(__p) = sub_1D52A5CC8(a2);
  if (*sub_1D52B0860(&__p, &v118) >= v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
LABEL_173:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D52917E4(a1, &__p);
  LODWORD(v113) = sub_1D52A5CC8(a2);
  sub_1D5285B08((int *)&v109, (int *)&v113);
  sub_1D5285164(&v116, (uint64_t *)&__p, (uint64_t)&v109, 0);
  v11 = v115;
  if (v115)
  {
    v12 = (unint64_t *)&v115->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  sub_1D5285340(&__p, v118);
  if ((char *)v115 - (_BYTE *)__p != v118)
  {
    v106 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v106, "RawCameraException");
    __cxa_throw(v106, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D52917E4(a1, &v109);
  v14 = (*(uint64_t (**)(uint64_t, void *, int64_t))(*(_QWORD *)v109 + 32))(v109, __p, (char *)v115 - (_BYTE *)__p);
  v15 = (char *)v115 - (_BYTE *)__p;
  v16 = v14;
  v17 = v110;
  if (v110)
  {
    v18 = (unint64_t *)&v110->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)__p;
  if (v15 == v16)
  {
    v109 = (char *)v115 - (_BYTE *)__p;
    sub_1D528304C(&v108, (unint64_t *)&v109);
    sub_1D52843AC((uint64_t)v20, (uint64_t)&v108, 0, &v113);
    sub_1D52845EC(v113, 2);
    v21 = sub_1D52847F8(v113);
    if (v21)
    {
      for (i = 0; i != v21; ++i)
      {
        v23 = sub_1D52847F8(v113);
        v24 = sub_1D52847F8(v113);
        v112 = 0;
        v25 = sub_1D52847F8(v113);
        v111 = 0;
        v112 = v25;
        v111 = sub_1D52847F8(v113);
        if (v24 <= 0x1070000)
        {
          sub_1D52B1C58(&v109, (uint64_t *)&v113);
          v108 = 0uLL;
          switch(v23)
          {
            case 1:
              sub_1D5305878(&v112, &v107);
              v26 = v107;
              v107 = 0uLL;
              v27 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
              v108 = v26;
              if (v27)
              {
                v28 = (unint64_t *)&v27->__shared_owners_;
                do
                  v29 = __ldaxr(v28);
                while (__stlxr(v29 - 1, v28));
                if (!v29)
                {
                  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                  std::__shared_weak_count::__release_weak(v27);
                }
              }
              v30 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
              if (!*((_QWORD *)&v107 + 1))
                goto LABEL_152;
              v31 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
              do
                v32 = __ldaxr(v31);
              while (__stlxr(v32 - 1, v31));
              break;
            case 2:
              sub_1D5305980(&v112, &v107);
              v68 = v107;
              v107 = 0uLL;
              v69 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
              v108 = v68;
              if (v69)
              {
                v70 = (unint64_t *)&v69->__shared_owners_;
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                  std::__shared_weak_count::__release_weak(v69);
                }
              }
              v30 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
              if (!*((_QWORD *)&v107 + 1))
                goto LABEL_152;
              v72 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
              do
                v32 = __ldaxr(v72);
              while (__stlxr(v32 - 1, v72));
              break;
            case 3:
              sub_1D5305A88(&v112, &v107);
              v53 = v107;
              v107 = 0uLL;
              v54 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
              v108 = v53;
              if (v54)
              {
                v55 = (unint64_t *)&v54->__shared_owners_;
                do
                  v56 = __ldaxr(v55);
                while (__stlxr(v56 - 1, v55));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              v30 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
              if (!*((_QWORD *)&v107 + 1))
                goto LABEL_152;
              v57 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
              do
                v32 = __ldaxr(v57);
              while (__stlxr(v32 - 1, v57));
              break;
            case 4:
              sub_1D5305B90(&v112, &v107);
              v58 = v107;
              v107 = 0uLL;
              v59 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
              v108 = v58;
              if (v59)
              {
                v60 = (unint64_t *)&v59->__shared_owners_;
                do
                  v61 = __ldaxr(v60);
                while (__stlxr(v61 - 1, v60));
                if (!v61)
                {
                  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                  std::__shared_weak_count::__release_weak(v59);
                }
              }
              v30 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
              if (!*((_QWORD *)&v107 + 1))
                goto LABEL_152;
              v62 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
              do
                v32 = __ldaxr(v62);
              while (__stlxr(v32 - 1, v62));
              break;
            case 5:
              sub_1D5305C98(&v112, &v107);
              v38 = v107;
              v107 = 0uLL;
              v39 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
              v108 = v38;
              if (v39)
              {
                v40 = (unint64_t *)&v39->__shared_owners_;
                do
                  v41 = __ldaxr(v40);
                while (__stlxr(v41 - 1, v40));
                if (!v41)
                {
                  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                  std::__shared_weak_count::__release_weak(v39);
                }
              }
              v30 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
              if (!*((_QWORD *)&v107 + 1))
                goto LABEL_152;
              v42 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
              do
                v32 = __ldaxr(v42);
              while (__stlxr(v32 - 1, v42));
              break;
            case 6:
              sub_1D5305DA0(&v112, &v107);
              v73 = v107;
              v107 = 0uLL;
              v74 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
              v108 = v73;
              if (v74)
              {
                v75 = (unint64_t *)&v74->__shared_owners_;
                do
                  v76 = __ldaxr(v75);
                while (__stlxr(v76 - 1, v75));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
              }
              v30 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
              if (!*((_QWORD *)&v107 + 1))
                goto LABEL_152;
              v77 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
              do
                v32 = __ldaxr(v77);
              while (__stlxr(v32 - 1, v77));
              break;
            case 7:
              sub_1D5305EA8(&v112, &v107);
              v83 = v107;
              v107 = 0uLL;
              v84 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
              v108 = v83;
              if (v84)
              {
                v85 = (unint64_t *)&v84->__shared_owners_;
                do
                  v86 = __ldaxr(v85);
                while (__stlxr(v86 - 1, v85));
                if (!v86)
                {
                  ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                  std::__shared_weak_count::__release_weak(v84);
                }
              }
              v30 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
              if (!*((_QWORD *)&v107 + 1))
                goto LABEL_152;
              v87 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
              do
                v32 = __ldaxr(v87);
              while (__stlxr(v32 - 1, v87));
              break;
            case 8:
              sub_1D5305FB0(&v112, &v107);
              v63 = v107;
              v107 = 0uLL;
              v64 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
              v108 = v63;
              if (v64)
              {
                v65 = (unint64_t *)&v64->__shared_owners_;
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                  std::__shared_weak_count::__release_weak(v64);
                }
              }
              v30 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
              if (!*((_QWORD *)&v107 + 1))
                goto LABEL_152;
              v67 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
              do
                v32 = __ldaxr(v67);
              while (__stlxr(v32 - 1, v67));
              break;
            case 9:
              sub_1D53060B8(&v112, &v107);
              v93 = v107;
              v107 = 0uLL;
              v94 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
              v108 = v93;
              if (v94)
              {
                v95 = (unint64_t *)&v94->__shared_owners_;
                do
                  v96 = __ldaxr(v95);
                while (__stlxr(v96 - 1, v95));
                if (!v96)
                {
                  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                  std::__shared_weak_count::__release_weak(v94);
                }
              }
              v30 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
              if (!*((_QWORD *)&v107 + 1))
                goto LABEL_152;
              v97 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
              do
                v32 = __ldaxr(v97);
              while (__stlxr(v32 - 1, v97));
              break;
            case 10:
              sub_1D53061C0(&v112, &v107);
              v48 = v107;
              v107 = 0uLL;
              v49 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
              v108 = v48;
              if (v49)
              {
                v50 = (unint64_t *)&v49->__shared_owners_;
                do
                  v51 = __ldaxr(v50);
                while (__stlxr(v51 - 1, v50));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                  std::__shared_weak_count::__release_weak(v49);
                }
              }
              v30 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
              if (!*((_QWORD *)&v107 + 1))
                goto LABEL_152;
              v52 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
              do
                v32 = __ldaxr(v52);
              while (__stlxr(v32 - 1, v52));
              break;
            case 11:
              sub_1D53062C8(&v112, &v107);
              v88 = v107;
              v107 = 0uLL;
              v89 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
              v108 = v88;
              if (v89)
              {
                v90 = (unint64_t *)&v89->__shared_owners_;
                do
                  v91 = __ldaxr(v90);
                while (__stlxr(v91 - 1, v90));
                if (!v91)
                {
                  ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                  std::__shared_weak_count::__release_weak(v89);
                }
              }
              v30 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
              if (!*((_QWORD *)&v107 + 1))
                goto LABEL_152;
              v92 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
              do
                v32 = __ldaxr(v92);
              while (__stlxr(v32 - 1, v92));
              break;
            case 12:
              sub_1D53063D0(&v112, &v107);
              v33 = v107;
              v107 = 0uLL;
              v34 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
              v108 = v33;
              if (v34)
              {
                v35 = (unint64_t *)&v34->__shared_owners_;
                do
                  v36 = __ldaxr(v35);
                while (__stlxr(v36 - 1, v35));
                if (!v36)
                {
                  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                  std::__shared_weak_count::__release_weak(v34);
                }
              }
              v30 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
              if (!*((_QWORD *)&v107 + 1))
                goto LABEL_152;
              v37 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
              do
                v32 = __ldaxr(v37);
              while (__stlxr(v32 - 1, v37));
              break;
            case 13:
              sub_1D53064D8(&v112, &v107);
              v43 = v107;
              v107 = 0uLL;
              v44 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
              v108 = v43;
              if (v44)
              {
                v45 = (unint64_t *)&v44->__shared_owners_;
                do
                  v46 = __ldaxr(v45);
                while (__stlxr(v46 - 1, v45));
                if (!v46)
                {
                  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                  std::__shared_weak_count::__release_weak(v44);
                }
              }
              v30 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
              if (!*((_QWORD *)&v107 + 1))
                goto LABEL_152;
              v47 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
              do
                v32 = __ldaxr(v47);
              while (__stlxr(v32 - 1, v47));
              break;
            case 14:
              sub_1D53065E0(&v112, &v107);
              v78 = v107;
              v107 = 0uLL;
              v79 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
              v108 = v78;
              if (v79)
              {
                v80 = (unint64_t *)&v79->__shared_owners_;
                do
                  v81 = __ldaxr(v80);
                while (__stlxr(v81 - 1, v80));
                if (!v81)
                {
                  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                  std::__shared_weak_count::__release_weak(v79);
                }
              }
              v30 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
              if (!*((_QWORD *)&v107 + 1))
                goto LABEL_152;
              v82 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
              do
                v32 = __ldaxr(v82);
              while (__stlxr(v32 - 1, v82));
              break;
            default:
              goto LABEL_154;
          }
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
LABEL_152:
          if ((_QWORD)v108)
            sub_1D52B0A7C((char **)a3, &v108);
LABEL_154:
          v98 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
          if (*((_QWORD *)&v108 + 1))
          {
            v99 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
          sub_1D5285200(&v109);
        }
        v101 = v113;
        sub_1D5282F74((int *)&v109, &v111);
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v101 + 40))(v101, &v109, 1);
      }
    }
    v102 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
    if (*((_QWORD *)&v113 + 1))
    {
      v103 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    v20 = (std::__shared_weak_count *)__p;
  }
  if (v20)
  {
    v115 = v20;
    operator delete(v20);
  }
  return sub_1D5285200(&v116);
}

void sub_1D52FE350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;

  sub_1D5282EB4((uint64_t)&a11);
  sub_1D5285200(&a14);
  sub_1D5282EB4((uint64_t)&a18);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1D5285200((uint64_t *)(v22 - 96));
  *(_QWORD *)(v22 - 96) = v21;
  sub_1D5282E44((void ***)(v22 - 96));
  _Unwind_Resume(a1);
}

void sub_1D52FE47C(double *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v7;
  void *v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unsigned int v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  v2 = a2[23];
  if ((v2 & 0x80u) == 0)
    v3 = a2[23];
  else
    v3 = *((_QWORD *)a2 + 1);
  v4 = *((unsigned __int8 *)a1 + 1207);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a1 + 149);
  if (v3 != v4)
    return;
  if (v5 >= 0)
    v7 = (unsigned __int8 *)(a1 + 148);
  else
    v7 = (unsigned __int8 *)*((_QWORD *)a1 + 148);
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v7, *((_QWORD *)a2 + 1)))
      return;
LABEL_16:
    (*(void (**)(void **__return_ptr, double *))(*(_QWORD *)a1 + 368))(&v24, a1);
    if (v25 == v24)
    {
      v9 = *((unsigned __int16 *)a1 + 617);
      if (v25)
        operator delete(v25);
      if (v9 != 3)
        return;
      sub_1D5338F84(3u, (uint64_t)&v24);
      sub_1D5338F84(3u, (uint64_t)&v21);
      (*(void (**)(uint64_t *__return_ptr, double *))(*(_QWORD *)a1 + 336))(&v18, a1);
      (*(void (**)(uint64_t *__return_ptr, double *))(*(_QWORD *)a1 + 344))(&v15, a1);
      sub_1D52FE6D4((uint64_t)a1, &v13);
      sub_1D52FE794((uint64_t)a1, &v11);
      sub_1D52FE854(v10, (unsigned int *)&v24, &v18, &v13, &v21, &v15, &v11, a1 + 200, (uint64_t)(a1 + 161));
      if (*((_QWORD *)&v11 + 1))
      {
        v12 = *((_QWORD *)&v11 + 1);
        operator delete(*((void **)&v11 + 1));
      }
      if (*((_QWORD *)&v13 + 1))
      {
        v14 = *((_QWORD *)&v13 + 1);
        operator delete(*((void **)&v13 + 1));
      }
      if (v16)
      {
        v17 = v16;
        operator delete(v16);
      }
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      if (v22)
      {
        v23 = v22;
        operator delete(v22);
      }
      v8 = v25;
      if (!v25)
        return;
      v26 = v25;
    }
    else
    {
      if (!v24)
        return;
      v25 = v24;
      v8 = v24;
    }
    operator delete(v8);
    return;
  }
  if (!a2[23])
    goto LABEL_16;
  while (*a2 == *v7)
  {
    ++a2;
    ++v7;
    if (!--v2)
      goto LABEL_16;
  }
}

void sub_1D52FE640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  uint64_t v25;
  void *v27;
  void *v28;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  if (a20)
    operator delete(a20);
  if (a24)
    operator delete(a24);
  v27 = *(void **)(v25 - 72);
  if (v27)
  {
    *(_QWORD *)(v25 - 64) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(v25 - 40);
  if (v28)
  {
    *(_QWORD *)(v25 - 32) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

double sub_1D52FE6D4@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  double result;
  void *__p[2];
  char v8;

  if (*(_WORD *)(a1 + 1234))
  {
    v4 = a1 + 1624;
    sub_1D5301C98(a1, (uint64_t)__p);
    v5 = sub_1D5294144(v4, __p);
    if (v8 < 0)
      operator delete(__p[0]);
    if ((void **)(a1 + 1632) == v5)
      return sub_1D5338BEC(a2);
    else
      sub_1D5338BF8(a2, (uint64_t)(v5 + 7));
  }
  else
  {
    sub_1D5338F84(3u, (uint64_t)a2);
  }
  return result;
}

void sub_1D52FE778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1D52FE794@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  double result;
  void *__p[2];
  char v8;

  if (*(_WORD *)(a1 + 1234))
  {
    v4 = a1 + 1648;
    sub_1D5301C98(a1, (uint64_t)__p);
    v5 = sub_1D5294144(v4, __p);
    if (v8 < 0)
      operator delete(__p[0]);
    if ((void **)(a1 + 1656) == v5)
      return sub_1D5338BEC(a2);
    else
      sub_1D5338BF8(a2, (uint64_t)(v5 + 7));
  }
  else
  {
    sub_1D5338F84(3u, (uint64_t)a2);
  }
  return result;
}

void sub_1D52FE838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D52FE854(uint64_t a1, unsigned int *a2, _DWORD *a3, _DWORD *a4, unsigned int *a5, _DWORD *a6, _DWORD *a7, double *a8, uint64_t a9)
{
  void *v16;
  double v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  void *v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  void *v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  void *v31;
  double v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  void *v36;
  double v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  void *v41;
  double v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  void *v46;
  double v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  void *v51;
  double v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  void *v56;
  double v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  double v61;
  double v62;
  void *v63;
  double v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  double v68;
  double v69;
  void *v70;
  double v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  void *v75;
  double v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *__p;
  void *v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;

  sub_1D5338BEC(&v96);
  sub_1D5338BEC(&v94);
  sub_1D5338BEC(&v92);
  sub_1D5339674(a2, a3, (uint64_t)&v89);
  sub_1D53393A8(&v96, (uint64_t)&v89);
  if (__p)
  {
    v91 = __p;
    operator delete(__p);
  }
  sub_1D5339674((unsigned int *)&v96, a4, (uint64_t)&v89);
  sub_1D53393A8(&v94, (uint64_t)&v89);
  if (__p)
  {
    v91 = __p;
    operator delete(__p);
  }
  if (*a7 && a7[1])
  {
    sub_1D5339674(a5, a6, (uint64_t)&v89);
    sub_1D53393A8(&v96, (uint64_t)&v89);
    if (__p)
    {
      v91 = __p;
      operator delete(__p);
    }
    sub_1D5339674((unsigned int *)&v96, a7, (uint64_t)&v89);
    sub_1D53393A8(&v92, (uint64_t)&v89);
    if (__p)
    {
      v91 = __p;
      operator delete(__p);
    }
    v89 = sub_1D5339044((uint64_t)&v94, 0);
    __p = v16;
    v17 = *(double *)sub_1D53390D4((uint64_t)&v89, 0);
    v87 = sub_1D5339044((uint64_t)&v92, 0);
    v88 = v18;
    v19 = *(double *)sub_1D53390D4((uint64_t)&v87, 0);
    v85 = sub_1D5339044((uint64_t)&v96, 0);
    v86 = v20;
    *(double *)sub_1D53390D4((uint64_t)&v85, 0) = v19 * 1.4 + v17 * -0.4;
    v89 = sub_1D5339044((uint64_t)&v94, 0);
    __p = v21;
    v22 = *(double *)sub_1D53390D4((uint64_t)&v89, 1u);
    v87 = sub_1D5339044((uint64_t)&v92, 0);
    v88 = v23;
    v24 = *(double *)sub_1D53390D4((uint64_t)&v87, 1u);
    v85 = sub_1D5339044((uint64_t)&v96, 0);
    v86 = v25;
    *(double *)sub_1D53390D4((uint64_t)&v85, 1u) = v24 * 1.4 + v22 * -0.4;
    v89 = sub_1D5339044((uint64_t)&v94, 0);
    __p = v26;
    v27 = *(double *)sub_1D53390D4((uint64_t)&v89, 2u);
    v87 = sub_1D5339044((uint64_t)&v92, 0);
    v88 = v28;
    v29 = *(double *)sub_1D53390D4((uint64_t)&v87, 2u);
    v85 = sub_1D5339044((uint64_t)&v96, 0);
    v86 = v30;
    *(double *)sub_1D53390D4((uint64_t)&v85, 2u) = v29 * 1.4 + v27 * -0.4;
    v89 = sub_1D5339044((uint64_t)&v94, 1u);
    __p = v31;
    v32 = *(double *)sub_1D53390D4((uint64_t)&v89, 0);
    v87 = sub_1D5339044((uint64_t)&v92, 1u);
    v88 = v33;
    v34 = *(double *)sub_1D53390D4((uint64_t)&v87, 0);
    v85 = sub_1D5339044((uint64_t)&v96, 1u);
    v86 = v35;
    *(double *)sub_1D53390D4((uint64_t)&v85, 0) = v34 * 1.4 + v32 * -0.4;
    v89 = sub_1D5339044((uint64_t)&v94, 1u);
    __p = v36;
    v37 = *(double *)sub_1D53390D4((uint64_t)&v89, 1u);
    v87 = sub_1D5339044((uint64_t)&v92, 1u);
    v88 = v38;
    v39 = *(double *)sub_1D53390D4((uint64_t)&v87, 1u);
    v85 = sub_1D5339044((uint64_t)&v96, 1u);
    v86 = v40;
    *(double *)sub_1D53390D4((uint64_t)&v85, 1u) = v39 * 1.4 + v37 * -0.4;
    v89 = sub_1D5339044((uint64_t)&v94, 1u);
    __p = v41;
    v42 = *(double *)sub_1D53390D4((uint64_t)&v89, 2u);
    v87 = sub_1D5339044((uint64_t)&v92, 1u);
    v88 = v43;
    v44 = *(double *)sub_1D53390D4((uint64_t)&v87, 2u);
    v85 = sub_1D5339044((uint64_t)&v96, 1u);
    v86 = v45;
    *(double *)sub_1D53390D4((uint64_t)&v85, 2u) = v44 * 1.4 + v42 * -0.4;
    v89 = sub_1D5339044((uint64_t)&v94, 2u);
    __p = v46;
    v47 = *(double *)sub_1D53390D4((uint64_t)&v89, 0);
    v87 = sub_1D5339044((uint64_t)&v92, 2u);
    v88 = v48;
    v49 = *(double *)sub_1D53390D4((uint64_t)&v87, 0);
    v85 = sub_1D5339044((uint64_t)&v96, 2u);
    v86 = v50;
    *(double *)sub_1D53390D4((uint64_t)&v85, 0) = v49 * 1.4 + v47 * -0.4;
    v89 = sub_1D5339044((uint64_t)&v94, 2u);
    __p = v51;
    v52 = *(double *)sub_1D53390D4((uint64_t)&v89, 1u);
    v87 = sub_1D5339044((uint64_t)&v92, 2u);
    v88 = v53;
    v54 = *(double *)sub_1D53390D4((uint64_t)&v87, 1u);
    v85 = sub_1D5339044((uint64_t)&v96, 2u);
    v86 = v55;
    *(double *)sub_1D53390D4((uint64_t)&v85, 1u) = v54 * 1.4 + v52 * -0.4;
    v89 = sub_1D5339044((uint64_t)&v94, 2u);
    __p = v56;
    v57 = *(double *)sub_1D53390D4((uint64_t)&v89, 2u);
    v87 = sub_1D5339044((uint64_t)&v92, 2u);
    v88 = v58;
    v59 = *(double *)sub_1D53390D4((uint64_t)&v87, 2u);
    v85 = sub_1D5339044((uint64_t)&v96, 2u);
    v86 = v60;
    *(double *)sub_1D53390D4((uint64_t)&v85, 2u) = v59 * 1.4 + v57 * -0.4;
  }
  v61 = *a8;
  if (*a8 <= 0.0 || (v62 = a8[1], v62 <= 0.0))
  {
    v83 = 0;
  }
  else
  {
    v89 = 0x3FF0000000000000;
    sub_1D52E41B0(a9, 4uLL, &v89);
    v89 = sub_1D5339044((uint64_t)&v96, 0);
    __p = v63;
    v64 = *(double *)sub_1D53390D4((uint64_t)&v89, 0);
    v87 = sub_1D5339044((uint64_t)&v96, 0);
    v88 = v65;
    v66 = *(double *)sub_1D53390D4((uint64_t)&v87, 1u);
    v85 = sub_1D5339044((uint64_t)&v96, 0);
    v86 = v67;
    v68 = v61 * 100.0 / v62;
    v69 = (1.0 - v61 - v62) * 100.0 / v62;
    **(double **)a9 = v66 * 100.0 + v64 * v68 + *(double *)sub_1D53390D4((uint64_t)&v85, 2u) * v69;
    v89 = sub_1D5339044((uint64_t)&v96, 1u);
    __p = v70;
    v71 = *(double *)sub_1D53390D4((uint64_t)&v89, 0);
    v87 = sub_1D5339044((uint64_t)&v96, 1u);
    v88 = v72;
    v73 = *(double *)sub_1D53390D4((uint64_t)&v87, 1u);
    v85 = sub_1D5339044((uint64_t)&v96, 1u);
    v86 = v74;
    *(double *)(*(_QWORD *)a9 + 8) = v73 * 100.0 + v71 * v68 + *(double *)sub_1D53390D4((uint64_t)&v85, 2u) * v69;
    v89 = sub_1D5339044((uint64_t)&v96, 2u);
    __p = v75;
    v76 = *(double *)sub_1D53390D4((uint64_t)&v89, 0);
    v87 = sub_1D5339044((uint64_t)&v96, 2u);
    v88 = v77;
    v78 = *(double *)sub_1D53390D4((uint64_t)&v87, 1u);
    v85 = sub_1D5339044((uint64_t)&v96, 2u);
    v86 = v79;
    v80 = v78 * 100.0 + v76 * v68 + *(double *)sub_1D53390D4((uint64_t)&v85, 2u) * v69;
    v81 = *(_QWORD *)a9;
    v82 = *(double *)(*(_QWORD *)a9 + 8);
    *(double *)v81 = v82 / **(double **)a9;
    *(double *)(v81 + 16) = v82 / v80;
    *(_QWORD *)(v81 + 8) = 0x3FF0000000000000;
    v83 = 1;
  }
  if (*((_QWORD *)&v92 + 1))
  {
    v93 = *((_QWORD *)&v92 + 1);
    operator delete(*((void **)&v92 + 1));
  }
  if (*((_QWORD *)&v94 + 1))
  {
    v95 = *((_QWORD *)&v94 + 1);
    operator delete(*((void **)&v94 + 1));
  }
  if (*((_QWORD *)&v96 + 1))
  {
    v97 = *((_QWORD *)&v96 + 1);
    operator delete(*((void **)&v96 + 1));
  }
  return v83;
}

void sub_1D52FEF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a26)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

void sub_1D52FF070()
{
  JUMPOUT(0x1D52FF048);
}

void sub_1D52FF078()
{
  JUMPOUT(0x1D52FF058);
}

uint64_t sub_1D52FF080(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  sub_1D52B0DE4(a1, 0, __p);
  v2 = sub_1D52B0BBC(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D52FF0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D52FF0F0(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  sub_1D52B0DE4(a1, 0, __p);
  v2 = sub_1D52B0C2C(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D52FF144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1D52FF160(uint64_t a1)
{
  unint64_t v2;
  void *__p[2];
  char v5;

  sub_1D52B0DE4(a1, 0, __p);
  v2 = sub_1D52B0D58(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D52FF1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1D52FF1D0(uint64_t a1)
{
  unint64_t v2;
  void **v3;
  unsigned int v4;
  void **v5;
  BOOL v6;
  unint64_t v7;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;

  v2 = sub_1D5291994();
  sub_1D52B0DE4(a1, 0, v11);
  v3 = sub_1D5294144(a1 + 872, v11);
  if ((void **)(a1 + 880) == v3)
  {
    v6 = 0;
    v7 = 0;
    v4 = 0;
  }
  else
  {
    v4 = *((_DWORD *)v3 + 14);
    sub_1D52B0DE4(a1, 0, __p);
    v5 = sub_1D5294144(a1 + 896, __p);
    v6 = a1 + 904 != (_QWORD)v5;
    if ((void **)(a1 + 904) == v5)
      v7 = 0;
    else
      v7 = *((unsigned int *)v5 + 14);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  if (v12 < 0)
  {
    operator delete(v11[0]);
    if (v6)
      return v4 | (v7 << 32);
  }
  else if (v6)
  {
    return v4 | (v7 << 32);
  }
  v7 = HIDWORD(v2);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 536))(a1) == 1)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
  else
    v4 = v2;
  return v4 | (v7 << 32);
}

void sub_1D52FF2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1D52FF328(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v6;
  void **v7;
  unsigned int v8;
  void **v9;
  _BOOL4 v10;
  unsigned int v11;
  void *exception;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;

  v3 = *a2;
  v2 = a2[1];
  if ((int)*a2 < 1 || (int)v2 <= 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    goto LABEL_22;
  }
  v6 = a1 + 872;
  sub_1D52B0DE4(a1, 0, v16);
  v7 = sub_1D5294144(v6, v16);
  if ((void **)(a1 + 880) == v7)
  {
    v10 = 0;
    v11 = 0;
    v8 = 0;
  }
  else
  {
    v8 = *((_DWORD *)v7 + 14);
    sub_1D52B0DE4(a1, 0, __p);
    v9 = sub_1D5294144(a1 + 896, __p);
    v10 = a1 + 904 != (_QWORD)v9;
    if ((void **)(a1 + 904) == v9)
      v11 = 0;
    else
      v11 = *((_DWORD *)v9 + 14);
    if (v15 < 0)
      operator delete(__p[0]);
  }
  if ((v17 & 0x80000000) == 0)
  {
    if (!v10)
      return v3 | (unint64_t)(v2 << 32);
    goto LABEL_16;
  }
  operator delete(v16[0]);
  if (v10)
  {
LABEL_16:
    if (v8 && v11)
    {
      sub_1D5282DF0(v16, (v8 + v3 - 1) / v8 * v8, (v11 + v2 - 1) / v11 * v11);
      v3 = v16[0];
      v2 = HIDWORD(v16[0]);
      return v3 | (unint64_t)(v2 << 32);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
LABEL_22:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return v3 | (unint64_t)(v2 << 32);
}

void sub_1D52FF494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void *sub_1D52FF4E0(uint64_t a1)
{
  void **v2;
  void *__p[2];
  char v5;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
  sub_1D52B0DE4(a1, 0, __p);
  v2 = sub_1D5294144(a1 + 1408, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 1416) == v2)
    return 0;
  else
    return v2[7];
}

void sub_1D52FF56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D52FF588(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void *__p[2];
  char v6;

  v2 = sub_1D5291950(a1);
  sub_1D52B0DE4(a1, 0, __p);
  v3 = sub_1D5294144(a1 + 1336, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 1344) != v3)
    v2 = (uint64_t)v3[7];
  sub_1D52B0DE4(a1, 0, __p);
  sub_1D5294144(a1 + 1360, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D52FF650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1D52FF670(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  void *__p[2];
  char v9;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 448))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
  sub_1D52B0DE4(a1, 0, __p);
  v3 = sub_1D5294144(a1 + 1336, __p);
  if (v9 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 1344) == v3)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v4 = *((_DWORD *)v3 + 15);
    v5 = (*((_DWORD *)v3 + 14) + v2);
    v6 = (unint64_t)(v4 + HIDWORD(v2)) << 32;
  }
  sub_1D52B0DE4(a1, 0, __p);
  sub_1D5294144(a1 + 1360, __p);
  if (v9 < 0)
    operator delete(__p[0]);
  return v6 | v5;
}

void sub_1D52FF774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1D52FF794(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void *__p[2];
  char v6;

  v2 = a1 + 1408;
  sub_1D52B0DE4(a1, 0, __p);
  v3 = sub_1D5294144(v2, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  return a1 + 1416 != (_QWORD)v3;
}

void sub_1D52FF7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1D52FF810(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void *__p[2];
  char v6;

  v2 = a1 + 1336;
  sub_1D52B0DE4(a1, 0, __p);
  v3 = sub_1D5294144(v2, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  return a1 + 1344 != (_QWORD)v3;
}

void sub_1D52FF870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1D52FF88C(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void *__p[2];
  char v6;

  v2 = a1 + 1360;
  sub_1D52B0DE4(a1, 0, __p);
  v3 = sub_1D5294144(v2, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  return a1 + 1368 != (_QWORD)v3;
}

void sub_1D52FF8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D52FF908(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  unsigned int *v4;
  uint64_t v5;
  char v6;
  void *__p[2];
  char v9;

  v2 = a1 + 656;
  sub_1D52B0DE4(a1, 0, __p);
  v3 = sub_1D5294144(v2, __p);
  if ((void **)(a1 + 664) == v3 || (v4 = (unsigned int *)v3[7], v3[8] == v4))
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v5 = *v4;
    v6 = 1;
  }
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if ((v6 & 1) != 0)
      return v5;
    return sub_1D52919C4();
  }
  if ((v6 & 1) == 0)
    return sub_1D52919C4();
  return v5;
}

void sub_1D52FF9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D52FF9C4(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void *__p[2];
  char v7;

  v2 = a1 + 680;
  sub_1D52B0DE4(a1, 0, __p);
  v3 = sub_1D5294144(v2, __p);
  if ((void **)(a1 + 688) == v3)
    v4 = 1;
  else
    v4 = *((unsigned int *)v3 + 14);
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_1D52FFA30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D52FFA4C(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void **v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  v2 = a1 + 584;
  sub_1D52B0DE4(a1, 0, __p);
  v3 = sub_1D5294144(v2, __p);
  v4 = v3;
  if ((void **)(a1 + 592) == v3)
    v5 = 0;
  else
    v5 = *((unsigned int *)v3 + 14);
  if (v8 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 592) == v4)
    return sub_1D52919D4();
  return v5;
}

void sub_1D52FFAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D52FFAF4(void **a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, void **a4@<X8>)
{
  int v7;
  void **v8;
  void **v9;
  int v10;
  void **v11;
  void **v12;
  void **v13;
  _BOOL4 v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  unsigned __int16 v33;
  void *v34;
  unsigned __int16 v35;
  _BOOL4 v36;
  _BOOL4 v37;
  void **v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  unsigned __int16 v47;
  __int128 v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  unsigned __int16 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  unsigned __int16 v64;
  void *v65;
  unsigned __int16 v66;
  void **v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  void *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  unsigned __int16 v75;
  void *v76;
  unsigned __int16 v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  void *v88;
  uint64_t v89;
  void *v90;
  unsigned __int16 v91;
  void *v92;
  unsigned __int16 v93;
  _BOOL4 v94;
  _BOOL4 v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  void *v100;
  void *exception;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  void *__p;
  std::__shared_weak_count *v107;
  char v108;
  void *v109[2];
  char v110;
  void *v111[2];
  char v112;
  void *v113[3];
  void *v114;
  __int128 v115;
  __int128 v116;
  void *v117;
  void **v118;
  char v119[17];

  v7 = (*((uint64_t (**)(void **))*a1 + 67))(a1);
  v116 = 0uLL;
  v117 = 0;
  v114 = 0;
  v115 = 0uLL;
  v8 = sub_1D5294144((uint64_t)(a1 + 179), a1 + 148);
  v9 = v8;
  if (a1 + 180 == v8)
  {
    v10 = 0;
    v103 = 0;
    goto LABEL_37;
  }
  v10 = *((_DWORD *)v8 + 14);
  sub_1D52B0DE4((uint64_t)a1, 0, v113);
  v11 = sub_1D5294144((uint64_t)(a1 + 109), v113);
  if (a1 + 110 == v11)
  {
    v13 = a4;
    v14 = 0;
    v103 = 0;
  }
  else
  {
    HIDWORD(v103) = *((_DWORD *)v11 + 14);
    sub_1D52B0DE4((uint64_t)a1, 0, v111);
    v12 = sub_1D5294144((uint64_t)(a1 + 112), v111);
    if (a1 + 113 == v12)
    {
      v13 = a4;
      v14 = 0;
      LODWORD(v103) = 0;
    }
    else
    {
      LODWORD(v103) = *((_DWORD *)v12 + 14);
      sub_1D52B0DE4((uint64_t)a1, 0, v109);
      if (sub_1D52EF584((uint64_t)(a1 + 115), v109, (char *)&v116))
      {
        v13 = a4;
        sub_1D52B0DE4((uint64_t)a1, 0, &__p);
        v14 = sub_1D52EF584((uint64_t)(a1 + 118), &__p, (char *)&v114);
        if (v108 < 0)
          operator delete(__p);
      }
      else
      {
        v13 = a4;
        v14 = 0;
      }
      if (v110 < 0)
        operator delete(v109[0]);
    }
    if (v112 < 0)
      operator delete(v111[0]);
  }
  if (SHIBYTE(v113[2]) < 0)
  {
    operator delete(v113[0]);
    if (v14)
      goto LABEL_17;
LABEL_19:
    LODWORD(v103) = *(_DWORD *)(a2 + 4);
    HIDWORD(v103) = *(_DWORD *)a2;
    LODWORD(v111[0]) = (*((uint64_t (**)(void **))*a1 + 53))(a1);
    sub_1D52F5E38(v113, 1uLL, v111);
    if ((_QWORD)v116)
    {
      *((_QWORD *)&v116 + 1) = v116;
      operator delete((void *)v116);
    }
    v116 = *(_OWORD *)v113;
    v117 = v113[2];
    LODWORD(v111[0]) = (*((uint64_t (**)(void **))*a1 + 54))(a1);
    sub_1D52F5E38(v113, 1uLL, v111);
    if (v114)
    {
      *(_QWORD *)&v115 = v114;
      operator delete(v114);
    }
    v15 = v113[0];
    v114 = v113[0];
    v115 = *(_OWORD *)&v113[1];
    v16 = v113[1];
    goto LABEL_24;
  }
  if (!v14)
    goto LABEL_19;
LABEL_17:
  v15 = v114;
  v16 = (_BYTE *)v115;
LABEL_24:
  if (*((_QWORD *)&v116 + 1) - (_QWORD)v116 != v16 - v15)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  (*((void (**)(void **__return_ptr, void **))*a1 + 48))(v113, a1);
  v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v113[0] + 16))(v113[0]);
  v18 = (std::__shared_weak_count *)v113[1];
  if (v113[1])
  {
    v19 = (unint64_t *)((char *)v113[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (*((_QWORD *)&v116 + 1) != (_QWORD)v116)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      v23 = *(_DWORD *)(v116 + 4 * v21);
      if (v17 <= v23 || (v24 = *((_DWORD *)v114 + v21), v17 <= v24) || v17 < v24 + v23)
      {
        v100 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v100, "RawCameraException");
        __cxa_throw(v100, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v21 = v22;
    }
    while ((uint64_t)(*((_QWORD *)&v116 + 1) - v116) >> 2 > (unint64_t)v22++);
  }
  a4 = v13;
LABEL_37:
  if (v7 <= 7)
  {
    if (v7 == 1)
    {
      (*((void (**)(void **__return_ptr, void **))*a1 + 48))(v113, a1);
      v109[0] = (void *)(*((uint64_t (**)(void **))*a1 + 53))(a1);
      LOBYTE(v118) = (*((uint64_t (**)(void **))*a1 + 9))(a1);
      sub_1D53066E8(v113, (unint64_t *)v109, (_QWORD *)a2, a3, (char *)&v118, v111);
      v57 = (std::__shared_weak_count *)v113[1];
      if (v113[1])
      {
        v58 = (unint64_t *)((char *)v113[1] + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = v111[0];
      v113[0] = (void *)(*((uint64_t (**)(void **))*a1 + 54))(a1);
      sub_1D528304C(v109, (unint64_t *)v113);
      (*(void (**)(void *, void **))(*(_QWORD *)v60 + 32))(v60, v109);
      v61 = v111[0];
      v62 = (*((uint64_t (**)(void **))*a1 + 13))(a1);
      sub_1D530CBD8((uint64_t)v61, v62);
      v63 = v111[0];
      v64 = (*((uint64_t (**)(void **))*a1 + 65))(a1);
      (*(void (**)(void *, _QWORD))(*(_QWORD *)v63 + 248))(v63, v64);
      v65 = v111[0];
      v66 = (*((uint64_t (**)(void **))*a1 + 66))(a1);
      (*(void (**)(void *, _QWORD))(*(_QWORD *)v65 + 232))(v65, v66);
      sub_1D52B0DE4((uint64_t)a1, 0, v113);
      v67 = sub_1D5294144((uint64_t)(a1 + 197), v113);
      if (SHIBYTE(v113[2]) < 0)
        operator delete(v113[0]);
      if (a1 + 198 != v67)
        (*(void (**)(void *, void **))(*(_QWORD *)v111[0] + 208))(v111[0], v67 + 7);
      (*(void (**)(void *, _QWORD, _QWORD, __int128 *, void **))(*(_QWORD *)v111[0] + 240))(v111[0], HIDWORD(v103), v103, &v116, &v114);
      (*(void (**)(void))(*(_QWORD *)v111[0] + 256))();
      goto LABEL_92;
    }
    if (v7 != 7)
    {
LABEL_75:
      *a4 = 0;
      a4[1] = 0;
      goto LABEL_104;
    }
    if (a1 + 180 == v9)
    {
      (*((void (**)(void **__return_ptr, void **))*a1 + 48))(&__p, a1);
      v118 = (void **)(*((uint64_t (**)(void **))*a1 + 53))(a1);
      v105 = sub_1D52FF328((uint64_t)a1, (unsigned int *)a2);
      (*((void (**)(void **__return_ptr, void **))*a1 + 27))(v113, a1);
      (*((void (**)(void **__return_ptr, void **))*a1 + 28))(v111, a1);
      sub_1D5306CA8(&__p, (unint64_t *)&v118, &v105, a3, (uint64_t)v113, (uint64_t)v111, v109);
      if (v112 < 0)
        operator delete(v111[0]);
      if (SHIBYTE(v113[2]) < 0)
        operator delete(v113[0]);
      v78 = v107;
      if (v107)
      {
        p_shared_owners = (unint64_t *)&v107->__shared_owners_;
        do
          v80 = __ldaxr(p_shared_owners);
        while (__stlxr(v80 - 1, p_shared_owners));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = v109[0];
      v113[0] = (void *)(*((uint64_t (**)(void **))*a1 + 54))(a1);
      sub_1D528304C(v111, (unint64_t *)v113);
      (*(void (**)(void *, void **))(*(_QWORD *)v81 + 32))(v81, v111);
      v82 = v109[0];
      v83 = (*((uint64_t (**)(void **))*a1 + 13))(a1);
      sub_1D530CBD8((uint64_t)v82, v83);
      v48 = *(_OWORD *)v109;
      goto LABEL_103;
    }
    v38 = sub_1D5294144((uint64_t)(a1 + 182), a1 + 148);
    if (a1 + 183 == v38)
      v39 = v10 & 0xFFFF0000;
    else
      v39 = *((unsigned int *)v38 + 14);
    (*((void (**)(void **__return_ptr, void **))*a1 + 48))(v111, a1);
    v118 = (void **)(*((uint64_t (**)(void **))*a1 + 53))(a1);
    v105 = sub_1D52FF328((uint64_t)a1, (unsigned int *)a2);
    v119[0] = (*((uint64_t (**)(void **))*a1 + 9))(a1);
    sub_1D5300FF0((uint64_t)a1, 8, (uint64_t)v113);
    sub_1D53069FC(v111, (unint64_t *)&v118, (_QWORD *)a2, &v105, a3, v119, (__int128 *)v113, v109);
    __p = v113;
    sub_1D5282E44((void ***)&__p);
    v84 = (std::__shared_weak_count *)v111[1];
    if (v111[1])
    {
      v85 = (unint64_t *)((char *)v111[1] + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    v87 = v109[0];
    v113[0] = (void *)(*((uint64_t (**)(void **))*a1 + 54))(a1);
    sub_1D528304C(v111, (unint64_t *)v113);
    (*(void (**)(void *, void **))(*(_QWORD *)v87 + 32))(v87, v111);
    v88 = v109[0];
    v89 = (*((uint64_t (**)(void **))*a1 + 13))(a1);
    sub_1D530CBD8((uint64_t)v88, v89);
    (*(void (**)(void *, uint64_t))(*(_QWORD *)v109[0] + 200))(v109[0], v39);
    (*(void (**)(void *, _QWORD, _QWORD, __int128 *, void **))(*(_QWORD *)v109[0] + 240))(v109[0], HIDWORD(v103), v103, &v116, &v114);
    v90 = v109[0];
    v91 = (*((uint64_t (**)(void **))*a1 + 66))(a1);
    (*(void (**)(void *, _QWORD))(*(_QWORD *)v90 + 232))(v90, v91);
    if ((*((unsigned int (**)(void **))*a1 + 9))(a1))
    {
      v92 = v109[0];
      v93 = (*((uint64_t (**)(void **))*a1 + 66))(a1);
      (*(void (**)(void *, _QWORD))(*(_QWORD *)v92 + 48))(v92, v93);
    }
    memset(v113, 0, sizeof(v113));
    sub_1D52B0DE4((uint64_t)a1, 0, v111);
    v94 = sub_1D52AE940((uint64_t)(a1 + 197), v111, (char *)v113);
    v95 = v94;
    if (v112 < 0)
    {
      operator delete(v111[0]);
      if (!v95)
        goto LABEL_122;
    }
    else if (!v94)
    {
LABEL_122:
      *(_OWORD *)a4 = *(_OWORD *)v109;
      v109[0] = 0;
      v109[1] = 0;
      if (!v113[0])
        goto LABEL_104;
      v113[1] = v113[0];
      operator delete(v113[0]);
      v96 = (std::__shared_weak_count *)v109[1];
      if (!v109[1])
        goto LABEL_104;
      v97 = (unint64_t *)((char *)v109[1] + 8);
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      goto LABEL_137;
    }
    (*(void (**)(void *, void **))(*(_QWORD *)v109[0] + 208))(v109[0], v113);
    goto LABEL_122;
  }
  if (v7 == 8)
  {
    LODWORD(v118) = 0;
    LODWORD(v105) = 0;
    sub_1D52B0DE4((uint64_t)a1, 0, v113);
    sub_1D52A8A1C((uint64_t)a1, v113, &v118);
    if (SHIBYTE(v113[2]) < 0)
      operator delete(v113[0]);
    sub_1D52B0DE4((uint64_t)a1, 0, v113);
    sub_1D52A8AA4((uint64_t)a1, v113, 0, &v105);
    if (SHIBYTE(v113[2]) < 0)
      operator delete(v113[0]);
    (*((void (**)(void **__return_ptr, void **))*a1 + 48))(v111, a1);
    v109[0] = (void *)(*((uint64_t (**)(void **))*a1 + 53))(a1);
    __p = (void *)sub_1D52FF328((uint64_t)a1, (unsigned int *)a2);
    v119[0] = (*((uint64_t (**)(void **))*a1 + 9))(a1);
    sub_1D5306FC4(v111, (unint64_t *)v109, (_QWORD *)a2, &__p, a3, (int *)&v118, (int *)&v105, v113, v119);
    v40 = (std::__shared_weak_count *)v111[1];
    if (v111[1])
    {
      v41 = (unint64_t *)((char *)v111[1] + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = v113[0];
    v111[0] = (void *)(*((uint64_t (**)(void **))*a1 + 54))(a1);
    sub_1D528304C(v109, (unint64_t *)v111);
    (*(void (**)(void *, void **))(*(_QWORD *)v43 + 32))(v43, v109);
    v44 = v113[0];
    v45 = (*((uint64_t (**)(void **))*a1 + 13))(a1);
    sub_1D530CBD8((uint64_t)v44, v45);
    (*(void (**)(void *, _QWORD, _QWORD, __int128 *, void **))(*(_QWORD *)v113[0] + 240))(v113[0], HIDWORD(v103), v103, &v116, &v114);
    v46 = v113[0];
    v47 = (*((uint64_t (**)(void **))*a1 + 66))(a1);
    (*(void (**)(void *, _QWORD))(*(_QWORD *)v46 + 64))(v46, v47);
    (*(void (**)(void *, uint64_t))(*(_QWORD *)v113[0] + 48))(v113[0], 3);
    v48 = *(_OWORD *)v113;
    goto LABEL_103;
  }
  if (v7 == 34892)
  {
    if ((*((unsigned int (**)(void **))*a1 + 9))(a1))
    {
      v111[0] = 0;
      sub_1D528F9B4(v113, 4uLL, v111);
      sub_1D52B0DE4((uint64_t)a1, 0, v111);
      (*((void (**)(void **, void **, void **, _QWORD))*a1 + 31))(a1, v111, v113, 0);
      if (v112 < 0)
        operator delete(v111[0]);
      (*((void (**)(void **__return_ptr, void **))*a1 + 48))(&__p, a1);
      v105 = (*((uint64_t (**)(void **))*a1 + 53))(a1);
      v104 = sub_1D52FF328((uint64_t)a1, (unsigned int *)a2);
      sub_1D5300FF0((uint64_t)a1, 8, (uint64_t)v111);
      sub_1D5307194(&__p, &v105, (_QWORD *)a2, &v104, a3, (__int128 *)v111, (uint64_t)v113, v109);
      v118 = v111;
      sub_1D5282E44(&v118);
      v49 = v107;
      if (v107)
      {
        v50 = (unint64_t *)&v107->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = v109[0];
      v111[0] = (void *)(*((uint64_t (**)(void **))*a1 + 54))(a1);
      sub_1D528304C(&__p, (unint64_t *)v111);
      (*(void (**)(void *, void **))(*(_QWORD *)v52 + 32))(v52, &__p);
      v53 = v109[0];
      v54 = (*((uint64_t (**)(void **))*a1 + 13))(a1);
      sub_1D530CBD8((uint64_t)v53, v54);
      (*(void (**)(void *, _QWORD, _QWORD, __int128 *, void **))(*(_QWORD *)v109[0] + 240))(v109[0], HIDWORD(v103), v103, &v116, &v114);
      v55 = v109[0];
      v56 = (*((uint64_t (**)(void **))*a1 + 66))(a1);
      (*(void (**)(void *, _QWORD))(*(_QWORD *)v55 + 64))(v55, v56);
      (*(void (**)(void *, uint64_t))(*(_QWORD *)v109[0] + 48))(v109[0], 3);
      *(_OWORD *)a4 = *(_OWORD *)v109;
      if (v113[0])
      {
        v113[1] = v113[0];
        operator delete(v113[0]);
      }
      goto LABEL_104;
    }
    goto LABEL_75;
  }
  if (v7 != 52546)
    goto LABEL_75;
  if (!(*((unsigned int (**)(void **))*a1 + 9))(a1))
  {
    (*((void (**)(void **__return_ptr, void **))*a1 + 48))(v109, a1);
    v118 = (void **)(*((uint64_t (**)(void **))*a1 + 53))(a1);
    v105 = sub_1D52FF328((uint64_t)a1, (unsigned int *)a2);
    sub_1D5300FF0((uint64_t)a1, 8, (uint64_t)v113);
    LODWORD(__p) = sub_1D53010A8((uint64_t)a1);
    LODWORD(v104) = sub_1D5301130((uint64_t)a1);
    sub_1D53077D8(v109, (unint64_t *)&v118, (_QWORD *)a2, &v105, a3, (__int128 *)v113, (int *)&__p, v111, (int *)&v104);
    __p = v113;
    sub_1D5282E44((void ***)&__p);
    v68 = (std::__shared_weak_count *)v109[1];
    if (v109[1])
    {
      v69 = (unint64_t *)((char *)v109[1] + 8);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = v111[0];
    v113[0] = (void *)(*((uint64_t (**)(void **))*a1 + 54))(a1);
    sub_1D528304C(v109, (unint64_t *)v113);
    (*(void (**)(void *, void **))(*(_QWORD *)v71 + 32))(v71, v109);
    v72 = v111[0];
    v73 = (*((uint64_t (**)(void **))*a1 + 13))(a1);
    sub_1D530CBD8((uint64_t)v72, v73);
    (*(void (**)(void *, _QWORD, _QWORD, __int128 *, void **))(*(_QWORD *)v111[0] + 240))(v111[0], HIDWORD(v103), v103, &v116, &v114);
    v74 = v111[0];
    v75 = (*((uint64_t (**)(void **))*a1 + 66))(a1);
    (*(void (**)(void *, _QWORD))(*(_QWORD *)v74 + 232))(v74, v75);
    v76 = v111[0];
    v77 = (*((uint64_t (**)(void **))*a1 + 66))(a1);
    (*(void (**)(void *, _QWORD))(*(_QWORD *)v76 + 48))(v76, v77);
LABEL_92:
    v48 = *(_OWORD *)v111;
LABEL_103:
    *(_OWORD *)a4 = v48;
    goto LABEL_104;
  }
  (*((void (**)(void **__return_ptr, void **))*a1 + 48))(v111, a1);
  v118 = (void **)(*((uint64_t (**)(void **))*a1 + 53))(a1);
  v105 = sub_1D52FF328((uint64_t)a1, (unsigned int *)a2);
  v119[0] = (*((uint64_t (**)(void **))*a1 + 9))(a1);
  sub_1D5300FF0((uint64_t)a1, 8, (uint64_t)v113);
  sub_1D53074EC(v111, (unint64_t *)&v118, (_QWORD *)a2, &v105, a3, v119, (__int128 *)v113, v109);
  __p = v113;
  sub_1D5282E44((void ***)&__p);
  v26 = (std::__shared_weak_count *)v111[1];
  if (v111[1])
  {
    v27 = (unint64_t *)((char *)v111[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v109[0];
  v113[0] = (void *)(*((uint64_t (**)(void **))*a1 + 54))(a1);
  sub_1D528304C(v111, (unint64_t *)v113);
  (*(void (**)(void *, void **))(*(_QWORD *)v29 + 32))(v29, v111);
  v30 = v109[0];
  v31 = (*((uint64_t (**)(void **))*a1 + 13))(a1);
  sub_1D530CBD8((uint64_t)v30, v31);
  (*(void (**)(void *, _QWORD, _QWORD, __int128 *, void **))(*(_QWORD *)v109[0] + 240))(v109[0], HIDWORD(v103), v103, &v116, &v114);
  v32 = v109[0];
  v33 = (*((uint64_t (**)(void **))*a1 + 66))(a1);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)v32 + 232))(v32, v33);
  v34 = v109[0];
  v35 = (*((uint64_t (**)(void **))*a1 + 66))(a1);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)v34 + 48))(v34, v35);
  (*(void (**)(void))(*(_QWORD *)v109[0] + 248))();
  memset(v113, 0, sizeof(v113));
  sub_1D52B0DE4((uint64_t)a1, 0, v111);
  v36 = sub_1D52AE940((uint64_t)(a1 + 197), v111, (char *)v113);
  v37 = v36;
  if (v112 < 0)
  {
    operator delete(v111[0]);
    if (!v37)
      goto LABEL_129;
    goto LABEL_128;
  }
  if (v36)
LABEL_128:
    (*(void (**)(void *, void **))(*(_QWORD *)v109[0] + 208))(v109[0], v113);
LABEL_129:
  if (sub_1D5281224((uint64_t)v109[0]))
  {
    *(_OWORD *)a4 = *(_OWORD *)v109;
    a4 = v109;
  }
  else
  {
    fwrite("The JPEGXL Unpacker does not support the color profile in the encoded data", 0x4AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
  }
  *a4 = 0;
  a4[1] = 0;
  if (v113[0])
  {
    v113[1] = v113[0];
    operator delete(v113[0]);
  }
  v96 = (std::__shared_weak_count *)v109[1];
  if (v109[1])
  {
    v99 = (unint64_t *)((char *)v109[1] + 8);
    do
      v98 = __ldaxr(v99);
    while (__stlxr(v98 - 1, v99));
LABEL_137:
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
LABEL_104:
  if (v114)
  {
    *(_QWORD *)&v115 = v114;
    operator delete(v114);
  }
  if ((_QWORD)v116)
  {
    *((_QWORD *)&v116 + 1) = v116;
    operator delete((void *)v116);
  }
}

void sub_1D5300CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41)
{
  uint64_t v41;
  void *v43;

  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1D5282EB4((uint64_t)&a20);
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  v43 = *(void **)(v41 - 144);
  if (v43)
  {
    *(_QWORD *)(v41 - 136) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D5300FF0@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;

  v4 = result;
  v6 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  do
  {
    v7 = v4 + 24 * v6;
    v8 = *(__int128 **)(v7 + 2168);
    v9 = *(__int128 **)(v7 + 2176);
    while (v8 != v9)
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v8 + 16))(*(_QWORD *)v8);
      if ((_DWORD)result == a2)
        result = sub_1D52B0A7C((char **)a3, v8);
      ++v8;
    }
    ++v6;
  }
  while (v6 != 3);
  return result;
}

void sub_1D5301090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5282E44((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53010A8(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void *__p[2];
  char v7;

  v2 = a1 + 2456;
  sub_1D52B0DE4(a1, 0, __p);
  v3 = sub_1D5294144(v2, __p);
  if ((void **)(a1 + 2464) == v3)
    v4 = 1;
  else
    v4 = *((unsigned int *)v3 + 14);
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_1D5301114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D5301130(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void *__p[2];
  char v7;

  v2 = a1 + 2480;
  sub_1D52B0DE4(a1, 0, __p);
  v3 = sub_1D5294144(v2, __p);
  if ((void **)(a1 + 2488) == v3)
    v4 = 1;
  else
    v4 = *((unsigned int *)v3 + 14);
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_1D530119C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D53011B8(uint64_t a1)
{
  void **v3;
  double *v4;
  double v5;
  void **v6;
  unsigned int *v7;
  unsigned int v8;
  void *__p[2];
  char v10;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 536))(a1) == 34892)
    return 0xFFFFLL;
  sub_1D52B0DE4(a1, 0, __p);
  v3 = sub_1D5294144(a1 + 240, __p);
  if ((void **)(a1 + 248) == v3 || (v4 = (double *)v3[7], v3[8] == v4) || (v5 = *v4, *v4 < 0.0))
  {
    if (v10 < 0)
      operator delete(__p[0]);
  }
  else
  {
    if (v10 < 0)
      operator delete(__p[0]);
    if (v5 <= 65535.0)
      return (int)v5;
  }
  sub_1D52B0DE4(a1, 0, __p);
  v6 = sub_1D5294144(a1 + 656, __p);
  if ((void **)(a1 + 664) == v6 || (v7 = (unsigned int *)v6[7], v6[8] == v7) || (v8 = *v7, *v7 < 8))
  {
    if (v10 < 0)
      operator delete(__p[0]);
  }
  else
  {
    if (v10 < 0)
      operator delete(__p[0]);
    if (v8 <= 0x10)
      return (int)(exp2((double)v8) + -1.0);
  }
  return sub_1D52919BC();
}

void sub_1D5301310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D5301330@<X0>(uint64_t a1@<X0>, unsigned int a2@<W3>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 1296);
  v5 = *(const void **)(a1 + 1288);
  v6 = (v4 - (uint64_t)v5) >> 3;
  if (v6 == a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return sub_1D5282C70(a3, v5, v4, v6);
  }
  else
  {
    v8 = 0x3FF0000000000000;
    return sub_1D528F9B4(a3, a2, &v8);
  }
}

_QWORD *sub_1D5301394@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1)
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 528))(a1) == 1)
  {
    v5 = 0x3FF0000000000000;
    return sub_1D528F9B4(a2, 3uLL, &v5);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return sub_1D5282C70(a2, *(const void **)(a1 + 1248), *(_QWORD *)(a1 + 1256), (uint64_t)(*(_QWORD *)(a1 + 1256) - *(_QWORD *)(a1 + 1248)) >> 3);
  }
}

double sub_1D5301428(double *a1)
{
  void *v2;
  void *v3;
  void *v5;
  void *v6;

  if (sub_1D536CB88(a1 + 159))
    return a1[159];
  (*(void (**)(void **__return_ptr, double *))(*(_QWORD *)a1 + 368))(&v5, a1);
  v2 = v5;
  v3 = v6;
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  if (v3 == v2)
    return sub_1D536C2E0();
  else
    return a1[159];
}

uint64_t sub_1D53014A0(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  unsigned int *v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  v2 = a1 + 192;
  sub_1D52850A0(__p, "IFD0:EXIF");
  v3 = sub_1D5294144(v2, __p);
  if ((void **)(a1 + 200) == v3 || (v4 = (unsigned int *)v3[7], v3[8] == v4))
    v5 = 0;
  else
    v5 = *v4;
  if (v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_1D530151C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1D5301538(void **a1, uint64_t a2, char a3)
{
  double v5;
  void *__p[2];
  char v8;

  sub_1D52850A0(__p, "IFD0:EXIF");
  v5 = sub_1D52912CC(a1, (uint64_t)__p, a3);
  if (v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_1D53015A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D53015BC(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  void *v6;
  void *__p;
  void *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  sub_1D52FE6D4(a1, &v15);
  if ((_DWORD)v15)
    v4 = DWORD1(v15) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    *(_DWORD *)(a2 + 8) = sub_1D5301870(a1);
    sub_1D53393A8((_QWORD *)(a2 + 16), (uint64_t)&v15);
  }
  sub_1D52FE794(a1, &v13);
  if ((_DWORD)v13 && DWORD1(v13))
  {
    *(_DWORD *)(a2 + 12) = sub_1D53018F4(a1);
    sub_1D53393A8((_QWORD *)(a2 + 48), (uint64_t)&v13);
  }
  sub_1D5301978(a1, &v11);
  if ((_DWORD)v11 && DWORD1(v11))
    sub_1D53393A8((_QWORD *)(a2 + 144), (uint64_t)&v11);
  sub_1D5301A14(a1, &v9);
  if ((_DWORD)v9 && DWORD1(v9))
    sub_1D53393A8((_QWORD *)(a2 + 176), (uint64_t)&v9);
  sub_1D5301AB0(a1, &v6);
  sub_1D53393A8((_QWORD *)(a2 + 216), (uint64_t)&v6);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  sub_1D5301B50(a1, &v6);
  sub_1D53393A8((_QWORD *)(a2 + 248), (uint64_t)&v6);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 336))(&v6, a1);
  sub_1D53393A8((_QWORD *)(a2 + 80), (uint64_t)&v6);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 344))(&v6, a1);
  sub_1D53393A8((_QWORD *)(a2 + 112), (uint64_t)&v6);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  sub_1D5301BF0(a1, (uint64_t)&v6);
  sub_1D536CDB8((_DWORD *)a2, (uint64_t *)&v6);
  if (v6)
  {
    __p = v6;
    operator delete(v6);
  }
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = *((_QWORD *)&v9 + 1);
    operator delete(*((void **)&v9 + 1));
  }
  if (*((_QWORD *)&v11 + 1))
  {
    v12 = *((_QWORD *)&v11 + 1);
    operator delete(*((void **)&v11 + 1));
  }
  if (*((_QWORD *)&v13 + 1))
  {
    v14 = *((_QWORD *)&v13 + 1);
    operator delete(*((void **)&v13 + 1));
  }
  if (*((_QWORD *)&v15 + 1))
  {
    v16 = *((_QWORD *)&v15 + 1);
    operator delete(*((void **)&v15 + 1));
  }
  return 1;
}

void sub_1D53017B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  uint64_t v19;
  void *v21;
  void *v22;

  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  v21 = *(void **)(v19 - 72);
  if (v21)
  {
    *(_QWORD *)(v19 - 64) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(v19 - 40);
  if (v22)
  {
    *(_QWORD *)(v19 - 32) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D5301870(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void *__p[2];
  char v6;

  v2 = a1 + 1816;
  sub_1D5301C98(a1, (uint64_t)__p);
  v3 = sub_1D5294144(v2, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 1824) == v3)
    return 17;
  else
    return *((unsigned __int16 *)v3 + 28);
}

void sub_1D53018D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D53018F4(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void *__p[2];
  char v6;

  v2 = a1 + 1840;
  sub_1D5301C98(a1, (uint64_t)__p);
  v3 = sub_1D5294144(v2, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 1848) == v3)
    return 21;
  else
    return *((unsigned __int16 *)v3 + 28);
}

void sub_1D530195C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1D5301978@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  double result;
  void *__p[2];
  char v8;

  v4 = a1 + 1768;
  sub_1D5301C98(a1, (uint64_t)__p);
  v5 = sub_1D5294144(v4, __p);
  if (v8 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 1776) == v5)
    return sub_1D5338BEC(a2);
  sub_1D5338BF8(a2, (uint64_t)(v5 + 7));
  return result;
}

void sub_1D53019F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1D5301A14@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  double result;
  void *__p[2];
  char v8;

  v4 = a1 + 1792;
  sub_1D5301C98(a1, (uint64_t)__p);
  v5 = sub_1D5294144(v4, __p);
  if (v8 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 1800) == v5)
    return sub_1D5338BEC(a2);
  sub_1D5338BF8(a2, (uint64_t)(v5 + 7));
  return result;
}

void sub_1D5301A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double *sub_1D5301AB0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  void *__p[2];
  char v8;

  v4 = a1 + 1672;
  sub_1D5301C98(a1, (uint64_t)__p);
  v5 = sub_1D5294144(v4, __p);
  if (v8 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 1680) == v5)
    return sub_1D5338F84(*(unsigned __int16 *)(a1 + 1234), (uint64_t)a2);
  else
    return (double *)sub_1D5338BF8(a2, (uint64_t)(v5 + 7));
}

void sub_1D5301B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double *sub_1D5301B50@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  void *__p[2];
  char v8;

  v4 = a1 + 1696;
  sub_1D5301C98(a1, (uint64_t)__p);
  v5 = sub_1D5294144(v4, __p);
  if (v8 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 1704) == v5)
    return sub_1D5338F84(*(unsigned __int16 *)(a1 + 1234), (uint64_t)a2);
  else
    return (double *)sub_1D5338BF8(a2, (uint64_t)(v5 + 7));
}

void sub_1D5301BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1D5301BF0@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return sub_1D5290CE0(a1 + 1864, (void **)(a1 + 1184), (char *)a2);
}

void sub_1D5301C28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_1D5301C44(uint64_t a1)
{
  void **v2;

  v2 = sub_1D5294144(a1 + 1888, (void **)(a1 + 1184));
  if ((void **)(a1 + 1896) == v2)
    return 0.0;
  else
    return *((double *)v2 + 7);
}

uint64_t sub_1D5301C90(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1616);
}

void **sub_1D5301C98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void **result;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  void **v8;

  result = (void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  if ((_DWORD)result
    && (result = sub_1D5294144(a1 + 2240, (void **)(a1 + 1184)), (void **)(a1 + 2248) == result)
    && (v8 = result, result = sub_1D5294144(a1 + 2240, (void **)(a1 + 1208)), v8 != result))
  {
    if ((*(char *)(a1 + 1231) & 0x80000000) == 0)
    {
      *(_OWORD *)a2 = *(_OWORD *)(a1 + 1208);
      v5 = *(_QWORD *)(a1 + 1224);
      goto LABEL_5;
    }
    v6 = *(void **)(a1 + 1208);
    v7 = *(_QWORD *)(a1 + 1216);
  }
  else
  {
    if ((*(char *)(a1 + 1207) & 0x80000000) == 0)
    {
      *(_OWORD *)a2 = *(_OWORD *)(a1 + 1184);
      v5 = *(_QWORD *)(a1 + 1200);
LABEL_5:
      *(_QWORD *)(a2 + 16) = v5;
      return result;
    }
    v6 = *(void **)(a1 + 1184);
    v7 = *(_QWORD *)(a1 + 1192);
  }
  return (void **)sub_1D5290130((_BYTE *)a2, v6, v7);
}

double *sub_1D5301D70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void **v4;

  v4 = sub_1D5294144(a1 + 1720, (void **)(a1 + 1184));
  if ((void **)(a1 + 1728) == v4)
    return sub_1D5338F84(*(unsigned __int16 *)(a1 + 1234), (uint64_t)a2);
  else
    return (double *)sub_1D5338BF8(a2, (uint64_t)(v4 + 7));
}

double *sub_1D5301DC4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void **v4;

  v4 = sub_1D5294144(a1 + 1744, (void **)(a1 + 1184));
  if ((void **)(a1 + 1752) == v4)
    return sub_1D5338F84(*(unsigned __int16 *)(a1 + 1234), (uint64_t)a2);
  else
    return (double *)sub_1D5338BF8(a2, (uint64_t)(v4 + 7));
}

uint64_t sub_1D5301E18(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char v7;
  uint64_t v8;
  unsigned __int8 *p_p;
  uint64_t v10;
  int v11;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void *__p;
  uint64_t v19;
  uint64_t v20;

  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_1D52917E4(a1, &v16);
  v2 = v16;
  v14 = 10;
  sub_1D5285A24(&v15, &v14);
  v3 = sub_1D52849DC(v2, &v15, (uint64_t)&__p);
  v4 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = HIBYTE(v20);
  if (v3)
  {
    v8 = v20 >= 0 ? HIBYTE(v20) : v19;
    if (v8 == 9)
    {
      p_p = (unsigned __int8 *)&__p;
      if (v20 < 0)
        p_p = (unsigned __int8 *)__p;
      v10 = *(_QWORD *)p_p;
      v11 = p_p[8];
      if (v10 == 0x4F6920656C707041 && v11 == 83)
      {
        *(_WORD *)(a1 + 1232) = 257;
        if ((v7 & 0x80) == 0)
          return 0;
        goto LABEL_18;
      }
    }
  }
  if (v20 < 0)
LABEL_18:
    operator delete(__p);
  return 0;
}

void sub_1D5301F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_1D5282EB4((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_1D5301F58(uint64_t a1)
{
  return *(double *)(a1 + 1920);
}

double sub_1D5301F60(uint64_t a1)
{
  return *(double *)(a1 + 1912);
}

BOOL sub_1D5301F68(uint64_t a1)
{
  return sub_1D5307AC0(a1 + 1928, (void **)(a1 + 1184)) != 0;
}

float sub_1D5301F90(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1956))
    return *(float *)(a1 + 1952);
  else
    return 0.0;
}

BOOL sub_1D5301FA8@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return sub_1D5290CE0(a1 + 1928, (void **)(a1 + 1184), (char *)a2);
}

void sub_1D5301FE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D5301FFC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  std::string __p;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t *v57;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_1D52850A0(&__p, "dng");
  v4 = a2[2];
  v5 = a2[1];
  if (v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a2) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a2) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v57 = a2 + 2;
    if (v10)
      v11 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v10);
    else
      v11 = 0;
    v12 = &v11[24 * v7];
    v53 = v11;
    v54 = v12;
    v56 = &v11[24 * v10];
    v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v12 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v12 = v13;
    memset(&__p, 0, sizeof(__p));
    v55 = v12 + 24;
    sub_1D5293D58(a2, &v53);
    v14 = a2[1];
    sub_1D5293F24((uint64_t)&v53);
    v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v14;
    if (v15 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v5 = v6;
    a2[1] = v5 + 24;
  }
  sub_1D52850A0(&__p, "adobe");
  v17 = a2[1];
  v16 = a2[2];
  if (v17 >= v16)
  {
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a2) >> 3);
    v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a2) >> 3);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v20;
    v57 = a2 + 2;
    if (v22)
      v23 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v22);
    else
      v23 = 0;
    v24 = &v23[24 * v19];
    v53 = v23;
    v54 = v24;
    v56 = &v23[24 * v22];
    v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v24 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v24 = v25;
    memset(&__p, 0, sizeof(__p));
    v55 = v24 + 24;
    sub_1D5293D58(a2, &v53);
    v26 = a2[1];
    sub_1D5293F24((uint64_t)&v53);
    v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v26;
    if (v27 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v17 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v17 = v18;
    a2[1] = v17 + 24;
  }
  sub_1D529394C(a1, &__p);
  v29 = a2[1];
  v28 = a2[2];
  if (v29 >= v28)
  {
    v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *a2) >> 3);
    v32 = v31 + 1;
    if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a2) >> 3);
    if (2 * v33 > v32)
      v32 = 2 * v33;
    if (v33 >= 0x555555555555555)
      v34 = 0xAAAAAAAAAAAAAAALL;
    else
      v34 = v32;
    v57 = a2 + 2;
    if (v34)
      v35 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v34);
    else
      v35 = 0;
    v36 = &v35[24 * v31];
    v53 = v35;
    v54 = v36;
    v56 = &v35[24 * v34];
    v37 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v36 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v36 = v37;
    memset(&__p, 0, sizeof(__p));
    v55 = v36 + 24;
    sub_1D5293D58(a2, &v53);
    v38 = a2[1];
    sub_1D5293F24((uint64_t)&v53);
    v39 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v38;
    if (v39 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v29 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v29 = v30;
    a2[1] = v29 + 24;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
  {
    sub_1D52850A0(&__p, "linear");
    v41 = a2[1];
    v40 = a2[2];
    if (v41 >= v40)
    {
      v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - *a2) >> 3);
      v44 = v43 + 1;
      if (v43 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_1D5282B8C();
      v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *a2) >> 3);
      if (2 * v45 > v44)
        v44 = 2 * v45;
      if (v45 >= 0x555555555555555)
        v46 = 0xAAAAAAAAAAAAAAALL;
      else
        v46 = v44;
      v57 = a2 + 2;
      if (v46)
        v47 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v46);
      else
        v47 = 0;
      v48 = &v47[24 * v43];
      v53 = v47;
      v54 = v48;
      v56 = &v47[24 * v46];
      v49 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((_QWORD *)v48 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v48 = v49;
      memset(&__p, 0, sizeof(__p));
      v55 = v48 + 24;
      sub_1D5293D58(a2, &v53);
      v50 = a2[1];
      sub_1D5293F24((uint64_t)&v53);
      v51 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      a2[1] = v50;
      if (v51 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v42 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v41 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v41 = v42;
      a2[1] = v41 + 24;
    }
  }
}

void sub_1D5302464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1D5293F24((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_1D5293CCC((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1D53024CC(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v6;
  uint64_t v7;
  int v8;
  void *v9;
  char *v10;
  __int128 *v11;
  char *v12;
  _BOOL4 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *__p;
  void *v41;
  char v42[8];
  void *v43;
  void *v44;
  __int128 v45;
  uint64_t v46;

  v6 = &v45;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 216))(&v45);
  v7 = HIBYTE(v46);
  v8 = SHIBYTE(v46);
  v9 = (void *)v45;
  if (v46 < 0)
  {
    v7 = *((_QWORD *)&v45 + 1);
    v6 = (__int128 *)v45;
  }
  v10 = (char *)v6 + v7;
  if (v7 >= 10)
  {
    v11 = v6;
    do
    {
      v12 = (char *)memchr(v11, 72, v7 - 9);
      if (!v12)
        break;
      if (*(_QWORD *)v12 == 0x6C626C6573736148 && *((_WORD *)v12 + 4) == 25697)
        goto LABEL_12;
      v11 = (__int128 *)(v12 + 1);
      v7 = v10 - (char *)v11;
    }
    while (v10 - (char *)v11 > 9);
  }
  v12 = v10;
LABEL_12:
  v15 = v12 == v10 || v12 - (char *)v6 == -1;
  if (v8 < 0)
  {
    operator delete(v9);
    if (v15)
    {
LABEL_20:
      v16 = a2[1];
      *a3 = *a2;
      a3[1] = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      return;
    }
  }
  else if (v15)
  {
    goto LABEL_20;
  }
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
  sub_1D52FE6D4(a1, &v45);
  sub_1D5338D40((uint64_t)v42, 3u, 3u, 0.473895, v20, v21, v22, v23, v24, 0xBFB7DAFF9576F52ALL);
  v30 = HIDWORD(v19) - 5585;
  if ((v19 - 7391) >= 0xFFFFFEFF && v30 >= 0xFFFFFEFF)
  {
    sub_1D5338BF8(&v39, (uint64_t)v42);
    v31 = sub_1D533A010((unsigned int *)&v45, &v39, 0.0001);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
      if ((v31 & 1) != 0)
      {
LABEL_29:
        sub_1D54344F4(CFSTR("dng.adobe.HasselbladH3D-39"), a3);
        goto LABEL_38;
      }
    }
    else if (v31)
    {
      goto LABEL_29;
    }
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  sub_1D5338D40((uint64_t)v42, 3u, 3u, 0.806794, v25, v26, v27, v28, v29, 0xBFD2EFAA4766C6DELL);
  if ((v19 - 4225) < 0xFFFFFEFF || v30 < 0xFFFFFEFF)
    goto LABEL_41;
  sub_1D5338BF8(&v36, (uint64_t)v42);
  v32 = sub_1D533A010((unsigned int *)&v45, &v36, 0.0001);
  if (!v37)
  {
    if (v32)
      goto LABEL_37;
LABEL_41:
    if (v43)
    {
      v44 = v43;
      operator delete(v43);
    }
    v33 = a2[1];
    *a3 = *a2;
    a3[1] = v33;
    if (v33)
    {
      v34 = (unint64_t *)(v33 + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    goto LABEL_46;
  }
  v38 = v37;
  operator delete(v37);
  if ((v32 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  sub_1D54344F4(CFSTR("dng.adobe.HasselbladCF"), a3);
LABEL_38:
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
LABEL_46:
  if (*((_QWORD *)&v45 + 1))
  {
    v46 = *((_QWORD *)&v45 + 1);
    operator delete(*((void **)&v45 + 1));
  }
}

void sub_1D5302894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  if (__p)
    operator delete(__p);
  if (a26)
    operator delete(a26);
  v29 = *(void **)(v27 - 104);
  if (v29)
  {
    *(_QWORD *)(v27 - 96) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D53028FC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  const void *v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  double v14;
  int32x2_t v15;
  int32x2_t v16;
  uint64x2_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int32x4_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void *__p[3];
  void **v28[4];
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  uint64_t v33[3];
  char *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  uint64_t v37;

  sub_1D5300FF0(a1, 9, (uint64_t)&v36);
  v4 = v36;
  v3 = v37;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v4 != v3)
  {
    v5 = 0;
    do
    {
      v6 = *(const void **)(v4 + 16 * v5);
      if (v6
        && (v7 = (char *)__dynamic_cast(v6, (const struct __class_type_info *)&unk_1E996FA38, (const struct __class_type_info *)&unk_1E998CC58, 0)) != 0)
      {
        v34 = v7;
        v8 = *(std::__shared_weak_count **)(v4 + 16 * v5 + 8);
        v35 = v8;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
      }
      else
      {
        v7 = 0;
        v34 = 0;
        v35 = 0;
      }
      memset(v33, 0, sizeof(v33));
      v12 = *((_DWORD *)v7 + 3);
      v11 = *((_DWORD *)v7 + 4);
      v13 = *((_DWORD *)v7 + 6);
      v14 = (double)(*((_DWORD *)v7 + 5) - v12);
      *(double *)v28 = (double)v11;
      *(double *)&v28[1] = (double)v12;
      *(double *)&v28[2] = (double)(v13 - v11);
      *(double *)&v28[3] = v14;
      v29 = vextq_s8(*(int8x16_t *)(v7 + 72), *(int8x16_t *)(v7 + 72), 8uLL);
      v15 = *(int32x2_t *)(v7 + 44);
      v16 = vadd_s32(v15, (int32x2_t)-1);
      v17.i64[0] = v16.u32[0];
      v17.i64[1] = v16.u32[1];
      v18 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v7 + 56), vcvtq_f64_u64(v17));
      v17.i64[0] = v15.u32[0];
      v17.i64[1] = v15.u32[1];
      v19 = (int8x16_t)vcvtq_f64_u64(v17);
      v30 = vextq_s8(v18, v18, 8uLL);
      v31 = vextq_s8(v19, v19, 8uLL);
      v20 = *(int32x4_t *)(v7 + 28);
      v32 = vextq_s8((int8x16_t)vrev64q_s32(v20), (int8x16_t)v20, 8uLL);
      if (v20.i32[1])
      {
        v21 = 0;
        do
        {
          sub_1D5369870(v7, v21, __p);
          sub_1D5302B7C(v33, (uint64_t)__p);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          ++v21;
          v7 = v34;
        }
        while (v21 < *((_DWORD *)v34 + 8));
      }
      v22 = a2[1];
      if (v22 >= a2[2])
      {
        v23 = sub_1D5304A6C(a2, (uint64_t)v28);
      }
      else
      {
        sub_1D53049F8((uint64_t)a2, (uint64_t)v28);
        v23 = v22 + 120;
      }
      a2[1] = v23;
      __p[0] = v33;
      sub_1D5304DA8((void ***)__p);
      v24 = v35;
      if (v35)
      {
        v25 = (unint64_t *)&v35->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      ++v5;
      v4 = v36;
    }
    while (v5 < (v37 - v36) >> 4);
  }
  v28[0] = (void **)&v36;
  sub_1D5282E44(v28);
}

void sub_1D5302B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  sub_1D5304DA8((void ***)&__p);
  sub_1D5282EB4(v13 - 104);
  sub_1D53050D0((void ***)&a13);
  a13 = v13 - 88;
  sub_1D5282E44((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5302B7C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)sub_1D5293DCC(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_1D53047E0(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = sub_1D530496C((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1D5302CA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D530496C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5302CB8@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D5293FAC(a2, a1 + 271, a1 + 274, a1 + 277);
}

BOOL sub_1D5302CCC(_BYTE *a1)
{
  return a1[2112] || a1[1972] || a1[1988] != 0;
}

_QWORD *sub_1D5302CF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  float v60;
  float v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  std::__shared_weak_count *v109;
  unint64_t *p_shared_owners;
  unint64_t v111;
  void *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  float v116;
  float v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  float *v124;
  unsigned __int8 *v125;
  unsigned int v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  unsigned __int16 *v133;
  float *v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  float *v138;
  unsigned __int16 *v139;
  unsigned int v140;
  __int128 v141;
  __int128 v142;
  const void *v143;
  uint64_t v144;
  void *exception;
  void *v147;
  void *v148;
  unsigned int v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void *__p;
  std::__shared_weak_count *v153;
  void *__src[2];
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  double v158;
  double v159;
  double v160;
  double v161;
  int v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  int v168;
  char v169;
  float v170;
  char v171;
  float v172;
  char v173;
  float v174;
  char v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178[3];
  uint64_t v179[3];
  uint64_t v180;
  int v181;

  if (!*(_BYTE *)(a1 + 1972) && !*(_BYTE *)(a1 + 1988))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v4 = (_OWORD *)(a1 + 1992);
  if (!*(_BYTE *)(a1 + 2112))
  {
    if (!*(_BYTE *)(a1 + 1988))
    {
      if (!*(_BYTE *)(a1 + 1972))
        goto LABEL_241;
      v150 = *(_QWORD *)(a1 + 1960);
      LODWORD(v151) = *(_DWORD *)(a1 + 1968);
      sub_1D52917E4(a1, &v157);
      LODWORD(__src[0]) = sub_1D52A5CC8((uint64_t)&v150);
      sub_1D5285B08((int *)v178, (int *)__src);
      sub_1D5285164(v179, &v157, (uint64_t)v178, 0);
      v65 = *(std::__shared_weak_count **)&v158;
      if (v158 != 0.0)
      {
        v66 = (unint64_t *)(*(_QWORD *)&v158 + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      sub_1D52917E4(a1, &v157);
      v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
      sub_1D5293C20(v178, &v157, v68);
      v69 = *(std::__shared_weak_count **)&v158;
      if (v158 != 0.0)
      {
        v70 = (unint64_t *)(*(_QWORD *)&v158 + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      LOBYTE(v168) = 0;
      v169 = 0;
      LOBYTE(v170) = 0;
      v171 = 0;
      LOBYTE(v172) = 0;
      v173 = 0;
      LOBYTE(v174) = 0;
      v175 = 0;
      v177 = 0;
      v176 = 0uLL;
      sub_1D52917E4(a1, __src);
      LODWORD(v157) = sub_1D52847F8((uint64_t)__src[0]);
      v72 = (std::__shared_weak_count *)__src[1];
      if (__src[1])
      {
        v73 = (unint64_t *)((char *)__src[1] + 8);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      sub_1D52917E4(a1, __src);
      HIDWORD(v157) = sub_1D52847F8((uint64_t)__src[0]);
      v75 = (std::__shared_weak_count *)__src[1];
      if (__src[1])
      {
        v76 = (unint64_t *)((char *)__src[1] + 8);
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      sub_1D52917E4(a1, __src);
      v158 = sub_1D528494C((uint64_t)__src[0]);
      v78 = (std::__shared_weak_count *)__src[1];
      if (__src[1])
      {
        v79 = (unint64_t *)((char *)__src[1] + 8);
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      sub_1D52917E4(a1, __src);
      v159 = sub_1D528494C((uint64_t)__src[0]);
      v81 = (std::__shared_weak_count *)__src[1];
      if (__src[1])
      {
        v82 = (unint64_t *)((char *)__src[1] + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      sub_1D52917E4(a1, __src);
      v160 = sub_1D528494C((uint64_t)__src[0]);
      v84 = (std::__shared_weak_count *)__src[1];
      if (__src[1])
      {
        v85 = (unint64_t *)((char *)__src[1] + 8);
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      sub_1D52917E4(a1, __src);
      v161 = sub_1D528494C((uint64_t)__src[0]);
      v87 = (std::__shared_weak_count *)__src[1];
      if (__src[1])
      {
        v88 = (unint64_t *)((char *)__src[1] + 8);
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      sub_1D52917E4(a1, __src);
      v162 = sub_1D52847F8((uint64_t)__src[0]);
      v90 = (std::__shared_weak_count *)__src[1];
      if (__src[1])
      {
        v91 = (unint64_t *)((char *)__src[1] + 8);
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      sub_1D52917E4(a1, __src);
      v163 = sub_1D5284934((uint64_t)__src[0]);
      v93 = (std::__shared_weak_count *)__src[1];
      if (__src[1])
      {
        v94 = (unint64_t *)((char *)__src[1] + 8);
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      sub_1D52917E4(a1, __src);
      v164 = sub_1D5284934((uint64_t)__src[0]);
      v96 = (std::__shared_weak_count *)__src[1];
      if (__src[1])
      {
        v97 = (unint64_t *)((char *)__src[1] + 8);
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      sub_1D52917E4(a1, __src);
      v165 = sub_1D5284934((uint64_t)__src[0]);
      v99 = (std::__shared_weak_count *)__src[1];
      if (__src[1])
      {
        v100 = (unint64_t *)((char *)__src[1] + 8);
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      sub_1D52917E4(a1, __src);
      v166 = sub_1D5284934((uint64_t)__src[0]);
      v102 = (std::__shared_weak_count *)__src[1];
      if (__src[1])
      {
        v103 = (unint64_t *)((char *)__src[1] + 8);
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      sub_1D52917E4(a1, __src);
      v167 = sub_1D5284934((uint64_t)__src[0]);
      v105 = (std::__shared_weak_count *)__src[1];
      if (__src[1])
      {
        v106 = (unint64_t *)((char *)__src[1] + 8);
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
      v180 = SHIDWORD(v157) * (uint64_t)(int)v157 * v162;
      if (!*(_BYTE *)(a1 + 1972))
        sub_1D5287C98();
      if (*(unsigned int *)(a1 + 1964) - 64 != 4 * SHIDWORD(v157) * (uint64_t)(int)v157 * v162)
      {
        v148 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v148, "RawCameraException");
        __cxa_throw(v148, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      sub_1D52917E4(a1, &__p);
      v108 = __p;
      sub_1D528304C(&v156, (unint64_t *)&v180);
      sub_1D52B3568((uint64_t)v108, (unsigned int *)&v156, (uint64_t *)__src);
      if ((_QWORD)v176)
      {
        *((_QWORD *)&v176 + 1) = v176;
        operator delete((void *)v176);
      }
      v176 = *(_OWORD *)__src;
      v177 = v155;
      __src[1] = 0;
      v155 = 0;
      __src[0] = 0;
      v109 = v153;
      if (v153)
      {
        p_shared_owners = (unint64_t *)&v153->__shared_owners_;
        do
          v111 = __ldaxr(p_shared_owners);
        while (__stlxr(v111 - 1, p_shared_owners));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      sub_1D530401C(a1 + 1992, (uint64_t)&v157);
LABEL_234:
      if ((_QWORD)v176)
      {
        *((_QWORD *)&v176 + 1) = v176;
        operator delete((void *)v176);
      }
      sub_1D5293C98(v178);
      sub_1D5285200(v179);
      if (*(_BYTE *)(a1 + 2112))
        goto LABEL_237;
LABEL_241:
      sub_1D5287C98();
    }
    v180 = *(_QWORD *)(a1 + 1976);
    v181 = *(_DWORD *)(a1 + 1984);
    sub_1D52917E4(a1, &v157);
    LODWORD(__src[0]) = sub_1D52A5CC8((uint64_t)&v180);
    sub_1D5285B08((int *)v178, (int *)__src);
    sub_1D5285164(v179, &v157, (uint64_t)v178, 0);
    v5 = *(std::__shared_weak_count **)&v158;
    if (v158 != 0.0)
    {
      v6 = (unint64_t *)(*(_QWORD *)&v158 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    sub_1D52917E4(a1, &v157);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    sub_1D5293C20(v178, &v157, v8);
    v9 = *(std::__shared_weak_count **)&v158;
    if (v158 != 0.0)
    {
      v10 = (unint64_t *)(*(_QWORD *)&v158 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    LOBYTE(v168) = 0;
    v169 = 0;
    LOBYTE(v170) = 0;
    v171 = 0;
    LOBYTE(v172) = 0;
    v173 = 0;
    LOBYTE(v174) = 0;
    v175 = 0;
    v177 = 0;
    v176 = 0uLL;
    sub_1D52917E4(a1, __src);
    LODWORD(v157) = sub_1D52847F8((uint64_t)__src[0]);
    v12 = (std::__shared_weak_count *)__src[1];
    if (__src[1])
    {
      v13 = (unint64_t *)((char *)__src[1] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    sub_1D52917E4(a1, __src);
    HIDWORD(v157) = sub_1D52847F8((uint64_t)__src[0]);
    v15 = (std::__shared_weak_count *)__src[1];
    if (__src[1])
    {
      v16 = (unint64_t *)((char *)__src[1] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    sub_1D52917E4(a1, __src);
    v158 = sub_1D528494C((uint64_t)__src[0]);
    v18 = (std::__shared_weak_count *)__src[1];
    if (__src[1])
    {
      v19 = (unint64_t *)((char *)__src[1] + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    sub_1D52917E4(a1, __src);
    v159 = sub_1D528494C((uint64_t)__src[0]);
    v21 = (std::__shared_weak_count *)__src[1];
    if (__src[1])
    {
      v22 = (unint64_t *)((char *)__src[1] + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    sub_1D52917E4(a1, __src);
    v160 = sub_1D528494C((uint64_t)__src[0]);
    v24 = (std::__shared_weak_count *)__src[1];
    if (__src[1])
    {
      v25 = (unint64_t *)((char *)__src[1] + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    sub_1D52917E4(a1, __src);
    v161 = sub_1D528494C((uint64_t)__src[0]);
    v27 = (std::__shared_weak_count *)__src[1];
    if (__src[1])
    {
      v28 = (unint64_t *)((char *)__src[1] + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    sub_1D52917E4(a1, __src);
    v162 = sub_1D52847F8((uint64_t)__src[0]);
    v30 = (std::__shared_weak_count *)__src[1];
    if (__src[1])
    {
      v31 = (unint64_t *)((char *)__src[1] + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    sub_1D52917E4(a1, __src);
    v163 = sub_1D5284934((uint64_t)__src[0]);
    v33 = (std::__shared_weak_count *)__src[1];
    if (__src[1])
    {
      v34 = (unint64_t *)((char *)__src[1] + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    sub_1D52917E4(a1, __src);
    v164 = sub_1D5284934((uint64_t)__src[0]);
    v36 = (std::__shared_weak_count *)__src[1];
    if (__src[1])
    {
      v37 = (unint64_t *)((char *)__src[1] + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    sub_1D52917E4(a1, __src);
    v165 = sub_1D5284934((uint64_t)__src[0]);
    v39 = (std::__shared_weak_count *)__src[1];
    if (__src[1])
    {
      v40 = (unint64_t *)((char *)__src[1] + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    sub_1D52917E4(a1, __src);
    v166 = sub_1D5284934((uint64_t)__src[0]);
    v42 = (std::__shared_weak_count *)__src[1];
    if (__src[1])
    {
      v43 = (unint64_t *)((char *)__src[1] + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    sub_1D52917E4(a1, __src);
    v167 = sub_1D5284934((uint64_t)__src[0]);
    v45 = (std::__shared_weak_count *)__src[1];
    if (__src[1])
    {
      v46 = (unint64_t *)((char *)__src[1] + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    sub_1D52917E4(a1, __src);
    v168 = sub_1D52847F8((uint64_t)__src[0]);
    v169 = 1;
    v48 = (std::__shared_weak_count *)__src[1];
    if (__src[1])
    {
      v49 = (unint64_t *)((char *)__src[1] + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    sub_1D52917E4(a1, __src);
    v170 = sub_1D5284934((uint64_t)__src[0]);
    v171 = 1;
    v51 = (std::__shared_weak_count *)__src[1];
    if (__src[1])
    {
      v52 = (unint64_t *)((char *)__src[1] + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    sub_1D52917E4(a1, __src);
    v172 = sub_1D5284934((uint64_t)__src[0]);
    v173 = 1;
    v54 = (std::__shared_weak_count *)__src[1];
    if (__src[1])
    {
      v55 = (unint64_t *)((char *)__src[1] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    sub_1D52917E4(a1, __src);
    v174 = sub_1D5284934((uint64_t)__src[0]);
    v175 = 1;
    v57 = (std::__shared_weak_count *)__src[1];
    if (__src[1])
    {
      v58 = (unint64_t *)((char *)__src[1] + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    if (!v171)
      sub_1D5287C98();
    v60 = 4.0;
    if (v170 < 0.25 || v170 > 4.0)
    {
      if (v170 <= 4.0)
        v60 = v170;
      if (v170 >= 0.25)
        v62 = v60;
      else
        v62 = 0.25;
      v170 = v62;
      v171 = 1;
    }
    v63 = SHIDWORD(v157) * (uint64_t)(int)v157 * v162;
    v156 = v63;
    if (!v169)
      sub_1D5287C98();
    if ((v168 - 1) >= 3)
      v64 = 1;
    else
      v64 = qword_1D5449F98[v168 - 1];
    if (!*(_BYTE *)(a1 + 1988))
      sub_1D5287C98();
    if (*(unsigned int *)(a1 + 1980) - 80 != v64 * v63)
    {
      v147 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v147, "RawCameraException");
      __cxa_throw(v147, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (v168 == 3)
    {
      sub_1D52917E4(a1, &__p);
      v112 = __p;
      sub_1D528304C(&v150, &v156);
      sub_1D52B3568((uint64_t)v112, (unsigned int *)&v150, (uint64_t *)__src);
      if ((_QWORD)v176)
      {
        *((_QWORD *)&v176 + 1) = v176;
        operator delete((void *)v176);
      }
      v176 = *(_OWORD *)__src;
      v177 = v155;
      __src[1] = 0;
      v155 = 0;
      __src[0] = 0;
      v113 = v153;
      if (v153)
      {
        v114 = (unint64_t *)&v153->__shared_owners_;
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
      }
LABEL_233:
      sub_1D530401C(a1 + 1992, (uint64_t)&v157);
      goto LABEL_234;
    }
    sub_1D52B35F8(__src, v63);
    if (!v173)
      sub_1D5287C98();
    if (!v175 || !v169)
      sub_1D5287C98();
    if (v168 == 2)
    {
      sub_1D52917E4(a1, &v150);
      v136 = v150;
      sub_1D528304C(&v149, &v156);
      sub_1D52B2C0C(v136, &v149, (uint64_t *)&__p);
      sub_1D5282EB4((uint64_t)&v150);
      v137 = v156;
      v123 = (std::__shared_weak_count *)__p;
      if (v156)
      {
        v138 = (float *)__src[0];
        v139 = (unsigned __int16 *)__p;
        do
        {
          v140 = *v139++;
          *v138++ = (float)v140;
          --v137;
        }
        while (v137);
        goto LABEL_230;
      }
    }
    else
    {
      v116 = v172;
      v117 = v174;
      if (v168 == 1)
      {
        sub_1D52917E4(a1, &v150);
        v127 = v150;
        sub_1D528304C(&v149, &v156);
        sub_1D52B2C0C(v127, &v149, (uint64_t *)&__p);
        v128 = v151;
        if (v151)
        {
          v129 = (unint64_t *)&v151->__shared_owners_;
          do
            v130 = __ldaxr(v129);
          while (__stlxr(v130 - 1, v129));
          if (!v130)
          {
            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
            std::__shared_weak_count::__release_weak(v128);
          }
        }
        v131 = v156;
        v132 = (char *)__src[0];
        if (v156)
        {
          v133 = (unsigned __int16 *)__p;
          v134 = (float *)__src[0];
          do
          {
            v135 = *v133++;
            *v134++ = v116 + (float)((float)((float)v135 / 65535.0) * (float)(v117 - v116));
            --v131;
          }
          while (v131);
        }
        sub_1D5282A44((char *)&v176, v132, (uint64_t)__src[1], ((char *)__src[1] - (char *)v132) >> 2);
        v123 = (std::__shared_weak_count *)__p;
      }
      else
      {
        if (v168)
          goto LABEL_231;
        sub_1D52917E4(a1, &v150);
        v118 = v150;
        sub_1D528304C(&v149, &v156);
        sub_1D52A7308(v118, &v149, (uint64_t *)&__p);
        v119 = v151;
        if (v151)
        {
          v120 = (unint64_t *)&v151->__shared_owners_;
          do
            v121 = __ldaxr(v120);
          while (__stlxr(v121 - 1, v120));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
        }
        v122 = v156;
        v123 = (std::__shared_weak_count *)__p;
        if (v156)
        {
          v124 = (float *)__src[0];
          v125 = (unsigned __int8 *)__p;
          do
          {
            v126 = *v125++;
            *v124++ = v116 + (float)((float)((float)v126 / 255.0) * (float)(v117 - v116));
            --v122;
          }
          while (v122);
LABEL_230:
          v153 = v123;
          operator delete(v123);
LABEL_231:
          sub_1D5282A44((char *)&v176, (char *)__src[0], (uint64_t)__src[1], ((char *)__src[1] - (char *)__src[0]) >> 2);
          if (__src[0])
          {
            __src[1] = __src[0];
            operator delete(__src[0]);
          }
          goto LABEL_233;
        }
      }
    }
    if (!v123)
      goto LABEL_231;
    goto LABEL_230;
  }
LABEL_237:
  v141 = *(_OWORD *)(a1 + 2040);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 2024);
  *(_OWORD *)(a2 + 48) = v141;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 2056);
  *(_OWORD *)(a2 + 77) = *(_OWORD *)(a1 + 2069);
  v142 = *(_OWORD *)(a1 + 2008);
  *(_OWORD *)a2 = *v4;
  *(_OWORD *)(a2 + 16) = v142;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v143 = *(const void **)(a1 + 2088);
  v144 = *(_QWORD *)(a1 + 2096);
  *(_QWORD *)(a2 + 96) = 0;
  return sub_1D5287D44((_QWORD *)(a2 + 96), v143, v144, (v144 - (uint64_t)v143) >> 2);
}

void sub_1D5303DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;
  uint64_t v21;
  void *v23;

  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  v23 = *(void **)(v20 + 96);
  if (v23)
  {
    *(_QWORD *)(v20 + 104) = v23;
    operator delete(v23);
  }
  sub_1D5293C98((uint64_t *)(v21 - 144));
  sub_1D5285200((uint64_t *)(v21 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_1D530401C(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = *(unsigned __int8 *)(a1 + 120);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v6 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 77) = *(_OWORD *)(a2 + 77);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 32) = v7;
  if (v3)
  {
    if (a1 != a2)
      sub_1D5282A44((char *)(a1 + 96), *(char **)(a2 + 96), *(_QWORD *)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 2);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    sub_1D5287D44((_QWORD *)(a1 + 96), *(const void **)(a2 + 96), *(_QWORD *)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 2);
    *(_BYTE *)(a1 + 120) = 1;
  }
  return a1;
}

BOOL sub_1D53040B4(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  void *__p[2];
  char v6;

  v2 = a1 + 2120;
  sub_1D5301C98(a1, (uint64_t)__p);
  v3 = sub_1D5294144(v2, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  return a1 + 2128 != (_QWORD)v3;
}

void sub_1D5304110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D530412C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  void *__p[2];
  char v7;

  v4 = a1 + 2120;
  sub_1D5301C98(a1, (uint64_t)__p);
  v5 = sub_1D5294144(v4, __p);
  if (v7 < 0)
    operator delete(__p[0]);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if ((void **)(a1 + 2128) != v5)
    sub_1D5282C70(a2, v5[7], (uint64_t)v5[8], ((_BYTE *)v5[8] - (_BYTE *)v5[7]) >> 3);
}

void sub_1D53041BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D53041D8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  void *__p[2];
  char v7;

  v4 = a1 + 2144;
  sub_1D5301C98(a1, (uint64_t)__p);
  v5 = sub_1D5294144(v4, __p);
  if (v7 < 0)
    operator delete(__p[0]);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if ((void **)(a1 + 2152) != v5)
    sub_1D5282C70(a2, v5[7], (uint64_t)v5[8], ((_BYTE *)v5[8] - (_BYTE *)v5[7]) >> 3);
}

void sub_1D5304268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D5304284(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void **v5;
  _BOOL4 v6;
  void **v7;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;

  v2 = a1 + 2240;
  sub_1D5301C98(a1, (uint64_t)__p);
  v3 = sub_1D5294144(v2, __p);
  if (v12 < 0)
    operator delete(__p[0]);
  if ((void **)(a1 + 2248) != v3)
    return *((unsigned int *)v3 + 14);
  sub_1D52B0DE4(a1, 0, v9);
  v5 = sub_1D5294144(a1 + 512, v9);
  v6 = (void **)(a1 + 520) != v5 && *((_DWORD *)v5 + 14) == 0;
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if (v6)
      goto LABEL_10;
    return 0;
  }
  if (!v6)
    return 0;
LABEL_10:
  sub_1D52B0DE4(a1, 0, __p);
  v7 = sub_1D5294144(v2, __p);
  if (v3 == v7)
    v4 = 0;
  else
    v4 = *((unsigned int *)v7 + 14);
  if (v12 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_1D5304390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1D53043C4(uint64_t a1)
{
  void **v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  unsigned __int16 *v15;
  uint64_t v16;

  sub_1D52B0DE4(a1, 0, &__p);
  v2 = sub_1D5294144(a1 + 1576, &__p);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);
  if ((void **)(a1 + 1584) == v2)
  {
    v6 = 0;
  }
  else
  {
    __p = 0;
    v15 = 0;
    v16 = 0;
    sub_1D5287CCC(&__p, v2[7], (uint64_t)v2[8], ((_BYTE *)v2[8] - (_BYTE *)v2[7]) >> 1);
    sub_1D52B261C(((char *)v15 - (_BYTE *)__p) >> 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (unsigned __int16 *)__p;
    v8 = v15;
    if (__p != v15)
    {
      do
      {
        objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v3, *v7, v4, v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addObject_(v6, v10, (uint64_t)v9, v11, v12);

        ++v7;
      }
      while (v7 != v8);
      v7 = (unsigned __int16 *)__p;
    }
    if (v7)
    {
      v15 = v7;
      operator delete(v7);
    }
  }
  return v6;
}

void sub_1D53044C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D530452C(uint64_t a1)
{
  sub_1D5305148(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void *sub_1D5304550(size_t a1)
{
  return malloc_type_malloc(a1, 0xB5AF7B64uLL);
}

char *sub_1D5304560(char *result, unsigned int *a2, unsigned int *a3, unint64_t a4)
{
  char *v6;
  double *v7;
  unsigned int v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D5282CE8(result, a4);
    v7 = (double *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = (double)v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1D53045B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D53045D4(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;

  v6 = a2;
  v8 = *(uint64_t **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    sub_1D5304784((void **)a1);
    if (a4 >> 60)
      sub_1D5282B8C();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = (uint64_t)sub_1D52842F4((_QWORD *)a1, v11);
    v13 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v14 = v6[1];
      *v13 = *v6;
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 2;
      v13 += 2;
    }
LABEL_25:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  result = *(_QWORD *)(a1 + 8);
  v17 = (result - (uint64_t)v8) >> 4;
  if (v17 < a4)
  {
    v18 = &a2[2 * v17];
    if ((uint64_t *)result != v8)
    {
      v19 = 16 * v17;
      do
      {
        result = (uint64_t)sub_1D52908C8(v8, v6);
        v6 += 2;
        v8 += 2;
        v19 -= 16;
      }
      while (v19);
      v8 = *(uint64_t **)(a1 + 8);
    }
    v13 = v8;
    if (v18 != a3)
    {
      v13 = v8;
      do
      {
        v20 = v18[1];
        *v13 = *v18;
        v13[1] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v18 += 2;
        v13 += 2;
      }
      while (v18 != a3);
    }
    goto LABEL_25;
  }
  if (a2 == a3)
  {
    v23 = v8;
  }
  else
  {
    v23 = v8;
    do
    {
      sub_1D52908C8(v8, v6);
      v6 += 2;
      v8 += 2;
      v23 += 2;
    }
    while (v6 != a3);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((uint64_t *)result != v23)
    result = sub_1D5282EB4(result - 16);
  *(_QWORD *)(a1 + 8) = v23;
  return result;
}

void sub_1D5304784(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = sub_1D5282EB4(v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_1D53047E0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1D5304854((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1D5304854(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_1D53048F4((uint64_t)v11);
  return v9;
}

uint64_t sub_1D53048F4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D5304928(a1);
  return a1;
}

void sub_1D5304928(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_1D530496C(uint64_t a1)
{
  sub_1D53049A0(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1D53049A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

_QWORD *sub_1D53049F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v3 + 80) = v7;
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)(v3 + 48) = v6;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  result = sub_1D5304BA4((_QWORD *)(v3 + 96), *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 120;
  return result;
}

void sub_1D5304A64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1D5304A6C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *v18[2];
  _OWORD *v19;
  char *v20;
  uint64_t *v21;

  v3 = *a1;
  v4 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x222222222222222)
    sub_1D5282B8C();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x111111111111111)
    v9 = 0x222222222222222;
  else
    v9 = v5;
  v21 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1D5304EB0(v7, v9);
  else
    v10 = 0;
  v11 = &v10[120 * v4];
  v18[0] = v10;
  v18[1] = v11;
  v19 = v11;
  v20 = &v10[120 * v9];
  v12 = *(_OWORD *)(a2 + 32);
  v13 = *(_OWORD *)(a2 + 48);
  v14 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v11 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v11 + 5) = v14;
  *((_OWORD *)v11 + 2) = v12;
  *((_OWORD *)v11 + 3) = v13;
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v15;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 14) = 0;
  *((_QWORD *)v11 + 12) = 0;
  sub_1D5304BA4((_QWORD *)v11 + 12, *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
  v19 = (_OWORD *)((char *)v19 + 120);
  sub_1D5304E3C(a1, v18);
  v16 = a1[1];
  sub_1D530504C(v18);
  return v16;
}

void sub_1D5304B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D530504C((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5304BA4(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1D5304C28(result, a4);
    result = sub_1D5304C78((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1D5304C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1D5304DA8(&a9);
  _Unwind_Resume(a1);
}

char *sub_1D5304C28(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_1D5282B8C();
  result = (char *)sub_1D5293DCC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

_QWORD *sub_1D5304C78(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_1D5287D44(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_1D5304D28((uint64_t)v8);
  return v4;
}

void sub_1D5304D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5304D28((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5304D28(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D5304D5C(a1);
  return a1;
}

void sub_1D5304D5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void sub_1D5304DA8(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1D5304DE8((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1D5304DE8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_1D5304E3C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1D5304EF4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1D5304EB0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223)
    sub_1D5282C48();
  return operator new(120 * a2);
}

uint64_t sub_1D5304EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 120);
      *(_OWORD *)(v7 - 104) = *(_OWORD *)(a3 - 104);
      *(_OWORD *)(v7 - 120) = v8;
      v9 = *(_OWORD *)(a3 - 88);
      v10 = *(_OWORD *)(a3 - 72);
      v11 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v11;
      *(_OWORD *)(v7 - 72) = v10;
      *(_OWORD *)(v7 - 88) = v9;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v17 + 1) - 120;
      *((_QWORD *)&v17 + 1) -= 120;
      a3 -= 120;
    }
    while (a3 != a5);
    v12 = v17;
  }
  v15 = 1;
  sub_1D5304FCC((uint64_t)v14);
  return v12;
}

uint64_t sub_1D5304FCC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D5305000(a1);
  return a1;
}

void sub_1D5305000(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = (void **)(v1 + 96);
    sub_1D5304DA8(&v3);
    v1 += 120;
  }
}

void **sub_1D530504C(void **a1)
{
  sub_1D530507C((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_1D530507C(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 120;
    v4 = (void **)(i - 24);
    sub_1D5304DA8(&v4);
  }
}

void sub_1D53050D0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 120;
        v7 = (void **)(v4 - 24);
        sub_1D5304DA8(&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1D5305148(uint64_t a1)
{
  uint64_t i;
  void *v3;
  void *v4;
  void *v5;
  void **v7;

  *(_QWORD *)a1 = off_1E9976CC0;
  sub_1D52940F4(a1 + 2480, *(char **)(a1 + 2488));
  sub_1D52940F4(a1 + 2456, *(char **)(a1 + 2464));
  sub_1D5294068(a1 + 2432, *(_QWORD **)(a1 + 2440));
  sub_1D52B2424(a1 + 2408, *(_QWORD **)(a1 + 2416));
  sub_1D52B2424(a1 + 2384, *(_QWORD **)(a1 + 2392));
  sub_1D52940F4(a1 + 2360, *(char **)(a1 + 2368));
  sub_1D52940F4(a1 + 2336, *(char **)(a1 + 2344));
  sub_1D52940F4(a1 + 2312, *(char **)(a1 + 2320));
  sub_1D52940F4(a1 + 2288, *(char **)(a1 + 2296));
  sub_1D52940F4(a1 + 2264, *(char **)(a1 + 2272));
  sub_1D52940F4(a1 + 2240, *(char **)(a1 + 2248));
  for (i = 2216; i != 2144; i -= 24)
  {
    v7 = (void **)(a1 + i);
    sub_1D5282E44(&v7);
  }
  sub_1D5294068(a1 + 2144, *(_QWORD **)(a1 + 2152));
  sub_1D5294068(a1 + 2120, *(_QWORD **)(a1 + 2128));
  if (*(_BYTE *)(a1 + 2112))
  {
    v3 = *(void **)(a1 + 2088);
    if (v3)
    {
      *(_QWORD *)(a1 + 2096) = v3;
      operator delete(v3);
    }
  }
  sub_1D5294068(a1 + 1928, *(_QWORD **)(a1 + 1936));
  sub_1D52940F4(a1 + 1888, *(char **)(a1 + 1896));
  sub_1D5294068(a1 + 1864, *(_QWORD **)(a1 + 1872));
  sub_1D52940F4(a1 + 1840, *(char **)(a1 + 1848));
  sub_1D52940F4(a1 + 1816, *(char **)(a1 + 1824));
  sub_1D53053C0(a1 + 1792, *(_QWORD **)(a1 + 1800));
  sub_1D53053C0(a1 + 1768, *(_QWORD **)(a1 + 1776));
  sub_1D53053C0(a1 + 1744, *(_QWORD **)(a1 + 1752));
  sub_1D53053C0(a1 + 1720, *(_QWORD **)(a1 + 1728));
  sub_1D53053C0(a1 + 1696, *(_QWORD **)(a1 + 1704));
  sub_1D53053C0(a1 + 1672, *(_QWORD **)(a1 + 1680));
  sub_1D53053C0(a1 + 1648, *(_QWORD **)(a1 + 1656));
  sub_1D53053C0(a1 + 1624, *(_QWORD **)(a1 + 1632));
  sub_1D5294068(a1 + 1576, *(_QWORD **)(a1 + 1584));
  sub_1D5294068(a1 + 1552, *(_QWORD **)(a1 + 1560));
  sub_1D52940F4(a1 + 1528, *(char **)(a1 + 1536));
  sub_1D52940F4(a1 + 1504, *(char **)(a1 + 1512));
  sub_1D5294068(a1 + 1480, *(_QWORD **)(a1 + 1488));
  sub_1D52940F4(a1 + 1456, *(char **)(a1 + 1464));
  sub_1D52940F4(a1 + 1432, *(char **)(a1 + 1440));
  sub_1D52940F4(a1 + 1408, *(char **)(a1 + 1416));
  sub_1D52940F4(a1 + 1384, *(char **)(a1 + 1392));
  sub_1D52940F4(a1 + 1360, *(char **)(a1 + 1368));
  sub_1D52940F4(a1 + 1336, *(char **)(a1 + 1344));
  sub_1D52B2424(a1 + 1312, *(_QWORD **)(a1 + 1320));
  v4 = *(void **)(a1 + 1288);
  if (v4)
  {
    *(_QWORD *)(a1 + 1296) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 1248);
  if (v5)
  {
    *(_QWORD *)(a1 + 1256) = v5;
    operator delete(v5);
  }
  if (*(char *)(a1 + 1231) < 0)
    operator delete(*(void **)(a1 + 1208));
  if (*(char *)(a1 + 1207) < 0)
    operator delete(*(void **)(a1 + 1184));
  return sub_1D52B2190(a1);
}

void sub_1D53053C0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1D53053C0(a1, *a2);
    sub_1D53053C0(a1, a2[1]);
    sub_1D5305408((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1D5305408(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1D530544C(uint64_t *a1@<X1>, char *a2@<X2>, void **a3@<X3>, void **a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x9E0uLL);
  sub_1D53054CC(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D53054B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53054CC(_QWORD *a1, uint64_t *a2, char *a3, void **a4, void **a5)
{
  a1[2] = 0;
  *a1 = &unk_1E9977030;
  a1[1] = 0;
  sub_1D52F6620((uint64_t)(a1 + 3), a2, *a3, *a4, *a5);
  return a1;
}

void sub_1D5305510(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5305524(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5305538(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977030;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D530556C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

uint64_t *sub_1D530557C(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_1D52B3CFC((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_1D5305624((uint64_t)a1, a4, (uint64_t)v10);
    sub_1D528EFCC(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1D53056FC((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_1D5305624@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  char *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1D530568C(v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1D5305674(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D53056FC(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_1D530568C(char *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1D5290130(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  sub_1D5338BEC(__dst + 24);
  return __dst;
}

void sub_1D53056E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1D53056FC(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1D5305408((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *sub_1D5305740(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_1D52B3CFC((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_1D53057D4((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1D528EFCC(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_BYTE *sub_1D53057D4@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_1D5290130(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1D530585C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1D52B3E30(v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5305878@<X0>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x50uLL);
  result = sub_1D53058D8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D53058C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53058D8(_QWORD *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E9977080;
  sub_1D53A14C8(a1 + 3, *a2);
  return a1;
}

void sub_1D5305914(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5305928(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D530593C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5305970(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1D5305980@<X0>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x50uLL);
  result = sub_1D53059E0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D53059CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53059E0(_QWORD *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E99770D0;
  sub_1D53383B0(a1 + 3, *a2);
  return a1;
}

void sub_1D5305A1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5305A30(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99770D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5305A44(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99770D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5305A78(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1D5305A88@<X0>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x50uLL);
  result = sub_1D5305AE8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D5305AD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5305AE8(_QWORD *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E9977120;
  sub_1D543F010(a1 + 3, *a2);
  return a1;
}

void sub_1D5305B24(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5305B38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5305B4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977120;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5305B80(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1D5305B90@<X0>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = sub_1D5305BF0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D5305BDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5305BF0(_QWORD *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E9977170;
  sub_1D537455C(a1 + 3, *a2);
  return a1;
}

void sub_1D5305C2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5305C40(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5305C54(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977170;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5305C88(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1D5305C98@<X0>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x58uLL);
  result = sub_1D5305CF8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D5305CE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5305CF8(_QWORD *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E99771C0;
  sub_1D5394E38(a1 + 3, *a2);
  return a1;
}

void sub_1D5305D34(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5305D48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99771C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5305D5C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99771C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5305D90(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1D5305DA0@<X0>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x38uLL);
  result = sub_1D5305E00(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D5305DEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5305E00(_QWORD *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E9977210;
  sub_1D5356404(a1 + 3, *a2);
  return a1;
}

void sub_1D5305E3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5305E50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5305E64(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977210;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5305E98(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1D5305EA8@<X0>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_1D5305F08(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D5305EF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5305F08(_QWORD *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E9977260;
  sub_1D5416540(a1 + 3, *a2);
  return a1;
}

void sub_1D5305F44(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5305F58(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5305F6C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977260;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5305FA0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1D5305FB0@<X0>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_1D5306010(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D5305FFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5306010(_QWORD *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E99772B0;
  sub_1D541E690(a1 + 3, *a2);
  return a1;
}

void sub_1D530604C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5306060(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99772B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5306074(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99772B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53060A8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1D53060B8@<X0>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x90uLL);
  result = sub_1D5306118(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D5306104(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5306118(_QWORD *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E9977300;
  sub_1D536986C(a1 + 3, *a2);
  return a1;
}

void sub_1D5306154(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5306168(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D530617C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977300;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53061B0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1D53061C0@<X0>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_1D5306220(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D530620C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5306220(_QWORD *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E9977350;
  sub_1D534C038(a1 + 3, *a2);
  return a1;
}

void sub_1D530625C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5306270(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5306284(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977350;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53062B8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1D53062C8@<X0>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_1D5306328(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D5306314(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5306328(_QWORD *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E99773A0;
  sub_1D53BBB74(a1 + 3, *a2);
  return a1;
}

void sub_1D5306364(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5306378(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99773A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D530638C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99773A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53063C0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1D53063D0@<X0>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_1D5306430(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D530641C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5306430(_QWORD *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E99773F0;
  sub_1D53AF8F0(a1 + 3, *a2);
  return a1;
}

void sub_1D530646C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5306480(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99773F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5306494(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99773F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53064C8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1D53064D8@<X0>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_1D5306538(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D5306524(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5306538(_QWORD *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E9977440;
  sub_1D52E3B94(a1 + 3, *a2);
  return a1;
}

void sub_1D5306574(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5306588(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977440;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D530659C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977440;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53065D0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1D53065E0@<X0>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = sub_1D5306640(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D530662C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5306640(_QWORD *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E9977490;
  sub_1D5331C38(a1 + 3, *a2);
  return a1;
}

void sub_1D530667C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5306690(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977490;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53066A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977490;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53066D8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1D53066E8(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, char *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;

  v12 = operator new(0x158uLL);
  sub_1D5306778(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  sub_1D5285658((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1D5306764(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5306778(_QWORD *a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5, char *a6)
{
  a1[2] = 0;
  *a1 = &unk_1E99774E0;
  a1[1] = 0;
  sub_1D5306824(a1 + 3, a2, *a3, a4, a5, *a6);
  return a1;
}

void sub_1D53067B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53067CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99774E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53067E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99774E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5306814(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1D5306824(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4, _OWORD *a5, char a6)
{
  uint64_t v8;
  char *v9;
  int v10;
  void **v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int16 v22;

  v8 = sub_1D530B330((uint64_t)a1, a2, a3, a4, a5);
  v9 = 0;
  v10 = 0;
  *(_QWORD *)(v8 + 192) = 0;
  *(_QWORD *)(v8 + 200) = 0;
  *(_DWORD *)(v8 + 216) = 0;
  *(_QWORD *)(v8 + 208) = 0;
  *(_WORD *)(v8 + 220) = 1;
  *(_QWORD *)v8 = &off_1E998BBA0;
  v11 = (void **)(v8 + 288);
  *(_QWORD *)(v8 + 296) = 0;
  *(_QWORD *)(v8 + 304) = 0;
  *(_QWORD *)(v8 + 288) = 0;
  v12 = (_QWORD *)(v8 + 304);
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  *(_OWORD *)(v8 + 256) = 0u;
  *(_QWORD *)(v8 + 272) = 0;
  *(_BYTE *)(v8 + 312) = a6;
  *(_BYTE *)(v8 + 313) = 0;
  do
  {
    if ((unint64_t)v9 >= *v12)
    {
      v14 = (char *)*v11;
      v15 = v9 - (_BYTE *)*v11;
      if (v15 <= -3)
        sub_1D5282B8C();
      v16 = v15 >> 1;
      v17 = *v12 - (_QWORD)v14;
      if (v17 <= (v15 >> 1) + 1)
        v18 = v16 + 1;
      else
        v18 = *v12 - (_QWORD)v14;
      if (v17 >= 0x7FFFFFFFFFFFFFFELL)
        v19 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
      {
        v20 = (char *)sub_1D52854A0((uint64_t)v12, v19);
        v14 = (char *)a1[36];
        v9 = (char *)a1[37];
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[2 * v16];
      *(_WORD *)v21 = v10;
      v13 = v21 + 2;
      while (v9 != v14)
      {
        v22 = *((_WORD *)v9 - 1);
        v9 -= 2;
        *((_WORD *)v21 - 1) = v22;
        v21 -= 2;
      }
      a1[36] = v21;
      a1[37] = v13;
      a1[38] = &v20[2 * v19];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_WORD *)v9 = v10;
      v13 = v9 + 2;
    }
    a1[37] = v13;
    ++v10;
    v9 = v13;
  }
  while (v10 != 0x10000);
  return a1;
}

void sub_1D5306974(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;
  void *v6;

  v4 = *v2;
  if (*v2)
  {
    v1[37] = v4;
    operator delete(v4);
  }
  v5 = (void *)v1[32];
  if (v5)
  {
    v1[33] = v5;
    operator delete(v5);
  }
  v6 = (void *)v1[29];
  if (v6)
  {
    v1[30] = v6;
    operator delete(v6);
  }
  sub_1D53069BC(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53069BC(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E998DB60;
  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  return sub_1D5282F0C(a1);
}

void sub_1D53069FC(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, _OWORD *a5@<X5>, char *a6@<X6>, __int128 *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;

  v16 = operator new(0x178uLL);
  sub_1D5306AA4(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  sub_1D5285658((uint64_t)a8, v16 + 4, (uint64_t)(v16 + 3));
}

void sub_1D5306A90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5306AA4(_QWORD *a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _QWORD *a5, _OWORD *a6, char *a7, __int128 *a8)
{
  a1[2] = 0;
  *a1 = &unk_1E9977530;
  a1[1] = 0;
  sub_1D5306B48((uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1D5306ADC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5306AF0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5306B04(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977530;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5306B38(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5306B48(uint64_t a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _QWORD *a5, _OWORD *a6, char *a7, __int128 *a8)
{
  unint64_t v9;
  char v10;
  __int128 v12;
  uint64_t v13;
  void **v14;

  v9 = *a3;
  v10 = *a7;
  v12 = *a8;
  v13 = *((_QWORD *)a8 + 2);
  *((_QWORD *)a8 + 1) = 0;
  *((_QWORD *)a8 + 2) = 0;
  *(_QWORD *)a8 = 0;
  sub_1D5306BC0(a1, a2, v9, a4, a5, a6, v10, (_QWORD **)&v12);
  v14 = (void **)&v12;
  sub_1D5282E44(&v14);
  return a1;
}

void sub_1D5306BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1D5282E44((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5306BC0(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4, _QWORD *a5, _OWORD *a6, char a7, _QWORD **a8)
{
  uint64_t v12;

  v12 = sub_1D530B330(a1, a2, a3, a5, a6);
  *(_QWORD *)(v12 + 192) = 0;
  *(_QWORD *)(v12 + 200) = 0;
  *(_DWORD *)(v12 + 216) = 0;
  *(_QWORD *)(v12 + 208) = 0;
  *(_WORD *)(v12 + 220) = 1;
  *(_QWORD *)v12 = off_1E998BD08;
  *(_OWORD *)(v12 + 232) = 0u;
  *(_BYTE *)(v12 + 222) = a7;
  *(_OWORD *)(v12 + 248) = 0u;
  *(_OWORD *)(v12 + 264) = 0u;
  *(_QWORD *)(a1 + 280) = *a4;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_WORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  sub_1D5284254((char *)(v12 + 328), *a8, a8[1], ((char *)a8[1] - (char *)*a8) >> 4);
  return a1;
}

void sub_1D5306C74(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;

  v6 = *v4;
  if (*v4)
  {
    v1[37] = v6;
    operator delete(v6);
  }
  sub_1D5444398(v3, v2, (uint64_t)v1);
  sub_1D53069BC(v1);
  _Unwind_Resume(a1);
}

void sub_1D5306CA8(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X8>)
{
  _QWORD *v14;

  v14 = operator new(0x11C0uLL);
  sub_1D5306D40(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  sub_1D5285658((uint64_t)a7, v14 + 4, (uint64_t)(v14 + 3));
}

void sub_1D5306D2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5306D40(_QWORD *a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5, uint64_t a6, uint64_t a7)
{
  a1[2] = 0;
  *a1 = &unk_1E9977580;
  a1[1] = 0;
  sub_1D5306DE4((uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7);
  return a1;
}

void sub_1D5306D78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5306D8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5306DA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5306DD4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5306DE4(uint64_t a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5, uint64_t a6, uint64_t a7)
{
  unint64_t v8;
  void *__p[2];
  uint64_t v11;
  void *v12[2];
  uint64_t v13;

  v8 = *a3;
  *(_OWORD *)v12 = *(_OWORD *)a6;
  v13 = *(_QWORD *)(a6 + 16);
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)a6 = 0;
  *(_OWORD *)__p = *(_OWORD *)a7;
  v11 = *(_QWORD *)(a7 + 16);
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  sub_1D5306E90(a1, a2, v8, a4, a5, (__int128 *)v12, (__int128 *)__p);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  return a1;
}

void sub_1D5306E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1D54443E0((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5306E90(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4, _OWORD *a5, __int128 *a6, __int128 *a7)
{
  uint64_t v10;
  __int128 v11;
  _BYTE *v12;
  __int128 v13;

  v10 = sub_1D530B330(a1, a2, a3, a4, a5);
  *(_QWORD *)v10 = &off_1E998DC78;
  *(_WORD *)(v10 + 248) = 0;
  *(_QWORD *)(v10 + 328) = 0;
  *(_DWORD *)(v10 + 336) = 0;
  *(_OWORD *)(v10 + 188) = 0u;
  *(_QWORD *)(v10 + 202) = 0;
  *(_OWORD *)(v10 + 304) = 0u;
  *(_QWORD *)(v10 + 318) = 0;
  *(_OWORD *)(v10 + 344) = 0u;
  *(_OWORD *)(v10 + 4456) = 0u;
  if (*((char *)a6 + 23) < 0)
  {
    sub_1D5290130((_BYTE *)(v10 + 4472), *(void **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v11 = *a6;
    *(_QWORD *)(v10 + 4488) = *((_QWORD *)a6 + 2);
    *(_OWORD *)(v10 + 4472) = v11;
  }
  v12 = (_BYTE *)(a1 + 4496);
  if (*((char *)a7 + 23) < 0)
  {
    sub_1D5290130(v12, *(void **)a7, *((_QWORD *)a7 + 1));
  }
  else
  {
    v13 = *a7;
    *(_QWORD *)(a1 + 4512) = *((_QWORD *)a7 + 2);
    *(_OWORD *)v12 = v13;
  }
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 258) = 0;
  *(_QWORD *)(a1 + 250) = 0;
  *(_DWORD *)(a1 + 266) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  bzero((void *)(a1 + 360), 0x1000uLL);
  return a1;
}

void sub_1D5306F94(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 4495) < 0)
    operator delete(*v2);
  sub_1D5282F0C((_QWORD *)v1);
  _Unwind_Resume(a1);
}

void sub_1D5306FC4(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, _OWORD *a5@<X5>, int *a6@<X6>, int *a7@<X7>, _QWORD *a8@<X8>, char *a9)
{
  _QWORD *v17;

  v17 = operator new(0x148uLL);
  sub_1D530707C((uint64_t)v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  sub_1D5285658((uint64_t)a8, v17 + 4, (uint64_t)(v17 + 3));
}

void sub_1D5307068(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530707C(uint64_t a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _QWORD *a5, _OWORD *a6, int *a7, int *a8, char *a9)
{
  int v11;
  int v12;
  char v13;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E99775D0;
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *a7;
  v12 = *a8;
  v13 = *a9;
  sub_1D530B330(a1 + 24, a2, *a3, a5, a6);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_WORD *)(a1 + 244) = 1;
  *(_QWORD *)(a1 + 24) = &off_1E998DDE8;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_QWORD *)(a1 + 304) = *a4;
  *(_DWORD *)(a1 + 312) = v11;
  *(_DWORD *)(a1 + 316) = v12;
  *(_BYTE *)(a1 + 320) = v13;
  return a1;
}

void sub_1D5307128(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D530713C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99775D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5307150(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99775D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5307184(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1D5307194(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, _OWORD *a5@<X5>, __int128 *a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;

  v16 = operator new(0x768uLL);
  sub_1D530723C(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  sub_1D5285658((uint64_t)a8, v16 + 4, (uint64_t)(v16 + 3));
}

void sub_1D5307228(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D530723C(_QWORD *a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _QWORD *a5, _OWORD *a6, __int128 *a7, uint64_t a8)
{
  a1[2] = 0;
  *a1 = &unk_1E9977620;
  a1[1] = 0;
  sub_1D53072E0((uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1D5307274(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5307288(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D530729C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53072D0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D53072E0(uint64_t a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _QWORD *a5, _OWORD *a6, __int128 *a7, uint64_t a8)
{
  unint64_t v13;
  void *__p;
  void *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  void **v20;

  v13 = *a3;
  v18 = *a7;
  v19 = *((_QWORD *)a7 + 2);
  *((_QWORD *)a7 + 1) = 0;
  *((_QWORD *)a7 + 2) = 0;
  *(_QWORD *)a7 = 0;
  v16 = 0;
  v17 = 0;
  __p = 0;
  sub_1D5282C70(&__p, *(const void **)a8, *(_QWORD *)(a8 + 8), (uint64_t)(*(_QWORD *)(a8 + 8) - *(_QWORD *)a8) >> 3);
  sub_1D53073D8(a1, a2, v13, a4, a5, a6, (_QWORD **)&v18, (uint64_t)&__p);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  v20 = (void **)&v18;
  sub_1D5282E44(&v20);
  return a1;
}

void sub_1D53073A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  if (__p)
    operator delete(__p);
  a16 = &a13;
  sub_1D5282E44((void ***)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53073D8(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4, _QWORD *a5, _OWORD *a6, _QWORD **a7, uint64_t a8)
{
  uint64_t v12;

  v12 = sub_1D530B330(a1, a2, a3, a5, a6);
  *(_QWORD *)(v12 + 192) = 0;
  *(_QWORD *)(v12 + 200) = 0;
  *(_DWORD *)(v12 + 216) = 0;
  *(_QWORD *)(v12 + 208) = 0;
  *(_WORD *)(v12 + 220) = 1;
  *(_QWORD *)v12 = off_1E99726A0;
  *(_OWORD *)(v12 + 232) = 0u;
  *(_OWORD *)(v12 + 248) = 0u;
  *(_OWORD *)(v12 + 264) = 0u;
  *(_QWORD *)(v12 + 280) = *a4;
  *(_QWORD *)(v12 + 288) = 0;
  *(_QWORD *)(v12 + 296) = 0;
  *(_QWORD *)(v12 + 304) = 0;
  sub_1D5284254((char *)(v12 + 288), *a7, a7[1], ((char *)a7[1] - (char *)*a7) >> 4);
  *(_QWORD *)(a1 + 1864) = 0;
  *(_OWORD *)(a1 + 1848) = 0u;
  sub_1D5282C70((_QWORD *)(a1 + 1848), *(const void **)a8, *(_QWORD *)(a8 + 8), (uint64_t)(*(_QWORD *)(a8 + 8) - *(_QWORD *)a8) >> 3);
  return a1;
}

void sub_1D53074A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  void **v3;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a2);
  sub_1D5282E44((void ***)va);
  v5 = (void *)v2[32];
  if (v5)
  {
    v2[33] = v5;
    operator delete(v5);
  }
  v6 = *v3;
  if (*v3)
  {
    v2[30] = v6;
    operator delete(v6);
  }
  sub_1D53069BC(v2);
  _Unwind_Resume(a1);
}

void sub_1D53074EC(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, _OWORD *a5@<X5>, char *a6@<X6>, __int128 *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;

  v16 = operator new(0x60170uLL);
  sub_1D5307598(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  sub_1D5285658((uint64_t)a8, v16 + 4, (uint64_t)(v16 + 3));
}

void sub_1D5307584(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5307598(_QWORD *a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _QWORD *a5, _OWORD *a6, char *a7, __int128 *a8)
{
  a1[2] = 0;
  *a1 = &unk_1E9977670;
  a1[1] = 0;
  sub_1D530763C((uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1D53075D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53075E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53075F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D530762C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D530763C(uint64_t a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _QWORD *a5, _OWORD *a6, char *a7, __int128 *a8)
{
  unint64_t v9;
  char v10;
  __int128 v12;
  uint64_t v13;
  void **v14;

  v9 = *a3;
  v10 = *a7;
  v12 = *a8;
  v13 = *((_QWORD *)a8 + 2);
  *((_QWORD *)a8 + 1) = 0;
  *((_QWORD *)a8 + 2) = 0;
  *(_QWORD *)a8 = 0;
  sub_1D53076B4(a1, a2, v9, a4, a5, a6, v10, (_QWORD **)&v12);
  v14 = (void **)&v12;
  sub_1D5282E44(&v14);
  return a1;
}

void sub_1D530769C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1D5282E44((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53076B4(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4, _QWORD *a5, _OWORD *a6, char a7, _QWORD **a8)
{
  uint64_t v12;
  uint64_t v13;

  v12 = a1 + 393504;
  v13 = sub_1D530B330(a1, a2, a3, a5, a6);
  *(_QWORD *)(v13 + 192) = 0;
  *(_QWORD *)(v13 + 200) = 0;
  *(_DWORD *)(v13 + 216) = 0;
  *(_QWORD *)(v13 + 208) = 0;
  *(_WORD *)(v13 + 220) = 1;
  *(_QWORD *)v13 = off_1E996F8E0;
  *(_BYTE *)(v13 + 222) = a7;
  *(_OWORD *)(v13 + 232) = 0u;
  *(_OWORD *)(v13 + 248) = 0u;
  *(_OWORD *)(v13 + 264) = 0u;
  *(_QWORD *)(v13 + 280) = *a4;
  *(_WORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_BYTE *)(v12 + 16) = 0;
  *(_QWORD *)(v13 + 393536) = 0;
  *(_QWORD *)(v13 + 393544) = 0;
  *(_QWORD *)(v13 + 393528) = 0;
  sub_1D5284254((char *)(v13 + 393528), *a8, a8[1], ((char *)a8[1] - (char *)*a8) >> 4);
  *(_QWORD *)(v12 + 48) = (int)sub_1D536BD60();
  return a1;
}

void sub_1D530778C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  _QWORD *v10;
  void **v11;
  void **v12;
  void **v13;
  void *v15;
  void *v16;

  v13 = v11;
  a10 = v13;
  sub_1D5282E44(&a10);
  v15 = (void *)v10[32];
  if (v15)
  {
    v10[33] = v15;
    operator delete(v15);
  }
  v16 = *v12;
  if (*v12)
  {
    v10[30] = v16;
    operator delete(v16);
  }
  sub_1D53069BC(v10);
  _Unwind_Resume(a1);
}

void sub_1D53077D8(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, _OWORD *a5@<X5>, __int128 *a6@<X6>, int *a7@<X7>, _QWORD *a8@<X8>, int *a9)
{
  _QWORD *v17;

  v17 = operator new(0x20168uLL);
  sub_1D5307894(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  sub_1D5285658((uint64_t)a8, v17 + 4, (uint64_t)(v17 + 3));
}

void sub_1D5307880(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5307894(_QWORD *a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _QWORD *a5, _OWORD *a6, __int128 *a7, int *a8, int *a9)
{
  a1[2] = 0;
  *a1 = &unk_1E99776C0;
  a1[1] = 0;
  sub_1D5307948((uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9);
  return a1;
}

void sub_1D53078DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53078F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99776C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5307904(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99776C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5307938(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5307948(uint64_t a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _QWORD *a5, _OWORD *a6, __int128 *a7, int *a8, int *a9)
{
  unint64_t v10;
  __int128 v12;
  uint64_t v13;
  void **v14;

  v10 = *a3;
  v12 = *a7;
  v13 = *((_QWORD *)a7 + 2);
  *((_QWORD *)a7 + 1) = 0;
  *((_QWORD *)a7 + 2) = 0;
  *(_QWORD *)a7 = 0;
  sub_1D53079CC(a1, a2, v10, a4, a5, a6, (_QWORD **)&v12, *a8, *a9);
  v14 = (void **)&v12;
  sub_1D5282E44(&v14);
  return a1;
}

void sub_1D53079B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1;
  sub_1D5282E44((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_1D53079CC(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4, _QWORD *a5, _OWORD *a6, _QWORD **a7, int a8, int a9)
{
  uint64_t v13;
  uint64_t v14;

  v13 = a1 + 131360;
  v14 = sub_1D530B330(a1, a2, a3, a5, a6);
  *(_QWORD *)(v14 + 192) = 0;
  *(_QWORD *)(v14 + 200) = 0;
  *(_DWORD *)(v14 + 216) = 0;
  *(_QWORD *)(v14 + 208) = 0;
  *(_WORD *)(v14 + 220) = 1;
  *(_QWORD *)v14 = off_1E99914D0;
  *(_OWORD *)(v14 + 232) = 0u;
  *(_OWORD *)(v14 + 248) = 0u;
  *(_OWORD *)(v14 + 264) = 0u;
  *(_QWORD *)(v14 + 280) = *a4;
  *(_WORD *)v13 = 0;
  *(_OWORD *)(v14 + 131368) = 0u;
  *(_OWORD *)(v14 + 131384) = 0u;
  sub_1D5284254((char *)(v14 + 131376), *a7, a7[1], ((char *)a7[1] - (char *)*a7) >> 4);
  *(_DWORD *)(v13 + 40) = a8;
  *(_DWORD *)(v13 + 44) = a9;
  return a1;
}

void sub_1D5307A8C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[32];
  if (v4)
  {
    v1[33] = v4;
    operator delete(v4);
  }
  v5 = *v2;
  if (*v2)
  {
    v1[30] = v5;
    operator delete(v5);
  }
  sub_1D53069BC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5307AC0(uint64_t a1, void **a2)
{
  void **v2;
  uint64_t v4;

  v2 = *(void ***)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if ((sub_1D52941C0(a2, v2 + 4) & 0x80) == 0)
      {
        if ((sub_1D52941C0(v2 + 4, a2) & 0x80) == 0)
          return v4;
        ++v2;
      }
      v2 = (void **)*v2;
    }
    while (v2);
  }
  return 0;
}

id sub_1D5307B28(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[11];
  _QWORD v43[2];

  v43[1] = *MEMORY[0x1E0C80C00];
  v5 = *MEMORY[0x1E0CBD388];
  v34 = *MEMORY[0x1E0CBD368];
  v35 = v5;
  v42[0] = MEMORY[0x1E0C9AAB0];
  v42[1] = CFSTR("com.hasselblad.fff-raw-image");
  v6 = *MEMORY[0x1E0CBD380];
  v36 = *MEMORY[0x1E0CBD348];
  v42[2] = CFSTR(".fff.");
  v42[3] = &unk_1E99CB040;
  v42[4] = &unk_1E99CB058;
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], a2, (uint64_t)sub_1D52807D4, a4, a5, v34, v35, v36, v6, *MEMORY[0x1E0CBD370], *MEMORY[0x1E0CBD378]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v42[5] = v7;
  v37 = *MEMORY[0x1E0CBD330];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v8, (uint64_t)sub_1D5307DDC, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v42[6] = v11;
  v38 = *MEMORY[0x1E0CBD350];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v12, (uint64_t)sub_1D5307DE8, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v42[7] = v15;
  v39 = *MEMORY[0x1E0CBD338];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v16, (uint64_t)sub_1D52E8DA4, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v42[8] = v19;
  v40 = *MEMORY[0x1E0CBD358];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v20, (uint64_t)sub_1D5307DF4, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v42[9] = v23;
  v41 = *MEMORY[0x1E0CBD360];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v24, (uint64_t)sub_1D5307E00, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v42[10] = v27;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v28, (uint64_t)v42, (uint64_t)&v34, 11);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v43[0] = v29;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v30, (uint64_t)v43, 1, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  return v32;
}

void sub_1D5307D7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1D5307DDC(const void *a1, uint64_t a2, uint64_t a3)
{
  sub_1D52E7A20(a1, a2, a3, &unk_1E9977700);
}

uint64_t sub_1D5307DE8(os_signpost_id_t a1)
{
  return sub_1D52E8C40(a1);
}

uint64_t sub_1D5307DF4(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1D52E7438(a1, a2, a3, &unk_1E9977700);
}

uint64_t sub_1D5307E00(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1D52E9A7C(a1, a2, a3, &unk_1E9977700);
}

void sub_1D5307E0C(uint64_t *a1@<X1>, char a2@<W2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X8>)
{
  __int128 v8;
  id v9;
  id v10;
  char v11;

  v11 = a2;
  v10 = a3;
  v9 = a4;
  sub_1D5309308(a1, &v11, &v10, &v9, &v8);
  *a5 = v8;

}

void sub_1D5307E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D5307EA4(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  BOOL v7;

  v2 = (uint64_t *)*((unsigned __int8 *)a2 + 23);
  v3 = (char)v2;
  if ((char)v2 < 0)
    v2 = a2[1];
  if (v2 == (uint64_t *)10
    && (v3 >= 0 ? (v4 = (uint64_t *)a2) : (v4 = *a2),
        (v5 = *v4, v6 = *((unsigned __int16 *)v4 + 4), v5 == 0x6E49656372756F53) ? (v7 = v6 == 28518) : (v7 = 0),
        v7 && *(_QWORD *)(a1 + 1200)))
  {
    return (unsigned __int16)sub_1D53348C4(*(_QWORD *)(a1 + 1200));
  }
  else
  {
    return sub_1D529119C((void **)a1);
  }
}

double sub_1D5307F20(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;

  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 10
    && (v4 >= 0 ? (v5 = a2) : (v5 = *(_QWORD *)a2),
        (v6 = *(_QWORD *)v5, v7 = *(unsigned __int16 *)(v5 + 8), v6 == 0x6E49656372756F53)
      ? (v8 = v7 == 28518)
      : (v8 = 0),
        v8 && *(_QWORD *)(a1 + 1200)))
  {
    return sub_1D533496C(*(_QWORD *)(a1 + 1200));
  }
  else
  {
    return sub_1D52912CC((void **)a1, a2, a3);
  }
}

void sub_1D5307F84(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  unsigned __int8 *v4;
  int v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  int v16;
  void **v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v24;
  _BOOL4 v25;
  uint64_t v26;
  void *v27;
  void *v28;
  int v29;
  void **v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  size_t v40;
  void *v41;
  unsigned int v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *exception;
  __int128 v58;
  unint64_t v59;
  __int128 v60;
  uint64_t v61;
  void *__p[2];
  uint64_t v63;

  v4 = (unsigned __int8 *)a2;
  sub_1D52ABE88((uint64_t **)a1, a2, a3);
  v6 = *a3;
  if (v6 == 46275)
  {
    if (a3[1] != 1)
      return;
    sub_1D52850A0(__p, "IFD0");
    v26 = v4[23];
    if ((v26 & 0x80u) == 0)
      v27 = (void *)v4[23];
    else
      v27 = (void *)*((_QWORD *)v4 + 1);
    v28 = (void *)HIBYTE(v63);
    v29 = SHIBYTE(v63);
    if (v63 < 0)
      v28 = __p[1];
    if (v27 == v28)
    {
      if (v63 >= 0)
        v30 = __p;
      else
        v30 = (void **)__p[0];
      if ((v26 & 0x80) != 0)
      {
        v35 = memcmp(*(const void **)v4, v30, *((_QWORD *)v4 + 1)) != 0;
        if ((v29 & 0x80000000) == 0)
          goto LABEL_59;
      }
      else if (v4[23])
      {
        v31 = v26 - 1;
        do
        {
          v33 = *v4++;
          v32 = v33;
          v34 = *(unsigned __int8 *)v30;
          v30 = (void **)((char *)v30 + 1);
          v35 = v32 != v34;
        }
        while (v32 == v34 && v31-- != 0);
        if ((SHIBYTE(v63) & 0x80000000) == 0)
        {
LABEL_59:
          if (v35)
            return;
          goto LABEL_66;
        }
      }
      else
      {
        v35 = 0;
        if ((SHIBYTE(v63) & 0x80000000) == 0)
          goto LABEL_59;
      }
    }
    else
    {
      v35 = 1;
      if ((SHIBYTE(v63) & 0x80000000) == 0)
        goto LABEL_59;
    }
    operator delete(__p[0]);
    if (v35)
      return;
LABEL_66:
    *(_QWORD *)(a1 + 1184) = *((unsigned int *)a3 + 2);
    *(_QWORD *)(a1 + 1192) = *((unsigned int *)a3 + 1);
    *(_BYTE *)(a1 + 1216) = 0;
    return;
  }
  if (v6 != 46279)
  {
    if (v6 == 50714 && a3[1] - 3 <= 2)
    {
      v7 = *((_DWORD *)a3 + 1);
      if (v7 == 1 || v7 == 4)
      {
        sub_1D52917E4(a1, &v60);
        sub_1D52A75D8((uint64_t)a3, (uint64_t *)&v60, __p);
        v8 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
        if (*((_QWORD *)&v60 + 1))
        {
          v9 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v11 = __p[0];
        if (*((_DWORD *)a3 + 1) == ((char *)__p[1] - (char *)__p[0]) >> 3)
        {
          if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)8)
          {
            sub_1D528F9B4(&v60, 4uLL, (_QWORD *)__p[0]);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            *(_OWORD *)__p = v60;
            v63 = v61;
          }
          *(_QWORD *)&v60 = v4;
          v12 = (char *)(sub_1D52B3E7C((uint64_t **)(a1 + 264), (void **)v4, (uint64_t)&unk_1D544A5C4, (__int128 **)&v60)
                       + 7);
          v11 = __p[0];
          if (v12 != (char *)__p)
          {
            sub_1D528FA34(v12, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
            v11 = __p[0];
          }
        }
        if (v11)
        {
          __p[1] = v11;
          operator delete(v11);
        }
      }
    }
    return;
  }
  if (a3[1] != 1)
    return;
  sub_1D52850A0(__p, "IFD0");
  v13 = v4[23];
  if ((v13 & 0x80u) == 0)
    v14 = (void *)v4[23];
  else
    v14 = (void *)*((_QWORD *)v4 + 1);
  v15 = (void *)HIBYTE(v63);
  v16 = SHIBYTE(v63);
  if (v63 < 0)
    v15 = __p[1];
  if (v14 != v15)
  {
    v25 = 0;
    if ((SHIBYTE(v63) & 0x80000000) == 0)
      goto LABEL_69;
    goto LABEL_62;
  }
  if (v63 >= 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  if ((v13 & 0x80) != 0)
  {
    v25 = memcmp(*(const void **)v4, v17, *((_QWORD *)v4 + 1)) == 0;
    goto LABEL_68;
  }
  if (v4[23])
  {
    v18 = v13 - 1;
    do
    {
      v20 = *v4++;
      v19 = v20;
      v22 = *(unsigned __int8 *)v17;
      v17 = (void **)((char *)v17 + 1);
      v21 = v22;
      v24 = v18-- != 0;
      v25 = v19 == v21;
    }
    while (v19 == v21 && v24);
LABEL_68:
    if ((v16 & 0x80000000) == 0)
      goto LABEL_69;
    goto LABEL_62;
  }
  v25 = 1;
  if ((SHIBYTE(v63) & 0x80000000) == 0)
  {
LABEL_69:
    if (!v25)
      return;
    goto LABEL_70;
  }
LABEL_62:
  operator delete(__p[0]);
  if (!v25)
    return;
LABEL_70:
  sub_1D52917E4(a1, &v60);
  LODWORD(v59) = *((_DWORD *)a3 + 2);
  sub_1D5282F74((int *)&v58, (int *)&v59);
  sub_1D5285164((uint64_t *)__p, (uint64_t *)&v60, (uint64_t)&v58, 0);
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = *((unsigned int *)a3 + 1);
  v41 = (void *)operator new[]();
  bzero(v41, v40);
  v59 = 0;
  sub_1D52917E4(a1, &v60);
  v42 = (*(uint64_t (**)(_QWORD, void *, _QWORD))(*(_QWORD *)v60 + 32))(v60, v41, *((unsigned int *)a3 + 1));
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v59 = v42;
  if (v42 != *((_DWORD *)a3 + 1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D528304C(&v58, &v59);
  sub_1D52843AC((uint64_t)v41, (uint64_t)&v58, 0, &v60);
  v46 = v60;
  sub_1D52917E4(a1, &v58);
  v47 = sub_1D52845E4(v58);
  sub_1D52845EC(v46, v47);
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  sub_1D5334708((uint64_t *)&v60, &v58);
  sub_1D5292548(a1 + 1200, &v58);
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  MEMORY[0x1D8271AC4](v41, 0x1000C8077774924);
  sub_1D5285200((uint64_t *)__p);
}

void sub_1D530851C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  sub_1D5282EB4((uint64_t)&a13);
  MEMORY[0x1D8271AC4](v18, 0x1000C8077774924);
  sub_1D5285200((uint64_t *)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53085C4(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  if (!*(_BYTE *)(a1 + 1216))
    return *(_QWORD *)(a1 + 1184);
  sub_1D52B0DE4(a1, 0, __p);
  v2 = sub_1D52B0BBC(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D530862C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D5308648(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  if (!*(_BYTE *)(a1 + 1216))
    return *(_QWORD *)(a1 + 1192);
  sub_1D52B0DE4(a1, 0, __p);
  v2 = sub_1D52B0C2C(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D53086B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1D53086CC(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 1200);
  if (result)
    return sub_1D53347A4(result);
  return result;
}

uint64_t sub_1D53086DC(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  (*(uint64_t (**)(uint64_t *))(*a1 + 440))(a1);
  result = a1[150];
  if (result)
  {
    v3 = (unsigned __int16)sub_1D5334804(result);
    v4 = (unsigned __int16)sub_1D533480C(a1[150]);
    sub_1D53348B4(a1[150]);
    sub_1D53348BC(a1[150]);
    return v3 | (v4 << 32);
  }
  return result;
}

_WORD *sub_1D5308768(_QWORD *a1)
{
  _WORD *result;

  (*(void (**)(_QWORD *))(*a1 + 440))(a1);
  result = (_WORD *)a1[150];
  if (result)
    return (_WORD *)sub_1D53347B4(result);
  return result;
}

void sub_1D53087A0(_QWORD *a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void **a5@<X8>)
{
  unint64_t v10;
  void **v11;
  void *v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v17;

  (*(void (**)(void **__return_ptr))(*a1 + 392))(__p);
  v10 = v17;
  if ((v17 & 0x80u) != 0)
    v10 = (unint64_t)__p[1];
  if (v10 == 10
    && ((v17 & 0x80u) == 0 ? (v11 = __p) : (v11 = (void **)__p[0]),
        (v12 = *v11, v13 = *((unsigned __int16 *)v11 + 4), v12 == (void *)0x6E49656372756F53)
      ? (v14 = v13 == 28518)
      : (v14 = 0),
        v14))
  {
    v15 = a1[150];
    if (v15)
    {
      sub_1D5334AA4(v15, a5);
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
    }
  }
  else
  {
    sub_1D5291CB0((uint64_t)a1, a2, a3, a4, a5);
  }
  if ((char)v17 < 0)
    operator delete(__p[0]);
}

void sub_1D5308890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D53088AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD **)(a1 + 1200);
  if (result)
  {
    sub_1D53349D8((uint64_t)result);
    v5 = v4;
    return sub_1D528F9B4(a2, 4uLL, &v5);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

unsigned __int16 *sub_1D53088FC(uint64_t a1, _QWORD *a2)
{
  unsigned __int16 *result;
  BOOL v3;

  result = *(unsigned __int16 **)(a1 + 1200);
  if (result)
    v3 = *a2 == 0;
  else
    v3 = 1;
  if (!v3)
    return sub_1D5334C40((uint64_t)result, a2);
  return result;
}

void sub_1D5308918(uint64_t a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  void *v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned __int16 v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unsigned __int16 v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  double v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  long double v47;
  double v48;
  double v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void *v76;
  double v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  void *__p[2];
  char v97;

  sub_1D52A8080((void **)a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 400))(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (*(_QWORD *)(a1 + 1200))
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    sub_1D52E1FDC(v2, (void *)*MEMORY[0x1E0CBD090], 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    sub_1D52E1FDC(v3, (void *)*MEMORY[0x1E0CBCB50], 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = *MEMORY[0x1E0CBD0C0];
    objc_msgSend_objectForKeyedSubscript_(v5, v8, *MEMORY[0x1E0CBD0C0], v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v11)
    {
      v15 = (void *)MEMORY[0x1E0CB37E8];
      v16 = sub_1D53348D4(*(_QWORD *)(a1 + 1200));
      objc_msgSend_numberWithUnsignedShort_(v15, v17, v16, v18, v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v5, v21, (uint64_t)v20, v7, v22);

    }
    v23 = *MEMORY[0x1E0CBCBC8];
    objc_msgSend_objectForKeyedSubscript_(v6, v12, *MEMORY[0x1E0CBCBC8], v13, v14);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v24)
    {
      v25 = (void *)MEMORY[0x1E0CB37E8];
      v26 = sub_1D53348C4(*(_QWORD *)(a1 + 1200));
      objc_msgSend_numberWithUnsignedShort_(v25, v27, v26, v28, v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v6, v31, (uint64_t)v30, v23, v32);

    }
    if (sub_1D533496C(*(_QWORD *)(a1 + 1200)) > 0.0)
    {
      v36 = *MEMORY[0x1E0CBCB78];
      objc_msgSend_objectForKeyedSubscript_(v6, v33, *MEMORY[0x1E0CBCB78], v34, v35);
      v37 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v37)
      {
        v38 = (void *)MEMORY[0x1E0CB37E8];
        v39 = sub_1D533496C(*(_QWORD *)(a1 + 1200));
        objc_msgSend_numberWithDouble_(v38, v40, v41, v42, v43, v39);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v6, v45, (uint64_t)v44, v36, v46);

      }
    }
    v47 = sub_1D5334990(*(_QWORD *)(a1 + 1200));
    v48 = v47;
    if (v47 > 0.0)
    {
      v49 = log2(v47);
      v50 = *MEMORY[0x1E0CBCB80];
      objc_msgSend_objectForKeyedSubscript_(v6, v51, *MEMORY[0x1E0CBCB80], v52, v53);
      v54 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v54)
      {
        objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v55, v56, v57, v58, v48);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v6, v60, (uint64_t)v59, v50, v61);

      }
      v62 = *MEMORY[0x1E0CBCA20];
      objc_msgSend_objectForKeyedSubscript_(v6, v55, *MEMORY[0x1E0CBCA20], v57, v58);
      v63 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v63)
      {
        objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v64, v65, v66, v67, v49 + v49);
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v6, v69, (uint64_t)v68, v62, v70);

      }
    }
    if (sub_1D53349B4(*(_QWORD *)(a1 + 1200)) > 0.0)
    {
      v74 = *MEMORY[0x1E0CBCBA0];
      objc_msgSend_objectForKeyedSubscript_(v6, v71, *MEMORY[0x1E0CBCBA0], v72, v73);
      v75 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v75)
      {
        v76 = (void *)MEMORY[0x1E0CB37E8];
        v77 = sub_1D53349B4(*(_QWORD *)(a1 + 1200));
        objc_msgSend_numberWithDouble_(v76, v78, v79, v80, v81, v77);
        v82 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v6, v83, (uint64_t)v82, v74, v84);

      }
    }
    sub_1D5334AE8(*(unsigned __int16 **)(a1 + 1200), __p);
    v85 = *MEMORY[0x1E0CBD088];
    objc_msgSend_objectForKeyedSubscript_(v5, v86, *MEMORY[0x1E0CBD088], v87, v88);
    v89 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v89)
    {
      if (v97 >= 0)
        objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v90, (uint64_t)__p, v91, v92);
      else
        objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v90, (uint64_t)__p[0], v91, v92);
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v5, v94, (uint64_t)v93, v85, v95);

    }
    if (v97 < 0)
      operator delete(__p[0]);

  }
}

void sub_1D5308CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1D5308D2C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  void *__p[2];
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t *v46;
  char __str[16];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 1200);
  if (v3)
    LODWORD(v3) = sub_1D53348CC(v3);
  snprintf(__str, 0x10uLL, "%u", v3);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_1D52850A0(__p, "fff");
  v4 = a2[2];
  v5 = a2[1];
  if (v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a2) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a2) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v46 = a2 + 2;
    if (v10)
      v11 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v10);
    else
      v11 = 0;
    v12 = &v11[24 * v7];
    v42 = v11;
    v43 = v12;
    v45 = &v11[24 * v10];
    v13 = *(_OWORD *)__p;
    *((_QWORD *)v12 + 2) = v41;
    *(_OWORD *)v12 = v13;
    __p[1] = 0;
    v41 = 0;
    __p[0] = 0;
    v44 = v12 + 24;
    sub_1D5293D58(a2, &v42);
    v14 = a2[1];
    sub_1D5293F24((uint64_t)&v42);
    v15 = SHIBYTE(v41);
    a2[1] = v14;
    if (v15 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6 = *(_OWORD *)__p;
    *(_QWORD *)(v5 + 16) = v41;
    *(_OWORD *)v5 = v6;
    a2[1] = v5 + 24;
  }
  sub_1D52850A0(__p, "hasselblad");
  v17 = a2[1];
  v16 = a2[2];
  if (v17 >= v16)
  {
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a2) >> 3);
    v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a2) >> 3);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v20;
    v46 = a2 + 2;
    if (v22)
      v23 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v22);
    else
      v23 = 0;
    v24 = &v23[24 * v19];
    v42 = v23;
    v43 = v24;
    v45 = &v23[24 * v22];
    v25 = *(_OWORD *)__p;
    *((_QWORD *)v24 + 2) = v41;
    *(_OWORD *)v24 = v25;
    __p[1] = 0;
    v41 = 0;
    __p[0] = 0;
    v44 = v24 + 24;
    sub_1D5293D58(a2, &v42);
    v26 = a2[1];
    sub_1D5293F24((uint64_t)&v42);
    v27 = SHIBYTE(v41);
    a2[1] = v26;
    if (v27 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v18 = *(_OWORD *)__p;
    *(_QWORD *)(v17 + 16) = v41;
    *(_OWORD *)v17 = v18;
    a2[1] = v17 + 24;
  }
  sub_1D52850A0(__p, __str);
  v29 = a2[1];
  v28 = a2[2];
  if (v29 >= v28)
  {
    v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *a2) >> 3);
    v32 = v31 + 1;
    if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a2) >> 3);
    if (2 * v33 > v32)
      v32 = 2 * v33;
    if (v33 >= 0x555555555555555)
      v34 = 0xAAAAAAAAAAAAAAALL;
    else
      v34 = v32;
    v46 = a2 + 2;
    if (v34)
      v35 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v34);
    else
      v35 = 0;
    v36 = &v35[24 * v31];
    v42 = v35;
    v43 = v36;
    v45 = &v35[24 * v34];
    v37 = *(_OWORD *)__p;
    *((_QWORD *)v36 + 2) = v41;
    *(_OWORD *)v36 = v37;
    __p[1] = 0;
    v41 = 0;
    __p[0] = 0;
    v44 = v36 + 24;
    sub_1D5293D58(a2, &v42);
    v38 = a2[1];
    sub_1D5293F24((uint64_t)&v42);
    v39 = SHIBYTE(v41);
    a2[1] = v38;
    if (v39 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v30 = *(_OWORD *)__p;
    *(_QWORD *)(v29 + 16) = v41;
    *(_OWORD *)v29 = v30;
    a2[1] = v29 + 24;
  }
}

void sub_1D53090CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_1D5293F24((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  sub_1D5293CCC((void ***)&__p);
  _Unwind_Resume(a1);
}

id sub_1D5309124(uint64_t a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD v17[6];
  _QWORD v18[7];

  v18[6] = *MEMORY[0x1E0C80C00];
  sub_1D52A8CA4(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend_mutableCopy(v1, v2, v3, v4, v5);

  v17[0] = &unk_1E99CB070;
  v17[1] = &unk_1E99CB0B8;
  v18[0] = &unk_1E99D0A70;
  v18[1] = &unk_1E99D0A98;
  v17[2] = &unk_1E99CB0D0;
  v17[3] = &unk_1E99CB0E8;
  v18[2] = &unk_1E99D0AC0;
  v18[3] = &unk_1E99D0AE8;
  v17[4] = &unk_1E99CB100;
  v17[5] = &unk_1E99CB118;
  v18[4] = &unk_1E99D0B10;
  v18[5] = &unk_1E99D0B38;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v7, (uint64_t)v18, (uint64_t)v17, 6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addEntriesFromDictionary_(v6, v9, (uint64_t)v8, v10, v11);

  objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E0C99D80], v12, (uint64_t)v6, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

void sub_1D5309254(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1D530928C(_QWORD *a1)
{
  *a1 = off_1E9977730;
  sub_1D5282EB4((uint64_t)(a1 + 150));
  return sub_1D52B2190((uint64_t)a1);
}

void sub_1D53092C0(_QWORD *a1)
{
  *a1 = off_1E9977730;
  sub_1D5282EB4((uint64_t)(a1 + 150));
  sub_1D52B2190((uint64_t)a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D5309308(uint64_t *a1@<X1>, char *a2@<X2>, void **a3@<X3>, void **a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x4E0uLL);
  sub_1D5309388((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D5309374(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5309388(uint64_t a1, uint64_t *a2, char *a3, void **a4, void **a5)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E9977A70;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D52A7E98(a1 + 24, a2, *a3, *a4, *a5);
  *(_QWORD *)(a1 + 24) = off_1E9977730;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_BYTE *)(a1 + 1240) = 1;
  return a1;
}

void sub_1D53093F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5309404(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977A70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5309418(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977A70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D530944C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

id sub_1D530945C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[11];
  _QWORD v43[2];

  v43[1] = *MEMORY[0x1E0C80C00];
  v5 = *MEMORY[0x1E0CBD388];
  v34 = *MEMORY[0x1E0CBD368];
  v35 = v5;
  v42[0] = MEMORY[0x1E0C9AAB0];
  v42[1] = CFSTR("com.hasselblad.3fr-raw-image");
  v6 = *MEMORY[0x1E0CBD380];
  v36 = *MEMORY[0x1E0CBD348];
  v42[2] = CFSTR(".3fr.");
  v42[3] = &unk_1E99CB130;
  v42[4] = &unk_1E99CB148;
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], a2, (uint64_t)sub_1D528081C, a4, a5, v34, v35, v36, v6, *MEMORY[0x1E0CBD370], *MEMORY[0x1E0CBD378]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v42[5] = v7;
  v37 = *MEMORY[0x1E0CBD330];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v8, (uint64_t)sub_1D5309710, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v42[6] = v11;
  v38 = *MEMORY[0x1E0CBD350];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v12, (uint64_t)sub_1D530971C, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v42[7] = v15;
  v39 = *MEMORY[0x1E0CBD338];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v16, (uint64_t)sub_1D52E8DA4, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v42[8] = v19;
  v40 = *MEMORY[0x1E0CBD358];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v20, (uint64_t)sub_1D5309728, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v42[9] = v23;
  v41 = *MEMORY[0x1E0CBD360];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v24, (uint64_t)sub_1D5309734, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v42[10] = v27;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v28, (uint64_t)v42, (uint64_t)&v34, 11);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v43[0] = v29;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v30, (uint64_t)v43, 1, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  return v32;
}

void sub_1D53096B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1D5309710(const void *a1, uint64_t a2, uint64_t a3)
{
  sub_1D52E7A20(a1, a2, a3, &unk_1E9977AB0);
}

uint64_t sub_1D530971C(os_signpost_id_t a1)
{
  return sub_1D52E8C40(a1);
}

uint64_t sub_1D5309728(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1D52E7438(a1, a2, a3, &unk_1E9977AB0);
}

uint64_t sub_1D5309734(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1D52E9A7C(a1, a2, a3, &unk_1E9977AB0);
}

void sub_1D5309740(uint64_t *a1@<X1>, char a2@<W2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X8>)
{
  __int128 v8;
  id v9;
  id v10;
  char v11;

  v11 = a2;
  v10 = a3;
  v9 = a4;
  sub_1D530A950(a1, &v11, &v10, &v9, &v8);
  *a5 = v8;

}

void sub_1D53097BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D53097D8(_DWORD *a1)
{
  uint64_t result;
  void *exception;

  result = *a1;
  *a1 = result - 1;
  if (__OFSUB__((_DWORD)result, 1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D5309834(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D5309848(uint64_t **a1, void **a2, unsigned __int16 *a3)
{
  int v6;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;

  sub_1D52ABE88(a1, (uint64_t)a2, a3);
  if (*a3 == 50714 && a3[1] - 3 <= 2)
  {
    v6 = *((_DWORD *)a3 + 1);
    if (v6 == 1 || v6 == 4)
    {
      sub_1D52917E4((uint64_t)a1, &v13);
      sub_1D52A75D8((uint64_t)a3, (uint64_t *)&v13, __p);
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
      if (*((_QWORD *)&v13 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v11 = __p[0];
      if (*((_DWORD *)a3 + 1) == ((char *)__p[1] - (char *)__p[0]) >> 3)
      {
        if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)8)
        {
          sub_1D528F9B4(&v13, 4uLL, (_QWORD *)__p[0]);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          *(_OWORD *)__p = v13;
          v16 = v14;
        }
        *(_QWORD *)&v13 = a2;
        v12 = (char *)(sub_1D52B3E7C(a1 + 33, a2, (uint64_t)&unk_1D544A5C4, (__int128 **)&v13) + 7);
        v11 = __p[0];
        if (v12 != (char *)__p)
        {
          sub_1D528FA34(v12, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
          v11 = __p[0];
        }
      }
      if (v11)
      {
        __p[1] = v11;
        operator delete(v11);
      }
    }
  }
}

void sub_1D53099AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D53099DC(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t result;
  unsigned int v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unsigned int v16;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  void *exception;
  uint64_t v48;
  std::__shared_weak_count *v49;
  int v50;
  __int128 v51;
  uint64_t v52[3];

  result = nullsub_6();
  v6 = *a3;
  if (v6 > 0x19)
  {
    if (v6 == 26)
    {
      if ((a3[1] & 0xFFFE) != 6)
        return result;
      sub_1D52917E4(a1, &v51);
      v50 = *((_DWORD *)a3 + 2);
      sub_1D5282F74((int *)&v48, &v50);
      sub_1D5285164(v52, (uint64_t *)&v51, (uint64_t)&v48, 0);
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
      if (*((_QWORD *)&v51 + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = *((unsigned int *)a3 + 1);
      if (v32 >= 2)
      {
        if (v32 >= 0x100000)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](exception, "RawCameraException");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        sub_1D530AEB8(*((unsigned int *)a3 + 1), &v51);
        v33 = (uint64_t *)(a1 + 1200);
        sub_1D5292548(a1 + 1200, &v51);
        v34 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
        if (*((_QWORD *)&v51 + 1))
        {
          v35 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        sub_1D52917E4(a1, &v51);
        v37 = v51;
        v38 = sub_1D52E658C(*v33);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37 + 32))(v37, v38, v32);
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
        if (*((_QWORD *)&v51 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        sub_1D52917E4(a1, &v51);
        v42 = sub_1D52845E4(v51);
        v43 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
        if (*((_QWORD *)&v51 + 1))
        {
          v44 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v46 = *v33;
        if (v42 == 2)
          sub_1D530B110(v46);
        else
          sub_1D530B154(v46);
      }
      return sub_1D5285200(v52);
    }
    if (v6 == 27)
    {
      LODWORD(v51) = 1;
      sub_1D5285A24(v52, (unsigned int *)&v51);
      v16 = sub_1D52A7E28((uint64_t)a3, (unsigned int *)v52);
      v50 = 0;
      sub_1D5285A24(&v48, (unsigned int *)&v50);
      result = sub_1D52A7E28((uint64_t)a3, (unsigned int *)&v48);
      *(_QWORD *)(a1 + 1216) = v16 | (unint64_t)(result << 32);
    }
  }
  else if (v6 == 15)
  {
    if (a3[1] == 4 && *((_DWORD *)a3 + 1) >= 7u)
    {
      sub_1D52917E4(a1, &v51);
      v50 = *((_DWORD *)a3 + 2);
      sub_1D5282F74((int *)&v48, &v50);
      sub_1D5285164(v52, (uint64_t *)&v51, (uint64_t)&v48, 0);
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
      if (*((_QWORD *)&v51 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_1D52917E4(a1, &v51);
      v21 = v51;
      v48 = 24;
      sub_1D5282FE0(&v50, (unint64_t *)&v48);
      (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v21 + 40))(v21, &v50, 1);
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
      if (*((_QWORD *)&v51 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      sub_1D52917E4(a1, &v51);
      v25 = sub_1D52847F8(v51);
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
      if (*((_QWORD *)&v51 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      *(double *)(a1 + 1232) = (double)v25 * 0.00390625;
      return sub_1D5285200(v52);
    }
  }
  else if (v6 == 25 && a3[1] == 7)
  {
    sub_1D52917E4(a1, &v51);
    v50 = *((_DWORD *)a3 + 2);
    sub_1D5282F74((int *)&v48, &v50);
    sub_1D5285164(v52, (uint64_t *)&v51, (uint64_t)&v48, 0);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v50 = *((_DWORD *)a3 + 1);
    sub_1D52917E4(a1, &v48);
    sub_1D53366D8(&v48, &v50, &v51);
    sub_1D5292548(a1 + 1184, &v51);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v49;
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    return sub_1D5285200(v52);
  }
  return result;
}

void sub_1D5309EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_1D5282EB4((uint64_t)va);
  sub_1D5285200((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5309F9C(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  sub_1D52850A0(__p, "IFD0:SUBIFD0");
  v2 = sub_1D52B0BBC(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D5309FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1D530A010(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  std::__shared_weak_count *v10;
  char v11;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1);
  sub_1D52850A0(&__p, "IFD0:SUBIFD0");
  v3 = sub_1D52B0C2C(a1, &__p);
  if (v11 < 0)
    operator delete(__p);
  sub_1D52917E4(a1, &__p);
  v4 = (*(uint64_t (**)(void *))(*(_QWORD *)__p + 16))(__p);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if ((unint64_t)v4 - v2 >= v3)
    return v3;
  else
    return v4 - v2;
}

void sub_1D530A0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_1D5282EB4((uint64_t)&__p);
  _Unwind_Resume(a1);
}

unint64_t sub_1D530A110(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  void *__p[2];
  char v7;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 1184);
  if (v2)
  {
    v3 = sub_1D5337798(v2);
    LODWORD(v1) = sub_1D53377A0(*(_QWORD *)(v1 + 1184));
  }
  else
  {
    sub_1D52850A0(__p, "IFD0:SUBIFD0");
    v4 = sub_1D52B0D58(v1, __p);
    v3 = v4;
    v1 = HIDWORD(v4);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  return v3 | ((unint64_t)v1 << 32);
}

void sub_1D530A190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D530A1AC(uint64_t *a1)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  void *exception;
  _QWORD v15[2];
  _QWORD v16[2];

  v2 = (*(uint64_t (**)(uint64_t *))(*a1 + 440))(a1);
  v3 = v2;
  v4 = HIDWORD(v2);
  v16[0] = 0;
  v16[1] = v2;
  v5 = a1[148];
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v6 = sub_1D53377D0(v5);
  v7 = sub_1D53377D8(a1[148]);
  v8 = sub_1D53377E0(a1[148]);
  v9 = sub_1D53377F4(a1[148]);
  v15[0] = (v6 - 8) | ((unint64_t)(v7 - 8) << 32);
  v15[1] = (v3 - (v8 + v6) + 16) | ((unint64_t)(v4 - (v9 + v7) + 16) << 32);
  v10 = sub_1D53ADD44((int *)v15, (int *)v16);
  if (v10)
    v11 = LODWORD(v15[0]);
  else
    v11 = v6;
  if (v10)
    v12 = HIDWORD(v15[0]);
  else
    v12 = v7;
  return v11 | (v12 << 32);
}

void sub_1D530A2B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530A2C8(uint64_t *a1)
{
  uint64_t result;
  unsigned int v3;
  uint64_t v4;

  (*(void (**)(uint64_t *))(*a1 + 440))(a1);
  result = a1[148];
  if (result)
  {
    v3 = sub_1D53377D0(result);
    v4 = sub_1D53377D8(a1[148]);
    sub_1D53377A8(a1[148]);
    sub_1D53377BC(a1[148]);
    return v3 | (unint64_t)(v4 << 32);
  }
  return result;
}

uint64_t sub_1D530A348(uint64_t a1)
{
  void *__p[2];
  char v4;
  unsigned int v5;

  v5 = 0;
  sub_1D52850A0(__p, "IFD0:SUBIFD0");
  sub_1D52A89D8(a1, __p, &v5);
  if (v4 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_1D530A3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D530A3C0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;

  v2 = *(_QWORD *)(a1 + 1200);
  if (v2
    && (v3 = *(_DWORD *)(a1 + 1216), v3 >= 1)
    && (v4 = *(_DWORD *)(a1 + 1220), v4 > 0)
    && *(_QWORD *)(v2 + 24) >= 2 * v3 * (unint64_t)v4)
  {
    v5 = 0;
    sub_1D530AB8C((uint64_t *)(a1 + 1200), &v5, (unsigned int *)(a1 + 1220), (unsigned int *)(a1 + 1216), (unsigned int *)(a1 + 1216), a2);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

uint64_t sub_1D530A430@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 1192);
  *a2 = *(_QWORD *)(result + 1184);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

double sub_1D530A458(void **a1)
{
  uint64_t v2;
  void **v3;
  double v4;
  void *__p[2];
  char v7;

  v2 = (uint64_t)(a1 + 36);
  (*((void (**)(void **__return_ptr))*a1 + 49))(__p);
  v3 = sub_1D5294144(v2, __p);
  if (a1 + 37 == v3)
    v4 = -1.0;
  else
    v4 = *((double *)v3 + 7);
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_1D530A4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1D530A4EC(uint64_t a1)
{
  return *(double *)(a1 + 1232);
}

void sub_1D530A4F4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  void *__p[2];
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t *v46;
  char __str[16];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 1184);
  if (v3)
    LODWORD(v3) = sub_1D5337808(v3);
  snprintf(__str, 0x10uLL, "%u", v3);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_1D52850A0(__p, "3fr");
  v4 = a2[2];
  v5 = a2[1];
  if (v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a2) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a2) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v46 = a2 + 2;
    if (v10)
      v11 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v10);
    else
      v11 = 0;
    v12 = &v11[24 * v7];
    v42 = v11;
    v43 = v12;
    v45 = &v11[24 * v10];
    v13 = *(_OWORD *)__p;
    *((_QWORD *)v12 + 2) = v41;
    *(_OWORD *)v12 = v13;
    __p[1] = 0;
    v41 = 0;
    __p[0] = 0;
    v44 = v12 + 24;
    sub_1D5293D58(a2, &v42);
    v14 = a2[1];
    sub_1D5293F24((uint64_t)&v42);
    v15 = SHIBYTE(v41);
    a2[1] = v14;
    if (v15 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6 = *(_OWORD *)__p;
    *(_QWORD *)(v5 + 16) = v41;
    *(_OWORD *)v5 = v6;
    a2[1] = v5 + 24;
  }
  sub_1D52850A0(__p, "hasselblad");
  v17 = a2[1];
  v16 = a2[2];
  if (v17 >= v16)
  {
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a2) >> 3);
    v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a2) >> 3);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v20;
    v46 = a2 + 2;
    if (v22)
      v23 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v22);
    else
      v23 = 0;
    v24 = &v23[24 * v19];
    v42 = v23;
    v43 = v24;
    v45 = &v23[24 * v22];
    v25 = *(_OWORD *)__p;
    *((_QWORD *)v24 + 2) = v41;
    *(_OWORD *)v24 = v25;
    __p[1] = 0;
    v41 = 0;
    __p[0] = 0;
    v44 = v24 + 24;
    sub_1D5293D58(a2, &v42);
    v26 = a2[1];
    sub_1D5293F24((uint64_t)&v42);
    v27 = SHIBYTE(v41);
    a2[1] = v26;
    if (v27 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v18 = *(_OWORD *)__p;
    *(_QWORD *)(v17 + 16) = v41;
    *(_OWORD *)v17 = v18;
    a2[1] = v17 + 24;
  }
  sub_1D52850A0(__p, __str);
  v29 = a2[1];
  v28 = a2[2];
  if (v29 >= v28)
  {
    v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *a2) >> 3);
    v32 = v31 + 1;
    if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a2) >> 3);
    if (2 * v33 > v32)
      v32 = 2 * v33;
    if (v33 >= 0x555555555555555)
      v34 = 0xAAAAAAAAAAAAAAALL;
    else
      v34 = v32;
    v46 = a2 + 2;
    if (v34)
      v35 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v34);
    else
      v35 = 0;
    v36 = &v35[24 * v31];
    v42 = v35;
    v43 = v36;
    v45 = &v35[24 * v34];
    v37 = *(_OWORD *)__p;
    *((_QWORD *)v36 + 2) = v41;
    *(_OWORD *)v36 = v37;
    __p[1] = 0;
    v41 = 0;
    __p[0] = 0;
    v44 = v36 + 24;
    sub_1D5293D58(a2, &v42);
    v38 = a2[1];
    sub_1D5293F24((uint64_t)&v42);
    v39 = SHIBYTE(v41);
    a2[1] = v38;
    if (v39 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v30 = *(_OWORD *)__p;
    *(_QWORD *)(v29 + 16) = v41;
    *(_OWORD *)v29 = v30;
    a2[1] = v29 + 24;
  }
}

void sub_1D530A894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_1D5293F24((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  sub_1D5293CCC((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1D530A8F0(_QWORD *a1)
{
  sub_1D530A914(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D530A914(_QWORD *a1)
{
  *a1 = off_1E9977AE0;
  sub_1D5282EB4((uint64_t)(a1 + 150));
  sub_1D5282EB4((uint64_t)(a1 + 148));
  return sub_1D52B2190((uint64_t)a1);
}

void sub_1D530A950(uint64_t *a1@<X1>, char *a2@<X2>, void **a3@<X3>, void **a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x4F0uLL);
  sub_1D530A9D0((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D530A9BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530A9D0(uint64_t a1, uint64_t *a2, char *a3, void **a4, void **a5)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E9977E30;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D52A7E98(a1 + 24, a2, *a3, *a4, *a5);
  *(_QWORD *)(a1 + 24) = off_1E9977AE0;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_QWORD *)(a1 + 1256) = 0xBFF0000000000000;
  return a1;
}

void sub_1D530AA3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D530AA50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977E30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D530AA64(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977E30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D530AA98(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

int *sub_1D530AAA8(int *result, int *a2)
{
  void *exception;

  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  *result /= *a2;
  return result;
}

void sub_1D530AB04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_1D530AB18(int *result, int *a2)
{
  uint64_t v2;
  void *exception;

  v2 = *result * (uint64_t)*a2;
  *result = v2;
  if (v2 != (int)v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D530AB78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D530AB8C(uint64_t *a1@<X1>, unsigned int *a2@<X2>, unsigned int *a3@<X3>, unsigned int *a4@<X4>, unsigned int *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;

  v12 = operator new(0x58uLL);
  sub_1D530AC1C(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  sub_1D5285658((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1D530AC08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D530AC1C(_QWORD *a1, uint64_t *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  a1[2] = 0;
  *a1 = &unk_1E9975978;
  a1[1] = 0;
  sub_1D530AC68((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1D530AC54(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530AC68(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v10 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  sub_1D5285A24(&v20, a3);
  sub_1D5285A24(&v19, a4);
  sub_1D5285A24(&v18, a5);
  sub_1D5285A24(&v17, a6);
  sub_1D530D3FC(a1, &v21, &v20, &v19, &v18, &v17);
  v13 = v22;
  if (v22)
  {
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a1;
}

void sub_1D530AD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530AD68@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  __int128 v11;

  *a2 = 0;
  a2[1] = 0;
  if (a1 >> 20)
  {
    v8 = operator new(0x48uLL);
    v8[2] = 0;
    *v8 = &unk_1E9977F68;
    v8[1] = 0;
    *((_BYTE *)v8 + 32) = 0;
    v8[5] = 0;
    v8[6] = a1;
    v8[7] = 0;
    v8[8] = 0;
    v8[3] = off_1E9993708;
    *(_QWORD *)&v11 = v8 + 3;
    *((_QWORD *)&v11 + 1) = v8;
    sub_1D5292548((uint64_t)a2, &v11);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
    if (!*((_QWORD *)&v11 + 1))
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
    v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v7 = __ldaxr(v9);
    while (__stlxr(v7 - 1, v9));
  }
  else
  {
    v4 = operator new(0x40uLL);
    v4[2] = 0;
    *v4 = &unk_1E9977EC8;
    v4[1] = 0;
    *((_BYTE *)v4 + 32) = 0;
    v4[5] = 0;
    v4[6] = a1;
    v4[7] = 0;
    v4[3] = &unk_1E9977F18;
    *(_QWORD *)&v11 = v4 + 3;
    *((_QWORD *)&v11 + 1) = v4;
    sub_1D5292548((uint64_t)a2, &v11);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
    if (!*((_QWORD *)&v11 + 1))
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
    v6 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
  }
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
}

void sub_1D530AE9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530AEB8@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  __int128 v10;
  unint64_t v11;

  v11 = a1;
  *a2 = 0;
  a2[1] = 0;
  if (a1 >> 20)
  {
    sub_1D530B230(&v11, &v10);
    sub_1D5292548((uint64_t)a2, &v10);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
    if (!*((_QWORD *)&v10 + 1))
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v7 = __ldaxr(v8);
    while (__stlxr(v7 - 1, v8));
  }
  else
  {
    v4 = operator new(0x40uLL);
    v4[2] = 0;
    *v4 = &unk_1E9977EC8;
    v4[1] = 0;
    *((_BYTE *)v4 + 32) = 0;
    v4[5] = 0;
    v4[6] = a1;
    v4[7] = 0;
    v4[3] = &unk_1E9977F18;
    *(_QWORD *)&v10 = v4 + 3;
    *((_QWORD *)&v10 + 1) = v4;
    sub_1D5292548((uint64_t)a2, &v10);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
    if (!*((_QWORD *)&v10 + 1))
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
    v6 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
  }
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
}

void sub_1D530AFC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530AFDC(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E9977E80;
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if (*(_BYTE *)(a1 + 8))
      j__CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2);
    else
      j__free_3(*(void **)(a1 + 32));
    *(_QWORD *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_1D530B040(uint64_t a1)
{
  sub_1D530AFDC(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void *sub_1D530B064(uint64_t a1)
{
  NSUInteger v2;
  size_t v3;
  void *result;
  CFIndex v5;
  void *exception;

  v2 = NSPageSize();
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 <= v2)
  {
    *(_BYTE *)(a1 + 8) = 1;
    if (v3 <= 1)
      v5 = 1;
    else
      v5 = v3;
    result = sub_1D5441C60((const __CFAllocator *)*MEMORY[0x1E0C9AE00], v5, 0);
  }
  else
  {
    result = sub_1D5441C24(v3);
  }
  *(_QWORD *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 16) = result;
  if (!result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D530B0FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_WORD *sub_1D530B110(uint64_t a1)
{
  unint64_t v1;
  _WORD *result;
  unint64_t v3;

  v1 = *(_QWORD *)(a1 + 24);
  result = (_WORD *)sub_1D52E658C(a1);
  if (v1 >= 2)
  {
    v3 = v1 >> 1;
    do
    {
      *result = bswap32((unsigned __int16)*result) >> 16;
      ++result;
      --v3;
    }
    while (v3);
  }
  return result;
}

void sub_1D530B158(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977EC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D530B16C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977EC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D530B1A0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_1D530B1B4(uint64_t a1)
{
  sub_1D530AFDC(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D530B1D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977F68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D530B1EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977F68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D530B220(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

_QWORD *sub_1D530B230@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = sub_1D530B288(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D530B274(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D530B288(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E9977FB8;
  sub_1D53B0224(a1 + 3, *a2);
  return a1;
}

void sub_1D530B2C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D530B2D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977FB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D530B2EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9977FB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D530B320(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

uint64_t sub_1D530B330(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4, _OWORD *a5)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v12;

  v12 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E9978008;
  v8 = a2[1];
  *(_QWORD *)(a1 + 24) = *a2;
  *(_QWORD *)(a1 + 32) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_1D5282FE0((_DWORD *)(a1 + 40), &v12);
  *(_QWORD *)(a1 + 44) = *a4;
  *(_OWORD *)(a1 + 52) = *a5;
  *(_DWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 72) = 1;
  *(_DWORD *)(a1 + 80) = 65537;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 102) = 0;
  *(_WORD *)(a1 + 110) = -1;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 169) = 0u;
  *(_BYTE *)(a1 + 185) = 1;
  return a1;
}

void sub_1D530B3F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  sub_1D5282EB4(v2);
  v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530B418(uint64_t result)
{
  uint64_t v1;
  int v2;
  int i;
  int v4;
  unsigned __int16 *v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v11;
  uint64_t v12;
  int v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int16 *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned __int16 *v25;
  unsigned int v26;
  unsigned int v27;

  v1 = result;
  v2 = *(_DWORD *)(result + 56);
  if (v2 <= 0)
  {
    v4 = *(_DWORD *)(result + 44);
  }
  else
  {
    for (i = 0; i < v2; ++i)
    {
      result = sub_1D530B618(v1);
      v4 = *(_DWORD *)(v1 + 44);
      if (v4 >= 1)
      {
        v5 = (unsigned __int16 *)(result + 2 * v4 * i);
        v6 = *(unsigned __int16 *)(v1 + 108);
        v7 = *(_DWORD *)(v1 + 44);
        do
        {
          v8 = *v5;
          if (v8 > v6 && v8 < *(unsigned __int16 *)(v1 + 110))
          {
            *(_WORD *)(v1 + 108) = v8;
            v6 = v8;
          }
          ++v5;
          --v7;
        }
        while (v7);
      }
      v2 = *(_DWORD *)(v1 + 56);
    }
  }
  v9 = *(_DWORD *)(v1 + 64);
  if (*(_DWORD *)(v1 + 60) >= v4 || v9 < 1)
  {
    v11 = v9 + v2;
  }
  else
  {
    do
    {
      v12 = sub_1D530B618(v1);
      v13 = *(_DWORD *)(v1 + 52);
      if (v13 >= 1)
      {
        v14 = (unsigned __int16 *)(v12 + 2 * *(_DWORD *)(v1 + 44) * v2);
        v15 = *(unsigned __int16 *)(v1 + 108);
        do
        {
          v16 = *v14;
          if (v16 > v15 && v16 < *(unsigned __int16 *)(v1 + 110))
          {
            *(_WORD *)(v1 + 108) = v16;
            v15 = v16;
          }
          ++v14;
          --v13;
        }
        while (v13);
      }
      result = sub_1D530B618(v1);
      v17 = *(_DWORD *)(v1 + 44);
      v18 = *(int *)(v1 + 52);
      v19 = *(int *)(v1 + 60);
      v20 = v19 + v18;
      if ((int)v19 + (int)v18 < v17)
      {
        v21 = (unsigned __int16 *)(result + 2 * v17 * v2 + 2 * v18 + 2 * v19);
        v22 = *(unsigned __int16 *)(v1 + 108);
        do
        {
          v23 = *v21;
          if (v23 > v22 && v23 < *(unsigned __int16 *)(v1 + 110))
          {
            *(_WORD *)(v1 + 108) = v23;
            v22 = v23;
          }
          ++v20;
          ++v21;
        }
        while (v20 < v17);
      }
      ++v2;
      v11 = *(_DWORD *)(v1 + 64) + *(_DWORD *)(v1 + 56);
    }
    while (v2 < v11);
  }
  while (v11 < *(_DWORD *)(v1 + 48))
  {
    result = sub_1D530B618(v1);
    v24 = *(_DWORD *)(v1 + 44);
    if (v24 >= 1)
    {
      v25 = (unsigned __int16 *)(result + 2 * v24 * v11);
      v26 = *(unsigned __int16 *)(v1 + 108);
      do
      {
        v27 = *v25;
        if (v27 > v26 && v27 < *(unsigned __int16 *)(v1 + 110))
        {
          *(_WORD *)(v1 + 108) = v27;
          v26 = v27;
        }
        ++v25;
        --v24;
      }
      while (v24);
    }
    ++v11;
  }
  return result;
}

uint64_t sub_1D530B618(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 112))(&v9);
  v2 = sub_1D52E658C(v9);
  v3 = *(_QWORD *)(v9 + 24);
  v4 = sub_1D530C74C(a1);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v2 + v3 - v4;
}

void sub_1D530B6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_WORD *sub_1D530B6C8(unsigned int *a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *result;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  _WORD *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  _WORD *v28;
  unsigned __int16 *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned __int16 *v34;
  unsigned __int16 v35;
  unsigned int v36;
  unsigned int v37;
  void *exception;
  unsigned __int16 v39;
  uint64_t v40;
  _WORD *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;

  v2 = a1[13];
  v3 = a1[14];
  v4 = a1[16];
  v46 = a1[15];
  v47 = v2;
  v45 = v4;
  v5 = a1 + 11;
  sub_1D5285A24(&v44, a1 + 11);
  sub_1D5285A24(&v43, a1 + 12);
  if (v44 - 1 >= 0x1869F || v43 - 1 >= 0x1869F)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    goto LABEL_54;
  }
  LODWORD(v42) = v2;
  v6 = sub_1D52B0860(&v42, &v46);
  if (v44 < *v6 || (LODWORD(v42) = v3, v7 = sub_1D52B0860(&v42, &v45), v43 < *v7))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    goto LABEL_54;
  }
  v8 = sub_1D530B618((uint64_t)a1);
  LODWORD(v42) = v3;
  LODWORD(v42) = *sub_1D52DCE44((int *)&v42, v5);
  v9 = *sub_1D52B0860(&v42, &v47);
  LOWORD(v41) = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 56))(a1);
  LODWORD(v42) = v9;
  v10 = (unsigned __int16 *)(v8 + 2 * *sub_1D530D0B0(&v42, (unsigned __int16 *)&v41));
  v11 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 128))(a1);
  v42 = v11;
  v12 = sub_1D530BB78((uint64_t)a1);
  result = (_WORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 72))(a1);
  v41 = result;
  if (v10 == (unsigned __int16 *)v12 && (_WORD *)v11 == result)
    return result;
  v40 = 2;
  v48 = v46;
  v14 = *sub_1D5285BEC(&v48, &v40);
  v39 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 40))(a1);
  v48 = v14;
  v15 = *sub_1D530D0B0(&v48, &v39);
  if (v15 <= 3
    || (v16 = v12 + (_QWORD)v41 * a1[17] + 2 * a1[17],
        v17 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 120))(a1),
        v16 >= (unint64_t)v10)
    || (v18 = v17, LODWORD(v40) = v45, v16 + *sub_1D5285BEC(&v40, &v41) > v17)
    || (LODWORD(v40) = v45, result = sub_1D5285BEC(&v40, &v42), (unint64_t)v10 + *(unsigned int *)result > v18))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
LABEL_54:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (*((_BYTE *)a1 + 184))
    result = (_WORD *)sub_1D530B418((uint64_t)a1);
  v19 = v45;
  if (v45)
  {
    v20 = 0;
    v22 = v41;
    v21 = v42;
    LOWORD(v23) = *((_WORD *)a1 + 54);
    do
    {
      if (v15 == 4)
      {
        LODWORD(v24) = 0;
        v27 = v23;
        v26 = v23;
        v25 = v23;
        v34 = v10;
        result = (_WORD *)v16;
      }
      else
      {
        v24 = 0;
        v25 = v23;
        v26 = v23;
        v27 = v23;
        do
        {
          v28 = (_WORD *)(v16 + v24);
          v29 = (unsigned __int16 *)((char *)v10 + v24);
          v30 = *(unsigned __int16 *)((char *)v10 + v24);
          *(_WORD *)(v16 + v24) = v30;
          if (v30 > v25 && v30 < *((unsigned __int16 *)a1 + 55))
            v25 = v30;
          v31 = v29[1];
          v28[1] = v31;
          if (v31 > v26 && v31 < *((unsigned __int16 *)a1 + 55))
            v26 = v31;
          v32 = v29[2];
          v28[2] = v32;
          if (v32 > v27 && v32 < *((unsigned __int16 *)a1 + 55))
            v27 = v32;
          v33 = v29[3];
          v28[3] = v33;
          if (v33 > (unsigned __int16)v23 && v33 < *((unsigned __int16 *)a1 + 55))
            LOWORD(v23) = v33;
          v24 += 8;
        }
        while (v15 - 4 > (unint64_t)v24);
        result = (_WORD *)(v16 + v24);
        v34 = (unsigned __int16 *)((char *)v10 + v24);
      }
      while (v15 > v24)
      {
        v36 = *v34++;
        v35 = v36;
        *result++ = v36;
        if (v36 > v25)
          v25 = v35;
        LODWORD(v24) = v24 + 2;
      }
      v37 = v26;
      if (v25 > v26)
        v37 = v25;
      if (v27 <= (unsigned __int16)v23)
        v23 = (unsigned __int16)v23;
      else
        v23 = v27;
      if (v37 > v23)
        LOWORD(v23) = v37;
      *((_WORD *)a1 + 54) = v23;
      v10 = (unsigned __int16 *)((char *)v10 + v21);
      v16 += (unint64_t)v22;
      ++v20;
    }
    while (v20 != v19);
  }
  return result;
}

void sub_1D530BB48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530BB78(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 112))(&v6);
  v1 = sub_1D52E658C(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D530BBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530BC04(_DWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  _WORD *v14;
  uint64_t v15;
  size_t v16;
  int v17;
  unsigned int v18;
  char *v19;
  char *v20;
  uint64_t result;
  int v22;
  unsigned int v23;
  char *v24;
  char *v25;

  v2 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 72))(a1);
  v3 = v2 >> 1;
  v4 = a1[15];
  v5 = a1[16];
  v6 = sub_1D530BB78((uint64_t)a1);
  if (v5)
  {
    v7 = 0;
    v8 = a1[17];
    v9 = v6 + 2 * v3 * v8;
    v10 = (_WORD *)(v6 + v3 * (2 * v8 + 2));
    do
    {
      v11 = 2 * v8;
      v12 = v8;
      v13 = v4 + v8;
      v14 = v10;
      v9 += 2 * v3;
      if ((_DWORD)v8)
      {
        do
        {
          *v14++ = *(_WORD *)(v9 + 2 * v11);
          *(_WORD *)(v9 + 2 * v13++) = *(_WORD *)(v9 + 2 * (v4 - 2 + v12));
          --v11;
          --v12;
        }
        while (v12);
      }
      ++v7;
      v10 += v3;
    }
    while (v7 != v5);
  }
  v15 = sub_1D530BB78((uint64_t)a1);
  v16 = v2 & 0xFFFFFFFFFFFFFFFELL;
  v17 = a1[17];
  if (v17)
  {
    v18 = 0;
    v19 = (char *)(v15 + 2 * v3 * (v17 - 1));
    v20 = &v19[2 * v16];
    do
    {
      memcpy(v19, v20, v16);
      ++v18;
      v20 += v16;
      v19 -= 2 * v3;
    }
    while (v18 < a1[17]);
  }
  result = sub_1D530BB78((uint64_t)a1);
  v22 = a1[17];
  if (v22)
  {
    v23 = 0;
    v24 = (char *)(result + 2 * v3 * (v22 + v5));
    v25 = &v24[-2 * v16];
    do
    {
      result = (uint64_t)memcpy(v24, v25, v16);
      ++v23;
      v25 -= v16;
      v24 += v16;
    }
    while (v23 < a1[17]);
  }
  return result;
}

_QWORD *sub_1D530BD78@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *v2;
  uint64_t v4;
  uint64_t *v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *exception;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;

  v2 = (unsigned int *)result;
  v5 = result + 17;
  v4 = result[17];
  if (!v4)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD *))(*result + 24))(&v21, result);
    v6 = v21;
    if (*((_QWORD *)&v21 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v6 + 1) + 16))(*((_QWORD *)&v6 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v6 + 1));
      }
    }
    if (!(_QWORD)v6 || v2[42] && v2[43] || v2[44] && v2[45])
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 96))(v2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 104))(v2);
    v9 = sub_1D530BB78((uint64_t)v2);
    v10 = v2[17];
    v11 = v9
        + 2 * ((unint64_t)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 72))(v2) >> 1) * v10
        + 2 * v10;
    v20 = v11 - sub_1D52E658C(*((_QWORD *)v2 + 11));
    v19 = (unint64_t)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v2 + 72))(v2) >> 1;
    sub_1D530D124((_QWORD *)v2 + 11, &v20, v2 + 16, v2 + 15, &v19, &v21);
    sub_1D5292548((uint64_t)v5, &v21);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    result = (_QWORD *)sub_1D530D7C8(*v5);
    v4 = *v5;
  }
  v15 = *((_QWORD *)v2 + 18);
  *a2 = v4;
  a2[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  return result;
}

void sub_1D530BF88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D530BFA0(os_signpost_id_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  NSObject *v6;
  NSObject *v7;
  void (**v8)(_QWORD);
  uint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint8_t buf[24];
  unint64_t v23;
  _QWORD v24[5];

  if (*(_QWORD *)(a1 + 136))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v5 = (uint64_t *)(a1 + 152);
    v4 = *(_QWORD *)(a1 + 152);
    if (!v4)
    {
      (*(void (**)(_QWORD, os_signpost_id_t, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1 + 40, 0);
      sub_1D52EB058();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = v6;
      if (a1 + 1 >= 2 && os_signpost_enabled(v6))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1D527F000, v7, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
      }

      v24[0] = MEMORY[0x1E0C809B0];
      v24[1] = 3221225472;
      v24[2] = sub_1D530C204;
      v24[3] = &unk_1E996F870;
      v24[4] = a1;
      v8 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v24);
      (*(void (**)(os_signpost_id_t))(*(_QWORD *)a1 + 168))(a1);
      v8[2](v8);

      v23 = 0;
      v9 = sub_1D530B618(a1);
      (*(void (**)(uint8_t *__return_ptr, os_signpost_id_t))(*(_QWORD *)a1 + 112))(buf, a1);
      v10 = v9 - sub_1D52E658C(*(uint64_t *)buf);
      v11 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = *(_DWORD *)(a1 + 44);
      v23 = v10;
      v21 = v14 * *(unsigned __int16 *)(a1 + 80);
      sub_1D530D290((_QWORD *)(a1 + 88), &v23, (unsigned int *)(a1 + 48), (unsigned int *)(a1 + 44), (unsigned int *)&v21, buf);
      sub_1D5292548((uint64_t)v5, (__int128 *)buf);
      v15 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v4 = *v5;
    }
    v18 = *(_QWORD *)(a1 + 160);
    *a2 = v4;
    a2[1] = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
}

void sub_1D530C1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D530C204(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

uint64_t sub_1D530C288(uint64_t result, uint64_t a2, unint64_t a3, unsigned int a4, char a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _WORD *v13;
  unint64_t v14;
  void *exception;

  if (a4 >= 0x11 || (v5 = (1 << a4), v5 > a3))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v6 = 0;
  do
  {
    *(_WORD *)(a2 + 2 * v6) = (_DWORD)v6 << a5;
    ++v6;
  }
  while (v5 != v6);
  v7 = *(_QWORD *)(result + 112);
  v8 = *(_QWORD *)(result + 120) - v7;
  if (v8)
  {
    v9 = v8 >> 1;
    if (v9 >= a3)
      v10 = a3;
    else
      v10 = v9;
    if (v10)
    {
      v11 = 0;
      do
      {
        *(_WORD *)(a2 + 2 * v11) = *(unsigned __int16 *)(v7 + 2 * v11) << a5;
        ++v11;
      }
      while (v10 > v11);
      if (v11 >= v5)
        return result;
    }
    else
    {
      LODWORD(v11) = 0;
    }
    v12 = v11 + 0xFFFFFFFFLL;
    v13 = (_WORD *)(a2 + 2 * v11);
    v14 = v5 - v11;
    do
    {
      *v13++ = *(_WORD *)(a2 + 2 * v12++);
      --v14;
    }
    while (v14);
  }
  return result;
}

void sub_1D530C388(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1D530C3A0(uint64_t a1, _DWORD *a2)
{
  int v3;
  _DWORD *result;
  void *exception;
  int v6;
  int v7;

  *(_DWORD *)(a1 + 104) = *a2;
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  v6 = *(_DWORD *)(a1 + 40);
  v7 = v3;
  result = sub_1D52B3BEC(&v7, &v6);
  if (*result < *(_DWORD *)(a1 + 104))
  {
    if (!*(_BYTE *)(a1 + 185))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    *(_DWORD *)(a1 + 104) = *result;
  }
  return result;
}

void sub_1D530C43C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530C450(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 108);
}

uint64_t sub_1D530C458(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 110) = a2;
  return result;
}

char *sub_1D530C460(uint64_t a1, uint64_t a2)
{
  char *result;

  result = (char *)(a1 + 112);
  if (result != (char *)a2)
    return sub_1D52B1D94(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  return result;
}

void sub_1D530C484(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  void *exception;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  v5 = (uint64_t *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 88);
  if (!v4)
  {
    if ((*(_DWORD *)(a1 + 60) - 1) >= 0x1869F
      || (*(_DWORD *)(a1 + 64) - 100000) < 0xFFFE7961
      || (*(_DWORD *)(a1 + 44) - 1) >= 0x1869F
      || (*(_DWORD *)(a1 + 48) - 100000) < 0xFFFE7961)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
    v7 = *(int *)(a1 + 56);
    v8 = v6 - (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1) * v7;
    v9 = *(int *)(a1 + 64);
    v10 = *(_DWORD *)(a1 + 48) + ~*(_DWORD *)(a1 + 56);
    v11 = v6 * v9 - (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1) * v10;
    if (v8 > v11)
      v11 = v8;
    v12 = v11 & ~(v11 >> 63);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    v14 = sub_1D530C74C(a1);
    if (v13 <= v14 + v12)
      v15 = v14 + v12;
    else
      v15 = v13;
    sub_1D530AEB8(v15, &v34);
    v16 = v35;
    v36 = v34;
    v37 = v35;
    v34 = 0;
    v35 = 0;
    v32 = v36;
    v33 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    sub_1D530C790(v5, &v34, &v32);
    v19 = v33;
    if (v33)
    {
      v20 = (unint64_t *)&v33->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v35;
    if (v35)
    {
      v23 = (unint64_t *)&v35->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v37;
    if (v37)
    {
      v26 = (unint64_t *)&v37->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v4 = *v5;
  }
  v28 = *(_QWORD *)(a1 + 96);
  *a2 = v4;
  a2[1] = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
}

void sub_1D530C714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  sub_1D5282EB4((uint64_t)&a9);
  sub_1D5282EB4((uint64_t)&a11);
  sub_1D5282EB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530C74C(uint64_t a1)
{
  _DWORD *v1;
  unint64_t v3;
  unsigned int v4;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  v1 = sub_1D528304C(&v4, &v3);
  sub_1D52B0860(v1, &dword_1D544A1AC);
  return v4;
}

BOOL sub_1D530C790(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  std::__sp_mut *sp_mut;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  v7 = (std::__shared_weak_count *)a1[1];
  v8 = (std::__shared_weak_count *)a2[1];
  if (v7 == v8)
  {
    *a1 = 0;
    a1[1] = 0;
    sub_1D52908C8(a1, a3);
    v9 = v7;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    sub_1D52908C8(a2, a1);
    v9 = v8;
  }
  std::__sp_mut::unlock(sp_mut);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v7 == v8;
}

void sub_1D530C86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530C880(unsigned int *a1)
{
  uint64_t v3;
  unsigned int v4;

  sub_1D5285A24(&v4, a1 + 16);
  LODWORD(v3) = 2 * a1[17];
  sub_1D52B0860(&v4, &v3);
  v3 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 136))(a1);
  sub_1D5285BEC(&v4, &v3);
  return v4;
}

unint64_t sub_1D530C8EC(int *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (2 * a1[17]) + (uint64_t)a1[15];
  v2 = (*(unsigned int (**)(int *))(*(_QWORD *)a1 + 40))(a1) * v1;
  if (((2 * v2) & 0x1E) != 0)
    return (2 * v2 + 31) & 0xFFFFFFFFFFFFFFE0;
  else
    return 2 * v2;
}

uint64_t sub_1D530C940(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 112))(&v11);
  v2 = sub_1D52E658C(v11);
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v11, a1);
  v6 = v12;
  v7 = *(_QWORD *)(v11 + 24);
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v2 + v7;
}

void sub_1D530CA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530CA28(_DWORD *a1)
{
  int v1;

  v1 = a1[11];
  return 2 * v1 * (uint64_t)(*(int (**)(_DWORD *))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t sub_1D530CA5C(_DWORD *a1)
{
  uint64_t v2;
  int v3;

  v2 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 72))(a1);
  v3 = a1[17];
  return v2 + 4 * v3 * (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t sub_1D530CAB0(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 80);
}

uint64_t sub_1D530CAB8(uint64_t result, int a2)
{
  void *exception;

  if ((a2 - 5) <= 0xFFFFFFFB)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  *(_WORD *)(result + 80) = a2;
  return result;
}

void sub_1D530CB10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530CB24(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 82);
}

uint64_t sub_1D530CB2C(uint64_t result, int a2)
{
  void *exception;

  if ((a2 - 5) <= 0xFFFFFFFB)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  *(_WORD *)(result + 82) = a2;
  return result;
}

void sub_1D530CB84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530CB98(int *a1)
{
  return (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 128))(a1) * a1[12];
}

uint64_t sub_1D530CBC8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_1D530CBD0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_1D530CBD8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 72) = a2;
  return result;
}

uint64_t (***sub_1D530CBE0(uint64_t a1))(_QWORD)
{
  uint64_t v2;
  uint64_t (***result)(_QWORD);

  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    sub_1D530D7B0(v2);
  result = *(uint64_t (****)(_QWORD))(a1 + 152);
  if (result)
    return sub_1D530D7B0((uint64_t)result);
  return result;
}

uint64_t sub_1D530CC1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
    v3 = sub_1D530D7C8(v2);
  else
    v3 = 1;
  v4 = *(_QWORD *)(a1 + 152);
  if (v4)
    return v3 & sub_1D530D7C8(v4);
  return v3;
}

uint64_t sub_1D530CC64(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  *(_QWORD *)(result + 168) = *a2;
  *(_QWORD *)(result + 176) = *a3;
  return result;
}

void sub_1D530CC78(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  uint64_t v6;
  _WORD *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int16 *v11;
  _WORD *v12;
  __int16 v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v20;
  std::__shared_weak_count *v21;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 24))(&v20);
  if (a3[3] >= 1)
  {
    v6 = 0;
    v7 = (_WORD *)(a2 + 4);
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1))
      {
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        v9 = sub_1D530D4CC(v20);
        if (a3[2])
        {
          v10 = 0;
          v11 = (unsigned __int16 *)(v9 + 2 * (a3[1] + (int)v6) * *(_DWORD *)(v20 + 56) + 2 * (*a3 * v8));
          v12 = v7;
          do
          {
            if (v8 == 1)
            {
              if (qword_1EFF11DC8 != -1)
                dispatch_once(&qword_1EFF11DC8, &unk_1E9978108);
              v13 = xmmword_1EFF11DD0[*v11];
              *v12 = v13;
              *(v12 - 1) = v13;
              *(v12 - 2) = v13;
              if (qword_1EFF11DC8 != -1)
                dispatch_once(&qword_1EFF11DC8, &unk_1E9978108);
              ++v11;
            }
            else
            {
              if (qword_1EFF11DC8 != -1)
                dispatch_once(&qword_1EFF11DC8, &unk_1E9978108);
              *(v12 - 2) = xmmword_1EFF11DD0[*v11];
              if (qword_1EFF11DC8 != -1)
                dispatch_once(&qword_1EFF11DC8, &unk_1E9978108);
              *(v12 - 1) = xmmword_1EFF11DD0[v11[1]];
              if (qword_1EFF11DC8 != -1)
                dispatch_once(&qword_1EFF11DC8, &unk_1E9978108);
              *v12 = xmmword_1EFF11DD0[v11[2]];
              if (qword_1EFF11DC8 != -1)
                dispatch_once(&qword_1EFF11DC8, &unk_1E9978108);
              v11 += 3;
            }
            v12[1] = xmmword_1EFF11DD0[0xFFFF];
            ++v10;
            v12 += 4;
          }
          while (v10 < a3[2]);
        }
      }
      else
      {
        v14 = sub_1D530D4CC(v20);
        memcpy((void *)(a2 + v6 * a4), (const void *)(v14 + 2 * (a3[1] + (int)v6) * *(_DWORD *)(v20 + 56) + 2 * *a3), 2 * a3[2]);
      }
      ++v6;
      v7 = (_WORD *)((char *)v7 + a4);
    }
    while (v6 < a3[3]);
  }
  v15 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1D530CF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

__CFString *sub_1D530CF48()
{
  unsigned __int8 v0;
  __CFString **v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF326D0);
  v1 = off_1EFF32000;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1EFF326D0);
    v1 = off_1EFF32000;
    if (v3)
    {
      qword_1EFF326C8 = (uint64_t)dispatch_queue_create("Unpacker I/O Queue", 0);
      __cxa_guard_release(&qword_1EFF326D0);
      v1 = off_1EFF32000;
    }
  }
  return v1[217];
}

__CFString *sub_1D530CFB0()
{
  unsigned __int8 v0;
  __CFString **v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFF326E0);
  v1 = off_1EFF32000;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1EFF326E0);
    v1 = off_1EFF32000;
    if (v3)
    {
      qword_1EFF326D8 = (uint64_t)dispatch_queue_create("Unpacker Decompress Queue", MEMORY[0x1E0C80D50]);
      __cxa_guard_release(&qword_1EFF326E0);
      v1 = off_1EFF32000;
    }
  }
  return v1[219];
}

int64x2_t sub_1D530D01C()
{
  uint64_t v0;
  int64x2_t result;
  int64x2_t v2;
  int64x2_t v3;
  float32x4_t v4;
  int64x2_t v5;
  int64x2_t v6;

  v0 = 0;
  result = (int64x2_t)xmmword_1D5447F80;
  v2 = (int64x2_t)xmmword_1D5447F90;
  v3 = (int64x2_t)xmmword_1D5447FA0;
  v4 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  v5 = (int64x2_t)xmmword_1D5447F70;
  v6 = vdupq_n_s64(8uLL);
  do
  {
    xmmword_1EFF11DD0[v0] = (__int128)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vdivq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v5)), vcvtq_f64_u64((uint64x2_t)v3)), v4)), vdivq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v2)), vcvtq_f64_u64((uint64x2_t)result)), v4));
    v2 = vaddq_s64(v2, v6);
    v3 = vaddq_s64(v3, v6);
    v5 = vaddq_s64(v5, v6);
    result = vaddq_s64(result, v6);
    ++v0;
  }
  while (v0 != 0x2000);
  return result;
}

_DWORD *sub_1D530D0B0(_DWORD *result, unsigned __int16 *a2)
{
  unint64_t v2;
  void *exception;

  v2 = *result * (unint64_t)*a2;
  *result = v2;
  if ((v2 & 0xFFFFFFFF00000000) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D530D110(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D530D124(_QWORD *a1@<X1>, unint64_t *a2@<X2>, unsigned int *a3@<X3>, unsigned int *a4@<X4>, unint64_t *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;

  v12 = operator new(0x58uLL);
  sub_1D530D1B4(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  sub_1D5285658((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1D530D1A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D530D1B4(_QWORD *a1, _QWORD *a2, unint64_t *a3, unsigned int *a4, unsigned int *a5, unint64_t *a6)
{
  a1[2] = 0;
  *a1 = &unk_1E9975978;
  a1[1] = 0;
  sub_1D530D200((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1D530D1EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530D200(uint64_t a1, _QWORD *a2, unint64_t *a3, unsigned int *a4, unsigned int *a5, unint64_t *a6)
{
  int v12;
  int v13;
  int v14;
  unsigned int v15;

  sub_1D528304C(&v15, a3);
  sub_1D5285A24(&v14, a4);
  sub_1D5285A24(&v13, a5);
  sub_1D528304C(&v12, a6);
  return sub_1D530D3FC(a1, a2, &v15, &v14, &v13, &v12);
}

void sub_1D530D290(_QWORD *a1@<X1>, unint64_t *a2@<X2>, unsigned int *a3@<X3>, unsigned int *a4@<X4>, unsigned int *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;

  v12 = operator new(0x58uLL);
  sub_1D530D320(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  sub_1D5285658((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1D530D30C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D530D320(_QWORD *a1, _QWORD *a2, unint64_t *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  a1[2] = 0;
  *a1 = &unk_1E9975978;
  a1[1] = 0;
  sub_1D530D36C((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1D530D358(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530D36C(uint64_t a1, _QWORD *a2, unint64_t *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  int v12;
  int v13;
  int v14;
  unsigned int v15;

  sub_1D528304C(&v15, a3);
  sub_1D5285A24(&v14, a4);
  sub_1D5285A24(&v13, a5);
  sub_1D5285A24(&v12, a6);
  return sub_1D530D3FC(a1, a2, &v15, &v14, &v13, &v12);
}

uint64_t sub_1D530D3FC(uint64_t result, _QWORD *a2, unsigned int *a3, _DWORD *a4, int *a5, _DWORD *a6)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;

  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E9978138;
  v6 = a2[1];
  *(_QWORD *)(result + 24) = *a2;
  *(_QWORD *)(result + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(result + 40) = *a3;
  v9 = *a5;
  *(_DWORD *)(result + 48) = *a4;
  *(_DWORD *)(result + 52) = v9;
  *(_DWORD *)(result + 56) = *a6;
  return result;
}

uint64_t sub_1D530D44C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)a1 = &off_1E9978138;
  v2 = a1 + 24;
  (***(void (****)(_QWORD))(a1 + 24))(*(_QWORD *)(a1 + 24));
  sub_1D5282EB4(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_1D530D4A8(uint64_t a1)
{
  sub_1D530D44C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D530D4CC(uint64_t a1)
{
  return sub_1D52E658C(*(_QWORD *)(a1 + 24)) + *(_QWORD *)(a1 + 40);
}

void sub_1D530D4F8(uint64_t a1@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  int v7;
  int *v8;
  unsigned int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  __int16 *v24;
  __int16 v25;
  unint64_t *p_shared_owners;
  __int128 v27;
  double v28[2];
  unsigned int v29[2];
  int v30;
  int v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  _DWORD v35[3];
  CGRect v36;
  CGRect v37;
  CGRect v38;

  *a3 = 0;
  a3[1] = 0;
  v7 = *(_DWORD *)(a1 + 48);
  v6 = *(_DWORD *)(a1 + 52);
  v34 = 0;
  sub_1D5282DF0(v35, v6, v7);
  if (sub_1D53ADD44((int *)a2, (int *)&v34))
  {
    v9 = *(_DWORD *)(a1 + 56);
    v8 = (int *)(a1 + 56);
    v32 = *((_QWORD *)v8 - 2) + 2 * (*a2 + v9 * (uint64_t)(int)a2[1]);
    sub_1D530EE20((_QWORD *)v8 - 4, (unint64_t *)&v32, a2 + 3, a2 + 2, v8, &v27);
    sub_1D5292548((uint64_t)a3, &v27);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (!*((_QWORD *)&v27 + 1))
      return;
    v11 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    goto LABEL_20;
  }
  sub_1D530AD68(2 * (int)a2[2] * (uint64_t)(int)a2[3], &v32);
  v29[0] = 0;
  sub_1D530EFB0(&v32, v29, a2 + 3, a2 + 2, a2 + 2, &v27);
  sub_1D5292548((uint64_t)a3, &v27);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v36.origin.x = (double)(int)*a2;
  v36.origin.y = (double)(int)a2[1];
  v36.size.width = (double)(int)a2[2];
  v36.size.height = (double)(int)a2[3];
  v38.origin.x = (double)(int)v34;
  v38.origin.y = (double)SHIDWORD(v34);
  v38.size.width = (double)v35[0];
  v38.size.height = (double)v35[1];
  v37 = CGRectIntersection(v36, v38);
  *(CGFloat *)&v27 = v37.origin.x;
  *((_QWORD *)&v27 + 1) = *(_QWORD *)&v37.origin.y;
  v28[0] = v37.size.width;
  v28[1] = v37.size.height;
  sub_1D529EAEC(v29, (double *)&v27);
  sub_1D529EAEC(&v30, v28);
  if (v31)
  {
    for (i = 0; i < v31; ++i)
    {
      v17 = sub_1D52E658C(*(_QWORD *)(a1 + 24));
      v18 = *(_QWORD *)(a1 + 40);
      v19 = (int)v29[1];
      v20 = *(unsigned int *)(a1 + 56);
      v21 = sub_1D52E658C(v32);
      v22 = v30;
      if (v30)
      {
        v23 = (_WORD *)(v21
                      - 2 * (int)(*a2 & ((int)*a2 >> 31))
                      + 2 * (i - (int)(a2[1] & ((int)a2[1] >> 31))) * (int)a2[2]);
        v24 = (__int16 *)(v17 + v18 + 2 * (i + v19) * v20 + 2 * (int)v29[0]);
        do
        {
          v25 = *v24++;
          *v23++ = v25;
          --v22;
        }
        while (v22);
      }
    }
  }
  v10 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
LABEL_20:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1D530D778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_1D5282EB4((uint64_t)va);
  sub_1D5282EB4(v8);
  _Unwind_Resume(a1);
}

uint64_t (***sub_1D530D7B0(uint64_t a1))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = *(uint64_t (****)(_QWORD))(a1 + 24);
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

uint64_t sub_1D530D7C8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  else
    return 1;
}

uint64_t sub_1D530D7E4(uint64_t a1, int *a2, __int16 a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  __int16 *v13;
  __int16 *v14;
  __int16 v15;
  unsigned __int16 v16;
  void *exception;
  uint64_t v19;
  int v20;

  v7 = *(_DWORD *)(a1 + 48);
  v6 = *(_DWORD *)(a1 + 52);
  v19 = 0;
  sub_1D5282DF0(&v20, v6, v7);
  if (!sub_1D53ADD44(a2, (int *)&v19))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v8 = sub_1D52E658C(*(_QWORD *)(a1 + 24));
  v9 = a2[1];
  v10 = (a2[3] + v9);
  if (v9 >= v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    v12 = a2[2];
    do
    {
      if ((int)v12 >= 1)
      {
        v13 = (__int16 *)(v8
                        + *(_QWORD *)(a1 + 40)
                        + 2 * *a2
                        + 2 * (*(_DWORD *)(a1 + 56) * v9));
        v14 = &v13[v12];
        do
        {
          v15 = *v13++;
          v16 = v15 - a3;
          if (v11 < (unsigned __int16)(v15 - a3))
            v11 = v16;
        }
        while (v13 < v14);
      }
      ++v9;
    }
    while (v9 != v10);
  }
  return (unsigned __int16)(v11 + a3);
}

void sub_1D530D8F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530D90C(uint64_t a1, unsigned int *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  double *v18;
  unsigned int v19;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  double v28;
  uint64_t v30;
  void *__p[3];

  v4 = a3;
  if (a4 > a3)
  {
    v30 = 0;
    sub_1D528F9B4(__p, (unsigned __int16)(a4 - a3 + 1), &v30);
    v8 = sub_1D52E658C(*(_QWORD *)(a1 + 24));
    v9 = a2[1];
    v10 = a2[3] + v9;
    v11 = v4;
    v12 = v4;
    if (v9 < v10)
    {
      v13 = *(_DWORD *)(a1 + 56);
      v14 = v8 + *(_QWORD *)(a1 + 40) + 2 * *a2;
      v15 = (int)a2[2];
      v12 = v4;
      do
      {
        if ((int)v15 >= 1)
        {
          v16 = (unsigned __int16 *)(v14 + 2 * (v13 * v9));
          v17 = &v16[v15];
          v18 = (double *)__p[0];
          do
          {
            v19 = *v16;
            if (v19 >= v4 && v19 <= a4)
            {
              v18[v19 - v4] = v18[v19 - v4] + 1.0;
              if (v19 > (unsigned __int16)v12)
                v12 = v19;
            }
            ++v16;
          }
          while (v16 < v17);
        }
        ++v9;
      }
      while (v9 != v10);
      v11 = (unsigned __int16)v12;
    }
    v21 = v12 + ((a4 - v11) & ((int)(a4 - v11) >> 31));
    if (v4 < (unsigned __int16)(v12 + ((a4 - v11) & ((int)(a4 - v11) >> 31))))
    {
      v22 = (34953 * a4) >> 20;
      do
      {
        v23 = (unsigned __int16)v21 - v22;
        v24 = v21 - 1;
        if (v23 < (unsigned __int16)(v21 - 1))
        {
          v25 = 0;
          v26 = 0;
          v27 = (unsigned __int16)(v21 - 1);
          do
          {
            if (v4 > (unsigned __int16)v24)
            {
              LOWORD(v4) = v21;
              goto LABEL_30;
            }
            v28 = *((double *)__p[0] + (int)(v27 - v4));
            if (v28 != 0.0)
            {
              if (!(_WORD)v26)
                v26 = v24;
              v25 += llround(v28);
              if (v25 > 0xA)
              {
                LOWORD(v4) = v21;
                goto LABEL_33;
              }
            }
            v27 = (unsigned __int16)--v24;
          }
          while (v23 < (unsigned __int16)v24);
          if ((_WORD)v26)
            goto LABEL_27;
        }
        v26 = (unsigned __int16)v21 - v22;
LABEL_27:
        v21 = v26;
      }
      while (v4 < (unsigned __int16)v26);
    }
LABEL_30:
    if (__p[0])
    {
LABEL_33:
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  return (unsigned __int16)v4;
}

void sub_1D530DABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D530DAD8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _WORD *v3;
  unint64_t *v6;
  unsigned int v7;
  int *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  void *exception;
  int v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;

  v3 = *(_WORD **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 8 || *v3 || v3[1] != 1 || v3[2] != 1 || v3[3])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v6 = (unint64_t *)(a1 + 40);
  sub_1D528304C(&v26, (unint64_t *)(a1 + 40));
  v24 = 2 * *(unsigned int *)(a1 + 56);
  sub_1D528304C(&v25, &v24);
  v27 = v26;
  v26 = *sub_1D530F1B8(&v27, &v25);
  sub_1D528304C(&v25, v6);
  v24 = 2 * *(unsigned int *)(a1 + 56);
  sub_1D528304C(&v22, &v24);
  v27 = v22;
  v23 = *sub_1D52B42B4(&v27, &v26);
  v27 = v25;
  v7 = *sub_1D52B4588(&v27, &v23);
  v21 = 2;
  v27 = v7;
  v8 = sub_1D530F1B8(&v27, &v21);
  if (*(_DWORD *)(a1 + 48))
  {
    v9 = 0;
    v10 = 0;
    v11 = *v8;
    v12 = (*v8 & 1) == 0;
    do
    {
      v13 = sub_1D52E658C(*(_QWORD *)(a1 + 24));
      v14 = *(unsigned int *)(a1 + 52);
      if ((((_BYTE)v11 + ~((_BYTE)v26 + (_BYTE)v10)) & 1u) < v14)
      {
        v15 = (v12 ^ v26) & 1;
        do
        {
          v16 = v13 + *(_QWORD *)(a1 + 40) + 2 * *(_DWORD *)(a1 + 56) * v10;
          v17 = *(unsigned __int16 *)(v16 + 2 * v15);
          if (v17 >= a3)
            v18 = v9;
          else
            v18 = *(unsigned __int16 *)(v16 + 2 * v15);
          if (v17 > v9)
            v9 = v18;
          v15 += 2;
        }
        while (v15 < v14);
      }
      ++v10;
      v12 ^= 1u;
    }
    while (v10 < *(_DWORD *)(a1 + 48));
  }
  else
  {
    LOWORD(v9) = 0;
  }
  return (unsigned __int16)v9;
}

void sub_1D530DCCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1D530DCE0(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int16 *v17;
  uint64_t v18;
  int v19;
  void *exception;
  uint64_t v21;
  int v22;

  v5 = *(_DWORD *)(a1 + 48);
  v4 = *(_DWORD *)(a1 + 52);
  v21 = 0;
  sub_1D5282DF0(&v22, v4, v5);
  if (!sub_1D53ADD44(a2, (int *)&v21))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v6 = sub_1D52E658C(*(_QWORD *)(a1 + 24));
  v7 = a2[1];
  v8 = (a2[3] + v7);
  result = 0.0;
  if (v7 < v8)
  {
    v10 = 0;
    v11 = 0;
    v12 = *a2;
    v13 = *(_DWORD *)(a1 + 56);
    v14 = (a2[2] + v12);
    v15 = v6 + *(_QWORD *)(a1 + 40) + 2 * v12;
    v16 = v7 * v13;
    do
    {
      if (v12 < v14)
      {
        v17 = (unsigned __int16 *)(v15 + 2 * v16);
        v18 = v14 - v12;
        do
        {
          v19 = *v17++;
          v11 += v19;
          if (v19)
            ++v10;
          --v18;
        }
        while (v18);
      }
      ++v7;
      v16 += v13;
    }
    while (v7 != v8);
    if (v10)
      return (double)v11 / (double)v10;
  }
  return result;
}

void sub_1D530DDF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D530DE0C(uint64_t a1@<X0>, int *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  void *exception;
  uint64_t v13;
  int v14;

  v7 = *(_DWORD *)(a1 + 48);
  v6 = *(_DWORD *)(a1 + 52);
  v13 = 0;
  sub_1D5282DF0(&v14, v6, v7);
  if (!sub_1D53ADD44(a2, (int *)&v13))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v13 = 0;
  sub_1D528F9B4(a3, 4uLL, &v13);
  v8 = sub_1D530DF74(a1, a2, 0);
  if (a3[1] == *a3
    || (*(double *)*a3 = v8, v9 = sub_1D530DF74(a1, a2, 1), a3[1] - *a3 < 9uLL)
    || (*(double *)(*a3 + 8) = v9, v10 = sub_1D530DF74(a1, a2, 2), a3[1] - *a3 < 0x11uLL)
    || (*(double *)(*a3 + 16) = v10, v11 = sub_1D530DF74(a1, a2, 3), a3[1] - *a3 <= 0x18uLL))
  {
    sub_1D528EAE0();
  }
  *(double *)(*a3 + 24) = v11;
}

void sub_1D530DF48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_1D530DF74(uint64_t a1, int *a2, char a3)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;

  v6 = sub_1D52E658C(*(_QWORD *)(a1 + 24));
  v8 = *a2;
  v7 = a2[1];
  v9 = v7 & 1;
  if (v7 < 0)
    v9 = -v9;
  if (v9 == (a3 & 2))
    v10 = a2[1];
  else
    v10 = v7 + 1;
  v11 = *a2 & 1;
  if (v8 < 0)
    v11 = -v11;
  if (v11 == (a3 & 1))
    v12 = *a2;
  else
    v12 = v8 + 1;
  v13 = a2[3] + v7;
  if (v10 >= v13)
  {
    v15 = 0;
    v14 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = a2[2] + v8;
    do
    {
      if (v12 < v16)
      {
        v17 = v6 + *(_QWORD *)(a1 + 40) + 2 * *(_DWORD *)(a1 + 56) * v10;
        v18 = v12;
        do
        {
          v14 += *(unsigned __int16 *)(v17 + 2 * v18);
          if (*(_WORD *)(v17 + 2 * v18))
            ++v15;
          v18 += 2;
        }
        while (v18 < v16);
      }
      v10 += 2;
    }
    while (v10 < v13);
  }
  return (double)v14 / (double)v15;
}

double sub_1D530E05C(uint64_t a1, int *a2, unsigned int a3, unsigned int a4, int a5, double a6)
{
  int v12;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  double v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  _BOOL4 v28;
  _BOOL4 v29;
  double v30;
  float v31;
  void *exception;
  uint64_t v34;
  int v35;

  v13 = *(_DWORD *)(a1 + 48);
  v12 = *(_DWORD *)(a1 + 52);
  v34 = 0;
  sub_1D5282DF0(&v35, v12, v13);
  if (!sub_1D53ADD44(a2, (int *)&v34))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v14 = 0.0;
  if ((a2[2] * a2[3]) >= 2)
  {
    v15 = sub_1D52E658C(*(_QWORD *)(a1 + 24));
    v16 = a2[1];
    v17 = (a2[3] + v16);
    if (v16 < v17)
    {
      v18 = 0;
      v19 = *a2;
      v20 = *(_DWORD *)(a1 + 56);
      v21 = (a2[2] + v19);
      v22 = v15 + *(_QWORD *)(a1 + 40) + 2 * v19;
      v23 = v16 * v20;
      v24 = 0.0;
      do
      {
        if (v19 < v21)
        {
          v25 = (unsigned __int16 *)(v22 + 2 * v23);
          v26 = v21 - v19;
          do
          {
            v27 = *v25++;
            v28 = v27 >= a3;
            v29 = v27 <= a4;
            v30 = v24 + ((double)v27 - a6) * ((double)v27 - a6);
            v18 += v28 && v29;
            if (v28 && v29)
              v24 = v30;
            --v26;
          }
          while (v26);
        }
        ++v16;
        v23 += v20;
      }
      while (v16 != v17);
      if (v18 < 2)
      {
        return 0.0;
      }
      else if (a5)
      {
        v31 = v24 / (float)v18;
        return sqrtf(v31);
      }
      else
      {
        return sqrt(v24 / (double)(v18 - 1));
      }
    }
  }
  return v14;
}

void sub_1D530E1FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530E210(uint64_t a1, int *a2, char a3, unsigned int a4, unsigned int a5, double a6)
{
  uint64_t result;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  double v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  _BOOL4 v26;

  result = sub_1D52E658C(*(_QWORD *)(a1 + 24));
  v14 = *a2;
  v13 = a2[1];
  v15 = v13 & 1;
  if (v13 < 0)
    v15 = -v15;
  if (v15 == (a3 & 2))
    v16 = a2[1];
  else
    v16 = v13 + 1;
  v17 = *a2 & 1;
  if (v14 < 0)
    v17 = -v17;
  if (v17 == (a3 & 1))
    v18 = *a2;
  else
    v18 = v14 + 1;
  v19 = a2[3] + v13;
  v20 = 0.0;
  if (v16 < v19)
  {
    v21 = 0;
    v22 = result + *(_QWORD *)(a1 + 40);
    v23 = a2[2] + v14;
    do
    {
      if (v18 < v23)
      {
        v24 = v18;
        do
        {
          v25 = *(unsigned __int16 *)(v22 + 2 * *(_DWORD *)(a1 + 56) * v16 + 2 * v24);
          result = v25 >= a4;
          v26 = v25 <= a5;
          v21 += result & v26;
          if ((result & v26) != 0)
            v20 = v20 + ((double)v25 - a6) * ((double)v25 - a6);
          v24 += 2;
        }
        while (v24 < v23);
      }
      v16 += 2;
    }
    while (v16 < v19);
  }
  return result;
}

void sub_1D530E35C(uint64_t a1, int *a2, int a3, double a4)
{
  int v8;
  int v9;
  double v12;
  unsigned __int16 v13;
  unsigned int v14;
  void *exception;
  uint64_t v16;
  int v17;

  v9 = *(_DWORD *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 52);
  v16 = 0;
  sub_1D5282DF0(&v17, v8, v9);
  if (!sub_1D53ADD44(a2, (int *)&v16))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (a4 >= 0.0 && ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
    || (unint64_t)(*(_QWORD *)&a4 - 1) <= 0xFFFFFFFFFFFFELL)
  {
    v12 = sub_1D530E05C(a1, a2, 1u, 0xFFFFu, a3, a4);
    v13 = llround(fmax(floor(a4 + v12 * -5.0), 0.0));
    if ((v13 & 0xFFFE) != 0)
      v14 = v13;
    else
      v14 = 1;
    sub_1D530E05C(a1, a2, v14, vcvtpd_s64_f64(a4 + v12 * 5.0), a3, a4);
  }
}

void sub_1D530E4BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530E4D0@<X0>(uint64_t a1@<X0>, int *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  int v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  unsigned __int16 v15;
  unsigned int v16;
  double v17;
  void *exception;
  uint64_t v20;
  int v21;

  v9 = *(_DWORD *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 52);
  v20 = 0;
  sub_1D5282DF0(&v21, v8, v9);
  if (!sub_1D53ADD44(a2, (int *)&v20))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  result = (uint64_t)sub_1D528EB68(a4, 4uLL);
  v11 = 0;
  do
  {
    v12 = *(double *)(*a3 + 8 * v11);
    if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v12 <= 0.0)
      break;
    sub_1D530E210(a1, a2, v11, 1u, 0xFFFFu, v12);
    v14 = *(double *)(*a3 + 8 * v11);
    v15 = llround(fmax(floor(v14 + v13 * -5.0), 0.0));
    v16 = (v15 & 0xFFFE) != 0 ? v15 : 1;
    result = sub_1D530E210(a1, a2, v11, v16, vcvtpd_s64_f64(v14 + v13 * 5.0), *(double *)(*a3 + 8 * v11));
    *(double *)(*a4 + 8 * v11) = v17;
    if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      break;
  }
  while (v17 > 0.0 && v11++ != 3);
  return result;
}

void sub_1D530E650(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D530E680(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  sub_1D5285A94(&v4, (_QWORD *)(a1 + 8));
  sub_1D53A88D0(&v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1D530E6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_1D530E700(uint64_t a1, double ***a2)
{
  double **v3;
  double *v4;
  double *v5;
  float v6;
  unint64_t v7;
  float v8;
  float v9;
  float64x2_t *v10;
  int64_t v11;
  float32x2_t v12;
  float v13;
  float v14;
  double *v15;
  double **v16;
  float v17;
  unint64_t v18;
  float v19;
  char *result;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  char *v28;
  BOOL v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  float v33;
  float v34;
  _BOOL4 v35;
  float v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int j;
  int v41;
  int v42;
  int i;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  BOOL v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  float32x2_t v56;
  float v57;
  float v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v5 = **a2;
  v4 = (*a2)[1];
  v6 = 0.0;
  v7 = (char *)v4 - (char *)v5;
  if (v4 == v5)
  {
    v9 = 0.0;
    v8 = 0.0;
  }
  else
  {
    v8 = *v5;
    if (v7 < 9)
    {
      v9 = 0.0;
    }
    else
    {
      v9 = v5[1];
      if (v7 >= 0x11)
        v6 = v5[2];
    }
  }
  v10 = (float64x2_t *)v3[3];
  v11 = (char *)v3[4] - (char *)v10;
  if (v11 == 32)
  {
    v12 = vcvt_f32_f64(*v10);
    v13 = v10[1].f64[0];
    v14 = v10[1].f64[1];
  }
  else
  {
    v12 = 0;
    v13 = 0.0;
    v14 = 0.0;
  }
  v56 = v12;
  v57 = v13;
  v58 = v14;
  v16 = v3 + 6;
  v15 = v3[6];
  v17 = 0.0;
  v18 = (char *)v16[1] - (char *)v15;
  if (v18)
  {
    v19 = *v15;
    if (v18 >= 9)
      v17 = v15[1];
  }
  else
  {
    v19 = 0.0;
  }
  result = (char *)sub_1D52E658C(*(_QWORD *)(a1 + 24));
  v24 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v24)
  {
    v25 = 0;
    v26 = 1.0 / 800.0 / 800.0;
    v27 = 1.0 / 2000.0 / 2000.0;
    v28 = &result[*(_QWORD *)(a1 + 40)];
    v29 = v4 == v5;
    v30 = *(_DWORD *)(a1 + 52);
    v31 = v11 != 32 || v4 == v5;
    v32 = v30 >> 1;
    v33 = 800.0;
    v34 = 2000.0;
    v35 = v11 == 32 && v4 == v5;
    if (v11 == 32)
      v29 = 1;
    if (v32 <= 1)
      v32 = 1;
    v36 = 0.0;
    do
    {
      result = &v28[2 * v30 * v25];
      if (v31)
      {
        if (v35)
        {
          if (v30 >= 2)
          {
            for (i = 0; i != v32; ++i)
            {
              LOWORD(v21) = *(_WORD *)result;
              v21 = (float)LODWORD(v21);
              v23 = 1.0 - (float)((float)(v21 * v21) * v26);
              if (v21 <= v33)
                v21 = v21 + (float)(v23 * (float)(v56.f32[i & 1 | (2 * (v25 & 1))] * -0.5));
              v22 = v21 + (float)((float)(1.0 - (float)((float)(v21 * v21) * v27)) * (float)(v8 * -0.5));
              if (v21 <= v34)
                v21 = v21 + (float)((float)(1.0 - (float)((float)(v21 * v21) * v27)) * (float)(v8 * -0.5));
              v44 = (int)v21;
              if ((int)v21 >= 0xFFFF)
                v44 = 0xFFFF;
              *(_WORD *)result = v44 & ~(unsigned __int16)(v44 >> 31);
              result += 2;
            }
            v37 = v32;
          }
          else
          {
            v37 = 0;
          }
          if (v37 < v30)
          {
            do
            {
              LOWORD(v21) = *(_WORD *)result;
              v21 = (float)LODWORD(v21);
              v23 = 1.0 - (float)((float)(v21 * v21) * v26);
              if (v21 <= v33)
                v21 = v21 + (float)(v23 * (float)(v56.f32[v37 & 1 | (2 * (v25 & 1))] * 0.5));
              v22 = v21 + (float)((float)(1.0 - (float)((float)(v21 * v21) * v27)) * (float)(v8 * 0.5));
              if (v21 <= v34)
                v21 = v21 + (float)((float)(1.0 - (float)((float)(v21 * v21) * v27)) * (float)(v8 * 0.5));
              v45 = (int)v21;
              if ((int)v21 >= 0xFFFF)
                v45 = 0xFFFF;
              *(_WORD *)result = v45 & ~(unsigned __int16)(v45 >> 31);
              result += 2;
              ++v37;
            }
            while (v30 != v37);
          }
        }
        else
        {
          v21 = (float)(v36 * (float)(v17 * v36)) + (float)(v19 * v36);
          if (v29)
          {
            if (v30 >= 2)
            {
              v22 = (float)(v8 + v21) * -0.5;
              v47 = v32;
              do
              {
                LOWORD(v23) = *(_WORD *)result;
                v23 = (float)LODWORD(v23);
                if (v23 <= v34)
                  v23 = v23 + (float)((float)(1.0 - (float)((float)(v23 * v23) * v27)) * v22);
                v48 = (int)v23;
                if ((int)v23 >= 0xFFFF)
                  v48 = 0xFFFF;
                *(_WORD *)result = v48 & ~(unsigned __int16)(v48 >> 31);
                result += 2;
                --v47;
              }
              while (v47);
              v39 = v32;
            }
            else
            {
              v39 = 0;
            }
            v49 = v30 >= v39;
            v50 = v30 - v39;
            if (v50 != 0 && v49)
            {
              v21 = (float)(v8 + v21) * 0.5;
              do
              {
                LOWORD(v22) = *(_WORD *)result;
                v22 = (float)LODWORD(v22);
                v23 = v22 + (float)((float)(1.0 - (float)((float)(v22 * v22) * v27)) * v21);
                if (v22 <= v34)
                  v22 = v22 + (float)((float)(1.0 - (float)((float)(v22 * v22) * v27)) * v21);
                v51 = (int)v22;
                if ((int)v22 >= 0xFFFF)
                  v51 = 0xFFFF;
                *(_WORD *)result = v51 & ~(unsigned __int16)(v51 >> 31);
                result += 2;
                --v50;
              }
              while (v50);
            }
          }
          else
          {
            if (v30 >= 2)
            {
              v52 = v32;
              do
              {
                LOWORD(v22) = *(_WORD *)result;
                v22 = (float)LODWORD(v22);
                v23 = v22
                    + (float)((float)(1.0 - (float)((float)(v22 * v22) * v27))
                            * (float)((float)(v21
                                            + (float)((float)(v8 + (float)(v9 * v22)) + (float)((float)(v6 * v22) * v22)))
                                    * -0.5));
                if (v22 <= v34)
                  v22 = v22
                      + (float)((float)(1.0 - (float)((float)(v22 * v22) * v27))
                              * (float)((float)(v21
                                              + (float)((float)(v8 + (float)(v9 * v22))
                                                      + (float)((float)(v6 * v22) * v22)))
                                      * -0.5));
                v53 = (int)v22;
                if ((int)v22 >= 0xFFFF)
                  v53 = 0xFFFF;
                *(_WORD *)result = v53 & ~(unsigned __int16)(v53 >> 31);
                result += 2;
                --v52;
              }
              while (v52);
              v46 = v32;
            }
            else
            {
              v46 = 0;
            }
            v49 = v30 >= v46;
            v54 = v30 - v46;
            if (v54 != 0 && v49)
            {
              do
              {
                LOWORD(v22) = *(_WORD *)result;
                v22 = (float)LODWORD(v22);
                v23 = v22
                    + (float)((float)(1.0 - (float)((float)(v22 * v22) * v27))
                            * (float)((float)(v21
                                            + (float)((float)(v8 + (float)(v9 * v22)) + (float)((float)(v6 * v22) * v22)))
                                    * 0.5));
                if (v22 <= v34)
                  v22 = v22
                      + (float)((float)(1.0 - (float)((float)(v22 * v22) * v27))
                              * (float)((float)(v21
                                              + (float)((float)(v8 + (float)(v9 * v22))
                                                      + (float)((float)(v6 * v22) * v22)))
                                      * 0.5));
                v55 = (int)v22;
                if ((int)v22 >= 0xFFFF)
                  v55 = 0xFFFF;
                *(_WORD *)result = v55 & ~(unsigned __int16)(v55 >> 31);
                result += 2;
                --v54;
              }
              while (v54);
            }
          }
        }
      }
      else
      {
        if (v30 >= 2)
        {
          for (j = 0; j != v32; ++j)
          {
            LOWORD(v21) = *(_WORD *)result;
            v21 = (float)LODWORD(v21);
            if (v21 <= v33)
              v21 = v21
                  + (float)((float)(1.0 - (float)((float)(v21 * v21) * v26))
                          * (float)(v56.f32[j & 1 | (2 * (v25 & 1))] * -0.5));
            v23 = 1.0 - (float)((float)(v21 * v21) * v27);
            v22 = v21
                + (float)(v23
                        * (float)((float)((float)(v8 + (float)(v9 * v21)) + (float)((float)(v6 * v21) * v21)) * -0.5));
            if (v21 <= v34)
              v21 = v21
                  + (float)(v23
                          * (float)((float)((float)(v8 + (float)(v9 * v21)) + (float)((float)(v6 * v21) * v21)) * -0.5));
            v41 = (int)v21;
            if ((int)v21 >= 0xFFFF)
              v41 = 0xFFFF;
            *(_WORD *)result = v41 & ~(unsigned __int16)(v41 >> 31);
            result += 2;
          }
          v38 = v32;
        }
        else
        {
          v38 = 0;
        }
        if (v38 < v30)
        {
          do
          {
            LOWORD(v21) = *(_WORD *)result;
            v21 = (float)LODWORD(v21);
            if (v21 <= v33)
              v21 = v21
                  + (float)((float)(1.0 - (float)((float)(v21 * v21) * v26))
                          * (float)(v56.f32[v38 & 1 | (2 * (v25 & 1))] * 0.5));
            v23 = 1.0 - (float)((float)(v21 * v21) * v27);
            v22 = v21
                + (float)(v23
                        * (float)((float)((float)(v8 + (float)(v9 * v21)) + (float)((float)(v6 * v21) * v21)) * 0.5));
            if (v21 <= v34)
              v21 = v21
                  + (float)(v23
                          * (float)((float)((float)(v8 + (float)(v9 * v21)) + (float)((float)(v6 * v21) * v21)) * 0.5));
            v42 = (int)v21;
            if ((int)v21 >= 0xFFFF)
              v42 = 0xFFFF;
            *(_WORD *)result = v42 & ~(unsigned __int16)(v42 >> 31);
            result += 2;
            ++v38;
          }
          while (v30 != v38);
        }
      }
      ++v25;
      v36 = v36 + 1.0;
    }
    while (v25 != v24);
  }
  return result;
}

_QWORD *sub_1D530EC7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  void *exception;
  char *__s2;
  CC_SHA256_CTX c;
  char __s1[81];
  unsigned __int8 md[32];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  CC_SHA256_Init(&c);
  if (*(_DWORD *)(a1 + 48))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = sub_1D52E658C(*(_QWORD *)(a1 + 24));
      CC_SHA256_Update(&c, (const void *)(v6 + *(_QWORD *)(a1 + 40) + v4 * *(unsigned int *)(a1 + 56)), 2 * *(_DWORD *)(a1 + 52));
      ++v5;
      v4 += 2;
    }
    while (v5 < *(unsigned int *)(a1 + 48));
  }
  CC_SHA256_Final(md, &c);
  v7 = 0;
  __s1[0] = 0;
  do
  {
    __s2 = 0;
    if (asprintf(&__s2, "%02xd", md[v7]) != 3)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v8 = __s2;
    strncat(__s1, __s2, 2uLL);
    if (v7 <= 0x1E && (v7 & 1) != 0)
      *(_WORD *)&__s1[strlen(__s1)] = 58;
    if (v8)
      free(v8);
    ++v7;
  }
  while (v7 != 32);
  return sub_1D52850A0(a2, __s1);
}

void sub_1D530EE04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D530EE20(_QWORD *a1@<X1>, unint64_t *a2@<X2>, unsigned int *a3@<X3>, unsigned int *a4@<X4>, int *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;

  v12 = operator new(0x58uLL);
  sub_1D530EEB0(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  sub_1D5285658((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1D530EE9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D530EEB0(_QWORD *a1, _QWORD *a2, unint64_t *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  a1[2] = 0;
  *a1 = &unk_1E9975978;
  a1[1] = 0;
  sub_1D530EEFC((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1D530EEE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530EEFC(uint64_t a1, _QWORD *a2, unint64_t *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  int v17;
  int v18;
  unsigned int v19;

  sub_1D528304C(&v19, a3);
  sub_1D5285A24(&v18, a4);
  sub_1D5285A24(&v17, a5);
  v11 = *a6;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E9978138;
  v12 = a2[1];
  *(_QWORD *)(a1 + 24) = *a2;
  *(_QWORD *)(a1 + 32) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_QWORD *)(a1 + 40) = v19;
  v15 = v17;
  *(_DWORD *)(a1 + 48) = v18;
  *(_DWORD *)(a1 + 52) = v15;
  *(_DWORD *)(a1 + 56) = v11;
  return a1;
}

void sub_1D530EFB0(uint64_t *a1@<X1>, unsigned int *a2@<X2>, unsigned int *a3@<X3>, unsigned int *a4@<X4>, unsigned int *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;

  v12 = operator new(0x58uLL);
  sub_1D530F040(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  sub_1D5285658((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1D530F02C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D530F040(_QWORD *a1, uint64_t *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  a1[2] = 0;
  *a1 = &unk_1E9975978;
  a1[1] = 0;
  sub_1D530F08C((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1D530F078(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D530F08C(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v11 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  v24 = *a2;
  v25 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  sub_1D5285A24(&v23, a3);
  sub_1D5285A24(&v22, a4);
  sub_1D5285A24(&v21, a5);
  sub_1D5285A24(&v20, a6);
  *(_QWORD *)a1 = &off_1E9978138;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v10;
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)(a1 + 40) = v23;
  v16 = v21;
  *(_DWORD *)(a1 + 48) = v22;
  *(_DWORD *)(a1 + 52) = v16;
  *(_DWORD *)(a1 + 56) = v20;
  if (v10)
  {
    v17 = (unint64_t *)&v10->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return a1;
}

void sub_1D530F198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_1D530F1B8(_DWORD *result, _DWORD *a2)
{
  void *exception;

  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  *result /= *a2;
  return result;
}

void sub_1D530F214(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D530F228(uint64_t a1)
{
  NSObject *v1;
  NSObject *v2;
  int v3;
  int v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  __int128 *v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  int v23;
  __int16 v24;
  int v25;
  uint8_t *v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  signed int v36;
  int v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int active;
  int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  int v60;
  BOOL v61;
  unint64_t v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  int v67;
  void *v68;
  void *v69;
  uint64_t v70;
  int v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _DWORD *v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v84)(uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  unsigned int *v86;
  dispatch_semaphore_t v87;
  void *v88;
  unsigned int *v89;
  dispatch_semaphore_t v90;
  void *v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  signed int v100;
  char *v101;
  int v102;
  uint64_t v103;
  int v105;
  char *v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  int v112;
  int v113;
  unsigned int *v114;
  unsigned int *v115;
  dispatch_semaphore_t v116;
  void *v117;
  uint64_t i;
  int v119;
  unsigned int v120;
  unsigned int v121;
  dispatch_semaphore_t v122;
  void *v123;
  NSObject *v124;
  NSObject *v125;
  void (__cdecl *v126)(void *);
  _DWORD **v127;
  uint64_t v128;
  _DWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  char *v136;
  int v137;
  unsigned int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  unsigned __int8 v144;
  signed int v145;
  unsigned __int8 v146;
  uint64_t v147;
  unsigned int v148;
  unsigned int v149;
  _QWORD *v150;
  uint64_t v151;
  unsigned int v152;
  int v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  void *v159;
  void *exception;
  void *v161;
  void *v162;
  void *v163;
  unsigned int v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  size_t v170;
  int v171;
  int v172;
  unsigned int v173;
  unsigned int v174;
  void (**v175)(_QWORD);
  signed int v176;
  uint64_t v177;
  signed int v178;
  int v179;
  int v180;
  char *v181;
  __int128 *v182;
  unint64_t v183;
  int v184;
  int v185;
  unsigned int group;
  NSObject *groupa;
  int v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  int v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  _QWORD v197[5];
  int v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint8_t buf[2];
  _BYTE v206[8192];
  __int128 v207;
  __int128 v208;
  uint64_t v209;

  v194 = MEMORY[0x1E0C80A78](a1);
  v209 = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if ((unint64_t)(v194 + 1) >= 2 && os_signpost_enabled(v1))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v2, OS_SIGNPOST_INTERVAL_BEGIN, v194, "CLosslessJpegUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v197[0] = MEMORY[0x1E0C809B0];
  v197[1] = 3221225472;
  v197[2] = sub_1D53102E8;
  v197[3] = &unk_1E996F870;
  v197[4] = v194;
  v175 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v197);
  v207 = 0u;
  v208 = 0u;
  v203 = 0u;
  v204 = 0u;
  v201 = 0u;
  v202 = 0u;
  v199 = 0u;
  v200 = 0u;
  v3 = *(_DWORD *)(v194 + 44);
  v4 = *(_DWORD *)(v194 + 48);
  v5 = (unsigned __int16 *)sub_1D530B618(v194);
  v6 = *(int *)(v194 + 40);
  v196 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v194 + 152))(v194);
  v198 = *(_DWORD *)(v194 + 40);
  v195 = *sub_1D5294254(&v198, &v196);
  if ((int)v195 <= (int)v6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v8 = *(_QWORD *)(v194 + 192);
  v7 = *(_QWORD *)(v194 + 200);
  if (v8 != v7)
  {
    v9 = 0;
    v10 = (_DWORD *)&v199 + 2;
    v11 = v8 + 4;
    do
    {
      *v10 = *(_DWORD *)(v11 - 4);
      v10 += 6;
      if (v9 > 2)
        break;
      ++v9;
      v31 = v11 == v7;
      v11 += 4;
    }
    while (!v31);
  }
  if (SDWORD2(v199) < 1 || (int)v201 < 1)
  {
    v13 = 0;
  }
  else
  {
    *(_QWORD *)&v199 = v5;
    HIDWORD(v199) = v4;
    LODWORD(v200) = v3 - DWORD2(v199);
    *((_QWORD *)&v200 + 1) = &v5[DWORD2(v199)];
    DWORD1(v201) = v4;
    DWORD2(v201) = v3 - v201;
    if (SDWORD2(v202) >= 1)
    {
      *(_QWORD *)&v202 = &v5[DWORD2(v199) + v201];
      HIDWORD(v202) = v4;
      LODWORD(v203) = v3 - DWORD2(v202);
    }
    v13 = &v199;
  }
  (*(void (**)(_QWORD, unsigned __int16 *, uint64_t))(**(_QWORD **)(v194 + 24) + 32))(*(_QWORD *)(v194 + 24), v5, 4096);
  if (bswap32(*v5) >> 16 != 65496)
    goto LABEL_168;
  v184 = v3;
  group = 0;
  v181 = (char *)v5;
  v182 = v13;
  v192 = 0;
  v188 = 0;
  v190 = 0;
  v14 = v5 + 1;
  v207 = 0u;
  v208 = 0u;
  do
  {
    v15 = __rev16(*v14);
    if (v15 == 0xFFFF)
    {
      v14 = (unsigned __int16 *)((char *)v14 + 1);
    }
    else
    {
      if (v15 < 0xFF01)
        goto LABEL_168;
      v16 = __rev16(v14[1]) - 2;
      if (v16 >= 0x100)
        goto LABEL_168;
      v17 = (unsigned __int8 *)(v14 + 2);
      v18 = (unint64_t)v14 + v16 + 4;
      if (v15 == 65475)
      {
        group = *((unsigned __int8 *)v14 + 4);
        v190 = __rev16(*(unsigned __int16 *)((char *)v14 + 5));
        v192 = *((unsigned __int8 *)v14 + 9);
        v188 = __rev16(*(unsigned __int16 *)((char *)v14 + 7)) * v192;
      }
      else if (v15 == 65476)
      {
        while ((unint64_t)v17 < v18)
        {
          v19 = *v17;
          if (v19 > 3)
            break;
          v20 = &v206[2048 * v19];
          *((_QWORD *)&v207 + v19) = v20;
          v17 = sub_1D53126BC(v17 + 1, (uint64_t)v20, 2);
          if (!v17)
          {
            v158 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](v158, "RawCameraException");
            __cxa_throw(v158, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
        }
      }
      v14 = (unsigned __int16 *)v18;
    }
  }
  while (v15 != 65498);
  if (v192 != 2 && v192 != 4
    || v190 < 1
    || v188 <= 0
    || v190 * (unint64_t)v188 > v4 * v184
    || v13 && (_DWORD)v201 + DWORD2(v199) + DWORD2(v202) != v184)
  {
    goto LABEL_168;
  }
  (*(void (**)(uint64_t, uint8_t *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v194 + 176))(v194, buf, 0x10000, group, 0);
  LODWORD(v21) = 1 << group;
  if (1 << group <= 0x10000)
    v22 = 0x10000 - (1 << group);
  else
    v22 = 65537 - (1 << group);
  v23 = 0x10000 - (v22 >> 1);
  if ((int)v21 < v23)
  {
    v24 = *(_WORD *)&buf[2 * (int)v21 - 2];
    v25 = -(v22 >> 1);
    v26 = &buf[2 * (int)v21];
    v27 = v25 - (uint64_t)(int)v21 + 0x10000;
    do
    {
      *(_WORD *)v26 = v24;
      v26 += 2;
      --v27;
    }
    while (v27);
    LODWORD(v21) = v23;
  }
  if ((int)v21 < 0x10000)
  {
    v28 = *(_WORD *)buf;
    v21 = (int)v21;
    do
      *(_WORD *)&buf[2 * v21++] = v28;
    while ((_DWORD)v21 != 0x10000);
  }
  v29 = *((_QWORD *)&v207 + 1) ? *((_QWORD *)&v207 + 1) : v207;
  v30 = (_QWORD)v207 ? v207 : *((_QWORD *)&v207 + 1);
  v31 = !v30 || v29 == 0;
  if (v31)
  {
LABEL_168:
    v159 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v159, "RawCameraException");
    __cxa_throw(v159, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v32 = 0;
  v183 = (char *)v14 - v181 + v6;
  do
  {
    v33 = *(unsigned __int16 *)(v30 + 2 * v32);
    v34 = *(unsigned __int16 *)(v29 + 2 * v32);
    if (v32 > 0x3FE)
      break;
    ++v32;
  }
  while (v33 == v34);
  v174 = v190 * v188;
  v180 = ((int)v195 - (int)v183) / ((v190 * v188 + 10239) / 10240);
  v35 = 4 * v180;
  if (4 * v180 <= v188)
    v35 = v188;
  v179 = v35;
  v36 = NSPageSize();
  v37 = sub_1D530C74C(v194);
  if ((int)v195 - (int)v183 <= 0)
  {
    v161 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v161, "RawCameraException");
    __cxa_throw(v161, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v42 = v37;
  objc_msgSend_processInfo(MEMORY[0x1E0CB3898], v38, v39, v40, v41);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  active = objc_msgSend_activeProcessorCount(v43, v44, v45, v46, v47);

  if (active >= 31)
    v49 = 31;
  else
    v49 = active;
  if (active >= 29)
    v50 = 29;
  else
    v50 = active;
  v51 = v50 + 2;
  v185 = v49;
  if (v49 == 1)
    v52 = 2;
  else
    v52 = v51;
  v53 = NSPageSize();
  v54 = v53;
  v55 = -(uint64_t)v36;
  v177 = (unint64_t)&v181[v36] & v55;
  v164 = __clz(__rbit32(v36));
  v56 = (int)(((_DWORD)v181 - v177 + v42) & v55) >> v164;
  v57 = -(uint64_t)v53;
  if (v53 <= v180)
    v58 = ((int)v195 - (int)v183) / ((v190 * v188 + 10239) / 10240);
  else
    v58 = v53;
  v59 = 4 * v58 - 1;
  v60 = v180 + 2;
  if (v180 >= -1)
    v60 = v180 + 1;
  v61 = v185 <= 1 || v13 == 0;
  v62 = (2 * v53 + 2 * v179 - 1) & (unint64_t)v57;
  v168 = 192 * (int)v52;
  v170 = (v168 + (v185 << 6) + 1344);
  v63 = (v170 + v53) & v57;
  v64 = __clz(v59);
  v173 = 0xC0000u >> -(char)v64;
  v171 = -v64;
  v65 = v173 << -(char)v64;
  v66 = (v53 + (v60 >> 1) + 7) & v57;
  v176 = v56;
  v67 = 2 * v56;
  if (v61)
    v67 = 0;
  v172 = (v53 + v67 - 1) & v57;
  v178 = v65;
  v166 = v63 + v53 + 2 * v66 + v172 + v65 + v62 * v52;
  v68 = sub_1D5441BF0(v166);
  v69 = v68;
  if (!v68)
  {
    v163 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v163, "RawCameraException");
    __cxa_throw(v163, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v70 = v66;
  v71 = v63 - v170;
  v72 = (_QWORD *)(((unint64_t)v68 + v54 - 1) & -(uint64_t)v54);
  v73 = (uint64_t)&v72[8 * v185 + 168];
  v74 = v73 + v168 + v71;
  v165 = v70;
  v167 = v74 + (int)v62 * (uint64_t)(int)v52 + v70 + v178;
  v169 = v74 + (int)v62 * (uint64_t)(int)v52 + v70;
  bzero(v72, v170);
  v72[2] = v69;
  *((_DWORD *)v72 + 6) = v166;
  if ((v185 & 0x80000000) == 0)
  {
    v75 = 0;
    v76 = 160;
    do
    {
      v77 = &v72[v76];
      v72[v75 + 4] = &v72[v76];
      *(_DWORD *)v77 = v75;
      v77[1] = v72;
      ++v75;
      v76 += 8;
    }
    while (v185 + 1 != v75);
  }
  v78 = v167 + v165;
  if ((int)v52 >= 1)
  {
    v79 = 0;
    v80 = v72 + 36;
    do
    {
      v80[v79] = v73;
      *(_QWORD *)(v73 + 64) = v74;
      v74 += v62;
      *(_DWORD *)(v80[v79] + 4) = v79;
      ++v79;
      v73 += 192;
    }
    while (v52 != v79);
  }
  *((_DWORD *)v72 + 172) = 1 << v171;
  *((_DWORD *)v72 + 173) = v173;
  *((_DWORD *)v72 + 174) = v178;
  v72[88] = v169;
  v72[89] = v167;
  if (!v172)
    v78 = 0;
  v72[148] = v78;
  v81 = (_DWORD *)v72[4];
  *v72 = v181;
  v82 = v194;
  v72[1] = &v181[sub_1D530C74C(v194)];
  *((_DWORD *)v72 + 134) = v185;
  *((_DWORD *)v72 + 135) = v52;
  *((_DWORD *)v72 + 136) = v179;
  *((_DWORD *)v72 + 137) = v180;
  *((_DWORD *)v72 + 138) = v174;
  atomic_store(v174, (unsigned int *)v72 + 139);
  *((_BYTE *)v72 + 560) = 0;
  atomic_store(0, (unsigned __int8 *)v72 + 561);
  *((_BYTE *)v72 + 562) = v33 == v34;
  v72[71] = v30;
  v72[72] = v29;
  *((_DWORD *)v72 + 148) = v190;
  *((_DWORD *)v72 + 149) = v188;
  *((_DWORD *)v72 + 150) = v192;
  v72[73] = buf;
  *v81 = 0;
  v81[4] = *(unsigned __int16 *)(v82 + 216);
  v83 = sub_1D5310620;
  if (v33 == v34)
    v83 = sub_1D531036C;
  v72[76] = v83;
  v84 = sub_1D5310F68;
  if (v33 == v34)
    v84 = sub_1D53109F0;
  v72[77] = v84;
  v72[78] = v183;
  v72[79] = v195;
  v72[80] = v195;
  v72[81] = v183;
  v72[82] = v183;
  v85 = v183 & -(uint64_t)*((int *)v72 + 172);
  v72[83] = v85;
  v72[84] = v85;
  v72[85] = v85 + *((int *)v72 + 174);
  v86 = (unsigned int *)(v72 + 90);
  atomic_store(*((_DWORD *)v72 + 173), (unsigned int *)v72 + 180);
  v87 = dispatch_semaphore_create(0);
  v88 = (void *)v72[91];
  v72[91] = v87;

  v89 = (unsigned int *)(v72 + 92);
  atomic_store(0, (unsigned int *)v72 + 184);
  v90 = dispatch_semaphore_create(0);
  v91 = (void *)v72[93];
  v72[93] = v90;

  v72[94] = 2097153;
  v72[95] = v72[88] + v183 - v72[83];
  *((_OWORD *)v72 + 48) = *((_OWORD *)v72 + 47);
  *((_DWORD *)v72 + 196) = 0;
  v72[99] = 0;
  *((_DWORD *)v72 + 200) = 0;
  *((_DWORD *)v72 + 206) = 0;
  v72[101] = 0;
  v72[102] = 0;
  v72[104] = v181;
  v72[105] = v182;
  if (v182)
  {
    v92 = *((_DWORD *)v182 + 2);
    v93 = *((_DWORD *)v182 + 3) * v92;
  }
  else
  {
    v92 = 0x7FFFFFFF;
    v93 = 0x7FFFFFFF;
  }
  v94 = v177;
  *((_DWORD *)v72 + 212) = v92;
  *((_DWORD *)v72 + 213) = v93;
  *(int32x4_t *)(v72 + 107) = vdupq_n_s32(1 << (group - 1));
  atomic_store(v176, (unsigned int *)v72 + 294);
  *((_DWORD *)v72 + 295) = v164;
  v72[149] = v94;
  v95 = v72[148];
  if (v95)
  {
    v96 = 1 << v164;
    v97 = *(_QWORD *)(v72[36] + 64);
    v98 = v176 + 7;
    if (v176 < -7)
      v98 = v176 + 14;
    bzero(*(void **)(v72[36] + 64), (uint64_t)v98 >> 3);
    v99 = 0;
    v100 = 0;
    while (2)
    {
      v101 = (char *)v182 + 24 * v99;
      v103 = *((unsigned int *)v101 + 2);
      v102 = *((_DWORD *)v101 + 3);
      if (v102 >= 1 && (int)v103 >= 1)
      {
        v105 = 0;
        v106 = (char *)v182 + 24 * v99;
        v107 = 2 * (*((_DWORD *)v106 + 4) + v103);
        v108 = *(_QWORD *)v106 + 2 * v103;
        v109 = -2 * v103;
        do
        {
          v110 = (v108 + v109) & -v96;
          if (v108 > v110)
          {
            v111 = ((int)v110 - (int)v177) >> v164;
            do
            {
              v112 = 1 << (v111 & 7);
              v113 = *(unsigned __int8 *)(v97 + (v111 >> 3));
              if ((v112 & v113) == 0)
              {
                *(_BYTE *)(v97 + ((uint64_t)v111 >> 3)) = v113 | v112;
                *(_WORD *)(v95 + 2 * v100++) = v111;
                if (v100 >= v176)
                  goto LABEL_117;
              }
              v110 += v96;
              ++v111;
            }
            while (v110 < v108);
          }
          v108 += v107;
          ++v105;
        }
        while (v105 != v102);
        if (++v99 != 4)
          continue;
      }
      break;
    }
  }
LABEL_117:
  atomic_store(0, (unsigned int *)v72 + 290);
  atomic_store(0, (unsigned int *)v72 + 291);
  atomic_store(0, (unsigned int *)v72 + 292);
  atomic_store(0, (unsigned int *)v72 + 293);
  v114 = (unsigned int *)(v72 + 150);
  atomic_store(0, (unsigned int *)v72 + 300);
  v115 = (unsigned int *)v72 + 301;
  atomic_store(0, (unsigned int *)v72 + 301);
  v116 = dispatch_semaphore_create(0);
  v117 = (void *)v72[151];
  v72[151] = v116;

  if ((int)v52 > 0)
  {
    for (i = 0; i != v52; ++i)
    {
      v119 = 1 << *(_DWORD *)(v72[i + 36] + 4);
      do
        v120 = __ldaxr(v114);
      while (__stlxr(v120 | v119, v114));
      do
        v121 = __ldaxr(v115);
      while (__stlxr(v121 + 1, v115));
      if ((v121 & 0x80000000) != 0)
        dispatch_semaphore_signal((dispatch_semaphore_t)v72[151]);
    }
  }
  atomic_store(0, (unsigned int *)v72 + 304);
  v122 = dispatch_semaphore_create(0);
  v123 = (void *)v72[153];
  v72[153] = v122;

  v124 = dispatch_group_create();
  v125 = dispatch_queue_create("Huffman Decode Block", MEMORY[0x1E0C80D50]);
  if (v185 >= 1)
  {
    if (v185 <= 1)
      v126 = (void (__cdecl *)(void *))sub_1D5311900;
    else
      v126 = (void (__cdecl *)(void *))sub_1D531134C;
    v127 = (_DWORD **)(v72 + 5);
    v128 = (v185 + 1) - 1;
    do
    {
      v129 = *v127++;
      v129[4] = *(unsigned __int16 *)(v194 + 216);
      dispatch_group_async_f(v124, v125, v129, v126);
      --v128;
    }
    while (v128);
  }
  groupa = v124;
  v130 = v72[83];
  v131 = *((int *)v72 + 172);
  v132 = v72[88];
  v193 = v72[89];
  v133 = *((int *)v72 + 174);
  v134 = *(_QWORD *)(v194 + 24);
  v198 = v183;
  (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v134 + 40))(v134, &v198, 0);
  if (v130 < v195)
  {
    v135 = __clz(__rbit32(v131));
    v136 = (char *)(v183 - v130);
    v189 = -v133;
    v191 = v131 - 1;
    do
    {
      v137 = atomic_load(v86);
      if (v137 < 1 || (v138 = atomic_load(v89), (v138 & 0x80000000) != 0))
      {
        LODWORD(v139) = 1;
      }
      else
      {
        v139 = (uint64_t)(v193 - v132) >> v135;
        v140 = atomic_load(v86);
        if (v140 < (int)v139)
          LODWORD(v139) = v140;
      }
      v141 = (int)((_DWORD)v139 << v135);
      if (v195 - v130 >= v141)
        v142 = v139;
      else
        v142 = (unint64_t)(v191 + v195 - v130) >> v135;
      if (v195 - v130 >= v141)
        v143 = (int)((_DWORD)v139 << v135);
      else
        v143 = v195 - v130;
      v144 = atomic_load((unsigned __int8 *)v72 + 561);
      if ((v144 & 1) != 0)
        break;
      do
        v145 = __ldaxr(v86);
      while (__stlxr(v145 - v142, v86));
      if (v145 < v142)
        dispatch_semaphore_wait((dispatch_semaphore_t)v72[91], 0xFFFFFFFFFFFFFFFFLL);
      v146 = atomic_load((unsigned __int8 *)v72 + 561);
      if ((v146 & 1) != 0)
        break;
      (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(v194 + 24) + 32))(*(_QWORD *)(v194 + 24), &v136[v132], v143 - (_QWORD)v136);
      v147 = v189;
      if (v132 + v143 < v193)
        v147 = 0;
      v132 += v143 + v147;
      do
        v148 = __ldaxr(v89);
      while (__stlxr(v148 + v142, v89));
      if (v148 == -1)
        dispatch_semaphore_signal((dispatch_semaphore_t)v72[93]);
      v136 = 0;
      v130 += v143;
    }
    while (v130 < v195);
  }
  dispatch_group_wait(groupa, 0xFFFFFFFFFFFFFFFFLL);
  if (v185 >= 1)
  {
    v149 = *(unsigned __int16 *)(v194 + 216);
    v150 = v72 + 5;
    v151 = (v185 + 1) - 1;
    do
    {
      v152 = *(_DWORD *)(*v150 + 16);
      if (v152 < v149)
      {
        v149 = (unsigned __int16)*(_DWORD *)(*v150 + 16);
        *(_WORD *)(v194 + 216) = v152;
      }
      ++v150;
      --v151;
    }
    while (v151);
  }
  v153 = atomic_load((unsigned int *)v72 + 139);

  if (v72[2])
  {
    v154 = (void *)v72[91];
    v72[91] = 0;

    v155 = (void *)v72[93];
    v72[93] = 0;

    v156 = (void *)v72[151];
    v72[151] = 0;

    v157 = (void *)v72[153];
    v72[153] = 0;

    free((void *)v72[2]);
  }
  if (v153 >= 1)
  {
    v162 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v162, "RawCameraException");
    __cxa_throw(v162, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v175[2](v175);

}

void sub_1D5310210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (**a17)(_QWORD), uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;

  __cxa_free_exception(v26);
  a17[2](a17);

  _Unwind_Resume(a1);
}

void sub_1D53102E8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CLosslessJpegUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D531036C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  _BYTE v57[513];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(unsigned __int8 **)(a3 + 40);
  v6 = *(_QWORD *)(a1 + 568);
  *(_BYTE *)(a3 + 32) = 1;
  if ((unint64_t)v5 >= v4)
  {
    v9 = 0;
    v7 = 0;
    v10 = v5;
    v8 = v5;
    do
    {
      if (!*--v8)
      {
        v13 = *(v10 - 2);
        v12 = v10 - 2;
        if (v13 == 255)
          v8 = v12;
      }
      v7 += 8;
      if (v9 > 0x3E)
        break;
      ++v9;
      v10 = v8;
    }
    while ((unint64_t)v8 >= v4);
  }
  else
  {
    v7 = 0;
    v8 = v5;
  }
  bzero(v57, 0x201uLL);
  v14 = 0;
  v15 = v5;
  do
  {
    if (!v57[v14])
    {
      v16 = *v8;
      if (v16 == 255)
        v17 = 3;
      else
        v17 = 2;
      if (v16 == 255)
        v18 = 2;
      else
        v18 = 1;
      v19 = v8[v18];
      v20 = &v8[v17];
      if (v19 == 255)
        ++v20;
      v21 = *v20;
      v22 = (v16 << 24) | (v19 << 16);
      v23 = v21 == 255 ? 3 : 2;
      v24 = v21 == 255 ? 2 : 1;
      v25 = &v20[v23];
      v26 = v20[v24];
      v27 = v22 | (v21 << 8);
      v28 = v26 == 255 ? v25 + 1 : v25;
      v29 = v27 | v26;
      v30 = v14;
      v31 = v14;
      do
      {
        v32 = v30 - 16;
        if (v30 >= 16)
        {
          v33 = *v28;
          v34 = v29 << 16;
          if (v33 == 255)
            v35 = 3;
          else
            v35 = 2;
          if (v33 == 255)
            v36 = 2;
          else
            v36 = 1;
          v37 = v28[v36];
          v28 += v35;
          v38 = v34 | (v33 << 8);
          if (v37 == 255)
            ++v28;
          v29 = v38 | v37;
          v30 = v32;
        }
        v39 = v29 << v30;
        v40 = *(unsigned __int16 *)(v6 + 2 * ((v29 << v30) >> 23));
        v41 = (v40 >> 10) & 0x1F;
        v30 += v41;
        v31 += v41;
        if (v40 <= 0x8000)
        {
          if ((v40 & 0x8000) != 0)
          {
            v40 = *(unsigned __int16 *)(v6 + 2 * (HIWORD(v39) & 0x3FF));
            v42 = (v40 >> 10) & 0x1F;
            v30 += v42;
            v31 += v42;
          }
          v43 = v40 & 0x1F;
          if (v43)
          {
            v44 = v30 - 16;
            if (v30 >= 16)
            {
              v45 = *v28;
              v46 = v29 << 16;
              if (v45 == 255)
                v47 = 3;
              else
                v47 = 2;
              if (v45 == 255)
                v48 = 2;
              else
                v48 = 1;
              v49 = v28[v48];
              v28 += v47;
              v50 = v46 | (v45 << 8);
              if (v49 == 255)
                ++v28;
              v29 = v50 | v49;
              v30 = v44;
            }
            v30 += v43;
            v31 += v43;
          }
        }
        if (v31 > v7 - 32)
        {
          if (v31 > v7)
            break;
          if (!v14)
          {
            *(_DWORD *)(a3 + 36) = v29;
            *(_WORD *)(a3 + 34) = v30;
            v15 = v28;
            *(_QWORD *)(a3 + 40) = v28;
          }
        }
        v51 = v57[v31];
        v57[v31] = v51 + 1;
      }
      while (!v51);
      if (v14 && v31 > v7)
      {
        v52 = *(_DWORD *)(a3 + 36);
        *(_BYTE *)(a3 + 32) = *(_BYTE *)(a3 + 33);
        v53 = 32;
        v15 = v5;
        goto LABEL_65;
      }
    }
    ++v14;
  }
  while (v14 != 32);
  v52 = *(_DWORD *)(a3 + 36);
  v53 = *(__int16 *)(a3 + 34);
  if (v53 < 8)
    goto LABEL_69;
  do
  {
LABEL_65:
    v54 = v53;
    v55 = *v15;
    v52 = v55 | (v52 << 8);
    if (v55 == 255)
      v56 = 2;
    else
      v56 = 1;
    v15 += v56;
    v53 = v54 - 8;
  }
  while (v54 > 0xF);
LABEL_69:
  *(_DWORD *)(a3 + 36) = v52;
  *(_WORD *)(a3 + 34) = v53;
  *(_QWORD *)(a3 + 40) = v15;
}

void sub_1D5310620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  _BYTE v89[513];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(unsigned __int8 **)(a3 + 40);
  v6 = *(_QWORD *)(a1 + 568);
  v7 = *(_QWORD *)(a1 + 576);
  *(_BYTE *)(a3 + 32) = 1;
  if ((unint64_t)v5 >= v4)
  {
    v10 = 0;
    v8 = 0;
    v11 = v5;
    v9 = v5;
    do
    {
      if (!*--v9)
      {
        v14 = *(v11 - 2);
        v13 = v11 - 2;
        if (v14 == 255)
          v9 = v13;
      }
      v8 += 8;
      if (v10 > 0x3E)
        break;
      ++v10;
      v11 = v9;
    }
    while ((unint64_t)v9 >= v4);
  }
  else
  {
    v8 = 0;
    v9 = v5;
  }
  bzero(v89, 0x201uLL);
  v15 = 0;
  v16 = v5;
  do
  {
    if (!v89[v15])
    {
      v17 = *v9;
      if (v17 == 255)
        v18 = 3;
      else
        v18 = 2;
      if (v17 == 255)
        v19 = 2;
      else
        v19 = 1;
      v20 = &v9[v18];
      v21 = v9[v19];
      if (v21 == 255)
        ++v20;
      v22 = *v20;
      v23 = v22 == 255 ? 3 : 2;
      v24 = v22 == 255 ? 2 : 1;
      v25 = &v20[v23];
      v26 = v20[v24];
      v27 = v26 == 255 ? v25 + 1 : v25;
      if (v15 < 0x20)
      {
        v40 = (v17 << 24) | (v21 << 16) | (v22 << 8) | v26;
        v41 = v15;
      }
      else
      {
        v28 = *v27;
        if (v28 == 255)
          v29 = 3;
        else
          v29 = 2;
        if (v28 == 255)
          v30 = 2;
        else
          v30 = 1;
        v31 = &v27[v29];
        v32 = v27[v30];
        if (v32 == 255)
          ++v31;
        v33 = *v31;
        v34 = (v28 << 24) | (v32 << 16);
        v35 = v33 == 255 ? 3 : 2;
        v36 = v33 == 255 ? 2 : 1;
        v37 = v31[v36];
        v38 = &v31[v35];
        v39 = v34 | (v33 << 8);
        v27 = v37 == 255 ? v38 + 1 : v38;
        v40 = v39 | v37;
        v41 = v15 - 32;
      }
      v42 = v15;
      do
      {
        v43 = v41 - 16;
        if (v41 >= 16)
        {
          v44 = *v27;
          v45 = v40 << 16;
          if (v44 == 255)
            v46 = 3;
          else
            v46 = 2;
          if (v44 == 255)
            v47 = 2;
          else
            v47 = 1;
          v48 = v27[v47];
          v27 += v46;
          v49 = v45 | (v44 << 8);
          if (v48 == 255)
            ++v27;
          v40 = v49 | v48;
          v41 = v43;
        }
        v50 = v40 << v41;
        v51 = *(unsigned __int16 *)(v6 + 2 * ((v40 << v41) >> 23));
        v52 = (v51 >> 10) & 0x1F;
        v53 = v52 + v41;
        v54 = v52 + v42;
        if (v51 <= 0x8000)
        {
          if ((v51 & 0x8000) != 0)
          {
            v51 = *(unsigned __int16 *)(v6 + 2 * (HIWORD(v50) & 0x3FF));
            v55 = (v51 >> 10) & 0x1F;
            v53 += v55;
            v54 += v55;
          }
          v56 = v51 & 0x1F;
          if (v56)
          {
            v57 = v53 - 16;
            if (v53 >= 16)
            {
              v58 = *v27;
              v59 = v40 << 16;
              if (v58 == 255)
                v60 = 3;
              else
                v60 = 2;
              if (v58 == 255)
                v61 = 2;
              else
                v61 = 1;
              v62 = v27[v61];
              v27 += v60;
              v63 = v59 | (v58 << 8);
              if (v62 == 255)
                ++v27;
              v40 = v63 | v62;
              v53 = v57;
            }
            v53 += v56;
            v54 += v56;
          }
        }
        v64 = v53 - 16;
        if (v53 >= 16)
        {
          v65 = *v27;
          v66 = v40 << 16;
          if (v65 == 255)
            v67 = 3;
          else
            v67 = 2;
          if (v65 == 255)
            v68 = 2;
          else
            v68 = 1;
          v69 = v27[v68];
          v27 += v67;
          v70 = v66 | (v65 << 8);
          if (v69 == 255)
            ++v27;
          v40 = v70 | v69;
          v53 = v64;
        }
        v71 = v40 << v53;
        v72 = *(unsigned __int16 *)(v7 + 2 * ((v40 << v53) >> 23));
        v73 = (v72 >> 10) & 0x1F;
        v41 = v73 + v53;
        v42 = v73 + v54;
        if (v72 <= 0x8000)
        {
          if ((v72 & 0x8000) != 0)
          {
            v72 = *(unsigned __int16 *)(v7 + 2 * (HIWORD(v71) & 0x3FF));
            v74 = (v72 >> 10) & 0x1F;
            v41 += v74;
            v42 += v74;
          }
          v75 = v72 & 0x1F;
          if (v75)
          {
            v76 = v41 - 16;
            if (v41 >= 16)
            {
              v77 = *v27;
              v78 = v40 << 16;
              if (v77 == 255)
                v79 = 3;
              else
                v79 = 2;
              if (v77 == 255)
                v80 = 2;
              else
                v80 = 1;
              v81 = v27[v80];
              v27 += v79;
              v82 = v78 | (v77 << 8);
              if (v81 == 255)
                ++v27;
              v40 = v82 | v81;
              v41 = v76;
            }
            v41 += v75;
            v42 += v75;
          }
        }
        if (v42 > v8 - 64)
        {
          if (v42 > v8)
            break;
          if (!v15)
          {
            *(_DWORD *)(a3 + 36) = v40;
            *(_WORD *)(a3 + 34) = v41;
            v16 = v27;
            *(_QWORD *)(a3 + 40) = v27;
          }
        }
        v83 = v89[v42];
        v89[v42] = v83 + 1;
      }
      while (!v83);
      if (v15 && v42 > v8)
      {
        v84 = *(_DWORD *)(a3 + 36);
        *(_BYTE *)(a3 + 32) = *(_BYTE *)(a3 + 33);
        v85 = 32;
        v16 = v5;
        goto LABEL_110;
      }
    }
    ++v15;
  }
  while (v15 != 64);
  v84 = *(_DWORD *)(a3 + 36);
  v85 = *(__int16 *)(a3 + 34);
  if (v85 < 8)
    goto LABEL_114;
  do
  {
LABEL_110:
    v86 = v85;
    v87 = *v16;
    v84 = v87 | (v84 << 8);
    if (v87 == 255)
      v88 = 2;
    else
      v88 = 1;
    v16 += v88;
    v85 = v86 - 8;
  }
  while (v86 > 0xF);
LABEL_114:
  *(_DWORD *)(a3 + 36) = v84;
  *(_WORD *)(a3 + 34) = v85;
  *(_QWORD *)(a3 + 40) = v16;
}

uint64_t sub_1D53109F0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _WORD *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  BOOL v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unsigned int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  BOOL v104;
  int v105;

  v3 = *(_QWORD *)(result + 568);
  v4 = *(_QWORD *)(a3 + 64);
  v5 = *(_DWORD *)(a3 + 20);
  v6 = *(__int16 *)(a3 + 18);
  v7 = *(unsigned __int8 **)(a3 + 24);
  v8 = *(unsigned __int8 **)(a3 + 40);
  v9 = v4 + 2 * *(int *)(result + 544);
  v10 = v9 - 8;
  v11 = v9 - 2;
  if (v7 >= v8 - 40 || v4 >= v10)
  {
    v13 = *(_WORD **)(a3 + 64);
  }
  else
  {
    result = *(_QWORD *)(a3 + 64);
    do
    {
      v14 = v6 - 16;
      if (v6 >= 16)
      {
        v15 = *v7;
        v16 = v5 << 16;
        if (v15 == 255)
          v17 = 3;
        else
          v17 = 2;
        if (v15 == 255)
          v18 = 2;
        else
          v18 = 1;
        v19 = v7[v18];
        v7 += v17;
        v20 = v16 | (v15 << 8);
        if (v19 == 255)
          ++v7;
        v5 = v20 | v19;
        v6 = v14;
      }
      v21 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v6) >> 23));
      v22 = ((v21 >> 10) & 0x1F) + v6;
      if (v21 > 0x8000)
      {
        LOWORD(v21) = (char)v21;
      }
      else
      {
        if ((v21 & 0x8000) != 0)
        {
          v21 = *(unsigned __int16 *)(v3 + 2 * (((v5 << v6) >> 16) & 0x3FF));
          v22 += (v21 >> 10) & 0x1F;
        }
        v23 = v21 & 0x1F;
        if ((v21 & 0x1F) != 0)
        {
          v24 = v22 - 16;
          if (v22 >= 16)
          {
            v25 = *v7;
            v26 = v5 << 16;
            if (v25 == 255)
              v27 = 3;
            else
              v27 = 2;
            if (v25 == 255)
              v28 = 2;
            else
              v28 = 1;
            v29 = v7[v28];
            v7 += v27;
            v30 = v26 | (v25 << 8);
            if (v29 == 255)
              ++v7;
            v5 = v30 | v29;
            v22 = v24;
          }
          v21 = ((v5 << v22) >> -(char)v23) - ((((v5 << v22) >> 31) - 1) >> -(char)v23);
          v22 += v23;
        }
        else
        {
          LOWORD(v21) = ((_WORD)v21 << 8) & 0x8000;
        }
      }
      *(_WORD *)result = v21;
      v31 = v22 - 16;
      if (v22 >= 16)
      {
        v32 = *v7;
        v33 = v5 << 16;
        if (v32 == 255)
          v34 = 3;
        else
          v34 = 2;
        if (v32 == 255)
          v35 = 2;
        else
          v35 = 1;
        v36 = v7[v35];
        v7 += v34;
        v37 = v33 | (v32 << 8);
        if (v36 == 255)
          ++v7;
        v5 = v37 | v36;
        v22 = v31;
      }
      v38 = v5 << v22;
      v39 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v22) >> 23));
      v40 = ((v39 >> 10) & 0x1F) + v22;
      if (v39 > 0x8000)
      {
        LOWORD(v39) = (char)v39;
      }
      else
      {
        if ((v39 & 0x8000) != 0)
        {
          v39 = *(unsigned __int16 *)(v3 + 2 * (HIWORD(v38) & 0x3FF));
          v40 += (v39 >> 10) & 0x1F;
        }
        v41 = v39 & 0x1F;
        if ((v39 & 0x1F) != 0)
        {
          v42 = v40 - 16;
          if (v40 >= 16)
          {
            v43 = *v7;
            v44 = v5 << 16;
            if (v43 == 255)
              v45 = 3;
            else
              v45 = 2;
            if (v43 == 255)
              v46 = 2;
            else
              v46 = 1;
            v47 = v7[v46];
            v7 += v45;
            v48 = v44 | (v43 << 8);
            if (v47 == 255)
              ++v7;
            v5 = v48 | v47;
            v40 = v42;
          }
          v39 = ((v5 << v40) >> -(char)v41) - ((((v5 << v40) >> 31) - 1) >> -(char)v41);
          v40 += v41;
        }
        else
        {
          LOWORD(v39) = ((_WORD)v39 << 8) & 0x8000;
        }
      }
      *(_WORD *)(result + 2) = v39;
      v49 = v40 - 16;
      if (v40 >= 16)
      {
        v50 = *v7;
        v51 = v5 << 16;
        if (v50 == 255)
          v52 = 3;
        else
          v52 = 2;
        if (v50 == 255)
          v53 = 2;
        else
          v53 = 1;
        v54 = v7[v53];
        v7 += v52;
        v55 = v51 | (v50 << 8);
        if (v54 == 255)
          ++v7;
        v5 = v55 | v54;
        v40 = v49;
      }
      v56 = v5 << v40;
      v57 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v40) >> 23));
      v58 = ((v57 >> 10) & 0x1F) + v40;
      if (v57 > 0x8000)
      {
        LOWORD(v57) = (char)v57;
      }
      else
      {
        if ((v57 & 0x8000) != 0)
        {
          v57 = *(unsigned __int16 *)(v3 + 2 * (HIWORD(v56) & 0x3FF));
          v58 += (v57 >> 10) & 0x1F;
        }
        v59 = v57 & 0x1F;
        if ((v57 & 0x1F) != 0)
        {
          v60 = v58 - 16;
          if (v58 >= 16)
          {
            v61 = *v7;
            v62 = v5 << 16;
            if (v61 == 255)
              v63 = 3;
            else
              v63 = 2;
            if (v61 == 255)
              v64 = 2;
            else
              v64 = 1;
            v65 = v7[v64];
            v7 += v63;
            v66 = v62 | (v61 << 8);
            if (v65 == 255)
              ++v7;
            v5 = v66 | v65;
            v58 = v60;
          }
          v57 = ((v5 << v58) >> -(char)v59) - ((((v5 << v58) >> 31) - 1) >> -(char)v59);
          v58 += v59;
        }
        else
        {
          LOWORD(v57) = ((_WORD)v57 << 8) & 0x8000;
        }
      }
      *(_WORD *)(result + 4) = v57;
      v67 = v58 - 16;
      if (v58 >= 16)
      {
        v68 = *v7;
        v69 = v5 << 16;
        if (v68 == 255)
          v70 = 3;
        else
          v70 = 2;
        if (v68 == 255)
          v71 = 2;
        else
          v71 = 1;
        v72 = v7[v71];
        v7 += v70;
        v73 = v69 | (v68 << 8);
        if (v72 == 255)
          ++v7;
        v5 = v73 | v72;
        v58 = v67;
      }
      v74 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v58) >> 23));
      v6 = ((v74 >> 10) & 0x1F) + v58;
      if (v74 > 0x8000)
      {
        LOWORD(v74) = (char)v74;
      }
      else
      {
        if ((v74 & 0x8000) != 0)
        {
          v74 = *(unsigned __int16 *)(v3 + 2 * (((v5 << v58) >> 16) & 0x3FF));
          v6 += (v74 >> 10) & 0x1F;
        }
        v75 = v74 & 0x1F;
        if ((v74 & 0x1F) != 0)
        {
          v76 = v6 - 16;
          if (v6 >= 16)
          {
            v77 = *v7;
            v78 = v5 << 16;
            if (v77 == 255)
              v79 = 3;
            else
              v79 = 2;
            if (v77 == 255)
              v80 = 2;
            else
              v80 = 1;
            v81 = v7[v80];
            v7 += v79;
            v82 = v78 | (v77 << 8);
            if (v81 == 255)
              ++v7;
            v5 = v82 | v81;
            v6 = v76;
          }
          v74 = ((v5 << v6) >> -(char)v75) - ((((v5 << v6) >> 31) - 1) >> -(char)v75);
          v6 += v75;
        }
        else
        {
          LOWORD(v74) = ((_WORD)v74 << 8) & 0x8000;
        }
      }
      v13 = (_WORD *)(result + 8);
      *(_WORD *)(result + 6) = v74;
      if (v7 >= v8 - 40)
        break;
      result += 8;
    }
    while ((unint64_t)v13 < v10);
  }
  *(_BYTE *)(a3 + 48) = 0;
  if (v7 > v8 || (unint64_t)v13 >= v11)
  {
    v84 = 0;
  }
  else
  {
    while (1)
    {
      v85 = v6 - 16;
      if (v6 >= 16)
      {
        v86 = *v7;
        v87 = v5 << 16;
        if (v86 == 255)
          v88 = 3;
        else
          v88 = 2;
        if (v86 == 255)
          v89 = 2;
        else
          v89 = 1;
        v90 = v7[v89];
        v7 += v88;
        v91 = v87 | (v86 << 8);
        if (v90 == 255)
          ++v7;
        v5 = v91 | v90;
        v6 = v85;
      }
      v92 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v6) >> 23));
      v93 = ((v92 >> 10) & 0x1F) + v6;
      if (v92 > 0x8000)
      {
        result = (char)v92;
      }
      else
      {
        if ((v92 & 0x8000) != 0)
        {
          v92 = *(unsigned __int16 *)(v3 + 2 * (((v5 << v6) >> 16) & 0x3FF));
          v93 += (v92 >> 10) & 0x1F;
        }
        v94 = v92 & 0x1F;
        if ((v92 & 0x1F) != 0)
        {
          v95 = v93 - 16;
          if (v93 >= 16)
          {
            v96 = *v7;
            v97 = v5 << 16;
            if (v96 == 255)
              v98 = 3;
            else
              v98 = 2;
            if (v96 == 255)
              v99 = 2;
            else
              v99 = 1;
            v100 = v7[v99];
            v7 += v98;
            v101 = v97 | (v96 << 8);
            if (v100 == 255)
              ++v7;
            v5 = v101 | v100;
            v93 = v95;
          }
          result = ((v5 << v93) >> -(char)v94) - ((((v5 << v93) >> 31) - 1) >> -(char)v94);
          v93 += v94;
        }
        else
        {
          result = (v92 << 8) & 0x8000;
        }
      }
      *v13++ = result;
      if (v93 < 8)
      {
        v6 = v93;
      }
      else
      {
        do
        {
          v102 = *v7;
          v5 = v102 | (v5 << 8);
          if (v102 == 255)
            v103 = 2;
          else
            v103 = 1;
          v7 += v103;
          v6 = v93 - 8;
          v104 = v93 > 0xF;
          v93 -= 8;
        }
        while (v104);
      }
      if (v7 == v8)
      {
        v105 = *(__int16 *)(a3 + 34);
        if (v6 >= v105)
          break;
      }
      v84 = 0;
      if (v7 > v8 || (unint64_t)v13 >= v11)
        goto LABEL_164;
    }
    v84 = v6 == v105;
    v7 = v8;
  }
LABEL_164:
  *(_DWORD *)(a3 + 72) = ((unint64_t)v13 - v4) >> 1;
  *(_DWORD *)(a3 + 52) = v5;
  *(_WORD *)(a3 + 50) = v6;
  *(_QWORD *)(a3 + 56) = v7;
  *(_BYTE *)(a3 + 48) = v84 & *(_BYTE *)(a3 + 32);
  *(_BYTE *)(a3 + 49) = *(_BYTE *)(a3 + 33);
  return result;
}

uint64_t sub_1D5310F68(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  unint64_t v4;
  int v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  BOOL v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  BOOL v73;
  int v74;

  v3 = *(_DWORD *)(a3 + 12);
  v4 = *(_QWORD *)(a3 + 64);
  v5 = *(_DWORD *)(a3 + 20);
  v6 = *(__int16 *)(a3 + 18);
  v7 = *(unsigned __int8 **)(a3 + 24);
  v8 = *(unsigned __int8 **)(a3 + 40);
  v9 = v4 + 2 * *(int *)(result + 544);
  v10 = v9 - 4;
  v11 = v9 - 2;
  if (v7 >= v8 - 24 || v4 >= v10)
  {
    v13 = *(_WORD **)(a3 + 64);
  }
  else
  {
    v14 = *(_QWORD *)(result + 568 + 8 * (v3 & 1));
    v15 = *(_QWORD *)(result + 568 + 8 * !(v3 & 1));
    v16 = *(_WORD **)(a3 + 64);
    do
    {
      v17 = v6 - 16;
      if (v6 >= 16)
      {
        v18 = *v7;
        v19 = v5 << 16;
        if (v18 == 255)
          v20 = 3;
        else
          v20 = 2;
        if (v18 == 255)
          v21 = 2;
        else
          v21 = 1;
        v22 = v7[v21];
        v7 += v20;
        v23 = v19 | (v18 << 8);
        if (v22 == 255)
          ++v7;
        v5 = v23 | v22;
        v6 = v17;
      }
      v24 = v5 << v6;
      v25 = *(unsigned __int16 *)(v14 + 2 * ((v5 << v6) >> 23));
      v26 = ((v25 >> 10) & 0x1F) + v6;
      if (v25 > 0x8000)
      {
        LOWORD(v25) = (char)v25;
      }
      else
      {
        if ((v25 & 0x8000) != 0)
        {
          v25 = *(unsigned __int16 *)(v14 + 2 * (HIWORD(v24) & 0x3FF));
          v26 += (v25 >> 10) & 0x1F;
        }
        v27 = v25 & 0x1F;
        if ((v25 & 0x1F) != 0)
        {
          v28 = v26 - 16;
          if (v26 >= 16)
          {
            v29 = *v7;
            v30 = v5 << 16;
            if (v29 == 255)
              v31 = 3;
            else
              v31 = 2;
            if (v29 == 255)
              v32 = 2;
            else
              v32 = 1;
            v33 = v7[v32];
            v7 += v31;
            v34 = v30 | (v29 << 8);
            if (v33 == 255)
              ++v7;
            v5 = v34 | v33;
            v26 = v28;
          }
          v25 = ((v5 << v26) >> -(char)v27) - ((((v5 << v26) >> 31) - 1) >> -(char)v27);
          v26 += v27;
        }
        else
        {
          LOWORD(v25) = ((_WORD)v25 << 8) & 0x8000;
        }
      }
      *v16 = v25;
      v35 = v26 - 16;
      if (v26 >= 16)
      {
        v36 = *v7;
        v37 = v5 << 16;
        if (v36 == 255)
          v38 = 3;
        else
          v38 = 2;
        if (v36 == 255)
          v39 = 2;
        else
          v39 = 1;
        v40 = v7[v39];
        v7 += v38;
        v41 = v37 | (v36 << 8);
        if (v40 == 255)
          ++v7;
        v5 = v41 | v40;
        v26 = v35;
      }
      v42 = v5 << v26;
      v43 = *(unsigned __int16 *)(v15 + 2 * ((v5 << v26) >> 23));
      v6 = ((v43 >> 10) & 0x1F) + v26;
      if (v43 > 0x8000)
      {
        LOWORD(v43) = (char)v43;
      }
      else
      {
        if ((v43 & 0x8000) != 0)
        {
          v43 = *(unsigned __int16 *)(v15 + 2 * (HIWORD(v42) & 0x3FF));
          v6 += (v43 >> 10) & 0x1F;
        }
        v44 = v43 & 0x1F;
        if ((v43 & 0x1F) != 0)
        {
          v45 = v6 - 16;
          if (v6 >= 16)
          {
            v46 = *v7;
            v47 = v5 << 16;
            if (v46 == 255)
              v48 = 3;
            else
              v48 = 2;
            if (v46 == 255)
              v49 = 2;
            else
              v49 = 1;
            v50 = v7[v49];
            v7 += v48;
            v51 = v47 | (v46 << 8);
            if (v50 == 255)
              ++v7;
            v5 = v51 | v50;
            v6 = v45;
          }
          v43 = ((v5 << v6) >> -(char)v44) - ((((v5 << v6) >> 31) - 1) >> -(char)v44);
          v6 += v44;
        }
        else
        {
          LOWORD(v43) = ((_WORD)v43 << 8) & 0x8000;
        }
      }
      v13 = v16 + 2;
      v16[1] = v43;
      if (v7 >= v8 - 24)
        break;
      v16 += 2;
    }
    while ((unint64_t)v13 < v10);
  }
  *(_BYTE *)(a3 + 48) = 0;
  if (v7 > v8 || (unint64_t)v13 >= v11)
  {
    v53 = 0;
  }
  else
  {
    while (1)
    {
      if (v6 >= 16)
      {
        v54 = *v7;
        v55 = v5 << 16;
        if (v54 == 255)
          v56 = 3;
        else
          v56 = 2;
        if (v54 == 255)
          v57 = 2;
        else
          v57 = 1;
        v58 = v7[v57];
        v7 += v56;
        v59 = v55 | (v54 << 8);
        if (v58 == 255)
          ++v7;
        v5 = v59 | v58;
        v6 -= 16;
      }
      v60 = *(_QWORD *)(result + 8 * (v3 & 1) + 568);
      v61 = *(unsigned __int16 *)(v60 + 2 * ((v5 << v6) >> 23));
      v62 = ((v61 >> 10) & 0x1F) + v6;
      if (v61 > 0x8000)
      {
        LOWORD(v61) = (char)v61;
      }
      else
      {
        if ((v61 & 0x8000) != 0)
        {
          v61 = *(unsigned __int16 *)(v60 + 2 * (((v5 << v6) >> 16) & 0x3FF));
          v62 += (v61 >> 10) & 0x1F;
        }
        v63 = v61 & 0x1F;
        if ((v61 & 0x1F) != 0)
        {
          v64 = v62 - 16;
          if (v62 >= 16)
          {
            v65 = *v7;
            v66 = v5 << 16;
            if (v65 == 255)
              v67 = 3;
            else
              v67 = 2;
            if (v65 == 255)
              v68 = 2;
            else
              v68 = 1;
            v69 = v7[v68];
            v7 += v67;
            v70 = v66 | (v65 << 8);
            if (v69 == 255)
              ++v7;
            v5 = v70 | v69;
            v62 = v64;
          }
          v61 = ((v5 << v62) >> -(char)v63) - ((((v5 << v62) >> 31) - 1) >> -(char)v63);
          v62 += v63;
        }
        else
        {
          LOWORD(v61) = ((_WORD)v61 << 8) & 0x8000;
        }
      }
      *v13++ = v61;
      if (v62 < 8)
      {
        v6 = v62;
      }
      else
      {
        do
        {
          v71 = *v7;
          v5 = v71 | (v5 << 8);
          if (v71 == 255)
            v72 = 2;
          else
            v72 = 1;
          v7 += v72;
          v6 = v62 - 8;
          v73 = v62 > 0xF;
          v62 -= 8;
        }
        while (v73);
      }
      if (v7 == v8)
      {
        v74 = *(__int16 *)(a3 + 34);
        if (v6 >= v74)
          break;
      }
      v53 = 0;
      LOBYTE(v3) = v3 + 1;
      if (v7 > v8 || (unint64_t)v13 >= v11)
        goto LABEL_110;
    }
    v53 = v6 == v74;
    v7 = v8;
  }
LABEL_110:
  *(_DWORD *)(a3 + 72) = ((unint64_t)v13 - v4) >> 1;
  *(_DWORD *)(a3 + 52) = v5;
  *(_WORD *)(a3 + 50) = v6;
  *(_QWORD *)(a3 + 56) = v7;
  *(_BYTE *)(a3 + 48) = v53 & *(_BYTE *)(a3 + 32);
  *(_BYTE *)(a3 + 49) = *(_BYTE *)(a3 + 33);
  return result;
}

intptr_t sub_1D531134C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  intptr_t result;
  int v34;
  unsigned int *v35;
  unsigned int v36;
  BOOL v37;
  signed int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  BOOL v53;
  signed int v54;
  void *v55;
  size_t v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  _DWORD *v60;
  _DWORD *v61;
  unsigned int v62;
  char v63;
  uint64_t v64;
  unsigned int v65;
  unint64_t v66;
  BOOL v67;
  unint64_t v68;
  int v69;
  unsigned int *v70;
  unsigned int v71;
  void (*v72)(unint64_t, uint64_t);
  uint64_t v73;
  int v74;
  char v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned __int8 *v81;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = (unsigned int *)(v2 + 1168);
  v4 = (unsigned int *)(v2 + 1216);
  v72 = *(void (**)(unint64_t, uint64_t))(v2 + 616);
  v77 = (unsigned int *)(v2 + 1172);
  v78 = (unsigned int *)(v2 + 1164);
  v5 = (unsigned int *)(v2 + 1176);
  v6 = (unsigned int *)(v2 + 1160);
  v79 = (unsigned int *)(v2 + 1204);
  v76 = (unsigned int *)(v2 + 1200);
  do
  {
    while (1)
    {
      while (1)
      {
LABEL_2:
        v7 = atomic_load(v78);
        if ((v7 & 0x80000000) != 0)
        {
LABEL_15:
          v14 = 0;
          goto LABEL_16;
        }
        v8 = v7 & 0x1F;
        v9 = (unsigned __int8 *)(v2 + v8 + 872);
        v10 = atomic_load(v9);
        if (v10 == 2)
          break;
        __dmb(0xBu);
        v13 = atomic_load(v78);
        if (v7 == v13)
          goto LABEL_15;
      }
      v11 = *(_QWORD *)(v2 + 8 * v8 + 904);
      do
      {
        v12 = __ldaxr(v78);
        if (v12 != v7)
        {
          __clrex();
          goto LABEL_2;
        }
      }
      while (__stlxr(v7 + 1, v78));
      atomic_store(3u, v9);
      if (*(_BYTE *)(v11 + 16) && !*(_BYTE *)(v11 + 17))
        v72(v2, v1);
      atomic_store(4u, v9);
      v14 = 1;
LABEL_16:
      v15 = atomic_load(v3);
      v80 = v15;
      v16 = atomic_load(v3);
      if ((v16 & 0x80000000) != 0)
        goto LABEL_36;
      v17 = 0;
      do
      {
        while (1)
        {
          v18 = v16 & 0x1F;
          v19 = (unsigned __int8 *)(v2 + v18 + 872);
          v20 = atomic_load(v19);
          if (v20 != 4)
            break;
          v21 = *(_QWORD *)(v2 + 8 * v18 + 904);
          do
          {
            v22 = __ldaxr(v3);
            if (v22 != v16)
            {
              __clrex();
              goto LABEL_33;
            }
          }
          while (__stlxr(v16 | 0x80000000, v3));
          atomic_store(5u, v19);
          sub_1D5311E9C(v2, v1, v21);
          sub_1D53120C4(v2, v21);
          sub_1D5312350(v2, v21);
          atomic_store(6u, v19);
          do
            v23 = __ldaxr(v3);
          while (__stlxr(v23 - 0x7FFFFFFF, v3));
          if (v17)
          {
            while (1)
            {
              v24 = atomic_load(v4);
              if (v24 < 2)
                break;
              while (1)
              {
                v25 = __ldaxr(v4);
                if (v25 != v24)
                  break;
                if (!__stlxr(v24 - 1, v4))
                {
                  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 1224));
                  goto LABEL_35;
                }
              }
              __clrex();
            }
          }
LABEL_35:
          ++v17;
          v16 = atomic_load(v3);
          v14 = 1;
          if ((v16 & 0x80000000) != 0)
            goto LABEL_36;
        }
        __dmb(0xBu);
        v26 = atomic_load(v3);
        if (v16 == v26)
          goto LABEL_36;
LABEL_33:
        v16 = atomic_load(v3);
      }
      while ((v16 & 0x80000000) == 0);
      while (1)
      {
LABEL_36:
        v27 = atomic_load(v77);
        if ((v27 & 0x80000000) != 0)
        {
LABEL_54:
          v42 = (unsigned int *)(v2 + 1204);
          if ((v14 & 1) == 0)
          {
            v43 = atomic_load(v3);
            if (v80 != v43)
              goto LABEL_75;
            v44 = atomic_load(v4);
            if (v44 <= 0)
            {
              v58 = atomic_load(v79);
              if (v58 > 0)
                goto LABEL_75;
            }
            v45 = *(_DWORD *)(v2 + 1180);
            v46 = *(_QWORD *)(v2 + 1184);
            v47 = *(_QWORD *)(v2 + 1192);
            v48 = atomic_load((unsigned int *)(v2 + 1168));
            if (v80 != v48)
              goto LABEL_75;
            v49 = 0;
            v74 = *(_DWORD *)(v2 + 1180);
            v75 = v14;
            v73 = *(_QWORD *)(v2 + 1184);
            while (1)
            {
              v50 = atomic_load(v4);
              if (v50 <= 0)
              {
                v51 = atomic_load(v42);
                if (v51 > 0)
                  break;
              }
              do
              {
                v52 = __ldaxr(v5);
                v53 = __OFSUB__(v52, 1);
                v54 = v52 - 1;
              }
              while (__stlxr(v54, v5));
              if (v54 < 0 != v53)
                break;
              if (v46)
                v54 = *(unsigned __int16 *)(v46 + 2 * v54);
              v55 = (void *)(v47 + (v54 << v45));
              if ((unint64_t)v55 >= *(_QWORD *)v2 && (unint64_t)v55 < *(_QWORD *)(v2 + 8))
              {
                v56 = NSPageSize();
                madvise(v55, v56, 3);
                v46 = v73;
                LOBYTE(v45) = v74;
                v14 = v75;
                v42 = (unsigned int *)(v2 + 1204);
              }
              ++v49;
              v57 = atomic_load(v3);
              if (v80 != v57)
                goto LABEL_2;
            }
            if (!v49)
            {
LABEL_75:
              if ((v14 & 1) == 0)
              {
                do
                  v59 = __ldaxr(v4);
                while (__stlxr(v59 + 1, v4));
                if (v59)
                {
                  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v2 + 1224), 0xFFFFFFFFFFFFFFFFLL);
                }
                else
                {
                  while (1)
                  {
                    sub_1D5311BB8(v2);
                    v60 = (_DWORD *)sub_1D5311CFC(v2);
                    v61 = v60;
                    do
                    {
                      v62 = __ldaxr(v6);
                      v63 = v62 + 1;
                    }
                    while (__stlxr(v62 + 1, v6));
                    *v60 = v62;
                    v64 = v62 & 0x1F;
                    *(_QWORD *)(v2 + 8 * v64 + 904) = v60;
                    atomic_store(0, (unsigned __int8 *)(v2 + 872 + (v63 & 0x1F)));
                    v81 = (unsigned __int8 *)(v2 + 872 + v64);
                    atomic_store(1u, v81);
                    sub_1D5311D80((int *)v2, (uint64_t)v60);
                    v61[3] = 0;
                    if (!*((_BYTE *)v61 + 17))
                    {
                      (*(void (**)(unint64_t, uint64_t, _DWORD *))(v2 + 608))(v2, a1, v61);
                      if (!*((_BYTE *)v61 + 32))
                      {
                        v65 = 0;
                        do
                        {
                          v66 = *((_QWORD *)v61 + 5) - 128;
                          if (v66 < *((_QWORD *)v61 + 3))
                            v66 = *((_QWORD *)v61 + 3);
                          *((_QWORD *)v61 + 5) = v66;
                          (*(void (**)(unint64_t, uint64_t, _DWORD *))(v2 + 608))(v2, a1, v61);
                          if (*((_BYTE *)v61 + 32))
                            v67 = 1;
                          else
                            v67 = v65 >= 6;
                          ++v65;
                        }
                        while (!v67);
                      }
                    }
                    *(_QWORD *)(v2 + 648) += *((_QWORD *)v61 + 5) - *((_QWORD *)v61 + 3);
                    *(_OWORD *)(v2 + 752) = *((_OWORD *)v61 + 2);
                    v68 = *(_QWORD *)(v2 + 760);
                    if (v68 >= *(_QWORD *)(v2 + 712))
                      *(_QWORD *)(v2 + 760) = v68 - *(int *)(v2 + 696);
                    v1 = a1;
                    atomic_store(2u, v81);
                    do
                      v69 = __ldaxr(v4);
                    while (__stlxr(v69 - 1, v4));
                    if (v69 < 2)
                      break;
                    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 1224));
                  }
                }
              }
            }
          }
          goto LABEL_2;
        }
        v28 = v27 & 0x1F;
        v29 = atomic_load((unsigned __int8 *)(v2 + v28 + 872));
        if (v29 == 6)
          break;
        __dmb(0xBu);
        v32 = atomic_load(v77);
        if (v27 == v32)
          goto LABEL_54;
      }
      v30 = *(_QWORD *)(v2 + 8 * v28 + 904);
      do
      {
        v31 = __ldaxr(v77);
        if (v31 != v27)
        {
          __clrex();
          goto LABEL_36;
        }
      }
      while (__stlxr(v27 + 1, v77));
      result = sub_1D53123E4(v2, v1, v30);
      v34 = *(unsigned __int8 *)(v30 + 17);
      v35 = (unsigned int *)(v30 + 8);
      do
      {
        v36 = __ldaxr(v35);
        v37 = __OFSUB__(v36, 1);
        v38 = v36 - 1;
      }
      while (__stlxr(v38, v35));
      if ((v38 < 0) ^ v37 | (v38 == 0))
      {
        v39 = 1 << *(_DWORD *)(v30 + 4);
        do
          v40 = __ldaxr(v76);
        while (__stlxr(v40 | v39, v76));
        do
          v41 = __ldaxr(v79);
        while (__stlxr(v41 + 1, v79));
        if ((v41 & 0x80000000) != 0)
          break;
      }
      if (v34)
        goto LABEL_98;
    }
    result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 1208));
  }
  while (!v34);
LABEL_98:
  atomic_store(1u, (unsigned __int8 *)(v2 + 561));
  v70 = (unsigned int *)(v2 + 720);
  do
    v71 = __ldaxr(v70);
  while (__stlxr(v71 + 1, v70));
  if (v71 == -1)
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 728));
  return result;
}

intptr_t sub_1D5311900(uint64_t a1)
{
  int v2;
  unint64_t v3;
  void (*v4)(unint64_t, uint64_t, uint64_t);
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  intptr_t result;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  BOOL v19;
  signed int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  v2 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 616);
  v5 = (unsigned int *)(v3 + 1200);
  v6 = (unsigned int *)(v3 + 1204);
  do
  {
    sub_1D5311BB8(v3);
    v7 = sub_1D5311CFC(v3);
    *(_DWORD *)v7 = v2;
    sub_1D5311D80((int *)v3, v7);
    if (!*(_BYTE *)(v7 + 17) && *(_BYTE *)(v7 + 33))
    {
      v8 = *(_DWORD *)(v7 + 36);
      v9 = *(__int16 *)(v7 + 34);
      v10 = *(unsigned __int8 **)(v7 + 40);
      if (v9 >= 8)
      {
        v9 = *(unsigned __int16 *)(v7 + 34);
        do
        {
          v11 = v9;
          v12 = *v10;
          v8 = v12 | (v8 << 8);
          if (v12 == 255)
            v13 = 2;
          else
            v13 = 1;
          v10 += v13;
          v9 = v11 - 8;
        }
        while (v11 > 0xF);
      }
      *(_DWORD *)(v7 + 36) = v8;
      *(_WORD *)(v7 + 34) = v9;
      *(_QWORD *)(v7 + 40) = v10;
    }
    *(_QWORD *)(v3 + 648) += *(_QWORD *)(v7 + 40) - *(_QWORD *)(v7 + 24);
    *(_OWORD *)(v3 + 752) = *(_OWORD *)(v7 + 32);
    v14 = *(_QWORD *)(v3 + 760);
    if (v14 >= *(_QWORD *)(v3 + 712))
      *(_QWORD *)(v3 + 760) = v14 - *(int *)(v3 + 696);
    if (*(_BYTE *)(v7 + 16) && !*(_BYTE *)(v7 + 17))
      v4(v3, a1, v7);
    sub_1D5311E9C(v3, a1, v7);
    sub_1D53120C4(v3, v7);
    sub_1D5312350(v3, v7);
    result = sub_1D53123E4(v3, a1, v7);
    v16 = *(unsigned __int8 *)(v7 + 17);
    v17 = (unsigned int *)(v7 + 8);
    do
    {
      v18 = __ldaxr(v17);
      v19 = __OFSUB__(v18, 1);
      v20 = v18 - 1;
    }
    while (__stlxr(v20, v17));
    if ((v20 < 0) ^ v19 | (v20 == 0))
    {
      v21 = 1 << *(_DWORD *)(v7 + 4);
      do
        v22 = __ldaxr(v5);
      while (__stlxr(v22 | v21, v5));
      do
        v23 = __ldaxr(v6);
      while (__stlxr(v23 + 1, v6));
      if ((v23 & 0x80000000) != 0)
        result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v3 + 1208));
    }
    ++v2;
  }
  while (!v16);
  atomic_store(1u, (unsigned __int8 *)(v3 + 561));
  v24 = (unsigned int *)(v3 + 720);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 + 1, v24));
  if (v25 == -1)
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v3 + 728));
  return result;
}

char *sub_1D5311B08(uint64_t a1, uint64_t a2)
{
  char *result;

  result = (char *)(a1 + 192);
  if (result != (char *)a2)
    return sub_1D5282A44(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

_QWORD *sub_1D5311B2C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E99781A0;
  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  return sub_1D5282F0C(a1);
}

void sub_1D5311B68(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E99781A0;
  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

intptr_t sub_1D5311BB8(intptr_t result)
{
  uint64_t v1;
  uint64_t v2;
  intptr_t v3;
  unsigned int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int16 v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int16 v16;

  v1 = *(_QWORD *)(result + 632);
  if (*(_QWORD *)(result + 648) + *(int *)(result + 548) + 8 >= v1)
    v2 = *(_QWORD *)(result + 632);
  else
    v2 = *(_QWORD *)(result + 648) + *(int *)(result + 548) + 8;
  if (v2 > *(_QWORD *)(result + 672))
  {
    v3 = result;
    v4 = (unsigned int *)(result + 736);
    do
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (v5 <= 0)
        result = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v3 + 744), 0xFFFFFFFFFFFFFFFFLL);
      v6 = *(_QWORD *)(v3 + 672) + *(int *)(v3 + 688);
      *(_QWORD *)(v3 + 672) = v6;
      v7 = *(_QWORD *)(v3 + 680);
      if (v6 > v7)
      {
        v7 += *(int *)(v3 + 696);
        *(_QWORD *)(v3 + 680) = v7;
      }
      if (v1 - 32 < v6)
      {
        v8 = *(_QWORD *)(v3 + 640);
        if (v1 >= v8)
        {
          v1 = v8 - 32;
          v9 = *(_QWORD *)(v3 + 712);
          v10 = (unsigned __int8 *)(v9 + v8 - 32 - v7);
          if ((unint64_t)v10 < *(_QWORD *)(v3 + 704))
            v10 += *(int *)(v3 + 696);
          v11 = v6 - v1;
          if ((int)v6 - (int)v1 >= 1)
          {
            v12 = 0;
            if (v11 >= 32)
              v11 = 32;
            v13 = v8 - 33;
            while (1)
            {
              v15 = *v10++;
              v14 = v15;
              if ((unint64_t)v10 > v9)
                v10 -= *(int *)(v3 + 696);
              v16 = v14 | (unsigned __int16)(v12 << 8);
              if (v16 == 65497)
                break;
              ++v13;
              v12 = v16;
              if (!--v11)
                goto LABEL_25;
            }
            *(_QWORD *)(v3 + 632) = v13;
          }
        }
      }
LABEL_25:
      ;
    }
    while (v2 > v6);
  }
  return result;
}

uint64_t sub_1D5311CFC(uint64_t a1)
{
  unsigned int *v2;
  int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = (unsigned int *)(a1 + 1204);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 - 1, v2));
  if (v3 <= 0)
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 1208), 0xFFFFFFFFFFFFFFFFLL);
  v4 = (unsigned int *)(a1 + 1200);
LABEL_6:
  v5 = atomic_load(v4);
  do
  {
    v6 = __ldaxr(v4);
    if (v6 != v5)
    {
      __clrex();
      goto LABEL_6;
    }
  }
  while (__stlxr((v5 - 1) & v5, v4));
  return *(_QWORD *)(a1 + 8 * __clz(__rbit32(v5)) + 288);
}

int *sub_1D5311D80(int *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  __int128 v9;
  const void **v10;
  int v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;

  v3 = *((_QWORD *)result + 81);
  v4 = v3 + result[137];
  v5 = *((_QWORD *)result + 79);
  v6 = v5 - v3;
  v7 = v4 < v5;
  v8 = v4 >= v5;
  if (v7)
    v6 = result[137];
  v9 = *((_OWORD *)result + 47);
  *(_BYTE *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 33) = v8;
  *(_WORD *)(a2 + 34) = 32;
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a2 + 24) + v6;
  if (v6 < 1
    || (v10 = (const void **)result, v11 = atomic_load((unsigned int *)result + 139), v11 < 1)
    || *(_BYTE *)(a2 + 17))
  {
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a2 + 16);
    *(_WORD *)(a2 + 32) = 257;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 72) = 0;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 40);
    result = (int *)*((_QWORD *)result + 89);
    if (v12 + 8 > (unint64_t)result)
    {
      v13 = (char *)result - *(_QWORD *)(a2 + 24);
      v14 = v12 - (_DWORD)result + 8;
      if (v14 <= (int)v13)
      {
        return (int *)memmove(result, v10[88], v14);
      }
      else
      {
        result = (int *)memmove((void *)((char *)v10[88] - v13), (int *)((char *)result - v13), (int)v13);
        v15 = *((int *)v10 + 174);
        *(_QWORD *)(a2 + 24) -= v15;
        *(_QWORD *)(a2 + 40) -= v15;
      }
    }
  }
  return result;
}

uint64_t sub_1D5311E9C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE *v6;
  BOOL v7;
  int v8;
  char v9;
  __int128 v10;
  unint64_t v11;
  signed int v12;
  unsigned int *v13;
  signed int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int i;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;

  v5 = result;
  v6 = (_BYTE *)(a3 + 16);
  v7 = *(_BYTE *)(result + 562) != 0;
  v8 = (*(_DWORD *)(result + 824) + *(_DWORD *)(result + 784)) & 1;
  if (!v8)
    v7 = 1;
  v9 = *(_BYTE *)(a3 + 16) & *(_BYTE *)(result + 768) & v7;
  *v6 = v9;
  if ((v9 & 1) == 0)
  {
    *(_DWORD *)(a3 + 12) = v8;
    *(_OWORD *)v6 = *(_OWORD *)(result + 768);
    if (*(_BYTE *)(a3 + 17))
    {
      if (*(_BYTE *)(result + 560))
      {
        *(_DWORD *)(a3 + 72) = 0;
        v10 = *(_OWORD *)v6;
        *(_OWORD *)(a3 + 32) = *(_OWORD *)v6;
        *(_OWORD *)(a3 + 48) = v10;
      }
    }
    else
    {
      v11 = *(_QWORD *)(a3 + 24);
      if (v11 < *(_QWORD *)(result + 704))
      {
        v11 += *(int *)(result + 696);
        *(_QWORD *)(a3 + 24) = v11;
      }
      if (v11 > *(_QWORD *)(a3 + 40))
        *(_QWORD *)(a3 + 24) = v11 - *(int *)(result + 696);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 616))(result, a2, a3);
    }
  }
  v12 = *(_DWORD *)(a3 + 72);
  v13 = (unsigned int *)(v5 + 556);
  v14 = atomic_load((unsigned int *)(v5 + 556));
  if (v12 > v14 && !*(_BYTE *)(a3 + 33))
  {
    v15 = *(_QWORD *)(a3 + 24);
    v16 = *(_QWORD *)(a3 + 56) - 2;
    if (v15 <= v16)
    {
      v17 = *(unsigned __int8 **)(a3 + 24);
      while (*v17 != 255 || v17[1] != 217)
      {
        ++v17;
        ++v15;
        if ((unint64_t)v17 > v16)
          goto LABEL_37;
      }
      v18 = 0;
      v19 = *(int *)(v5 + 696);
      if ((unint64_t)v17 >= *(_QWORD *)(v5 + 704))
        v20 = 0;
      else
        v20 = *(int *)(v5 + 696);
      v21 = *(_QWORD *)(v5 + 712);
      if ((unint64_t)&v17[v20] > v21)
        v22 = -v19;
      else
        v22 = 0;
      v23 = v20 + *(_QWORD *)(v5 + 680) + v22;
      if ((int64_t)(v23 - v21 + v15) >= *(_QWORD *)(v5 + 664))
        v24 = 0;
      else
        v24 = *(int *)(v5 + 696);
      v25 = v23 + v24;
      if ((int64_t)(v25 - v21 + v15) <= *(_QWORD *)(v5 + 672))
        v19 = 0;
      *(_QWORD *)(v5 + 632) = v25 - v19 - v21 + v15;
      for (i = 40; i > 0xF; i -= 8)
      {
        v27 = *v17;
        v18 = v27 | (v18 << 8);
        if (v27 == 255)
          v28 = 2;
        else
          v28 = 1;
        v17 += v28;
      }
      *(_QWORD *)(a3 + 40) = v17;
      *(_DWORD *)(a3 + 32) = 256;
      *(_DWORD *)(a3 + 36) = v18;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 616))(v5, a2, a3);
      *(_OWORD *)(a3 + 48) = *(_OWORD *)(a3 + 32);
      *(_BYTE *)(v5 + 560) = 1;
    }
  }
LABEL_37:
  v29 = *(_DWORD *)(a3 + 72);
  do
    v30 = __ldaxr(v13);
  while (__stlxr(v30 - v29, v13));
  return result;
}

unint64_t sub_1D53120C4(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  int v4;
  __int16 *v5;
  int v6;
  char *v7;
  _WORD *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  __int16 v20;
  __int16 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int16x4_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;

  v3 = result;
  v4 = *(_DWORD *)(result + 596);
  v5 = *(__int16 **)(a2 + 64);
  v6 = *(_DWORD *)(a2 + 72);
  v7 = (char *)(result + 784);
  v8 = *(_WORD **)(result + 816);
  v9 = *(_DWORD *)(result + 824);
  v10 = (v9 + v6) % v4;
  v11 = *(_DWORD *)(result + 784) + v9 + v6;
  v12 = *(_DWORD *)(result + 552);
  v13 = v12 - (*(_DWORD *)(result + 784) + v9);
  v14 = v13 & ~(v13 >> 31);
  v15 = (v13 & (v13 >> 31)) + v9;
  if (v12 < v11)
    v16 = v14;
  else
    v16 = *(_DWORD *)(a2 + 72);
  if (v12 < v11)
    v17 = v15;
  else
    v17 = *(_DWORD *)(result + 824);
  if (v12 < v11)
    v18 = v15 + v14;
  else
    v18 = v9 + v6;
  if (v12 < v11)
    v19 = 0;
  else
    v19 = v10;
  if (v18 >= v4 || v17 < 1)
  {
    if ((v17 & 3) != 0)
    {
      if ((v17 & 1) != 0)
      {
        v20 = *v5++;
        v8[v17++] = v20;
        --v16;
      }
      if ((v17 & 2) != 0)
      {
        v21 = &v8[v17];
        *v21 = *v5;
        v21[1] = v5[1];
        v17 += 2;
        v5 += 2;
        v16 -= 2;
      }
    }
  }
  else
  {
    memmove(&v5[v17], *(const void **)(a2 + 64), 2 * v16);
    result = (unint64_t)memmove(v5, v8, 2 * v17);
    v8 = 0;
    v16 += v17;
    v17 = 0;
  }
  *(_QWORD *)(v3 + 792) = v5;
  *(_DWORD *)(v3 + 800) = v16 - v19;
  *(_QWORD *)(v3 + 816) = v8;
  *(_DWORD *)(v3 + 824) = v17;
  v23 = *((_OWORD *)v7 + 3);
  v22 = *((_OWORD *)v7 + 4);
  v24 = *((_OWORD *)v7 + 2);
  *(_QWORD *)(a2 + 160) = *((_QWORD *)v7 + 10);
  *(_OWORD *)(a2 + 128) = v23;
  *(_OWORD *)(a2 + 144) = v22;
  *(_OWORD *)(a2 + 112) = v24;
  v25 = *((_OWORD *)v7 + 1);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)v7;
  *(_OWORD *)(a2 + 96) = v25;
  if (v19 <= 0)
    v26 = 1;
  else
    v26 = 2;
  atomic_store(v26, (unsigned int *)(a2 + 8));
  v27 = *(_DWORD *)(v3 + 824);
  v28 = 816;
  if (!v27)
    v28 = 792;
  v29 = *(int16x4_t **)(v3 + v28);
  v30 = *(_QWORD *)(v3 + 832);
  v31 = *(_QWORD *)(v3 + 840);
  v32 = *(_DWORD *)(v3 + 784);
  v33 = *(_DWORD *)(v3 + 848);
  v34 = *(_DWORD *)(v3 + 852);
  v35 = *(_DWORD *)(v3 + 800);
  if (v35 + v27 >= 1)
  {
    v36 = v32 + v27;
    if (v27)
      v37 = 0;
    else
      v37 = *(_DWORD *)(v3 + 800);
    result = (v36 + v37);
    v38 = *(_DWORD *)(v3 + 784);
    while (1)
    {
      if (v32 == (_DWORD)result)
      {
        if (v32 != v36)
          goto LABEL_48;
        v29 = *(int16x4_t **)(v3 + 792);
        result = (v36 + v35);
        if (!v35)
          break;
      }
      if (v32 == v33)
      {
        if (v32 == v34)
        {
          v39 = *(_QWORD *)(v31 + 24);
          v31 += 24;
          v30 = v39;
          v34 = v32 + *(_DWORD *)(v31 + 12) * *(_DWORD *)(v31 + 8);
        }
        else
        {
          v30 += 2 * *(int *)(v31 + 16);
        }
        v33 = *(_DWORD *)(v31 + 8) + v32;
      }
      if (v32 == v38)
      {
        *(int32x4_t *)(v3 + 856) = vaddw_s16(*(int32x4_t *)(v3 + 856), *v29);
        v38 = v32 + v4;
      }
      if (v33 >= (int)result)
        v40 = result;
      else
        v40 = v33;
      if (v38 < v40)
        v40 = v38;
      v41 = v40 - v32;
      v29 = (int16x4_t *)((char *)v29 + 2 * v41);
      v30 += 2 * v41;
      v32 = v40;
    }
    v32 = v36;
  }
LABEL_48:
  *(_DWORD *)(v3 + 784) = v32;
  *(_QWORD *)(v3 + 832) = v30;
  *(_QWORD *)(v3 + 840) = v31;
  *(_DWORD *)(v3 + 848) = v33;
  *(_DWORD *)(v3 + 852) = v34;
  *(_QWORD *)(v3 + 792) = 0;
  *(_DWORD *)(v3 + 800) = 0;
  *(_QWORD *)(v3 + 816) = 0;
  *(_QWORD *)(v3 + 808) = 0;
  *(_DWORD *)(v3 + 824) = 0;
  if (v19 >= 1)
  {
    *(_QWORD *)(v3 + 808) = a2;
    *(_QWORD *)(v3 + 816) = v29;
    *(_DWORD *)(v3 + 824) = v19;
  }
  return result;
}

intptr_t sub_1D5312350(intptr_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  intptr_t v6;
  unsigned int *v7;
  unsigned int v8;

  v2 = *(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 24) + *(_QWORD *)(result + 656);
  *(_QWORD *)(result + 656) = v2;
  *(_OWORD *)(result + 768) = *(_OWORD *)(a2 + 48);
  v3 = *(_QWORD *)(result + 664);
  v4 = v2 - v3;
  v5 = *(_DWORD *)(result + 688);
  if (v5 <= v4)
  {
    v6 = result;
    v7 = (unsigned int *)(result + 720);
    do
    {
      *(_QWORD *)(v6 + 664) = v3 + v5;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      if (v8 == -1)
        result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v6 + 728));
      v3 = *(_QWORD *)(v6 + 664);
      v5 = *(_DWORD *)(v6 + 688);
    }
    while (v5 <= *(_DWORD *)(v6 + 656) - (int)v3);
  }
  return result;
}

intptr_t sub_1D53123E4(intptr_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int16x4_t *v7;
  uint64_t v8;
  _WORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  __int32 v15;
  __int32 v16;
  int v17;
  int v18;
  unsigned int *v19;
  int8x16_t v20;
  unsigned int *v21;
  int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  BOOL v26;
  signed int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  _WORD *v32;
  int32x4_t v33;
  int v34;
  int v35;
  int16x4_t *v36;
  int16x4_t *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int32x2_t v43;
  unsigned int v44;
  unsigned int v45;
  int v47;
  int v48;
  int v49;
  intptr_t v50;
  uint64_t v51;
  int8x16_t v52;
  int v53;
  uint64_t v54;

  v3 = *(_QWORD *)(result + 584);
  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a3 + 120);
  v6 = 112;
  if (!v5)
    v6 = 88;
  v7 = *(int16x4_t **)(a3 + v6);
  v9 = *(_WORD **)(a3 + 128);
  v8 = *(_QWORD *)(a3 + 136);
  v10 = *(_DWORD *)(a3 + 80);
  v12 = *(_DWORD *)(a3 + 144);
  v11 = *(_DWORD *)(a3 + 148);
  v13 = v10 + v5;
  v14 = v10 + v5;
  if (!v5)
    v14 = *(_DWORD *)(a3 + 96) + v13;
  v15 = 0;
  v16 = 0;
  v17 = *(_DWORD *)(result + 596);
  v18 = *(_DWORD *)(result + 600);
  v19 = (unsigned int *)(result + 1200);
  v20 = 0uLL;
  v21 = (unsigned int *)(result + 1204);
  v22 = *(_DWORD *)(a3 + 80);
  v50 = result;
  v51 = a3;
  v48 = v17;
  v49 = v10 + v5;
  v47 = v18;
  while (v10 != v14)
  {
LABEL_20:
    if (v10 == v12)
    {
      if (v10 == v11)
      {
        v32 = *(_WORD **)(v8 + 24);
        v8 += 24;
        v9 = v32;
        v11 = v10 + *(_DWORD *)(v8 + 12) * *(_DWORD *)(v8 + 8);
      }
      else
      {
        v9 += *(int *)(v8 + 16);
      }
      v12 = *(_DWORD *)(v8 + 8) + v10;
    }
    if (v10 == v22)
    {
      v33 = *(int32x4_t *)(a3 + 152);
      *(int32x4_t *)(a3 + 152) = vaddw_s16(v33, *v7);
      v22 = v10 + v17;
      v16 = v33.i32[1];
      v20 = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL);
      v15 = v33.i32[0];
    }
    if (v12 >= v14)
      v34 = v14;
    else
      v34 = v12;
    if (v22 < v34)
      v34 = v22;
    v35 = v34 - v10;
    v36 = (int16x4_t *)((char *)v7 + 2 * (v34 - v10));
    v10 = v34;
    if (v18 == 2)
    {
      if (v35 >= 1)
      {
        do
        {
          v15 += v7->u16[0];
          v37 = (int16x4_t *)((char *)v7 + 4);
          v16 += v7->u16[1];
          v38 = *(unsigned __int16 *)(v3 + 2 * (unsigned __int16)v15);
          v39 = *(unsigned __int16 *)(v3 + 2 * (unsigned __int16)v16);
          if (v4 > v38)
            v40 = *(unsigned __int16 *)(v3 + 2 * (unsigned __int16)v15);
          else
            v40 = v4;
          *v9 = v38;
          v9[1] = v39;
          if (v40 > v39)
            v4 = v39;
          else
            v4 = v40;
          v9 += 2;
          v7 = v37;
        }
        while (v37 < v36);
        goto LABEL_53;
      }
    }
    else if (v35 >= 1)
    {
      do
      {
        v15 += v7->u16[0];
        v16 += v7->u16[1];
        v41 = *(unsigned __int16 *)(v3 + 2 * (unsigned __int16)v15);
        v42 = *(unsigned __int16 *)(v3 + 2 * (unsigned __int16)v16);
        *v9 = v41;
        if (v4 <= v41)
          v41 = v4;
        v9[1] = v42;
        if (v41 <= v42)
          v42 = v41;
        v37 = v7 + 1;
        v43.i32[0] = v7->u16[2];
        v43.i32[1] = v7->u16[3];
        *(int32x2_t *)v20.i8 = vadd_s32(*(int32x2_t *)v20.i8, v43);
        v44 = *(unsigned __int16 *)(v3 + 2 * v20.u16[0]);
        v45 = *(unsigned __int16 *)(v3 + 2 * v20.u16[2]);
        if (v42 > v44)
          v42 = *(unsigned __int16 *)(v3 + 2 * v20.u16[0]);
        v9[2] = v44;
        v9[3] = v45;
        if (v42 > v45)
          v4 = v45;
        else
          v4 = v42;
        v9 += 4;
        v7 = v37;
      }
      while (v37 < v36);
LABEL_53:
      v7 = v37;
      v10 = v34;
    }
  }
  if (v10 == v13)
  {
    v23 = *(_QWORD *)(a3 + 104);
    if (v23)
    {
      v24 = (unsigned int *)(v23 + 8);
      do
      {
        v25 = __ldaxr(v24);
        v26 = __OFSUB__(v25, 1);
        v27 = v25 - 1;
      }
      while (__stlxr(v27, v24));
      if ((v27 < 0) ^ v26 | (v27 == 0))
      {
        *(_QWORD *)(a3 + 104) = 0;
        v28 = 1 << *(_DWORD *)(v23 + 4);
        do
          v29 = __ldaxr(v19);
        while (__stlxr(v29 | v28, v19));
        do
          v30 = __ldaxr(v21);
        while (__stlxr(v30 + 1, v21));
        if ((v30 & 0x80000000) != 0)
        {
          v54 = v8;
          v53 = v11;
          v52 = v20;
          result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v50 + 1208));
          v20 = v52;
          v18 = v47;
          v17 = v48;
          v11 = v53;
          v13 = v49;
          v8 = v54;
          a3 = v51;
        }
      }
    }
    v31 = *(_DWORD *)(a3 + 96);
    if (v31)
    {
      v7 = *(int16x4_t **)(a3 + 88);
      v14 = v31 + v13;
      goto LABEL_20;
    }
  }
  *(_DWORD *)(a2 + 16) = v4;
  return result;
}

unsigned __int8 *sub_1D53126BC(unsigned __int8 *a1, uint64_t a2, int a3)
{
  unsigned __int8 *v3;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  char v13;
  unsigned int v14;
  BOOL v15;
  size_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  __int16 v41;
  __int16 v42;
  _BOOL4 v43;
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  __n128 v48;
  int8x8_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  uint32x4_t v54;
  int8x16_t v55;
  int32x4_t v56;
  int32x4_t v57;
  uint32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  uint32x4_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int32x4_t v65;
  uint32x4_t v66;
  uint32x4_t v67;
  uint32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int8x8_t v71;
  int8x8_t v72;
  int8x16_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  unsigned __int8 *v77;
  int v78;
  __int16 v79;
  __int16 v80;
  _BOOL4 v81;
  __int16 v82;
  __int16 v83;
  __int16 v84;

  v3 = 0;
  if (a1 && a2)
  {
    v7 = 0;
    v8 = 0;
    v9 = 16;
    v10 = a1;
    do
    {
      v12 = *v10++;
      v11 = v12;
      v13 = v9 - 1;
      if (v12)
      {
        v14 = ((v11 - 1) << v13) + v8;
        v15 = (((1 << v13) | v8 | v14) & 0xFFFF007F) == 0 || (~(v8 & v14) & 0xFE00) == 0;
        if (!v15)
          return 0;
      }
      v7 += v11;
      v8 += v11 << v13;
      --v9;
    }
    while (v9);
    if (v8 < 0x10000)
      v7 = v7 - v8 + 0x10000;
    if (v7 < -1)
      v16 = -1;
    else
      v16 = 8 * (v7 + 1);
    v17 = (unsigned __int8 *)operator new[]();
    bzero(v17, v16);
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = a3 - 2;
    do
    {
      v22 = v18++;
      v23 = a1[v22];
      if (a1[v22])
      {
        v24 = 15 - v22;
        v25 = &a1[v19 + 16];
        v26 = &v17[8 * v19 + 5];
        v19 += v23;
        v27 = 1 << v24;
        do
        {
          v29 = *v25++;
          v28 = v29;
          v30 = v29 != 16 || v21 > 2;
          if (!v30)
            v28 = dword_1D544A260[v21];
          v31 = v28 >> 4;
          if (a3 != 4)
            LOBYTE(v31) = 0;
          *(_DWORD *)(v26 - 5) = v20;
          *(v26 - 1) = v18;
          *v26 = v28 - v31;
          v26 += 8;
          v20 += v27;
          --v23;
        }
        while (v23);
      }
    }
    while (v18 != 16);
    v32 = v19;
    v33 = &a1[v19];
    if (v20 < 0x10000)
    {
      v34 = (uint64_t)&v17[8 * v32 + 5];
      v35 = v32 << 32;
      do
      {
        *(_DWORD *)(v34 - 5) = v20;
        *(_WORD *)(v34 - 1) = 16;
        v34 += 8;
        v35 += 0x100000000;
        v30 = v20++ < 0xFFFF;
      }
      while (v30);
      v32 = v35 >> 32;
      v20 = 0x10000;
    }
    v3 = v33 + 16;
    *(_DWORD *)&v17[8 * v32] = v20;
    v36 = v17[4];
    if (v36 >= 0xA)
    {
      v38 = *(_DWORD *)v17;
      v45 = *(_DWORD *)v17;
LABEL_49:
      if (v45 < 0x10000)
      {
        do
        {
          *(_WORD *)(a2 + 2 * (v45 >> 7)) = 0x8000;
          v30 = v45 < 65408;
          v45 += 128;
        }
        while (v30);
      }
    }
    else
    {
      v37 = 0;
      v38 = *(_DWORD *)v17;
      v39 = *(_DWORD *)v17;
      while (v39 < 0x10000)
      {
        v40 = v17[8 * v37 + 5];
        v41 = v40 & 0xF;
        if (a3 == 1 && v17[8 * v37 + 5] == 0)
          v42 = 1008;
        else
          v42 = v40 & 0xF0;
        v43 = v40 == 255 || a3 == 1 && v17[8 * v37 + 5] == 0;
        if (v40 == 255)
          v44 = 0;
        else
          v44 = v42;
        if (v43)
          v41 = 0;
        ++v37;
        v45 = *(_DWORD *)&v17[8 * v37];
        if (v39 < v45)
        {
          v46 = v44 | ((_WORD)v36 << 10) | v41;
          do
          {
            *(_WORD *)(a2 + 2 * (v39 >> 7)) = v46;
            v39 += 128;
          }
          while (v39 < v45);
        }
        v36 = v17[8 * v37 + 4];
        v39 = v45;
        if (v36 >= 0xA)
          goto LABEL_49;
      }
    }
    v47 = 0;
    v48 = (__n128)xmmword_1D544A240;
    v49 = (int8x8_t)vdup_n_s16(a3 == 4);
    v50.i64[0] = 0xA0000000ALL;
    v50.i64[1] = 0xA0000000ALL;
    v51.i64[0] = 0x400000004;
    v51.i64[1] = 0x400000004;
    v52.i64[0] = 0x3F0000003FLL;
    v52.i64[1] = 0x3F0000003FLL;
    v53.i64[0] = 0xF0000000FLL;
    v53.i64[1] = 0xF0000000FLL;
    v54.i64[0] = 0x800000008;
    v54.i64[1] = 0x800000008;
    v55 = (int8x16_t)vdupq_n_s32(0xFF80u);
    v56.i64[0] = 0x1000000010;
    v56.i64[1] = 0x1000000010;
    v57.i64[0] = 0x800000008000;
    v57.i64[1] = 0x800000008000;
    v58.i64[0] = -1;
    v58.i64[1] = -1;
    v59.i64[0] = 0x20000000200;
    v59.i64[1] = 0x20000000200;
    do
    {
      v60 = (int32x4_t)vmovl_u16(*(uint16x4_t *)(a2 + v47));
      v61 = (int32x4_t)vshrq_n_u32((uint32x4_t)v60, 4uLL);
      v62 = (uint32x4_t)vandq_s8((int8x16_t)v61, (int8x16_t)v52);
      v63 = (int32x4_t)vandq_s8((int8x16_t)v60, (int8x16_t)v53);
      v64 = (int8x16_t)vcgtq_u32(v54, (uint32x4_t)v63);
      v65 = vceqzq_s32(v63);
      v66 = (uint32x4_t)vsubq_s32(v63, v56);
      v67 = vshlq_u32(v58, (uint32x4_t)v63);
      v68 = vsraq_n_u32((uint32x4_t)v63, (uint32x4_t)v60, 0xAuLL);
      v69 = (int32x4_t)vshlq_u32((uint32x4_t)v48, vshrq_n_u32((uint32x4_t)v60, 0xAuLL));
      v70 = (int32x4_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)v69, v55), v66);
      v71 = (int8x8_t)vmovn_s32(vtstq_s32(v69, v57));
      v72 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8(v64, (int8x16_t)vcgtq_u32(v51, v62)), (int8x16_t)vcgtq_u32(v50, v68))), vand_s8(v49, (int8x8_t)vmovn_s32(vtstq_s32(v61, v52))));
      v73 = vandq_s8((int8x16_t)vaddq_s32(v70, (int32x4_t)vandq_s8((int8x16_t)(*(_OWORD *)&v67 | __PAIR128__(0x100000001, 0x100000001)), (int8x16_t)vcgezq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vand_s8(v72, vand_s8((int8x8_t)vmovn_s32(vtstq_s32(v60, v53)), v71))), 0x1FuLL)))), (int8x16_t)vcgezq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vand_s8(v72, (int8x8_t)vmovn_s32(v65))), 0x1FuLL)));
      if ((v72.i8[0] & 1) != 0)
        *(_WORD *)(a2 + v47) = (v68.i16[0] << 10) | (v62.i16[0] << 8) | v73.u8[0] | 0x8000;
      if ((v72.i8[2] & 1) != 0)
        *(_WORD *)(a2 + v47 + 2) = (v68.i16[2] << 10) | (v62.i16[2] << 8) | v73.u8[4] | 0x8000;
      if ((v72.i8[4] & 1) != 0)
        *(_WORD *)(a2 + v47 + 4) = (v68.i16[4] << 10) | (v62.i16[4] << 8) | v73.u8[8] | 0x8000;
      if ((v72.i8[6] & 1) != 0)
        *(_WORD *)(a2 + v47 + 6) = (v68.i16[6] << 10) | (v62.i16[6] << 8) | v73.u8[12] | 0x8000;
      v48 = (__n128)vaddq_s32((int32x4_t)v48, v59);
      v47 += 8;
    }
    while (v47 != 1024);
    if (v38 < 0x10000)
    {
      v74 = 0;
      do
      {
        v75 = v74 + 1;
        v76 = *(_DWORD *)&v17[8 * v74 + 8];
        if (v76 >= 65024)
        {
          v77 = &v17[8 * v74];
          v78 = v77[5];
          v79 = v78 & 0xF;
          v80 = a3 == 1 && v77[5] == 0 ? 1008 : v78 & 0xF0;
          v15 = v78 == 255;
          v81 = v78 == 255 || a3 == 1 && v77[5] == 0;
          v82 = v15 ? 0 : v80;
          v83 = v81 ? 0 : v79;
          if (v38 < v76)
          {
            v84 = v82 | (v77[4] << 10) | v83;
            do
            {
              if (v38 >= 65024)
                *(_WORD *)(a2 + 2 * (v38 & 0x1FF | 0x200u)) = v84;
              ++v38;
            }
            while (v76 != v38);
          }
        }
        v74 = v75;
        v38 = v76;
      }
      while (v76 < 0x10000);
    }
    MEMORY[0x1D8271AC4](v17, 0x1000C80789AEA99, v48);
  }
  return v3;
}

unsigned __int8 *sub_1D5312BE8(unsigned __int8 *a1, _WORD *a2)
{
  unsigned __int8 *v2;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  char v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  size_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  char v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int v36;
  unsigned __int8 *v37;
  int v38;
  __int16 v39;
  BOOL v40;
  __int16 v41;
  __int16 v42;
  int *v43;
  int v44;
  uint64_t v45;
  __n128 v46;
  uint32x4_t v47;
  uint32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint32x4_t v51;
  int8x16_t v52;
  int32x4_t v53;
  int8x16_t v54;
  uint32x4_t v55;
  int32x4_t v56;
  int8x16_t v57;
  uint32x4_t v58;
  uint32x4_t v59;
  int32x4_t v60;
  int8x16_t v61;
  int8x16_t v62;
  uint32x4_t v63;
  uint32x4_t v64;
  uint32x4_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int16x4_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  int v74;
  int v75;
  __int16 v76;
  __int16 v77;
  int v78;
  __int16 v79;
  uint64_t v80;

  v2 = 0;
  if (!a1 || !a2)
    return v2;
  v5 = 0;
  v6 = 0x10000;
  v7 = 16;
  v8 = a1;
  do
  {
    v10 = *v8++;
    v9 = v10;
    v11 = v7 - 1;
    v6 -= v10 << (v7 - 1);
    if (v10)
    {
      v12 = 1 << v11;
      v13 = v6 + ((v9 - 1) << v11);
      v14 = (v6 | v12 | v13) & 0xFFFF007F;
      v15 = ((unsigned __int16)v13 | (unsigned __int16)v6) & 0xFE00;
      if (v14 && v15 != 0)
        return 0;
    }
    v5 += v9;
    --v7;
  }
  while (v7);
  v17 = 8 * (v5 + (v6 & ~(v6 >> 31)) + 1);
  v18 = (unsigned __int8 *)operator new[]();
  bzero(v18, v17);
  v19 = 0;
  v20 = 0;
  v21 = 0x10000;
  do
  {
    v22 = v19++;
    v23 = a1[v22];
    if (a1[v22])
    {
      v24 = 0;
      v25 = -1 << (15 - v22);
      v26 = &v18[8 * v20 + 4];
      do
      {
        if (a1[v20 + 16 + v24] == 16)
          v27 = -112;
        else
          v27 = a1[v20 + 16 + v24];
        v21 += v25;
        *((_DWORD *)v26 - 1) = v21;
        *v26 = v19;
        v26[1] = v27;
        ++v24;
        v26 += 8;
      }
      while (v23 != (_DWORD)v24);
      v20 += v24;
    }
  }
  while (v19 != 16);
  v28 = v20;
  v29 = &a1[v20];
  if (v21 >= 1)
  {
    v30 = (uint64_t)&v18[8 * v28 + 5];
    v31 = v28 << 32;
    v32 = v21 + 1;
    do
    {
      *(_DWORD *)(v30 - 5) = v32 - 2;
      *(_WORD *)(v30 - 1) = 16;
      v30 += 8;
      v31 += 0x100000000;
      --v32;
    }
    while (v32 > 1);
    v21 = 0;
    v28 = v31 >> 32;
  }
  v2 = v29 + 16;
  *(_DWORD *)&v18[8 * v28] = v21;
  v33 = v18[4];
  v34 = v18;
  if (v33 > 9)
  {
LABEL_39:
    v36 = *(_DWORD *)v34;
    if (v36 < 1)
      goto LABEL_41;
  }
  else
  {
    v35 = 0;
    v34 = v18;
    while (1)
    {
      v36 = *(_DWORD *)v34;
      if (v36 >= 0x10000)
        break;
      v37 = &v18[8 * v35];
      v38 = v37[5];
      v39 = v38 & 0xF0;
      v40 = v38 == 255;
      if (v38 == 255)
        v41 = 0;
      else
        v41 = v38 & 0xF;
      if (v40)
        v39 = 0;
      v42 = v39 | ((_WORD)v33 << 10) | v41;
      v43 = (int *)(v37 - 8);
      if (v35)
      {
LABEL_33:
        v44 = *v43;
        goto LABEL_35;
      }
      while (1)
      {
        v44 = 0x10000;
LABEL_35:
        if (v36 >= v44)
          break;
        a2[v36 >> 7] = v42;
        v36 += 128;
        if (v35)
          goto LABEL_33;
      }
      ++v35;
      v34 = &v18[8 * v35];
      v33 = v34[4];
      if (v33 >= 0xA)
        goto LABEL_39;
    }
  }
  memset_pattern16(a2, &unk_1D544A250, (((v36 - 1) >> 6) & 0x3FFFFFE) + 2);
LABEL_41:
  v45 = 0;
  v46 = (__n128)xmmword_1D544A240;
  v47.i64[0] = 0xA0000000ALL;
  v47.i64[1] = 0xA0000000ALL;
  v48.i64[0] = 0x400000004;
  v48.i64[1] = 0x400000004;
  v49.i64[0] = 0x3F0000003FLL;
  v49.i64[1] = 0x3F0000003FLL;
  v50.i64[0] = 0xF0000000FLL;
  v50.i64[1] = 0xF0000000FLL;
  v51.i64[0] = 0x800000008;
  v51.i64[1] = 0x800000008;
  v52 = (int8x16_t)vdupq_n_s32(0xFF80u);
  v53.i64[0] = 0x1000000010;
  v53.i64[1] = 0x1000000010;
  v54.i64[0] = 0x800000008000;
  v54.i64[1] = 0x800000008000;
  v55.i64[0] = -1;
  v55.i64[1] = -1;
  v56.i64[0] = 0x20000000200;
  v56.i64[1] = 0x20000000200;
  do
  {
    v57 = (int8x16_t)vmovl_u16(*(uint16x4_t *)&a2[v45]);
    v58 = vshrq_n_u32((uint32x4_t)v57, 0xAuLL);
    v59 = (uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v57, 4uLL), v49);
    v60 = (int32x4_t)vandq_s8(v57, v50);
    v61 = (int8x16_t)vcgtq_u32(v51, (uint32x4_t)v60);
    v62 = (int8x16_t)vceqzq_s32(v60);
    v63 = (uint32x4_t)vsubq_s32(v60, v53);
    v64 = vshlq_u32(v55, (uint32x4_t)v60);
    v65 = vsraq_n_u32((uint32x4_t)v60, (uint32x4_t)v57, 0xAuLL);
    v66 = vandq_s8((int8x16_t)vcgtq_u32(v47, v65), (int8x16_t)vcgtq_u32(v48, v59));
    v67 = (int8x16_t)vshlq_u32((uint32x4_t)v46, v58);
    v68 = vandq_s8(veorq_s8(v62, v61), v66);
    v69 = vandq_s8(v62, v66);
    v70 = vbicq_s8((int8x16_t)vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v67, v52), v63), (int32x4_t)vbicq_s8((int8x16_t)(*(_OWORD *)&v64 | __PAIR128__(0x100000001, 0x100000001)), vbicq_s8(v68, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v67, v54))))), v69);
    v71 = vmovn_s32((int32x4_t)vorrq_s8(v68, v69));
    if ((v71.i8[0] & 1) != 0)
      a2[v45] = (v65.i16[0] << 10) | (v59.i16[0] << 8) | v70.u8[0] | 0x8000;
    if ((v71.i8[2] & 1) != 0)
      a2[v45 + 1] = (v65.i16[2] << 10) | (v59.i16[2] << 8) | v70.u8[4] | 0x8000;
    if ((v71.i8[4] & 1) != 0)
      a2[v45 + 2] = (v65.i16[4] << 10) | (v59.i16[4] << 8) | v70.u8[8] | 0x8000;
    if ((v71.i8[6] & 1) != 0)
      a2[v45 + 3] = (v65.i16[6] << 10) | (v59.i16[6] << 8) | v70.u8[12] | 0x8000;
    v46 = (__n128)vaddq_s32((int32x4_t)v46, v56);
    v45 += 4;
  }
  while (v45 != 512);
  v72 = 0;
  do
  {
    if (v72)
    {
      v73 = &v18[8 * v72];
      v74 = *((_DWORD *)v73 - 2);
      if (v74 <= 512)
      {
        v75 = v73[5];
        v76 = v75 & 0xF0;
        v77 = v75 & 0xF;
        if (v75 == 255)
        {
          v77 = 0;
          v76 = 0;
        }
        v78 = *(_DWORD *)v73;
        if (*(_DWORD *)v73 < v74)
        {
          v79 = v76 | (v73[4] << 10) | v77;
          do
          {
            if (v78 <= 511)
              a2[v78 & 0x1FF | 0x200] = v79;
            ++v78;
          }
          while (v74 != v78);
        }
      }
    }
    v80 = 8 * v72++;
  }
  while (*(_DWORD *)&v18[v80]);
  MEMORY[0x1D8271AC4](v18, 0x1000C80789AEA99, v46);
  return v2;
}

id sub_1D5313048(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[11];
  _QWORD v43[2];

  v43[1] = *MEMORY[0x1E0C80C00];
  v5 = *MEMORY[0x1E0CBD388];
  v34 = *MEMORY[0x1E0CBD368];
  v35 = v5;
  v42[0] = MEMORY[0x1E0C9AAB0];
  v42[1] = CFSTR("com.kodak.raw-image");
  v6 = *MEMORY[0x1E0CBD380];
  v36 = *MEMORY[0x1E0CBD348];
  v42[2] = CFSTR(".dcr.");
  v42[3] = &unk_1E99CB160;
  v42[4] = &unk_1E99CB178;
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], a2, (uint64_t)sub_1D5280D94, a4, a5, v34, v35, v36, v6, *MEMORY[0x1E0CBD370], *MEMORY[0x1E0CBD378]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v42[5] = v7;
  v37 = *MEMORY[0x1E0CBD330];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v8, (uint64_t)sub_1D53132FC, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v42[6] = v11;
  v38 = *MEMORY[0x1E0CBD350];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v12, (uint64_t)sub_1D5313308, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v42[7] = v15;
  v39 = *MEMORY[0x1E0CBD338];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v16, (uint64_t)sub_1D52E8DA4, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v42[8] = v19;
  v40 = *MEMORY[0x1E0CBD358];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v20, (uint64_t)sub_1D5313314, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v42[9] = v23;
  v41 = *MEMORY[0x1E0CBD360];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v24, (uint64_t)sub_1D5313320, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v42[10] = v27;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v28, (uint64_t)v42, (uint64_t)&v34, 11);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v43[0] = v29;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v30, (uint64_t)v43, 1, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  return v32;
}

void sub_1D531329C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1D53132FC(const void *a1, uint64_t a2, uint64_t a3)
{
  sub_1D52E7A20(a1, a2, a3, &unk_1E9978288);
}

uint64_t sub_1D5313308(os_signpost_id_t a1)
{
  return sub_1D52E8C40(a1);
}

uint64_t sub_1D5313314(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1D52E7438(a1, a2, a3, &unk_1E9978288);
}

uint64_t sub_1D5313320(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1D52E9A7C(a1, a2, a3, &unk_1E9978288);
}

void sub_1D531332C(uint64_t *a1@<X1>, char a2@<W2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X8>)
{
  __int128 v8;
  id v9;
  id v10;
  char v11;

  v11 = a2;
  v10 = a3;
  v9 = a4;
  sub_1D53149DC(a1, &v11, &v10, &v9, &v8);
  *a5 = v8;

}

void sub_1D53133A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D53133C4(uint64_t a1)
{
  _BOOL4 v2;
  void *__p[2];
  char v5;
  unsigned int v6;

  v6 = 1;
  sub_1D52850A0(__p, "IFD0:SUBIFD1");
  v2 = sub_1D52A89D8(a1, __p, &v6);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v2)
    return v6;
  else
    return 1;
}

void sub_1D5313430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D531344C(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  sub_1D52850A0(__p, "IFD0:SUBIFD1");
  v2 = sub_1D52B0BBC(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D53134A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D53134C0(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  sub_1D52850A0(__p, "IFD0:SUBIFD1");
  v2 = sub_1D52B0C2C(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D5313518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1D5313534(uint64_t a1)
{
  unint64_t v2;
  void *__p[2];
  char v5;

  sub_1D52850A0(__p, "IFD0:SUBIFD1");
  v2 = sub_1D52B0D58(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D531358C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D53135A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v4;
  int v5;
  void *__p[2];
  char v7;
  int v8;

  v1 = *(_QWORD *)(a1 + 1208);
  if (v1 == *(_QWORD *)(a1 + 1200))
  {
    v8 = 0;
    sub_1D52850A0(__p, "IFD0:SUBIFD1");
    v4 = sub_1D52A8AA4(a1, __p, 0, &v8);
    v5 = v4;
    if (v7 < 0)
    {
      operator delete(__p[0]);
      if (v5)
        goto LABEL_5;
    }
    else if (v4)
    {
LABEL_5:
      LOWORD(result) = v8;
      return (unsigned __int16)result;
    }
    LOWORD(result) = sub_1D52919BC();
    return (unsigned __int16)result;
  }
  LOWORD(result) = *(_WORD *)(v1 - 2);
  return (unsigned __int16)result;
}

void sub_1D531363C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1D5313658(void **a1, uint64_t a2, char a3)
{
  uint64_t v6;
  void **v7;
  void **v8;
  double v9;
  void *__p[2];
  char v12;

  v6 = (uint64_t)(a1 + 36);
  sub_1D52850A0(__p, "IFD0");
  v7 = sub_1D5294144(v6, __p);
  v8 = v7;
  if (a1 + 37 == v7)
    v9 = -1.0;
  else
    v9 = *((double *)v7 + 7);
  if (v12 < 0)
    operator delete(__p[0]);
  if (a1 + 37 == v8)
    return sub_1D52912CC(a1, a2, a3);
  return v9;
}

void sub_1D5313708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1D5313724(uint64_t a1)
{
  if (sub_1D536CB88((double *)(a1 + 1184)))
    return *(double *)(a1 + 1184);
  else
    return sub_1D5291780();
}

void sub_1D5313760(uint64_t **a1, uint64_t a2, unsigned __int16 *a3)
{
  int v6;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *v11;
  size_t v12;
  void *v13;
  const void *v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  size_t v19;
  void *p_p;
  const void *v21;
  void *__p;
  std::__shared_weak_count *v23;
  char v24;
  unsigned int __src;
  void *v26;
  _BYTE *v27;
  void **v28;

  sub_1D52ABE88(a1, a2, a3);
  v6 = *a3;
  if (v6 == 33424)
  {
    if (a3[1] == 4)
    {
      sub_1D52917E4((uint64_t)a1, &__p);
      __src = *((_DWORD *)a3 + 2);
      sub_1D5282F74((int *)&v28, (int *)&__src);
      sub_1D5285164((uint64_t *)&v26, (uint64_t *)&__p, (uint64_t)&v28, 0);
      v16 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (*(char *)(a2 + 23) >= 0)
        v19 = *(unsigned __int8 *)(a2 + 23);
      else
        v19 = *(_QWORD *)(a2 + 8);
      p_p = &__p;
      sub_1D52B1FA0((uint64_t)&__p, v19 + 12);
      if (v24 < 0)
        p_p = __p;
      if (v19)
      {
        if (*(char *)(a2 + 23) >= 0)
          v21 = (const void *)a2;
        else
          v21 = *(const void **)a2;
        memmove(p_p, v21, v19);
      }
      strcpy((char *)p_p + v19, ":KodakSubIFD");
      ((void (*)(uint64_t **, void **))(*a1)[96])(a1, &__p);
      if (v24 < 0)
        operator delete(__p);
      sub_1D5285200((uint64_t *)&v26);
    }
  }
  else if (v6 == 37397 && a3[1] == 5 && *((_DWORD *)a3 + 1) == 1)
  {
    sub_1D52917E4((uint64_t)a1, &__p);
    sub_1D52A75D8((uint64_t)a3, (uint64_t *)&__p, &v26);
    v8 = v23;
    if (v23)
    {
      v9 = (unint64_t *)&v23->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = v26;
    if (v27 - (_BYTE *)v26 == 8)
    {
      __src = *(double *)v26;
      if (*(char *)(a2 + 23) >= 0)
        v12 = *(unsigned __int8 *)(a2 + 23);
      else
        v12 = *(_QWORD *)(a2 + 8);
      v13 = &__p;
      sub_1D52B1FA0((uint64_t)&__p, v12 + 16);
      if (v24 < 0)
        v13 = __p;
      if (v12)
      {
        if (*(char *)(a2 + 23) >= 0)
          v14 = (const void *)a2;
        else
          v14 = *(const void **)a2;
        memmove(v13, v14, v12);
      }
      strcpy((char *)v13 + v12, ":EPExposureIndex");
      v28 = &__p;
      v15 = (char *)sub_1D52BA2C8(a1 + 24, &__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v28);
      sub_1D5282A44(v15 + 56, (char *)&__src, (uint64_t)&v26, 1uLL);
      if (v24 < 0)
        operator delete(__p);
      v11 = v26;
    }
    if (v11)
    {
      v27 = v11;
      operator delete(v11);
    }
  }
}

void sub_1D5313A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D5313A9C(uint64_t a1, const void **a2, unsigned __int16 *a3)
{
  unsigned int v6;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int v15;
  double v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  size_t v20;
  void *p_p;
  const void *v22;
  double v23;
  uint64_t *v24;
  void *__p;
  std::__shared_weak_count *v26;
  char v27;
  void *v28[2];
  uint64_t v29;
  void **v30;
  double __src[3];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  nullsub_6();
  v6 = *a3;
  if (v6 > 0x845)
  {
    if (v6 == 2118)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) == 0
        && a3[1] == 3
        && *((_DWORD *)a3 + 1) == 1)
      {
        LODWORD(__p) = 0;
        sub_1D5285A24(v28, (unsigned int *)&__p);
        v15 = sub_1D52A7E28((uint64_t)a3, (unsigned int *)v28);
        if (v15)
        {
          if (v15 == 6000 || (v16 = 0.0, v15 == 5000))
          {
            v15 = 3800;
            v16 = 21.0;
          }
          sub_1D536C570((double *)(a1 + 1184), (double)v15, v16);
        }
      }
    }
    else if (v6 == 2125)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) == 0
        && a3[1] == 5
        && *((_DWORD *)a3 + 1) == 3)
      {
        sub_1D52917E4(a1, &__p);
        sub_1D52A75D8((uint64_t)a3, (uint64_t *)&__p, v28);
        v17 = v26;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        if (*((char *)a2 + 23) >= 0)
          v20 = *((unsigned __int8 *)a2 + 23);
        else
          v20 = (size_t)a2[1];
        p_p = &__p;
        sub_1D52B1FA0((uint64_t)&__p, v20 + 11);
        if (v27 < 0)
          p_p = __p;
        if (v20)
        {
          if (*((char *)a2 + 23) >= 0)
            v22 = a2;
          else
            v22 = *a2;
          memmove(p_p, v22, v20);
        }
        strcpy((char *)p_p + v20, ":WhitePoint");
        v23 = *((double *)v28[0] + 1);
        __src[0] = v23 / *(double *)v28[0];
        __src[1] = 1.0;
        __src[2] = v23 / *((double *)v28[0] + 2);
        v30 = &__p;
        v24 = sub_1D52B3E7C((uint64_t **)(a1 + 144), &__p, (uint64_t)&unk_1D544A5C4, (__int128 **)&v30);
        sub_1D528FA34((char *)v24 + 56, (char *)__src, (uint64_t)&v32, 3uLL);
        if (v27 < 0)
          operator delete(__p);
        if (v28[0])
        {
          v28[1] = v28[0];
          operator delete(v28[0]);
        }
      }
    }
    else if (v6 == 2317 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) & 1) == 0 && a3[1] == 3)
    {
      sub_1D52917E4(a1, &__p);
      sub_1D52A79AC((uint64_t)a3, (uint64_t *)&__p, (uint64_t)v28);
      v8 = *(void **)(a1 + 1200);
      if (v8)
      {
        *(_QWORD *)(a1 + 1208) = v8;
        operator delete(v8);
        *(_QWORD *)(a1 + 1200) = 0;
        *(_QWORD *)(a1 + 1208) = 0;
        *(_QWORD *)(a1 + 1216) = 0;
      }
      *(_OWORD *)(a1 + 1200) = *(_OWORD *)v28;
      *(_QWORD *)(a1 + 1216) = v29;
      v28[1] = 0;
      v29 = 0;
      v28[0] = 0;
      v9 = v26;
      if (v26)
      {
        v10 = (unint64_t *)&v26->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
  else
  {
    switch(*a3)
    {
      case 0x3EBu:
        if (a3[1] == 3 && *((_DWORD *)a3 + 1) == 1)
        {
          LODWORD(__p) = 0;
          sub_1D5285A24(v28, (unsigned int *)&__p);
          *(_WORD *)(a1 + 1226) = sub_1D52A7E28((uint64_t)a3, (unsigned int *)v28);
        }
        break;
      case 0x3ECu:
        if (a3[1] == 3 && *((_DWORD *)a3 + 1) == 1)
        {
          LODWORD(__p) = 0;
          sub_1D5285A24(v28, (unsigned int *)&__p);
          *(_WORD *)(a1 + 1224) = sub_1D52A7E28((uint64_t)a3, (unsigned int *)v28);
        }
        break;
      case 0x3EDu:
        if (a3[1] == 3 && *((_DWORD *)a3 + 1) == 1)
        {
          LODWORD(__p) = 0;
          sub_1D5285A24(v28, (unsigned int *)&__p);
          *(_WORD *)(a1 + 1228) = sub_1D52A7E28((uint64_t)a3, (unsigned int *)v28);
        }
        break;
      case 0x3EEu:
        if (a3[1] == 3 && *((_DWORD *)a3 + 1) == 1)
        {
          LODWORD(__p) = 0;
          sub_1D5285A24(v28, (unsigned int *)&__p);
          *(_WORD *)(a1 + 1230) = sub_1D52A7E28((uint64_t)a3, (unsigned int *)v28);
        }
        break;
      default:
        return;
    }
  }
}

void sub_1D5313ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D5313F24(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *__p[2];
  char v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 536))(a1);
  if (v8 < 2)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 384))(&v27, a1);
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1);
    sub_1D5314B2C(&v27, (unint64_t *)&v26, a2, a3, __p);
    v14 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    goto LABEL_26;
  }
  if (v8 == 7)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 384))(&v27, a1);
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1);
    sub_1D5314C64(&v27, (unint64_t *)&v26, a2, a3, __p);
    v17 = v28;
    if (v28)
    {
      v18 = (unint64_t *)&v28->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    goto LABEL_26;
  }
  if (v8 == 65000)
  {
    v25 = 0;
    sub_1D52850A0(__p, "IFD0:SUBIFD1");
    v9 = sub_1D52A8A60(a1, __p, &v25);
    v10 = v25 == 32803 && v9;
    if (v24 < 0)
    {
      operator delete(__p[0]);
      if (v10)
      {
LABEL_9:
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 384))(&v27, a1);
        v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1);
        sub_1D5314DAC(&v27, (unint64_t *)&v26, a2, a3, __p);
        v11 = v28;
        if (v28)
        {
          v12 = (unint64_t *)&v28->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
LABEL_26:
        v20 = __p[0];
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
        sub_1D528304C(&v26, (unint64_t *)&v27);
        (*(void (**)(void *, uint64_t *))(*(_QWORD *)v20 + 32))(v20, &v26);
        v21 = __p[0];
        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
        sub_1D530CBD8((uint64_t)v21, v22);
        sub_1D530C460((uint64_t)__p[0], a1 + 1200);
        *(_OWORD *)a4 = *(_OWORD *)__p;
        return;
      }
    }
    else if (v10)
    {
      goto LABEL_9;
    }
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
}

void sub_1D5314290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_1D5282EB4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1D5314300(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  std::string __p;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t *v45;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_1D52850A0(&__p, "dcr");
  v4 = a2[2];
  v5 = a2[1];
  if (v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a2) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a2) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v45 = a2 + 2;
    if (v10)
      v11 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v10);
    else
      v11 = 0;
    v12 = &v11[24 * v7];
    v41 = v11;
    v42 = v12;
    v44 = &v11[24 * v10];
    v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v12 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v12 = v13;
    memset(&__p, 0, sizeof(__p));
    v43 = v12 + 24;
    sub_1D5293D58(a2, &v41);
    v14 = a2[1];
    sub_1D5293F24((uint64_t)&v41);
    v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v14;
    if (v15 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v5 = v6;
    a2[1] = v5 + 24;
  }
  sub_1D52850A0(&__p, "kodak");
  v17 = a2[1];
  v16 = a2[2];
  if (v17 >= v16)
  {
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a2) >> 3);
    v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a2) >> 3);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v20;
    v45 = a2 + 2;
    if (v22)
      v23 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v22);
    else
      v23 = 0;
    v24 = &v23[24 * v19];
    v41 = v23;
    v42 = v24;
    v44 = &v23[24 * v22];
    v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v24 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v24 = v25;
    memset(&__p, 0, sizeof(__p));
    v43 = v24 + 24;
    sub_1D5293D58(a2, &v41);
    v26 = a2[1];
    sub_1D5293F24((uint64_t)&v41);
    v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v26;
    if (v27 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v17 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v17 = v18;
    a2[1] = v17 + 24;
  }
  sub_1D5293780(a1, &__p);
  v29 = a2[1];
  v28 = a2[2];
  if (v29 >= v28)
  {
    v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *a2) >> 3);
    v32 = v31 + 1;
    if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a2) >> 3);
    if (2 * v33 > v32)
      v32 = 2 * v33;
    if (v33 >= 0x555555555555555)
      v34 = 0xAAAAAAAAAAAAAAALL;
    else
      v34 = v32;
    v45 = a2 + 2;
    if (v34)
      v35 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v34);
    else
      v35 = 0;
    v36 = &v35[24 * v31];
    v41 = v35;
    v42 = v36;
    v44 = &v35[24 * v34];
    v37 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v36 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v36 = v37;
    memset(&__p, 0, sizeof(__p));
    v43 = v36 + 24;
    sub_1D5293D58(a2, &v41);
    v38 = a2[1];
    sub_1D5293F24((uint64_t)&v41);
    v39 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v38;
    if (v39 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v29 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v29 = v30;
    a2[1] = v29 + 24;
  }
}

void sub_1D5314654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1D5293F24((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_1D5293CCC((void ***)&__p);
  _Unwind_Resume(a1);
}

id sub_1D53146AC(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD v21[5];
  _QWORD v22[3];
  _QWORD v23[3];
  void *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  sub_1D52A8CA4(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend_mutableCopy(v2, v3, v4, v5, v6);

  v24 = &unk_1E99CB190;
  v22[0] = CFSTR("Name");
  v22[1] = CFSTR("Type");
  v23[0] = CFSTR("KodakSubIFD");
  v23[1] = &unk_1E99CB1A8;
  v22[2] = CFSTR("Namespace");
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = sub_1D5314868;
  v21[3] = &unk_1E99732B0;
  v21[4] = a1;
  v8 = (void *)MEMORY[0x1D82721B4](v21);
  v23[2] = v8;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v9, (uint64_t)v23, (uint64_t)v22, 3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v25[0] = v10;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v11, (uint64_t)v25, (uint64_t)&v24, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addEntriesFromDictionary_(v7, v13, (uint64_t)v12, v14, v15);

  objc_msgSend_dictionaryWithDictionary_(MEMORY[0x1E0C99D80], v16, (uint64_t)v7, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  return v19;
}

void sub_1D531481C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5314868(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 784))(*(_QWORD *)(a1 + 32));
}

id sub_1D5314878(uint64_t a1, const char *a2)
{
  _QWORD v3[8];
  _QWORD v4[9];

  v4[8] = *MEMORY[0x1E0C80C00];
  v3[0] = &unk_1E99CB1C0;
  v3[1] = &unk_1E99CB1D8;
  v4[0] = &unk_1E99D0B60;
  v4[1] = &unk_1E99D0B88;
  v3[2] = &unk_1E99CB1F0;
  v3[3] = &unk_1E99CB208;
  v4[2] = &unk_1E99D0BB0;
  v4[3] = &unk_1E99D0BD8;
  v3[4] = &unk_1E99CB220;
  v3[5] = &unk_1E99CB238;
  v4[4] = &unk_1E99D0C00;
  v4[5] = &unk_1E99D0C28;
  v3[6] = &unk_1E99CB250;
  v3[7] = &unk_1E99CB268;
  v4[6] = &unk_1E99D0C50;
  v4[7] = &unk_1E99D0C78;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v4, (uint64_t)v3, 8);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1D531497C(_QWORD *a1)
{
  sub_1D53149A0(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53149A0(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E99782B8;
  v2 = (void *)a1[150];
  if (v2)
  {
    a1[151] = v2;
    operator delete(v2);
  }
  return sub_1D52B2190((uint64_t)a1);
}

void sub_1D53149DC(uint64_t *a1@<X1>, char *a2@<X2>, void **a3@<X3>, void **a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x4E8uLL);
  sub_1D5314A5C((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D5314A48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5314A5C(uint64_t a1, uint64_t *a2, char *a3, void **a4, void **a5)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E99785F8;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D52A7E98(a1 + 24, a2, *a3, *a4, *a5);
  *(_QWORD *)(a1 + 24) = off_1E99782B8;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  return a1;
}

void sub_1D5314AC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5314AD4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99785F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5314AE8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99785F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5314B1C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_1D5314B2C(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xD8uLL);
  sub_1D5314BAC(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D5314B98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5314BAC(_QWORD *a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5)
{
  a1[2] = 0;
  *a1 = &unk_1E9978648;
  a1[1] = 0;
  sub_1D530B330((uint64_t)(a1 + 3), a2, *a3, a4, a5);
  a1[3] = &unk_1E998F040;
  return a1;
}

void sub_1D5314BF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5314C0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9978648;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5314C20(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9978648;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5314C54(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1D5314C64(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xF8uLL);
  sub_1D5314CE4((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D5314CD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5314CE4(uint64_t a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E9978698;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D530B330(a1 + 24, a2, *a3, a4, a5);
  *(_QWORD *)(a1 + 24) = &off_1E99781A0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 240) = -1;
  return a1;
}

void sub_1D5314D40(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5314D54(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9978698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5314D68(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9978698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5314D9C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1D5314DAC(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xD8uLL);
  sub_1D5314E2C(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D5314E18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5314E2C(_QWORD *a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5)
{
  a1[2] = 0;
  *a1 = &unk_1E99786E8;
  a1[1] = 0;
  sub_1D530B330((uint64_t)(a1 + 3), a2, *a3, a4, a5);
  a1[3] = &unk_1E998EF50;
  return a1;
}

void sub_1D5314E78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5314E8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99786E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5314EA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99786E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5314ED4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1D5314EE4(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void (**v4)(_QWORD);
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  _WORD *v9;
  int i;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  __int16 v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  __int16 v18;
  unsigned int v19;
  __int16 v20;
  int v21;
  unsigned int v22;
  __int16 v23;
  int v24;
  unsigned int v25;
  __int16 v26;
  int v27;
  void *exception;
  _QWORD v29[5];
  uint8_t buf[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "COlympusE300Unpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = sub_1D5315204;
  v29[3] = &unk_1E996F870;
  v29[4] = a1;
  v4 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v29);
  v5 = *(_DWORD *)(a1 + 44);
  v6 = *(_DWORD *)(a1 + 48);
  v7 = (2 * ((3435973837u * (unint64_t)(v5 + 9)) >> 32)) & 0xFFFFFFF0;
  if ((*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1) < v7 * v6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v8 = sub_1D530B618(a1);
  if (v6)
  {
    v9 = (_WORD *)v8;
    for (i = 0; i != v6; ++i)
    {
      v11 = (unsigned __int8 *)&v9[v5] - v7;
      (*(void (**)(_QWORD, unsigned __int8 *, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v11, v7);
      if (v5 == v5 % 0xA)
      {
        v12 = 0;
      }
      else
      {
        v12 = 0;
        do
        {
          v13 = v11[1];
          v14 = *v11 | ((v13 & 0xF) << 8);
          LOWORD(v13) = (v13 >> 4) | (16 * v11[2]);
          v15 = v11[4];
          v16 = v11[3] | ((v15 & 0xF) << 8);
          LOWORD(v15) = (v15 >> 4) | (16 * v11[5]);
          *v9 = v14;
          v9[1] = v13;
          v17 = v11[7];
          v18 = v11[6] | ((v17 & 0xF) << 8);
          LOWORD(v17) = (v17 >> 4) | (16 * v11[8]);
          v9[2] = v16;
          v9[3] = v15;
          v19 = v11[10];
          v20 = v11[9] | ((v19 & 0xF) << 8);
          v21 = (v19 >> 4) | (16 * v11[11]);
          v9[4] = v18;
          v9[5] = v17;
          v22 = v11[13];
          v23 = v11[12] | ((v22 & 0xF) << 8);
          v24 = (v22 >> 4) | (16 * v11[14]);
          v9[6] = v20;
          v9[7] = v21;
          v9[8] = v23;
          v9[9] = v24;
          v11 += 16;
          v9 += 10;
          v12 += 10;
        }
        while (v12 < 10 * (v5 / 0xA));
      }
      while (v12 < v5)
      {
        v25 = v11[1];
        v26 = *v11 | ((v25 & 0xF) << 8);
        v27 = (v25 >> 4) | (16 * v11[2]);
        *v9 = v26;
        v9[1] = v27;
        v11 += 3;
        v9 += 2;
        v12 += 2;
      }
    }
  }
  v4[2](v4);

}

void sub_1D53151BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5315204(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "COlympusE300Unpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D531528C(_QWORD *a1)
{
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D53152B0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  _WORD *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint8_t *v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  char v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  __int16 v29;
  void *exception;
  void (**v31)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  _QWORD v40[5];
  uint8_t buf[4];
  int v42;
  int v43;
  int v44;
  _WORD v45[1024];
  uint64_t v46;

  v1 = MEMORY[0x1E0C80A78](a1);
  v46 = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CSonyA100Unpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v40[0] = MEMORY[0x1E0C809B0];
  v40[1] = 3221225472;
  v40[2] = sub_1D5315730;
  v40[3] = &unk_1E996F870;
  v40[4] = v1;
  v4 = MEMORY[0x1D82721B4](v40);
  if (!sub_1D5312BE8(byte_1D544A3D1, v45))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v5 = sub_1D530B618(v1);
  v31 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v4;
  v35 = *(unsigned int *)(v1 + 44);
  v36 = *(_DWORD *)(v1 + 48);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 24) + 16))(*(_QWORD *)(v1 + 24));
  v39 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 24) + 48))(*(_QWORD *)(v1 + 24));
  v7 = sub_1D52ADF28(&v39);
  bzero(buf, 0x2008uLL);
  v12 = v35;
  v13 = v36;
  if ((_DWORD)v35 != -1)
  {
    v14 = 0;
    v9 = 0;
    v10 = (uint8_t *)&v44;
    v15 = (uint8_t *)&v43;
    v16 = v36 + 8;
    v34 = v1;
    v8 = (v6 - v7);
    v17 = 32;
    v11 = v45;
    v18 = v35;
    v32 = v5 + 2 * v35;
    do
    {
      v19 = 0;
      v20 = v18;
      v21 = 1;
      do
      {
        v33 = v21;
        if (v19 < v16)
        {
          v22 = (_WORD *)(v32 + 2 * v35 * v19);
          do
          {
            if (v10 > v15)
            {
              if (v8 >= 0x2000)
              {
                v23 = 0x2000;
              }
              else
              {
                v15 = &buf[v8 + 4];
                v23 = v8;
              }
              *(_DWORD *)buf = v43;
              if (v23)
              {
                v38 = v14;
                v37 = v8;
                v24 = v9;
                v25 = v10;
                (*(void (**)(_QWORD, int *, uint64_t))(**(_QWORD **)(v34 + 24) + 32))(*(_QWORD *)(v34 + 24), &v42, v23);
                v11 = v45;
                v10 = v25;
                v9 = v24;
                v8 = v37;
                v14 = v38;
                v12 = v35;
                v13 = v36;
              }
              v10 -= 0x2000;
              v8 -= v23;
              *(_DWORD *)&buf[v23 + 4] = 0;
            }
            if (v17 >= 16)
            {
              v9 = ((_DWORD)v9 << 16) | (*v10 << 8) | v10[1];
              v10 += 2;
              v17 -= 16;
            }
            v26 = (_DWORD)v9 << v17;
            v27 = (unsigned __int16)v45[(_DWORD)v9 << v17 >> 23];
            v17 += (v27 >> 10) & 0x1F;
            if (v27 > 0x8000)
            {
              v27 = (char)v27;
            }
            else
            {
              if ((v27 & 0x8000) != 0)
              {
                v27 = (unsigned __int16)v45[HIWORD(v26) & 0x1FF | 0x200];
                v17 += (v27 >> 10) & 0x1F;
              }
              v28 = v27 & 0x1F;
              if ((v27 & 0x1F) == 0)
              {
                if (v20 < v12 && v19 < v13)
                {
                  v29 = ((_WORD)v27 << 8) & 0x8000;
                  if (v10 >= v15)
                    v29 = -1;
                  *v22 = v29 + v14;
                }
                goto LABEL_37;
              }
              if (v17 >= 16)
              {
                v9 = ((_DWORD)v9 << 16) | (*v10 << 8) | v10[1];
                v10 += 2;
                v17 -= 16;
              }
              v27 = ((_DWORD)v9 << v17 >> -(char)v28) - ((((_DWORD)v9 << v17 >> 31) - 1) >> -(char)v28);
              v17 += v28;
            }
            v14 += v27;
            if (v20 < v12 && v19 < v13)
              *v22 = v14;
            LODWORD(v19) = v19 + 2;
            v22 += (2 * v35);
          }
          while (v19 < v16);
        }
        v21 = 0;
        v19 = 1;
      }
      while ((v33 & 1) != 0);
      v18 = v20 - 1;
      v32 -= 2;
    }
    while (v20);
  }
LABEL_37:
  ((void (**)(_QWORD, unint64_t, uint64_t, uint8_t *, _WORD *))v31)[2](v31, v8, v9, v10, v11);

}

void sub_1D53156C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5315730(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSonyA100Unpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D53157B4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  BOOL v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  _BYTE *v38;
  uint64_t v39;
  uint8_t *v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  uint8_t *v50;
  int16x8_t v51;
  uint8_t *v52;
  unint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  unsigned __int16 v57;
  unint64_t v58;
  unint64_t v59;
  int16x8_t v60;
  uint8_t *v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int active;
  int v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  void *v91;
  void *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  _DWORD *v103;
  int v104;
  int v105;
  int v106;
  int v107;
  void (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v109)(uint64_t, uint64_t, uint64_t);
  unint64_t v110;
  unsigned int *v111;
  dispatch_semaphore_t v112;
  void *v113;
  unsigned int *v114;
  dispatch_semaphore_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int *v121;
  dispatch_semaphore_t v122;
  void *v123;
  uint64_t i;
  int v125;
  unsigned int v126;
  unsigned int v127;
  dispatch_semaphore_t v128;
  void *v129;
  NSObject *v130;
  NSObject *v131;
  void (__cdecl *v132)(void *);
  void **v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unsigned __int8 v149;
  uint64_t v150;
  signed int v151;
  uint64_t v152;
  unsigned __int8 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t j;
  int v162;
  unsigned int v163;
  char v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  unsigned __int8 v170;
  signed int v171;
  unsigned __int8 v172;
  uint64_t v173;
  unsigned int v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  void *exception;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  uint64_t v188;
  int v189;
  unsigned int v190;
  int v191;
  signed int v192;
  BOOL v193;
  signed int v194;
  _BYTE *v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  int v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  void (**v212)(_QWORD);
  int v213;
  unint64_t v214;
  uint64_t v215;
  signed int v216;
  int v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  uint64_t v220;
  _QWORD v221[5];
  unsigned __int16 buf[65536];
  _BYTE v223[2048];
  _QWORD v224[258];

  v1 = MEMORY[0x1E0C80A78](a1);
  v224[256] = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    buf[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CNikonCompressedUnpacker", (const char *)&unk_1D548AF1A, (uint8_t *)buf, 2u);
  }

  v221[0] = MEMORY[0x1E0C809B0];
  v221[1] = 3221225472;
  v221[2] = sub_1D5316984;
  v221[3] = &unk_1E996F870;
  v221[4] = v1;
  v212 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v221);
  v4 = sub_1D530CBD0(v1);
  v6 = *(_QWORD *)(v1 + 24);
  v5 = *(std::__shared_weak_count **)(v1 + 32);
  v218 = v6;
  v219 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v220 = 0;
  if (v6)
  {
    v220 = sub_1D52845E4(v6);
    sub_1D52845EC(v6, v4);
  }
  v9 = *(_DWORD *)(v1 + 48);
  v210 = *(_DWORD *)(v1 + 44);
  v10 = sub_1D530B618(v1);
  v11 = *(_DWORD *)(v1 + 40);
  v12 = v11 + (unint64_t)(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 152))(v1);
  v13 = v12 == (uint64_t)(v12 << 31) >> 31 && (v12 & 0x1FFFFFFFFLL) == ((int)v12 & 0x1FFFFFFFFLL);
  if (!v13)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v213 = v12 - v11;
  if ((int)v12 <= v11)
  {
    v183 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v183, "RawCameraException");
    goto LABEL_189;
  }
  v14 = *(_QWORD *)(v1 + 24);
  v15 = *(_QWORD *)(v1 + 192);
  v217 = v15;
  if (v15 != (int)v15)
  {
    v184 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v184, "RawCameraException");
    __cxa_throw(v184, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v201 = v12;
  v204 = v11;
  v206 = v10;
  (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v14 + 40))(v14, &v217, 0);
  v16 = sub_1D52846FC(*(_QWORD *)(v1 + 24));
  v17 = sub_1D52846FC(*(_QWORD *)(v1 + 24));
  v18 = v17;
  if (v16 == 73 || v17 == 88)
  {
    v19 = *(_QWORD *)(v1 + 24);
    v217 = 2110;
    (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v19 + 40))(v19, &v217, 1);
  }
  v20 = 2 * (v16 == 70);
  if (*(_DWORD *)(v1 + 200) == 14)
    v21 = v20 + 3;
  else
    v21 = v20;
  v200 = sub_1D528479C(*(_QWORD *)(v1 + 24));
  v199 = sub_1D528479C(*(_QWORD *)(v1 + 24));
  v198 = sub_1D528479C(*(_QWORD *)(v1 + 24));
  v197 = sub_1D528479C(*(_QWORD *)(v1 + 24));
  v22 = sub_1D528479C(*(_QWORD *)(v1 + 24));
  v23 = v22;
  v208 = v9;
  v24 = *(_DWORD *)(v1 + 200);
  v25 = (1 << v24) & 0x7FFF;
  if (v22 < 2)
  {
    v27 = 0;
    if (v16 != 68)
      goto LABEL_47;
  }
  else
  {
    v26 = v25 / (v22 - 1);
    if (v18 == 64)
      v27 = v26 >> 2;
    else
      v27 = v26;
    if (v16 != 68)
    {
LABEL_47:
      if (v16 == 70 || v22 >= 0x4002)
      {
        v46 = 0;
        v47 = (int16x8_t)xmmword_1D5447F60;
        v48.i64[0] = 0x8000800080008;
        v48.i64[1] = 0x8000800080008;
        v49.i64[0] = 0x10001000100010;
        v49.i64[1] = 0x10001000100010;
        v36 = v208;
        do
        {
          v50 = (uint8_t *)&buf[v46];
          *(int16x8_t *)v50 = v47;
          *((int16x8_t *)v50 + 1) = vaddq_s16(v47, v48);
          v47 = vaddq_s16(v47, v49);
          v46 += 16;
        }
        while (v46 != 0x4000);
        goto LABEL_77;
      }
      v36 = v208;
      if (v22)
      {
        v39 = v22;
        v40 = (uint8_t *)buf;
        do
        {
          *(_WORD *)v40 = sub_1D528479C(*(_QWORD *)(v1 + 24));
          v40 += 2;
          --v39;
        }
        while (v39);
      }
      if ((int)v23 <= 1)
        v41 = 1;
      else
        v41 = v23;
      v42 = 0x10000 - ((0x10000 - v23) >> 1);
      if (v42 <= v23)
        goto LABEL_70;
      v43 = buf[v41 - 1];
      v44 = v42 - v23;
      if (v44 >= 0x10)
      {
        v45 = (v44 & 0xFFFFFFFFFFFFFFF0) + v23;
        v51 = vdupq_n_s16(v43);
        v52 = (uint8_t *)&buf[v23 + 8];
        v53 = v44 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          *((int16x8_t *)v52 - 1) = v51;
          *(int16x8_t *)v52 = v51;
          v52 += 32;
          v53 -= 16;
        }
        while (v53);
        if (v44 == (v44 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_69:
          v13 = v23 == 0xFFFF;
          v23 = 0x10000 - ((0x10000 - v23) >> 1);
          if (v13)
            goto LABEL_77;
LABEL_70:
          v57 = buf[0];
          v58 = 0x10000 - v23;
          if (v58 < 0x10)
          {
            v59 = v23;
LABEL_75:
            v63 = v59;
            do
              buf[v63++] = v57;
            while (v63 != 0x10000);
            goto LABEL_77;
          }
          v59 = (v58 & 0xFFFFFFFFFFFFFFF0) + v23;
          v60 = vdupq_n_s16(buf[0]);
          v61 = (uint8_t *)&buf[v23 + 8];
          v62 = v58 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            *((int16x8_t *)v61 - 1) = v60;
            *(int16x8_t *)v61 = v60;
            v61 += 32;
            v62 -= 16;
          }
          while (v62);
          if (v58 != (v58 & 0xFFFFFFFFFFFFFFF0))
            goto LABEL_75;
LABEL_77:
          if (sub_1D53126BC(&byte_1D544A407[32 * v21], (uint64_t)v223, 2))
          {
            v38 = v223;
            v37 = v36;
            goto LABEL_79;
          }
          goto LABEL_188;
        }
      }
      else
      {
        v45 = v23;
      }
      v54 = (uint8_t *)&buf[v45];
      v55 = v45 - v42;
      do
      {
        *(_WORD *)v54 = v43;
        v54 += 2;
      }
      while (!__CFADD__(v55++, 1));
      goto LABEL_69;
    }
  }
  v28 = v18 == 64 || v18 == 32;
  if (!v28 || !(_DWORD)v27)
    goto LABEL_47;
  if (v22)
  {
    v29 = (uint8_t *)buf;
    v30 = v22;
    do
    {
      *(_WORD *)v29 = sub_1D528479C(*(_QWORD *)(v1 + 24));
      v29 += 2 * v27;
      --v30;
    }
    while (v30);
  }
  if (v24 <= 0xE)
  {
    v31 = 0;
    if (v25 <= 1)
      v32 = 1;
    else
      v32 = v25;
    do
    {
      buf[v31] = (int)((v27 - (int)v31 % (int)v27) * buf[v31 - (int)v31 % (int)v27]
                     + (int)v31 % (int)v27 * buf[(int)v27 + (int)v31 - (int)v31 % (int)v27])
               / (int)v27;
      ++v31;
    }
    while (v32 != v31);
  }
  v33 = *(_QWORD *)(v1 + 24);
  v34 = *(_QWORD *)(v1 + 192);
  v217 = v34 + 562;
  if ((unint64_t)(v34 - 2147483086) <= 0xFFFFFFFEFFFFFFFFLL)
  {
    v186 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v186, "RawCameraException");
    __cxa_throw(v186, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v33 + 40))(v33, &v217, 0);
  v35 = sub_1D528479C(*(_QWORD *)(v1 + 24));
  v36 = v208;
  v37 = v35;
  if (!v35 || v208 <= v35)
    goto LABEL_77;
  if (!sub_1D53126BC(&byte_1D544A407[32 * v21], (uint64_t)v223, 4)
    || (v38 = v224, !sub_1D53126BC(&byte_1D544A407[32 * (v21 + 1)], (uint64_t)v224, 4)))
  {
LABEL_188:
    v183 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v183, "RawCameraException");
LABEL_189:
    __cxa_throw(v183, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
LABEL_79:
  v196 = v37;
  v195 = v38;
  v193 = v223 == v38;
  v194 = v36 * v210;
  v203 = v213 / ((v36 * v210 + 10239) / 10240);
  v64 = 4 * v203;
  if (4 * v203 <= v210)
    v64 = v210;
  v202 = v64;
  v192 = NSPageSize();
  v215 = v1;
  v191 = sub_1D530C74C(v1);
  if (v213 <= 0)
  {
    v185 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v185, "RawCameraException");
    __cxa_throw(v185, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  objc_msgSend_processInfo(MEMORY[0x1E0CB3898], v65, v66, v67, v68);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  active = objc_msgSend_activeProcessorCount(v69, v70, v71, v72, v73);

  if (active >= 31)
    v75 = 31;
  else
    v75 = active;
  if (active >= 29)
    v76 = 29;
  else
    v76 = active;
  v77 = v76 + 2;
  if (v75 == 1)
    v78 = 2;
  else
    v78 = v77;
  v79 = NSPageSize();
  v80 = v79;
  v81 = -(uint64_t)v79;
  v82 = (2 * v79 + 2 * v202 - 1) & (unint64_t)v81;
  v188 = 192 * (int)v78;
  v83 = (v75 << 6) + v188 + 1280;
  v84 = (v83 + v79) & v81;
  if (v79 <= v203)
    v85 = v203;
  else
    v85 = v79;
  v86 = __clz(4 * v85 - 1);
  v189 = -v86;
  v190 = 0xC0000u >> -(char)v86;
  v87 = v190 << -(char)v86;
  v88 = v203 + 2;
  if (v203 >= -1)
    v88 = v203 + 1;
  v89 = (v79 + (v88 >> 1) + 3) & v81;
  v216 = v87;
  v90 = v84 + v79 + 2 * v89 + v87 + v82 * v78;
  v91 = sub_1D5441BF0(v90);
  v92 = v91;
  if (!v91)
  {
    v187 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v187, "RawCameraException");
    __cxa_throw(v187, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v93 = v89;
  v94 = (_QWORD *)(((unint64_t)v91 + v80 - 1) & -(uint64_t)v80);
  v95 = (uint64_t)&v94[8 * v75 + 160];
  v96 = v95 + v188 + v84 - v83;
  v97 = v96 + (int)v82 * (uint64_t)(int)v78 + v93;
  bzero(v94, v83);
  v94[2] = v92;
  *((_DWORD *)v94 + 6) = v90;
  if ((v75 & 0x80000000) == 0)
  {
    v98 = 0;
    v99 = 152;
    do
    {
      v100 = &v94[v99];
      v94[v98 + 4] = &v94[v99];
      *(_DWORD *)v100 = v98;
      v100[1] = v94;
      ++v98;
      v99 += 8;
    }
    while (v75 + 1 != v98);
  }
  if ((int)v78 >= 1)
  {
    v101 = 0;
    v102 = v94 + 36;
    do
    {
      v102[v101] = v95;
      *(_QWORD *)(v95 + 64) = v96;
      v96 += v82;
      *(_DWORD *)(v102[v101] + 4) = v101;
      ++v101;
      v95 += 192;
    }
    while (v78 != v101);
  }
  *((_DWORD *)v94 + 170) = 1 << v189;
  *((_DWORD *)v94 + 171) = v190;
  *((_DWORD *)v94 + 172) = v216;
  v94[87] = v97;
  v94[88] = v97 + v216;
  v103 = (_DWORD *)v94[4];
  *v94 = v206;
  v94[1] = v206 + sub_1D530C74C(v215);
  v104 = v75;
  *((_DWORD *)v94 + 134) = v75;
  *((_DWORD *)v94 + 135) = v78;
  *((_DWORD *)v94 + 136) = v202;
  *((_DWORD *)v94 + 137) = v203;
  *((_DWORD *)v94 + 138) = v194;
  atomic_store(v194, (unsigned int *)v94 + 139);
  *((_BYTE *)v94 + 560) = 0;
  atomic_store(0, (unsigned __int8 *)v94 + 561);
  *((_BYTE *)v94 + 562) = v193;
  v94[71] = v223;
  v94[72] = v195;
  *((_DWORD *)v94 + 148) = v208;
  *((_DWORD *)v94 + 149) = v210;
  v94[73] = buf;
  *((_DWORD *)v94 + 150) = v196 * v210;
  if (v223 == v195)
  {
    v107 = 0x7FFFFFFF;
    v108 = sub_1D5316A08;
    v109 = sub_1D5316E90;
  }
  else
  {
    v105 = (int)((double)v194 * (double)v203 / (double)v213 + 0.5);
    if (v105 >= 0)
      v106 = (int)((double)v194 * (double)v203 / (double)v213 + 0.5);
    else
      v106 = v105 + 1;
    v107 = (v196 * v210 + (v106 >> 1)) / v105 + 1;
    v108 = sub_1D5316C48;
    v109 = sub_1D5317380;
  }
  *((_DWORD *)v94 + 151) = v107;
  *v103 = 0;
  v94[76] = v108;
  v94[77] = v109;
  v94[78] = v204;
  v94[79] = v201;
  v94[80] = v204;
  v94[81] = v204;
  v110 = v204 & (unint64_t)-(uint64_t)*((int *)v94 + 170);
  v94[82] = v110;
  v94[83] = v110;
  v94[84] = *((int *)v94 + 172) + v110;
  v111 = (unsigned int *)(v94 + 89);
  atomic_store(*((_DWORD *)v94 + 171), (unsigned int *)v94 + 178);
  v112 = dispatch_semaphore_create(0);
  v113 = (void *)v94[90];
  v94[90] = v112;

  v114 = (unsigned int *)(v94 + 91);
  atomic_store(0, (unsigned int *)v94 + 182);
  v115 = dispatch_semaphore_create(0);
  v116 = (void *)v94[92];
  v94[92] = v115;

  v94[93] = 2097153;
  v117 = -(uint64_t)v192;
  v94[94] = v94[87] + v204 - v94[82];
  v118 = (v192 + v206) & v117;
  *(_OWORD *)(v94 + 95) = *(_OWORD *)(v94 + 93);
  *((_DWORD *)v94 + 194) = 0;
  v119 = __clz(__rbit32(v192));
  v94[98] = 0;
  *((_DWORD *)v94 + 198) = 0;
  *((_DWORD *)v94 + 204) = 0;
  v94[100] = 0;
  v94[101] = 0;
  v94[103] = v206;
  *((_DWORD *)v94 + 208) = 0;
  *((_DWORD *)v94 + 209) = v200;
  *((_DWORD *)v94 + 210) = v199;
  *((_DWORD *)v94 + 211) = v198;
  *((_DWORD *)v94 + 212) = v197;
  atomic_store((int)((v206 - v118 + v191) & v117) >> v119, (unsigned int *)v94 + 290);
  *((_DWORD *)v94 + 291) = v119;
  v94[146] = v118;
  atomic_store(0, (unsigned int *)v94 + 286);
  atomic_store(0, (unsigned int *)v94 + 287);
  atomic_store(0, (unsigned int *)v94 + 288);
  atomic_store(0, (unsigned int *)v94 + 289);
  v120 = (unsigned int *)(v94 + 147);
  atomic_store(0, (unsigned int *)v94 + 294);
  v121 = (unsigned int *)v94 + 295;
  atomic_store(0, (unsigned int *)v94 + 295);
  v122 = dispatch_semaphore_create(0);
  v123 = (void *)v94[148];
  v94[148] = v122;

  if ((int)v78 > 0)
  {
    for (i = 0; i != v78; ++i)
    {
      v125 = 1 << *(_DWORD *)(v94[i + 36] + 4);
      do
        v126 = __ldaxr(v120);
      while (__stlxr(v126 | v125, v120));
      do
        v127 = __ldaxr(v121);
      while (__stlxr(v127 + 1, v121));
      if ((v127 & 0x80000000) != 0)
        dispatch_semaphore_signal((dispatch_semaphore_t)v94[148]);
    }
  }
  atomic_store(0, (unsigned int *)v94 + 298);
  v128 = dispatch_semaphore_create(0);
  v129 = (void *)v94[150];
  v94[150] = v128;

  v130 = dispatch_group_create();
  v131 = dispatch_queue_create("Huffman Decode Block", MEMORY[0x1E0C80D50]);
  if (v104 >= 1)
  {
    if (v104 == 1)
      v132 = (void (__cdecl *)(void *))sub_1D53182C4;
    else
      v132 = (void (__cdecl *)(void *))sub_1D5317728;
    v133 = (void **)(v94 + 5);
    v134 = (v104 + 1) - 1;
    do
    {
      v135 = *v133++;
      dispatch_group_async_f(v130, v131, v135, v132);
      --v134;
    }
    while (v134);
  }
  v136 = v94[82];
  v137 = *((int *)v94 + 170);
  v209 = v94[87];
  v214 = v94[88];
  v138 = *((int *)v94 + 172);
  v139 = *(_QWORD *)(v215 + 24);
  v217 = v204;
  (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v139 + 40))(v139, &v217, 0);
  v140 = v201 - v136;
  if (v201 > v136)
  {
    v141 = __clz(__rbit32(v137));
    v211 = v137 - 1;
    v142 = atomic_load(v111);
    if (v142 < 1 || (v143 = atomic_load(v114), (v143 & 0x80000000) != 0))
    {
      LODWORD(v144) = 1;
    }
    else
    {
      v144 = (uint64_t)(v214 - v209) >> v141;
      v145 = atomic_load(v111);
      if (v145 < (int)v144)
        LODWORD(v144) = v145;
    }
    v146 = (int)((_DWORD)v144 << v141);
    v207 = v141;
    if (v140 >= v146)
      v147 = v144;
    else
      v147 = (unint64_t)(v211 + v140) >> v141;
    if (v140 >= v146)
      v148 = (int)((_DWORD)v144 << v141);
    else
      v148 = v201 - v136;
    v149 = atomic_load((unsigned __int8 *)v94 + 561);
    if ((v149 & 1) == 0)
    {
      v150 = v204 - v136;
      v205 = -v138;
      do
        v151 = __ldaxr(v111);
      while (__stlxr(v151 - v147, v111));
      if (v151 < v147)
      {
        v152 = v148;
        dispatch_semaphore_wait((dispatch_semaphore_t)v94[90], 0xFFFFFFFFFFFFFFFFLL);
        v148 = v152;
      }
      v153 = atomic_load((unsigned __int8 *)v94 + 561);
      if ((v153 & 1) == 0)
      {
        v154 = v209 + v150;
        v155 = v148 - v150;
        v156 = v148;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v215 + 24) + 32))(*(_QWORD *)(v215 + 24), v154, v155);
        v157 = v205;
        if (v209 + v156 < v214)
          v157 = 0;
        v158 = v209 + v156 + v157;
        v159 = v156;
        do
          v160 = __ldaxr(v114);
        while (__stlxr(v160 + v147, v114));
        if (v160 == -1)
        {
          dispatch_semaphore_signal((dispatch_semaphore_t)v94[92]);
          v159 = v156;
        }
        for (j = v159 + v136; j < v201; j += v169)
        {
          v162 = atomic_load(v111);
          if (v162 < 1)
          {
            LODWORD(v165) = 1;
            v164 = v207;
          }
          else
          {
            v163 = atomic_load(v114);
            v164 = v207;
            if ((v163 & 0x80000000) != 0)
            {
              LODWORD(v165) = 1;
            }
            else
            {
              v165 = (uint64_t)(v214 - v158) >> v207;
              v166 = atomic_load(v111);
              if (v166 < (int)v165)
                LODWORD(v165) = v166;
            }
          }
          v167 = (int)((_DWORD)v165 << v164);
          v168 = v201 - j >= v167 ? v165 : (unint64_t)(v211 + v201 - j) >> v164;
          v169 = v201 - j >= v167 ? (int)((_DWORD)v165 << v164) : v201 - j;
          v170 = atomic_load((unsigned __int8 *)v94 + 561);
          if ((v170 & 1) != 0)
            break;
          do
            v171 = __ldaxr(v111);
          while (__stlxr(v171 - v168, v111));
          if (v171 < v168)
            dispatch_semaphore_wait((dispatch_semaphore_t)v94[90], 0xFFFFFFFFFFFFFFFFLL);
          v172 = atomic_load((unsigned __int8 *)v94 + 561);
          if ((v172 & 1) != 0)
            break;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v215 + 24) + 32))(*(_QWORD *)(v215 + 24), v158, v169);
          v173 = v205;
          if (v158 + v169 < v214)
            v173 = 0;
          v158 += v169 + v173;
          do
            v174 = __ldaxr(v114);
          while (__stlxr(v174 + v168, v114));
          if (v174 == -1)
            dispatch_semaphore_signal((dispatch_semaphore_t)v94[92]);
        }
      }
    }
  }
  dispatch_group_wait(v130, 0xFFFFFFFFFFFFFFFFLL);
  atomic_load((unsigned int *)v94 + 139);

  if (v94[2])
  {
    v175 = (void *)v94[90];
    v94[90] = 0;

    v176 = (void *)v94[92];
    v94[92] = 0;

    v177 = (void *)v94[148];
    v94[148] = 0;

    v178 = (void *)v94[150];
    v94[150] = 0;

    free((void *)v94[2]);
  }
  if (v218)
    sub_1D52845EC(v218, v220);
  v179 = v219;
  if (v219)
  {
    v180 = (unint64_t *)&v219->__shared_owners_;
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  v212[2](v212);

}

void sub_1D5316848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void (**a26)(_QWORD),uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;
  void *v32;

  sub_1D53186F8(&a31);
  a26[2](a26);

  _Unwind_Resume(a1);
}

void sub_1D5316984(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CNikonCompressedUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D5316A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  int v13;
  unsigned int *v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  _BYTE v28[513];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(unsigned int **)(a3 + 40);
  v6 = *(_QWORD *)(a1 + 568);
  *(_BYTE *)(a3 + 32) = 1;
  if ((unint64_t)v5 >= v4)
  {
    v9 = 0;
    v7 = 0;
    v8 = v5;
    do
    {
      v8 = (unsigned int *)((char *)v8 - 1);
      v7 += 8;
      if (v9 > 0x3E)
        break;
      ++v9;
    }
    while ((unint64_t)v8 >= v4);
  }
  else
  {
    v7 = 0;
    v8 = v5;
  }
  bzero(v28, 0x201uLL);
  v10 = 0;
  v11 = v7 - 32;
  v12 = v5;
  while (1)
  {
    if (!v28[v10])
    {
      v13 = bswap32(*v8);
      v14 = v8 + 1;
      v15 = v10;
      v16 = v10;
      while (1)
      {
        if (v15 >= 16)
        {
          v13 = (v13 << 16) | (*(unsigned __int8 *)v14 << 8) | *((unsigned __int8 *)v14 + 1);
          v14 = (unsigned int *)((char *)v14 + 2);
          v15 -= 16;
        }
        v18 = v13 << v15;
        v19 = *(unsigned __int16 *)(v6 + 2 * ((v13 << v15) >> 23));
        v20 = (v19 >> 10) & 0x1F;
        v15 += v20;
        v16 += v20;
        if (v19 > 0x8000)
          goto LABEL_16;
        if ((v19 & 0x8000) != 0)
          break;
        v21 = v19 & 0x1F;
        if (v21)
          goto LABEL_19;
LABEL_16:
        if (v16 > v11)
          goto LABEL_22;
LABEL_10:
        v17 = v28[v16];
        v28[v16] = v17 + 1;
        if (v17)
          goto LABEL_25;
      }
      v22 = *(unsigned __int16 *)(v6 + 2 * (HIWORD(v18) & 0x3FF));
      v23 = (v22 >> 10) & 0x1F;
      v15 += v23;
      v16 += v23;
      v21 = v22 & 0x1F;
      if (!v21)
        goto LABEL_16;
LABEL_19:
      if (v15 >= 16)
      {
        v13 = (v13 << 16) | (*(unsigned __int8 *)v14 << 8) | *((unsigned __int8 *)v14 + 1);
        v14 = (unsigned int *)((char *)v14 + 2);
        v15 -= 16;
      }
      v15 += v21;
      v16 += v21;
      if (v16 <= v11)
        goto LABEL_10;
LABEL_22:
      if (v16 <= v7)
      {
        if (!v10)
        {
          *(_DWORD *)(a3 + 36) = v13;
          *(_WORD *)(a3 + 34) = v15;
          v12 = v14;
          *(_QWORD *)(a3 + 40) = v14;
        }
        goto LABEL_10;
      }
LABEL_25:
      if (v10 && v16 > v7)
        break;
    }
    if (++v10 == 32)
    {
      v24 = *(_DWORD *)(a3 + 36);
      v25 = *(__int16 *)(a3 + 34);
      if (v25 >= 8)
        goto LABEL_29;
      goto LABEL_30;
    }
  }
  v24 = *(_DWORD *)(a3 + 36);
  *(_BYTE *)(a3 + 32) = *(_BYTE *)(a3 + 33);
  v25 = 32;
  v12 = v5;
  do
  {
LABEL_29:
    v26 = v25;
    v27 = *(unsigned __int8 *)v12;
    v12 = (unsigned int *)((char *)v12 + 1);
    v24 = v27 | (v24 << 8);
    v25 -= 8;
  }
  while (v26 > 0xF);
LABEL_30:
  *(_DWORD *)(a3 + 36) = v24;
  *(_WORD *)(a3 + 34) = v25;
  *(_QWORD *)(a3 + 40) = v12;
}

void sub_1D5316C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  int v13;
  unsigned int *v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  _BYTE v28[513];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(unsigned int **)(a3 + 40);
  v6 = *(_QWORD *)(a1 + 8 * *(int *)(a3 + 12) + 568);
  *(_BYTE *)(a3 + 32) = 1;
  if ((unint64_t)v5 >= v4)
  {
    v9 = 0;
    v7 = 0;
    v8 = v5;
    do
    {
      v8 = (unsigned int *)((char *)v8 - 1);
      v7 += 8;
      if (v9 > 0x3E)
        break;
      ++v9;
    }
    while ((unint64_t)v8 >= v4);
  }
  else
  {
    v7 = 0;
    v8 = v5;
  }
  bzero(v28, 0x201uLL);
  v10 = 0;
  v11 = v7 - 32;
  v12 = v5;
  while (1)
  {
    if (!v28[v10])
    {
      v13 = bswap32(*v8);
      v14 = v8 + 1;
      v15 = v10;
      v16 = v10;
      while (1)
      {
        if (v15 >= 16)
        {
          v13 = (v13 << 16) | (*(unsigned __int8 *)v14 << 8) | *((unsigned __int8 *)v14 + 1);
          v14 = (unsigned int *)((char *)v14 + 2);
          v15 -= 16;
        }
        v18 = v13 << v15;
        v19 = *(unsigned __int16 *)(v6 + 2 * ((v13 << v15) >> 23));
        v20 = (v19 >> 10) & 0x1F;
        v15 += v20;
        v16 += v20;
        if (v19 > 0x8000)
          goto LABEL_16;
        if ((v19 & 0x8000) != 0)
          break;
        v21 = v19 & 0xF;
        if (v21)
          goto LABEL_19;
LABEL_16:
        if (v16 > v11)
          goto LABEL_22;
LABEL_10:
        v17 = v28[v16];
        v28[v16] = v17 + 1;
        if (v17)
          goto LABEL_25;
      }
      v22 = *(unsigned __int16 *)(v6 + 2 * (HIWORD(v18) & 0x3FF));
      v23 = (v22 >> 10) & 0x1F;
      v15 += v23;
      v16 += v23;
      v21 = v22 & 0xF;
      if (!v21)
        goto LABEL_16;
LABEL_19:
      if (v15 >= 16)
      {
        v13 = (v13 << 16) | (*(unsigned __int8 *)v14 << 8) | *((unsigned __int8 *)v14 + 1);
        v14 = (unsigned int *)((char *)v14 + 2);
        v15 -= 16;
      }
      v15 += v21;
      v16 += v21;
      if (v16 <= v11)
        goto LABEL_10;
LABEL_22:
      if (v16 <= v7)
      {
        if (!v10)
        {
          *(_DWORD *)(a3 + 36) = v13;
          *(_WORD *)(a3 + 34) = v15;
          v12 = v14;
          *(_QWORD *)(a3 + 40) = v14;
        }
        goto LABEL_10;
      }
LABEL_25:
      if (v10 && v16 > v7)
        break;
    }
    if (++v10 == 32)
    {
      v24 = *(_DWORD *)(a3 + 36);
      v25 = *(__int16 *)(a3 + 34);
      if (v25 >= 8)
        goto LABEL_29;
      goto LABEL_30;
    }
  }
  v24 = *(_DWORD *)(a3 + 36);
  *(_BYTE *)(a3 + 32) = *(_BYTE *)(a3 + 33);
  v25 = 32;
  v12 = v5;
  do
  {
LABEL_29:
    v26 = v25;
    v27 = *(unsigned __int8 *)v12;
    v12 = (unsigned int *)((char *)v12 + 1);
    v24 = v27 | (v24 << 8);
    v25 -= 8;
  }
  while (v26 > 0xF);
LABEL_30:
  *(_DWORD *)(a3 + 36) = v24;
  *(_WORD *)(a3 + 34) = v25;
  *(_QWORD *)(a3 + 40) = v12;
}

uint64_t sub_1D5316E90(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _WORD *v9;
  unsigned int v10;
  _WORD *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  BOOL v39;

  v3 = *(_QWORD *)(result + 568);
  v4 = *(_QWORD *)(a3 + 64);
  v5 = *(_DWORD *)(a3 + 20);
  v6 = *(__int16 *)(a3 + 18);
  v7 = *(unsigned __int8 **)(a3 + 24);
  v8 = *(unsigned __int8 **)(a3 + 40);
  if (v7 < v8 - 20)
  {
    v9 = *(_WORD **)(a3 + 64);
    while (1)
    {
      if (v6 >= 16)
      {
        v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        v6 -= 16;
      }
      v12 = v5 << v6;
      v13 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v6) >> 23));
      v14 = ((v13 >> 10) & 0x1F) + v6;
      if (v13 > 0x8000)
      {
        *v9 = (char)v13;
        v17 = v14 - 16;
        if (v14 < 16)
          goto LABEL_16;
LABEL_15:
        v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        v14 = v17;
        goto LABEL_16;
      }
      if ((v13 & 0x8000) != 0)
      {
        v13 = *(unsigned __int16 *)(v3 + 2 * (HIWORD(v12) & 0x3FF));
        v14 += (v13 >> 10) & 0x1F;
        v15 = v13 & 0x1F;
        if ((v13 & 0x1F) == 0)
        {
LABEL_41:
          *v9 = ((_WORD)v13 << 8) & 0x8000;
          v17 = v14 - 16;
          if (v14 >= 16)
            goto LABEL_15;
          goto LABEL_16;
        }
      }
      else
      {
        v15 = v13 & 0x1F;
        if ((v13 & 0x1F) == 0)
          goto LABEL_41;
      }
      if (v14 >= 16)
      {
        v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        v14 -= 16;
      }
      v16 = ((v5 << v14) >> -(char)v15) - ((((v5 << v14) >> 31) - 1) >> -(char)v15);
      v14 += v15;
      *v9 = v16;
      v17 = v14 - 16;
      if (v14 >= 16)
        goto LABEL_15;
LABEL_16:
      v18 = v5 << v14;
      v19 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v14) >> 23));
      v20 = ((v19 >> 10) & 0x1F) + v14;
      if (v19 > 0x8000)
      {
        v9[1] = (char)v19;
        v23 = v20 - 16;
        if (v20 < 16)
          goto LABEL_25;
LABEL_24:
        v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        v20 = v23;
        goto LABEL_25;
      }
      if ((v19 & 0x8000) != 0)
      {
        v19 = *(unsigned __int16 *)(v3 + 2 * (HIWORD(v18) & 0x3FF));
        v20 += (v19 >> 10) & 0x1F;
        v21 = v19 & 0x1F;
        if ((v19 & 0x1F) == 0)
        {
LABEL_44:
          v9[1] = ((_WORD)v19 << 8) & 0x8000;
          v23 = v20 - 16;
          if (v20 >= 16)
            goto LABEL_24;
          goto LABEL_25;
        }
      }
      else
      {
        v21 = v19 & 0x1F;
        if ((v19 & 0x1F) == 0)
          goto LABEL_44;
      }
      if (v20 >= 16)
      {
        v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        v20 -= 16;
      }
      v22 = ((v5 << v20) >> -(char)v21) - ((((v5 << v20) >> 31) - 1) >> -(char)v21);
      v20 += v21;
      v9[1] = v22;
      v23 = v20 - 16;
      if (v20 >= 16)
        goto LABEL_24;
LABEL_25:
      v24 = v5 << v20;
      v25 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v20) >> 23));
      v26 = ((v25 >> 10) & 0x1F) + v20;
      if (v25 > 0x8000)
      {
        v9[2] = (char)v25;
        v29 = v26 - 16;
        if (v26 < 16)
          goto LABEL_34;
LABEL_33:
        v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        v26 = v29;
        goto LABEL_34;
      }
      if ((v25 & 0x8000) != 0)
      {
        v25 = *(unsigned __int16 *)(v3 + 2 * (HIWORD(v24) & 0x3FF));
        v26 += (v25 >> 10) & 0x1F;
        v27 = v25 & 0x1F;
        if ((v25 & 0x1F) == 0)
        {
LABEL_47:
          v9[2] = ((_WORD)v25 << 8) & 0x8000;
          v29 = v26 - 16;
          if (v26 >= 16)
            goto LABEL_33;
          goto LABEL_34;
        }
      }
      else
      {
        v27 = v25 & 0x1F;
        if ((v25 & 0x1F) == 0)
          goto LABEL_47;
      }
      if (v26 >= 16)
      {
        v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        v26 -= 16;
      }
      v28 = ((v5 << v26) >> -(char)v27) - ((((v5 << v26) >> 31) - 1) >> -(char)v27);
      v26 += v27;
      v9[2] = v28;
      v29 = v26 - 16;
      if (v26 >= 16)
        goto LABEL_33;
LABEL_34:
      v30 = v5 << v26;
      v10 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v26) >> 23));
      result = (v10 >> 10) & 0x1F;
      v6 = result + v26;
      if (v10 > 0x8000)
      {
        LOWORD(v10) = (char)v10;
      }
      else
      {
        if ((v10 & 0x8000) != 0)
        {
          v10 = *(unsigned __int16 *)(v3 + 2 * (HIWORD(v30) & 0x3FF));
          v6 += (v10 >> 10) & 0x1F;
          v31 = v10 & 0x1F;
          if ((v10 & 0x1F) != 0)
          {
LABEL_37:
            if (v6 >= 16)
            {
              v5 = (v5 << 16) | (*v7 << 8) | v7[1];
              v7 += 2;
              v6 -= 16;
            }
            result = -v31;
            v10 = ((v5 << v6) >> -(char)v31) - ((((v5 << v6) >> 31) - 1) >> -(char)v31);
            v6 += v31;
            goto LABEL_4;
          }
        }
        else
        {
          v31 = v10 & 0x1F;
          if ((v10 & 0x1F) != 0)
            goto LABEL_37;
        }
        LOWORD(v10) = ((_WORD)v10 << 8) & 0x8000;
      }
LABEL_4:
      v11 = v9 + 4;
      v9[3] = v10;
      v9 += 4;
      if (v7 >= v8 - 20)
        goto LABEL_52;
    }
  }
  v11 = *(_WORD **)(a3 + 64);
LABEL_52:
  *(_BYTE *)(a3 + 48) = 0;
  while (v7 <= v8)
  {
    if (v6 >= 16)
    {
      v5 = (v5 << 16) | (*v7 << 8) | v7[1];
      v7 += 2;
      v6 -= 16;
    }
    v32 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v6) >> 23));
    v33 = ((v32 >> 10) & 0x1F) + v6;
    if (v32 > 0x8000)
    {
      *v11++ = (char)v32;
      if (v33 >= 8)
        goto LABEL_67;
LABEL_70:
      v6 = v33;
      if (v7 == v8)
      {
LABEL_71:
        v38 = *(__int16 *)(a3 + 34);
        if (v6 >= v38)
        {
          v39 = v6 == v38;
          goto LABEL_74;
        }
      }
    }
    else
    {
      if ((v32 & 0x8000) == 0)
      {
        v34 = v32 & 0x1F;
        if ((v32 & 0x1F) != 0)
          goto LABEL_59;
LABEL_66:
        *v11++ = ((_WORD)v32 << 8) & 0x8000;
        if (v33 >= 8)
          goto LABEL_67;
        goto LABEL_70;
      }
      v32 = *(unsigned __int16 *)(v3 + 2 * (((v5 << v6) >> 16) & 0x3FF));
      v33 += (v32 >> 10) & 0x1F;
      v34 = v32 & 0x1F;
      if ((v32 & 0x1F) == 0)
        goto LABEL_66;
LABEL_59:
      if (v33 >= 16)
      {
        v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        v33 -= 16;
      }
      result = (v5 << v33) >> -(char)v34;
      v35 = result - ((((v5 << v33) >> 31) - 1) >> -(char)v34);
      v33 += v34;
      *v11++ = v35;
      if (v33 < 8)
        goto LABEL_70;
      do
      {
LABEL_67:
        v36 = *v7++;
        v5 = v36 | (v5 << 8);
        v6 = v33 - 8;
        v37 = v33 > 0xF;
        v33 -= 8;
      }
      while (v37);
      if (v7 == v8)
        goto LABEL_71;
    }
  }
  v39 = 0;
  v8 = v7;
LABEL_74:
  *(_DWORD *)(a3 + 72) = ((unint64_t)v11 - v4) >> 1;
  *(_DWORD *)(a3 + 52) = v5;
  *(_WORD *)(a3 + 50) = v6;
  *(_QWORD *)(a3 + 56) = v8;
  *(_BYTE *)(a3 + 48) = v39 & *(_BYTE *)(a3 + 32);
  *(_BYTE *)(a3 + 49) = *(_BYTE *)(a3 + 33);
  return result;
}

uint64_t sub_1D5317380(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _WORD *v9;
  unsigned int v10;
  _WORD *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  __int16 v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  BOOL v31;

  v3 = *(_QWORD *)(result + 8 * *(int *)(a3 + 12) + 568);
  v4 = *(_QWORD *)(a3 + 64);
  v5 = *(_DWORD *)(a3 + 20);
  v6 = *(__int16 *)(a3 + 18);
  v7 = *(unsigned __int8 **)(a3 + 24);
  v8 = *(unsigned __int8 **)(a3 + 40);
  if (v7 < v8 - 12)
  {
    v9 = *(_WORD **)(a3 + 64);
    while (1)
    {
      if (v6 >= 16)
      {
        v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        v6 -= 16;
      }
      v12 = v5 << v6;
      v13 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v6) >> 23));
      v14 = ((v13 >> 10) & 0x1F) + v6;
      if (v13 > 0x8000)
      {
        *v9 = (char)v13;
        v19 = v14 - 16;
        if (v14 < 16)
          goto LABEL_19;
LABEL_18:
        v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        v14 = v19;
        goto LABEL_19;
      }
      if ((v13 & 0x8000) != 0)
      {
        v13 = *(unsigned __int16 *)(v3 + 2 * (HIWORD(v12) & 0x3FF));
        v14 += (v13 >> 10) & 0x1F;
        v15 = v13 & 0xF;
        if ((v13 & 0xF) == 0)
        {
LABEL_27:
          *v9 = ((_WORD)v13 << 8) & 0x8000;
          v19 = v14 - 16;
          if (v14 >= 16)
            goto LABEL_18;
          goto LABEL_19;
        }
      }
      else
      {
        v15 = v13 & 0xF;
        if ((v13 & 0xF) == 0)
          goto LABEL_27;
      }
      if (v14 >= 16)
      {
        v5 = (v5 << 16) | (*v7 << 8) | v7[1];
        v7 += 2;
        v14 -= 16;
      }
      v16 = (v13 >> 4) & 0x3F;
      v17 = ((v5 << v14) >> -(char)v15) - ((((v5 << v14) >> 31) - 1) >> -(char)v15);
      v14 += v15;
      if (v16)
        v18 = ((((int)(v17 << v16) >> 31) | 1) << (v16 - 1)) + ((_WORD)v17 << v16);
      else
        v18 = v17;
      *v9 = v18;
      v19 = v14 - 16;
      if (v14 >= 16)
        goto LABEL_18;
LABEL_19:
      v20 = v5 << v14;
      v21 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v14) >> 23));
      result = (v21 >> 10) & 0x1F;
      v6 = result + v14;
      if (v21 > 0x8000)
      {
        LOWORD(v10) = (char)v21;
      }
      else
      {
        if ((v21 & 0x8000) != 0)
        {
          v21 = *(unsigned __int16 *)(v3 + 2 * (HIWORD(v20) & 0x3FF));
          v6 += (v21 >> 10) & 0x1F;
          result = v21 & 0xF;
          if ((v21 & 0xF) != 0)
          {
LABEL_22:
            if (v6 >= 16)
            {
              v5 = (v5 << 16) | (*v7 << 8) | v7[1];
              v7 += 2;
              v6 -= 16;
            }
            v22 = (v21 >> 4) & 0x3F;
            v10 = ((v5 << v6) >> -(char)result)
                - ((((v5 << v6) >> 31) - 1) >> -(char)result);
            v6 += result;
            if (v22)
            {
              v23 = v10 << v22;
              result = (v23 >> 31) | 1u;
              v10 = ((_DWORD)result << (v22 - 1)) + v23;
            }
            goto LABEL_4;
          }
        }
        else
        {
          result = v21 & 0xF;
          if ((v21 & 0xF) != 0)
            goto LABEL_22;
        }
        LOWORD(v10) = ((_WORD)v21 << 8) & 0x8000;
      }
LABEL_4:
      v11 = v9 + 2;
      v9[1] = v10;
      v9 += 2;
      if (v7 >= v8 - 12)
        goto LABEL_32;
    }
  }
  v11 = *(_WORD **)(a3 + 64);
LABEL_32:
  *(_BYTE *)(a3 + 48) = 0;
  while (v7 <= v8)
  {
    if (v6 >= 16)
    {
      v5 = (v5 << 16) | (*v7 << 8) | v7[1];
      v7 += 2;
      v6 -= 16;
    }
    v24 = *(unsigned __int16 *)(v3 + 2 * ((v5 << v6) >> 23));
    v25 = ((v24 >> 10) & 0x1F) + v6;
    if (v24 > 0x8000)
    {
      LOWORD(v24) = (char)v24;
      goto LABEL_45;
    }
    if ((v24 & 0x8000) != 0)
    {
      v24 = *(unsigned __int16 *)(v3 + 2 * (((v5 << v6) >> 16) & 0x3FF));
      v25 += (v24 >> 10) & 0x1F;
      v26 = v24 & 0xF;
      if ((v24 & 0xF) == 0)
      {
LABEL_50:
        *v11++ = ((_WORD)v24 << 8) & 0x8000;
        if (v25 >= 8)
          goto LABEL_46;
        goto LABEL_51;
      }
    }
    else
    {
      v26 = v24 & 0xF;
      if ((v24 & 0xF) == 0)
        goto LABEL_50;
    }
    if (v25 >= 16)
    {
      v5 = (v5 << 16) | (*v7 << 8) | v7[1];
      v7 += 2;
      v25 -= 16;
    }
    v27 = (v24 >> 4) & 0x3F;
    result = -v26;
    v24 = ((v5 << v25) >> -(char)v26) - ((((v5 << v25) >> 31) - 1) >> -(char)v26);
    v25 += v26;
    if (v27)
    {
      *v11++ = ((((int)(v24 << v27) >> 31) | 1) << (v27 - 1)) + ((_WORD)v24 << v27);
      if (v25 < 8)
        goto LABEL_51;
      do
      {
LABEL_46:
        v28 = *v7++;
        v5 = v28 | (v5 << 8);
        v6 = v25 - 8;
        v29 = v25 > 0xF;
        v25 -= 8;
      }
      while (v29);
      if (v7 == v8)
        goto LABEL_52;
    }
    else
    {
LABEL_45:
      *v11++ = v24;
      if (v25 >= 8)
        goto LABEL_46;
LABEL_51:
      v6 = v25;
      if (v7 == v8)
      {
LABEL_52:
        v30 = *(__int16 *)(a3 + 34);
        if (v6 >= v30)
        {
          v31 = v6 == v30;
          goto LABEL_55;
        }
      }
    }
  }
  v31 = 0;
  v8 = v7;
LABEL_55:
  *(_DWORD *)(a3 + 72) = ((unint64_t)v11 - v4) >> 1;
  *(_DWORD *)(a3 + 52) = v5;
  *(_WORD *)(a3 + 50) = v6;
  *(_QWORD *)(a3 + 56) = v8;
  *(_BYTE *)(a3 + 48) = v31 & *(_BYTE *)(a3 + 32);
  *(_BYTE *)(a3 + 49) = *(_BYTE *)(a3 + 33);
  return result;
}

intptr_t sub_1D5317728(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  __int16 *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  int v42;
  int v43;
  int v44;
  __int16 v45;
  unsigned __int8 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  __int16 *v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  _DWORD *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int i;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  int v87;
  int v88;
  unsigned int v89;
  BOOL v90;
  signed int v91;
  void *v92;
  size_t v93;
  intptr_t result;
  int v95;
  unsigned int *v96;
  unsigned int v97;
  BOOL v98;
  signed int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  char *v106;
  char *v107;
  int v108;
  uint64_t v109;
  unsigned __int8 *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  int *v118;
  unsigned int v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  __int128 v128;
  __int128 *v129;
  int v130;
  int v131;
  int v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  int v141;
  unsigned int v142;
  void (*v143)(uint64_t, uint64_t);
  unsigned int *v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int *v147;
  const void *v148;
  size_t v149;
  int v150;
  int v151;
  __int128 *v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int8 *v158;
  unsigned __int8 *v159;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned int *)(v1 + 1152);
  v145 = (unsigned int *)(v1 + 1148);
  v3 = (unsigned int *)(v1 + 712);
  v4 = (unsigned int *)(v1 + 1192);
  v5 = (unsigned int *)(v1 + 1180);
  v143 = *(void (**)(uint64_t, uint64_t))(v1 + 616);
  v144 = (unsigned int *)(v1 + 1160);
  v6 = (unsigned int *)(v1 + 728);
  v7 = (unsigned int *)(v1 + 1176);
  v147 = (unsigned int *)(v1 + 1144);
  v153 = (__int128 *)(v1 + 744);
  do
  {
LABEL_3:
    while (2)
    {
      v8 = atomic_load(v145);
      if ((v8 & 0x80000000) != 0)
      {
        v16 = 0;
        v9 = (unsigned int *)(v1 + 1156);
        v20 = atomic_load(v2);
        v146 = v20;
        v18 = atomic_load(v2);
        if ((v18 & 0x80000000) != 0)
          goto LABEL_92;
        goto LABEL_22;
      }
      v9 = (unsigned int *)(v1 + 1156);
LABEL_5:
      while (1)
      {
        v10 = v8 & 0x1F;
        v11 = (unsigned __int8 *)(v1 + v10 + 856);
        v12 = atomic_load(v11);
        if (v12 == 2)
          break;
        __dmb(0xBu);
        v15 = atomic_load(v145);
        if (v8 != v15)
        {
          v8 = atomic_load(v145);
          if ((v8 & 0x80000000) == 0)
            continue;
        }
LABEL_14:
        v16 = 0;
        v17 = atomic_load(v2);
        v146 = v17;
        v18 = atomic_load(v2);
        if ((v18 & 0x80000000) != 0)
          goto LABEL_92;
LABEL_22:
        v21 = 0;
        while (1)
        {
LABEL_25:
          while (1)
          {
            v23 = v18 & 0x1F;
            v24 = (unsigned __int8 *)(v1 + v23 + 856);
            v25 = atomic_load(v24);
            if (v25 == 4)
              break;
            __dmb(0xBu);
            v22 = atomic_load(v2);
            if (v18 != v22)
            {
              v18 = atomic_load(v2);
              if ((v18 & 0x80000000) == 0)
                continue;
            }
            goto LABEL_92;
          }
          v26 = *(_QWORD *)(v1 + 8 * v23 + 888);
          do
          {
            v27 = __ldaxr(v2);
            if (v27 != v18)
            {
              __clrex();
              v18 = atomic_load(v2);
              if ((v18 & 0x80000000) != 0)
                goto LABEL_92;
              goto LABEL_25;
            }
          }
          while (__stlxr(v18 | 0x80000000, v2));
          v154 = v21;
          v156 = v1 + v23 + 856;
          atomic_store(5u, v24);
          v155 = v26;
          sub_1D5318798(v1, a1, v26);
          v28 = v155;
          v29 = *(_DWORD *)(v1 + 596);
          v30 = *(__int16 **)(v155 + 64);
          v31 = *(_DWORD *)(v155 + 72);
          v32 = *(_QWORD *)(v1 + 808);
          v33 = *(_DWORD *)(v1 + 816);
          v34 = (v33 + v31) % v29;
          v35 = *(_DWORD *)(v1 + 776) + v33 + v31;
          v36 = *(_DWORD *)(v1 + 552);
          v37 = v36 - (*(_DWORD *)(v1 + 776) + v33);
          v38 = v37 & ~(v37 >> 31);
          v39 = (v37 & (v37 >> 31)) + v33;
          v40 = v36 < v35;
          if (v36 < v35)
            v41 = v38;
          else
            v41 = *(_DWORD *)(v155 + 72);
          if (v40)
            v42 = v39;
          else
            v42 = *(_DWORD *)(v1 + 816);
          if (v40)
            v43 = v39 + v38;
          else
            v43 = v33 + v31;
          if (v40)
            v44 = 0;
          else
            v44 = v34;
          if (v43 >= v29 || v42 < 1)
          {
            if ((v42 & 1) != 0)
            {
              v45 = *v30++;
              *(_WORD *)(v32 + 2 * v42++) = v45;
              --v41;
            }
          }
          else
          {
            v148 = *(const void **)(v1 + 808);
            v149 = v42;
            v151 = v44;
            v150 = v41;
            memmove(&v30[v149], v30, 2 * v41);
            memmove(v30, v148, v149 * 2);
            v44 = v151;
            v28 = v155;
            v32 = 0;
            v41 = v42 + v150;
            v42 = 0;
          }
          v46 = (unsigned __int8 *)v156;
          *(_QWORD *)(v1 + 784) = v30;
          *(_DWORD *)(v1 + 792) = v41 - v44;
          *(_QWORD *)(v1 + 808) = v32;
          *(_DWORD *)(v1 + 816) = v42;
          *(_OWORD *)(v28 + 80) = *(_OWORD *)(v1 + 776);
          v47 = *(_OWORD *)(v1 + 792);
          v48 = *(_OWORD *)(v1 + 808);
          v49 = *(_OWORD *)(v1 + 840);
          *(_OWORD *)(v28 + 128) = *(_OWORD *)(v1 + 824);
          *(_OWORD *)(v28 + 144) = v49;
          *(_OWORD *)(v28 + 96) = v47;
          *(_OWORD *)(v28 + 112) = v48;
          if (v44 <= 0)
            v50 = 1;
          else
            v50 = 2;
          atomic_store(v50, (unsigned int *)(v28 + 8));
          v51 = *(_DWORD *)(v1 + 816);
          v52 = 808;
          if (!v51)
            v52 = 784;
          v53 = *(__int16 **)(v1 + v52);
          v54 = *(_QWORD *)(v1 + 824);
          v55 = *(_DWORD *)(v1 + 832);
          v56 = *(_DWORD *)(v1 + 776);
          if (*(_DWORD *)(v1 + 792) + v51 < 1)
            goto LABEL_70;
          v57 = v56 + v51;
          if (v51)
            v58 = 0;
          else
            v58 = *(_DWORD *)(v1 + 792);
          v59 = v58 + v57;
          v60 = *(_DWORD *)(v1 + 776);
          while (2)
          {
            if (v56 != v59)
            {
LABEL_66:
              if (v56 == v60)
              {
                v64 = (_DWORD *)(v1 + 836 + 4 * v55);
                v65 = v64[1] + v53[1];
                *v64 += *v53;
                v64[1] = v65;
                v55 ^= 2u;
                v60 = v56 + v29;
              }
              if (v60 >= v59)
                v61 = v59;
              else
                v61 = v60;
              v62 = 2 * (v61 - v56);
              v53 = (__int16 *)((char *)v53 + v62);
              v54 += v62;
              v56 = v61;
              continue;
            }
            break;
          }
          if (v56 != v57)
            goto LABEL_70;
          v53 = *(__int16 **)(v1 + 784);
          v63 = *(_DWORD *)(v1 + 792);
          if (v63)
          {
            v59 = v63 + v57;
            goto LABEL_66;
          }
          v56 = v57;
LABEL_70:
          *(_DWORD *)(v1 + 776) = v56;
          *(_QWORD *)(v1 + 824) = v54;
          *(_DWORD *)(v1 + 832) = v55;
          *(_QWORD *)(v1 + 784) = 0;
          *(_DWORD *)(v1 + 792) = 0;
          *(_QWORD *)(v1 + 800) = 0;
          *(_QWORD *)(v1 + 808) = 0;
          *(_DWORD *)(v1 + 816) = 0;
          v9 = (unsigned int *)(v1 + 1156);
          if (v44 >= 1)
          {
            *(_QWORD *)(v1 + 800) = v28;
            *(_QWORD *)(v1 + 808) = v53;
            *(_DWORD *)(v1 + 816) = v44;
          }
          v66 = *(_QWORD *)(v28 + 56) - *(_QWORD *)(v28 + 24) + *(_QWORD *)(v1 + 648);
          *(_QWORD *)(v1 + 648) = v66;
          *(_OWORD *)(v1 + 760) = *(_OWORD *)(v28 + 48);
          v67 = *(_QWORD *)(v1 + 656);
          for (i = v66 - v67; ; i = *(_DWORD *)(v1 + 648) - v67)
          {
            v69 = *(_DWORD *)(v1 + 680);
            if (v69 > i)
              break;
            *(_QWORD *)(v1 + 656) = v67 + v69;
            do
              v70 = __ldaxr(v3);
            while (__stlxr(v70 + 1, v3));
            if (v70 == -1)
            {
              dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 720));
              v46 = (unsigned __int8 *)v156;
            }
            v67 = *(_QWORD *)(v1 + 656);
          }
          atomic_store(6u, v46);
          do
            v71 = __ldaxr(v2);
          while (__stlxr(v71 - 0x7FFFFFFF, v2));
          if (v154 && (v72 = atomic_load(v4), v72 >= 2))
          {
            do
            {
              while (1)
              {
                v73 = __ldaxr(v4);
                if (v73 == v72)
                  break;
                __clrex();
                v72 = atomic_load(v4);
                if (v72 < 2)
                  goto LABEL_87;
              }
            }
            while (__stlxr(v72 - 1, v4));
            dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 1200));
            v21 = v154 + 1;
            v18 = atomic_load(v2);
            v16 = 1;
            if ((v18 & 0x80000000) != 0)
              goto LABEL_92;
          }
          else
          {
LABEL_87:
            v21 = v154 + 1;
            v18 = atomic_load(v2);
            v16 = 1;
            if ((v18 & 0x80000000) != 0)
              goto LABEL_92;
          }
        }
      }
      v13 = *(_QWORD *)(v1 + 8 * v10 + 888);
      do
      {
        v14 = __ldaxr(v145);
        if (v14 != v8)
        {
          __clrex();
          v8 = atomic_load(v145);
          if ((v8 & 0x80000000) != 0)
            goto LABEL_14;
          goto LABEL_5;
        }
      }
      while (__stlxr(v8 + 1, v145));
      atomic_store(3u, v11);
      if (*(_BYTE *)(v13 + 16) && !*(_BYTE *)(v13 + 17))
        v143(v1, a1);
      atomic_store(4u, v11);
      v16 = 1;
      v19 = atomic_load(v2);
      v146 = v19;
      v18 = atomic_load(v2);
      if ((v18 & 0x80000000) == 0)
        goto LABEL_22;
LABEL_92:
      v75 = atomic_load(v9);
      if ((v75 & 0x80000000) != 0)
      {
LABEL_99:
        if ((v16 & 1) == 0)
        {
          v80 = atomic_load(v2);
          if (v146 != v80)
            goto LABEL_194;
          v81 = atomic_load(v4);
          if (v81 <= 0)
          {
            v103 = atomic_load(v5);
            if (v103 > 0)
              goto LABEL_194;
          }
          v82 = *(_DWORD *)(v1 + 1164);
          v83 = *(_QWORD *)(v1 + 1168);
          v84 = atomic_load((unsigned int *)(v1 + 1152));
          if (v146 != v84)
            goto LABEL_194;
          v85 = 0;
          v157 = *(_QWORD *)(v1 + 1168);
          while (1)
          {
            v87 = atomic_load(v4);
            if (v87 <= 0)
            {
              v88 = atomic_load(v5);
              if (v88 > 0)
                break;
            }
            do
            {
              v89 = __ldaxr(v144);
              v90 = __OFSUB__(v89, 1);
              v91 = v89 - 1;
            }
            while (__stlxr(v91, v144));
            if (v91 < 0 != v90)
              break;
            v92 = (void *)(v83 + (v91 << v82));
            if ((unint64_t)v92 >= *(_QWORD *)v1 && (unint64_t)v92 < *(_QWORD *)(v1 + 8))
            {
              v93 = NSPageSize();
              madvise(v92, v93, 3);
              v83 = v157;
            }
            ++v85;
            v86 = atomic_load(v2);
            if (v146 != v86)
              goto LABEL_3;
          }
          if (!v85)
          {
LABEL_194:
            do
              v104 = __ldaxr(v4);
            while (__stlxr(v104 + 1, v4));
            if (v104)
            {
              dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v1 + 1200), 0xFFFFFFFFFFFFFFFFLL);
            }
            else
            {
              while (2)
              {
                if (*(_QWORD *)(v1 + 640) + *(int *)(v1 + 548) + 4 >= *(_QWORD *)(v1 + 632))
                  v111 = *(_QWORD *)(v1 + 632);
                else
                  v111 = *(_QWORD *)(v1 + 640) + *(int *)(v1 + 548) + 4;
                v112 = *(_QWORD *)(v1 + 664);
                while (v111 > v112)
                {
                  do
                    v113 = __ldaxr(v6);
                  while (__stlxr(v113 - 1, v6));
                  if (v113 <= 0)
                    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v1 + 736), 0xFFFFFFFFFFFFFFFFLL);
                  v112 = *(_QWORD *)(v1 + 664) + *(int *)(v1 + 680);
                  *(_QWORD *)(v1 + 664) = v112;
                  v114 = *(_QWORD *)(v1 + 672);
                  if (v112 > v114)
                    *(_QWORD *)(v1 + 672) = v114 + *(int *)(v1 + 688);
                }
                do
                  v115 = __ldaxr(v5);
                while (__stlxr(v115 - 1, v5));
                if (v115 <= 0)
                  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v1 + 1184), 0xFFFFFFFFFFFFFFFFLL);
LABEL_146:
                v116 = atomic_load(v7);
                do
                {
                  v117 = __ldaxr(v7);
                  if (v117 != v116)
                  {
                    __clrex();
                    goto LABEL_146;
                  }
                }
                while (__stlxr((v116 - 1) & v116, v7));
                v118 = *(int **)(v1 + 8 * __clz(__rbit32(v116)) + 288);
                do
                {
                  v119 = __ldaxr(v147);
                  v120 = v119 + 1;
                }
                while (__stlxr(v119 + 1, v147));
                *v118 = v119;
                v121 = v119 & 0x1F;
                *(_QWORD *)(v1 + 8 * v121 + 888) = v118;
                atomic_store(0, (unsigned __int8 *)(v1 + 856 + (v120 & 0x1F)));
                v110 = (unsigned __int8 *)(v1 + 856 + v121);
                atomic_store(1u, v110);
                v122 = *(int *)(v1 + 548);
                v123 = *(_QWORD *)(v1 + 640);
                v124 = v123 + v122;
                v125 = *(_QWORD *)(v1 + 632);
                v126 = v125 - v123;
                v40 = v124 < v125;
                v127 = v124 >= v125;
                if (!v40)
                  v122 = v126;
                v128 = *v153;
                *((_BYTE *)v118 + 32) = 0;
                v129 = (__int128 *)(v118 + 8);
                *((_OWORD *)v118 + 1) = v128;
                *((_BYTE *)v118 + 33) = v127;
                *((_WORD *)v118 + 17) = 32;
                *((_QWORD *)v118 + 5) = *((_QWORD *)v118 + 3) + v122;
                if (v122 < 1 || (v130 = atomic_load((unsigned int *)(v1 + 556)), v130 < 1) || *((_BYTE *)v118 + 17))
                {
                  *((_OWORD *)v118 + 2) = *((_OWORD *)v118 + 1);
                  *((_WORD *)v118 + 16) = 257;
                  *((_OWORD *)v118 + 3) = *v129;
                  v118[18] = 0;
                }
                else
                {
                  v105 = *((_QWORD *)v118 + 5);
                  v106 = *(char **)(v1 + 704);
                  if (v105 + 4 > (unint64_t)v106)
                  {
                    v158 = v110;
                    v107 = &v106[-*((_QWORD *)v118 + 3)];
                    v108 = v105 - (_DWORD)v106 + 4;
                    if (v108 <= (int)v107)
                    {
                      memmove(v106, *(const void **)(v1 + 696), v108);
                    }
                    else
                    {
                      memmove((void *)(*(_QWORD *)(v1 + 696) - (int)v107), &v106[-(int)v107], (int)v107);
                      v109 = *(int *)(v1 + 688);
                      *((_QWORD *)v118 + 3) -= v109;
                      *((_QWORD *)v118 + 5) -= v109;
                    }
                    v110 = v158;
                  }
                }
                v131 = *v118;
                v132 = *(_DWORD *)(v1 + 604);
                v118[3] = *v118 >= v132;
                if (!*((_BYTE *)v118 + 17) && (v131 < v132 || *((_BYTE *)v118 + 33)))
                {
                  v159 = v110;
                  (*(void (**)(uint64_t, uint64_t, int *))(v1 + 608))(v1, a1, v118);
                  v110 = v159;
                  if (!*((_BYTE *)v118 + 32))
                  {
                    v133 = *((_QWORD *)v118 + 5) - 128;
                    if (v133 < *((_QWORD *)v118 + 3))
                      v133 = *((_QWORD *)v118 + 3);
                    *((_QWORD *)v118 + 5) = v133;
                    (*(void (**)(uint64_t, uint64_t, int *))(v1 + 608))(v1, a1, v118);
                    v110 = v159;
                    if (!*((_BYTE *)v118 + 32))
                    {
                      v134 = *((_QWORD *)v118 + 5) - 128;
                      if (v134 < *((_QWORD *)v118 + 3))
                        v134 = *((_QWORD *)v118 + 3);
                      *((_QWORD *)v118 + 5) = v134;
                      (*(void (**)(uint64_t, uint64_t, int *))(v1 + 608))(v1, a1, v118);
                      v110 = v159;
                      if (!*((_BYTE *)v118 + 32))
                      {
                        v135 = *((_QWORD *)v118 + 5) - 128;
                        if (v135 < *((_QWORD *)v118 + 3))
                          v135 = *((_QWORD *)v118 + 3);
                        *((_QWORD *)v118 + 5) = v135;
                        (*(void (**)(uint64_t, uint64_t, int *))(v1 + 608))(v1, a1, v118);
                        v110 = v159;
                        if (!*((_BYTE *)v118 + 32))
                        {
                          v136 = *((_QWORD *)v118 + 5) - 128;
                          if (v136 < *((_QWORD *)v118 + 3))
                            v136 = *((_QWORD *)v118 + 3);
                          *((_QWORD *)v118 + 5) = v136;
                          (*(void (**)(uint64_t, uint64_t, int *))(v1 + 608))(v1, a1, v118);
                          v110 = v159;
                          if (!*((_BYTE *)v118 + 32))
                          {
                            v137 = *((_QWORD *)v118 + 5) - 128;
                            if (v137 < *((_QWORD *)v118 + 3))
                              v137 = *((_QWORD *)v118 + 3);
                            *((_QWORD *)v118 + 5) = v137;
                            (*(void (**)(uint64_t, uint64_t, int *))(v1 + 608))(v1, a1, v118);
                            v110 = v159;
                            if (!*((_BYTE *)v118 + 32))
                            {
                              v138 = *((_QWORD *)v118 + 5) - 128;
                              if (v138 < *((_QWORD *)v118 + 3))
                                v138 = *((_QWORD *)v118 + 3);
                              *((_QWORD *)v118 + 5) = v138;
                              (*(void (**)(uint64_t, uint64_t, int *))(v1 + 608))(v1, a1, v118);
                              v110 = v159;
                              if (!*((_BYTE *)v118 + 32))
                              {
                                v139 = *((_QWORD *)v118 + 5) - 128;
                                if (v139 < *((_QWORD *)v118 + 3))
                                  v139 = *((_QWORD *)v118 + 3);
                                *((_QWORD *)v118 + 5) = v139;
                                (*(void (**)(uint64_t, uint64_t, int *))(v1 + 608))(v1, a1, v118);
                                v110 = v159;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                *(_QWORD *)(v1 + 640) += *((_QWORD *)v118 + 5) - *((_QWORD *)v118 + 3);
                *v153 = *v129;
                v140 = *(_QWORD *)(v1 + 752);
                if (v140 >= *(_QWORD *)(v1 + 704))
                  *(_QWORD *)(v1 + 752) = v140 - *(int *)(v1 + 688);
                atomic_store(2u, v110);
                do
                  v141 = __ldaxr(v4);
                while (__stlxr(v141 - 1, v4));
                if (v141 >= 2)
                {
                  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 1200));
                  continue;
                }
                break;
              }
            }
          }
        }
        continue;
      }
      break;
    }
LABEL_93:
    v76 = v75 & 0x1F;
    v77 = atomic_load((unsigned __int8 *)(v1 + v76 + 856));
    if (v77 != 6)
    {
      __dmb(0xBu);
      v74 = atomic_load(v9);
      if (v75 == v74)
        goto LABEL_99;
      goto LABEL_92;
    }
    v78 = *(_QWORD *)(v1 + 8 * v76 + 888);
    do
    {
      v79 = __ldaxr(v9);
      if (v79 != v75)
      {
        __clrex();
        v75 = atomic_load(v9);
        if ((v75 & 0x80000000) == 0)
          goto LABEL_93;
        goto LABEL_99;
      }
    }
    while (__stlxr(v75 + 1, v9));
    result = sub_1D5318C34(v1, v78);
    v95 = *(unsigned __int8 *)(v78 + 17);
    v96 = (unsigned int *)(v78 + 8);
    do
    {
      v97 = __ldaxr(v96);
      v98 = __OFSUB__(v97, 1);
      v99 = v97 - 1;
    }
    while (__stlxr(v99, v96));
    if ((v99 < 0) ^ v98 | (v99 == 0))
    {
      v100 = 1 << *(_DWORD *)(v78 + 4);
      do
        v101 = __ldaxr(v7);
      while (__stlxr(v101 | v100, v7));
      do
        v102 = __ldaxr(v5);
      while (__stlxr(v102 + 1, v5));
      if ((v102 & 0x80000000) != 0)
        result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 1184));
    }
  }
  while (!v95);
  atomic_store(1u, (unsigned __int8 *)(v1 + 561));
  do
    v142 = __ldaxr(v3);
  while (__stlxr(v142 + 1, v3));
  if (v142 == -1)
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v1 + 720));
  return result;
}

intptr_t sub_1D53182C4(uint64_t a1)
{
  int v1;
  unint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  _OWORD *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  _OWORD *v23;
  _OWORD *v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int i;
  int v35;
  unsigned int v36;
  intptr_t result;
  int v38;
  unsigned int *v39;
  unsigned int v40;
  BOOL v41;
  signed int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  void (*v52)(unint64_t, uint64_t, uint64_t);

  v1 = 0;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = (unsigned int *)(v2 + 728);
  v52 = *(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 616);
  v4 = (unsigned int *)(v2 + 1180);
  v5 = (unsigned int *)(v2 + 1176);
  v6 = (_OWORD *)(v2 + 744);
  v7 = (unsigned int *)(v2 + 712);
  do
  {
    if (*(_QWORD *)(v2 + 640) + *(int *)(v2 + 548) + 4 >= *(_QWORD *)(v2 + 632))
      v8 = *(_QWORD *)(v2 + 632);
    else
      v8 = *(_QWORD *)(v2 + 640) + *(int *)(v2 + 548) + 4;
    v9 = *(_QWORD *)(v2 + 664);
    while (v8 > v9)
    {
      do
        v10 = __ldaxr(v3);
      while (__stlxr(v10 - 1, v3));
      if (v10 <= 0)
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v2 + 736), 0xFFFFFFFFFFFFFFFFLL);
      v9 = *(_QWORD *)(v2 + 664) + *(int *)(v2 + 680);
      *(_QWORD *)(v2 + 664) = v9;
      v11 = *(_QWORD *)(v2 + 672);
      if (v9 > v11)
        *(_QWORD *)(v2 + 672) = v11 + *(int *)(v2 + 688);
    }
    do
      v12 = __ldaxr(v4);
    while (__stlxr(v12 - 1, v4));
    if (v12 <= 0)
      dispatch_semaphore_wait(*(dispatch_semaphore_t *)(v2 + 1184), 0xFFFFFFFFFFFFFFFFLL);
LABEL_17:
    v13 = atomic_load(v5);
    do
    {
      v14 = __ldaxr(v5);
      if (v14 != v13)
      {
        __clrex();
        goto LABEL_17;
      }
    }
    while (__stlxr((v13 - 1) & v13, v5));
    v15 = *(_QWORD *)(v2 + 8 * __clz(__rbit32(v13)) + 288);
    *(_DWORD *)v15 = v1;
    v16 = *(int *)(v2 + 548);
    v17 = *(_QWORD *)(v2 + 640);
    v18 = v17 + v16;
    v19 = *(_QWORD *)(v2 + 632);
    v20 = v19 - v17;
    v21 = v18 < v19;
    v22 = v18 >= v19;
    if (!v21)
      v16 = v20;
    v23 = (_OWORD *)(v15 + 16);
    *(_OWORD *)(v15 + 16) = *v6;
    *(_BYTE *)(v15 + 32) = 0;
    v24 = (_OWORD *)(v15 + 32);
    *(_BYTE *)(v15 + 33) = v22;
    *(_WORD *)(v15 + 34) = 32;
    *(_QWORD *)(v15 + 40) = *(_QWORD *)(v15 + 24) + v16;
    if (v16 < 1 || (v25 = atomic_load((unsigned int *)(v2 + 556)), v25 < 1) || *(_BYTE *)(v15 + 17))
    {
      *v24 = *v23;
      *(_WORD *)(v15 + 32) = 257;
      *(_OWORD *)(v15 + 48) = *v24;
      *(_DWORD *)(v15 + 72) = 0;
    }
    else
    {
      v46 = *(_QWORD *)(v15 + 40);
      v47 = *(char **)(v2 + 704);
      if (v46 + 4 > (unint64_t)v47)
      {
        v48 = &v47[-*(_QWORD *)(v15 + 24)];
        v49 = v46 - (_DWORD)v47 + 4;
        if (v49 <= (int)v48)
        {
          memmove(v47, *(const void **)(v2 + 696), v49);
        }
        else
        {
          memmove((void *)(*(_QWORD *)(v2 + 696) - (int)v48), &v47[-(int)v48], (int)v48);
          v50 = *(int *)(v2 + 688);
          *(_QWORD *)(v15 + 24) -= v50;
          *(_QWORD *)(v15 + 40) -= v50;
        }
      }
    }
    if (*(_BYTE *)(v15 + 17))
    {
      v26 = *(unsigned __int8 **)(v15 + 40);
    }
    else
    {
      v26 = *(unsigned __int8 **)(v15 + 40);
      if (*(_BYTE *)(v15 + 33))
      {
        v27 = *(_DWORD *)(v15 + 36);
        v28 = *(__int16 *)(v15 + 34);
        if (v28 >= 8)
        {
          v28 = *(unsigned __int16 *)(v15 + 34);
          do
          {
            v29 = v28;
            v30 = *v26++;
            v27 = v30 | (v27 << 8);
            v28 -= 8;
          }
          while (v29 > 0xF);
        }
        *(_DWORD *)(v15 + 36) = v27;
        *(_WORD *)(v15 + 34) = v28;
        *(_QWORD *)(v15 + 40) = v26;
      }
    }
    *(_QWORD *)(v2 + 640) += &v26[-*(_QWORD *)(v15 + 24)];
    *v6 = *v24;
    v31 = *(_QWORD *)(v2 + 752);
    if (v31 >= *(_QWORD *)(v2 + 704))
      *(_QWORD *)(v2 + 752) = v31 - *(int *)(v2 + 688);
    if (*(_BYTE *)v23 && !*(_BYTE *)(v15 + 17))
      v52(v2, a1, v15);
    sub_1D5318798(v2, a1, v15);
    sub_1D5318A08(v2, v15);
    v32 = *(_QWORD *)(v15 + 56) - *(_QWORD *)(v15 + 24) + *(_QWORD *)(v2 + 648);
    *(_QWORD *)(v2 + 648) = v32;
    *(_OWORD *)(v2 + 760) = *(_OWORD *)(v15 + 48);
    v33 = *(_QWORD *)(v2 + 656);
    for (i = v32 - v33; ; i = *(_DWORD *)(v2 + 648) - v33)
    {
      v35 = *(_DWORD *)(v2 + 680);
      if (v35 > i)
        break;
      *(_QWORD *)(v2 + 656) = v33 + v35;
      do
        v36 = __ldaxr(v7);
      while (__stlxr(v36 + 1, v7));
      if (v36 == -1)
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 720));
      v33 = *(_QWORD *)(v2 + 656);
    }
    result = sub_1D5318C34(v2, v15);
    v38 = *(unsigned __int8 *)(v15 + 17);
    v39 = (unsigned int *)(v15 + 8);
    do
    {
      v40 = __ldaxr(v39);
      v41 = __OFSUB__(v40, 1);
      v42 = v40 - 1;
    }
    while (__stlxr(v42, v39));
    if ((v42 < 0) ^ v41 | (v42 == 0))
    {
      v43 = 1 << *(_DWORD *)(v15 + 4);
      do
        v44 = __ldaxr(v5);
      while (__stlxr(v44 | v43, v5));
      do
        v45 = __ldaxr(v4);
      while (__stlxr(v45 + 1, v4));
      if ((v45 & 0x80000000) != 0)
        result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 1184));
    }
    ++v1;
  }
  while (!v38);
  atomic_store(1u, (unsigned __int8 *)(v2 + 561));
  do
    v51 = __ldaxr(v7);
  while (__stlxr(v51 + 1, v7));
  if (v51 == -1)
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v2 + 720));
  return result;
}

uint64_t *sub_1D53186F8(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  if (v2)
    sub_1D52845EC(v2, a1[2]);
  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_1D5318774(_QWORD *a1)
{
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5318798(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  __int128 *v13;
  char v14;
  __int128 v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;

  v5 = result;
  v6 = *(_DWORD *)(result + 816) + *(_DWORD *)(result + 776);
  v7 = *(_DWORD *)(result + 600);
  v8 = v6 >= v7;
  if (*(_BYTE *)(result + 562))
  {
    v9 = 1;
  }
  else
  {
    v10 = *(_DWORD *)(a3 + 72) + v6 > v7;
    v11 = *(_DWORD *)(a3 + 12);
    v9 = v11 == v8 && v11 == v10;
  }
  v13 = (__int128 *)(a3 + 16);
  v14 = v9 & *(_BYTE *)(a3 + 16) & *(_BYTE *)(result + 760);
  *(_BYTE *)(a3 + 16) = v14;
  if ((v14 & 1) != 0)
    goto LABEL_33;
  *(_DWORD *)(a3 + 12) = v8;
  *v13 = *(_OWORD *)(result + 760);
  if (*(_BYTE *)(a3 + 17))
  {
    if (*(_BYTE *)(result + 560))
    {
      *(_DWORD *)(a3 + 72) = 0;
      v15 = *v13;
      *(_OWORD *)(a3 + 32) = *v13;
      *(_OWORD *)(a3 + 48) = v15;
    }
    goto LABEL_33;
  }
  v16 = *(_QWORD *)(a3 + 24);
  if (v16 >= *(_QWORD *)(result + 696))
  {
    if (v16 <= *(_QWORD *)(a3 + 40))
      goto LABEL_15;
LABEL_18:
    *(_QWORD *)(a3 + 24) = v16 - *(int *)(result + 688);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 616))(result, a2, a3);
    if (v9)
      goto LABEL_33;
    goto LABEL_19;
  }
  v16 += *(int *)(result + 688);
  *(_QWORD *)(a3 + 24) = v16;
  if (v16 > *(_QWORD *)(a3 + 40))
    goto LABEL_18;
LABEL_15:
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 616))(result, a2, a3);
  if (v9)
    goto LABEL_33;
LABEL_19:
  v17 = *(_DWORD *)(v5 + 600);
  v18 = *(_DWORD *)(a3 + 72) + v6 > v17;
  v19 = *(int *)(a3 + 12);
  if ((_DWORD)v19 != v18)
  {
    v20 = *(_QWORD *)(a3 + 64);
    v21 = v17 - v6;
    *(_DWORD *)(a3 + 72) = v21;
    v22 = *(_DWORD *)(a3 + 20);
    v23 = *(__int16 *)(a3 + 18);
    v24 = *(unsigned __int8 **)(a3 + 24);
    if (v21 >= 1)
    {
      v25 = *(_QWORD *)(v5 + 8 * v19 + 568);
      v26 = v21;
      do
      {
        if (v23 >= 16)
        {
          v22 = (v22 << 16) | (*v24 << 8) | v24[1];
          v24 += 2;
          v23 -= 16;
        }
        v27 = v22 << v23;
        v28 = *(unsigned __int16 *)(v25 + 2 * ((v22 << v23) >> 23));
        v23 += (v28 >> 10) & 0x1F;
        if (v28 <= 0x8000)
        {
          if ((v28 & 0x8000) != 0)
          {
            v28 = *(unsigned __int16 *)(v25 + 2 * (HIWORD(v27) & 0x3FF));
            v23 += (v28 >> 10) & 0x1F;
          }
          v29 = v28 & 0xF;
          if (v29)
          {
            if (v23 >= 16)
            {
              v22 = (v22 << 16) | (*v24 << 8) | v24[1];
              v24 += 2;
              v23 -= 16;
            }
            v23 += v29;
          }
        }
        --v26;
      }
      while (v26);
    }
    *(_DWORD *)(a3 + 20) = v22;
    *(_WORD *)(a3 + 18) = v23;
    *(_QWORD *)(a3 + 24) = v24;
    *(_DWORD *)(a3 + 12) = v18;
    *(_QWORD *)(a3 + 64) = v20 + 2 * v21;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 616))(v5, a2, a3);
    *(_QWORD *)(a3 + 64) = v20;
    *(_DWORD *)(a3 + 72) += v21;
  }
LABEL_33:
  v30 = *(_DWORD *)(a3 + 72);
  v31 = (unsigned int *)(v5 + 556);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - v30, v31));
  return result;
}

unint64_t sub_1D5318A08(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  int v4;
  __int16 *v5;
  int v6;
  _OWORD *v7;
  _WORD *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  __int16 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  __int16 *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  _DWORD *v38;
  int v39;

  v3 = result;
  v4 = *(_DWORD *)(result + 596);
  v5 = *(__int16 **)(a2 + 64);
  v6 = *(_DWORD *)(a2 + 72);
  v7 = (_OWORD *)(result + 776);
  v8 = *(_WORD **)(result + 808);
  v9 = *(_DWORD *)(result + 816);
  v10 = (v9 + v6) % v4;
  v11 = *(_DWORD *)(result + 776) + v9 + v6;
  v12 = *(_DWORD *)(result + 552);
  v13 = v12 - (*(_DWORD *)(result + 776) + v9);
  v14 = v13 & ~(v13 >> 31);
  v15 = (v13 & (v13 >> 31)) + v9;
  if (v12 < v11)
    v16 = v14;
  else
    v16 = *(_DWORD *)(a2 + 72);
  if (v12 < v11)
    v17 = v15;
  else
    v17 = *(_DWORD *)(result + 816);
  if (v12 < v11)
    v18 = v15 + v14;
  else
    v18 = v9 + v6;
  if (v12 < v11)
    v19 = 0;
  else
    v19 = v10;
  if (v18 >= v4 || v17 < 1)
  {
    if ((v17 & 1) != 0)
    {
      v20 = *v5++;
      v8[v17++] = v20;
      --v16;
    }
  }
  else
  {
    memmove(&v5[v17], *(const void **)(a2 + 64), 2 * v16);
    result = (unint64_t)memmove(v5, v8, 2 * v17);
    v8 = 0;
    v16 += v17;
    v17 = 0;
  }
  *(_QWORD *)(v3 + 784) = v5;
  *(_DWORD *)(v3 + 792) = v16 - v19;
  *(_QWORD *)(v3 + 808) = v8;
  *(_DWORD *)(v3 + 816) = v17;
  *(_OWORD *)(a2 + 80) = *v7;
  v21 = v7[1];
  v22 = v7[2];
  v23 = v7[4];
  *(_OWORD *)(a2 + 128) = v7[3];
  *(_OWORD *)(a2 + 144) = v23;
  *(_OWORD *)(a2 + 96) = v21;
  *(_OWORD *)(a2 + 112) = v22;
  if (v19 <= 0)
    v24 = 1;
  else
    v24 = 2;
  atomic_store(v24, (unsigned int *)(a2 + 8));
  v25 = *(_DWORD *)(v3 + 816);
  v26 = 808;
  if (!v25)
    v26 = 784;
  v27 = *(__int16 **)(v3 + v26);
  v28 = *(_QWORD *)(v3 + 824);
  v29 = *(_DWORD *)(v3 + 832);
  v30 = *(_DWORD *)(v3 + 776);
  if (*(_DWORD *)(v3 + 792) + v25 >= 1)
  {
    v31 = v30 + v25;
    if (v25)
      v32 = 0;
    else
      v32 = *(_DWORD *)(v3 + 792);
    v33 = v31 + v32;
    v34 = *(_DWORD *)(v3 + 776);
    while (1)
    {
      if (v30 == v33)
      {
        if (v30 != v31)
          break;
        v27 = *(__int16 **)(v3 + 784);
        v37 = *(_DWORD *)(v3 + 792);
        if (!v37)
        {
          v30 = v31;
          break;
        }
        v33 = v37 + v31;
      }
      if (v30 == v34)
      {
        v38 = (_DWORD *)(v3 + 836 + 4 * v29);
        result = v38[1];
        v39 = result + v27[1];
        *v38 += *v27;
        v38[1] = v39;
        v29 ^= 2u;
        v34 = v30 + v4;
      }
      if (v34 >= v33)
        v35 = v33;
      else
        v35 = v34;
      v36 = 2 * (v35 - v30);
      v27 = (__int16 *)((char *)v27 + v36);
      v28 += v36;
      v30 = v35;
    }
  }
  *(_DWORD *)(v3 + 776) = v30;
  *(_QWORD *)(v3 + 824) = v28;
  *(_DWORD *)(v3 + 832) = v29;
  *(_QWORD *)(v3 + 784) = 0;
  *(_DWORD *)(v3 + 792) = 0;
  *(_QWORD *)(v3 + 808) = 0;
  *(_QWORD *)(v3 + 800) = 0;
  *(_DWORD *)(v3 + 816) = 0;
  if (v19 >= 1)
  {
    *(_QWORD *)(v3 + 800) = a2;
    *(_QWORD *)(v3 + 808) = v27;
    *(_DWORD *)(v3 + 816) = v19;
  }
  return result;
}

intptr_t sub_1D5318C34(intptr_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  __int16 *v5;
  uint64_t v6;
  _WORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  BOOL v22;
  signed int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int *v28;
  int v29;
  int v30;
  int v31;
  __int16 *v32;
  __int16 v33;
  __int16 *v34;
  uint64_t v35;
  int v36;
  int v37;
  intptr_t v38;

  v3 = *(_DWORD *)(a2 + 120);
  v4 = 112;
  if (!v3)
    v4 = 88;
  v5 = *(__int16 **)(a2 + v4);
  v6 = *(_QWORD *)(result + 584);
  v7 = *(_WORD **)(a2 + 128);
  v8 = *(_DWORD *)(a2 + 136);
  v9 = *(_DWORD *)(a2 + 80);
  v10 = v9 + v3;
  v11 = v9 + v3;
  if (!v3)
    v11 = *(_DWORD *)(a2 + 96) + v10;
  v12 = 0;
  v13 = 0;
  v14 = *(_DWORD *)(result + 596);
  v15 = a2 + 140;
  v16 = (unsigned int *)(result + 1176);
  v17 = (unsigned int *)(result + 1180);
  v18 = *(_DWORD *)(a2 + 80);
  v38 = result;
  v36 = v14;
  v37 = v9 + v3;
  v35 = a2 + 140;
  while (1)
  {
    if (v9 != v11)
      goto LABEL_20;
    if (v9 != v10)
      return result;
    v19 = *(_QWORD *)(a2 + 104);
    if (v19)
    {
      v20 = (unsigned int *)(v19 + 8);
      do
      {
        v21 = __ldaxr(v20);
        v22 = __OFSUB__(v21, 1);
        v23 = v21 - 1;
      }
      while (__stlxr(v23, v20));
      if ((v23 < 0) ^ v22 | (v23 == 0))
      {
        *(_QWORD *)(a2 + 104) = 0;
        v24 = 1 << *(_DWORD *)(v19 + 4);
        do
          v25 = __ldaxr(v16);
        while (__stlxr(v25 | v24, v16));
        do
          v26 = __ldaxr(v17);
        while (__stlxr(v26 + 1, v17));
        if ((v26 & 0x80000000) != 0)
        {
          result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v38 + 1184));
          v15 = v35;
          v14 = v36;
          v10 = v37;
        }
      }
    }
    v27 = *(_DWORD *)(a2 + 96);
    if (!v27)
      return result;
    v5 = *(__int16 **)(a2 + 88);
    v11 = v27 + v10;
LABEL_20:
    if (v9 == v18)
    {
      v28 = (int *)(v15 + 4 * v8);
      v12 = *v28;
      v13 = v28[1];
      v29 = v13 + v5[1];
      *v28 += *v5;
      v28[1] = v29;
      v8 ^= 2u;
      v18 = v9 + v14;
    }
    if (v18 >= v11)
      v30 = v11;
    else
      v30 = v18;
    v31 = v30 - v9;
    v9 = v30;
    if (v31 >= 1)
    {
      v32 = &v5[v31];
      do
      {
        v12 += *v5;
        v13 += v5[1];
        v33 = *(_WORD *)(v6 + 2 * (unsigned __int16)-(-(__int16)v13 & (-v13 >> 31)));
        v34 = v5 + 2;
        *v7 = *(_WORD *)(v6 + 2 * (unsigned __int16)-(-(__int16)v12 & (-v12 >> 31)));
        v7[1] = v33;
        v7 += 2;
        v5 = v34;
      }
      while (v34 < v32);
      v5 = v34;
      v9 = v30;
    }
  }
}

void sub_1D5318E10(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void (**v4)(_QWORD);
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  char *v16;
  char *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  __int16 v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  unsigned int v32;
  int v33;
  __int16 v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  __int16 v38;
  uint64_t v39;
  void *v40;
  void *exception;
  void *v42;
  void (**v43)(_QWORD);
  unint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint8_t buf[4];
  _QWORD v52[5];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CPacked12Unpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v52[0] = MEMORY[0x1E0C809B0];
  v52[1] = 3221225472;
  v52[2] = sub_1D53193E4;
  v52[3] = &unk_1E996F870;
  v52[4] = a1;
  v4 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v52);
  v6 = *(_DWORD *)(a1 + 44);
  v5 = *(unsigned int *)(a1 + 48);
  if (*(_BYTE *)(a1 + 196))
    v7 = (2 * ((3435973837u * (unint64_t)(v6 + 9)) >> 32)) & 0xFFFFFFF0;
  else
    v7 = ((3 * v6) >> 1) & 0x1FFFFFFF;
  if (*(_BYTE *)(a1 + 196))
    v8 = 16;
  else
    v8 = 15;
  v47 = *(_DWORD *)(a1 + 188);
  if (v5 * v6 > (*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v9 = *(unsigned int *)(a1 + 192);
  *(_DWORD *)buf = 0;
  if ((_DWORD)v9)
  {
    if ((_DWORD)v9 == 2)
    {
      v10 = v7 * (v5 >> 1);
      if (v10 > (*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1) >> 1)
      {
        v42 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v42, "RawCameraException");
        __cxa_throw(v42, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      *(_DWORD *)buf = ((*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1) >> 1) - v10;
    }
    v44 = 0;
    v11 = 0;
    v46 = 2 * v6;
    v12 = v6 & 0xFFFFFFF8;
    v45 = ((_DWORD)v9 - 1) * v6;
    v48 = v5;
    v49 = v9;
    v43 = v4;
    do
    {
      v13 = sub_1D530B618(a1);
      if (v44 < v5)
      {
        v14 = (char *)(v13 + 2 * v6 * v44);
        v15 = v44;
        do
        {
          v16 = &v14[v46 - v7];
          if ((unint64_t)&v16[v7] > (*(uint64_t (**)(os_signpost_id_t))(*(_QWORD *)a1 + 120))(a1))
          {
            v40 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](v40, "RawCameraException");
            __cxa_throw(v40, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
          (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), &v14[v46 - v7], v7);
          v17 = &v16[v11];
          if (v15)
            v18 = 0;
          else
            v18 = v47;
          if (!v15)
            v11 = v47;
          if (*(_BYTE *)(a1 + 197))
          {
            if (v12)
            {
              v19 = 0;
              v5 = v48;
              do
              {
                v20 = bswap32(*(_DWORD *)v17);
                v21 = bswap32(*((_DWORD *)v17 + 1));
                v22 = bswap32(*((_DWORD *)v17 + 2));
                *(_WORD *)v14 = (16 * v20) | ((unsigned __int16)v20 >> 12);
                *((_WORD *)v14 + 1) = v20 & 0xF00 | BYTE2(v20);
                *((_WORD *)v14 + 2) = (v20 >> 20) & 0xFF0 | (v21 >> 4);
                *((_WORD *)v14 + 3) = BYTE1(v21) | ((v21 & 0xF) << 8);
                *((_WORD *)v14 + 4) = (v21 >> 12) & 0xFF0 | (v21 >> 28);
                *((_WORD *)v14 + 5) = v22 | ((HIBYTE(v21) & 0xF) << 8);
                *((_WORD *)v14 + 6) = (v22 & 0xFF00 | BYTE2(v22)) >> 4;
                *((_WORD *)v14 + 7) = (v22 >> 8) & 0xF00 | HIBYTE(v22);
                v17 += 12;
                v14 += 16;
                v19 += 8;
              }
              while (v19 < v12);
              v23 = (((v6 & 0xFFFFFFF8) - 1) & 0xFFFFFFF8) + 8;
            }
            else
            {
              v23 = 0;
              v5 = v48;
            }
            if (v23 < v6)
              v14 += 4 * ((v6 + ~v23) >> 1) + 4;
          }
          else
          {
            if (v6 == v6 % 0xA)
            {
              v24 = 0;
              v5 = v48;
            }
            else
            {
              v24 = 0;
              v5 = v48;
              do
              {
                v25 = v17[1];
                v26 = (v25 >> 4) | (16 * *v17);
                v27 = v17[2] | ((v25 & 0xF) << 8);
                v28 = v17[4];
                LOWORD(v25) = (v28 >> 4) | (16 * v17[3]);
                v29 = v17[5] | ((v28 & 0xF) << 8);
                *(_WORD *)v14 = v26;
                *((_WORD *)v14 + 1) = v27;
                v30 = v17[7];
                v31 = (v30 >> 4) | (16 * v17[6]);
                LOWORD(v28) = v17[8] | ((v30 & 0xF) << 8);
                *((_WORD *)v14 + 2) = v25;
                *((_WORD *)v14 + 3) = v29;
                v32 = v17[10];
                v33 = (v32 >> 4) | (16 * v17[9]);
                v34 = v17[11] | ((v32 & 0xF) << 8);
                *((_WORD *)v14 + 4) = v31;
                *((_WORD *)v14 + 5) = v28;
                v35 = v17[13];
                v36 = (v35 >> 4) | (16 * v17[12]);
                LOWORD(v28) = v17[14] | ((v35 & 0xF) << 8);
                *((_WORD *)v14 + 6) = v33;
                *((_WORD *)v14 + 7) = v34;
                *((_WORD *)v14 + 8) = v36;
                *((_WORD *)v14 + 9) = v28;
                v17 += v8;
                v14 += 20;
                v24 += 10;
              }
              while (v24 < 10 * (v6 / 0xA));
            }
            while (v24 < v6)
            {
              v37 = v17[1];
              v38 = v17[2] | ((v37 & 0xF) << 8);
              *(_WORD *)v14 = (v37 >> 4) | (16 * *v17);
              *((_WORD *)v14 + 1) = v38;
              v17 += 3;
              v14 += 4;
              v24 += 2;
            }
          }
          v7 += v18;
          v14 += 2 * v45;
          v15 += v49;
        }
        while (v15 < v5);
      }
      v4 = v43;
      if (!v44 && *(_DWORD *)buf)
      {
        v39 = *(_QWORD *)(a1 + 24);
        sub_1D5282F74(&v50, (int *)buf);
        (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v39 + 40))(v39, &v50, 1);
        v5 = v48;
      }
      ++v44;
    }
    while (v44 != v49);
  }
  v4[2](v4);

}

void sub_1D531937C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53193E4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CPacked12Unpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

uint64_t sub_1D5319468(uint64_t result, int a2)
{
  *(_DWORD *)(result + 188) = a2;
  return result;
}

uint64_t sub_1D5319470(uint64_t result, int a2)
{
  if ((a2 - 3) >= 0xFFFFFFFE)
    *(_DWORD *)(result + 192) = a2;
  return result;
}

uint64_t sub_1D5319484(uint64_t result, char a2)
{
  *(_BYTE *)(result + 196) = a2;
  return result;
}

uint64_t sub_1D531948C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 197) = a2;
  return result;
}

void sub_1D5319494(_QWORD *a1)
{
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D53194B8(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _WORD *v12;
  uint64_t v13;
  char *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  __int16 v18;
  __int16 v19;
  unsigned int v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  unsigned int v24;
  int v25;
  __int16 v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  __int16 v31;
  uint64_t v32;
  void *v33;
  void *exception;
  void *v35;
  void (**v36)(_QWORD);
  int *v37;
  char v38;
  uint64_t v39;
  int buf;
  _QWORD v41[5];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    LOWORD(buf) = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "COlympus2FieldPacked12Unpacker", (const char *)&unk_1D548AF1A, (uint8_t *)&buf, 2u);
  }

  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 3221225472;
  v41[2] = sub_1D53198E8;
  v41[3] = &unk_1E996F870;
  v41[4] = a1;
  v4 = MEMORY[0x1D82721B4](v41);
  v5 = *(unsigned int *)(a1 + 44);
  if ((v5 - 1000) > 0x1770 || (v6 = *(_DWORD *)(a1 + 48), v6 < 0x3E8) || v6 >= 0x1B59)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v7 = (*(uint64_t (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1);
  v8 = ((3 * v5) >> 1) & 0x1FFFFFFF;
  if (v7 < v8 * v6)
  {
    v35 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v35, "RawCameraException");
    __cxa_throw(v35, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v9 = 0;
  v39 = (2 * v5);
  v10 = -(uint64_t)v8;
  v36 = (void (**)(_QWORD))v4;
  v37 = (int *)(a1 + 188);
  v11 = 1;
  do
  {
    v38 = v11;
    v12 = (_WORD *)(sub_1D530B618(a1) + 2 * v9 * v5);
    do
    {
      v13 = sub_1D530B618(a1);
      v14 = (char *)v12 + v39;
      if ((unint64_t)v12 + v39 > v13 + 2 * (unint64_t)(v5 * v6))
      {
        v33 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v33, "RawCameraException");
        __cxa_throw(v33, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v15 = (unsigned __int8 *)&v14[v10];
      (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), &v14[v10], ((3 * v5) >> 1) & 0x1FFFFFFF);
      v16 = 0;
      do
      {
        v17 = v15[1];
        v18 = (v17 >> 4) | (16 * *v15);
        v19 = v15[2] | ((v17 & 0xF) << 8);
        v20 = v15[4];
        LOWORD(v17) = (v20 >> 4) | (16 * v15[3]);
        v21 = v15[5] | ((v20 & 0xF) << 8);
        *v12 = v18;
        v12[1] = v19;
        v22 = v15[7];
        v23 = (v22 >> 4) | (16 * v15[6]);
        LOWORD(v20) = v15[8] | ((v22 & 0xF) << 8);
        v12[2] = v17;
        v12[3] = v21;
        v24 = v15[10];
        v25 = (v24 >> 4) | (16 * v15[9]);
        v26 = v15[11] | ((v24 & 0xF) << 8);
        v12[4] = v23;
        v12[5] = v20;
        v27 = v15[13];
        v28 = (v27 >> 4) | (16 * v15[12]);
        LOWORD(v20) = v15[14] | ((v27 & 0xF) << 8);
        v12[6] = v25;
        v12[7] = v26;
        v12[8] = v28;
        v12[9] = v20;
        v15 += 15;
        v12 += 10;
        v16 += 10;
      }
      while (v16 < v5 - (unsigned __int16)v5 % 0xAu);
      if (v16 < v5)
      {
        v29 = 0;
        do
        {
          v30 = v15[v29 + 1];
          v31 = v15[v29 + 2] | ((v30 & 0xF) << 8);
          *v12 = (v30 >> 4) | (16 * v15[v29]);
          v12[1] = v31;
          v12 += 2;
          v16 += 2;
          v29 += 3;
        }
        while (v16 < v5);
      }
      v12 += v5;
      LODWORD(v9) = v9 + 2;
    }
    while (v9 < v6);
    if ((v38 & (*v37 != 0)) != 0)
    {
      v32 = *(_QWORD *)(a1 + 24);
      sub_1D5282F74(&buf, v37);
      (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v32 + 40))(v32, &buf, 1);
    }
    v11 = 0;
    v9 = 1;
  }
  while ((v38 & 1) != 0);
  v36[2](v36);

}

void sub_1D531988C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53198E8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "COlympus2FieldPacked12Unpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D531996C(_QWORD *a1)
{
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D5319990(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _WORD *v10;
  int v11;
  char v12;
  BOOL v13;
  _BOOL8 v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  void *exception;
  void *v22;
  void (**v23)(_QWORD);
  _QWORD v24[5];
  uint8_t buf[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CUnpackedUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = sub_1D5319C58;
  v24[3] = &unk_1E996F870;
  v24[4] = a1;
  v4 = MEMORY[0x1D82721B4](v24);
  if (*(_DWORD *)(a1 + 188) >= 0x11u)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v5 = *(int *)(a1 + 44);
  v6 = *(int *)(a1 + 48);
  if (2 * v5 * v6 > (unint64_t)(*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1))
  {
    v22 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v22, "RawCameraException");
    __cxa_throw(v22, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v23 = (void (**)(_QWORD))v4;
  v7 = sub_1D530CBD0(a1);
  v8 = *(_DWORD *)(a1 + 188);
  v9 = sub_1D530B618(a1);
  if ((int)v6 >= 1)
  {
    v10 = (_WORD *)v9;
    v11 = 0;
    v12 = 16 - v8;
    v13 = v7 == 1;
    v14 = v7 != 1;
    v15 = v13;
    if ((int)v5 >> 1 <= 1)
      v16 = 1;
    else
      v16 = (int)v5 >> 1;
    while (1)
    {
      (*(void (**)(_QWORD, _WORD *, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v10, 2 * v5);
      if ((int)v5 >= 2)
        break;
      v20 = (unsigned __int8 *)v10 + v15;
      v19 = (unsigned __int8 *)v10 + v14;
      if ((v5 & 1) != 0)
        goto LABEL_17;
LABEL_18:
      if (++v11 == (_DWORD)v6)
        goto LABEL_19;
    }
    v17 = v16;
    do
    {
      v18 = *((unsigned __int8 *)v10 + v14 + 2) | (*((unsigned __int8 *)v10 + v15 + 2) << 8);
      *v10 = (*((unsigned __int8 *)v10 + v14) | (*((unsigned __int8 *)v10 + v15) << 8)) >> v12;
      v10[1] = v18 >> v12;
      v10 += 2;
      --v17;
    }
    while (v17);
    v19 = (unsigned __int8 *)v10 + v14;
    v20 = (unsigned __int8 *)v10 + v15;
    if ((v5 & 1) == 0)
      goto LABEL_18;
LABEL_17:
    *v10++ = (*v19 | (*v20 << 8)) >> v12;
    goto LABEL_18;
  }
LABEL_19:
  v23[2](v23);

}

void sub_1D5319C04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5319C58(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CUnpackedUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D5319CDC(os_signpost_id_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *exception;
  void *v20;
  void (**v21)(_QWORD);
  _BOOL8 v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t buf[8];
  int v28;
  int v29;
  _QWORD v30[5];
  int v31;

  sub_1D52EB058();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (a1 + 1 >= 2 && os_signpost_enabled(v7))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v8, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CUnpackedUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = sub_1D5319FB4;
  v30[3] = &unk_1E996F870;
  v30[4] = a1;
  v9 = MEMORY[0x1D82721B4](v30);
  if (*(_DWORD *)(a1 + 188) >= 0x11u)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v11 = *(unsigned int *)(a1 + 44);
  v10 = *(_DWORD *)(a1 + 48);
  v25 = *a3;
  v12 = a3[2];
  v24 = a3[1];
  v13 = a3[3];
  if ((*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1) < 2 * (int)v11 * v10)
  {
    v20 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v20, "RawCameraException");
    __cxa_throw(v20, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v21 = (void (**)(_QWORD))v9;
  v14 = sub_1D530CBD0(a1);
  if ((_DWORD)v13)
  {
    v15 = 0;
    v16 = 16 - *(_DWORD *)(a1 + 188);
    v23 = v14 != 1;
    v22 = v14 == 1;
    do
    {
      v17 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)buf = 2 * (v25 + (v15 + v24) * v11);
      v31 = *(_DWORD *)(a1 + 40);
      v28 = *sub_1D52E25A0(&v31, buf);
      sub_1D52859B8(&v29, (unsigned int *)&v28);
      (*(void (**)(uint64_t, uint64_t, _QWORD, int *))(*(_QWORD *)v17 + 24))(v17, a2, (2 * v12), &v29);
      if ((_DWORD)v12)
      {
        v18 = 0;
        do
        {
          *(_WORD *)(a2 + v18) = (*(unsigned __int8 *)(a2 + v23 + v18) | (*(unsigned __int8 *)(a2 + v22 + v18) << 8)) >> v16;
          v18 += 2;
        }
        while (2 * v12 != v18);
      }
      ++v15;
      a2 += a4;
    }
    while (v15 != v13);
  }
  v21[2](v21);

}

void sub_1D5319F64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5319FB4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CUnpackedUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D531A038(_QWORD *a1)
{
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D531A05C(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void (**v4)(_QWORD);
  _WORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  void *exception;
  _QWORD v13[5];
  uint8_t buf[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CUnpackedLE16Shift4Unpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1D531A260;
  v13[3] = &unk_1E996F870;
  v13[4] = a1;
  v4 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v13);
  v5 = (_WORD *)sub_1D530B618(a1);
  v6 = *(unsigned int *)(a1 + 44);
  v7 = *(_DWORD *)(a1 + 48);
  if ((*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1) < 2 * (int)v6 * v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v7)
  {
    v8 = 0;
    if (v6 >> 1 <= 1)
      v9 = 1;
    else
      v9 = v6 >> 1;
    do
    {
      (*(void (**)(_QWORD, _WORD *, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5, 2 * v6);
      v10 = v9;
      if (v6 >= 2)
      {
        do
        {
          v11 = (unsigned __int16)v5[1] >> 4;
          *v5 >>= 4;
          v5[1] = v11;
          v5 += 2;
          --v10;
        }
        while (v10);
      }
      if ((v6 & 1) != 0)
        *v5++ >>= 4;
      ++v8;
    }
    while (v8 != v7);
  }
  v4[2](v4);

}

void sub_1D531A220(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D531A260(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CUnpackedLE16Shift4Unpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

uint64_t sub_1D531A2E4(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 16) + 32 * *(_DWORD *)(a1 + 20));
}

uint64_t sub_1D531A2F0(uint64_t a1, int a2)
{
  int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  void *exception;

  v2 = *(_DWORD *)(a1 + 16);
  if ((v2 + a2) < 0x21)
  {
    v7 = 0;
    if (!a2)
      return v7;
    goto LABEL_8;
  }
  v3 = 0;
  v5 = *(_DWORD *)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 28);
  v6 = *(_DWORD *)(a1 + 20) + 1;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = v6;
  if (4 * v6 < v5)
    v3 = bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v6));
  *(_DWORD *)(a1 + 28) = v3;
  if (4 * v6 > v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v7 = v4 & ~(-1 << -(char)v2);
  a2 -= 32 - v2;
  v2 = 0;
  if (a2)
  {
LABEL_8:
    v8 = v2 + a2;
    v7 = (*(_DWORD *)(a1 + 28) >> -(char)v8) & ~(-1 << a2) | ((_DWORD)v7 << a2);
    *(_DWORD *)(a1 + 16) = v8;
    if (v8 == 32)
    {
      v9 = 0;
      v10 = *(_DWORD *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 20) + 1;
      *(_DWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 20) = v11;
      if (v10 > 4 * v11)
        v9 = bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v11));
      *(_DWORD *)(a1 + 28) = v9;
    }
  }
  return v7;
}

void sub_1D531A40C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D531A420(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v1 = *(_DWORD *)(a1 + 28);
  v2 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v2 + 1;
  if (v2 == 31)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a1 + 24);
    v5 = *(_DWORD *)(a1 + 20) + 1;
    *(_DWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 20) = v5;
    if (v4 > 4 * v5)
      v3 = bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v5));
    *(_DWORD *)(a1 + 28) = v3;
  }
  return (v1 >> ~(_BYTE)v2) & 1;
}

uint64_t sub_1D531A470(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v2 = result;
  LODWORD(result) = 0;
  v3 = *(_DWORD *)(v2 + 28);
  v4 = *(_DWORD *)(v2 + 16);
  do
  {
    while (1)
    {
      v5 = (0x80000000 >> v4) & v3;
      result = v5 ? result : (result + 1);
      if (v4 != 31)
        break;
      v3 = 0;
      v6 = *(_DWORD *)(v2 + 24);
      v7 = *(_DWORD *)(v2 + 20) + 1;
      *(_DWORD *)(v2 + 16) = 0;
      *(_DWORD *)(v2 + 20) = v7;
      v8 = 4 * v7;
      if (4 * v7 < v6)
        v3 = bswap32(*(_DWORD *)(*(_QWORD *)(v2 + 32) + 4 * v7));
      v4 = 0;
      *(_DWORD *)(v2 + 28) = v3;
      if (v8 > v6 || v5 != 0 || result >= a2)
        return result;
    }
    ++v4;
  }
  while (!v5 && result < a2);
  *(_DWORD *)(v2 + 16) = v4;
  return result;
}

BOOL sub_1D531A4F8(_DWORD *a1, int a2)
{
  return a1[6] >= (a2 + a1[4] + 32 * a1[5] + 7) >> 3;
}

void sub_1D531A518(int *a1)
{
  NSObject *v2;
  NSObject *v3;
  void (**v4)(_QWORD);
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  void *exception;
  _QWORD v24[5];
  uint8_t buf[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((unint64_t)a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)a1, "CUnpackedLE16Shift4Remove0Unpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = sub_1D531A788;
  v24[3] = &unk_1E996F870;
  v24[4] = a1;
  v4 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v24);
  sub_1D531A05C((os_signpost_id_t)a1);
  v5 = a1[11];
  if (v5 <= 1 || (v6 = a1[12], v6 <= 1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v7 = a1[47];
  if ((v7 & 0xC000) == 0x8000)
    v8 = 3;
  else
    v8 = 2;
  if ((v7 & 0xC00) == 0x800)
    v9 = 3;
  else
    v9 = v8;
  if ((v7 & 0x3000) == 0x2000)
    v10 = 3;
  else
    v10 = v8;
  v11 = v6 - 2;
  if (v10 < v6 - 2)
  {
    v12 = v5 - 2;
    v13 = -2 * (int)v5;
    do
    {
      v14 = sub_1D530B618((uint64_t)a1);
      if (v9 < v12)
      {
        v15 = (_WORD *)(v14 + 2 * v10 * v5 + 2 * v9);
        v16 = v9;
        do
        {
          if (!*v15)
          {
            v17 = (unsigned __int16)v15[2 * v5];
            v18 = (unsigned __int16)*(v15 - 2);
            v19 = (unsigned __int16)v15[2];
            if (v15[v13])
              v20 = v17 == 0;
            else
              v20 = 1;
            if (!v20 && v19 != 0 && v18 != 0)
              *v15 = (unsigned __int16)(v15[v13] + v17 + v18 + v19 + 2) >> 2;
          }
          v16 += 2;
          v15 += 2;
        }
        while (v16 < v12);
      }
      v10 += 2;
    }
    while (v10 < v11);
  }
  v4[2](v4);

}

void sub_1D531A744(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D531A788(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CUnpackedLE16Shift4Remove0Unpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D531A80C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  void (**v4)(_QWORD);
  _WORD *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;
  char v10;
  unsigned int v11;
  int v12;
  uint8_t *v13;
  int v14;
  uint8_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD v19[5];
  int v20[128];
  uint8_t buf[6720];
  uint64_t v22;

  v1 = MEMORY[0x1E0C80A78](a1);
  v22 = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CSonyUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = sub_1D531AA80;
  v19[3] = &unk_1E996F870;
  v19[4] = v1;
  v4 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v19);
  v18 = 0;
  v5 = (_WORD *)sub_1D530B618(v1);
  v6 = *(_DWORD *)(v1 + 44);
  v7 = *(_DWORD *)(v1 + 48);
  if (v6 >= 0xD20)
    v8 = 3360;
  else
    v8 = v6;
  sub_1D531AB04(v1, (int *)&v18 + 1, v20, (int *)&v18);
  sub_1D531AD30(v20, &v18, SHIDWORD(v18));
  if (v7)
  {
    v9 = 0;
    v10 = v18;
    v11 = v8 >> 1;
    do
    {
      (*(void (**)(_QWORD, uint8_t *, _QWORD))(**(_QWORD **)(v1 + 24) + 32))(*(_QWORD *)(v1 + 24), buf, (2 * v8));
      if (v8 >= 2)
      {
        v12 = 0;
        v13 = buf;
        do
        {
          v14 = v20[(v10 + (_BYTE)v12 + 65) & 0x7F] ^ v20[(v10 + (_BYTE)v12 + 1) & 0x7F];
          *(_DWORD *)v13 ^= v14;
          v13 += 4;
          v20[(v10 + (_BYTE)v12++) & 0x7F] = v14;
        }
        while (v11 != v12);
      }
      if ((_DWORD)v8)
      {
        v15 = buf;
        v16 = v8;
        do
        {
          v17 = *(unsigned __int16 *)v15;
          v15 += 2;
          *v5++ = bswap32(v17) >> 16;
          --v16;
        }
        while (v16);
      }
      v10 += v11;
      ++v9;
    }
    while (v9 != v7);
  }
  v4[2](v4);

}

void sub_1D531AA38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D531AA80(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSonyUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

uint64_t sub_1D531AB04(uint64_t a1, int *a2, int *a3, int *a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v16;
  uint64_t v17[3];
  uint64_t v18[3];
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = (uint64_t *)(a1 + 24);
  sub_1D52B1C58(v18, (uint64_t *)(a1 + 24));
  sub_1D5293C20(v17, v7, 2);
  v16 = 200896;
  v8 = *v7;
  sub_1D528594C(&v19, &v16);
  (*(void (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)v8 + 40))(v8, &v19, 0);
  v16 = (int)(4 * sub_1D52846FC(*v7) - 1);
  v9 = *v7;
  sub_1D528594C(&v19, &v16);
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v9 + 40))(v9, &v19, 1);
  *a2 = sub_1D52847F8(*v7);
  v16 = 164600;
  v10 = *v7;
  sub_1D528594C(&v19, &v16);
  (*(void (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)v10 + 40))(v10, &v19, 0);
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)*v7 + 32))(*v7, &v19, 40);
  sub_1D531AD30(a3, a4, *a2);
  v11 = 0;
  v12 = *a4;
  *a4 += 10;
  do
  {
    v13 = a3[((_BYTE)v12 + (_BYTE)v11 + 65) & 0x7F] ^ a3[((_BYTE)v12 + (_BYTE)v11 + 1) & 0x7F];
    v14 = v13 ^ *((_DWORD *)&v19 + v11);
    a3[((_BYTE)v12 + (_BYTE)v11) & 0x7F] = v13;
    *((_DWORD *)&v19 + v11++) = v14;
  }
  while ((_DWORD)v11 != 10);
  *a2 = *(_DWORD *)((char *)&v20 + 6);
  sub_1D5293C98(v17);
  return sub_1D5285200(v18);
}

void sub_1D531ACE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_1D5293C98((uint64_t *)va);
  sub_1D5285200((uint64_t *)va1);
  _Unwind_Resume(a1);
}

int *sub_1D531AD30(int *result, _DWORD *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  uint64_t i;

  v3 = 0;
  v4 = 48828125 * a3 + 1;
  v5 = 48828125 * v4 + 1;
  v6 = 48828125 * v5 + 1;
  *result = v4;
  result[1] = v5;
  v7 = ((97656250 * v6) | ((v6 ^ v4) >> 31)) + 2;
  result[2] = v6;
  result[3] = v7;
  do
  {
    v8 = v6 ^ v4;
    v4 = result[v3 + 1];
    v6 = v7;
    HIDWORD(v9) = v8;
    LODWORD(v9) = v7 ^ v4;
    v7 = v9 >> 31;
    result[v3 + 4] = v7;
    ++v3;
  }
  while (v3 != 123);
  for (i = 0; i != 127; ++i)
    result[i] = bswap32(result[i]);
  *a2 = 127;
  return result;
}

uint64_t sub_1D531ADD4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v9[5];
  uint64_t v10;
  std::__shared_weak_count *v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v10);
  v2 = v10;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1D531B214;
  v9[3] = &unk_1E9978F98;
  v9[4] = a1;
  v4 = sub_1D531AEB8(v2, CFSTR("lensCorrectionFilter"), v3, v9);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D531AEA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_1D531AEB8(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t **v9;
  void **v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t (**v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  void (**v28)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void (*v29)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void *exception;
  _QWORD v32[4];
  id v33;
  std::string __p;
  uint64_t (*v35[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::string *p_p;
  std::__shared_weak_count *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  sub_1D531B8B8(v7, a3, &__p);
  v9 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_1D531BA04;
    v32[3] = &unk_1E9979B90;
    v13 = (uint64_t (**)(_QWORD))v8;
    v33 = v13;
    sub_1D53BC1FC(a1, v7, v32, &p_p);
    v18 = (__int128 *)p_p;
    if (p_p)
    {
      sub_1D53BE790((uint64_t)p_p, v14, v15, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v12 = objc_msgSend_longLongValue(v19, v20, v21, v22, v23);

    }
    else
    {
      v12 = 0;
    }
    v24 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    if (!v18)
      v12 = v13[2](v13);
    p_p = &__p;
    v27 = sub_1D531BAD4(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v28 = (void (**)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD))(v27 + 7);
    v35[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1D531BCC0;
    v35[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v12;
    if (v35 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v27 + 7))
    {
      v29 = *v28;
      if (*v28)
      {
        p_p = 0;
        v37 = 0;
        v29(2, v28, &p_p, 0, 0);
        v35[0](2, v35, v28, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))p_p)(2, &p_p, v35, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        *((_DWORD *)v27 + 16) = v12;
        v27[7] = (uint64_t)sub_1D531BCC0;
        v35[0] = 0;
      }
    }
    sub_1D531BC8C(v35);
  }
  else
  {
    v11 = (unsigned int *)sub_1D531BA38((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v12;
}

void sub_1D531B188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a25);
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D531B214(uint64_t a1)
{
  return sub_1D533D380(*(_QWORD *)(a1 + 32));
}

void sub_1D531B21C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[5];
  uint64_t v10;
  std::__shared_weak_count *v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v10);
  v4 = v10;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1D531B804;
  v9[3] = &unk_1E9978FB8;
  v9[4] = a1;
  sub_1D531B308(v4, CFSTR("lensCorrectionParameters"), v5, v9, a2);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1D531B2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D531B308(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  id v9;
  uint64_t **v10;
  void **v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t *v46;
  void *v47;
  void *exception;
  void (**v49)(_QWORD *__return_ptr);
  id v50;
  void *v51;
  __n128 __p;
  unint64_t v53;
  _QWORD v54[4];
  id v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  void *v58;
  _BYTE *v59;
  char v60;
  std::string v61;

  v9 = a2;
  v50 = a4;
  v51 = v9;
  sub_1D531B8B8(v9, a3, &v61);
  v10 = (uint64_t **)(a1 + 24);
  v11 = sub_1D5294144(a1 + 24, (void **)&v61.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v11)
  {
    LOBYTE(v58) = 0;
    v60 = 0;
    v54[0] = MEMORY[0x1E0C809B0];
    v54[1] = 3221225472;
    v54[2] = sub_1D531BDC4;
    v54[3] = &unk_1E9979BC8;
    v49 = (void (**)(_QWORD *__return_ptr))v50;
    v55 = v49;
    sub_1D53BC1FC(a1, v9, v54, &v56);
    if (v56)
    {
      sub_1D53BE790(v56, v13, v14, v15, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v22 = 0;
      __p = 0uLL;
      v53 = 0;
      while (v22 < objc_msgSend_count(v17, v18, v19, v20, v21))
      {
        objc_msgSend_objectAtIndexedSubscript_(v17, v23, v22, v24, v25);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v47 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v47, "RawCameraException");
          __cxa_throw(v47, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        objc_msgSend_doubleValue(v26, v27, v28, v29, v30);
        v32 = v31;
        v33 = __p.n128_u64[1];
        if (__p.n128_u64[1] >= v53)
        {
          v35 = (void *)__p.n128_u64[0];
          v36 = (uint64_t)(__p.n128_u64[1] - __p.n128_u64[0]) >> 3;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 61)
            sub_1D5282B8C();
          v38 = v53 - __p.n128_u64[0];
          if ((uint64_t)(v53 - __p.n128_u64[0]) >> 2 > v37)
            v37 = v38 >> 2;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
            v39 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          if (v39)
          {
            v40 = (char *)sub_1D5282D28((uint64_t)&v53, v39);
            v33 = __p.n128_u64[1];
            v35 = (void *)__p.n128_u64[0];
          }
          else
          {
            v40 = 0;
          }
          v41 = &v40[8 * v36];
          *(_QWORD *)v41 = v32;
          v34 = (unint64_t)(v41 + 8);
          while ((void *)v33 != v35)
          {
            v42 = *(_QWORD *)(v33 - 8);
            v33 -= 8;
            *((_QWORD *)v41 - 1) = v42;
            v41 -= 8;
          }
          __p.n128_u64[0] = (unint64_t)v41;
          __p.n128_u64[1] = v34;
          v53 = (unint64_t)&v40[8 * v39];
          if (v35)
            operator delete(v35);
        }
        else
        {
          *(_QWORD *)__p.n128_u64[1] = v31;
          v34 = v33 + 8;
        }
        __p.n128_u64[1] = v34;

        ++v22;
      }
      sub_1D531BE34((uint64_t)&v58, (uint64_t)&__p);
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }

    }
    v43 = v57;
    if (v57)
    {
      p_shared_owners = (unint64_t *)&v57->__shared_owners_;
      do
        v45 = __ldaxr(p_shared_owners);
      while (__stlxr(v45 - 1, p_shared_owners));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }

    if (!v60)
    {
      ((void (**)(__n128 *__return_ptr))v49)[2](&__p);
      sub_1D52C3D50((uint64_t)&v58, &__p);
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }
      if (!v60)
        goto LABEL_48;
    }
    __p.n128_u64[0] = (unint64_t)&v61;
    v46 = sub_1D531BAD4(v10, (void **)&v61.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&__p);
    sub_1D531BEA8((uint64_t)(v46 + 7), (uint64_t)&v58);
    if (!v60)
LABEL_48:
      sub_1D5287C98();
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_1D5282C70(a5, v58, (uint64_t)v59, (v59 - (_BYTE *)v58) >> 3);
    if (v60 && v58)
    {
      v59 = v58;
      operator delete(v58);
    }
  }
  else
  {
    v12 = (const void **)sub_1D531BFE0((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))v11 + 7);
    if (!v12)
      sub_1D531BA80();
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_1D5282C70(a5, *v12, (uint64_t)v12[1], ((_BYTE *)v12[1] - (_BYTE *)*v12) >> 3);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);

}

void sub_1D531B710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a21);
  if (a26 && __p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  if (*(char *)(v28 - 105) < 0)
    operator delete(*(void **)(v28 - 128));

  _Unwind_Resume(a1);
}

void sub_1D531B804(uint64_t a1@<X0>, char **a2@<X8>)
{
  sub_1D533D67C(*(_QWORD *)(a1 + 32), a2);
}

uint64_t sub_1D531B80C(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1E997FCA8;
  v3 = (void **)(a1 + 400);
  sub_1D5293CCC(&v3);
  return sub_1D5294858(a1);
}

uint64_t sub_1D531B858(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_1E997FCA8;
  v4 = (void **)(a1 + 400);
  sub_1D5293CCC(&v4);
  v2 = sub_1D5294858(a1);
  return MEMORY[0x1D8271ADC](v2, 0x10A1C4009B45E12);
}

void sub_1D531B8B8(void *a1@<X1>, int a2@<W2>, std::string *a3@<X8>)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  std::string __p;
  std::string v17;
  std::string v18;

  v5 = objc_retainAutorelease(a1);
  v10 = (char *)objc_msgSend_UTF8String(v5, v6, v7, v8, v9);
  sub_1D52850A0(&v17, v10);
  v11 = std::string::append(&v17, "_", 1uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v15 = std::string::append(&v18, (const std::string::value_type *)p_p, size);
  *a3 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);

}

void sub_1D531B9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);

  _Unwind_Resume(a1);
}

uint64_t sub_1D531BA04(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0CB37E8];
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return objc_msgSend_numberWithUnsignedInt_(v1, v3, v2, v4, v5);
}

uint64_t (**sub_1D531BA38(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_1E9979BB0, &unk_1D544A5C0);
    else
      return 0;
  }
  return result;
}

void sub_1D531BA80()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  exception->__vftable = 0;
  v1 = sub_1D531BAAC(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E78], (void (*)(void *))sub_1D531BAD0);
}

std::bad_cast *sub_1D531BAAC(std::bad_cast *a1)
{
  std::bad_cast *result;

  result = std::bad_cast::bad_cast(a1);
  result->__vftable = (std::bad_cast_vtbl *)(MEMORY[0x1E0DE5010] + 16);
  return result;
}

uint64_t *sub_1D531BAD4(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_1D52B3CFC((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_1D531BB7C((uint64_t)a1, a4, (uint64_t)v10);
    sub_1D528EFCC(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1D531BC0C((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_1D531BB7C@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_1D5290130(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1D531BBF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D531BC0C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1D531BC0C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1D531BC50((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_1D531BC50(uint64_t a1)
{
  sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t (**sub_1D531BC8C(uint64_t (**result)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  if (*result)
    return (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*result)(0, result, 0, 0, 0);
  return result;
}

void sub_1D531BCC0(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D531BCF4()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

BOOL sub_1D531BD78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

id sub_1D531BDC4(uint64_t a1)
{
  void *v1;
  void *__p[3];

  (*(void (**)(void **__return_ptr))(*(_QWORD *)(a1 + 32) + 16))(__p);
  sub_1D531C028((double **)__p);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v1;
}

void sub_1D531BE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D531BE34(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    if (a1 != a2)
      sub_1D528FA34((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    sub_1D5282C70((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

uint64_t sub_1D531BEA8(uint64_t a1, uint64_t a2)
{
  void (*v3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  _OWORD v5[2];
  uint64_t (*v6[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v6[4] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x1E0C80C00];
  memset(v5, 0, sizeof(v5));
  sub_1D5282C70((_QWORD *)v5 + 1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)&v5[0] = sub_1D531C0EC;
  if (v5 != (_OWORD *)a1)
  {
    v3 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1;
    if (*(_QWORD *)a1)
    {
      v6[0] = 0;
      v6[1] = 0;
      v3(2, a1, v6, 0, 0);
      (*(void (**)(int))&v5[0])(2);
      ((uint64_t (**)(uint64_t, _QWORD, _OWORD *, _QWORD, _QWORD))v6)[0](2, v6, v5, 0, 0);
      sub_1D531BC8C(v6);
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)((char *)v5 + 8);
      *(_QWORD *)(a1 + 24) = *((_QWORD *)&v5[1] + 1);
      memset((char *)v5 + 8, 0, 24);
      *(_QWORD *)a1 = sub_1D531C0EC;
      *(_QWORD *)&v5[0] = 0;
    }
  }
  sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v5);
  return a1;
}

void sub_1D531BFD4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1D5281424(a1);
}

uint64_t (**sub_1D531BFE0(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_1E9979BE8, &unk_1D544A5C8);
    else
      return 0;
  }
  return result;
}

id sub_1D531C028(double **a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  double *v7;
  double *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  sub_1D52B261C(a1[1] - *a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *a1;
  v8 = a1[1];
  if (*a1 != v8)
  {
    do
    {
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v2, v3, v4, v5, *v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v6, v10, (uint64_t)v9, v11, v12);

      ++v7;
    }
    while (v7 != v8);
  }
  objc_msgSend_arrayWithArray_(MEMORY[0x1E0C99D20], v2, (uint64_t)v6, v4, v5);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

void sub_1D531C0CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D531C0EC(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D531C124()
{
  _QWORD *v0;
  void *v1;
  uint64_t result;

  v1 = (void *)v0[1];
  if (v1)
  {
    v0[2] = v1;
    operator delete(v1);
  }
  result = 0;
  *v0 = 0;
  return result;
}

void sub_1D531C1E4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *__p[2];
  char v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *v9;
  int v10;

  v9 = &unk_1E997A7E8;
  v10 = 36;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v7);
  v1 = v7;
  sub_1D52850A0(__p, "CIFF:CanonColorInfo1");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v1 + 600))(v1, __p, &v9, 3);
  if (v6 < 0)
    operator delete(__p[0]);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1D531C2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1D531C2D8()
{
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D531C2EC(uint64_t a1, uint64_t a2, void **a3, _DWORD *a4)
{
  _BOOL4 v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p;
  _BYTE *v13;
  uint64_t v14;

  __p = 0;
  v13 = 0;
  v14 = 0;
  v6 = sub_1D52EF584(a2, a3, (char *)&__p);
  v7 = __p;
  if (v6)
  {
    v8 = *(unsigned int *)(a1 + 8);
    if (v8 < (v13 - (_BYTE *)__p) >> 2)
    {
      *a4 = *((_DWORD *)__p + v8);
      v9 = 1;
LABEL_5:
      v13 = v7;
      operator delete(v7);
      return v9;
    }
  }
  v9 = 0;
  v10 = 0;
  if (__p)
    goto LABEL_5;
  return v10;
}

void sub_1D531C37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D531C398(uint64_t a1, uint64_t a2, void **a3, unsigned int a4, uint64_t *a5)
{
  unsigned int v6;
  int v7;
  int v8;
  const float *v9;
  int32x2_t v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t v16;
  __int128 v17;
  uint64_t v18;

  v6 = a4;
  if (a4 == 3)
    a4 = 4;
  v7 = sub_1D531C458(a1, a2, a3, a4, a5);
  if (v6 == 3)
  {
    if (v7)
    {
      v8 = *(_DWORD *)(*a5 + 8);
      v9 = (const float *)(*a5 + 12);
      v16 = *(int32x2_t *)*a5;
      v10 = (int32x2_t)vld1_dup_f32(v9);
      sub_1D52854D0(&v17, 3uLL);
      v11 = (void *)*a5;
      v12 = v17;
      v13 = v17;
      *(int32x2_t *)v17 = vrev64_s32(vmul_s32(v10, v16));
      *(_DWORD *)(v13 + 8) = v8 * v16.i32[0];
      *(_OWORD *)a5 = v12;
      v14 = a5[2];
      a5[2] = v18;
      *(_QWORD *)&v17 = v11;
      v18 = v14;
      if (v11)
      {
        *((_QWORD *)&v17 + 1) = v11;
        operator delete(v11);
      }
    }
  }
  return 1;
}

uint64_t sub_1D531C458(uint64_t a1, uint64_t a2, void **a3, unsigned int a4, uint64_t *a5)
{
  _BOOL4 v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  char *v15;
  uint64_t v16;

  __p = 0;
  v15 = 0;
  v16 = 0;
  v8 = sub_1D52EF584(a2, a3, (char *)&__p);
  v9 = (char *)__p;
  if (!v8 || *(_DWORD *)(a1 + 8) + a4 > (unint64_t)((v15 - (_BYTE *)__p) >> 2))
  {
    v10 = 0;
    goto LABEL_4;
  }
  sub_1D531C548((uint64_t)a5, a4);
  v9 = (char *)__p;
  if (!a4)
  {
    v10 = 1;
LABEL_4:
    if (!v9)
      return v10;
    goto LABEL_10;
  }
  v11 = 0;
  v12 = *a5;
  do
  {
    *(_DWORD *)(v12 + 4 * v11) = *(_DWORD *)&v9[4 * (v11 + *(_DWORD *)(a1 + 8))];
    ++v11;
  }
  while (a4 != v11);
  v10 = 1;
LABEL_10:
  v15 = v9;
  operator delete(v9);
  return v10;
}

void sub_1D531C52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D531C548(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_1D531C578((char **)a1, a2 - v2);
  }
}

void sub_1D531C578(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      sub_1D5282B8C();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1D5282BA0(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t sub_1D531C680(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1104))(a1);
}

double sub_1D531C68C(uint64_t a1)
{
  if (sub_1D53505C0(a1))
    return sub_1D5365F0C(a1);
  else
    return sub_1D536C2E0();
}

double sub_1D531C6C0@<D0>(uint64_t a1@<X0>, double **a2@<X8>)
{
  double result;
  void *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  double *v11;
  void *exception;
  void *v13;
  std::__shared_weak_count *v14;
  char v15;
  void *__p;
  void *v17;
  uint64_t v18;
  void *v19;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if ((sub_1D53506A0(a1) & 1) != 0)
  {
    sub_1D53506CC(a1, a2);
    return result;
  }
  v19 = &unk_1E997C018;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v13, a1);
  v5 = v13;
  sub_1D52850A0(&__p, "CIFF:CanonShotInfo");
  v6 = sub_1D5291C1C((uint64_t)v5, (uint64_t)&__p, (uint64_t)&v19);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v6)
        goto LABEL_11;
LABEL_16:
      sub_1D528EB68(a2, 3uLL);
      v11 = *a2;
      result = 1.78;
      *(_OWORD *)v11 = xmmword_1D544A600;
      v11[2] = 1.37;
      return result;
    }
  }
  if (!v6)
    goto LABEL_16;
LABEL_11:
  __p = 0;
  v17 = 0;
  v18 = 0;
  sub_1D531CB50((char *)&__p, qword_1D544A610, &qword_1D544A610[18], 0x12uLL);
  sub_1D52850A0(&v13, "CIFF:CanonShotInfo");
  v10 = (*(uint64_t (**)(uint64_t, void **, void **))(*(_QWORD *)a1 + 2968))(a1, &v13, &__p);
  if (v15 < 0)
    operator delete(v13);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 2960))(a1, v10);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  return result;
}

void sub_1D531C8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D531C920(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6;
  int v7;

  v7 = 0;
  v6 = &unk_1E997A7E8;
  sub_1D52850A0(__p, "CIFF:CanonColorInfo1");
  (*(void (**)(uint64_t, uint64_t, void **, void **))(*(_QWORD *)a1 + 2976))(a1, a2, __p, &v6);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1D531C9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D531C9C4()
{
  JUMPOUT(0x1D8271ADCLL);
}

BOOL sub_1D531C9D8(uint64_t a1, uint64_t a2, void **a3, _DWORD *a4)
{
  _BOOL4 v5;
  _DWORD *v6;
  _BOOL8 v7;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  v5 = sub_1D52EF584(a2, a3, (char *)&v9);
  v6 = v9;
  v7 = v10 != v9 && v5;
  if (v7)
  {
    *a4 = *v9;
  }
  else if (!v9)
  {
    return 0;
  }
  v10 = v6;
  operator delete(v6);
  return v7;
}

void sub_1D531CA54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D531CA70(uint64_t a1, uint64_t a2, void **a3, unsigned int a4, uint64_t *a5)
{
  _BOOL4 v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p;
  char *v14;
  uint64_t v15;

  __p = 0;
  v14 = 0;
  v15 = 0;
  v7 = sub_1D52EF584(a2, a3, (char *)&__p);
  v8 = (char *)__p;
  if (!v7 || a4 > (unint64_t)((v14 - (_BYTE *)__p) >> 2))
  {
    v9 = 0;
    goto LABEL_4;
  }
  sub_1D531C548((uint64_t)a5, a4);
  v8 = (char *)__p;
  if (!a4)
  {
    v9 = 1;
LABEL_4:
    if (!v8)
      return v9;
    goto LABEL_10;
  }
  v10 = 0;
  v11 = *a5;
  do
  {
    *(_DWORD *)(v11 + v10) = *(_DWORD *)&v8[v10];
    v10 += 4;
  }
  while (4 * a4 != v10);
  v9 = 1;
LABEL_10:
  v14 = v8;
  operator delete(v8);
  return v9;
}

void sub_1D531CB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_1D531CB50(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _DWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D5282B4C(result, a4);
    v7 = (_DWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1D531CBA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D531CBC0(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  void *__p[2];
  char v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  sub_1D5287D44(&v6, &unk_1D544A6D4, (uint64_t)&unk_1D544A71C, 0x12uLL);
  sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE:ShotInfo");
  v2 = (*(uint64_t (**)(uint64_t, void **, void **))(*(_QWORD *)a1 + 2968))(a1, __p, &v6);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v2)
    v3 = v2;
  else
    v3 = 2;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 2960))(a1, v3);
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
}

void sub_1D531CC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D531CCB4(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6;
  int v7;

  v7 = 0;
  v6 = &unk_1E997A7E8;
  sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE:G9WhiteBalance");
  (*(void (**)(uint64_t, uint64_t, void **, void **))(*(_QWORD *)a1 + 2976))(a1, a2, __p, &v6);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1D531CD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D531CD58(_QWORD *a1)
{
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  sub_1D5359710(a1);
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 2984))(a1))
  {
    v2 = (const void *)a1[3];
    if (v2)
    {
      v3 = __dynamic_cast(v2, (const struct __class_type_info *)&unk_1E99780E0, (const struct __class_type_info *)&unk_1E9978AD0, 0);
      if (v3)
      {
        v4 = (std::__shared_weak_count *)a1[4];
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldxr(p_shared_owners);
          while (__stxr(v6 + 1, p_shared_owners));
        }
        sub_1D5319484((uint64_t)v3, 1);
        if (v4)
        {
          v7 = (unint64_t *)&v4->__shared_owners_;
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
      }
    }
  }
}

void sub_1D531CE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1D531CE28(uint64_t a1)
{
  unint64_t v2;

  if (sub_1D52997A8(a1) != 34713)
    return 0;
  v2 = sub_1D5298860(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1) == ((v2 >> 28) & 0xFFFFFFF0)
                                                                           * (((int)v2 + 9)
                                                                            / 10);
}

uint64_t sub_1D531CEA4(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2984))(a1) & 1) != 0)
    return 1;
  else
    return sub_1D52997A8(a1);
}

id sub_1D531CEE4(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  id v9;
  void *v10;

  v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, (uint64_t)CFSTR("hasWeirdCompressionMode"), v5, v6))
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2984))(a1);
    v8 = (void *)MEMORY[0x1E0C9AAA0];
    if (v7)
      v8 = (void *)MEMORY[0x1E0C9AAB0];
    v9 = v8;
  }
  else
  {
    sub_1D535A7C0(a1, v3);
    v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  v10 = v9;

  return v10;
}

void sub_1D531CF64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D531CF78(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  _DWORD *v24;
  char *v25;
  char *v26;
  void *exception;
  void (**v28)(_QWORD);
  _QWORD v29[5];
  uint8_t buf[11776];
  uint64_t v31;

  v1 = MEMORY[0x1E0C80A78](a1);
  v31 = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CFujiS2Unpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = sub_1D531D2D8;
  v29[3] = &unk_1E996F870;
  v29[4] = v1;
  v4 = MEMORY[0x1D82721B4](v29);
  bzero(buf, 0x2E00uLL);
  v5 = sub_1D530B618(v1);
  v6 = *(unsigned int *)(v1 + 44);
  if ((v6 - 10000) < 0xFFFFD8F4
    || (v6 & 3) != 0
    || (v7 = *(unsigned int *)(v1 + 48), (v7 - 10000) < 0xFFFFD8F4)
    || (v7 & 3) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v8 = v5;
  v28 = (void (**)(_QWORD))v4;
  v9 = v6 - 4;
  v10 = 2 * v6;
  v11 = 4;
  do
  {
    (*(void (**)(_QWORD, uint8_t *, uint64_t))(**(_QWORD **)(v1 + 24) + 32))(*(_QWORD *)(v1 + 24), buf, 4 * v7);
    v12 = 0;
    v13 = 0;
    v14 = 2 * v7;
    v15 = v8 + 2 * v9;
    do
    {
      v16 = bswap32(*(unsigned __int16 *)&buf[v12]);
      v17 = bswap32(*(unsigned __int16 *)&buf[v12 + 2]);
      v18 = bswap32(*(unsigned __int16 *)&buf[v12 + 4]);
      v19 = bswap32(*(unsigned __int16 *)&buf[v12 + 6]);
      v20 = bswap32(*(unsigned __int16 *)&buf[v14]);
      v21 = bswap32(*(unsigned __int16 *)&buf[v14 + 2]);
      v22 = bswap32(*(unsigned __int16 *)&buf[v14 + 4]) >> 16;
      v23 = bswap32(*(unsigned __int16 *)&buf[v14 + 6]);
      *(_WORD *)v15 = 0;
      *(_DWORD *)(v15 + 2) = HIWORD(v20);
      *(_WORD *)(v15 + 6) = HIWORD(v16);
      v24 = (_DWORD *)(v15 + v10);
      *v24 = HIWORD(v21);
      v24[1] = HIWORD(v17);
      v25 = (char *)v24 + v10;
      *(_WORD *)v25 = 0;
      *(_DWORD *)(v25 + 2) = (unsigned __int16)v22;
      *((_WORD *)v25 + 3) = HIWORD(v18);
      v26 = &v25[v10];
      *(_DWORD *)v26 = HIWORD(v23);
      v13 += 4;
      v14 += 8;
      *((_WORD *)v26 + 2) = HIWORD(v19);
      v12 += 8;
      v15 = (uint64_t)&v25[v10 + v10];
      *((_WORD *)v26 + 3) = 0;
    }
    while (v13 < v7);
    v11 += 4;
    v9 -= 4;
  }
  while (v11 <= v6);
  v28[2](v28);

}

void sub_1D531D274(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D531D2D8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CFujiS2Unpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D531D35C(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void (**v4)(_QWORD);
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  unint64_t v18;
  int v19;
  int64_t v20;
  unint64_t v21;
  size_t v22;
  size_t v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  void *v40;
  void *exception;
  void *v42;
  void (**v43)(_QWORD);
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  _QWORD v49[5];
  int v50;
  _QWORD v51[2];
  uint8_t buf[2];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CPentaxK10DUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v49[0] = MEMORY[0x1E0C809B0];
  v49[1] = 3221225472;
  v49[2] = sub_1D531DB40;
  v49[3] = &unk_1E996F870;
  v49[4] = a1;
  v4 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v49);
  v51[0] = 0;
  v51[1] = 0;
  v5 = (unsigned __int8 *)sub_1D530B618(a1);
  v6 = *(unsigned __int8 **)(a1 + 192);
  if (*(_QWORD *)(a1 + 200) - (_QWORD)v6 <= 0x1DuLL || !sub_1D53126BC(v6, (uint64_t)buf, 2))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D5285A24(&v48, (unsigned int *)(a1 + 44));
  sub_1D5285A24(&v47, (unsigned int *)(a1 + 48));
  v50 = (*(uint64_t (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1);
  sub_1D5282F74((int *)&v44, &v50);
  sub_1D52859B8(&v46, (unsigned int *)&v44);
  LODWORD(v44) = v48;
  v7 = *sub_1D52B42B4(&v44, &v47);
  v44 = 2;
  sub_1D528304C(&v45, &v44);
  v50 = v7;
  v8 = sub_1D52B42B4(&v50, &v45);
  if (*v8 < v46 || (v48 & 1) != 0)
  {
    v42 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v42, "RawCameraException");
    __cxa_throw(v42, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v10 = *(unsigned int *)(a1 + 44);
  v9 = *(unsigned int *)(a1 + 48);
  v11 = (*(uint64_t (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1);
  v12 = &v5[2 * (v9 * v10)];
  v13 = &v12[-v11];
  (*(void (**)(_QWORD, unsigned __int8 *, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v13, v11);
  v14 = v9;
  if ((_DWORD)v9)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = (4 * v10);
    v19 = 32;
    v43 = v4;
    do
    {
      v20 = v12 - v13;
      v21 = v12 - v13 + ((39 - v19) >> 3);
      if (8 * v21 < 2 * (unint64_t)((v14 - v15) * v10))
      {
        v40 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v40, "RawCameraException");
        __cxa_throw(v40, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      if (!v17)
      {
        if (v13 - v5 < v10 || v21 < v18)
        {
          if (v12 == v13)
          {
            v17 = 0;
            v13 = v12;
          }
          else
          {
            v22 = v18 * (unint64_t)(v14 - v15) + 4;
            v17 = (unsigned __int8 *)operator new[]();
            bzero(v17, v22);
            if (v22 >= v20 + 4)
              v23 = v20 + 4;
            else
              v23 = v22;
            memmove(v17, v13 - 4, v23);
            v13 = v17 + 4;
            v12 = &v17[v22 + 4];
            v18 = (4 * v10);
            v14 = v9;
          }
        }
        else
        {
          v17 = 0;
        }
      }
      if (v19 >= 16)
      {
        v16 = (v16 << 16) | (*v13 << 8) | v13[1];
        v13 += 2;
        v19 -= 16;
      }
      v24 = *(unsigned __int16 *)&buf[2 * ((v16 << v19) >> 23)];
      v25 = ((v24 >> 10) & 0x1F) + v19;
      if (v24 > 0x8000)
      {
        v27 = (char)v24;
      }
      else
      {
        if ((v24 & 0x8000) != 0)
        {
          v24 = *(unsigned __int16 *)&buf[2 * (((v16 << v19) >> 16) & 0x3FF)];
          v25 += (v24 >> 10) & 0x1F;
        }
        v26 = v24 & 0x1F;
        if ((v24 & 0x1F) != 0)
        {
          if (v25 >= 16)
          {
            v16 = (v16 << 16) | (*v13 << 8) | v13[1];
            v13 += 2;
            v25 -= 16;
          }
          v27 = ((v16 << v25) >> -(char)v26) - ((((v16 << v25) >> 31) - 1) >> -(char)v26);
          v25 += v26;
        }
        else
        {
          v27 = (v24 << 8) & 0x8000;
        }
      }
      v28 = v15 & 1;
      v29 = LODWORD(v51[v28]) + v27;
      LODWORD(v51[v28]) = v29;
      if (v25 >= 16)
      {
        v16 = (v16 << 16) | (*v13 << 8) | v13[1];
        v13 += 2;
        v25 -= 16;
      }
      v30 = *(unsigned __int16 *)&buf[2 * ((v16 << v25) >> 23)];
      v19 = ((v30 >> 10) & 0x1F) + v25;
      if (v30 > 0x8000)
      {
        v30 = (char)v30;
      }
      else
      {
        if ((v30 & 0x8000) != 0)
        {
          v30 = *(unsigned __int16 *)&buf[2 * (((v16 << v25) >> 16) & 0x3FF)];
          v19 += (v30 >> 10) & 0x1F;
        }
        v31 = v30 & 0x1F;
        if ((v30 & 0x1F) != 0)
        {
          if (v19 >= 16)
          {
            v16 = (v16 << 16) | (*v13 << 8) | v13[1];
            v13 += 2;
            v19 -= 16;
          }
          v30 = ((v16 << v19) >> -(char)v31) - ((((v16 << v19) >> 31) - 1) >> -(char)v31);
          v19 += v31;
        }
        else
        {
          v30 = (v30 << 8) & 0x8000;
        }
      }
      v32 = (v28 * 2) | 1;
      v33 = *((_DWORD *)v51 + ((v28 * 2) | 1)) + v30;
      *((_DWORD *)v51 + v32) = v33;
      if (v10 >= 3)
      {
        v34 = 2;
        do
        {
          if (v19 >= 16)
          {
            v16 = (v16 << 16) | (*v13 << 8) | v13[1];
            v13 += 2;
            v19 -= 16;
          }
          v35 = *(unsigned __int16 *)&buf[2 * ((v16 << v19) >> 23)];
          v36 = ((v35 >> 10) & 0x1F) + v19;
          *(_WORD *)v5 = v29;
          if (v35 > 0x8000)
          {
            LOWORD(v35) = (char)v35;
          }
          else
          {
            if ((v35 & 0x8000) != 0)
            {
              v35 = *(unsigned __int16 *)&buf[2 * (((v16 << v19) >> 16) & 0x3FF)];
              v36 += (v35 >> 10) & 0x1F;
            }
            v37 = v35 & 0x1F;
            if ((v35 & 0x1F) != 0)
            {
              if (v36 >= 16)
              {
                v16 = (v16 << 16) | (*v13 << 8) | v13[1];
                v13 += 2;
                v36 -= 16;
              }
              v35 = ((v16 << v36) >> -(char)v37)
                  - ((((v16 << v36) >> 31) - 1) >> -(char)v37);
              v36 += v37;
            }
            else
            {
              LOWORD(v35) = ((_WORD)v35 << 8) & 0x8000;
            }
          }
          if (v36 >= 16)
          {
            v16 = (v16 << 16) | (*v13 << 8) | v13[1];
            v13 += 2;
            v36 -= 16;
          }
          v38 = *(unsigned __int16 *)&buf[2 * ((v16 << v36) >> 23)];
          v19 = ((v38 >> 10) & 0x1F) + v36;
          *((_WORD *)v5 + 1) = v33;
          if (v38 > 0x8000)
          {
            LOWORD(v38) = (char)v38;
          }
          else
          {
            if ((v38 & 0x8000) != 0)
            {
              v38 = *(unsigned __int16 *)&buf[2 * (((v16 << v36) >> 16) & 0x3FF)];
              v19 += (v38 >> 10) & 0x1F;
            }
            v39 = v38 & 0x1F;
            if ((v38 & 0x1F) != 0)
            {
              if (v19 >= 16)
              {
                v16 = (v16 << 16) | (*v13 << 8) | v13[1];
                v13 += 2;
                v19 -= 16;
              }
              v38 = ((v16 << v19) >> -(char)v39)
                  - ((((v16 << v19) >> 31) - 1) >> -(char)v39);
              v19 += v39;
            }
            else
            {
              LOWORD(v38) = ((_WORD)v38 << 8) & 0x8000;
            }
          }
          LOWORD(v29) = v35 + v29;
          LOWORD(v33) = v38 + v33;
          v5 += 4;
          v34 += 2;
        }
        while (v34 < v10);
      }
      *(_WORD *)v5 = v29;
      *((_WORD *)v5 + 1) = v33;
      v5 += 4;
      ++v15;
    }
    while (v15 != v14);
    v4 = v43;
    if (v17)
      MEMORY[0x1D8271AC4](v17, 0x1000C8077774924);
  }
  v4[2](v4);

}

void sub_1D531DA84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D531DB40(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CPentaxK10DUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

_QWORD *sub_1D531DBC4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E997D900;
  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  return sub_1D5282F0C(a1);
}

void sub_1D531DC00(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E997D900;
  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D531DC50(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  __int16 v16;
  unsigned __int16 v17;
  __int16 v18;
  unsigned __int16 v19;
  __int16 v20;
  uint64_t v21;
  _DWORD *v22;
  _WORD *v23;
  BOOL v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  uint64_t v41;
  _WORD *v42;
  _WORD *v43;
  _WORD *v44;
  uint64_t v45;
  void (**v46)(_QWORD);
  _QWORD v47[5];
  uint8_t buf[3];
  _BYTE v49[17421];

  v1 = MEMORY[0x1E0C80A78](a1);
  *(_QWORD *)&v49[17405] = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CFujiS3Unpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v47[0] = MEMORY[0x1E0C809B0];
  v47[1] = 3221225472;
  v47[2] = sub_1D531DFFC;
  v47[3] = &unk_1E996F870;
  v47[4] = v1;
  v46 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v47);
  bzero(buf, 0x4400uLL);
  v4 = sub_1D530B618(v1);
  v5 = 0;
  v6 = *(unsigned int *)(v1 + 44);
  v7 = (4 * v6);
  v8 = &buf[(2 * v6)];
  v9 = v8 + 7;
  v45 = v6;
  v10 = 2 * v6;
  do
  {
    (*(void (**)(_QWORD, uint8_t *, uint64_t))(**(_QWORD **)(v1 + 24) + 32))(*(_QWORD *)(v1 + 24), buf, v7);
    v11 = 0;
    v12 = -4;
    do
    {
      v13 = v4 + v11;
      v14 = *(_WORD *)&v49[v11 - 1];
      v15 = *(_WORD *)&v49[v11 + 1];
      v16 = *(_WORD *)&v49[v11 + 3];
      v17 = *(_WORD *)&v8[v11];
      v18 = *(_WORD *)&v9[v11 - 5];
      v19 = *(_WORD *)&v9[v11 - 3];
      v20 = *(_WORD *)&v9[v11 - 1];
      *(_WORD *)v13 = buf[v11] | (buf[v11 + 1] << 8);
      *(_WORD *)(v13 + 2) = 0;
      *(_DWORD *)(v13 + 4) = v15;
      v21 = v4 + v11 + v10;
      *(_WORD *)v21 = 0;
      *(_DWORD *)(v21 + 2) = v14;
      *(_WORD *)(v21 + 6) = v16;
      v22 = (_DWORD *)(v21 + v10);
      *v22 = v17;
      v22[1] = v19;
      v23 = (_WORD *)(v21 + v10 + v10);
      *v23 = 0;
      v23[1] = v18;
      v12 += 4;
      v23[2] = 0;
      v11 += 8;
      v23[3] = v20;
    }
    while (v12 >> 2 < 0x43F);
    v4 += 2 * v7;
    v24 = v5 >= 0x5A0;
    v5 += 2;
  }
  while (!v24);
  if (*(_BYTE *)(v1 + 186))
  {
    v25 = sub_1D530B618(v1);
    v26 = 0;
    v27 = v25 - 2 * v7;
    v28 = 2 * v7;
    v29 = v27 + 2 * v45 + 4;
    v30 = v27 + 4 * v45 + 6;
    v31 = 6 * v45 - 2 * v7 + v25 + 4;
    while (1)
    {
      (*(void (**)(_QWORD, uint8_t *, uint64_t))(**(_QWORD **)(v1 + 24) + 32))(*(_QWORD *)(v1 + 24), buf, v7);
      v32 = 0;
      v33 = -4;
      while (1)
      {
        v33 += 4;
        if (v26)
          break;
LABEL_13:
        v32 += 8;
        if (v33 >> 2 >= 0x43F)
          goto LABEL_16;
      }
      v34 = *(_WORD *)&v49[v32 + 3];
      v35 = *(_WORD *)&v8[v32];
      v36 = *(_WORD *)&v8[v32 + 2];
      v37 = *(_WORD *)&v8[v32 + 4];
      v38 = *(_WORD *)&v8[v32 + 6];
      v39 = *(_WORD *)&v49[v32 + 1];
      v40 = *(_WORD *)&buf[v32 + 2];
      v41 = v27 + v32;
      *(_WORD *)(v41 + 2) = *(_WORD *)&buf[v32];
      *(_WORD *)(v41 + 6) = v39;
      *(_WORD *)(v29 + v32) = v40;
      if (v33 >> 2 <= 0x43E)
        break;
      v44 = (_WORD *)(v30 + v32);
      *(v44 - 2) = v35;
      *v44 = v37;
      *(_WORD *)(v31 + v32) = v36;
LABEL_16:
      v27 += v28;
      v29 += v28;
      v30 += v28;
      v31 += v28;
      v24 = v26 >= 0x5A0;
      v26 += 2;
      if (v24)
        goto LABEL_18;
    }
    *(_WORD *)(v29 + v32 + 4) = v34;
    v42 = (_WORD *)(v30 + v32);
    *(v42 - 2) = v35;
    *v42 = v37;
    v43 = (_WORD *)(v31 + v32);
    *v43 = v36;
    v43[2] = v38;
    goto LABEL_13;
  }
LABEL_18:
  v46[2](v46);

}

void sub_1D531DFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(void))
{
  a11[2]();

  _Unwind_Resume(a1);
}

void sub_1D531DFFC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CFujiS3Unpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

uint64_t sub_1D531E080(uint64_t result, char a2)
{
  *(_BYTE *)(result + 186) = a2;
  return result;
}

void sub_1D531E088(_QWORD *a1)
{
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

id sub_1D531E0AC(void *a1, double a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  id obj;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v7 = a1;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  obj = v6;
  v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v36, (uint64_t)v40, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v37;
    v13 = *MEMORY[0x1E0C9E1F8];
    v14 = *MEMORY[0x1E0C9E298];
    do
    {
      v15 = 0;
      v16 = v7;
      do
      {
        if (*(_QWORD *)v37 != v12)
          objc_enumerationMutation(obj);
        v17 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * v15);
        objc_msgSend_setValue_forKey_(v17, v9, (uint64_t)v16, v13, v10);
        objc_msgSend_inputKeys(v17, v18, v19, v20, v21);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = objc_msgSend_containsObject_(v22, v23, (uint64_t)CFSTR("inputScaleFactor"), v24, v25);

        if (v26)
        {
          objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v27, v28, v29, v30, a2);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setValue_forKey_(v17, v32, (uint64_t)v31, (uint64_t)CFSTR("inputScaleFactor"), v33);

        }
        objc_msgSend_valueForKey_(v17, v27, v14, v29, v30);
        v7 = (id)objc_claimAutoreleasedReturnValue();

        ++v15;
        v16 = v7;
      }
      while (v11 != v15);
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v36, (uint64_t)v40, 16);
    }
    while (v11);
  }

  return v7;
}

void sub_1D531E26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D531E2BC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v5 = a3;
  if (v5)
  {
    if (sub_1D5297F64(a1))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 296))(&v26, a1, 160);
      if (v26)
      {
        sub_1D5297C60(v5, (void *)*MEMORY[0x1E0CBCB50], 0);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        if (v6)
        {
          v7 = (void *)MEMORY[0x1E0CB37E8];
          v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
          objc_msgSend_numberWithUnsignedInt_(v7, v9, v8, v10, v11);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v6, v13, (uint64_t)v12, (uint64_t)CFSTR("JPEGInterchangeFormat"), v14);

          v15 = (void *)MEMORY[0x1E0CB37E8];
          v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
          objc_msgSend_numberWithUnsignedInt_(v15, v17, v16, v18, v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v6, v21, (uint64_t)v20, (uint64_t)CFSTR("JPEGInterchangeFormatLength"), v22);

        }
      }
      v23 = v27;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    if (sub_1D5297F6C(a1))
    {
      sub_1D531E48C(a1, v5);
    }
    else
    {
      sub_1D531E8C8(a1, v5);
      sub_1D531F0D8(a1, a2, v5);
    }
  }

}

void sub_1D531E44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D531E48C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  BOOL v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  std::__shared_weak_count *size;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  std::string::size_type v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::string __p;
  unint64_t v58;
  uint64_t v59;

  v3 = a2;
  sub_1D52E1FDC(v3, (void *)*MEMORY[0x1E0CBD068], 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(&v58, a1);
  v5 = v59 - 24;
  if (v58 != v59 && v5 > v58)
  {
    v7 = v58 + 24;
    do
    {
      v8 = *(_QWORD *)(v7 - 8);
      v9 = *(_OWORD *)(v7 - 24);
      v10 = *(_QWORD *)(v5 + 16);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)v5;
      *(_QWORD *)(v7 - 8) = v10;
      *(_OWORD *)v5 = v9;
      *(_QWORD *)(v5 + 16) = v8;
      v5 -= 24;
      v11 = v7 >= v5;
      v7 += 24;
    }
    while (!v11);
  }
  sub_1D532DB58((uint64_t *)&v58);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v4, v13, (uint64_t)v12, *MEMORY[0x1E0CBD208], v14);

  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 520))(a1);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v16, (uint64_t)CFSTR("{%d, %d}"), v17, v18, v15, HIDWORD(v15));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v4, v20, (uint64_t)v19, (uint64_t)CFSTR("fullSize"), v21);

  v22 = (void *)MEMORY[0x1E0CB3940];
  sub_1D532007C(a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    objc_msgSend_stringWithUTF8String_(v22, v23, (uint64_t)&__p, v24, v25);
  else
    objc_msgSend_stringWithUTF8String_(v22, v23, (uint64_t)__p.__r_.__value_.__l.__data_, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v4, v27, (uint64_t)v26, (uint64_t)CFSTR("kCGImageSourceRawIdentifier"), v28);

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 456))(a1);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v31, (uint64_t)CFSTR("{%d, %d}"), v32, v33, v30 + v29, (HIDWORD(v30) + HIDWORD(v29)));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v4, v35, (uint64_t)v34, (uint64_t)CFSTR("cropOrigin"), v36);

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2760))(a1);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v4, v38, (uint64_t)v37, (uint64_t)CFSTR("supportedSushiLevels"), v39);

  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&__p, a1);
  sub_1D52B51D0((uint64_t)__p.__r_.__value_.__l.__data_);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v4, v41, (uint64_t)v40, (uint64_t)CFSTR("kCGImageSourceMethodVersion"), v42);

  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v44 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v46 = sub_1D5297E3C(a1);
  sub_1D536C28C(v46);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v4, v48, (uint64_t)v47, (uint64_t)CFSTR("kCGImageSourceSushiLevel"), v49);

  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 296))(&__p, a1, 5000);
  v50 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] && !getenv("RAWCAMERA_ENABLE_RAW_IMPORT_IN_SPARK"))
  {
    (*(void (**)(std::string::size_type))(*(_QWORD *)v50 + 32))(v50);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v4, v52, (uint64_t)v51, (uint64_t)CFSTR("jpegThumbnail"), v53);

  }
  v54 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v55 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
  sub_1D5293CCC((void ***)&__p);

}

void sub_1D531E804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;

  sub_1D5282EB4((uint64_t)&__p);
  __p = &a17;
  sub_1D5293CCC((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1D531E8C8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  BOOL v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  std::__shared_weak_count *size;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  void *v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  int v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  const char *v117;
  uint64_t v118;
  void *v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  const char *v125;
  uint64_t v126;
  void *v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  const char *v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  const char *v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  const char *v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  const char *v157;
  uint64_t v158;
  void *exception;
  std::string __p;
  unint64_t v161;
  uint64_t v162;

  v3 = a2;
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (sub_1D5297E54(a1))
  {
    v4 = v3;
    objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v5, v6, v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v4, v10, (uint64_t)v9, *MEMORY[0x1E0CBD210], v11);
    (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(&v161, a1);
    if (v161 != v162)
    {
      v12 = v162 - 24;
      if (v162 - 24 > v161)
      {
        v13 = v161 + 24;
        do
        {
          v14 = *(_QWORD *)(v13 - 8);
          v15 = *(_OWORD *)(v13 - 24);
          v16 = *(_QWORD *)(v12 + 16);
          *(_OWORD *)(v13 - 24) = *(_OWORD *)v12;
          *(_QWORD *)(v13 - 8) = v16;
          *(_OWORD *)v12 = v15;
          *(_QWORD *)(v12 + 16) = v14;
          v12 -= 24;
          v17 = v13 >= v12;
          v13 += 24;
        }
        while (!v17);
      }
    }
    sub_1D532DB58((uint64_t *)&v161);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v9, v19, (uint64_t)v18, *MEMORY[0x1E0CBD208], v20);
    v21 = (void *)MEMORY[0x1E0CB3940];
    sub_1D532007C(a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      objc_msgSend_stringWithUTF8String_(v21, v22, (uint64_t)&__p, v23, v24);
    else
      objc_msgSend_stringWithUTF8String_(v21, v22, (uint64_t)__p.__r_.__value_.__l.__data_, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v9, v26, (uint64_t)v25, (uint64_t)CFSTR("kCGImageSourceRawIdentifier"), v27);

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
    v34 = v28 | 2;
    if (!v29)
      v34 = v28;
    if (v30)
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v31, v34 | 4, v32, v33);
    else
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v31, v34, v32, v33);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v9, v36, (uint64_t)v35, (uint64_t)CFSTR("kCGImageSourceVendorLensCorrectionFeatures"), v37);

    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2760))(a1);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v9, v39, (uint64_t)v38, (uint64_t)CFSTR("kCGImageSourceSupportedSushiLevels"), v40);

    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&__p, a1);
    sub_1D52B51D0((uint64_t)__p.__r_.__value_.__l.__data_);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v9, v42, (uint64_t)v41, (uint64_t)CFSTR("kCGImageSourceMethodVersion"), v43);

    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v45 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v47 = sub_1D5297E3C(a1);
    sub_1D536C28C(v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v9, v49, (uint64_t)v48, (uint64_t)CFSTR("kCGImageSourceSushiLevel"), v50);

    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) >= 8)
      objc_msgSend_setObject_forKeyedSubscript_(v9, v51, MEMORY[0x1E0C9AAA0], (uint64_t)off_1EFF32428, v52);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2480))(a1))
    {
      v53 = (void *)MEMORY[0x1E0CB37E8];
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2520))(a1);
      objc_msgSend_numberWithDouble_(v53, v54, v55, v56, v57);
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v59, (uint64_t)v58, (uint64_t)off_1EFF323D8, v60);

      v61 = (void *)MEMORY[0x1E0CB37E8];
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2528))(a1);
      objc_msgSend_numberWithDouble_(v61, v62, v63, v64, v65);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v67, (uint64_t)v66, (uint64_t)off_1EFF323E0, v68);

      v69 = (void *)MEMORY[0x1E0CB37E8];
      v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2536))(a1);
      objc_msgSend_numberWithBool_(v69, v71, v70, v72, v73);
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v75, (uint64_t)v74, (uint64_t)off_1EFF323E8, v76);

      v77 = (void *)MEMORY[0x1E0CB37E8];
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2544))(a1);
      objc_msgSend_numberWithDouble_(v77, v78, v79, v80, v81);
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v83, (uint64_t)v82, (uint64_t)off_1EFF323F0, v84);

      v85 = (void *)MEMORY[0x1E0CB37E8];
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2552))(a1);
      objc_msgSend_numberWithDouble_(v85, v86, v87, v88, v89);
      v90 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v91, (uint64_t)v90, (uint64_t)off_1EFF323F8, v92);

      v93 = (void *)MEMORY[0x1E0CB37E8];
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2560))(a1);
      objc_msgSend_numberWithDouble_(v93, v94, v95, v96, v97);
      v98 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v99, (uint64_t)v98, (uint64_t)off_1EFF32400, v100);

      v101 = (void *)MEMORY[0x1E0CB37E8];
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2568))(a1);
      objc_msgSend_numberWithDouble_(v101, v102, v103, v104, v105);
      v106 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v107, (uint64_t)v106, (uint64_t)off_1EFF32408, v108);

      v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
      v110 = (void *)MEMORY[0x1E0CB37E8];
      v111 = *(_QWORD *)a1;
      if (v109 > 8)
        v112 = (*(uint64_t (**)(uint64_t))(v111 + 2264))(a1);
      else
        v112 = (*(uint64_t (**)(uint64_t))(v111 + 2496))(a1);
      objc_msgSend_numberWithBool_(v110, v113, v112, v114, v115);
      v116 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v117, (uint64_t)v116, (uint64_t)off_1EFF323C0, v118);

      v119 = (void *)MEMORY[0x1E0CB37E8];
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2504))(a1);
      objc_msgSend_numberWithDouble_(v119, v120, v121, v122, v123);
      v124 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v125, (uint64_t)v124, (uint64_t)off_1EFF323C8, v126);

      v127 = (void *)MEMORY[0x1E0CB37E8];
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2512))(a1);
      objc_msgSend_numberWithDouble_(v127, v128, v129, v130, v131);
      v132 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v133, (uint64_t)v132, (uint64_t)off_1EFF323D0, v134);

      v135 = (void *)MEMORY[0x1E0CB37E8];
      v136 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2576))(a1);
      objc_msgSend_numberWithBool_(v135, v137, v136, v138, v139);
      v140 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v141, (uint64_t)v140, (uint64_t)off_1EFF32410, v142);

      v143 = (void *)MEMORY[0x1E0CB37E8];
      v144 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2584))(a1);
      objc_msgSend_numberWithBool_(v143, v145, v144, v146, v147);
      v148 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v149, (uint64_t)v148, (uint64_t)off_1EFF32418, v150);

      v151 = (void *)MEMORY[0x1E0CB37E8];
      v152 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2592))(a1);
      objc_msgSend_numberWithBool_(v151, v153, v152, v154, v155);
      v156 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v9, v157, (uint64_t)v156, (uint64_t)off_1EFF32420, v158);

    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v161;
    sub_1D5293CCC((void ***)&__p);

  }
}

void sub_1D531EFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  __p = &a15;
  sub_1D5293CCC((void ***)&__p);

  _Unwind_Resume(a1);
}

void sub_1D531F0D8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  double v14;
  double v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  double *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  double *v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  double *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  const char *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  double *v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  double *v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  const char *v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  double *v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  const char *v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  double *v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  const char *v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  double *v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  const char *v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  double *v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  const char *v177;
  uint64_t v178;
  void *v179;
  const char *v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  const char *v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  const char *v199;
  uint64_t v200;
  void *v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  const char *v207;
  uint64_t v208;
  void *v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  const char *v215;
  uint64_t v216;
  void *v217;
  const char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  const char *v223;
  uint64_t v224;
  void *v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  const char *v231;
  uint64_t v232;
  void *v233;
  const char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  const char *v239;
  uint64_t v240;
  void *v241;
  const char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  const char *v247;
  uint64_t v248;
  const char *v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  const char *v253;
  uint64_t v254;
  const char *v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  const char *v259;
  uint64_t v260;
  const char *v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  const char *v265;
  uint64_t v266;
  const char *v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  const char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  const char *v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  const char *v279;
  uint64_t v280;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  const char *v285;
  uint64_t v286;
  uint64_t v287;
  void *v288;
  const char *v289;
  uint64_t v290;
  const char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  double v295;
  double v296;
  void *v297;
  const char *v298;
  uint64_t v299;
  double v300;
  double v301;
  const char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  void *v306;
  const char *v307;
  uint64_t v308;
  const char *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  void *v313;
  const char *v314;
  uint64_t v315;
  const char *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  const char *v321;
  uint64_t v322;
  const char *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  void *v327;
  const char *v328;
  uint64_t v329;
  void *v330;
  const char *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  void *v335;
  const char *v336;
  uint64_t v337;
  void *v338;
  const char *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  void *v343;
  const char *v344;
  uint64_t v345;
  void *v346;
  const char *v347;
  uint64_t v348;
  void *v349;
  const char *v350;
  uint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  void *v355;
  void *exception;
  uint64_t v357;
  uint64_t v358;
  void *v359;
  void *__p;
  void *v361;
  CGRect v362;

  v5 = a3;
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (sub_1D5297E3C(a1))
  {
    sub_1D52E1FDC(v5, (void *)*MEMORY[0x1E0CBD068], 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 2744))(a1, a2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_count(v7, v8, v9, v10, v11))
      objc_msgSend_setObject_forKeyedSubscript_(v6, v12, (uint64_t)v7, (uint64_t)CFSTR("filters"), v13);

    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 720))(a1);
    v15 = v14;
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v16, v17, v18, v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v21, (uint64_t)v20, (uint64_t)CFSTR("wx"), v22);

    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v23, v24, v25, v26, v15);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v28, (uint64_t)v27, (uint64_t)CFSTR("wy"), v29);

    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 2624))(&v359, a1, a2, 1);
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v30, v31, v32, v33, *(double *)v359);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v35, (uint64_t)v34, (uint64_t)CFSTR("otrcS0"), v36);

    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v37, v38, v39, v40, *((double *)v359 + 1));
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v42, (uint64_t)v41, (uint64_t)CFSTR("otrcS1"), v43);

    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v44, v45, v46, v47, *((double *)v359 + 3));
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v49, (uint64_t)v48, (uint64_t)CFSTR("otrcS2"), v50);

    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v51, v52, v53, v54, *((double *)v359 + 5));
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v56, (uint64_t)v55, (uint64_t)CFSTR("otrcS3"), v57);

    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v58, v59, v60, v61, *((double *)v359 + 7));
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v63, (uint64_t)v62, (uint64_t)CFSTR("otrcS4"), v64);

    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v65, v66, v67, v68, *((double *)v359 + 2));
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v70, (uint64_t)v69, (uint64_t)CFSTR("otrcY1"), v71);

    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v72, v73, v74, v75, *((double *)v359 + 4));
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v77, (uint64_t)v76, (uint64_t)CFSTR("otrcY2"), v78);

    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v79, v80, v81, v82, *((double *)v359 + 6));
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v84, (uint64_t)v83, (uint64_t)CFSTR("otrcY3"), v85);

    v86 = (std::__shared_weak_count *)__p;
    if (__p)
    {
      v87 = (unint64_t *)((char *)__p + 8);
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1200))(&v359, a1);
    if (sub_1D53393A0((uint64_t)&v359) < 3 || sub_1D5339398((unsigned int *)&v359) <= 2)
    {
      v355 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v355, "RawCameraException");
      __cxa_throw(v355, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v89 = (void *)MEMORY[0x1E0CB37E8];
    v357 = sub_1D5339044((uint64_t)&v359, 0);
    v358 = v90;
    v91 = (double *)sub_1D53390D4((uint64_t)&v357, 0);
    objc_msgSend_numberWithDouble_(v89, v92, v93, v94, v95, *v91);
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v97, (uint64_t)v96, (uint64_t)CFSTR("mc00"), v98);

    v99 = (void *)MEMORY[0x1E0CB37E8];
    v357 = sub_1D5339044((uint64_t)&v359, 0);
    v358 = v100;
    v101 = (double *)sub_1D53390D4((uint64_t)&v357, 1u);
    objc_msgSend_numberWithDouble_(v99, v102, v103, v104, v105, *v101);
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v107, (uint64_t)v106, (uint64_t)CFSTR("mc01"), v108);

    v109 = (void *)MEMORY[0x1E0CB37E8];
    v357 = sub_1D5339044((uint64_t)&v359, 0);
    v358 = v110;
    v111 = (double *)sub_1D53390D4((uint64_t)&v357, 2u);
    objc_msgSend_numberWithDouble_(v109, v112, v113, v114, v115, *v111);
    v116 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v117, (uint64_t)v116, (uint64_t)CFSTR("mc02"), v118);

    v119 = (void *)MEMORY[0x1E0CB37E8];
    v357 = sub_1D5339044((uint64_t)&v359, 1u);
    v358 = v120;
    v121 = (double *)sub_1D53390D4((uint64_t)&v357, 0);
    objc_msgSend_numberWithDouble_(v119, v122, v123, v124, v125, *v121);
    v126 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v127, (uint64_t)v126, (uint64_t)CFSTR("mc10"), v128);

    v129 = (void *)MEMORY[0x1E0CB37E8];
    v357 = sub_1D5339044((uint64_t)&v359, 1u);
    v358 = v130;
    v131 = (double *)sub_1D53390D4((uint64_t)&v357, 1u);
    objc_msgSend_numberWithDouble_(v129, v132, v133, v134, v135, *v131);
    v136 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v137, (uint64_t)v136, (uint64_t)CFSTR("mc11"), v138);

    v139 = (void *)MEMORY[0x1E0CB37E8];
    v357 = sub_1D5339044((uint64_t)&v359, 1u);
    v358 = v140;
    v141 = (double *)sub_1D53390D4((uint64_t)&v357, 2u);
    objc_msgSend_numberWithDouble_(v139, v142, v143, v144, v145, *v141);
    v146 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v147, (uint64_t)v146, (uint64_t)CFSTR("mc12"), v148);

    v149 = (void *)MEMORY[0x1E0CB37E8];
    v357 = sub_1D5339044((uint64_t)&v359, 2u);
    v358 = v150;
    v151 = (double *)sub_1D53390D4((uint64_t)&v357, 0);
    objc_msgSend_numberWithDouble_(v149, v152, v153, v154, v155, *v151);
    v156 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v157, (uint64_t)v156, (uint64_t)CFSTR("mc20"), v158);

    v159 = (void *)MEMORY[0x1E0CB37E8];
    v357 = sub_1D5339044((uint64_t)&v359, 2u);
    v358 = v160;
    v161 = (double *)sub_1D53390D4((uint64_t)&v357, 1u);
    objc_msgSend_numberWithDouble_(v159, v162, v163, v164, v165, *v161);
    v166 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v167, (uint64_t)v166, (uint64_t)CFSTR("mc21"), v168);

    v169 = (void *)MEMORY[0x1E0CB37E8];
    v357 = sub_1D5339044((uint64_t)&v359, 2u);
    v358 = v170;
    v171 = (double *)sub_1D53390D4((uint64_t)&v357, 2u);
    objc_msgSend_numberWithDouble_(v169, v172, v173, v174, v175, *v171);
    v176 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v177, (uint64_t)v176, (uint64_t)CFSTR("mc22"), v178);

    if (__p)
    {
      v361 = __p;
      operator delete(__p);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v359, a1);
    sub_1D52B50B8((uint64_t)v359);
    v179 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v180, (uint64_t)v179, (uint64_t)CFSTR("version"), v181);

    v182 = (std::__shared_weak_count *)__p;
    if (__p)
    {
      v183 = (unint64_t *)((char *)__p + 8);
      do
        v184 = __ldaxr(v183);
      while (__stlxr(v184 - 1, v183));
      if (!v184)
      {
        ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
        std::__shared_weak_count::__release_weak(v182);
      }
    }
    v185 = (void *)MEMORY[0x1E0CB37E8];
    v186 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1256))(a1);
    objc_msgSend_numberWithInt_(v185, v187, v186, v188, v189);
    v190 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v191, (uint64_t)v190, (uint64_t)off_1EFF32040[0], v192);

    v193 = (void *)MEMORY[0x1E0CB37E8];
    v194 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2392))(a1);
    objc_msgSend_numberWithInt_(v193, v195, v194, v196, v197);
    v198 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v199, (uint64_t)v198, (uint64_t)off_1EFF32048[0], v200);

    v201 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1272))(a1);
    objc_msgSend_numberWithDouble_(v201, v202, v203, v204, v205);
    v206 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v207, (uint64_t)v206, (uint64_t)off_1EFF32050[0], v208);

    v209 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1280))(a1);
    objc_msgSend_numberWithDouble_(v209, v210, v211, v212, v213);
    v214 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v215, (uint64_t)v214, (uint64_t)off_1EFF32058[0], v216);

    v217 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2416))(a1);
    objc_msgSend_numberWithDouble_(v217, v218, v219, v220, v221);
    v222 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v223, (uint64_t)v222, (uint64_t)off_1EFF32060[0], v224);

    v225 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2400))(a1);
    objc_msgSend_numberWithDouble_(v225, v226, v227, v228, v229);
    v230 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v231, (uint64_t)v230, (uint64_t)off_1EFF32078[0], v232);

    v233 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1296))(a1);
    objc_msgSend_numberWithDouble_(v233, v234, v235, v236, v237);
    v238 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v239, (uint64_t)v238, (uint64_t)off_1EFF32068[0], v240);

    v241 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1304))(a1);
    objc_msgSend_numberWithDouble_(v241, v242, v243, v244, v245);
    v246 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v247, (uint64_t)v246, (uint64_t)off_1EFF32070[0], v248);

    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 912))(&v359, a1);
    if (__p == v359)
      goto LABEL_46;
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v249, (int)*(double *)v359, v250, v251);
    v252 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v253, (uint64_t)v252, (uint64_t)off_1EFF31FC0[0], v254);

    if ((unint64_t)((_BYTE *)__p - (_BYTE *)v359) < 9)
      goto LABEL_46;
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v255, (int)*((double *)v359 + 1), v256, v257);
    v258 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v259, (uint64_t)v258, (uint64_t)off_1EFF31FC8[0], v260);

    if ((unint64_t)((_BYTE *)__p - (_BYTE *)v359) < 0x11
      || (objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v261, (int)*((double *)v359 + 2), v262, v263),
          v264 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend_setObject_forKeyedSubscript_(v6, v265, (uint64_t)v264, (uint64_t)off_1EFF31FD0[0], v266),
          v264,
          (unint64_t)((_BYTE *)__p - (_BYTE *)v359) <= 0x18))
    {
LABEL_46:
      sub_1D528EAE0();
    }
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v267, (int)*((double *)v359 + 3), v268, v269);
    v270 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v271, (uint64_t)v270, (uint64_t)off_1EFF31FD8[0], v272);

    if (v359)
    {
      __p = v359;
      operator delete(v359);
    }
    v273 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
    v274 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 456))(a1);
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v275, (uint64_t)CFSTR("{%d, %d}"), v276, v277, v274 + v273, (HIDWORD(v274) + HIDWORD(v273)));
    v278 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v279, (uint64_t)v278, (uint64_t)CFSTR("cropOrigin"), v280);

    if (!getenv("RAWCAMERA_ENABLE_RAW_IMPORT_IN_SPARK"))
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 296))(&v359, a1, 5000);
      if (v359)
      {
        (*(void (**)(void *))(*(_QWORD *)v359 + 32))(v359);
        v349 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v6, v350, (uint64_t)v349, (uint64_t)CFSTR("jpegThumbnail"), v351);

      }
      v352 = (std::__shared_weak_count *)__p;
      if (__p)
      {
        v353 = (unint64_t *)((char *)__p + 8);
        do
          v354 = __ldaxr(v353);
        while (__stlxr(v354 - 1, v353));
        if (!v354)
        {
          ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
          std::__shared_weak_count::__release_weak(v352);
        }
      }
    }
    v362.origin.x = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 480))(a1);
    x = v362.origin.x;
    y = v362.origin.y;
    width = v362.size.width;
    height = v362.size.height;
    if (!CGRectIsEmpty(v362))
    {
      objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v285, (uint64_t)CFSTR("{{%f, %f}, {%f, %f}}"), v286, v287, *(_QWORD *)&x, *(_QWORD *)&y, *(_QWORD *)&width, *(_QWORD *)&height);
      v288 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v6, v289, (uint64_t)v288, (uint64_t)CFSTR("thumbnailCrop"), v290);

    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2480))(a1)
      || (v295 = (*(double (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 2664))(a1, 0, 0),
          v296 = 0.5,
          v295 < 0.5))
    {
      v296 = 0.0;
    }
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v291, v292, v293, v294, v296);
    v297 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v298, (uint64_t)v297, (uint64_t)off_1EFF32268[0], v299);

    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2480))(a1))
    {
      v359 = 0;
      v357 = 0;
      v300 = (*(double (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)a1 + 2664))(a1, &v359, &v357);
      v301 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2672))(a1);
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v302, v303, v304, v305, v300);
      v306 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v6, v307, (uint64_t)v306, (uint64_t)CFSTR("rn"), v308);

      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v309, v310, v311, v312, v301);
      v313 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v6, v314, (uint64_t)v313, (uint64_t)CFSTR("rnp"), v315);

      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v316, v317, v318, v319, *(double *)&v359);
      v320 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v6, v321, (uint64_t)v320, (uint64_t)CFSTR("dngNoiseModelScale"), v322);

      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v323, v324, v325, v326, *(double *)&v357);
      v327 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v6, v328, (uint64_t)v327, (uint64_t)CFSTR("dngNoiseModelOffset"), v329);

    }
    v330 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 800))(a1, a2);
    objc_msgSend_numberWithDouble_(v330, v331, v332, v333, v334);
    v335 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v336, (uint64_t)v335, (uint64_t)CFSTR("sushiFactor"), v337);

    v338 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1);
    objc_msgSend_numberWithDouble_(v338, v339, v340, v341, v342);
    v343 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v344, (uint64_t)v343, (uint64_t)CFSTR("airyDiskRatio"), v345);

    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2936))(a1);
    v346 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      objc_msgSend_setObject_forKeyedSubscript_(v6, v347, (uint64_t)v346, (uint64_t)CFSTR("linearizationTable"), v348);

  }
}

void sub_1D531FE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17)
{
  void *v17;
  void *v18;
  void *v19;

  sub_1D5282EB4((uint64_t)&__p);
  _Unwind_Resume(a1);
}

std::string *sub_1D532007C@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *result;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 80))(a2);
  result = (std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  if ((_DWORD)result)
    return std::string::append(a2, " dng", 4uLL);
  return result;
}

void sub_1D53200D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double sub_1D53200F0(uint64_t a1)
{
  double v2;
  double v3;
  long double v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v77;
  std::__shared_weak_count *v78;

  v2 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  v3 = 0.0;
  if (v2 == 0.707106781)
    return v3;
  v4 = log2(v2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, long double))(*(_QWORD *)a1 + 160))(&v77, a1, v4 + v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v77 + 400))(v77);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v78;
  if (v78)
  {
    p_shared_owners = (unint64_t *)&v78->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v12 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 328))(a1);
  if (v12 == 0.0)
  {
    objc_msgSend_valueForKeyPath_(v5, v9, (uint64_t)CFSTR("{Exif}.FocalPlaneXResolution"), v10, v11);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v16
      || (objc_msgSend_valueForKeyPath_(v5, v13, (uint64_t)CFSTR("{Exif}.FocalPlaneResolutionUnit"), v14, v15),
          v17 = (void *)objc_claimAutoreleasedReturnValue(),
          v17,
          v16,
          !v17))
    {
      objc_msgSend_valueForKeyPath_(v5, v13, (uint64_t)CFSTR("{Exif}.FocalLength"), v14, v15);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      if (v38)
      {
        objc_msgSend_valueForKeyPath_(v5, v35, (uint64_t)CFSTR("{Exif}.FocalLenIn35mmFilm"), v36, v37);
        v39 = (void *)objc_claimAutoreleasedReturnValue();

        if (v39)
        {
          objc_msgSend_valueForKeyPath_(v5, v40, (uint64_t)CFSTR("{Exif}.FocalLength"), v41, v42);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_doubleValue(v43, v44, v45, v46, v47);
          v49 = v48;

          objc_msgSend_valueForKeyPath_(v5, v50, (uint64_t)CFSTR("{Exif}.FocalLenIn35mmFilm"), v51, v52);
          v53 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_doubleValue(v53, v54, v55, v56, v57);
          v59 = v58;

          objc_msgSend_valueForKeyPath_(v5, v60, (uint64_t)CFSTR("PixelWidth"), v61, v62);
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_doubleValue(v63, v64, v65, v66, v67);
          v69 = v68;

          v12 = v49 / v59 * 35.0 * 1000.0 / v69;
        }
      }
      goto LABEL_18;
    }
    objc_msgSend_valueForKeyPath_(v5, v13, (uint64_t)CFSTR("{Exif}.FocalPlaneResolutionUnit"), v14, v15);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_msgSend_intValue(v18, v19, v20, v21, v22);

    if (v23 == 3)
    {
      objc_msgSend_valueForKeyPath_(v5, v24, (uint64_t)CFSTR("{Exif}.FocalPlaneXResolution"), v25, v26);
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_doubleValue(v70, v71, v72, v73, v74);
      v33 = v75;

      v34 = 10000.0;
      goto LABEL_17;
    }
    if (v23 == 2)
    {
      objc_msgSend_valueForKeyPath_(v5, v24, (uint64_t)CFSTR("{Exif}.FocalPlaneXResolution"), v25, v26);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_doubleValue(v27, v28, v29, v30, v31);
      v33 = v32;

      v34 = 25400.0;
LABEL_17:
      v12 = v34 / v33;
    }
  }
LABEL_18:
  if (v12 == 0.0)
    v3 = 0.0;
  else
    v3 = v2 / 0.75 / v12;

  return v3;
}

void sub_1D53203A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5320408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  JUMPOUT(0x1D5320400);
}

id sub_1D5320418(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  const char *v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  const char *v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  const char *v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  const char *v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  void *v147;
  const char *v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  const char *v155;
  uint64_t v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  const char *v162;
  uint64_t v163;
  void *v164;
  std::__shared_weak_count *v165;
  double *v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  const char *v172;
  uint64_t v173;
  void *v174;
  std::__shared_weak_count *v175;
  double *v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  const char *v182;
  uint64_t v183;
  void *v184;
  std::__shared_weak_count *v185;
  double *v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  const char *v192;
  uint64_t v193;
  void *v194;
  unsigned int v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  double v200;
  std::__shared_weak_count *v201;
  void *v202;
  const char *v203;
  uint64_t v204;
  void *v205;
  unsigned int v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  double v211;
  std::__shared_weak_count *v212;
  void *v213;
  const char *v214;
  uint64_t v215;
  void *v216;
  std::__shared_weak_count *v217;
  double *v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  const char *v224;
  uint64_t v225;
  void *v226;
  std::__shared_weak_count *v227;
  double *v228;
  const char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  void *v233;
  const char *v234;
  uint64_t v235;
  void *v236;
  std::__shared_weak_count *v237;
  double *v238;
  const char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  const char *v244;
  uint64_t v245;
  void *v246;
  unsigned int v247;
  const char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  double v252;
  std::__shared_weak_count *v253;
  void *v254;
  const char *v255;
  uint64_t v256;
  void *v257;
  unsigned int v258;
  const char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  double v263;
  std::__shared_weak_count *v264;
  void *v265;
  const char *v266;
  uint64_t v267;
  void *v268;
  std::__shared_weak_count *v269;
  double *v270;
  const char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  void *v275;
  const char *v276;
  uint64_t v277;
  void *v278;
  std::__shared_weak_count *v279;
  double *v280;
  const char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  const char *v286;
  uint64_t v287;
  void *v288;
  std::__shared_weak_count *v289;
  double *v290;
  const char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  void *v295;
  const char *v296;
  uint64_t v297;
  void *v298;
  unsigned int v299;
  const char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  double v304;
  std::__shared_weak_count *v305;
  void *v306;
  const char *v307;
  uint64_t v308;
  void *v309;
  unsigned int v310;
  const char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  double v315;
  std::__shared_weak_count *v316;
  void *v317;
  const char *v318;
  uint64_t v319;
  const char *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  void *v324;
  const char *v325;
  uint64_t v326;
  const char *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  void *v331;
  const char *v332;
  uint64_t v333;
  const char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  void *v338;
  const char *v339;
  uint64_t v340;
  const char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  void *v345;
  const char *v346;
  uint64_t v347;
  const char *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  void *v352;
  const char *v353;
  uint64_t v354;
  const char *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  void *v359;
  const char *v360;
  uint64_t v361;
  const char *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  void *v366;
  const char *v367;
  uint64_t v368;
  const char *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  void *v373;
  const char *v374;
  uint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  void *v379;
  uint64_t v380;
  const char *v381;
  uint64_t v382;
  uint64_t v383;
  void *v384;
  const char *v385;
  uint64_t v386;
  const char *v387;
  uint64_t v388;
  uint64_t v389;
  void *v390;
  const char *v391;
  uint64_t v392;
  void *v393;
  uint64_t v394;
  const char *v395;
  uint64_t v396;
  uint64_t v397;
  void *v398;
  const char *v399;
  uint64_t v400;
  void *v401;
  uint64_t v402;
  const char *v403;
  uint64_t v404;
  uint64_t v405;
  void *v406;
  const char *v407;
  uint64_t v408;
  void *v409;
  uint64_t v410;
  const char *v411;
  uint64_t v412;
  uint64_t v413;
  void *v414;
  const char *v415;
  uint64_t v416;
  void *v417;
  uint64_t v418;
  const char *v419;
  uint64_t v420;
  uint64_t v421;
  void *v422;
  const char *v423;
  uint64_t v424;
  void *v425;
  uint64_t v426;
  const char *v427;
  uint64_t v428;
  uint64_t v429;
  void *v430;
  const char *v431;
  uint64_t v432;
  void *v433;
  uint64_t v434;
  const char *v435;
  uint64_t v436;
  uint64_t v437;
  void *v438;
  const char *v439;
  uint64_t v440;
  const char *v441;
  uint64_t v442;
  const char *v443;
  uint64_t v444;
  void *v445;
  const char *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  void *v450;
  const char *v451;
  uint64_t v452;
  void *v453;
  const char *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  void *v458;
  const char *v459;
  uint64_t v460;
  void *v461;
  const char *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  void *v466;
  const char *v467;
  uint64_t v468;
  void *v469;
  const char *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  void *v474;
  const char *v475;
  uint64_t v476;
  void *v477;
  const char *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  void *v482;
  const char *v483;
  uint64_t v484;
  void *v485;
  const char *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  void *v490;
  const char *v491;
  uint64_t v492;
  void *v493;
  const char *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  void *v498;
  const char *v499;
  uint64_t v500;
  void *v501;
  const char *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  void *v506;
  const char *v507;
  uint64_t v508;
  void *v509;
  const char *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  void *v514;
  const char *v515;
  uint64_t v516;
  void *v517;
  const char *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  void *v522;
  const char *v523;
  uint64_t v524;
  void *v525;
  const char *v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  void *v530;
  const char *v531;
  uint64_t v532;
  void *v533;
  const char *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  void *v538;
  const char *v539;
  uint64_t v540;
  void *v541;
  const char *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  void *v546;
  const char *v547;
  uint64_t v548;
  void *v549;
  const char *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  void *v554;
  const char *v555;
  uint64_t v556;
  void *v557;
  const char *v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  void *v562;
  const char *v563;
  uint64_t v564;
  void *v565;
  int v566;
  const char *v567;
  uint64_t v568;
  uint64_t v569;
  void *v570;
  const char *v571;
  uint64_t v572;
  void *v573;
  uint64_t v574;
  const char *v575;
  uint64_t v576;
  uint64_t v577;
  void *v578;
  const char *v579;
  uint64_t v580;
  void *v581;
  const char *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  void *v586;
  const char *v587;
  uint64_t v588;
  void *v589;
  const char *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  void *v594;
  const char *v595;
  uint64_t v596;
  void *v597;
  const char *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  void *v602;
  const char *v603;
  uint64_t v604;
  void *v605;
  const char *v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  void *v610;
  const char *v611;
  uint64_t v612;
  void *v613;
  const char *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  void *v618;
  const char *v619;
  uint64_t v620;
  void *v621;
  const char *v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  void *v626;
  const char *v627;
  uint64_t v628;
  void *v629;
  const char *v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  void *v634;
  const char *v635;
  uint64_t v636;
  void *v637;
  const char *v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  void *v642;
  const char *v643;
  uint64_t v644;
  void *v645;
  const char *v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  void *v650;
  const char *v651;
  uint64_t v652;
  void *v653;
  const char *v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  void *v658;
  const char *v659;
  uint64_t v660;
  void *v661;
  const char *v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  void *v666;
  const char *v667;
  uint64_t v668;
  void *v669;
  unsigned int v670;
  const char *v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  void *v675;
  const char *v676;
  uint64_t v677;
  void *v678;
  const char *v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  void *v683;
  const char *v684;
  uint64_t v685;
  void *v686;
  uint64_t v687;
  const char *v688;
  uint64_t v689;
  uint64_t v690;
  void *v691;
  const char *v692;
  uint64_t v693;
  void *v694;
  const char *v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  void *v699;
  const char *v700;
  uint64_t v701;
  void *v702;
  const char *v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  void *v707;
  const char *v708;
  uint64_t v709;
  void *v710;
  const char *v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  void *v715;
  const char *v716;
  uint64_t v717;
  void *v718;
  const char *v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  void *v723;
  const char *v724;
  uint64_t v725;
  void *v726;
  uint64_t v727;
  const char *v728;
  uint64_t v729;
  uint64_t v730;
  void *v731;
  const char *v732;
  uint64_t v733;
  void *v734;
  const char *v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  void *v739;
  const char *v740;
  uint64_t v741;
  void *v742;
  const char *v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  void *v747;
  const char *v748;
  uint64_t v749;
  void (***v750)(void *, uint64_t, uint64_t *, unsigned __int8 *);
  uint64_t v751;
  const char *v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  double v756;
  std::__shared_weak_count *v757;
  unint64_t *v758;
  unint64_t v759;
  void *v760;
  const char *v761;
  uint64_t v762;
  double v763;
  const char *v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  void *v768;
  const char *v769;
  uint64_t v770;
  double v771;
  const char *v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  void *v776;
  const char *v777;
  uint64_t v778;
  double v779;
  const char *v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  void *v784;
  const char *v785;
  uint64_t v786;
  double v787;
  const char *v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  void *v792;
  const char *v793;
  uint64_t v794;
  double v795;
  const char *v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  void *v800;
  const char *v801;
  uint64_t v802;
  double v803;
  const char *v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  void *v808;
  const char *v809;
  uint64_t v810;
  double v811;
  const char *v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  void *v816;
  const char *v817;
  uint64_t v818;
  double v819;
  const char *v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  void *v824;
  const char *v825;
  uint64_t v826;
  double v827;
  const char *v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  void *v832;
  const char *v833;
  uint64_t v834;
  double v835;
  const char *v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  void *v840;
  const char *v841;
  uint64_t v842;
  double v843;
  const char *v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  void *v848;
  const char *v849;
  uint64_t v850;
  double v851;
  const char *v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  void *v856;
  const char *v857;
  uint64_t v858;
  double v859;
  const char *v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  void *v864;
  const char *v865;
  uint64_t v866;
  double v867;
  const char *v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  void *v872;
  const char *v873;
  uint64_t v874;
  double v875;
  const char *v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  void *v880;
  const char *v881;
  uint64_t v882;
  const char *v883;
  uint64_t v884;
  uint64_t v885;
  void *v886;
  const char *v887;
  uint64_t v888;
  double *v889;
  double *v890;
  uint64_t v891;
  unint64_t v892;
  float v893;
  unsigned int v894;
  double v896;
  const char *v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  void *v901;
  const char *v902;
  uint64_t v903;
  double v904;
  const char *v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  void *v909;
  const char *v910;
  uint64_t v911;
  double v912;
  const char *v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  void *v917;
  const char *v918;
  uint64_t v919;
  double v920;
  const char *v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  void *v925;
  const char *v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  const char *v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  std::__shared_weak_count *v934;
  unint64_t *v935;
  unint64_t v936;
  double *v937;
  uint64_t v938;
  float v939;
  void *v940;
  const char *v941;
  uint64_t v942;
  const char *v943;
  uint64_t v944;
  const char *v945;
  uint64_t v946;
  double *v947;
  void *v948;
  const char *v949;
  uint64_t v950;
  const __CFString *v951;
  void *v952;
  const char *v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  void *v957;
  const char *v958;
  uint64_t v959;
  void *v960;
  const char *v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  void *v965;
  const char *v966;
  uint64_t v967;
  void *v968;
  uint64_t v969;
  const char *v970;
  uint64_t v971;
  uint64_t v972;
  void *v973;
  const char *v974;
  uint64_t v975;
  void *v976;
  unint64_t v977;
  const char *v978;
  uint64_t v979;
  uint64_t v980;
  void *v981;
  const char *v982;
  uint64_t v983;
  void *v984;
  uint64_t v985;
  const char *v986;
  uint64_t v987;
  uint64_t v988;
  void *v989;
  const char *v990;
  uint64_t v991;
  void *v992;
  unint64_t v993;
  const char *v994;
  uint64_t v995;
  uint64_t v996;
  void *v997;
  const char *v998;
  uint64_t v999;
  void *v1000;
  uint64_t v1001;
  const char *v1002;
  uint64_t v1003;
  uint64_t v1004;
  void *v1005;
  const char *v1006;
  uint64_t v1007;
  void *v1008;
  unint64_t v1009;
  const char *v1010;
  uint64_t v1011;
  uint64_t v1012;
  void *v1013;
  const char *v1014;
  uint64_t v1015;
  unint64_t v1016;
  const char *v1017;
  uint64_t v1018;
  uint64_t v1019;
  void *v1020;
  const char *v1021;
  uint64_t v1022;
  unint64_t v1023;
  const char *v1024;
  uint64_t v1025;
  uint64_t v1026;
  void *v1027;
  const char *v1028;
  uint64_t v1029;
  unint64_t v1030;
  const char *v1031;
  uint64_t v1032;
  uint64_t v1033;
  void *v1034;
  const char *v1035;
  uint64_t v1036;
  unint64_t v1037;
  const char *v1038;
  uint64_t v1039;
  uint64_t v1040;
  void *v1041;
  const char *v1042;
  uint64_t v1043;
  unint64_t v1044;
  const char *v1045;
  uint64_t v1046;
  uint64_t v1047;
  void *v1048;
  const char *v1049;
  uint64_t v1050;
  void *v1051;
  uint64_t v1052;
  const char *v1053;
  uint64_t v1054;
  uint64_t v1055;
  void *v1056;
  const char *v1057;
  uint64_t v1058;
  unint64_t v1059;
  const char *v1060;
  uint64_t v1061;
  uint64_t v1062;
  void *v1063;
  const char *v1064;
  uint64_t v1065;
  void *v1066;
  uint64_t v1067;
  const char *v1068;
  uint64_t v1069;
  uint64_t v1070;
  void *v1071;
  const char *v1072;
  uint64_t v1073;
  void *v1074;
  const char *v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  void *v1079;
  const char *v1080;
  uint64_t v1081;
  void *v1082;
  const char *v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  void *v1087;
  const char *v1088;
  uint64_t v1089;
  void *v1090;
  const char *v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  void *v1095;
  const char *v1096;
  uint64_t v1097;
  void *v1098;
  const char *v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  void *v1103;
  const char *v1104;
  uint64_t v1105;
  const char *v1106;
  uint64_t v1107;
  uint64_t v1108;
  void *v1109;
  const char *v1110;
  uint64_t v1111;
  const char *v1112;
  uint64_t v1113;
  uint64_t v1114;
  void *v1115;
  const char *v1116;
  uint64_t v1117;
  const char *v1118;
  uint64_t v1119;
  uint64_t v1120;
  void *v1121;
  const char *v1122;
  uint64_t v1123;
  const char *v1124;
  uint64_t v1125;
  uint64_t v1126;
  void *v1127;
  const char *v1128;
  uint64_t v1129;
  double v1130;
  const char *v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  void *v1135;
  const char *v1136;
  uint64_t v1137;
  double v1138;
  const char *v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  void *v1143;
  const char *v1144;
  uint64_t v1145;
  double v1146;
  const char *v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  void *v1151;
  const char *v1152;
  uint64_t v1153;
  double v1154;
  const char *v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  void *v1159;
  const char *v1160;
  uint64_t v1161;
  double v1162;
  const char *v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  void *v1167;
  const char *v1168;
  uint64_t v1169;
  double v1170;
  const char *v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  void *v1175;
  const char *v1176;
  uint64_t v1177;
  double v1178;
  const char *v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  void *v1183;
  const char *v1184;
  uint64_t v1185;
  double v1186;
  const char *v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  void *v1191;
  const char *v1192;
  uint64_t v1193;
  double v1194;
  const char *v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  void *v1199;
  const char *v1200;
  uint64_t v1201;
  double v1202;
  const char *v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  void *v1207;
  const char *v1208;
  uint64_t v1209;
  double v1210;
  const char *v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  void *v1215;
  const char *v1216;
  uint64_t v1217;
  double v1218;
  const char *v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  void *v1223;
  const char *v1224;
  uint64_t v1225;
  double v1226;
  const char *v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  void *v1231;
  const char *v1232;
  uint64_t v1233;
  double v1234;
  const char *v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  void *v1239;
  const char *v1240;
  uint64_t v1241;
  double v1242;
  const char *v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  void *v1247;
  const char *v1248;
  uint64_t v1249;
  double v1250;
  const char *v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  void *v1255;
  const char *v1256;
  uint64_t v1257;
  double v1258;
  const char *v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  void *v1263;
  const char *v1264;
  uint64_t v1265;
  double v1266;
  const char *v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  void *v1271;
  const char *v1272;
  uint64_t v1273;
  double v1274;
  const char *v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  void *v1279;
  const char *v1280;
  uint64_t v1281;
  double v1282;
  const char *v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  void *v1287;
  const char *v1288;
  uint64_t v1289;
  double v1290;
  const char *v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  void *v1295;
  const char *v1296;
  uint64_t v1297;
  double v1298;
  const char *v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  void *v1303;
  const char *v1304;
  uint64_t v1305;
  double v1306;
  const char *v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  void *v1311;
  const char *v1312;
  uint64_t v1313;
  double v1314;
  const char *v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  void *v1319;
  const char *v1320;
  uint64_t v1321;
  double v1322;
  const char *v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  void *v1327;
  const char *v1328;
  uint64_t v1329;
  double v1330;
  const char *v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  void *v1335;
  const char *v1336;
  uint64_t v1337;
  double v1338;
  const char *v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  void *v1343;
  const char *v1344;
  uint64_t v1345;
  double v1346;
  const char *v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  void *v1351;
  const char *v1352;
  uint64_t v1353;
  double v1354;
  const char *v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  void *v1359;
  const char *v1360;
  uint64_t v1361;
  double v1362;
  const char *v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  void *v1367;
  const char *v1368;
  uint64_t v1369;
  double v1370;
  const char *v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  void *v1375;
  const char *v1376;
  uint64_t v1377;
  double v1378;
  const char *v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  void *v1383;
  const char *v1384;
  uint64_t v1385;
  double v1386;
  const char *v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  void *v1391;
  const char *v1392;
  uint64_t v1393;
  double v1394;
  const char *v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  void *v1399;
  const char *v1400;
  uint64_t v1401;
  double v1402;
  const char *v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  void *v1407;
  const char *v1408;
  uint64_t v1409;
  double v1410;
  const char *v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  void *v1415;
  const char *v1416;
  uint64_t v1417;
  double v1418;
  const char *v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  void *v1423;
  const char *v1424;
  uint64_t v1425;
  double v1426;
  const char *v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  void *v1431;
  const char *v1432;
  uint64_t v1433;
  double v1434;
  const char *v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  void *v1439;
  const char *v1440;
  uint64_t v1441;
  double v1442;
  const char *v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  void *v1447;
  const char *v1448;
  uint64_t v1449;
  double v1450;
  const char *v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  void *v1455;
  const char *v1456;
  uint64_t v1457;
  double v1458;
  const char *v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  void *v1463;
  const char *v1464;
  uint64_t v1465;
  double v1466;
  const char *v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  void *v1471;
  const char *v1472;
  uint64_t v1473;
  double v1474;
  const char *v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  void *v1479;
  const char *v1480;
  uint64_t v1481;
  double v1482;
  const char *v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  void *v1487;
  const char *v1488;
  uint64_t v1489;
  double v1490;
  const char *v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  void *v1495;
  const char *v1496;
  uint64_t v1497;
  double v1498;
  const char *v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  void *v1503;
  const char *v1504;
  uint64_t v1505;
  double v1506;
  const char *v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  void *v1511;
  const char *v1512;
  uint64_t v1513;
  void *v1514;
  const char *v1515;
  uint64_t v1516;
  const char *v1517;
  uint64_t v1518;
  uint64_t v1519;
  void *v1520;
  const char *v1521;
  uint64_t v1522;
  double v1523;
  const char *v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  void *v1528;
  const char *v1529;
  uint64_t v1530;
  double v1531;
  const char *v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  void *v1536;
  const char *v1537;
  uint64_t v1538;
  double v1539;
  const char *v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  void *v1544;
  const char *v1545;
  uint64_t v1546;
  double v1547;
  const char *v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  void *v1552;
  const char *v1553;
  uint64_t v1554;
  double v1555;
  const char *v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  void *v1560;
  const char *v1561;
  uint64_t v1562;
  double v1563;
  const char *v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  void *v1568;
  const char *v1569;
  uint64_t v1570;
  double v1571;
  const char *v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  void *v1576;
  const char *v1577;
  uint64_t v1578;
  double v1579;
  const char *v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  void *v1584;
  const char *v1585;
  uint64_t v1586;
  double v1587;
  const char *v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  void *v1592;
  const char *v1593;
  uint64_t v1594;
  double v1595;
  const char *v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  void *v1600;
  const char *v1601;
  uint64_t v1602;
  double v1603;
  const char *v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  void *v1608;
  const char *v1609;
  uint64_t v1610;
  double v1611;
  const char *v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  void *v1616;
  const char *v1617;
  uint64_t v1618;
  double v1619;
  const char *v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  void *v1624;
  const char *v1625;
  uint64_t v1626;
  double v1627;
  const char *v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  void *v1632;
  const char *v1633;
  uint64_t v1634;
  double v1635;
  const char *v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  void *v1640;
  const char *v1641;
  uint64_t v1642;
  double v1643;
  const char *v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  void *v1648;
  const char *v1649;
  uint64_t v1650;
  double v1651;
  const char *v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  void *v1656;
  const char *v1657;
  uint64_t v1658;
  double v1659;
  const char *v1660;
  uint64_t v1661;
  uint64_t v1662;
  uint64_t v1663;
  void *v1664;
  const char *v1665;
  uint64_t v1666;
  double v1667;
  const char *v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  void *v1672;
  const char *v1673;
  uint64_t v1674;
  double v1675;
  const char *v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  void *v1680;
  const char *v1681;
  uint64_t v1682;
  double v1683;
  const char *v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  void *v1688;
  const char *v1689;
  uint64_t v1690;
  double v1691;
  const char *v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  void *v1696;
  const char *v1697;
  uint64_t v1698;
  double v1699;
  const char *v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  void *v1704;
  const char *v1705;
  uint64_t v1706;
  double v1707;
  const char *v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  void *v1712;
  const char *v1713;
  uint64_t v1714;
  double v1715;
  const char *v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  void *v1720;
  const char *v1721;
  uint64_t v1722;
  double v1723;
  const char *v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  void *v1728;
  const char *v1729;
  uint64_t v1730;
  double v1731;
  const char *v1732;
  uint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  void *v1736;
  const char *v1737;
  uint64_t v1738;
  double v1739;
  const char *v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  void *v1744;
  const char *v1745;
  uint64_t v1746;
  double v1747;
  const char *v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  void *v1752;
  const char *v1753;
  uint64_t v1754;
  double v1755;
  const char *v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  void *v1760;
  const char *v1761;
  uint64_t v1762;
  double v1763;
  const char *v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  void *v1768;
  const char *v1769;
  uint64_t v1770;
  double v1771;
  const char *v1772;
  uint64_t v1773;
  uint64_t v1774;
  uint64_t v1775;
  void *v1776;
  const char *v1777;
  uint64_t v1778;
  id v1779;
  void *v1781;
  void *v1782;
  void *v1783;
  void *exception;
  void *v1785;
  void *v1786;
  void *v1787;
  void *v1788;
  void *__p[2];
  __int128 v1791;
  __int128 v1792;
  __int128 v1793;
  __int128 v1794;
  __int128 v1795;
  __int128 v1796;
  __int128 v1797;
  __int128 v1798;
  __int128 v1799;
  __int128 v1800;
  __int128 v1801;
  __int128 v1802;
  __int128 v1803;
  __int128 v1804;
  __int128 v1805;
  __int128 v1806;
  __int128 v1807;
  __int128 v1808;
  __int128 v1809;
  __int128 v1810;
  __int128 v1811;
  __int128 v1812;
  __int128 v1813;
  __int128 v1814;
  __int128 v1815;
  __int128 v1816;
  __int128 v1817;
  __int128 v1818;
  __int128 v1819;
  __int128 v1820;
  __int128 v1821;
  int v1822;
  int v1823;
  int v1824;
  int v1825;
  int v1826;
  int v1827;
  int v1828;
  int v1829;
  int v1830;
  int v1831;
  unsigned __int8 v1832;
  uint64_t v1833;
  std::__shared_weak_count *v1834;
  uint64_t v1835;
  std::__shared_weak_count *v1836;
  int v1837;
  int v1838;
  int v1839;
  int v1840;
  int v1841;
  int v1842;
  int v1843;
  int v1844;
  int v1845;
  int v1846;
  int v1847;
  int v1848;
  uint64_t v1849;

  v1849 = *MEMORY[0x1E0C80C00];
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 456))(a1);
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v4, v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v8)
  {
    v1785 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v1785, "RawCameraException");
    __cxa_throw(v1785, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(__p, a1);
  sub_1D52B50B8((uint64_t)__p[0]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v10, (uint64_t)v9, (uint64_t)CFSTR("version"), v11);

  v12 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v13 = (unint64_t *)((char *)__p[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (void *)MEMORY[0x1E0CB37E8];
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2168))(a1);
  objc_msgSend_numberWithInt_(v15, v17, v16, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v21, (uint64_t)v20, (uint64_t)CFSTR("pattern"), v22);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v23, HIDWORD(v3), v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v27, (uint64_t)v26, (uint64_t)CFSTR("leftmargin"), v28);

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 1120))(&v1835, a1);
  v29 = v1835;
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v29 + 8))(__p, v29, v30);
  v35 = v1836;
  if (v1836)
  {
    p_shared_owners = (unint64_t *)&v1836->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = __p[0];
  if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)32)
  {
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v31, v32, v33, v34, *(double *)__p[0]);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v40, (uint64_t)v39, (uint64_t)CFSTR("blackNoise0"), v41);

    if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)9)
      goto LABEL_128;
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v42, v43, v44, v45, *((double *)__p[0] + 1));
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v47, (uint64_t)v46, (uint64_t)CFSTR("blackNoise1"), v48);

    if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)0x11
      || (objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v49, v50, v51, v52, *((double *)__p[0] + 2)),
          v53 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend_setObject_forKeyedSubscript_(v8, v54, (uint64_t)v53, (uint64_t)CFSTR("blackNoise2"), v55),
          v53,
          (void *)((char *)__p[1] - (char *)__p[0]) <= (void *)0x18))
    {
LABEL_128:
      sub_1D528EAE0();
    }
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v56, v57, v58, v59, *((double *)__p[0] + 3));
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v61, (uint64_t)v60, (uint64_t)CFSTR("blackNoise3"), v62);

    v38 = __p[0];
  }
  if (v38)
  {
    __p[1] = v38;
    operator delete(v38);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1024))(__p, a1);
  v66 = __p[0];
  if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)32)
  {
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v63, (int)*(double *)__p[0], v64, v65);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v68, (uint64_t)v67, (uint64_t)CFSTR("blackStdDev0"), v69);

    if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)9)
      goto LABEL_129;
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v70, (int)*((double *)__p[0] + 1), v71, v72);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v74, (uint64_t)v73, (uint64_t)CFSTR("blackStdDev1"), v75);

    if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)0x11
      || (objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v76, (int)*((double *)__p[0] + 2), v77, v78),
          v79 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend_setObject_forKeyedSubscript_(v8, v80, (uint64_t)v79, (uint64_t)CFSTR("blackStdDev2"), v81),
          v79,
          (void *)((char *)__p[1] - (char *)__p[0]) <= (void *)0x18))
    {
LABEL_129:
      sub_1D528EAE0();
    }
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v82, (int)*((double *)__p[0] + 3), v83, v84);
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v86, (uint64_t)v85, (uint64_t)CFSTR("blackStdDev3"), v87);

    v66 = __p[0];
  }
  if (v66)
  {
    __p[1] = v66;
    operator delete(v66);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1016))(__p, a1);
  v91 = __p[0];
  if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)32)
  {
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v88, (int)*(double *)__p[0], v89, v90);
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v93, (uint64_t)v92, (uint64_t)CFSTR("black0"), v94);

    if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)9)
      goto LABEL_130;
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v95, (int)*((double *)__p[0] + 1), v96, v97);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v99, (uint64_t)v98, (uint64_t)CFSTR("black1"), v100);

    if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)0x11
      || (objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v101, (int)*((double *)__p[0] + 2), v102, v103),
          v104 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend_setObject_forKeyedSubscript_(v8, v105, (uint64_t)v104, (uint64_t)CFSTR("black2"), v106),
          v104,
          (void *)((char *)__p[1] - (char *)__p[0]) <= (void *)0x18))
    {
LABEL_130:
      sub_1D528EAE0();
    }
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v107, (int)*((double *)__p[0] + 3), v108, v109);
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v111, (uint64_t)v110, (uint64_t)CFSTR("black3"), v112);

    v91 = __p[0];
  }
  if (v91)
  {
    __p[1] = v91;
    operator delete(v91);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 912))(__p, a1);
  v117 = __p[0];
  if ((void *)((char *)__p[1] - (char *)__p[0]) >= (void *)0x11)
  {
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v113, v114, v115, v116, *(double *)__p[0]);
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v119, (uint64_t)v118, (uint64_t)off_1EFF31FC0[0], v120);

    if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)9
      || (objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v121, v122, v123, v124, *((double *)__p[0] + 1)),
          v125 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend_setObject_forKeyedSubscript_(v8, v126, (uint64_t)v125, (uint64_t)off_1EFF31FC8[0], v127),
          v125,
          (void *)((char *)__p[1] - (char *)__p[0]) <= (void *)0x10))
    {
      sub_1D528EAE0();
    }
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v128, v129, v130, v131, *((double *)__p[0] + 2));
    v132 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v133, (uint64_t)v132, (uint64_t)off_1EFF31FD0[0], v134);

    v117 = __p[0];
    if ((void *)((char *)__p[1] - (char *)__p[0]) >= (void *)0x19)
    {
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v135, v136, v137, v138, *((double *)__p[0] + 3));
      v139 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v8, v140, (uint64_t)v139, (uint64_t)off_1EFF31FD8[0], v141);

      v117 = __p[0];
    }
  }
  if (v117)
  {
    __p[1] = v117;
    operator delete(v117);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 744))(__p, a1);
  v146 = __p[0];
  if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)24)
  {
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v142, v143, v144, v145, *(double *)__p[0]);
    v147 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v148, (uint64_t)v147, (uint64_t)CFSTR("factor0"), v149);

    if ((void *)((char *)__p[1] - (char *)__p[0]) < (void *)9
      || (objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v150, v151, v152, v153, *((double *)__p[0] + 1)),
          v154 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend_setObject_forKeyedSubscript_(v8, v155, (uint64_t)v154, (uint64_t)CFSTR("factor1"), v156),
          v154,
          (void *)((char *)__p[1] - (char *)__p[0]) <= (void *)0x10))
    {
      sub_1D528EAE0();
    }
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v157, v158, v159, v160, *((double *)__p[0] + 2));
    v161 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v162, (uint64_t)v161, (uint64_t)CFSTR("factor2"), v163);

    v146 = __p[0];
  }
  if (v146)
  {
    __p[1] = v146;
    operator delete(v146);
  }
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 792))(__p, a1, a2);
  if (sub_1D53393A0((uint64_t)__p) < 3 || sub_1D5339398((unsigned int *)__p) <= 2)
  {
    v1783 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v1783, "RawCameraException");
    __cxa_throw(v1783, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v164 = (void *)MEMORY[0x1E0CB37E8];
  v1835 = sub_1D5339044((uint64_t)__p, 0);
  v1836 = v165;
  v166 = (double *)sub_1D53390D4((uint64_t)&v1835, 0);
  objc_msgSend_numberWithDouble_(v164, v167, v168, v169, v170, *v166);
  v171 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v172, (uint64_t)v171, (uint64_t)CFSTR("r0"), v173);

  v174 = (void *)MEMORY[0x1E0CB37E8];
  v1835 = sub_1D5339044((uint64_t)__p, 0);
  v1836 = v175;
  v176 = (double *)sub_1D53390D4((uint64_t)&v1835, 1u);
  objc_msgSend_numberWithDouble_(v174, v177, v178, v179, v180, *v176);
  v181 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v182, (uint64_t)v181, (uint64_t)CFSTR("r1"), v183);

  v184 = (void *)MEMORY[0x1E0CB37E8];
  v1835 = sub_1D5339044((uint64_t)__p, 0);
  v1836 = v185;
  v186 = (double *)sub_1D53390D4((uint64_t)&v1835, 2u);
  objc_msgSend_numberWithDouble_(v184, v187, v188, v189, v190, *v186);
  v191 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v192, (uint64_t)v191, (uint64_t)CFSTR("r2"), v193);

  v194 = (void *)MEMORY[0x1E0CB37E8];
  v195 = sub_1D53393A0((uint64_t)__p);
  v200 = 0.0;
  if (v195 >= 4)
  {
    v1835 = sub_1D5339044((uint64_t)__p, 0);
    v1836 = v201;
    v200 = *(double *)sub_1D53390D4((uint64_t)&v1835, 3u);
  }
  objc_msgSend_numberWithDouble_(v194, v196, v197, v198, v199, v200);
  v202 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v203, (uint64_t)v202, (uint64_t)CFSTR("r3"), v204);

  v205 = (void *)MEMORY[0x1E0CB37E8];
  v206 = sub_1D53393A0((uint64_t)__p);
  v211 = 0.0;
  if (v206 >= 5)
  {
    v1835 = sub_1D5339044((uint64_t)__p, 0);
    v1836 = v212;
    v211 = *(double *)sub_1D53390D4((uint64_t)&v1835, 4u);
  }
  objc_msgSend_numberWithDouble_(v205, v207, v208, v209, v210, v211);
  v213 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v214, (uint64_t)v213, (uint64_t)CFSTR("r4"), v215);

  v216 = (void *)MEMORY[0x1E0CB37E8];
  v1835 = sub_1D5339044((uint64_t)__p, 1u);
  v1836 = v217;
  v218 = (double *)sub_1D53390D4((uint64_t)&v1835, 0);
  objc_msgSend_numberWithDouble_(v216, v219, v220, v221, v222, *v218);
  v223 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v224, (uint64_t)v223, (uint64_t)CFSTR("g0"), v225);

  v226 = (void *)MEMORY[0x1E0CB37E8];
  v1835 = sub_1D5339044((uint64_t)__p, 1u);
  v1836 = v227;
  v228 = (double *)sub_1D53390D4((uint64_t)&v1835, 1u);
  objc_msgSend_numberWithDouble_(v226, v229, v230, v231, v232, *v228);
  v233 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v234, (uint64_t)v233, (uint64_t)CFSTR("g1"), v235);

  v236 = (void *)MEMORY[0x1E0CB37E8];
  v1835 = sub_1D5339044((uint64_t)__p, 1u);
  v1836 = v237;
  v238 = (double *)sub_1D53390D4((uint64_t)&v1835, 2u);
  objc_msgSend_numberWithDouble_(v236, v239, v240, v241, v242, *v238);
  v243 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v244, (uint64_t)v243, (uint64_t)CFSTR("g2"), v245);

  v246 = (void *)MEMORY[0x1E0CB37E8];
  v247 = sub_1D53393A0((uint64_t)__p);
  v252 = 0.0;
  if (v247 >= 4)
  {
    v1835 = sub_1D5339044((uint64_t)__p, 1u);
    v1836 = v253;
    v252 = *(double *)sub_1D53390D4((uint64_t)&v1835, 3u);
  }
  objc_msgSend_numberWithDouble_(v246, v248, v249, v250, v251, v252);
  v254 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v255, (uint64_t)v254, (uint64_t)CFSTR("g3"), v256);

  v257 = (void *)MEMORY[0x1E0CB37E8];
  v258 = sub_1D53393A0((uint64_t)__p);
  v263 = 0.0;
  if (v258 >= 5)
  {
    v1835 = sub_1D5339044((uint64_t)__p, 1u);
    v1836 = v264;
    v263 = *(double *)sub_1D53390D4((uint64_t)&v1835, 4u);
  }
  objc_msgSend_numberWithDouble_(v257, v259, v260, v261, v262, v263);
  v265 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v266, (uint64_t)v265, (uint64_t)CFSTR("g4"), v267);

  v268 = (void *)MEMORY[0x1E0CB37E8];
  v1835 = sub_1D5339044((uint64_t)__p, 2u);
  v1836 = v269;
  v270 = (double *)sub_1D53390D4((uint64_t)&v1835, 0);
  objc_msgSend_numberWithDouble_(v268, v271, v272, v273, v274, *v270);
  v275 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v276, (uint64_t)v275, (uint64_t)CFSTR("b0"), v277);

  v278 = (void *)MEMORY[0x1E0CB37E8];
  v1835 = sub_1D5339044((uint64_t)__p, 2u);
  v1836 = v279;
  v280 = (double *)sub_1D53390D4((uint64_t)&v1835, 1u);
  objc_msgSend_numberWithDouble_(v278, v281, v282, v283, v284, *v280);
  v285 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v286, (uint64_t)v285, (uint64_t)CFSTR("b1"), v287);

  v288 = (void *)MEMORY[0x1E0CB37E8];
  v1835 = sub_1D5339044((uint64_t)__p, 2u);
  v1836 = v289;
  v290 = (double *)sub_1D53390D4((uint64_t)&v1835, 2u);
  objc_msgSend_numberWithDouble_(v288, v291, v292, v293, v294, *v290);
  v295 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v296, (uint64_t)v295, (uint64_t)CFSTR("b2"), v297);

  v298 = (void *)MEMORY[0x1E0CB37E8];
  v299 = sub_1D53393A0((uint64_t)__p);
  v304 = 0.0;
  if (v299 >= 4)
  {
    v1835 = sub_1D5339044((uint64_t)__p, 2u);
    v1836 = v305;
    v304 = *(double *)sub_1D53390D4((uint64_t)&v1835, 3u);
  }
  objc_msgSend_numberWithDouble_(v298, v300, v301, v302, v303, v304);
  v306 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v307, (uint64_t)v306, (uint64_t)CFSTR("b3"), v308);

  v309 = (void *)MEMORY[0x1E0CB37E8];
  v310 = sub_1D53393A0((uint64_t)__p);
  v315 = 0.0;
  if (v310 >= 5)
  {
    v1835 = sub_1D5339044((uint64_t)__p, 2u);
    v1836 = v316;
    v315 = *(double *)sub_1D53390D4((uint64_t)&v1835, 4u);
  }
  objc_msgSend_numberWithDouble_(v309, v311, v312, v313, v314, v315);
  v317 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v318, (uint64_t)v317, (uint64_t)CFSTR("b4"), v319);

  if (__p[1])
  {
    *(void **)&v1791 = __p[1];
    operator delete(__p[1]);
  }
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 2624))(__p, a1, a2, 0);
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v320, v321, v322, v323, *(double *)__p[0]);
  v324 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v325, (uint64_t)v324, (uint64_t)CFSTR("otrcS0"), v326);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v327, v328, v329, v330, *((double *)__p[0] + 1));
  v331 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v332, (uint64_t)v331, (uint64_t)CFSTR("otrcS1"), v333);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v334, v335, v336, v337, *((double *)__p[0] + 3));
  v338 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v339, (uint64_t)v338, (uint64_t)CFSTR("otrcS2"), v340);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v341, v342, v343, v344, *((double *)__p[0] + 5));
  v345 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v346, (uint64_t)v345, (uint64_t)CFSTR("otrcS3"), v347);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v348, v349, v350, v351, *((double *)__p[0] + 7));
  v352 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v353, (uint64_t)v352, (uint64_t)CFSTR("otrcS4"), v354);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v355, v356, v357, v358, *((double *)__p[0] + 2));
  v359 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v360, (uint64_t)v359, (uint64_t)CFSTR("otrcY1"), v361);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v362, v363, v364, v365, *((double *)__p[0] + 4));
  v366 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v367, (uint64_t)v366, (uint64_t)CFSTR("otrcY2"), v368);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v369, v370, v371, v372, *((double *)__p[0] + 6));
  v373 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v374, (uint64_t)v373, (uint64_t)CFSTR("otrcY3"), v375);

  v376 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v377 = (unint64_t *)((char *)__p[1] + 8);
    do
      v378 = __ldaxr(v377);
    while (__stlxr(v378 - 1, v377));
    if (!v378)
    {
      ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
      std::__shared_weak_count::__release_weak(v376);
    }
  }
  v379 = (void *)MEMORY[0x1E0CB37E8];
  v380 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1376))(a1);
  objc_msgSend_numberWithBool_(v379, v381, v380, v382, v383);
  v384 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v385, (uint64_t)v384, (uint64_t)CFSTR("blackDespeckleEnabled"), v386);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v387, a2, v388, v389);
  v390 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v391, (uint64_t)v390, (uint64_t)CFSTR("shouldExtendRawEnabled"), v392);

  v393 = (void *)MEMORY[0x1E0CB37E8];
  v394 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1208))(a1);
  objc_msgSend_numberWithBool_(v393, v395, v394, v396, v397);
  v398 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v399, (uint64_t)v398, (uint64_t)CFSTR("HREnabled"), v400);

  v401 = (void *)MEMORY[0x1E0CB37E8];
  v402 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2112))(a1);
  objc_msgSend_numberWithBool_(v401, v403, v402, v404, v405);
  v406 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v407, (uint64_t)v406, (uint64_t)CFSTR("SPEEnabled"), v408);

  v409 = (void *)MEMORY[0x1E0CB37E8];
  v410 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1232))(a1);
  objc_msgSend_numberWithBool_(v409, v411, v410, v412, v413);
  v414 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v415, (uint64_t)v414, (uint64_t)CFSTR("NREnabled"), v416);

  v417 = (void *)MEMORY[0x1E0CB37E8];
  v418 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2224))(a1);
  objc_msgSend_numberWithBool_(v417, v419, v418, v420, v421);
  v422 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v423, (uint64_t)v422, (uint64_t)CFSTR("sharpenEdgesEnabled"), v424);

  v425 = (void *)MEMORY[0x1E0CB37E8];
  v426 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2264))(a1);
  objc_msgSend_numberWithBool_(v425, v427, v426, v428, v429);
  v430 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v431, (uint64_t)v430, (uint64_t)CFSTR("chromaBlurEnabled"), v432);

  v433 = (void *)MEMORY[0x1E0CB37E8];
  v434 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 2408))(a1, a2);
  objc_msgSend_numberWithBool_(v433, v435, v434, v436, v437);
  v438 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v439, (uint64_t)v438, (uint64_t)CFSTR("boostEnabled"), v440);

  objc_msgSend_setObject_forKeyedSubscript_(v8, v441, (uint64_t)&unk_1E99CB280, (uint64_t)CFSTR("boostKind"), v442);
  objc_msgSend_setObject_forKeyedSubscript_(v8, v443, (uint64_t)&unk_1E99CC258, (uint64_t)CFSTR("gamutLimitationCase"), v444);
  v445 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2120))(a1);
  objc_msgSend_numberWithDouble_(v445, v446, v447, v448, v449);
  v450 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v451, (uint64_t)v450, (uint64_t)CFSTR("SPEThreshold"), v452);

  v453 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1448))(a1);
  objc_msgSend_numberWithDouble_(v453, v454, v455, v456, v457);
  v458 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v459, (uint64_t)v458, (uint64_t)CFSTR("sharpenRadius"), v460);

  v461 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2232))(a1);
  objc_msgSend_numberWithDouble_(v461, v462, v463, v464, v465);
  v466 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v467, (uint64_t)v466, (uint64_t)CFSTR("sharpenIntensity"), v468);

  v469 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2256))(a1);
  objc_msgSend_numberWithDouble_(v469, v470, v471, v472, v473);
  v474 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v475, (uint64_t)v474, (uint64_t)CFSTR("sharpenAbsoluteLimit"), v476);

  v477 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2240))(a1);
  objc_msgSend_numberWithDouble_(v477, v478, v479, v480, v481);
  v482 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v483, (uint64_t)v482, (uint64_t)CFSTR("sharpenEdgeIntensity"), v484);

  v485 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1480))(a1);
  objc_msgSend_numberWithDouble_(v485, v486, v487, v488, v489);
  v490 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v491, (uint64_t)v490, (uint64_t)CFSTR("sharpenEdgeThreshold"), v492);

  v493 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1488))(a1);
  objc_msgSend_numberWithDouble_(v493, v494, v495, v496, v497);
  v498 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v499, (uint64_t)v498, (uint64_t)CFSTR("sharpenEdgeMaskSoftness"), v500);

  v501 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1496))(a1);
  objc_msgSend_numberWithDouble_(v501, v502, v503, v504, v505);
  v506 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v507, (uint64_t)v506, (uint64_t)off_1EFF31F40[0], v508);

  v509 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1504))(a1);
  objc_msgSend_numberWithDouble_(v509, v510, v511, v512, v513);
  v514 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v515, (uint64_t)v514, (uint64_t)off_1EFF31F18[0], v516);

  v517 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1552))(a1);
  objc_msgSend_numberWithDouble_(v517, v518, v519, v520, v521);
  v522 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v523, (uint64_t)v522, (uint64_t)CFSTR("chromaBlurNoiseFactor"), v524);

  v525 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1768))(a1);
  objc_msgSend_numberWithDouble_(v525, v526, v527, v528, v529);
  v530 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v531, (uint64_t)v530, (uint64_t)off_1EFF31E28[0], v532);

  v533 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2304))(a1);
  objc_msgSend_numberWithDouble_(v533, v534, v535, v536, v537);
  v538 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v539, (uint64_t)v538, (uint64_t)off_1EFF31F20[0], v540);

  v541 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2312))(a1);
  objc_msgSend_numberWithDouble_(v541, v542, v543, v544, v545);
  v546 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v547, (uint64_t)v546, (uint64_t)CFSTR("chromaBlurEdgeThreshold2"), v548);

  v549 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2280))(a1);
  objc_msgSend_numberWithDouble_(v549, v550, v551, v552, v553);
  v554 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v555, (uint64_t)v554, (uint64_t)CFSTR("chromaBlurRadius2"), v556);

  v557 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2432))(a1);
  objc_msgSend_numberWithDouble_(v557, v558, v559, v560, v561);
  v562 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v563, (uint64_t)v562, (uint64_t)CFSTR("antiAliasingFilterStrength"), v564);

  v565 = (void *)MEMORY[0x1E0CB37E8];
  v566 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2472))(a1);
  objc_msgSend_numberWithBool_(v565, v567, v566 ^ 1u, v568, v569);
  v570 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v571, (uint64_t)v570, (uint64_t)CFSTR("noAntiAliasingFilter"), v572);

  v573 = (void *)MEMORY[0x1E0CB37E8];
  v574 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2464))(a1);
  objc_msgSend_numberWithBool_(v573, v575, v574, v576, v577);
  v578 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v579, (uint64_t)v578, (uint64_t)CFSTR("powerBlurThreePass"), v580);

  v581 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1752))(a1);
  objc_msgSend_numberWithDouble_(v581, v582, v583, v584, v585);
  v586 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v587, (uint64_t)v586, (uint64_t)CFSTR("greenReconstructionEdgeScale"), v588);

  v589 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1568))(a1);
  objc_msgSend_numberWithDouble_(v589, v590, v591, v592, v593);
  v594 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v595, (uint64_t)v594, (uint64_t)CFSTR("scale1"), v596);

  v597 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1576))(a1);
  objc_msgSend_numberWithDouble_(v597, v598, v599, v600, v601);
  v602 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v603, (uint64_t)v602, (uint64_t)CFSTR("scale2"), v604);

  v605 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1272))(a1);
  objc_msgSend_numberWithDouble_(v605, v606, v607, v608, v609);
  v610 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v611, (uint64_t)v610, (uint64_t)CFSTR("boostTransitionPoint"), v612);

  v613 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1280))(a1);
  objc_msgSend_numberWithDouble_(v613, v614, v615, v616, v617);
  v618 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v619, (uint64_t)v618, (uint64_t)CFSTR("boostTransitionWidth"), v620);

  v621 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2416))(a1);
  objc_msgSend_numberWithDouble_(v621, v622, v623, v624, v625);
  v626 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v627, (uint64_t)v626, (uint64_t)CFSTR("boostLuminanceAmount"), v628);

  v629 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2400))(a1);
  objc_msgSend_numberWithDouble_(v629, v630, v631, v632, v633);
  v634 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v635, (uint64_t)v634, (uint64_t)CFSTR("boostAmount"), v636);

  v637 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1584))(a1);
  objc_msgSend_numberWithDouble_(v637, v638, v639, v640, v641);
  v642 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v643, (uint64_t)v642, (uint64_t)CFSTR("shadowDesaturatePoint"), v644);

  v645 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1592))(a1);
  objc_msgSend_numberWithDouble_(v645, v646, v647, v648, v649);
  v650 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v651, (uint64_t)v650, (uint64_t)CFSTR("shadowDesaturateWidth"), v652);

  v653 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2216))(a1);
  objc_msgSend_numberWithDouble_(v653, v654, v655, v656, v657);
  v658 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v659, (uint64_t)v658, (uint64_t)CFSTR("shadowDesaturateAmount"), v660);

  v661 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2088))(a1);
  objc_msgSend_numberWithDouble_(v661, v662, v663, v664, v665);
  v666 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v667, (uint64_t)v666, (uint64_t)CFSTR("noiseInterpolant"), v668);

  v669 = (void *)MEMORY[0x1E0CB37E8];
  v670 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
  objc_msgSend_numberWithDouble_(v669, v671, v672, v673, v674, (double)v670);
  v675 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v676, (uint64_t)v675, (uint64_t)CFSTR("ISOSetting"), v677);

  v678 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
  objc_msgSend_numberWithDouble_(v678, v679, v680, v681, v682);
  v683 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v684, (uint64_t)v683, (uint64_t)CFSTR("exposureTime"), v685);

  v686 = (void *)MEMORY[0x1E0CB37E8];
  v687 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2104))(a1);
  objc_msgSend_numberWithBool_(v686, v688, v687, v689, v690);
  v691 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v692, (uint64_t)v691, (uint64_t)CFSTR("noiseTransitionEnabled"), v693);

  v694 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2080))(a1);
  objc_msgSend_numberWithDouble_(v694, v695, v696, v697, v698);
  v699 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v700, (uint64_t)v699, (uint64_t)CFSTR("noiseEstimate"), v701);

  v702 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1384))(a1);
  objc_msgSend_numberWithDouble_(v702, v703, v704, v705, v706);
  v707 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v708, (uint64_t)v707, (uint64_t)CFSTR("greenSplitRed"), v709);

  v710 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1392))(a1);
  objc_msgSend_numberWithDouble_(v710, v711, v712, v713, v714);
  v715 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v716, (uint64_t)v715, (uint64_t)CFSTR("greenSplitGreen1"), v717);

  v718 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1400))(a1);
  objc_msgSend_numberWithDouble_(v718, v719, v720, v721, v722);
  v723 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v724, (uint64_t)v723, (uint64_t)CFSTR("greenSplitBlue"), v725);

  v726 = (void *)MEMORY[0x1E0CB37E8];
  v727 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1408))(a1);
  objc_msgSend_numberWithInt_(v726, v728, v727, v729, v730);
  v731 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v732, (uint64_t)v731, (uint64_t)CFSTR("greenBayerSplit"), v733);

  v734 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2640))(a1);
  objc_msgSend_numberWithDouble_(v734, v735, v736, v737, v738);
  v739 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v740, (uint64_t)v739, (uint64_t)off_1EFF31E38[0], v741);

  v742 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2648))(a1);
  objc_msgSend_numberWithDouble_(v742, v743, v744, v745, v746);
  v747 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v748, (uint64_t)v747, (uint64_t)off_1EFF31E40[0], v749);

  v1832 = 0;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 2128))(__p, a1);
  v750 = (void (***)(void *, uint64_t, uint64_t *, unsigned __int8 *))__p[0];
  v751 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
  (**v750)(v750, v751, &v1835, &v1832);
  v757 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v758 = (unint64_t *)((char *)__p[1] + 8);
    do
      v759 = __ldaxr(v758);
    while (__stlxr(v759 - 1, v758));
    if (!v759)
    {
      ((void (*)(std::__shared_weak_count *))v757->__on_zero_shared)(v757);
      std::__shared_weak_count::__release_weak(v757);
    }
  }
  LODWORD(v756) = v1835;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v752, v753, v754, v755, v756);
  v760 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v761, (uint64_t)v760, (uint64_t)CFSTR("signalNoiseModelA0"), v762);

  LODWORD(v763) = HIDWORD(v1835);
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v764, v765, v766, v767, v763);
  v768 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v769, (uint64_t)v768, (uint64_t)CFSTR("signalNoiseModelB0"), v770);

  LODWORD(v771) = (_DWORD)v1836;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v772, v773, v774, v775, v771);
  v776 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v777, (uint64_t)v776, (uint64_t)CFSTR("signalNoiseModelC0"), v778);

  LODWORD(v779) = HIDWORD(v1836);
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v780, v781, v782, v783, v779);
  v784 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v785, (uint64_t)v784, (uint64_t)CFSTR("signalNoiseModelPRNU0"), v786);

  LODWORD(v787) = v1837;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v788, v789, v790, v791, v787);
  v792 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v793, (uint64_t)v792, (uint64_t)CFSTR("signalNoiseModelA1"), v794);

  LODWORD(v795) = v1838;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v796, v797, v798, v799, v795);
  v800 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v801, (uint64_t)v800, (uint64_t)CFSTR("signalNoiseModelB1"), v802);

  LODWORD(v803) = v1839;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v804, v805, v806, v807, v803);
  v808 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v809, (uint64_t)v808, (uint64_t)CFSTR("signalNoiseModelC1"), v810);

  LODWORD(v811) = v1840;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v812, v813, v814, v815, v811);
  v816 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v817, (uint64_t)v816, (uint64_t)CFSTR("signalNoiseModelPRNU1"), v818);

  LODWORD(v819) = v1841;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v820, v821, v822, v823, v819);
  v824 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v825, (uint64_t)v824, (uint64_t)CFSTR("signalNoiseModelA2"), v826);

  LODWORD(v827) = v1842;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v828, v829, v830, v831, v827);
  v832 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v833, (uint64_t)v832, (uint64_t)CFSTR("signalNoiseModelB2"), v834);

  LODWORD(v835) = v1843;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v836, v837, v838, v839, v835);
  v840 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v841, (uint64_t)v840, (uint64_t)CFSTR("signalNoiseModelC2"), v842);

  LODWORD(v843) = v1844;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v844, v845, v846, v847, v843);
  v848 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v849, (uint64_t)v848, (uint64_t)CFSTR("signalNoiseModelPRNU2"), v850);

  LODWORD(v851) = v1845;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v852, v853, v854, v855, v851);
  v856 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v857, (uint64_t)v856, (uint64_t)CFSTR("signalNoiseModelA3"), v858);

  LODWORD(v859) = v1846;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v860, v861, v862, v863, v859);
  v864 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v865, (uint64_t)v864, (uint64_t)CFSTR("signalNoiseModelB3"), v866);

  LODWORD(v867) = v1847;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v868, v869, v870, v871, v867);
  v872 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v873, (uint64_t)v872, (uint64_t)CFSTR("signalNoiseModelC3"), v874);

  LODWORD(v875) = v1848;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v876, v877, v878, v879, v875);
  v880 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v881, (uint64_t)v880, (uint64_t)CFSTR("signalNoiseModelPRNU3"), v882);

  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v883, v1832, v884, v885);
  v886 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v887, (uint64_t)v886, (uint64_t)CFSTR("individualQuadratics"), v888);

  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1016))(__p, a1);
  v889 = (double *)__p[0];
  v890 = (double *)__p[1];
  if (__p[0] == __p[1])
  {
    v894 = 0;
  }
  else
  {
    v891 = 0;
    v892 = 0;
    do
    {
      v893 = v889[v892];
      if ((LODWORD(v893) & 0x7FFFFFFFu) >= 0x7F800000)
      {
        v1781 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v1781, "RawCameraException");
        __cxa_throw(v1781, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      *((float *)&v1833 + v892) = v893;
      v894 = v892 + 1;
      if (&v889[++v891] == v890)
        break;
    }
    while (v892++ < 3);
    if (&v889[v891] != v890)
    {
      v1788 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v1788, "RawCameraException");
      __cxa_throw(v1788, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (v894 > 3)
      goto LABEL_84;
  }
  bzero((char *)&v1833 + 4 * v894, ((4 * v894) ^ 0xC) + 4);
LABEL_84:
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 2680))(a1, &v1833);
  LODWORD(v896) = v1833;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v897, v898, v899, v900, v896);
  v901 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v902, (uint64_t)v901, (uint64_t)CFSTR("black0"), v903);

  LODWORD(v904) = HIDWORD(v1833);
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v905, v906, v907, v908, v904);
  v909 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v910, (uint64_t)v909, (uint64_t)CFSTR("black1"), v911);

  LODWORD(v912) = (_DWORD)v1834;
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v913, v914, v915, v916, v912);
  v917 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v918, (uint64_t)v917, (uint64_t)CFSTR("black2"), v919);

  LODWORD(v920) = HIDWORD(v1834);
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v921, v922, v923, v924, v920);
  v925 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v926, (uint64_t)v925, (uint64_t)CFSTR("black3"), v927);

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 1120))(&v1833, a1);
  v928 = v1833;
  v929 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v928 + 8))(__p, v928, v929);
  v934 = v1834;
  if (v1834)
  {
    v935 = (unint64_t *)&v1834->__shared_owners_;
    do
      v936 = __ldaxr(v935);
    while (__stlxr(v936 - 1, v935));
    if (!v936)
    {
      ((void (*)(std::__shared_weak_count *))v934->__on_zero_shared)(v934);
      std::__shared_weak_count::__release_weak(v934);
    }
  }
  v937 = (double *)__p[0];
  if ((void *)((char *)__p[1] - (char *)__p[0]) != (void *)32)
  {
    v1786 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v1786, "RawCameraException");
    __cxa_throw(v1786, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (__p[0] == __p[1])
  {
    LODWORD(v938) = 0;
    goto LABEL_107;
  }
  LODWORD(v938) = 1;
  while (1)
  {
    v939 = *v937;
    if ((LODWORD(v939) & 0x7FFFFFFFu) >= 0x7F800000)
    {
      v1782 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v1782, "RawCameraException");
      __cxa_throw(v1782, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if ((_DWORD)v938 == 3)
    {
      objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v930, v931, v932, v933);
      v940 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v8, v945, (uint64_t)v940, (uint64_t)CFSTR("darkNoise2"), v946);
      goto LABEL_101;
    }
    if ((_DWORD)v938 == 2)
    {
      objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v930, v931, v932, v933);
      v940 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v8, v943, (uint64_t)v940, (uint64_t)CFSTR("darkNoise1"), v944);
      goto LABEL_101;
    }
    if ((_DWORD)v938 != 1)
      break;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v930, v931, v932, v933);
    v940 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v941, (uint64_t)v940, (uint64_t)CFSTR("darkNoise0"), v942);
LABEL_101:

    ++v937;
    v947 = (double *)__p[1];
    LODWORD(v938) = v938 + 1;
    if (v937 == __p[1])
    {
      LODWORD(v938) = v938 - 1;
      goto LABEL_105;
    }
  }
  objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v930, v931, v932, v933);
  v948 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v949, (uint64_t)v948, (uint64_t)CFSTR("darkNoise3"), v950);

  ++v937;
  v947 = (double *)__p[1];
LABEL_105:
  if (v937 != v947)
  {
    v1787 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v1787, "RawCameraException");
    __cxa_throw(v1787, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v938 <= 3)
  {
LABEL_107:
    v938 = v938;
    do
    {
      v951 = CFSTR("darkNoise3");
      if (v938 <= 2)
        v951 = off_1E997DD40[v938];
      objc_msgSend_setObject_forKeyedSubscript_(v8, v930, (uint64_t)&unk_1E99D12E0, (uint64_t)v951, v933);
      ++v938;
    }
    while ((_DWORD)v938 != 4);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v952 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2640))(a1);
  objc_msgSend_numberWithDouble_(v952, v953, v954, v955, v956);
  v957 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v958, (uint64_t)v957, (uint64_t)off_1EFF31E38[0], v959);

  v960 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2648))(a1);
  objc_msgSend_numberWithDouble_(v960, v961, v962, v963, v964);
  v965 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v966, (uint64_t)v965, (uint64_t)off_1EFF31E40[0], v967);

  v968 = (void *)MEMORY[0x1E0CB37E8];
  v969 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 520))(a1);
  objc_msgSend_numberWithInt_(v968, v970, v969, v971, v972);
  v973 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v974, (uint64_t)v973, (uint64_t)CFSTR("destWidth"), v975);

  v976 = (void *)MEMORY[0x1E0CB37E8];
  v977 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 520))(a1);
  objc_msgSend_numberWithInt_(v976, v978, HIDWORD(v977), v979, v980);
  v981 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v982, (uint64_t)v981, (uint64_t)CFSTR("destHeight"), v983);

  v984 = (void *)MEMORY[0x1E0CB37E8];
  v985 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 512))(a1);
  objc_msgSend_numberWithInt_(v984, v986, v985, v987, v988);
  v989 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v990, (uint64_t)v989, (uint64_t)CFSTR("sourceWidth"), v991);

  v992 = (void *)MEMORY[0x1E0CB37E8];
  v993 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 512))(a1);
  objc_msgSend_numberWithInt_(v992, v994, HIDWORD(v993), v995, v996);
  v997 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v998, (uint64_t)v997, (uint64_t)CFSTR("sourceHeight"), v999);

  v1000 = (void *)MEMORY[0x1E0CB37E8];
  v1001 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 504))(a1);
  objc_msgSend_numberWithInt_(v1000, v1002, v1001, v1003, v1004);
  v1005 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1006, (uint64_t)v1005, (uint64_t)CFSTR("destHorizOffset"), v1007);

  v1008 = (void *)MEMORY[0x1E0CB37E8];
  v1009 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 504))(a1);
  objc_msgSend_numberWithInt_(v1008, v1010, HIDWORD(v1009), v1011, v1012);
  v1013 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1014, (uint64_t)v1013, (uint64_t)CFSTR("destVertOffset"), v1015);

  v1016 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v1017, (uint64_t)CFSTR("{%d, %d}"), v1018, v1019, v1016, HIDWORD(v1016));
  v1020 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1021, (uint64_t)v1020, (uint64_t)off_1EFF31E70[0], v1022);

  v1023 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v1024, (uint64_t)CFSTR("{{%d, %d}, {%d, %d}}"), v1025, v1026, v1023, HIDWORD(v1023), v1024, (unint64_t)v1024 >> 32);
  v1027 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1028, (uint64_t)v1027, (uint64_t)off_1EFF31E78[0], v1029);

  v1030 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 456))(a1);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v1031, (uint64_t)CFSTR("{{%d, %d}, {%d, %d}}"), v1032, v1033, v1030, HIDWORD(v1030), v1031, (unint64_t)v1031 >> 32);
  v1034 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1035, (uint64_t)v1034, (uint64_t)off_1EFF31E80[0], v1036);

  v1037 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 496))(a1);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v1038, (uint64_t)CFSTR("{{%d, %d}, {%d, %d}}"), v1039, v1040, v1037, HIDWORD(v1037), v1038, (unint64_t)v1038 >> 32);
  v1041 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1042, (uint64_t)v1041, (uint64_t)CFSTR("actualCropRect"), v1043);

  v1044 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 496))(a1);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v1045, (uint64_t)CFSTR("{{%d, %d}, {%d, %d}}"), v1046, v1047, v1044, HIDWORD(v1044), v1045, (unint64_t)v1045 >> 32);
  v1048 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1049, (uint64_t)v1048, (uint64_t)CFSTR("paddedCropRect"), v1050);

  v1051 = (void *)MEMORY[0x1E0CB37E8];
  v1052 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
  objc_msgSend_numberWithInt_(v1051, v1053, v1052, v1054, v1055);
  v1056 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1057, (uint64_t)v1056, (uint64_t)off_1EFF31F00[0], v1058);

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1) == 9)
  {
    v1059 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1008))(a1);
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v1060, (uint64_t)CFSTR("{{%d, %d}, {%d, %d}}"), v1061, v1062, v1059, HIDWORD(v1059), v1060, (unint64_t)v1060 >> 32);
    v1063 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1064, (uint64_t)v1063, (uint64_t)CFSTR("v2blackSampleArea"), v1065);

  }
  v1066 = (void *)MEMORY[0x1E0CB37E8];
  v1067 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 576))(a1);
  objc_msgSend_numberWithInt_(v1066, v1068, v1067, v1069, v1070);
  v1071 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1072, (uint64_t)v1071, (uint64_t)CFSTR("bitsPerSample"), v1073);

  v1074 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2528))(a1);
  objc_msgSend_numberWithDouble_(v1074, v1075, v1076, v1077, v1078);
  v1079 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1080, (uint64_t)v1079, (uint64_t)CFSTR("CNRAmount"), v1081);

  v1082 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2608))(a1);
  objc_msgSend_numberWithDouble_(v1082, v1083, v1084, v1085, v1086);
  v1087 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1088, (uint64_t)v1087, (uint64_t)CFSTR("CNRNoiseFactor"), v1089);

  v1090 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2600))(a1);
  objc_msgSend_numberWithDouble_(v1090, v1091, v1092, v1093, v1094);
  v1095 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1096, (uint64_t)v1095, (uint64_t)CFSTR("CNRRadius"), v1097);

  v1098 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2616))(a1);
  objc_msgSend_numberWithDouble_(v1098, v1099, v1100, v1101, v1102);
  v1103 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1104, (uint64_t)v1103, (uint64_t)CFSTR("CNRBias"), v1105);

  v1820 = 0u;
  v1821 = 0u;
  v1818 = 0u;
  v1819 = 0u;
  v1816 = 0u;
  v1817 = 0u;
  v1814 = 0u;
  v1815 = 0u;
  v1812 = 0u;
  v1813 = 0u;
  v1810 = 0u;
  v1811 = 0u;
  v1808 = 0u;
  v1809 = 0u;
  v1806 = 0u;
  v1807 = 0u;
  v1804 = 0u;
  v1805 = 0u;
  v1802 = 0u;
  v1803 = 0u;
  v1800 = 0u;
  v1801 = 0u;
  v1798 = 0u;
  v1799 = 0u;
  v1796 = 0u;
  v1797 = 0u;
  v1794 = 0u;
  v1795 = 0u;
  v1792 = 0u;
  v1793 = 0u;
  *(_OWORD *)__p = 0u;
  v1791 = 0u;
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 2696))(__p, a1, a2);
  objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], v1106, v1803, v1107, v1108);
  v1109 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1110, (uint64_t)v1109, (uint64_t)CFSTR("FujiCAEnable"), v1111);

  objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], v1112, BYTE12(v1815), v1113, v1114);
  v1115 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v8, v1116, (uint64_t)v1115, (uint64_t)CFSTR("FujiLensCorrectionEnable"), v1117);

  if ((_BYTE)v1803)
  {
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v1118, DWORD1(v1803), v1119, v1120);
    v1121 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1122, (uint64_t)v1121, (uint64_t)CFSTR("FujiCANumberOfPoints"), v1123);

    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v1124, DWORD2(v1803), v1125, v1126);
    v1127 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1128, (uint64_t)v1127, (uint64_t)CFSTR("FujiCAMaxDistance"), v1129);

    LODWORD(v1130) = HIDWORD(v1803);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1131, v1132, v1133, v1134, v1130);
    v1135 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1136, (uint64_t)v1135, (uint64_t)CFSTR("lrTable0"), v1137);

    LODWORD(v1138) = v1804;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1139, v1140, v1141, v1142, v1138);
    v1143 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1144, (uint64_t)v1143, (uint64_t)CFSTR("lrTable1"), v1145);

    LODWORD(v1146) = DWORD1(v1804);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1147, v1148, v1149, v1150, v1146);
    v1151 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1152, (uint64_t)v1151, (uint64_t)CFSTR("lrTable2"), v1153);

    LODWORD(v1154) = DWORD2(v1804);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1155, v1156, v1157, v1158, v1154);
    v1159 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1160, (uint64_t)v1159, (uint64_t)CFSTR("lrTable3"), v1161);

    LODWORD(v1162) = HIDWORD(v1804);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1163, v1164, v1165, v1166, v1162);
    v1167 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1168, (uint64_t)v1167, (uint64_t)CFSTR("lrTable4"), v1169);

    LODWORD(v1170) = v1805;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1171, v1172, v1173, v1174, v1170);
    v1175 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1176, (uint64_t)v1175, (uint64_t)CFSTR("lrTable5"), v1177);

    LODWORD(v1178) = DWORD1(v1805);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1179, v1180, v1181, v1182, v1178);
    v1183 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1184, (uint64_t)v1183, (uint64_t)CFSTR("lrTable6"), v1185);

    LODWORD(v1186) = DWORD2(v1805);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1187, v1188, v1189, v1190, v1186);
    v1191 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1192, (uint64_t)v1191, (uint64_t)CFSTR("lrTable7"), v1193);

    LODWORD(v1194) = HIDWORD(v1805);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1195, v1196, v1197, v1198, v1194);
    v1199 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1200, (uint64_t)v1199, (uint64_t)CFSTR("lrTable8"), v1201);

    LODWORD(v1202) = v1806;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1203, v1204, v1205, v1206, v1202);
    v1207 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1208, (uint64_t)v1207, (uint64_t)CFSTR("lrTable9"), v1209);

    LODWORD(v1210) = DWORD1(v1806);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1211, v1212, v1213, v1214, v1210);
    v1215 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1216, (uint64_t)v1215, (uint64_t)CFSTR("lrTable10"), v1217);

    LODWORD(v1218) = DWORD2(v1806);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1219, v1220, v1221, v1222, v1218);
    v1223 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1224, (uint64_t)v1223, (uint64_t)CFSTR("lrTable11"), v1225);

    LODWORD(v1226) = HIDWORD(v1806);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1227, v1228, v1229, v1230, v1226);
    v1231 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1232, (uint64_t)v1231, (uint64_t)CFSTR("lrTable12"), v1233);

    LODWORD(v1234) = v1807;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1235, v1236, v1237, v1238, v1234);
    v1239 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1240, (uint64_t)v1239, (uint64_t)CFSTR("lrTable13"), v1241);

    LODWORD(v1242) = DWORD1(v1807);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1243, v1244, v1245, v1246, v1242);
    v1247 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1248, (uint64_t)v1247, (uint64_t)CFSTR("lrTable14"), v1249);

    LODWORD(v1250) = DWORD2(v1807);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1251, v1252, v1253, v1254, v1250);
    v1255 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1256, (uint64_t)v1255, (uint64_t)CFSTR("lrTable15"), v1257);

    LODWORD(v1258) = HIDWORD(v1807);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1259, v1260, v1261, v1262, v1258);
    v1263 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1264, (uint64_t)v1263, (uint64_t)CFSTR("caRed0"), v1265);

    LODWORD(v1266) = v1808;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1267, v1268, v1269, v1270, v1266);
    v1271 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1272, (uint64_t)v1271, (uint64_t)CFSTR("caRed1"), v1273);

    LODWORD(v1274) = DWORD1(v1808);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1275, v1276, v1277, v1278, v1274);
    v1279 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1280, (uint64_t)v1279, (uint64_t)CFSTR("caRed2"), v1281);

    LODWORD(v1282) = DWORD2(v1808);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1283, v1284, v1285, v1286, v1282);
    v1287 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1288, (uint64_t)v1287, (uint64_t)CFSTR("caRed3"), v1289);

    LODWORD(v1290) = HIDWORD(v1808);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1291, v1292, v1293, v1294, v1290);
    v1295 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1296, (uint64_t)v1295, (uint64_t)CFSTR("caRed4"), v1297);

    LODWORD(v1298) = v1809;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1299, v1300, v1301, v1302, v1298);
    v1303 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1304, (uint64_t)v1303, (uint64_t)CFSTR("caRed5"), v1305);

    LODWORD(v1306) = DWORD1(v1809);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1307, v1308, v1309, v1310, v1306);
    v1311 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1312, (uint64_t)v1311, (uint64_t)CFSTR("caRed6"), v1313);

    LODWORD(v1314) = DWORD2(v1809);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1315, v1316, v1317, v1318, v1314);
    v1319 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1320, (uint64_t)v1319, (uint64_t)CFSTR("caRed7"), v1321);

    LODWORD(v1322) = HIDWORD(v1809);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1323, v1324, v1325, v1326, v1322);
    v1327 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1328, (uint64_t)v1327, (uint64_t)CFSTR("caRed8"), v1329);

    LODWORD(v1330) = v1810;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1331, v1332, v1333, v1334, v1330);
    v1335 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1336, (uint64_t)v1335, (uint64_t)CFSTR("caRed9"), v1337);

    LODWORD(v1338) = DWORD1(v1810);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1339, v1340, v1341, v1342, v1338);
    v1343 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1344, (uint64_t)v1343, (uint64_t)CFSTR("caRed10"), v1345);

    LODWORD(v1346) = DWORD2(v1810);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1347, v1348, v1349, v1350, v1346);
    v1351 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1352, (uint64_t)v1351, (uint64_t)CFSTR("caRed11"), v1353);

    LODWORD(v1354) = HIDWORD(v1810);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1355, v1356, v1357, v1358, v1354);
    v1359 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1360, (uint64_t)v1359, (uint64_t)CFSTR("caRed12"), v1361);

    LODWORD(v1362) = v1811;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1363, v1364, v1365, v1366, v1362);
    v1367 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1368, (uint64_t)v1367, (uint64_t)CFSTR("caRed13"), v1369);

    LODWORD(v1370) = DWORD1(v1811);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1371, v1372, v1373, v1374, v1370);
    v1375 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1376, (uint64_t)v1375, (uint64_t)CFSTR("caRed14"), v1377);

    LODWORD(v1378) = DWORD2(v1811);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1379, v1380, v1381, v1382, v1378);
    v1383 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1384, (uint64_t)v1383, (uint64_t)CFSTR("caRed15"), v1385);

    LODWORD(v1386) = HIDWORD(v1811);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1387, v1388, v1389, v1390, v1386);
    v1391 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1392, (uint64_t)v1391, (uint64_t)CFSTR("caBlue0"), v1393);

    LODWORD(v1394) = v1812;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1395, v1396, v1397, v1398, v1394);
    v1399 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1400, (uint64_t)v1399, (uint64_t)CFSTR("caBlue1"), v1401);

    LODWORD(v1402) = DWORD1(v1812);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1403, v1404, v1405, v1406, v1402);
    v1407 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1408, (uint64_t)v1407, (uint64_t)CFSTR("caBlue2"), v1409);

    LODWORD(v1410) = DWORD2(v1812);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1411, v1412, v1413, v1414, v1410);
    v1415 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1416, (uint64_t)v1415, (uint64_t)CFSTR("caBlue3"), v1417);

    LODWORD(v1418) = HIDWORD(v1812);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1419, v1420, v1421, v1422, v1418);
    v1423 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1424, (uint64_t)v1423, (uint64_t)CFSTR("caBlue4"), v1425);

    LODWORD(v1426) = v1813;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1427, v1428, v1429, v1430, v1426);
    v1431 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1432, (uint64_t)v1431, (uint64_t)CFSTR("caBlue5"), v1433);

    LODWORD(v1434) = DWORD1(v1813);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1435, v1436, v1437, v1438, v1434);
    v1439 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1440, (uint64_t)v1439, (uint64_t)CFSTR("caBlue6"), v1441);

    LODWORD(v1442) = DWORD2(v1813);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1443, v1444, v1445, v1446, v1442);
    v1447 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1448, (uint64_t)v1447, (uint64_t)CFSTR("caBlue7"), v1449);

    LODWORD(v1450) = HIDWORD(v1813);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1451, v1452, v1453, v1454, v1450);
    v1455 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1456, (uint64_t)v1455, (uint64_t)CFSTR("caBlue8"), v1457);

    LODWORD(v1458) = v1814;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1459, v1460, v1461, v1462, v1458);
    v1463 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1464, (uint64_t)v1463, (uint64_t)CFSTR("caBlue9"), v1465);

    LODWORD(v1466) = DWORD1(v1814);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1467, v1468, v1469, v1470, v1466);
    v1471 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1472, (uint64_t)v1471, (uint64_t)CFSTR("caBlue10"), v1473);

    LODWORD(v1474) = DWORD2(v1814);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1475, v1476, v1477, v1478, v1474);
    v1479 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1480, (uint64_t)v1479, (uint64_t)CFSTR("caBlue11"), v1481);

    LODWORD(v1482) = HIDWORD(v1814);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1483, v1484, v1485, v1486, v1482);
    v1487 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1488, (uint64_t)v1487, (uint64_t)CFSTR("caBlue12"), v1489);

    LODWORD(v1490) = v1815;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1491, v1492, v1493, v1494, v1490);
    v1495 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1496, (uint64_t)v1495, (uint64_t)CFSTR("caBlue13"), v1497);

    LODWORD(v1498) = DWORD1(v1815);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1499, v1500, v1501, v1502, v1498);
    v1503 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1504, (uint64_t)v1503, (uint64_t)CFSTR("caBlue14"), v1505);

    LODWORD(v1506) = DWORD2(v1815);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1507, v1508, v1509, v1510, v1506);
    v1511 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1512, (uint64_t)v1511, (uint64_t)CFSTR("caBlue15"), v1513);

  }
  if (BYTE12(v1815))
  {
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v1118, DWORD1(v1816), v1119, v1120);
    v1514 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1515, (uint64_t)v1514, (uint64_t)CFSTR("FujiLensCorrectionNumberOfPoints"), v1516);

    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v1517, v1816, v1518, v1519);
    v1520 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1521, (uint64_t)v1520, (uint64_t)CFSTR("FujiLensCorrectionMaxDistance"), v1522);

    LODWORD(v1523) = DWORD2(v1816);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1524, v1525, v1526, v1527, v1523);
    v1528 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1529, (uint64_t)v1528, (uint64_t)CFSTR("FujiLensCorrectionLR0"), v1530);

    LODWORD(v1531) = HIDWORD(v1816);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1532, v1533, v1534, v1535, v1531);
    v1536 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1537, (uint64_t)v1536, (uint64_t)CFSTR("FujiLensCorrectionLR1"), v1538);

    LODWORD(v1539) = v1817;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1540, v1541, v1542, v1543, v1539);
    v1544 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1545, (uint64_t)v1544, (uint64_t)CFSTR("FujiLensCorrectionLR2"), v1546);

    LODWORD(v1547) = DWORD1(v1817);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1548, v1549, v1550, v1551, v1547);
    v1552 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1553, (uint64_t)v1552, (uint64_t)CFSTR("FujiLensCorrectionLR3"), v1554);

    LODWORD(v1555) = DWORD2(v1817);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1556, v1557, v1558, v1559, v1555);
    v1560 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1561, (uint64_t)v1560, (uint64_t)CFSTR("FujiLensCorrectionLR4"), v1562);

    LODWORD(v1563) = HIDWORD(v1817);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1564, v1565, v1566, v1567, v1563);
    v1568 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1569, (uint64_t)v1568, (uint64_t)CFSTR("FujiLensCorrectionLR5"), v1570);

    LODWORD(v1571) = v1818;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1572, v1573, v1574, v1575, v1571);
    v1576 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1577, (uint64_t)v1576, (uint64_t)CFSTR("FujiLensCorrectionLR6"), v1578);

    LODWORD(v1579) = DWORD1(v1818);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1580, v1581, v1582, v1583, v1579);
    v1584 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1585, (uint64_t)v1584, (uint64_t)CFSTR("FujiLensCorrectionLR7"), v1586);

    LODWORD(v1587) = DWORD2(v1818);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1588, v1589, v1590, v1591, v1587);
    v1592 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1593, (uint64_t)v1592, (uint64_t)CFSTR("FujiLensCorrectionLR8"), v1594);

    LODWORD(v1595) = HIDWORD(v1818);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1596, v1597, v1598, v1599, v1595);
    v1600 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1601, (uint64_t)v1600, (uint64_t)CFSTR("FujiLensCorrectionLR9"), v1602);

    LODWORD(v1603) = v1819;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1604, v1605, v1606, v1607, v1603);
    v1608 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1609, (uint64_t)v1608, (uint64_t)CFSTR("FujiLensCorrectionLR10"), v1610);

    LODWORD(v1611) = DWORD1(v1819);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1612, v1613, v1614, v1615, v1611);
    v1616 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1617, (uint64_t)v1616, (uint64_t)CFSTR("FujiLensCorrectionLR11"), v1618);

    LODWORD(v1619) = DWORD2(v1819);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1620, v1621, v1622, v1623, v1619);
    v1624 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1625, (uint64_t)v1624, (uint64_t)CFSTR("FujiLensCorrectionLR12"), v1626);

    LODWORD(v1627) = HIDWORD(v1819);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1628, v1629, v1630, v1631, v1627);
    v1632 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1633, (uint64_t)v1632, (uint64_t)CFSTR("FujiLensCorrectionLR13"), v1634);

    LODWORD(v1635) = v1820;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1636, v1637, v1638, v1639, v1635);
    v1640 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1641, (uint64_t)v1640, (uint64_t)CFSTR("FujiLensCorrectionLR14"), v1642);

    LODWORD(v1643) = DWORD1(v1820);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1644, v1645, v1646, v1647, v1643);
    v1648 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1649, (uint64_t)v1648, (uint64_t)CFSTR("FujiLensCorrectionLR15"), v1650);

    LODWORD(v1651) = DWORD2(v1820);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1652, v1653, v1654, v1655, v1651);
    v1656 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1657, (uint64_t)v1656, (uint64_t)CFSTR("FujiLensCorrectionFactor0"), v1658);

    LODWORD(v1659) = HIDWORD(v1820);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1660, v1661, v1662, v1663, v1659);
    v1664 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1665, (uint64_t)v1664, (uint64_t)CFSTR("FujiLensCorrectionFactor1"), v1666);

    LODWORD(v1667) = v1821;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1668, v1669, v1670, v1671, v1667);
    v1672 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1673, (uint64_t)v1672, (uint64_t)CFSTR("FujiLensCorrectionFactor2"), v1674);

    LODWORD(v1675) = DWORD1(v1821);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1676, v1677, v1678, v1679, v1675);
    v1680 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1681, (uint64_t)v1680, (uint64_t)CFSTR("FujiLensCorrectionFactor3"), v1682);

    LODWORD(v1683) = DWORD2(v1821);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1684, v1685, v1686, v1687, v1683);
    v1688 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1689, (uint64_t)v1688, (uint64_t)CFSTR("FujiLensCorrectionFactor4"), v1690);

    LODWORD(v1691) = HIDWORD(v1821);
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1692, v1693, v1694, v1695, v1691);
    v1696 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1697, (uint64_t)v1696, (uint64_t)CFSTR("FujiLensCorrectionFactor5"), v1698);

    LODWORD(v1699) = v1822;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1700, v1701, v1702, v1703, v1699);
    v1704 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1705, (uint64_t)v1704, (uint64_t)CFSTR("FujiLensCorrectionFactor6"), v1706);

    LODWORD(v1707) = v1823;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1708, v1709, v1710, v1711, v1707);
    v1712 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1713, (uint64_t)v1712, (uint64_t)CFSTR("FujiLensCorrectionFactor7"), v1714);

    LODWORD(v1715) = v1824;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1716, v1717, v1718, v1719, v1715);
    v1720 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1721, (uint64_t)v1720, (uint64_t)CFSTR("FujiLensCorrectionFactor8"), v1722);

    LODWORD(v1723) = v1825;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1724, v1725, v1726, v1727, v1723);
    v1728 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1729, (uint64_t)v1728, (uint64_t)CFSTR("FujiLensCorrectionFactor9"), v1730);

    LODWORD(v1731) = v1826;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1732, v1733, v1734, v1735, v1731);
    v1736 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1737, (uint64_t)v1736, (uint64_t)CFSTR("FujiLensCorrectionFactor10"), v1738);

    LODWORD(v1739) = v1827;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1740, v1741, v1742, v1743, v1739);
    v1744 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1745, (uint64_t)v1744, (uint64_t)CFSTR("FujiLensCorrectionFactor11"), v1746);

    LODWORD(v1747) = v1828;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1748, v1749, v1750, v1751, v1747);
    v1752 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1753, (uint64_t)v1752, (uint64_t)CFSTR("FujiLensCorrectionFactor12"), v1754);

    LODWORD(v1755) = v1829;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1756, v1757, v1758, v1759, v1755);
    v1760 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1761, (uint64_t)v1760, (uint64_t)CFSTR("FujiLensCorrectionFactor13"), v1762);

    LODWORD(v1763) = v1830;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1764, v1765, v1766, v1767, v1763);
    v1768 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1769, (uint64_t)v1768, (uint64_t)CFSTR("FujiLensCorrectionFactor14"), v1770);

    LODWORD(v1771) = v1831;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1772, v1773, v1774, v1775, v1771);
    v1776 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v8, v1777, (uint64_t)v1776, (uint64_t)CFSTR("FujiLensCorrectionFactor15"), v1778);

  }
  v1779 = v8;

  return v1779;
}

void sub_1D5323B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17)
{
  void *v17;
  void *v18;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id sub_1D5324790(uint64_t a1, unsigned int a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  double v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  double v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  const char *v118;
  uint64_t v119;
  void *v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  const char *v126;
  uint64_t v127;
  void *v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  const char *v134;
  uint64_t v135;
  void *v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  const char *v142;
  uint64_t v143;
  void *v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  const char *v150;
  uint64_t v151;
  void *v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  const char *v158;
  uint64_t v159;
  void *v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  const char *v166;
  uint64_t v167;
  void *v168;
  int v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  double v174;
  void *v175;
  const char *v176;
  uint64_t v177;
  void *v178;
  int v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  double v184;
  void *v185;
  const char *v186;
  uint64_t v187;
  void *v188;
  const char *v189;
  uint64_t v190;
  uint64_t v191;
  _BOOL8 v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  const char *v197;
  uint64_t v198;
  float v199;
  const char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  const char *v205;
  uint64_t v206;
  void *v207;
  const char *v208;
  uint64_t v209;
  const char *v210;
  uint64_t v211;
  const char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  const char *v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  const char *v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  const char *v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  const char *v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  const char *v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  const char *v241;
  uint64_t v242;
  const char *v243;
  uint64_t v244;
  void *v245;
  const char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  const char *v251;
  uint64_t v252;
  void *v253;
  const char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  const char *v259;
  uint64_t v260;
  const char *v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  const char *v265;
  uint64_t v266;
  const char *v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  const char *v271;
  uint64_t v272;
  void *v273;
  const char *v274;
  uint64_t v275;
  void *v276;
  const char *v277;
  uint64_t v278;
  void *v279;
  const char *v280;
  uint64_t v281;
  void *v282;
  const char *v283;
  uint64_t v284;
  void *v285;
  const char *v286;
  uint64_t v287;
  void *v288;
  const char *v289;
  uint64_t v290;
  void *v291;
  const char *v292;
  uint64_t v293;
  void *v294;
  const char *v295;
  uint64_t v296;
  const char *v297;
  uint64_t v298;
  uint64_t v299;
  void *v300;
  const char *v301;
  uint64_t v302;
  const char *v303;
  uint64_t v304;
  const char *v305;
  uint64_t v306;
  void *v307;
  const char *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  void *v312;
  const char *v313;
  uint64_t v314;
  void *v315;
  uint64_t v316;
  const char *v317;
  uint64_t v318;
  uint64_t v319;
  void *v320;
  const char *v321;
  uint64_t v322;
  const char *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  void *v327;
  const char *v328;
  uint64_t v329;
  const char *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  void *v334;
  const char *v335;
  uint64_t v336;
  const char *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  void *v341;
  const char *v342;
  uint64_t v343;
  const char *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  void *v348;
  const char *v349;
  uint64_t v350;
  const char *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  void *v355;
  const char *v356;
  uint64_t v357;
  const char *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  void *v362;
  const char *v363;
  uint64_t v364;
  const char *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  void *v369;
  const char *v370;
  uint64_t v371;
  const char *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  void *v376;
  const char *v377;
  uint64_t v378;
  const char *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  void *v383;
  const char *v384;
  uint64_t v385;
  void *v386;
  const char *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  void *v391;
  const char *v392;
  uint64_t v393;
  void *v394;
  const char *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  void *v399;
  const char *v400;
  uint64_t v401;
  void *v402;
  const char *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  void *v407;
  const char *v408;
  uint64_t v409;
  void *v410;
  const char *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  void *v415;
  const char *v416;
  uint64_t v417;
  void *v418;
  const char *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  void *v423;
  const char *v424;
  uint64_t v425;
  void *v426;
  const char *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  void *v431;
  const char *v432;
  uint64_t v433;
  void *v434;
  const char *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  void *v439;
  const char *v440;
  uint64_t v441;
  void *v442;
  const char *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  void *v447;
  const char *v448;
  uint64_t v449;
  void *v450;
  const char *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  void *v455;
  const char *v456;
  uint64_t v457;
  void *v458;
  const char *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  void *v463;
  const char *v464;
  uint64_t v465;
  void *v466;
  const char *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  void *v471;
  const char *v472;
  uint64_t v473;
  void *v474;
  const char *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  void *v479;
  const char *v480;
  uint64_t v481;
  void *v482;
  void *v483;
  double *v484;
  const char *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  void *v489;
  const char *v490;
  uint64_t v491;
  void *v492;
  void *v493;
  double *v494;
  const char *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  void *v499;
  const char *v500;
  uint64_t v501;
  void *v502;
  void *v503;
  double *v504;
  const char *v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  void *v509;
  const char *v510;
  uint64_t v511;
  void *v512;
  void *v513;
  double *v514;
  const char *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  void *v519;
  const char *v520;
  uint64_t v521;
  void *v522;
  void *v523;
  double *v524;
  const char *v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  void *v529;
  const char *v530;
  uint64_t v531;
  void *v532;
  void *v533;
  double *v534;
  const char *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  void *v539;
  const char *v540;
  uint64_t v541;
  void *v542;
  void *v543;
  double *v544;
  const char *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  void *v549;
  const char *v550;
  uint64_t v551;
  void *v552;
  void *v553;
  double *v554;
  const char *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  void *v559;
  const char *v560;
  uint64_t v561;
  void *v562;
  void *v563;
  double *v564;
  const char *v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  void *v569;
  const char *v570;
  uint64_t v571;
  const char *v572;
  uint64_t v573;
  unsigned int v574;
  unint64_t v575;
  unint64_t v576;
  char *v577;
  int v578;
  char *v579;
  int v580;
  uint64_t *v581;
  void *v582;
  uint64_t v583;
  double v584;
  _BYTE *v585;
  unint64_t v586;
  unint64_t v587;
  double *v588;
  double *v589;
  double v590;
  unint64_t v591;
  unint64_t v593;
  double v594;
  double v595;
  double v596;
  uint64_t *v597;
  uint64_t *v598;
  double v599;
  double *v600;
  double *v601;
  double *v602;
  unint64_t v603;
  double v604;
  double v605;
  double v606;
  _QWORD *v607;
  _QWORD *v608;
  uint64_t v609;
  uint64_t *v610;
  uint64_t v611;
  uint64_t v612;
  _QWORD *v613;
  const char *v614;
  uint64_t v615;
  void *v616;
  const char *v617;
  uint64_t v618;
  const char *v619;
  uint64_t v620;
  std::__shared_weak_count *v621;
  unint64_t *p_shared_owners;
  unint64_t v623;
  void *v624;
  void *v625;
  uint64_t v626;
  const char *v627;
  uint64_t v628;
  uint64_t v629;
  void *v630;
  const char *v631;
  uint64_t v632;
  const char *v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  void *v637;
  const char *v638;
  uint64_t v639;
  const char *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  void *v644;
  const char *v645;
  uint64_t v646;
  void *v647;
  const char *v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  void *v652;
  const char *v653;
  uint64_t v654;
  void *v655;
  uint64_t v656;
  const char *v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  void *v661;
  const char *v662;
  uint64_t v663;
  const char *v664;
  uint64_t v665;
  const char *v666;
  uint64_t v667;
  uint64_t v668;
  void *v669;
  void **v670;
  void *v671;
  void **v672;
  const char *v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  void *v677;
  const char *v678;
  uint64_t v679;
  int v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  void *v684;
  void **v685;
  std::__shared_weak_count *v686;
  unint64_t *v687;
  unint64_t v688;
  _BYTE *v689;
  _BYTE *v690;
  std::__shared_weak_count *v691;
  unint64_t *v692;
  unint64_t v693;
  void *v694;
  std::__shared_weak_count *v695;
  unsigned int v696;
  double v697;
  double v698;
  double v699;
  double v700;
  char *v701;
  unint64_t *v702;
  double v703;
  double v704;
  uint64_t v705;
  double v706;
  uint64_t v707;
  double v708;
  double v709;
  double v710;
  double v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  void *v716;
  const char *v717;
  uint64_t v718;
  const char *v719;
  uint64_t v720;
  unint64_t v721;
  std::__shared_weak_count *v722;
  unint64_t *v723;
  unint64_t v724;
  const char *v725;
  uint64_t v726;
  void *v727;
  void **v728;
  unint64_t v729;
  uint64_t v730;
  int v731;
  const char *v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  int64_t v736;
  double *v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  char v742;
  unsigned int v743;
  uint64_t v744;
  id v745;
  const char *v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  const char *v751;
  uint64_t v752;
  uint64_t *v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  unint64_t v759;
  int v760;
  _DWORD *v761;
  int v762;
  uint64_t v763;
  uint64_t v764;
  std::__shared_weak_count *v765;
  unint64_t *v766;
  unint64_t v767;
  __int16 *v768;
  int64_t v769;
  unint64_t v770;
  unint64_t v771;
  double v772;
  unint64_t v773;
  double *v774;
  double *v775;
  uint64_t v776;
  double v777;
  double *v778;
  double v779;
  int64_t v780;
  uint64_t v781;
  double *v782;
  void **v783;
  unint64_t v784;
  float *v785;
  float *v786;
  uint64_t v787;
  const char *v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  unint64_t v794;
  int *v795;
  int *v796;
  int *v797;
  _DWORD *v798;
  int v799;
  int v800;
  int v801;
  const char *v802;
  uint64_t v803;
  uint64_t v804;
  void *v805;
  const char *v806;
  uint64_t v807;
  const char *v808;
  uint64_t v809;
  const char *v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  void *v814;
  const char *v815;
  uint64_t v816;
  const char *v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  void *v821;
  const char *v822;
  uint64_t v823;
  const char *v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  void *v828;
  const char *v829;
  uint64_t v830;
  const char *v831;
  uint64_t v832;
  std::__shared_weak_count *v833;
  unint64_t *v834;
  unint64_t v835;
  const char *v836;
  uint64_t v837;
  void *v838;
  void **v839;
  std::__shared_weak_count *v840;
  unint64_t *v841;
  unint64_t v842;
  const char *v843;
  uint64_t v844;
  void *v845;
  void *v846;
  void *v847;
  std::__shared_weak_count *v848;
  unint64_t *v849;
  unint64_t v850;
  const char *v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  void *v855;
  const char *v856;
  uint64_t v857;
  const char *v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  void *v862;
  const char *v863;
  uint64_t v864;
  const char *v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  void *v869;
  const char *v870;
  uint64_t v871;
  const char *v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  void *v876;
  const char *v877;
  uint64_t v878;
  const char *v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  void *v883;
  const char *v884;
  uint64_t v885;
  const char *v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  void *v890;
  const char *v891;
  uint64_t v892;
  unint64_t *v893;
  unint64_t v894;
  std::__shared_weak_count *v895;
  unint64_t *v896;
  unint64_t v897;
  void *v898;
  void **v899;
  const char *v900;
  uint64_t v901;
  void *v902;
  void **v903;
  std::__shared_weak_count *v904;
  unint64_t *v905;
  unint64_t v906;
  void *v907;
  void *v908;
  int64_t v909;
  const char *v910;
  uint64_t v911;
  uint64_t v912;
  id v913;
  const char *v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  float *v918;
  const char *v919;
  uint64_t v920;
  unint64_t v921;
  uint64_t v922;
  double *v923;
  double v924;
  float v925;
  const char *v926;
  uint64_t v927;
  uint64_t v928;
  void *v929;
  const char *v930;
  uint64_t v931;
  const char *v932;
  uint64_t v933;
  std::__shared_weak_count *v934;
  unint64_t *v935;
  unint64_t v936;
  std::__shared_weak_count *v937;
  unint64_t *v938;
  unint64_t v939;
  void *v940;
  int v941;
  float v942;
  const char *v943;
  uint64_t v944;
  float *v945;
  float *v946;
  uint64_t v947;
  unint64_t v948;
  float v949;
  float *v950;
  uint64_t v951;
  void *v952;
  const char *v953;
  uint64_t v954;
  const char *v955;
  uint64_t v956;
  uint64_t v957;
  void *v958;
  const char *v959;
  uint64_t v960;
  const char *v961;
  uint64_t v962;
  uint64_t v963;
  const char *v964;
  uint64_t v965;
  float v966;
  double v967;
  const char *v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  void *v972;
  const char *v973;
  uint64_t v974;
  double v975;
  const char *v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  void *v980;
  const char *v981;
  uint64_t v982;
  double v983;
  const char *v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  void *v988;
  const char *v989;
  uint64_t v990;
  double v991;
  const char *v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  void *v996;
  const char *v997;
  uint64_t v998;
  const char *v999;
  uint64_t v1000;
  double v1001;
  double v1002;
  double v1003;
  uint64_t v1004;
  const char *v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  int v1009;
  double v1010;
  int v1011;
  void *v1012;
  const char *v1013;
  uint64_t v1014;
  unint64_t *v1015;
  const char *v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  void *v1020;
  const char *v1021;
  uint64_t v1022;
  const char *v1023;
  uint64_t v1024;
  void *v1025;
  void **v1026;
  std::__shared_weak_count *v1027;
  unint64_t *v1028;
  unint64_t v1029;
  void *v1030;
  const char *v1031;
  uint64_t v1032;
  uint64_t v1033;
  void *v1034;
  const char *v1035;
  uint64_t v1036;
  const char *v1037;
  uint64_t v1038;
  uint64_t v1039;
  void *v1040;
  const char *v1041;
  uint64_t v1042;
  const char *v1043;
  uint64_t v1044;
  uint64_t v1045;
  void *v1046;
  const char *v1047;
  uint64_t v1048;
  const char *v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  void *v1053;
  const char *v1054;
  uint64_t v1055;
  const char *v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  void *v1060;
  const char *v1061;
  uint64_t v1062;
  const char *v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  void *v1067;
  const char *v1068;
  uint64_t v1069;
  const char *v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  void *v1074;
  const char *v1075;
  uint64_t v1076;
  const char *v1077;
  uint64_t v1078;
  uint64_t v1079;
  void *v1080;
  const char *v1081;
  uint64_t v1082;
  const char *v1083;
  uint64_t v1084;
  void *v1085;
  const char *v1086;
  uint64_t v1087;
  const char *v1088;
  uint64_t v1089;
  void *v1090;
  const char *v1091;
  uint64_t v1092;
  const char *v1093;
  uint64_t v1094;
  const char *v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  double v1099;
  int v1100;
  void *v1101;
  const char *v1102;
  uint64_t v1103;
  std::__shared_weak_count *v1104;
  unint64_t *v1105;
  unint64_t v1106;
  void *v1107;
  void *v1108;
  const char *v1109;
  uint64_t v1110;
  void *v1111;
  const char *v1112;
  uint64_t v1113;
  void *v1114;
  void *v1115;
  const char *v1116;
  uint64_t v1117;
  void *v1118;
  const char *v1119;
  uint64_t v1120;
  std::__shared_weak_count *v1121;
  unint64_t *v1122;
  unint64_t v1123;
  id v1124;
  std::__shared_weak_count *v1125;
  unint64_t *v1126;
  unint64_t v1127;
  std::__shared_weak_count *v1129;
  unint64_t *v1130;
  unint64_t v1131;
  void *v1132;
  double *v1133;
  double v1134;
  double v1135;
  double v1136;
  const char *v1137;
  uint64_t v1138;
  uint64_t v1139;
  double v1140;
  double v1141;
  double v1142;
  int v1143;
  int v1144;
  double v1145;
  double v1146;
  float64x2_t v1147;
  float64x2_t v1148;
  int32x2_t v1149;
  uint64x2_t v1150;
  float64x2_t v1151;
  int64x2_t v1152;
  int64x2_t v1153;
  int64x2_t v1154;
  float64x2_t v1155;
  float64x2_t v1156;
  float64x2_t v1157;
  void *v1158;
  const char *v1159;
  uint64_t v1160;
  const char *v1161;
  uint64_t v1162;
  unint64_t *v1163;
  void *v1164;
  void **v1165;
  double *v1166;
  double v1167;
  unint64_t v1168;
  unint64_t v1169;
  double *v1170;
  double *v1171;
  double v1172;
  uint64_t v1173;
  uint64_t v1174;
  unint64_t v1175;
  double v1176;
  double v1177;
  double v1178;
  double v1179;
  uint64_t v1180;
  _QWORD *v1181;
  const char *v1182;
  uint64_t v1183;
  void *v1184;
  const char *v1185;
  uint64_t v1186;
  const char *v1187;
  uint64_t v1188;
  unint64_t *v1189;
  double v1190;
  const char *v1191;
  uint64_t v1192;
  uint64_t v1193;
  unint64_t v1194;
  int v1195;
  int v1196;
  float64x2_t v1197;
  float64x2_t v1198;
  float64x2_t v1199;
  float64x2_t v1200;
  float64x2_t v1201;
  double v1202;
  float64x2_t v1203;
  float64x2_t v1204;
  int32x2_t v1205;
  int64x2_t v1206;
  uint64x2_t v1207;
  int64x2_t v1208;
  int64x2_t v1209;
  float64x2_t v1210;
  float64x2_t v1211;
  float64x2_t v1212;
  float64x2_t v1213;
  float64x2_t v1214;
  double v1215;
  void *v1216;
  const char *v1217;
  uint64_t v1218;
  const char *v1219;
  uint64_t v1220;
  double *v1221;
  _BYTE *v1222;
  const char *v1223;
  uint64_t v1224;
  uint64_t v1225;
  float64x2_t v1226;
  int32x2_t v1227;
  int64x2_t v1228;
  float64x2_t v1229;
  int64x2_t v1230;
  float64x2_t v1231;
  uint64x2_t v1232;
  int64x2_t v1233;
  float64x2_t v1234;
  float64x2_t v1235;
  float64x2_t v1236;
  void *v1237;
  const char *v1238;
  uint64_t v1239;
  const char *v1240;
  uint64_t v1241;
  void *v1242;
  void **v1243;
  const char *v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t *v1248;
  uint64_t v1249;
  uint64_t v1250;
  const char *v1251;
  uint64_t v1252;
  uint64_t v1253;
  float64x2_t v1254;
  double v1255;
  float64x2_t v1256;
  int32x2_t v1257;
  float64x2_t v1258;
  uint64x2_t v1259;
  int64x2_t v1260;
  int64x2_t v1261;
  int64x2_t v1262;
  float64x2_t v1263;
  float64x2_t v1264;
  float64x2_t v1265;
  void *v1266;
  const char *v1267;
  uint64_t v1268;
  const char *v1269;
  uint64_t v1270;
  const char *v1271;
  uint64_t v1272;
  uint64_t v1273;
  int v1274;
  double v1275;
  uint64_t v1276;
  double v1277;
  void *v1278;
  const char *v1279;
  uint64_t v1280;
  const char *v1281;
  uint64_t v1282;
  void *v1283;
  void *v1284;
  void **v1285;
  void *v1286;
  void **p_lpsrc;
  const char *v1288;
  uint64_t v1289;
  int v1290;
  uint64_t v1291;
  uint64_t v1292;
  _QWORD *v1293;
  const char *v1294;
  uint64_t v1295;
  void *v1296;
  const char *v1297;
  uint64_t v1298;
  const char *v1299;
  uint64_t v1300;
  void *exception;
  unsigned int v1302;
  void *v1303;
  const char *v1304;
  uint64_t v1305;
  int v1306;
  int v1307;
  int v1308;
  int v1309;
  int v1310;
  int v1311;
  int v1312;
  int v1313;
  double *v1314;
  unint64_t v1315;
  unint64_t v1316;
  double *v1317;
  double *v1318;
  unint64_t v1319;
  double *v1320;
  unint64_t v1321;
  double *v1322;
  Curve *v1323;
  double v1324;
  const char *v1325;
  uint64_t v1326;
  Curve *v1327;
  uint64_t v1328;
  id v1329;
  const char *v1330;
  uint64_t v1331;
  uint64_t v1332;
  Curve *v1333;
  float v1334;
  id v1335;
  const char *v1336;
  uint64_t v1337;
  uint64_t v1338;
  const char *v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  void *v1343;
  uint64_t v1344;
  double (**v1345)(double);
  void *v1346;
  const char *v1347;
  uint64_t v1348;
  const char *v1349;
  uint64_t v1350;
  void *v1351;
  uint64_t v1352;
  float v1353;
  uint64_t v1354;
  const char *v1355;
  uint64_t v1356;
  uint64_t v1357;
  double v1358;
  double v1359;
  double v1360;
  float v1361;
  double v1362;
  float64x2_t v1363;
  float64x2_t v1364;
  int32x2_t v1365;
  int64x2_t v1366;
  uint64x2_t v1367;
  float64x2_t v1368;
  int64x2_t v1369;
  int64x2_t v1370;
  float64x2_t v1371;
  float64x2_t v1372;
  float64x2_t v1373;
  void *v1374;
  const char *v1375;
  uint64_t v1376;
  const char *v1377;
  uint64_t v1378;
  void *v1379;
  void *v1380;
  void *v1381;
  _QWORD *v1382;
  _QWORD *v1383;
  _QWORD *v1384;
  _QWORD *v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  int v1395;
  double v1396;
  uint64_t v1397;
  double v1398;
  void *v1399;
  double v1400;
  uint64_t v1401;
  uint64_t v1402;
  double v1403;
  void *v1404;
  _QWORD v1406[4];
  id v1407;
  _QWORD v1408[4];
  id v1409;
  void *v1410;
  void *v1411;
  uint64_t v1412;
  void *v1413;
  void *v1414;
  uint64_t v1415;
  void *v1416;
  void *v1417;
  uint64_t v1418;
  void *v1419;
  void *v1420;
  uint64_t v1421;
  void *v1422;
  void *v1423;
  uint64_t v1424;
  void *v1425;
  void *v1426;
  uint64_t v1427;
  void *v1428[3];
  void *v1429[3];
  void *v1430[3];
  void *v1431;
  _BYTE *v1432;
  void *v1433;
  _BYTE *v1434;
  void *v1435[3];
  void *v1436;
  std::__shared_weak_count *v1437;
  uint64_t v1438;
  void *v1439;
  void *v1440;
  uint64_t v1441;
  unint64_t v1442;
  unint64_t v1443;
  uint64_t v1444;
  std::__shared_weak_count *v1445;
  void *lpsrc;
  _QWORD *v1447[2];
  void *v1448;
  std::__shared_weak_count *v1449;
  uint64_t v1450;
  void *v1451;
  void *v1452;
  double *v1453;
  std::__shared_weak_count *v1454;
  double v1455;
  double v1456;
  void *v1457[2];
  float64x2_t v1458;
  __int128 v1459;
  __int128 v1460;
  __int128 v1461;
  __int128 v1462;
  __int128 v1463;
  void *__p[2];
  __int128 v1465;
  _OWORD v1466[2];
  __int128 v1467;
  __int128 v1468;
  void *v1469[2];
  __int128 v1470;
  __int128 v1471;
  __int128 v1472;
  __int128 v1473;
  __int128 v1474;
  __int128 v1475;
  __int128 v1476;
  __int128 v1477;
  __int128 v1478;
  __int128 v1479;
  __int128 v1480;
  __int128 v1481;
  __int128 v1482;
  __int128 v1483;
  __int128 v1484;
  __int128 v1485;
  __int128 v1486;
  __int128 v1487;
  __int128 v1488;
  __int128 v1489;
  __int128 v1490;
  __int128 v1491;
  __int128 v1492;
  __int128 v1493;
  __int128 v1494;
  uint64_t v1495;

  v1495 = *MEMORY[0x1E0C80C00];
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v3, v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(__p, a1);
  sub_1D52B5144((uint64_t)__p[0]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v9, (uint64_t)v8, (uint64_t)CFSTR("inputVersion"), v10);

  v11 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v12 = (unint64_t *)((char *)__p[1] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(__p, a1);
  v15 = sub_1D52B4ED0((uint64_t)__p[0]);
  objc_msgSend_numberWithBool_(v14, v16, v15, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v20, (uint64_t)v19, (uint64_t)CFSTR("inputIsGenericDNG"), v21);

  v22 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v23 = (unint64_t *)((char *)__p[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (void *)MEMORY[0x1E0CB37E8];
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2480))(a1);
  objc_msgSend_numberWithBool_(v25, v27, v26, v28, v29);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v31, (uint64_t)v30, (uint64_t)CFSTR("inputIsNoiseReductionEnabled"), v32);

  sub_1D536C28C(a2);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v34, (uint64_t)v33, (uint64_t)CFSTR("inputSushiMode"), v35);

  v1455 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 720))(a1);
  v1456 = v36;
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v37, v38, v39, v40);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v42, (uint64_t)v41, (uint64_t)CFSTR("wx"), v43);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v44, v45, v46, v47, v1456);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v49, (uint64_t)v48, (uint64_t)CFSTR("wy"), v50);

  sub_1D536C36C((uint64_t)&v1455, __p);
  sub_1D531C028((double **)__p);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v52, (uint64_t)v51, (uint64_t)CFSTR("inputNeutral"), v53);

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v54 = (void *)MEMORY[0x1E0CB37E8];
  v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1216))(a1);
  objc_msgSend_numberWithBool_(v54, v56, v55, v57, v58);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v60, (uint64_t)v59, (uint64_t)CFSTR("inputShouldLinearize"), v61);

  v62 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2640))(a1);
  objc_msgSend_numberWithDouble_(v62, v63, v64, v65, v66);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v68, (uint64_t)v67, (uint64_t)CFSTR("inputXScale"), v69);

  v70 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2648))(a1);
  objc_msgSend_numberWithDouble_(v70, v71, v72, v73, v74);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v76, (uint64_t)v75, (uint64_t)CFSTR("inputYScale"), v77);

  v78 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2704))(a1);
  objc_msgSend_numberWithFloat_(v78, v79, v80, v81, v82);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v84, (uint64_t)v83, (uint64_t)CFSTR("inputNoiseReductionApplied"), v85);

  sub_1D5299304(a1);
  HIDWORD(v83) = v86;
  v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 536))(a1);
  objc_msgSend_vectorWithCGRect_(MEMORY[0x1E0C9DDF8], v88, v89, v90, v91, (double)(int)v87, (double)SHIDWORD(v83) - (double)SHIDWORD(v87) - (double)SHIDWORD(v88), (double)(int)v88);
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v93, (uint64_t)v92, (uint64_t)CFSTR("inputCropRect"), v94);

  v95 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 528))(a1);
  objc_msgSend_numberWithDouble_(v95, v96, v97, v98, v99);
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v101, (uint64_t)v100, (uint64_t)CFSTR("inputScaleFactor"), v102);

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2480))(a1))
  {
    v1494 = 0u;
    v1493 = 0u;
    v1492 = 0u;
    v1491 = 0u;
    v1490 = 0u;
    v1489 = 0u;
    v1488 = 0u;
    v1487 = 0u;
    v1486 = 0u;
    v1485 = 0u;
    v1484 = 0u;
    v1483 = 0u;
    v1482 = 0u;
    v1481 = 0u;
    v1480 = 0u;
    v1479 = 0u;
    v1478 = 0u;
    v1477 = 0u;
    v1475 = 0u;
    v1476 = 0u;
    v1473 = 0u;
    v1474 = 0u;
    v1471 = 0u;
    v1472 = 0u;
    *(_OWORD *)v1469 = 0u;
    v1470 = 0u;
    v1467 = 0u;
    v1468 = 0u;
    memset(v1466, 0, sizeof(v1466));
    *(_OWORD *)__p = 0u;
    v1465 = 0u;
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 2696))(__p, a1, a2);
    v1462 = 0u;
    v1463 = 0u;
    v1460 = 0u;
    v1461 = 0u;
    v1458 = 0u;
    v1459 = 0u;
    *(_OWORD *)v1457 = 0u;
    sub_1D53BFB00((float32x2_t *)__p, (float32x2_t *)v1457);
    v103 = (*(double (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 800))(a1, a2);
    v104 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2520))(a1);
    objc_msgSend_numberWithDouble_(v104, v105, v106, v107, v108);
    v109 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v110, (uint64_t)v109, (uint64_t)CFSTR("inputLNRAmount"), v111);

    v112 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2528))(a1);
    objc_msgSend_numberWithDouble_(v112, v113, v114, v115, v116);
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v118, (uint64_t)v117, (uint64_t)CFSTR("inputCNRAmount"), v119);

    v120 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2544))(a1);
    objc_msgSend_numberWithDouble_(v120, v121, v122, v123, v124);
    v125 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v126, (uint64_t)v125, (uint64_t)CFSTR("inputSharpenAmount"), v127);

    v128 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2552))(a1);
    objc_msgSend_numberWithDouble_(v128, v129, v130, v131, v132);
    v133 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v134, (uint64_t)v133, (uint64_t)CFSTR("inputSharpenThreshold"), v135);

    v136 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2560))(a1);
    objc_msgSend_numberWithDouble_(v136, v137, v138, v139, v140);
    v141 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v142, (uint64_t)v141, (uint64_t)CFSTR("inputContrastAmount"), v143);

    v144 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2568))(a1);
    objc_msgSend_numberWithDouble_(v144, v145, v146, v147, v148);
    v149 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v150, (uint64_t)v149, (uint64_t)CFSTR("inputDetailAmount"), v151);

    v152 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 2664))(a1, 0, 0);
    objc_msgSend_numberWithDouble_(v152, v153, v154, v155, v156);
    v157 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v158, (uint64_t)v157, (uint64_t)CFSTR("inputRepresentativeNoise"), v159);

    v160 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 528))(a1);
    objc_msgSend_numberWithDouble_(v160, v161, v162, v163, v164);
    v165 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v166, (uint64_t)v165, (uint64_t)CFSTR("inputScaleFactor"), v167);

    v168 = (void *)MEMORY[0x1E0CB37E8];
    v169 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2496))(a1);
    v174 = 0.0;
    if (v169)
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 2512))(a1, 0.0);
    objc_msgSend_numberWithDouble_(v168, v170, v171, v172, v173, v174);
    v175 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v176, (uint64_t)v175, (uint64_t)CFSTR("inputMoireRadius"), v177);

    v178 = (void *)MEMORY[0x1E0CB37E8];
    v179 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2496))(a1);
    v184 = 0.0;
    if (v179)
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 2504))(a1, 0.0);
    objc_msgSend_numberWithDouble_(v178, v180, v181, v182, v183, v184);
    v185 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v186, (uint64_t)v185, (uint64_t)CFSTR("inputMoireAmount"), v187);

    v188 = (void *)MEMORY[0x1E0CB37E8];
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 7)
    {
      v192 = (*(double (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 2664))(a1, 0, 0) < 0.5;
      objc_msgSend_numberWithInt_(v188, v193, v192, v194, v195);
    }
    else
    {
      objc_msgSend_numberWithInt_(v188, v189, 0, v190, v191);
    }
    v196 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v197, (uint64_t)v196, (uint64_t)CFSTR("inputOpponentColorEnabled"), v198);

    v199 = v103;
    objc_msgSend_vectorWithX_Y_Z_W_(MEMORY[0x1E0C9DDF8], v200, v201, v202, v203, (float)(*(float *)v1457 / v199), (float)(*((float *)v1457 + 1) / v199), (float)(*(float *)&v1457[1] / v199), 1.0);
    v204 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v205, (uint64_t)v204, (uint64_t)CFSTR("inputNeutralFactors"), v206);

    sub_1D536C28C(a2);
    v207 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v208, (uint64_t)v207, (uint64_t)CFSTR("inputSushiMode"), v209);

    objc_msgSend_setObject_forKeyedSubscript_(v7, v210, (uint64_t)&unk_1E99CB298, (uint64_t)CFSTR("inputBoostMethod"), v211);
    objc_msgSend_vectorWithX_Y_Z_W_(MEMORY[0x1E0C9DDF8], v212, v213, v214, v215, 0.298999995, 0.587000012, 0.114, 1.0);
    v216 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v217, (uint64_t)v216, (uint64_t)CFSTR("inputLumFactors"), v218);

    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) >= 9)
    {
      v219 = (void *)MEMORY[0x1E0CB37E8];
      v220 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
      objc_msgSend_numberWithUnsignedInt_(v219, v221, v220, v222, v223);
      v224 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v225, (uint64_t)v224, (uint64_t)CFSTR("inputISO"), v226);

      v227 = (void *)MEMORY[0x1E0CB37E8];
      v228 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2168))(a1);
      objc_msgSend_numberWithUnsignedInt_(v227, v229, v228, v230, v231);
      v232 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v233, (uint64_t)v232, (uint64_t)CFSTR("inputSensorPattern"), v234);

    }
  }
  v235 = (void *)MEMORY[0x1E0CB37E8];
  v236 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 920))(a1);
  objc_msgSend_numberWithUnsignedShort_(v235, v237, v236, v238, v239);
  v240 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v241, (uint64_t)v240, (uint64_t)CFSTR("inputRange"), v242);

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2160))(a1))
    objc_msgSend_setObject_forKeyedSubscript_(v7, v243, (uint64_t)&unk_1E99CC268, (uint64_t)CFSTR("inputTargetRange"), v244);
  else
    objc_msgSend_setObject_forKeyedSubscript_(v7, v243, (uint64_t)&unk_1E99CB2B0, (uint64_t)CFSTR("inputTargetRange"), v244);
  v245 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 800))(a1, a2);
  objc_msgSend_numberWithDouble_(v245, v246, v247, v248, v249);
  v250 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v251, (uint64_t)v250, (uint64_t)CFSTR("inputFactor"), v252);

  v253 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
  objc_msgSend_numberWithDouble_(v253, v254, v255, v256, v257);
  v258 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v259, (uint64_t)v258, (uint64_t)CFSTR("inputBaselineExposure"), v260);

  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 648))(__p, a1);
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v261, LODWORD(__p[1]), v262, v263);
  v264 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v265, (uint64_t)v264, (uint64_t)CFSTR("inputCalibrationIlluminant1"), v266);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v267, HIDWORD(__p[1]), v268, v269);
  v270 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v271, (uint64_t)v270, (uint64_t)CFSTR("inputCalibrationIlluminant2"), v272);

  sub_1D533A364((unsigned int *)&v1465);
  v273 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v274, (uint64_t)v273, (uint64_t)CFSTR("inputXYZtoCamera1"), v275);

  sub_1D533A364((unsigned int *)&v1466[1]);
  v276 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v277, (uint64_t)v276, (uint64_t)CFSTR("inputXYZtoCamera2"), v278);

  sub_1D533A364((unsigned int *)&v1468);
  v279 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v280, (uint64_t)v279, (uint64_t)CFSTR("inputCameraCalibration1"), v281);

  sub_1D533A364((unsigned int *)&v1470);
  v282 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v283, (uint64_t)v282, (uint64_t)CFSTR("inputCameraCalibration2"), v284);

  sub_1D533A364((unsigned int *)&v1476 + 2);
  v285 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v286, (uint64_t)v285, (uint64_t)CFSTR("inputReduction1"), v287);

  sub_1D533A364((unsigned int *)&v1478 + 2);
  v288 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v289, (uint64_t)v288, (uint64_t)CFSTR("inputReduction2"), v290);

  sub_1D533A364((unsigned int *)&v1472);
  v291 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v292, (uint64_t)v291, (uint64_t)CFSTR("inputForwardMatrix1"), v293);

  sub_1D533A364((unsigned int *)&v1474);
  v294 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v295, (uint64_t)v294, (uint64_t)CFSTR("inputForwardMatrix2"), v296);

  objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v297, (unsigned __int16)v1476, v298, v299);
  v300 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v301, (uint64_t)v300, (uint64_t)CFSTR("inputShouldUseForwardMatrix"), v302);

  sub_1D532D710(__p);
  objc_msgSend_setObject_forKeyedSubscript_(v7, v303, MEMORY[0x1E0C9AAB0], (uint64_t)CFSTR("inputShouldRecoverHighlights"), v304);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2152))(a1))
    objc_msgSend_setObject_forKeyedSubscript_(v7, v305, MEMORY[0x1E0C9AAB0], (uint64_t)CFSTR("inputLinearized"), v306);
  v307 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 952))(a1);
  objc_msgSend_numberWithDouble_(v307, v308, v309, v310, v311);
  v312 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v313, (uint64_t)v312, (uint64_t)CFSTR("inputBias"), v314);

  v315 = (void *)MEMORY[0x1E0CB37E8];
  v316 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2392))(a1);
  objc_msgSend_numberWithUnsignedInt_(v315, v317, v316, v318, v319);
  v320 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v321, (uint64_t)v320, (uint64_t)CFSTR("inputBoostKind"), v322);

  (*(void (**)(double **__return_ptr, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 2624))(&v1453, a1, a2, 1);
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v323, v324, v325, v326, *v1453);
  v327 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v328, (uint64_t)v327, (uint64_t)CFSTR("inputTRCs0"), v329);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v330, v331, v332, v333, v1453[1]);
  v334 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v335, (uint64_t)v334, (uint64_t)CFSTR("inputTRCs1"), v336);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v337, v338, v339, v340, v1453[3]);
  v341 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v342, (uint64_t)v341, (uint64_t)CFSTR("inputTRCs2"), v343);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v344, v345, v346, v347, v1453[5]);
  v348 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v349, (uint64_t)v348, (uint64_t)CFSTR("inputTRCs3"), v350);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v351, v352, v353, v354, v1453[7]);
  v355 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v356, (uint64_t)v355, (uint64_t)CFSTR("inputTRCs4"), v357);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v358, v359, v360, v361, v1453[2]);
  v362 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v363, (uint64_t)v362, (uint64_t)CFSTR("inputTRCy1"), v364);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v365, v366, v367, v368, v1453[4]);
  v369 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v370, (uint64_t)v369, (uint64_t)CFSTR("inputTRCy2"), v371);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v372, v373, v374, v375, v1453[6]);
  v376 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v377, (uint64_t)v376, (uint64_t)CFSTR("inputTRCy3"), v378);

  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v379, v380, v381, v382, v1453[8]);
  v383 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v384, (uint64_t)v383, (uint64_t)CFSTR("inputTRCy4"), v385);

  v386 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1272))(a1);
  objc_msgSend_numberWithDouble_(v386, v387, v388, v389, v390);
  v391 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v392, (uint64_t)v391, (uint64_t)CFSTR("inputBoostTransitionPoint"), v393);

  v394 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1280))(a1);
  objc_msgSend_numberWithDouble_(v394, v395, v396, v397, v398);
  v399 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v400, (uint64_t)v399, (uint64_t)CFSTR("inputBoostTransitionWidth"), v401);

  v402 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2416))(a1);
  objc_msgSend_numberWithDouble_(v402, v403, v404, v405, v406);
  v407 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v408, (uint64_t)v407, (uint64_t)CFSTR("inputBoostLuminanceAmount"), v409);

  v410 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1296))(a1);
  objc_msgSend_numberWithDouble_(v410, v411, v412, v413, v414);
  v415 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v416, (uint64_t)v415, (uint64_t)CFSTR("inputBoostShadowAmount"), v417);

  v418 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2424))(a1);
  objc_msgSend_numberWithDouble_(v418, v419, v420, v421, v422);
  v423 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v424, (uint64_t)v423, (uint64_t)CFSTR("inputBoostPreserveHueAmount"), v425);

  v426 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2400))(a1);
  objc_msgSend_numberWithDouble_(v426, v427, v428, v429, v430);
  v431 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v432, (uint64_t)v431, (uint64_t)CFSTR("inputBoostAmount"), v433);

  v434 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2344))(a1);
  objc_msgSend_numberWithDouble_(v434, v435, v436, v437, v438);
  v439 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v440, (uint64_t)v439, (uint64_t)CFSTR("inputHueMagMR"), v441);

  v442 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2352))(a1);
  objc_msgSend_numberWithDouble_(v442, v443, v444, v445, v446);
  v447 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v448, (uint64_t)v447, (uint64_t)CFSTR("inputHueMagRY"), v449);

  v450 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2360))(a1);
  objc_msgSend_numberWithDouble_(v450, v451, v452, v453, v454);
  v455 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v456, (uint64_t)v455, (uint64_t)CFSTR("inputHueMagYG"), v457);

  v458 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2368))(a1);
  objc_msgSend_numberWithDouble_(v458, v459, v460, v461, v462);
  v463 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v464, (uint64_t)v463, (uint64_t)CFSTR("inputHueMagGC"), v465);

  v466 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2376))(a1);
  objc_msgSend_numberWithDouble_(v466, v467, v468, v469, v470);
  v471 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v472, (uint64_t)v471, (uint64_t)CFSTR("inputHueMagCB"), v473);

  v474 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2384))(a1);
  objc_msgSend_numberWithDouble_(v474, v475, v476, v477, v478);
  v479 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v480, (uint64_t)v479, (uint64_t)CFSTR("inputHueMagBM"), v481);

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 752))(&v1450, a1);
  if (sub_1D53393A0((uint64_t)&v1450) < 3 || sub_1D5339398((unsigned int *)&v1450) <= 2)
  {
    v1283 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v1283, "RawCameraException");
    __cxa_throw(v1283, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v482 = (void *)MEMORY[0x1E0CB37E8];
  __p[0] = (void *)sub_1D5339044((uint64_t)&v1450, 0);
  __p[1] = v483;
  v484 = (double *)sub_1D53390D4((uint64_t)__p, 0);
  objc_msgSend_numberWithDouble_(v482, v485, v486, v487, v488, *v484);
  v489 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v490, (uint64_t)v489, (uint64_t)CFSTR("inputM00"), v491);

  v492 = (void *)MEMORY[0x1E0CB37E8];
  __p[0] = (void *)sub_1D5339044((uint64_t)&v1450, 0);
  __p[1] = v493;
  v494 = (double *)sub_1D53390D4((uint64_t)__p, 1u);
  objc_msgSend_numberWithDouble_(v492, v495, v496, v497, v498, *v494);
  v499 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v500, (uint64_t)v499, (uint64_t)CFSTR("inputM01"), v501);

  v502 = (void *)MEMORY[0x1E0CB37E8];
  __p[0] = (void *)sub_1D5339044((uint64_t)&v1450, 0);
  __p[1] = v503;
  v504 = (double *)sub_1D53390D4((uint64_t)__p, 2u);
  objc_msgSend_numberWithDouble_(v502, v505, v506, v507, v508, *v504);
  v509 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v510, (uint64_t)v509, (uint64_t)CFSTR("inputM02"), v511);

  v512 = (void *)MEMORY[0x1E0CB37E8];
  __p[0] = (void *)sub_1D5339044((uint64_t)&v1450, 1u);
  __p[1] = v513;
  v514 = (double *)sub_1D53390D4((uint64_t)__p, 0);
  objc_msgSend_numberWithDouble_(v512, v515, v516, v517, v518, *v514);
  v519 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v520, (uint64_t)v519, (uint64_t)CFSTR("inputM10"), v521);

  v522 = (void *)MEMORY[0x1E0CB37E8];
  __p[0] = (void *)sub_1D5339044((uint64_t)&v1450, 1u);
  __p[1] = v523;
  v524 = (double *)sub_1D53390D4((uint64_t)__p, 1u);
  objc_msgSend_numberWithDouble_(v522, v525, v526, v527, v528, *v524);
  v529 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v530, (uint64_t)v529, (uint64_t)CFSTR("inputM11"), v531);

  v532 = (void *)MEMORY[0x1E0CB37E8];
  __p[0] = (void *)sub_1D5339044((uint64_t)&v1450, 1u);
  __p[1] = v533;
  v534 = (double *)sub_1D53390D4((uint64_t)__p, 2u);
  objc_msgSend_numberWithDouble_(v532, v535, v536, v537, v538, *v534);
  v539 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v540, (uint64_t)v539, (uint64_t)CFSTR("inputM12"), v541);

  v542 = (void *)MEMORY[0x1E0CB37E8];
  __p[0] = (void *)sub_1D5339044((uint64_t)&v1450, 2u);
  __p[1] = v543;
  v544 = (double *)sub_1D53390D4((uint64_t)__p, 0);
  objc_msgSend_numberWithDouble_(v542, v545, v546, v547, v548, *v544);
  v549 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v550, (uint64_t)v549, (uint64_t)CFSTR("inputM20"), v551);

  v552 = (void *)MEMORY[0x1E0CB37E8];
  __p[0] = (void *)sub_1D5339044((uint64_t)&v1450, 2u);
  __p[1] = v553;
  v554 = (double *)sub_1D53390D4((uint64_t)__p, 1u);
  objc_msgSend_numberWithDouble_(v552, v555, v556, v557, v558, *v554);
  v559 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v560, (uint64_t)v559, (uint64_t)CFSTR("inputM21"), v561);

  v562 = (void *)MEMORY[0x1E0CB37E8];
  __p[0] = (void *)sub_1D5339044((uint64_t)&v1450, 2u);
  __p[1] = v563;
  v564 = (double *)sub_1D53390D4((uint64_t)__p, 2u);
  objc_msgSend_numberWithDouble_(v562, v565, v566, v567, v568, *v564);
  v569 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v570, (uint64_t)v569, (uint64_t)CFSTR("inputM22"), v571);

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2768))(a1))
  {
    objc_msgSend_setObject_forKeyedSubscript_(v7, v572, (uint64_t)&unk_1E99CB298, (uint64_t)CFSTR("inputLDCExecuteFlags"), v573);
    goto LABEL_100;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2808))(a1) == 5)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 2816))(v1457, a1);
    v574 = (unsigned __int16)((LODWORD(v1457[1]) - LODWORD(v1457[0])) >> 3);
    if (v574 <= 1)
    {
      v1379 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v1379, "RawCameraException");
      __cxa_throw(v1379, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v575 = (int)*(double *)v1457[0];
    v576 = (int)*((double *)v1457[0] + 1);
    if (v574 != (_DWORD)v575 + (_DWORD)v575 * (_DWORD)v576 + 2)
    {
      v1380 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v1380, "RawCameraException");
      __cxa_throw(v1380, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    __p[0] = 0;
    sub_1D528F9B4(&v1448, v575, __p);
    v1447[1] = 0;
    v1447[0] = 0;
    lpsrc = v1447;
    v1436 = 0;
    if ((_DWORD)v575)
    {
      v577 = 0;
      v578 = 2;
      do
      {
        v579 = (char *)v1457[0];
        *((_QWORD *)v1448 + (_QWORD)v577) = *((_QWORD *)v1457[0] + (unsigned __int16)v578);
        v580 = v578 + 1;
        __p[1] = 0;
        __p[0] = 0;
        *(_QWORD *)&v1465 = 0;
        sub_1D5282C70(__p, &v579[8 * (unsigned __int16)(v578 + 1)], (uint64_t)&v579[8 * (unsigned __int16)(v578 + 1) + 8 * v576], v576);
        v1439 = &v1436;
        v581 = sub_1D532DC34((uint64_t **)&lpsrc, (unint64_t *)&v1436, (uint64_t)&unk_1D544A5C4, (uint64_t **)&v1439);
        v582 = (void *)v581[5];
        if (v582)
        {
          v581[6] = (uint64_t)v582;
          operator delete(v582);
          v581[5] = 0;
          v581[6] = 0;
          v581[7] = 0;
        }
        *(_OWORD *)(v581 + 5) = *(_OWORD *)__p;
        v581[7] = v1465;
        v578 = v580 + v576;
        v577 = (char *)v1436 + 1;
        v1436 = v577;
      }
      while ((unint64_t)v577 < v575);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v1444, a1);
    v583 = v1444;
    sub_1D52850A0(__p, "IFD0:EXIF");
    v584 = (*(double (**)(uint64_t, void **))(*(_QWORD *)v583 + 304))(v583, __p);
    if (SBYTE7(v1465) < 0)
      operator delete(__p[0]);
    v585 = v1449;
    if (v1449 != v1448)
    {
      v586 = ((char *)v1449 - (_BYTE *)v1448) >> 3;
      v585 = v1448;
      do
      {
        v587 = v586 >> 1;
        v588 = (double *)&v585[8 * (v586 >> 1)];
        v590 = *v588;
        v589 = v588 + 1;
        v586 += ~(v586 >> 1);
        if (v584 < v590)
          v586 = v587;
        else
          v585 = v589;
      }
      while (v586);
    }
    v591 = (v585 - (_BYTE *)v1448) >> 3;
    if (v591 > (v575 - 1) && (_DWORD)v575 != 0)
      v591 = (v575 - 1);
    v1443 = v591;
    v593 = v591 - 1;
    if (!v591)
      v593 = 0;
    v1442 = v593;
    v594 = *((double *)v1448 + v591);
    v595 = *((double *)v1448 + v593);
    if (vabdd_f64(v594, v595) >= 0.000000001)
      v596 = v594 - v595;
    else
      v596 = 0.000000001;
    __p[0] = &v1442;
    v597 = sub_1D532DC34((uint64_t **)&lpsrc, &v1442, (uint64_t)&unk_1D544A5C4, (uint64_t **)__p);
    v1441 = 0;
    v1439 = 0;
    v1440 = 0;
    sub_1D5282C70(&v1439, (const void *)v597[5], v597[6], (v597[6] - v597[5]) >> 3);
    __p[0] = &v1443;
    v598 = sub_1D532DC34((uint64_t **)&lpsrc, &v1443, (uint64_t)&unk_1D544A5C4, (uint64_t **)__p);
    v1438 = 0;
    v1436 = 0;
    v1437 = 0;
    sub_1D5282C70(&v1436, (const void *)v598[5], v598[6], (v598[6] - v598[5]) >> 3);
    __p[0] = 0;
    sub_1D528F9B4(v1435, v576, __p);
    if ((_DWORD)v576)
    {
      v599 = fmin(fmax((v584 - v595) / v596, 0.0), 1.0);
      v600 = (double *)v1439;
      v601 = (double *)v1436;
      v602 = (double *)v1435[0];
      v603 = v576;
      do
      {
        v604 = *v600++;
        v605 = v604;
        v606 = *v601++;
        *v602++ = v599 * v606 + v605 * (1.0 - v599);
        --v603;
      }
      while (v603);
    }
    __p[0] = 0;
    sub_1D528F9B4(&v1433, v576 >> 1, __p);
    __p[0] = 0;
    sub_1D528F9B4(&v1431, v576 >> 1, __p);
    __p[0] = (void *)0x3FF0000000000000;
    sub_1D528F9B4(v1430, v576 >> 1, __p);
    if (v1430[0])
    {
      v1430[1] = v1430[0];
      operator delete(v1430[0]);
    }
    if (v576 >= 2)
    {
      v607 = v1433;
      v608 = v1431;
      if (v576 >> 1 <= 1uLL)
        v609 = 1;
      else
        v609 = v576 >> 1;
      v610 = (uint64_t *)((char *)v1435[0] + 8);
      do
      {
        *v607++ = *(v610 - 1);
        v611 = *v610;
        v610 += 2;
        *v608++ = v611;
        --v609;
      }
      while (v609);
    }
    __p[0] = 0;
    sub_1D528F9B4(v1429, 0x32uLL, __p);
    __p[0] = 0;
    sub_1D528F9B4(v1428, 0x32uLL, __p);
    v612 = 0;
    *(_QWORD *)&v1488 = 0;
    v1487 = 0u;
    v1486 = 0u;
    v1485 = 0u;
    v1484 = 0u;
    v1483 = 0u;
    v1482 = 0u;
    v1481 = 0u;
    v1480 = 0u;
    v1479 = 0u;
    v1478 = 0u;
    v1477 = 0u;
    v1475 = 0u;
    v1476 = 0u;
    v1473 = 0u;
    v1474 = 0u;
    v1471 = 0u;
    v1472 = 0u;
    *(_OWORD *)v1469 = 0u;
    v1470 = 0u;
    v1467 = 0u;
    v1468 = 0u;
    memset(v1466, 0, sizeof(v1466));
    *(_OWORD *)__p = 0u;
    v1465 = 0u;
    do
    {
      v1425 = 0;
      v1426 = 0;
      v1427 = 0;
      sub_1D5282C70(&v1425, v1433, (uint64_t)v1434, (v1434 - (_BYTE *)v1433) >> 3);
      v1422 = 0;
      v1423 = 0;
      v1424 = 0;
      v613 = sub_1D5282C70(&v1422, v1431, (uint64_t)v1432, (v1432 - (_BYTE *)v1431) >> 3);
      *(double *)&__p[v612] = sub_1D532A9A4((double)(int)v612 / 50.0, (uint64_t)v613, (double **)&v1425, (uint64_t *)&v1422);
      if (v1422)
      {
        v1423 = v1422;
        operator delete(v1422);
      }
      if (v1425)
      {
        v1426 = v1425;
        operator delete(v1425);
      }
      ++v612;
    }
    while (v612 != 51);
    objc_msgSend_vectorWithValues_count_(MEMORY[0x1E0C9DDF8], v614, (uint64_t)__p, 51, v615);
    v616 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v617, (uint64_t)v616, (uint64_t)CFSTR("inputScales"), v618);

    objc_msgSend_setObject_forKeyedSubscript_(v7, v619, (uint64_t)&unk_1E99CB2C8, (uint64_t)CFSTR("inputLDCExecuteFlags"), v620);
    if (v1428[0])
    {
      v1428[1] = v1428[0];
      operator delete(v1428[0]);
    }
    if (v1429[0])
    {
      v1429[1] = v1429[0];
      operator delete(v1429[0]);
    }
    if (v1431)
    {
      v1432 = v1431;
      operator delete(v1431);
    }
    if (v1433)
    {
      v1434 = v1433;
      operator delete(v1433);
    }
    if (v1435[0])
    {
      v1435[1] = v1435[0];
      operator delete(v1435[0]);
    }
    if (v1436)
    {
      v1437 = (std::__shared_weak_count *)v1436;
      operator delete(v1436);
    }
    if (v1439)
    {
      v1440 = v1439;
      operator delete(v1439);
    }
    v621 = v1445;
    if (v1445)
    {
      p_shared_owners = (unint64_t *)&v1445->__shared_owners_;
      do
        v623 = __ldaxr(p_shared_owners);
      while (__stlxr(v623 - 1, p_shared_owners));
      if (!v623)
      {
        ((void (*)(std::__shared_weak_count *))v621->__on_zero_shared)(v621);
        std::__shared_weak_count::__release_weak(v621);
      }
    }
    sub_1D528EEB8((uint64_t)&lpsrc, v1447[0]);
    if (v1448)
    {
      v1449 = (std::__shared_weak_count *)v1448;
      operator delete(v1448);
    }
    goto LABEL_96;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2808))(a1) != 1)
  {
    v680 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2808))(a1);
    v681 = *(_QWORD *)a1;
    if (v680 == 4)
    {
      (*(void (**)(uint64_t))(v681 + 456))(a1);
      v683 = v682;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(__p, a1);
      if (__p[0]
        && (v684 = __dynamic_cast(__p[0], (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9975D70, 0)) != 0)
      {
        v1436 = v684;
        v1437 = (std::__shared_weak_count *)__p[1];
        v685 = __p;
      }
      else
      {
        v685 = &v1436;
      }
      *v685 = 0;
      v685[1] = 0;
      v765 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v766 = (unint64_t *)((char *)__p[1] + 8);
        do
          v767 = __ldaxr(v766);
        while (__stlxr(v767 - 1, v766));
        if (!v767)
        {
          ((void (*)(std::__shared_weak_count *))v765->__on_zero_shared)(v765);
          std::__shared_weak_count::__release_weak(v765);
        }
      }
      if (v1436)
      {
        sub_1D52EDD08((uint64_t)v1436, __p);
        v768 = (__int16 *)__p[0];
        v769 = (char *)__p[1] - (char *)__p[0];
        if (__p[1] != __p[0])
        {
          v770 = v769 >> 1;
          __p[0] = 0;
          sub_1D528F9B4(v1457, v769 >> 1, __p);
          __p[0] = 0;
          sub_1D528F9B4(&v1448, v770, __p);
          v771 = 0;
          v772 = sqrt((double)((int)v683 * (int)v683 + HIDWORD(v683) * HIDWORD(v683)));
          v773 = v770 - 1;
          v774 = (double *)v1457[0];
          v775 = (double *)v1448;
          if (v770 <= 1)
            v776 = 1;
          else
            v776 = v770;
          do
          {
            v774[v771] = (double)v771 / (double)(v770 - 1);
            v777 = (double)v768[v771] * -0.0000610351562 + 1.0;
            if (fabs(v777) < 0.000000001)
              v777 = dbl_1D544A7F0[v777 > 0.0];
            v775[v771++] = 1.0 / v777;
          }
          while (v776 != v771);
          if (v768[v773] < 0)
          {
            v1166 = (double *)v1457[1];
            v1167 = (double)SHIDWORD(v683) / v772;
            if (v1457[1] != v1457[0])
            {
              v1168 = ((char *)v1457[1] - (char *)v1457[0]) >> 3;
              v1166 = (double *)v1457[0];
              do
              {
                v1169 = v1168 >> 1;
                v1170 = &v1166[v1168 >> 1];
                v1172 = *v1170;
                v1171 = v1170 + 1;
                v1168 += ~(v1168 >> 1);
                if (v1167 < v1172)
                  v1168 = v1169;
                else
                  v1166 = v1171;
              }
              while (v1168);
            }
            v1173 = (char *)v1166 - (char *)v1457[0];
            v1174 = ((char *)v1166 - (char *)v1457[0]) >> 3;
            if (v773 >= v1173 >> 3)
              v773 = v1174;
            v1175 = v773 - 1;
            if (!v773)
              v1175 = 0;
            v1176 = *((double *)v1457[0] + v773);
            v1177 = *((double *)v1457[0] + v1175);
            if (vabdd_f64(v1176, v1177) >= 0.000000001)
              v1178 = v1176 - v1177;
            else
              v1178 = dbl_1D544A7F0[v1176 - v1177 > 0.0];
            v778 = (double *)v1448;
            v1179 = fmin(fmax((v1167 - v1177) / v1178, 0.0), 1.0);
            v779 = *((double *)v1448 + v773) * v1179 + *((double *)v1448 + v1175) * (1.0 - v1179);
          }
          else
          {
            v778 = (double *)v1448;
            v779 = *((double *)v1448 + v773);
          }
          do
          {
            *v778 = *v778 / v779;
            ++v778;
            --v776;
          }
          while (v776);
          __p[0] = 0;
          sub_1D528F9B4(&lpsrc, 0x32uLL, __p);
          __p[0] = 0;
          sub_1D528F9B4(&v1439, 0x32uLL, __p);
          v1180 = 0;
          *(_QWORD *)&v1488 = 0;
          v1487 = 0u;
          v1486 = 0u;
          v1485 = 0u;
          v1484 = 0u;
          v1483 = 0u;
          v1482 = 0u;
          v1481 = 0u;
          v1480 = 0u;
          v1479 = 0u;
          v1478 = 0u;
          v1477 = 0u;
          v1475 = 0u;
          v1476 = 0u;
          v1473 = 0u;
          v1474 = 0u;
          v1471 = 0u;
          v1472 = 0u;
          *(_OWORD *)v1469 = 0u;
          v1470 = 0u;
          v1467 = 0u;
          v1468 = 0u;
          memset(v1466, 0, sizeof(v1466));
          *(_OWORD *)__p = 0u;
          v1465 = 0u;
          do
          {
            v1419 = 0;
            v1420 = 0;
            v1421 = 0;
            sub_1D5282C70(&v1419, v1457[0], (uint64_t)v1457[1], ((char *)v1457[1] - (char *)v1457[0]) >> 3);
            v1416 = 0;
            v1417 = 0;
            v1418 = 0;
            v1181 = sub_1D5282C70(&v1416, v1448, (uint64_t)v1449, ((char *)v1449 - (_BYTE *)v1448) >> 3);
            *(double *)&__p[v1180] = sub_1D532A9A4((double)(int)v1180 / 50.0, (uint64_t)v1181, (double **)&v1419, (uint64_t *)&v1416);
            if (v1416)
            {
              v1417 = v1416;
              operator delete(v1416);
            }
            if (v1419)
            {
              v1420 = v1419;
              operator delete(v1419);
            }
            ++v1180;
          }
          while (v1180 != 51);
          objc_msgSend_vectorWithValues_count_(MEMORY[0x1E0C9DDF8], v1182, (uint64_t)__p, 51, v1183);
          v1184 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v7, v1185, (uint64_t)v1184, (uint64_t)CFSTR("inputScales"), v1186);

          objc_msgSend_setObject_forKeyedSubscript_(v7, v1187, (uint64_t)&unk_1E99CB2C8, (uint64_t)CFSTR("inputLDCExecuteFlags"), v1188);
          if (v1439)
          {
            v1440 = v1439;
            operator delete(v1439);
          }
          if (lpsrc)
          {
            v1447[0] = lpsrc;
            operator delete(lpsrc);
          }
          if (v1448)
          {
            v1449 = (std::__shared_weak_count *)v1448;
            operator delete(v1448);
          }
          if (v1457[0])
          {
            v1457[1] = v1457[0];
            operator delete(v1457[0]);
          }
        }
        if (v768)
          operator delete(v768);
      }
      v722 = v1437;
      if (!v1437)
        goto LABEL_100;
      v1189 = (unint64_t *)&v1437->__shared_owners_;
      do
        v724 = __ldaxr(v1189);
      while (__stlxr(v724 - 1, v1189));
      goto LABEL_455;
    }
    if ((*(unsigned int (**)(uint64_t))(v681 + 2808))(a1) == 6)
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(__p, a1);
      if (__p[0]
        && (v727 = __dynamic_cast(__p[0], (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E99732D0, 0)) != 0)
      {
        v1457[0] = v727;
        v1457[1] = __p[1];
        v728 = __p;
      }
      else
      {
        v728 = v1457;
      }
      *v728 = 0;
      v728[1] = 0;
      v1129 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v1130 = (unint64_t *)((char *)__p[1] + 8);
        do
          v1131 = __ldaxr(v1130);
        while (__stlxr(v1131 - 1, v1130));
        if (!v1131)
        {
          ((void (*)(std::__shared_weak_count *))v1129->__on_zero_shared)(v1129);
          std::__shared_weak_count::__release_weak(v1129);
        }
      }
      v1132 = v1457[0];
      if (v1457[0] && (*(unsigned int (**)(void *))(*(_QWORD *)v1457[0] + 792))(v1457[0]))
      {
        v1133 = (double *)*((_QWORD *)v1132 + 148);
        v1134 = *v1133;
        v1135 = v1133[1];
        v1136 = v1133[2];
        v1401 = *((uint64_t *)v1133 + 3);
        (*(void (**)(void *))(*(_QWORD *)v1132 + 464))(v1132);
        v1139 = 0;
        v1140 = *(double *)&v1401 * (*(double *)&v1401 * *(double *)&v1401);
        v1141 = *(double *)&v1401 * (*(double *)&v1401 * v1140);
        v1142 = *(double *)&v1401 * (*(double *)&v1401 * v1141);
        v1143 = *((_DWORD *)v1132 + 302);
        v1144 = *((_DWORD *)v1132 + 303);
        v1145 = v1135 * v1141;
        v1146 = v1136 * v1142;
        *(_QWORD *)&v1488 = 0;
        v1487 = 0u;
        v1486 = 0u;
        v1485 = 0u;
        v1484 = 0u;
        v1483 = 0u;
        v1482 = 0u;
        v1481 = 0u;
        v1480 = 0u;
        v1479 = 0u;
        v1478 = 0u;
        v1477 = 0u;
        v1475 = 0u;
        v1476 = 0u;
        v1473 = 0u;
        v1474 = 0u;
        v1471 = 0u;
        v1472 = 0u;
        *(_OWORD *)v1469 = 0u;
        v1470 = 0u;
        v1467 = 0u;
        v1468 = 0u;
        memset(v1466, 0, sizeof(v1466));
        *(_OWORD *)__p = 0u;
        v1465 = 0u;
        v1147 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v1134 * v1140), 0);
        v1148 = (float64x2_t)vdupq_lane_s64(v1401, 0);
        v1149 = (int32x2_t)0x100000000;
        v1150 = (uint64x2_t)vdupq_n_s64(0x33uLL);
        v1151 = (float64x2_t)vdupq_n_s64(0x4049000000000000uLL);
        v1152 = (int64x2_t)xmmword_1D5447F70;
        v1153 = vdupq_n_s64(2uLL);
        do
        {
          v1154.i64[0] = v1149.i32[0];
          v1154.i64[1] = v1149.i32[1];
          v1155 = vcvtq_f64_s64(v1154);
          v1156 = vmulq_n_f64(vdivq_f64(vdivq_f64(vmulq_f64(v1155, v1155), v1151), v1151), (double)((int)v1137 * (int)v1137 + HIDWORD(v1137) * HIDWORD(v1137))/ (double)(v1143 * v1143 + v1144 * v1144));
          v1157 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v1148, v1156, v1147), v1156, vmulq_n_f64(v1156, v1145)), v1156, vmulq_f64(v1156, vmulq_n_f64(v1156, v1146)));
          if ((vmovn_s64((int64x2_t)vcgtq_u64(v1150, (uint64x2_t)v1152)).u8[0] & 1) != 0)
            __p[v1139] = *(void **)&v1157.f64[0];
          if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x33uLL), *(uint64x2_t *)&v1152)).i32[1] & 1) != 0)
            __p[v1139 + 1] = *(void **)&v1157.f64[1];
          v1152 = vaddq_s64(v1152, v1153);
          v1149 = vadd_s32(v1149, (int32x2_t)0x200000002);
          v1139 += 2;
        }
        while (v1139 != 52);
        objc_msgSend_vectorWithValues_count_(MEMORY[0x1E0C9DDF8], v1137, (uint64_t)__p, 51, v1138);
        v1158 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1159, (uint64_t)v1158, (uint64_t)CFSTR("inputScales"), v1160);

        objc_msgSend_setObject_forKeyedSubscript_(v7, v1161, (uint64_t)&unk_1E99CB2C8, (uint64_t)CFSTR("inputLDCExecuteFlags"), v1162);
      }
      else
      {
        objc_msgSend_setObject_forKeyedSubscript_(v7, v725, (uint64_t)&unk_1E99CB298, (uint64_t)CFSTR("inputLDCExecuteFlags"), v726);
      }
      v722 = (std::__shared_weak_count *)v1457[1];
      if (!v1457[1])
        goto LABEL_100;
      v1163 = (unint64_t *)((char *)v1457[1] + 8);
      do
        v724 = __ldaxr(v1163);
      while (__stlxr(v724 - 1, v1163));
LABEL_455:
      if (!v724)
      {
        ((void (*)(std::__shared_weak_count *))v722->__on_zero_shared)(v722);
        std::__shared_weak_count::__release_weak(v722);
      }
      goto LABEL_100;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2808))(a1) == 3)
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 2816))(v1457, a1);
      v624 = v1457[0];
      v780 = ((char *)v1457[1] - (char *)v1457[0]) >> 3;
      if (v780 != 20 && v780 != 8)
      {
LABEL_97:
        if (v624)
        {
          v1457[1] = v624;
          operator delete(v624);
        }
        goto LABEL_100;
      }
      v781 = 64;
      if ((void *)((char *)v1457[1] - (char *)v1457[0]) == (void *)64)
        v781 = 16;
      v1392 = *(_QWORD *)v1457[0];
      v1389 = *((_QWORD *)v1457[0] + 1);
      v782 = (double *)((char *)v1457[0] + v781);
      v1400 = *v782;
      v1396 = v782[1];
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(__p, a1);
      if (__p[0])
      {
        v1448 = __p[0];
        v1449 = (std::__shared_weak_count *)__p[1];
        v783 = __p;
      }
      else
      {
        v783 = &v1448;
      }
      *v783 = 0;
      v783[1] = 0;
      sub_1D5282EB4((uint64_t)__p);
      if (v1448)
      {
        v1225 = 0;
        *(_QWORD *)&v1488 = 0;
        v1487 = 0u;
        v1486 = 0u;
        v1485 = 0u;
        v1484 = 0u;
        v1483 = 0u;
        v1482 = 0u;
        v1481 = 0u;
        v1480 = 0u;
        v1479 = 0u;
        v1478 = 0u;
        v1477 = 0u;
        v1475 = 0u;
        v1476 = 0u;
        v1473 = 0u;
        v1474 = 0u;
        v1471 = 0u;
        v1472 = 0u;
        *(_OWORD *)v1469 = 0u;
        v1470 = 0u;
        v1467 = 0u;
        v1468 = 0u;
        memset(v1466, 0, sizeof(v1466));
        *(_OWORD *)__p = 0u;
        v1465 = 0u;
        v1226 = (float64x2_t)vdupq_lane_s64(v1389, 0);
        v1227 = (int32x2_t)0x100000000;
        v1228 = (int64x2_t)xmmword_1D5447F70;
        v1229 = (float64x2_t)vdupq_n_s64(0x4049000000000000uLL);
        v1230 = vdupq_n_s64(2uLL);
        v1231 = (float64x2_t)vdupq_lane_s64(v1392, 0);
        v1232 = (uint64x2_t)vdupq_n_s64(0x33uLL);
        do
        {
          v1233.i64[0] = v1227.i32[0];
          v1233.i64[1] = v1227.i32[1];
          v1234 = vdivq_f64(vcvtq_f64_s64(v1233), v1229);
          v1235 = vmulq_f64(v1234, v1234);
          v1236 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v1231, v1235, v1226), v1235, vmulq_n_f64(v1235, v1400)), v1235, vmulq_f64(v1235, vmulq_n_f64(v1235, v1396)));
          if ((vmovn_s64((int64x2_t)vcgtq_u64(v1232, (uint64x2_t)v1228)).u8[0] & 1) != 0)
            __p[v1225] = *(void **)&v1236.f64[0];
          if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x33uLL), *(uint64x2_t *)&v1228)).i32[1] & 1) != 0)
            __p[v1225 + 1] = *(void **)&v1236.f64[1];
          v1228 = vaddq_s64(v1228, v1230);
          v1227 = vadd_s32(v1227, (int32x2_t)0x200000002);
          v1225 += 2;
        }
        while (v1225 != 52);
        objc_msgSend_vectorWithValues_count_(MEMORY[0x1E0C9DDF8], v1223, (uint64_t)__p, 51, v1224);
        v1237 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1238, (uint64_t)v1237, (uint64_t)CFSTR("inputScales"), v1239);

        objc_msgSend_setObject_forKeyedSubscript_(v7, v1240, (uint64_t)&unk_1E99CB2C8, (uint64_t)CFSTR("inputLDCExecuteFlags"), v1241);
      }
      sub_1D5282EB4((uint64_t)&v1448);
LABEL_96:
      v624 = v1457[0];
      goto LABEL_97;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2808))(a1) == 7)
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(__p, a1);
      if (__p[0]
        && (v1164 = __dynamic_cast(__p[0], (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9976FF0, 0)) != 0)
      {
        v1448 = v1164;
        v1449 = (std::__shared_weak_count *)__p[1];
        v1165 = __p;
      }
      else
      {
        v1165 = &v1448;
      }
      *v1165 = 0;
      v1165[1] = 0;
      sub_1D5282EB4((uint64_t)__p);
      if (v1448)
      {
        sub_1D5300FF0((uint64_t)v1448, 1, (uint64_t)v1457);
        if ((void *)((char *)v1457[1] - (char *)v1457[0]) == (void *)16)
        {
          sub_1D532AAD8((uint64_t)v1457[0], &lpsrc);
          if (lpsrc
            && ((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)lpsrc + 3) - *((_QWORD *)lpsrc + 2)) >> 3)) | 2) == 3)
          {
            sub_1D53A14CC(lpsrc, (char **)__p);
            v1221 = (double *)__p[0];
            v1222 = __p[1];
          }
          else
          {
            v1222 = 0;
            v1221 = 0;
          }
          sub_1D5282EB4((uint64_t)&lpsrc);
        }
        else
        {
          v1222 = 0;
          v1221 = 0;
        }
        v1246 = (v1222 - (_BYTE *)v1221) >> 3;
        if (v1246 == 20 || v1246 == 8)
        {
          v1247 = 8;
          if (v1222 - (_BYTE *)v1221 == 64)
            v1247 = 2;
          v1248 = (uint64_t *)&v1221[v1247];
          v1394 = *v1248;
          v1391 = v1248[1];
          v1403 = *((double *)v1248 + 2);
          v1398 = *((double *)v1248 + 3);
          (*(void (**)(void *))(*(_QWORD *)v1448 + 448))(v1448);
          v1250 = v1249;
          (*(void (**)(void *))(*(_QWORD *)v1448 + 464))(v1448);
          v1253 = 0;
          *(_QWORD *)&v1488 = 0;
          v1487 = 0u;
          v1486 = 0u;
          v1485 = 0u;
          v1484 = 0u;
          v1483 = 0u;
          v1482 = 0u;
          v1481 = 0u;
          v1480 = 0u;
          v1479 = 0u;
          v1478 = 0u;
          v1477 = 0u;
          v1475 = 0u;
          v1476 = 0u;
          v1473 = 0u;
          v1474 = 0u;
          v1471 = 0u;
          v1472 = 0u;
          *(_OWORD *)v1469 = 0u;
          v1470 = 0u;
          v1467 = 0u;
          v1468 = 0u;
          memset(v1466, 0, sizeof(v1466));
          *(_OWORD *)__p = 0u;
          v1465 = 0u;
          v1254 = (float64x2_t)vdupq_lane_s64(v1391, 0);
          v1255 = sqrt((double)((int)v1251 * (int)v1251 + HIDWORD(v1251) * HIDWORD(v1251)))
                / sqrt((double)((int)v1250 * (int)v1250 + HIDWORD(v1250) * HIDWORD(v1250)));
          v1256 = (float64x2_t)vdupq_lane_s64(v1394, 0);
          v1257 = (int32x2_t)0x100000000;
          v1258 = (float64x2_t)vdupq_n_s64(0x4049000000000000uLL);
          v1259 = (uint64x2_t)vdupq_n_s64(0x33uLL);
          v1260 = (int64x2_t)xmmword_1D5447F70;
          v1261 = vdupq_n_s64(2uLL);
          do
          {
            v1262.i64[0] = v1257.i32[0];
            v1262.i64[1] = v1257.i32[1];
            v1263 = vdivq_f64(vmulq_n_f64(vcvtq_f64_s64(v1262), v1255), v1258);
            v1264 = vmulq_f64(v1263, v1263);
            v1265 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v1256, v1264, v1254), v1264, vmulq_n_f64(v1264, v1403)), v1264, vmulq_f64(v1264, vmulq_n_f64(v1264, v1398)));
            if ((vmovn_s64((int64x2_t)vcgtq_u64(v1259, (uint64x2_t)v1260)).u8[0] & 1) != 0)
              __p[v1253] = *(void **)&v1265.f64[0];
            if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x33uLL), *(uint64x2_t *)&v1260)).i32[1] & 1) != 0)
              __p[v1253 + 1] = *(void **)&v1265.f64[1];
            v1260 = vaddq_s64(v1260, v1261);
            v1257 = vadd_s32(v1257, (int32x2_t)0x200000002);
            v1253 += 2;
          }
          while (v1253 != 52);
          objc_msgSend_vectorWithValues_count_(MEMORY[0x1E0C9DDF8], v1251, (uint64_t)__p, 51, v1252);
          v1266 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v7, v1267, (uint64_t)v1266, (uint64_t)CFSTR("inputScales"), v1268);

          objc_msgSend_setObject_forKeyedSubscript_(v7, v1269, (uint64_t)&unk_1E99CB2C8, (uint64_t)CFSTR("inputLDCExecuteFlags"), v1270);
        }
        sub_1D5300FF0((uint64_t)v1448, 14, (uint64_t)__p);
        sub_1D5304784(v1457);
        *(_OWORD *)v1457 = *(_OWORD *)__p;
        *(_QWORD *)&v1458.f64[0] = v1465;
        *(_QWORD *)&v1465 = 0;
        __p[1] = 0;
        __p[0] = 0;
        lpsrc = __p;
        sub_1D5282E44((void ***)&lpsrc);
        if ((void *)((char *)v1457[1] - (char *)v1457[0]) == (void *)16)
        {
          sub_1D532AB44((uint64_t)v1457[0], &lpsrc);
          if (lpsrc
            && ((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)lpsrc + 3) - *((_QWORD *)lpsrc + 2)) >> 3)) | 2) == 3)
          {
            sub_1D5331C3C((uint64_t)lpsrc, __p);
            if (v1221)
              operator delete(v1221);
            v1221 = (double *)__p[0];
            v1222 = __p[1];
          }
          if (v1222 - (_BYTE *)v1221 == 152)
          {
            v1273 = 0;
            *(_QWORD *)&v1488 = 0;
            v1487 = 0u;
            v1486 = 0u;
            v1485 = 0u;
            v1484 = 0u;
            v1483 = 0u;
            v1482 = 0u;
            v1481 = 0u;
            v1480 = 0u;
            v1479 = 0u;
            v1478 = 0u;
            v1477 = 0u;
            v1475 = 0u;
            v1476 = 0u;
            v1473 = 0u;
            v1474 = 0u;
            v1471 = 0u;
            v1472 = 0u;
            *(_OWORD *)v1469 = 0u;
            v1470 = 0u;
            v1467 = 0u;
            v1468 = 0u;
            memset(v1466, 0, sizeof(v1466));
            *(_OWORD *)__p = 0u;
            v1465 = 0u;
            v1274 = *((_DWORD *)lpsrc + 20);
            do
            {
              v1275 = *v1221;
              v1276 = 1;
              v1277 = (double)(int)v1273 / 50.0;
              do
              {
                v1275 = v1275 + v1221[v1276] * v1277;
                v1277 = (double)(int)v1273 / 50.0 * v1277;
                ++v1276;
              }
              while (v1276 != 15);
              if (v1274)
                v1275 = 1.0 / v1275;
              *(double *)&__p[v1273++] = v1275;
            }
            while (v1273 != 51);
            objc_msgSend_vectorWithValues_count_(MEMORY[0x1E0C9DDF8], v1271, (uint64_t)__p, 51, v1272, 1.0);
            v1278 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_setObject_forKeyedSubscript_(v7, v1279, (uint64_t)v1278, (uint64_t)CFSTR("inputScales"), v1280);

            objc_msgSend_setObject_forKeyedSubscript_(v7, v1281, (uint64_t)&unk_1E99CB2C8, (uint64_t)CFSTR("inputLDCExecuteFlags"), v1282);
          }
          sub_1D5282EB4((uint64_t)&lpsrc);
        }
        __p[0] = v1457;
        sub_1D5282E44((void ***)__p);
        if (v1221)
          operator delete(v1221);
      }
      sub_1D5282EB4((uint64_t)&v1448);
      goto LABEL_100;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2808))(a1) == 2)
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 2816))(v1457, a1);
      if ((void *)((char *)v1457[1] - (char *)v1457[0]) != (void *)64)
      {
        v1381 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v1381, "RawCameraException");
        __cxa_throw(v1381, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v1190 = *(double *)v1457[0];
      v1386 = *((_QWORD *)v1457[0] + 2);
      v1387 = *((_QWORD *)v1457[0] + 3);
      v1388 = *((_QWORD *)v1457[0] + 1);
      v1390 = *((_QWORD *)v1457[0] + 4);
      v1393 = *((_QWORD *)v1457[0] + 5);
      v1397 = *((_QWORD *)v1457[0] + 6);
      v1402 = *((_QWORD *)v1457[0] + 7);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 456))(a1);
      v1193 = 0;
      *(_QWORD *)&v1488 = 0;
      v1487 = 0u;
      v1486 = 0u;
      v1485 = 0u;
      v1484 = 0u;
      v1483 = 0u;
      v1482 = 0u;
      v1481 = 0u;
      v1480 = 0u;
      v1479 = 0u;
      v1478 = 0u;
      v1477 = 0u;
      v1475 = 0u;
      v1476 = 0u;
      v1473 = 0u;
      v1474 = 0u;
      v1471 = 0u;
      v1472 = 0u;
      *(_OWORD *)v1469 = 0u;
      v1470 = 0u;
      v1467 = 0u;
      v1468 = 0u;
      memset(v1466, 0, sizeof(v1466));
      *(_OWORD *)__p = 0u;
      v1465 = 0u;
      v1194 = (unint64_t)v1191 >> 32;
      if (SHIDWORD(v1191) < 0)
        LODWORD(v1194) = HIDWORD(v1191) + 1;
      v1195 = (int)v1194 >> 1;
      if ((int)v1191 >= 0)
        v1196 = (int)v1191;
      else
        v1196 = (_DWORD)v1191 + 1;
      v1197 = (float64x2_t)vdupq_lane_s64(v1386, 0);
      v1198 = (float64x2_t)vdupq_lane_s64(v1388, 0);
      v1199 = (float64x2_t)vdupq_lane_s64(v1387, 0);
      v1200 = (float64x2_t)vdupq_lane_s64(v1390, 0);
      v1201 = (float64x2_t)vdupq_lane_s64(v1393, 0);
      v1202 = sqrt((double)((v1196 >> 1) * (v1196 >> 1) + v1195 * v1195)) / v1190 * 0.0004;
      v1203 = (float64x2_t)vdupq_lane_s64(v1397, 0);
      v1204 = (float64x2_t)vdupq_lane_s64(v1402, 0);
      v1205 = (int32x2_t)0x100000000;
      v1206 = (int64x2_t)xmmword_1D5447F70;
      v1207 = (uint64x2_t)vdupq_n_s64(0x33uLL);
      v1208 = vdupq_n_s64(2uLL);
      do
      {
        v1209.i64[0] = v1205.i32[0];
        v1209.i64[1] = v1205.i32[1];
        v1210 = vcvtq_f64_s64(v1209);
        v1211 = vmulq_f64(vmulq_n_f64(v1210, v1202), v1210);
        v1212 = vmulq_f64(v1211, v1211);
        v1213 = vmulq_f64(v1211, v1212);
        v1214 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v1198, v1211, v1197), v1212, v1199), v1213, v1200), vmulq_f64(v1212, v1212), v1201), vmulq_f64(v1212, v1213), v1203), vmulq_f64(v1213, v1213), v1204);
        if ((vmovn_s64((int64x2_t)vcgtq_u64(v1207, (uint64x2_t)v1206)).u8[0] & 1) != 0)
        {
          if (v1214.f64[0] <= 1.0)
            v1215 = v1214.f64[0];
          else
            v1215 = 1.0;
          *(double *)&__p[v1193] = v1215;
        }
        if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x33uLL), *(uint64x2_t *)&v1206)).i32[1] & 1) != 0)
        {
          v1214.f64[0] = v1214.f64[1];
          if (v1214.f64[1] > 1.0)
            v1214.f64[0] = 1.0;
          __p[v1193 + 1] = *(void **)&v1214.f64[0];
        }
        v1206 = vaddq_s64(v1206, v1208);
        v1205 = vadd_s32(v1205, (int32x2_t)0x200000002);
        v1193 += 2;
      }
      while (v1193 != 52);
      objc_msgSend_vectorWithValues_count_(MEMORY[0x1E0C9DDF8], v1191, (uint64_t)__p, 51, v1192);
      v1216 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v1217, (uint64_t)v1216, (uint64_t)CFSTR("inputScales"), v1218);

      objc_msgSend_setObject_forKeyedSubscript_(v7, v1219, (uint64_t)&unk_1E99CB2C8, (uint64_t)CFSTR("inputLDCExecuteFlags"), v1220);
      goto LABEL_96;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2808))(a1) == 8
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2808))(a1) == 10)
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(__p, a1);
      if (__p[0]
        && (v1242 = __dynamic_cast(__p[0], (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9974B38, 0)) != 0)
      {
        v1457[0] = v1242;
        v1457[1] = __p[1];
        v1243 = __p;
      }
      else
      {
        v1243 = v1457;
      }
      *v1243 = 0;
      v1243[1] = 0;
      sub_1D5282EB4((uint64_t)__p);
      if (v1457[0])
      {
        v1449 = 0;
        v1448 = 0;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1))
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v1457[0] + 840))(&lpsrc);
        else
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v1457[0] + 832))(&lpsrc);
        if (lpsrc
          && (v1286 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E997DD10, (const struct __class_type_info *)&unk_1E99A6F48, 0)) != 0)
        {
          __p[0] = v1286;
          __p[1] = v1447[0];
          p_lpsrc = &lpsrc;
        }
        else
        {
          p_lpsrc = __p;
        }
        *p_lpsrc = 0;
        p_lpsrc[1] = 0;
        sub_1D5292548((uint64_t)&v1448, (__int128 *)__p);
        sub_1D5282EB4((uint64_t)__p);
        sub_1D5282EB4((uint64_t)&lpsrc);
        if (v1448)
        {
          v1290 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2808))(a1);
          v1291 = 16;
          if (v1290 == 10)
            v1291 = 24;
          (*(void (**)(void *))(*(_QWORD *)v1448 + v1291))(v1448);
          v1292 = 0;
          *(_QWORD *)&v1488 = 0;
          v1487 = 0u;
          v1486 = 0u;
          v1485 = 0u;
          v1484 = 0u;
          v1483 = 0u;
          v1482 = 0u;
          v1481 = 0u;
          v1480 = 0u;
          v1479 = 0u;
          v1478 = 0u;
          v1477 = 0u;
          v1475 = 0u;
          v1476 = 0u;
          v1473 = 0u;
          v1474 = 0u;
          v1471 = 0u;
          v1472 = 0u;
          *(_OWORD *)v1469 = 0u;
          v1470 = 0u;
          v1467 = 0u;
          v1468 = 0u;
          memset(v1466, 0, sizeof(v1466));
          *(_OWORD *)__p = 0u;
          v1465 = 0u;
          do
          {
            v1414 = 0;
            v1415 = 0;
            v1413 = 0;
            sub_1D5282C70(&v1413, *((const void **)v1448 + 5), *((_QWORD *)v1448 + 6), (uint64_t)(*((_QWORD *)v1448 + 6) - *((_QWORD *)v1448 + 5)) >> 3);
            v1411 = 0;
            v1412 = 0;
            v1410 = 0;
            v1293 = sub_1D5282C70(&v1410, *((const void **)v1448 + 8), *((_QWORD *)v1448 + 9), (uint64_t)(*((_QWORD *)v1448 + 9) - *((_QWORD *)v1448 + 8)) >> 3);
            *(double *)&__p[v1292] = sub_1D532A9A4((double)(int)v1292 / 50.0, (uint64_t)v1293, (double **)&v1413, (uint64_t *)&v1410);
            if (v1410)
            {
              v1411 = v1410;
              operator delete(v1410);
            }
            if (v1413)
            {
              v1414 = v1413;
              operator delete(v1413);
            }
            ++v1292;
          }
          while (v1292 != 51);
          objc_msgSend_vectorWithValues_count_(MEMORY[0x1E0C9DDF8], v1294, (uint64_t)__p, 51, v1295);
          v1296 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v7, v1297, (uint64_t)v1296, (uint64_t)CFSTR("inputScales"), v1298);

          objc_msgSend_setObject_forKeyedSubscript_(v7, v1299, (uint64_t)&unk_1E99CB2C8, (uint64_t)CFSTR("inputLDCExecuteFlags"), v1300);
        }
        else
        {
          objc_msgSend_setObject_forKeyedSubscript_(v7, v1288, (uint64_t)&unk_1E99CB298, (uint64_t)CFSTR("inputLDCExecuteFlags"), v1289);
        }
        sub_1D5282EB4((uint64_t)&v1448);
      }
      else
      {
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1244, (uint64_t)&unk_1E99CB298, (uint64_t)CFSTR("inputLDCExecuteFlags"), v1245);
      }
      sub_1D5282EB4((uint64_t)v1457);
      goto LABEL_100;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2808))(a1) != 9)
      goto LABEL_100;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(__p, a1);
    if (__p[0]
      && (v1284 = __dynamic_cast(__p[0], (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9990738, 0)) != 0)
    {
      v1439 = v1284;
      v1440 = __p[1];
      v1285 = __p;
    }
    else
    {
      v1285 = &v1439;
    }
    *v1285 = 0;
    v1285[1] = 0;
    sub_1D5282EB4((uint64_t)__p);
    if (v1439)
    {
      v1302 = (*(uint64_t (**)(void *))(*(_QWORD *)v1439 + 888))(v1439);
      v1303 = v1439;
      if (v1302 < 4)
      {
        v1352 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2776))(a1);
        if ((*(unsigned int (**)(void *, uint64_t))(*(_QWORD *)v1303 + 936))(v1303, v1352))
        {
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v1439 + 944))(v1457);
          v1353 = (*(float (**)(void *))(*(_QWORD *)v1439 + 952))(v1439);
          (*(void (**)(void *))(*(_QWORD *)v1439 + 984))(v1439);
          v1354 = (*(uint64_t (**)(void *))(*(_QWORD *)v1439 + 440))(v1439);
          (*(void (**)(void *))(*(_QWORD *)v1439 + 464))(v1439);
          v1357 = 0;
          v1358 = (double)((int)v1355 * (int)v1355 + HIDWORD(v1355) * HIDWORD(v1355))
                / (double)((int)v1354 * (int)v1354 + HIDWORD(v1354) * HIDWORD(v1354));
          v1359 = *(float *)v1457[0];
          v1360 = *((float *)v1457[0] + 1);
          v1361 = *((float *)v1457[0] + 2);
          *(_QWORD *)&v1488 = 0;
          v1487 = 0u;
          v1486 = 0u;
          v1485 = 0u;
          v1484 = 0u;
          v1483 = 0u;
          v1482 = 0u;
          v1481 = 0u;
          v1480 = 0u;
          v1479 = 0u;
          v1478 = 0u;
          v1477 = 0u;
          v1475 = 0u;
          v1476 = 0u;
          v1473 = 0u;
          v1474 = 0u;
          v1471 = 0u;
          v1472 = 0u;
          *(_OWORD *)v1469 = 0u;
          v1470 = 0u;
          v1467 = 0u;
          v1468 = 0u;
          memset(v1466, 0, sizeof(v1466));
          *(_OWORD *)__p = 0u;
          v1465 = 0u;
          v1362 = (float)(v1353 + 1.0);
          v1363 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v1361), 0);
          v1364 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(v1358)), 0);
          v1365 = (int32x2_t)0x100000000;
          v1366 = (int64x2_t)xmmword_1D5447F70;
          v1367 = (uint64x2_t)vdupq_n_s64(0x33uLL);
          v1368 = (float64x2_t)vdupq_n_s64(0x4049000000000000uLL);
          v1369 = vdupq_n_s64(2uLL);
          do
          {
            v1370.i64[0] = v1365.i32[0];
            v1370.i64[1] = v1365.i32[1];
            v1371 = vcvtq_f64_s64(v1370);
            v1372 = vmulq_n_f64(vdivq_f64(vdivq_f64(vmulq_f64(v1371, v1371), v1368), v1368), v1358);
            v1373 = vmlaq_f64(vmlaq_f64(vmulq_f64(vdivq_f64(vdivq_f64(v1371, v1368), v1364), vmulq_n_f64(v1372, v1360)), v1372, vmulq_n_f64(v1372, v1359)), v1372, v1363);
            if ((vmovn_s64((int64x2_t)vcgtq_u64(v1367, (uint64x2_t)v1366)).u8[0] & 1) != 0)
              *(double *)&__p[v1357] = (v1373.f64[0] + 1.0) / v1362;
            if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x33uLL), *(uint64x2_t *)&v1366)).i32[1] & 1) != 0)
              *(double *)&__p[v1357 + 1] = (v1373.f64[1] + 1.0) / v1362;
            v1366 = vaddq_s64(v1366, v1369);
            v1365 = vadd_s32(v1365, (int32x2_t)0x200000002);
            v1357 += 2;
          }
          while (v1357 != 52);
          objc_msgSend_vectorWithValues_count_(MEMORY[0x1E0C9DDF8], v1355, (uint64_t)__p, 51, v1356);
          v1374 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v7, v1375, (uint64_t)v1374, (uint64_t)CFSTR("inputScales"), v1376);

          objc_msgSend_setObject_forKeyedSubscript_(v7, v1377, (uint64_t)&unk_1E99CB2C8, (uint64_t)CFSTR("inputLDCExecuteFlags"), v1378);
          goto LABEL_588;
        }
      }
      else if ((*(unsigned int (**)(void *))(*(_QWORD *)v1439 + 872))(v1439) == 1
             && (*(unsigned int (**)(void *))(*(_QWORD *)v1439 + 864))(v1439))
      {
        v1306 = (*(uint64_t (**)(void *))(*(_QWORD *)v1439 + 888))(v1439);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v1439 + 880))(v1457);
        __p[0] = 0;
        sub_1D528F9B4(&v1448, ((char *)v1457[1] - (char *)v1457[0]) >> 3, __p);
        __p[0] = 0;
        sub_1D528F9B4(&lpsrc, ((char *)v1457[1] - (char *)v1457[0]) >> 3, __p);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
        v1308 = v1307;
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
        v1310 = v1309;
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 456))(a1);
        v1395 = v1311;
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 456))(a1);
        v1313 = v1312;
        v1314 = (double *)v1457[0];
        if (v1457[1] != v1457[0])
        {
          v1315 = 0;
          v1316 = ((char *)v1457[1] - (char *)v1457[0]) >> 3;
          v1317 = (double *)lpsrc;
          v1318 = (double *)v1448;
          if (v1316 <= 1)
            v1316 = 1;
          do
          {
            v1317[v1315] = 100.0 / (v1314[v1315] + 100.0);
            v1318[v1315] = (float)((float)v1315 / (float)(v1306 - 1));
            ++v1315;
          }
          while (v1316 != v1315);
        }
        if ((*(unsigned int (**)(void *))(*(_QWORD *)v1439 + 864))(v1439) == 3 && v1457[1] != v1457[0])
        {
          v1319 = ((char *)v1457[1] - (char *)v1457[0]) >> 3;
          v1320 = (double *)lpsrc;
          v1321 = v1319 - 1;
          if (v1319 <= 1)
            v1319 = 1;
          v1322 = (double *)lpsrc;
          do
          {
            *v1322 = *v1322 / v1320[v1321];
            ++v1322;
            --v1319;
          }
          while (v1319);
        }
        v1323 = [Curve alloc];
        v1324 = sqrtf((float)((float)v1308 * (float)v1308) + (float)((float)v1310 * (float)v1310));
        v1399 = (void *)objc_msgSend_initWithCount_domainMin_domainMax_values_(v1323, v1325, (unint64_t)((char *)v1457[1] - (char *)v1457[0]) >> 3, (uint64_t)lpsrc, v1326, *(double *)v1448 * v1324, *(double *)((char *)v1448 + (char *)v1457[1] - (char *)v1457[0] - 8) * v1324);
        v1327 = [Curve alloc];
        v1328 = MEMORY[0x1E0C809B0];
        v1408[0] = MEMORY[0x1E0C809B0];
        v1408[1] = 3221225472;
        v1408[2] = sub_1D532ABB0;
        v1408[3] = &unk_1E997DAE0;
        v1329 = v1399;
        v1409 = v1329;
        v1404 = (void *)objc_msgSend_initWithBlock_domainMin_domainMax_(v1327, v1330, (uint64_t)v1408, v1331, v1332, 0.0, v1324);
        v1333 = [Curve alloc];
        v1334 = sqrtf((float)((float)v1395 * (float)v1395) + (float)((float)v1313 * (float)v1313));
        v1406[0] = v1328;
        v1406[1] = 3221225472;
        v1406[2] = sub_1D532AC1C;
        v1406[3] = &unk_1E997DAE0;
        v1335 = v1404;
        v1407 = v1335;
        v1343 = (void *)objc_msgSend_initWithBlock_domainMin_domainMax_(v1333, v1336, (uint64_t)v1406, v1337, v1338, 0.0, v1334);
        v1344 = 0;
        *(_QWORD *)&v1488 = 0;
        v1487 = 0u;
        v1486 = 0u;
        v1485 = 0u;
        v1484 = 0u;
        v1483 = 0u;
        v1482 = 0u;
        v1481 = 0u;
        v1480 = 0u;
        v1479 = 0u;
        v1478 = 0u;
        v1477 = 0u;
        v1475 = 0u;
        v1476 = 0u;
        v1473 = 0u;
        v1474 = 0u;
        v1471 = 0u;
        v1472 = 0u;
        *(_OWORD *)v1469 = 0u;
        v1470 = 0u;
        v1467 = 0u;
        v1468 = 0u;
        memset(v1466, 0, sizeof(v1466));
        *(_OWORD *)__p = 0u;
        v1465 = 0u;
        do
        {
          objc_msgSend_function(v1343, v1339, v1340, v1341, v1342);
          v1345 = (double (**)(double))objc_claimAutoreleasedReturnValue();
          *(double *)&__p[v1344] = v1345[2]((float)((float)(v1334 * (float)(int)v1344) / 50.0));

          ++v1344;
        }
        while (v1344 != 51);
        objc_msgSend_vectorWithValues_count_(MEMORY[0x1E0C9DDF8], v1339, (uint64_t)__p, 51, v1342);
        v1346 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1347, (uint64_t)v1346, (uint64_t)CFSTR("inputScales"), v1348);

        objc_msgSend_setObject_forKeyedSubscript_(v7, v1349, (uint64_t)&unk_1E99CB2C8, (uint64_t)CFSTR("inputLDCExecuteFlags"), v1350);
        if (lpsrc)
        {
          v1447[0] = lpsrc;
          operator delete(lpsrc);
        }
        if (v1448)
        {
          v1449 = (std::__shared_weak_count *)v1448;
          operator delete(v1448);
        }
LABEL_588:
        if (v1457[0])
        {
          v1457[1] = v1457[0];
          operator delete(v1457[0]);
        }
        goto LABEL_591;
      }
      objc_msgSend_setObject_forKeyedSubscript_(v7, v1304, (uint64_t)&unk_1E99CB298, (uint64_t)CFSTR("inputLDCExecuteFlags"), v1305);
    }
LABEL_591:
    sub_1D5282EB4((uint64_t)&v1439);
    goto LABEL_100;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(__p, a1);
  if (__p[0]
    && (v671 = __dynamic_cast(__p[0], (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9973F70, 0)) != 0)
  {
    v1457[0] = v671;
    v1457[1] = __p[1];
    v672 = __p;
  }
  else
  {
    v672 = v1457;
  }
  *v672 = 0;
  v672[1] = 0;
  v691 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v692 = (unint64_t *)((char *)__p[1] + 8);
    do
      v693 = __ldaxr(v692);
    while (__stlxr(v693 - 1, v692));
    if (!v693)
    {
      ((void (*)(std::__shared_weak_count *))v691->__on_zero_shared)(v691);
      std::__shared_weak_count::__release_weak(v691);
    }
  }
  v694 = v1457[0];
  if (v1457[0])
  {
    v1448 = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v1457[0] + 464))(v1457[0]);
    v1449 = v695;
    v696 = sub_1D52C512C((uint64_t)v694);
    v697 = sub_1D52C5134((uint64_t)v694);
    v698 = sub_1D52C513C((uint64_t)v694);
    v699 = sub_1D52C5144((uint64_t)v694);
    v700 = sub_1D52C514C((uint64_t)v694);
    v701 = (char *)operator new(0xA0uLL);
    *((_QWORD *)v701 + 1) = 0;
    v702 = (unint64_t *)(v701 + 8);
    *((_QWORD *)v701 + 2) = 0;
    *((_QWORD *)v701 + 3) = &unk_1E99938A8;
    *(_QWORD *)v701 = &unk_1E997DCD0;
    *((double *)v701 + 4) = (double)(int)v1449;
    *((double *)v701 + 5) = (double)v696;
    *((double *)v701 + 6) = v697;
    *((double *)v701 + 7) = v698;
    *((double *)v701 + 8) = v699;
    *((double *)v701 + 9) = v700;
    *((_QWORD *)v701 + 10) = 0;
    *((_QWORD *)v701 + 19) = 0x3FE0000000000000;
    *(_OWORD *)(v701 + 88) = 0u;
    *(_OWORD *)(v701 + 104) = 0u;
    *(_OWORD *)(v701 + 120) = 0u;
    *(_OWORD *)(v701 + 136) = 0u;
    lpsrc = v701 + 24;
    v1447[0] = v701;
    sub_1D53B0840((uint64_t)(v701 + 24), &v1449);
    v703 = *((double *)v701 + 19);
    v704 = sub_1D53B0EE8((uint64_t)(v701 + 24));
    v706 = sub_1D53B0EE8((uint64_t)(v701 + 24));
    v707 = 0;
    *(_QWORD *)&v1488 = 0;
    v708 = v703 * v703;
    v709 = v704 * v706;
    v710 = (double)((int)v1449 * (int)v1449 + HIDWORD(v1449) * HIDWORD(v1449)) * 0.25;
    v1487 = 0u;
    v1486 = 0u;
    v1485 = 0u;
    v1484 = 0u;
    v1483 = 0u;
    v1482 = 0u;
    v1481 = 0u;
    v1480 = 0u;
    v1479 = 0u;
    v1478 = 0u;
    v1477 = 0u;
    v1475 = 0u;
    v1476 = 0u;
    v1473 = 0u;
    v1474 = 0u;
    v1471 = 0u;
    v1472 = 0u;
    *(_OWORD *)v1469 = 0u;
    v1470 = 0u;
    v1467 = 0u;
    v1468 = 0u;
    memset(v1466, 0, sizeof(v1466));
    *(_OWORD *)__p = 0u;
    v1465 = 0u;
    do
    {
      v711 = v710 * (double)(int)v707 * (double)(int)v707 * 0.0004 / v709;
      if (v711 >= v708)
        v712 = 120;
      else
        v712 = 88;
      if (v711 >= v708)
        v713 = 128;
      else
        v713 = 96;
      if (v711 >= v708)
        v714 = 136;
      else
        v714 = 104;
      if (v711 >= v708)
        v715 = 144;
      else
        v715 = 112;
      *(double *)&__p[v707++] = fmin(*(double *)&v701[v715]+ v711* (*(double *)&v701[v714]+ v711 * *(double *)&v701[v713]+ v711 * v711 * *(double *)&v701[v712]), 1.0);
    }
    while (v707 != 51);
    objc_msgSend_vectorWithValues_count_(MEMORY[0x1E0C9DDF8], (const char *)v713, (uint64_t)__p, 51, v705);
    v716 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v717, (uint64_t)v716, (uint64_t)CFSTR("inputScales"), v718);

    objc_msgSend_setObject_forKeyedSubscript_(v7, v719, (uint64_t)&unk_1E99CB2C8, (uint64_t)CFSTR("inputLDCExecuteFlags"), v720);
    do
      v721 = __ldaxr(v702);
    while (__stlxr(v721 - 1, v702));
    if (!v721)
    {
      (*(void (**)(char *))(*(_QWORD *)v701 + 16))(v701);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v701);
    }
  }
  v722 = (std::__shared_weak_count *)v1457[1];
  if (v1457[1])
  {
    v723 = (unint64_t *)((char *)v1457[1] + 8);
    do
      v724 = __ldaxr(v723);
    while (__stlxr(v724 - 1, v723));
    goto LABEL_455;
  }
LABEL_100:
  if (sub_1D536C2B4(a2) || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 544))(a1) >= 2)
  {
    v625 = (void *)MEMORY[0x1E0CB37E8];
    v626 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2168))(a1);
    objc_msgSend_numberWithUnsignedInt_(v625, v627, v626, v628, v629);
    v630 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v631, (uint64_t)v630, (uint64_t)CFSTR("inputPattern"), v632);

    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1016))(__p, a1);
    if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)32)
    {
      objc_msgSend_vectorWithX_Y_Z_W_(MEMORY[0x1E0C9DDF8], v633, v634, v635, v636, *(double *)__p[0], *((double *)__p[0] + 1), *((double *)__p[0] + 2), *((double *)__p[0] + 3));
      v637 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v638, (uint64_t)v637, (uint64_t)CFSTR("inputBlacks"), v639);

    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 744))(v1457, a1);
    if ((void *)((char *)v1457[1] - (char *)v1457[0]) == (void *)24)
    {
      objc_msgSend_vectorWithX_Y_Z_(MEMORY[0x1E0C9DDF8], v640, v641, v642, v643, *(double *)v1457[0], *((double *)v1457[0] + 1), *((double *)v1457[0] + 2));
      v644 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v645, (uint64_t)v644, (uint64_t)CFSTR("inputFactors"), v646);

    }
    v647 = (void *)MEMORY[0x1E0CB37E8];
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2112))(a1))
      objc_msgSend_numberWithDouble_(v647, v648, v649, v650, v651, 1.0);
    else
      objc_msgSend_numberWithDouble_(v647, v648, v649, v650, v651, 0.0);
    v652 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v653, (uint64_t)v652, (uint64_t)CFSTR("inputDespeckle"), v654);

    if (v1457[0])
    {
      v1457[1] = v1457[0];
      operator delete(v1457[0]);
    }
    goto LABEL_111;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2152))(a1))
    goto LABEL_114;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1016))(__p, a1);
  v655 = __p[0];
  if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)32)
  {
    objc_msgSend_vectorWithX_Y_Z_W_(MEMORY[0x1E0C9DDF8], v673, v674, v675, v676, *(double *)__p[0], *((double *)__p[0] + 1), *((double *)__p[0] + 2), *((double *)__p[0] + 3));
    v677 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v678, (uint64_t)v677, (uint64_t)CFSTR("inputBlacks"), v679);

LABEL_111:
    v655 = __p[0];
  }
  if (v655)
  {
    __p[1] = v655;
    operator delete(v655);
  }
LABEL_114:
  v656 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 520))(a1);
  objc_msgSend_vectorWithX_Y_(MEMORY[0x1E0C9DDF8], v657, v658, v659, v660, (double)(int)v656, (double)SHIDWORD(v656));
  v661 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v662, (uint64_t)v661, (uint64_t)CFSTR("inputTargetSize"), v663);

  if ((int)a2 < 1)
    goto LABEL_252;
  objc_msgSend_setObject_forKeyedSubscript_(v7, v664, (uint64_t)&unk_1E99CB298, (uint64_t)CFSTR("inputGainMapExecute"), v665);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2840))(a1)
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2848))(a1) != 1)
  {
    goto LABEL_252;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(__p, a1);
  if (__p[0]
    && (v669 = __dynamic_cast(__p[0], (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9976FF0, 0)) != 0)
  {
    v1448 = v669;
    v1449 = (std::__shared_weak_count *)__p[1];
    v670 = __p;
  }
  else
  {
    v670 = &v1448;
  }
  *v670 = 0;
  v670[1] = 0;
  v686 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v687 = (unint64_t *)((char *)__p[1] + 8);
    do
      v688 = __ldaxr(v687);
    while (__stlxr(v688 - 1, v687));
    if (!v688)
    {
      ((void (*)(std::__shared_weak_count *))v686->__on_zero_shared)(v686);
      std::__shared_weak_count::__release_weak(v686);
    }
  }
  __p[1] = 0;
  __p[0] = 0;
  *(_QWORD *)&v1465 = 0;
  if (v1448)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v1448 + 808))(v1457);
    sub_1D532D7E4(__p);
    *(_OWORD *)__p = *(_OWORD *)v1457;
    *(float64_t *)&v1465 = v1458.f64[0];
    v1458.f64[0] = 0.0;
    v1457[1] = 0;
    v1457[0] = 0;
    lpsrc = v1457;
    sub_1D53050D0((void ***)&lpsrc);
    v689 = __p[1];
    v690 = __p[0];
  }
  else
  {
    v690 = 0;
    v689 = 0;
  }
  v729 = 0xEEEEEEEEEEEEEEEFLL * ((v689 - v690) >> 3);
  if (v729 != 1)
  {
    if (v729 != 4)
    {
      v1384 = __cxa_allocate_exception(8uLL);
      *v1384 = "Unexpected size of gainmap parameters";
      __cxa_throw(v1384, MEMORY[0x1E0DE4E50], 0);
    }
    if (*((_DWORD *)v690 + 23) == 1
      && *((_DWORD *)v690 + 53) == 1
      && *((_DWORD *)v690 + 83) == 1
      && *((_DWORD *)v690 + 113) == 1)
    {
      v730 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v690 + 12) + 8) - **((_QWORD **)v690 + 12)) >> 2;
      if (v730 == (uint64_t)(*(_QWORD *)(*((_QWORD *)v690 + 27) + 8) - **((_QWORD **)v690 + 27)) >> 2
        && v730 == (uint64_t)(*(_QWORD *)(*((_QWORD *)v690 + 42) + 8) - **((_QWORD **)v690 + 42)) >> 2
        && v730 == (uint64_t)(*(_QWORD *)(*((_QWORD *)v690 + 57) + 8) - **((_QWORD **)v690 + 57)) >> 2)
      {
        v731 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2168))(a1);
        if (__p[1] == __p[0])
        {
          v741 = 0xFFFFLL;
          v740 = 0xFFFFLL;
          v739 = 0xFFFFLL;
          v738 = 0xFFFFLL;
        }
        else
        {
          v735 = 0;
          if ((unint64_t)(((char *)__p[1] - (char *)__p[0]) / 120) <= 1)
            v736 = 1;
          else
            v736 = ((char *)__p[1] - (char *)__p[0]) / 120;
          v737 = (double *)((char *)__p[0] + 8);
          v738 = 0xFFFFLL;
          v739 = 0xFFFFLL;
          v740 = 0xFFFFLL;
          v741 = 0xFFFFLL;
          do
          {
            v742 = 4 * (int)*v737 + 2 * (int)*(v737 - 1);
            v743 = ((0xC0u >> v742) & v731) >> (6 - v742);
            if (v743 == 2)
            {
              v741 = v735;
            }
            else if (v743 == 1)
            {
              if (v739 == 0xFFFF)
                v739 = v735;
              else
                v738 = v735;
            }
            else
            {
              v740 = v735;
              if (v743)
              {
                v1383 = __cxa_allocate_exception(8uLL);
                *v1383 = "Unexpected CFA pattern";
                __cxa_throw(v1383, MEMORY[0x1E0DE4E50], 0);
              }
            }
            ++v735;
            v737 += 15;
          }
          while (v736 != v735);
        }
        if (v741 == 0xFFFF || v740 == 0xFFFF || v739 == 0xFFFF || v738 == 0xFFFF)
        {
          v1385 = __cxa_allocate_exception(8uLL);
          *v1385 = "bad CFA index";
          __cxa_throw(v1385, MEMORY[0x1E0DE4E50], 0);
        }
        v784 = (uint64_t)(*(_QWORD *)(*((_QWORD *)__p[0] + 12) + 8) - **((_QWORD **)__p[0] + 12)) >> 2;
        if (*(_QWORD *)(*((_QWORD *)__p[0] + 12) + 8) != **((_QWORD **)__p[0] + 12))
        {
          v785 = (float *)**((_QWORD **)__p[0] + 15 * v739 + 12);
          v786 = (float *)**((_QWORD **)__p[0] + 15 * v738 + 12);
          if (v784 <= 1)
            v787 = 1;
          else
            v787 = (uint64_t)(*(_QWORD *)(*((_QWORD *)__p[0] + 12) + 8) - **((_QWORD **)__p[0] + 12)) >> 2;
          do
          {
            if (*v785 != *v786)
            {
              v1382 = __cxa_allocate_exception(8uLL);
              *v1382 = "mismatch in green channels";
              __cxa_throw(v1382, MEMORY[0x1E0DE4E50], 0);
            }
            ++v785;
            ++v786;
            --v787;
          }
          while (v787);
        }
        objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v732, 12 * v784, v733, v734);
        v745 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v792 = objc_msgSend_mutableBytes(v745, v788, v789, v790, v791);
        v793 = *(_QWORD *)(*((_QWORD *)__p[0] + 12) + 8) - **((_QWORD **)__p[0] + 12);
        if (v793)
        {
          v794 = v793 >> 2;
          v795 = (int *)**((_QWORD **)__p[0] + 15 * v741 + 12);
          v796 = (int *)**((_QWORD **)__p[0] + 15 * v739 + 12);
          v797 = (int *)**((_QWORD **)__p[0] + 15 * v740 + 12);
          if (v794 <= 1)
            v794 = 1;
          v798 = (_DWORD *)(v792 + 8);
          do
          {
            v799 = *v795++;
            *(v798 - 2) = v799;
            v800 = *v796++;
            *(v798 - 1) = v800;
            v801 = *v797++;
            *v798 = v801;
            v798 += 3;
            --v794;
          }
          while (v794);
        }
        goto LABEL_247;
      }
    }
LABEL_579:
    v1351 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v1351, "RawCameraException");
    __cxa_throw(v1351, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if ((*((_DWORD *)v690 + 23) | 2) != 3)
    goto LABEL_579;
  v744 = *(_QWORD *)(*((_QWORD *)v690 + 12) + 8) - **((_QWORD **)v690 + 12);
  objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v666, 4 * ((v744 >> 1) + (v744 >> 2)), v667, v668);
  v745 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v750 = objc_msgSend_mutableBytes(v745, v746, v747, v748, v749);
  v753 = (uint64_t *)*((_QWORD *)__p[0] + 12);
  v754 = *v753;
  v755 = v753[1];
  v756 = v755 - *v753;
  if (v755 != *v753)
  {
    v757 = 0;
    v758 = 0;
    v759 = v756 >> 2;
    v760 = *((_DWORD *)__p[0] + 23);
    if (v759 <= 1)
      v759 = 1;
    while (v760 != 1)
    {
      if (v760 == 3)
      {
        v761 = (_DWORD *)(v750 + 4 * v757);
        *v761 = *(_DWORD *)(v754 + 4 * v758);
        v761[1] = *(_DWORD *)(v753[3] + 4 * v758);
        v762 = *(_DWORD *)(v753[6] + 4 * v758);
        v763 = 3 * v758 + 2;
LABEL_205:
        *(_DWORD *)(v750 + 4 * v763) = v762;
      }
      ++v758;
      v757 += 3;
      if (v759 == v758)
        goto LABEL_247;
    }
    v762 = *(_DWORD *)(v754 + 4 * v758);
    v764 = v750 + 4 * v757;
    *(_DWORD *)(v764 + 4) = v762;
    *(_DWORD *)(v764 + 8) = v762;
    v763 = v757;
    goto LABEL_205;
  }
LABEL_247:
  objc_msgSend_setObject_forKeyedSubscript_(v7, v751, (uint64_t)&unk_1E99CB2C8, (uint64_t)CFSTR("inputGainMapExecute"), v752);
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v802, *((unsigned int *)__p[0] + 22), v803, v804);
  v805 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v806, (uint64_t)v805, (uint64_t)CFSTR("inputGainMapStartPlane"), v807);

  objc_msgSend_setObject_forKeyedSubscript_(v7, v808, (uint64_t)&unk_1E99CB2E0, (uint64_t)CFSTR("inputGainMapNumPlanes"), v809);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
  objc_msgSend_vectorWithCGRect_(MEMORY[0x1E0C9DDF8], v810, v811, v812, v813, *(double *)__p[0] / (double)(int)v810, *((double *)__p[0] + 1) / (double)SHIDWORD(v810), *((double *)__p[0] + 2) / (double)(int)v810, *((double *)__p[0] + 3) / (double)SHIDWORD(v810));
  v814 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v815, (uint64_t)v814, (uint64_t)CFSTR("inputGainMapApplyRegion"), v816);

  objc_msgSend_vectorWithCGRect_(MEMORY[0x1E0C9DDF8], v817, v818, v819, v820, *((double *)__p[0] + 4), *((double *)__p[0] + 5), *((double *)__p[0] + 6), *((double *)__p[0] + 7));
  v821 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v822, (uint64_t)v821, (uint64_t)CFSTR("inputGainMapRegion"), v823);

  objc_msgSend_vectorWithX_Y_(MEMORY[0x1E0C9DDF8], v824, v825, v826, v827, *((double *)__p[0] + 8), *((double *)__p[0] + 9));
  v828 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v7, v829, (uint64_t)v828, (uint64_t)CFSTR("inputGainMapSize"), v830);

  objc_msgSend_setObject_forKeyedSubscript_(v7, v831, (uint64_t)v745, (uint64_t)CFSTR("inputGainMapData"), v832);
  v1457[0] = __p;
  sub_1D53050D0((void ***)v1457);
  v833 = v1449;
  if (v1449)
  {
    v834 = (unint64_t *)&v1449->__shared_owners_;
    do
      v835 = __ldaxr(v834);
    while (__stlxr(v835 - 1, v834));
    if (!v835)
    {
      ((void (*)(std::__shared_weak_count *))v833->__on_zero_shared)(v833);
      std::__shared_weak_count::__release_weak(v833);
    }
  }
LABEL_252:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    objc_msgSend_setObject_forKeyedSubscript_(v7, v836, (uint64_t)&unk_1E99CB298, (uint64_t)CFSTR("inputVignetteExecute"), v837);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(__p, a1);
    if (__p[0]
      && (v838 = __dynamic_cast(__p[0], (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9976FF0, 0)) != 0)
    {
      v1448 = v838;
      v1449 = (std::__shared_weak_count *)__p[1];
      v839 = __p;
    }
    else
    {
      v839 = &v1448;
    }
    *v839 = 0;
    v839[1] = 0;
    v840 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v841 = (unint64_t *)((char *)__p[1] + 8);
      do
        v842 = __ldaxr(v841);
      while (__stlxr(v842 - 1, v841));
      if (!v842)
      {
        ((void (*)(std::__shared_weak_count *))v840->__on_zero_shared)(v840);
        std::__shared_weak_count::__release_weak(v840);
      }
    }
    __p[1] = 0;
    __p[0] = 0;
    *(_QWORD *)&v1465 = 0;
    if (v1448)
    {
      sub_1D5300FF0((uint64_t)v1448, 3, (uint64_t)v1457);
      sub_1D5304784(__p);
      *(_OWORD *)__p = *(_OWORD *)v1457;
      *(float64_t *)&v1465 = v1458.f64[0];
      v1458.f64[0] = 0.0;
      v1457[1] = 0;
      v1457[0] = 0;
      lpsrc = v1457;
      sub_1D5282E44((void ***)&lpsrc);
      if (__p[0] != __p[1])
      {
        objc_msgSend_setObject_forKeyedSubscript_(v7, v843, (uint64_t)&unk_1E99CB2C8, (uint64_t)CFSTR("inputVignetteExecute"), v844);
        v845 = __p[0];
        if (*(_QWORD *)__p[0]
          && (v846 = __dynamic_cast(*(const void **)__p[0], (const struct __class_type_info *)&unk_1E996FA38, (const struct __class_type_info *)&unk_1E99A69F8, 0)) != 0)
        {
          v847 = v846;
          v848 = (std::__shared_weak_count *)*((_QWORD *)v845 + 1);
          lpsrc = v846;
          v1447[0] = &v848->__vftable;
          if (v848)
          {
            v849 = (unint64_t *)&v848->__shared_owners_;
            do
              v850 = __ldxr(v849);
            while (__stxr(v850 + 1, v849));
          }
        }
        else
        {
          v848 = 0;
          v847 = 0;
          v1447[0] = 0;
          lpsrc = 0;
        }
        v1457[1] = 0;
        v1457[0] = 0;
        v1458.f64[0] = 0.0;
        sub_1D5282C70(v1457, *((const void **)v847 + 2), *((_QWORD *)v847 + 3), (uint64_t)(*((_QWORD *)v847 + 3) - *((_QWORD *)v847 + 2)) >> 3);
        objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v851, v852, v853, v854, *(double *)v1457[0]);
        v855 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v7, v856, (uint64_t)v855, (uint64_t)CFSTR("inputVignetteK0"), v857);

        objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v858, v859, v860, v861, *((double *)v1457[0] + 1));
        v862 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v7, v863, (uint64_t)v862, (uint64_t)CFSTR("inputVignetteK1"), v864);

        objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v865, v866, v867, v868, *((double *)v1457[0] + 2));
        v869 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v7, v870, (uint64_t)v869, (uint64_t)CFSTR("inputVignetteK2"), v871);

        objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v872, v873, v874, v875, *((double *)v1457[0] + 3));
        v876 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v7, v877, (uint64_t)v876, (uint64_t)CFSTR("inputVignetteK3"), v878);

        objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v879, v880, v881, v882, *((double *)v1457[0] + 4));
        v883 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v7, v884, (uint64_t)v883, (uint64_t)CFSTR("inputVignetteK4"), v885);

        objc_msgSend_vectorWithX_Y_(MEMORY[0x1E0C9DDF8], v886, v887, v888, v889, *((double *)v847 + 5), *((double *)v847 + 6));
        v890 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v7, v891, (uint64_t)v890, (uint64_t)CFSTR("inputVignetteCenter"), v892);

        if (v1457[0])
        {
          v1457[1] = v1457[0];
          operator delete(v1457[0]);
        }
        if (v848)
        {
          v893 = (unint64_t *)&v848->__shared_owners_;
          do
            v894 = __ldaxr(v893);
          while (__stlxr(v894 - 1, v893));
          if (!v894)
          {
            ((void (*)(std::__shared_weak_count *))v848->__on_zero_shared)(v848);
            std::__shared_weak_count::__release_weak(v848);
          }
        }
      }
    }
    v1457[0] = __p;
    sub_1D5282E44((void ***)v1457);
    v895 = v1449;
    if (v1449)
    {
      v896 = (unint64_t *)&v1449->__shared_owners_;
      do
        v897 = __ldaxr(v896);
      while (__stlxr(v897 - 1, v896));
      if (!v897)
      {
        ((void (*)(std::__shared_weak_count *))v895->__on_zero_shared)(v895);
        std::__shared_weak_count::__release_weak(v895);
      }
    }
  }
  objc_msgSend_setObject_forKeyedSubscript_(v7, v836, (uint64_t)&unk_1E99CB298, (uint64_t)CFSTR("inputVignetteTableExecute"), v837);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2832))(a1) != 1)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2832))(a1) != 2)
    {
      objc_msgSend_setObject_forKeyedSubscript_(v7, v900, (uint64_t)&unk_1E99CB298, (uint64_t)CFSTR("inputVignetteTableExecute"), v901);
      goto LABEL_343;
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(__p, a1);
    if (__p[0]
      && (v902 = __dynamic_cast(__p[0], (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9990738, 0)) != 0)
    {
      lpsrc = v902;
      v1447[0] = (_QWORD *)__p[1];
      v903 = __p;
    }
    else
    {
      v903 = &lpsrc;
    }
    *v903 = 0;
    v903[1] = 0;
    v937 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v938 = (unint64_t *)((char *)__p[1] + 8);
      do
        v939 = __ldaxr(v938);
      while (__stlxr(v939 - 1, v938));
      if (!v939)
      {
        ((void (*)(std::__shared_weak_count *))v937->__on_zero_shared)(v937);
        std::__shared_weak_count::__release_weak(v937);
      }
    }
    v940 = lpsrc;
    if (!lpsrc)
      goto LABEL_338;
    if ((*(unsigned int (**)(void *))(*(_QWORD *)lpsrc + 896))(lpsrc))
    {
      v941 = (*(uint64_t (**)(void *))(*(_QWORD *)v940 + 904))(v940);
      (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v940 + 928))(__p, v940);
      v942 = (*(float (**)(void *))(*(_QWORD *)v940 + 920))(v940);
      LODWORD(v1448) = 0;
      sub_1D532D8CC(v1457, ((char *)__p[1] - (char *)__p[0]) >> 2, &v1448);
      LODWORD(v1439) = 0;
      sub_1D532D8CC(&v1448, ((char *)__p[1] - (char *)__p[0]) >> 2, &v1439);
      v945 = (float *)__p[0];
      v946 = (float *)v1448;
      v947 = (char *)__p[1] - (char *)__p[0];
      if (__p[1] != __p[0])
      {
        v948 = 0;
        v949 = (float)(v941 - 1);
        v950 = (float *)v1457[0];
        if ((unint64_t)(v947 >> 2) <= 1)
          v951 = 1;
        else
          v951 = v947 >> 2;
        do
        {
          v946[v948] = exp2f(v942 * v945[v948]);
          v950[v948] = (float)v948 / v949;
          ++v948;
        }
        while (v951 != v948);
      }
      objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v943, (uint64_t)v946, v947, v944);
      v952 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v953, (uint64_t)v952, (uint64_t)CFSTR("inputVignetteTableData"), v954);
      objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v955, ((char *)__p[1] - (char *)__p[0]) >> 2, v956, v957);
      v958 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v959, (uint64_t)v958, (uint64_t)CFSTR("inputVignetteTableDataSize"), v960);

      objc_msgSend_setObject_forKeyedSubscript_(v7, v961, (uint64_t)&unk_1E99CB2C8, (uint64_t)CFSTR("inputVignetteTableExecute"), v962);
      if (v1448)
      {
        v1449 = (std::__shared_weak_count *)v1448;
        operator delete(v1448);
      }
      if (v1457[0])
      {
        v1457[1] = v1457[0];
        operator delete(v1457[0]);
      }
    }
    else
    {
      v963 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2776))(a1);
      if (!(*(unsigned int (**)(void *, uint64_t))(*(_QWORD *)v940 + 960))(v940, v963))
      {
LABEL_338:
        v934 = (std::__shared_weak_count *)v1447[0];
        if (!v1447[0])
          goto LABEL_343;
        v1015 = v1447[0] + 1;
        do
          v936 = __ldaxr(v1015);
        while (__stlxr(v936 - 1, v1015));
        goto LABEL_341;
      }
      objc_msgSend_setObject_forKeyedSubscript_(v7, v964, (uint64_t)&unk_1E99CB2C8, (uint64_t)CFSTR("inputVignetteExecute"), v965);
      (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v940 + 968))(__p, v940);
      v966 = (*(float (**)(void *))(*(_QWORD *)v940 + 976))(v940);
      *(float *)&v967 = v966 * *((float *)__p[0] + 3);
      objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v968, v969, v970, v971, v967);
      v972 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v973, (uint64_t)v972, (uint64_t)CFSTR("inputVignetteK0"), v974);

      *(float *)&v975 = v966 * *((float *)__p[0] + 2);
      objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v976, v977, v978, v979, v975);
      v980 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v981, (uint64_t)v980, (uint64_t)CFSTR("inputVignetteK1"), v982);

      *(float *)&v983 = v966 * *((float *)__p[0] + 1);
      objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v984, v985, v986, v987, v983);
      v988 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v989, (uint64_t)v988, (uint64_t)CFSTR("inputVignetteK2"), v990);

      *(float *)&v991 = v966 * *(float *)__p[0];
      objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v992, v993, v994, v995, v991);
      v996 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v997, (uint64_t)v996, (uint64_t)CFSTR("inputVignetteK3"), v998);

      objc_msgSend_setObject_forKeyedSubscript_(v7, v999, (uint64_t)&unk_1E99CB298, (uint64_t)CFSTR("inputVignetteK4"), v1000);
      v1001 = (*(double (**)(void *))(*(_QWORD *)v940 + 984))(v940);
      v1003 = v1002;
      v1004 = (*(uint64_t (**)(void *))(*(_QWORD *)v940 + 440))(v940);
      if ((int)v1004 >= 0)
        v1009 = v1004;
      else
        v1009 = v1004 + 1;
      v1010 = (v1001 + (double)(v1009 >> 1)) / (float)(int)v1004;
      if (v1004 >= 0)
        v1011 = HIDWORD(v1004);
      else
        v1011 = HIDWORD(v1004) + 1;
      objc_msgSend_vectorWithX_Y_(MEMORY[0x1E0C9DDF8], v1005, v1006, v1007, v1008, v1010, (v1003 + (double)(v1011 >> 1)) / (float)SHIDWORD(v1004));
      v1012 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v1013, (uint64_t)v1012, (uint64_t)CFSTR("inputVignetteCenter"), v1014);

    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    goto LABEL_338;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(__p, a1);
  if (__p[0]
    && (v898 = __dynamic_cast(__p[0], (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9974B38, 0)) != 0)
  {
    v1457[0] = v898;
    v1457[1] = __p[1];
    v899 = __p;
  }
  else
  {
    v899 = v1457;
  }
  *v899 = 0;
  v899[1] = 0;
  v904 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v905 = (unint64_t *)((char *)__p[1] + 8);
    do
      v906 = __ldaxr(v905);
    while (__stlxr(v906 - 1, v905));
    if (!v906)
    {
      ((void (*)(std::__shared_weak_count *))v904->__on_zero_shared)(v904);
      std::__shared_weak_count::__release_weak(v904);
    }
  }
  if (v1457[0])
  {
    __p[1] = 0;
    __p[0] = 0;
    *(_QWORD *)&v1465 = 0;
    sub_1D532D85C((char *)__p, *((__int128 **)v1457[0] + 162), *((__int128 **)v1457[0] + 163), (uint64_t)(*((_QWORD *)v1457[0] + 163) - *((_QWORD *)v1457[0] + 162)) >> 4);
    v907 = __p[1];
    v908 = __p[0];
    v909 = (char *)__p[1] - (char *)__p[0];
    objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v910, (char *)__p[1] - (char *)__p[0], v911, v912);
    v913 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v918 = (float *)objc_msgSend_mutableBytes(v913, v914, v915, v916, v917);
    v921 = v909 >> 4;
    if (v907 != v908)
    {
      if (v921 <= 1)
        v922 = 1;
      else
        v922 = v921;
      v923 = (double *)((char *)__p[0] + 8);
      do
      {
        v924 = *v923;
        v923 += 2;
        v925 = 100.0 / v924;
        *v918++ = v925;
        --v922;
      }
      while (v922);
    }
    objc_msgSend_setObject_forKeyedSubscript_(v7, v919, (uint64_t)v913, (uint64_t)CFSTR("inputVignetteTableData"), v920);
    objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v926, v921, v927, v928);
    v929 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v930, (uint64_t)v929, (uint64_t)CFSTR("inputVignetteTableDataSize"), v931);

    objc_msgSend_setObject_forKeyedSubscript_(v7, v932, (uint64_t)&unk_1E99CB2C8, (uint64_t)CFSTR("inputVignetteTableExecute"), v933);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  v934 = (std::__shared_weak_count *)v1457[1];
  if (v1457[1])
  {
    v935 = (unint64_t *)((char *)v1457[1] + 8);
    do
      v936 = __ldaxr(v935);
    while (__stlxr(v936 - 1, v935));
LABEL_341:
    if (!v936)
    {
      ((void (*)(std::__shared_weak_count *))v934->__on_zero_shared)(v934);
      std::__shared_weak_count::__release_weak(v934);
    }
  }
LABEL_343:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2480))(a1))
  {
    __p[0] = 0;
    v1457[0] = 0;
    (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)a1 + 2664))(a1, __p, v1457);
    objc_msgSend_vectorWithX_Y_(MEMORY[0x1E0C9DDF8], v1016, v1017, v1018, v1019, *(double *)v1457, *(double *)__p);
    v1020 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v7, v1021, (uint64_t)v1020, (uint64_t)CFSTR("inputNoiseModel"), v1022);

  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2712))(a1))
    objc_msgSend_setObject_forKeyedSubscript_(v7, v1023, (uint64_t)&unk_1E99CB2F8, (uint64_t)CFSTR("inputGamutMapMax"), v1024);
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) >= 9
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(__p, a1);
    if (__p[0]
      && (v1025 = __dynamic_cast(__p[0], (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9976FF0, 0)) != 0)
    {
      v1448 = v1025;
      v1449 = (std::__shared_weak_count *)__p[1];
      v1026 = __p;
    }
    else
    {
      v1026 = &v1448;
    }
    *v1026 = 0;
    v1026[1] = 0;
    v1027 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v1028 = (unint64_t *)((char *)__p[1] + 8);
      do
        v1029 = __ldaxr(v1028);
      while (__stlxr(v1029 - 1, v1028));
      if (!v1029)
      {
        ((void (*)(std::__shared_weak_count *))v1027->__on_zero_shared)(v1027);
        std::__shared_weak_count::__release_weak(v1027);
      }
    }
    v1030 = v1448;
    if (v1448)
    {
      if (!sub_1D5302CCC(v1448))
        goto LABEL_601;
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 296))(&lpsrc, a1, 5000);
      if (lpsrc)
      {
        objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v1031, *((unsigned int *)lpsrc + 4), v1032, v1033);
        v1034 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1035, (uint64_t)v1034, (uint64_t)CFSTR("inputOrientation"), v1036);

      }
      sub_1D5302CF4((uint64_t)v1030, (uint64_t)__p);
      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v1037, LODWORD(__p[0]), v1038, v1039);
      v1040 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v1041, (uint64_t)v1040, (uint64_t)CFSTR("inputMapPointsV"), v1042);

      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v1043, HIDWORD(__p[0]), v1044, v1045);
      v1046 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v1047, (uint64_t)v1046, (uint64_t)CFSTR("inputMapPointsH"), v1048);

      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v1049, v1050, v1051, v1052, *(double *)&__p[1]);
      v1053 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v1054, (uint64_t)v1053, (uint64_t)CFSTR("inputMapSpacingV"), v1055);

      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v1056, v1057, v1058, v1059, *(double *)&v1465);
      v1060 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v1061, (uint64_t)v1060, (uint64_t)CFSTR("inputMapSpacingH"), v1062);

      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v1063, v1064, v1065, v1066, *((double *)&v1465 + 1));
      v1067 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v1068, (uint64_t)v1067, (uint64_t)CFSTR("inputMapOriginV"), v1069);

      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v1070, v1071, v1072, v1073, *(double *)v1466);
      v1074 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v1075, (uint64_t)v1074, (uint64_t)CFSTR("inputMapOriginH"), v1076);

      objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v1077, DWORD2(v1466[0]), v1078, v1079);
      v1080 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v1081, (uint64_t)v1080, (uint64_t)CFSTR("inputMapPointsN"), v1082);

      *(float64x2_t *)v1457 = vcvtq_f64_f32(*(float32x2_t *)((char *)v1466 + 12));
      v1458 = vcvtq_f64_f32(*(float32x2_t *)((char *)&v1466[1] + 4));
      *(double *)&v1459 = *((float *)&v1466[1] + 3);
      objc_msgSend_vectorWithValues_count_(MEMORY[0x1E0C9DDF8], v1083, (uint64_t)v1457, 5, v1084);
      v1085 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v1086, (uint64_t)v1085, (uint64_t)CFSTR("inputWeights"), v1087);
      objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v1088, (uint64_t)v1469[0], (char *)v1469[1] - (char *)v1469[0], v1089);
      v1090 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v7, v1091, (uint64_t)v1090, (uint64_t)CFSTR("inputGainData"), v1092);

      objc_msgSend_setObject_forKeyedSubscript_(v7, v1093, (uint64_t)&unk_1E99CB2C8, (uint64_t)CFSTR("inputStrength"), v1094);
      v1100 = BYTE12(v1467);
      if (BYTE12(v1467))
      {
        LODWORD(v1099) = DWORD2(v1467);
        objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v1095, v1096, v1097, v1098, v1099);
        v1101 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1102, (uint64_t)v1101, (uint64_t)CFSTR("inputGamma"), v1103);
      }
      else
      {
        v1101 = &unk_1E99D12F0;
        objc_msgSend_setObject_forKeyedSubscript_(v7, v1095, (uint64_t)&unk_1E99D12F0, (uint64_t)CFSTR("inputGamma"), v1098);
      }
      if (v1100)

      if (v1469[0])
      {
        v1469[1] = v1469[0];
        operator delete(v1469[0]);
      }
      v1104 = (std::__shared_weak_count *)v1447[0];
      if (v1447[0])
      {
        v1105 = v1447[0] + 1;
        do
          v1106 = __ldaxr(v1105);
        while (__stlxr(v1106 - 1, v1105));
        if (!v1106)
        {
          ((void (*)(std::__shared_weak_count *))v1104->__on_zero_shared)(v1104);
          std::__shared_weak_count::__release_weak(v1104);
        }
      }
      v1030 = v1448;
      if (v1448)
      {
LABEL_601:
        if (sub_1D53040B4((uint64_t)v1030))
        {
          v1107 = (void *)MEMORY[0x1E0C9DDF8];
          sub_1D530412C((uint64_t)v1030, __p);
          v1108 = __p[0];
          sub_1D530412C((uint64_t)v1030, v1457);
          objc_msgSend_vectorWithValues_count_(v1107, v1109, (uint64_t)v1108, ((char *)v1457[1] - (char *)v1457[0]) >> 3, v1110);
          v1111 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v7, v1112, (uint64_t)v1111, (uint64_t)CFSTR("inputReferencePoints"), v1113);

          if (v1457[0])
          {
            v1457[1] = v1457[0];
            operator delete(v1457[0]);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          v1114 = (void *)MEMORY[0x1E0C9DDF8];
          sub_1D53041D8((uint64_t)v1030, __p);
          v1115 = __p[0];
          sub_1D53041D8((uint64_t)v1030, v1457);
          objc_msgSend_vectorWithValues_count_(v1114, v1116, (uint64_t)v1115, ((char *)v1457[1] - (char *)v1457[0]) >> 3, v1117);
          v1118 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_setObject_forKeyedSubscript_(v7, v1119, (uint64_t)v1118, (uint64_t)CFSTR("inputOutputPoints"), v1120);

          if (v1457[0])
          {
            v1457[1] = v1457[0];
            operator delete(v1457[0]);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
      }
    }
    v1121 = v1449;
    if (v1449)
    {
      v1122 = (unint64_t *)&v1449->__shared_owners_;
      do
        v1123 = __ldaxr(v1122);
      while (__stlxr(v1123 - 1, v1122));
      if (!v1123)
      {
        ((void (*)(std::__shared_weak_count *))v1121->__on_zero_shared)(v1121);
        std::__shared_weak_count::__release_weak(v1121);
      }
    }
  }
  v1124 = v7;
  if (v1451)
  {
    v1452 = v1451;
    operator delete(v1451);
  }
  v1125 = v1454;
  if (v1454)
  {
    v1126 = (unint64_t *)&v1454->__shared_owners_;
    do
      v1127 = __ldaxr(v1126);
    while (__stlxr(v1127 - 1, v1126));
    if (!v1127)
    {
      ((void (*)(std::__shared_weak_count *))v1125->__on_zero_shared)(v1125);
      std::__shared_weak_count::__release_weak(v1125);
    }
  }

  return v1124;
}

void sub_1D5329B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  void *v36;
  void *v37;
  void *v38;
  void *v40;
  void *v41;
  void *v42;
  void *v43;

  v40 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v40;
    operator delete(v40);
  }
  v41 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v41;
    operator delete(v41);
  }
  v42 = (void *)STACK[0x2C0];
  if (STACK[0x2C0])
  {
    STACK[0x2C8] = (unint64_t)v42;
    operator delete(v42);
  }
  sub_1D5282EB4((uint64_t)&STACK[0x218]);
  v43 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v43;
    operator delete(v43);
  }
  sub_1D5282EB4((uint64_t)&STACK[0x2A0]);

  _Unwind_Resume(a1);
}

double sub_1D532A9A4(double a1, uint64_t a2, double **a3, uint64_t *a4)
{
  double *v4;
  double *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double *v9;
  unint64_t v10;
  double *v11;
  double *v12;
  double v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  void *exception;

  v4 = *a3;
  v5 = a3[1];
  v6 = v5 - *a3;
  v7 = *a4;
  if (v6 != (a4[1] - *a4) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v5 == v4)
    return *(double *)(v7 + 8 * v6 - 8);
  v8 = v5 - *a3;
  v9 = *a3;
  do
  {
    v10 = v8 >> 1;
    v11 = &v9[v8 >> 1];
    v13 = *v11;
    v12 = v11 + 1;
    v8 += ~(v8 >> 1);
    if (v13 > a1)
      v8 = v10;
    else
      v9 = v12;
  }
  while (v8);
  v14 = v9 - v4;
  if (v14 >= v6)
    return *(double *)(v7 + 8 * v6 - 8);
  if (v9 == v4)
    return *(double *)v7;
  if (v6 >= v14)
    v6 = v9 - v4;
  v15 = 8 * v6 - 8;
  v16 = *(double *)((char *)v4 + v15);
  v17 = vabdd_f64(v4[v6], v16);
  if (v17 < 0.000000001)
    v17 = 0.000000001;
  v18 = fmin(fmax(vabdd_f64(a1, v16) / v17, 0.0), 1.0);
  return *(double *)(v7 + 8 * v6) * v18 + *(double *)(v7 + v15) * (1.0 - v18);
}

void sub_1D532AAC4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1D532AAD8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
    && (result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1E996FA38, (const struct __class_type_info *)&unk_1E99917B0, 0)) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *sub_1D532AB44@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  result = *(void **)a1;
  if (result
    && (result = __dynamic_cast(result, (const struct __class_type_info *)&unk_1E996FA38, (const struct __class_type_info *)&unk_1E997EA60, 0)) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

double sub_1D532ABB0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double v6;
  double (**v7)(double);

  v6 = a6;
  if (a6 >= 0.00001)
  {
    objc_msgSend_function(*(void **)(a1 + 32), a2, a3, a4, a5);
    v7 = (double (**)(double))objc_claimAutoreleasedReturnValue();
    v6 = v7[2](v6) * v6;

  }
  return v6;
}

void sub_1D532AC0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1D532AC1C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  double v7;
  double (**v8)(double);

  v7 = 1.0;
  if (a6 >= 0.00001)
  {
    objc_msgSend_inverse(*(void **)(a1 + 32), a2, a3, a4, a5);
    v8 = (double (**)(double))objc_claimAutoreleasedReturnValue();
    v7 = v8[2](a6) / a6;

  }
  return v7;
}

void sub_1D532AC7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D532AC8C(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  _QWORD *v17[3];
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  void **v21;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2752))(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (sub_1D5297E44(a1))
  {
    objc_msgSend_array(MEMORY[0x1E0C99D20], v3, v4, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = sub_1D532AE4C;
    v20[3] = &unk_1E997DB00;
    v20[4] = a1;
    v8 = (void *)MEMORY[0x1D82721B4](v20);
    v9 = sub_1D5297E34(a1);
    v10 = sub_1D5297E3C(a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v15, a1);
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v15 + 608))(v17);
    sub_1D5283758(1, v2, v9, v10, v17, v8);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = (void **)&v19;
    sub_1D5282E44(&v21);
    v21 = (void **)&v18;
    sub_1D5282E44(&v21);
    v21 = (void **)v17;
    sub_1D5282E44(&v21);
    v11 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }

  }
  return v7;
}

void sub_1D532AE0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_1D5284148((void **)va1);
  sub_1D5282EB4((uint64_t)va);

  _Unwind_Resume(a1);
}

id sub_1D532AE4C(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 616))(*(_QWORD *)(a1 + 32));
  return (id)objc_claimAutoreleasedReturnValue();
}

id sub_1D532AE70(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *exception;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v2, v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D536C28C(0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v8, (uint64_t)v7, v9, v10);

  sub_1D536C28C(1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v12, (uint64_t)v11, v13, v14);

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2152))(a1) & 1) != 0)
  {
    sub_1D536C28C(2);
  }
  else
  {
    sub_1D536C28C(2);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v6, v20, (uint64_t)v19, v21, v22);

    sub_1D536C28C(3);
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v6, v16, (uint64_t)v15, v17, v18);

  return v6;
}

void sub_1D532AFA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

BOOL sub_1D532AFEC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _BOOL8 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *exception;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v11, a1);
  v2 = v11;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D532B48C;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v4 = sub_1D532B128(v2, CFSTR("applyLensCorrection"), v3, v10);
  v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D532B104(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1 - 32);
  _Unwind_Resume(a1);
}

BOOL sub_1D532B128(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t **v9;
  void **v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t (**v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  void (**v28)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void (*v29)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void *exception;
  _QWORD v32[4];
  id v33;
  std::string __p;
  uint64_t (*v35[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::string *p_p;
  std::__shared_weak_count *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  sub_1D531B8B8(v7, a3, &__p);
  v9 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_1D532DD4C;
    v32[3] = &unk_1E9979B90;
    v13 = (uint64_t (**)(_QWORD))v8;
    v33 = v13;
    sub_1D53BC1FC(a1, v7, v32, &p_p);
    v18 = (__int128 *)p_p;
    if (p_p)
    {
      sub_1D53BE790((uint64_t)p_p, v14, v15, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v12 = objc_msgSend_BOOLValue(v19, v20, v21, v22, v23);

    }
    else
    {
      v12 = 0;
    }
    v24 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    if (!v18)
      v12 = v13[2](v13);
    p_p = &__p;
    v27 = sub_1D531BAD4(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v28 = (void (**)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD))(v27 + 7);
    v35[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1D532DDC8;
    v35[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v12;
    if (v35 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v27 + 7))
    {
      v29 = *v28;
      if (*v28)
      {
        p_p = 0;
        v37 = 0;
        v29(2, v28, &p_p, 0, 0);
        v35[0](2, v35, v28, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))p_p)(2, &p_p, v35, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        *((_BYTE *)v27 + 64) = v12;
        v27[7] = (uint64_t)sub_1D532DDC8;
        v35[0] = 0;
      }
    }
    sub_1D531BC8C(v35);
  }
  else
  {
    v11 = (unsigned __int8 *)sub_1D532DD80((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v12 != 0;
}

void sub_1D532B400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a25);
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D532B48C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 128))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1D532B49C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = sub_1D531AEB8(v2, CFSTR("lensCorrectionFilter"), v3, &unk_1E997DB60);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D532B540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D532B554()
{
  return 0;
}

void sub_1D532B55C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v4 = v9;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  sub_1D531B308(v4, CFSTR("lensCorrectionParameters"), v5, &unk_1E997DBA0, a2);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1D532B608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D532B61C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_1D532B628(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = sub_1D532B6E0(v2, CFSTR("lensVignetteCorrectionFilter"), v3, &unk_1E997DBC0);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D532B6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D532B6E0(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t **v9;
  void **v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t (**v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  void (**v28)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void (*v29)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void *exception;
  _QWORD v32[4];
  id v33;
  std::string __p;
  uint64_t (*v35[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::string *p_p;
  std::__shared_weak_count *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  sub_1D531B8B8(v7, a3, &__p);
  v9 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_1D532DE80;
    v32[3] = &unk_1E9979B90;
    v13 = (uint64_t (**)(_QWORD))v8;
    v33 = v13;
    sub_1D53BC1FC(a1, v7, v32, &p_p);
    v18 = (__int128 *)p_p;
    if (p_p)
    {
      sub_1D53BE790((uint64_t)p_p, v14, v15, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v12 = objc_msgSend_longLongValue(v19, v20, v21, v22, v23);

    }
    else
    {
      v12 = 0;
    }
    v24 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    if (!v18)
      v12 = v13[2](v13);
    p_p = &__p;
    v27 = sub_1D531BAD4(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v28 = (void (**)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD))(v27 + 7);
    v35[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1D532DEFC;
    v35[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v12;
    if (v35 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v27 + 7))
    {
      v29 = *v28;
      if (*v28)
      {
        p_p = 0;
        v37 = 0;
        v29(2, v28, &p_p, 0, 0);
        v35[0](2, v35, v28, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))p_p)(2, &p_p, v35, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        *((_DWORD *)v27 + 16) = v12;
        v27[7] = (uint64_t)sub_1D532DEFC;
        v35[0] = 0;
      }
    }
    sub_1D531BC8C(v35);
  }
  else
  {
    v11 = (unsigned int *)sub_1D532DEB4((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v12;
}

void sub_1D532B9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a25);
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D532BA3C()
{
  return 0;
}

BOOL sub_1D532BA44(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _BOOL8 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *exception;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v11, a1);
  v2 = v11;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D532BB80;
  v10[3] = &unk_1E997DB20;
  v10[4] = a1;
  v4 = sub_1D532B128(v2, CFSTR("applyGainMap"), v3, v10);
  v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D532BB5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_1D532BB80(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 128))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1D532BB90(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *exception;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v11, a1);
  v2 = v11;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D532C028;
  v10[3] = &unk_1E9978F98;
  v10[4] = a1;
  v4 = sub_1D532BCCC(v2, CFSTR("gainMapFilter"), v3, v10);
  v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D532BCA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_1D532BCCC(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t **v9;
  void **v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t (**v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  void (**v28)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void (*v29)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void *exception;
  _QWORD v32[4];
  id v33;
  std::string __p;
  uint64_t (*v35[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::string *p_p;
  std::__shared_weak_count *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  sub_1D531B8B8(v7, a3, &__p);
  v9 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_1D532DFB4;
    v32[3] = &unk_1E9979B90;
    v13 = (uint64_t (**)(_QWORD))v8;
    v33 = v13;
    sub_1D53BC1FC(a1, v7, v32, &p_p);
    v18 = (__int128 *)p_p;
    if (p_p)
    {
      sub_1D53BE790((uint64_t)p_p, v14, v15, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v12 = objc_msgSend_longLongValue(v19, v20, v21, v22, v23);

    }
    else
    {
      v12 = 0;
    }
    v24 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    if (!v18)
      v12 = v13[2](v13);
    p_p = &__p;
    v27 = sub_1D531BAD4(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v28 = (void (**)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD))(v27 + 7);
    v35[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1D532E030;
    v35[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v12;
    if (v35 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v27 + 7))
    {
      v29 = *v28;
      if (*v28)
      {
        p_p = 0;
        v37 = 0;
        v29(2, v28, &p_p, 0, 0);
        v35[0](2, v35, v28, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))p_p)(2, &p_p, v35, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        *((_DWORD *)v27 + 16) = v12;
        v27[7] = (uint64_t)sub_1D532E030;
        v35[0] = 0;
      }
    }
    sub_1D531BC8C(v35);
  }
  else
  {
    v11 = (unsigned int *)sub_1D532DFE8((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v12;
}

void sub_1D532BF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a25);
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D532C028(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 128))(*(_QWORD *)(a1 + 32));
}

void sub_1D532C048(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_1D532C054(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v4 = v9;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  sub_1D531B308(v4, CFSTR("chromaticAberrationParameters"), v5, &unk_1E997DBE0, a2);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1D532C100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D532C114(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_1D532C120(uint64_t a1)
{
  if ((sub_1D5297E24(a1) & 1) != 0)
    return 0;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2784))(a1);
}

uint64_t sub_1D532C160(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2800))(a1);
}

id sub_1D532C16C(_QWORD *a1)
{
  unsigned __int8 v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  unsigned __int16 *v39;
  unint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  unsigned __int16 *v51;
  unint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  int v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  CGAffineTransform v83;
  void *__p;
  _BYTE *v85;
  void *v86;
  _BYTE *v87;
  _QWORD v88[5];
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  _QWORD v92[2];
  _QWORD v93[3];
  _QWORD v94[4];

  v94[3] = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)&qword_1EFF326F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EFF326F0))
  {
    byte_1EFF326E8 = 1;
    byte_1EFF326EC = 1;
    __cxa_guard_release(&qword_1EFF326F0);
  }
  sub_1D5285A94(&v90, a1 + 1);
  v88[0] = MEMORY[0x1E0C809B0];
  v88[1] = 3321888768;
  v88[2] = sub_1D532C778;
  v88[3] = &unk_1E997DC30;
  v88[4] = v90;
  v89 = v91;
  if (v91)
  {
    p_shared_owners = (unint64_t *)&v91->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = (void *)MEMORY[0x1D82721B4](v88);
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
  v7 = sub_1D5298FE0((uint64_t)a1);
  v11 = v7;
  v12 = HIDWORD(v7);
  if (byte_1EFF326E8)
    v13 = 0x2000;
  else
    v13 = 0;
  if (v13 < (int)v7)
  {
    do
      v11 = ((int)v11 >> 1) & 0xFFFFFFFC;
    while ((int)v11 > v13);
  }
  if (byte_1EFF326EC)
    v14 = 0x2000;
  else
    v14 = 0;
  if (v14 < SHIDWORD(v7))
  {
    do
      v12 = ((int)v12 >> 1) & 0xFFFFFFFC;
    while ((int)v12 > v14);
  }
  v15 = (void *)MEMORY[0x1E0C99E08];
  v93[0] = *MEMORY[0x1E0C9E160];
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v8, v11, v9, v10);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v92[0] = v16;
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v17, v12, v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v92[1] = v20;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v21, (uint64_t)v92, 2, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = *MEMORY[0x1E0C9E150];
  v94[0] = v23;
  v94[1] = CFSTR("CRawImage");
  v25 = *MEMORY[0x1E0C9E0A8];
  v93[1] = v24;
  v93[2] = v25;
  v94[2] = MEMORY[0x1E0C9AAB0];
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v26, (uint64_t)v94, (uint64_t)v93, 3);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_dictionaryWithDictionary_(v15, v28, (uint64_t)v27, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  sub_1D5299180((uint64_t)a1);
  if (v87 != v86)
  {
    objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v32, (v87 - (_BYTE *)v86) >> 1, v33, v34);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = (unsigned __int16 *)v86;
    v40 = 0;
    do
    {
      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v35, v39[v40], v36, v37);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_atIndexedSubscript_(v38, v42, (uint64_t)v41, v40, v43);

      ++v40;
      v39 = (unsigned __int16 *)v86;
    }
    while (v40 < (v87 - (_BYTE *)v86) >> 1);
    objc_msgSend_setObject_forKeyedSubscript_(v31, v35, (uint64_t)v38, *MEMORY[0x1E0C9E168], v37);

  }
  sub_1D5299214((uint64_t)a1);
  if (v85 != __p)
  {
    objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v44, (v85 - (_BYTE *)__p) >> 1, v45, v46);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = (unsigned __int16 *)__p;
    v52 = 0;
    do
    {
      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v47, v51[v52], v48, v49);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_atIndexedSubscript_(v50, v54, (uint64_t)v53, v52, v55);

      ++v52;
      v51 = (unsigned __int16 *)__p;
    }
    while (v52 < (v85 - (_BYTE *)__p) >> 1);
    objc_msgSend_setObject_forKeyedSubscript_(v31, v47, (uint64_t)v50, *MEMORY[0x1E0C9E158], v49);

  }
  v56 = objc_alloc(MEMORY[0x1E0C9DDC8]);
  v57 = (*(uint64_t (**)(_QWORD *))(*a1 + 2152))(a1);
  v58 = v57;
  v60 = sub_1D543E528(v57);
  v61 = v6 >> 32;
  if (v58)
    v62 = objc_msgSend_initWithImageProvider_width_height_format_colorSpace_options_(v56, v59, (uint64_t)v5, (int)v6, v61, *MEMORY[0x1E0C9E080], v60, v31);
  else
    v62 = objc_msgSend_initWithImageProvider_width_height_format_colorSpace_options_(v56, v59, (uint64_t)v5, (int)v6, v61, *MEMORY[0x1E0C9E010], v60, v31);
  v63 = (void *)v62;
  v64 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
  v66 = v65;
  CGAffineTransformMakeTranslation(&v83, (double)-(int)v64, (double)-((v6 - (((v65 & 0xFFFFFFFF00000000) + v64) & 0xFFFFFFFF00000000)) >> 32));
  objc_msgSend_imageByApplyingTransform_(v63, v67, (uint64_t)&v83, v68, v69);
  v70 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_imageByCroppingToRect_(v70, v71, v72, v73, v74, 0.0, 0.0, (double)(int)v66, (double)SHIDWORD(v66));
  v75 = (void *)objc_claimAutoreleasedReturnValue();

  if (__p)
  {
    v85 = __p;
    operator delete(__p);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }

  v76 = v89;
  if (v89)
  {
    v77 = (unint64_t *)&v89->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v91;
  if (v91)
  {
    v80 = (unint64_t *)&v91->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  return v75;
}

void sub_1D532C68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;

  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);

  sub_1D5282EB4((uint64_t)&a26);
  sub_1D5282EB4((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t (***sub_1D532C778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))(_QWORD)
{
  uint64_t (***result)(_QWORD);
  std::__shared_weak_count *v15;
  uint64_t v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD v23[5];
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  result = (uint64_t (***)(_QWORD))sub_1D529729C(*(_QWORD *)(a1 + 32));
  if ((_DWORD)result)
  {
    v16 = *(_QWORD *)(a1 + 32);
    v15 = *(std::__shared_weak_count **)(a1 + 40);
    v17 = *(NSObject **)(v16 + 296);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3321888768;
    v23[2] = sub_1D532C894;
    v23[3] = &unk_1E997DC00;
    v23[4] = v16;
    v24 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    v25 = a2;
    v26 = a4;
    v27 = a5;
    v28 = a6;
    v29 = a7;
    v30 = a3;
    dispatch_sync(v17, v23);
    v20 = v24;
    if (v24)
    {
      v21 = (unint64_t *)&v24->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    return sub_1D529728C(*(_QWORD *)(a1 + 32));
  }
  return result;
}

uint64_t sub_1D532C894(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v7;
  int v8;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[9];
  v5 = a1[10];
  sub_1D532D94C(&v7, a1[7], a1[8]);
  sub_1D532D94C(&v8, v4, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, _QWORD))(*(_QWORD *)v2 + 368))(v2, v3, &v7, a1[11]);
}

void sub_1D532C910(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D532C8F8);
}

uint64_t sub_1D532C91C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1D532C940(uint64_t a1)
{
  return sub_1D5282EB4(a1 + 32);
}

id sub_1D532C948(_QWORD *a1)
{
  void *v2;
  void **p_lpsrc;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  const char *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *exception;
  void *v27;
  _QWORD v28[5];
  std::__shared_weak_count *v29;
  void *lpsrc;
  std::__shared_weak_count *v31;
  void *v32;
  std::__shared_weak_count *v33;
  _QWORD v34[3];
  _QWORD v35[4];

  v35[3] = *MEMORY[0x1E0C80C00];
  if ((*(int (**)(_QWORD *))(*a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D5285A94(&lpsrc, a1 + 1);
  if (lpsrc
    && (v2 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9971F08, (const struct __class_type_info *)&unk_1E9986058, 0)) != 0)
  {
    v32 = v2;
    v33 = v31;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v32;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v4 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (!v32)
  {
    v27 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v27, "RawCameraException");
    __cxa_throw(v27, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3321888768;
  v28[2] = sub_1D532CCA4;
  v28[3] = &unk_1E997DC60;
  v28[4] = v32;
  v29 = v33;
  if (v33)
  {
    v7 = (unint64_t *)&v33->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (void *)MEMORY[0x1D82721B4](v28);
  (*(void (**)(_QWORD *))(*a1 + 432))(a1);
  v11 = v10;
  v12 = objc_alloc(MEMORY[0x1E0C9DDC8]);
  v13 = sub_1D543E528(v12);
  v14 = *MEMORY[0x1E0C9E150];
  v34[0] = *MEMORY[0x1E0C9E160];
  v34[1] = v14;
  v35[0] = &unk_1E99CB328;
  v35[1] = CFSTR("CRawImageFuji");
  v34[2] = *MEMORY[0x1E0C9E0A8];
  v35[2] = MEMORY[0x1E0C9AAB0];
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v15, (uint64_t)v35, (uint64_t)v34, 3);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = (void *)objc_msgSend_initWithImageProvider_width_height_format_colorSpace_options_(v12, v17, (uint64_t)v9, (int)v11, v11 >> 32, *MEMORY[0x1E0C9E080], v13, v16);

  v19 = v29;
  if (v29)
  {
    v20 = (unint64_t *)&v29->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v33;
  if (v33)
  {
    v23 = (unint64_t *)&v33->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return v18;
}

void sub_1D532CC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);

  sub_1D5282EB4((uint64_t)va);
  sub_1D5282EB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D532CCA4(uint64_t a1, void *a2, size_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  double v14;
  uint64_t v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  void *v21;
  void *v22;
  size_t *v23;
  size_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  vImage_Buffer v32;
  vImage_Buffer src;
  vImage_Buffer rgbaDest;
  vImage_Buffer rgbSrc;
  int8x16_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  int64x2_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  _DWORD v49[2];
  _DWORD v50[2];
  uint64_t v51;
  std::__shared_weak_count *v52;
  _OWORD v53[31];
  __int128 v54;
  uint64_t v55[2];

  sub_1D532D9A0(v55, &unk_1E99CB310);
  sub_1D5297E34(*(_QWORD *)(a1 + 32));
  v54 = 0u;
  memset(v53, 0, sizeof(v53));
  (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)(a1 + 32) + 2688))(v53);
  *(_QWORD *)((char *)&v54 + 4) = 0x3F8000003F800000;
  if (sub_1D529729C(*(_QWORD *)(a1 + 32)))
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 376))(&v51);
    sub_1D532D94C(v49, a4, a5);
    sub_1D532D94C(v50, a6, a7);
    v36.i64[0] = (v49[0] - 8) | ((unint64_t)(v49[1] - 8) << 32);
    v36.i64[1] = (v50[0] + 16) | ((unint64_t)(v50[1] + 16) << 32);
    sub_1D530D4F8(v51, (unsigned int *)&v36, &v47);
    v45 = 0u;
    v46 = 0u;
    v44 = 0u;
    v15 = *(_QWORD *)(v47 + 48);
    v16.i64[0] = v15;
    v16.i64[1] = HIDWORD(v15);
    v36 = vextq_s8(v16, v16, 8uLL);
    v17 = sub_1D530D4CC(v47);
    v18 = 2 * *(unsigned int *)(v47 + 56);
    v37 = v17;
    v38 = v18;
    v39 = a6;
    v40 = a7;
    v42 = 6 * a6;
    v43 = vdupq_n_s64(8uLL);
    LODWORD(v44) = 16;
    LODWORD(v46) = -1;
    v19 = ((3 * a6) & 0x7FFFFFFFFFFFFFFFLL) * a7;
    if (v19 < 0)
      v20 = -1;
    else
      v20 = 2 * v19;
    v21 = (void *)operator new[]();
    bzero(v21, v20);
    v41 = v21;
    sub_1D537469C();
    if ((_DWORD)v45)
    {
      v22 = *(void **)(*((_QWORD *)&v44 + 1) + 8);
      v23 = (size_t *)(*((_QWORD *)&v44 + 1) + 16);
    }
    else
    {
      v23 = (size_t *)&v42;
      v22 = v41;
    }
    v24 = *v23;
    rgbSrc.data = v22;
    rgbSrc.height = a7;
    rgbSrc.width = a6;
    rgbSrc.rowBytes = v24;
    rgbaDest.data = a2;
    rgbaDest.height = a7;
    rgbaDest.width = a6;
    rgbaDest.rowBytes = a3;
    vImageConvert_RGB16UtoRGBA16U(&rgbSrc, 0, 0xFFFFu, &rgbaDest, 0, 0);
    src.data = a2;
    src.height = a7;
    src.width = 4 * a6;
    src.rowBytes = a3;
    v32.data = a2;
    v32.height = a7;
    v32.width = 4 * a6;
    v32.rowBytes = a3;
    vImageConvert_16Uto16F(&src, &v32, 0);
    MEMORY[0x1D8271AC4](v21, 0x1000C80BDFB0063);
    v25 = v48;
    if (v48)
    {
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = v52;
    if (v52)
    {
      v29 = (unint64_t *)&v52->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    sub_1D529728C(*(_QWORD *)(a1 + 32));
  }
  return sub_1D532DAC4((uint64_t)v55, v14);
}

void sub_1D532CFCC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  MEMORY[0x1D8271AC4](v45, 0x1000C80BDFB0063);
  sub_1D5282EB4((uint64_t)&a41);
  sub_1D5282EB4((uint64_t)&a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D532CF9CLL);
}

void sub_1D532D044(_Unwind_Exception *a1, double a2)
{
  uint64_t v2;

  sub_1D532DAC4(v2 - 96, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_1D532D084(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_1D532D0A8(uint64_t a1)
{
  return sub_1D5282EB4(a1 + 32);
}

id sub_1D532D0B0(_QWORD *a1, int a2)
{
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  CFTypeRef v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v43;
  const void **v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  void *exception;
  uint64_t v52;
  std::__shared_weak_count *v53;
  _QWORD *v54;
  std::__shared_weak_count *v55;
  _BYTE v56[24];
  _BYTE v57[24];
  _QWORD v58[5];
  const void *v59;
  std::__shared_weak_count *v60;
  void **v61[2];

  v4 = (void *)MEMORY[0x1D8272058]();
  if (sub_1D5297E34((uint64_t)a1))
    v5 = sub_1D5297E34((uint64_t)a1);
  else
    v5 = 1;
  v6 = sub_1D5297E3C((uint64_t)a1);
  if ((*(int (**)(_QWORD *))(*a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  (*(void (**)(_QWORD **__return_ptr, _QWORD *))(*a1 + 160))(&v54, a1);
  (*(void (**)(_QWORD *))(*v54 + 544))(v54);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)v7;
  v9 = v55;
  if (!v55)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v55->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v8)
      goto LABEL_10;
  }
  else
  {
LABEL_9:
    if (v7)
      goto LABEL_10;
  }
  sub_1D5285A94(&v59, a1 + 1);
  if (v59
    && (v43 = __dynamic_cast(v59, (const struct __class_type_info *)&unk_1E9971F08, (const struct __class_type_info *)&unk_1E9986058, 0)) != 0)
  {
    v54 = v43;
    v55 = v60;
    v44 = &v59;
  }
  else
  {
    v44 = (const void **)&v54;
  }
  *v44 = 0;
  v44[1] = 0;
  v45 = v60;
  if (v60)
  {
    v46 = (unint64_t *)&v60->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v54)
    sub_1D532C948(a1);
  else
    sub_1D532C16C(a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = v55;
  if (v55)
  {
    v49 = (unint64_t *)&v55->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
LABEL_10:
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 2752))(a1, v5);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v58[0] = MEMORY[0x1E0C809B0];
  v58[1] = 3221225472;
  v58[2] = sub_1D532D6EC;
  v58[3] = &unk_1E997DB00;
  v58[4] = a1;
  v13 = (void *)MEMORY[0x1D82721B4](v58);
  (*(void (**)(const void **__return_ptr, _QWORD *))(*a1 + 160))(&v59, a1);
  (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v59 + 608))(&v54);
  sub_1D5283758(0, v12, v5, v6, &v54, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v61[0] = (void **)v57;
  sub_1D5282E44(v61);
  v61[0] = (void **)v56;
  sub_1D5282E44(v61);
  v61[0] = (void **)&v54;
  sub_1D5282E44(v61);
  v15 = v60;
  if (v60)
  {
    v16 = (unint64_t *)&v60->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  (*(void (**)(_QWORD *))(*a1 + 528))(a1);
  objc_msgSend_rcApplyFilters_withScaleFactor_(v8, v18, (uint64_t)v14, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  if (sub_1D5297E44((uint64_t)a1))
  {
    (*(void (**)(const void **__return_ptr, _QWORD *))(*a1 + 160))(&v59, a1);
    (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v59 + 608))(&v54);
    sub_1D5283758(1, v12, v5, v6, &v54, v13);
    v22 = objc_claimAutoreleasedReturnValue();

    v61[0] = (void **)v57;
    sub_1D5282E44(v61);
    v61[0] = (void **)v56;
    sub_1D5282E44(v61);
    v61[0] = (void **)&v54;
    sub_1D5282E44(v61);
    v23 = v60;
    if (v60)
    {
      v24 = (unint64_t *)&v60->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    (*(void (**)(_QWORD *))(*a1 + 528))(a1);
    objc_msgSend_rcApplyFilters_withScaleFactor_(v21, v26, v22, v27, v28);
    v29 = objc_claimAutoreleasedReturnValue();

    v30 = (void *)v29;
    v14 = (void *)v22;
  }
  else
  {
    v30 = v21;
  }
  if (sub_1D5297E34((uint64_t)a1) && !sub_1D5297E44((uint64_t)a1))
  {
    v35 = v30;
    if (!a2)
      goto LABEL_38;
  }
  else
  {
    v31 = sub_1D5297E64((uint64_t)a1);
    objc_msgSend_imageByTaggingWithColorSpace_(v30, v32, (uint64_t)v31, v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    if (!a2)
      goto LABEL_38;
  }
  (*(void (**)(_QWORD **__return_ptr, _QWORD *))(*a1 + 160))(&v54, a1);
  sub_1D5285A94(&v52, a1 + 1);
  sub_1D53C3694(&v54, &v52);
  v36 = v53;
  if (v53)
  {
    v37 = (unint64_t *)&v53->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v55;
  if (v55)
  {
    v40 = (unint64_t *)&v55->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
LABEL_38:

  objc_autoreleasePoolPop(v4);
  return v35;
}

void sub_1D532D604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1D532D6EC(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 616))(*(_QWORD *)(a1 + 32));
  return (id)objc_claimAutoreleasedReturnValue();
}

_QWORD *sub_1D532D710(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *a1 = &unk_1E997DCA0;
  v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[28];
  if (v3)
  {
    a1[29] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[23];
  if (v4)
  {
    a1[24] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[19];
  if (v5)
  {
    a1[20] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[15];
  if (v6)
  {
    a1[16] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[11];
  if (v7)
  {
    a1[12] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[7];
  if (v8)
  {
    a1[8] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[3];
  if (v9)
  {
    a1[4] = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_1D532D7C0(_QWORD *a1)
{
  sub_1D532D710(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D532D7E4(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  void **v6;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 120;
        v6 = (void **)(v3 - 24);
        sub_1D5304DA8(&v6);
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_1D532D85C(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_1D52842F4(result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1D532D8B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D532D8CC(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D5282B4C(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1D532D930(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_1D532D94C(_DWORD *a1, unint64_t a2, unint64_t a3)
{
  int v5;
  unint64_t v6;
  unint64_t v7;

  v6 = a3;
  v7 = a2;
  sub_1D5282FE0(&v5, &v7);
  *a1 = v5;
  sub_1D5282FE0(&v5, &v6);
  a1[1] = v5;
  return a1;
}

uint64_t *sub_1D532D9A0(uint64_t *a1, void *a2)
{
  id v3;
  double v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  double v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v3 = a2;
  sub_1D52B58AC(v4);
  v6 = (std::__shared_weak_count *)v5[1];
  v23 = *v5;
  v24 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  sub_1D52B4800(v3, &v23, a1);
  v10 = v24;
  if (v24)
  {
    v11 = (unint64_t *)&v24->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  sub_1D52B58AC(v9);
  sub_1D52908C8(v16, &v21);
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  return a1;
}

void sub_1D532DAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_1D532DAC4(uint64_t a1, double a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v3 = *(std::__shared_weak_count **)(*(_QWORD *)a1 + 40);
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_1D52B58AC(a2);
  sub_1D52908C8(v6, &v11);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return sub_1D5282EB4(a1);
}

id sub_1D532DB58(uint64_t *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  sub_1D52B261C(0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *a1;
  v7 = a1[1];
  if (*a1 != v7)
  {
    do
    {
      v8 = v6;
      if (*(char *)(v6 + 23) < 0)
        v8 = *(_QWORD *)v6;
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v2, v8, v3, v4);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v5, v10, (uint64_t)v9, v11, v12);

      v6 += 24;
    }
    while (v6 != v7);
  }
  objc_msgSend_arrayWithArray_(MEMORY[0x1E0C99D20], v2, (uint64_t)v5, v3, v4);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

void sub_1D532DC14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *sub_1D532DC34(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    sub_1D528EFCC(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_1D532DCF4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E997DCD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D532DD08(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E997DCD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D532DD3C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D532DD4C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0CB37E8];
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return objc_msgSend_numberWithBool_(v1, v3, v2, v4, v5);
}

uint64_t (**sub_1D532DD80(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, MEMORY[0x1E0DE4EC0], &unk_1D544A884);
    else
      return 0;
  }
  return result;
}

void sub_1D532DDC8(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D532DDFC()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_1D532DE80(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0CB37E8];
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return objc_msgSend_numberWithUnsignedInt_(v1, v3, v2, v4, v5);
}

uint64_t (**sub_1D532DEB4(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_1E997DD20, &unk_1D544A8D0);
    else
      return 0;
  }
  return result;
}

void sub_1D532DEFC(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D532DF30()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_1D532DFB4(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0CB37E8];
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return objc_msgSend_numberWithUnsignedInt_(v1, v3, v2, v4, v5);
}

uint64_t (**sub_1D532DFE8(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_1E997DD30, &unk_1D544A8E8);
    else
      return 0;
  }
  return result;
}

void sub_1D532E030(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D532E064()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_1D532E0E8(uint64_t a1)
{
  uint64_t v2;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1)
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 824))(a1))
  {
    v2 = 104;
  }
  else
  {
    v2 = 105;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8 * v2))(a1);
}

uint64_t sub_1D532E140()
{
  return 0;
}

uint64_t sub_1D532E148()
{
  return 4;
}

uint64_t sub_1D532E150()
{
  return 1;
}

double sub_1D532E158()
{
  return 1.0;
}

double sub_1D532E160()
{
  return 1.0;
}

uint64_t sub_1D532E168(uint64_t a1)
{
  int v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  v3 = 880;
  if (v2)
    v3 = 872;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v3))(a1);
}

uint64_t sub_1D532E1AC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 512))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D532E22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D532E240()
{
  return 0xFFFFLL;
}

uint64_t sub_1D532E248(uint64_t a1)
{
  double v2;

  v2 = (double)(unsigned __int16)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 864))(a1) - 5) * 0.9;
  return (unsigned __int16)llround(v2 * (*(double (**)(uint64_t))(*(_QWORD *)a1 + 848))(a1));
}

double sub_1D532E2AC(double *a1)
{
  double v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  double v11;
  __int16 v12;
  signed int v13;
  int v14;
  unsigned __int16 v15;
  uint64_t v16;
  int v17;
  int v18;
  signed int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  __int128 v32;

  if (*((_BYTE *)a1 + 72))
    return a1[8];
  v2 = 65535.0;
  switch((*(unsigned int (**)(double *))(*(_QWORD *)a1 + 816))(a1))
  {
    case 0u:
      v11 = (double)(*(unsigned int (**)(double *))(*(_QWORD *)a1 + 1136))(a1);
      v2 = (*(double (**)(double *))(*(_QWORD *)a1 + 848))(a1) * v11;
      break;
    case 1u:
    case 2u:
      (*(void (**)(uint64_t *__return_ptr, double *))(*(_QWORD *)a1 + 400))(&v30, a1);
      v4 = v31;
      if (v31)
      {
        p_shared_owners = (unint64_t *)&v31->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      v7 = *((_QWORD *)a1 + 3);
      if (v7)
      {
        v8 = sub_1D530C450(v7);
        v9 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 888))(a1);
        if (v9 <= v8)
          v10 = v8;
        else
          v10 = v9;
        v2 = (double)v10;
      }
      break;
    case 3u:
      (*(void (**)(uint64_t *__return_ptr, double *))(*(_QWORD *)a1 + 400))(&v28, a1);
      if (v28)
      {
        v12 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 864))(a1);
        v13 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 888))(a1);
        v14 = (*(uint64_t (**)(double *))(*(_QWORD *)a1 + 120))(a1);
        v15 = v12 - 5;
        v16 = v28;
        if (v14 > 2)
        {
          v22 = *(_DWORD *)(v28 + 48);
          v21 = *(_DWORD *)(v28 + 52);
          *(_QWORD *)&v32 = 0;
          sub_1D5282DF0((_DWORD *)&v32 + 2, v21, v22);
          v27 = v32;
          v23 = sub_1D530D90C(v16, (unsigned int *)&v27, v13, v15);
          if (!*((_BYTE *)a1 + 72))
            *((_BYTE *)a1 + 72) = 1;
          v2 = (double)v23;
        }
        else
        {
          v18 = *(_DWORD *)(v28 + 48);
          v17 = *(_DWORD *)(v28 + 52);
          *(_QWORD *)&v32 = 0;
          sub_1D5282DF0((_DWORD *)&v32 + 2, v17, v18);
          v27 = v32;
          v19 = sub_1D530D7E4(v16, (int *)&v27, v15);
          if (v13 <= v19)
            v20 = v19;
          else
            v20 = v13;
          if (!*((_BYTE *)a1 + 72))
            *((_BYTE *)a1 + 72) = 1;
          v2 = (double)v20;
        }
        a1[8] = v2;
      }
      else
      {
        v2 = 65535.0;
      }
      v24 = v29;
      if (v29)
      {
        v25 = (unint64_t *)&v29->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      break;
    case 4u:
      v2 = (double)(*(unsigned int (**)(double *))(*(_QWORD *)a1 + 864))(a1);
      break;
    default:
      return v2;
  }
  return v2;
}

void sub_1D532E528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D532E548(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1144))(a1);
}

_QWORD *sub_1D532E554@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *exception;
  double v6;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v6 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
  return sub_1D528F9B4(a2, 4uLL, &v6);
}

void sub_1D532E5E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D532E5F8(uint64_t a1)
{
  double v2;
  int v3;
  unsigned __int16 v4;
  double *v6;
  double *v7;

  v2 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
  (*(void (**)(double **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1016))(&v6, a1);
  if ((char *)v7 - (char *)v6 == 32)
  {
    v3 = llround(v2) - llround(fmax(*v6, fmax(v6[1], fmax(v6[2], v6[3]))));
    if (v3 >= 0xFFFF)
      v4 = -1;
    else
      v4 = v3;
  }
  else
  {
    v4 = -1;
    if (!v6)
      return v4;
  }
  v7 = v6;
  operator delete(v6);
  return v4;
}

void sub_1D532E69C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1)
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v6, a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 352))(v6);
    v2 = v7;
    if (!v7)
      return;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    goto LABEL_11;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1712))(a1);
    return;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v6, a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 352))(v6);
  v2 = v7;
  if (v7)
  {
    v5 = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(v5);
    while (__stlxr(v4 - 1, v5));
LABEL_11:
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1D532E7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_1D532E7E4()
{
  return 0.0;
}

uint64_t sub_1D532E7EC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1760))(a1);
}

uint64_t sub_1D532E7F8(uint64_t a1)
{
  void *exception;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 968))(a1);
}

void sub_1D532E864(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D532E878()
{
  return 14;
}

uint64_t sub_1D532E880()
{
  return 12;
}

uint64_t sub_1D532E888()
{
  return 9;
}

uint64_t sub_1D532E890()
{
  return 0;
}

void sub_1D532E89C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v4);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 256))(v4, 0);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1D532E920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D532E934(_QWORD *a1@<X0>, void **a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _WORD *v8;
  double v9;
  double *v10;
  double v11;
  double v12;
  _WORD *v13;
  double *v14;
  double *v15;
  void *v16;
  unint64_t v17;
  double *v18;
  double *v20;
  double v21;
  void (***v22)(__int128 *__return_ptr, void *, uint64_t);
  uint64_t v23;
  double *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  void *v28;
  void (***v29)(__int128 *__return_ptr, void *, uint64_t);
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  double *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  int32x4_t v48;
  double v49;
  double v50;
  double v52;
  double v53;
  void *exception;
  void *v55;
  void *v56;
  void *__p;
  std::__shared_weak_count *v58;
  __int128 v59;
  void *v60;

  if ((*(int (**)(_QWORD *))(*a1 + 120))(a1) <= 6
    && (*(unsigned int (**)(_QWORD *))(*a1 + 120))(a1) != 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)&v59 = 0;
  sub_1D528F9B4(a2, 4uLL, &v59);
  switch((*(unsigned int (**)(_QWORD *))(*a1 + 960))(a1))
  {
    case 0u:
      goto LABEL_8;
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
      (*(void (**)(_QWORD *))(*a1 + 2144))(a1);
      v4 = (char *)a1[15];
      v5 = a1[16];
      v6 = v5 - (_QWORD)v4;
      if ((char *)v5 == v4)
      {
LABEL_8:
        (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 1128))(&v59, a1);
        v8 = (_WORD *)v59;
        if (*((_QWORD *)&v59 + 1) - (_QWORD)v59 <= 7uLL)
        {
          v55 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v55, "RawCameraException");
          __cxa_throw(v55, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        LOWORD(v7) = *(_WORD *)v59;
        v9 = (double)v7;
        v10 = (double *)*a2;
        *v10 = v9;
        LOWORD(v9) = v8[1];
        v11 = (double)*(unint64_t *)&v9;
        v10[1] = v11;
        LOWORD(v11) = v8[2];
        v12 = (double)*(unint64_t *)&v11;
        v10[2] = v12;
        LOWORD(v12) = v8[3];
        v10[3] = (double)*(unint64_t *)&v12;
        goto LABEL_10;
      }
      if ((unint64_t)v6 >= 0x20 && a1 + 15 != a2)
        sub_1D528FA34((char *)a2, v4, v5, v6 >> 3);
      goto LABEL_17;
    case 0xAu:
    case 0xBu:
    case 0xDu:
      (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 1000))(&v59, a1);
      v13 = (_WORD *)v59;
      if (*((_QWORD *)&v59 + 1) - (_QWORD)v59 == 32 && &v59 != (__int128 *)a2)
      {
        sub_1D528FA34((char *)a2, (char *)v59, *((uint64_t *)&v59 + 1), 4uLL);
        v13 = (_WORD *)v59;
      }
      if (!v13)
        goto LABEL_17;
      *((_QWORD *)&v59 + 1) = v13;
      v8 = v13;
      goto LABEL_16;
    case 0xCu:
      sub_1D532E89C((uint64_t)a1);
      v34 = (double *)*a2;
      if (*a2)
      {
        a2[1] = v34;
        operator delete(v34);
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      *(_OWORD *)a2 = v59;
      a2[2] = v60;
      goto LABEL_17;
    case 0xEu:
      if ((*(int (**)(_QWORD *))(*a1 + 120))(a1) <= 6)
        goto LABEL_78;
      (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 1032))(&__p, a1);
      v22 = (void (***)(__int128 *__return_ptr, void *, uint64_t))__p;
      v23 = (*(uint64_t (**)(_QWORD *))(*a1 + 256))(a1);
      (*(void (**)(_QWORD *))(*a1 + 264))(a1);
      (**v22)(&v59, v22, v23);
      v24 = (double *)*a2;
      if (*a2)
      {
        a2[1] = v24;
        operator delete(v24);
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      *(_OWORD *)a2 = v59;
      a2[2] = v60;
      v60 = 0;
      v59 = 0uLL;
      v25 = v58;
      if (v58)
      {
        p_shared_owners = (unint64_t *)&v58->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if ((_BYTE *)a2[1] - (_BYTE *)*a2 == 32)
        goto LABEL_17;
      v28 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v28, "RawCameraException");
      goto LABEL_79;
    case 0xFu:
      if ((*(int (**)(_QWORD *))(*a1 + 120))(a1) <= 6)
      {
LABEL_78:
        v28 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v28, "RawCameraException");
LABEL_79:
        __cxa_throw(v28, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 1032))(&__p, a1);
      v29 = (void (***)(__int128 *__return_ptr, void *, uint64_t))__p;
      v30 = (*(uint64_t (**)(_QWORD *))(*a1 + 256))(a1);
      (*(void (**)(_QWORD *))(*a1 + 264))(a1);
      (**v29)(&v59, v29, v30);
      v31 = v58;
      if (v58)
      {
        v32 = (unint64_t *)&v58->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if ((*(unsigned int (**)(_QWORD *))(*a1 + 176))(a1))
        sub_1D532E89C((uint64_t)a1);
      else
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 1000))(&__p, a1);
      v36 = *((_QWORD *)&v59 + 1);
      v35 = (char *)v59;
      v37 = *((_QWORD *)&v59 + 1) - v59;
      if (*((_QWORD *)&v59 + 1) - (_QWORD)v59 != 32 || (char *)v58 - (_BYTE *)__p != 32)
      {
        v56 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v56, "RawCameraException");
        __cxa_throw(v56, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v38 = *(double *)(v59 + 8);
      v39 = *((double *)__p + 1);
      v40.f64[0] = v38;
      v40.f64[1] = *(float64_t *)(v59 + 16);
      v41.f64[0] = v40.f64[1];
      v41.f64[1] = *(float64_t *)v59;
      __asm { FMOV            V17.2D, #0.75 }
      v45 = vmulq_f64(v40, _Q17);
      v46 = vmulq_f64(v41, (float64x2_t)xmmword_1D544A930);
      _Q17.f64[0] = v39;
      _Q17.f64[1] = *((float64_t *)__p + 2);
      v47.f64[0] = _Q17.f64[1];
      v47.f64[1] = *(float64_t *)__p;
      v48 = (int32x4_t)vcgtq_f64(v46, v47);
      *(int32x2_t *)v48.i8 = vmovn_s64((int64x2_t)v48);
      *(int16x4_t *)&v45.f64[0] = vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_f64(v47, v46), (int32x4_t)vcgtq_f64(_Q17, v45)));
      LOWORD(v45.f64[0]) = vmovn_s32(v48).u16[0];
      if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)&v45.f64[0], 0xFuLL))) & 1) == 0
        || *(double *)__p >= *(double *)v59 * 1.25
        || v39 >= v38 * 1.25
        || ((v49 = *((double *)__p + 3), v50 = *(double *)(v59 + 24), v49 > v50 * 0.75)
          ? (_NF = v49 < v50 * 1.25)
          : (_NF = 0),
            !_NF
         || (v52 = (v38 + *(double *)(v59 + 16)) * 0.5,
             v53 = (v39 + *((double *)__p + 2)) * 0.5,
             (*(double *)__p - v53) * (*(double *)v59 - v52) < 0.0)
         || (v49 - v53) * (v50 - v52) < 0.0))
      {
        if (&__p == a2)
          goto LABEL_70;
        v35 = (char *)__p;
        v36 = (uint64_t)v58;
        v37 = (char *)v58 - (_BYTE *)__p;
        goto LABEL_69;
      }
      if (&v59 != (__int128 *)a2)
LABEL_69:
        sub_1D528FA34((char *)a2, v35, v36, v37 >> 3);
LABEL_70:
      if (__p)
      {
        v58 = (std::__shared_weak_count *)__p;
        operator delete(__p);
      }
      v8 = (_WORD *)v59;
      if ((_QWORD)v59)
      {
LABEL_10:
        *((_QWORD *)&v59 + 1) = v8;
LABEL_16:
        operator delete(v8);
      }
LABEL_17:
      if ((*(int (**)(_QWORD *))(*a1 + 120))(a1) <= 2)
      {
        v14 = (double *)*a2;
        v15 = (double *)a2[1];
        while (v14 != v15)
        {
          *v14 = round(*v14);
          ++v14;
        }
      }
      (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 1072))(&v59, a1);
      v16 = (void *)v59;
      v17 = (uint64_t)(*((_QWORD *)&v59 + 1) - v59) >> 3;
      v18 = (double *)*a2;
      if (v17 != ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 3 || *((_QWORD *)&v59 + 1) == (_QWORD)v59)
      {
        if (!(_QWORD)v59)
          return;
      }
      else
      {
        if (v17 <= 1)
          v17 = 1;
        v20 = (double *)v59;
        do
        {
          v21 = *v20++;
          *v18 = v21 * *v18;
          ++v18;
          --v17;
        }
        while (v17);
      }
      *((_QWORD *)&v59 + 1) = v16;
      operator delete(v16);
      return;
    default:
      goto LABEL_17;
  }
}

void sub_1D532EFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D532F0B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = 0;
  return sub_1D528F9B4(a2, 4uLL, &v4);
}

_QWORD *sub_1D532F0FC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  const void *v5;
  uint64_t v6;

  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 960))(a1);
  if (((_DWORD)result - 1) > 8
    || (result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 2144))(a1),
        v5 = (const void *)a1[18],
        v6 = a1[19],
        (const void *)v6 == v5))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return sub_1D5282C70(a2, v5, v6, (v6 - (uint64_t)v5) >> 3);
  }
  return result;
}

void sub_1D532F174(_QWORD *a1@<X8>)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  v4 = 0;
  v5 = 0;
  sub_1D53AC600(0, &v4, a1);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1D532F1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1D532F1F0(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1) >= 2
      && (*(double (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1) > 1.0e-10;
}

uint64_t sub_1D532F248(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2104))(a1))
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1) ^ 1;
  else
    return 1;
}

BOOL sub_1D532F290(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  _BYTE *v4;
  _BYTE *v5;

  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)a1 + 1024))(&v4);
  v1 = v4;
  v2 = v5;
  if (v4)
  {
    v5 = v4;
    operator delete(v4);
  }
  return v2 - v1 == 32;
}

_QWORD *sub_1D532F2E0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = 0x3FF0000000000000;
  return sub_1D528F9B4(a1, 4uLL, &v2);
}

double sub_1D532F310(uint64_t a1)
{
  void *exception;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return 5.0;
}

void sub_1D532F370(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D532F384(uint64_t a1@<X0>, double **a2@<X8>)
{
  double *v4;
  unint64_t v5;
  double *v6;
  double *v7;
  int v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  double *v13;
  double *v14;
  void *__p[3];

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1) & 1) == 0)
  {
    __p[0] = (void *)0xBFF0000000000000;
LABEL_11:
    sub_1D528F9B4(a2, 4uLL, __p);
    return;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1))
  {
    __p[0] = COERCE_VOID_((*(double (**)(uint64_t))(*(_QWORD *)a1 + 2080))(a1));
    goto LABEL_11;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1024))(__p, a1);
  sub_1D528EB68(a2, 4uLL);
  (*(void (**)(double **__return_ptr, uint64_t))(*(_QWORD *)a1 + 744))(&v13, a1);
  v4 = v13;
  v5 = (char *)v14 - (char *)v13;
  if (v14 == v13)
    goto LABEL_22;
  v6 = (double *)__p[0];
  v7 = *a2;
  **a2 = *v13 * 0.00305175781 * *(double *)__p[0];
  if (v5 < 9)
    goto LABEL_22;
  v7[1] = v4[1] * 0.00305175781 * v6[1];
  if (v5 < 0x11)
    goto LABEL_22;
  v7[2] = v4[2] * 0.00305175781 * v6[2];
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v9 = v13;
  v10 = (char *)v14 - (char *)v13;
  if (v8 > 2)
  {
    v11 = 3;
    if ((unint64_t)v10 <= 0x18)
      v11 = 1;
    if (v11 < v10 >> 3)
      goto LABEL_16;
LABEL_22:
    sub_1D528EAE0();
  }
  if ((unint64_t)v10 > 0x18)
  {
    v11 = 3;
LABEL_16:
    (*a2)[3] = v13[v11] * 0.00305175781 * *((double *)__p[0] + 3);
LABEL_17:
    v14 = v9;
    operator delete(v9);
    v12 = __p[0];
    goto LABEL_18;
  }
  v12 = __p[0];
  (*a2)[3] = *((double *)__p[0] + 3) * 0.00305175781;
  if (v9)
    goto LABEL_17;
LABEL_18:
  if (v12)
  {
    __p[1] = v12;
    operator delete(v12);
  }
}

void sub_1D532F568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1D532F5B4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 2056))(&v6);
  v2 = v6;
  v1 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  return v2 != 0;
}

uint64_t sub_1D532F624(uint64_t a1)
{
  void *exception;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2064))(a1);
}

void sub_1D532F698(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D532F6B0(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
  (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1624))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1632))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1640))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1648))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1656))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1664))(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1704))(a1);
}

double sub_1D532F810(uint64_t a1)
{
  double v2;
  double (***v3)(void *, unint64_t);
  unsigned int v4;
  _BOOL4 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *exception;
  void *__p;
  std::__shared_weak_count *v12;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v2 = -1.0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1))
    {
      sub_1D532F384(a1, (double **)&__p);
      v2 = fmax(*(double *)__p, fmax(*((double *)__p + 1), fmax(*((double *)__p + 2), *((double *)__p + 3))));
      v12 = (std::__shared_weak_count *)__p;
      operator delete(__p);
    }
    else
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1120))(&__p, a1);
      v5 = 1;
      if (__p)
      {
        if (!sub_1D531BD78((uint64_t)&unk_1E997DD58, (uint64_t)&unk_1E997DD58))
        {
          v3 = (double (***)(void *, unint64_t))__p;
          v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
          v2 = (**v3)(v3, llround((double)v4));
          if (v2 >= 0.0)
            v5 = 0;
        }
      }
      v6 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      if (v5)
        return (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2072))(a1);
    }
  }
  return v2;
}

void sub_1D532F9C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D532F9E4(_BYTE *a1)
{
  uint64_t v2;
  unint64_t v3;
  void *exception;

  if ((*(int (**)(_BYTE *))(*(_QWORD *)a1 + 120))(a1) <= 6
    && (*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 120))(a1) != 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (!a1[112])
  {
    a1[112] = 1;
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 2920))(a1);
    if ((*(int (**)(_BYTE *))(*(_QWORD *)a1 + 960))(a1) >= 1
      && (*(int (**)(_BYTE *))(*(_QWORD *)a1 + 960))(a1) < 9)
    {
      v2 = 136;
LABEL_13:
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 8 * v2))(a1);
      return a1[112];
    }
    if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 960))(a1) == 9)
    {
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 1008))(a1);
      if (HIDWORD(v3) && v3 != 0)
      {
        v2 = 137;
        goto LABEL_13;
      }
    }
  }
  return a1[112];
}

void sub_1D532FB08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D532FB1C(_QWORD *a1)
{
  unsigned int v2;
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  unsigned __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  unsigned __int16 *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  double v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;

  v2 = (*(uint64_t (**)(_QWORD *))(*a1 + 960))(a1);
  v3 = v2 < 9;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 384))(&v41, a1);
  if (v41)
  {
    v4 = sub_1D530D4CC(v41);
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
    v7 = v6;
    v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
    v9 = (v2 - 3) & 0xFFFFFFFA;
    v10 = v3 & (0x142u >> v2);
    v11 = v5 - 16;
    if (v2 != 4)
      v11 = v5;
    if (v10)
      v12 = 0;
    else
      v12 = HIDWORD(v5);
    if (v10)
      v13 = HIDWORD(v5);
    else
      v13 = 0;
    v14 = v9 == 0;
    if (v9)
      v15 = 0;
    else
      v15 = v11;
    if (v14)
      v11 = 0;
    v16 = v11 + v7;
    if ((v3 & (0x1A0u >> v2)) == 0)
      v16 = v8 - v15;
    v17 = v8 - v16;
    v18 = v15 + v13 * v8;
    v19 = HIDWORD(v8) - v12 - (v13 + HIDWORD(v7));
    if ((v3 & (0x144u >> v2)) == 0)
      v19 = 0;
    v20 = v8 - v15 - v16 + v19 * v8;
    v21 = v18 + v17 * (HIDWORD(v7) - 1) + v20;
    if (v21 >= 1)
    {
      v22 = *(_DWORD *)(v41 + 56);
      if (v10)
        v23 = 0;
      else
        v23 = v22 * HIDWORD(v5);
      v24 = (unsigned __int16 *)(v4 + 32 * (v2 == 4) + 2 * v23);
      if (v18 < 1)
      {
        v25 = 0;
      }
      else
      {
        v25 = 0;
        do
        {
          v26 = *v24++;
          v25 += v26;
          --v18;
        }
        while (v18);
      }
      if (SHIDWORD(v7) > 1)
      {
        v27 = 0;
        v28 = v16 - (int)v8 + v22;
        do
        {
          v24 += v28;
          if (v17 < 1)
          {
            v29 = 0;
          }
          else
          {
            v29 = 0;
            v30 = v17;
            do
            {
              v31 = *v24++;
              v29 += v31;
              --v30;
            }
            while (v30);
          }
          v25 += v29;
          ++v27;
        }
        while (v27 != HIDWORD(v7) - 1);
      }
      if (v20 >= 1)
      {
        v32 = 0;
        v33 = &v24[v16];
        do
          v25 += v33[v32++];
        while ((int)v32 < v20);
      }
      v38 = (double)(v25 / v21);
      sub_1D528F9B4(&v39, 4uLL, &v38);
      v34 = (void *)a1[15];
      if (v34)
      {
        a1[16] = v34;
        operator delete(v34);
        a1[15] = 0;
        a1[16] = 0;
        a1[17] = 0;
      }
      *(_OWORD *)(a1 + 15) = v39;
      a1[17] = v40;
    }
  }
  v35 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_1D532FDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D532FDC8(void **a1)
{
  void **v2;
  __int128 v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  int v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *exception;
  __int128 v20;
  void *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  if ((*((int (**)(void **))*a1 + 15))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v2 = a1 + 15;
  if (a1[16] == a1[15])
  {
    (*((void (**)(__int128 *__return_ptr, void **))*a1 + 359))(&v20, a1);
    v3 = v20;
    if (*((_QWORD *)&v20 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v3 + 1) + 16))(*((_QWORD *)&v3 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v3 + 1));
      }
    }
    if ((_QWORD)v3)
    {
      (*((void (**)(uint64_t *__return_ptr, void **))*a1 + 48))(&v24, a1);
      v6 = v24;
      if (v24)
      {
        *(_QWORD *)&v20 = (*((uint64_t (**)(void **))*a1 + 126))(a1);
        *((_QWORD *)&v20 + 1) = v7;
        v8 = sub_1D530DCE0(v6, (int *)&v20);
        v23 = v8;
        v9 = (*((uint64_t (**)(void **))*a1 + 15))(a1);
        if (v9 <= 2)
        {
          v10 = v8;
          v8 = v10;
          v23 = v10;
        }
        v11 = v24;
        *(_QWORD *)&v20 = (*((uint64_t (**)(void **))*a1 + 126))(a1);
        *((_QWORD *)&v20 + 1) = v12;
        sub_1D530E35C(v11, (int *)&v20, v9 < 3, v8);
        v22 = v13;
        sub_1D528F9B4(&v20, 4uLL, &v23);
        v14 = *v2;
        if (*v2)
        {
          a1[16] = v14;
          operator delete(v14);
          *v2 = 0;
          a1[16] = 0;
          a1[17] = 0;
        }
        *(_OWORD *)(a1 + 15) = v20;
        a1[17] = v21;
        sub_1D528F9B4(&v20, 4uLL, &v22);
        v15 = a1[18];
        if (v15)
        {
          a1[19] = v15;
          operator delete(v15);
          a1[18] = 0;
          a1[19] = 0;
          a1[20] = 0;
        }
        *((_OWORD *)a1 + 9) = v20;
        a1[20] = v21;
      }
      v16 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
}

void sub_1D532FFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D5330020(uint64_t a1)
{
  std::__shared_weak_count *v2;
  void *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  float64x2_t *v9;
  float64x2_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *exception;
  _QWORD v17[2];
  void *__p;
  _BYTE *v19;
  void *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (*(_QWORD *)(a1 + 128) == *(_QWORD *)(a1 + 120))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 2872))(&v20, a1);
    v3 = v20;
    v2 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    if (v3)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 384))(&v22, a1);
      v6 = v22;
      if (v22)
      {
        __p = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1008))(a1);
        v19 = v7;
        sub_1D530DE0C(v6, (int *)&__p, &v20);
        v8 = (std::__shared_weak_count *)v20;
        if ((char *)v21 - (_BYTE *)v20 == 32)
        {
          if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 2)
          {
            v9 = (float64x2_t *)v20;
            v10 = vcvtq_f64_f32(vcvt_f32_f64(*((float64x2_t *)v20 + 1)));
            *(float64x2_t *)v20 = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)v20));
            v9[1] = v10;
          }
          v11 = v22;
          v17[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1008))(a1);
          v17[1] = v12;
          sub_1D530E4D0(v11, (int *)v17, &v20, &__p);
          if ((void **)(a1 + 120) != &v20)
            sub_1D528FA34((char *)(a1 + 120), (char *)v20, (uint64_t)v21, ((char *)v21 - (_BYTE *)v20) >> 3);
          if ((void **)(a1 + 144) != &__p)
            sub_1D528FA34((char *)(a1 + 144), (char *)__p, (uint64_t)v19, (v19 - (_BYTE *)__p) >> 3);
          if (__p)
          {
            v19 = __p;
            operator delete(__p);
          }
          v8 = (std::__shared_weak_count *)v20;
        }
        if (v8)
        {
          v21 = v8;
          operator delete(v8);
        }
      }
      v13 = v23;
      if (v23)
      {
        v14 = (unint64_t *)&v23->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
  }
}

void sub_1D5330244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v15;

  if (__p)
    operator delete(__p);
  sub_1D5282EB4(v15 - 48);
  _Unwind_Resume(a1);
}

double sub_1D533029C(uint64_t a1)
{
  char v2;
  double result;
  double v4;
  double v5;
  BOOL v6;
  void *exception;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1);
  result = -1.0;
  if ((v2 & 1) == 0)
  {
    v4 = ((*(double (**)(uint64_t, _QWORD, _QWORD, double))(*(_QWORD *)a1 + 2664))(a1, 0, 0, -1.0)
        + -0.25)
       * 2.2;
    v5 = 1.0;
    if (v4 <= 1.0)
      v5 = v4;
    v6 = v4 < 0.0;
    result = 0.0;
    if (!v6)
      return v5;
  }
  return result;
}

void sub_1D5330358(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1D533036C()
{
  return 1.0;
}

uint64_t sub_1D5330374(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unsigned __int8 v11;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1368))(a1);
  v11 = result;
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 2864))(&v9, a1);
    v11 = sub_1D53710AC(v9, &v11, v3, v4, v5);
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    return v11 != 0;
  }
  return result;
}

void sub_1D5330414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5330428(uint64_t a1)
{
  uint64_t result;
  double v3;
  double v4;
  double v5;
  unsigned int v6;
  double v7;
  int v8;
  double v9;
  float v10;
  float v11;
  _BOOL4 v12;
  float v13;
  float v14;
  _BOOL4 v15;
  float v16;
  float v17;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1224))(a1) & 1) != 0)
    return 1;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1) & 1) != 0)
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2104))(a1);
  if ((_DWORD)result)
  {
    v3 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1672))(a1);
    v4 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1680))(a1);
    v5 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1688))(a1);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
    v7 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1696))(a1) - 1;
    v9 = (double)v6;
    result = 1;
    switch(v8)
    {
      case 0:
        result = v3 < v9;
        break;
      case 1:
        v10 = v7;
        v11 = v4;
        result = v10 > v11;
        break;
      case 2:
        v12 = v3 < v9;
        v13 = v7;
        v14 = v4;
        result = v13 > v14 || v12;
        break;
      case 3:
        v15 = v3 < v9;
        v16 = v7;
        v17 = v5;
        result = v16 < v17 && v15;
        break;
      case 8:
        return result;
      default:
        return 0;
    }
  }
  return result;
}

double sub_1D5330590(uint64_t a1)
{
  double v2;

  v2 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1424))(a1);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1) & 1) == 0)
    v2 = v2 + (1.0 - (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2088))(a1)) * 3.0;
  return fmin(fmax(v2, 0.0), 20.0);
}

void sub_1D5330608(_QWORD *a1@<X8>)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  v4 = 0;
  v5 = 0;
  sub_1D53ABB00(0, &v4, a1);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1D5330670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1D5330684(_DWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 2864))(&v11);
  v10 = 0;
  v5 = (sub_1D53715EC(v11, &v10, v2, v3, v4) & 1) != 0 || a1[70] == 1;
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D533071C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D5330730(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v3;
  void **p_lpsrc;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *lpsrc;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9972B38, 0)) != 0)
  {
    v14 = (uint64_t)v3;
    v15 = v13;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = (void **)&v14;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v14)
  {
    v8 = sub_1D52E36C0(v14);
    if (v8 != a2)
      sub_1D5282A44((char *)a2, *(char **)v8, *(_QWORD *)(v8 + 8), (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 2);
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1D5330840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  v5 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void sub_1D5330864(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p[3];
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  sub_1D5299C2C((uint64_t)a1);
  if (!a1[3])
  {
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 160))(__p, a1);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)__p[0] + 384))(&v18);
    v2 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v3 = (unint64_t *)((char *)__p[1] + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v17 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
    v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
    __p[0] = (void *)(*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
    __p[1] = v5;
    sub_1D533172C(&v18, (unint64_t *)&v17, &v14, __p, &v15);
    v6 = v15;
    *(_BYTE *)(v15 + 185) = 0;
    sub_1D5330730((uint64_t)a1, (uint64_t)__p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 200))(v6, __p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    sub_1D52908C8(a1 + 3, &v15);
    v7 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v19;
    if (v19)
    {
      v11 = (unint64_t *)&v19->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1D5330A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a13);
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1D5330A64(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6;
  int v7;

  v7 = 0;
  v6 = &unk_1E997E9C8;
  sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE:ColorBalance1");
  (*(void (**)(uint64_t, uint64_t, void **, void **))(*(_QWORD *)a1 + 2976))(a1, a2, __p, &v6);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1D5330AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D5330B08(uint64_t a1)
{
  void *v1;
  void **p_lpsrc;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v12;
  void *v13;
  std::__shared_weak_count *v14;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v1 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9972B38, 0)) != 0)
  {
    v13 = v1;
    v14 = v12;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v13;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v13)
    v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 800))(v13);
  else
    v6 = 0;
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1D5330C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D5330C1C(uint64_t a1)
{
  int v1;
  double result;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2992))(a1);
  result = 0.6;
  if (!v1)
    return 1.0;
  return result;
}

void sub_1D5330C4C(uint64_t a1@<X0>, double **a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  double *v12;
  void *v13;
  void *exception;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int v23;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 3000))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2984))(a1))
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 3008))(a1);
    if (v5 == 4)
    {
      (*(void (**)(double **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 2960))(&v19, a1, v4);
      v7 = v19;
      v8 = v20;
    }
    else
    {
      if (v5 != 3)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v22 = &unk_1E997EA10;
      v23 = v4;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v17, a1);
      v6 = v17;
      sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE:ColorBalance1");
      (*(void (**)(double **__return_ptr, uint64_t, void **, void **, uint64_t))(*(_QWORD *)v6 + 600))(&v19, v6, __p, &v22, 3);
      v7 = v19;
      v8 = v20;
      v20 = 0;
      v21 = 0;
      v19 = 0;
      if (v16 < 0)
        operator delete(__p[0]);
      v9 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    if ((unint64_t)(v8 - (_QWORD)v7) <= 0x17)
    {
      v13 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v13, "RawCameraException");
      __cxa_throw(v13, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    sub_1D528EB68(a2, 3uLL);
    v12 = *a2;
    *v12 = v7[1] / *v7;
    v12[1] = v7[1] / v7[1];
    v12[2] = v7[1] / v7[2];
    operator delete(v7);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 2960))(a1, v4);
  }
}

void sub_1D5330E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5330ED4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = sub_1D5330F8C(v2, CFSTR("cameraMultipliersOffset"), v3, &unk_1E997DD88);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D5330F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5330F8C(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t **v9;
  void **v10;
  unsigned __int16 *v11;
  unsigned __int16 v12;
  uint64_t (**v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  void (**v28)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void (*v29)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void *exception;
  _QWORD v32[4];
  id v33;
  std::string __p;
  uint64_t (*v35[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::string *p_p;
  std::__shared_weak_count *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  sub_1D531B8B8(v7, a3, &__p);
  v9 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_1D53317AC;
    v32[3] = &unk_1E9979B90;
    v13 = (uint64_t (**)(_QWORD))v8;
    v33 = v13;
    sub_1D53BC1FC(a1, v7, v32, &p_p);
    v18 = (__int128 *)p_p;
    if (p_p)
    {
      sub_1D53BE790((uint64_t)p_p, v14, v15, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v12 = objc_msgSend_longLongValue(v19, v20, v21, v22, v23);

    }
    else
    {
      v12 = 0;
    }
    v24 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    if (!v18)
      v12 = v13[2](v13);
    p_p = &__p;
    v27 = sub_1D531BAD4(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v28 = (void (**)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD))(v27 + 7);
    v35[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1D5331828;
    v35[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v12;
    if (v35 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v27 + 7))
    {
      v29 = *v28;
      if (*v28)
      {
        p_p = 0;
        v37 = 0;
        v29(2, v28, &p_p, 0, 0);
        v35[0](2, v35, v28, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))p_p)(2, &p_p, v35, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        *((_WORD *)v27 + 32) = v12;
        v27[7] = (uint64_t)sub_1D5331828;
        v35[0] = 0;
      }
    }
    sub_1D531BC8C(v35);
  }
  else
  {
    v11 = (unsigned __int16 *)sub_1D53317E0((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v12;
}

void sub_1D533125C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a25);
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1D53312E8()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1D8271938](exception, "RawCameraException");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
}

void sub_1D5331324(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5331338(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = sub_1D5330F8C(v2, CFSTR("cameraMultipliersChannelCount"), v3, &unk_1E997DDA8);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D53313DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53313F0()
{
  return 4;
}

id sub_1D53313F8(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void **p_lpsrc;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void **v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  void *lpsrc;
  std::__shared_weak_count *v41;
  void *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, (uint64_t)CFSTR("aspectRatioCrop"), v5, v6))
  {
    v44 = 0;
    v45 = 0;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
    v12 = v11;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&lpsrc, a1);
    if (lpsrc
      && (v17 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9972B38, 0)) != 0)
    {
      v42 = v17;
      v43 = v41;
      p_lpsrc = &lpsrc;
    }
    else
    {
      p_lpsrc = &v42;
    }
    *p_lpsrc = 0;
    p_lpsrc[1] = 0;
    v24 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v42)
    {
      v10 = (*(uint64_t (**)(void *))(*(_QWORD *)v42 + 792))(v42);
      v12 = v13;
    }
    v44 = v10;
    v45 = (std::__shared_weak_count *)v12;
    sub_1D53318E0((unsigned int *)&v44, v13, v14, v15, v16);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = v43;
    if (v43)
    {
      v29 = (unint64_t *)&v43->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      goto LABEL_34;
    }
  }
  else
  {
    if (!objc_msgSend_isEqualToString_(v3, v7, (uint64_t)CFSTR("firmwareVersion"), v8, v9))
    {
      sub_1D5367CB4(a1, v3);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_36;
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v42, a1);
    if (v42
      && (v22 = __dynamic_cast(v42, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9972B38, 0)) != 0)
    {
      v44 = (uint64_t)v22;
      v45 = v43;
      v23 = &v42;
    }
    else
    {
      v23 = (void **)&v44;
    }
    *v23 = 0;
    v23[1] = 0;
    v31 = v43;
    if (v43)
    {
      v32 = (unint64_t *)&v43->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v44)
    {
      v34 = sub_1D52B89F8(v44);
      objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v35, v34, v36, v37);
    }
    else
    {
      objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v19, 0, v20, v21);
    }
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = v45;
    if (v45)
    {
      v38 = (unint64_t *)&v45->__shared_owners_;
      do
        v30 = __ldaxr(v38);
      while (__stlxr(v30 - 1, v38));
LABEL_34:
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
LABEL_36:

  return v27;
}

void sub_1D5331650(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D533168C(uint64_t a1, uint64_t a2, void **a3, unsigned int a4, uint64_t *a5)
{
  unsigned int v6;
  int v7;
  _DWORD *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;

  v6 = a4;
  if (a4 == 3)
    a4 = 4;
  v7 = sub_1D531C458(a1, a2, a3, a4, a5);
  if (v6 == 3 && v7)
  {
    sub_1D52854D0(&v13, 3uLL);
    v8 = (_DWORD *)*a5;
    v9 = v13;
    v10 = v13;
    *(_DWORD *)v13 = 2 * *(_DWORD *)*a5;
    *(_DWORD *)(v10 + 4) = v8[2] + v8[1];
    *(_DWORD *)(v10 + 8) = 2 * v8[3];
    *(_OWORD *)a5 = v9;
    v11 = a5[2];
    a5[2] = v14;
    *((_QWORD *)&v13 + 1) = v8;
    v14 = v11;
    *(_QWORD *)&v13 = v8;
    operator delete(v8);
  }
  return 1;
}

void sub_1D533172C(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xF8uLL);
  sub_1D5314CE4((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D5331798(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53317AC(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0CB37E8];
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return objc_msgSend_numberWithUnsignedShort_(v1, v3, v2, v4, v5);
}

uint64_t (**sub_1D53317E0(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, MEMORY[0x1E0DE4F18], &unk_1D544A968);
    else
      return 0;
  }
  return result;
}

void sub_1D5331828(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D533185C()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

id sub_1D53318E0(unsigned int *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  _QWORD v23[5];

  v23[4] = *MEMORY[0x1E0C80C00];
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], a2, *a1, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v23[0] = v6;
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v7, a1[1], v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v23[1] = v10;
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v11, a1[2], v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v23[2] = v14;
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v15, a1[3], v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v23[3] = v18;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v19, (uint64_t)v23, 4, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  return v21;
}

void sub_1D53319D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5331A10(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  int v7;
  int i;
  int v9;
  double v10;
  double v11;
  double *v12;
  double *v13;
  double *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  double *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  void *__p;
  double *v28;
  double *v29;

  v5 = sub_1D544098C(a1, a2);
  *(_QWORD *)v5 = off_1E997EA40;
  *(_OWORD *)(v5 + 16) = 0u;
  v6 = (uint64_t *)(v5 + 16);
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  v7 = sub_1D52847F8(*a3);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      v9 = 0;
      __p = 0;
      v28 = 0;
      v29 = 0;
      do
      {
        v10 = sub_1D528494C(*a3);
        v11 = v10;
        v12 = v28;
        if (v28 >= v29)
        {
          v14 = (double *)__p;
          v15 = ((char *)v28 - (_BYTE *)__p) >> 3;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61)
            sub_1D5282B8C();
          v17 = (char *)v29 - (_BYTE *)__p;
          if (((char *)v29 - (_BYTE *)__p) >> 2 > v16)
            v16 = v17 >> 2;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)sub_1D5282D28((uint64_t)&v29, v18);
            v14 = (double *)__p;
            v12 = v28;
          }
          else
          {
            v19 = 0;
          }
          v20 = (double *)&v19[8 * v15];
          *v20 = v11;
          v13 = v20 + 1;
          while (v12 != v14)
          {
            v21 = *((_QWORD *)v12-- - 1);
            *((_QWORD *)v20-- - 1) = v21;
          }
          __p = v20;
          v28 = v13;
          v29 = (double *)&v19[8 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v28 = v10;
          v13 = v12 + 1;
        }
        v28 = v13;
        ++v9;
      }
      while (v9 != 19);
      v22 = *(_QWORD *)(a1 + 24);
      if (v22 >= *(_QWORD *)(a1 + 32))
      {
        v23 = sub_1D53320C4(v6, (uint64_t)&__p);
      }
      else
      {
        sub_1D5332074((uint64_t)v6, (uint64_t)&__p);
        v23 = v22 + 24;
      }
      *(_QWORD *)(a1 + 24) = v23;
      if (__p)
      {
        v28 = (double *)__p;
        operator delete(__p);
      }
    }
  }
  v24 = sub_1D528494C(*a3);
  v25 = sub_1D528494C(*a3);
  *(double *)(a1 + 64) = v24;
  *(double *)(a1 + 72) = v25;
  *(_DWORD *)(a1 + 80) = sub_1D52847F8(*a3);
  return a1;
}

void sub_1D5331BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  __p = (void *)(v11 + 40);
  sub_1D5304DA8((void ***)&__p);
  sub_1D5304DA8((void ***)&__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5331C3C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return sub_1D5282C70(a2, *(const void **)v2, *(_QWORD *)(v2 + 8), (uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 3);
}

id sub_1D5331C5C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double **v13;
  double **i;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  RAWOpcodeWarpRectilinear *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v69;
  void *v70;
  _QWORD v71[2];
  _QWORD v72[6];
  _QWORD v73[8];

  v73[6] = *MEMORY[0x1E0C80C00];
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4, a5);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v5, v6, v7, v8);
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = *(double ***)(a1 + 16);
  for (i = *(double ***)(a1 + 24); v13 != i; v13 += 3)
  {
    v72[0] = CFSTR("kr0");
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v9, v10, v11, v12, **v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v73[0] = v15;
    v72[1] = CFSTR("kr1");
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v16, v17, v18, v19, (*v13)[1]);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v73[1] = v20;
    v72[2] = CFSTR("kr2");
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v21, v22, v23, v24, (*v13)[2]);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v73[2] = v25;
    v72[3] = CFSTR("kr3");
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v26, v27, v28, v29, (*v13)[3]);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v73[3] = v30;
    v72[4] = CFSTR("kt0");
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v31, v32, v33, v34, (*v13)[4]);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v73[4] = v35;
    v72[5] = CFSTR("kt1");
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v36, v37, v38, v39, (*v13)[5]);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v73[5] = v40;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v41, (uint64_t)v73, (uint64_t)v72, 6);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v70, v43, (uint64_t)v42, v44, v45);

  }
  objc_msgSend_setObject_forKeyedSubscript_(v69, v9, (uint64_t)v70, (uint64_t)CFSTR("CoefficientSets"), v12);
  v46 = *(double *)(a1 + 72);
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v47, v48, v49, v50, *(double *)(a1 + 64));
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v71[0] = v51;
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v52, v53, v54, v55, v46);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v71[1] = v56;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v57, (uint64_t)v71, 2, v58);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v69, v60, (uint64_t)v59, (uint64_t)CFSTR("NormalizedCenter"), v61);

  v62 = [RAWOpcodeWarpRectilinear alloc];
  v66 = (void *)objc_msgSend_initWithArguments_(v62, v63, (uint64_t)v69, v64, v65);

  return v66;
}

void sub_1D5331F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5331FB0(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_1E997EA40;
  v2 = (void **)(a1 + 16);
  v4 = (void **)(a1 + 40);
  sub_1D5304DA8(&v4);
  v4 = v2;
  sub_1D5304DA8(&v4);
  return a1;
}

uint64_t sub_1D5332004(uint64_t a1)
{
  void **v2;
  void **v4;

  *(_QWORD *)a1 = off_1E997EA40;
  v2 = (void **)(a1 + 16);
  v4 = (void **)(a1 + 40);
  sub_1D5304DA8(&v4);
  v4 = v2;
  sub_1D5304DA8(&v4);
  return MEMORY[0x1D8271ADC](a1, 0x10A1C40FFDD1797);
}

uint64_t sub_1D533206C()
{
  return 14;
}

_QWORD *sub_1D5332074(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = sub_1D5282C70(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1D53320BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1D53320C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1D5282B8C();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1D5293DCC(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_1D5282C70(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  sub_1D53321D8(a1, v14);
  v12 = a1[1];
  sub_1D530496C((uint64_t)v14);
  return v12;
}

void sub_1D53321C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D530496C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53321D8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1D533224C((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1D533224C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_1D53322EC((uint64_t)v11);
  return v9;
}

uint64_t sub_1D53322EC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D5304928(a1);
  return a1;
}

void sub_1D53323B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53324C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1D5332634(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5332B44(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D5332B50(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1D5281424(a1);
  _Unwind_Resume(a1);
}

void sub_1D5332B6C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWRadialLensCorrection", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

double sub_1D5332BF0(uint64_t a1, int a2, double a3, double a4, double a5, double a6)
{
  if (a2)
    return 0.0;
  else
    return sub_1D5332C2C(*(void **)(a1 + 32), a3, a4, a5, a6, *(float *)(a1 + 48), *(float *)(a1 + 52), *(float *)(a1 + 56), *(float *)(a1 + 60));
}

double sub_1D5332C2C(void *a1, double a2, double a3, double a4, double a5, float a6, float a7, float a8, float a9)
{
  id v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  float v18;
  double v19;
  CGFloat v20;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  double v36;
  double v38;
  double v39;
  double v40;
  double v42;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;

  v13 = a1;
  v14 = *MEMORY[0x1E0C9D628];
  v15 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v16 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v17 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v42 = a2;
  v39 = a3 + a5;
  v40 = a5;
  v38 = a2 + a4;
  v18 = 0.0;
  v19 = 0.0;
  do
  {
    v55.origin.x = sub_1D5333ADC(v13, v42 + a4 * v19, a3, a6, a7, a8, a9);
    v55.origin.y = v20;
    v55.size.width = 0.0;
    v55.size.height = 0.0;
    v46.origin.x = v14;
    v46.origin.y = v15;
    v46.size.width = v16;
    v46.size.height = v17;
    v47 = CGRectUnion(v46, v55);
    x = v47.origin.x;
    y = v47.origin.y;
    width = v47.size.width;
    height = v47.size.height;
    v56.origin.x = sub_1D5333ADC(v13, v42 + a4 * (1.0 - v19), v39, a6, a7, a8, a9);
    v56.origin.y = v25;
    v56.size.width = 0.0;
    v56.size.height = 0.0;
    v48.origin.x = x;
    v48.origin.y = y;
    v48.size.width = width;
    v48.size.height = height;
    v49 = CGRectUnion(v48, v56);
    v26 = v49.origin.x;
    v27 = v49.origin.y;
    v28 = v49.size.width;
    v29 = v49.size.height;
    v57.origin.x = sub_1D5333ADC(v13, v42, a3 + v40 * (1.0 - v19), a6, a7, a8, a9);
    v57.origin.y = v30;
    v57.size.width = 0.0;
    v57.size.height = 0.0;
    v50.origin.x = v26;
    v50.origin.y = v27;
    v50.size.width = v28;
    v50.size.height = v29;
    v51 = CGRectUnion(v50, v57);
    v31 = v51.origin.x;
    v32 = v51.origin.y;
    v33 = v51.size.width;
    v34 = v51.size.height;
    v58.origin.x = sub_1D5333ADC(v13, v38, a3 + v40 * v19, a6, a7, a8, a9);
    v58.origin.y = v35;
    v58.size.width = 0.0;
    v58.size.height = 0.0;
    v52.origin.x = v31;
    v52.origin.y = v32;
    v52.size.width = v33;
    v52.size.height = v34;
    v53 = CGRectUnion(v52, v58);
    v14 = v53.origin.x;
    v15 = v53.origin.y;
    v16 = v53.size.width;
    v17 = v53.size.height;
    v18 = v18 + 0.125;
    v19 = v18;
  }
  while (v18 < 0.99999);
  v54 = CGRectIntegral(v53);
  *(_QWORD *)&v36 = (unint64_t)CGRectInset(v54, -2.0, -2.0);

  return v36;
}

void sub_1D5332E90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5332FF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5333144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D533333C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5333838(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D5333844(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1D5281424(a1);
  _Unwind_Resume(a1);
}

void sub_1D5333860(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWRadialLensCorrectionRB", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

double sub_1D53338E4(uint64_t a1, int a2, double a3, double a4, double a5, double a6)
{
  double v6;
  float v11;
  float v12;
  float v13;
  float v14;
  void *v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;

  if (a2)
    return 0.0;
  v11 = *(float *)(a1 + 56);
  v12 = *(float *)(a1 + 60);
  v14 = *(float *)(a1 + 64);
  v13 = *(float *)(a1 + 68);
  v15 = *(void **)(a1 + 32);
  v16 = *(id *)(a1 + 40);
  v17 = sub_1D5332C2C(v15, a3, a4, a5, a6, v11, v12, v14, v13);
  v27 = v18;
  v28 = v17;
  v25 = v20;
  v26 = v19;
  v32.origin.x = sub_1D5332C2C(v16, a3, a4, a5, a6, v11, v12, v14, v13);
  v32.origin.y = v21;
  v32.size.width = v22;
  v32.size.height = v23;
  v29.origin.y = v27;
  v29.origin.x = v28;
  v29.size.height = v25;
  v29.size.width = v26;
  v30 = CGRectUnion(v29, v32);
  v31 = CGRectIntegral(v30);
  *(_QWORD *)&v6 = (unint64_t)CGRectInset(v31, -2.0, -2.0);

  return v6;
}

void sub_1D5333A0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1D5333ADC(void *a1, double a2, double a3, float a4, float a5, float a6, float a7)
{
  id v13;
  float v14;
  float v15;
  float v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  BOOL v22;
  float v23;
  float v24;
  double v25;
  double v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  double v32;
  double v33;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = v14 - a4;
  v20 = a6 * hypotf(v14 - a4, v15 - a5);
  v21 = 1.0;
  if (v20 <= 1.0)
    v21 = v20;
  v22 = v20 < 0.0;
  v23 = 0.0;
  if (!v22)
    v23 = v21;
  v24 = a7 * v23;
  objc_msgSend_valueAtIndex_(v13, v17, vcvtms_u32_f32(a7 * v23), v18, v19);
  v26 = v25;
  objc_msgSend_valueAtIndex_(v13, v27, vcvtps_u32_f32(v24), v28, v29);
  v30 = floorf(v24);
  v31 = v26;
  *(float *)&v32 = v32;
  v33 = (float)(a4
              + (float)(v16
                      * (float)((float)((float)(v24 - v30) * *(float *)&v32)
                              + (float)(v31 * (float)(1.0 - (float)(v24 - v30))))));

  return v33;
}

void sub_1D5333BCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5333BE0(uint64_t a1, uint64_t *a2)
{
  double *v4;
  _WORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  int v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  float v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t i;
  uint64_t v33;
  void *exception;
  unsigned int v36;
  uint64_t v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[3];
  uint64_t v41;

  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(_QWORD *)(a1 + 4) = 1;
  *(_QWORD *)(a1 + 60) = 0;
  *(_WORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 76) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v4 = (double *)(a1 + 96);
  *(_QWORD *)(a1 + 112) = 0;
  v5 = (_WORD *)(a1 + 112);
  *(_DWORD *)(a1 + 120) = 0;
  v6 = (_DWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 42) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 144) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 128) = xmmword_1D544A9E0;
  *(_QWORD *)(a1 + 152) = 0;
  v7 = (_DWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0x200000000;
  *(_QWORD *)(a1 + 184) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 192) = 3;
  *(_DWORD *)(a1 + 200) = 0;
  sub_1D52847F8(*a2);
  *(_WORD *)a1 = sub_1D52846FC(*a2);
  *(_BYTE *)(a1 + 2) = sub_1D52846FC(*a2) != 0;
  v8 = sub_1D52848D4(*a2);
  *(_DWORD *)(a1 + 4) = v8;
  if (v8 != 1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  *(_DWORD *)(a1 + 8) = sub_1D52848D4(*a2);
  *(double *)(a1 + 16) = COERCE_FLOAT(sub_1D52847F8(*a2));
  v41 = (int)sub_1D52847F8(*a2);
  sub_1D52B1C58(v40, a2);
  v9 = sub_1D52846FC(*a2);
  *(_WORD *)(a1 + 24) = v9;
  if (v9 == 1)
  {
    LOWORD(v37[0]) = sub_1D52848D4(*a2);
    sub_1D5334558((_WORD *)(a1 + 26), (unsigned __int16 *)v37);
    *(_WORD *)(a1 + 28) = sub_1D52846FC(*a2);
    *(_WORD *)(a1 + 30) = sub_1D52846FC(*a2);
    *(_WORD *)(a1 + 32) = sub_1D52846FC(*a2);
    *(_WORD *)(a1 + 34) = sub_1D52846FC(*a2);
    *(_WORD *)(a1 + 36) = sub_1D52846FC(*a2);
    sub_1D52846FC(*a2);
  }
  sub_1D5285200(v40);
  v10 = *a2;
  sub_1D528594C(v40, &v41);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 40))(v10, v40, 1);
  v39 = (int)sub_1D52847F8(*a2);
  sub_1D52B1C58(v40, a2);
  v11 = sub_1D52846FC(*a2);
  *(_WORD *)(a1 + 38) = v11;
  if (v11 == 1)
  {
    v12 = (_DWORD *)(a1 + 40);
    LODWORD(v37[0]) = sub_1D52847F8(*a2);
    sub_1D52859B8((_DWORD *)(a1 + 40), (unsigned int *)v37);
    *(_WORD *)(a1 + 44) = sub_1D52846FC(*a2);
    *(_WORD *)(a1 + 46) = sub_1D52846FC(*a2);
    *(_WORD *)(a1 + 48) = sub_1D52846FC(*a2);
    *(_WORD *)(a1 + 50) = sub_1D52846FC(*a2);
    *(_WORD *)(a1 + 52) = sub_1D52848D4(*a2);
    *(_WORD *)(a1 + 54) = sub_1D52848D4(*a2);
    *(_WORD *)(a1 + 56) = sub_1D52848D4(*a2);
    *(_DWORD *)(a1 + 60) = sub_1D52847F8(*a2);
    *(_DWORD *)(a1 + 64) = sub_1D52848D4(*a2);
    *(_WORD *)(a1 + 68) = sub_1D52848D4(*a2);
    *(_DWORD *)(a1 + 72) = sub_1D52847F8(*a2);
    *(_WORD *)(a1 + 76) = sub_1D52848D4(*a2);
    *(_DWORD *)(a1 + 80) = sub_1D52847F8(*a2);
    if (*(_DWORD *)(a1 + 40) < 5u)
    {
      *(_QWORD *)(a1 + 84) = 0x400000000;
      v15 = 0.0;
    }
    else
    {
      *(_DWORD *)(a1 + 84) = sub_1D52847F8(*a2);
      v13 = sub_1D52846FC(*a2);
      v14 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(a1 + 88) = v13;
      v15 = 0.0;
      if (v14 == 6)
        v15 = COERCE_FLOAT(sub_1D52847F8(*a2));
    }
    *v4 = v15;
    v38 = 0;
    v38 = (int)sub_1D52847F8(*a2);
    sub_1D52B1C58(v37, a2);
    *(_WORD *)(a1 + 104) = sub_1D52846FC(*a2);
    sub_1D52847F8(*a2);
    v36 = sub_1D52847F8(*a2);
    sub_1D53345C4((_WORD *)(a1 + 106), &v36);
    v36 = sub_1D52847F8(*a2);
    sub_1D53345C4((_WORD *)(a1 + 108), &v36);
    v36 = sub_1D52847F8(*a2);
    sub_1D53345C4((_WORD *)(a1 + 110), &v36);
    v36 = sub_1D52847F8(*a2);
    sub_1D53345C4(v5, &v36);
    v36 = sub_1D52847F8(*a2);
    sub_1D53345C4((_WORD *)(a1 + 114), &v36);
    v36 = sub_1D52847F8(*a2);
    sub_1D53345C4((_WORD *)(a1 + 116), &v36);
    LOWORD(v36) = sub_1D52848D4(*a2);
    sub_1D5334558((_WORD *)(a1 + 118), (unsigned __int16 *)&v36);
    v16 = *a2;
    v36 = 36;
    (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v16 + 40))(v16, &v36, 1);
    LOWORD(v36) = sub_1D52848D4(*a2);
    sub_1D5334630(v6, (__int16 *)&v36);
    sub_1D52847F8(*a2);
    sub_1D52847F8(*a2);
    sub_1D52847F8(*a2);
    *(double *)(a1 + 128) = COERCE_FLOAT(sub_1D52847F8(*a2));
    *(double *)(a1 + 136) = COERCE_FLOAT(sub_1D52847F8(*a2));
    *(double *)(a1 + 144) = COERCE_FLOAT(sub_1D52847F8(*a2));
    sub_1D5285200(v37);
    v17 = *a2;
    sub_1D528594C(v37, &v38);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v17 + 40))(v17, v37, 1);
    if (*v12 < 7u
      || (*v4 = COERCE_FLOAT(sub_1D52847F8(*a2)), *v12 < 8u)
      || (*v7 = sub_1D52846FC(*a2),
          *(_WORD *)(a1 + 156) = sub_1D52848D4(*a2),
          LOWORD(v37[0]) = sub_1D52848D4(*a2),
          sub_1D5334558((_WORD *)(a1 + 158), (unsigned __int16 *)v37),
          *(_DWORD *)(a1 + 160) = sub_1D52847F8(*a2),
          *(_DWORD *)(a1 + 40) < 9u))
    {
      LODWORD(v37[0]) = 0;
      *(_WORD *)(a1 + 164) = *sub_1D53345C4((_WORD *)(a1 + 166), (unsigned int *)v37);
      LODWORD(v37[0]) = 0;
      *(_WORD *)(a1 + 168) = *sub_1D53345C4((_WORD *)(a1 + 170), (unsigned int *)v37);
      LODWORD(v37[0]) = 0;
      *(_WORD *)(a1 + 172) = *sub_1D53345C4((_WORD *)(a1 + 174), (unsigned int *)v37);
    }
    else
    {
      v37[0] = 0;
      v37[0] = sub_1D52846FC(*a2);
      sub_1D52846FC(*a2);
      v18 = *a2;
      sub_1D5282FE0(&v36, (unint64_t *)v37);
      (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v18 + 40))(v18, &v36, 1);
      *(_WORD *)(a1 + 164) = sub_1D528479C(*a2);
      *(_WORD *)(a1 + 166) = sub_1D528479C(*a2);
      *(_WORD *)(a1 + 168) = sub_1D528479C(*a2);
      *(_WORD *)(a1 + 170) = sub_1D528479C(*a2);
      *(_WORD *)(a1 + 172) = sub_1D528479C(*a2);
      *(_WORD *)(a1 + 174) = sub_1D528479C(*a2);
    }
    if (*v12 >= 0xAu)
    {
      *(_DWORD *)(a1 + 176) = sub_1D52847F8(*a2);
      *(_DWORD *)(a1 + 180) = sub_1D52848D4(*a2);
      if (*(_DWORD *)(a1 + 40) >= 0xBu)
      {
        v19 = sub_1D52848D4(*a2);
        if (v19 >= 1)
        {
          LOWORD(v20) = 0;
          do
          {
            sub_1D52847F8(*a2);
            sub_1D52847F8(*a2);
            v20 = (__int16)(v20 + 1);
          }
          while (v20 < v19);
        }
        if (*v12 <= 0xBu)
        {
          *(_QWORD *)(a1 + 184) = 0x3FF0000000000000;
        }
        else
        {
          v21 = COERCE_FLOAT(sub_1D52847F8(*a2));
          v22 = *(_DWORD *)(a1 + 40);
          *(double *)(a1 + 184) = v21;
          if (v22 >= 0xD)
          {
            *(_DWORD *)(a1 + 192) = sub_1D52846FC(*a2);
            v23 = sub_1D52848D4(*a2);
            if (v23 >= 1)
            {
              LOWORD(v24) = 0;
              do
              {
                sub_1D52847F8(*a2);
                sub_1D52847F8(*a2);
                v24 = (__int16)(v24 + 1);
              }
              while (v24 < v23);
            }
            goto LABEL_26;
          }
        }
        *(_DWORD *)(a1 + 200) = 25;
        *(_QWORD *)(a1 + 224) = 0;
        *(_QWORD *)(a1 + 232) = 0;
        *(_QWORD *)(a1 + 216) = 0;
        goto LABEL_43;
      }
    }
    *(_QWORD *)(a1 + 184) = 0x3FF0000000000000;
LABEL_26:
    v25 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 200) = 25;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    if (v25 >= 0xE)
    {
      v26 = sub_1D52846FC(*a2);
      v27 = v26 <= 3 ? v26 : 25;
      *(_DWORD *)(a1 + 200) = v27;
      if (v26 <= 3)
      {
        if (v26 - 2 >= 2)
        {
          if (v26 == 1)
          {
            for (i = 0; i != 32; i += 8)
              *(double *)(a1 + 208 + i) = sub_1D53346A0(a2);
          }
        }
        else
        {
          v28 = sub_1D52846FC(*a2);
          if (v28 >= 2)
            v29 = 2;
          else
            v29 = v28;
          *(_BYTE *)(a1 + 208) = v29;
          v30 = 27;
          do
          {
            *(double *)(a1 + 8 * v30) = sub_1D53346A0(a2);
            v31 = v30 - 27;
            ++v30;
          }
          while (v31 < *(unsigned __int8 *)(a1 + 208));
        }
      }
    }
  }
LABEL_43:
  sub_1D5285200(v40);
  v33 = *a2;
  sub_1D528594C(v40, &v39);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v33 + 40))(v33, v40, 1);
  return a1;
}

void sub_1D533442C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5285200((uint64_t *)va);
  _Unwind_Resume(a1);
}

_WORD *sub_1D5334558(_WORD *result, unsigned __int16 *a2)
{
  int v2;
  void *exception;

  v2 = *a2;
  *result = v2;
  if (v2 != (__int16)v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D53345B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_WORD *sub_1D53345C4(_WORD *result, unsigned int *a2)
{
  unsigned int v2;
  void *exception;

  v2 = *a2;
  *result = *a2;
  if (v2 >= 0x10000)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D533461C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1D5334630(_DWORD *result, __int16 *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *exception;

  v2 = *a2;
  v3 = *a2;
  *result = v2;
  if (v3 != v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D533468C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1D53346A0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = sub_1D52845E4(*a1);
  v3 = sub_1D52847F8(*a1);
  if (v2 == 1)
    v4 = sub_1D52847F8(*a1) | (unint64_t)(v3 << 32);
  else
    v4 = v3 | (sub_1D52847F8(*a1) << 32);
  return *(double *)&v4;
}

void sub_1D5334708(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  *a2 = 0;
  a2[1] = 0;
  sub_1D533551C(a1, &v6);
  sub_1D5292548((uint64_t)a2, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1D5334784(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5334774);
}

void sub_1D5334790(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_1D53347A4(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 106) | ((unint64_t)*(unsigned __int16 *)(a1 + 108) << 32);
}

uint64_t sub_1D53347B4(_WORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (unsigned __int16)a1[55];
  v3 = (unsigned __int16)a1[57];
  sub_1D5334814(a1);
  sub_1D5334864(a1);
  return v2 | (v3 << 32);
}

uint64_t sub_1D5334804(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 110);
}

uint64_t sub_1D533480C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 114);
}

uint64_t sub_1D5334814(_WORD *a1)
{
  __int16 v3;
  __int16 v4;

  v3 = a1[53];
  v4 = *sub_1D5335610(&v3, a1 + 55);
  return (unsigned __int16)*sub_1D5335610(&v4, a1 + 56);
}

uint64_t sub_1D5334864(_WORD *a1)
{
  __int16 v3;
  __int16 v4;

  v3 = a1[54];
  v4 = *sub_1D5335610(&v3, a1 + 57);
  return (unsigned __int16)*sub_1D5335610(&v4, a1 + 58);
}

uint64_t sub_1D53348B4(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 112);
}

uint64_t sub_1D53348BC(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 116);
}

uint64_t sub_1D53348C4(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 158);
}

uint64_t sub_1D53348CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t sub_1D53348D4(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v4;
  unsigned __int16 v5;

  v1 = (int)(*(double *)(a1 + 96) + 3600.0) % 360;
  switch(v1)
  {
    case 90:
      v2 = 6;
      break;
    case 180:
      v2 = 3;
      break;
    case 270:
      v2 = 8;
      break;
    default:
      v2 = 1;
      break;
  }
  v4 = v2;
  sub_1D53345C4(&v5, &v4);
  return v5;
}

double sub_1D533496C(uint64_t a1)
{
  double result;

  result = 0.0;
  if (*(_WORD *)(a1 + 164))
  {
    if (*(_WORD *)(a1 + 166))
      return (double)*(unsigned __int16 *)(a1 + 164) / (double)*(unsigned __int16 *)(a1 + 166);
  }
  return result;
}

double sub_1D5334990(uint64_t a1)
{
  double result;

  result = 0.0;
  if (*(_WORD *)(a1 + 168))
  {
    if (*(_WORD *)(a1 + 170))
      return (double)*(unsigned __int16 *)(a1 + 168) / (double)*(unsigned __int16 *)(a1 + 170);
  }
  return result;
}

double sub_1D53349B4(uint64_t a1)
{
  double result;

  result = 0.0;
  if (*(_WORD *)(a1 + 172))
  {
    if (*(_WORD *)(a1 + 174))
      return (double)*(unsigned __int16 *)(a1 + 172) / (double)*(unsigned __int16 *)(a1 + 174);
  }
  return result;
}

uint64_t sub_1D53349D8(uint64_t a1)
{
  __int16 v2;

  v2 = *(_WORD *)(a1 + 158);
  return sub_1D5334A40(&v2);
}

uint64_t sub_1D5334A40(__int16 *a1)
{
  uint64_t result;
  void *exception;

  result = *a1;
  if ((result & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D5334A90(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1D5334AA4@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *sub_1D528EB68(a2, 3uLL);
  *(_QWORD *)v3 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(a1 + 136);
  result = *(double *)(a1 + 144);
  *(double *)(v3 + 16) = result;
  return result;
}

_QWORD *sub_1D5334AE8@<X0>(unsigned __int16 *a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char __str[20];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a1[13];
  v5 = sub_1D5334BD4(a1 + 14);
  v6 = sub_1D5334BD4(a1 + 15);
  v7 = sub_1D5334BD4(a1 + 16);
  v8 = sub_1D5334BD4(a1 + 17);
  v9 = sub_1D5334BD4(a1 + 18);
  snprintf(__str, 0x14uLL, "%04d:%02d:%02d %02d:%02d:%02d", v4, v5, v6, v7, v8, v9);
  return sub_1D52850A0(a2, __str);
}

uint64_t sub_1D5334BD4(_WORD *a1)
{
  void *exception;

  if ((unsigned __int16)*a1 >= 0x100u)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return *a1;
}

void sub_1D5334C2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int16 *sub_1D5334C40(uint64_t a1, _QWORD *a2)
{
  unsigned __int16 *result;
  unsigned __int16 *v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned int v14;
  double v15;
  unsigned int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  double v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  unsigned int v33;
  double v34;
  unsigned int v35;
  double v36;
  double v37;
  double v38;
  double v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unint64_t v44;
  double v45;
  unsigned int v46;
  uint64_t v47;
  unsigned __int16 *v48;
  unsigned __int16 *v49;
  unsigned int v50;
  double v51;
  unsigned int v52;
  double v53;
  double v54;
  double v55;
  double v56;
  int v57;
  int v58;
  int v59;
  unint64_t v60;
  double v61;
  double v62;
  double v63;
  unsigned int v64;
  uint64_t v65;
  unsigned __int16 *v66;
  double v67;
  unsigned __int16 *v68;
  unsigned int v69;
  double v70;
  unsigned int v71;
  double v72;
  double v73;
  double v74;
  double v75;
  int v76;
  int v77;
  int v78;
  unint64_t v79;
  double v80;
  double v81;
  unsigned int v82;
  uint64_t v83;
  unsigned __int16 *v84;
  double v85;
  unsigned __int16 *v86;
  unsigned int v87;
  double v88;
  unsigned int v89;
  double v90;
  double v91;
  double v92;
  double v93;
  int v94;
  int v95;
  int v96;
  unint64_t v97;
  double v98;
  double v99;
  double v100;
  unsigned int v101;
  uint64_t v102;
  unsigned __int16 *v103;
  unsigned __int16 *v104;
  unsigned int v105;
  double v106;
  unsigned int v107;
  double v108;
  double v109;
  double v110;
  double v111;
  int v112;
  int v113;
  int v114;
  unint64_t v115;
  double v116;
  double v117;
  unsigned int v118;
  uint64_t v119;
  unsigned __int16 *v120;
  unsigned __int16 *v121;
  unsigned int v122;
  double v123;
  unsigned int v124;
  double v125;
  double v126;
  double v127;
  double v128;
  int v129;
  int v130;
  int v131;
  __int16 v132;

  if (getenv("RAWCAMERA_OVERRIDE_STITCHING"))
    return (unsigned __int16 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  result = (unsigned __int16 *)*a2;
  if (*(_DWORD *)(*a2 + 48) == *(unsigned __int16 *)(a1 + 108)
    && *((_DWORD *)result + 13) == *(unsigned __int16 *)(a1 + 106))
  {
    result = (unsigned __int16 *)sub_1D530D4CC((uint64_t)result);
    v5 = result;
    v6 = *(_DWORD *)(*a2 + 56);
    v7 = *(_DWORD *)(a1 + 200);
    if (v7 == 3)
    {
      v25 = *(unsigned __int8 *)(a1 + 208);
      if (v25 == 2)
      {
        if (*(_WORD *)(a1 + 108))
        {
          v59 = 0;
          v60 = 0;
          v61 = *(double *)(a1 + 216);
          v62 = *(double *)(a1 + 224);
          v63 = *(double *)(a1 + 232);
          LOWORD(v64) = *(_WORD *)(a1 + 106);
          do
          {
            v131 = 2;
            v132 = v64;
            result = sub_1D5335684(&v132, &v131);
            v64 = *(unsigned __int16 *)(a1 + 106);
            if (v64 >= 2)
            {
              v65 = 0;
              v66 = &v5[v59];
              v67 = (v61
                   + v62 * (double)v60
                   + v63 * ((double)v60 * (double)v60))
                  * 0.5;
              v68 = &v5[v59 + *result];
              do
              {
                v69 = v66[v65];
                v70 = (double)v69;
                v71 = v68[v65];
                v72 = (double)v71;
                v73 = v70 * v70 * 0.000000238418579;
                if (v69 > 0x800)
                  v73 = 1.0;
                v74 = ((double)v69 - v67) * (1.0 - v73) + v73 * v70;
                v75 = v72 * v72 * 0.000000238418579;
                if (v71 > 0x800)
                  v75 = 1.0;
                v76 = (int)(v74 + 0.5);
                if (v76 >= 0xFFFF)
                  v76 = 0xFFFF;
                v66[v65] = v76 & ~(unsigned __int16)(v76 >> 31);
                v77 = (int)((v67 + v72) * (1.0 - v75) + v75 * v72 + 0.5);
                if (v77 >= 0xFFFF)
                  v77 = 0xFFFF;
                v68[v65] = v77 & ~(unsigned __int16)(v77 >> 31);
                v64 = *(unsigned __int16 *)(a1 + 106);
                ++v65;
              }
              while (v65 < v64 >> 1);
            }
            ++v60;
            v59 += v6;
          }
          while (v60 < *(unsigned __int16 *)(a1 + 108));
        }
      }
      else if (v25 == 1)
      {
        if (*(_WORD *)(a1 + 108))
        {
          v78 = 0;
          v79 = 0;
          v80 = *(double *)(a1 + 216);
          v81 = *(double *)(a1 + 224);
          LOWORD(v82) = *(_WORD *)(a1 + 106);
          do
          {
            v131 = 2;
            v132 = v82;
            result = sub_1D5335684(&v132, &v131);
            v82 = *(unsigned __int16 *)(a1 + 106);
            if (v82 >= 2)
            {
              v83 = 0;
              v84 = &v5[v78];
              v85 = (v80 + v81 * (double)v79) * 0.5;
              v86 = &v5[v78 + *result];
              do
              {
                v87 = v84[v83];
                v88 = (double)v87;
                v89 = v86[v83];
                v90 = (double)v89;
                v91 = v88 * v88 * 0.000000238418579;
                if (v87 > 0x800)
                  v91 = 1.0;
                v92 = ((double)v87 - v85) * (1.0 - v91) + v91 * v88;
                v93 = v90 * v90 * 0.000000238418579;
                if (v89 > 0x800)
                  v93 = 1.0;
                v94 = (int)(v92 + 0.5);
                if (v94 >= 0xFFFF)
                  v94 = 0xFFFF;
                v84[v83] = v94 & ~(unsigned __int16)(v94 >> 31);
                v95 = (int)((v85 + v90) * (1.0 - v93) + v93 * v90 + 0.5);
                if (v95 >= 0xFFFF)
                  v95 = 0xFFFF;
                v86[v83] = v95 & ~(unsigned __int16)(v95 >> 31);
                v82 = *(unsigned __int16 *)(a1 + 106);
                ++v83;
              }
              while (v83 < v82 >> 1);
            }
            ++v79;
            v78 += v6;
          }
          while (v79 < *(unsigned __int16 *)(a1 + 108));
        }
      }
      else if (!*(_BYTE *)(a1 + 208) && *(_WORD *)(a1 + 108))
      {
        v26 = 0;
        v27 = 0;
        v28 = *(double *)(a1 + 216) * 0.5;
        LOWORD(v29) = *(_WORD *)(a1 + 106);
        do
        {
          v131 = 2;
          v132 = v29;
          result = sub_1D5335684(&v132, &v131);
          v29 = *(unsigned __int16 *)(a1 + 106);
          if (v29 >= 2)
          {
            v30 = 0;
            v31 = &v5[v26];
            v32 = &v5[v26 + *result];
            do
            {
              v33 = v31[v30];
              v34 = (double)v33;
              v35 = v32[v30];
              v36 = (double)v35;
              v37 = v34 * v34 * 0.000000238418579;
              if (v33 > 0x800)
                v37 = 1.0;
              v38 = ((double)v33 - v28) * (1.0 - v37) + v37 * v34;
              v39 = v36 * v36 * 0.000000238418579;
              if (v35 > 0x800)
                v39 = 1.0;
              v40 = (int)(v38 + 0.5);
              if (v40 >= 0xFFFF)
                v40 = 0xFFFF;
              v31[v30] = v40 & ~(unsigned __int16)(v40 >> 31);
              v41 = (int)((v28 + v36) * (1.0 - v39) + v39 * v36 + 0.5);
              if (v41 >= 0xFFFF)
                v41 = 0xFFFF;
              v32[v30] = v41 & ~(unsigned __int16)(v41 >> 31);
              v29 = *(unsigned __int16 *)(a1 + 106);
              ++v30;
            }
            while (v30 < v29 >> 1);
          }
          ++v27;
          v26 += v6;
        }
        while (v27 < *(unsigned __int16 *)(a1 + 108));
      }
    }
    else if (v7 == 2)
    {
      v42 = *(unsigned __int8 *)(a1 + 208);
      if (v42 == 2)
      {
        if (*(_WORD *)(a1 + 108))
        {
          v96 = 0;
          v97 = 0;
          v98 = *(double *)(a1 + 216);
          v99 = *(double *)(a1 + 224);
          v100 = *(double *)(a1 + 232);
          LOWORD(v101) = *(_WORD *)(a1 + 106);
          do
          {
            v131 = 2;
            v132 = v101;
            result = sub_1D5335684(&v132, &v131);
            v101 = *(unsigned __int16 *)(a1 + 106);
            if (v101 >= 2)
            {
              v102 = 0;
              v103 = &v5[v96];
              v104 = &v5[v96 + *result];
              do
              {
                v105 = v103[v102];
                v106 = (double)v105;
                v107 = v104[v102];
                v108 = (double)v107;
                v109 = v106 * v106 * 0.000000238418579;
                if (v105 > 0x800)
                  v109 = 1.0;
                v110 = (v106 - (v98 + v99 * (double)v105 + v100 * (v106 * v106)) * 0.5) * (1.0 - v109) + v109 * v106;
                v111 = v108 * v108 * 0.000000238418579;
                if (v107 > 0x800)
                  v111 = 1.0;
                v112 = (int)(v110 + 0.5);
                if (v112 >= 0xFFFF)
                  v112 = 0xFFFF;
                v103[v102] = v112 & ~(unsigned __int16)(v112 >> 31);
                v113 = (int)((v108 + (v98 + v99 * (double)v107 + v100 * (v108 * v108)) * 0.5) * (1.0 - v111)
                           + v111 * v108
                           + 0.5);
                if (v113 >= 0xFFFF)
                  v113 = 0xFFFF;
                v104[v102] = v113 & ~(unsigned __int16)(v113 >> 31);
                v101 = *(unsigned __int16 *)(a1 + 106);
                ++v102;
              }
              while (v102 < v101 >> 1);
            }
            ++v97;
            v96 += v6;
          }
          while (v97 < *(unsigned __int16 *)(a1 + 108));
        }
      }
      else if (v42 == 1)
      {
        if (*(_WORD *)(a1 + 108))
        {
          v114 = 0;
          v115 = 0;
          v116 = *(double *)(a1 + 216);
          v117 = *(double *)(a1 + 224);
          LOWORD(v118) = *(_WORD *)(a1 + 106);
          do
          {
            v131 = 2;
            v132 = v118;
            result = sub_1D5335684(&v132, &v131);
            v118 = *(unsigned __int16 *)(a1 + 106);
            if (v118 >= 2)
            {
              v119 = 0;
              v120 = &v5[v114];
              v121 = &v5[v114 + *result];
              do
              {
                v122 = v120[v119];
                v123 = (double)v122;
                v124 = v121[v119];
                v125 = (double)v124;
                v126 = v123 * v123 * 0.000000238418579;
                if (v122 > 0x800)
                  v126 = 1.0;
                v127 = ((double)v122 - (v116 + v117 * (double)v122) * 0.5) * (1.0 - v126) + v126 * v123;
                v128 = v125 * v125 * 0.000000238418579;
                if (v124 > 0x800)
                  v128 = 1.0;
                v129 = (int)(v127 + 0.5);
                if (v129 >= 0xFFFF)
                  v129 = 0xFFFF;
                v120[v119] = v129 & ~(unsigned __int16)(v129 >> 31);
                v130 = (int)((v125 + (v116 + v117 * (double)v124) * 0.5) * (1.0 - v128) + v128 * v125 + 0.5);
                if (v130 >= 0xFFFF)
                  v130 = 0xFFFF;
                v121[v119] = v130 & ~(unsigned __int16)(v130 >> 31);
                v118 = *(unsigned __int16 *)(a1 + 106);
                ++v119;
              }
              while (v119 < v118 >> 1);
            }
            ++v115;
            v114 += v6;
          }
          while (v115 < *(unsigned __int16 *)(a1 + 108));
        }
      }
      else if (!*(_BYTE *)(a1 + 208) && *(_WORD *)(a1 + 108))
      {
        v43 = 0;
        v44 = 0;
        v45 = *(double *)(a1 + 216) * 0.5;
        LOWORD(v46) = *(_WORD *)(a1 + 106);
        do
        {
          v131 = 2;
          v132 = v46;
          result = sub_1D5335684(&v132, &v131);
          v46 = *(unsigned __int16 *)(a1 + 106);
          if (v46 >= 2)
          {
            v47 = 0;
            v48 = &v5[v43];
            v49 = &v48[*result];
            do
            {
              v50 = v48[v47];
              v51 = (double)v50;
              v52 = v49[v47];
              v53 = (double)v52;
              v54 = v51 * v51 * 0.000000238418579;
              if (v50 > 0x800)
                v54 = 1.0;
              v55 = ((double)v50 - v45) * (1.0 - v54) + v54 * v51;
              v56 = v53 * v53 * 0.000000238418579;
              if (v52 > 0x800)
                v56 = 1.0;
              v57 = (int)(v55 + 0.5);
              if (v57 >= 0xFFFF)
                v57 = 0xFFFF;
              v48[v47] = v57 & ~(unsigned __int16)(v57 >> 31);
              v58 = (int)((v45 + v53) * (1.0 - v56) + v56 * v53 + 0.5);
              if (v58 >= 0xFFFF)
                v58 = 0xFFFF;
              v49[v47] = v58 & ~(unsigned __int16)(v58 >> 31);
              v46 = *(unsigned __int16 *)(a1 + 106);
              ++v47;
            }
            while (v47 < v46 >> 1);
          }
          ++v44;
          v43 += v6;
        }
        while (v44 < *(unsigned __int16 *)(a1 + 108));
      }
    }
    else if (v7 == 1 && *(_WORD *)(a1 + 108))
    {
      v8 = 0;
      v9 = 0;
      LOWORD(v10) = *(_WORD *)(a1 + 106);
      do
      {
        v131 = 2;
        v132 = v10;
        result = sub_1D5335684(&v132, &v131);
        v10 = *(unsigned __int16 *)(a1 + 106);
        if (v10 >= 2)
        {
          v11 = 0;
          v12 = &v5[v8];
          v13 = &v12[*result];
          do
          {
            v14 = v12[v11];
            v15 = (double)v14;
            v16 = v13[v11];
            v17 = (double)v16;
            v18 = *(double *)(a1 + 208 + 8 * ((v11 & 1) + (v9 & 1)));
            v19 = v15 * v15 * 0.0000152587891;
            if (v14 > 0x100)
              v19 = 1.0;
            v20 = ((double)v14 + v18 * 0.5) * (1.0 - v19) + v19 * v15;
            v21 = v17 - v18 * 0.5;
            v22 = v17 * v17 * 0.0000152587891;
            if (v16 > 0x100)
              v22 = 1.0;
            v23 = (int)(v20 + 0.5);
            if (v23 >= 0xFFFF)
              v23 = 0xFFFF;
            v12[v11] = v23 & ~(unsigned __int16)(v23 >> 31);
            v24 = (int)(v21 * (1.0 - v22) + v22 * v17 + 0.5);
            if (v24 >= 0xFFFF)
              v24 = 0xFFFF;
            v13[v11] = v24 & ~(unsigned __int16)(v24 >> 31);
            v10 = *(unsigned __int16 *)(a1 + 106);
            ++v11;
          }
          while (v11 < v10 >> 1);
        }
        ++v9;
        v8 += v6;
      }
      while (v9 < *(unsigned __int16 *)(a1 + 108));
    }
  }
  return result;
}

_QWORD *sub_1D533551C@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x108uLL);
  result = sub_1D5335574(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1D5335560(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5335574(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E997EAD8;
  a1[1] = 0;
  sub_1D5333BE0((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1D53355AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53355C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E997EAD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53355D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E997EAD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

_WORD *sub_1D5335610(_WORD *result, unsigned __int16 *a2)
{
  int v2;
  int v3;
  void *exception;

  v2 = *a2;
  v3 = (unsigned __int16)*result - v2;
  *result -= v2;
  if ((v3 & 0xFFFF0000) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D5335670(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_WORD *sub_1D5335684(_WORD *result, int *a2)
{
  void *exception;

  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  *result = (unsigned __int16)*result / *a2;
  return result;
}

void sub_1D53356E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53356F4(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **v11;
  uint64_t i;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t j;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  uint64_t k;
  uint64_t v61;
  char v62;
  char v63;
  int v64;
  unsigned int v65;
  float v66;
  void *v67;
  uint64_t v68;
  char v69;
  int v70;
  int v71;
  char *v72;
  void *v74;
  void *exception;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  __int128 v87;
  int v88;
  int v89;
  unsigned int v90;
  int v91;
  __int128 v92;
  uint64_t v93;
  void *__p[2];
  uint64_t v95;
  uint64_t v96;
  int v97;

  *(_QWORD *)a1 = &unk_1E997EB28;
  *(_QWORD *)(a1 + 96) = 0;
  v6 = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v7 = a1 + 128;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v82 = a1 + 184;
  v8 = a1 + 256;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v96 = (*(int (**)(uint64_t))(*(_QWORD *)*a2 + 48))(*a2);
  if (*a3 <= 0x1FFu)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  __p[0] = 0;
  __p[1] = 0;
  v95 = 0;
  v9 = *a2;
  LODWORD(v87) = 4;
  sub_1D5285A24(&v92, (unsigned int *)&v87);
  if (!sub_1D52849DC(v9, (unsigned int *)&v92, (uint64_t)__p))
    goto LABEL_77;
  v10 = (void *)HIBYTE(v95);
  if (v95 < 0)
    v10 = __p[1];
  if (v10 != (void *)4)
    goto LABEL_77;
  v11 = __p;
  if (v95 < 0)
    v11 = (void **)__p[0];
  if (*(_DWORD *)v11 != 1313423687)
  {
LABEL_77:
    v74 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v74, "RawCameraException");
    __cxa_throw(v74, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (SHIBYTE(v95) < 0)
    operator delete(__p[0]);
  sub_1D52847F8(*a2);
  *(_DWORD *)(a1 + 8) = sub_1D52847F8(*a2);
  *(_DWORD *)(a1 + 12) = sub_1D52847F8(*a2);
  *(_DWORD *)(a1 + 16) = sub_1D52847F8(*a2);
  *(_DWORD *)(a1 + 20) = sub_1D52847F8(*a2);
  if (sub_1D52847F8(*a2) <= 0x1FF)
  {
    v76 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v76, "RawCameraException");
    __cxa_throw(v76, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  *(_DWORD *)(a1 + 28) = sub_1D52847F8(*a2);
  *(_WORD *)(a1 + 32) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 34) = sub_1D528479C(*a2);
  *(_BYTE *)(a1 + 36) = sub_1D52846FC(*a2);
  *(_BYTE *)(a1 + 37) = sub_1D52846FC(*a2);
  *(_BYTE *)(a1 + 38) = sub_1D52846FC(*a2);
  *(_BYTE *)(a1 + 39) = sub_1D52846FC(*a2);
  *(_BYTE *)(a1 + 40) = sub_1D52846FC(*a2);
  *(_BYTE *)(a1 + 41) = sub_1D52846FC(*a2);
  *(_WORD *)(a1 + 42) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 44) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 46) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 48) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 50) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 52) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 54) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 56) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 58) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 60) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 62) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 64) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 66) = sub_1D528479C(*a2);
  *(_DWORD *)(a1 + 68) = sub_1D52847F8(*a2);
  *(_DWORD *)(a1 + 72) = sub_1D52847F8(*a2);
  *(_WORD *)(a1 + 76) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 78) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 80) = sub_1D528479C(*a2);
  for (i = 82; i != 88; i += 2)
    *(_WORD *)(a1 + i) = sub_1D528479C(*a2);
  *(_DWORD *)(a1 + 88) = sub_1D52847F8(*a2);
  *(_DWORD *)(a1 + 92) = sub_1D52847F8(*a2);
  v13 = sub_1D52847F8(*a2);
  if (v13)
  {
    sub_1D52B1C58((uint64_t *)__p, a2);
    v14 = *a2;
    LODWORD(v92) = v13;
    v97 = *sub_1D5337964(&v92, &v96);
    sub_1D5285B08((int *)&v87, &v97);
    (*(void (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)v14 + 40))(v14, &v87, 0);
    v15 = *(unsigned __int16 *)(a1 + 32);
    if (v15 < 0x1E)
    {
      if (v15 <= 0x13)
        v18 = 15;
      else
        v18 = 10;
    }
    else
    {
      sub_1D52847F8(*a2);
      v16 = v8;
      sub_1D52847F8(*a2);
      v17 = sub_1D52847F8(*a2);
      v18 = sub_1D52847F8(*a2);
      v19 = *a2;
      *(_QWORD *)&v92 = v17 - 16;
      sub_1D5282FE0(&v87, (unint64_t *)&v92);
      (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v19 + 40))(v19, &v87, 1);
      v8 = v16;
    }
    v20 = v18 * *(unsigned __int16 *)(a1 + 46);
    if (v20 >= 0x493E0
      || (*(_QWORD *)&v92 = 2 * v20, LODWORD(v87) = v13, *sub_1D52EFDFC(&v87, &v92) >= *a3))
    {
      v78 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v78, "RawCameraException");
      __cxa_throw(v78, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    sub_1D52B35F8(&v92, v20);
    v21 = *(void **)v6;
    if (*(_QWORD *)v6)
    {
      *(_QWORD *)(a1 + 104) = v21;
      operator delete(v21);
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
    }
    *(_OWORD *)(a1 + 96) = v92;
    *(_QWORD *)(a1 + 112) = v93;
    if ((_DWORD)v20)
    {
      v22 = 0;
      v23 = 4 * v20;
      do
      {
        *(float *)(*(_QWORD *)(a1 + 96) + v22) = (float)(int)sub_1D52848D4(*a2) / (float)(1 << *(_BYTE *)(a1 + 41));
        v22 += 4;
      }
      while (v23 != v22);
    }
    sub_1D5285200((uint64_t *)__p);
  }
  *(_DWORD *)(a1 + 120) = sub_1D52847F8(*a2);
  *(_DWORD *)(a1 + 124) = sub_1D52847F8(*a2);
  v24 = sub_1D52847F8(*a2);
  v97 = v24;
  if (v24)
  {
    __p[0] = (void *)2;
    LODWORD(v92) = v24;
    if (*sub_1D52EFDFC(&v92, __p) >= *a3)
    {
      v79 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v79, "RawCameraException");
      __cxa_throw(v79, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    sub_1D52B1C58((uint64_t *)__p, a2);
    v25 = *a2;
    LODWORD(v92) = v97;
    v91 = *sub_1D5337964(&v92, &v96);
    sub_1D5285B08((int *)&v87, &v91);
    (*(void (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)v25 + 40))(v25, &v87, 0);
    v26 = sub_1D528479C(*a2);
    v91 = 4;
    LODWORD(v92) = v26;
    v27 = *sub_1D52DCE44((int *)&v92, (unsigned int *)&v91);
    *(_QWORD *)&v92 = 2;
    LODWORD(v87) = v27;
    v28 = *sub_1D5285BEC(&v87, &v92);
    *(_QWORD *)&v92 = 2;
    LODWORD(v87) = v28;
    LODWORD(v87) = *sub_1D52EFDFC(&v87, &v92);
    if (*sub_1D52B0860(&v87, &v97) >= *a3)
    {
      v80 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v80, "RawCameraException");
      __cxa_throw(v80, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v29 = v26;
    sub_1D5337838(&v92, v26);
    v30 = *(void **)v7;
    if (*(_QWORD *)v7)
    {
      *(_QWORD *)(a1 + 136) = v30;
      operator delete(v30);
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    *(_OWORD *)(a1 + 128) = v92;
    *(_QWORD *)(a1 + 144) = v93;
    if (v26)
    {
      v31 = 0;
      v32 = 12 * v29;
      do
      {
        *(_WORD *)(*(_QWORD *)v7 + v31) = sub_1D528479C(*a2);
        *(_DWORD *)(*(_QWORD *)v7 + v31 + 4) = sub_1D528479C(*a2);
        *(_WORD *)(*(_QWORD *)v7 + v31 + 8) = sub_1D528479C(*a2);
        *(_WORD *)(*(_QWORD *)v7 + v31 + 10) = sub_1D528479C(*a2);
        v31 += 12;
      }
      while (v32 != v31);
    }
    sub_1D5285200((uint64_t *)__p);
  }
  *(_DWORD *)(a1 + 152) = sub_1D52847F8(*a2);
  for (j = 156; j != 172; j += 2)
    *(_WORD *)(a1 + j) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 172) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 174) = sub_1D528479C(*a2);
  *(_DWORD *)(a1 + 176) = sub_1D52847F8(*a2);
  *(_DWORD *)(a1 + 180) = sub_1D52847F8(*a2);
  v34 = sub_1D52847F8(*a2);
  LODWORD(v87) = 22;
  LODWORD(__p[0]) = v34;
  v35 = *sub_1D5285B70(__p, (int *)&v87);
  __p[0] = (void *)10;
  LODWORD(v92) = v35;
  if (*sub_1D52EFDFC(&v92, __p) >= *a3)
  {
    v77 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v77, "RawCameraException");
    __cxa_throw(v77, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D52B1C58((uint64_t *)__p, a2);
  v36 = *a2;
  LODWORD(v92) = v34;
  v97 = *sub_1D5337964(&v92, &v96);
  sub_1D5285B08((int *)&v87, &v97);
  (*(void (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)v36 + 40))(v36, &v87, 0);
  v83 = v8;
  v37 = sub_1D528479C(*a2);
  v38 = sub_1D528479C(*a2);
  v39 = sub_1D528479C(*a2);
  v40 = v39;
  *(_QWORD *)(a1 + 200) = v38 | (unint64_t)(v39 << 32);
  v41 = sub_1D528479C(*a2);
  v42 = sub_1D528479C(*a2);
  v91 = v42;
  if (v37 && v41 && v42 && v38 && v40 && v37 == 1)
  {
    LODWORD(v92) = v41;
    v43 = *sub_1D530AB18((int *)&v92, &v91);
    v97 = 4;
    LODWORD(v92) = v43;
    LODWORD(v87) = *sub_1D530AB18((int *)&v92, &v97);
    sub_1D52859B8(&v90, (unsigned int *)&v87);
    if (v90 >= 0xBEBC201)
      goto LABEL_84;
    v89 = 22;
    LODWORD(v92) = v34;
    v44 = *sub_1D5285B70(&v92, &v89);
    *(_QWORD *)&v92 = 10;
    LODWORD(v87) = v44;
    v45 = *sub_1D52EFDFC(&v87, &v92);
    *(_QWORD *)&v87 = 2;
    v97 = v90;
    v88 = *sub_1D5285BEC(&v97, &v87);
    v97 = v45;
    if (*sub_1D52B0860(&v97, &v88) >= *a3)
    {
LABEL_84:
      v81 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v81, "RawCameraException");
      __cxa_throw(v81, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v46 = *a2;
    LODWORD(v92) = v34;
    v47 = *sub_1D5337964(&v92, &v96);
    v88 = 22;
    LODWORD(v92) = v47;
    v48 = *sub_1D5285B70(&v92, &v88);
    *(_QWORD *)&v92 = 10;
    LODWORD(v87) = v48;
    v89 = *sub_1D52EFDFC(&v87, &v92);
    sub_1D5285B08(&v97, &v89);
    (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v46 + 40))(v46, &v97, 0);
    *(_QWORD *)&v87 = 2;
    v97 = v90;
    v49 = sub_1D5285BEC(&v97, &v87);
    sub_1D530AD68(*v49, &v92);
    v50 = *a2;
    v51 = sub_1D52E658C(v92);
    *(_QWORD *)&v87 = 2;
    v97 = v90;
    v52 = sub_1D5285BEC(&v97, &v87);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v50 + 32))(v50, v51, *v52);
    if (sub_1D52845E4(*a2) == 1)
    {
      sub_1D530B154(v92);
    }
    else if (sub_1D52845E4(*a2) == 1)
    {
      sub_1D530B110(v92);
    }
    v89 = 0;
    v86 = 4;
    v97 = v41;
    v88 = *sub_1D530AB18(&v97, &v86);
    v84 = 4;
    v97 = v41;
    v85 = *sub_1D530AB18(&v97, &v84);
    sub_1D53379DC((uint64_t *)&v92, (unsigned int *)&v89, (unsigned int *)&v91, (unsigned int *)&v88, (unsigned int *)&v85, &v87);
    sub_1D5292548(v82, &v87);
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
    if (*((_QWORD *)&v87 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
    if (*((_QWORD *)&v92 + 1))
    {
      v57 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
  }
  sub_1D5285200((uint64_t *)__p);
  v59 = 3;
  do
  {
    sub_1D52847F8(*a2);
    --v59;
  }
  while (v59);
  *(_WORD *)(a1 + 212) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 214) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 216) = sub_1D528479C(*a2);
  for (k = 218; k != 228; k += 2)
    *(_WORD *)(a1 + k) = sub_1D528479C(*a2);
  v61 = 0;
  v62 = 1;
  do
  {
    v63 = v62;
    v64 = sub_1D52847F8(*a2);
    v62 = 0;
    *(_DWORD *)(a1 + 4 * v61 + 228) = v64;
    v61 = 1;
  }
  while ((v63 & 1) != 0);
  *(_WORD *)(a1 + 236) = sub_1D528479C(*a2);
  *(_WORD *)(a1 + 238) = sub_1D528479C(*a2);
  v65 = sub_1D528479C(*a2);
  sub_1D528479C(*a2);
  v66 = (float)v65 * 0.000061035;
  if (!v65)
    v66 = 1.0;
  *(float *)(a1 + 240) = v66;
  *(_DWORD *)(a1 + 244) = sub_1D52847F8(*a2);
  *(_DWORD *)(a1 + 248) = sub_1D52847F8(*a2);
  sub_1D52B35F8(__p, 4uLL);
  v67 = *(void **)v83;
  if (*(_QWORD *)v83)
  {
    *(_QWORD *)(a1 + 264) = v67;
    operator delete(v67);
    *(_QWORD *)v83 = 0;
    *(_QWORD *)(v83 + 8) = 0;
    *(_QWORD *)(v83 + 16) = 0;
  }
  v68 = 0;
  v69 = 0;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 272) = v95;
  do
  {
    v70 = sub_1D528479C(*a2);
    v71 = (__int16)v70;
    v69 |= v70 != 0;
    v72 = *(char **)(a1 + 256);
    *(float *)&v72[v68] = (float)v71 / (float)(0x10000 << *(_BYTE *)(a1 + 41));
    v68 += 4;
  }
  while (v68 != 16);
  if ((v69 & 1) == 0)
  {
    *(_QWORD *)(a1 + 264) = v72;
    operator delete(v72);
    *(_QWORD *)v83 = 0;
    *(_QWORD *)(v83 + 8) = 0;
    *(_QWORD *)(v83 + 16) = 0;
  }
  *(_DWORD *)(a1 + 280) = sub_1D52847F8(*a2);
  *(_DWORD *)(a1 + 284) = sub_1D52847F8(*a2);
  return a1;
}

void sub_1D53364E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _QWORD *v26;
  void **v27;
  void **v28;
  void *v30;
  void *v31;
  void *v32;

  sub_1D5282EB4((uint64_t)&a17);
  sub_1D5285200((uint64_t *)&__p);
  v30 = *a10;
  if (*a10)
  {
    v26[33] = v30;
    operator delete(v30);
  }
  sub_1D5282EB4(a9);
  v31 = *v27;
  if (*v27)
  {
    v26[17] = v31;
    operator delete(v31);
  }
  v32 = *v28;
  if (*v28)
  {
    v26[13] = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

void sub_1D53366D8(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  *a3 = 0;
  a3[1] = 0;
  sub_1D5337BB8(a1, a2, &v7);
  sub_1D5292548((uint64_t)a3, &v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1D5336758(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5336748);
}

void sub_1D5336764(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1);
  _Unwind_Resume(a1);
}

float *sub_1D5336778(uint64_t a1, float **a2)
{
  float *result;
  int v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  size_t v8;
  void *v9;
  size_t v10;
  void *v11;
  float *v12;
  uint64_t v13;
  float *v14;
  float *v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  float *v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  float *v32;
  int v33;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  uint64_t v42;
  float v43;
  float *v44;
  unint64_t v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  int v56;
  uint64_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  float v72;
  unsigned int v73;
  float v74;
  float v75;
  unsigned int v76;
  unsigned int v77;
  float v78;
  int v79;
  float v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  float v86;
  float v87;
  float v88;
  uint64_t v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  result = *a2;
  if (*((_DWORD *)*a2 + 12) != *(unsigned __int16 *)(a1 + 46))
    return result;
  v4 = *((_DWORD *)result + 13);
  if (v4 != *(unsigned __int16 *)(a1 + 44)
    || *((_DWORD *)result + 14) != v4
    || *(_QWORD *)(a1 + 104) == *(_QWORD *)(a1 + 96))
  {
    return result;
  }
  v5 = sub_1D530D4CC((uint64_t)result);
  v6 = 4 * *(unsigned __int16 *)(a1 + 44);
  v7 = (void *)operator new[]();
  bzero(v7, v6);
  v8 = 4 * *(unsigned __int16 *)(a1 + 44);
  v9 = (void *)operator new[]();
  bzero(v9, v8);
  v10 = 4 * *(unsigned __int16 *)(a1 + 44);
  v11 = (void *)operator new[]();
  bzero(v11, v10);
  v19 = *(unsigned __int16 *)(a1 + 44);
  if (*(_WORD *)(a1 + 44))
  {
    v20 = 0;
    v21 = v9;
    v22 = (float *)v7;
    do
    {
      v16.n128_u16[0] = *(_WORD *)(v5 + v20);
      v23 = (float)v16.n128_u32[0];
      *v22++ = v23;
      LOWORD(v23) = *(_WORD *)(v5 + 2 * v19 + v20);
      v16.n128_f32[0] = (float)LODWORD(v23);
      *v21++ = v16.n128_u32[0];
      v20 += 2;
    }
    while (2 * v19 != v20);
  }
  if (*(unsigned __int16 *)(a1 + 46) - 3 > 0xFFFFFFFD)
  {
    v32 = (float *)v7;
    goto LABEL_66;
  }
  v24 = *(_QWORD *)(a1 + 256);
  v25 = *(_QWORD *)(a1 + 264) - v24;
  v26 = *(unsigned __int16 *)(a1 + 32);
  if (v26 >= 0x14)
    v27 = 10;
  else
    v27 = 15;
  v28 = *(_QWORD *)(a1 + 96);
  v29 = (*(_QWORD *)(a1 + 104) - v28) >> 2;
  v30 = 1;
  v31 = 2;
  v16.n128_u64[0] = 0;
  v17.n128_u32[0] = 0.5;
  result = &v92;
  v18.n128_u32[0] = 0;
  v12 = &v94;
  v13 = 0xFFFFLL;
  v14 = &v87;
  v15 = &v85;
  do
  {
    v32 = (float *)v9;
    v9 = v11;
    v11 = v7;
    if (v26 > 0x13)
    {
      if (v29 <= v27)
        goto LABEL_69;
      v96 = *(float *)(v28 + 4 * v27);
      if (v29 <= v27 + 2)
        goto LABEL_69;
      v97 = *(float *)(v28 + 4 * (v27 + 2));
      if (v29 <= v27 + 1)
        goto LABEL_69;
      v94 = *(float *)(v28 + 4 * (v27 + 1));
      if (v29 <= v27 + 3)
        goto LABEL_69;
      v95 = *(float *)(v28 + 4 * (v27 + 3));
      if (v29 <= v27 + 6)
        goto LABEL_69;
      v92 = *(float *)(v28 + 4 * (v27 + 6));
      v90 = v92;
      if (v29 <= v27 + 7)
        goto LABEL_69;
      v93 = *(float *)(v28 + 4 * (v27 + 7));
      v91 = v93;
      if (v29 <= v27 + 4
        || (v87 = *(float *)(v28 + 4 * (v27 + 4)), v85 = v87, v29 <= v27 + 5)
        || (v88 = *(float *)(v28 + 4 * (v27 + 5)), v86 = v88, v29 <= v27 + 8)
        || (LODWORD(v84) = *(_DWORD *)(v28 + 4 * (v27 + 8)), LODWORD(v83) = v84, v29 <= v27 + 9))
      {
LABEL_69:
        sub_1D528EAE0();
      }
      HIDWORD(v84) = *(_DWORD *)(v28 + 4 * (v27 + 9));
      HIDWORD(v83) = HIDWORD(v84);
      __asm { FMOV            V3.2S, #1.0 }
      v89 = _D3;
      if ((_DWORD)v19)
      {
LABEL_39:
        v39 = v19;
        v40 = v31 * v19;
        v41 = v9;
        do
        {
          LOWORD(_D3) = *(_WORD *)(v5 + 2 * v40);
          *(float *)&_D3 = (float)_D3;
          *v41++ = _D3;
          ++v40;
          --v39;
        }
        while (v39);
      }
    }
    else
    {
      if (v29 <= v27)
        goto LABEL_68;
      v96 = *(float *)(v28 + 4 * v27);
      if (v29 <= v27 + 5)
        goto LABEL_68;
      v97 = *(float *)(v28 + 4 * (v27 + 5));
      if (v29 <= v27 + 4)
        goto LABEL_68;
      v94 = *(float *)(v28 + 4 * (v27 + 4));
      if (v29 <= v27 + 9)
        goto LABEL_68;
      v95 = *(float *)(v28 + 4 * (v27 + 9));
      if (v29 <= v27 + 3)
        goto LABEL_68;
      v90 = *(float *)(v28 + 4 * (v27 + 3));
      v92 = v90;
      if (v29 <= v27 + 8)
        goto LABEL_68;
      v91 = *(float *)(v28 + 4 * (v27 + 8));
      v93 = v91;
      if (v29 <= v27 + 10
        || (v85 = *(float *)(v28 + 4 * (v27 + 10)), v87 = v85, v29 <= v27 + 11)
        || (v86 = *(float *)(v28 + 4 * (v27 + 11)), v88 = v86, v83 = 0, v84 = 0, v29 <= v27 + 2)
        || v29 <= v27 + 7
        || v29 <= v27 + 17
        || v29 <= v27 + 22)
      {
LABEL_68:
        sub_1D528EAE0();
      }
      v33 = *(_DWORD *)(v28 + 4 * (v27 + 7));
      *(float *)&_D3 = (float)(*(float *)(v28 + 4 * (v27 + 2)) + *(float *)(v28 + 4 * (v27 + 17))) * 0.5;
      *(float *)&v89 = *(float *)&_D3;
      HIDWORD(v89) = v33;
      if ((_DWORD)v19)
        goto LABEL_39;
    }
    v42 = v5 + 2 * v30 * v19;
    if (v25 == 16)
    {
      if ((v19 - 3) <= 0xFFFFFFFD)
      {
        v43 = *(float *)(a1 + 240);
        v44 = v32 + 1;
        v45 = 1;
        do
        {
          v47 = *(v44 - 1);
          v46 = *v44;
          v48 = v44[1];
          ++v44;
          v49 = 4 * (v45 & 1);
          v50 = *(float *)((char *)&v96 + v49);
          v51 = *(float *)(v24 + 4 * (v45 & 1 | (2 * (v30 & 1))));
          v52 = *(float *)((char *)&v92 + v49);
          v53 = (float)((float)((float)(*((float *)v11 + v45) * v50)
                              + (float)((float)(*((float *)v11 + v45) * v50)
                                      * (float)(fmaxf(*((float *)v11 + v45) - v46, 0.0) * v51)))
                      + (float)(v52 * v47))
              + (float)(*(float *)((unint64_t)&v89 & 0xFFFFFFFFFFFFFFFBLL | v49) * v46);
          v54 = *(float *)((char *)&v90 + v49);
          v55 = *(float *)((char *)&v94 + v49);
          v56 = (int)(float)(v43
                           * (float)((float)((float)(v53 + (float)(v54 * v48))
                                           + (float)((float)(*((float *)v9 + v45) * v55)
                                                   * (float)(fmaxf(*((float *)v9 + v45) - v46, 0.0) * v51)))
                                   + (float)(v55 * *((float *)v9 + v45))));
          if (v56 >= 0xFFFF)
            v56 = 0xFFFF;
          *(_WORD *)(v42 + 2 * v45) = v56 & ~(unsigned __int16)(v56 >> 31);
          *(float *)((char *)&v96 + v49) = v50 + *(float *)((char *)&v87 + v49);
          *(float *)((char *)&v92 + v49) = v52
                                         + *(float *)((unint64_t)&v84 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v45 & 1)));
          *(float *)((char *)&v90 + v49) = v54
                                         + *(float *)((unint64_t)&v83 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v45 & 1)));
          *(float *)((char *)&v94 + v49) = v55 + *(float *)((char *)&v85 + v49);
          LODWORD(v19) = *(unsigned __int16 *)(a1 + 44);
          ++v45;
        }
        while (v45 < (v19 - 1));
      }
    }
    else if ((v19 - 3) <= 0xFFFFFFFD)
    {
      v57 = v89;
      v59 = v94;
      v58 = v95;
      v61 = v90;
      v60 = v91;
      v63 = v92;
      v62 = v93;
      v65 = v96;
      v64 = v97;
      v66 = *(float *)(a1 + 240);
      v68 = v87;
      v67 = v88;
      v69 = v84;
      v70 = v83;
      v72 = v85;
      v71 = v86;
      v73 = 3;
      v75 = *v32;
      v74 = v32[1];
      do
      {
        v76 = v73 - 2;
        v77 = v73 - 1;
        v78 = v32[v73 - 1];
        v79 = (int)(float)(v66
                         * (float)((float)((float)((float)((float)(v62 * v75) + (float)(v64 * *((float *)v11 + v76)))
                                                 + (float)(*((float *)&v57 + 1) * v74))
                                         + (float)(v60 * v78))
                                 + (float)(v58 * *((float *)v9 + v76))));
        if (v79 >= 0xFFFF)
          v79 = 0xFFFF;
        *(_WORD *)(v42 + 2 * v76) = v79 & ~(unsigned __int16)(v79 >> 31);
        v64 = v64 + v67;
        v62 = v62 + *((float *)&v69 + 1);
        v80 = v32[v73];
        v81 = (int)(float)(v66
                         * (float)((float)((float)((float)((float)(v63 * v74) + (float)(v65 * *((float *)v11 + v77)))
                                                 + (float)(*(float *)&v57 * v78))
                                         + (float)(v61 * v80))
                                 + (float)(v59 * *((float *)v9 + v77))));
        v60 = v60 + *((float *)&v70 + 1);
        if (v81 >= 0xFFFF)
          v81 = 0xFFFF;
        *(_WORD *)(v42 + 2 * v77) = v81 & ~(unsigned __int16)(v81 >> 31);
        v58 = v58 + v71;
        v65 = v65 + v68;
        v63 = v63 + *(float *)&v69;
        v61 = v61 + *(float *)&v70;
        v59 = v59 + v72;
        LODWORD(v19) = *(unsigned __int16 *)(a1 + 44);
        v75 = v78;
        v74 = v80;
        _CF = v73 >= (int)v19 - 1;
        v73 += 2;
      }
      while (!_CF);
    }
    ++v30;
    v26 = *(unsigned __int16 *)(a1 + 32);
    if (v26 >= 0x14)
      v82 = 10;
    else
      v82 = 15;
    v27 += v82;
    ++v31;
    v7 = v32;
  }
  while (v30 < *(unsigned __int16 *)(a1 + 46) - 1);
  if (!v11)
  {
    if (v9)
      goto LABEL_62;
    goto LABEL_63;
  }
LABEL_66:
  result = (float *)MEMORY[0x1D8271AC4](v11, 0x1000C8052888210, v12, v13, v14, v15, v16, v17, v18);
  if (v9)
LABEL_62:
    result = (float *)MEMORY[0x1D8271AC4](v9, 0x1000C8052888210, v12, v13, v14, v15, v16, v17, v18);
LABEL_63:
  if (v32)
    JUMPOUT(0x1D8271AC4);
  return result;
}

void sub_1D5336E78(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1D8271AC4](v1, 0x1000C8052888210);
  if (v2)
    MEMORY[0x1D8271AC4](v2, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void sub_1D5336EF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v12;
  int v13;
  BOOL v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  BOOL v19;
  unint64_t v21;
  uint64_t i;
  unsigned int v23;
  unsigned int v24;
  const unsigned __int16 *v25;
  int v26;
  int v27;
  float *v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  float *v33;
  float *v34;
  int v35;
  _WORD *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  int *v42;
  char *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int *v54;
  int v55;
  void *exception;
  void *v57;
  uint64_t *v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  int v66;
  void *__p;
  _BYTE *v68;
  void *v69[3];
  void *v70[3];
  _DWORD v71[4];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 184);
  if (v2)
  {
    v4 = *(unsigned __int16 *)(a1 + 44);
    if (v4 >> 4 > 0x270)
      goto LABEL_48;
    v5 = *(unsigned __int16 *)(a1 + 46);
    if (v5 >> 4 > 0x270)
      goto LABEL_48;
    v8 = v2 + 48;
    v7 = *(_DWORD *)(v2 + 48);
    v6 = *(_DWORD *)(v8 + 4);
    v9 = (v6 >> 2) * *(_DWORD *)(a1 + 200);
    v10 = v7 * *(_DWORD *)(a1 + 204);
    if (v4 < v9 || v5 < v10)
      goto LABEL_48;
    v12 = ((v4 - v9) >> 1) & 0x7FFFFFFE;
    v13 = v9 + v12 - 2;
    v14 = v12 < v4 >> 1 && (int)(v4 >> 1) < v13;
    v15 = v14 && v13 <= (int)v4;
    if (!v15
      || ((v16 = ((v5 - v10) >> 1) & 0x7FFFFFFE, v17 = v10 + v16 - 2, v16 < v5 >> 1)
        ? (v18 = (int)(v5 >> 1) < v17)
        : (v18 = 0),
          v18 ? (v19 = v17 <= (int)v5) : (v19 = 0),
          !v19))
    {
LABEL_48:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v21 = v7 * v6;
    sub_1D52B2E9C(v70, v21);
    sub_1D52B2E9C(v69, v21);
    v58 = a2;
    sub_1D52B35F8(&__p, v21);
    if ((_DWORD)v21)
    {
      for (i = 0; i != v21; ++i)
      {
        v23 = *(unsigned __int16 *)(sub_1D530D4CC(*(_QWORD *)(a1 + 184)) + 2 * i);
        *((_DWORD *)v70[0] + i) = v23;
        if (v23)
          v24 = 0xFFFFFFFF / v23;
        else
          v24 = -1;
        *((_DWORD *)v69[0] + i) = v24;
      }
    }
    v25 = (const unsigned __int16 *)sub_1D530D4CC(*(_QWORD *)(a1 + 184));
    vDSP_vfltu16(v25, 1, (float *)__p, 1, (v68 - (_BYTE *)__p) >> 2);
    v26 = (v9 >> 1) & 0xFFFE;
    v27 = (v10 >> 1) & 0xFFFE;
    v28 = (float *)((char *)__p
                  + 4
                  * (int)((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 52) & 0xFFFFFFFC)
                        * ((v27 / *(_DWORD *)(a1 + 204)) >> 1)
                        + 4 * ((v26 / *(_DWORD *)(a1 + 200)) >> 1)));
    v65 = llroundf((float)(*v28 / (float)((float)((float)(*v28 + v28[1]) + v28[2]) + v28[3])) * 16384.0);
    sub_1D528594C(&v66, (uint64_t *)&v65);
    v29 = (float *)((char *)__p
                  + 4
                  * (int)((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 52) & 0xFFFFFFFC)
                        * ((v27 / *(_DWORD *)(a1 + 204)) >> 1)
                        + 4 * (((v26 | 1) / *(_DWORD *)(a1 + 200)) >> 1)));
    v30 = v29[1];
    v31 = v29[3];
    v32 = (float)(v30 + *v29) + v29[2];
    v71[0] = v66;
    v63 = llroundf((float)(v30 / (float)(v32 + v31)) * 16384.0);
    sub_1D528594C(&v64, (uint64_t *)&v63);
    v71[1] = v64;
    v33 = (float *)((char *)__p
                  + 4
                  * (int)((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 52) & 0xFFFFFFFC)
                        * (((v27 | 1) / *(_DWORD *)(a1 + 204)) >> 1)
                        + 4 * ((v26 / *(_DWORD *)(a1 + 200)) >> 1)));
    v61 = llroundf((float)(v33[2] / (float)(v33[3] + (float)(v33[2] + (float)(*v33 + v33[1])))) * 16384.0);
    sub_1D528594C(&v62, (uint64_t *)&v61);
    v71[2] = v62;
    v34 = (float *)((char *)__p
                  + 4
                  * (int)((*(_DWORD *)(*(_QWORD *)(a1 + 184) + 52) & 0xFFFFFFFC)
                        * (((v27 | 1) / *(_DWORD *)(a1 + 204)) >> 1)
                        + 4 * (((v26 | 1) / *(_DWORD *)(a1 + 200)) >> 1)));
    v59 = llroundf((float)(v34[3] / (float)((float)((float)(*v34 + v34[1]) + v34[2]) + v34[3])) * 16384.0);
    sub_1D528594C(&v60, (uint64_t *)&v59);
    v71[3] = v60;
    v35 = *(_DWORD *)(a1 + 200);
    v36 = (_WORD *)sub_1D530D4CC(*v58);
    v37 = *(unsigned __int16 *)(a1 + 46);
    if (*(_WORD *)(a1 + 46))
    {
      v38 = 0;
      v39 = 0;
      v40 = *(_DWORD *)(a1 + 204);
      v41 = *(_DWORD *)(*(_QWORD *)(a1 + 184) + 52);
      v42 = (int *)v69[0];
      v43 = (char *)v70[0];
      v44 = *(unsigned __int16 *)(a1 + 44);
      do
      {
        if (v44)
        {
          v45 = 0;
          v46 = v38 + v16 + (v39 & 1) - ((v38 + v17 + (v39 & 1)) & ((int)(v38 + v17 + (v39 & 1)) >> 31));
          v47 = v41 * (((int)((v39 & 1) - (v46 & (v46 >> 31))) / v40) >> 1);
          v48 = v12;
          v49 = v9 + v12 - 2;
          do
          {
            v50 = v48 + (v45 & 1) - ((v49 + (v45 & 1)) & ((int)(v49 + (v45 & 1)) >> 31));
            v51 = v45 & 1 | (2 * (v39 & 1));
            v52 = v47 + 4 * ((int)(((v45 & 1) - (v50 & (v50 >> 31))) * (0xFFFF / v35)) >> 17);
            v53 = v42[v52 + v51];
            v54 = (int *)&v43[4 * v52];
            v55 = (int)(((unint64_t)((int)v71[v51] * (v54[1] + (uint64_t)*v54 + v54[2] + (uint64_t)v54[3]) * v53) >> 32)
                      * (unsigned __int16)*v36) >> 14;
            if (v55 >= 0xFFFF)
              v55 = 0xFFFF;
            *v36++ = v55 & ~(unsigned __int16)(v55 >> 31);
            ++v45;
            v44 = *(unsigned __int16 *)(a1 + 44);
            --v49;
            --v48;
          }
          while (v45 < v44);
          v37 = *(unsigned __int16 *)(a1 + 46);
        }
        v38 = ~v39++;
      }
      while (v39 < v37);
    }
    if (v36 != (_WORD *)(sub_1D530D4CC(*v58)
                        + 2 * *(unsigned __int16 *)(a1 + 44) * (unint64_t)*(unsigned __int16 *)(a1 + 46)))
    {
      v57 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v57, "RawCameraException");
      __cxa_throw(v57, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (__p)
    {
      v68 = __p;
      operator delete(__p);
    }
    if (v69[0])
    {
      v69[1] = v69[0];
      operator delete(v69[0]);
    }
    if (v70[0])
    {
      v70[1] = v70[0];
      operator delete(v70[0]);
    }
  }
}

void sub_1D5337458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  if (a24)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D53374E4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  double v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  _DWORD v34[8];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(result + 128);
  if (*(_QWORD *)(result + 136) != v2)
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    v8 = *(unsigned int *)(*a2 + 48);
    v7 = *(_DWORD *)(*a2 + 52);
    do
    {
      if (*(_DWORD *)(v2 + 12 * v5 + 4) != 4)
      {
        v33 = v6;
        result = sub_1D530D4CC(*a2);
        v6 = v33;
        v9 = *(unsigned __int16 *)(v2 + 12 * v5);
        if (v7 > v9)
        {
          v10 = *(unsigned __int16 *)(v2 + 12 * v5 + 8);
          if (v8 > v10)
          {
            v11 = v9 - 2;
            v12 = v9 + 2;
            do
            {
              if ((v10 & 1) + (v9 & 1) == 1)
              {
                v13 = 0;
                v14 = 0;
                v15 = &byte_1D544AA59;
                do
                {
                  v16 = v10 + *(v15 - 1);
                  v17 = *v15 + v9;
                  if (v16 >= v8 || v17 >= v7)
                    v19 = 0;
                  else
                    v19 = *(unsigned __int16 *)(result + 2 * (v17 + v16 * v7));
                  v15 += 2;
                  v34[v13 + 4] = v19;
                  v14 += v19;
                  ++v13;
                }
                while (v13 != 4);
                v20 = 0;
                v21 = 0;
                do
                {
                  v22 = 4 * v34[v20 + 4] - v14;
                  if (v22 < 0)
                    v22 = v14 - 4 * v34[v20 + 4];
                  v34[v20] = v22;
                  if (v34[v21] < v22)
                    v21 = v20;
                  ++v20;
                }
                while (v20 != 4);
                v23 = (double)(v14 - v34[v21 + 4]) / 3.0 + 0.5;
                v24 = v7 * v10;
              }
              else
              {
                v25 = 0;
                v26 = 0;
                do
                {
                  v27 = v10 + *((char *)&unk_1D544AA58 + v25 + 8);
                  v28 = *((char *)&unk_1D544AA58 + v25 + 9) + v9;
                  if (v27 >= v8 || v28 >= v7)
                    v30 = 0;
                  else
                    v30 = *(unsigned __int16 *)(result + 2 * (v28 + v27 * v7));
                  v25 += 2;
                  v26 += v30;
                }
                while (v25 != 8);
                if (v11 >= v7)
                  v31 = 0;
                else
                  v31 = *(unsigned __int16 *)(result + 2 * (v11 + v7 * (_DWORD)v10));
                v24 = v7 * v10;
                if (v12 >= v7)
                  v32 = 0;
                else
                  v32 = *(unsigned __int16 *)(result + 2 * (v24 + v12));
                v23 = (double)v26 * 0.0732233 + 0.5 + (double)(v32 + v31) * 0.3535534;
              }
              *(_WORD *)(result + 2 * (v24 + v9)) = (int)v23;
              ++v10;
            }
            while (v10 != v8);
          }
        }
      }
      v2 = *(_QWORD *)(v4 + 128);
      v5 = ++v6;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v4 + 136) - v2) >> 2) > v6);
  }
  return result;
}

uint64_t sub_1D5337798(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 44);
}

uint64_t sub_1D53377A0(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 46);
}

uint64_t sub_1D53377A8(uint64_t a1)
{
  return (unsigned __int16)(*(_WORD *)(a1 + 52) - *(_WORD *)(a1 + 48));
}

uint64_t sub_1D53377BC(uint64_t a1)
{
  return (unsigned __int16)(*(_WORD *)(a1 + 54) - *(_WORD *)(a1 + 50));
}

uint64_t sub_1D53377D0(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 48);
}

uint64_t sub_1D53377D8(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 50);
}

uint64_t sub_1D53377E0(uint64_t a1)
{
  return (unsigned __int16)(*(_WORD *)(a1 + 44) - *(_WORD *)(a1 + 52));
}

uint64_t sub_1D53377F4(uint64_t a1)
{
  return (unsigned __int16)(*(_WORD *)(a1 + 46) - *(_WORD *)(a1 + 54));
}

uint64_t sub_1D5337808(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 66);
}

void sub_1D5337814(_QWORD *a1)
{
  sub_1D5337CBC(a1);
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D5337838(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D53378D0(a1, a2);
    v4 = (char *)a1[1];
    v5 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1D53378B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1D53378D0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1555555555555556)
    sub_1D5282B8C();
  result = (char *)sub_1D5337920((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void *sub_1D5337920(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    sub_1D5282C48();
  return operator new(12 * a2);
}

_DWORD *sub_1D5337964(_DWORD *result, _QWORD *a2)
{
  uint64_t v2;
  BOOL v3;
  unint64_t v4;
  void *exception;

  v2 = *result;
  v3 = __OFADD__(v2, *a2);
  v4 = v2 + *a2;
  *result = v4;
  if (v3 || HIDWORD(v4))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D53379C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D53379DC(uint64_t *a1@<X1>, unsigned int *a2@<X2>, unsigned int *a3@<X3>, unsigned int *a4@<X4>, unsigned int *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;

  v12 = operator new(0x58uLL);
  sub_1D5337A6C(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  sub_1D5285658((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1D5337A58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5337A6C(_QWORD *a1, uint64_t *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  a1[2] = 0;
  *a1 = &unk_1E9975978;
  a1[1] = 0;
  sub_1D5337AB8((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_1D5337AA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5337AB8(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v10 = (std::__shared_weak_count *)a2[1];
  v21 = *a2;
  v22 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  sub_1D5285A24(&v20, a3);
  sub_1D52859B8(&v19, a4);
  sub_1D52859B8(&v18, a5);
  sub_1D52859B8(&v17, a6);
  sub_1D530D3FC(a1, &v21, &v20, &v19, &v18, &v17);
  v13 = v22;
  if (v22)
  {
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a1;
}

void sub_1D5337B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5337BB8@<X0>(uint64_t *a1@<X1>, _DWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x138uLL);
  result = sub_1D5337C18(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1D5337C04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5337C18(_QWORD *a1, uint64_t *a2, _DWORD *a3)
{
  a1[2] = 0;
  *a1 = &unk_1E997EB58;
  a1[1] = 0;
  sub_1D53356F4((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1D5337C50(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5337C64(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E997EB58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5337C78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E997EB58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5337CAC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1D5337CBC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &unk_1E997EB28;
  v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = v2;
    operator delete(v2);
  }
  sub_1D5282EB4((uint64_t)(a1 + 23));
  v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1D5337D24(uint64_t result, _QWORD *a2, int a3)
{
  *(_QWORD *)result = off_1E997EBA8;
  *(_QWORD *)(result + 8) = *a2;
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

_QWORD *sub_1D5337D44(_QWORD *a1)
{
  const void *v2;

  *a1 = off_1E997EBA8;
  v2 = (const void *)a1[3];
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t sub_1D5337D88(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_1D5337D90()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1D8271938](exception, "RawCameraException");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
}

void sub_1D5337DCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D5337DE0(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *exception;
  __int128 v16;
  __int128 v17;

  sub_1D53A629C(a3, a4, a5, a6);
  v9 = a1[1];
  *(_QWORD *)&v17 = 0;
  *((_QWORD *)&v17 + 1) = v9;
  v10 = sub_1D53A63F0();
  sub_1D53A6C7C(&v17, v10, &v16);
  sub_1D5337F8C(v16, 0);
  sub_1D53A6974(*a6, &v16);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v16 + 8))(v16, 1);
  if (*(_DWORD *)(v16 + 44) != 8 || sub_1D53A6EE8((unsigned int *)v16) != (uint64_t)(int)(3 * a1[1]))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v11 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v16 + 8))(v16, 0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, v11);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1D5337F54(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D5282EB4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5337F8C(uint64_t result, char a2)
{
  void *exception;

  if (*(_DWORD *)(result + 24))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  *(_BYTE *)(result + 52) = a2;
  return result;
}

void sub_1D5337FE0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5337FF4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

CGColorSpaceRef sub_1D5337FFC(CGColorSpaceRef result, CGColorSpaceRef space)
{
  CGColorSpaceRef v3;
  const void *v4;

  if (space)
  {
    v3 = result;
    v4 = (const void *)*((_QWORD *)result + 3);
    if (v4)
      CFRelease(v4);
    result = CGColorSpaceRetain(space);
    *((_QWORD *)v3 + 3) = result;
  }
  return result;
}

_QWORD *sub_1D5338038(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;

  result = (_QWORD *)sub_1D5337D24(a1, a2, a3);
  *result = &off_1E997EC10;
  result[4] = a4;
  result[5] = a5;
  return result;
}

uint64_t sub_1D533806C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_1D5338074(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

id sub_1D533807C(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unsigned int v8;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  sub_1D528304C(&v8, &v7);
  v2 = v8;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  sub_1D528304C(&v8, &v7);
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v3, (uint64_t)CFSTR("{%u, %u}"), v4, v5, v2, v8);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1D5338104(_QWORD *a1)
{
  sub_1D5337D44(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5338128(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  int i;
  double v8;
  double v9;
  double v10;
  double v11;
  double *v12;
  double v13;
  double v14;
  void *__p;
  void *v17;
  _QWORD *v18;

  v5 = sub_1D544098C(a1, a2);
  *(_QWORD *)v5 = off_1E997EC80;
  *(_OWORD *)(v5 + 16) = 0u;
  v6 = (uint64_t *)(v5 + 16);
  *(_OWORD *)(v5 + 32) = 0u;
  *(_QWORD *)(v5 + 48) = 0;
  for (i = sub_1D52847F8(*a3); i; --i)
  {
    v8 = sub_1D528494C(*a3);
    v9 = sub_1D528494C(*a3);
    v10 = sub_1D528494C(*a3);
    v11 = sub_1D528494C(*a3);
    v12 = (double *)operator new(0x20uLL);
    v17 = v12 + 4;
    v18 = v12 + 4;
    *v12 = v8;
    v12[1] = v9;
    v12[2] = v10;
    v12[3] = v11;
    __p = v12;
    sub_1D5338274(v6, (uint64_t)&__p);
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
  }
  v13 = sub_1D528494C(*a3);
  v14 = sub_1D528494C(*a3);
  *(double *)(a1 + 40) = v13;
  *(double *)(a1 + 48) = v14;
  return a1;
}

void sub_1D5338228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  sub_1D5304DA8((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5338274(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)sub_1D5293DCC(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_1D53321D8(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = sub_1D530496C((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1D533839C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D530496C((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1D53383B4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double **v13;
  double **i;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  RAWOpcodeWarpFisheye *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v59;
  void *v60;
  _QWORD v61[2];
  _QWORD v62[4];
  _QWORD v63[5];

  v63[4] = *MEMORY[0x1E0C80C00];
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4, a5);
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v5, v6, v7, v8);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = *(double ***)(a1 + 16);
  for (i = *(double ***)(a1 + 24); v13 != i; v13 += 3)
  {
    v62[0] = CFSTR("kr0");
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v9, v10, v11, v12, **v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v63[0] = v15;
    v62[1] = CFSTR("kr1");
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v16, v17, v18, v19, (*v13)[1]);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v63[1] = v20;
    v62[2] = CFSTR("kr2");
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v21, v22, v23, v24, (*v13)[2]);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v63[2] = v25;
    v62[3] = CFSTR("kr3");
    objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v26, v27, v28, v29, (*v13)[3]);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v63[3] = v30;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v31, (uint64_t)v63, (uint64_t)v62, 4);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v60, v33, (uint64_t)v32, v34, v35);

  }
  objc_msgSend_setObject_forKeyedSubscript_(v59, v9, (uint64_t)v60, (uint64_t)CFSTR("CoefficientSets"), v12);
  v36 = *(double *)(a1 + 48);
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v37, v38, v39, v40, *(double *)(a1 + 40));
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v61[0] = v41;
  objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v42, v43, v44, v45, v36);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  v61[1] = v46;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v47, (uint64_t)v61, 2, v48);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v59, v50, (uint64_t)v49, (uint64_t)CFSTR("NormalizedCenter"), v51);

  v52 = [RAWOpcodeWarpFisheye alloc];
  v56 = (void *)objc_msgSend_initWithArguments_(v52, v53, (uint64_t)v59, v54, v55);

  return v56;
}

void sub_1D5338604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5338698(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1E997EC80;
  v3 = (void **)(a1 + 16);
  sub_1D5304DA8(&v3);
  return a1;
}

uint64_t sub_1D53386DC(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1E997EC80;
  v3 = (void **)(a1 + 16);
  sub_1D5304DA8(&v3);
  return MEMORY[0x1D8271ADC](a1, 0x10A1C40C9E8D6FDLL);
}

uint64_t sub_1D5338734()
{
  return 2;
}

_QWORD *sub_1D533873C(_QWORD *a1, _QWORD *a2, int a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;

  v8 = (_QWORD *)sub_1D5337D24((uint64_t)a1, a2, a3);
  *v8 = &off_1E997ECC8;
  v8[4] = 0;
  v8[5] = 0;
  v8[6] = 0;
  sub_1D5287D44(v8 + 4, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  sub_1D5287D44(a1 + 7, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return a1;
}

void sub_1D53387B8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  sub_1D5337D44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53387E8(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2;
}

uint64_t sub_1D53387F8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (a2 >= (*(_QWORD *)(a1 + 40) - v2) >> 2)
    return 0;
  else
    return *(unsigned int *)(v2 + 4 * a2);
}

uint64_t sub_1D5338818(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  if (a2 >= (*(_QWORD *)(a1 + 64) - v2) >> 2)
    return 0;
  else
    return *(unsigned int *)(v2 + 4 * a2);
}

uint64_t sub_1D5338838(uint64_t a1)
{
  unsigned int *v1;

  v1 = *(unsigned int **)(a1 + 32);
  if (*(unsigned int **)(a1 + 40) == v1)
    return 0;
  else
    return *v1;
}

uint64_t sub_1D5338854(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;

  v1 = *(unsigned int **)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 64);
  result = 0;
  v4 = v2 - (_QWORD)v1;
  if (v4)
  {
    v5 = v4 >> 2;
    if (v5 <= 1)
      v5 = 1;
    do
    {
      v6 = *v1++;
      result += v6;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1D5338884(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *exception;
  int v20;
  uint64_t v21;
  uint64_t v22[3];

  sub_1D52B1C58(v22, a2);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) == 1)
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v6 = *a2;
    sub_1D528594C(&v20, &v21);
    (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v6 + 40))(v6, &v20, 0);
    v7 = *a2;
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, a3, v8);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) != v9)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
  else
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v12 = (unint64_t)sub_1D5337D88(a1) >> 32;
    if (v11 != 3 * v12 * sub_1D5337D88(a1))
    {
      v18 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v18, "RawCameraException");
      __cxa_throw(v18, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    for (i = 0; i < (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1); ++i)
    {
      v21 = 0;
      v21 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 80))(a1, i);
      v14 = *a2;
      sub_1D528594C(&v20, &v21);
      (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v14 + 40))(v14, &v20, 0);
      v15 = *a2;
      v16 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 88))(a1, i);
      LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 32))(v15, a3, v16);
      if ((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 88))(a1, i) != v15)
      {
        v17 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v17, "RawCameraException");
        __cxa_throw(v17, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      a3 += (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 88))(a1, i);
    }
  }
  return sub_1D5285200(v22);
}

void sub_1D5338B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1D5285200((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D5338B7C(_QWORD *a1)
{
  sub_1D5338BA0(a1);
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D5338BA0(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E997ECC8;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return sub_1D5337D44(a1);
}

double sub_1D5338BEC(_OWORD *a1)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

_QWORD *sub_1D5338BF8(_QWORD *a1, uint64_t a2)
{
  *a1 = *(_QWORD *)a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  sub_1D5282C70(a1 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  return a1;
}

uint64_t sub_1D5338C3C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unint64_t v4;
  void *exception;

  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = a3 * (unint64_t)a2;
  if (!a3)
  {
    if (a2 < 0x64)
      goto LABEL_5;
LABEL_7:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (a3 > 0x63 || a2 > 0x63 || (v4 & 0xFFFFFFFF00000000) != 0)
    goto LABEL_7;
LABEL_5:
  sub_1D5338D0C(a1 + 8, v4);
  return a1;
}

void sub_1D5338CE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v3;
  void *v5;

  __cxa_free_exception(v3);
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void sub_1D5338D0C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_1D533A460((char **)a1, a2 - v2);
  }
}

uint64_t sub_1D5338D40(uint64_t a1, unsigned int a2, unsigned int a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  void *exception;
  uint64_t *v20;

  *(_QWORD *)(a1 + 8) = 0;
  v12 = (_QWORD *)(a1 + 8);
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v13 = a3 * (unint64_t)a2;
  if (!a3)
  {
    if (a2 < 0x64)
      goto LABEL_5;
LABEL_10:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (a3 > 0x63 || a2 > 0x63 || (v13 & 0xFFFFFFFF00000000) != 0)
    goto LABEL_10;
LABEL_5:
  sub_1D5338D0C(a1 + 8, v13);
  **(double **)(a1 + 8) = a4;
  v20 = &a10;
  v14 = (*(_DWORD *)(a1 + 4) * *(_DWORD *)a1);
  if (v14 >= 2)
  {
    v15 = (uint64_t *)(*v12 + 8);
    v16 = v14 - 1;
    do
    {
      v17 = v20++;
      *v15++ = *v17;
      --v16;
    }
    while (v16);
  }
  return a1;
}

void sub_1D5338E40(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v3;
  void *v5;

  __cxa_free_exception(v3);
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D5338E6C(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  void *exception;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = ((a3 * (unint64_t)a2) & 0xFFFFFFFF00000000) != 0;
  v7 = a3 * a2;
  v8 = *(_QWORD *)(a4 + 8);
  if (v7 != (v8 - *(_QWORD *)a4) >> 3)
    goto LABEL_12;
  if (a3)
  {
    v9 = a2 > 0x63 || v6;
    if (a3 <= 0x63 && (v9 & 1) == 0)
      goto LABEL_8;
LABEL_12:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (a2 >= 0x64)
    goto LABEL_12;
LABEL_8:
  if (a1 + 8 != a4)
    sub_1D528FA34((char *)(a1 + 8), *(char **)a4, v8, v7);
  return a1;
}

void sub_1D5338F50(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v3;
  void *v5;

  __cxa_free_exception(v3);
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

double *sub_1D5338F84@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  double *result;
  unsigned int v5;
  unsigned int v6;
  double v7;
  uint64_t v8;
  _QWORD v9[2];

  result = (double *)sub_1D5338C3C(a2, a1, a1);
  if (a1)
  {
    v5 = 0;
    do
    {
      v6 = 0;
      do
      {
        if (v5 == v6)
          v7 = 1.0;
        else
          v7 = 0.0;
        v9[0] = sub_1D5339044(a2, v5);
        v9[1] = v8;
        result = (double *)sub_1D53390D4((uint64_t)v9, v6);
        *result = v7;
        ++v6;
      }
      while (a1 != v6);
      ++v5;
    }
    while (v5 != a1);
  }
  return result;
}

void sub_1D5339028(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(_QWORD *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D5339044(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  void *exception;

  if (*(_DWORD *)a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v3 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 8;
  if (*(_DWORD *)(v2 - 4) * a2 >= (unint64_t)((*(_QWORD *)(v2 + 8) - v3) >> 3))
    sub_1D528EAE0();
  return *(unsigned int *)(v2 - 4);
}

void sub_1D53390C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53390D4(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  void *exception;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || *(_DWORD *)a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return v2 + 8 * a2;
}

void sub_1D5339150(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1D5339168@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t *sub_1D5339174@<X0>(uint64_t *result@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v3 = result[1] - *result;
  if (v3 && v3 < 0x319)
  {
    v4 = result;
    result = (uint64_t *)sub_1D5338C3C((uint64_t)a2, v3 >> 3, 1u);
    v5 = *v4;
    if (v4[1] != *v4)
    {
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(v5 + 8 * v6);
        v10[0] = sub_1D5339044((uint64_t)a2, v7);
        v10[1] = v9;
        result = (uint64_t *)sub_1D53390D4((uint64_t)v10, 0);
        *result = v8;
        v5 = *v4;
        v6 = ++v7;
      }
      while (v7 < (unint64_t)((v4[1] - *v4) >> 3));
    }
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

void sub_1D533922C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(_QWORD *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D5339248(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v3;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v3 = a1[1] - *a1;
  if (v3 && v3 < 0x319)
  {
    v5 = (_DWORD *)sub_1D5338C3C((uint64_t)a2, v3 >> 3, v3 >> 3);
    sub_1D5339324(v5);
    v6 = *a1;
    if (a1[1] != *a1)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(v6 + 8 * v7);
        v11[0] = sub_1D5339044((uint64_t)a2, v8);
        v11[1] = v10;
        *(_QWORD *)sub_1D53390D4((uint64_t)v11, v8) = v9;
        v6 = *a1;
        v7 = ++v8;
      }
      while (v8 < (unint64_t)((a1[1] - *a1) >> 3));
    }
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
  }
}

void sub_1D5339304(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(_QWORD *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D5339324(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  void *__p[3];

  v2 = (a1[1] * *a1);
  v3 = 0;
  sub_1D528F9B4(__p, v2, &v3);
  sub_1D533A15C(a1, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1D533937C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D5339398(unsigned int *a1)
{
  return *a1;
}

uint64_t sub_1D53393A0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

_QWORD *sub_1D53393A8(_QWORD *a1, uint64_t a2)
{
  void *v3;
  __int128 v5;
  uint64_t v6;

  if (a1 != (_QWORD *)a2)
  {
    *a1 = *(_QWORD *)a2;
    v5 = 0uLL;
    v6 = 0;
    sub_1D5282C70(&v5, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    v3 = (void *)a1[1];
    if (v3)
    {
      a1[2] = v3;
      operator delete(v3);
    }
    *(_OWORD *)(a1 + 1) = v5;
    a1[3] = v6;
  }
  return a1;
}

double *sub_1D5339420@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  double *result;
  unsigned int v7;
  unsigned int v8;
  unsigned int i;
  unsigned int j;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  void *exception;
  _QWORD v17[2];
  _QWORD v18[2];
  _QWORD v19[2];

  result = (double *)sub_1D5338C3C(a3, *a1, a1[1]);
  v7 = *a1;
  if (*a1 != *a2 || (v8 = a1[1], v8 != a2[1]))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v7)
  {
    for (i = 0; i < v7; ++i)
    {
      if (v8)
      {
        for (j = 0; j < v8; ++j)
        {
          v19[0] = sub_1D5339044((uint64_t)a1, i);
          v19[1] = v11;
          v12 = *(double *)sub_1D53390D4((uint64_t)v19, j);
          v18[0] = sub_1D5339044((uint64_t)a2, i);
          v18[1] = v13;
          v14 = *(double *)sub_1D53390D4((uint64_t)v18, j);
          v17[0] = sub_1D5339044(a3, i);
          v17[1] = v15;
          result = (double *)sub_1D53390D4((uint64_t)v17, j);
          *result = v12 + v14;
          v8 = a1[1];
        }
        v7 = *a1;
      }
    }
  }
  return result;
}

void sub_1D5339558(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(_QWORD *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double *sub_1D5339590@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double *result;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int i;
  uint64_t v11;
  double v12;
  uint64_t v13;
  _QWORD v14[2];
  _QWORD v15[2];

  result = (double *)sub_1D5338C3C(a2, *a1, a1[1]);
  v7 = *a1;
  if (*a1)
  {
    v8 = 0;
    v9 = a1[1];
    do
    {
      if (v9)
      {
        for (i = 0; i < v9; ++i)
        {
          v15[0] = sub_1D5339044((uint64_t)a1, v8);
          v15[1] = v11;
          v12 = *(double *)sub_1D53390D4((uint64_t)v15, i);
          v14[0] = sub_1D5339044(a2, v8);
          v14[1] = v13;
          result = (double *)sub_1D53390D4((uint64_t)v14, i);
          *result = v12 * a3;
          v9 = a1[1];
        }
        v7 = *a1;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return result;
}

void sub_1D5339654(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(_QWORD *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double *sub_1D5339674@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  double *result;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int i;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  void *exception;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  result = (double *)sub_1D5338C3C(a3, *a1, a2[1]);
  if (a1[1] != *a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v7 = *a1;
  if (*a1)
  {
    v8 = 0;
    v9 = a2[1];
    do
    {
      if (v9)
      {
        for (i = 0; i < v9; ++i)
        {
          v21 = sub_1D5339044(a3, v8);
          v22 = v11;
          result = (double *)sub_1D53390D4((uint64_t)&v21, i);
          *result = 0.0;
          if (a1[1])
          {
            v12 = 0;
            do
            {
              v21 = sub_1D5339044((uint64_t)a1, v8);
              v22 = v13;
              v14 = *(double *)sub_1D53390D4((uint64_t)&v21, v12);
              v20[0] = sub_1D5339044((uint64_t)a2, v12);
              v20[1] = v15;
              v16 = *(double *)sub_1D53390D4((uint64_t)v20, i);
              v19[0] = sub_1D5339044(a3, v8);
              v19[1] = v17;
              result = (double *)sub_1D53390D4((uint64_t)v19, i);
              *result = *result + v14 * v16;
              ++v12;
            }
            while (v12 < a1[1]);
          }
          v9 = a2[1];
        }
        v7 = *a1;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return result;
}

void sub_1D53397E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(_QWORD *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double *sub_1D5339824@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  double *result;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int i;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  void *exception;
  _QWORD v16[2];
  _QWORD v17[2];

  result = (double *)sub_1D5338C3C(a3, *a1, a1[1]);
  v7 = *a1;
  if (v7 != (uint64_t)(a2[1] - *a2) >> 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (*a1)
  {
    v8 = 0;
    v9 = a1[1];
    do
    {
      if (v9)
      {
        for (i = 0; i < v9; ++i)
        {
          v17[0] = sub_1D5339044((uint64_t)a1, v8);
          v17[1] = v11;
          v12 = *(double *)sub_1D53390D4((uint64_t)v17, i);
          v13 = *(double *)(*a2 + 8 * v8);
          v16[0] = sub_1D5339044(a3, v8);
          v16[1] = v14;
          result = (double *)sub_1D53390D4((uint64_t)v16, i);
          *result = v12 * v13;
          v9 = a1[1];
        }
        v7 = *a1;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return result;
}

void sub_1D533993C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(_QWORD *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D5339970@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD v13[2];

  result = (_QWORD *)sub_1D5338C3C(a2, a1[1], *a1);
  v5 = *a1;
  if (*a1)
  {
    v6 = 0;
    v7 = a1[1];
    do
    {
      if (v7)
      {
        for (i = 0; i < v7; ++i)
        {
          v13[0] = sub_1D5339044((uint64_t)a1, v6);
          v13[1] = v9;
          v10 = *(_QWORD *)sub_1D53390D4((uint64_t)v13, i);
          v12[0] = sub_1D5339044(a2, i);
          v12[1] = v11;
          result = (_QWORD *)sub_1D53390D4((uint64_t)v12, v6);
          *result = v10;
          v7 = a1[1];
        }
        v5 = *a1;
      }
      ++v6;
    }
    while (v6 < v5);
  }
  return result;
}

void sub_1D5339A2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(_QWORD *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D5339A4C(unsigned int *a1@<X0>, _OWORD *a2@<X8>)
{
  unsigned int v4;
  void *v6;
  double v7;
  void *v8;
  double v9;
  void *v10;
  double v11;
  void *v12;
  double v13;
  void *v14;
  double v15;
  void *v16;
  double v17;
  void *v18;
  double v19;
  void *v20;
  double v21;
  void *v22;
  double v23;
  double v24;
  uint64_t v25;
  double *v26;
  uint64_t i;
  double v28;
  void *v29;
  uint64_t v30;
  void *__p;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  double v36;
  void *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  if (*a1 == 3 && v4 == 3)
  {
    v36 = COERCE_DOUBLE(sub_1D5339044((uint64_t)a1, 0));
    v37 = v6;
    v7 = *(double *)sub_1D53390D4((uint64_t)&v36, 0);
    v36 = COERCE_DOUBLE(sub_1D5339044((uint64_t)a1, 0));
    v37 = v8;
    v9 = *(double *)sub_1D53390D4((uint64_t)&v36, 1u);
    v36 = COERCE_DOUBLE(sub_1D5339044((uint64_t)a1, 0));
    v37 = v10;
    v11 = *(double *)sub_1D53390D4((uint64_t)&v36, 2u);
    v36 = COERCE_DOUBLE(sub_1D5339044((uint64_t)a1, 1u));
    v37 = v12;
    v13 = *(double *)sub_1D53390D4((uint64_t)&v36, 0);
    v36 = COERCE_DOUBLE(sub_1D5339044((uint64_t)a1, 1u));
    v37 = v14;
    v15 = *(double *)sub_1D53390D4((uint64_t)&v36, 1u);
    v36 = COERCE_DOUBLE(sub_1D5339044((uint64_t)a1, 1u));
    v37 = v16;
    v17 = *(double *)sub_1D53390D4((uint64_t)&v36, 2u);
    v36 = COERCE_DOUBLE(sub_1D5339044((uint64_t)a1, 2u));
    v37 = v18;
    v19 = *(double *)sub_1D53390D4((uint64_t)&v36, 0);
    v36 = COERCE_DOUBLE(sub_1D5339044((uint64_t)a1, 2u));
    v37 = v20;
    v21 = *(double *)sub_1D53390D4((uint64_t)&v36, 1u);
    v36 = COERCE_DOUBLE(sub_1D5339044((uint64_t)a1, 2u));
    v37 = v22;
    v23 = *(double *)sub_1D53390D4((uint64_t)&v36, 2u);
    v36 = v15 * v23 - v21 * v17;
    *(double *)&v37 = v21 * v11 - v9 * v23;
    v38 = v9 * v17 - v15 * v11;
    v39 = v19 * v17 - v13 * v23;
    v40 = v7 * v23 - v19 * v11;
    v41 = v13 * v11 - v7 * v17;
    v42 = v13 * v21 - v19 * v15;
    v43 = v19 * v9 - v7 * v21;
    v44 = v7 * v15 - v13 * v9;
    v24 = v9 * v39 + v7 * v36 + v11 * v42;
    if (fabs(v24) >= 1.0e-10)
    {
      sub_1D5338C3C((uint64_t)a2, a1[1], *a1);
      v25 = 0;
      v26 = &v36;
      do
      {
        for (i = 0; i != 3; ++i)
        {
          v28 = v26[i];
          v33 = sub_1D5339044((uint64_t)a2, v25);
          v34 = v29;
          *(double *)sub_1D53390D4((uint64_t)&v33, i) = v28 / v24;
        }
        ++v25;
        v26 += 3;
      }
      while (v25 != 3);
      return;
    }
LABEL_13:
    *a2 = 0u;
    a2[1] = 0u;
    return;
  }
  if (*a1 == v4)
    goto LABEL_13;
  sub_1D5339970(a1, (uint64_t)&v36);
  sub_1D5339674((unsigned int *)&v36, a1, (uint64_t)&v33);
  sub_1D5339A4C(&v30, &v33);
  sub_1D5339674((unsigned int *)&v30, &v36, (uint64_t)a2);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  if (*(double *)&v37 != 0.0)
  {
    v38 = *(double *)&v37;
    operator delete(v37);
  }
}

void sub_1D5339D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

double sub_1D5339DC0@<D0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, _OWORD *a3@<X8>)
{
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  BOOL v8;
  double result;
  int v10;
  __int128 v11;
  uint64_t v12;
  unsigned int v13;
  void *v14;
  void *v15;

  if (*a2
    && (v5 = a2[1]) != 0
    && ((v6 = a1[1], *a1 != v6) ? (v7 = v6 == *a2) : (v7 = 0), v7 ? (v8 = *a1 == v5) : (v8 = 0), v8))
  {
    sub_1D5339674(a2, a1, (uint64_t)&v13);
    sub_1D5339A4C(&v13, &v11);
    v10 = v11;
    if ((_DWORD)v11)
      sub_1D5339674((unsigned int *)&v11, a2, (uint64_t)a3);
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = *((_QWORD *)&v11 + 1);
      operator delete(*((void **)&v11 + 1));
    }
    if (v14)
    {
      v15 = v14;
      operator delete(v14);
    }
    if (!v10)
    {
      result = 0.0;
      *a3 = 0u;
      a3[1] = 0u;
    }
  }
  else
  {
    sub_1D5339A4C(a1, a3);
  }
  return result;
}

void sub_1D5339E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

double *sub_1D5339EC4@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double *result;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int i;
  uint64_t v11;
  double v12;
  uint64_t v13;
  void *exception;
  _QWORD v15[2];
  _QWORD v16[2];

  if (a3 <= 1.0e-10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  result = (double *)sub_1D5338C3C(a2, *a1, a1[1]);
  v7 = *a1;
  if (*a1)
  {
    v8 = 0;
    v9 = a1[1];
    do
    {
      if (v9)
      {
        for (i = 0; i < v9; ++i)
        {
          v16[0] = sub_1D5339044((uint64_t)a1, v8);
          v16[1] = v11;
          v12 = *(double *)sub_1D53390D4((uint64_t)v16, i);
          v15[0] = sub_1D5339044(a2, v8);
          v15[1] = v13;
          result = (double *)sub_1D53390D4((uint64_t)v15, i);
          *result = 1.0 / a3 * round(v12 * a3);
          v9 = a1[1];
        }
        v7 = *a1;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  return result;
}

void sub_1D5339FE0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D533A010(unsigned int *a1, _DWORD *a2, double a3)
{
  unsigned int v3;
  unsigned int v6;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  double *v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[2];

  v3 = *a1;
  if (*a1 != *a2)
    return 0;
  v6 = a1[1];
  if (v6 != a2[1])
    return 0;
  if (v3)
  {
    v8 = 0;
    while (!v6)
    {
LABEL_13:
      ++v8;
      result = 1;
      if (v8 >= v3)
        return result;
    }
    v9 = 0;
    while (1)
    {
      v22[0] = sub_1D5339044((uint64_t)a1, v8);
      v22[1] = v10;
      v11 = (double *)sub_1D53390D4((uint64_t)v22, v9);
      v21[0] = sub_1D5339044((uint64_t)a2, v8);
      v21[1] = v12;
      v13 = (double *)sub_1D53390D4((uint64_t)v21, v9);
      v14 = *v11 >= *v13 ? *v11 : *v13;
      v20[0] = sub_1D5339044((uint64_t)a1, v8);
      v20[1] = v15;
      v16 = *(double *)sub_1D53390D4((uint64_t)v20, v9);
      v19[0] = sub_1D5339044((uint64_t)a2, v8);
      v19[1] = v17;
      if (v14 - fmin(v16, *(double *)sub_1D53390D4((uint64_t)v19, v9)) > a3)
        return 0;
      ++v9;
      v6 = a1[1];
      if (v9 >= v6)
      {
        v3 = *a1;
        goto LABEL_13;
      }
    }
  }
  return 1;
}

char *sub_1D533A15C(_DWORD *a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v6;
  char *result;
  void *exception;

  v3 = *(char **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = (v4 - (uint64_t)v3) >> 3;
  if (v6 != a1[1] * *a1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  result = (char *)(a1 + 2);
  if (result != (char *)a2)
    return sub_1D528FA34(result, v3, v4, v6);
  return result;
}

void sub_1D533A1DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1D533A1F0(unsigned int *a1)
{
  unsigned int v1;
  unsigned int v3;
  unsigned int v4;
  double v5;
  unsigned int i;
  uint64_t v7;
  double *v8;
  _QWORD v10[2];

  v1 = *a1;
  if (!*a1)
    return -INFINITY;
  v3 = 0;
  v4 = a1[1];
  v5 = -INFINITY;
  do
  {
    if (v4)
    {
      for (i = 0; i < v4; ++i)
      {
        v10[0] = sub_1D5339044((uint64_t)a1, v3);
        v10[1] = v7;
        v8 = (double *)sub_1D53390D4((uint64_t)v10, i);
        if (*v8 > v5)
          v5 = *v8;
        v4 = a1[1];
      }
      v1 = *a1;
    }
    ++v3;
  }
  while (v3 < v1);
  return v5;
}

double sub_1D533A29C(unsigned int *a1)
{
  unsigned int v1;
  unsigned int v3;
  unsigned int v4;
  double v5;
  unsigned int i;
  uint64_t v7;
  double *v8;
  _QWORD v10[2];

  v1 = *a1;
  if (!*a1)
    return INFINITY;
  v3 = 0;
  v4 = a1[1];
  v5 = INFINITY;
  do
  {
    if (v4)
    {
      for (i = 0; i < v4; ++i)
      {
        v10[0] = sub_1D5339044((uint64_t)a1, v3);
        v10[1] = v7;
        v8 = (double *)sub_1D53390D4((uint64_t)v10, i);
        if (*v8 < v5)
          v5 = *v8;
        v4 = a1[1];
      }
      v1 = *a1;
    }
    ++v3;
  }
  while (v3 < v1);
  return v5;
}

_QWORD *sub_1D533A348@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_1D5282C70(a2, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
}

id sub_1D533A364(unsigned int *a1)
{
  unsigned int v2;
  void *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int i;
  void *v8;
  uint64_t v9;
  double *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  if (*a1 && (v2 = a1[1]) != 0)
  {
    sub_1D52B261C(v2 * *a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = *a1;
    if (*a1)
    {
      v5 = 0;
      v6 = a1[1];
      do
      {
        if (v6)
        {
          for (i = 0; i < v6; ++i)
          {
            v8 = (void *)MEMORY[0x1E0CB37E8];
            v20[0] = sub_1D5339044((uint64_t)a1, v5);
            v20[1] = v9;
            v10 = (double *)sub_1D53390D4((uint64_t)v20, i);
            objc_msgSend_numberWithDouble_(v8, v11, v12, v13, v14, *v10);
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_addObject_(v3, v16, (uint64_t)v15, v17, v18);

            v6 = a1[1];
          }
          v4 = *a1;
        }
        ++v5;
      }
      while (v5 < v4);
    }
  }
  else
  {
    v3 = 0;
  }
  return v3;
}

void sub_1D533A444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D533A460(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      sub_1D5282B8C();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1D5282D28(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

id sub_1D533A568(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[11];
  _QWORD v43[2];

  v43[1] = *MEMORY[0x1E0C80C00];
  v5 = *MEMORY[0x1E0CBD388];
  v34 = *MEMORY[0x1E0CBD368];
  v35 = v5;
  v42[0] = MEMORY[0x1E0C9AAB0];
  v42[1] = CFSTR("com.sony.sr2-raw-image");
  v6 = *MEMORY[0x1E0CBD380];
  v36 = *MEMORY[0x1E0CBD348];
  v42[2] = CFSTR(".sr2.");
  v42[3] = &unk_1E99CB340;
  v42[4] = &unk_1E99CB358;
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], a2, (uint64_t)sub_1D5280C94, a4, a5, v34, v35, v36, v6, *MEMORY[0x1E0CBD370], *MEMORY[0x1E0CBD378]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v42[5] = v7;
  v37 = *MEMORY[0x1E0CBD330];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v8, (uint64_t)sub_1D533A81C, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v42[6] = v11;
  v38 = *MEMORY[0x1E0CBD350];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v12, (uint64_t)sub_1D533A828, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v42[7] = v15;
  v39 = *MEMORY[0x1E0CBD338];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v16, (uint64_t)sub_1D52E8DA4, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v42[8] = v19;
  v40 = *MEMORY[0x1E0CBD358];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v20, (uint64_t)sub_1D533A834, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v42[9] = v23;
  v41 = *MEMORY[0x1E0CBD360];
  objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v24, (uint64_t)sub_1D533A840, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v42[10] = v27;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v28, (uint64_t)v42, (uint64_t)&v34, 11);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v43[0] = v29;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v30, (uint64_t)v43, 1, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();

  return v32;
}

void sub_1D533A7BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1D533A81C(const void *a1, uint64_t a2, uint64_t a3)
{
  sub_1D52E7A20(a1, a2, a3, &unk_1E997ED40);
}

uint64_t sub_1D533A828(os_signpost_id_t a1)
{
  return sub_1D52E8C40(a1);
}

uint64_t sub_1D533A834(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1D52E7438(a1, a2, a3, &unk_1E997ED40);
}

uint64_t sub_1D533A840(os_signpost_id_t a1, unint64_t a2, unint64_t a3)
{
  return sub_1D52E9A7C(a1, a2, a3, &unk_1E997ED40);
}

void sub_1D533A84C(uint64_t *a1@<X1>, char a2@<W2>, void *a3@<X3>, void *a4@<X4>, _OWORD *a5@<X8>)
{
  __int128 v8;
  id v9;
  id v10;
  char v11;

  v11 = a2;
  v10 = a3;
  v9 = a4;
  sub_1D533C2B8(a1, &v11, &v10, &v9, &v8);
  *a5 = v8;

}

void sub_1D533A8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1D533A8E4()
{
  return 2;
}

void sub_1D533A8EC(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int16 *v10;
  size_t v11;
  void **v12;
  const void *v13;
  _QWORD *v14;
  void *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  size_t v30;
  void **v31;
  const void *v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  size_t v39;
  _QWORD *v40;
  const void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  size_t v45;
  void **v46;
  const void *v47;
  uint64_t *v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  double v55;
  double v56;
  double v57;
  double v58;
  size_t v59;
  void **v60;
  const void *v61;
  char *v62;
  void *__p[2];
  uint64_t v64;
  _QWORD v65[2];
  char v66;
  void *v67[2];
  uint64_t v68;
  void *v69;
  char *v70;
  void **__src;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  sub_1D52ABE88((uint64_t **)a1, a2, a3);
  v6 = *a3;
  if (v6 > 0x7305)
  {
    switch(*a3)
    {
      case 0x74A0u:
        sub_1D533B894(a1, (uint64_t)a3, 2u);
        break;
      case 0x74A1u:
        sub_1D533B894(a1, (uint64_t)a3, 3u);
        break;
      case 0x74A2u:
        sub_1D533B894(a1, (uint64_t)a3, 0);
        break;
      case 0x74A3u:
        sub_1D533B894(a1, (uint64_t)a3, 1u);
        break;
      default:
        if (v6 == 29446)
        {
          if (a3[1] == 3 && *((_DWORD *)a3 + 1) == 4)
          {
            sub_1D52917E4(a1, v67);
            sub_1D52A79AC((uint64_t)a3, (uint64_t *)v67, (uint64_t)&v69);
            v52 = (std::__shared_weak_count *)v67[1];
            if (v67[1])
            {
              v53 = (unint64_t *)((char *)v67[1] + 8);
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v16 = (unsigned __int16 *)v69;
            if (v70 - (_BYTE *)v69 == 8)
            {
              LOWORD(v50) = *((_WORD *)v69 + 2);
              LOWORD(v51) = *((_WORD *)v69 + 3);
              v55 = (double)v51;
              v56 = fmax((double)v50, v55);
              LOWORD(v55) = *((_WORD *)v69 + 1);
              v57 = (double)*(unint64_t *)&v55;
              v58 = fmax(v57, v56);
              LOWORD(v57) = *(_WORD *)v69;
              __src = COERCE_VOID_(fmax((double)*(unint64_t *)&v57, v58));
              if (*(char *)(a2 + 23) >= 0)
                v59 = *(unsigned __int8 *)(a2 + 23);
              else
                v59 = *(_QWORD *)(a2 + 8);
              v60 = v67;
              sub_1D52B1FA0((uint64_t)v67, v59 + 7);
              if (v68 < 0)
                v60 = (void **)v67[0];
              if (v59)
              {
                if (*(char *)(a2 + 23) >= 0)
                  v61 = (const void *)a2;
                else
                  v61 = *(const void **)a2;
                memmove(v60, v61, v59);
              }
              strcpy((char *)v60 + v59, ":0x7306");
              __p[0] = v67;
              v62 = (char *)sub_1D52BA2C8((uint64_t **)(a1 + 240), v67, (uint64_t)&unk_1D544A5C4, (_OWORD **)__p);
              sub_1D528FA34(v62 + 56, (char *)&__src, (uint64_t)&v72, 1uLL);
              goto LABEL_142;
            }
            goto LABEL_145;
          }
        }
        else if (v6 == 50740 && a3[1] == 1 && *((_DWORD *)a3 + 1) == 4)
        {
          v17 = *(unsigned __int8 *)(a2 + 23);
          v18 = (char)v17;
          if ((v17 & 0x80u) != 0)
            v17 = *(_QWORD *)(a2 + 8);
          if (v17 == 4)
          {
            v19 = v18 >= 0 ? (_DWORD *)a2 : *(_DWORD **)a2;
            if (*v19 == 809780809)
            {
              __p[0] = 0;
              sub_1D52917E4(a1, &v69);
              v20 = sub_1D52845E4((uint64_t)v69);
              v21 = *((_DWORD *)a3 + 2);
              v22 = bswap32(v21);
              if (v20 == 2)
                v23 = (void *)v22;
              else
                v23 = (void *)v21;
              v24 = (std::__shared_weak_count *)v70;
              if (v70)
              {
                v25 = (unint64_t *)(v70 + 8);
                do
                  v26 = __ldaxr(v25);
                while (__stlxr(v26 - 1, v25));
                if (!v26)
                {
                  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                  std::__shared_weak_count::__release_weak(v24);
                }
              }
              __p[0] = v23;
              sub_1D52917E4(a1, v67);
              sub_1D528594C(&__src, (uint64_t *)__p);
              sub_1D5285164((uint64_t *)&v69, (uint64_t *)v67, (uint64_t)&__src, 0);
              v27 = (std::__shared_weak_count *)v67[1];
              if (v67[1])
              {
                v28 = (unint64_t *)((char *)v67[1] + 8);
                do
                  v29 = __ldaxr(v28);
                while (__stlxr(v29 - 1, v28));
                if (!v29)
                {
                  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                  std::__shared_weak_count::__release_weak(v27);
                }
              }
              if (*(char *)(a2 + 23) >= 0)
                v30 = *(unsigned __int8 *)(a2 + 23);
              else
                v30 = *(_QWORD *)(a2 + 8);
              v31 = v67;
              sub_1D52B1FA0((uint64_t)v67, v30 + 11);
              if (v68 < 0)
                v31 = (void **)v67[0];
              if (v30)
              {
                if (*(char *)(a2 + 23) >= 0)
                  v32 = (const void *)a2;
                else
                  v32 = *(const void **)a2;
                memmove(v31, v32, v30);
              }
              strcpy((char *)v31 + v30, ":SR2Private");
              (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)a1 + 704))(a1, 0, v67);
              if (SHIBYTE(v68) < 0)
                operator delete(v67[0]);
              sub_1D5285200((uint64_t *)&v69);
            }
          }
        }
        break;
    }
  }
  else if (*a3 <= 0x7220u)
  {
    if (v6 == 29184)
    {
      if (a3[1] == 4 && *((_DWORD *)a3 + 1) == 1)
        *(_DWORD *)(a1 + 1180) = *((_DWORD *)a3 + 2);
    }
    else if (v6 == 29185 && a3[1] == 4 && *((_DWORD *)a3 + 1) == 1)
    {
      *(_DWORD *)(a1 + 1184) = *((_DWORD *)a3 + 2);
    }
  }
  else if (v6 == 29217)
  {
    if (a3[1] == 7 && *((_DWORD *)a3 + 1) == 4)
    {
      sub_1D52917E4(a1, &v69);
      v33 = sub_1D52845E4((uint64_t)v69);
      v34 = bswap32(*((_DWORD *)a3 + 2));
      if (v33 == 2)
        v35 = v34;
      else
        v35 = *((_DWORD *)a3 + 2);
      v36 = (std::__shared_weak_count *)v70;
      if (v70)
      {
        v37 = (unint64_t *)(v70 + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      if (*(char *)(a2 + 23) >= 0)
        v39 = *(unsigned __int8 *)(a2 + 23);
      else
        v39 = *(_QWORD *)(a2 + 8);
      v40 = v65;
      sub_1D52B1FA0((uint64_t)v65, v39 + 10);
      if (v66 < 0)
        v40 = (_QWORD *)v65[0];
      if (v39)
      {
        if (*(char *)(a2 + 23) >= 0)
          v41 = (const void *)a2;
        else
          v41 = *(const void **)a2;
        memmove(v40, v41, v39);
      }
      strcpy((char *)v40 + v39, ":SR2SubIFD");
      sub_1D533B350((_QWORD *)a1, (uint64_t)v65, *(_DWORD *)(a1 + 1180), *(_DWORD *)(a1 + 1184), v35);
      if (v66 < 0)
      {
        v16 = (unsigned __int16 *)v65[0];
        goto LABEL_147;
      }
    }
  }
  else if (v6 == 29440)
  {
    if (a3[1] == 3 && *((_DWORD *)a3 + 1) == 4)
    {
      sub_1D52917E4(a1, v67);
      sub_1D52A79AC((uint64_t)a3, (uint64_t *)v67, (uint64_t)&v69);
      v42 = (std::__shared_weak_count *)v67[1];
      if (v67[1])
      {
        v43 = (unint64_t *)((char *)v67[1] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v16 = (unsigned __int16 *)v69;
      if (v70 - (_BYTE *)v69 == 8)
      {
        if (*(char *)(a2 + 23) >= 0)
          v45 = *(unsigned __int8 *)(a2 + 23);
        else
          v45 = *(_QWORD *)(a2 + 8);
        v46 = v67;
        sub_1D52B1FA0((uint64_t)v67, v45 + 12);
        if (v68 < 0)
          v46 = (void **)v67[0];
        if (v45)
        {
          if (*(char *)(a2 + 23) >= 0)
            v47 = (const void *)a2;
          else
            v47 = *(const void **)a2;
          memmove(v46, v47, v45);
        }
        strcpy((char *)v46 + v45, ":BlackLevels");
        __p[1] = 0;
        v64 = 0;
        __p[0] = 0;
        sub_1D52EFBC0((char *)__p, (unsigned __int16 *)v69, (unsigned __int16 *)v70, (v70 - (_BYTE *)v69) >> 1);
        __src = v67;
        v48 = sub_1D52B3E7C((uint64_t **)(a1 + 264), v67, (uint64_t)&unk_1D544A5C4, (__int128 **)&__src);
        v49 = (void *)v48[7];
        if (v49)
        {
          v48[8] = (uint64_t)v49;
          operator delete(v49);
          v48[7] = 0;
          v48[8] = 0;
          v48[9] = 0;
        }
        *(_OWORD *)(v48 + 7) = *(_OWORD *)__p;
        v48[9] = v64;
LABEL_142:
        if (SHIBYTE(v68) < 0)
          operator delete(v67[0]);
        v16 = (unsigned __int16 *)v69;
      }
LABEL_145:
      if (v16)
      {
        v70 = (char *)v16;
        goto LABEL_147;
      }
    }
  }
  else if (v6 == 29443 && a3[1] == 3 && *((_DWORD *)a3 + 1) == 4)
  {
    sub_1D52917E4(a1, v67);
    sub_1D52A79AC((uint64_t)a3, (uint64_t *)v67, (uint64_t)&v69);
    v7 = (std::__shared_weak_count *)v67[1];
    if (v67[1])
    {
      v8 = (unint64_t *)((char *)v67[1] + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = (unsigned __int16 *)v69;
    if (v70 - (_BYTE *)v69 == 8)
    {
      v67[0] = 0;
      v67[1] = 0;
      v68 = 0;
      sub_1D52BA100((char *)v67, (unsigned __int16 *)v69, (unsigned __int16 *)v70, 4uLL);
      if (*(char *)(a2 + 23) >= 0)
        v11 = *(unsigned __int8 *)(a2 + 23);
      else
        v11 = *(_QWORD *)(a2 + 8);
      v12 = __p;
      sub_1D52B1FA0((uint64_t)__p, v11 + 9);
      if (v64 < 0)
        v12 = (void **)__p[0];
      if (v11)
      {
        if (*(char *)(a2 + 23) >= 0)
          v13 = (const void *)a2;
        else
          v13 = *(const void **)a2;
        memmove(v12, v13, v11);
      }
      strcpy((char *)v12 + v11, ":WBLevels");
      __src = __p;
      v14 = sub_1D52BA2C8((uint64_t **)(a1 + 120), __p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&__src);
      v15 = (void *)v14[7];
      if (v15)
      {
        v14[8] = v15;
        operator delete(v15);
        v14[7] = 0;
        v14[8] = 0;
        v14[9] = 0;
      }
      *(_OWORD *)(v14 + 7) = *(_OWORD *)v67;
      v14[9] = v68;
      v67[1] = 0;
      v68 = 0;
      v67[0] = 0;
      if (SHIBYTE(v64) < 0)
      {
        operator delete(__p[0]);
        if (v67[0])
        {
          v67[1] = v67[0];
          operator delete(v67[0]);
        }
      }
      v10 = (unsigned __int16 *)v69;
    }
    if (v10)
    {
      v70 = (char *)v10;
      v16 = v10;
LABEL_147:
      operator delete(v16);
    }
  }
}

void sub_1D533B24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (a26 < 0)
    operator delete(__p);
  sub_1D5285200((uint64_t *)&a28);
  _Unwind_Resume(a1);
}

void sub_1D533B350(_QWORD *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  __int128 v47;
  uint64_t v48[3];
  void *__p[3];
  unsigned int v50;
  _OWORD v51[32];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v50 = a3;
  if (a3 && a4 && a4 - 2049 <= 0x37FE && (a4 & 3) == 0)
  {
    v8 = 0;
    memset(v51, 0, sizeof(v51));
    do
    {
      a5 = 48828125 * a5 + 1;
      *(_DWORD *)((char *)v51 + v8) = a5;
      v8 += 4;
    }
    while (v8 != 16);
    v9 = 0;
    v10 = DWORD2(v51[0]);
    v11 = v51[0];
    v12 = (*((_QWORD *)&v51[0] + 1) ^ (unint64_t)LODWORD(v51[0])) >> 31;
    HIDWORD(v51[0]) = v12;
    do
    {
      v13 = v10 ^ v11;
      v11 = *(_DWORD *)((char *)v51 + v9 + 4);
      v10 = v12;
      HIDWORD(v14) = v13;
      LODWORD(v14) = v12 ^ v11;
      v12 = v14 >> 31;
      *(_DWORD *)((char *)&v51[1] + v9) = v12;
      v9 += 4;
    }
    while (v9 != 492);
    v15 = a4 >> 2;
    sub_1D52854D0(__p, a4 >> 2);
    sub_1D52917E4((uint64_t)a1, &v47);
    sub_1D52B1C58(v48, (uint64_t *)&v47);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    sub_1D52917E4((uint64_t)a1, &v45);
    sub_1D5293C20((uint64_t *)&v47, &v45, 2);
    v19 = v46;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    sub_1D52917E4((uint64_t)a1, &v45);
    v22 = v45;
    sub_1D5282F74(&v44, (int *)&v50);
    (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v22 + 40))(v22, &v44, 0);
    v23 = v46;
    if (v46)
    {
      v24 = (unint64_t *)&v46->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (a4 >= 4)
    {
      v26 = 0;
      if (v15 <= 1)
        v27 = 1;
      else
        v27 = v15;
      do
      {
        sub_1D52917E4((uint64_t)a1, &v45);
        v28 = sub_1D52847F8(v45);
        *((_DWORD *)__p[0] + v26) = v28;
        v29 = v46;
        if (v46)
        {
          v30 = (unint64_t *)&v46->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        ++v26;
      }
      while (v26 != v27);
      v32 = 0;
      v33 = __p[0];
      do
      {
        v34 = *((_DWORD *)v51 + (((_BYTE)v32 - 64) & 0x7F)) ^ *((_DWORD *)v51 + (((_BYTE)v32 + 0x80) & 0x7F));
        *((_DWORD *)v51 + (((_BYTE)v32 - 1) & 0x7F)) = v34;
        v33[v32++] ^= v34;
      }
      while (v27 != v32);
      v35 = (unsigned int *)__p[0];
      do
      {
        *v35 = bswap32(*v35);
        ++v35;
        --v27;
      }
      while (v27);
    }
    sub_1D5293C98((uint64_t *)&v47);
    LODWORD(v45) = a4;
    sub_1D52843AC((uint64_t)__p[0], (uint64_t)&v45, 0, &v47);
    sub_1D52845EC(v47, 1);
    v36 = v47;
    v45 = -(uint64_t)v50;
    sub_1D528594C(&v44, &v45);
    sub_1D52845FC(v36, &v44);
    v37 = v47;
    sub_1D5282F74((int *)&v45, (int *)&v50);
    (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v37 + 40))(v37, &v45, 0);
    sub_1D52917E4((uint64_t)a1, &v45);
    sub_1D52908C8(a1 + 10, (uint64_t *)&v47);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*a1 + 704))(a1, 0, a2);
    sub_1D52908C8(a1 + 10, &v45);
    v38 = v46;
    if (v46)
    {
      v39 = (unint64_t *)&v46->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    sub_1D5285200(v48);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_1D533B7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D533B894(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void *v7;
  double v8;
  int v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *i;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  double v27;

  if (a3 <= 3 && *(_WORD *)(a2 + 2) == 5 && *(_DWORD *)(a2 + 4) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 400))(a1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      v27 = 0.0;
      sub_1D52917E4(a1, &v25);
      v9 = sub_1D52A7374(a2, &v27, &v25, v8);
      v10 = v9;
      v11 = v26;
      if (!v26)
        goto LABEL_12;
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (v10)
        {
LABEL_13:
          sub_1D52E1FDC(v7, (void *)*MEMORY[0x1E0CBCA28], 0);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D533BA50(v14, CFSTR("LensInfo"));
          for (i = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend_count(i, v15, v16, v17, v18) < (unint64_t)a3;
          objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v20, v21, v22, v23, v27);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          sub_1D533BB0C(i, v24, a3);

        }
      }
      else
      {
LABEL_12:
        if (v9)
          goto LABEL_13;
      }
    }

  }
}

void sub_1D533BA04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id sub_1D533BA50(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;

  v3 = a1;
  v4 = a2;
  objc_msgSend_objectForKeyedSubscript_(v3, v5, (uint64_t)v4, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v9, v10, v11, v12);
    v13 = objc_claimAutoreleasedReturnValue();

    v8 = (void *)v13;
    objc_msgSend_setObject_forKey_(v3, v14, v13, (uint64_t)v4, v15);
  }

  return v8;
}

void sub_1D533BAEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D533BB0C(void *a1, void *a2, unint64_t a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  const char *v10;
  uint64_t v11;
  void *exception;
  id v13;

  v13 = a1;
  v9 = a2;
  if (v13)
  {
    if (!v9 || objc_msgSend_count(v13, v5, v6, v7, v8) < a3)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    objc_msgSend_insertObject_atIndex_(v13, v10, (uint64_t)v9, a3, v11);
  }

}

void sub_1D533BBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  __cxa_free_exception(v11);

  _Unwind_Resume(a1);
}

uint64_t sub_1D533BBFC(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  sub_1D52850A0(__p, "IFD0:SUBIFD0");
  v2 = sub_1D52B0BBC(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D533BC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D533BC70(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  sub_1D52850A0(__p, "IFD0:SUBIFD0");
  v2 = sub_1D52B0C2C(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D533BCC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1D533BCE4(uint64_t a1)
{
  unint64_t v2;
  void *__p[2];
  char v5;

  sub_1D52850A0(__p, "IFD0:SUBIFD0");
  v2 = sub_1D52B0D58(a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1D533BD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D533BD58(uint64_t a1)
{
  _BOOL4 v2;
  void *__p[2];
  char v5;
  unsigned int v6;

  v6 = 1;
  sub_1D52850A0(__p, "IFD0:SUBIFD0");
  v2 = sub_1D52A89D8(a1, __p, &v6);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v2)
    return v6;
  else
    return 1;
}

void sub_1D533BDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D533BDE0(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 536))(a1) == 1)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 384))(&v12, a1);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1);
    sub_1D52C0774(&v12, (unint64_t *)&v11, a2, a3, &v14);
    v8 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    *(_OWORD *)a4 = v14;
  }
  else
  {
    sub_1D52919DC(a4);
  }
}

void sub_1D533BED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D533BEE8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  std::string __p;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t *v45;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_1D52850A0(&__p, "sr2");
  v4 = a2[2];
  v5 = a2[1];
  if (v5 >= v4)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a2) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a2) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v45 = a2 + 2;
    if (v10)
      v11 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v10);
    else
      v11 = 0;
    v12 = &v11[24 * v7];
    v41 = v11;
    v42 = v12;
    v44 = &v11[24 * v10];
    v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v12 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v12 = v13;
    memset(&__p, 0, sizeof(__p));
    v43 = v12 + 24;
    sub_1D5293D58(a2, &v41);
    v14 = a2[1];
    sub_1D5293F24((uint64_t)&v41);
    v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v14;
    if (v15 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v5 = v6;
    a2[1] = v5 + 24;
  }
  sub_1D52850A0(&__p, "sony");
  v17 = a2[1];
  v16 = a2[2];
  if (v17 >= v16)
  {
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a2) >> 3);
    v20 = v19 + 1;
    if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a2) >> 3);
    if (2 * v21 > v20)
      v20 = 2 * v21;
    if (v21 >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v20;
    v45 = a2 + 2;
    if (v22)
      v23 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v22);
    else
      v23 = 0;
    v24 = &v23[24 * v19];
    v41 = v23;
    v42 = v24;
    v44 = &v23[24 * v22];
    v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v24 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v24 = v25;
    memset(&__p, 0, sizeof(__p));
    v43 = v24 + 24;
    sub_1D5293D58(a2, &v41);
    v26 = a2[1];
    sub_1D5293F24((uint64_t)&v41);
    v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v26;
    if (v27 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v17 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v17 = v18;
    a2[1] = v17 + 24;
  }
  sub_1D5293780(a1, &__p);
  v29 = a2[1];
  v28 = a2[2];
  if (v29 >= v28)
  {
    v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *a2) >> 3);
    v32 = v31 + 1;
    if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D5282B8C();
    v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a2) >> 3);
    if (2 * v33 > v32)
      v32 = 2 * v33;
    if (v33 >= 0x555555555555555)
      v34 = 0xAAAAAAAAAAAAAAALL;
    else
      v34 = v32;
    v45 = a2 + 2;
    if (v34)
      v35 = (char *)sub_1D5293DCC((uint64_t)(a2 + 2), v34);
    else
      v35 = 0;
    v36 = &v35[24 * v31];
    v41 = v35;
    v42 = v36;
    v44 = &v35[24 * v34];
    v37 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v36 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v36 = v37;
    memset(&__p, 0, sizeof(__p));
    v43 = v36 + 24;
    sub_1D5293D58(a2, &v41);
    v38 = a2[1];
    sub_1D5293F24((uint64_t)&v41);
    v39 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    a2[1] = v38;
    if (v39 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v30 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v29 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v29 = v30;
    a2[1] = v29 + 24;
  }
}

void sub_1D533C23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1D5293F24((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_1D5293CCC((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1D533C294(uint64_t a1)
{
  sub_1D52B2190(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D533C2B8(uint64_t *a1@<X1>, char *a2@<X2>, void **a3@<X3>, void **a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x4C0uLL);
  sub_1D533C338(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D533C324(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D533C338(_QWORD *a1, uint64_t *a2, char *a3, void **a4, void **a5)
{
  a1[2] = 0;
  *a1 = &unk_1E997F0A8;
  a1[1] = 0;
  sub_1D52A7E98((uint64_t)(a1 + 3), a2, *a3, *a4, *a5);
  a1[3] = off_1E997ED70;
  return a1;
}

void sub_1D533C388(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D533C39C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E997F0A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D533C3B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E997F0A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D533C3E4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_1D533C3F4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *__p[2];
  char v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *v9;
  int v10;

  v10 = 0;
  v9 = &unk_1E997A7E8;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v7);
  v1 = v7;
  sub_1D52850A0(__p, "IFD0:SR2Private:SR2SubIFD:WBLevels");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v1 + 600))(v1, __p, &v9, 3);
  if (v6 < 0)
    operator delete(__p[0]);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1D533C4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1D533C4E4(uint64_t a1)
{
  uint64_t v2;
  char v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1) & 1) == 0)
  {
    v11 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v9, a1);
    v2 = v9;
    sub_1D52850A0(__p, "IFD0:SR2Private:SR2SubIFD:0x7306");
    v3 = (*(uint64_t (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v2 + 240))(v2, __p, &v11);
    if (v8 < 0)
      operator delete(__p[0]);
    v4 = v10;
    if (!v10)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if ((v3 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
LABEL_8:
      if ((v3 & 1) != 0)
      {
LABEL_9:
        (*(double (**)(uint64_t))(*(_QWORD *)a1 + 848))(a1);
        return;
      }
    }
  }
  sub_1D5425BA8(a1);
}

void sub_1D533C5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1D533C610(uint64_t a1@<X0>, void **a2@<X8>)
{
  uint64_t v4;
  char v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1) & 1) != 0)
    goto LABEL_12;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v12, a1);
  v4 = v12;
  sub_1D52850A0(__p, "IFD0:SR2Private:SR2SubIFD:BlackLevels");
  v5 = (*(uint64_t (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v4 + 248))(v4, __p, a2, 0);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if ((v5 & 1) == 0)
  {
    v9 = *a2;
    if (*a2)
    {
      a2[1] = v9;
      operator delete(v9);
    }
LABEL_12:
    sub_1D5422158(a1, a2);
  }
}

void sub_1D533C708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  void *v18;

  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  v18 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_1D533C74C(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_1D5295668(a1, a2);
  result[38] = result + 39;
  result[39] = 0;
  result[42] = 0;
  result[43] = 0;
  result[40] = 0;
  result[41] = result + 42;
  result[44] = result + 45;
  result[45] = 0;
  result[46] = 0;
  result[47] = result + 48;
  result[48] = 0;
  result[49] = 0;
  *result = off_1E997FCA8;
  result[51] = 0;
  result[52] = 0;
  result[50] = 0;
  return result;
}

_QWORD *sub_1D533C79C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D52850A0(a1, "Adobe");
}

_QWORD *sub_1D533C7AC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D52850A0(a1, "DNG");
}

void sub_1D533C7BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;

  v2 = *(__int128 **)(a1 + 400);
  v3 = *(__int128 **)(a1 + 408);
  if (v3 == v2)
  {
    sub_1D52961EC(a1, a2);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    sub_1D533DEBC((char *)a2, v2, v3, 0xAAAAAAAAAAAAAAABLL * (((char *)v3 - (char *)v2) >> 3));
  }
}

void sub_1D533C7EC(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  void *v4;
  void **p_lpsrc;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  double v10;
  int v11;
  double v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *exception;
  void *lpsrc;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9976FF0, 0)) != 0)
  {
    v20 = (uint64_t)v4;
    v21 = v19;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = (void **)&v20;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v6 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v20;
  if (!v20)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1016))(&lpsrc, a1);
  v10 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2168))(a1);
  v12 = sub_1D5301F60(v9);
  v13.n128_f64[0] = sub_1D53AFC00((uint64_t)&lpsrc, v11, a2, v10, v12);
  if (lpsrc)
  {
    v19 = (std::__shared_weak_count *)lpsrc;
    operator delete(lpsrc);
  }
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v13);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1D533C988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  sub_1D5282EB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1D533C9C8(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  void *v3;
  void **v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *lpsrc[2];
  __int128 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;

  v22 = 0uLL;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(lpsrc);
  if (lpsrc[0]
    && (v3 = __dynamic_cast(lpsrc[0], (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9976FF0, 0)) != 0)
  {
    v20 = (uint64_t)v3;
    v21 = (std::__shared_weak_count *)lpsrc[1];
    v4 = lpsrc;
  }
  else
  {
    v4 = (void **)&v20;
  }
  *v4 = 0;
  v4[1] = 0;
  v5 = (std::__shared_weak_count *)lpsrc[1];
  if (lpsrc[1])
  {
    v6 = (unint64_t *)((char *)lpsrc[1] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v20;
  if (v20)
  {
    if (sub_1D5301F68(v20))
    {
      sub_1D5301FA8(v8, (uint64_t)lpsrc);
      sub_1D53945F8((uint64_t)lpsrc, &v19);
      *a2 = v19;
      v19 = 0uLL;
      if (lpsrc[0])
      {
        lpsrc[1] = lpsrc[0];
        operator delete(lpsrc[0]);
      }
    }
    else
    {
      *(_QWORD *)&v19 = sub_1D5301F60(v8);
      sub_1D5394590(&v19, lpsrc);
      *a2 = *(_OWORD *)lpsrc;
    }
    v12 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    v9 = v21;
    if (v21)
    {
      v10 = (unint64_t *)&v21->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    *a2 = v22;
  }
}

void sub_1D533CB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  if (__p)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a15);
  sub_1D5282EB4(v15 - 32);
  _Unwind_Resume(a1);
}

double sub_1D533CBD8(uint64_t a1)
{
  void *v2;
  void **p_lpsrc;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *exception;
  void *lpsrc;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v2 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9976FF0, 0)) != 0)
  {
    v19 = (uint64_t)v2;
    v20 = v18;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = (void **)&v19;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v4 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v19)
  {
    if (sub_1D5301F68(v19))
    {
      sub_1D5301FA8(v19, (uint64_t)&lpsrc);
      v7 = lpsrc;
      if ((unint64_t)((char *)v18 - (_BYTE *)lpsrc) <= 0xF)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v8 = sqrt(*((double *)lpsrc + 1) + *(double *)lpsrc * 0.18);
      v9 = 100.0;
    }
    else
    {
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
      v7 = 0;
      v8 = sqrt((double)v11 / 100.0) * sub_1D5301F60(v19);
      v9 = 0.2;
    }
    v10 = fmin(fmax(v8 * v9, 0.1), 5.0);
  }
  else
  {
    v7 = 0;
    v10 = 1.0;
  }
  v12 = v20;
  if (v20)
  {
    v13 = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v7)
    operator delete(v7);
  return v10;
}

void sub_1D533CDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D533CE00(uint64_t a1@<X0>, void **a2@<X8>)
{
  uint64_t v4;
  char v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  double *v32;
  double *v33;
  double *v34;
  unint64_t v35;
  double *v36;
  unint64_t v37;
  double *v38;
  unint64_t v39;
  unint64_t v40;
  void *__p;
  __int128 v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  void *v45;
  double *v46;
  uint64_t v47;
  void *v48;
  _BYTE *v49;
  uint64_t v50;
  double *v51;
  double *v52;
  uint64_t v53;

  v51 = 0;
  sub_1D528F9B4(a2, 4uLL, &v51);
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v43, a1);
  v4 = v43;
  sub_1D52850A0(&__p, "IFD0:SUBIFD0");
  v5 = (*(uint64_t (**)(uint64_t, void **, double **, _QWORD))(*(_QWORD *)v4 + 248))(v4, &__p, &v51, 0);
  if (SHIBYTE(v42) < 0)
    operator delete(__p);
  v6 = v44;
  if (!v44)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v44->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if ((v5 & 1) != 0)
      goto LABEL_16;
  }
  else
  {
LABEL_7:
    if ((v5 & 1) != 0)
      goto LABEL_16;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v43, a1);
  v9 = v43;
  sub_1D52850A0(&__p, "IFD0");
  (*(void (**)(uint64_t, void **, double **, _QWORD))(*(_QWORD *)v9 + 248))(v9, &__p, &v51, 0);
  if (SHIBYTE(v42) < 0)
    operator delete(__p);
  v10 = v44;
  if (v44)
  {
    v11 = (unint64_t *)&v44->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_16:
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v43, a1);
  v13 = v43;
  sub_1D52850A0(&__p, "IFD0:SUBIFD0:DeltaH");
  v14 = (*(uint64_t (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v13 + 248))(v13, &__p, &v48, 0);
  if (SHIBYTE(v42) < 0)
    operator delete(__p);
  v15 = v44;
  if (!v44)
    goto LABEL_22;
  v16 = (unint64_t *)&v44->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if ((v14 & 1) != 0)
      goto LABEL_31;
  }
  else
  {
LABEL_22:
    if ((v14 & 1) != 0)
      goto LABEL_31;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v43, a1);
  v18 = v43;
  sub_1D52850A0(&__p, "IFD0:DeltaH");
  (*(void (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v18 + 248))(v18, &__p, &v48, 0);
  if (SHIBYTE(v42) < 0)
    operator delete(__p);
  v19 = v44;
  if (v44)
  {
    v20 = (unint64_t *)&v44->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_31:
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v43, a1);
  v22 = v43;
  sub_1D52850A0(&__p, "IFD0:SUBIFD0:DeltaV");
  v23 = (*(uint64_t (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v22 + 248))(v22, &__p, &v45, 0);
  if (SHIBYTE(v42) < 0)
    operator delete(__p);
  v24 = v44;
  if (!v44)
    goto LABEL_37;
  v25 = (unint64_t *)&v44->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if ((v23 & 1) != 0)
      goto LABEL_46;
  }
  else
  {
LABEL_37:
    if ((v23 & 1) != 0)
      goto LABEL_46;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v43, a1);
  v27 = v43;
  sub_1D52850A0(&__p, "IFD0:DeltaV");
  (*(void (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v27 + 248))(v27, &__p, &v45, 0);
  if (SHIBYTE(v42) < 0)
    operator delete(__p);
  v28 = v44;
  if (v44)
  {
    v29 = (unint64_t *)&v44->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
LABEL_46:
  v43 = 0;
  sub_1D528F9B4(&__p, 4uLL, &v43);
  v31 = *a2;
  if (*a2)
  {
    a2[1] = v31;
    operator delete(v31);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  v32 = (double *)__p;
  *a2 = __p;
  v33 = (double *)v42;
  *(_OWORD *)(a2 + 1) = v42;
  v34 = (double *)v45;
  if (v33 != v32)
  {
    v35 = 0;
    v36 = v51;
    v37 = v52 - v51;
    v38 = (double *)v48;
    v39 = (v49 - (_BYTE *)v48) >> 3;
    v40 = ((char *)v46 - (_BYTE *)v45) >> 3;
    do
    {
      if (v37 > v35)
        v32[v35] = v36[v35] + v32[v35];
      if (v39 > v35)
        v32[v35] = v38[v35] + v32[v35];
      if (v40 > v35)
        v32[v35] = v34[v35] + v32[v35];
      ++v35;
    }
    while (v33 - v32 > (unint64_t)v35);
  }
  if (v34)
  {
    v46 = v34;
    operator delete(v34);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
}

void sub_1D533D2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  void *v24;
  void *v25;

  if (a14 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a15);
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  v24 = *(void **)(v22 - 56);
  if (v24)
  {
    *(_QWORD *)(v22 - 48) = v24;
    operator delete(v24);
  }
  v25 = *(void **)v21;
  if (*(_QWORD *)v21)
  {
    *(_QWORD *)(v21 + 8) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D533D380(uint64_t a1)
{
  void *v1;
  void **v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  void *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v26;
  uint64_t v27;
  void *lpsrc[2];
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void **v32;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(lpsrc);
  if (lpsrc[0]
    && (v1 = __dynamic_cast(lpsrc[0], (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9976FF0, 0)) != 0)
  {
    v30 = (uint64_t)v1;
    v31 = (std::__shared_weak_count *)lpsrc[1];
    v2 = lpsrc;
  }
  else
  {
    v2 = (void **)&v30;
  }
  *v2 = 0;
  v2[1] = 0;
  v3 = (std::__shared_weak_count *)lpsrc[1];
  if (lpsrc[1])
  {
    v4 = (unint64_t *)((char *)lpsrc[1] + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v30)
  {
    sub_1D5300FF0(v30, 14, (uint64_t)lpsrc);
    v6 = lpsrc[0];
    if (lpsrc[1] != lpsrc[0])
    {
      if (*(_QWORD *)lpsrc[0])
      {
        v7 = __dynamic_cast(*(const void **)lpsrc[0], (const struct __class_type_info *)&unk_1E996FA38, (const struct __class_type_info *)&unk_1E997EA60, 0);
        if (v7)
        {
          v8 = (std::__shared_weak_count *)*((_QWORD *)v6 + 1);
          if (v8)
          {
            p_shared_owners = (unint64_t *)&v8->__shared_owners_;
            do
              v10 = __ldxr(p_shared_owners);
            while (__stxr(v10 + 1, p_shared_owners));
          }
          if (((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[3] - v7[2]) >> 3)) | 2) == 3)
          {
            if (v8)
            {
              v11 = (unint64_t *)&v8->__shared_owners_;
              do
                v12 = __ldaxr(v11);
              while (__stlxr(v12 - 1, v11));
              goto LABEL_42;
            }
LABEL_44:
            *(_QWORD *)&v26 = lpsrc;
            sub_1D5282E44((void ***)&v26);
            v13 = 7;
            goto LABEL_45;
          }
          if (v8)
          {
            v14 = (unint64_t *)&v8->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
        }
      }
    }
    sub_1D5300FF0(v30, 1, (uint64_t)&v26);
    sub_1D5304784(lpsrc);
    *(_OWORD *)lpsrc = v26;
    v29 = v27;
    v27 = 0;
    v26 = 0uLL;
    v32 = (void **)&v26;
    sub_1D5282E44(&v32);
    v16 = lpsrc[0];
    if (lpsrc[1] == lpsrc[0])
      goto LABEL_44;
    if (!*(_QWORD *)lpsrc[0])
      goto LABEL_44;
    v17 = __dynamic_cast(*(const void **)lpsrc[0], (const struct __class_type_info *)&unk_1E996FA38, (const struct __class_type_info *)&unk_1E99917B0, 0);
    if (!v17)
      goto LABEL_44;
    v8 = (std::__shared_weak_count *)*((_QWORD *)v16 + 1);
    if (v8)
    {
      v18 = (unint64_t *)&v8->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    if (((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17[3] - v17[2]) >> 3)) | 2) == 3)
    {
      if (!v8)
        goto LABEL_44;
      v20 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v20);
      while (__stlxr(v12 - 1, v20));
    }
    else
    {
      if (!v8)
        goto LABEL_44;
      v21 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v21);
      while (__stlxr(v12 - 1, v21));
    }
LABEL_42:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    goto LABEL_44;
  }
  v13 = 0;
LABEL_45:
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return v13;
}

void sub_1D533D650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  a9 = (void **)&a13;
  sub_1D5282E44(&a9);
  sub_1D5282EB4(v13 - 40);
  _Unwind_Resume(a1);
}

void sub_1D533D67C(uint64_t a1@<X0>, char **a2@<X8>)
{
  void *v3;
  void **v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  __int128 v26;
  uint64_t v27;
  void *lpsrc[2];
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void **v32;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(lpsrc);
  if (lpsrc[0]
    && (v3 = __dynamic_cast(lpsrc[0], (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9976FF0, 0)) != 0)
  {
    v30 = (uint64_t)v3;
    v31 = (std::__shared_weak_count *)lpsrc[1];
    v4 = lpsrc;
  }
  else
  {
    v4 = (void **)&v30;
  }
  *v4 = 0;
  v4[1] = 0;
  v5 = (std::__shared_weak_count *)lpsrc[1];
  if (lpsrc[1])
  {
    v6 = (unint64_t *)((char *)lpsrc[1] + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v30;
  if (!v30)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    goto LABEL_40;
  }
  sub_1D5300FF0(v30, 14, (uint64_t)lpsrc);
  v9 = lpsrc[0];
  if ((void *)((char *)lpsrc[1] - (char *)lpsrc[0]) == (void *)16)
  {
    if (*(_QWORD *)lpsrc[0])
    {
      v10 = __dynamic_cast(*(const void **)lpsrc[0], (const struct __class_type_info *)&unk_1E996FA38, (const struct __class_type_info *)&unk_1E997EA60, 0);
      if (v10)
      {
        v11 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
        *(_QWORD *)&v26 = v10;
        *((_QWORD *)&v26 + 1) = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(p_shared_owners);
          while (__stxr(v13 + 1, p_shared_owners));
        }
        if (((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10[3] - v10[2]) >> 3)) | 2) == 3)
        {
          sub_1D5331C3C((uint64_t)v10, a2);
          if (v11)
          {
            v14 = (unint64_t *)&v11->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            goto LABEL_49;
          }
          goto LABEL_39;
        }
        if (v11)
        {
          v16 = (unint64_t *)&v11->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
      }
    }
    v8 = v30;
  }
  sub_1D5300FF0(v8, 1, (uint64_t)&v26);
  sub_1D5304784(lpsrc);
  *(_OWORD *)lpsrc = v26;
  v29 = v27;
  v27 = 0;
  v26 = 0uLL;
  v32 = (void **)&v26;
  sub_1D5282E44(&v32);
  v18 = lpsrc[0];
  if ((void *)((char *)lpsrc[1] - (char *)lpsrc[0]) == (void *)16)
  {
    if (*(_QWORD *)lpsrc[0])
    {
      v19 = __dynamic_cast(*(const void **)lpsrc[0], (const struct __class_type_info *)&unk_1E996FA38, (const struct __class_type_info *)&unk_1E99917B0, 0);
      if (v19)
      {
        v11 = (std::__shared_weak_count *)*((_QWORD *)v18 + 1);
        *(_QWORD *)&v26 = v19;
        *((_QWORD *)&v26 + 1) = v11;
        if (v11)
        {
          v20 = (unint64_t *)&v11->__shared_owners_;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        if (((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19[3] - v19[2]) >> 3)) | 2) == 3)
        {
          sub_1D53A14CC(v19, a2);
          if (!v11)
            goto LABEL_39;
        }
        else
        {
          *a2 = 0;
          a2[1] = 0;
          a2[2] = 0;
          if (!v11)
            goto LABEL_39;
        }
        v25 = (unint64_t *)&v11->__shared_owners_;
        do
          v15 = __ldaxr(v25);
        while (__stlxr(v15 - 1, v25));
LABEL_49:
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_39;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
LABEL_39:
  *(_QWORD *)&v26 = lpsrc;
  sub_1D5282E44((void ***)&v26);
LABEL_40:
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1D533D97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_1D5282EB4((uint64_t)&a9);
  a9 = (void **)&a13;
  sub_1D5282E44(&a9);
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1D533D9C8(uint64_t a1)
{
  void *v1;
  void **p_lpsrc;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *lpsrc;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void **v20;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v1 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9976FF0, 0)) != 0)
  {
    v18 = (uint64_t)v1;
    v19 = v17;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = (void **)&v18;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v3 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v18)
  {
    sub_1D5300FF0(v18, 9, (uint64_t)&lpsrc);
    v6 = lpsrc;
    if (lpsrc != v17
      && *(_QWORD *)lpsrc
      && __dynamic_cast(*(const void **)lpsrc, (const struct __class_type_info *)&unk_1E996FA38, (const struct __class_type_info *)&unk_1E998CC58, 0))
    {
      v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 1);
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
        do
          v10 = __ldaxr(v8);
        while (__stlxr(v10 - 1, v8));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v11 = 1;
    }
    else
    {
      v11 = 0;
    }
    v20 = &lpsrc;
    sub_1D5282E44(&v20);
  }
  else
  {
    v11 = 0;
  }
  v12 = v19;
  if (v19)
  {
    v13 = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_1D533DB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1D533DB6C(uint64_t a1)
{
  _BOOL8 v2;
  void *v4;
  void *v5;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2808))(a1))
    return 0;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 2816))(&v4, a1);
  v2 = v5 != v4;
  if (v4)
  {
    v5 = v4;
    operator delete(v4);
  }
  return v2;
}

double sub_1D533DBD8(uint64_t a1)
{
  _BYTE *v1;
  void **p_lpsrc;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _BYTE *v6;
  double v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *lpsrc;
  std::__shared_weak_count *v13;
  _BYTE *v14;
  std::__shared_weak_count *v15;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v1 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9976FF0, 0)) != 0)
  {
    v14 = v1;
    v15 = v13;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = (void **)&v14;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v3 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = v14;
  v7 = 5.0;
  if (v14 && (sub_1D5304284((uint64_t)v14) || sub_1D5302CCC(v6)))
    v7 = 0.0;
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v7;
}

void sub_1D533DCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D533DCFC(uint64_t a1)
{
  double v2;
  void *v3;
  void **p_lpsrc;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *lpsrc;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v2 = sub_1D5296F80();
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&lpsrc, a1);
  if (lpsrc
    && (v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9976FF0, 0)) != 0)
  {
    v14 = (uint64_t)v3;
    v15 = v13;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = (void **)&v14;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v14)
    v2 = sub_1D5301F58(v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v2;
}

void sub_1D533DE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D533DE18(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1E997FCA8;
  v3 = (void **)(a1 + 400);
  sub_1D5293CCC(&v3);
  return sub_1D5294858(a1);
}

uint64_t sub_1D533DE60(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_1E997FCA8;
  v4 = (void **)(a1 + 400);
  sub_1D5293CCC(&v4);
  v2 = sub_1D5294858(a1);
  return MEMORY[0x1D8271ADC](v2, 0x10A1C4009B45E12);
}

char *sub_1D533DEBC(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_1D5304C28(result, a4);
    result = sub_1D533DF40((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_1D533DF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1D5293CCC(&a9);
  _Unwind_Resume(a1);
}

char *sub_1D533DF40(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1D5290130(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_1D529EA0C((uint64_t)v9);
  return v4;
}

void sub_1D533DFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D529EA0C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

vImage_Error sub_1D533E1A4(uint64_t a1, void *a2, size_t a3, uint64_t a4, uint64_t a5, vImagePixelCount a6, vImagePixelCount a7)
{
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  vImage_Buffer v22;
  vImage_Buffer src;

  v14 = objc_retainAutorelease(*(id *)(a1 + 32));
  v19 = objc_msgSend_bytes(v14, v15, v16, v17, v18);
  v20 = *(_QWORD *)(a1 + 40);
  src.data = (void *)(v19 + v20 * a5 + 4 * a4);
  src.height = a7;
  src.width = a6;
  src.rowBytes = v20;
  v22.data = a2;
  v22.height = a7;
  v22.width = a6;
  v22.rowBytes = a3;
  return vImageConvert_PlanarFtoPlanar16F(&src, &v22, 0);
}

void sub_1D533E904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  (*(void (**)(void))(a14 + 16))();
  _Unwind_Resume(a1);
}

uint64_t sub_1D533E940(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  objc_msgSend_kernelWithName_(LTMKernels, a2, (uint64_t)CFSTR("profileGainTableMap"), a4, a5);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)qword_1EFF32700;
  qword_1EFF32700 = v5;

  return MEMORY[0x1E0DE7D20](qword_1EFF32700, sel_setPerservesAlpha_, 1, v7, v8);
}

void sub_1D533E988(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWProfileGainTableMap", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

double sub_1D533EA0C(uint64_t a1, int a2, double result, double a4, double a5, double a6)
{
  __int128 v7;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v12;
  CGFloat v13;
  double MaxX;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double MaxY;
  double MinX;
  double MinY;
  CGAffineTransform v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;

  if (a2)
  {
    v7 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&v29.a = *(_OWORD *)(a1 + 32);
    *(_OWORD *)&v29.c = v7;
    *(_OWORD *)&v29.tx = *(_OWORD *)(a1 + 64);
    v30 = CGRectApplyAffineTransform(*(CGRect *)&result, &v29);
    v31 = CGRectIntegral(v30);
    x = v31.origin.x;
    y = v31.origin.y;
    width = v31.size.width;
    height = v31.size.height;
    v12 = (double)*(unint64_t *)(a1 + 80);
    v13 = (double)*(unint64_t *)(a1 + 88);
    v31.origin.x = 0.0;
    v31.origin.y = 0.0;
    v31.size.width = v12;
    v31.size.height = v13;
    MinX = CGRectGetMinX(v31);
    v32.origin.x = 0.0;
    v32.origin.y = 0.0;
    v32.size.width = v12;
    v32.size.height = v13;
    MinY = CGRectGetMinY(v32);
    v33.origin.x = 0.0;
    v33.origin.y = 0.0;
    v33.size.width = v12;
    v33.size.height = v13;
    MaxX = CGRectGetMaxX(v33);
    v34.origin.x = 0.0;
    v34.origin.y = 0.0;
    v34.size.width = v12;
    v34.size.height = v13;
    MaxY = CGRectGetMaxY(v34);
    v35.origin.x = x;
    v35.origin.y = y;
    v35.size.width = width;
    v35.size.height = height;
    v15 = CGRectGetMinX(v35);
    v36.origin.x = x;
    v36.origin.y = y;
    v36.size.width = width;
    v36.size.height = height;
    v16 = CGRectGetMinY(v36);
    v37.origin.x = x;
    v37.origin.y = y;
    v37.size.width = width;
    v37.size.height = height;
    v17 = CGRectGetMaxX(v37);
    v38.origin.x = x;
    v38.origin.y = y;
    v38.size.width = width;
    v38.size.height = height;
    v18 = CGRectGetMaxY(v38);
    v19 = fmax(v15, MinX);
    v20 = fmin(v17, MaxX) - v19;
    if (v15 >= MaxX)
    {
      v20 = 2.0;
      v19 = MaxX + -1.0;
    }
    if (v17 > MinX)
    {
      v21 = v19;
    }
    else
    {
      v20 = 2.0;
      v21 = MinX + -1.0;
    }
    v22 = fmax(v16, MinY);
    v23 = fmin(v18, MaxY) - v22;
    if (v16 >= MaxY)
    {
      v23 = 2.0;
      v22 = MaxY + -1.0;
    }
    if (v18 <= MinY)
      v24 = 2.0;
    else
      v24 = v23;
    if (v18 <= MinY)
      v22 = MinY + -1.0;
    v25 = v21;
    return COERCE_DOUBLE(CGRectInset(*(CGRect *)(&v20 - 2), -1.0, -1.0)) * (double)*(unint64_t *)(a1 + 96);
  }
  return result;
}

void sub_1D533ECEC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1D533ECFC()
{
  if (qword_1EFF32708 != -1)
    dispatch_once(&qword_1EFF32708, &unk_1E99808B0);
}

void sub_1D533ED24()
{
  void *v0[2];
  char v1;
  char v2;
  void *v3[2];
  char v4;
  char v5;
  void *v6[2];
  char v7;
  char v8;
  void *v9[2];
  char v10;
  char v11;
  void *v12[2];
  char v13;
  char v14;
  void *v15[2];
  char v16;
  char v17;
  void *v18[2];
  char v19;
  char v20;
  void *v21[2];
  char v22;
  char v23;
  void *v24[2];
  char v25;
  char v26;
  void *v27[2];
  char v28;
  char v29;
  void *v30[2];
  char v31;
  char v32;
  void *v33[2];
  char v34;
  char v35;
  void *v36[2];
  char v37;
  char v38;
  void *v39[2];
  char v40;
  char v41;
  void *v42[2];
  char v43;
  char v44;
  void *v45[2];
  char v46;
  char v47;
  void *v48[2];
  char v49;
  char v50;
  void *v51[2];
  char v52;
  char v53;
  void *v54[2];
  char v55;
  char v56;
  void *v57[2];
  char v58;
  char v59;
  void *v60[2];
  char v61;
  char v62;
  void *v63[2];
  char v64;
  char v65;
  void *v66[2];
  char v67;
  char v68;
  void *v69[2];
  char v70;
  char v71;
  void *v72[2];
  char v73;
  char v74;
  void *v75[2];
  char v76;
  char v77;
  void *v78[2];
  char v79;
  char v80;
  void *v81[2];
  char v82;
  char v83;
  void *v84[2];
  char v85;
  char v86;
  void *v87[2];
  char v88;
  char v89;
  void *v90[2];
  char v91;
  char v92;
  void *v93[2];
  char v94;
  char v95;
  void *v96[2];
  char v97;
  char v98;
  void *__p[2];
  char v100;
  char v101;
  void *v102[2];
  char v103;
  char v104;
  void *v105[2];
  char v106;
  char v107;
  void *v108[2];
  char v109;
  char v110;
  void *v111[2];
  char v112;
  char v113;
  void *v114[2];
  char v115;
  char v116;
  void *v117[2];
  char v118;
  char v119;
  void *v120[2];
  char v121;
  char v122;

  sub_1D52850A0(v120, "CRawImagePluginBase");
  sub_1D533F450((uint64_t)&v122, (uint64_t)v120);
  if (v121 < 0)
    operator delete(v120[0]);
  sub_1D52850A0(v117, "CRawImageCanonTIFBase");
  sub_1D533F68C((uint64_t)&v119, (uint64_t)v117);
  if (v118 < 0)
    operator delete(v117[0]);
  sub_1D52850A0(v114, "CRawImageCanonCR2Base");
  sub_1D533F8C8((uint64_t)&v116, (uint64_t)v114);
  if (v115 < 0)
    operator delete(v114[0]);
  sub_1D52850A0(v111, "CRawImageCanonSRawBase");
  sub_1D533FB04((uint64_t)&v113, (uint64_t)v111);
  if (v112 < 0)
    operator delete(v111[0]);
  sub_1D52850A0(v108, "CRawImageCanonPowerShotBase");
  sub_1D533FD40((uint64_t)&v110, (uint64_t)v108);
  if (v109 < 0)
    operator delete(v108[0]);
  sub_1D52850A0(v105, "CRawImageCanonPowerShotG9");
  sub_1D533FF7C((uint64_t)&v107, (uint64_t)v105);
  if (v106 < 0)
    operator delete(v105[0]);
  sub_1D52850A0(v102, "CRawImageCanonCR3Base");
  sub_1D53401B8((uint64_t)&v104, (uint64_t)v102);
  if (v103 < 0)
    operator delete(v102[0]);
  sub_1D52850A0(__p, "CRawImageCanonCRWBase");
  sub_1D53403F4((uint64_t)&v101, (uint64_t)__p);
  if (v100 < 0)
    operator delete(__p[0]);
  sub_1D52850A0(v96, "CRawImageCanonPowerShotG5");
  sub_1D5340630((uint64_t)&v98, (uint64_t)v96);
  if (v97 < 0)
    operator delete(v96[0]);
  sub_1D52850A0(v93, "CRawImageCanonD30");
  sub_1D534086C((uint64_t)&v95, (uint64_t)v93);
  if (v94 < 0)
    operator delete(v93[0]);
  sub_1D52850A0(v90, "CRawImageCanonD60");
  sub_1D5340AA8((uint64_t)&v92, (uint64_t)v90);
  if (v91 < 0)
    operator delete(v90[0]);
  sub_1D52850A0(v87, "CRawImageFujiBase");
  sub_1D5340CE4((uint64_t)&v89, (uint64_t)v87);
  if (v88 < 0)
    operator delete(v87[0]);
  sub_1D52850A0(v84, "CRawImageFujiBayerBase");
  sub_1D5340F28((uint64_t)&v86, (uint64_t)v84);
  if (v85 < 0)
    operator delete(v84[0]);
  sub_1D52850A0(v81, "CRawImageLeicaPanasonicBase");
  sub_1D5341164((uint64_t)&v83, (uint64_t)v81);
  if (v82 < 0)
    operator delete(v81[0]);
  sub_1D52850A0(v78, "CRawImageMinoltaBase");
  sub_1D53413A0((uint64_t)&v80, (uint64_t)v78);
  if (v79 < 0)
    operator delete(v78[0]);
  sub_1D52850A0(v75, "CRawImageOlympusCSeriesBase");
  sub_1D53415DC((uint64_t)&v77, (uint64_t)v75);
  if (v76 < 0)
    operator delete(v75[0]);
  sub_1D52850A0(v72, "CRawImageOlympusBase");
  sub_1D5341818((uint64_t)&v74, (uint64_t)v72);
  if (v73 < 0)
    operator delete(v72[0]);
  sub_1D52850A0(v69, "CRawImageLeafBase");
  sub_1D5341A54((uint64_t)&v71, (uint64_t)v69);
  if (v70 < 0)
    operator delete(v69[0]);
  sub_1D52850A0(v66, "CRawImageMamiyaDM22");
  sub_1D5341C90((uint64_t)&v68, (uint64_t)v66);
  if (v67 < 0)
    operator delete(v66[0]);
  sub_1D52850A0(v63, "CRawImageMamiyaDM40");
  sub_1D5341ECC((uint64_t)&v65, (uint64_t)v63);
  if (v64 < 0)
    operator delete(v63[0]);
  sub_1D52850A0(v60, "CRawImageHasselbladFFFBase");
  sub_1D5342108((uint64_t)&v62, (uint64_t)v60);
  if (v61 < 0)
    operator delete(v60[0]);
  sub_1D52850A0(v57, "CRawImageHasselblad3FRBase");
  sub_1D5342344((uint64_t)&v59, (uint64_t)v57);
  if (v58 < 0)
    operator delete(v57[0]);
  sub_1D52850A0(v54, "CRawImageNikonBase");
  sub_1D5342584((uint64_t)&v56, (uint64_t)v54);
  if (v55 < 0)
    operator delete(v54[0]);
  sub_1D52850A0(v51, "CRawImageNikonRawSBase");
  sub_1D53427C0((uint64_t)&v53, (uint64_t)v51);
  if (v52 < 0)
    operator delete(v51[0]);
  sub_1D52850A0(v48, "CRawImageNikon12Bit14BitBase");
  sub_1D53429FC((uint64_t)&v50, (uint64_t)v48);
  if (v49 < 0)
    operator delete(v48[0]);
  sub_1D52850A0(v45, "CRawImageNikonCoolpixBase");
  sub_1D5342C38((uint64_t)&v47, (uint64_t)v45);
  if (v46 < 0)
    operator delete(v45[0]);
  sub_1D52850A0(v42, "CRawImageNikonNRWBase");
  sub_1D5342E74((uint64_t)&v44, (uint64_t)v42);
  if (v43 < 0)
    operator delete(v42[0]);
  sub_1D52850A0(v39, "CRawImageNikonD100");
  sub_1D53430B0((uint64_t)&v41, (uint64_t)v39);
  if (v40 < 0)
    operator delete(v39[0]);
  sub_1D52850A0(v36, "CRawImagePentaxBase");
  sub_1D53432EC((uint64_t)&v38, (uint64_t)v36);
  if (v37 < 0)
    operator delete(v36[0]);
  sub_1D52850A0(v33, "CRawImageSamsungSRWBase");
  sub_1D5343528((uint64_t)&v35, (uint64_t)v33);
  if (v34 < 0)
    operator delete(v33[0]);
  sub_1D52850A0(v30, "CRawImageSonySRFBase");
  sub_1D5343764((uint64_t)&v32, (uint64_t)v30);
  if (v31 < 0)
    operator delete(v30[0]);
  sub_1D52850A0(v27, "CRawImageSonyR1");
  sub_1D53439A0((uint64_t)&v29, (uint64_t)v27);
  if (v28 < 0)
    operator delete(v27[0]);
  sub_1D52850A0(v24, "CRawImageSonyARWBase");
  sub_1D5343BDC((uint64_t)&v26, (uint64_t)v24);
  if (v25 < 0)
    operator delete(v24[0]);
  sub_1D52850A0(v21, "CRawImageSonySRawARWBase");
  sub_1D5343E18((uint64_t)&v23, (uint64_t)v21);
  if (v22 < 0)
    operator delete(v21[0]);
  sub_1D52850A0(v18, "CRawImageSonyAXRBase");
  sub_1D5344054((uint64_t)&v20, (uint64_t)v18);
  if (v19 < 0)
    operator delete(v18[0]);
  sub_1D52850A0(v15, "CRawImageEpsonRD1Base");
  sub_1D5344290((uint64_t)&v17, (uint64_t)v15);
  if (v16 < 0)
    operator delete(v15[0]);
  sub_1D52850A0(v12, "CRawImageKodakDCSProSLRn");
  sub_1D53444CC((uint64_t)&v14, (uint64_t)v12);
  if (v13 < 0)
    operator delete(v12[0]);
  sub_1D52850A0(v9, "CRawImagePhaseOneBase");
  sub_1D5344708((uint64_t)&v11, (uint64_t)v9);
  if (v10 < 0)
    operator delete(v9[0]);
  sub_1D52850A0(v6, "CRawImagePhaseOneIQ");
  sub_1D5344944((uint64_t)&v8, (uint64_t)v6);
  if (v7 < 0)
    operator delete(v6[0]);
  sub_1D52850A0(v3, "CRawImageAdobeDNG");
  sub_1D5344B80((uint64_t)&v5, (uint64_t)v3);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_1D52850A0(v0, "CRawImageCalibratedAdobeDNG");
  sub_1D5344CE0((uint64_t)&v2, (uint64_t)v0);
  if (v1 < 0)
    operator delete(v0[0]);
}

uint64_t sub_1D533F450(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E99808E0;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D533F4E8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D533F4D4);
}

double sub_1D533F518@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D533F550(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D533F550(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D533F5B0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D533F59C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D533F5B0(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9980930;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[3] = &unk_1E99A4140;
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  return a1;
}

void sub_1D533F620(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D533F634(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D533F648(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980930;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D533F67C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D533F68C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9980980;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D533F724(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D533F710);
}

double sub_1D533F754@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D533F78C(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D533F78C(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D533F7EC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D533F7D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D533F7EC(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E99809C0;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E998A298;
  return a1;
}

void sub_1D533F85C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D533F870(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99809C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D533F884(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99809C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D533F8B8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D533F8C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9980A10;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D533F960(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D533F94CLL);
}

double sub_1D533F990@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D533F9C8(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D533F9C8(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D533FA28(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D533FA14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D533FA28(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9980A50;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E997DDD8;
  return a1;
}

void sub_1D533FA98(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D533FAAC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980A50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D533FAC0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980A50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D533FAF4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D533FB04(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9980AA0;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D533FB9C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D533FB88);
}

double sub_1D533FBCC@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D533FC04(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D533FC04(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D533FC64(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D533FC50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D533FC64(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9980AE0;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E9992628;
  return a1;
}

void sub_1D533FCD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D533FCE8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980AE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D533FCFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980AE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D533FD30(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D533FD40(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9980B30;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D533FDD8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D533FDC4);
}

double sub_1D533FE08@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D533FE40(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D533FE40(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D533FEA0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D533FE8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D533FEA0(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9980B70;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E99955A8;
  return a1;
}

void sub_1D533FF10(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D533FF24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980B70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D533FF38(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980B70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D533FF6C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D533FF7C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9980BC0;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5340014(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5340000);
}

double sub_1D5340044@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D534007C(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D534007C(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D53400DC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D53400C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53400DC(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9980C00;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E997C048;
  return a1;
}

void sub_1D534014C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5340160(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980C00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5340174(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980C00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53401A8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D53401B8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9980C50;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5340250(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D534023CLL);
}

double sub_1D5340280@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D53402B8(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D53402B8(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5340318(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5340304(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5340318(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9980C90;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E9999720;
  return a1;
}

void sub_1D5340388(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D534039C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980C90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53403B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980C90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53403E4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D53403F4(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9980CE0;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D534048C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5340478);
}

double sub_1D53404BC@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D53404F4(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D53404F4(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5340554(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5340540(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5340554(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9980D20;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E9986140;
  return a1;
}

void sub_1D53405C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53405D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980D20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53405EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980D20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5340620(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5340630(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9980D70;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D53406C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53406B4);
}

double sub_1D53406F8@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5340730(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5340730(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5340790(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D534077C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5340790(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9980DB0;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E997B438;
  return a1;
}

void sub_1D5340800(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5340814(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980DB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5340828(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980DB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D534085C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D534086C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9980E00;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5340904(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53408F0);
}

double sub_1D5340934@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D534096C(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D534096C(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D53409CC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D53409B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53409CC(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9980E40;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E9979C08;
  return a1;
}

void sub_1D5340A3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5340A50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980E40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5340A64(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980E40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5340A98(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5340AA8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9980E90;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5340B40(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5340B2CLL);
}

double sub_1D5340B70@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5340BA8(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5340BA8(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5340C08(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5340BF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5340C08(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9980ED0;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E997A858;
  return a1;
}

void sub_1D5340C78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5340C8C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980ED0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5340CA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980ED0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5340CD4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5340CE4(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9980F20;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5340D7C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5340D68);
}

double sub_1D5340DAC@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5340DE4(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5340DE4(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1B0uLL);
  sub_1D5340E44((uint64_t)v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5340E30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5340E44(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E9980F60;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D5295668(a1 + 24, a2);
  *(_QWORD *)(a1 + 328) = a1 + 336;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = a1 + 360;
  *(_QWORD *)(a1 + 376) = a1 + 384;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = a1 + 408;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 24) = &unk_1E9985488;
  *(_BYTE *)(a1 + 424) = 0;
  *(_WORD *)(a1 + 426) = 0;
  return a1;
}

void sub_1D5340EBC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5340ED0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980F60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5340EE4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980F60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5340F18(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5340F28(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9980FB0;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5340FC0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5340FACLL);
}

double sub_1D5340FF0@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5341028(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5341028(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5341088(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5341074(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5341088(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9980FF0;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E9996D68;
  return a1;
}

void sub_1D53410F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D534110C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980FF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5341120(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9980FF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5341154(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5341164(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9981040;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D53411FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53411E8);
}

double sub_1D534122C@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5341264(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5341264(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D53412C4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D53412B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53412C4(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9981080;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E9993908;
  return a1;
}

void sub_1D5341334(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5341348(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9981080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D534135C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9981080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5341390(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D53413A0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E99810D0;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5341438(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5341424);
}

double sub_1D5341468@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D53414A0(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D53414A0(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5341500(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D53414EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5341500(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9981110;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E99896E8;
  return a1;
}

void sub_1D5341570(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5341584(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9981110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5341598(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9981110;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53415CC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D53415DC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9981160;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5341674(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5341660);
}

double sub_1D53416A4@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D53416DC(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D53416DC(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D534173C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5341728(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D534173C(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E99811A0;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E998CC80;
  return a1;
}

void sub_1D53417AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53417C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99811A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53417D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99811A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5341808(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5341818(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E99811F0;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D53418B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D534189CLL);
}

double sub_1D53418E0@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5341918(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5341918(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5341978(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5341964(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5341978(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9981230;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E9988AB0;
  return a1;
}

void sub_1D53419E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53419FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9981230;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5341A10(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9981230;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5341A44(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5341A54(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9981280;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5341AEC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5341AD8);
}

double sub_1D5341B1C@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5341B54(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5341B54(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5341BB4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5341BA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5341BB4(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E99812C0;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E9987D48;
  return a1;
}

void sub_1D5341C24(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5341C38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99812C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5341C4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99812C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5341C80(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5341C90(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9981310;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5341D28(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5341D14);
}

double sub_1D5341D58@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5341D90(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5341D90(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5341DF0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5341DDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5341DF0(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9981350;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E99813A0;
  return a1;
}

void sub_1D5341E60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5341E74(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9981350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5341E88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9981350;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5341EBC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5341ECC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9981F50;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5341F64(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5341F50);
}

double sub_1D5341F94@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5341FCC(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5341FCC(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D534202C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5342018(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D534202C(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9981F90;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E9981FE0;
  return a1;
}

void sub_1D534209C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53420B0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9981F90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53420C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9981F90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53420F8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5342108(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9982B90;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D53421A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D534218CLL);
}

double sub_1D53421D0@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5342208(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5342208(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5342268(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5342254(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5342268(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9982BD0;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E9987148;
  return a1;
}

void sub_1D53422D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53422EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9982BD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5342300(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9982BD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5342334(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5342344(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9982C20;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D53423DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53423C8);
}

double sub_1D534240C@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5342444(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5342444(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1B0uLL);
  sub_1D53424A4((uint64_t)v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5342490(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53424A4(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E9982C60;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D5295668(a1 + 24, a2);
  *(_QWORD *)(a1 + 328) = a1 + 336;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = a1 + 360;
  *(_QWORD *)(a1 + 376) = a1 + 384;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = a1 + 408;
  *(_QWORD *)(a1 + 24) = &unk_1E998C080;
  *(_WORD *)(a1 + 424) = 0;
  return a1;
}

void sub_1D5342518(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D534252C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9982C60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5342540(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9982C60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5342574(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5342584(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9982CB0;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D534261C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5342608);
}

double sub_1D534264C@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5342684(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5342684(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D53426E4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D53426D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53426E4(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9982CF0;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E998AE90;
  return a1;
}

void sub_1D5342754(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5342768(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9982CF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D534277C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9982CF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53427B0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D53427C0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9982D40;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5342858(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5342844);
}

double sub_1D5342888@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D53428C0(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D53428C0(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5342920(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D534290C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5342920(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9982D80;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E99908E0;
  return a1;
}

void sub_1D5342990(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53429A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9982D80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53429B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9982D80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53429EC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D53429FC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9982DD0;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5342A94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5342A80);
}

double sub_1D5342AC4@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5342AFC(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5342AFC(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5342B5C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5342B48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5342B5C(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9982E10;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E998F130;
  return a1;
}

void sub_1D5342BCC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5342BE0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9982E10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5342BF4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9982E10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5342C28(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5342C38(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9982E60;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5342CD0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5342CBCLL);
}

double sub_1D5342D00@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5342D38(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5342D38(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5342D98(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5342D84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5342D98(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9982EA0;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E9996198;
  return a1;
}

void sub_1D5342E08(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5342E1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9982EA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5342E30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9982EA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5342E64(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5342E74(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9982EF0;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5342F0C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5342EF8);
}

double sub_1D5342F3C@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5342F74(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5342F74(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5342FD4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5342FC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5342FD4(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9982F30;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E9982F80;
  return a1;
}

void sub_1D5343044(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5343058(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9982F30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D534306C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9982F30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53430A0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D53430B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9983B50;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5343148(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5343134);
}

double sub_1D5343178@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D53431B0(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D53431B0(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5343210(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D53431FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5343210(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9983B90;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E997CC38;
  return a1;
}

void sub_1D5343280(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5343294(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9983B90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53432A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9983B90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53432DC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D53432EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9983BE0;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5343384(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5343370);
}

double sub_1D53433B4@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D53433EC(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D53433EC(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D534344C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5343438(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D534344C(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9983C20;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E9984638;
  return a1;
}

void sub_1D53434BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53434D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9983C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53434E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9983C20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5343518(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5343528(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9983C70;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D53435C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53435ACLL);
}

double sub_1D53435F0@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5343628(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5343628(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5343688(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5343674(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5343688(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9983CB0;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E9997AD8;
  return a1;
}

void sub_1D53436F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D534370C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9983CB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5343720(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9983CB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5343754(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5343764(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9983D00;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D53437FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53437E8);
}

double sub_1D534382C@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5343864(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5343864(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D53438C4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D53438B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53438C4(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9983D40;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E99986A0;
  return a1;
}

void sub_1D5343934(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5343948(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9983D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D534395C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9983D40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5343990(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D53439A0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9983D90;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5343A38(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5343A24);
}

double sub_1D5343A68@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5343AA0(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5343AA0(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5343B00(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5343AEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5343B00(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9983DD0;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E997F0F8;
  return a1;
}

void sub_1D5343B70(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5343B84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9983DD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5343B98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9983DD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5343BCC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5343BDC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9983E20;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5343C74(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5343C60);
}

double sub_1D5343CA4@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5343CDC(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5343CDC(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5343D3C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5343D28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5343D3C(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9983E60;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E9994978;
  return a1;
}

void sub_1D5343DAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5343DC0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9983E60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5343DD4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9983E60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5343E08(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5343E18(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9983EB0;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5343EB0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5343E9CLL);
}

double sub_1D5343EE0@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5343F18(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5343F18(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5343F78(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5343F64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5343F78(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9983EF0;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E999B100;
  return a1;
}

void sub_1D5343FE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5343FFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9983EF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5344010(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9983EF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5344044(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5344054(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9983F40;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D53440EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53440D8);
}

double sub_1D534411C@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5344154(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5344154(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D53441B4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D53441A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53441B4(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9983F80;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E99A4E40;
  return a1;
}

void sub_1D5344224(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5344238(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9983F80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D534424C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9983F80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5344280(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5344290(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9983FD0;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5344328(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5344314);
}

double sub_1D5344358@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5344390(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5344390(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D53443F0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D53443DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53443F0(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9984010;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E9991A10;
  return a1;
}

void sub_1D5344460(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5344474(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9984010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5344488(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9984010;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53444BC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D53444CC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9984060;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5344564(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5344550);
}

double sub_1D5344594@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D53445CC(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D53445CC(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D534462C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5344618(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D534462C(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E99840A0;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E998E3A0;
  return a1;
}

void sub_1D534469C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53446B0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99840A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53446C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99840A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53446F8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5344708(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E99840F0;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D53447A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D534478CLL);
}

double sub_1D53447D0@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5344808(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5344808(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5344868(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5344854(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5344868(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9984130;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E99A5CC0;
  return a1;
}

void sub_1D53448D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D53448EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9984130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5344900(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9984130;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5344934(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5344944(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9984180;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D53449DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D53449C8);
}

double sub_1D5344A0C@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5344A44(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5344A44(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1A8uLL);
  sub_1D5344AA4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5344A90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5344AA4(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E99841C0;
  a1[1] = 0;
  sub_1D5295668((uint64_t)(a1 + 3), a2);
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = a1 + 48;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  a1[3] = &unk_1E999A4A0;
  return a1;
}

void sub_1D5344B14(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5344B28(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99841C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5344B3C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99841C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5344B70(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5344B80(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9984210;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5344C18(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5344C04);
}

double sub_1D5344C48@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5344C80(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5344C80(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1C0uLL);
  sub_1D5294464(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5344CCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5344CE0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1D5290130(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E9984250;
  sub_1D53BE3EC((uint64_t)__p, (uint64_t)v3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1D5344D78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5344D64);
}

double sub_1D5344DA8@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  double v4[3];

  sub_1D5344DE0(a1, v4);
  result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void sub_1D5344DE0(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0x1C0uLL);
  sub_1D5344E40(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  sub_1D5285658((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1D5344E2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5344E40(_QWORD *a1, _QWORD *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E9984290;
  a1[1] = 0;
  sub_1D533C74C((uint64_t)(a1 + 3), a2);
  a1[3] = &unk_1E9978FE8;
  return a1;
}

void sub_1D5344E88(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5344E9C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9984290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5344EB0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9984290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5344EE4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D5344EF4(uint64_t a1, __CVBuffer *a2, void *a3, const char *a4)
{
  id v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  id v11;
  int Width;
  int Height;
  signed int PixelFormatType;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *v25;
  int __src;
  void *__p;
  std::__shared_weak_count *v29;
  char v30;
  void **p_p;

  v7 = a3;
  __p = 0;
  v29 = 0;
  sub_1D52F6620(a1, (uint64_t *)&__p, 0, v7, 0);
  v8 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = off_1E99842E0;
  v11 = v7;
  *(_QWORD *)(a1 + 2504) = v11;
  *(_QWORD *)(a1 + 2512) = 0;
  sub_1D52850A0(&__p, "IFD0");
  p_p = &__p;
  *((_DWORD *)sub_1D534A814((uint64_t **)(a1 + 1432), &__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&p_p) + 14) = 5120;
  if (v30 < 0)
    operator delete(__p);
  sub_1D52850A0(&__p, "IFD0");
  p_p = &__p;
  *((_DWORD *)sub_1D534A814((uint64_t **)(a1 + 1456), &__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&p_p) + 14) = 5120;
  if (v30 < 0)
    operator delete(__p);
  sub_1D52850A0(&__p, "IFD0");
  p_p = &__p;
  *((_DWORD *)sub_1D534A814((uint64_t **)(a1 + 512), &__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&p_p) + 14) = 0;
  if (v30 < 0)
    operator delete(__p);
  Width = CVPixelBufferGetWidth(a2);
  sub_1D52850A0(&__p, "IFD0");
  p_p = &__p;
  *((_DWORD *)sub_1D534A814((uint64_t **)(a1 + 536), &__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&p_p) + 14) = Width;
  if (v30 < 0)
    operator delete(__p);
  Height = CVPixelBufferGetHeight(a2);
  sub_1D52850A0(&__p, "IFD0");
  p_p = &__p;
  *((_DWORD *)sub_1D534A814((uint64_t **)(a1 + 560), &__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&p_p) + 14) = Height;
  if (v30 < 0)
    operator delete(__p);
  PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  if (PixelFormatType <= 1734505011)
  {
    if (PixelFormatType == 1278226742)
    {
      sub_1D52850A0(&__p, "IFD0");
      p_p = &__p;
      *((_DWORD *)sub_1D534A814((uint64_t **)(a1 + 632), &__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&p_p) + 14) = 32803;
      if (v30 < 0)
        operator delete(__p);
      sub_1D52850A0(&__p, "IFD0");
      p_p = &__p;
      v19 = sub_1D534A814((uint64_t **)(a1 + 680), &__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&p_p);
      goto LABEL_45;
    }
    if (PixelFormatType == 1650943796)
    {
      sub_1D52850A0(&__p, "IFD0");
      p_p = &__p;
      *((_DWORD *)sub_1D534A814((uint64_t **)(a1 + 632), &__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&p_p) + 14) = 32803;
      if (v30 < 0)
        operator delete(__p);
      __src = 65794;
      sub_1D52850A0(&__p, "IFD0:EXIF");
      p_p = &__p;
      v16 = sub_1D52BA2C8((uint64_t **)(a1 + 992), &__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&p_p);
      sub_1D52B1E94((_QWORD *)v16 + 7, (char *)&__src, (char *)&__p, 4uLL);
      if (v30 < 0)
        operator delete(__p);
      goto LABEL_41;
    }
  }
  else
  {
    switch(PixelFormatType)
    {
      case 1734505012:
        sub_1D52850A0(&__p, "IFD0");
        p_p = &__p;
        *((_DWORD *)sub_1D534A814((uint64_t **)(a1 + 632), &__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&p_p) + 14) = 32803;
        if (v30 < 0)
          operator delete(__p);
        __src = 16777729;
        sub_1D52850A0(&__p, "IFD0:EXIF");
        p_p = &__p;
        v17 = sub_1D52BA2C8((uint64_t **)(a1 + 992), &__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&p_p);
        sub_1D52B1E94((_QWORD *)v17 + 7, (char *)&__src, (char *)&__p, 4uLL);
        if (v30 < 0)
          operator delete(__p);
        goto LABEL_41;
      case 1735549492:
        sub_1D52850A0(&__p, "IFD0");
        p_p = &__p;
        *((_DWORD *)sub_1D534A814((uint64_t **)(a1 + 632), &__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&p_p) + 14) = 32803;
        if (v30 < 0)
          operator delete(__p);
        __src = 16908289;
        sub_1D52850A0(&__p, "IFD0:EXIF");
        p_p = &__p;
        v18 = sub_1D52BA2C8((uint64_t **)(a1 + 992), &__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&p_p);
        sub_1D52B1E94((_QWORD *)v18 + 7, (char *)&__src, (char *)&__p, 4uLL);
        if (v30 < 0)
          operator delete(__p);
        goto LABEL_41;
      case 1919379252:
        sub_1D52850A0(&__p, "IFD0");
        p_p = &__p;
        *((_DWORD *)sub_1D534A814((uint64_t **)(a1 + 632), &__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&p_p) + 14) = 32803;
        if (v30 < 0)
          operator delete(__p);
        __src = 33620224;
        sub_1D52850A0(&__p, "IFD0:EXIF");
        p_p = &__p;
        v15 = sub_1D52BA2C8((uint64_t **)(a1 + 992), &__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&p_p);
        sub_1D52B1E94((_QWORD *)v15 + 7, (char *)&__src, (char *)&__p, 4uLL);
        if (v30 < 0)
          operator delete(__p);
LABEL_41:
        sub_1D52850A0(&__p, "IFD0");
        p_p = &__p;
        v19 = sub_1D534A814((uint64_t **)(a1 + 680), &__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&p_p);
LABEL_45:
        v23 = 1;
        goto LABEL_46;
    }
  }
  sub_1D52850A0(&__p, "IFD0");
  p_p = &__p;
  *((_DWORD *)sub_1D534A814((uint64_t **)(a1 + 632), &__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&p_p) + 14) = 34892;
  if (v30 < 0)
    operator delete(__p);
  sub_1D52850A0(&__p, "IFD0");
  p_p = &__p;
  v19 = sub_1D534A814((uint64_t **)(a1 + 680), &__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&p_p);
  v23 = 3;
LABEL_46:
  *((_DWORD *)v19 + 14) = v23;
  if (v30 < 0)
    operator delete(__p);
  sub_1D5345794(a2, a4, v20, v21, v22);
  v24 = objc_claimAutoreleasedReturnValue();
  v25 = *(void **)(a1 + 2512);
  *(_QWORD *)(a1 + 2512) = v24;

  *(_WORD *)(a1 + 1234) = 3;
  return a1;
}

void sub_1D534569C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  sub_1D5305148(v15);
  _Unwind_Resume(a1);
}

id sub_1D5345794(CVPixelBufferRef pixelBuffer, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  signed int PixelFormatType;
  const char *v8;
  void *v9;
  size_t v10;
  size_t v11;
  size_t PlaneCount;
  int v13;
  size_t Width;
  size_t Height;
  size_t v17;
  size_t v18;
  char *BaseAddress;
  char *v20;
  size_t v21;
  size_t BytesPerRow;
  size_t v23;
  size_t v24;
  void *v25;
  CFTypeRef v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  size_t v38;
  size_t v39;
  size_t v40;
  size_t v41;
  void *v42;
  CFTypeRef v43;
  const char *v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  size_t i;
  char *BaseAddressOfPlane;
  char *v50;
  size_t HeightOfPlane;
  size_t BytesPerRowOfPlane;
  size_t v53;
  size_t v54;
  void *v55;
  CFTypeRef v56;
  const char *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  void *exception;
  CFTypeRef arg;
  uint64_t v63;
  CFTypeRef v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  CFTypeRef v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  _QWORD v74[2];

  v74[1] = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) == 0)
  {
    objc_msgSend_imageWithCVPixelBuffer_(MEMORY[0x1E0C9DDC8], a2, (uint64_t)pixelBuffer, a4, a5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
      return v6;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  v6 = 0;
  if (PixelFormatType <= 1735549491)
  {
    if (PixelFormatType == 1278226742 || PixelFormatType == 1650943796)
      goto LABEL_18;
    v13 = 1734505012;
LABEL_17:
    if (PixelFormatType != v13)
      return v6;
LABEL_18:
    arg = 0;
    v73 = *MEMORY[0x1E0CA8FF0];
    v74[0] = MEMORY[0x1E0C9AA70];
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v8, (uint64_t)v74, (uint64_t)&v73, 1, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    Width = CVPixelBufferGetWidth(pixelBuffer);
    Height = CVPixelBufferGetHeight(pixelBuffer);
    if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Width, Height, 0x4C303136u, (CFDictionaryRef)v9, (CVPixelBufferRef *)&arg))
    {
      CFAutorelease(arg);
      if (!CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL) && !CVPixelBufferLockBaseAddress((CVPixelBufferRef)arg, 0))
      {
        BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
        v20 = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)arg);
        v21 = CVPixelBufferGetHeight(pixelBuffer);
        BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
        v23 = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)arg);
        if (v21)
        {
          v24 = v23;
          do
          {
            memcpy(v20, BaseAddress, BytesPerRow);
            BaseAddress += BytesPerRow;
            v20 += v24;
            --v21;
          }
          while (v21);
        }
        CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)arg, 0);
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
        v25 = (void *)MEMORY[0x1E0C9DDC8];
        v26 = arg;
        v71 = *MEMORY[0x1E0C9E110];
        objc_msgSend_null(MEMORY[0x1E0C99E38], v27, v28, v29, v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        v72 = v31;
        objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v32, (uint64_t)&v72, (uint64_t)&v71, 1);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_imageWithCVPixelBuffer_options_(v25, v34, (uint64_t)v26, (uint64_t)v33, v35);
        v6 = (void *)objc_claimAutoreleasedReturnValue();

        return v6;
      }
    }
    goto LABEL_21;
  }
  if (PixelFormatType > 1815491697)
  {
    if (PixelFormatType == 1815491698)
    {
      arg = 0;
      v69 = *MEMORY[0x1E0CA8FF0];
      v70 = MEMORY[0x1E0C9AA70];
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v8, (uint64_t)&v70, (uint64_t)&v69, 1);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = CVPixelBufferGetWidth(pixelBuffer);
      v18 = CVPixelBufferGetHeight(pixelBuffer);
      if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v17, v18, 0x6C363472u, (CFDictionaryRef)v9, (CVPixelBufferRef *)&arg))
      {
        CFAutorelease(arg);
        if (!CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL)
          && !CVPixelBufferLockBaseAddress((CVPixelBufferRef)arg, 0))
        {
          v36 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
          v37 = (char *)CVPixelBufferGetBaseAddress((CVPixelBufferRef)arg);
          v38 = CVPixelBufferGetHeight(pixelBuffer);
          v39 = CVPixelBufferGetBytesPerRow(pixelBuffer);
          v40 = CVPixelBufferGetBytesPerRow((CVPixelBufferRef)arg);
          if (v38)
          {
            v41 = v40;
            do
            {
              memcpy(v37, v36, v39);
              v36 += v39;
              v37 += v41;
              --v38;
            }
            while (v38);
          }
          CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)arg, 0);
          CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
          v42 = (void *)MEMORY[0x1E0C9DDC8];
          v43 = arg;
          v67 = *MEMORY[0x1E0C9E110];
          v68 = sub_1D543E52C();
          objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v44, (uint64_t)&v68, (uint64_t)&v67, 1);
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_imageWithCVPixelBuffer_options_(v42, v46, (uint64_t)v43, (uint64_t)v45, v47);
          v6 = (void *)objc_claimAutoreleasedReturnValue();

          return v6;
        }
      }
LABEL_21:

      v6 = 0;
      return v6;
    }
    v13 = 1919379252;
    goto LABEL_17;
  }
  if (PixelFormatType == 1735549492)
    goto LABEL_18;
  if (PixelFormatType == 1751527984)
  {
    arg = 0;
    v65 = *MEMORY[0x1E0CA8FF0];
    v66 = MEMORY[0x1E0C9AA70];
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v8, (uint64_t)&v66, (uint64_t)&v65, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = CVPixelBufferGetWidth(pixelBuffer);
    v11 = CVPixelBufferGetHeight(pixelBuffer);
    if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v10, v11, 0x68663230u, (CFDictionaryRef)v9, (CVPixelBufferRef *)&arg))
    {
      goto LABEL_21;
    }
    CFAutorelease(arg);
    PlaneCount = CVPixelBufferGetPlaneCount(pixelBuffer);
    if (PlaneCount != CVPixelBufferGetPlaneCount((CVPixelBufferRef)arg))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL) || CVPixelBufferLockBaseAddress((CVPixelBufferRef)arg, 0))
      goto LABEL_21;
    if (PlaneCount)
    {
      for (i = 0; i != PlaneCount; ++i)
      {
        BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, i);
        v50 = (char *)CVPixelBufferGetBaseAddressOfPlane((CVPixelBufferRef)arg, i);
        HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, i);
        BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, i);
        v53 = CVPixelBufferGetBytesPerRowOfPlane((CVPixelBufferRef)arg, i);
        if (HeightOfPlane)
        {
          v54 = v53;
          do
          {
            memcpy(v50, BaseAddressOfPlane, BytesPerRowOfPlane);
            BaseAddressOfPlane += BytesPerRowOfPlane;
            v50 += v54;
            --HeightOfPlane;
          }
          while (HeightOfPlane);
        }
      }
    }
    CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)arg, 0);
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
    v55 = (void *)MEMORY[0x1E0C9DDC8];
    v56 = arg;
    v63 = *MEMORY[0x1E0C9E110];
    v64 = sub_1D543E52C();
    objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v57, (uint64_t)&v64, (uint64_t)&v63, 1);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_imageWithCVPixelBuffer_options_(v55, v59, (uint64_t)v56, (uint64_t)v58, v60);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v6;
}

void sub_1D5345DF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D5345EB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t i;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  int v59;
  char *v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int v68;
  char *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  id v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t j;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  const char *v85;
  char v86;
  char *v87;
  _BYTE *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  size_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char v98;
  __int128 *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  const char *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  char isKindOfClass;
  uint64_t k;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  void *v122;
  void *v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  _DWORD *v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  id v180;
  const char *v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  uint64_t m;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  void *v191;
  const char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  const char *v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  id v214;
  const char *v215;
  const char *v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  uint64_t n;
  const char *v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  void *v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  const char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  const char *v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  const char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  id v248;
  const char *v249;
  const char *v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  uint64_t ii;
  const char *v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  void *v259;
  const char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  const char *v265;
  uint64_t v266;
  uint64_t v267;
  void *v268;
  const char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  const char *v274;
  uint64_t v275;
  uint64_t v276;
  void *v277;
  const char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  id v282;
  const char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t jj;
  void *v287;
  const char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  _QWORD *v296;
  char *v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  char *v301;
  char *v302;
  uint64_t v303;
  char *v304;
  void *v305;
  char *v306;
  const char *v307;
  uint64_t v308;
  uint64_t v309;
  void *v310;
  const char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  id v315;
  const char *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t kk;
  void *v320;
  const char *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  _QWORD *v329;
  char *v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  char *v334;
  char *v335;
  uint64_t v336;
  const char *v337;
  uint64_t v338;
  uint64_t v339;
  void *v340;
  const char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  const char *v347;
  uint64_t v348;
  uint64_t v349;
  void *v350;
  const char *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  const char *v357;
  uint64_t v358;
  uint64_t v359;
  void *v360;
  const char *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  const char *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  _QWORD *v371;
  void *v372;
  void *v373;
  id v374;
  const char *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t mm;
  void *v379;
  const char *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  char *v387;
  _QWORD *v388;
  char *v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  char *v393;
  char *v394;
  uint64_t v395;
  char *v396;
  void *v397;
  char *v398;
  const char *v399;
  uint64_t v400;
  uint64_t v401;
  void *v402;
  const char *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  void *v407;
  char *v408;
  void *v409;
  id v410;
  const char *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t nn;
  void *v415;
  const char *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t v422;
  char *v423;
  _QWORD *v424;
  char *v425;
  uint64_t v426;
  unint64_t v427;
  uint64_t v428;
  char *v429;
  char *v430;
  uint64_t v431;
  char *v432;
  void *v433;
  char *v434;
  const char *v435;
  uint64_t v436;
  uint64_t v437;
  void *v438;
  const char *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  __int16 v443;
  const char *v444;
  uint64_t v445;
  uint64_t v446;
  void *v447;
  const char *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  __int16 v452;
  const char *v453;
  uint64_t v454;
  uint64_t v455;
  void *v456;
  id v457;
  const char *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  char *v462;
  _OWORD *v463;
  const char *v464;
  uint64_t v465;
  uint64_t v466;
  const char *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  id v471;
  const char *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  double *v477;
  uint64_t v478;
  double v479;
  double *v480;
  double *v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t v484;
  unint64_t v485;
  char *v486;
  double *v487;
  uint64_t v488;
  uint64_t *v489;
  void *v490;
  const char *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  id v498;
  const char *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t i1;
  void *v503;
  const char *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;
  uint64_t v509;
  uint64_t v510;
  char *v511;
  _QWORD *v512;
  char *v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  char *v517;
  char *v518;
  uint64_t v519;
  uint64_t *v520;
  void *v521;
  uint64_t *v522;
  const char *v523;
  uint64_t v524;
  uint64_t v525;
  void *v526;
  const char *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  id v531;
  const char *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  double *v537;
  uint64_t v538;
  double v539;
  double *v540;
  double *v541;
  uint64_t v542;
  unint64_t v543;
  uint64_t v544;
  unint64_t v545;
  char *v546;
  double *v547;
  uint64_t v548;
  uint64_t *v549;
  void *v550;
  const char *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  id v558;
  const char *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t i2;
  void *v563;
  const char *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  uint64_t v569;
  uint64_t v570;
  char *v571;
  _QWORD *v572;
  char *v573;
  uint64_t v574;
  unint64_t v575;
  uint64_t v576;
  char *v577;
  char *v578;
  uint64_t v579;
  uint64_t *v580;
  void *v581;
  uint64_t *v582;
  const char *v583;
  uint64_t v584;
  uint64_t v585;
  void *v586;
  const char *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  id v591;
  const char *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  double *v597;
  uint64_t v598;
  double v599;
  double *v600;
  double *v601;
  uint64_t v602;
  unint64_t v603;
  uint64_t v604;
  unint64_t v605;
  char *v606;
  double *v607;
  uint64_t v608;
  uint64_t *v609;
  void *v610;
  const char *v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  id v618;
  const char *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t i3;
  void *v623;
  const char *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  unint64_t v628;
  uint64_t v629;
  uint64_t v630;
  char *v631;
  _QWORD *v632;
  char *v633;
  uint64_t v634;
  unint64_t v635;
  uint64_t v636;
  char *v637;
  char *v638;
  uint64_t v639;
  uint64_t *v640;
  void *v641;
  uint64_t *v642;
  const char *v643;
  uint64_t v644;
  uint64_t v645;
  void *v646;
  const char *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  id v651;
  const char *v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  double *v657;
  uint64_t v658;
  double v659;
  double *v660;
  double *v661;
  uint64_t v662;
  unint64_t v663;
  uint64_t v664;
  unint64_t v665;
  char *v666;
  double *v667;
  uint64_t v668;
  uint64_t *v669;
  void *v670;
  const char *v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  void *v678;
  id v679;
  const char *v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t i4;
  void *v684;
  const char *v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  unint64_t v689;
  uint64_t v690;
  uint64_t v691;
  char *v692;
  _QWORD *v693;
  char *v694;
  uint64_t v695;
  unint64_t v696;
  uint64_t v697;
  char *v698;
  char *v699;
  uint64_t v700;
  uint64_t *v701;
  void *v702;
  uint64_t *v703;
  const char *v704;
  uint64_t v705;
  uint64_t v706;
  void *v707;
  char v708;
  const char *v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  double v713;
  const char *v714;
  uint64_t v715;
  uint64_t v716;
  void *v717;
  const char *v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  id v722;
  const char *v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t i5;
  void *v727;
  const char *v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  unint64_t v732;
  uint64_t v733;
  uint64_t v734;
  char *v735;
  _QWORD *v736;
  char *v737;
  uint64_t v738;
  unint64_t v739;
  uint64_t v740;
  char *v741;
  char *v742;
  uint64_t v743;
  char *v744;
  void *v745;
  char *v751;
  const char *v752;
  uint64_t v753;
  uint64_t v754;
  void *v755;
  const char *v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  id v760;
  const char *v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t i6;
  const char *v765;
  const char *v766;
  uint64_t v767;
  uint64_t v768;
  void *v769;
  const char *v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  __int128 *v774;
  __int128 *v775;
  const char *v776;
  uint64_t v777;
  uint64_t v778;
  void *v779;
  const char *v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  const char *v786;
  uint64_t v787;
  uint64_t v788;
  void *v789;
  const char *v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  const char *v796;
  uint64_t v797;
  uint64_t v798;
  void *v799;
  const char *v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  const char *v806;
  uint64_t v807;
  uint64_t v808;
  void *v809;
  const char *v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  const char *v816;
  uint64_t v817;
  uint64_t v818;
  void *v819;
  const char *v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  const char *v826;
  uint64_t v827;
  uint64_t v828;
  void *v829;
  const char *v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  unint64_t *v836;
  unint64_t v837;
  std::__shared_weak_count *v838;
  unint64_t *v839;
  unint64_t v840;
  std::__shared_weak_count *v841;
  unint64_t *v842;
  unint64_t v843;
  void *v844;
  void *v845;
  void *v846;
  void *v847;
  void *v848;
  void *v849;
  void *v850;
  void *v851;
  void *v852;
  void *v853;
  void *exception;
  void *v855;
  void *v856;
  void *v857;
  void *v858;
  id v859;
  int v860;
  id v861;
  id v862;
  id v863;
  void *v865;
  void *v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  __int128 v872;
  __int128 v873;
  __int128 v874;
  __int128 v875;
  __int128 v876;
  __int128 v877;
  __int128 v878;
  __int128 v879;
  __int128 v880;
  __int128 v881;
  __int128 v882;
  __int128 v883;
  __int128 v884;
  __int128 v885;
  __int128 v886;
  __int128 v887;
  __int128 v888;
  __int128 v889;
  __int128 v890;
  __int128 v891;
  __int128 v892;
  __int128 v893;
  __int128 v894;
  __int128 v895;
  __int128 v896;
  __int128 v897;
  __int128 v898;
  __int128 v899;
  __int128 v900;
  __int128 v901;
  __int128 v902;
  __int128 v903;
  uint64_t v904;
  __int128 v905;
  __int128 v906;
  __int128 v907;
  __int128 v908;
  __int128 v909;
  __int128 v910;
  __int128 v911;
  __int128 v912;
  __int128 v913;
  __int128 v914;
  __int128 v915;
  __int128 v916;
  __int128 v917;
  __int128 v918;
  __int128 v919;
  __int128 v920;
  __int128 v921;
  __int128 v922;
  __int128 v923;
  __int128 v924;
  __int128 v925;
  __int128 v926;
  __int128 v927;
  __int128 v928;
  __int128 v929;
  __int128 v930;
  __int128 v931;
  __int128 v932;
  __int128 v933;
  __int128 v934;
  __int128 v935;
  __int128 v936;
  void **v937;
  _BYTE v938[128];
  _BYTE v939[128];
  _BYTE v940[128];
  _BYTE v941[128];
  _BYTE v942[128];
  _BYTE v943[128];
  _BYTE v944[128];
  __int128 __p;
  __int128 v946;
  uint64_t v947;
  _BYTE v948[128];
  void *__src[2];
  char v950;
  _BYTE v951[128];
  _BYTE v952[128];
  _BYTE v953[128];
  _BYTE v954[128];
  _BYTE v955[128];
  _BYTE v956[128];
  _BYTE v957[128];
  __int128 v958;
  char *v959;
  _BYTE v960[128];
  uint64_t v961;

  v961 = *MEMORY[0x1E0C80C00];
  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 2504), a2, (uint64_t)CFSTR("{Exif}"), a4, a5);
  v865 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  objc_msgSend_objectForKeyedSubscript_(v865, v5, (uint64_t)CFSTR("ApertureValue"), v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend_doubleValue(v8, v9, v10, v11, v12);
    v14 = v13;
    sub_1D52850A0(&__p, "IFD0:EXIF");
    *(_QWORD *)&v958 = &__p;
    *((_QWORD *)sub_1D52D8024((uint64_t **)(a1 + 360), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v958) + 7) = v14;
    if (SBYTE7(v946) < 0)
      operator delete((void *)__p);
  }

  objc_msgSend_objectForKeyedSubscript_(v865, v15, (uint64_t)CFSTR("FNumber"), v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend_doubleValue(v18, v19, v20, v21, v22);
    v24 = v23;
    sub_1D52850A0(&__p, "IFD0:EXIF");
    *(_QWORD *)&v958 = &__p;
    *((_QWORD *)sub_1D52D8024((uint64_t **)(a1 + 336), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v958) + 7) = v24;
    if (SBYTE7(v946) < 0)
      operator delete((void *)__p);
  }

  objc_msgSend_objectForKeyedSubscript_(v865, v25, (uint64_t)CFSTR("ExposureTime"), v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend_doubleValue(v28, v29, v30, v31, v32);
    v34 = v33;
    sub_1D52850A0(&__p, "IFD0:EXIF");
    *(_QWORD *)&v958 = &__p;
    *((_QWORD *)sub_1D52D8024((uint64_t **)(a1 + 288), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v958) + 7) = v34;
    if (SBYTE7(v946) < 0)
      operator delete((void *)__p);
  }

  objc_msgSend_objectForKeyedSubscript_(v865, v35, (uint64_t)CFSTR("ISOSpeedRatings"), v36, v37);
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (objc_msgSend_count(v38, v39, v40, v41, v42) == 1 || objc_msgSend_count(v38, v43, v44, v45, v46) == 2))
  {
    __p = 0uLL;
    *(_QWORD *)&v946 = 0;
    v933 = 0u;
    v934 = 0u;
    v935 = 0u;
    v936 = 0u;
    v47 = v38;
    v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(v47, v48, (uint64_t)&v933, (uint64_t)v960, 16);
    if (v49)
    {
      v50 = *(_QWORD *)v934;
      do
      {
        for (i = 0; i != v49; ++i)
        {
          if (*(_QWORD *)v934 != v50)
            objc_enumerationMutation(v47);
          v52 = *(void **)(*((_QWORD *)&v933 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            v123 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](v123, "RawCameraException");
            __cxa_throw(v123, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
          v57 = objc_msgSend_unsignedIntValue(v52, v53, v54, v55, v56);
          v59 = v57;
          v60 = (char *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1) >= (unint64_t)v946)
          {
            v62 = (char *)__p;
            v63 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
            v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 62)
              sub_1D5282B8C();
            v65 = v946 - __p;
            if ((uint64_t)(v946 - __p) >> 1 > v64)
              v64 = v65 >> 1;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
              v58 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v58 = v64;
            if (v58)
            {
              v66 = (char *)sub_1D5282BA0((uint64_t)&v946, v58);
              v60 = (char *)*((_QWORD *)&__p + 1);
              v62 = (char *)__p;
            }
            else
            {
              v66 = 0;
            }
            v67 = &v66[4 * v63];
            *(_DWORD *)v67 = v59;
            v61 = v67 + 4;
            while (v60 != v62)
            {
              v68 = *((_DWORD *)v60 - 1);
              v60 -= 4;
              *((_DWORD *)v67 - 1) = v68;
              v67 -= 4;
            }
            *(_QWORD *)&__p = v67;
            *((_QWORD *)&__p + 1) = v61;
            *(_QWORD *)&v946 = &v66[4 * v58];
            if (v62)
              operator delete(v62);
          }
          else
          {
            **((_DWORD **)&__p + 1) = v57;
            v61 = v60 + 4;
          }
          *((_QWORD *)&__p + 1) = v61;
        }
        v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(v47, (const char *)v58, (uint64_t)&v933, (uint64_t)v960, 16);
      }
      while (v49);
    }

    sub_1D52850A0(&v958, "IFD0:EXIF");
    __src[0] = &v958;
    v69 = (char *)sub_1D52BA2C8((uint64_t **)(a1 + 192), (void **)&v958, (uint64_t)&unk_1D544A5C4, (_OWORD **)__src) + 56;
    if (v69 != (char *)&__p)
      sub_1D5282A44(v69, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2);
    if (SHIBYTE(v959) < 0)
      operator delete((void *)v958);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }

  objc_msgSend_objectForKeyedSubscript_(v865, v70, (uint64_t)CFSTR("CFAPattern"), v71, v72);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    __p = 0uLL;
    *(_QWORD *)&v946 = 0;
    v929 = 0u;
    v930 = 0u;
    v931 = 0u;
    v932 = 0u;
    v859 = v73;
    v74 = v73;
    v76 = objc_msgSend_countByEnumeratingWithState_objects_count_(v74, v75, (uint64_t)&v929, (uint64_t)v957, 16);
    if (v76)
    {
      v77 = *(_QWORD *)v930;
      do
      {
        for (j = 0; j != v76; ++j)
        {
          if (*(_QWORD *)v930 != v77)
            objc_enumerationMutation(v74);
          v79 = *(void **)(*((_QWORD *)&v929 + 1) + 8 * j);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            v122 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](v122, "RawCameraException");
            __cxa_throw(v122, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
          v84 = objc_msgSend_unsignedCharValue(v79, v80, v81, v82, v83);
          v86 = v84;
          v87 = (char *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1) >= (unint64_t)v946)
          {
            v89 = __p;
            v90 = *((_QWORD *)&__p + 1) - __p;
            v91 = *((_QWORD *)&__p + 1) - __p + 1;
            if (v91 < 0)
              sub_1D5282B8C();
            v92 = v946 - __p;
            if (2 * ((_QWORD)v946 - (_QWORD)__p) > (unint64_t)v91)
              v91 = 2 * v92;
            if (v92 >= 0x3FFFFFFFFFFFFFFFLL)
              v93 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v93 = v91;
            if (v93)
              v94 = (char *)operator new(v93);
            else
              v94 = 0;
            v95 = &v94[v90];
            v96 = &v94[v90];
            *v96 = v86;
            v88 = v96 + 1;
            if (v87 != (char *)v89)
            {
              v97 = &v87[~v89];
              do
              {
                v98 = *--v87;
                (v97--)[(_QWORD)v94] = v98;
              }
              while (v87 != (char *)v89);
              v87 = (char *)__p;
              v95 = v94;
            }
            *(_QWORD *)&__p = v95;
            *((_QWORD *)&__p + 1) = v88;
            *(_QWORD *)&v946 = &v94[v93];
            if (v87)
              operator delete(v87);
          }
          else
          {
            **((_BYTE **)&__p + 1) = v84;
            v88 = v87 + 1;
          }
          *((_QWORD *)&__p + 1) = v88;
        }
        v76 = objc_msgSend_countByEnumeratingWithState_objects_count_(v74, v85, (uint64_t)&v929, (uint64_t)v957, 16);
      }
      while (v76);
    }

    sub_1D52850A0(&v958, "IFD0:EXIF");
    __src[0] = &v958;
    v73 = v859;
    v99 = (_OWORD *)((char *)sub_1D52BA2C8((uint64_t **)(a1 + 992), (void **)&v958, (uint64_t)&unk_1D544A5C4, (_OWORD **)__src)+ 56);
    if (v99 != &__p)
      sub_1D52B1E94(v99, (char *)__p, *((char **)&__p + 1), *((_QWORD *)&__p + 1) - __p);
    if (SHIBYTE(v959) < 0)
      operator delete((void *)v958);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }

  objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 2504), v100, (uint64_t)CFSTR("{DNG}"), v101, v102);
  v866 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v855 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v855, "RawCameraException");
    __cxa_throw(v855, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  objc_msgSend_objectForKeyedSubscript_(v866, v103, (uint64_t)CFSTR("ActiveArea"), v104, v105);
  v106 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v106, v107, v108, v109, v110) == 4)
  {
    v927 = 0u;
    v928 = 0u;
    v925 = 0u;
    v926 = 0u;
    v111 = v106;
    v114 = objc_msgSend_countByEnumeratingWithState_objects_count_(v111, v112, (uint64_t)&v925, (uint64_t)v956, 16);
    if (v114)
    {
      v115 = *(_QWORD *)v926;
      isKindOfClass = 1;
      do
      {
        for (k = 0; k != v114; ++k)
        {
          if (*(_QWORD *)v926 != v115)
            objc_enumerationMutation(v111);
          if ((isKindOfClass & 1) != 0)
          {
            objc_opt_class();
            isKindOfClass = objc_opt_isKindOfClass();
          }
          else
          {
            isKindOfClass = 0;
          }
        }
        v114 = objc_msgSend_countByEnumeratingWithState_objects_count_(v111, v113, (uint64_t)&v925, (uint64_t)v956, 16);
      }
      while (v114);

      if ((isKindOfClass & 1) == 0)
      {
        v121 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v121, "RawCameraException");
        __cxa_throw(v121, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
    }
    else
    {

    }
    objc_msgSend_objectAtIndexedSubscript_(v111, v118, 1, v119, v120);
    v857 = (void *)objc_claimAutoreleasedReturnValue();
    v860 = objc_msgSend_intValue(v857, v124, v125, v126, v127);
    objc_msgSend_objectAtIndexedSubscript_(v111, v128, 0, v129, v130);
    v856 = (void *)objc_claimAutoreleasedReturnValue();
    v135 = objc_msgSend_intValue(v856, v131, v132, v133, v134);
    objc_msgSend_objectAtIndexedSubscript_(v111, v136, 3, v137, v138);
    v858 = (void *)objc_claimAutoreleasedReturnValue();
    v143 = objc_msgSend_intValue(v858, v139, v140, v141, v142);
    objc_msgSend_objectAtIndexedSubscript_(v111, v144, 1, v145, v146);
    v147 = (void *)objc_claimAutoreleasedReturnValue();
    v152 = objc_msgSend_intValue(v147, v148, v149, v150, v151);
    objc_msgSend_objectAtIndexedSubscript_(v111, v153, 2, v154, v155);
    v156 = (void *)objc_claimAutoreleasedReturnValue();
    v161 = objc_msgSend_intValue(v156, v157, v158, v159, v160);
    objc_msgSend_objectAtIndexedSubscript_(v111, v162, 0, v163, v164);
    v165 = (void *)objc_claimAutoreleasedReturnValue();
    v170 = objc_msgSend_intValue(v165, v166, v167, v168, v169);
    sub_1D52850A0(&__p, "IFD0");
    *(_QWORD *)&v958 = &__p;
    v171 = sub_1D534A8AC((uint64_t **)(a1 + 1408), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v958);
    v171[14] = v860;
    v171[15] = v135;
    v171[16] = v143 - v152;
    v171[17] = v161 - v170;
    if (SBYTE7(v946) < 0)
      operator delete((void *)__p);

  }
  objc_msgSend_objectForKeyedSubscript_(v866, v172, (uint64_t)CFSTR("DefaultCropOrigin"), v173, v174);
  v175 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v175, v176, v177, v178, v179) == 2)
  {
    v923 = 0u;
    v924 = 0u;
    v921 = 0u;
    v922 = 0u;
    v180 = v175;
    v183 = objc_msgSend_countByEnumeratingWithState_objects_count_(v180, v181, (uint64_t)&v921, (uint64_t)v955, 16);
    if (v183)
    {
      v184 = *(_QWORD *)v922;
      v185 = 1;
      do
      {
        for (m = 0; m != v183; ++m)
        {
          if (*(_QWORD *)v922 != v184)
            objc_enumerationMutation(v180);
          if ((v185 & 1) != 0)
          {
            objc_opt_class();
            v185 = objc_opt_isKindOfClass();
          }
          else
          {
            v185 = 0;
          }
        }
        v183 = objc_msgSend_countByEnumeratingWithState_objects_count_(v180, v182, (uint64_t)&v921, (uint64_t)v955, 16);
      }
      while (v183);

      if ((v185 & 1) == 0)
      {
        v190 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v190, "RawCameraException");
        __cxa_throw(v190, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
    }
    else
    {

    }
    objc_msgSend_objectAtIndexedSubscript_(v180, v187, 0, v188, v189);
    v191 = (void *)objc_claimAutoreleasedReturnValue();
    v196 = objc_msgSend_intValue(v191, v192, v193, v194, v195);
    objc_msgSend_objectAtIndexedSubscript_(v180, v197, 1, v198, v199);
    v200 = (void *)objc_claimAutoreleasedReturnValue();
    v205 = objc_msgSend_intValue(v200, v201, v202, v203, v204);
    sub_1D52850A0(&__p, "IFD0");
    *(_QWORD *)&v958 = &__p;
    *((_QWORD *)sub_1D52D8024((uint64_t **)(a1 + 1336), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v958) + 7) = v196 | (unint64_t)(v205 << 32);
    if (SBYTE7(v946) < 0)
      operator delete((void *)__p);

  }
  objc_msgSend_objectForKeyedSubscript_(v866, v206, (uint64_t)CFSTR("DefaultCropSize"), v207, v208);
  v209 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v209, v210, v211, v212, v213) == 2)
  {
    v919 = 0u;
    v920 = 0u;
    v917 = 0u;
    v918 = 0u;
    v214 = v209;
    v217 = objc_msgSend_countByEnumeratingWithState_objects_count_(v214, v215, (uint64_t)&v917, (uint64_t)v954, 16);
    if (v217)
    {
      v218 = *(_QWORD *)v918;
      v219 = 1;
      do
      {
        for (n = 0; n != v217; ++n)
        {
          if (*(_QWORD *)v918 != v218)
            objc_enumerationMutation(v214);
          if ((v219 & 1) != 0)
          {
            objc_opt_class();
            v219 = objc_opt_isKindOfClass();
          }
          else
          {
            v219 = 0;
          }
        }
        v217 = objc_msgSend_countByEnumeratingWithState_objects_count_(v214, v216, (uint64_t)&v917, (uint64_t)v954, 16);
      }
      while (v217);

      if ((v219 & 1) == 0)
      {
        v224 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v224, "RawCameraException");
        __cxa_throw(v224, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
    }
    else
    {

    }
    objc_msgSend_objectAtIndexedSubscript_(v214, v221, 0, v222, v223);
    v225 = (void *)objc_claimAutoreleasedReturnValue();
    v230 = objc_msgSend_intValue(v225, v226, v227, v228, v229);
    objc_msgSend_objectAtIndexedSubscript_(v214, v231, 1, v232, v233);
    v234 = (void *)objc_claimAutoreleasedReturnValue();
    v239 = objc_msgSend_intValue(v234, v235, v236, v237, v238);
    sub_1D52850A0(&__p, "IFD0");
    *(_QWORD *)&v958 = &__p;
    *((_QWORD *)sub_1D52D8024((uint64_t **)(a1 + 1360), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v958) + 7) = v230 | (unint64_t)(v239 << 32);
    if (SBYTE7(v946) < 0)
      operator delete((void *)__p);

  }
  objc_msgSend_objectForKeyedSubscript_(v866, v240, (uint64_t)CFSTR("DefaultCropScale"), v241, v242);
  v243 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v243, v244, v245, v246, v247) == 2)
  {
    v915 = 0u;
    v916 = 0u;
    v913 = 0u;
    v914 = 0u;
    v248 = v243;
    v251 = objc_msgSend_countByEnumeratingWithState_objects_count_(v248, v249, (uint64_t)&v913, (uint64_t)v953, 16);
    if (v251)
    {
      v252 = *(_QWORD *)v914;
      v253 = 1;
      do
      {
        for (ii = 0; ii != v251; ++ii)
        {
          if (*(_QWORD *)v914 != v252)
            objc_enumerationMutation(v248);
          if ((v253 & 1) != 0)
          {
            objc_opt_class();
            v253 = objc_opt_isKindOfClass();
          }
          else
          {
            v253 = 0;
          }
        }
        v251 = objc_msgSend_countByEnumeratingWithState_objects_count_(v248, v250, (uint64_t)&v913, (uint64_t)v953, 16);
      }
      while (v251);

      if ((v253 & 1) == 0)
      {
        v258 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v258, "RawCameraException");
        __cxa_throw(v258, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
    }
    else
    {

    }
    objc_msgSend_objectAtIndexedSubscript_(v248, v255, 0, v256, v257);
    v259 = (void *)objc_claimAutoreleasedReturnValue();
    v264 = objc_msgSend_intValue(v259, v260, v261, v262, v263);
    objc_msgSend_objectAtIndexedSubscript_(v248, v265, 1, v266, v267);
    v268 = (void *)objc_claimAutoreleasedReturnValue();
    v273 = objc_msgSend_intValue(v268, v269, v270, v271, v272);
    sub_1D52850A0(&__p, "IFD0");
    *(_QWORD *)&v958 = &__p;
    *((_QWORD *)sub_1D52D8024((uint64_t **)(a1 + 1384), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v958) + 7) = v264 | (unint64_t)(v273 << 32);
    if (SBYTE7(v946) < 0)
      operator delete((void *)__p);

  }
  objc_msgSend_objectForKeyedSubscript_(v866, v274, (uint64_t)CFSTR("AnalogBalance"), v275, v276);
  v277 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v277, v278, v279, v280, v281) == 3)
  {
    __p = 0uLL;
    *(_QWORD *)&v946 = 0;
    v909 = 0u;
    v910 = 0u;
    v911 = 0u;
    v912 = 0u;
    v282 = v277;
    v284 = objc_msgSend_countByEnumeratingWithState_objects_count_(v282, v283, (uint64_t)&v909, (uint64_t)v952, 16);
    if (v284)
    {
      v285 = *(_QWORD *)v910;
      do
      {
        for (jj = 0; jj != v284; ++jj)
        {
          if (*(_QWORD *)v910 != v285)
            objc_enumerationMutation(v282);
          v287 = *(void **)(*((_QWORD *)&v909 + 1) + 8 * jj);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            v844 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](v844, "RawCameraException");
            __cxa_throw(v844, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
          objc_msgSend_doubleValue(v287, v288, v289, v290, v291);
          v294 = v293;
          v295 = (char *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1) >= (unint64_t)v946)
          {
            v297 = (char *)__p;
            v298 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3;
            v299 = v298 + 1;
            if ((unint64_t)(v298 + 1) >> 61)
              sub_1D5282B8C();
            v300 = v946 - __p;
            if ((uint64_t)(v946 - __p) >> 2 > v299)
              v299 = v300 >> 2;
            if ((unint64_t)v300 >= 0x7FFFFFFFFFFFFFF8)
              v292 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v292 = v299;
            if (v292)
            {
              v301 = (char *)sub_1D5282D28((uint64_t)&v946, v292);
              v295 = (char *)*((_QWORD *)&__p + 1);
              v297 = (char *)__p;
            }
            else
            {
              v301 = 0;
            }
            v302 = &v301[8 * v298];
            *(_QWORD *)v302 = v294;
            v296 = v302 + 8;
            while (v295 != v297)
            {
              v303 = *((_QWORD *)v295 - 1);
              v295 -= 8;
              *((_QWORD *)v302 - 1) = v303;
              v302 -= 8;
            }
            *(_QWORD *)&__p = v302;
            *((_QWORD *)&__p + 1) = v296;
            *(_QWORD *)&v946 = &v301[8 * v292];
            if (v297)
              operator delete(v297);
          }
          else
          {
            **((_QWORD **)&__p + 1) = v293;
            v296 = v295 + 8;
          }
          *((_QWORD *)&__p + 1) = v296;
        }
        v284 = objc_msgSend_countByEnumeratingWithState_objects_count_(v282, (const char *)v292, (uint64_t)&v909, (uint64_t)v952, 16);
      }
      while (v284);
    }

    sub_1D52850A0(&v958, "IFD0");
    __src[0] = &v958;
    v304 = (char *)sub_1D52BA2C8((uint64_t **)(a1 + 1864), (void **)&v958, (uint64_t)&unk_1D544A5C4, (_OWORD **)__src)
         + 56;
    if (v304 != (char *)&__p)
      sub_1D528FA34(v304, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3);
    if (SHIBYTE(v959) < 0)
      operator delete((void *)v958);
    v305 = (void *)__p;
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
LABEL_185:
      operator delete(v305);
    }
  }
  else
  {
    *(_QWORD *)&v946 = 0x3FF0000000000000;
    __p = xmmword_1D544C100;
    sub_1D52850A0(&v958, "IFD0");
    __src[0] = &v958;
    v306 = (char *)sub_1D52BA2C8((uint64_t **)(a1 + 1864), (void **)&v958, (uint64_t)&unk_1D544A5C4, (_OWORD **)__src);
    sub_1D528FA34(v306 + 56, (char *)&__p, (uint64_t)&v946 + 8, 3uLL);
    if (SHIBYTE(v959) < 0)
    {
      v305 = (void *)v958;
      goto LABEL_185;
    }
  }

  objc_msgSend_objectForKeyedSubscript_(v866, v307, (uint64_t)CFSTR("AsShotNeutral"), v308, v309);
  v310 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v310, v311, v312, v313, v314) == 3)
  {
    __p = 0uLL;
    *(_QWORD *)&v946 = 0;
    v905 = 0u;
    v906 = 0u;
    v907 = 0u;
    v908 = 0u;
    v315 = v310;
    v317 = objc_msgSend_countByEnumeratingWithState_objects_count_(v315, v316, (uint64_t)&v905, (uint64_t)v951, 16);
    if (v317)
    {
      v318 = *(_QWORD *)v906;
      do
      {
        for (kk = 0; kk != v317; ++kk)
        {
          if (*(_QWORD *)v906 != v318)
            objc_enumerationMutation(v315);
          v320 = *(void **)(*((_QWORD *)&v905 + 1) + 8 * kk);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            v845 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](v845, "RawCameraException");
            __cxa_throw(v845, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
          objc_msgSend_doubleValue(v320, v321, v322, v323, v324);
          v327 = v326;
          v328 = (char *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1) >= (unint64_t)v946)
          {
            v330 = (char *)__p;
            v331 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3;
            v332 = v331 + 1;
            if ((unint64_t)(v331 + 1) >> 61)
              sub_1D5282B8C();
            v333 = v946 - __p;
            if ((uint64_t)(v946 - __p) >> 2 > v332)
              v332 = v333 >> 2;
            if ((unint64_t)v333 >= 0x7FFFFFFFFFFFFFF8)
              v325 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v325 = v332;
            if (v325)
            {
              v334 = (char *)sub_1D5282D28((uint64_t)&v946, v325);
              v328 = (char *)*((_QWORD *)&__p + 1);
              v330 = (char *)__p;
            }
            else
            {
              v334 = 0;
            }
            v335 = &v334[8 * v331];
            *(_QWORD *)v335 = v327;
            v329 = v335 + 8;
            while (v328 != v330)
            {
              v336 = *((_QWORD *)v328 - 1);
              v328 -= 8;
              *((_QWORD *)v335 - 1) = v336;
              v335 -= 8;
            }
            *(_QWORD *)&__p = v335;
            *((_QWORD *)&__p + 1) = v329;
            *(_QWORD *)&v946 = &v334[8 * v325];
            if (v330)
              operator delete(v330);
          }
          else
          {
            **((_QWORD **)&__p + 1) = v326;
            v329 = v328 + 8;
          }
          *((_QWORD *)&__p + 1) = v329;
        }
        v317 = objc_msgSend_countByEnumeratingWithState_objects_count_(v315, (const char *)v325, (uint64_t)&v905, (uint64_t)v951, 16);
      }
      while (v317);
    }

    if ((__int128 *)(a1 + 1248) != &__p)
      sub_1D528FA34((char *)(a1 + 1248), (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  else
  {
    *(_QWORD *)&v946 = 0x3FF0000000000000;
    __p = xmmword_1D544C100;
    sub_1D528FA34((char *)(a1 + 1248), (char *)&__p, (uint64_t)&v946 + 8, 3uLL);
  }

  objc_msgSend_objectForKeyedSubscript_(v866, v337, (uint64_t)CFSTR("AntiAliasStrength"), v338, v339);
  v340 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend_doubleValue(v340, v341, v342, v343, v344);
    v346 = v345;
    sub_1D52850A0(&__p, "IFD0");
    *(_QWORD *)&v958 = &__p;
    *((_QWORD *)sub_1D52D8024((uint64_t **)(a1 + 1528), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v958) + 7) = v346;
  }
  else
  {
    sub_1D52850A0(&__p, "IFD0");
    *(_QWORD *)&v958 = &__p;
    *((_QWORD *)sub_1D52D8024((uint64_t **)(a1 + 1528), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v958) + 7) = 0x3FF0000000000000;
  }
  if (SBYTE7(v946) < 0)
    operator delete((void *)__p);

  objc_msgSend_objectForKeyedSubscript_(v866, v347, (uint64_t)CFSTR("BaselineExposure"), v348, v349);
  v350 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend_doubleValue(v350, v351, v352, v353, v354);
    v356 = v355;
    sub_1D52850A0(&__p, "IFD0");
    *(_QWORD *)&v958 = &__p;
    *((_QWORD *)sub_1D52D8024((uint64_t **)(a1 + 1888), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v958) + 7) = v356;
  }
  else
  {
    sub_1D52850A0(&__p, "IFD0");
    *(_QWORD *)&v958 = &__p;
    *((_QWORD *)sub_1D52D8024((uint64_t **)(a1 + 1888), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v958) + 7) = 0;
  }
  if (SBYTE7(v946) < 0)
    operator delete((void *)__p);

  objc_msgSend_objectForKeyedSubscript_(v866, v357, (uint64_t)CFSTR("BlackLevel"), v358, v359);
  v360 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend_objectForKeyedSubscript_(v866, v361, (uint64_t)CFSTR("BlackLevel"), v363, v364);
    v373 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      __p = 0uLL;
      *(_QWORD *)&v946 = 0;
      v900 = 0u;
      v901 = 0u;
      v902 = 0u;
      v903 = 0u;
      v374 = v373;
      v376 = objc_msgSend_countByEnumeratingWithState_objects_count_(v374, v375, (uint64_t)&v900, (uint64_t)v948, 16);
      if (v376)
      {
        v377 = *(_QWORD *)v901;
        do
        {
          for (mm = 0; mm != v376; ++mm)
          {
            if (*(_QWORD *)v901 != v377)
              objc_enumerationMutation(v374);
            v379 = *(void **)(*((_QWORD *)&v900 + 1) + 8 * mm);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v846 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1D8271938](v846, "RawCameraException");
              __cxa_throw(v846, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
            }
            objc_msgSend_doubleValue(v379, v380, v381, v382, v383);
            v386 = v385;
            v387 = (char *)*((_QWORD *)&__p + 1);
            if (*((_QWORD *)&__p + 1) >= (unint64_t)v946)
            {
              v389 = (char *)__p;
              v390 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3;
              v391 = v390 + 1;
              if ((unint64_t)(v390 + 1) >> 61)
                sub_1D5282B8C();
              v392 = v946 - __p;
              if ((uint64_t)(v946 - __p) >> 2 > v391)
                v391 = v392 >> 2;
              if ((unint64_t)v392 >= 0x7FFFFFFFFFFFFFF8)
                v384 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v384 = v391;
              if (v384)
              {
                v393 = (char *)sub_1D5282D28((uint64_t)&v946, v384);
                v387 = (char *)*((_QWORD *)&__p + 1);
                v389 = (char *)__p;
              }
              else
              {
                v393 = 0;
              }
              v394 = &v393[8 * v390];
              *(_QWORD *)v394 = v386;
              v388 = v394 + 8;
              while (v387 != v389)
              {
                v395 = *((_QWORD *)v387 - 1);
                v387 -= 8;
                *((_QWORD *)v394 - 1) = v395;
                v394 -= 8;
              }
              *(_QWORD *)&__p = v394;
              *((_QWORD *)&__p + 1) = v388;
              *(_QWORD *)&v946 = &v393[8 * v384];
              if (v389)
                operator delete(v389);
            }
            else
            {
              **((_QWORD **)&__p + 1) = v385;
              v388 = v387 + 8;
            }
            *((_QWORD *)&__p + 1) = v388;
          }
          v376 = objc_msgSend_countByEnumeratingWithState_objects_count_(v374, (const char *)v384, (uint64_t)&v900, (uint64_t)v948, 16);
        }
        while (v376);
      }

      sub_1D52850A0(&v958, "IFD0");
      __src[0] = &v958;
      v396 = (char *)sub_1D52BA2C8((uint64_t **)(a1 + 264), (void **)&v958, (uint64_t)&unk_1D544A5C4, (_OWORD **)__src)
           + 56;
      if (v396 != (char *)&__p)
        sub_1D528FA34(v396, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3);
      if (SHIBYTE(v959) < 0)
        operator delete((void *)v958);
      v397 = (void *)__p;
      if (!(_QWORD)__p)
        goto LABEL_269;
      *((_QWORD *)&__p + 1) = __p;
    }
    else
    {
      v946 = 0u;
      __p = 0u;
      sub_1D52850A0(&v958, "IFD0");
      __src[0] = &v958;
      v398 = (char *)sub_1D52BA2C8((uint64_t **)(a1 + 264), (void **)&v958, (uint64_t)&unk_1D544A5C4, (_OWORD **)__src);
      sub_1D528FA34(v398 + 56, (char *)&__p, (uint64_t)&v947, 4uLL);
      if ((SHIBYTE(v959) & 0x80000000) == 0)
      {
LABEL_269:

        goto LABEL_270;
      }
      v397 = (void *)v958;
    }
    operator delete(v397);
    goto LABEL_269;
  }
  objc_msgSend_doubleValue(v360, v361, v362, v363, v364);
  *(_QWORD *)&v958 = v365;
  sub_1D528F9B4(&__p, 4uLL, &v958);
  objc_msgSend_doubleValue(v360, v366, v367, v368, v369);
  v904 = v370;
  sub_1D528F9B4(&v958, 4uLL, &v904);
  sub_1D52850A0(__src, "IFD0");
  v937 = __src;
  v371 = sub_1D52BA2C8((uint64_t **)(a1 + 264), __src, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v937);
  v372 = (void *)v371[7];
  if (v372)
  {
    v371[8] = v372;
    operator delete(v372);
    v371[7] = 0;
    v371[8] = 0;
    v371[9] = 0;
  }
  *(_OWORD *)(v371 + 7) = v958;
  v371[9] = v959;
  v959 = 0;
  v958 = 0uLL;
  if (v950 < 0)
  {
    operator delete(__src[0]);
    if ((_QWORD)v958)
    {
      *((_QWORD *)&v958 + 1) = v958;
      operator delete((void *)v958);
    }
  }
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
LABEL_270:

  objc_msgSend_objectForKeyedSubscript_(v866, v399, (uint64_t)CFSTR("WhiteLevel"), v400, v401);
  v402 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_msgSend_objectForKeyedSubscript_(v866, v403, (uint64_t)CFSTR("WhiteLevel"), v405, v406);
    v409 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      __p = 0uLL;
      *(_QWORD *)&v946 = 0;
      v896 = 0u;
      v897 = 0u;
      v898 = 0u;
      v899 = 0u;
      v410 = v409;
      v412 = objc_msgSend_countByEnumeratingWithState_objects_count_(v410, v411, (uint64_t)&v896, (uint64_t)v944, 16);
      if (v412)
      {
        v413 = *(_QWORD *)v897;
        do
        {
          for (nn = 0; nn != v412; ++nn)
          {
            if (*(_QWORD *)v897 != v413)
              objc_enumerationMutation(v410);
            v415 = *(void **)(*((_QWORD *)&v896 + 1) + 8 * nn);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v847 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1D8271938](v847, "RawCameraException");
              __cxa_throw(v847, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
            }
            objc_msgSend_doubleValue(v415, v416, v417, v418, v419);
            v422 = v421;
            v423 = (char *)*((_QWORD *)&__p + 1);
            if (*((_QWORD *)&__p + 1) >= (unint64_t)v946)
            {
              v425 = (char *)__p;
              v426 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3;
              v427 = v426 + 1;
              if ((unint64_t)(v426 + 1) >> 61)
                sub_1D5282B8C();
              v428 = v946 - __p;
              if ((uint64_t)(v946 - __p) >> 2 > v427)
                v427 = v428 >> 2;
              if ((unint64_t)v428 >= 0x7FFFFFFFFFFFFFF8)
                v420 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v420 = v427;
              if (v420)
              {
                v429 = (char *)sub_1D5282D28((uint64_t)&v946, v420);
                v423 = (char *)*((_QWORD *)&__p + 1);
                v425 = (char *)__p;
              }
              else
              {
                v429 = 0;
              }
              v430 = &v429[8 * v426];
              *(_QWORD *)v430 = v422;
              v424 = v430 + 8;
              while (v423 != v425)
              {
                v431 = *((_QWORD *)v423 - 1);
                v423 -= 8;
                *((_QWORD *)v430 - 1) = v431;
                v430 -= 8;
              }
              *(_QWORD *)&__p = v430;
              *((_QWORD *)&__p + 1) = v424;
              *(_QWORD *)&v946 = &v429[8 * v420];
              if (v425)
                operator delete(v425);
            }
            else
            {
              **((_QWORD **)&__p + 1) = v421;
              v424 = v423 + 8;
            }
            *((_QWORD *)&__p + 1) = v424;
          }
          v412 = objc_msgSend_countByEnumeratingWithState_objects_count_(v410, (const char *)v420, (uint64_t)&v896, (uint64_t)v944, 16);
        }
        while (v412);
      }

      sub_1D52850A0(&v958, "IFD0");
      __src[0] = &v958;
      v432 = (char *)sub_1D52BA2C8((uint64_t **)(a1 + 240), (void **)&v958, (uint64_t)&unk_1D544A5C4, (_OWORD **)__src)
           + 56;
      if (v432 != (char *)&__p)
        sub_1D528FA34(v432, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3);
      if (SHIBYTE(v959) < 0)
        operator delete((void *)v958);
      v433 = (void *)__p;
      if (!(_QWORD)__p)
        goto LABEL_307;
      *((_QWORD *)&__p + 1) = __p;
    }
    else
    {
      __p = xmmword_1D544C118;
      *(_QWORD *)&v946 = 0x40EFFFE000000000;
      sub_1D52850A0(&v958, "IFD0");
      __src[0] = &v958;
      v434 = (char *)sub_1D52BA2C8((uint64_t **)(a1 + 240), (void **)&v958, (uint64_t)&unk_1D544A5C4, (_OWORD **)__src);
      sub_1D528FA34(v434 + 56, (char *)&__p, (uint64_t)&v946 + 8, 3uLL);
      if ((SHIBYTE(v959) & 0x80000000) == 0)
      {
LABEL_307:

        goto LABEL_308;
      }
      v433 = (void *)v958;
    }
    operator delete(v433);
    goto LABEL_307;
  }
  objc_msgSend_doubleValue(v402, v403, v404, v405, v406);
  __src[0] = v407;
  sub_1D52850A0(&__p, "IFD0");
  *(_QWORD *)&v958 = &__p;
  v408 = (char *)sub_1D52BA2C8((uint64_t **)(a1 + 240), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v958);
  sub_1D528FA34(v408 + 56, (char *)__src, (uint64_t)&__src[1], 1uLL);
  if (SBYTE7(v946) < 0)
    operator delete((void *)__p);
LABEL_308:

  objc_msgSend_objectForKeyedSubscript_(v866, v435, (uint64_t)CFSTR("CalibrationIlluminant1"), v436, v437);
  v438 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v443 = objc_msgSend_unsignedShortValue(v438, v439, v440, v441, v442);
    sub_1D52850A0(&__p, "IFD0");
    *(_QWORD *)&v958 = &__p;
    *((_WORD *)sub_1D52E36EC((uint64_t **)(a1 + 1816), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v958) + 28) = v443;
  }
  else
  {
    sub_1D52850A0(&__p, "IFD0");
    *(_QWORD *)&v958 = &__p;
    *((_WORD *)sub_1D52E36EC((uint64_t **)(a1 + 1816), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v958) + 28) = 17;
  }
  if (SBYTE7(v946) < 0)
    operator delete((void *)__p);

  objc_msgSend_objectForKeyedSubscript_(v866, v444, (uint64_t)CFSTR("CalibrationIlluminant2"), v445, v446);
  v447 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v452 = objc_msgSend_unsignedShortValue(v447, v448, v449, v450, v451);
    sub_1D52850A0(&__p, "IFD0");
    *(_QWORD *)&v958 = &__p;
    *((_WORD *)sub_1D52E36EC((uint64_t **)(a1 + 1840), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v958) + 28) = v452;
  }
  else
  {
    sub_1D52850A0(&__p, "IFD0");
    *(_QWORD *)&v958 = &__p;
    *((_WORD *)sub_1D52E36EC((uint64_t **)(a1 + 1840), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v958) + 28) = 21;
  }
  if (SBYTE7(v946) < 0)
    operator delete((void *)__p);

  objc_msgSend_objectForKeyedSubscript_(v866, v453, (uint64_t)CFSTR("UniqueCameraModel"), v454, v455);
  v456 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v457 = objc_retainAutorelease(v456);
    v462 = (char *)objc_msgSend_UTF8String(v457, v458, v459, v460, v461);
    sub_1D52850A0(&__p, "IFD0");
    *(_QWORD *)&v958 = &__p;
    v463 = sub_1D534A944((uint64_t **)(a1 + 1312), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v958);
    sub_1D528530C((std::string *)((char *)v463 + 56), v462);
    if (SBYTE7(v946) < 0)
      operator delete((void *)__p);
  }

  objc_msgSend_objectForKeyedSubscript_(v866, v464, (uint64_t)CFSTR("ColorMatrix1"), v465, v466);
  v861 = (id)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || objc_msgSend_length(v861, v467, v468, v469, v470) != 36)
  {
    objc_msgSend_objectForKeyedSubscript_(v866, v467, (uint64_t)CFSTR("ColorMatrix1"), v469, v470);
    v490 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v490, v491, v492, v493, v494) == 9)
    {
      v958 = 0uLL;
      v959 = 0;
      v892 = 0u;
      v893 = 0u;
      v894 = 0u;
      v895 = 0u;
      v498 = v490;
      v500 = objc_msgSend_countByEnumeratingWithState_objects_count_(v498, v499, (uint64_t)&v892, (uint64_t)v943, 16);
      if (v500)
      {
        v501 = *(_QWORD *)v893;
        do
        {
          for (i1 = 0; i1 != v500; ++i1)
          {
            if (*(_QWORD *)v893 != v501)
              objc_enumerationMutation(v498);
            v503 = *(void **)(*((_QWORD *)&v892 + 1) + 8 * i1);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v850 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1D8271938](v850, "RawCameraException");
              __cxa_throw(v850, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
            }
            objc_msgSend_doubleValue(v503, v504, v505, v506, v507);
            v510 = v509;
            v511 = (char *)*((_QWORD *)&v958 + 1);
            if (*((_QWORD *)&v958 + 1) >= (unint64_t)v959)
            {
              v513 = (char *)v958;
              v514 = (uint64_t)(*((_QWORD *)&v958 + 1) - v958) >> 3;
              v515 = v514 + 1;
              if ((unint64_t)(v514 + 1) >> 61)
                sub_1D5282B8C();
              v516 = (uint64_t)&v959[-v958];
              if ((uint64_t)&v959[-v958] >> 2 > v515)
                v515 = v516 >> 2;
              if ((unint64_t)v516 >= 0x7FFFFFFFFFFFFFF8)
                v508 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v508 = v515;
              if (v508)
              {
                v517 = (char *)sub_1D5282D28((uint64_t)&v959, v508);
                v511 = (char *)*((_QWORD *)&v958 + 1);
                v513 = (char *)v958;
              }
              else
              {
                v517 = 0;
              }
              v518 = &v517[8 * v514];
              *(_QWORD *)v518 = v510;
              v512 = v518 + 8;
              while (v511 != v513)
              {
                v519 = *((_QWORD *)v511 - 1);
                v511 -= 8;
                *((_QWORD *)v518 - 1) = v519;
                v518 -= 8;
              }
              *(_QWORD *)&v958 = v518;
              *((_QWORD *)&v958 + 1) = v512;
              v959 = &v517[8 * v508];
              if (v513)
                operator delete(v513);
            }
            else
            {
              **((_QWORD **)&v958 + 1) = v509;
              v512 = v511 + 8;
            }
            *((_QWORD *)&v958 + 1) = v512;
          }
          v500 = objc_msgSend_countByEnumeratingWithState_objects_count_(v498, (const char *)v508, (uint64_t)&v892, (uint64_t)v943, 16);
        }
        while (v500);
      }

      sub_1D5338F80(&__p, 3, 3, &v958);
      sub_1D52850A0(__src, "IFD0");
      v937 = __src;
      v520 = sub_1D534AA08((uint64_t **)(a1 + 1624), __src, (uint64_t)&unk_1D544A5C4, (__int128 **)&v937);
      sub_1D53393A8(v520 + 7, (uint64_t)&__p);
      if (v950 < 0)
        operator delete(__src[0]);
      if (*((_QWORD *)&__p + 1))
      {
        *(_QWORD *)&v946 = *((_QWORD *)&__p + 1);
        operator delete(*((void **)&__p + 1));
      }
      v521 = (void *)v958;
      if (!(_QWORD)v958)
        goto LABEL_384;
      *((_QWORD *)&v958 + 1) = v958;
    }
    else
    {
      sub_1D5338D40((uint64_t)&__p, 3u, 3u, 1.0, v493, v494, v495, v496, v497, 0);
      sub_1D52850A0(&v958, "IFD0");
      __src[0] = &v958;
      v522 = sub_1D534AA08((uint64_t **)(a1 + 1624), (void **)&v958, (uint64_t)&unk_1D544A5C4, (__int128 **)__src);
      sub_1D53393A8(v522 + 7, (uint64_t)&__p);
      if (SHIBYTE(v959) < 0)
        operator delete((void *)v958);
      v521 = (void *)*((_QWORD *)&__p + 1);
      if (!*((_QWORD *)&__p + 1))
        goto LABEL_384;
      *(_QWORD *)&v946 = *((_QWORD *)&__p + 1);
    }
    operator delete(v521);
LABEL_384:

    goto LABEL_385;
  }
  v471 = objc_retainAutorelease(v861);
  v476 = objc_msgSend_bytes(v471, v472, v473, v474, v475);
  v477 = 0;
  v478 = 0;
  v958 = 0uLL;
  v959 = 0;
  do
  {
    v479 = *(float *)(v476 + 4 * v478);
    if (v477 >= (double *)v959)
    {
      v481 = (double *)v958;
      v482 = (uint64_t)((uint64_t)v477 - v958) >> 3;
      v483 = v482 + 1;
      if ((unint64_t)(v482 + 1) >> 61)
        sub_1D5282B8C();
      v484 = (uint64_t)&v959[-v958];
      if ((uint64_t)&v959[-v958] >> 2 > v483)
        v483 = v484 >> 2;
      if ((unint64_t)v484 >= 0x7FFFFFFFFFFFFFF8)
        v485 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v485 = v483;
      if (v485)
      {
        v486 = (char *)sub_1D5282D28((uint64_t)&v959, v485);
        v477 = (double *)*((_QWORD *)&v958 + 1);
        v481 = (double *)v958;
      }
      else
      {
        v486 = 0;
      }
      v487 = (double *)&v486[8 * v482];
      *v487 = v479;
      v480 = v487 + 1;
      while (v477 != v481)
      {
        v488 = *((_QWORD *)v477-- - 1);
        *((_QWORD *)v487-- - 1) = v488;
      }
      *(_QWORD *)&v958 = v487;
      *((_QWORD *)&v958 + 1) = v480;
      v959 = &v486[8 * v485];
      if (v481)
        operator delete(v481);
    }
    else
    {
      *v477 = v479;
      v480 = v477 + 1;
    }
    *((_QWORD *)&v958 + 1) = v480;
    ++v478;
    v477 = v480;
  }
  while (v478 != 9);
  sub_1D5338F80(&__p, 3, 3, &v958);
  sub_1D52850A0(__src, "IFD0");
  v937 = __src;
  v489 = sub_1D534AA08((uint64_t **)(a1 + 1624), __src, (uint64_t)&unk_1D544A5C4, (__int128 **)&v937);
  sub_1D53393A8(v489 + 7, (uint64_t)&__p);
  if (v950 < 0)
    operator delete(__src[0]);
  if (*((_QWORD *)&__p + 1))
  {
    *(_QWORD *)&v946 = *((_QWORD *)&__p + 1);
    operator delete(*((void **)&__p + 1));
  }
  if ((_QWORD)v958)
  {
    *((_QWORD *)&v958 + 1) = v958;
    operator delete((void *)v958);
  }
LABEL_385:

  objc_msgSend_objectForKeyedSubscript_(v866, v523, (uint64_t)CFSTR("ColorMatrix2"), v524, v525);
  v526 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || objc_msgSend_length(v526, v527, v528, v529, v530) != 36)
  {
    objc_msgSend_objectForKeyedSubscript_(v866, v527, (uint64_t)CFSTR("ColorMatrix2"), v529, v530);
    v550 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v550, v551, v552, v553, v554) == 9)
    {
      v862 = v526;
      v958 = 0uLL;
      v959 = 0;
      v888 = 0u;
      v889 = 0u;
      v890 = 0u;
      v891 = 0u;
      v558 = v550;
      v560 = objc_msgSend_countByEnumeratingWithState_objects_count_(v558, v559, (uint64_t)&v888, (uint64_t)v942, 16);
      if (v560)
      {
        v561 = *(_QWORD *)v889;
        do
        {
          for (i2 = 0; i2 != v560; ++i2)
          {
            if (*(_QWORD *)v889 != v561)
              objc_enumerationMutation(v558);
            v563 = *(void **)(*((_QWORD *)&v888 + 1) + 8 * i2);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v851 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1D8271938](v851, "RawCameraException");
              __cxa_throw(v851, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
            }
            objc_msgSend_doubleValue(v563, v564, v565, v566, v567);
            v570 = v569;
            v571 = (char *)*((_QWORD *)&v958 + 1);
            if (*((_QWORD *)&v958 + 1) >= (unint64_t)v959)
            {
              v573 = (char *)v958;
              v574 = (uint64_t)(*((_QWORD *)&v958 + 1) - v958) >> 3;
              v575 = v574 + 1;
              if ((unint64_t)(v574 + 1) >> 61)
                sub_1D5282B8C();
              v576 = (uint64_t)&v959[-v958];
              if ((uint64_t)&v959[-v958] >> 2 > v575)
                v575 = v576 >> 2;
              if ((unint64_t)v576 >= 0x7FFFFFFFFFFFFFF8)
                v568 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v568 = v575;
              if (v568)
              {
                v577 = (char *)sub_1D5282D28((uint64_t)&v959, v568);
                v571 = (char *)*((_QWORD *)&v958 + 1);
                v573 = (char *)v958;
              }
              else
              {
                v577 = 0;
              }
              v578 = &v577[8 * v574];
              *(_QWORD *)v578 = v570;
              v572 = v578 + 8;
              while (v571 != v573)
              {
                v579 = *((_QWORD *)v571 - 1);
                v571 -= 8;
                *((_QWORD *)v578 - 1) = v579;
                v578 -= 8;
              }
              *(_QWORD *)&v958 = v578;
              *((_QWORD *)&v958 + 1) = v572;
              v959 = &v577[8 * v568];
              if (v573)
                operator delete(v573);
            }
            else
            {
              **((_QWORD **)&v958 + 1) = v569;
              v572 = v571 + 8;
            }
            *((_QWORD *)&v958 + 1) = v572;
          }
          v560 = objc_msgSend_countByEnumeratingWithState_objects_count_(v558, (const char *)v568, (uint64_t)&v888, (uint64_t)v942, 16);
        }
        while (v560);
      }

      v526 = v862;
      sub_1D5338F80(&__p, 3, 3, &v958);
      sub_1D52850A0(__src, "IFD0");
      v937 = __src;
      v580 = sub_1D534AA08((uint64_t **)(a1 + 1648), __src, (uint64_t)&unk_1D544A5C4, (__int128 **)&v937);
      sub_1D53393A8(v580 + 7, (uint64_t)&__p);
      if (v950 < 0)
        operator delete(__src[0]);
      if (*((_QWORD *)&__p + 1))
      {
        *(_QWORD *)&v946 = *((_QWORD *)&__p + 1);
        operator delete(*((void **)&__p + 1));
      }
      v581 = (void *)v958;
      if (!(_QWORD)v958)
        goto LABEL_448;
      *((_QWORD *)&v958 + 1) = v958;
    }
    else
    {
      sub_1D5338D40((uint64_t)&__p, 3u, 3u, 1.0, v553, v554, v555, v556, v557, 0);
      sub_1D52850A0(&v958, "IFD0");
      __src[0] = &v958;
      v582 = sub_1D534AA08((uint64_t **)(a1 + 1648), (void **)&v958, (uint64_t)&unk_1D544A5C4, (__int128 **)__src);
      sub_1D53393A8(v582 + 7, (uint64_t)&__p);
      if (SHIBYTE(v959) < 0)
        operator delete((void *)v958);
      v581 = (void *)*((_QWORD *)&__p + 1);
      if (!*((_QWORD *)&__p + 1))
        goto LABEL_448;
      *(_QWORD *)&v946 = *((_QWORD *)&__p + 1);
    }
    operator delete(v581);
LABEL_448:

    goto LABEL_449;
  }
  v531 = objc_retainAutorelease(v526);
  v536 = objc_msgSend_bytes(v531, v532, v533, v534, v535);
  v537 = 0;
  v538 = 0;
  v958 = 0uLL;
  v959 = 0;
  do
  {
    v539 = *(float *)(v536 + 4 * v538);
    if (v537 >= (double *)v959)
    {
      v541 = (double *)v958;
      v542 = (uint64_t)((uint64_t)v537 - v958) >> 3;
      v543 = v542 + 1;
      if ((unint64_t)(v542 + 1) >> 61)
        sub_1D5282B8C();
      v544 = (uint64_t)&v959[-v958];
      if ((uint64_t)&v959[-v958] >> 2 > v543)
        v543 = v544 >> 2;
      if ((unint64_t)v544 >= 0x7FFFFFFFFFFFFFF8)
        v545 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v545 = v543;
      if (v545)
      {
        v546 = (char *)sub_1D5282D28((uint64_t)&v959, v545);
        v537 = (double *)*((_QWORD *)&v958 + 1);
        v541 = (double *)v958;
      }
      else
      {
        v546 = 0;
      }
      v547 = (double *)&v546[8 * v542];
      *v547 = v539;
      v540 = v547 + 1;
      while (v537 != v541)
      {
        v548 = *((_QWORD *)v537-- - 1);
        *((_QWORD *)v547-- - 1) = v548;
      }
      *(_QWORD *)&v958 = v547;
      *((_QWORD *)&v958 + 1) = v540;
      v959 = &v546[8 * v545];
      if (v541)
        operator delete(v541);
    }
    else
    {
      *v537 = v539;
      v540 = v537 + 1;
    }
    *((_QWORD *)&v958 + 1) = v540;
    ++v538;
    v537 = v540;
  }
  while (v538 != 9);
  sub_1D5338F80(&__p, 3, 3, &v958);
  sub_1D52850A0(__src, "IFD0");
  v937 = __src;
  v549 = sub_1D534AA08((uint64_t **)(a1 + 1648), __src, (uint64_t)&unk_1D544A5C4, (__int128 **)&v937);
  sub_1D53393A8(v549 + 7, (uint64_t)&__p);
  if (v950 < 0)
    operator delete(__src[0]);
  if (*((_QWORD *)&__p + 1))
  {
    *(_QWORD *)&v946 = *((_QWORD *)&__p + 1);
    operator delete(*((void **)&__p + 1));
  }
  if ((_QWORD)v958)
  {
    *((_QWORD *)&v958 + 1) = v958;
    operator delete((void *)v958);
  }
LABEL_449:

  objc_msgSend_objectForKeyedSubscript_(v866, v583, (uint64_t)CFSTR("ForwardMatrix1"), v584, v585);
  v586 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || objc_msgSend_length(v586, v587, v588, v589, v590) != 36)
  {
    objc_msgSend_objectForKeyedSubscript_(v866, v587, (uint64_t)CFSTR("ForwardMatrix1"), v589, v590);
    v610 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v610, v611, v612, v613, v614) == 9)
    {
      v863 = v586;
      v958 = 0uLL;
      v959 = 0;
      v884 = 0u;
      v885 = 0u;
      v886 = 0u;
      v887 = 0u;
      v618 = v610;
      v620 = objc_msgSend_countByEnumeratingWithState_objects_count_(v618, v619, (uint64_t)&v884, (uint64_t)v941, 16);
      if (v620)
      {
        v621 = *(_QWORD *)v885;
        do
        {
          for (i3 = 0; i3 != v620; ++i3)
          {
            if (*(_QWORD *)v885 != v621)
              objc_enumerationMutation(v618);
            v623 = *(void **)(*((_QWORD *)&v884 + 1) + 8 * i3);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v852 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1D8271938](v852, "RawCameraException");
              __cxa_throw(v852, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
            }
            objc_msgSend_doubleValue(v623, v624, v625, v626, v627);
            v630 = v629;
            v631 = (char *)*((_QWORD *)&v958 + 1);
            if (*((_QWORD *)&v958 + 1) >= (unint64_t)v959)
            {
              v633 = (char *)v958;
              v634 = (uint64_t)(*((_QWORD *)&v958 + 1) - v958) >> 3;
              v635 = v634 + 1;
              if ((unint64_t)(v634 + 1) >> 61)
                sub_1D5282B8C();
              v636 = (uint64_t)&v959[-v958];
              if ((uint64_t)&v959[-v958] >> 2 > v635)
                v635 = v636 >> 2;
              if ((unint64_t)v636 >= 0x7FFFFFFFFFFFFFF8)
                v628 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v628 = v635;
              if (v628)
              {
                v637 = (char *)sub_1D5282D28((uint64_t)&v959, v628);
                v631 = (char *)*((_QWORD *)&v958 + 1);
                v633 = (char *)v958;
              }
              else
              {
                v637 = 0;
              }
              v638 = &v637[8 * v634];
              *(_QWORD *)v638 = v630;
              v632 = v638 + 8;
              while (v631 != v633)
              {
                v639 = *((_QWORD *)v631 - 1);
                v631 -= 8;
                *((_QWORD *)v638 - 1) = v639;
                v638 -= 8;
              }
              *(_QWORD *)&v958 = v638;
              *((_QWORD *)&v958 + 1) = v632;
              v959 = &v637[8 * v628];
              if (v633)
                operator delete(v633);
            }
            else
            {
              **((_QWORD **)&v958 + 1) = v629;
              v632 = v631 + 8;
            }
            *((_QWORD *)&v958 + 1) = v632;
          }
          v620 = objc_msgSend_countByEnumeratingWithState_objects_count_(v618, (const char *)v628, (uint64_t)&v884, (uint64_t)v941, 16);
        }
        while (v620);
      }

      v586 = v863;
      sub_1D5338F80(&__p, 3, 3, &v958);
      sub_1D52850A0(__src, "IFD0");
      v937 = __src;
      v640 = sub_1D534AA08((uint64_t **)(a1 + 1768), __src, (uint64_t)&unk_1D544A5C4, (__int128 **)&v937);
      sub_1D53393A8(v640 + 7, (uint64_t)&__p);
      if (v950 < 0)
        operator delete(__src[0]);
      if (*((_QWORD *)&__p + 1))
      {
        *(_QWORD *)&v946 = *((_QWORD *)&__p + 1);
        operator delete(*((void **)&__p + 1));
      }
      v641 = (void *)v958;
      if (!(_QWORD)v958)
        goto LABEL_512;
      *((_QWORD *)&v958 + 1) = v958;
    }
    else
    {
      sub_1D5338D40((uint64_t)&__p, 3u, 3u, 1.0, v613, v614, v615, v616, v617, 0);
      sub_1D52850A0(&v958, "IFD0");
      __src[0] = &v958;
      v642 = sub_1D534AA08((uint64_t **)(a1 + 1768), (void **)&v958, (uint64_t)&unk_1D544A5C4, (__int128 **)__src);
      sub_1D53393A8(v642 + 7, (uint64_t)&__p);
      if (SHIBYTE(v959) < 0)
        operator delete((void *)v958);
      v641 = (void *)*((_QWORD *)&__p + 1);
      if (!*((_QWORD *)&__p + 1))
        goto LABEL_512;
      *(_QWORD *)&v946 = *((_QWORD *)&__p + 1);
    }
    operator delete(v641);
LABEL_512:

    goto LABEL_513;
  }
  v591 = objc_retainAutorelease(v586);
  v596 = objc_msgSend_bytes(v591, v592, v593, v594, v595);
  v597 = 0;
  v598 = 0;
  v958 = 0uLL;
  v959 = 0;
  do
  {
    v599 = *(float *)(v596 + 4 * v598);
    if (v597 >= (double *)v959)
    {
      v601 = (double *)v958;
      v602 = (uint64_t)((uint64_t)v597 - v958) >> 3;
      v603 = v602 + 1;
      if ((unint64_t)(v602 + 1) >> 61)
        sub_1D5282B8C();
      v604 = (uint64_t)&v959[-v958];
      if ((uint64_t)&v959[-v958] >> 2 > v603)
        v603 = v604 >> 2;
      if ((unint64_t)v604 >= 0x7FFFFFFFFFFFFFF8)
        v605 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v605 = v603;
      if (v605)
      {
        v606 = (char *)sub_1D5282D28((uint64_t)&v959, v605);
        v597 = (double *)*((_QWORD *)&v958 + 1);
        v601 = (double *)v958;
      }
      else
      {
        v606 = 0;
      }
      v607 = (double *)&v606[8 * v602];
      *v607 = v599;
      v600 = v607 + 1;
      while (v597 != v601)
      {
        v608 = *((_QWORD *)v597-- - 1);
        *((_QWORD *)v607-- - 1) = v608;
      }
      *(_QWORD *)&v958 = v607;
      *((_QWORD *)&v958 + 1) = v600;
      v959 = &v606[8 * v605];
      if (v601)
        operator delete(v601);
    }
    else
    {
      *v597 = v599;
      v600 = v597 + 1;
    }
    *((_QWORD *)&v958 + 1) = v600;
    ++v598;
    v597 = v600;
  }
  while (v598 != 9);
  sub_1D5338F80(&__p, 3, 3, &v958);
  sub_1D52850A0(__src, "IFD0");
  v937 = __src;
  v609 = sub_1D534AA08((uint64_t **)(a1 + 1768), __src, (uint64_t)&unk_1D544A5C4, (__int128 **)&v937);
  sub_1D53393A8(v609 + 7, (uint64_t)&__p);
  if (v950 < 0)
    operator delete(__src[0]);
  if (*((_QWORD *)&__p + 1))
  {
    *(_QWORD *)&v946 = *((_QWORD *)&__p + 1);
    operator delete(*((void **)&__p + 1));
  }
  if ((_QWORD)v958)
  {
    *((_QWORD *)&v958 + 1) = v958;
    operator delete((void *)v958);
  }
LABEL_513:

  objc_msgSend_objectForKeyedSubscript_(v866, v643, (uint64_t)CFSTR("ForwardMatrix2"), v644, v645);
  v646 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0 || objc_msgSend_length(v646, v647, v648, v649, v650) != 36)
  {
    objc_msgSend_objectForKeyedSubscript_(v866, v647, (uint64_t)CFSTR("ForwardMatrix2"), v649, v650);
    v670 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v670, v671, v672, v673, v674) == 9)
    {
      v678 = v646;
      v958 = 0uLL;
      v959 = 0;
      v880 = 0u;
      v881 = 0u;
      v882 = 0u;
      v883 = 0u;
      v679 = v670;
      v681 = objc_msgSend_countByEnumeratingWithState_objects_count_(v679, v680, (uint64_t)&v880, (uint64_t)v940, 16);
      if (v681)
      {
        v682 = *(_QWORD *)v881;
        do
        {
          for (i4 = 0; i4 != v681; ++i4)
          {
            if (*(_QWORD *)v881 != v682)
              objc_enumerationMutation(v679);
            v684 = *(void **)(*((_QWORD *)&v880 + 1) + 8 * i4);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              v853 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1D8271938](v853, "RawCameraException");
              __cxa_throw(v853, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
            }
            objc_msgSend_doubleValue(v684, v685, v686, v687, v688);
            v691 = v690;
            v692 = (char *)*((_QWORD *)&v958 + 1);
            if (*((_QWORD *)&v958 + 1) >= (unint64_t)v959)
            {
              v694 = (char *)v958;
              v695 = (uint64_t)(*((_QWORD *)&v958 + 1) - v958) >> 3;
              v696 = v695 + 1;
              if ((unint64_t)(v695 + 1) >> 61)
                sub_1D5282B8C();
              v697 = (uint64_t)&v959[-v958];
              if ((uint64_t)&v959[-v958] >> 2 > v696)
                v696 = v697 >> 2;
              if ((unint64_t)v697 >= 0x7FFFFFFFFFFFFFF8)
                v689 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v689 = v696;
              if (v689)
              {
                v698 = (char *)sub_1D5282D28((uint64_t)&v959, v689);
                v692 = (char *)*((_QWORD *)&v958 + 1);
                v694 = (char *)v958;
              }
              else
              {
                v698 = 0;
              }
              v699 = &v698[8 * v695];
              *(_QWORD *)v699 = v691;
              v693 = v699 + 8;
              while (v692 != v694)
              {
                v700 = *((_QWORD *)v692 - 1);
                v692 -= 8;
                *((_QWORD *)v699 - 1) = v700;
                v699 -= 8;
              }
              *(_QWORD *)&v958 = v699;
              *((_QWORD *)&v958 + 1) = v693;
              v959 = &v698[8 * v689];
              if (v694)
                operator delete(v694);
            }
            else
            {
              **((_QWORD **)&v958 + 1) = v690;
              v693 = v692 + 8;
            }
            *((_QWORD *)&v958 + 1) = v693;
          }
          v681 = objc_msgSend_countByEnumeratingWithState_objects_count_(v679, (const char *)v689, (uint64_t)&v880, (uint64_t)v940, 16);
        }
        while (v681);
      }

      v646 = v678;
      sub_1D5338F80(&__p, 3, 3, &v958);
      sub_1D52850A0(__src, "IFD0");
      v937 = __src;
      v701 = sub_1D534AA08((uint64_t **)(a1 + 1792), __src, (uint64_t)&unk_1D544A5C4, (__int128 **)&v937);
      sub_1D53393A8(v701 + 7, (uint64_t)&__p);
      if (v950 < 0)
        operator delete(__src[0]);
      if (*((_QWORD *)&__p + 1))
      {
        *(_QWORD *)&v946 = *((_QWORD *)&__p + 1);
        operator delete(*((void **)&__p + 1));
      }
      v702 = (void *)v958;
      if (!(_QWORD)v958)
        goto LABEL_576;
      *((_QWORD *)&v958 + 1) = v958;
    }
    else
    {
      sub_1D5338D40((uint64_t)&__p, 3u, 3u, 1.0, v673, v674, v675, v676, v677, 0);
      sub_1D52850A0(&v958, "IFD0");
      __src[0] = &v958;
      v703 = sub_1D534AA08((uint64_t **)(a1 + 1792), (void **)&v958, (uint64_t)&unk_1D544A5C4, (__int128 **)__src);
      sub_1D53393A8(v703 + 7, (uint64_t)&__p);
      if (SHIBYTE(v959) < 0)
        operator delete((void *)v958);
      v702 = (void *)*((_QWORD *)&__p + 1);
      if (!*((_QWORD *)&__p + 1))
        goto LABEL_576;
      *(_QWORD *)&v946 = *((_QWORD *)&__p + 1);
    }
    operator delete(v702);
LABEL_576:

    goto LABEL_577;
  }
  v651 = objc_retainAutorelease(v646);
  v656 = objc_msgSend_bytes(v651, v652, v653, v654, v655);
  v657 = 0;
  v658 = 0;
  v958 = 0uLL;
  v959 = 0;
  do
  {
    v659 = *(float *)(v656 + 4 * v658);
    if (v657 >= (double *)v959)
    {
      v661 = (double *)v958;
      v662 = (uint64_t)((uint64_t)v657 - v958) >> 3;
      v663 = v662 + 1;
      if ((unint64_t)(v662 + 1) >> 61)
        sub_1D5282B8C();
      v664 = (uint64_t)&v959[-v958];
      if ((uint64_t)&v959[-v958] >> 2 > v663)
        v663 = v664 >> 2;
      if ((unint64_t)v664 >= 0x7FFFFFFFFFFFFFF8)
        v665 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v665 = v663;
      if (v665)
      {
        v666 = (char *)sub_1D5282D28((uint64_t)&v959, v665);
        v657 = (double *)*((_QWORD *)&v958 + 1);
        v661 = (double *)v958;
      }
      else
      {
        v666 = 0;
      }
      v667 = (double *)&v666[8 * v662];
      *v667 = v659;
      v660 = v667 + 1;
      while (v657 != v661)
      {
        v668 = *((_QWORD *)v657-- - 1);
        *((_QWORD *)v667-- - 1) = v668;
      }
      *(_QWORD *)&v958 = v667;
      *((_QWORD *)&v958 + 1) = v660;
      v959 = &v666[8 * v665];
      if (v661)
        operator delete(v661);
    }
    else
    {
      *v657 = v659;
      v660 = v657 + 1;
    }
    *((_QWORD *)&v958 + 1) = v660;
    ++v658;
    v657 = v660;
  }
  while (v658 != 9);
  sub_1D5338F80(&__p, 3, 3, &v958);
  sub_1D52850A0(__src, "IFD0");
  v937 = __src;
  v669 = sub_1D534AA08((uint64_t **)(a1 + 1792), __src, (uint64_t)&unk_1D544A5C4, (__int128 **)&v937);
  sub_1D53393A8(v669 + 7, (uint64_t)&__p);
  if (v950 < 0)
    operator delete(__src[0]);
  if (*((_QWORD *)&__p + 1))
  {
    *(_QWORD *)&v946 = *((_QWORD *)&__p + 1);
    operator delete(*((void **)&__p + 1));
  }
  if ((_QWORD)v958)
  {
    *((_QWORD *)&v958 + 1) = v958;
    operator delete((void *)v958);
  }
LABEL_577:

  objc_msgSend_objectForKeyedSubscript_(v866, v704, (uint64_t)CFSTR("BaselineNoise"), v705, v706);
  v707 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v708 = objc_opt_isKindOfClass();
  v713 = 1.0;
  if ((v708 & 1) != 0)
    objc_msgSend_doubleValue(v707, v709, v710, v711, v712, 1.0);
  *(double *)(a1 + 1912) = v713;

  objc_msgSend_objectForKeyedSubscript_(v866, v714, (uint64_t)CFSTR("NoiseProfile"), v715, v716);
  v717 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v717, v718, v719, v720, v721) == 2)
  {
    __p = 0uLL;
    *(_QWORD *)&v946 = 0;
    v876 = 0u;
    v877 = 0u;
    v878 = 0u;
    v879 = 0u;
    v722 = v717;
    v724 = objc_msgSend_countByEnumeratingWithState_objects_count_(v722, v723, (uint64_t)&v876, (uint64_t)v939, 16);
    if (v724)
    {
      v725 = *(_QWORD *)v877;
      do
      {
        for (i5 = 0; i5 != v724; ++i5)
        {
          if (*(_QWORD *)v877 != v725)
            objc_enumerationMutation(v722);
          v727 = *(void **)(*((_QWORD *)&v876 + 1) + 8 * i5);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            v848 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](v848, "RawCameraException");
            __cxa_throw(v848, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
          objc_msgSend_doubleValue(v727, v728, v729, v730, v731);
          v734 = v733;
          v735 = (char *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1) >= (unint64_t)v946)
          {
            v737 = (char *)__p;
            v738 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3;
            v739 = v738 + 1;
            if ((unint64_t)(v738 + 1) >> 61)
              sub_1D5282B8C();
            v740 = v946 - __p;
            if ((uint64_t)(v946 - __p) >> 2 > v739)
              v739 = v740 >> 2;
            if ((unint64_t)v740 >= 0x7FFFFFFFFFFFFFF8)
              v732 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v732 = v739;
            if (v732)
            {
              v741 = (char *)sub_1D5282D28((uint64_t)&v946, v732);
              v735 = (char *)*((_QWORD *)&__p + 1);
              v737 = (char *)__p;
            }
            else
            {
              v741 = 0;
            }
            v742 = &v741[8 * v738];
            *(_QWORD *)v742 = v734;
            v736 = v742 + 8;
            while (v735 != v737)
            {
              v743 = *((_QWORD *)v735 - 1);
              v735 -= 8;
              *((_QWORD *)v742 - 1) = v743;
              v742 -= 8;
            }
            *(_QWORD *)&__p = v742;
            *((_QWORD *)&__p + 1) = v736;
            *(_QWORD *)&v946 = &v741[8 * v732];
            if (v737)
              operator delete(v737);
          }
          else
          {
            **((_QWORD **)&__p + 1) = v733;
            v736 = v735 + 8;
          }
          *((_QWORD *)&__p + 1) = v736;
        }
        v724 = objc_msgSend_countByEnumeratingWithState_objects_count_(v722, (const char *)v732, (uint64_t)&v876, (uint64_t)v939, 16);
      }
      while (v724);
    }

    sub_1D52850A0(&v958, "IFD0");
    __src[0] = &v958;
    v744 = (char *)sub_1D52BA2C8((uint64_t **)(a1 + 1928), (void **)&v958, (uint64_t)&unk_1D544A5C4, (_OWORD **)__src)
         + 56;
    if (v744 != (char *)&__p)
      sub_1D528FA34(v744, (char *)__p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3);
    if (SHIBYTE(v959) < 0)
      operator delete((void *)v958);
    v745 = (void *)__p;
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
LABEL_613:
      operator delete(v745);
    }
  }
  else
  {
    __asm { FMOV            V0.2D, #1.0 }
    v958 = _Q0;
    sub_1D52850A0(&__p, "IFD0");
    __src[0] = &__p;
    v751 = (char *)sub_1D52BA2C8((uint64_t **)(a1 + 1928), (void **)&__p, (uint64_t)&unk_1D544A5C4, (_OWORD **)__src);
    sub_1D528FA34(v751 + 56, (char *)&v958, (uint64_t)&v959, 2uLL);
    if (SBYTE7(v946) < 0)
    {
      v745 = (void *)__p;
      goto LABEL_613;
    }
  }

  objc_msgSend_objectForKeyedSubscript_(v866, v752, (uint64_t)CFSTR("FixVignetteRadial"), v753, v754);
  v755 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend_count(v755, v756, v757, v758, v759) == 7)
  {
    v874 = 0u;
    v875 = 0u;
    v872 = 0u;
    v873 = 0u;
    v760 = v755;
    v762 = objc_msgSend_countByEnumeratingWithState_objects_count_(v760, v761, (uint64_t)&v872, (uint64_t)v938, 16);
    if (v762)
    {
      v763 = *(_QWORD *)v873;
      do
      {
        for (i6 = 0; i6 != v762; ++i6)
        {
          if (*(_QWORD *)v873 != v763)
            objc_enumerationMutation(v760);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            v849 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](v849, "RawCameraException");
            __cxa_throw(v849, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
        }
        v762 = objc_msgSend_countByEnumeratingWithState_objects_count_(v760, v765, (uint64_t)&v872, (uint64_t)v938, 16);
      }
      while (v762);
    }

    objc_msgSend_objectAtIndexedSubscript_(v760, v766, 0, v767, v768);
    v769 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_doubleValue(v769, v770, v771, v772, v773);
    v775 = v774;

    v937 = (void **)v775;
    objc_msgSend_objectAtIndexedSubscript_(v760, v776, 1, v777, v778);
    v779 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_doubleValue(v779, v780, v781, v782, v783);
    v785 = v784;

    v904 = v785;
    objc_msgSend_objectAtIndexedSubscript_(v760, v786, 2, v787, v788);
    v789 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_doubleValue(v789, v790, v791, v792, v793);
    v795 = v794;

    v871 = v795;
    objc_msgSend_objectAtIndexedSubscript_(v760, v796, 3, v797, v798);
    v799 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_doubleValue(v799, v800, v801, v802, v803);
    v805 = v804;

    v870 = v805;
    objc_msgSend_objectAtIndexedSubscript_(v760, v806, 4, v807, v808);
    v809 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_doubleValue(v809, v810, v811, v812, v813);
    v815 = v814;

    v869 = v815;
    objc_msgSend_objectAtIndexedSubscript_(v760, v816, 5, v817, v818);
    v819 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_doubleValue(v819, v820, v821, v822, v823);
    v825 = v824;

    v868 = v825;
    objc_msgSend_objectAtIndexedSubscript_(v760, v826, 6, v827, v828);
    v829 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_doubleValue(v829, v830, v831, v832, v833);
    v835 = v834;

    v867 = v835;
    LODWORD(__p) = 0;
    sub_1D534AB70((unsigned int *)&__p, (double *)&v937, (double *)&v904, (double *)&v871, (double *)&v870, (double *)&v869, (double *)&v868, &v958, (double *)&v867);
    *(_OWORD *)__src = v958;
    if (*((_QWORD *)&v958 + 1))
    {
      v836 = (unint64_t *)(*((_QWORD *)&v958 + 1) + 8);
      do
        v837 = __ldxr(v836);
      while (__stxr(v837 + 1, v836));
    }
    sub_1D534A73C(&__p, 1uLL, __src);
    v838 = (std::__shared_weak_count *)__src[1];
    if (__src[1])
    {
      v839 = (unint64_t *)((char *)__src[1] + 8);
      do
        v840 = __ldaxr(v839);
      while (__stlxr(v840 - 1, v839));
      if (!v840)
      {
        ((void (*)(std::__shared_weak_count *))v838->__on_zero_shared)(v838);
        std::__shared_weak_count::__release_weak(v838);
      }
    }
    if ((__int128 *)(a1 + 2168) != &__p)
      sub_1D53045D4(a1 + 2168, (uint64_t *)__p, *((uint64_t **)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 4);
    __src[0] = &__p;
    sub_1D5282E44((void ***)__src);
    v841 = (std::__shared_weak_count *)*((_QWORD *)&v958 + 1);
    if (*((_QWORD *)&v958 + 1))
    {
      v842 = (unint64_t *)(*((_QWORD *)&v958 + 1) + 8);
      do
        v843 = __ldaxr(v842);
      while (__stlxr(v843 - 1, v842));
      if (!v843)
      {
        ((void (*)(std::__shared_weak_count *))v841->__on_zero_shared)(v841);
        std::__shared_weak_count::__release_weak(v841);
      }
    }
  }

}

void sub_1D5349950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;

  STACK[0x8E8] = (unint64_t)&STACK[0x840];
  sub_1D5282E44((void ***)&STACK[0x8E8]);
  sub_1D5282EB4((uint64_t)&STACK[0xC80]);

  _Unwind_Resume(a1);
}

id sub_1D534A648(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  CGAffineTransform v18;

  v2 = (*(uint64_t (**)(_QWORD *))(*a1 + 440))(a1);
  v3 = (*(uint64_t (**)(_QWORD *))(*a1 + 448))(a1);
  v5 = v4;
  v6 = HIDWORD(v4);
  v7 = (void *)a1[314];
  CGAffineTransformMakeTranslation(&v18, (double)-(int)v3, (double)-((v2 - (((v4 & 0xFFFFFFFF00000000) + v3) & 0xFFFFFFFF00000000)) >> 32));
  objc_msgSend_imageByApplyingTransform_(v7, v8, (uint64_t)&v18, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_imageByCroppingToRect_(v11, v12, v13, v14, v15, 0.0, 0.0, (double)v5, (double)(int)v6);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

void sub_1D534A704(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D534A718(uint64_t a1)
{
  sub_1D534A7E4(a1);
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D534A73C(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D52842F4(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[2 * a2];
    do
    {
      *v6 = *a3;
      v8 = a3[1];
      v6[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v6 += 2;
    }
    while (v6 != v7);
    a1[1] = v7;
  }
  return a1;
}

void sub_1D534A7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1D5282E44(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D534A7E4(uint64_t a1)
{

  return sub_1D5305148(a1);
}

_OWORD *sub_1D534A814(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)sub_1D52B3CFC((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_DWORD *)v7 + 14) = 0;
    sub_1D528EFCC(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

_OWORD *sub_1D534A8AC(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)sub_1D52B3CFC((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    sub_1D528EFCC(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

_OWORD *sub_1D534A944(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)sub_1D52B3CFC((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    sub_1D528EFCC(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_1D52B4138((uint64_t)v12, 0);
  }
  return v7;
}

uint64_t *sub_1D534AA08(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_1D52B3CFC((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_1D534AAB0((uint64_t)a1, a4, (uint64_t)v10);
    sub_1D528EFCC(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1D53056FC((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t sub_1D534AAB0@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_1D534AB18((uint64_t)v6 + 32, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1D534AB00(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D53056FC(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1D534AB18(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  sub_1D5338BEC((_OWORD *)(a1 + 24));
  return a1;
}

void sub_1D534AB54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D534AB70@<X0>(unsigned int *a1@<X1>, double *a2@<X2>, double *a3@<X3>, double *a4@<X4>, double *a5@<X5>, double *a6@<X6>, double *a7@<X7>, _QWORD *a8@<X8>, double *a9)
{
  _QWORD *v17;
  _QWORD *result;

  v17 = operator new(0x50uLL);
  result = sub_1D534AC20(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1D534AC0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D534AC20(_QWORD *a1, unsigned int *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9)
{
  a1[2] = 0;
  *a1 = &unk_1E9977120;
  a1[1] = 0;
  sub_1D543EEB4(a1 + 3, *a2, *a3, *a4, *a5, *a6, *a7, *a8, *a9);
  return a1;
}

void sub_1D534AC7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D534AC90(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *__p[2];
  char v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  _QWORD v9[2];

  v9[0] = &unk_1E99851F0;
  v9[1] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v7);
  v1 = v7;
  sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE:WhitePoint");
  (*(void (**)(uint64_t, void **, _QWORD *, uint64_t))(*(_QWORD *)v1 + 600))(v1, __p, v9, 3);
  if (v6 < 0)
    operator delete(__p[0]);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1D534AD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1D534AD7C(uint64_t a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  char v6;
  char v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  void *v15[2];
  uint64_t v16;
  double v17;

  v17 = a3;
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1) == 10
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1) == 15)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v13, a1);
    v5 = v13;
    sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE");
    v6 = (*(uint64_t (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v5 + 248))(v5, __p, v15, 0);
    if ((void *)((char *)v15[1] - (char *)v15[0]) == (void *)32)
      v7 = v6;
    else
      v7 = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    v8 = v14;
    if (!v14)
      goto LABEL_12;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((v7 & 1) != 0)
        goto LABEL_13;
    }
    else
    {
LABEL_12:
      if ((v7 & 1) != 0)
      {
LABEL_13:
        *(_OWORD *)a2 = *(_OWORD *)v15;
        a2[2] = v16;
        return;
      }
    }
  }
  sub_1D528F9B4(a2, 4uLL, &v17);
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
}

void sub_1D534AEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D534AF04(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a1 + 2952))(a1, 0.0);
}

uint64_t sub_1D534AF14(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 512))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D534AF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D534AFA8(_QWORD *a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  void *v22;
  void **v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t *v35;
  void *exception;
  void *v37;
  void *lpsrc[3];
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void *v44;
  std::__shared_weak_count *v45;

  sub_1D5299C2C((uint64_t)a1);
  v2 = a1 + 3;
  if (a1[3])
    return;
  v3 = (*(uint64_t (**)(_QWORD *))(*a1 + 592))(a1);
  switch(v3)
  {
    case 0xFFFF:
      (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 160))(lpsrc, a1);
      if (lpsrc[0]
        && (v22 = __dynamic_cast(lpsrc[0], (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9976668, 0)) != 0)
      {
        v44 = v22;
        v45 = (std::__shared_weak_count *)lpsrc[1];
        v23 = lpsrc;
      }
      else
      {
        v23 = &v44;
      }
      *v23 = 0;
      v23[1] = 0;
      v24 = (std::__shared_weak_count *)lpsrc[1];
      if (lpsrc[1])
      {
        v25 = (unint64_t *)((char *)lpsrc[1] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (!v44)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v44 + 384))(lpsrc);
      v41 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
      v40 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
      *(_QWORD *)&v39 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
      *((_QWORD *)&v39 + 1) = v27;
      sub_1D534BD28(lpsrc, (unint64_t *)&v41, &v40, &v39, &v42);
      v28 = (std::__shared_weak_count *)lpsrc[1];
      if (lpsrc[1])
      {
        v29 = (unint64_t *)((char *)lpsrc[1] + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v31 = v42;
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v44 + 792))(lpsrc);
      if ((void **)(v31 + 192) != lpsrc)
        sub_1D52B1E94((_QWORD *)(v31 + 192), (char *)lpsrc[0], (char *)lpsrc[1], (char *)lpsrc[1] - (char *)lpsrc[0]);
      if (lpsrc[0])
      {
        lpsrc[1] = lpsrc[0];
        operator delete(lpsrc[0]);
      }
      sub_1D52908C8(v2, &v42);
      v32 = v43;
      if (v43)
      {
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v34 = __ldaxr(p_shared_owners);
        while (__stlxr(v34 - 1, p_shared_owners));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v11 = v45;
      if (v45)
      {
        v35 = (unint64_t *)&v45->__shared_owners_;
        do
          v13 = __ldaxr(v35);
        while (__stlxr(v13 - 1, v35));
        goto LABEL_61;
      }
      break;
    case 0x8005:
      (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 160))(&v42, a1);
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v42 + 384))(&v44);
      v41 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
      v40 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
      *(_QWORD *)&v39 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
      *((_QWORD *)&v39 + 1) = v14;
      sub_1D534BCA8(&v44, (unint64_t *)&v41, &v40, &v39, lpsrc);
      sub_1D5292548((uint64_t)(a1 + 3), (__int128 *)lpsrc);
      v15 = (std::__shared_weak_count *)lpsrc[1];
      if (lpsrc[1])
      {
        v16 = (unint64_t *)((char *)lpsrc[1] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = v45;
      if (v45)
      {
        v19 = (unint64_t *)&v45->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v11 = v43;
      if (v43)
      {
        v21 = (unint64_t *)&v43->__shared_owners_;
        do
          v13 = __ldaxr(v21);
        while (__stlxr(v13 - 1, v21));
        goto LABEL_61;
      }
      break;
    case 1:
      (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 160))(&v42, a1);
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v42 + 384))(&v44);
      v41 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
      v40 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
      *(_QWORD *)&v39 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
      *((_QWORD *)&v39 + 1) = v4;
      sub_1D534BC28(&v44, (unint64_t *)&v41, &v40, &v39, lpsrc);
      sub_1D5292548((uint64_t)(a1 + 3), (__int128 *)lpsrc);
      v5 = (std::__shared_weak_count *)lpsrc[1];
      if (lpsrc[1])
      {
        v6 = (unint64_t *)((char *)lpsrc[1] + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v8 = v45;
      if (v45)
      {
        v9 = (unint64_t *)&v45->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v11 = v43;
      if (v43)
      {
        v12 = (unint64_t *)&v43->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
LABEL_61:
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      break;
    default:
      v37 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v37, "RawCameraException");
      __cxa_throw(v37, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
}

void sub_1D534B4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  void *v16;

  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_1D534B554(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void **p_lpsrc;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *lpsrc;
  std::__shared_weak_count *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9976668, 0)) != 0)
  {
    v18 = (uint64_t)v3;
    v19 = v15;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = (void **)&v18;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v5 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v18;
  if (v18)
  {
    v17 = 0;
    sub_1D52850A0(&lpsrc, "IFD0:EXIF:MAKERNOTE:ExpandedDynamicRange");
    v9 = (*(uint64_t (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v8 + 784))(v8, &lpsrc, &v17);
    v8 = v9;
    if (v16 < 0)
    {
      operator delete(lpsrc);
      if (!(_DWORD)v8)
        goto LABEL_14;
      goto LABEL_13;
    }
    if ((_DWORD)v9)
LABEL_13:
      *a2 = v17;
  }
LABEL_14:
  v10 = v19;
  if (v19)
  {
    v11 = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v8;
}

void sub_1D534B694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

double sub_1D534B6C0(uint64_t a1)
{
  int v2;
  double result;
  int v4;
  uint64_t v5;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 944))(a1);
  result = 0.0;
  if (v2)
  {
    v4 = sub_1D534B554(a1, &v5);
    result = 0.0;
    if (v4)
      return 1.0;
  }
  return result;
}

id sub_1D534B714(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void **p_lpsrc;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  id v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *v21;
  id v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void **v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  void *lpsrc;
  std::__shared_weak_count *v59;
  double v60;
  std::__shared_weak_count *v61;

  v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, (uint64_t)CFSTR("activeRectAvailableAsTag"), v5, v6))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&lpsrc, a1);
    if (lpsrc
      && (v10 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9976FF0, 0)) != 0)
    {
      v60 = *(double *)&v10;
      v61 = v59;
      p_lpsrc = &lpsrc;
    }
    else
    {
      p_lpsrc = (void **)&v60;
    }
    *p_lpsrc = 0;
    p_lpsrc[1] = 0;
    v18 = v59;
    if (v59)
    {
      p_shared_owners = (unint64_t *)&v59->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (void *)MEMORY[0x1E0C9AAA0];
    if (v60 != 0.0
      && (*(unsigned int (**)(double))(**(_QWORD **)&v60 + 784))(COERCE_DOUBLE(*(_QWORD *)&v60)))
    {
      v21 = (void *)MEMORY[0x1E0C9AAB0];
    }
    v22 = v21;
    v23 = v61;
    if (v61)
    {
      v24 = (unint64_t *)&v61->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      goto LABEL_21;
    }
    goto LABEL_26;
  }
  if (objc_msgSend_isEqualToString_(v3, v7, (uint64_t)CFSTR("hasExtendedDynamicRangeAdjustment"), v8, v9))
  {
    v15 = sub_1D534B554(a1, &v60);
    v16 = (void *)MEMORY[0x1E0C9AAA0];
    if (v15)
      v16 = (void *)MEMORY[0x1E0C9AAB0];
    v17 = v16;
    goto LABEL_25;
  }
  if (objc_msgSend_isEqualToString_(v3, v12, (uint64_t)CFSTR("extendedDynamicRangeAdjustment"), v13, v14))
  {
    v60 = 0.0;
    v29 = (void *)MEMORY[0x1E0CB37E8];
    sub_1D534B554(a1, &v60);
    objc_msgSend_numberWithDouble_(v29, v30, v31, v32, v33, v60);
    v17 = (id)objc_claimAutoreleasedReturnValue();
LABEL_25:
    v22 = v17;
    goto LABEL_26;
  }
  if (objc_msgSend_isEqualToString_(v3, v26, (uint64_t)CFSTR("dngBaselineExposureTag"), v27, v28))
  {
    v38 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(double *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v60, a1);
    (*(void (**)(double))(**(_QWORD **)&v60 + 352))(COERCE_DOUBLE(*(_QWORD *)&v60));
    objc_msgSend_numberWithDouble_(v38, v39, v40, v41, v42);
    v22 = (id)objc_claimAutoreleasedReturnValue();
    v23 = v61;
    if (!v61)
      goto LABEL_26;
    v43 = (unint64_t *)&v61->__shared_owners_;
    do
      v25 = __ldaxr(v43);
    while (__stlxr(v25 - 1, v43));
    goto LABEL_21;
  }
  if (!objc_msgSend_isEqualToString_(v3, v35, (uint64_t)CFSTR("pentaxShakeReduction"), v36, v37))
  {
    sub_1D54210E0(a1, v3);
    v17 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_25;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&lpsrc, a1);
  if (lpsrc
    && (v47 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9976668, 0)) != 0)
  {
    v60 = *(double *)&v47;
    v61 = v59;
    v48 = &lpsrc;
  }
  else
  {
    v48 = (void **)&v60;
  }
  *v48 = 0;
  v48[1] = 0;
  v49 = v59;
  if (v59)
  {
    v50 = (unint64_t *)&v59->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = (void *)MEMORY[0x1E0CB37E8];
  if (v60 == 0.0)
  {
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v44, 0, v45, v46);
  }
  else
  {
    v53 = (*(uint64_t (**)(double))(**(_QWORD **)&v60 + 800))(COERCE_DOUBLE(*(_QWORD *)&v60));
    objc_msgSend_numberWithInt_(v52, v54, v53, v55, v56);
  }
  v22 = (id)objc_claimAutoreleasedReturnValue();
  v23 = v61;
  if (v61)
  {
    v57 = (unint64_t *)&v61->__shared_owners_;
    do
      v25 = __ldaxr(v57);
    while (__stlxr(v25 - 1, v57));
LABEL_21:
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_26:

  return v22;
}

void sub_1D534BA50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D534BAA4()
{
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D534BAB8(uint64_t a1, uint64_t a2, void **a3, unsigned int a4, uint64_t *a5)
{
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v31;
  uint64_t v32;

  v6 = a4;
  if (a4 == 3)
    a4 = 4;
  v8 = sub_1D531C458(a1, a2, a3, a4, a5);
  v9 = v8;
  if (v6 == 3 && (_DWORD)v8)
  {
    v10 = *(_DWORD *)(a1 + 12);
    switch(v10)
    {
      case 1:
        v14 = (unsigned int *)*a5;
        v13 = (unsigned int *)(*a5 + 4);
        v12 = (unsigned int *)(*a5 + 8);
        v11 = (unsigned int *)(*a5 + 12);
        break;
      case 2:
        v12 = (unsigned int *)*a5;
        v11 = (unsigned int *)(*a5 + 4);
        v13 = (unsigned int *)(*a5 + 8);
        v14 = (unsigned int *)(*a5 + 12);
        break;
      case 3:
        v11 = (unsigned int *)*a5;
        v12 = (unsigned int *)(*a5 + 4);
        v13 = (unsigned int *)(*a5 + 12);
        v14 = (unsigned int *)(*a5 + 8);
        break;
      default:
        v12 = (unsigned int *)*a5;
        v11 = (unsigned int *)(*a5 + 4);
        v14 = (unsigned int *)(*a5 + 8);
        v13 = (unsigned int *)(*a5 + 12);
        break;
    }
    v15 = *v13;
    v16 = *v14;
    v17 = *v11;
    v18 = *v12;
    sub_1D52854D0(&v31, 3uLL);
    v19 = v18 * (unint64_t)v16;
    v20 = v17 * (unint64_t)v16;
    v21 = v17 * (unint64_t)v15;
    if (v19 >> 16)
      v22 = 0;
    else
      v22 = v20 >> 16 == 0;
    if (!v22 || v21 >= 0x10000)
    {
      do
      {
        do
        {
          v23 = v20;
          v24 = v19 >> 17;
          v19 >>= 1;
          v25 = v21;
          v20 >>= 1;
          v21 >>= 1;
        }
        while (v24);
      }
      while (v23 >> 17 || v25 >> 17);
    }
    v26 = (void *)*a5;
    v27 = v31;
    v28 = v31;
    *(_DWORD *)v31 = v19;
    *(_DWORD *)(v28 + 4) = v20;
    *(_DWORD *)(v28 + 8) = v21;
    *(_OWORD *)a5 = v27;
    v29 = a5[2];
    a5[2] = v32;
    *(_QWORD *)&v31 = v26;
    v32 = v29;
    if (v26)
    {
      *((_QWORD *)&v31 + 1) = v26;
      operator delete(v26);
    }
  }
  return v9;
}

void sub_1D534BC28(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xE0uLL);
  sub_1D52C07F4((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D534BC94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1D534BCA8(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xE0uLL);
  sub_1D52C0BA8((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D534BD14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1D534BD28(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xF0uLL);
  sub_1D534BDA8(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D534BD94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D534BDA8(_QWORD *a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5)
{
  a1[2] = 0;
  *a1 = &unk_1E9985238;
  a1[1] = 0;
  sub_1D530B330((uint64_t)(a1 + 3), a2, *a3, a4, a5);
  a1[3] = &off_1E997D900;
  a1[28] = 0;
  a1[29] = 0;
  a1[27] = 0;
  return a1;
}

void sub_1D534BDFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D534BE10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9985238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D534BE24(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9985238;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D534BE58(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1D534BE68(uint64_t a1, int a2, uint64_t *a3)
{
  _QWORD *v5;
  void **v6;
  int v7;
  int i;
  float v9;
  float v10;
  unint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  float *v20;
  int v21;

  v5 = (_QWORD *)sub_1D544098C(a1, a2);
  *v5 = &off_1E9985288;
  v5[6] = 0;
  v6 = (void **)(v5 + 6);
  v5[7] = 0;
  v5[8] = 0;
  *(_DWORD *)(a1 + 12) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 16) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 20) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 24) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 28) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 32) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 36) = sub_1D52847F8(*a3);
  *(_DWORD *)(a1 + 40) = sub_1D52847F8(*a3);
  v7 = sub_1D52847F8(*a3);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      v9 = sub_1D5284934(*a3);
      v10 = v9;
      v12 = *(float **)(a1 + 56);
      v11 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v12 >= v11)
      {
        v14 = (float *)*v6;
        v15 = ((char *)v12 - (_BYTE *)*v6) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          sub_1D5282B8C();
        v17 = v11 - (_QWORD)v14;
        if (v17 >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)sub_1D5282BA0(a1 + 64, v18);
          v14 = *(float **)(a1 + 48);
          v12 = *(float **)(a1 + 56);
        }
        else
        {
          v19 = 0;
        }
        v20 = (float *)&v19[4 * v15];
        *v20 = v10;
        v13 = v20 + 1;
        while (v12 != v14)
        {
          v21 = *((_DWORD *)v12-- - 1);
          *((_DWORD *)v20-- - 1) = v21;
        }
        *(_QWORD *)(a1 + 48) = v20;
        *(_QWORD *)(a1 + 56) = v13;
        *(_QWORD *)(a1 + 64) = &v19[4 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v12 = v9;
        v13 = v12 + 1;
      }
      *(_QWORD *)(a1 + 56) = v13;
    }
  }
  return a1;
}

void sub_1D534C010(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

id sub_1D534C03C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  double v64;
  _DWORD *v65;
  _DWORD *v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  RAWOpcodeDeltaPerRow *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;

  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4, a5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v7, *(unsigned int *)(a1 + 12), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v11, (uint64_t)v10, (uint64_t)CFSTR("Top"), v12);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v13, *(unsigned int *)(a1 + 16), v14, v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v17, (uint64_t)v16, (uint64_t)CFSTR("Left"), v18);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v19, *(unsigned int *)(a1 + 20), v20, v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v23, (uint64_t)v22, (uint64_t)CFSTR("Bottom"), v24);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v25, *(unsigned int *)(a1 + 24), v26, v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v29, (uint64_t)v28, (uint64_t)CFSTR("mRight"), v30);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v31, *(unsigned int *)(a1 + 28), v32, v33);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v35, (uint64_t)v34, (uint64_t)CFSTR("Plane"), v36);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v37, *(unsigned int *)(a1 + 32), v38, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v41, (uint64_t)v40, (uint64_t)CFSTR("Planes"), v42);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v43, *(unsigned int *)(a1 + 36), v44, v45);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v47, (uint64_t)v46, (uint64_t)CFSTR("RowPitch"), v48);

  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v49, *(unsigned int *)(a1 + 40), v50, v51);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v6, v53, (uint64_t)v52, (uint64_t)CFSTR("ColPitch"), v54);

  objc_msgSend_array(MEMORY[0x1E0C99DE8], v55, v56, v57, v58);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v65 = *(_DWORD **)(a1 + 48);
  v66 = *(_DWORD **)(a1 + 56);
  while (v65 != v66)
  {
    LODWORD(v64) = *v65;
    objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v59, v60, v61, v62, v64);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v63, v68, (uint64_t)v67, v69, v70);

    ++v65;
  }
  objc_msgSend_setObject_forKeyedSubscript_(v6, v59, (uint64_t)v63, (uint64_t)CFSTR("Delta"), v62);
  v71 = [RAWOpcodeDeltaPerRow alloc];
  v75 = (void *)objc_msgSend_initWithArguments_(v71, v72, (uint64_t)v6, v73, v74);

  return v75;
}

void sub_1D534C264(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D534C2B8(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E9985288;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1D534C2F4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E9985288;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D534C340()
{
  return 10;
}

uint64_t sub_1D534C348@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  int v9;
  int v10;

  v10 = a2;
  sub_1D5285340(a4, a3 + 64);
  v7 = *(_QWORD *)(a1 + 24);
  sub_1D5282F74(&v9, &v10);
  (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v7 + 40))(v7, &v9, 0);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), *a4, a3);
}

void sub_1D534C3CC(void *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_begin_catch(a1);
  v2 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
    *(_QWORD *)v1 = 0;
    *(_QWORD *)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
  }
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  __cxa_end_catch();
  JUMPOUT(0x1D534C3B8);
}

void sub_1D534C3FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D534C418(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void (**v4)(_QWORD);
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t i;
  float v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned int v20;
  void *exception;
  void *v22;
  z_stream v23;
  void *__p[3];
  void *v25[3];
  _QWORD v26[5];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    LOWORD(v23.next_in) = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CSonyDeflateUnpacker", (const char *)&unk_1D548AF1A, (uint8_t *)&v23, 2u);
  }

  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = sub_1D534C874;
  v26[3] = &unk_1E996F870;
  v26[4] = a1;
  v4 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v26);
  v5 = (*(uint64_t (**)(os_signpost_id_t))(*(_QWORD *)a1 + 56))(a1);
  v7 = *(_DWORD *)(a1 + 44);
  v6 = *(_DWORD *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 188);
  v9 = *(_DWORD *)(a1 + 192);
  v23.next_in = (Bytef *)((uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 2);
  sub_1D528304C(v25, (unint64_t *)&v23);
  if (v7 >> 5 >= 0x271 || v6 >> 5 >= 0x271 || v8 >> 5 >= 0x271 || v9 >> 5 >= 0x271 || LODWORD(v25[0]) >= 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v10 = sub_1D530B618(a1);
  sub_1D534C348(a1, **(_DWORD **)(a1 + 200), **(_DWORD **)(a1 + 224), v25);
  v11 = 12 * v8 * v9;
  sub_1D5285340(__p, v11);
  memset(&v23.zalloc, 0, 24);
  v23.avail_in = **(_DWORD **)(a1 + 224);
  v23.next_in = (Bytef *)v25[0];
  v23.avail_out = v11;
  v23.next_out = (Bytef *)__p[0];
  if (inflateInit_(&v23, "1.2.12", 112) || inflate(&v23, 2) != 1 || inflateEnd(&v23))
  {
    v22 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v22, "RawCameraException");
    __cxa_throw(v22, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v12 = sub_1D530CBD0(a1);
  v13 = (unsigned __int8 *)__p[0];
  v14 = (*(_DWORD *)(a1 + 192) * *(_DWORD *)(a1 + 188));
  sub_1D53716B4((uint64_t)__p[0], 4 * v14, v5);
  v15 = v14 * (unint64_t)v5;
  if (v15)
  {
    for (i = 0; i != v15; ++i)
    {
      v17 = 0.0;
      v18 = v13;
      v19 = 4;
      do
      {
        if (v19 != 4)
          LODWORD(v17) <<= 8;
        LODWORD(v17) |= *v18;
        v18 += v15;
        --v19;
      }
      while (v19);
      v20 = bswap32(LODWORD(v17));
      if (v12 != 1)
        v17 = *(float *)&v20;
      *(_WORD *)(v10 + 2 * i) = (int)v17;
      ++v13;
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  v4[2](v4);

}

void sub_1D534C7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1D534C874(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSonyDeflateUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

char *sub_1D534C8F8(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  char *v7;
  char *result;

  *(_DWORD *)(a1 + 188) = a2;
  *(_DWORD *)(a1 + 192) = a3;
  v7 = (char *)(a1 + 200);
  if (v7 != (char *)a4)
    sub_1D5282A44(v7, *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  result = (char *)(a1 + 224);
  if (a1 + 224 != a5)
    return sub_1D5282A44(result, *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return result;
}

_QWORD *sub_1D534C95C(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E99852D0;
  v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[25];
  if (v3)
  {
    a1[26] = v3;
    operator delete(v3);
  }
  return sub_1D5282F0C(a1);
}

void sub_1D534C9A8(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E99852D0;
  v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[25];
  if (v3)
  {
    a1[26] = v3;
    operator delete(v3);
  }
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

BOOL sub_1D534CA08(uint64_t a1, int a2)
{
  return a2 == 2;
}

void sub_1D534CA14(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  unsigned int v47;
  void *v48;
  void *v49;
  _QWORD v50[2];
  _QWORD v51[2];
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  double v57;
  void *v58;
  void *v59;
  unsigned int v60;
  void *__p;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  _QWORD v66[35];
  unsigned int v67;
  void *v68;
  void *v69;
  void *v70[3];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2992))(a1)
    && ((v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2952))(a1), v4 <= 0x2CA5)
      ? (v5 = (14 * v4) & 0xFFFF0)
      : (v5 = 160000),
        v5 > (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 864))(a1)))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 728))(v70, a1);
    v6 = llround((*(double (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1));
    sub_1D5338D40((uint64_t)&v67, 3u, 1u, *(double *)v70[0] * (double)v6, v7, v8, v9, v10, v11, COERCE__INT64(*((double *)v70[0] + 1) * (double)v6));
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 648))(v66, a1);
    v57 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 720))(a1);
    v58 = v12;
    sub_1D5338D40((uint64_t)&v60, 3u, 3u, 0.6097, v13, v14, v15, v16, v17, 0x3FCA474538EF34D7);
    sub_1D536D624((uint64_t)v66, &v57, &v60, &v63);
    if (__p)
    {
      v62 = __p;
      operator delete(__p);
    }
    if (!(_DWORD)v63 || !HIDWORD(v63))
    {
      sub_1D5338D40(a2, 3u, 1u, (double)v6, v18, v19, v20, v21, v22, v6);
      goto LABEL_28;
    }
    sub_1D5338D40((uint64_t)&v57, 3u, 1u, 1.0, v18, v19, v20, v21, v22, 0x3FF0000000000000);
    sub_1D5339A4C((unsigned int *)&v63, &v52);
    sub_1D5339674((unsigned int *)&v52, &v57, (uint64_t)&v54);
    if (*((_QWORD *)&v52 + 1))
    {
      v53 = *((_QWORD *)&v52 + 1);
      operator delete(*((void **)&v52 + 1));
    }
    v23 = sub_1D533A1F0((unsigned int *)&v54);
    sub_1D5339590((unsigned int *)&v54, (uint64_t)&v52, 1.0 / v23);
    sub_1D53393A8(&v54, (uint64_t)&v52);
    if (*((_QWORD *)&v52 + 1))
    {
      v53 = *((_QWORD *)&v52 + 1);
      operator delete(*((void **)&v52 + 1));
    }
    v24 = sub_1D533A29C((unsigned int *)&v54);
    *(_QWORD *)&v52 = sub_1D5339044((uint64_t)&v54, 2u);
    *((_QWORD *)&v52 + 1) = v25;
    *(double *)sub_1D53390D4((uint64_t)&v52, 0) = v24;
    v51[0] = sub_1D5339044((uint64_t)&v54, 1u);
    v51[1] = v26;
    *(double *)sub_1D53390D4((uint64_t)v51, 0) = v24;
    v50[0] = sub_1D5339044((uint64_t)&v54, 0);
    v50[1] = v27;
    *(double *)sub_1D53390D4((uint64_t)v50, 0) = v24;
    sub_1D5339590((unsigned int *)&v54, a2, (double)v5);
  }
  else
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 728))(v70, a1);
    v28 = llround((*(double (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1));
    sub_1D5338D40((uint64_t)&v67, 3u, 1u, *(double *)v70[0] * (double)v28, v29, v30, v31, v32, v33, COERCE__INT64(*((double *)v70[0] + 1) * (double)v28));
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 648))(v66, a1);
    v57 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 720))(a1);
    v58 = v34;
    sub_1D5338D40((uint64_t)&v47, 3u, 3u, 0.6097, v35, v36, v37, v38, v39, 0x3FCA474538EF34D7);
    sub_1D536D624((uint64_t)v66, &v57, &v47, &v63);
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    if (!(_DWORD)v63 || !HIDWORD(v63))
    {
      sub_1D5338D40(a2, 3u, 1u, (double)v28, v40, v41, v42, v43, v44, v28);
      goto LABEL_28;
    }
    sub_1D5338D40((uint64_t)&v57, 3u, 1u, 1.0, v40, v41, v42, v43, v44, 0x3FF0000000000000);
    sub_1D5339A4C((unsigned int *)&v63, &v52);
    sub_1D5339674((unsigned int *)&v52, &v57, (uint64_t)&v54);
    if (*((_QWORD *)&v52 + 1))
    {
      v53 = *((_QWORD *)&v52 + 1);
      operator delete(*((void **)&v52 + 1));
    }
    v45 = sub_1D533A1F0((unsigned int *)&v54);
    sub_1D5339590((unsigned int *)&v54, (uint64_t)&v52, 1.0 / v45);
    sub_1D53393A8(&v54, (uint64_t)&v52);
    if (*((_QWORD *)&v52 + 1))
    {
      v53 = *((_QWORD *)&v52 + 1);
      operator delete(*((void **)&v52 + 1));
    }
    v46 = sub_1D533A1F0(&v67);
    sub_1D5339590((unsigned int *)&v54, a2, v46);
  }
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
LABEL_28:
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  sub_1D532D710(v66);
  if (v68)
  {
    v69 = v68;
    operator delete(v68);
  }
  if (v70[0])
  {
    v70[1] = v70[0];
    operator delete(v70[0]);
  }
}

void sub_1D534CF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  void *v47;
  void *v48;

  if (__p)
    operator delete(__p);
  sub_1D532D710(&a45);
  v47 = *(void **)(v45 - 112);
  if (v47)
  {
    *(_QWORD *)(v45 - 104) = v47;
    operator delete(v47);
  }
  v48 = *(void **)(v45 - 88);
  if (v48)
  {
    *(_QWORD *)(v45 - 80) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

void sub_1D534D0BC(uint64_t a1, int a2)
{
  void *__p[3];
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  if (a2)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 736))(&v6);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 728))(__p, a1);
    sub_1D5339174((uint64_t *)__p, &v4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2992))(a1))
    {
      sub_1D533A29C((unsigned int *)&v4);
      sub_1D533A1F0((unsigned int *)&v4);
    }
    sub_1D533A1F0((unsigned int *)&v6);
    if (*((_QWORD *)&v4 + 1))
    {
      v5 = *((_QWORD *)&v4 + 1);
      operator delete(*((void **)&v4 + 1));
    }
    if (v7)
    {
      v8 = v7;
      operator delete(v7);
    }
  }
}

void sub_1D534D1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D534D1F0(unsigned __int16 *a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1[201];
  if (!a1[201])
  {
    v13 = 0;
    v14 = 0x100010000;
    __p = 0;
    v12 = 0;
    sub_1D5287CCC(&__p, &v14, (uint64_t)&v15, 4);
    (*(void (**)(uint64_t *__return_ptr, unsigned __int16 *))(*(_QWORD *)a1 + 400))(&v9, a1);
    v3 = v9;
    v4 = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)a1 + 888))(a1);
    v1 = sub_1D530DAD8(v3, (uint64_t)&__p, v4);
    v5 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    a1[201] = v1;
    if (__p)
    {
      v12 = __p;
      operator delete(__p);
      return a1[201];
    }
  }
  return v1;
}

void sub_1D534D308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1D534D33C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  double v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v9[5];
  uint64_t v10;
  std::__shared_weak_count *v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v10);
  v2 = v10;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1D534D784;
  v9[3] = &unk_1E99853B8;
  v9[4] = a1;
  v4 = sub_1D534D428(v2, CFSTR("directionNoiseFactor"), v3, v9);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D534D414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D534D428(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t **v9;
  void **v10;
  double *v11;
  double v12;
  double (**v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t *v28;
  void (**v29)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void (*v30)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void *exception;
  _QWORD v33[4];
  id v34;
  std::string __p;
  uint64_t (*v36[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::string *p_p;
  std::__shared_weak_count *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  sub_1D531B8B8(v7, a3, &__p);
  v9 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 3221225472;
    v33[2] = sub_1D534FAD8;
    v33[3] = &unk_1E9979B90;
    v13 = (double (**)(_QWORD))v8;
    v34 = v13;
    sub_1D53BC1FC(a1, v7, v33, &p_p);
    v18 = (__int128 *)p_p;
    if (p_p)
    {
      sub_1D53BE790((uint64_t)p_p, v14, v15, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      objc_msgSend_doubleValue(v19, v20, v21, v22, v23);
      v12 = v24;

    }
    else
    {
      v12 = 0.0;
    }
    v25 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }

    if (!v18)
      v12 = v13[2](v13);
    p_p = &__p;
    v28 = sub_1D531BAD4(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v29 = (void (**)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD))(v28 + 7);
    v36[1] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&v12;
    v36[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1D534FB50;
    if (v36 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v28 + 7))
    {
      v30 = *v29;
      if (*v29)
      {
        p_p = 0;
        v38 = 0;
        v30(2, v29, &p_p, 0, 0);
        ((void (*)(int))v36[0])(2);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))p_p)(2, &p_p, v36, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        *((double *)v28 + 8) = v12;
        v28[7] = (uint64_t)sub_1D534FB50;
        v36[0] = 0;
      }
    }
    sub_1D531BC8C(v36);
  }
  else
  {
    v11 = (double *)sub_1D534FB08((uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v12;
}

void sub_1D534D6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a25);
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

double sub_1D534D784(uint64_t a1)
{
  return (double)(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32))
       * -0.0031
       + 8.31;
}

double sub_1D534D7BC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  double v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = sub_1D534D428(v2, CFSTR("directionLowThreshold"), v3, &unk_1E99853F8);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D534D868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_1D534D87C()
{
  return 2.5;
}

double sub_1D534D884(uint64_t a1)
{
  uint64_t v2;
  int v3;
  double v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = sub_1D534D428(v2, CFSTR("gradientThreshold"), v3, &unk_1E9985418);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D534D930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_1D534D944()
{
  return 0.0;
}

uint64_t sub_1D534D94C(uint64_t a1)
{
  unsigned int v2;

  v2 = (sub_1D53A1B5C(a1) >> 4) & 0xF0F0F0F;
  return (16 * sub_1D53A1B5C(a1)) & 0xF0F0F0F0 | v2;
}

BOOL sub_1D534D988(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _BOOL8 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = sub_1D532B128(v2, CFSTR("blackLevelExtendEnabled"), v3, &unk_1E9985458);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D534DA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D534DA40()
{
  return 0;
}

uint64_t sub_1D534DA48(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  void *exception;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) != 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2168))(a1);
  if (v2 == -583279181)
    return 4;
  if (v2 != 2011985870)
    return 0xFFFFFFFFLL;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2992))(a1);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 3000))(a1);
  if (v3)
  {
    v5 = 6;
    v6 = 8;
  }
  else
  {
    v5 = 5;
    v6 = 7;
  }
  if (v4)
    return v6;
  else
    return v5;
}

void sub_1D534DB44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D534DB58(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v5;
  float v6;
  float v7;
  float v8;
  double *v9;
  unint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  float v21;
  double *v22;
  double *v23;

  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 496) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = sub_1D53A40EC(a1, a2, (int *)a3);
  *(_QWORD *)(a3 + 196) = 0;
  *(_QWORD *)(a3 + 188) = 0;
  *(_BYTE *)(a3 + 9) = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a1 + 2976))(a1, v5);
  *(_DWORD *)(a3 + 40) = 1063675494;
  *(_DWORD *)(a3 + 68) = 1078774989;
  *(_DWORD *)(a3 + 108) = 0;
  v6 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1080))(a1);
  *(float *)(a3 + 116) = v6;
  *(_QWORD *)(a3 + 120) = 0x200000000;
  *(_QWORD *)(a3 + 128) = 0x3F2AAAB000000001;
  *(_BYTE *)(a3 + 136) = 1;
  *(_DWORD *)(a3 + 140) = 0;
  *(_DWORD *)(a3 + 144) = 2 * ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1) > 0x190);
  *(_QWORD *)(a3 + 148) = 0x3CF5C28F3D48B439;
  *(_DWORD *)(a3 + 156) = 1071602729;
  *(_BYTE *)(a3 + 301) = 1;
  v7 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2320))(a1);
  *(float *)(a3 + 112) = v7;
  *(_DWORD *)(a3 + 304) = 1;
  *(_BYTE *)(a3 + 308) = 1;
  v8 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 3008))(a1);
  *(float *)(a3 + 620) = v8;
  (*(void (**)(double **__return_ptr, uint64_t))(*(_QWORD *)a1 + 744))(&v22, a1);
  v9 = v22;
  v10 = (char *)v23 - (char *)v22;
  if (v23 == v22
    || (v11 = *v22 * 1.04, *(float *)(a3 + 624) = v11, v10 < 9)
    || (v12 = v9[1] * 1.01, *(float *)(a3 + 628) = v12, v10 <= 0x10))
  {
    sub_1D528EAE0();
  }
  v13 = v9[2] * 0.91;
  *(float *)(a3 + 632) = v13;
  v23 = v9;
  operator delete(v9);
  *(_QWORD *)(a3 + 188) = 1;
  *(_QWORD *)(a3 + 196) = 4489188110499840000;
  v14 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2960))(a1);
  *(float *)(a3 + 204) = v14;
  v15 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2968))(a1);
  *(float *)(a3 + 208) = v15;
  *(_DWORD *)(a3 + 248) = 0;
  *(_BYTE *)(a3 + 212) = 1;
  *(_BYTE *)(a3 + 228) = 1;
  *(_BYTE *)(a3 + 240) = 1;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 3000))(a1);
  v17 = 0x3B83126F3F000000;
  if ((v16 & 1) != 0)
  {
    v18 = 0x3B83126F3F000000;
  }
  else
  {
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2992))(a1);
    v17 = 0x3B83126F3F000000;
    v18 = 0x3B83126F3F000000;
    if ((v19 & 1) != 0)
    {
      *(float *)&v20 = (double)(*(unsigned int (**)(uint64_t, double))(*(_QWORD *)a1 + 256))(a1, 5.04831901e-22)/ -75.0+ 34.6667;
      v17 = v20;
      v18 = 0x3D5D2F1B3CB43958;
    }
  }
  *(_QWORD *)(a3 + 216) = v17;
  *(_QWORD *)(a3 + 232) = v18;
  *(_DWORD *)(a3 + 244) = v18;
  *(_DWORD *)(a3 + 224) = 0;
  *(_WORD *)(a3 + 252) = 257;
  *(_QWORD *)(a3 + 256) = 1025490551;
  *(_DWORD *)(a3 + 268) = 2;
  v21 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2984))(a1);
  *(float *)(a3 + 184) = v21;
  *(_BYTE *)(a3 + 163) = v21 > 1.0e-10;
}

void sub_1D534DE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D534DEA0(_BYTE *a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  double v10;
  double v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  double v21;
  double v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  double v32;
  double v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  double v43;
  double v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  double v54;
  double v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  double v65;
  double v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  double v76;
  double v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  double v87;
  double v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  double v98;
  double v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  void *exception;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *__p;
  void *v113;

  v5 = a3;
  if ((*(int (**)(_BYTE *))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  a1[400] = 1;
  sub_1D531E2BC((uint64_t)a1, a2, v5);
  if ((_DWORD)a2 && (*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 2992))(a1))
  {
    sub_1D52E1FDC(v5, (void *)*MEMORY[0x1E0CBD068], 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)MEMORY[0x1D8272058]();
    (*(void (**)(uint64_t *__return_ptr, _BYTE *))(*(_QWORD *)a1 + 1200))(&v111, a1);
    if (sub_1D53393A0((uint64_t)&v111) < 3 || sub_1D5339398((unsigned int *)&v111) <= 2)
    {
      v108 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v108, "RawCameraException");
      __cxa_throw(v108, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v8 = (void *)MEMORY[0x1E0CB37E8];
    v109 = sub_1D5339044((uint64_t)&v111, 0);
    v110 = v9;
    v10 = *(double *)sub_1D53390D4((uint64_t)&v109, 0);
    v11 = (*(double (**)(_BYTE *))(*(_QWORD *)a1 + 3016))(a1);
    objc_msgSend_numberWithDouble_(v8, v12, v13, v14, v15, v10 * v11);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v17, (uint64_t)v16, (uint64_t)CFSTR("mc00"), v18);

    v19 = (void *)MEMORY[0x1E0CB37E8];
    v109 = sub_1D5339044((uint64_t)&v111, 0);
    v110 = v20;
    v21 = *(double *)sub_1D53390D4((uint64_t)&v109, 1u);
    v22 = (*(double (**)(_BYTE *))(*(_QWORD *)a1 + 3016))(a1);
    objc_msgSend_numberWithDouble_(v19, v23, v24, v25, v26, v21 * v22);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v28, (uint64_t)v27, (uint64_t)CFSTR("mc01"), v29);

    v30 = (void *)MEMORY[0x1E0CB37E8];
    v109 = sub_1D5339044((uint64_t)&v111, 0);
    v110 = v31;
    v32 = *(double *)sub_1D53390D4((uint64_t)&v109, 2u);
    v33 = (*(double (**)(_BYTE *))(*(_QWORD *)a1 + 3016))(a1);
    objc_msgSend_numberWithDouble_(v30, v34, v35, v36, v37, v32 * v33);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v39, (uint64_t)v38, (uint64_t)CFSTR("mc02"), v40);

    v41 = (void *)MEMORY[0x1E0CB37E8];
    v109 = sub_1D5339044((uint64_t)&v111, 1u);
    v110 = v42;
    v43 = *(double *)sub_1D53390D4((uint64_t)&v109, 0);
    v44 = (*(double (**)(_BYTE *))(*(_QWORD *)a1 + 3016))(a1);
    objc_msgSend_numberWithDouble_(v41, v45, v46, v47, v48, v43 * v44);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v50, (uint64_t)v49, (uint64_t)CFSTR("mc10"), v51);

    v52 = (void *)MEMORY[0x1E0CB37E8];
    v109 = sub_1D5339044((uint64_t)&v111, 1u);
    v110 = v53;
    v54 = *(double *)sub_1D53390D4((uint64_t)&v109, 1u);
    v55 = (*(double (**)(_BYTE *))(*(_QWORD *)a1 + 3016))(a1);
    objc_msgSend_numberWithDouble_(v52, v56, v57, v58, v59, v54 * v55);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v61, (uint64_t)v60, (uint64_t)CFSTR("mc11"), v62);

    v63 = (void *)MEMORY[0x1E0CB37E8];
    v109 = sub_1D5339044((uint64_t)&v111, 1u);
    v110 = v64;
    v65 = *(double *)sub_1D53390D4((uint64_t)&v109, 2u);
    v66 = (*(double (**)(_BYTE *))(*(_QWORD *)a1 + 3016))(a1);
    objc_msgSend_numberWithDouble_(v63, v67, v68, v69, v70, v65 * v66);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v72, (uint64_t)v71, (uint64_t)CFSTR("mc12"), v73);

    v74 = (void *)MEMORY[0x1E0CB37E8];
    v109 = sub_1D5339044((uint64_t)&v111, 2u);
    v110 = v75;
    v76 = *(double *)sub_1D53390D4((uint64_t)&v109, 0);
    v77 = (*(double (**)(_BYTE *))(*(_QWORD *)a1 + 3016))(a1);
    objc_msgSend_numberWithDouble_(v74, v78, v79, v80, v81, v76 * v77);
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v83, (uint64_t)v82, (uint64_t)CFSTR("mc20"), v84);

    v85 = (void *)MEMORY[0x1E0CB37E8];
    v109 = sub_1D5339044((uint64_t)&v111, 2u);
    v110 = v86;
    v87 = *(double *)sub_1D53390D4((uint64_t)&v109, 1u);
    v88 = (*(double (**)(_BYTE *))(*(_QWORD *)a1 + 3016))(a1);
    objc_msgSend_numberWithDouble_(v85, v89, v90, v91, v92, v87 * v88);
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v94, (uint64_t)v93, (uint64_t)CFSTR("mc21"), v95);

    v96 = (void *)MEMORY[0x1E0CB37E8];
    v109 = sub_1D5339044((uint64_t)&v111, 2u);
    v110 = v97;
    v98 = *(double *)sub_1D53390D4((uint64_t)&v109, 2u);
    v99 = (*(double (**)(_BYTE *))(*(_QWORD *)a1 + 3016))(a1);
    objc_msgSend_numberWithDouble_(v96, v100, v101, v102, v103, v98 * v99);
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v6, v105, (uint64_t)v104, (uint64_t)CFSTR("mc22"), v106);

    if (__p)
    {
      v113 = __p;
      operator delete(__p);
    }
    objc_autoreleasePoolPop(v7);

  }
}

void sub_1D534E378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

id sub_1D534E424(_BYTE *a1, unsigned int a2)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  void *exception;

  if ((*(int (**)(_BYTE *))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D5324790((uint64_t)a1, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v4;
  if (a1[400])
    objc_msgSend_setObject_forKeyedSubscript_(v4, v5, MEMORY[0x1E0C9AAB0], (uint64_t)CFSTR("inputLinearized"), v6);
  return v7;
}

void sub_1D534E4C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1D534E4E0(uint64_t a1, unsigned int a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  unsigned int v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;

  sub_1D5320418(a1, a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2992))(a1))
  {
    v7 = (void *)MEMORY[0x1E0CB37E8];
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 3008))(a1);
    objc_msgSend_numberWithDouble_(v7, v8, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKeyedSubscript_(v3, v13, (uint64_t)v12, (uint64_t)CFSTR("fujiHigh"), v14);

  }
  v15 = sub_1D5297AC0(v3, CFSTR("pattern"), v4, v5, v6);
  objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v16, (v15 >> 4) & 0xF0F0F0F | (16 * v15) & 0xF0F0F0F0, v17, v18);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v3, v20, (uint64_t)v19, (uint64_t)CFSTR("pattern"), v21);

  return v3;
}

void sub_1D534E5B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t (*sub_1D534E5E0(uint64_t a1))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  void *exception;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return sub_1D5423400(a1);
}

void sub_1D534E644(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D534E658(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *__p[2];
  char v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  _QWORD v9[2];

  v9[0] = &unk_1E99851F0;
  v9[1] = 0x300000000;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v7);
  v1 = v7;
  sub_1D52850A0(__p, "RAF:WB_GRGBLevels");
  (*(void (**)(uint64_t, void **, _QWORD *, uint64_t))(*(_QWORD *)v1 + 600))(v1, __p, v9, 3);
  if (v6 < 0)
    operator delete(__p[0]);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1D534E724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_1D534E750(uint64_t *a1)
{
  int v2;
  uint64_t v3;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = (*(uint64_t (**)(uint64_t *))(*a1 + 176))(a1);
  v3 = *a1;
  if (v2)
    return (*(unsigned int (**)(uint64_t *))(v3 + 584))(a1) == 2;
  v5 = (*(uint64_t (**)(uint64_t *))(v3 + 344))(a1);
  v6 = (*(uint64_t (**)(uint64_t *))(*a1 + 408))(a1);
  v7 = (unint64_t)(*(uint64_t (**)(uint64_t *))(*a1 + 408))(a1) >> 32;
  v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 408))(a1);
  v9 = HIDWORD(v8);
  if (v8 < 0)
    LODWORD(v9) = HIDWORD(v8) + 1;
  return v5 > ((int)v7 + ((int)v9 >> 1)) * v6;
}

uint64_t sub_1D534E804()
{
  return 0;
}

double sub_1D534E80C(uint64_t a1)
{
  int v1;
  double result;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2992))(a1);
  result = 0.0;
  if (v1)
    return 16.0;
  return result;
}

uint64_t sub_1D534E838()
{
  return 16;
}

double sub_1D534E840(uint64_t a1)
{
  int v1;
  double result;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2992))(a1);
  result = 1.0;
  if (v1)
    return 5.0;
  return result;
}

void sub_1D534E86C(uint64_t a1@<X0>, unsigned int *a2@<X8>)
{
  double v4;
  uint64_t v5;
  void *__p;
  void *v7;

  sub_1D5366C0C(a1);
  v4 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 3016))(a1);
  sub_1D5339590(a2, (uint64_t)&v5, v4);
  sub_1D53393A8(a2, (uint64_t)&v5);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_1D534E8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)(v11 + 8);
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D534E904(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  unsigned int v5;
  void *__p;
  void *v7;

  sub_1D5366C18(a1);
  v4 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 3016))(a1);
  sub_1D5339590(&v5, a2, v4);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_1D534E960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D534E97C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  unsigned int v5;
  void *__p;
  void *v7;

  sub_1D5366C24(a1);
  v4 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 3016))(a1);
  sub_1D5339590(&v5, a2, v4);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_1D534E9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D534E9F4(_QWORD *a1)
{
  const void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  sub_1D5299B1C((uint64_t)a1);
  v2 = (const void *)a1[3];
  if (v2)
  {
    v3 = __dynamic_cast(v2, (const struct __class_type_info *)&unk_1E99780E0, (const struct __class_type_info *)&unk_1E998DC50, 0);
    if (v3)
    {
      v4 = v3;
      v5 = (std::__shared_weak_count *)a1[4];
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      if ((*(unsigned int (**)(_QWORD *))(*a1 + 2992))(a1))
        v8 = 2;
      else
        v8 = 1;
      (*(void (**)(void *, uint64_t))(*(_QWORD *)v4 + 216))(v4, v8);
      if (v5)
      {
        v9 = (unint64_t *)&v5->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void sub_1D534EADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_1D534EAF0(_BYTE *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  id v12;
  void *v13;

  v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, (uint64_t)CFSTR("fujiHighlightEnabled"), v5, v6))
  {
    v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 2992))(a1);
    v11 = (void *)MEMORY[0x1E0C9AAA0];
    if (v10)
      v11 = (void *)MEMORY[0x1E0C9AAB0];
  }
  else
  {
    if (!objc_msgSend_isEqualToString_(v3, v7, (uint64_t)CFSTR("fujiHybridMode"), v8, v9))
    {
      sub_1D54210E0((uint64_t)a1, v3);
      v12 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_11;
    }
    if (a1[400])
      v11 = (void *)MEMORY[0x1E0C9AAB0];
    else
      v11 = (void *)MEMORY[0x1E0C9AAA0];
  }
  v12 = v11;
LABEL_11:
  v13 = v12;

  return v13;
}

void sub_1D534EBA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D534EBB4(_QWORD *a1)
{
  _QWORD *v1;
  _DWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  void *exception;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  __int128 v32;
  _DWORD *v33;
  _DWORD *v34;

  v1 = a1 + 3;
  if (!a1[3])
  {
    (*(void (**)(_DWORD **__return_ptr))(*a1 + 2888))(&v33);
    v3 = v33;
    if (v34 == v33)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (*v33 == 9)
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 160))(&v28, a1);
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v28 + 384))(&v30);
      v27 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
      v26 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
      *(_QWORD *)&v25 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
      *((_QWORD *)&v25 + 1) = v14;
      sub_1D534FD40(&v30, (unint64_t *)&v27, &v26, &v25, &v32);
      v15 = v31;
      if (v31)
      {
        p_shared_owners = (unint64_t *)&v31->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = v29;
      if (v29)
      {
        v19 = (unint64_t *)&v29->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = v32;
      v22 = (*(uint64_t (**)(_QWORD *))(*a1 + 2992))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 200))(v21, v22);
      sub_1D52908C8(v1, (uint64_t *)&v32);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
      if (*((_QWORD *)&v32 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
        do
          v13 = __ldaxr(v23);
        while (__stlxr(v13 - 1, v23));
        goto LABEL_32;
      }
    }
    else
    {
      if (*v33 != 8)
      {
LABEL_35:
        v34 = v3;
        operator delete(v3);
        return;
      }
      (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 160))(&v28, a1);
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v28 + 384))(&v30);
      v27 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
      v26 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
      *(_QWORD *)&v25 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
      *((_QWORD *)&v25 + 1) = v4;
      sub_1D534FC08(&v30, (unint64_t *)&v27, &v26, &v25, &v32);
      sub_1D5292548((uint64_t)v1, &v32);
      v5 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
      if (*((_QWORD *)&v32 + 1))
      {
        v6 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v8 = v31;
      if (v31)
      {
        v9 = (unint64_t *)&v31->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v11 = v29;
      if (v29)
      {
        v12 = (unint64_t *)&v29->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
LABEL_32:
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    v3 = v33;
    if (!v33)
      return;
    goto LABEL_35;
  }
}

void sub_1D534EED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_1D5282EB4((uint64_t)va1);
  sub_1D5282EB4((uint64_t)va);
  v7 = *(void **)(v5 - 64);
  if (v7)
  {
    *(_QWORD *)(v5 - 56) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

id sub_1D534EF54(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *exception;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v1, v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1D536C28C(0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v5, v7, (uint64_t)v6, v8, v9);

  sub_1D536C28C(1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v5, v11, (uint64_t)v10, v12, v13);

  sub_1D536C28C(2);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addObject_(v5, v15, (uint64_t)v14, v16, v17);

  return v5;
}

void sub_1D534F030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D534F068@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) >= 7)
    return (_QWORD *)sub_1D532F624(a1);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1) & 1) != 0)
    return sub_1D5353384(a2);
  return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2064))(a1);
}

BOOL sub_1D534F0E4(uint64_t a1)
{
  return (*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) >= 7 && sub_1D52980AC(a1);
}

uint64_t sub_1D534F128@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *exception;

  result = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  if ((int)result >= 7)
    return sub_1D5299970(a1, a2);
  v5 = a1[3];
  if (!v5)
  {
    (*(void (**)(uint64_t *))(*a1 + 2896))(a1);
    if (!a1[3])
      goto LABEL_12;
    v6 = (*(uint64_t (**)(uint64_t *))(*a1 + 864))(a1);
    sub_1D530C458(a1[3], v6 - 5);
    result = (*(uint64_t (**)(uint64_t *))(*a1 + 816))(a1);
    v5 = a1[3];
    if ((_DWORD)result == 1)
    {
      *(_BYTE *)(v5 + 184) = 1;
      goto LABEL_8;
    }
    if (!v5)
    {
LABEL_12:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
LABEL_8:
  v7 = a1[4];
  *a2 = v5;
  a2[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

void sub_1D534F22C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D534F240(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  double v9;
  float64x2_t *v10;
  float v11;
  float64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) >= 7)
  {
    sub_1D5365D0C(a1, (float64x2_t **)a2);
    return;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v19, a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 368))(v19);
  v4 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *(void **)(a2 + 8);
  if (v7 == *(void **)a2)
  {
    if (v7)
      operator delete(v7);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 808))(a1))
    {
      v19 = 0x3FF0000000000000;
      sub_1D528F9B4((_QWORD *)a2, 3uLL, &v19);
      return;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 704))(&v19, a1);
    v8 = (std::__shared_weak_count *)v19;
    if ((std::__shared_weak_count *)((char *)v20 - v19) == (std::__shared_weak_count *)24)
    {
      v17 = *(float64x2_t *)v19;
      v9 = *(double *)(v19 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v10 = (float64x2_t *)operator new(0x18uLL);
      v11 = v9;
      *(_QWORD *)(a2 + 8) = (char *)v10 + 24;
      *(_QWORD *)(a2 + 16) = (char *)v10 + 24;
      __asm { FMOV            V3.2D, #1.0 }
      *v10 = vdivq_f64(_Q3, vcvtq_f64_f32(vcvt_f32_f64(v17)));
      v10[1].f64[0] = 1.0 / v11;
      *(_QWORD *)a2 = v10;
    }
    else
    {
      v18 = 0x3FF0000000000000;
      sub_1D528F9B4((_QWORD *)a2, 3uLL, &v18);
      v8 = (std::__shared_weak_count *)v19;
      if (!v19)
        return;
    }
    v20 = v8;
    operator delete(v8);
  }
}

void sub_1D534F3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D534F430(uint64_t a1)
{
  int v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) >= 7)
    return sub_1D532E7F8(a1);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  v4 = *(_QWORD *)a1;
  if (v3)
    v5 = *(uint64_t (**)(uint64_t))(v4 + 984);
  else
    v5 = *(uint64_t (**)(uint64_t))(v4 + 992);
  return v5(a1);
}

void sub_1D534F498(uint64_t a1)
{
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) < 7)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1) & 1) == 0)
    {
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 1608))(a1, -1.0);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1616))(a1);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2096))(a1);
      (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2080))(a1);
    }
  }
  else
  {
    sub_1D533029C(a1);
  }
}

void sub_1D534F578(uint64_t a1, _DWORD *a2, _DWORD *a3, char *a4)
{
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) < 7)
  {
    *a3 = 1065353216;
    *a2 = 1065353216;
    *a4 = 0;
  }
  else
  {
    sub_1D53A3998(a1, a2, a3, a4);
  }
}

BOOL sub_1D534F5EC(uint64_t a1)
{
  return (*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) >= 7 && sub_1D5426AA0(a1);
}

void sub_1D534F630(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) < 7)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2264))(a1))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 2864))(&v9, a1);
      v8 = 0;
      sub_1D5371228(v9, (double *)&v8, v2, v3, v4);
      v5 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
  else
  {
    sub_1D53A22A8(a1);
  }
}

void sub_1D534F71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D534F730(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  double v10;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) < 7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1552))(a1);
    v10 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 1504))(a1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2264))(a1))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 2864))(&v8, a1);
      v10 = sub_1D5371214(v8, &v10, v2, v3, v4);
      v5 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1048))(a1) & 1) == 0)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2088))(a1);
  }
  else
  {
    sub_1D5426784(a1);
  }
}

void sub_1D534F878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1D534F88C(uint64_t a1)
{
  double v3;
  _BYTE *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  double (***v9)(void *, unint64_t);
  unsigned int v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *__p;
  std::__shared_weak_count *v16;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) >= 7)
    return sub_1D532F810(a1);
  v3 = -1.0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1064))(a1))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1056))(a1))
    {
      sub_1D532F384(a1, (double **)&__p);
      v3 = fmax(*(double *)__p, fmax(*((double *)__p + 1), fmax(*((double *)__p + 2), *((double *)__p + 3))));
      v16 = (std::__shared_weak_count *)__p;
      operator delete(__p);
    }
    else
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1120))(&__p, a1);
      if (!__p)
        goto LABEL_20;
      v4 = __dynamic_cast(__p, (const struct __class_type_info *)&unk_1E9986FD8, (const struct __class_type_info *)&unk_1E9986EC8, 0);
      if (v4)
      {
        v5 = v16;
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
          v4[32] = 0;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        else
        {
          v4[32] = 0;
        }
        if (!__p)
          goto LABEL_20;
      }
      if (sub_1D531BD78((uint64_t)&unk_1E997DD58, (uint64_t)&unk_1E997DD58)
        || (v9 = (double (***)(void *, unint64_t))__p,
            v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1),
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1),
            v3 = (**v9)(v9, llround((double)v10)),
            v3 < 0.0))
      {
LABEL_20:
        v11 = 1;
      }
      else
      {
        v11 = 0;
      }
      v12 = v16;
      if (v16)
      {
        v13 = (unint64_t *)&v16->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (v11)
        return (*(double (**)(uint64_t))(*(_QWORD *)a1 + 2072))(a1);
    }
  }
  return v3;
}

void sub_1D534FAA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D534FAB4(uint64_t a1)
{
  sub_1D5294858(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D534FAD8(uint64_t a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0CB37E8];
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return objc_msgSend_numberWithDouble_(v1, v2, v3, v4, v5);
}

uint64_t (**sub_1D534FB08(uint64_t (**result)(uint64_t, _QWORD, _QWORD, _QWORD, void *)))(uint64_t, _QWORD, _QWORD, _QWORD, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(*result)(3, result, 0, MEMORY[0x1E0DE4ED0], &unk_1D544C288);
    else
      return 0;
  }
  return result;
}

void sub_1D534FB50(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D534FB84()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

void sub_1D534FC08(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xD8uLL);
  sub_1D534FC88(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D534FC74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D534FC88(_QWORD *a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5)
{
  a1[2] = 0;
  *a1 = &unk_1E9986080;
  a1[1] = 0;
  sub_1D530B330((uint64_t)(a1 + 3), a2, *a3, a4, a5);
  a1[3] = &unk_1E997D810;
  return a1;
}

void sub_1D534FCD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D534FCE8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9986080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D534FCFC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9986080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D534FD30(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1D534FD40(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xD8uLL);
  sub_1D534FDC0((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D534FDAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D534FDC0(uint64_t a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E99860D0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D530B330(a1 + 24, a2, *a3, a4, a5);
  *(_QWORD *)(a1 + 24) = &unk_1E997D9F0;
  *(_BYTE *)(a1 + 210) = 0;
  return a1;
}

void sub_1D534FE10(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D534FE24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99860D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D534FE38(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E99860D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D534FE6C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1D534FEF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D535000C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D53500BC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *exception;
  uint64_t v7;
  std::__shared_weak_count *v8;

  sub_1D5285A94(&v7, (_QWORD *)(a1 + 8));
  sub_1D53AE100(&v7, a2);
  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1D5350174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D53501A8(_QWORD *a1)
{
  void *v2;
  void **p_lpsrc;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  void *lpsrc;
  std::__shared_weak_count *v28;
  void *v29;
  std::__shared_weak_count *v30;

  sub_1D5299C2C((uint64_t)a1);
  if (!a1[3])
  {
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 160))(&lpsrc, a1);
    if (lpsrc
      && (v2 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9975900, 0)) != 0)
    {
      v29 = v2;
      v30 = v28;
      p_lpsrc = &lpsrc;
    }
    else
    {
      p_lpsrc = &v29;
    }
    *p_lpsrc = 0;
    p_lpsrc[1] = 0;
    v4 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (uint64_t)v29;
    if (v29)
    {
      (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v29 + 384))(&lpsrc, v29);
      v26 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
      v23 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
      *(_QWORD *)&v22 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
      *((_QWORD *)&v22 + 1) = v8;
      sub_1D5350E10(&lpsrc, (unint64_t *)&v26, &v23, &v22, &v24);
      v9 = v24;
      v10 = sub_1D52E6780(v7);
      sub_1D5351860(v9, v10);
      v11 = v24;
      v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 2992))(a1);
      sub_1D5351870(v11, v12);
      sub_1D52908C8(a1 + 3, &v24);
      v13 = v25;
      if (v25)
      {
        v14 = (unint64_t *)&v25->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = v28;
      if (v28)
      {
        v17 = (unint64_t *)&v28->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    v19 = v30;
    if (v30)
    {
      v20 = (unint64_t *)&v30->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void sub_1D53503D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_1D5282EB4((uint64_t)va);
  sub_1D5282EB4(v8 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_1D535040C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *__p[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v9);
  v1 = v9;
  sub_1D52850A0(__p, "CIFF");
  v2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v1 + 264))(v1, __p);
  if (v8 < 0)
    operator delete(__p[0]);
  v3 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void sub_1D53504B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

double sub_1D53504E0(uint64_t a1)
{
  uint64_t v1;
  double v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *__p[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v9);
  v1 = v9;
  sub_1D52850A0(__p, "CIFF");
  v2 = (*(double (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v1 + 280))(v1, __p, 1);
  if (v8 < 0)
    operator delete(__p[0]);
  v3 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void sub_1D5350594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53505C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *__p[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *v11;

  v11 = &unk_1E997C018;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v9);
  v1 = v9;
  sub_1D52850A0(__p, "CIFF:CanonShotInfo");
  v2 = sub_1D5291C1C(v1, (uint64_t)__p, (uint64_t)&v11);
  if (v8 < 0)
    operator delete(__p[0]);
  v3 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void sub_1D5350674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1D53506A0(uint64_t a1)
{
  unsigned int v1;

  v1 = sub_1D53505C0(a1);
  return (v1 < 0x11) & (0x18040u >> v1);
}

void sub_1D53506CC(uint64_t a1@<X0>, double **a2@<X8>)
{
  void *v4;
  void **p_lpsrc;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  double v17;
  double *v18;
  double *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *__p[3];
  _QWORD v26[4];
  void *lpsrc;
  std::__shared_weak_count *v28;
  void *v29;
  std::__shared_weak_count *v30;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9975900, 0)) != 0)
  {
    v29 = v4;
    v30 = v28;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v29;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v6 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v29;
  if (v29)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1016))(&lpsrc, a1);
    v10 = *((_QWORD *)v9 + 98);
    v11 = (std::__shared_weak_count *)*((_QWORD *)v9 + 99);
    v26[2] = v10;
    v26[3] = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    sub_1D5282DF0(__p, *(_DWORD *)(v10 + 52), *(_DWORD *)(v10 + 48));
    v26[0] = 0;
    v26[1] = __p[0];
    sub_1D530DE0C(v10, (int *)v26, __p);
    v14 = 0;
    v15 = (char *)lpsrc;
    v16 = (char *)__p[0];
    v17 = -(double)(*(_DWORD *)(v10 + 48) >> 2);
    do
    {
      *(double *)&v16[v14] = *(double *)&v16[v14] + v17 * *(double *)&v15[v14];
      v14 += 8;
    }
    while (v14 != 32);
    sub_1D528EB68(a2, 3uLL);
    v18 = (double *)__p[0];
    v19 = *a2;
    *v19 = 1.0 / *(double *)__p[0];
    v19[1] = 2.0 / (v18[1] + v18[2]);
    v19[2] = 1.0 / v18[3];
    __p[1] = v18;
    operator delete(v18);
    if (v11)
    {
      v20 = (unint64_t *)&v11->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (lpsrc)
    {
      v28 = (std::__shared_weak_count *)lpsrc;
      operator delete(lpsrc);
    }
  }
  else
  {
    lpsrc = (void *)0x3FF0000000000000;
    sub_1D528F9B4(a2, 3uLL, &lpsrc);
  }
  v22 = v30;
  if (v30)
  {
    v23 = (unint64_t *)&v30->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1D5350904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;

  sub_1D5282EB4(v17 - 48);
  _Unwind_Resume(a1);
}

BOOL sub_1D5350958(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _BOOL8 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = sub_1D532B128(v2, CFSTR("add2WhenLessThan512"), v3, &unk_1E9986110);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D53509FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5350A10()
{
  return 1;
}

void sub_1D5350A18(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[3];

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 2944))(v5);
  sub_1D52850A0(__p, "CIFF:CanonShotInfo");
  v2 = (*(uint64_t (**)(uint64_t, void **, void **))(*(_QWORD *)a1 + 2968))(a1, __p, v5);
  if (v4 < 0)
    operator delete(__p[0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 2960))(a1, v2);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_1D5350ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D5350AF4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  void **v5;
  void **v7;
  void *exception;
  void *__p[2];
  char v10;
  void *v11;
  int v12;
  void *v13[2];
  unsigned __int8 v14;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 2200))(v13);
  if ((v14 & 0x80u) == 0)
    v4 = v14;
  else
    v4 = (unint64_t)v13[1];
  if (v4 == 2)
  {
    if ((v14 & 0x80u) == 0)
      v7 = v13;
    else
      v7 = (void **)v13[0];
    if (memcmp(v7, "G6", 2uLL))
      goto LABEL_26;
    v12 = 0;
    v11 = &unk_1E9986D20;
    sub_1D52850A0(__p, "CIFF:CanonColorInfo1");
    (*(void (**)(uint64_t, uint64_t, void **, void **))(*(_QWORD *)a1 + 2976))(a1, a2, __p, &v11);
  }
  else
  {
    if (v4 != 3)
      goto LABEL_26;
    if ((v14 & 0x80u) == 0)
      v5 = v13;
    else
      v5 = (void **)v13[0];
    if (*(_WORD *)v5 != 13892 || *((_BYTE *)v5 + 2) != 48)
    {
      if (!memcmp(v5, "D30", 3uLL))
      {
        v12 = 0;
        v11 = &unk_1E997A7E8;
        sub_1D52850A0(__p, "CIFF:CanonColorInfo1");
        (*(void (**)(uint64_t, uint64_t, void **, void **))(*(_QWORD *)a1 + 2976))(a1, a2, __p, &v11);
        goto LABEL_21;
      }
LABEL_26:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v12 = 0;
    v11 = &unk_1E997E9C8;
    sub_1D52850A0(__p, "CIFF:ColorBalance");
    (*(void (**)(uint64_t, uint64_t, void **, void **))(*(_QWORD *)a1 + 2976))(a1, a2, __p, &v11);
  }
LABEL_21:
  if (v10 < 0)
    operator delete(__p[0]);
  if ((char)v14 < 0)
    operator delete(v13[0]);
}

void sub_1D5350CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D5350D38(uint64_t a1, uint64_t a2, void **a3, unsigned int a4, uint64_t *a5)
{
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  void *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int32x2_t v15;
  __int128 v16;
  uint64_t v17;

  v6 = a4;
  if (a4 == 3)
    a4 = 4;
  v7 = sub_1D531C458(a1, a2, a3, a4, a5);
  if (v6 == 3)
  {
    if (v7)
    {
      v8 = *(_DWORD *)(*a5 + 8) ^ 0x410;
      v9 = *(_DWORD *)(*a5 + 12) ^ 0x45F3;
      v15 = (int32x2_t)veor_s8(*(int8x8_t *)*a5, (int8x8_t)0x45F300000410);
      sub_1D52854D0(&v16, 3uLL);
      v10 = (void *)*a5;
      v11 = v16;
      v12 = v16;
      *(int32x2_t *)v16 = vrev64_s32(vmul_s32(vdup_n_s32(v9), v15));
      *(_DWORD *)(v12 + 8) = v8 * v15.i32[0];
      *(_OWORD *)a5 = v11;
      v13 = a5[2];
      a5[2] = v17;
      *(_QWORD *)&v16 = v10;
      v17 = v13;
      if (v10)
      {
        *((_QWORD *)&v16 + 1) = v10;
        operator delete(v10);
      }
    }
  }
  return 1;
}

void sub_1D5350E10(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xE0uLL);
  sub_1D5350E90((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D5350E7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5350E90(uint64_t a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E9986D68;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D530B330(a1 + 24, a2, *a3, a4, a5);
  *(_QWORD *)(a1 + 24) = &unk_1E9986DB8;
  *(_DWORD *)(a1 + 212) = 0;
  *(_WORD *)(a1 + 216) = 257;
  return a1;
}

void sub_1D5350EE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5350EFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9986D68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5350F10(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9986D68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5350F44(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1D5350F54(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  void (**v4)(_QWORD);
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  BOOL v21;
  size_t v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned __int8 *v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned __int8 *v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned __int8 *v58;
  int v59;
  int16x4_t *v60;
  int i;
  int8x16_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int32x4_t v65;
  uint8_t *v66;
  int v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  int32x2_t v74;
  uint8_t *v75;
  uint64_t v76;
  unsigned int v77;
  int32x2_t v78;
  int32x2_t v79;
  int32x4_t v80;
  int8x16_t v81;
  int32x4_t v82;
  int j;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  void *v91;
  void *exception;
  unint64_t v93;
  int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  _QWORD v99[5];
  uint8_t buf[16384];
  _WORD v101[1024];
  _WORD v102[1024];
  _QWORD v103[66];

  v1 = MEMORY[0x1E0C80A78](a1);
  v103[64] = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CCanonCompressedUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v99[0] = MEMORY[0x1E0C809B0];
  v99[1] = 3221225472;
  v99[2] = sub_1D53517DC;
  v99[3] = &unk_1E996F870;
  v99[4] = v1;
  v4 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v99);
  v5 = sub_1D530B618(v1);
  v6 = *(unsigned int *)(v1 + 44);
  if ((v6 & 0x7FFFFFFC) >= 0x10004
    || (v7 = v5,
        v8 = *(_DWORD *)(v1 + 48),
        !sub_1D53126BC(&byte_1D544C3D4[29 * *(unsigned int *)(v1 + 188)], (uint64_t)v102, 0))
    || !sub_1D53126BC(&byte_1D544C42B[180 * *(unsigned int *)(v1 + 188)], (uint64_t)v101, 1))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v9 = *(unsigned __int8 *)(v1 + 192);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = v8 * v6;
  v97 = ((v8 * v6 * v9) >> 2) + 540;
  sub_1D5282F74((int *)&v98, (int *)&v97);
  (*(void (**)(uint64_t, unsigned int *, _QWORD))(*(_QWORD *)v10 + 40))(v10, &v98, 0);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 152))(v1);
  v97 = 540;
  v98 = v12;
  sub_1D52B3BEC(&v98, (int *)&v97);
  v97 = sub_1D52ADF28((unsigned int *)(v1 + 40));
  sub_1D52B0860(&v98, &v97);
  v97 = (v8 * v6 * v9) >> 2;
  sub_1D52B4588(&v98, &v97);
  v94 = v9;
  v13 = (unsigned __int8 *)(v7 + 2 * (v8 * v6) - v98 + 896);
  (*(void (**)(_QWORD, unsigned __int8 *))(**(_QWORD **)(v1 + 24) + 32))(*(_QWORD *)(v1 + 24), v13);
  v93 = v6;
  v95 = v8;
  if ((v8 * v6) >= 0x40)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = (_DWORD)v13 + v98;
    v18 = (int)v11;
    v19 = 32;
    v20 = 0uLL;
    v96 = (_DWORD)v13 + v98;
    do
    {
      if ((int)(v17 - (_DWORD)v13 + ((39 - v19) >> 3)) < 0
        || v17 - v13 + ((39 - v19) >> 3) > (unint64_t)(2 * v18))
      {
        v91 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v91, "RawCameraException");
        __cxa_throw(v91, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v21 = v18 <= 64;
      v18 -= 64;
      if (v21 && (int)(v17 - (_DWORD)v13) >= 1 && ((v17 - (_DWORD)v13) & 0xFFFFFE00) == 0)
      {
        v22 = v17 - v13;
        v23 = v13;
        v24 = v15;
        memmove(v103, v23, v22);
        v20 = 0uLL;
        v17 = v96;
        v15 = v24;
        v13 = (unsigned __int8 *)v103;
      }
      *(_OWORD *)(v7 + 96) = v20;
      *(_OWORD *)(v7 + 112) = v20;
      *(_OWORD *)(v7 + 64) = v20;
      *(_OWORD *)(v7 + 80) = v20;
      *(_OWORD *)(v7 + 32) = v20;
      *(_OWORD *)(v7 + 48) = v20;
      *(_OWORD *)v7 = v20;
      *(_OWORD *)(v7 + 16) = v20;
      if (v19 >= 16)
      {
        v25 = *v13;
        if (v25 == 255)
          v26 = 3;
        else
          v26 = 2;
        if (v25 == 255)
          v27 = 2;
        else
          v27 = 1;
        v28 = v13[v27];
        v29 = &v13[v26];
        v30 = (v16 << 16) | (v25 << 8);
        if (v28 == 255)
          v13 = v29 + 1;
        else
          v13 = v29;
        v16 = v30 | v28;
        v19 -= 16;
      }
      v31 = v16 << v19;
      v32 = (unsigned __int16)v102[(v16 << v19) >> 23];
      v19 += (v32 >> 10) & 0x1F;
      if (v32 > 0x8000)
      {
        v40 = (char)v32;
      }
      else
      {
        if ((v32 & 0x8000) != 0)
        {
          v32 = (unsigned __int16)v102[HIWORD(v31) & 0x3FF];
          v19 += (v32 >> 10) & 0x1F;
        }
        v33 = v32 & 0xF;
        if (v33)
        {
          if (v19 >= 16)
          {
            v34 = *v13;
            if (v34 == 255)
              v35 = 3;
            else
              v35 = 2;
            if (v34 == 255)
              v36 = 2;
            else
              v36 = 1;
            v37 = v13[v36];
            v38 = &v13[v35];
            v39 = (v16 << 16) | (v34 << 8);
            if (v37 == 255)
              v13 = v38 + 1;
            else
              v13 = v38;
            v16 = v39 | v37;
            v19 -= 16;
          }
          v40 = ((v16 << v19) >> -(char)v33) - ((((v16 << v19) >> 31) - 1) >> -(char)v33);
          v19 += v33;
        }
        else
        {
          v40 = 0;
        }
      }
      v41 = 0;
      v15 += v40;
      LOWORD(v40) = v15;
      while (1)
      {
        if (v19 >= 16)
        {
          v42 = *v13;
          if (v42 == 255)
            v43 = 3;
          else
            v43 = 2;
          if (v42 == 255)
            v44 = 2;
          else
            v44 = 1;
          v45 = v13[v44];
          v46 = &v13[v43];
          v47 = (v16 << 16) | (v42 << 8);
          if (v45 == 255)
            v13 = v46 + 1;
          else
            v13 = v46;
          v16 = v47 | v45;
          v19 -= 16;
        }
        if (v41 > 62)
          break;
        v48 = (unsigned __int16)v101[(v16 << v19) >> 23];
        v49 = (unsigned __int16)v101[((v16 << v19) >> 16) & 0x3FF];
        *(_WORD *)(v7 + 2 * v41) = v40;
        v19 += (v48 >> 10) & 0x1F;
        if (v48 > 0x8000)
        {
          v52 = (v48 >> 8) & 3;
          LOWORD(v40) = (char)v48;
        }
        else
        {
          v50 = (v49 >> 10) & 0x1F;
          if (v48 != 0x8000)
            v50 = 0;
          v19 += v50;
          if (v48 == 0x8000)
            v51 = v49;
          else
            v51 = v48;
          v52 = (v51 >> 4) & 0x3F;
          v53 = v51 & 0xF;
          if ((v51 & 0xF) != 0)
          {
            if (v19 >= 16)
            {
              v54 = *v13;
              if (v54 == 255)
                v55 = 3;
              else
                v55 = 2;
              if (v54 == 255)
                v56 = 2;
              else
                v56 = 1;
              v57 = v13[v56];
              v58 = &v13[v55];
              v59 = (v16 << 16) | (v54 << 8);
              if (v57 == 255)
                v13 = v58 + 1;
              else
                v13 = v58;
              v16 = v59 | v57;
              v19 -= 16;
            }
            v40 = ((v16 << v19) >> -(char)v53) - ((((v16 << v19) >> 31) - 1) >> -(char)v53);
            v19 += v53;
          }
          else
          {
            LOWORD(v40) = 0;
          }
        }
        v41 += 1 + v52;
      }
      if (v41 == 63)
        *(_WORD *)(v7 + 126) = v40;
      v7 += 128;
      ++v14;
    }
    while (v14 != v11 >> 6);
  }
  v60 = (int16x4_t *)sub_1D530B618(v1);
  if (v94)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v1 + 24) + 40))(*(_QWORD *)(v1 + 24), v1 + 40, 0);
    if (v95)
    {
      for (i = 0; i != v95; ++i)
      {
        (*(void (**)(_QWORD, uint8_t *, unint64_t))(**(_QWORD **)(v1 + 24) + 32))(*(_QWORD *)(v1 + 24), buf, v93 >> 2);
        v63.i64[0] = 0x200000002;
        v63.i64[1] = 0x200000002;
        v64.i64[0] = 0x300000003;
        v64.i64[1] = 0x300000003;
        v65.i64[0] = 0x200000002000000;
        v65.i64[1] = 0x200000002000000;
        if (*(_BYTE *)(v1 + 193))
        {
          if ((_DWORD)v93)
          {
            v66 = buf;
            v67 = 512;
            v68 = ((v93 - 1) >> 2) + 1;
            v69 = 512;
            do
            {
              v70 = *v66++;
              v71 = v69 + v60->u16[0];
              v72 = v67 + v60->u16[1];
              v73 = (4 * v72) | (v70 >> 2) & 3;
              v69 = v71 + v60->u16[2];
              v67 = v72 + v60->u16[3];
              v60->i16[0] = v70 & 3 | (4 * v71);
              v60->i16[1] = v73;
              v60->i16[2] = (4 * v69) | (v70 >> 4) & 3;
              v60->i16[3] = (v70 >> 6) | (4 * v67);
              ++v60;
              --v68;
            }
            while (v68);
          }
        }
        else if ((_DWORD)v93)
        {
          v74 = (int32x2_t)0x20000000200;
          v75 = buf;
          v76 = ((v93 - 1) >> 2) + 1;
          do
          {
            v77 = *v75++;
            v78.i32[0] = v60->u16[0];
            v78.i32[1] = v60->u16[1];
            v79.i32[0] = v60->u16[2];
            v79.i32[1] = v60->u16[3];
            *(int32x2_t *)v80.i8 = vadd_s32(v74, v78);
            v74 = vadd_s32(*(int32x2_t *)v80.i8, v79);
            v80.u64[1] = (unint64_t)v74;
            v62.i32[0] = v77;
            v62.i32[1] = v77 >> 2;
            v62.i32[2] = v77 >> 4;
            v81 = vandq_s8(v62, v64);
            v81.i32[3] = vshrq_n_u32((uint32x4_t)vdupq_n_s32(v77), 6uLL).i32[3];
            v82 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(v80, 2uLL), v81);
            v62 = (int8x16_t)vaddq_s32(v82, v63);
            *v60++ = vmovn_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(v65, vshlq_n_s32(v82, 0x10uLL)), v62, (int8x16_t)v82));
            --v76;
          }
          while (v76);
        }
      }
    }
  }
  else if (v95)
  {
    for (j = 0; j != v95; ++j)
    {
      if ((_DWORD)v93)
      {
        v84 = 0;
        v85 = 512;
        v86 = 512;
        do
        {
          v87 = v60->u16[2];
          v88 = v60->u16[3];
          v89 = v86 + v60->u16[0];
          v90 = v85 + v60->u16[1];
          v86 = v89 + v87;
          v85 = v90 + v88;
          v60->i16[0] = v89;
          v60->i16[1] = v90;
          v60->i16[2] = v89 + v87;
          v60->i16[3] = v90 + v88;
          ++v60;
          v84 += 4;
        }
        while (v84 < v93);
      }
    }
  }
  v4[2](v4);

}

void sub_1D5351748(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D53517DC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CCanonCompressedUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

uint64_t sub_1D5351860(uint64_t result, unsigned int a2)
{
  if (a2 <= 2)
    *(_DWORD *)(result + 188) = a2;
  return result;
}

uint64_t sub_1D5351870(uint64_t result, char a2)
{
  *(_BYTE *)(result + 193) = a2;
  return result;
}

void sub_1D5351878(_QWORD *a1)
{
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D535189C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  return sub_1D5351BC8(a1, a2, a3);
}

double sub_1D53518C4(uint64_t a1, unsigned int a2, double a3)
{
  if (*(_BYTE *)(a1 + 32))
    return sub_1D53518D4(a1, a2, a3);
  else
    return sub_1D5351A68(a1, a2, a3);
}

double sub_1D53518D4(uint64_t a1, unsigned int a2, double a3)
{
  double v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  double v7;
  uint64_t v8;
  double v9;
  unsigned int v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  unsigned int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  BOOL v21;
  BOOL v22;
  void *exception;

  v3 = fmin(a3, 30.0);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_DWORD *)v4;
  if (!*(_DWORD *)v4)
  {
    v7 = -1.0;
LABEL_17:
    v16 = v7;
    goto LABEL_25;
  }
  v6 = 0;
  v7 = -1.0;
  while (1)
  {
    v8 = 0;
    v9 = v7;
    v10 = v6;
    v6 = v5;
    v11 = *(double *)(v4 + 8);
    v12 = v4 + 24;
    if (v11 <= v3)
      v13 = 64;
    else
      v13 = 16;
    if (v11 <= v3)
      v12 = v4 + 72;
    v7 = 0.0;
    v14 = 1.0;
    do
    {
      v7 = v7 + v14 * *(double *)(v12 + v8);
      v14 = v3 * *(double *)(v4 + v13) * v14;
      v8 += 8;
    }
    while (v8 != 40);
    if (v7 < 0.0)
      v7 = 0.0;
    if (v6 == a2)
      break;
    if (v6 > a2)
    {
      if (v9 >= 0.0)
      {
        if (v6 - v10 <= 1
          || ((v17 = ((double)a2 - (double)v10) * (v7 - v9) / (double)(v6 - v10),
               v18 = fmin(v7, v9),
               v19 = fmax(v7, v9),
               v20 = v9 + v17,
               v18 <= v20)
            ? (v21 = v20 > v19)
            : (v21 = 1),
              v7 = v20,
              v21))
        {
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](exception, "RawCameraException");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
      }
      break;
    }
    v15 = *(_DWORD *)(v4 + 112);
    v4 += 112;
    v5 = v15;
    if (!v15)
      goto LABEL_17;
  }
  v16 = v7;
  v22 = v7 < 0.0;
  v7 = v9;
  if (v22)
    goto LABEL_17;
LABEL_25:
  if (v3 < a3)
    return a3 / v3 * v16;
  return v16;
}

void sub_1D5351A50(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1D5351A68(uint64_t a1, int a2, double a3)
{
  double v3;
  _DWORD *v4;
  int v5;
  double v6;
  double *v7;
  uint64_t v8;
  double *v9;
  double *v10;
  double v11;

  v3 = fmin(a3, 30.0);
  v4 = *(_DWORD **)(a1 + 24);
  v5 = *v4;
  v6 = -1.0;
  if (*v4)
  {
    v7 = (double *)(v4 + 16);
    while (v5 != a2)
    {
      v5 = *((_DWORD *)v7 + 12);
      v7 += 14;
      if (!v5)
        goto LABEL_13;
    }
    v8 = 0;
    v9 = v7 - 6;
    if (*(v7 - 7) > v3)
    {
      v10 = v7 - 5;
    }
    else
    {
      v9 = v7;
      v10 = v7 + 1;
    }
    v6 = 0.0;
    v11 = 1.0;
    do
    {
      v6 = v6 + v11 * v10[v8];
      v11 = v3 * *v9 * v11;
      ++v8;
    }
    while (v8 != 5);
    if (v6 < 0.0)
      v6 = 0.0;
  }
LABEL_13:
  if (v3 < a3)
    return a3 / v3 * v6;
  return v6;
}

_QWORD *sub_1D5351B0C@<X0>(double (***a1)(_QWORD)@<X0>, _QWORD *a2@<X8>)
{
  double v4;

  v4 = (**a1)(a1);
  return sub_1D528F9B4(a2, 4uLL, &v4);
}

_QWORD *sub_1D5351B50(_QWORD *a1)
{
  *a1 = off_1E9986FB8;
  sub_1D5282EB4((uint64_t)(a1 + 1));
  return a1;
}

void sub_1D5351B84(_QWORD *a1)
{
  *a1 = off_1E9986FB8;
  sub_1D5282EB4((uint64_t)(a1 + 1));
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D5351BC8@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x40uLL);
  result[2] = 0;
  *result = &unk_1E9986EF0;
  result[1] = 0;
  v7 = a2[1];
  result[4] = *a2;
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  result[3] = off_1E9986EA8;
  result[6] = *a1;
  *((_BYTE *)result + 56) = 1;
  *a3 = result + 3;
  a3[1] = result;
  return result;
}

void sub_1D5351C54(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9986EF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5351C68(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9986EF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5351C9C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_1D5351F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1D5352CBC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D5352CC8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1D5281424(a1);
  _Unwind_Resume(a1);
}

void sub_1D5352CE4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB19C();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "RAWSimpleLensCorrectionFilter", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

uint64_t sub_1D5352D68(double a1, double a2, double a3, double a4, double a5, double a6, uint64_t a7, const char *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double v11;

  v11 = (a4 - a1) * ((a4 - a1) * (a4 - a1));
  return objc_msgSend_vectorWithX_Y_Z_W_(MEMORY[0x1E0C9DDF8], a8, a9, a10, a11, ((a5 - a2) * -2.0 + (a3 + a6) * (a4 - a1)) / v11, ((a3 - a6) * a1 * a4 + (a3 + a6 + a6) * a1 * a1 + -((a3 + a3 + a6) * a4) * a4 + (a1 + a4) * 3.0 * (a5 - a2))/ v11, (-(a1 * a6 * a1) * a1+ (a6 + a6 + a3) * a1 * a4 * a4+ -((a3 + a6 + a3) * a1) * a1 * a4+ a3 * a4 * a4 * a4+ a1 * -6.0 * a4 * (a5 - a2))/ v11, ((a4 - a1) * (-((a1 * a6 + a3 * a4) * a1) * a4)+ a1 * 3.0 * a4 * (a1 * a5 - a4 * a2)+ -(a1 * a1) * a1 * a5+ a4 * a4 * a4 * a2)/ v11);
}

float sub_1D5352E70(void **a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, float a6)
{
  double v8;
  float v9;
  double v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  double v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  double v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  double v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  double v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  double v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  double v122;
  BOOL v123;
  double v124;
  float v125;
  double v127;

  objc_msgSend_W(a1[4], a2, a3, a4, a5);
  v9 = v8;
  v10 = (float)((float)(a6 * a6) * a6);
  objc_msgSend_X(a1[5], v11, v12, v13, v14);
  v16 = v15;
  v17 = (float)(a6 * a6);
  objc_msgSend_Y(a1[5], v18, v19, v20, v21);
  v23 = v22 * v17 + v10 * v16;
  v24 = a6;
  objc_msgSend_Z(a1[5], v25, v26, v27, v28);
  v30 = v23 + a6 * v29;
  objc_msgSend_W(a1[5], v31, v32, v33, v34);
  v127 = v30 + v35;
  objc_msgSend_X(a1[6], v36, v37, v38, v39);
  v41 = v40;
  objc_msgSend_Y(a1[6], v42, v43, v44, v45);
  v47 = v46 * v17 + v10 * v41;
  objc_msgSend_Z(a1[6], v48, v49, v50, v51);
  v53 = v47 + a6 * v52;
  objc_msgSend_W(a1[6], v54, v55, v56, v57);
  v59 = v53 + v58;
  objc_msgSend_X(a1[7], v60, v61, v62, v63);
  v65 = v64;
  objc_msgSend_Y(a1[7], v66, v67, v68, v69);
  v71 = v70 * v17 + v10 * v65;
  objc_msgSend_Z(a1[7], v72, v73, v74, v75);
  v77 = v71 + a6 * v76;
  objc_msgSend_W(a1[7], v78, v79, v80, v81);
  v83 = v77 + v82;
  objc_msgSend_X(a1[8], v84, v85, v86, v87);
  v89 = v88;
  objc_msgSend_Y(a1[8], v90, v91, v92, v93);
  v95 = v94 * v17 + v10 * v89;
  objc_msgSend_Z(a1[8], v96, v97, v98, v99);
  v101 = v95 + a6 * v100;
  objc_msgSend_W(a1[8], v102, v103, v104, v105);
  v107 = v101 + v106;
  objc_msgSend_Z(a1[9], v108, v109, v110, v111);
  if (a6 - v116 < 0.0)
    v107 = v83;
  objc_msgSend_Y(a1[9], v112, v113, v114, v115);
  if (v24 - v121 < 0.0)
    v107 = v59;
  objc_msgSend_X(a1[9], v117, v118, v119, v120);
  v123 = v24 - v122 < 0.0;
  v124 = v127;
  if (!v123)
    v124 = v107;
  v125 = v124;
  return (float)(v9 * v125) + (float)(a6 * (float)(1.0 - v9));
}

double sub_1D5353000(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  double v10;
  double v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  float v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  double v29;
  double v30;
  double v31;
  double v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  objc_msgSend_X(*(void **)(a1 + 32), a2, a3, a4, a5);
  v11 = a6 - v10;
  objc_msgSend_Y(*(void **)(a1 + 32), v12, v13, v14, v15);
  v17 = hypot(v11, a7 - v16);
  objc_msgSend_Z(*(void **)(a1 + 32), v18, v19, v20, v21);
  v23 = v17 * v22;
  (*(void (**)(float))(*(_QWORD *)(a1 + 40) + 16))(v23);
  v29 = 1.0;
  if (v23 >= 0.001)
    v29 = (float)(v28 / v23);
  v30 = v11 * v29;
  objc_msgSend_X(*(void **)(a1 + 32), v24, v25, v26, v27);
  v32 = v30 + v31;
  objc_msgSend_Y(*(void **)(a1 + 32), v33, v34, v35, v36);
  return v32;
}

double sub_1D53530C0(uint64_t a1, int a2, double a3, double a4, double a5, double a6)
{
  double v6;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  float v11;
  double v12;
  CGFloat v13;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat r1;
  float r1_12;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;

  if (a2 > 0)
    return a3;
  v6 = *MEMORY[0x1E0C9D628];
  v8 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v10 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v9 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v11 = 0.0;
  v12 = 0.0;
  do
  {
    r1_12 = v11;
    v43.origin.x = (*(double (**)(double, double))(*(_QWORD *)(a1 + 32) + 16))(a3 + a5 * v12, a4);
    v43.origin.y = v13;
    v43.size.width = 0.0;
    v43.size.height = 0.0;
    v35.origin.x = v6;
    v35.origin.y = v8;
    v35.size.width = v10;
    v35.size.height = v9;
    v36 = CGRectUnion(v35, v43);
    x = v36.origin.x;
    y = v36.origin.y;
    width = v36.size.width;
    height = v36.size.height;
    v44.origin.x = (*(double (**)(double, double))(*(_QWORD *)(a1 + 32) + 16))(a3 + a5 * (1.0 - v12), a4 + a6);
    v44.origin.y = v18;
    v44.size.width = 0.0;
    v44.size.height = 0.0;
    v37.origin.x = x;
    v37.origin.y = y;
    v37.size.width = width;
    v37.size.height = height;
    v38 = CGRectUnion(v37, v44);
    r1 = v38.origin.x;
    v19 = v38.origin.y;
    v20 = v38.size.width;
    v21 = v38.size.height;
    v45.origin.x = (*(double (**)(double, double))(*(_QWORD *)(a1 + 32) + 16))(a3, a4 + a6 * (1.0 - v12));
    v45.origin.y = v22;
    v45.size.width = 0.0;
    v45.size.height = 0.0;
    v39.origin.x = r1;
    v39.origin.y = v19;
    v39.size.width = v20;
    v39.size.height = v21;
    v40 = CGRectUnion(v39, v45);
    v23 = v40.origin.x;
    v24 = v40.origin.y;
    v25 = v40.size.width;
    v26 = v40.size.height;
    v46.origin.x = (*(double (**)(double, double))(*(_QWORD *)(a1 + 32) + 16))(a3 + a5, a4 + a6 * v12);
    v46.origin.y = v27;
    v46.size.width = 0.0;
    v46.size.height = 0.0;
    v41.origin.x = v23;
    v41.origin.y = v24;
    v41.size.width = v25;
    v41.size.height = v26;
    v42 = CGRectUnion(v41, v46);
    v6 = v42.origin.x;
    v8 = v42.origin.y;
    v10 = v42.size.width;
    v9 = v42.size.height;
    v11 = r1_12 + 0.125;
    v12 = (float)(r1_12 + 0.125);
  }
  while (v12 < 0.99999);
  return v6;
}

_QWORD *sub_1D5353384@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x30uLL);
  v2[2] = 0;
  *v2 = &unk_1E9986FF8;
  v2[1] = 0;
  v2[4] = 0;
  v2[5] = 0;
  a1[1] = v2;
  v2[3] = off_1E9986FB8;
  result = v2 + 3;
  *a1 = result;
  return result;
}

void sub_1D53533D4()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1D8271938](exception, "RawCameraException");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
}

void sub_1D5353410(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D5353424()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1D8271938](exception, "RawCameraException");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
}

void sub_1D5353460(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5353474(_QWORD *a1)
{
  *a1 = off_1E9986FB8;
  sub_1D5282EB4((uint64_t)(a1 + 1));
  return a1;
}

void sub_1D53534A4(_QWORD *a1)
{
  *a1 = off_1E9986FB8;
  sub_1D5282EB4((uint64_t)(a1 + 1));
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D53534E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9986FF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D53534F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9986FF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D535352C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

_QWORD *sub_1D535353C(uint64_t a1, uint64_t *a2)
{
  return sub_1D52908C8((_QWORD *)(a1 + 224), a2);
}

void sub_1D5353544(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  char *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned __int8 *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  int64_t v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  size_t v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *exception;
  void *v69;
  void (**v70)(_QWORD);
  uint64_t v71;
  int v72;
  unsigned __int16 *__dst;
  uint64_t v74;
  size_t v75;
  unint64_t v76;
  __int128 v77;
  _QWORD v78[5];
  uint64_t v79;
  uint64_t v80;
  int buf[1024];
  uint64_t v82;

  v1 = MEMORY[0x1E0C80A78](a1);
  v82 = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    LOWORD(buf[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CHasselbladUnpacker", (const char *)&unk_1D548AF1A, (uint8_t *)buf, 2u);
  }

  v78[0] = MEMORY[0x1E0C809B0];
  v78[1] = 3221225472;
  v78[2] = sub_1D5353EB4;
  v78[3] = &unk_1E996F870;
  v78[4] = v1;
  v4 = MEMORY[0x1D82721B4](v78);
  v5 = (char *)sub_1D530B618(v1);
  v6 = *(_DWORD *)(v1 + 44);
  v7 = *(_DWORD *)(v1 + 48);
  LODWORD(v79) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 152))(v1);
  sub_1D5282F74(buf, (int *)&v79);
  v8 = buf[0];
  v9 = v7 * v6;
  v10 = (unsigned __int16 *)&v5[2 * v7 * v6 - buf[0] + 896];
  if (v10 >= (unsigned __int16 *)v5)
  {
    v11 = 0;
  }
  else
  {
    v10 = (unsigned __int16 *)operator new[]();
    bzero(v10, v8 + 128);
    v11 = v10;
  }
  (*(void (**)(_QWORD, unsigned __int16 *, uint64_t))(**(_QWORD **)(v1 + 24) + 32))(*(_QWORD *)(v1 + 24), v10, v8);
  if (bswap32(*v10) >> 16 != 65496)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  DWORD2(v77) = v9;
  v75 = v1;
  *(_QWORD *)&v77 = v11;
  v70 = (void (**)(_QWORD))v4;
  v12 = 0;
  v13 = 0;
  v14 = (unsigned __int16 *)((char *)v10 + v8);
  v15 = v10 + 1;
  v79 = 0;
  v80 = 0;
  do
  {
    v16 = __rev16(*v15);
    if (v16 == 0xFFFF)
    {
      v15 = (unsigned __int16 *)((char *)v15 + 1);
      continue;
    }
    if (v16 < 0xFF01)
      goto LABEL_121;
    v17 = __rev16(v15[1]);
    if (v17 >= 0x102)
      goto LABEL_121;
    v18 = v14;
    v19 = (unsigned __int8 *)(v15 + 2);
    v20 = (unint64_t)v15 + v17 + 2;
    if (v16 == 65475)
    {
      v12 = __rev16(*(unsigned __int16 *)((char *)v15 + 5));
      v13 = __rev16(*(unsigned __int16 *)((char *)v15 + 7)) * *((unsigned __int8 *)v15 + 9);
      v15 = (unsigned __int16 *)((char *)v15 + v17 + 2);
LABEL_24:
      v14 = v18;
      continue;
    }
    v21 = v12;
    if (v16 != 65498)
    {
      if (v16 == 65476)
      {
        while ((unint64_t)v19 < v20)
        {
          v22 = *v19;
          if (v22 > 1)
            break;
          v23 = (uint8_t *)&buf[512 * v22];
          *(&v79 + v22) = (uint64_t)v23;
          v19 = sub_1D53126BC(v19 + 1, (uint64_t)v23, 3);
          if (!v19)
          {
            v64 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](v64, "RawCameraException");
            __cxa_throw(v64, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
        }
      }
      v15 = (unsigned __int16 *)v20;
      v12 = v21;
      goto LABEL_24;
    }
    if (*v19 - 1 > 2 || (v24 = 2 * *v19, (_DWORD)v17 != (_DWORD)v24 + 6))
    {
      v67 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v67, "RawCameraException");
      __cxa_throw(v67, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v25 = v19[v24 | 1];
    v15 = (unsigned __int16 *)v20;
    v14 = v18;
    if (v25 != 8)
    {
      sub_1D530F228(v75);
      goto LABEL_117;
    }
  }
  while (v16 != 65498);
  if (v13 * v12 > DWORD2(v77))
  {
LABEL_121:
    v66 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v66, "RawCameraException");
    __cxa_throw(v66, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v80)
    v26 = v80;
  else
    v26 = v79;
  if (v79)
    v27 = v79;
  else
    v27 = v80;
  if (!v27 || !v26)
  {
    v69 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v69, "RawCameraException");
    __cxa_throw(v69, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if ((_DWORD)v12)
  {
    v28 = 0;
    v29 = 0;
    *((_QWORD *)&v77 + 1) = 0;
    v30 = 0;
    v31 = 8 * v13;
    v32 = v13;
    v33 = v12;
    v34 = 32;
    v72 = v12;
    v71 = v12;
    while (1)
    {
      v35 = (char *)v14 - (char *)v15;
      v36 = (char *)v14 - (char *)v15 + ((39 - v34) >> 3);
      if (8 * v36 < 2 * (unint64_t)(((_DWORD)v12 - (_DWORD)v28) * v13))
      {
        v65 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v65, "RawCameraException");
        __cxa_throw(v65, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      if (v77 != 0 || (char *)v15 - v5 >= v32 && v36 >= v31)
      {
        if (v13)
          break;
        goto LABEL_101;
      }
      if (v14 == v15)
      {
        v15 = v14;
        if (v13)
          break;
        goto LABEL_101;
      }
      v74 = v28;
      v76 = (v31 * (unint64_t)(v12 - v28)) | 4;
      __dst = (unsigned __int16 *)operator new[]();
      bzero(__dst, v76);
      if (*((_QWORD *)&v77 + 1))
        MEMORY[0x1D8271AC4](*((_QWORD *)&v77 + 1), 0x1000C8077774924);
      v63 = v76 >= v35 + 4 ? v35 + 4 : v76;
      memmove(__dst, v15 - 2, v63);
      v15 = __dst + 2;
      v28 = v74;
      v14 = (unsigned __int16 *)((char *)__dst + v76 + 4);
      *((_QWORD *)&v77 + 1) = __dst;
      LODWORD(v12) = v72;
      v32 = v13;
      v31 = 8 * v13;
      v33 = v71;
      if (v13)
        break;
LABEL_101:
      if (++v28 == v33)
      {
        if (*((_QWORD *)&v77 + 1))
          MEMORY[0x1D8271AC4](*((_QWORD *)&v77 + 1), 0x1000C8077774924);
        goto LABEL_117;
      }
    }
    v37 = 0;
    v38 = 0x8000;
    v39 = 0x8000;
    while (2)
    {
      if (v34 >= 16)
      {
        if ((v29 & 3) != 0)
          v40 = -1;
        else
          v40 = 3;
        v41 = (v30 << 16) | (*((unsigned __int8 *)v15 + v40) << 8);
        if ((v29 & 3) != 0)
          v42 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v42 = 1;
        v30 = v41 | LOBYTE(v15[v42]);
        v29 += 2;
        ++v15;
        v34 -= 16;
      }
      v43 = *(unsigned __int16 *)(v27 + 2 * ((v30 << v34) >> 23));
      v44 = (v43 >> 10) & 0x1F;
      if (v43 > 0x8000)
      {
        v47 = (char)v43;
        if ((v43 & 0x80u) == 0)
          LOBYTE(v48) = *(_WORD *)(v27 + 2 * ((v30 << v34) >> 23));
        else
          v48 = -(char)v43;
        v46 = dword_1D544C728[v48 & 0x7F];
        v45 = v44 + v34 - v46;
      }
      else
      {
        v45 = v44 + v34;
        if ((v43 & 0x8000) != 0)
        {
          v43 = *(unsigned __int16 *)(v27 + 2 * (((v30 << v34) >> 16) & 0x3FF));
          v45 += (v43 >> 10) & 0x1F;
        }
        v46 = v43 & 0x1F;
        v47 = (v43 << 8) & 0x8000;
      }
      v49 = v45 - 16;
      if (v45 >= 16)
      {
        if ((v29 & 3) != 0)
          v50 = -1;
        else
          v50 = 3;
        v51 = (v30 << 16) | (*((unsigned __int8 *)v15 + v50) << 8);
        if ((v29 & 3) != 0)
          v52 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v52 = 1;
        v30 = v51 | LOBYTE(v15[v52]);
        v29 += 2;
        ++v15;
        v45 = v49;
      }
      v53 = *(unsigned __int16 *)(v26 + 2 * ((v30 << v45) >> 23));
      v54 = (v53 >> 10) & 0x1F;
      if (v53 > 0x8000)
      {
        v53 = (char)v53;
        if ((v53 & 0x80u) == 0)
          LOBYTE(v56) = *(_WORD *)(v26 + 2 * ((v30 << v45) >> 23));
        else
          v56 = -v53;
        v55 = dword_1D544C728[v56 & 0x7F];
        v34 = v54 + v45 - v55;
        if (!v46)
          goto LABEL_87;
      }
      else
      {
        v34 = v54 + v45;
        if ((v53 & 0x8000) != 0)
        {
          v53 = *(unsigned __int16 *)(v26 + 2 * (((v30 << v45) >> 16) & 0x3FF));
          v34 += (v53 >> 10) & 0x1F;
        }
        v55 = v53 & 0x1F;
        v53 = (v53 << 8) & 0x8000;
        if (!v46)
        {
LABEL_87:
          v39 += v47;
          *(_WORD *)v5 = v39;
          if (v55)
          {
            if (v34 >= 16)
            {
              if ((v29 & 3) != 0)
                v60 = -1;
              else
                v60 = 3;
              v61 = (v30 << 16) | (*((unsigned __int8 *)v15 + v60) << 8);
              if ((v29 & 3) != 0)
                v62 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v62 = 1;
              v30 = v61 | LOBYTE(v15[v62]);
              v29 += 2;
              ++v15;
              v34 -= 16;
            }
            if (v55 <= 15)
              v53 = ((v30 << v34) >> -(char)v55)
                  - ((((v30 << v34) >> 31) - 1) >> -(char)v55);
            else
              v53 = 0x8000;
            v34 += v55;
          }
          v38 += v53;
          *((_WORD *)v5 + 1) = v38;
          v5 += 4;
          v37 += 2;
          if (v37 >= v13)
            goto LABEL_101;
          continue;
        }
      }
      break;
    }
    if (v34 >= 16)
    {
      if ((v29 & 3) != 0)
        v57 = -1;
      else
        v57 = 3;
      v58 = (v30 << 16) | (*((unsigned __int8 *)v15 + v57) << 8);
      if ((v29 & 3) != 0)
        v59 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v59 = 1;
      v30 = v58 | LOBYTE(v15[v59]);
      v29 += 2;
      ++v15;
      v34 -= 16;
    }
    v47 = ((v30 << v34) >> -(char)v46) - ((((v30 << v34) >> 31) - 1) >> -(char)v46);
    if (v46 > 15)
      v47 = 0x8000;
    v34 += v46;
    goto LABEL_87;
  }
LABEL_117:
  if ((_QWORD)v77)
    MEMORY[0x1D8271AC4](v77, 0x1000C8077774924);
  v70[2](v70);

}

void sub_1D5353DB4(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD);

  v1[2](v1);

  _Unwind_Resume(a1);
}

void sub_1D5353EB4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CHasselbladUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D5353F3C(_QWORD *a1)
{
  sub_1D5353F60(a1);
  JUMPOUT(0x1D8271ADCLL);
}

_QWORD *sub_1D5353F60(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E9987048;
  sub_1D5282EB4((uint64_t)(a1 + 28));
  *a1 = &off_1E99781A0;
  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  return sub_1D5282F0C(a1);
}

void sub_1D5353FB0(_QWORD *a1)
{
  _BYTE *v2;
  __int128 *p_lpsrc;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  __int128 lpsrc;
  _BYTE *v36;
  std::__shared_weak_count *v37;

  sub_1D5299C2C((uint64_t)a1);
  if (a1[3])
    return;
  (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 160))(&lpsrc, a1);
  if ((_QWORD)lpsrc
    && (v2 = __dynamic_cast((const void *)lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9977A48, 0)) != 0)
  {
    v36 = v2;
    v37 = (std::__shared_weak_count *)*((_QWORD *)&lpsrc + 1);
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = (__int128 *)&v36;
  }
  *(_QWORD *)p_lpsrc = 0;
  *((_QWORD *)p_lpsrc + 1) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)&lpsrc + 1);
  if (*((_QWORD *)&lpsrc + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v36)
  {
    if (v36[1216])
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 160))(&v31, a1);
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v31 + 384))(&v33);
      v30 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
      v29 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
      *(_QWORD *)&v28 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
      *((_QWORD *)&v28 + 1) = v7;
      sub_1D5354C30(&v33, (unint64_t *)&v30, &v29, &v28, &lpsrc);
      sub_1D5292548((uint64_t)(a1 + 3), &lpsrc);
      v8 = (std::__shared_weak_count *)*((_QWORD *)&lpsrc + 1);
      if (*((_QWORD *)&lpsrc + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v11 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = v32;
      if (!v32)
        goto LABEL_43;
      v15 = (unint64_t *)&v32->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 160))(&v31, a1);
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v31 + 384))(&v33);
      v30 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
      v29 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
      *(_QWORD *)&v28 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
      *((_QWORD *)&v28 + 1) = v17;
      sub_1D534BC28(&v33, (unint64_t *)&v30, &v29, &v28, &lpsrc);
      sub_1D5292548((uint64_t)(a1 + 3), &lpsrc);
      v18 = (std::__shared_weak_count *)*((_QWORD *)&lpsrc + 1);
      if (*((_QWORD *)&lpsrc + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&lpsrc + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = v34;
      if (v34)
      {
        v22 = (unint64_t *)&v34->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v14 = v32;
      if (!v32)
        goto LABEL_43;
      v24 = (unint64_t *)&v32->__shared_owners_;
      do
        v16 = __ldaxr(v24);
      while (__stlxr(v16 - 1, v24));
    }
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
LABEL_43:
  v25 = v37;
  if (v37)
  {
    v26 = (unint64_t *)&v37->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1D5354310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_1D5282EB4((uint64_t)va1);
  sub_1D5282EB4((uint64_t)va);
  sub_1D5282EB4(v6 - 56);
  _Unwind_Resume(a1);
}

void sub_1D5354360(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *__p[2];
  char v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *v9;

  v9 = &unk_1E997C018;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v7);
  v1 = v7;
  sub_1D52850A0(__p, "SourceInfo");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v1 + 600))(v1, __p, &v9, 3);
  if (v6 < 0)
    operator delete(__p[0]);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1D5354420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1D535444C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *__p[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v9);
  v1 = v9;
  sub_1D52850A0(__p, "SourceInfo");
  v2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v1 + 264))(v1, __p);
  if (v8 < 0)
    operator delete(__p[0]);
  v3 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void sub_1D53544F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

double sub_1D5354520(uint64_t a1)
{
  uint64_t v1;
  double v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *__p[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v9);
  v1 = v9;
  sub_1D52850A0(__p, "SourceInfo");
  v2 = (*(double (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v1 + 280))(v1, __p, 1);
  if (v8 < 0)
    operator delete(__p[0]);
  v3 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void sub_1D53545D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1D5354600(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void *v4;
  void **p_lpsrc;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *lpsrc;
  std::__shared_weak_count *v15;
  void *v16;
  std::__shared_weak_count *v17;

  (*(void (**)(void **__return_ptr))(*a1 + 160))(&lpsrc);
  if (lpsrc
    && (v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9977A48, 0)) != 0)
  {
    v16 = v4;
    v17 = v15;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v16;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v6 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (!v16)
    goto LABEL_15;
  (*(void (**)(void *))(*(_QWORD *)v16 + 784))(v16);
  v9 = *a2;
  if ((_BYTE *)a2[1] - (_BYTE *)*a2 != 32)
  {
    if (v9)
    {
      a2[1] = v9;
      operator delete(v9);
    }
LABEL_15:
    v10 = 1;
    goto LABEL_16;
  }
  v10 = 0;
LABEL_16:
  v11 = v17;
  if (!v17)
    goto LABEL_20;
  v12 = (unint64_t *)&v17->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v10)
      return;
  }
  else
  {
LABEL_20:
    if (!v10)
      return;
  }
  sub_1D532F0FC(a1, a2);
}

void sub_1D5354744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D5354758(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p[2];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *v17[2];
  uint64_t v18;
  uint64_t v19;

  v19 = 0;
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v15);
  v3 = v15;
  sub_1D52850A0(__p, "IFD0:SUBIFD0");
  if ((*(unsigned int (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v3 + 248))(v3, __p, v17, 0))
  {
    v5 = v17[0];
    v4 = v17[1];
    if (v14 < 0)
      operator delete(__p[0]);
    v6 = v4 - v5;
    v7 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v6 == 32)
    {
      *(_OWORD *)a2 = *(_OWORD *)v17;
      a2[2] = v18;
      return;
    }
  }
  else
  {
    if (v14 < 0)
      operator delete(__p[0]);
    v10 = v16;
    if (v16)
    {
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  sub_1D528F9B4(a2, 4uLL, &v19);
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
}

void sub_1D53548A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D53548F0(uint64_t a1)
{
  unint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
  return dword_1D544C940[HIDWORD(v1) & 1 | (2 * (v1 & 1))];
}

uint64_t sub_1D5354920(_BYTE *a1)
{
  uint64_t v2;
  void *v3;
  void **p_lpsrc;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *lpsrc;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v2 = sub_1D532F9E4(a1);
  if ((_DWORD)v2)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 2920))(a1);
    (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 160))(&lpsrc, a1);
    if (lpsrc
      && (v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9977A48, 0)) != 0)
    {
      v18 = (uint64_t)v3;
      v19 = v17;
      p_lpsrc = &lpsrc;
    }
    else
    {
      p_lpsrc = (void **)&v18;
    }
    *p_lpsrc = 0;
    p_lpsrc[1] = 0;
    v5 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = v18;
    if (v18)
    {
      (*(void (**)(void **__return_ptr, _BYTE *))(*(_QWORD *)a1 + 384))(&lpsrc, a1);
      sub_1D53088FC(v8, &lpsrc);
      v9 = v17;
      if (v17)
      {
        v10 = (unint64_t *)&v17->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    v12 = v19;
    if (v19)
    {
      v13 = (unint64_t *)&v19->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  return v2;
}

void sub_1D5354A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1D5282EB4((uint64_t)&a9);
  sub_1D5282EB4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

id sub_1D5354AB0(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  double v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *__p[2];
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  double v30;

  v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, (uint64_t)CFSTR("whiteLevelFromTag"), v5, v6))
  {
    v30 = 0.0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v28, a1);
    v7 = v28;
    sub_1D52850A0(__p, "IFD0:SUBIFD0");
    v12 = (*(uint64_t (**)(uint64_t, void **, double *))(*(_QWORD *)v7 + 240))(v7, __p, &v30);
    if (v27 < 0)
      operator delete(__p[0]);
    v13 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (void *)MEMORY[0x1E0CB37E8];
    if (v12)
    {
      objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v8, v9, v10, v11, v30);
    }
    else
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 864))(a1);
      v19 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 848))(a1) * (double)v18;
      objc_msgSend_numberWithDouble_(v16, v20, v21, v22, v23, v19);
    }
    v17 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    sub_1D54210E0(a1, v3);
    v17 = objc_claimAutoreleasedReturnValue();
  }
  v24 = (void *)v17;

  return v24;
}

void sub_1D5354BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  if (a14 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_1D5354C30(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x108uLL);
  sub_1D5354CB0((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D5354C9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5354CB0(uint64_t a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E9987CF8;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D530B330(a1 + 24, a2, *a3, a4, a5);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_WORD *)(a1 + 240) = -1;
  *(_QWORD *)(a1 + 24) = &off_1E9987048;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  return a1;
}

void sub_1D5354D10(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5354D24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9987CF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5354D38(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9987CF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5354D6C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1D5354D7C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  sub_1D5299C2C((uint64_t)a1);
  if (a1[3])
    return;
  (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 160))(&v18, a1);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v18 + 384))(&v19);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v17 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 592))(a1);
  if (v5 == 1)
  {
    v16 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
    *(_QWORD *)&v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
    *((_QWORD *)&v15 + 1) = v10;
    sub_1D53551FC(&v19, (unint64_t *)&v17, &v16, &v15, &v18);
    sub_1D5292548((uint64_t)(a1 + 3), &v18);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v9 = __ldaxr(v11);
      while (__stlxr(v9 - 1, v11));
LABEL_17:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else if (v5 == 7)
  {
    v16 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
    *(_QWORD *)&v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
    *((_QWORD *)&v15 + 1) = v6;
    sub_1D535517C(&v19, (unint64_t *)&v17, &v16, &v15, &v18);
    sub_1D5292548((uint64_t)(a1 + 3), &v18);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      goto LABEL_17;
    }
  }
  v12 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1D5354F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5354FB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *__p[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v9);
  v1 = v9;
  sub_1D52850A0(__p, "CameraObj_ISO_speed");
  v2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v1 + 264))(v1, __p);
  if (v8 < 0)
    operator delete(__p[0]);
  v3 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void sub_1D5355060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1D535508C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *__p[2];
  char v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *v9;
  int v10;

  v10 = 0;
  v9 = &unk_1E997A7E8;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v7);
  v1 = v7;
  sub_1D52850A0(__p, "NeutObj_neutrals");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v1 + 600))(v1, __p, &v9, 3);
  if (v6 < 0)
    operator delete(__p[0]);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1D5355150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1D535517C(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xD8uLL);
  sub_1D52F6088((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D53551E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1D53551FC(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xE0uLL);
  sub_1D52C07F4((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D5355268(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_1D535527C(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  char *v7;
  char *result;

  *(_DWORD *)(a1 + 188) = a2;
  *(_DWORD *)(a1 + 192) = a3;
  v7 = (char *)(a1 + 200);
  if (v7 != (char *)a4)
    sub_1D5282A44(v7, *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  result = (char *)(a1 + 224);
  if (a1 + 224 != a5)
    return sub_1D5282A44(result, *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return result;
}

void *sub_1D53552E0(uint64_t a1, int a2, size_t size)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v8;
  int v9;

  v9 = a2;
  v4 = size;
  v5 = malloc_type_malloc(size, 0x96D180F4uLL);
  v6 = *(_QWORD *)(a1 + 24);
  sub_1D5282F74(&v8, &v9);
  (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v6 + 40))(v6, &v8, 0);
  (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5, v4);
  return v5;
}

void sub_1D5355374(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    free(v1);
  __cxa_end_catch();
  JUMPOUT(0x1D535535CLL);
}

void sub_1D5355398(_QWORD *a1, uint64_t a2, int *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  _WORD *v11;
  float *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  _WORD *v36;
  _WORD *v37;
  _WORD *v38;
  _WORD *v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  unsigned __int16 *v43;
  unsigned __int16 v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  void *v47;
  float v48;
  float v49;
  float v50;
  unsigned int v51;
  float v52;
  unsigned int v53;
  float v54;
  unsigned int v55;
  float v56;
  unsigned int v57;
  float v58;
  float v59;
  unsigned int v60;
  float v61;
  float v62;
  float v63;
  int v64;
  float v65;
  int v66;
  _WORD *v67;
  float v68;
  int v69;
  unsigned __int16 *v70;
  float v71;
  unsigned int v72;
  float v73;
  int v74;
  float v75;
  int v76;
  float v77;
  int v78;
  unsigned __int16 *v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v95;
  float v96;
  float v97;
  float v101;
  float v102;
  float v103;
  float v107;
  float v108;
  float v109;
  void *v113;
  float *v114;
  float v115;
  float v116;
  float v117;
  unsigned int v118;
  float v119;
  unsigned int v120;
  float v121;
  unsigned int v122;
  float v123;
  unsigned int v124;
  float v125;
  float v126;
  unsigned int v127;
  float v128;
  float v129;
  float v130;
  unsigned int v131;
  float v132;
  float v133;
  float v134;
  unsigned int v135;
  float v136;
  float v137;
  float v138;
  unsigned int v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v152;
  float v153;
  float v154;
  float v158;
  float v159;
  float v160;
  float v164;
  float v165;
  float v166;
  id v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unsigned __int16 *v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  int v190;
  int v191;
  _WORD *v192;
  float *v193;
  float *v194;
  uint64_t v195;
  void *v196;
  void *v197;
  uint64_t v198;
  void *__p;
  void *v200;
  uint64_t v201;
  float *v202;
  float *v203;
  uint64_t v204;
  _WORD v205[2];
  __int16 v206;
  __int16 v207;
  __int16 v208;
  __int16 v209;
  __int16 v210;
  __int16 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  CGRect v226;
  CGRect v227;
  CGRect v228;

  v225 = *MEMORY[0x1E0C80C00];
  v219 = xmmword_1E99888E8;
  v220 = 0;
  v217 = a6;
  v218 = a7;
  applejpeg_decode_create();
  v216 = 0;
  v215 = 0;
  v214 = 0;
  v223 = 0u;
  v224 = 0u;
  v221 = 0u;
  v222 = 0u;
  v11 = (_WORD *)a1[34];
  if (*v11 != 2
    || (unsigned __int16)v11[1] - 1 > 1
    || (v12 = (float *)a1[31], a1[32] - (_QWORD)v12 != 12)
    || *v12 == 0.0
    || v12[1] == 0.0
    || v12[2] == 0.0
    || applejpeg_decode_open_mem()
    || applejpeg_decode_set_option_outformat()
    || applejpeg_decode_set_option_alternate_420_prediction()
    || applejpeg_decode_get_image_info()
    || applejpeg_decode_get_output_buffer_size())
  {
    v16 = 0;
  }
  else
  {
    objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v13, v216, v14, v15);
    v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v212 = objc_msgSend_mutableBytes(v16, v17, v18, v19, v20);
    v213 = v216;
    if (!applejpeg_decode_image_all() && !applejpeg_decode_get_planar_output_buffer_size())
    {
      v21 = objc_retainAutorelease(v16);
      v178 = objc_msgSend_bytes(v21, v22, v23, v24, v25);
      v26 = (_WORD *)a1[34];
      v185 = a1;
      v170 = v21;
      v190 = *v26 == 2 && v26[1] == 2;
      v177 = *((_QWORD *)&v223 + 1);
      v226.origin.x = (double)*a3;
      v226.origin.y = (double)a3[1];
      v226.size.width = (double)a3[2];
      v226.size.height = (double)a3[3];
      v228.origin.x = (double)*a5;
      v174 = v224;
      v228.origin.y = (double)a5[1];
      v228.size.width = (double)a5[2];
      v228.size.height = (double)a5[3];
      v227 = CGRectIntersection(v226, v228);
      v27 = (unint64_t)(v227.origin.y - (double)a3[1]);
      v28 = v27 + (unint64_t)v227.size.height;
      v176 = v27;
      if (v28 > v27)
      {
        v183 = v178 + 2 * v221 * v223 + 2 * *((_QWORD *)&v221 + 1) * *((_QWORD *)&v223 + 1);
        v184 = v178 + 2 * v221 * v223;
        v29 = (unint64_t)(v227.origin.x - (double)*a3);
        v30 = v29 + (unint64_t)v227.size.width;
        v173 = 2 * v223;
        v171 = v27 + (unint64_t)v227.size.height;
        v172 = a2 + 8 * v29 + 8;
        v31 = (unint64_t)(v227.origin.y - (double)a3[1]);
        v181 = v30;
        v182 = v29;
        while (v30 <= v29)
        {
          v31 += 2;
LABEL_46:
          if (v31 >= v28)
            goto LABEL_47;
        }
        v32 = 0;
        v33 = v31 - v176;
        v34 = (v31 - v176) >> v190;
        v189 = v34 * v177;
        v188 = (v34 + 1) * v177;
        v187 = v34 * v174;
        v186 = (v34 + 1) * v174;
        v179 = v31 + 2;
        v35 = v190;
        if (v31 + 2 < v28)
          v35 = 0;
        v191 = v35;
        v36 = (_WORD *)(v178 + v173 * v33);
        v37 = (_WORD *)(v172 + a4 + v31 * a4);
        v38 = (_WORD *)(v178 + v173 + v173 * v33);
        v39 = (_WORD *)(v172 + v31 * a4);
        while (1)
        {
          v40 = (unsigned __int16 *)(v184 + 2 * (v189 + (v32 >> 1)));
          v41 = (unsigned __int16 *)(v184 + 2 * (v188 + (v32 >> 1)));
          v42 = (unsigned __int16 *)(v183 + 2 * (v187 + (v32 >> 1)));
          v43 = (unsigned __int16 *)(v183 + 2 * (v186 + (v32 >> 1)));
          v192 = v36;
          if (v29 + v32 + 2 >= v30)
          {
            v211 = *v40;
            v210 = v211;
            v207 = *v42;
            v206 = v207;
            v209 = *v41;
            v208 = v209;
            v44 = *v43;
            v43 = v205;
            v205[1] = v44;
            v42 = (unsigned __int16 *)&v206;
            v41 = (unsigned __int16 *)&v208;
            v205[0] = v44;
            v40 = (unsigned __int16 *)&v210;
          }
          v45 = v191 ? v40 : v41;
          v46 = v191 ? v42 : v43;
          if (v190)
            break;
          v196 = 0;
          v197 = 0;
          v198 = 0;
          sub_1D5287D44(&v196, (const void *)v185[38], v185[39], (uint64_t)(v185[39] - v185[38]) >> 2);
          v193 = 0;
          v194 = 0;
          v195 = 0;
          sub_1D5287D44(&v193, (const void *)v185[31], v185[32], (uint64_t)(v185[32] - v185[31]) >> 2);
          v67 = v192;
          v114 = v193;
          v116 = *v193;
          v115 = v193[1];
          v117 = v193[2];
          LOWORD(v118) = *v192;
          v119 = *((float *)v196 + 1);
          *(float *)&v120 = (float)v118 - *(float *)v196;
          v121 = *(float *)&v120 / v119;
          LOWORD(v120) = v192[1];
          *(float *)&v122 = (float)v120 - *(float *)v196;
          v123 = *(float *)&v122 / v119;
          LOWORD(v122) = *v38;
          *(float *)&v124 = (float)v122 - *(float *)v196;
          v125 = *(float *)&v124 / v119;
          LOWORD(v124) = v38[1];
          v126 = (float)((float)v124 - *(float *)v196) / v119;
          v127 = *v40;
          v128 = *((float *)v196 + 2);
          v129 = *((float *)v196 + 3);
          v130 = (float)((float)v127 - v128) / v129;
          v131 = *v41;
          v132 = (float)((float)((float)(int)(v40[1] + v127) * 0.5) - v128) / v129;
          v133 = (float)((float)v131 - v128) / v129;
          v134 = (float)((float)(int)(v41[1] + v131) * 0.5) - v128;
          v135 = *v42;
          v136 = v134 / v129;
          v137 = (float)((float)v135 - v128) / v129;
          v138 = (float)((float)(int)(v42[1] + v135) * 0.5) - v128;
          v139 = *v43;
          v140 = v138 / v129;
          v141 = (float)((float)v139 - v128) / v129;
          v142 = (float)((float)((float)(int)(v43[1] + v139) * 0.5) - v128) / v129;
          v143 = (float)(v119 + 1.0) * 0.000015259;
          v144 = (float)(*v193 * -2.0) + 2.0;
          v145 = v121 + (float)(v137 * v144);
          v146 = (float)(v117 * -2.0) + 2.0;
          v147 = v121 + (float)(v130 * v146);
          v148 = (float)((float)(v121 - (float)(v117 * v147)) - (float)(*v193 * v145)) / v115;
          _S19 = v143 * v145;
          __asm { FCVT            H19, S19 }
          *(v39 - 4) = LOWORD(_S19);
          _S7 = v143 * v148;
          __asm { FCVT            H7, S7 }
          *(v39 - 3) = LOWORD(_S7);
          _S7 = v143 * v147;
          __asm { FCVT            H7, S7 }
          *(v39 - 2) = LOWORD(_S7);
          v152 = v123 + (float)(v140 * v144);
          v153 = v123 + (float)(v132 * v146);
          v154 = (float)((float)(v123 - (float)(v117 * v153)) - (float)(v116 * v152)) / v115;
          _S7 = v143 * v152;
          __asm { FCVT            H7, S7 }
          *v39 = LOWORD(_S7);
          _S5 = v143 * v154;
          __asm { FCVT            H5, S5 }
          v39[1] = LOWORD(_S5);
          _S5 = v143 * v153;
          __asm { FCVT            H5, S5 }
          v39[2] = LOWORD(_S5);
          v158 = v125 + (float)(v141 * v144);
          v159 = v125 + (float)(v133 * v146);
          v160 = (float)((float)(v125 - (float)(v117 * v159)) - (float)(v116 * v158)) / v115;
          _S5 = v143 * v158;
          __asm { FCVT            H5, S5 }
          *(v37 - 4) = LOWORD(_S5);
          _S4 = v143 * v160;
          __asm { FCVT            H4, S4 }
          *(v37 - 3) = LOWORD(_S4);
          _S4 = v143 * v159;
          __asm { FCVT            H4, S4 }
          *(v37 - 2) = LOWORD(_S4);
          v164 = v126 + (float)(v142 * v144);
          v165 = v126 + (float)(v136 * v146);
          v166 = (float)(v126 - (float)(v117 * v165)) - (float)(v116 * v164);
          _S2 = v143 * v164;
          __asm { FCVT            H2, S2 }
          *v37 = LOWORD(_S2);
          _S0 = v143 * (float)(v166 / v115);
          __asm { FCVT            H0, S0 }
          v37[1] = LOWORD(_S0);
          _S0 = v143 * v165;
          __asm { FCVT            H0, S0 }
          v37[2] = LOWORD(_S0);
          v194 = v114;
          operator delete(v114);
          v113 = v196;
          v29 = v182;
          if (v196)
          {
            v197 = v196;
LABEL_42:
            operator delete(v113);
          }
LABEL_43:
          v32 += 2;
          v36 = v67 + 2;
          v37 += 8;
          v38 += 2;
          v39 += 8;
          v30 = v181;
          if (v29 + v32 >= v181)
          {
            v28 = v171;
            v31 = v179;
            goto LABEL_46;
          }
        }
        v180 = v46;
        v202 = 0;
        v203 = 0;
        v204 = 0;
        sub_1D5287D44(&v202, (const void *)v185[38], v185[39], (uint64_t)(v185[39] - v185[38]) >> 2);
        __p = 0;
        v200 = 0;
        v201 = 0;
        sub_1D5287D44(&__p, (const void *)v185[31], v185[32], (uint64_t)(v185[32] - v185[31]) >> 2);
        v47 = __p;
        v49 = *(float *)__p;
        v48 = *((float *)__p + 1);
        v50 = *((float *)__p + 2);
        LOWORD(v51) = *v192;
        v52 = v202[1];
        *(float *)&v53 = (float)v51 - *v202;
        v54 = *(float *)&v53 / v52;
        LOWORD(v53) = v192[1];
        *(float *)&v55 = (float)v53 - *v202;
        v56 = *(float *)&v55 / v52;
        LOWORD(v55) = *v38;
        *(float *)&v57 = (float)v55 - *v202;
        v58 = *(float *)&v57 / v52;
        LOWORD(v57) = v38[1];
        v59 = (float)((float)v57 - *v202) / v52;
        v60 = *v40;
        v61 = v202[2];
        v62 = v202[3];
        v63 = (float)((float)v60 - v61) / v62;
        v64 = v40[1] + v60;
        v65 = (float)((float)((float)v64 * 0.5) - v61) / v62;
        v66 = *v45;
        v67 = v192;
        v68 = (float)((float)((float)(int)(v66 + v60) * 0.5) - v61) / v62;
        v69 = v64 + v66;
        if (v191)
          v70 = v40;
        else
          v70 = v41;
        v71 = (float)((float)((float)(v69 + v70[1]) * 0.25) - v61) / v62;
        v72 = *v42;
        v73 = (float)((float)v72 - v61) / v62;
        v74 = v42[1] + v72;
        v75 = (float)((float)((float)v74 * 0.5) - v61) / v62;
        v76 = *v180;
        v77 = (float)((float)(int)(v76 + v72) * 0.5) - v61;
        v78 = v74 + v76;
        if (v191)
          v79 = v42;
        else
          v79 = v43;
        v80 = v77 / v62;
        v81 = (float)((float)((float)(v78 + v79[1]) * 0.25) - v61) / v62;
        v82 = (float)(v52 + 1.0) * 0.000015259;
        v83 = (float)(v49 * -2.0) + 2.0;
        v84 = v54 + (float)(v73 * v83);
        v85 = (float)(v50 * -2.0) + 2.0;
        v86 = v54 + (float)(v63 * v85);
        v87 = (float)((float)(v54 - (float)(v50 * v86)) - (float)(v49 * v84)) / v48;
        _S22 = v82 * v84;
        __asm { FCVT            H22, S22 }
        *(v39 - 4) = LOWORD(_S22);
        _S6 = v82 * v87;
        __asm { FCVT            H6, S6 }
        *(v39 - 3) = LOWORD(_S6);
        _S6 = v82 * v86;
        __asm { FCVT            H6, S6 }
        *(v39 - 2) = LOWORD(_S6);
        v95 = v56 + (float)(v75 * v83);
        v96 = v56 + (float)(v65 * v85);
        v97 = (float)((float)(v56 - (float)(v50 * v96)) - (float)(v49 * v95)) / v48;
        _S6 = v82 * v95;
        __asm { FCVT            H6, S6 }
        *v39 = LOWORD(_S6);
        _S5 = v82 * v97;
        __asm { FCVT            H5, S5 }
        v39[1] = LOWORD(_S5);
        _S5 = v82 * v96;
        __asm { FCVT            H5, S5 }
        v39[2] = LOWORD(_S5);
        v101 = v58 + (float)(v80 * v83);
        v102 = v58 + (float)(v68 * v85);
        v103 = (float)((float)(v58 - (float)(v50 * v102)) - (float)(v49 * v101)) / v48;
        _S5 = v82 * v101;
        __asm { FCVT            H5, S5 }
        *(v37 - 4) = LOWORD(_S5);
        _S4 = v82 * v103;
        __asm { FCVT            H4, S4 }
        *(v37 - 3) = LOWORD(_S4);
        _S4 = v82 * v102;
        __asm { FCVT            H4, S4 }
        *(v37 - 2) = LOWORD(_S4);
        v107 = v59 + (float)(v81 * v83);
        v108 = v59 + (float)(v71 * v85);
        v109 = (float)(v59 - (float)(v50 * v108)) - (float)(v49 * v107);
        _S2 = v82 * v107;
        __asm { FCVT            H2, S2 }
        *v37 = LOWORD(_S2);
        _S0 = v82 * (float)(v109 / v48);
        __asm { FCVT            H0, S0 }
        v37[1] = LOWORD(_S0);
        _S0 = v82 * v108;
        __asm { FCVT            H0, S0 }
        v37[2] = LOWORD(_S0);
        v200 = v47;
        operator delete(v47);
        v113 = v202;
        v29 = v182;
        if (!v202)
          goto LABEL_43;
        v203 = v202;
        goto LABEL_42;
      }
LABEL_47:
      v16 = v170;
    }
  }
  applejpeg_decode_destroy();

}

void sub_1D5355CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{

  _Unwind_Resume(a1);
}

void *sub_1D5355D4C(size_t a1)
{
  return malloc_type_malloc(a1, 0x3D0BE59DuLL);
}

void sub_1D5355D5C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unsigned int v13;
  void *exception;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v3 = *(unsigned int *)(a1 + 44);
  v2 = *(_DWORD *)(a1 + 48);
  v4 = *(_DWORD *)(a1 + 188);
  v5 = *(_DWORD *)(a1 + 192);
  v16 = (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 2;
  sub_1D5282FE0(&v19, (unint64_t *)&v16);
  if (*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200) != *(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)
    || (v3 - 100000) < 0xFFFE7961
    || (v2 - 100000) < 0xFFFE7961
    || v4 - 100000 < 0xFFFE7961
    || v5 - 100000 < 0xFFFE7961
    || (v6 = v19, v19 >= 20000)
    || (v2 + v5 - 1) / v5 * ((v3 + v4 - 1) / v4) != v19)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v15 = sub_1D530B618(a1);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 4 * v6;
    do
    {
      v16 = __PAIR64__(v9, v8);
      v17 = v4;
      v18 = v5;
      v11 = sub_1D53552E0(a1, *(_DWORD *)(*(_QWORD *)(a1 + 200) + v7), *(unsigned int *)(*(_QWORD *)(a1 + 224) + v7));
      if (v11)
      {
        v12 = v11;
        sub_1D5355398((_QWORD *)a1, v15 + 2 * (int)(v9 * v3) + 2 * (int)v8, (int *)&v16, 2 * v3, (int *)&v16, (uint64_t)v11, *(unsigned int *)(*(_QWORD *)(a1 + 224) + v7));
        free(v12);
      }
      v7 += 4;
      if ((int)(v8 + v4) >= (int)v3)
        v13 = v5;
      else
        v13 = 0;
      v9 += v13;
      if ((int)(v8 + v4) >= (int)v3)
        v8 = 0;
      else
        v8 += v4;
    }
    while (v10 != v7);
  }
}

void sub_1D5355FD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D5355FFC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unsigned int v16;
  void *exception;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;

  v7 = *(_DWORD *)(a1 + 44);
  v6 = *(_DWORD *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 188);
  v9 = *(_DWORD *)(a1 + 192);
  v20 = (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 2;
  sub_1D5282FE0(&v23, (unint64_t *)&v20);
  if (*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200) != *(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)
    || (v7 - 100000) < 0xFFFE7961
    || (v6 - 100000) < 0xFFFE7961
    || v8 - 100000 < 0xFFFE7961
    || v9 - 100000 < 0xFFFE7961
    || v23 >= 20000
    || (v6 + v9 - 1) / v9 * ((v7 + v8 - 1) / v8) != v23)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v23)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 4 * v23;
    do
    {
      v20 = __PAIR64__(v12, v11);
      v21 = v8;
      v22 = v9;
      if (sub_1D53ADDB8((int *)&v20, a3))
      {
        v14 = sub_1D53552E0(a1, *(_DWORD *)(*(_QWORD *)(a1 + 200) + v10), *(unsigned int *)(*(_QWORD *)(a1 + 224) + v10));
        if (v14)
        {
          v15 = v14;
          sub_1D5355398((_QWORD *)a1, a2, a3, a4, (int *)&v20, (uint64_t)v14, *(unsigned int *)(*(_QWORD *)(a1 + 224) + v10));
          free(v15);
        }
      }
      if ((int)(v11 + v8) >= v7)
        v16 = v9;
      else
        v16 = 0;
      v12 += v16;
      if ((int)(v11 + v8) >= v7)
        v11 = 0;
      else
        v11 += v8;
      v10 += 4;
    }
    while (v13 != v10);
  }
}

void sub_1D5356268(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5356294(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &off_1E9988910;
  v2 = (void *)a1[38];
  if (v2)
  {
    a1[39] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[34];
  if (v3)
  {
    a1[35] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[31];
  if (v4)
  {
    a1[32] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[28];
  if (v5)
  {
    a1[29] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[25];
  if (v6)
  {
    a1[26] = v6;
    operator delete(v6);
  }
  return sub_1D5282F0C(a1);
}

void sub_1D5356310(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &off_1E9988910;
  v2 = (void *)a1[38];
  if (v2)
  {
    a1[39] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[34];
  if (v3)
  {
    a1[35] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[31];
  if (v4)
  {
    a1[32] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[28];
  if (v5)
  {
    a1[29] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[25];
  if (v6)
  {
    a1[26] = v6;
    operator delete(v6);
  }
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

_DWORD *sub_1D53563A0(_DWORD *a1, int a2, uint64_t *a3)
{
  *(_QWORD *)sub_1D544098C((uint64_t)a1, a2) = &off_1E9988A08;
  a1[3] = sub_1D52847F8(*a3);
  a1[4] = sub_1D52847F8(*a3);
  a1[5] = sub_1D52847F8(*a3);
  a1[6] = sub_1D52847F8(*a3);
  return a1;
}

id sub_1D5356408(unsigned int *a1)
{
  RAWOpcodeTrimBounds *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v26[4];
  _QWORD v27[5];

  v27[4] = *MEMORY[0x1E0C80C00];
  v2 = [RAWOpcodeTrimBounds alloc];
  v26[0] = CFSTR("Top");
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v3, a1[3], v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v27[0] = v6;
  v26[1] = CFSTR("Left");
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v7, a1[4], v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v27[1] = v10;
  v26[2] = CFSTR("Bottom");
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v11, a1[5], v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v27[2] = v14;
  v26[3] = CFSTR("Right");
  objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v15, a1[6], v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v27[3] = v18;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v19, (uint64_t)v27, (uint64_t)v26, 4);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = (void *)objc_msgSend_initWithArguments_(v2, v21, (uint64_t)v20, v22, v23);

  return v24;
}

void sub_1D5356554(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D535659C()
{
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D53565B0()
{
  return 6;
}

xmlChar *sub_1D53565B8(xmlChar *result, uint64_t a2, unsigned int a3)
{
  xmlChar *v4;
  uint64_t **v5;
  uint64_t v6;
  void (**v7)(const xmlChar *);
  const xmlNode *v8;
  xmlNs *ns;
  const xmlChar *v10;
  id v11;
  int v12;
  const char *v13;
  __CFString *v14;
  double v15;
  double *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t **v25;
  void *__p[2];
  char v27;
  void **v28;

  if (a3 <= 9 && a2)
  {
    v4 = result;
    v5 = (uint64_t **)(result + 312);
    v24 = (uint64_t **)(result + 360);
    v25 = (uint64_t **)(result + 408);
    v22 = (uint64_t **)(result + 432);
    v23 = (uint64_t **)(result + 384);
    v6 = a3 + 1;
    v7 = (void (**)(const xmlChar *))MEMORY[0x1E0DE8D30];
    v8 = (const xmlNode *)a2;
    while (1)
    {
      if (*(_DWORD *)(a2 + 8) == 1)
        goto LABEL_30;
      if (!*(_QWORD *)(a2 + 80))
        goto LABEL_30;
      ns = v8->ns;
      if (!ns || !ns->prefix)
        goto LABEL_30;
      result = xmlNodeGetContent(v8);
      if (result)
        break;
LABEL_31:
      v8 = v8->next;
      if (!v8)
        return result;
    }
    v10 = result;
    v11 = objc_alloc(MEMORY[0x1E0CB3940]);
    v12 = xmlStrlen(v10);
    v14 = (__CFString *)objc_msgSend_initWithBytes_length_encoding_(v11, v13, (uint64_t)v10, v12, 4);
    if (v14)
    {
      (*v7)(v10);
      if (!xmlStrEqual(v8->ns->prefix, (const xmlChar *)"exif"))
      {
        if (!xmlStrEqual(v8->ns->prefix, (const xmlChar *)"xmp"))
          goto LABEL_29;
        if (!xmlStrEqual(v8->name, (const xmlChar *)"CreateDate"))
          goto LABEL_29;
        v15 = sub_1D5356DA0(v14);
        if (v15 <= -INFINITY)
          goto LABEL_29;
        sub_1D52850A0(__p, "XMP:xmp");
        v28 = __p;
        v16 = (double *)sub_1D52D8024(v25, __p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v28);
        goto LABEL_13;
      }
      if (xmlStrEqual(v8->name, (const xmlChar *)"ShutterSpeedValue"))
      {
        v15 = sub_1D53569B8(v14);
        sub_1D52850A0(__p, "XMP:exif");
        v28 = __p;
        v16 = (double *)sub_1D52D8024(v5, __p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v28);
LABEL_13:
        v16[7] = v15;
        goto LABEL_14;
      }
      if (xmlStrEqual(v8->name, (const xmlChar *)"DateTimeOriginal"))
      {
        v15 = sub_1D5356DA0(v14);
        if (v15 > -INFINITY)
        {
          sub_1D52850A0(__p, "XMP:exif");
          v28 = __p;
          v16 = (double *)sub_1D52D8024(v25, __p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v28);
          goto LABEL_13;
        }
      }
      else
      {
        if (xmlStrEqual(v8->name, (const xmlChar *)"ApertureValue"))
        {
          v15 = sub_1D53569B8(v14);
          sub_1D52850A0(__p, "XMP:exif");
          v28 = __p;
          v16 = (double *)sub_1D52D8024(v24, __p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v28);
          goto LABEL_13;
        }
        if (xmlStrEqual(v8->name, (const xmlChar *)"FocalLength"))
        {
          v15 = sub_1D53569B8(v14);
          sub_1D52850A0(__p, "XMP:exif");
          v28 = __p;
          v16 = (double *)sub_1D52D8024(v23, __p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v28);
          goto LABEL_13;
        }
        if (xmlStrEqual(v8->name, (const xmlChar *)"ExposureMode"))
        {
          v21 = objc_msgSend_intValue(v14, v17, v18, v19, v20);
          sub_1D52850A0(__p, "XMP:exif");
          v28 = __p;
          *((_DWORD *)sub_1D534A814(v22, __p, (uint64_t)&unk_1D544A5C4, (_OWORD **)&v28) + 14) = v21 & ~(v21 >> 31);
LABEL_14:
          if (v27 < 0)
            operator delete(__p[0]);
        }
      }
    }
LABEL_29:

LABEL_30:
    result = (xmlChar *)sub_1D53565B8(v4, v8->children, v6);
    goto LABEL_31;
  }
  return result;
}

void sub_1D535694C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

double sub_1D53569B8(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;

  v1 = a1;
  if ((objc_msgSend_containsString_(v1, v2, (uint64_t)CFSTR("/"), v3, v4) & 1) != 0)
  {
    objc_msgSend_componentsSeparatedByString_(v1, v5, (uint64_t)CFSTR("/"), v7, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend_count(v9, v10, v11, v12, v13);
    if (v17)
    {
      objc_msgSend_objectAtIndexedSubscript_(v9, v14, 0, v15, v16);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_doubleValue(v18, v19, v20, v21, v22);
      v24 = v23;

      if (v17 >= 2)
      {
        objc_msgSend_objectAtIndexedSubscript_(v9, v25, 1, v26, v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_doubleValue(v28, v29, v30, v31, v32);
        v34 = v33;

        v24 = v24 / v34;
      }
    }
    else
    {
      v24 = 0.0;
    }

  }
  else
  {
    objc_msgSend_doubleValue(v1, v5, v6, v7, v8);
    v24 = v35;
  }

  return v24;
}

void sub_1D5356A8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D5356AC4(xmlChar *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  unsigned int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  const xmlDoc *Memory;
  xmlDoc *v46;
  xmlNodePtr RootElement;
  uint64_t (***v48)(_QWORD);
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;

  v54 = a3;
  sub_1D52917E4((uint64_t)a1, &v48);
  if (((**v48)(v48) & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    v52 = a3 + a4;
    sub_1D528304C(&v53, &v52);
    sub_1D52917E4((uint64_t)a1, &v50);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
    v10 = v53 >= v11;
    v12 = v51;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v15 = v49;
  if (!v49)
    goto LABEL_12;
  v16 = (unint64_t *)&v49->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (v10)
      goto LABEL_13;
  }
  else
  {
LABEL_12:
    if (v10)
    {
LABEL_13:
      (*(void (**)(xmlChar *, uint64_t))(*(_QWORD *)a1 + 184))(a1, 1);
      return;
    }
  }
  if ((unint64_t)(a4 - 1000000) >= 0xFFFFFFFFFFF0BDC1)
  {
    objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v7, a4, v8, v9);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v18)
    {
      sub_1D52917E4((uint64_t)a1, &v50);
      sub_1D528594C(&v52, &v54);
      sub_1D5285164((uint64_t *)&v48, &v50, (uint64_t)&v52, 0);
      v19 = v51;
      if (v51)
      {
        v20 = (unint64_t *)&v51->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *((_QWORD *)a1 + 10);
      v23 = objc_retainAutorelease(v18);
      v28 = objc_msgSend_mutableBytes(v23, v24, v25, v26, v27);
      v33 = objc_msgSend_length(v23, v29, v30, v31, v32);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 32))(v22, v28, v33) == a4)
      {
        v34 = objc_retainAutorelease(v23);
        v39 = (const char *)objc_msgSend_bytes(v34, v35, v36, v37, v38);
        v44 = objc_msgSend_length(v34, v40, v41, v42, v43);
        Memory = xmlReadMemory(v39, v44, "XMP", 0, 2112);
        v46 = (xmlDoc *)Memory;
        if (Memory)
        {
          RootElement = xmlDocGetRootElement(Memory);
          sub_1D53565B8(a1, (uint64_t)RootElement, 0);
          xmlFreeDoc(v46);
        }
      }
      sub_1D5285200((uint64_t *)&v48);
    }

  }
}

void sub_1D5356D3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1D5356DA0(const __CFString *a1)
{
  void *v2;
  CFLocaleRef v3;
  CFDateFormatterRef v4;
  CFTimeZoneRef v5;
  CFIndex v6;
  CFIndex location;
  CFIndex length;
  CFIndex v9;
  CFRange v10;
  CFStringRef v11;
  int CharacterAtIndex;
  double v13;
  int v14;
  CFIndex v15;
  double v16;
  CFIndex v17;
  CFStringRef v18;
  int v19;
  uint64_t v20;
  CFRange v21;
  CFStringRef v22;
  double v23;
  double v25;
  CFRange v26;
  CFAbsoluteTime atp;
  CFRange rangep;
  CFRange v29;

  v2 = (void *)MEMORY[0x1D8272058]();
  v3 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("en_US"));
  CFAutorelease(v3);
  v4 = CFDateFormatterCreate(0, v3, kCFDateFormatterShortStyle, kCFDateFormatterShortStyle);
  CFAutorelease(v4);
  v5 = CFTimeZoneCreateWithTimeIntervalFromGMT(0, 0.0);
  CFAutorelease(v5);
  CFDateFormatterSetProperty(v4, (CFStringRef)*MEMORY[0x1E0C9AF68], v5);
  CFDateFormatterSetFormat(v4, CFSTR("yyyy-MM-dd'T'HH:mm:ss"));
  rangep.location = 0;
  rangep.length = CFStringGetLength(a1);
  atp = -INFINITY;
  if (CFDateFormatterGetAbsoluteTimeFromString(v4, a1, &rangep, &atp))
  {
    v26.location = rangep.length + rangep.location;
    v26.length = 3;
    v6 = rangep.length + rangep.location + 3;
    if (v6 <= CFStringGetLength(a1))
    {
      v25 = 0.0;
      CFDateFormatterSetFormat(v4, CFSTR(".SS"));
      if (CFDateFormatterGetAbsoluteTimeFromString(v4, a1, &v26, &v25))
      {
        rangep = v26;
        atp = atp + v25 - floor(v25);
      }
    }
    location = rangep.location;
    length = rangep.length;
    v9 = CFStringGetLength(a1);
    v10.length = v9 - (rangep.location + rangep.length);
    if (v10.length >= 2)
    {
      v10.location = length + location;
      v11 = CFStringCreateWithSubstring(0, a1, v10);
      CFAutorelease(v11);
      CharacterAtIndex = CFStringGetCharacterAtIndex(v11, 0);
      v13 = 0.0;
      if (CharacterAtIndex != 90)
      {
        v14 = CharacterAtIndex;
        if (CharacterAtIndex == 45 || CharacterAtIndex == 43)
        {
          v15 = CFStringGetLength(v11);
          v16 = 0.0;
          if (v15 >= 3)
          {
            v17 = v15;
            v29.location = 1;
            v29.length = 2;
            v18 = CFStringCreateWithSubstring(0, v11, v29);
            CFAutorelease(v18);
            v16 = (double)CFStringGetIntValue(v18) * 3600.0 + 0.0;
            if (v17 != 3)
            {
              v19 = CFStringGetCharacterAtIndex(v11, 3);
              v20 = -4;
              if (v19 != 58)
                v20 = -3;
              if ((unint64_t)(v20 + v17) >= 2)
              {
                if (v19 == 58)
                  v21.location = 4;
                else
                  v21.location = 3;
                v21.length = 2;
                v22 = CFStringCreateWithSubstring(0, v11, v21);
                CFAutorelease(v22);
                v16 = v16 + (double)CFStringGetIntValue(v22) * 60.0;
              }
            }
          }
          v13 = -v16;
          if (v14 != 45)
            v13 = v16;
        }
      }
      atp = v13 + atp;
    }
  }
  else
  {
    CFDateFormatterSetFormat(v4, CFSTR("yyyy:MM:dd HH:mm"));
    rangep.location = 0;
    rangep.length = CFStringGetLength(a1);
    if (!CFDateFormatterGetAbsoluteTimeFromString(v4, a1, &rangep, &atp))
      atp = -INFINITY;
  }
  v23 = atp;
  objc_autoreleasePoolPop(v2);
  return v23;
}

void sub_1D5357084(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void *__p[2];
  uint64_t v19;
  void *v20;

  v20 = &unk_1E997C018;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&v13);
  v4 = v13;
  sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE:redBlueBalance");
  (*(void (**)(void *, void **, void **, uint64_t))(*(_QWORD *)v4 + 600))(v4, __p, &v20, 3);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  v5 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v16, a1);
    v8 = v16;
    sub_1D52850A0(&v13, "IFD0:EXIF:MAKERNOTE:ImageProcessing:WBRedBlueLevels");
    (*(void (**)(void **__return_ptr, uint64_t, void **, void **, uint64_t))(*(_QWORD *)v8 + 600))(__p, v8, &v13, &v20, 3);
    v9 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v9;
      operator delete(v9);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v19;
    __p[1] = 0;
    v19 = 0;
    __p[0] = 0;
    if (v15 < 0)
      operator delete(v13);
    v10 = v17;
    if (v17)
    {
      v11 = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1D5357220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  void *v25;

  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  v25 = *(void **)v23;
  if (*(_QWORD *)v23)
  {
    *(_QWORD *)(v23 + 8) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

void sub_1D535728C(_QWORD *a1@<X0>, void **a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  double *v16;
  uint64_t v17;
  unint64_t v18;
  double *v19;
  unint64_t v20;
  double *v21;
  unint64_t v22;
  double *v23;
  unint64_t v24;
  char v25;
  void *__p;
  _BYTE *v27;
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  _BYTE *v32;
  uint64_t v33;
  void *v34;
  __int128 v35;
  double *v36;
  __int128 v37;

  if ((*(unsigned int (**)(_QWORD *))(*a1 + 248))(a1))
  {
    (*(void (**)(double **__return_ptr, _QWORD *, double))(*a1 + 2976))(&v36, a1, 0.0);
    if ((_QWORD)v37 - (_QWORD)v36 == 32 && *v36 > 0.0)
      goto LABEL_8;
    (*(void (**)(void **__return_ptr, _QWORD *, double))(*a1 + 2984))(&v34, a1, 0.0);
    if (v36)
    {
      *(_QWORD *)&v37 = v36;
      operator delete(v36);
    }
    v36 = (double *)v34;
    v37 = v35;
    if ((_QWORD)v35 - (_QWORD)v34 == 32 && *(double *)v34 > 0.0)
    {
LABEL_8:
      sub_1D532E934(a1, a2);
    }
    else
    {
      v34 = 0;
      sub_1D528F9B4(a2, 4uLL, &v34);
    }
    if (v36)
    {
      *(_QWORD *)&v37 = v36;
      operator delete(v36);
    }
    return;
  }
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 176))(a1))
  {
LABEL_60:
    sub_1D532E934(a1, a2);
    return;
  }
  v36 = 0;
  v37 = 0uLL;
  v34 = 0;
  v35 = 0uLL;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 160))(&v29, a1);
  v4 = v29;
  sub_1D52850A0(&__p, "IFD0:SUBIFD0");
  (*(void (**)(uint64_t, void **, double **, _QWORD))(*(_QWORD *)v4 + 248))(v4, &__p, &v36, 0);
  if (v28 < 0)
    operator delete(__p);
  v5 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 160))(&v29, a1);
  v8 = v29;
  sub_1D52850A0(&__p, "IFD0:SUBIFD0:DeltaH");
  (*(void (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v8 + 248))(v8, &__p, &v34, 0);
  if (v28 < 0)
    operator delete(__p);
  v9 = v30;
  if (v30)
  {
    v10 = (unint64_t *)&v30->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 160))(&v29, a1);
  v12 = v29;
  sub_1D52850A0(&__p, "IFD0:SUBIFD0:DeltaV");
  (*(void (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v12 + 248))(v12, &__p, &v31, 0);
  if (v28 < 0)
    operator delete(__p);
  v13 = v30;
  if (v30)
  {
    v14 = (unint64_t *)&v30->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v29 = 0;
  sub_1D528F9B4(&__p, 4uLL, &v29);
  v16 = (double *)__p;
  v17 = v27 - (_BYTE *)__p;
  if (v27 != __p)
  {
    v18 = 0;
    v19 = v36;
    v20 = (uint64_t)(v37 - (_QWORD)v36) >> 3;
    v21 = (double *)v34;
    v22 = (uint64_t)(v35 - (_QWORD)v34) >> 3;
    v23 = (double *)v31;
    v24 = (v32 - (_BYTE *)v31) >> 3;
    do
    {
      if (v20 > v18)
        v16[v18] = v19[v18] + v16[v18];
      if (v22 > v18)
        v16[v18] = v21[v18] + v16[v18];
      if (v24 > v18)
        v16[v18] = v23[v18] + v16[v18];
      ++v18;
    }
    while (v17 >> 3 > (unint64_t)v18);
  }
  if (v17 == 32)
  {
    if (*v16 > 0.0 && v16[1] > 0.0 && v16[2] > 0.0 && v16[3] > 0.0)
    {
      v25 = 1;
      goto LABEL_51;
    }
    v29 = 0;
    sub_1D528F9B4(a2, 4uLL, &v29);
  }
  else
  {
    sub_1D532E934(a1, a2);
  }
  v25 = 0;
LABEL_51:
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (v34)
  {
    *(_QWORD *)&v35 = v34;
    operator delete(v34);
  }
  if (v36)
  {
    *(_QWORD *)&v37 = v36;
    operator delete(v36);
  }
  if ((v25 & 1) != 0)
    goto LABEL_60;
}

void sub_1D53576B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  uint64_t v21;
  void *v23;

  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  v23 = *(void **)(v21 - 56);
  if (v23)
  {
    *(_QWORD *)(v21 - 48) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D5357760(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v10);
  v2 = v10;
  v3 = off_1EFF31F00[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v5 = sub_1D5357828(v2, v3, v4, &unk_1E9988A40);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D5357814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5357828(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t **v9;
  void **v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t (**v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  void (**v28)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void (*v29)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD);
  void *exception;
  _QWORD v32[4];
  id v33;
  std::string __p;
  uint64_t (*v35[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  std::string *p_p;
  std::__shared_weak_count *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a4;
  sub_1D531B8B8(v7, a3, &__p);
  v9 = (uint64_t **)(a1 + 24);
  v10 = sub_1D5294144(a1 + 24, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 32) == v10)
  {
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_1D5358A9C;
    v32[3] = &unk_1E9979B90;
    v13 = (uint64_t (**)(_QWORD))v8;
    v33 = v13;
    sub_1D53BC1FC(a1, v7, v32, &p_p);
    v18 = (__int128 *)p_p;
    if (p_p)
    {
      sub_1D53BE790((uint64_t)p_p, v14, v15, v16, v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](exception, "RawCameraException");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v12 = objc_msgSend_longLongValue(v19, v20, v21, v22, v23);

    }
    else
    {
      v12 = 0;
    }
    v24 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }

    if (!v18)
      v12 = v13[2](v13);
    p_p = &__p;
    v27 = sub_1D531BAD4(v9, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D544A5C4, (__int128 **)&p_p);
    v28 = (void (**)(uint64_t, _QWORD, std::string **, _QWORD, _QWORD))(v27 + 7);
    v35[0] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1D5358B18;
    v35[1] = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v12;
    if (v35 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v27 + 7))
    {
      v29 = *v28;
      if (*v28)
      {
        p_p = 0;
        v37 = 0;
        v29(2, v28, &p_p, 0, 0);
        v35[0](2, v35, v28, 0, 0);
        ((void (*)(uint64_t, std::string **, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))p_p)(2, &p_p, v35, 0, 0);
        sub_1D531BC8C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))&p_p);
      }
      else
      {
        *((_DWORD *)v27 + 16) = v12;
        v27[7] = (uint64_t)sub_1D5358B18;
        v35[0] = 0;
      }
    }
    sub_1D531BC8C(v35);
  }
  else
  {
    v11 = (unsigned int *)sub_1D5358AD0((uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))v10 + 7);
    if (!v11)
      sub_1D531BA80();
    v12 = *v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);

  return v12;
}

void sub_1D5357AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  __cxa_free_exception(v27);

  sub_1D5282EB4((uint64_t)&a25);
  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1D5357B84()
{
  return 11;
}

void sub_1D5357B8C(uint64_t a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  char v6;
  char v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  void *v15[2];
  uint64_t v16;
  double v17;

  v17 = a3;
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1) == 10
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1) == 15)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v13, a1);
    v5 = v13;
    sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE");
    v6 = (*(uint64_t (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v5 + 248))(v5, __p, v15, 0);
    if ((void *)((char *)v15[1] - (char *)v15[0]) == (void *)32)
      v7 = v6;
    else
      v7 = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    v8 = v14;
    if (!v14)
      goto LABEL_12;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((v7 & 1) != 0)
        goto LABEL_13;
    }
    else
    {
LABEL_12:
      if ((v7 & 1) != 0)
      {
LABEL_13:
        *(_OWORD *)a2 = *(_OWORD *)v15;
        a2[2] = v16;
        return;
      }
    }
  }
  sub_1D528F9B4(a2, 4uLL, &v17);
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
}

void sub_1D5357CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void sub_1D5357D14(uint64_t a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  char v6;
  char v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  void *v15[2];
  uint64_t v16;
  double v17;

  v17 = a3;
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1) == 10
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1) == 15)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v13, a1);
    v5 = v13;
    sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE:ImageProcessing");
    v6 = (*(uint64_t (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v5 + 248))(v5, __p, v15, 0);
    if ((void *)((char *)v15[1] - (char *)v15[0]) == (void *)32)
      v7 = v6;
    else
      v7 = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    v8 = v14;
    if (!v14)
      goto LABEL_12;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((v7 & 1) != 0)
        goto LABEL_13;
    }
    else
    {
LABEL_12:
      if ((v7 & 1) != 0)
      {
LABEL_13:
        *(_OWORD *)a2 = *(_OWORD *)v15;
        a2[2] = v16;
        return;
      }
    }
  }
  sub_1D528F9B4(a2, 4uLL, &v17);
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
}

void sub_1D5357E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D5357E9C(uint64_t a1)
{
  unsigned int *v1;
  void **p_lpsrc;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v12;
  unsigned int *v13;
  std::__shared_weak_count *v14;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v1 = (unsigned int *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E99732D0, 0)) != 0)
  {
    v13 = v1;
    v14 = v12;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = (void **)&v13;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v13)
    v6 = v13[336];
  else
    v6 = 0;
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

uint64_t sub_1D5357F90(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2784))(a1);
}

uint64_t sub_1D5357F9C(uint64_t a1)
{
  void *v2;
  void **p_lpsrc;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *lpsrc;
  std::__shared_weak_count *v14;
  void *v15;
  std::__shared_weak_count *v16;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v2 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E99732D0, 0)) != 0)
  {
    v15 = v2;
    v16 = v14;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v15;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v4 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v15)
    v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v15 + 792))(v15);
  else
    v7 = sub_1D532C160(a1);
  v8 = v7;
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v8;
}

void sub_1D53580A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D53580B8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  __CFString *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v4 = v11;
  v5 = off_1EFF31DF0[0];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D53581AC;
  v10[3] = &unk_1E9978FB8;
  v10[4] = a1;
  sub_1D531B308(v4, v5, v6, v10, a2);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1D5358198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D53581AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  void *exception;
  double v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 2960))(v3);
  if (v4 == 2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 2968))(v3);
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 2984))(v3);
  }
  else if (v4 == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 2968))(v3);
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 2976))(v3);
  }
  else
  {
    if (v4)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v7 = (*(double (**)(uint64_t))(*(_QWORD *)v3 + 2968))(v3);
    return sub_1D528F9B4(a2, 4uLL, &v7);
  }
}

void sub_1D5358298(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

id sub_1D53582AC(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, (uint64_t)CFSTR("packingMethod"), v5, v6))
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2952))(a1);
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v8, v7, v9, v10);
  }
  else
  {
    sub_1D54210E0(a1, v3);
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

void sub_1D5358324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D5358338(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = sub_1D5330F8C(v2, CFSTR("olympusBlackLevelSource"), v3, &unk_1E9988A60);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D53583DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D53583F0()
{
  void *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x1D8271938](exception, "RawCameraException");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
}

void sub_1D535842C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1D5358440(uint64_t a1)
{
  uint64_t v2;
  int v3;
  double v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v9);
  v2 = v9;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = sub_1D534D428(v2, CFSTR("olympusFallbackBlackLevel"), v3, &unk_1E9988A80);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1D53584EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_1D5358500()
{
  return 0.0;
}

void sub_1D5358508(_QWORD *a1)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t *v30;
  void *exception;
  void *v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  char *v42;
  char *v43;

  (*(void (**)(char **__return_ptr))(*a1 + 2888))(&v42);
  v2 = v43 - v42;
  if (v43 == v42)
    goto LABEL_21;
  v3 = *(_DWORD *)v42;
  if (*(_DWORD *)v42 == 2)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 160))(&v37, a1);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v37 + 384))(&v39);
    v36 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
    v35 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
    *(_QWORD *)&v34 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
    *((_QWORD *)&v34 + 1) = v23;
    sub_1D5358CCC(&v39, (unint64_t *)&v36, &v35, &v34, &v41);
    sub_1D5292548((uint64_t)(a1 + 3), &v41);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v11 = v38;
    if (!v38)
      goto LABEL_53;
    v30 = (unint64_t *)&v38->__shared_owners_;
    do
      v13 = __ldaxr(v30);
    while (__stlxr(v13 - 1, v30));
    goto LABEL_51;
  }
  if (v3 == 7)
  {
    if (v2 <= 7)
    {
LABEL_59:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
LABEL_58:
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 160))(&v37, a1);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v37 + 384))(&v39);
    v36 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
    v35 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
    *(_QWORD *)&v34 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
    *((_QWORD *)&v34 + 1) = v14;
    sub_1D5358D4C(&v39, (unint64_t *)&v36, &v35, &v34, &v41);
    v15 = v40;
    if (v40)
    {
      v16 = (unint64_t *)&v40->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v38;
    if (v38)
    {
      v19 = (unint64_t *)&v38->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = *((_DWORD *)v42 + 1);
    if (v21 < 0)
    {
      v32 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v32, "RawCameraException");
      __cxa_throw(v32, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    sub_1D5319468(v41, v21);
    sub_1D52908C8(a1 + 3, (uint64_t *)&v41);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
    if (!*((_QWORD *)&v41 + 1))
      goto LABEL_53;
    v22 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v13 = __ldaxr(v22);
    while (__stlxr(v13 - 1, v22));
LABEL_51:
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    goto LABEL_53;
  }
  if (v3 != 4)
  {
LABEL_21:
    sub_1D5299C2C((uint64_t)a1);
    goto LABEL_53;
  }
  if (v2 <= 7 || (*((_DWORD *)v42 + 1) & 0x80000000) != 0)
    goto LABEL_59;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 160))(&v37, a1);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v37 + 384))(&v39);
  v36 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
  v35 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
  *(_QWORD *)&v34 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
  *((_QWORD *)&v34 + 1) = v4;
  v33 = *((_DWORD *)v42 + 1);
  sub_1D5358BD0(&v39, (unint64_t *)&v36, &v35, &v34, &v33, &v41);
  sub_1D5292548((uint64_t)(a1 + 3), &v41);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v40;
  if (v40)
  {
    v9 = (unint64_t *)&v40->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v38;
  if (v38)
  {
    v12 = (unint64_t *)&v38->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    goto LABEL_51;
  }
LABEL_53:
  if (!a1[3])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    goto LABEL_58;
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
}

void sub_1D53589EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_1D5282EB4((uint64_t)va1);
  sub_1D5282EB4((uint64_t)va);
  v9 = *(void **)(v7 - 48);
  if (v9)
  {
    *(_QWORD *)(v7 - 40) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D5358A9C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0CB37E8];
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return objc_msgSend_numberWithUnsignedInt_(v1, v3, v2, v4, v5);
}

uint64_t (**sub_1D5358AD0(uint64_t (**result)(uint64_t, _QWORD, _QWORD, void *, void *)))(uint64_t, _QWORD, _QWORD, void *, void *)
{
  if (result)
  {
    if (*result)
      return (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))(*result)(3, result, 0, &unk_1E9989678, &unk_1D544CA40);
    else
      return 0;
  }
  return result;
}

void sub_1D5358B18(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1D5358B4C()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

void sub_1D5358BD0(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, int *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;

  v12 = operator new(0xE0uLL);
  sub_1D5358C60((uint64_t)v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  sub_1D5285658((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1D5358C4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5358C60(uint64_t a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5, int *a6)
{
  int v7;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E9973718;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = *a6;
  sub_1D530B330(a1 + 24, a2, *a3, a4, a5);
  *(_QWORD *)(a1 + 24) = &unk_1E9978BE8;
  *(_DWORD *)(a1 + 212) = v7;
  *(_QWORD *)(a1 + 216) = 0;
  return a1;
}

void sub_1D5358CB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5358CCC(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xD8uLL);
  sub_1D52C6364(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D5358D38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1D5358D4C(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xD8uLL);
  sub_1D5358DCC((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D5358DB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5358DCC(uint64_t a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E9989698;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1D530B330(a1 + 24, a2, *a3, a4, a5);
  *(_QWORD *)(a1 + 24) = &unk_1E9978AF8;
  *(_DWORD *)(a1 + 212) = 0;
  return a1;
}

void sub_1D5358E1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D5358E30(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9989698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D5358E44(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E9989698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5358E78(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1D5358E88(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;

  sub_1D5299C2C((uint64_t)a1);
  if (!a1[3])
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 160))(&v15, a1);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v15 + 384))(&v17);
    v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
    v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
    *(_QWORD *)&v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
    *((_QWORD *)&v12 + 1) = v2;
    sub_1D534BCA8(&v17, (unint64_t *)&v14, &v13, &v12, &v19);
    sub_1D5292548((uint64_t)(a1 + 3), &v19);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v6 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = v16;
    if (v16)
    {
      v10 = (unint64_t *)&v16->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1D5358FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_1D5282EB4((uint64_t)va1);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D5359020(uint64_t a1)
{
  int v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *v11;
  int v12;
  int v13;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2192))(a1);
  v11 = &unk_1E99851F0;
  v12 = 0;
  v13 = v2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v9, a1);
  v3 = v9;
  sub_1D52850A0(__p, "MinoltaSegmentWBG");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v3 + 600))(v3, __p, &v11, 3);
  if (v8 < 0)
    operator delete(__p[0]);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1D53590F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1D5359198(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D53592B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D5359364(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;

  sub_1D5299C2C((uint64_t)a1);
  v2 = a1 + 3;
  if (!a1[3])
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a1 + 160))(&v16, a1);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v16 + 384))(&v18);
    v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
    v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
    *(_QWORD *)&v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
    *((_QWORD *)&v13 + 1) = v3;
    sub_1D5359690(&v18, (unint64_t *)&v15, &v14, &v13, &v20);
    sub_1D5292548((uint64_t)(a1 + 3), &v20);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v17;
    if (v17)
    {
      v11 = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    *(_BYTE *)(*v2 + 185) = 0;
  }
}

void sub_1D53594D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_1D5282EB4((uint64_t)va1);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D5359500(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6;
  int v7;

  v6 = &unk_1E997EA10;
  v7 = 0;
  sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE");
  (*(void (**)(uint64_t, uint64_t, void **, void **))(*(_QWORD *)a1 + 2976))(a1, a2, __p, &v6);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1D5359588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D53595A4(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_1D531CB50((char *)&v5, qword_1D544CAF8, &qword_1D544CAF8[12], 0xCuLL);
  sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE");
  v2 = (*(uint64_t (**)(uint64_t, void **, void **))(*(_QWORD *)a1 + 2968))(a1, __p, &v5);
  if (v4 < 0)
    operator delete(__p[0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 2960))(a1, v2);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
}

void sub_1D5359658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D5359690(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xF8uLL);
  sub_1D5314CE4((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D53596FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1D5359710(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  void *v52;
  std::__shared_weak_count *v53;

  sub_1D5299C2C((uint64_t)a1);
  if (!a1[3])
  {
    (*(void (**)(std::__shared_weak_count **__return_ptr, _QWORD *))(*a1 + 160))(&v50, a1);
    if (v50
      && (v2 = __dynamic_cast(v50, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9990738, 0)) != 0)
    {
      v52 = v2;
      v53 = v51;
      v3 = &v50;
    }
    else
    {
      v3 = (std::__shared_weak_count **)&v52;
    }
    *v3 = 0;
    v3[1] = 0;
    v4 = v51;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = v52;
    if (v52)
    {
      (*(void (**)(std::__shared_weak_count **__return_ptr, _QWORD *))(*a1 + 2888))(&v50, a1);
      if ((unint64_t)((char *)v51 - (char *)v50) < 5)
        v8 = (*(uint64_t (**)(void *))(*(_QWORD *)v7 + 816))(v7);
      else
        v8 = HIDWORD(v50->__vftable);
      switch(v8)
      {
        case 1:
        case 3:
        case 4:
          (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v7 + 384))(&v47, v7);
          *(_QWORD *)&v42 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
          v46 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
          *(_QWORD *)&v45 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
          *((_QWORD *)&v45 + 1) = v9;
          v44 = (*(uint64_t (**)(void *))(*(_QWORD *)v7 + 520))(v7);
          v43 = (*(uint64_t (**)(void *))(*(_QWORD *)v7 + 800))(v7);
          sub_1D535B6B0(&v47, (unint64_t *)&v42, &v46, &v45, &v44, &v43, &v49);
          sub_1D5292548((uint64_t)(a1 + 3), &v49);
          v10 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
          if (*((_QWORD *)&v49 + 1))
          {
            v11 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
            do
              v12 = __ldaxr(v11);
            while (__stlxr(v12 - 1, v11));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          v13 = v48;
          if (v48)
          {
            v14 = (unint64_t *)&v48->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            goto LABEL_47;
          }
          goto LABEL_61;
        case 2:
          v34 = (*(uint64_t (**)(_QWORD *))(*a1 + 576))(a1);
          if (v34 == 12)
            goto LABEL_59;
          if (v34 == 14)
            goto LABEL_57;
          goto LABEL_61;
        case 5:
          (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 160))(&v45, a1);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v45 + 384))(&v47);
          v46 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
          v43 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
          *(_QWORD *)&v42 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
          *((_QWORD *)&v42 + 1) = v28;
          sub_1D535BB34(&v47, (unint64_t *)&v46, &v43, &v42, &v49);
          sub_1D5292548((uint64_t)(a1 + 3), &v49);
          sub_1D5282EB4((uint64_t)&v49);
          goto LABEL_58;
        case 6:
          (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 160))(&v45, a1);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v45 + 384))(&v47);
          v46 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
          v43 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
          *(_QWORD *)&v42 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
          *((_QWORD *)&v42 + 1) = v29;
          sub_1D535B818(&v47, (unint64_t *)&v46, &v43, &v42, &v49);
          sub_1D5282EB4((uint64_t)&v47);
          sub_1D5282EB4((uint64_t)&v45);
          v30 = v49;
          v31 = (*(uint64_t (**)(_QWORD *))(*a1 + 2976))(a1);
          sub_1D5319470(v30, v31);
          sub_1D5319468(v49, 0);
          if (v51 != v50)
          {
            v32 = (int)(12 * (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1)) / 8;
            if (v32 % SLODWORD(v50->__vftable))
              sub_1D5319468(v49, ((LODWORD(v50->__vftable) + v32) & -LODWORD(v50->__vftable)) - v32);
          }
          goto LABEL_60;
        case 7:
LABEL_57:
          (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 160))(&v45, a1);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v45 + 384))(&v47);
          v46 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
          v43 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
          *(_QWORD *)&v42 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
          *((_QWORD *)&v42 + 1) = v35;
          sub_1D534BC28(&v47, (unint64_t *)&v46, &v43, &v42, &v49);
          sub_1D5292548((uint64_t)(a1 + 3), &v49);
          sub_1D5282EB4((uint64_t)&v49);
LABEL_58:
          sub_1D5282EB4((uint64_t)&v47);
          sub_1D5282EB4((uint64_t)&v45);
          goto LABEL_61;
        case 8:
          (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 160))(&v45, a1);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v45 + 384))(&v47);
          v46 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
          v43 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
          *(_QWORD *)&v42 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
          *((_QWORD *)&v42 + 1) = v33;
          v44 = 8;
          sub_1D535B9E0(&v47, (unint64_t *)&v46, &v43, &v42, &v44, &v49);
          sub_1D5292548((uint64_t)(a1 + 3), &v49);
          sub_1D5282EB4((uint64_t)&v49);
          sub_1D5282EB4((uint64_t)&v47);
          sub_1D5282EB4((uint64_t)&v45);
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)a1[3] + 48))(a1[3], 3);
          goto LABEL_61;
        case 9:
LABEL_59:
          (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 160))(&v45, a1);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v45 + 384))(&v47);
          v46 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
          v43 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
          *(_QWORD *)&v42 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
          *((_QWORD *)&v42 + 1) = v36;
          sub_1D534BCA8(&v47, (unint64_t *)&v46, &v43, &v42, &v49);
          sub_1D5282EB4((uint64_t)&v47);
          sub_1D5282EB4((uint64_t)&v45);
          v37 = v49;
          v38 = (*(uint64_t (**)(_QWORD *))(*a1 + 2976))(a1);
          sub_1D5319470(v37, v38);
          sub_1D5319468(v49, 0);
LABEL_60:
          sub_1D52908C8(a1 + 3, (uint64_t *)&v49);
          sub_1D5282EB4((uint64_t)&v49);
          goto LABEL_61;
        case 10:
          goto LABEL_31;
        case 11:
        case 12:
          goto LABEL_61;
        case 13:
        case 14:
          v49 = 0uLL;
          sub_1D5292548((uint64_t)(a1 + 3), &v49);
          v13 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
          if (!*((_QWORD *)&v49 + 1))
            goto LABEL_61;
          v16 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
          do
            v15 = __ldaxr(v16);
          while (__stlxr(v15 - 1, v16));
          goto LABEL_47;
        default:
          if (v8 != 100006)
            goto LABEL_61;
LABEL_31:
          (*(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 160))(&v45, a1);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v45 + 384))(&v47);
          v46 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
          v43 = (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1);
          *(_QWORD *)&v42 = (*(uint64_t (**)(_QWORD *))(*a1 + 432))(a1);
          *((_QWORD *)&v42 + 1) = v17;
          sub_1D535B898(&v47, (unint64_t *)&v46, &v43, &v42, &v49);
          v18 = v48;
          if (v48)
          {
            v19 = (unint64_t *)&v48->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
          v21 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
          if (*((_QWORD *)&v45 + 1))
          {
            v22 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          v24 = v49;
          v25 = (*(uint64_t (**)(_QWORD *))(*a1 + 2976))(a1);
          sub_1D5319470(v24, v25);
          sub_1D5319468(v49, 0);
          if (v51 != v50)
          {
            v26 = (int)(14 * (*(uint64_t (**)(_QWORD *))(*a1 + 408))(a1)) / 8;
            if (v26 % SLODWORD(v50->__vftable))
              sub_1D5319468(v49, ((LODWORD(v50->__vftable) + v26) & -LODWORD(v50->__vftable)) - v26);
          }
          sub_1D52908C8(a1 + 3, (uint64_t *)&v49);
          v13 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
          if (*((_QWORD *)&v49 + 1))
          {
            v27 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
            do
              v15 = __ldaxr(v27);
            while (__stlxr(v15 - 1, v27));
LABEL_47:
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
LABEL_61:
          if (v50)
          {
            v51 = v50;
            operator delete(v50);
          }
          break;
      }
    }
    v39 = v53;
    if (v53)
    {
      v40 = (unint64_t *)&v53->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
}

void sub_1D535A0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v8;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_1D5282EB4((uint64_t)va1);
  sub_1D5282EB4((uint64_t)va);
  v8 = *(void **)(v6 - 80);
  if (v8)
  {
    *(_QWORD *)(v6 - 72) = v8;
    operator delete(v8);
  }
  sub_1D5282EB4(v6 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_1D535A24C(uint64_t a1)
{
  void *v1;
  void **p_lpsrc;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v12;
  void *v13;
  std::__shared_weak_count *v14;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v1 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9990738, 0)) != 0)
  {
    v13 = v1;
    v14 = v12;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v13;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v13)
    v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 792))(v13);
  else
    v6 = 0;
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1D535A34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D535A360()
{
  return 1;
}

uint64_t sub_1D535A368(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  void **v12;
  void *v13;
  uint64_t v14;
  std::__shared_weak_count *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v21;
  void *v23;
  std::__shared_weak_count *v24;
  unsigned __int8 v25;
  void *__p[2];
  unsigned __int8 v27;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&v23);
  v2 = v23;
  sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE");
  v3 = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v2 + 264))(v2, __p);
  if ((char)v27 < 0)
    operator delete(__p[0]);
  v4 = v24;
  if (!v24)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if ((_DWORD)v3)
      return v3;
  }
  else
  {
LABEL_7:
    if ((_DWORD)v3)
      return v3;
  }
  v3 = sub_1D52973E0(a1);
  if (!(_DWORD)v3)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v23, a1);
    v7 = v23;
    sub_1D52850A0(__p, "IFD0:EXIF:MAKERNOTE:ISOInfo");
    v3 = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v7 + 264))(v7, __p);
    if ((char)v27 < 0)
      operator delete(__p[0]);
    v8 = v24;
    if (v24)
    {
      v9 = (unint64_t *)&v24->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (!(_DWORD)v3)
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 224))(__p, a1);
      v11 = v27;
      if ((v27 & 0x80u) != 0)
        v11 = (unint64_t)__p[1];
      if (v11 != 13)
        goto LABEL_26;
      v12 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v12 = __p;
      v13 = *v12;
      v14 = *(uint64_t *)((char *)v12 + 5);
      if (v13 == (void *)0x205849504C4F4F43 && v14 == 0x3030303750205849)
      {
        v21 = 1;
        if ((v27 & 0x80) == 0)
        {
LABEL_44:
          if (v21)
            return 6400;
          else
            return 0;
        }
      }
      else
      {
LABEL_26:
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 224))(&v23, a1);
        v16 = (std::__shared_weak_count *)v25;
        if ((v25 & 0x80u) != 0)
          v16 = v24;
        if (v16 == (std::__shared_weak_count *)13)
        {
          v17 = (uint64_t *)v23;
          if ((v25 & 0x80u) == 0)
            v17 = (uint64_t *)&v23;
          v18 = *v17;
          v19 = *(uint64_t *)((char *)v17 + 5);
          v21 = v18 == 0x205849504C4F4F43 && v19 == 0x3030313750205849;
        }
        else
        {
          v21 = 0;
        }
        if ((char)v25 < 0)
          operator delete(v23);
        if ((v27 & 0x80) == 0)
          goto LABEL_44;
      }
      operator delete(__p[0]);
      goto LABEL_44;
    }
  }
  return v3;
}

void sub_1D535A5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D535A634(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  int v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v11);
  v2 = v11;
  v3 = off_1EFF31EA8[0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D535A728;
  v10[3] = &unk_1E998AE60;
  v10[4] = a1;
  v5 = sub_1D5330F8C(v2, v3, v4, v10);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1D535A714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D535A728(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 160))(&v6);
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 512))(v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1D535A7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *sub_1D535A7C0(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void **p_lpsrc;
  int v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned __int16 v31;
  unsigned int v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *lpsrc;
  std::__shared_weak_count *v48;
  void *v49;
  std::__shared_weak_count *v50;

  v3 = a2;
  if (objc_msgSend_isEqualToString_(v3, v4, (uint64_t)CFSTR("highSpeedCropMode"), v5, v6))
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2968))(a1);
    objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v11, v10, v12, v13);
    v14 = (std::__shared_weak_count *)objc_claimAutoreleasedReturnValue();
LABEL_36:
    v34 = v14;
    goto LABEL_37;
  }
  if (objc_msgSend_isEqualToString_(v3, v7, (uint64_t)CFSTR("isMultipleExposure"), v8, v9))
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2952))(a1);
    v19 = (void *)MEMORY[0x1E0C9AAA0];
    if (v18)
      v19 = (void *)MEMORY[0x1E0C9AAB0];
    v14 = v19;
    goto LABEL_36;
  }
  if (!objc_msgSend_isEqualToString_(v3, v15, (uint64_t)CFSTR("NEFCompression"), v16, v17))
  {
    if (objc_msgSend_isEqualToString_(v3, v20, (uint64_t)CFSTR("sensorBitDepth"), v21, v22))
    {
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
      v26 = *(_QWORD *)a1;
      if (v25)
      {
        v30 = (*(__int16 (**)(uint64_t))(v26 + 864))(a1);
        if (v30 < 0)
        {
          v31 = 16;
        }
        else
        {
          v31 = 16;
          v32 = 0x8000;
          do
          {
            if (!--v31)
              break;
            v33 = (unsigned __int16)v30 & (v32 >> 1);
            v32 >>= 1;
          }
          while (!v33);
        }
      }
      else
      {
        v31 = (*(uint64_t (**)(uint64_t))(v26 + 576))(a1);
      }
      objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v27, v31, v28, v29);
      v14 = (std::__shared_weak_count *)objc_claimAutoreleasedReturnValue();
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&lpsrc, a1);
  if (lpsrc
    && (v23 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9990738, 0)) != 0)
  {
    v49 = v23;
    v50 = v48;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v49;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v34 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v49;
  if (v49)
  {
    v38 = (void *)MEMORY[0x1E0CB37E8];
    v39 = (*(uint64_t (**)(void *))(*(_QWORD *)v49 + 816))(v49);
    objc_msgSend_numberWithInt_(v38, v40, v39, v41, v42);
    v34 = (std::__shared_weak_count *)objc_claimAutoreleasedReturnValue();
  }
  v43 = v50;
  if (v50)
  {
    v44 = (unint64_t *)&v50->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (!v37)
  {
LABEL_32:
    sub_1D54210E0(a1, v3);
    v14 = (std::__shared_weak_count *)objc_claimAutoreleasedReturnValue();
    goto LABEL_36;
  }
LABEL_37:

  return v34;
}

void sub_1D535AA3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D535AA6C(uint64_t a1)
{
  void *v1;
  void **p_lpsrc;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v12;
  void *v13;
  std::__shared_weak_count *v14;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v1 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9990738, 0)) != 0)
  {
    v13 = v1;
    v14 = v12;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v13;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v13)
    v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 784))(v13);
  else
    v6 = 0;
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1D535AB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D535AB80(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  void **v5;
  void *v6;
  int v7;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  void **v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void **v19;
  int v20;
  unint64_t *v21;
  void *v22;
  unint64_t *v23;
  std::__shared_weak_count *v24;
  unsigned __int8 v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void *__p;
  std::__shared_weak_count *v33;
  unsigned __int8 v34;
  void *v35;
  std::__shared_weak_count *v36;
  void *v37[2];
  uint64_t v38;
  void *v39;
  void *v40[2];
  unsigned __int8 v41;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 2200))(v40);
  if ((v41 & 0x80u) == 0)
    v4 = v41;
  else
    v4 = (unint64_t)v40[1];
  if (v4 == 24)
  {
    if ((v41 & 0x80u) == 0)
      v14 = v40;
    else
      v14 = (void **)v40[0];
    if (memcmp(v14, "IFD0:EXIF:MAKERNOTE:0x14", 0x18uLL))
      goto LABEL_37;
    v35 = &unk_1E997C018;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&__p, a1);
    v15 = __p;
    sub_1D52850A0(v37, "IFD0:EXIF:MAKERNOTE:0x14");
    (*(void (**)(void *, void **, void **, uint64_t))(*(_QWORD *)v15 + 600))(v15, v37, &v35, 3);
    if (SHIBYTE(v38) < 0)
      operator delete(v37[0]);
    v16 = v33;
    if (!v33)
      goto LABEL_42;
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    goto LABEL_40;
  }
  if (v4 == 10)
  {
    if ((v41 & 0x80u) == 0)
      v19 = v40;
    else
      v19 = (void **)v40[0];
    if (memcmp(v19, "encrypted2", 0xAuLL))
    {
LABEL_37:
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2192))(a1);
      v37[0] = &unk_1E99851F0;
      LODWORD(v37[1]) = 0;
      HIDWORD(v37[1]) = v20;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&__p, a1);
      (*(void (**)(void *, void **, void **, uint64_t))(*(_QWORD *)__p + 600))(__p, v40, v37, 3);
      v16 = v33;
      if (!v33)
        goto LABEL_42;
      v21 = (unint64_t *)&v33->__shared_owners_;
      do
        v18 = __ldaxr(v21);
      while (__stlxr(v18 - 1, v21));
      goto LABEL_40;
    }
    v35 = &unk_1E997C018;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&__p, a1);
    v22 = __p;
    sub_1D52850A0(v37, "encrypted2");
    (*(void (**)(void *, void **, void **, uint64_t))(*(_QWORD *)v22 + 600))(v22, v37, &v35, 3);
    if (SHIBYTE(v38) < 0)
      operator delete(v37[0]);
    v16 = v33;
    if (!v33)
      goto LABEL_42;
    v23 = (unint64_t *)&v33->__shared_owners_;
    do
      v18 = __ldaxr(v23);
    while (__stlxr(v18 - 1, v23));
LABEL_40:
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    goto LABEL_42;
  }
  if (v4 != 9)
    goto LABEL_37;
  v5 = v40;
  if ((v41 & 0x80u) != 0)
    v5 = (void **)v40[0];
  v6 = *v5;
  v7 = *((unsigned __int8 *)v5 + 8);
  if (v6 != (void *)0x6574707972636E65 || v7 != 100)
    goto LABEL_37;
  v39 = &unk_1E997C018;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v35, a1);
  v9 = v35;
  sub_1D52850A0(&__p, "encrypted");
  (*(void (**)(void **__return_ptr, void *, void **, void **, uint64_t))(*(_QWORD *)v9 + 600))(v37, v9, &__p, &v39, 3);
  if ((char)v34 < 0)
    operator delete(__p);
  v10 = v36;
  if (v36)
  {
    v11 = (unint64_t *)&v36->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v37[1];
  if (v37[1] == v37[0])
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 2208))(&__p, a1);
    v24 = (std::__shared_weak_count *)v34;
    v25 = v34;
    if ((v34 & 0x80u) != 0)
      v24 = v33;
    if (v24)
    {
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2192))(a1);
      v35 = &unk_1E99851F0;
      LODWORD(v36) = 0;
      HIDWORD(v36) = v26;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v30, a1);
      (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v30 + 600))(v30, &__p, &v35, 3);
      v27 = v31;
      if (v31)
      {
        v28 = (unint64_t *)&v31->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v25 = v34;
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)v37;
      *(_QWORD *)(a2 + 16) = v38;
      v37[1] = 0;
      v38 = 0;
      v37[0] = 0;
    }
    if ((v25 & 0x80) != 0)
      operator delete(__p);
    if (v37[0])
    {
      v37[1] = v37[0];
      operator delete(v37[0]);
    }
  }
  else
  {
    *(void **)a2 = v37[0];
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 16) = v38;
  }
LABEL_42:
  if ((char)v41 < 0)
    operator delete(v40[0]);
}

void sub_1D535AFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  sub_1D5282EB4((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  if (*(char *)(v25 - 33) < 0)
    operator delete(*(void **)(v25 - 56));
  _Unwind_Resume(a1);
}

void sub_1D535B094(uint64_t a1@<X0>, void **a2@<X8>)
{
  int v4;
  uint64_t v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  void *v11;
  __CFString *v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[5];
  void *__p;
  std::__shared_weak_count *v19;
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 960))(a1);
  if (v4 != 11)
  {
    if (v4 != 10)
    {
      sub_1D5422158(a1, a2);
      return;
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v21, a1);
    v5 = v21;
    sub_1D52850A0(&__p, "IFD0:EXIF:MAKERNOTE:BLACKLEVELS");
    v6 = (*(uint64_t (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v5 + 248))(v5, &__p, a2, 0);
    if (v20 < 0)
      operator delete(__p);
    v7 = v22;
    if (!v22)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((v6 & 1) != 0)
        return;
    }
    else
    {
LABEL_9:
      if ((v6 & 1) != 0)
        return;
    }
    v10 = *a2;
    if (*a2)
    {
      a2[1] = v10;
      operator delete(v10);
    }
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&__p, a1);
  v11 = __p;
  v12 = off_1EFF31DF0[0];
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = sub_1D535B2B8;
  v17[3] = &unk_1E9978FB8;
  v17[4] = a1;
  sub_1D531B308((uint64_t)v11, v12, v13, v17, a2);
  v14 = v19;
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1D535B264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  void *v22;

  if (a19 < 0)
    operator delete(__p);
  sub_1D5282EB4(v20 - 48);
  v22 = *(void **)v19;
  if (*(_QWORD *)v19)
  {
    *(_QWORD *)(v19 + 8) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

void sub_1D535B2B8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_1D5422158(*(_QWORD *)(a1 + 32), a2);
}

uint64_t sub_1D535B2C0(uint64_t a1)
{
  void *v2;
  void **p_lpsrc;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *lpsrc;
  std::__shared_weak_count *v15;
  void *v16;
  std::__shared_weak_count *v17;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v2 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9990738, 0)) != 0)
  {
    v16 = v2;
    v17 = v15;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v16;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v4 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (v16
    && (*(unsigned int (**)(void *))(*(_QWORD *)v16 + 848))(v16)
    && (*(unsigned int (**)(void *))(*(_QWORD *)v7 + 840))(v7)
    && ((*(unsigned int (**)(void *))(*(_QWORD *)v7 + 856))(v7)
     && (*(unsigned int (**)(void *))(*(_QWORD *)v7 + 856))(v7) != 2
     || (v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2776))(a1),
         ((*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v7 + 936))(v7, v8) & 1) != 0)))
  {
    v9 = 9;
  }
  else
  {
    v9 = sub_1D532B49C(a1);
  }
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_1D535B43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1D535B450(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2808))(a1) == 9;
}

uint64_t sub_1D535B474(uint64_t a1)
{
  if ((sub_1D5297E24(a1) & 1) != 0)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1) & 1) != 0)
    return 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2800))(a1);
}

uint64_t sub_1D535B4D0(uint64_t a1)
{
  void *v2;
  void **p_lpsrc;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *lpsrc;
  std::__shared_weak_count *v15;
  void *v16;
  std::__shared_weak_count *v17;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&lpsrc);
  if (lpsrc
    && (v2 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9970660, (const struct __class_type_info *)&unk_1E9990738, 0)) != 0)
  {
    v16 = v2;
    v17 = v15;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = &v16;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v4 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v16;
  if (v16
    && ((*(unsigned int (**)(void *))(*(_QWORD *)v16 + 904))(v16)
     && (*(unsigned int (**)(void *))(*(_QWORD *)v7 + 896))(v7)
     && (*(unsigned int (**)(void *))(*(_QWORD *)v7 + 896))(v7) != 2
     || (v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2776))(a1),
         ((*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v7 + 960))(v7, v8) & 1) != 0)))
  {
    v9 = 2;
  }
  else
  {
    v9 = sub_1D532B628(a1);
  }
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_1D535B638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1D535B64C(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2832))(a1) == 2;
}

uint64_t sub_1D535B670(uint64_t a1)
{
  if ((sub_1D5297E2C(a1) & 1) != 0)
    return 0;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
}

void sub_1D535B6B0(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, int *a5@<X5>, uint64_t *a6@<X6>, _QWORD *a7@<X8>)
{
  _QWORD *v14;

  v14 = operator new(0xE8uLL);
  sub_1D535B748((uint64_t)v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  sub_1D5285658((uint64_t)a7, v14 + 4, (uint64_t)(v14 + 3));
}

void sub_1D535B734(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D535B748(uint64_t a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5, int *a6, uint64_t *a7)
{
  int v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E998BA60;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *a6;
  v9 = *a7;
  sub_1D530B330(a1 + 24, a2, *a3, a4, a5);
  *(_QWORD *)(a1 + 24) = &unk_1E9978918;
  *(_QWORD *)(a1 + 216) = v9;
  *(_DWORD *)(a1 + 224) = v8;
  return a1;
}

void sub_1D535B7AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D535B7C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E998BA60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D535B7D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E998BA60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D535B808(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1D535B818(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xE8uLL);
  sub_1D52EFEF4(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D535B884(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1D535B898(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xE8uLL);
  sub_1D535B918(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D535B904(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D535B918(_QWORD *a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5)
{
  a1[2] = 0;
  *a1 = &unk_1E998BAB0;
  a1[1] = 0;
  sub_1D530B330((uint64_t)(a1 + 3), a2, *a3, a4, a5);
  a1[3] = &unk_1E99A6A20;
  *(_QWORD *)((char *)a1 + 212) = 0x100000000;
  a1[28] = 0;
  return a1;
}

void sub_1D535B974(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D535B988(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E998BAB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D535B99C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E998BAB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D535B9D0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1D535B9E0(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, int *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;

  v12 = operator new(0xE0uLL);
  sub_1D535BA70((uint64_t)v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  sub_1D5285658((uint64_t)a6, v12 + 4, (uint64_t)(v12 + 3));
}

void sub_1D535BA5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D535BA70(uint64_t a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5, int *a6)
{
  int v7;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E998BB00;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = *a6;
  sub_1D530B330(a1 + 24, a2, *a3, a4, a5);
  *(_QWORD *)(a1 + 24) = &unk_1E998DA38;
  *(_DWORD *)(a1 + 212) = v7;
  *(_QWORD *)(a1 + 216) = 0;
  return a1;
}

void sub_1D535BAC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D535BADC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E998BB00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D535BAF0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E998BB00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D535BB24(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1D535BB34(_QWORD *a1@<X1>, unint64_t *a2@<X2>, _QWORD *a3@<X3>, _OWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0xD8uLL);
  sub_1D535BBB4(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  sub_1D5285658((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1D535BBA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D535BBB4(_QWORD *a1, _QWORD *a2, unint64_t *a3, _QWORD *a4, _OWORD *a5)
{
  a1[2] = 0;
  *a1 = &unk_1E998BB50;
  a1[1] = 0;
  sub_1D530B330((uint64_t)(a1 + 3), a2, *a3, a4, a5);
  a1[3] = &unk_1E9990200;
  return a1;
}

void sub_1D535BC00(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1D535BC14(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E998BB50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1D535BC28(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E998BB50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D535BC5C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

char *sub_1D535BC6C(_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int16 v12;
  unsigned int v13;
  void *exception;

  result = sub_1D536F4C0((uint64_t)a1, a2);
  v5 = a1[24];
  v4 = a1[25];
  v6 = (v4 - v5) >> 1;
  v7 = a1[36];
  v8 = a1[37] - v7;
  if (v6 > v8 >> 1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v4 != v5)
  {
    v9 = 0;
    v10 = v8 >> 1;
    do
    {
      *(_WORD *)(v7 + 2 * v9) = *(_WORD *)(v5 + 2 * v9);
      ++v9;
    }
    while (v6 > v9);
    v11 = v9;
    if (v10 > v9)
    {
      v12 = *(_WORD *)(v7 + 2 * v9 - 2);
      v13 = v9 + 1;
      do
      {
        *(_WORD *)(v7 + 2 * v11) = v12;
        v11 = v13;
      }
      while (v10 > v13++);
    }
  }
  return result;
}

void sub_1D535BD28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D535BD3C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int *a6, uint64_t a7, int *a8)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  signed int v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  _WORD *v33;
  char *v34;
  unsigned __int8 *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _WORD *v46;
  unint64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  _WORD *v56;
  char v57;
  unint64_t v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _WORD *v69;
  int v70;
  int v71;
  char v72;
  int v73;
  char v74;
  unint64_t v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _WORD *v88;
  int v89;
  int v90;
  char v91;
  int v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  __int16 v107;
  char *v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  unsigned __int8 *v116;
  uint64_t v117;
  unint64_t v118;
  _WORD *v119;
  uint64_t v120;
  unint64_t v121;
  _WORD *v122;
  unsigned int v123;
  int v124;
  uint64_t v125;
  unint64_t v126;
  _WORD *v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  unint64_t v133;
  _WORD *v134;
  unsigned int v135;
  int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  unint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  unsigned __int8 *v160;
  uint64_t v161;
  unint64_t v162;
  _WORD *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _WORD *v168;
  unsigned __int8 v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  _WORD *v173;
  unsigned __int8 v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  unint64_t v184;
  uint64_t v185;
  unsigned int v186;
  unsigned int v187;
  int v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  _WORD *v194;
  unsigned __int8 *v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  int v204;
  unsigned int v205;
  int v206;
  int v207;
  unsigned int v208;
  int v209;
  int v210;
  unsigned int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  unsigned int v222;
  int v223;
  unsigned int v224;
  unsigned int v225;
  int v226;
  char v227;
  unint64_t v228;
  int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  int v233;
  int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  int v238;
  int v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  int v257;
  int v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  int v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  int v266;
  unsigned int v267;
  int v268;
  int v269;
  unsigned int v270;
  int v271;
  int v272;
  unsigned int v273;
  int v274;
  int v275;
  unsigned int v276;
  unsigned int v277;
  char v278;
  int v279;
  unsigned int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  char v284;
  int v285;
  char v286;
  unint64_t v287;
  int v288;
  unsigned int v289;
  int v290;
  unsigned int v291;
  int v292;
  unsigned int v293;
  int v294;
  int v295;
  unsigned int v296;
  int v297;
  unsigned int v298;
  int v299;
  unsigned int v300;
  int v301;
  int v302;
  unsigned int v303;
  int v304;
  unsigned int v305;
  int v306;
  unsigned int v307;
  int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unsigned int v323;
  unint64_t v324;
  unsigned int v325;
  int v326;
  unint64_t v327;
  unsigned int v328;
  unint64_t v329;
  unsigned int v330;
  int v331;
  int v332;
  unint64_t v333;
  unsigned int v334;
  int v335;
  int v336;
  unint64_t v337;
  unsigned int v338;
  int v339;
  int v340;
  int v341;
  unint64_t v342;
  unsigned int v343;
  int v344;
  int v345;
  unint64_t v346;
  unsigned int v347;
  int v348;
  int v349;
  unint64_t v350;
  unsigned int v351;
  int v352;
  int v353;
  unint64_t v354;
  unsigned int v355;
  unsigned int v356;
  int v357;
  int v358;
  unint64_t v359;
  unsigned int v360;
  int v361;
  int v362;
  unint64_t v363;
  unsigned int v364;
  char v365;
  int v366;
  unint64_t v367;
  int v368;
  char v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  _BOOL8 v374;
  _BOOL8 v375;
  _WORD *v376;
  unint64_t v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  uint64_t v381;
  __int16 v382;
  __int16 v383;
  __int16 v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  void *v394;
  void *v395;
  void *v396;
  void *v397;
  void *exception;
  void *v399;
  unint64_t v400;
  unsigned int v401;
  unsigned int v402;
  int v403;
  int v404;
  int v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  int v425;
  int v426;
  int v427;
  unsigned int v428;
  unsigned int v429;
  unsigned int v430;
  unsigned int v431;
  unsigned int v432;
  unsigned int v433;
  char v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int v437;
  unsigned int v438;
  unsigned int v439;
  int v440;
  int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  int v448;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  unsigned int v459;
  unsigned int v460;
  char v461;
  char v462;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  unsigned int v471;
  unsigned int v472;
  unsigned int v473;
  unsigned int v474;
  unsigned int v475;
  unsigned int v476;
  unsigned int v477;
  unsigned int v478;
  unsigned int v479;
  char v480;
  int v481;
  int v482;
  unsigned int v483;
  unsigned int v484;
  unsigned int v485;
  unsigned int v486;
  unsigned int v487;
  unsigned int v488;
  unsigned int v489;
  char v490;
  char v491;
  int v492;
  int v493;
  int v494;
  int v495;
  int v496;
  int v497;
  int v498;
  int v499;
  int v500;
  int v501;
  int v502;
  unsigned int v503;
  unsigned int v504;
  unsigned int v505;
  unsigned int v506;
  unsigned int v507;
  unsigned int v508;
  unsigned int v509;
  unsigned int v510;
  unsigned int v511;
  unsigned int v512;
  char v513;
  int v514;
  int v515;
  int v516;
  int v517;
  int v518;
  int v519;
  int v520;
  int v521;
  int v522;
  int v523;
  int v524;
  unsigned int v525;
  unsigned int v526;
  int v527;
  int v528;
  int v529;
  unsigned int v530;
  int v531;
  int v532;
  int v533;
  int v534;
  int v535;
  int v536;
  int v537;
  int v538;
  int v539;
  int v540;
  unsigned int v541;
  unsigned int v542;
  unsigned int v543;
  unsigned int v544;
  unsigned int v545;
  unsigned int v546;
  unsigned int v547;
  unsigned int v548;
  unsigned int v549;
  unsigned int v550;
  unsigned int v551;
  unsigned int v552;
  unsigned int v553;
  unsigned int v554;
  unsigned int v555;
  unsigned int v556;
  unsigned int v557;
  unsigned int v558;
  unsigned int v559;
  char *v560;
  int v561;
  int v562;
  unsigned int v563;
  unsigned int v564;
  unsigned int v565;
  unsigned int v566;
  unsigned int v567;
  unsigned int v568;
  unsigned int v569;
  unsigned int v570;
  unsigned int v571;
  unsigned int v572;
  unsigned int v573;
  unsigned int v574;
  unsigned int v575;
  unsigned int v576;
  unsigned int v577;
  unsigned int v578;
  unsigned int v579;
  unsigned int v580;
  unsigned int v581;
  unsigned int v582;
  unsigned int v583;
  unsigned int v584;
  char v585;
  char v586;
  int v588;
  int v589;
  int v590;
  int v591;
  unsigned int v592;
  unsigned int v593;
  unsigned int v594;
  unsigned int v595;
  unsigned int v596;
  unsigned int v597;
  unsigned int v598;
  unsigned int v599;
  unsigned int v600;
  unsigned int v601;
  unsigned int v602;
  char v603;
  int v604;
  int v605;
  int v606;
  int v607;
  int v608;
  int v609;
  int v610;
  int v611;
  int v612;
  int v613;
  int v614;
  int v615;
  int v616;
  int v617;
  uint64_t v618;
  uint64_t v619;
  unint64_t v620;
  unint64_t v621;
  unint64_t v622;
  int *v623;
  unint64_t v624;
  unint64_t v628;
  uint64_t v630;
  unint64_t v631;
  unint64_t v632;
  int v633;
  void *v634[3];
  unint64_t v635[3];

  v635[1] = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) != 1
    || (v10 = a8[2], v10 >= 32000)
    || (v11 = a8[3], v11 >= 32000))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v13 = *a6;
  v12 = a6[1];
  v14 = a8[1];
  v15 = *a8;
  if (v12 <= v14)
    v16 = a8[1];
  else
    v16 = a6[1];
  v17 = a6[2];
  v18 = a6[3] + v12;
  v19 = v14 + v11;
  if (v19 >= v18)
    v19 = v18;
  v20 = v19;
  if (v13 <= (int)v15)
    v21 = *a8;
  else
    v21 = *a6;
  if ((int)v15 + v10 >= v17 + v13)
    v22 = v17 + v13;
  else
    v22 = v15 + v10;
  v23 = *(unsigned __int16 *)(a1 + 280);
  v24 = *(unsigned __int16 *)(a1 + 220);
  v630 = (uint64_t)(int)(v10 * v23 * v24 + (v10 * (int)v23 * (int)v24 < 0 ? 7 : 0)) >> 3;
  sub_1D5285340(v634, (v19 - (uint64_t)v16) * v630);
  v631 = v21;
  v628 = v20;
  v624 = v16;
  v25 = a1;
  if (v16 < v20)
  {
    v26 = 0;
    v27 = ((unint64_t)((v21 - v15) * v23 * v24) >> 3) + a4;
    v28 = v624;
    do
    {
      v29 = *(_QWORD *)(v25 + 24);
      v635[0] = v27 + (v28 - a8[1]) * v630;
      sub_1D5282FE0(&v633, v635);
      (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v29 + 40))(v29, &v633, 0);
      (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), (char *)v634[0] + v26, v630);
      ++v28;
      v26 += v630;
      v25 = a1;
    }
    while (v28 < v20);
  }
  v632 = v22;
  v623 = a8;
  if (*(_BYTE *)(v25 + 312)
    && (v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 224))(v25), v25 = a1, v30 == 1))
  {
    if (v624 < v20)
    {
      if (((v22 - (uint64_t)v21) & 0x8000000000000000) == 0)
      {
        v619 = 0;
        v618 = 4 * (v22 - (uint64_t)v21);
        v31 = 0x1FFFEu;
        v32 = v624;
        while (1)
        {
          v33 = (_WORD *)(a2 + (v32 - a6[1]) * a7 + 2 * (v631 - *a6));
          if ((unint64_t)&v33[v618] > a2 + 2 * a3)
            break;
          v621 = v32;
          v34 = (char *)v634[0];
          v35 = (unsigned __int8 *)v634[0] + (v32 - v624) * v630;
          switch(*(_WORD *)(v25 + 280))
          {
            case 8:
              if ((a8[2] & 3) != 0)
                goto LABEL_306;
              v36 = v631;
              if (v631 < v632)
              {
                do
                {
                  v37 = *v35;
                  v38 = *(_QWORD *)(v25 + 288);
                  if (qword_1EFF11DC8 != -1)
                  {
                    dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                    v25 = a1;
                  }
                  LOWORD(v635[0]) = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v38 + 2 * v37));
                  v39 = v35[1];
                  v40 = *(_QWORD *)(v25 + 288);
                  if (qword_1EFF11DC8 != -1)
                  {
                    dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                    v25 = a1;
                  }
                  WORD1(v635[0]) = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v40 + 2 * v39));
                  v41 = v35[2];
                  v42 = *(_QWORD *)(v25 + 288);
                  if (qword_1EFF11DC8 != -1)
                  {
                    dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                    v25 = a1;
                  }
                  WORD2(v635[0]) = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v42 + 2 * v41));
                  v43 = v35[3];
                  v44 = *(_QWORD *)(v25 + 288);
                  if (qword_1EFF11DC8 != -1)
                  {
                    dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                    v25 = a1;
                  }
                  v45 = 0;
                  HIWORD(v635[0]) = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v44 + 2 * v43));
                  do
                  {
                    *v33 = *(_WORD *)((char *)v635 + v45);
                    v33[1] = *(_WORD *)((char *)v635 + v45);
                    v33[2] = *(_WORD *)((char *)v635 + v45);
                    if (qword_1EFF11DC8 != -1)
                    {
                      dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                      v25 = a1;
                    }
                    v46 = v33 + 4;
                    v33[3] = *(_WORD *)((char *)xmmword_1EFF11DD0 + v31);
                    v45 += 2;
                    v33 += 4;
                  }
                  while (v45 != 8);
                  v36 += 4;
                  v35 += 4;
                  v33 = v46;
                }
                while (v36 < v632);
              }
              break;
            case 0xA:
              if ((a8[2] & 3) != 0)
                goto LABEL_306;
              v58 = v631;
              if (v631 < v632)
              {
                do
                {
                  v59 = *v35;
                  v60 = v35[1];
                  v61 = v35[2];
                  v62 = v35[3];
                  v63 = v35[4];
                  v64 = *(_QWORD *)(v25 + 288);
                  if (qword_1EFF11DC8 != -1)
                  {
                    v502 = v35[4];
                    v554 = v35[3];
                    v525 = v35[2];
                    dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                    v61 = v525;
                    v62 = v554;
                    v63 = v502;
                    v25 = a1;
                  }
                  LOWORD(v635[0]) = *((_WORD *)xmmword_1EFF11DD0
                                    + *(unsigned __int16 *)(v64 + 2 * ((v60 >> 6) | (4 * v59))));
                  v65 = *(_QWORD *)(v25 + 288);
                  if (qword_1EFF11DC8 != -1)
                  {
                    v70 = v63;
                    v555 = v62;
                    v526 = v61;
                    dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                    v61 = v526;
                    v62 = v555;
                    v63 = v70;
                    v25 = a1;
                  }
                  WORD1(v635[0]) = *((_WORD *)xmmword_1EFF11DD0
                                   + *(unsigned __int16 *)(v65 + 2 * ((v61 >> 4) & 0xFFFFFC0F | (16 * (v60 & 0x3F)))));
                  v66 = *(_QWORD *)(v25 + 288);
                  if (qword_1EFF11DC8 != -1)
                  {
                    v71 = v63;
                    v556 = v62;
                    v72 = v61;
                    dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                    LOBYTE(v61) = v72;
                    v62 = v556;
                    v63 = v71;
                    v25 = a1;
                  }
                  WORD2(v635[0]) = *((_WORD *)xmmword_1EFF11DD0
                                   + *(unsigned __int16 *)(v66 + 2 * ((v62 >> 2) & 0xFFFFFC3F | ((v61 & 0xF) << 6))));
                  v67 = *(_QWORD *)(v25 + 288);
                  if (qword_1EFF11DC8 != -1)
                  {
                    v73 = v63;
                    v74 = v62;
                    dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                    LOBYTE(v62) = v74;
                    v63 = v73;
                    v25 = a1;
                  }
                  v68 = 0;
                  v35 += 5;
                  HIWORD(v635[0]) = *((_WORD *)xmmword_1EFF11DD0
                                    + *(unsigned __int16 *)(v67 + 2 * (v63 & 0xFFFFFCFF | ((v62 & 3) << 8))));
                  do
                  {
                    *v33 = *(_WORD *)((char *)v635 + v68);
                    v33[1] = *(_WORD *)((char *)v635 + v68);
                    v33[2] = *(_WORD *)((char *)v635 + v68);
                    if (qword_1EFF11DC8 != -1)
                    {
                      dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                      v25 = a1;
                    }
                    v69 = v33 + 4;
                    v33[3] = *(_WORD *)((char *)xmmword_1EFF11DD0 + v31);
                    v68 += 2;
                    v33 += 4;
                  }
                  while (v68 != 8);
                  v58 += 4;
                  v33 = v69;
                }
                while (v58 < v632);
              }
              break;
            case 0xC:
              if ((a8[2] & 1) != 0)
                goto LABEL_306;
              v47 = v631;
              if (v631 < v632)
              {
                do
                {
                  v48 = *v35;
                  v49 = v35[1];
                  v50 = v35[2];
                  v51 = *(_QWORD *)(v25 + 288);
                  if (qword_1EFF11DC8 != -1)
                  {
                    v553 = v35[1];
                    dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                    v49 = v553;
                    v25 = a1;
                  }
                  LOWORD(v635[0]) = *((_WORD *)xmmword_1EFF11DD0
                                    + *(unsigned __int16 *)(v51 + 2 * ((v49 >> 4) | (16 * v48))));
                  v52 = *(_QWORD *)(v25 + 288);
                  if (qword_1EFF11DC8 != -1)
                  {
                    v57 = v49;
                    dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                    LOBYTE(v49) = v57;
                    v25 = a1;
                  }
                  v53 = 0;
                  v35 += 3;
                  WORD1(v635[0]) = *((_WORD *)xmmword_1EFF11DD0
                                   + *(unsigned __int16 *)(v52 + 2 * (v50 & 0xFFFFF0FF | ((v49 & 0xF) << 8))));
                  v54 = 1;
                  do
                  {
                    v55 = v54;
                    *v33 = *((_WORD *)v635 + v53);
                    v33[1] = *((_WORD *)v635 + v53);
                    v33[2] = *((_WORD *)v635 + v53);
                    if (qword_1EFF11DC8 != -1)
                    {
                      dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                      v25 = a1;
                    }
                    v54 = 0;
                    v56 = v33 + 4;
                    v33[3] = *(_WORD *)((char *)xmmword_1EFF11DD0 + v31);
                    v53 = 1;
                    v33 += 4;
                  }
                  while ((v55 & 1) != 0);
                  v47 += 2;
                  v33 = v56;
                }
                while (v47 < v632);
              }
              break;
            case 0xE:
              if ((a8[2] & 3) != 0)
                goto LABEL_306;
              v75 = v631;
              if (v631 < v632)
              {
                do
                {
                  v76 = *v35;
                  v77 = v35[1];
                  v78 = v35[2];
                  v79 = v35[3];
                  v80 = v35[4];
                  v81 = v35[5];
                  v82 = v35[6];
                  v83 = *(_QWORD *)(v25 + 288);
                  if (qword_1EFF11DC8 != -1)
                  {
                    v463 = v35[6];
                    v557 = v35[5];
                    v503 = v35[3];
                    v527 = v35[4];
                    v481 = v35[2];
                    dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                    v78 = v481;
                    v80 = v527;
                    v79 = v503;
                    v81 = v557;
                    v82 = v463;
                    v25 = a1;
                  }
                  LOWORD(v635[0]) = *((_WORD *)xmmword_1EFF11DD0
                                    + *(unsigned __int16 *)(v83 + 2 * ((v77 >> 2) | (v76 << 6))));
                  v84 = *(_QWORD *)(v25 + 288);
                  if (qword_1EFF11DC8 != -1)
                  {
                    v89 = v82;
                    v558 = v81;
                    v504 = v79;
                    v528 = v80;
                    v482 = v78;
                    dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                    v78 = v482;
                    v80 = v528;
                    v79 = v504;
                    v81 = v558;
                    v82 = v89;
                    v25 = a1;
                  }
                  WORD1(v635[0]) = *((_WORD *)xmmword_1EFF11DD0
                                   + *(unsigned __int16 *)(v84
                                                         + 2
                                                         * ((16 * v78) & 0xFFFFCFFF | ((v77 & 3) << 12) | (v79 >> 4))));
                  v85 = *(_QWORD *)(v25 + 288);
                  if (qword_1EFF11DC8 != -1)
                  {
                    v90 = v82;
                    v559 = v81;
                    v91 = v79;
                    v529 = v80;
                    dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                    v80 = v529;
                    LOBYTE(v79) = v91;
                    v81 = v559;
                    v82 = v90;
                    v25 = a1;
                  }
                  WORD2(v635[0]) = *((_WORD *)xmmword_1EFF11DD0
                                   + *(unsigned __int16 *)(v85
                                                         + 2
                                                         * ((4 * v80) & 0xFFFFC3FF | ((v79 & 0xF) << 10) | (v81 >> 6))));
                  v86 = *(_QWORD *)(v25 + 288);
                  if (qword_1EFF11DC8 != -1)
                  {
                    v92 = v82;
                    v93 = v81;
                    dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                    LOBYTE(v81) = v93;
                    v82 = v92;
                    v25 = a1;
                  }
                  v87 = 0;
                  v35 += 7;
                  HIWORD(v635[0]) = *((_WORD *)xmmword_1EFF11DD0
                                    + *(unsigned __int16 *)(v86 + 2 * (v82 & 0xFFFFC0FF | ((v81 & 0x3F) << 8))));
                  do
                  {
                    *v33 = *(_WORD *)((char *)v635 + v87);
                    v33[1] = *(_WORD *)((char *)v635 + v87);
                    v33[2] = *(_WORD *)((char *)v635 + v87);
                    if (qword_1EFF11DC8 != -1)
                    {
                      dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                      v25 = a1;
                    }
                    v88 = v33 + 4;
                    v33[3] = *(_WORD *)((char *)xmmword_1EFF11DD0 + v31);
                    v87 += 2;
                    v33 += 4;
                  }
                  while (v87 != 8);
                  v75 += 4;
                  v33 = v88;
                }
                while (v75 < v632);
              }
              break;
            case 0x10:
              v94 = v25;
              v95 = sub_1D530CBD0(v25);
              v96 = sub_1D530CBD0(v94);
              v25 = a1;
              if (v631 < v632)
              {
                if (v95 == 1)
                  v97 = v619 + 1;
                else
                  v97 = v619;
                v98 = &v34[v97];
                if (v96 == 1)
                  v99 = v619;
                else
                  v99 = v619 + 1;
                v100 = &v34[v99];
                v101 = v631;
                do
                {
                  v103 = *v98;
                  v98 += 2;
                  v102 = v103;
                  v105 = *v100;
                  v100 += 2;
                  v104 = v105;
                  v106 = *(_QWORD *)(v25 + 288);
                  if (qword_1EFF11DC8 != -1)
                  {
                    v560 = v98;
                    dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                    v98 = v560;
                    v25 = a1;
                  }
                  v107 = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v106 + 2 * (v104 | (v102 << 8))));
                  *v33 = v107;
                  v33[1] = v107;
                  v33[2] = v107;
                  if (qword_1EFF11DC8 != -1)
                  {
                    v108 = v98;
                    dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
                    v98 = v108;
                    v25 = a1;
                  }
                  v33[3] = *(_WORD *)((char *)xmmword_1EFF11DD0 + v31);
                  ++v101;
                  v33 += 4;
                }
                while (v101 < v632);
              }
              break;
            default:
              break;
          }
          v32 = v621 + 1;
          v619 += v630;
          if (v621 + 1 >= v628)
            goto LABEL_138;
        }
      }
LABEL_306:
      v396 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v396, "RawCameraException");
      __cxa_throw(v396, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
  else
  {
    v109 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 224))(v25) != 1
        || v624 >= v20;
    v25 = a1;
    if (!v109)
    {
      v110 = v22 - (uint64_t)v21;
      if (((v632 - v21) & 0x8000000000000000) == 0)
      {
        v111 = 0;
        v112 = v624;
        while (1)
        {
          v113 = *a6;
          v114 = v112 - a6[1];
          if (a2 + v114 * a7 + 2 * (v631 - v113) + 2 * v110 > a2 + 2 * a3)
            break;
          v115 = (char *)v634[0];
          v116 = (unsigned __int8 *)v634[0] + (v112 - v624) * v630;
          switch(*(_WORD *)(v25 + 280))
          {
            case 8:
              if ((a8[2] & 3) != 0)
                goto LABEL_304;
              if (v631 < v632)
              {
                v117 = *(_QWORD *)(v25 + 288);
                v118 = v631;
                do
                {
                  v119 = (_WORD *)(a2 + a7 * v114 - 2 * v113 + 2 * v118);
                  *v119 = *(_WORD *)(v117 + 2 * *v116);
                  v119[1] = *(_WORD *)(v117 + 2 * v116[1]);
                  v119[2] = *(_WORD *)(v117 + 2 * v116[2]);
                  v119[3] = *(_WORD *)(v117 + 2 * v116[3]);
                  v118 += 4;
                  v116 += 4;
                }
                while (v118 < v632);
              }
              break;
            case 0xA:
              if ((a8[2] & 3) != 0)
                goto LABEL_304;
              if (v631 < v632)
              {
                v125 = *(_QWORD *)(v25 + 288);
                v126 = v631;
                do
                {
                  v127 = (_WORD *)(a2 + a7 * v114 - 2 * v113 + 2 * v126);
                  v128 = v116[1];
                  v129 = v116[2];
                  v130 = v116[3];
                  v131 = v116[4];
                  *v127 = *(_WORD *)(v125 + 2 * ((v128 >> 6) | (4 * *v116)));
                  v127[1] = *(_WORD *)(v125 + 2 * ((v129 >> 4) & 0xFFFFFC0F | (16 * (v128 & 0x3F))));
                  v127[2] = *(_WORD *)(v125 + 2 * ((v130 >> 2) & 0xFFFFFC3F | ((v129 & 0xF) << 6)));
                  v127[3] = *(_WORD *)(v125 + 2 * (v131 & 0xFFFFFCFF | ((v130 & 3) << 8)));
                  v126 += 4;
                  v116 += 5;
                }
                while (v126 < v632);
              }
              break;
            case 0xC:
              if ((a8[2] & 1) != 0)
                goto LABEL_304;
              if (v631 < v632)
              {
                v120 = *(_QWORD *)(v25 + 288);
                v121 = v631;
                do
                {
                  v122 = (_WORD *)(a2 + a7 * v114 - 2 * v113 + 2 * v121);
                  v123 = v116[1];
                  v124 = v116[2];
                  *v122 = *(_WORD *)(v120 + 2 * ((v123 >> 4) | (16 * *v116)));
                  v122[1] = *(_WORD *)(v120 + 2 * (v124 & 0xFFFFF0FF | ((v123 & 0xF) << 8)));
                  v121 += 2;
                  v116 += 3;
                }
                while (v121 < v632);
              }
              break;
            case 0xE:
              if ((a8[2] & 3) != 0)
                goto LABEL_304;
              if (v631 < v632)
              {
                v132 = *(_QWORD *)(v25 + 288);
                v133 = v631;
                do
                {
                  v134 = (_WORD *)(a2 + a7 * v114 - 2 * v113 + 2 * v133);
                  v135 = v116[1];
                  v136 = v116[2];
                  v137 = v116[3];
                  v138 = v116[4];
                  v139 = v116[5];
                  v140 = v116[6];
                  *v134 = *(_WORD *)(v132 + 2 * ((v135 >> 2) | (*v116 << 6)));
                  v134[1] = *(_WORD *)(v132 + 2 * ((16 * v136) & 0xFFFFCFFF | ((v135 & 3) << 12) | (v137 >> 4)));
                  v134[2] = *(_WORD *)(v132 + 2 * ((4 * v138) & 0xFFFFC3FF | ((v137 & 0xF) << 10) | (v139 >> 6)));
                  v134[3] = *(_WORD *)(v132 + 2 * (v140 & 0xFFFFC0FF | ((v139 & 0x3F) << 8)));
                  v133 += 4;
                  v116 += 7;
                }
                while (v133 < v632);
              }
              break;
            case 0x10:
              v141 = v25;
              v142 = sub_1D530CBD0(v25);
              v143 = sub_1D530CBD0(v141);
              v25 = a1;
              if (v631 < v632)
              {
                if (v142 == 1)
                  v144 = v111 + 1;
                else
                  v144 = v111;
                v145 = *(_QWORD *)(a1 + 288);
                v146 = &v115[v144];
                if (v143 == 1)
                  v147 = v111;
                else
                  v147 = v111 + 1;
                v148 = &v115[v147];
                v149 = v631;
                do
                {
                  v151 = *v146;
                  v146 += 2;
                  v150 = v151;
                  v152 = *v148;
                  v148 += 2;
                  *(_WORD *)(a2 + a7 * v114 - 2 * v113 + 2 * v149++) = *(_WORD *)(v145 + ((2 * v152) | (v150 << 9)));
                }
                while (v149 < v632);
              }
              break;
            default:
              break;
          }
          ++v112;
          v111 += v630;
          if (v112 >= v628)
            goto LABEL_138;
        }
      }
LABEL_304:
      v394 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v394, "RawCameraException");
      __cxa_throw(v394, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
LABEL_138:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 224))(v25) != 2)
  {
    v188 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
    v189 = a1;
    v190 = v632;
    if (v188 != 3)
      goto LABEL_301;
    if (!*(_BYTE *)(a1 + 312))
    {
      v399 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v399, "RawCameraException");
      __cxa_throw(v399, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (v624 >= v628)
      goto LABEL_301;
    if (((v632 - v631) & 0x8000000000000000) != 0)
    {
LABEL_307:
      v397 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v397, "RawCameraException");
      __cxa_throw(v397, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v620 = a2 + 2 * a3;
    v191 = v624;
LABEL_179:
    v192 = *a6;
    v193 = v191 - a6[1];
    v194 = (_WORD *)(a2 + v193 * a7 + 8 * (v631 - v192));
    if ((unint64_t)&v194[4 * (v632 - v631)] > v620)
      goto LABEL_307;
    v622 = v191;
    v195 = (unsigned __int8 *)v634[0] + (v191 - v624) * v630;
    switch(*(_WORD *)(v189 + 280))
    {
      case 8:
        v196 = v631;
        if (v631 < v190)
        {
          do
          {
            v197 = *v195;
            v198 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v189 = a1;
            }
            *v194 = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v198 + 2 * v197));
            v199 = v195[1];
            v200 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v189 = a1;
            }
            v194[1] = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v200 + 2 * v199));
            v201 = v195[2];
            v202 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v189 = a1;
            }
            v194[2] = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v202 + 2 * v201));
            if (qword_1EFF11DC8 != -1)
            {
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v189 = a1;
            }
            v194[3] = HIWORD(xmmword_1EFF11DD0[0x1FFF]);
            ++v196;
            v195 += 3;
            v194 += 4;
          }
          while (v196 < v190);
        }
        goto LABEL_300;
      case 0xA:
        if ((v623[2] & 3) != 0)
          goto LABEL_307;
        v228 = v631;
        if (v631 < v190)
        {
          do
          {
            v229 = *v195;
            v230 = v195[1];
            v231 = v195[2];
            v232 = v195[3];
            v233 = v195[4];
            v234 = v195[5];
            v235 = v195[6];
            v236 = v195[7];
            v237 = v195[8];
            v238 = v195[9];
            v239 = v195[10];
            v240 = v195[11];
            v241 = v195[12];
            v242 = v195[13];
            v243 = v195[14];
            v244 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v483 = v195[7];
              v435 = v195[12];
              v448 = v195[5];
              v425 = v195[14];
              v563 = v195[13];
              v592 = v195[11];
              v464 = v195[10];
              v531 = v195[9];
              v505 = v195[8];
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v234 = v448;
              v239 = v464;
              v236 = v483;
              v237 = v505;
              v238 = v531;
              v240 = v592;
              v241 = v435;
              v242 = v563;
              v243 = v425;
              v189 = a1;
            }
            *v194 = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v244 + 2 * ((v230 >> 6) | (4 * v229))));
            v245 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v484 = v236;
              v436 = v241;
              v449 = v234;
              v426 = v243;
              v564 = v242;
              v593 = v240;
              v465 = v239;
              v532 = v238;
              v506 = v237;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v234 = v449;
              v239 = v465;
              v236 = v484;
              v237 = v506;
              v238 = v532;
              v240 = v593;
              v241 = v436;
              v242 = v564;
              v243 = v426;
              v189 = a1;
            }
            v194[1] = *((_WORD *)xmmword_1EFF11DD0
                      + *(unsigned __int16 *)(v245 + 2 * ((v231 >> 4) & 0xFFFFFC0F | (16 * (v230 & 0x3F)))));
            v246 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v485 = v236;
              v437 = v241;
              v450 = v234;
              v256 = v243;
              v565 = v242;
              v594 = v240;
              v466 = v239;
              v533 = v238;
              v507 = v237;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v234 = v450;
              v239 = v466;
              v236 = v485;
              v237 = v507;
              v238 = v533;
              v240 = v594;
              v241 = v437;
              v242 = v565;
              v243 = v256;
              v189 = a1;
            }
            v190 = v632;
            v194[2] = *((_WORD *)xmmword_1EFF11DD0
                      + *(unsigned __int16 *)(v246 + 2 * ((v232 >> 2) & 0xFFFFFC3F | ((v231 & 0xF) << 6))));
            if (qword_1EFF11DC8 != -1)
            {
              v486 = v236;
              v438 = v241;
              v451 = v234;
              v257 = v243;
              v566 = v242;
              v595 = v240;
              v467 = v239;
              v534 = v238;
              v508 = v237;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v234 = v451;
              v239 = v467;
              v236 = v486;
              v237 = v508;
              v238 = v534;
              v240 = v595;
              v241 = v438;
              v242 = v566;
              v243 = v257;
              v189 = a1;
            }
            v194[3] = HIWORD(xmmword_1EFF11DD0[0x1FFF]);
            v247 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v487 = v236;
              v439 = v241;
              v452 = v234;
              v427 = v243;
              v567 = v242;
              v596 = v240;
              v468 = v239;
              v535 = v238;
              v509 = v237;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v234 = v452;
              v239 = v468;
              v236 = v487;
              v237 = v509;
              v238 = v535;
              v240 = v596;
              v241 = v439;
              v242 = v567;
              v243 = v427;
              v189 = a1;
            }
            v194[4] = *((_WORD *)xmmword_1EFF11DD0
                      + *(unsigned __int16 *)(v247 + 2 * (v233 & 0xFFFFFCFF | ((v232 & 3) << 8))));
            v248 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v488 = v236;
              v453 = v234;
              v469 = v239;
              v258 = v243;
              v568 = v242;
              v259 = v241;
              v597 = v240;
              v536 = v238;
              v510 = v237;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v234 = v453;
              v239 = v469;
              v236 = v488;
              v237 = v510;
              v238 = v536;
              v240 = v597;
              v241 = v259;
              v242 = v568;
              v243 = v258;
              v189 = a1;
            }
            v194[5] = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v248 + 2 * ((v235 >> 6) | (4 * v234))));
            v249 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v489 = v236;
              v260 = v243;
              v569 = v242;
              v261 = v241;
              v598 = v240;
              v470 = v239;
              v537 = v238;
              v511 = v237;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v236 = v489;
              v237 = v511;
              v238 = v537;
              v239 = v470;
              v240 = v598;
              v241 = v261;
              v242 = v569;
              v243 = v260;
              v189 = a1;
            }
            v194[6] = *((_WORD *)xmmword_1EFF11DD0
                      + *(unsigned __int16 *)(v249 + 2 * ((v236 >> 4) & 0xFFFFFC0F | (16 * (v235 & 0x3F)))));
            if (qword_1EFF11DC8 != -1)
            {
              v490 = v236;
              v262 = v243;
              v570 = v242;
              v263 = v241;
              v599 = v240;
              v264 = v239;
              v538 = v238;
              v265 = v237;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              LOBYTE(v236) = v490;
              v237 = v265;
              v238 = v538;
              v239 = v264;
              v240 = v599;
              v241 = v263;
              v242 = v570;
              v243 = v262;
              v189 = a1;
            }
            v194[7] = HIWORD(xmmword_1EFF11DD0[0x1FFF]);
            v250 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v491 = v236;
              v266 = v243;
              v571 = v242;
              v267 = v241;
              v600 = v240;
              v268 = v239;
              v539 = v238;
              v512 = v237;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              LOBYTE(v236) = v491;
              v237 = v512;
              v238 = v539;
              v239 = v268;
              v240 = v600;
              v241 = v267;
              v242 = v571;
              v243 = v266;
              v189 = a1;
            }
            v194[8] = *((_WORD *)xmmword_1EFF11DD0
                      + *(unsigned __int16 *)(v250 + 2 * ((v237 >> 2) & 0xFFFFFC3F | ((v236 & 0xF) << 6))));
            v251 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v269 = v243;
              v572 = v242;
              v270 = v241;
              v601 = v240;
              v271 = v239;
              v540 = v238;
              v513 = v237;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              LOBYTE(v237) = v513;
              v238 = v540;
              v239 = v271;
              v240 = v601;
              v241 = v270;
              v242 = v572;
              v243 = v269;
              v189 = a1;
            }
            v194[9] = *((_WORD *)xmmword_1EFF11DD0
                      + *(unsigned __int16 *)(v251 + 2 * (v238 & 0xFFFFFCFF | ((v237 & 3) << 8))));
            v252 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v272 = v243;
              v573 = v242;
              v273 = v241;
              v602 = v240;
              v274 = v239;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v239 = v274;
              v240 = v602;
              v241 = v273;
              v242 = v573;
              v243 = v272;
              v189 = a1;
            }
            v194[10] = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v252 + 2 * ((v240 >> 6) | (4 * v239))));
            if (qword_1EFF11DC8 != -1)
            {
              v275 = v243;
              v276 = v242;
              v277 = v241;
              v278 = v240;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              LOBYTE(v240) = v278;
              v241 = v277;
              v242 = v276;
              v243 = v275;
              v189 = a1;
            }
            v194[11] = HIWORD(xmmword_1EFF11DD0[0x1FFF]);
            v253 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v279 = v243;
              v280 = v242;
              v281 = v241;
              v603 = v240;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              LOBYTE(v240) = v603;
              v241 = v281;
              v242 = v280;
              v243 = v279;
              v189 = a1;
            }
            v194[12] = *((_WORD *)xmmword_1EFF11DD0
                       + *(unsigned __int16 *)(v253 + 2 * ((v241 >> 4) & 0xFFFFFC0F | (16 * (v240 & 0x3F)))));
            v254 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v282 = v243;
              v283 = v242;
              v284 = v241;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              LOBYTE(v241) = v284;
              v242 = v283;
              v243 = v282;
              v189 = a1;
            }
            v194[13] = *((_WORD *)xmmword_1EFF11DD0
                       + *(unsigned __int16 *)(v254 + 2 * ((v242 >> 2) & 0xFFFFFC3F | ((v241 & 0xF) << 6))));
            v255 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v285 = v243;
              v286 = v242;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              LOBYTE(v242) = v286;
              v243 = v285;
              v189 = a1;
            }
            v194[14] = *((_WORD *)xmmword_1EFF11DD0
                       + *(unsigned __int16 *)(v255 + 2 * (v243 & 0xFFFFFCFF | ((v242 & 3) << 8))));
            if (qword_1EFF11DC8 != -1)
            {
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v189 = a1;
            }
            v194[15] = HIWORD(xmmword_1EFF11DD0[0x1FFF]);
            v228 += 4;
            v195 += 15;
            v194 += 16;
          }
          while (v228 < v632);
        }
        goto LABEL_300;
      case 0xC:
        v203 = v631;
        if (v631 < v190)
        {
          do
          {
            v204 = *v195;
            v205 = v195[1];
            v206 = v195[2];
            v207 = v195[3];
            v208 = v195[4];
            v209 = v195[5];
            v210 = v195[6];
            v211 = v195[7];
            v212 = v195[8];
            v213 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v530 = v195[7];
              v588 = v195[6];
              v561 = v195[3];
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v207 = v561;
              v210 = v588;
              v211 = v530;
              v189 = a1;
            }
            *v194 = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v213 + 2 * ((v205 >> 4) | (16 * v204))));
            v214 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v219 = v211;
              v589 = v210;
              v562 = v207;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v207 = v562;
              v210 = v589;
              v211 = v219;
              v189 = a1;
            }
            v194[1] = *((_WORD *)xmmword_1EFF11DD0
                      + *(unsigned __int16 *)(v214 + 2 * (v206 & 0xFFFFF0FF | ((v205 & 0xF) << 8))));
            v215 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v220 = v211;
              v590 = v210;
              v221 = v207;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v207 = v221;
              v210 = v590;
              v211 = v220;
              v189 = a1;
            }
            v190 = v632;
            v194[2] = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v215 + 2 * ((v208 >> 4) | (16 * v207))));
            if (qword_1EFF11DC8 != -1)
            {
              v222 = v211;
              v223 = v210;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v210 = v223;
              v211 = v222;
              v189 = a1;
            }
            v194[3] = HIWORD(xmmword_1EFF11DD0[0x1FFF]);
            v216 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v224 = v211;
              v591 = v210;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v210 = v591;
              v211 = v224;
              v189 = a1;
            }
            v194[4] = *((_WORD *)xmmword_1EFF11DD0
                      + *(unsigned __int16 *)(v216 + 2 * (v209 & 0xFFFFF0FF | ((v208 & 0xF) << 8))));
            v217 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v225 = v211;
              v226 = v210;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v210 = v226;
              v211 = v225;
              v189 = a1;
            }
            v194[5] = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v217 + 2 * ((v211 >> 4) | (16 * v210))));
            v218 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v227 = v211;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              LOBYTE(v211) = v227;
              v189 = a1;
            }
            v194[6] = *((_WORD *)xmmword_1EFF11DD0
                      + *(unsigned __int16 *)(v218 + 2 * (v212 & 0xFFFFF0FF | ((v211 & 0xF) << 8))));
            if (qword_1EFF11DC8 != -1)
            {
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v189 = a1;
            }
            v194[7] = HIWORD(xmmword_1EFF11DD0[0x1FFF]);
            v203 += 2;
            v195 += 9;
            v194 += 8;
          }
          while (v203 < v632);
        }
        goto LABEL_300;
      case 0xE:
        if ((v623[2] & 3) != 0)
          goto LABEL_307;
        v287 = v631;
        if (v631 < v190)
        {
          do
          {
            v288 = *v195;
            v289 = v195[1];
            v290 = v195[2];
            v291 = v195[3];
            v292 = v195[4];
            v293 = v195[5];
            v294 = v195[6];
            v295 = v195[7];
            v296 = v195[8];
            v297 = v195[9];
            v298 = v195[10];
            v299 = v195[11];
            v300 = v195[12];
            v301 = v195[13];
            v302 = v195[14];
            v303 = v195[15];
            v304 = v195[16];
            v305 = v195[17];
            v306 = v195[18];
            v307 = v195[19];
            v308 = v195[20];
            v309 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v514 = v195[14];
              v492 = v195[13];
              v400 = v287;
              v604 = v195[20];
              v401 = v195[19];
              v403 = v195[18];
              v541 = v195[17];
              v574 = v195[15];
              v407 = v195[16];
              v412 = v195[7];
              v454 = v195[10];
              v471 = v195[12];
              v440 = v195[11];
              v418 = v195[9];
              v428 = v195[8];
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v295 = v412;
              v297 = v418;
              v296 = v428;
              v299 = v440;
              v298 = v454;
              v300 = v471;
              v301 = v492;
              v302 = v514;
              v306 = v403;
              v304 = v407;
              v303 = v574;
              v305 = v541;
              v307 = v401;
              v308 = v604;
              v287 = v400;
              v189 = a1;
            }
            *v194 = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v309 + 2 * ((v289 >> 2) | (v288 << 6))));
            v310 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v515 = v302;
              v493 = v301;
              v321 = v287;
              v605 = v308;
              v402 = v307;
              v404 = v306;
              v542 = v305;
              v575 = v303;
              v408 = v304;
              v413 = v295;
              v455 = v298;
              v472 = v300;
              v441 = v299;
              v419 = v297;
              v429 = v296;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v295 = v413;
              v297 = v419;
              v296 = v429;
              v299 = v441;
              v298 = v455;
              v300 = v472;
              v301 = v493;
              v302 = v515;
              v306 = v404;
              v304 = v408;
              v303 = v575;
              v305 = v542;
              v307 = v402;
              v308 = v605;
              v287 = v321;
              v189 = a1;
            }
            v194[1] = *((_WORD *)xmmword_1EFF11DD0
                      + *(unsigned __int16 *)(v310 + 2 * ((16 * v290) & 0xFFFFCFFF | ((v289 & 3) << 12) | (v291 >> 4))));
            v311 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v516 = v302;
              v494 = v301;
              v322 = v287;
              v606 = v308;
              v323 = v307;
              v543 = v305;
              v405 = v306;
              v409 = v304;
              v576 = v303;
              v456 = v298;
              v473 = v300;
              v442 = v299;
              v420 = v297;
              v430 = v296;
              v414 = v295;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v295 = v414;
              v297 = v420;
              v296 = v430;
              v299 = v442;
              v298 = v456;
              v300 = v473;
              v301 = v494;
              v302 = v516;
              v306 = v405;
              v304 = v409;
              v303 = v576;
              v305 = v543;
              v307 = v323;
              v308 = v606;
              v287 = v322;
              v189 = a1;
            }
            v190 = v632;
            v194[2] = *((_WORD *)xmmword_1EFF11DD0
                      + *(unsigned __int16 *)(v311 + 2
                                                   * ((4 * v292) & 0xFFFFC3FF | ((v291 & 0xF) << 10) | (v293 >> 6))));
            if (qword_1EFF11DC8 != -1)
            {
              v517 = v302;
              v495 = v301;
              v324 = v287;
              v607 = v308;
              v325 = v307;
              v544 = v305;
              v326 = v306;
              v577 = v303;
              v410 = v304;
              v415 = v295;
              v457 = v298;
              v474 = v300;
              v443 = v299;
              v421 = v297;
              v431 = v296;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v295 = v415;
              v297 = v421;
              v296 = v431;
              v299 = v443;
              v298 = v457;
              v300 = v474;
              v301 = v495;
              v302 = v517;
              v304 = v410;
              v303 = v577;
              v306 = v326;
              v305 = v544;
              v307 = v325;
              v308 = v607;
              v287 = v324;
              v189 = a1;
            }
            v194[3] = HIWORD(xmmword_1EFF11DD0[0x1FFF]);
            v312 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v518 = v302;
              v496 = v301;
              v327 = v287;
              v608 = v308;
              v328 = v307;
              v545 = v305;
              v406 = v306;
              v411 = v304;
              v578 = v303;
              v458 = v298;
              v475 = v300;
              v444 = v299;
              v422 = v297;
              v432 = v296;
              v416 = v295;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v295 = v416;
              v297 = v422;
              v296 = v432;
              v299 = v444;
              v298 = v458;
              v300 = v475;
              v301 = v496;
              v302 = v518;
              v306 = v406;
              v304 = v411;
              v303 = v578;
              v305 = v545;
              v307 = v328;
              v308 = v608;
              v287 = v327;
              v189 = a1;
            }
            v194[4] = *((_WORD *)xmmword_1EFF11DD0
                      + *(unsigned __int16 *)(v312 + 2 * (v294 & 0xFFFFC0FF | ((v293 & 0x3F) << 8))));
            v313 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v519 = v302;
              v497 = v301;
              v329 = v287;
              v609 = v308;
              v330 = v307;
              v546 = v305;
              v331 = v306;
              v579 = v303;
              v332 = v304;
              v459 = v298;
              v476 = v300;
              v445 = v299;
              v423 = v297;
              v433 = v296;
              v417 = v295;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v295 = v417;
              v297 = v423;
              v296 = v433;
              v299 = v445;
              v298 = v459;
              v300 = v476;
              v301 = v497;
              v302 = v519;
              v304 = v332;
              v303 = v579;
              v306 = v331;
              v305 = v546;
              v307 = v330;
              v308 = v609;
              v287 = v329;
              v189 = a1;
            }
            v194[5] = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v313 + 2 * ((v296 >> 2) | (v295 << 6))));
            v314 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v520 = v302;
              v498 = v301;
              v333 = v287;
              v610 = v308;
              v334 = v307;
              v547 = v305;
              v335 = v306;
              v580 = v303;
              v336 = v304;
              v460 = v298;
              v477 = v300;
              v446 = v299;
              v424 = v297;
              v434 = v296;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v297 = v424;
              LOBYTE(v296) = v434;
              v299 = v446;
              v298 = v460;
              v300 = v477;
              v301 = v498;
              v302 = v520;
              v304 = v336;
              v303 = v580;
              v306 = v335;
              v305 = v547;
              v307 = v334;
              v308 = v610;
              v287 = v333;
              v189 = a1;
            }
            v194[6] = *((_WORD *)xmmword_1EFF11DD0
                      + *(unsigned __int16 *)(v314 + 2 * ((16 * v297) & 0xFFFFCFFF | ((v296 & 3) << 12) | (v298 >> 4))));
            if (qword_1EFF11DC8 != -1)
            {
              v521 = v302;
              v499 = v301;
              v337 = v287;
              v611 = v308;
              v338 = v307;
              v548 = v305;
              v339 = v306;
              v581 = v303;
              v340 = v304;
              v461 = v298;
              v478 = v300;
              v341 = v299;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v299 = v341;
              LOBYTE(v298) = v461;
              v300 = v478;
              v301 = v499;
              v302 = v521;
              v304 = v340;
              v303 = v581;
              v306 = v339;
              v305 = v548;
              v307 = v338;
              v308 = v611;
              v287 = v337;
              v189 = a1;
            }
            v194[7] = HIWORD(xmmword_1EFF11DD0[0x1FFF]);
            v315 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v522 = v302;
              v500 = v301;
              v342 = v287;
              v612 = v308;
              v343 = v307;
              v549 = v305;
              v344 = v306;
              v582 = v303;
              v345 = v304;
              v462 = v298;
              v479 = v300;
              v447 = v299;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v299 = v447;
              LOBYTE(v298) = v462;
              v300 = v479;
              v301 = v500;
              v302 = v522;
              v304 = v345;
              v303 = v582;
              v306 = v344;
              v305 = v549;
              v307 = v343;
              v308 = v612;
              v287 = v342;
              v189 = a1;
            }
            v194[8] = *((_WORD *)xmmword_1EFF11DD0
                      + *(unsigned __int16 *)(v315 + 2
                                                   * ((4 * v299) & 0xFFFFC3FF | ((v298 & 0xF) << 10) | (v300 >> 6))));
            v316 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v523 = v302;
              v501 = v301;
              v346 = v287;
              v613 = v308;
              v347 = v307;
              v550 = v305;
              v348 = v306;
              v583 = v303;
              v349 = v304;
              v480 = v300;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              LOBYTE(v300) = v480;
              v301 = v501;
              v302 = v523;
              v304 = v349;
              v303 = v583;
              v306 = v348;
              v305 = v550;
              v307 = v347;
              v308 = v613;
              v287 = v346;
              v189 = a1;
            }
            v194[9] = *((_WORD *)xmmword_1EFF11DD0
                      + *(unsigned __int16 *)(v316 + 2 * (v301 & 0xFFFFC0FF | ((v300 & 0x3F) << 8))));
            v317 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v524 = v302;
              v350 = v287;
              v614 = v308;
              v351 = v307;
              v551 = v305;
              v352 = v306;
              v584 = v303;
              v353 = v304;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v302 = v524;
              v304 = v353;
              v303 = v584;
              v306 = v352;
              v305 = v551;
              v307 = v351;
              v308 = v614;
              v287 = v350;
              v189 = a1;
            }
            v194[10] = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v317 + 2 * ((v303 >> 2) | (v302 << 6))));
            if (qword_1EFF11DC8 != -1)
            {
              v354 = v287;
              v615 = v308;
              v355 = v307;
              v356 = v305;
              v357 = v306;
              v585 = v303;
              v358 = v304;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v304 = v358;
              LOBYTE(v303) = v585;
              v306 = v357;
              v305 = v356;
              v307 = v355;
              v308 = v615;
              v287 = v354;
              v189 = a1;
            }
            v194[11] = HIWORD(xmmword_1EFF11DD0[0x1FFF]);
            v318 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v359 = v287;
              v616 = v308;
              v360 = v307;
              v552 = v305;
              v361 = v306;
              v586 = v303;
              v362 = v304;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v304 = v362;
              LOBYTE(v303) = v586;
              v306 = v361;
              v305 = v552;
              v307 = v360;
              v308 = v616;
              v287 = v359;
              v189 = a1;
            }
            v194[12] = *((_WORD *)xmmword_1EFF11DD0
                       + *(unsigned __int16 *)(v318 + 2
                                                    * ((16 * v304) & 0xFFFFCFFF | ((v303 & 3) << 12) | (v305 >> 4))));
            v319 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v363 = v287;
              v617 = v308;
              v364 = v307;
              v365 = v305;
              v366 = v306;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v306 = v366;
              LOBYTE(v305) = v365;
              v307 = v364;
              v308 = v617;
              v287 = v363;
              v189 = a1;
            }
            v194[13] = *((_WORD *)xmmword_1EFF11DD0
                       + *(unsigned __int16 *)(v319
                                             + 2 * ((4 * v306) & 0xFFFFC3FF | ((v305 & 0xF) << 10) | (v307 >> 6))));
            v320 = *(_QWORD *)(v189 + 288);
            if (qword_1EFF11DC8 != -1)
            {
              v367 = v287;
              v368 = v308;
              v369 = v307;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              LOBYTE(v307) = v369;
              v308 = v368;
              v287 = v367;
              v189 = a1;
            }
            v194[14] = *((_WORD *)xmmword_1EFF11DD0
                       + *(unsigned __int16 *)(v320 + 2 * (v308 & 0xFFFFC0FF | ((v307 & 0x3F) << 8))));
            if (qword_1EFF11DC8 != -1)
            {
              v370 = v287;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
              v287 = v370;
              v189 = a1;
            }
            v194[15] = HIWORD(xmmword_1EFF11DD0[0x1FFF]);
            v287 += 4;
            v195 += 21;
            v194 += 16;
          }
          while (v287 < v632);
        }
        goto LABEL_300;
      case 0x10:
        v371 = v189;
        v372 = sub_1D530CBD0(v189);
        v373 = sub_1D530CBD0(v371);
        v189 = a1;
        if (v631 >= v190)
          goto LABEL_300;
        v374 = v372 == 1;
        v375 = v373 != 1;
        v376 = (_WORD *)(a2 + 8 * v631 + 4 + a7 * v193 - 8 * v192);
        v377 = v631;
        break;
      default:
        goto LABEL_300;
    }
    while (1)
    {
      if (*(_BYTE *)(v189 + 313))
      {
        v378 = *(unsigned __int16 *)v195;
        v379 = *((unsigned __int16 *)v195 + 1);
        v380 = *((unsigned __int16 *)v195 + 2);
        v381 = sub_1D530CBD0(v189);
        v382 = __rev16(v378);
        v383 = __rev16(v379);
        v384 = __rev16(v380);
        if (v381 != 2)
        {
          v382 = v378;
          v383 = v379;
          v384 = v380;
        }
        *(v376 - 2) = v382;
        *(v376 - 1) = v383;
        *v376 = v384;
        if (qword_1EFF11DC8 == -1)
          goto LABEL_289;
      }
      else
      {
        v385 = v195[v374];
        v386 = v195[v375];
        v387 = *(_QWORD *)(v189 + 288);
        if (qword_1EFF11DC8 != -1)
        {
          dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
          v189 = a1;
        }
        *(v376 - 2) = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v387 + 2 * (v386 | (v385 << 8))));
        v388 = v195[v374 + 2];
        v389 = v195[v375 + 2];
        v390 = *(_QWORD *)(v189 + 288);
        if (qword_1EFF11DC8 != -1)
        {
          dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
          v189 = a1;
        }
        *(v376 - 1) = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v390 + 2 * (v389 | (v388 << 8))));
        v391 = v195[v374 + 4];
        v392 = v195[v375 + 4];
        v393 = *(_QWORD *)(v189 + 288);
        if (qword_1EFF11DC8 != -1)
        {
          dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
          v189 = a1;
        }
        *v376 = *((_WORD *)xmmword_1EFF11DD0 + *(unsigned __int16 *)(v393 + 2 * (v392 | (v391 << 8))));
        if (qword_1EFF11DC8 == -1)
          goto LABEL_297;
      }
      dispatch_once(&qword_1EFF11DC8, &unk_1E998BCC0);
LABEL_289:
      v189 = a1;
LABEL_297:
      v190 = v632;
      v376[1] = HIWORD(xmmword_1EFF11DD0[0x1FFF]);
      v195 += 6;
      ++v377;
      v376 += 4;
      if (v377 >= v632)
      {
LABEL_300:
        v191 = v622 + 1;
        if (v622 + 1 >= v628)
          goto LABEL_301;
        goto LABEL_179;
      }
    }
  }
  v153 = a1;
  v154 = v632;
  if (v624 < v628)
  {
    if (((v632 - v631) & 0x8000000000000000) == 0)
    {
      v155 = 0;
      v156 = v624;
      while (1)
      {
        v157 = *a6;
        v158 = v156 - a6[1];
        if (a2 + v158 * a7 + 2 * (v631 - v157) + 2 * (v632 - v631) > a2 + 2 * a3)
          break;
        v159 = (char *)v634[0];
        v160 = (unsigned __int8 *)v634[0] + (v156 - v624) * v630;
        switch(*(_WORD *)(v153 + 280))
        {
          case 8:
            if ((v623[2] & 3) != 0)
              goto LABEL_305;
            v154 = v632;
            if (v631 < v632)
            {
              v161 = *(_QWORD *)(v153 + 288);
              v162 = v631;
              do
              {
                v163 = (_WORD *)(a2 + a7 * v158 - 2 * v157 + 2 * v162);
                *v163 = *(_WORD *)(v161 + 2 * *v160);
                v163[1] = *(_WORD *)(v161 + 2 * v160[2]);
                v162 += 2;
                v160 += 4;
              }
              while (v162 < v632);
            }
            break;
          case 0xA:
            if ((v623[2] & 3) != 0)
              goto LABEL_305;
            v154 = v632;
            if (v631 < v632)
            {
              v166 = *(_QWORD *)(v153 + 288);
              v167 = v631;
              do
              {
                v168 = (_WORD *)(a2 + a7 * v158 - 2 * v157 + 2 * v167);
                v169 = v160[2];
                v170 = v160[3];
                *v168 = *(_WORD *)(v166 + (((unint64_t)v160[1] >> 5) & 6 | (8 * *v160)));
                v168[1] = *(_WORD *)(v166 + ((v170 >> 1) & 0x7E | ((unint64_t)(v169 & 0xF) << 7)));
                v167 += 2;
                v160 += 5;
              }
              while (v167 < v632);
            }
            break;
          case 0xC:
            if (v631 < v154)
            {
              v164 = *(_QWORD *)(v153 + 288);
              v165 = v631;
              do
              {
                *(_WORD *)(a2 + a7 * v158 - 2 * v157 + 2 * v165++) = *(_WORD *)(v164
                                                                              + (((unint64_t)v160[1] >> 3) & 0x1E | (32 * *v160)));
                v160 += 3;
              }
              while (v165 < v154);
            }
            break;
          case 0xE:
            if ((v623[2] & 3) != 0)
              goto LABEL_305;
            v154 = v632;
            if (v631 < v632)
            {
              v171 = *(_QWORD *)(v153 + 288);
              v172 = v631;
              do
              {
                v173 = (_WORD *)(a2 + a7 * v158 - 2 * v157 + 2 * v172);
                v174 = v160[3];
                v175 = v160[4];
                v176 = v160[5];
                *v173 = *(_WORD *)(v171 + (((unint64_t)v160[1] >> 1) & 0x7E | ((unint64_t)*v160 << 7)));
                v173[1] = *(_WORD *)(v171
                                   + 2
                                   * ((4 * v175) & 0xFFFFFFFFFFFFC3FFLL | ((unint64_t)(v174 & 0xF) << 10) | (v176 >> 6)));
                v172 += 2;
                v160 += 7;
              }
              while (v172 < v632);
            }
            break;
          case 0x10:
            v177 = sub_1D530CBD0(v153);
            v178 = sub_1D530CBD0(v153);
            v154 = v632;
            v153 = a1;
            if (v631 < v632)
            {
              if (v178 == 1)
                v179 = 1;
              else
                v179 = 2;
              v180 = *(_QWORD *)(a1 + 288);
              if (v177 == 1)
                v181 = v155 + 1;
              else
                v181 = v155;
              v182 = &v159[v181];
              v183 = &v159[v179 + v155];
              v184 = v631;
              do
              {
                v186 = *v182;
                v182 += 4;
                v185 = v186;
                v187 = *v183;
                v183 += 4;
                *(_WORD *)(a2 + a7 * v158 - 2 * v157 + 2 * v184++) = *(_WORD *)(v180 + ((2 * v187) | (v185 << 9)));
              }
              while (v184 < v632);
            }
            break;
          default:
            break;
        }
        ++v156;
        v155 += v630;
        if (v156 >= v628)
          goto LABEL_301;
      }
    }
LABEL_305:
    v395 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v395, "RawCameraException");
    __cxa_throw(v395, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
LABEL_301:
  if (v634[0])
  {
    v634[1] = v634[0];
    operator delete(v634[0]);
  }
}

void sub_1D535E840(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  void *v4;

  if (a2)
  {
    v4 = *(void **)(v2 - 128);
    if (v4)
    {
      *(_QWORD *)(v2 - 120) = v4;
      operator delete(v4);
    }
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1D535E528);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D535E9C4(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  char v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  _WORD *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  void *exception;
  void *v32;
  void (**v33)(_QWORD);
  uint64_t buf[3];
  _QWORD v35[5];
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    LOWORD(buf[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CDNGUncompressedUnpacker", (const char *)&unk_1D548AF1A, (uint8_t *)buf, 2u);
  }

  v35[0] = MEMORY[0x1E0C809B0];
  v35[1] = 3221225472;
  v35[2] = sub_1D535EDC4;
  v35[3] = &unk_1E996F870;
  v35[4] = a1;
  v4 = MEMORY[0x1D82721B4](v35);
  if ((*(_DWORD *)(a1 + 216) - 1) > 1 || *(_WORD *)(a1 + 280) != 16)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v5 = sub_1D530CBD0(a1);
  sub_1D5293C20(buf, (uint64_t *)(a1 + 24), v5);
  v6 = *(_DWORD *)(a1 + 216);
  v7 = v6 == 2;
  v8 = (v6 - 1) < 2;
  v10 = *(_DWORD *)(a1 + 44);
  v9 = *(_DWORD *)(a1 + 48);
  v11 = *(unsigned __int16 *)(a1 + 280);
  v36 = xmmword_1D544CD60;
  if (v6 == 1)
  {
    v12 = 1 - v10;
    LODWORD(v36) = v10 + 1;
    DWORD1(v36) = 1 - v10;
    DWORD2(v36) = v10 + 1;
  }
  else
  {
    if (v6 != 2)
      goto LABEL_9;
    DWORD1(v36) = v10;
    v12 = -v10;
  }
  HIDWORD(v36) = v12;
LABEL_9:
  v13 = v9 >> v8;
  if (((v10 * v11 + 7) >> 3) * v13 > (*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 152))(a1))
  {
    v32 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v32, "RawCameraException");
    __cxa_throw(v32, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v14 = sub_1D530CBD0(a1);
  v33 = (void (**)(_QWORD))v4;
  v15 = sub_1D530CBD0(a1);
  v16 = v10 << v7;
  v17 = 2 * (v10 << v7);
  v18 = (char *)operator new[]();
  bzero(v18, v17);
  if ((_DWORD)v13)
  {
    v19 = 0;
    if (v14 == 1)
      v20 = v18 + 1;
    else
      v20 = v18;
    if (v15 == 1)
      v21 = v18;
    else
      v21 = v18 + 1;
    do
    {
      (*(void (**)(_QWORD, char *, size_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v18, v17);
      v22 = sub_1D530B618(a1);
      if (v16)
      {
        v23 = 0;
        v24 = (_WORD *)(v22 + 4 * (v10 * v19));
        v25 = *(_QWORD *)(a1 + 288);
        v26 = (unsigned __int8 *)v21;
        v27 = (unsigned __int8 *)v20;
        do
        {
          v29 = *v27;
          v27 += 2;
          v28 = v29;
          v30 = *v26;
          v26 += 2;
          *v24 = *(_WORD *)(v25 + ((2 * v30) | (v28 << 9)));
          v24 += *(int *)((unint64_t)&v36 | (4 * (v23++ & 3)));
        }
        while (v16 != v23);
      }
      ++v19;
    }
    while (v19 != v13);
  }
  MEMORY[0x1D8271AC4](v18, 0x1000C80BDFB0063);
  sub_1D5293C98(buf);
  v33[2](v33);

}

void sub_1D535ED18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D535EDC4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGUncompressedUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

uint64_t sub_1D535EE48(uint64_t result, int a2)
{
  void *exception;

  if ((a2 - 17) <= 0xFFFFFFF6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  *(_WORD *)(result + 280) = a2;
  return result;
}

void sub_1D535EEA0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_1D535EEB4(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  char *v7;
  char *result;

  *(_DWORD *)(a1 + 224) = a2;
  *(_DWORD *)(a1 + 228) = a3;
  v7 = (char *)(a1 + 232);
  if (v7 != (char *)a4)
    sub_1D5282A44(v7, *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  result = (char *)(a1 + 256);
  if (a1 + 256 != a5)
    return sub_1D5282A44(result, *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return result;
}

uint64_t sub_1D535EF18(uint64_t result, char a2)
{
  *(_BYTE *)(result + 313) = a2;
  return result;
}

void sub_1D535EF20(os_signpost_id_t a1, uint64_t a2, int *a3, unint64_t a4)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  void *exception;
  void *v28;
  void *v29;
  void *v30;
  void (**v31)(_QWORD);
  uint8_t buf[8];
  unsigned int v35;
  int v36;
  int v37;
  _QWORD v38[5];

  sub_1D52EB058();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (a1 + 1 >= 2 && os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v7, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CDNGUncompressedUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 3221225472;
  v38[2] = sub_1D535F3CC;
  v38[3] = &unk_1E996F870;
  v38[4] = a1;
  v8 = MEMORY[0x1D82721B4](v38);
  if (*(_DWORD *)(a1 + 216)
    || (*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 224))(a1) != 1
    && (*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 224))(a1) != 2
    && (*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 224))(a1) != 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v10 = *(_DWORD *)(a1 + 44);
  v9 = *(_DWORD *)(a1 + 48);
  v11 = *(_DWORD *)(a1 + 224);
  v12 = *(_DWORD *)(a1 + 228);
  *(_QWORD *)buf = (uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 2;
  sub_1D5282FE0(&v37, (unint64_t *)buf);
  if (*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232) != *(_QWORD *)(a1 + 264) - *(_QWORD *)(a1 + 256)
    || (v10 - 100000) < 0xFFFE7961
    || (v9 - 100000) < 0xFFFE7961
    || v11 - 100000 < 0xFFFE7961
    || v12 - 100000 < 0xFFFE7961
    || v37 >= 20000)
  {
    v28 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v28, "RawCameraException");
    __cxa_throw(v28, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if ((((v9 + v12 - 1) / v12) >> (*(_DWORD *)(a1 + 216) != 0)) * ((v10 + v11 - 1) / v11) != v37)
  {
    v29 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v29, "RawCameraException");
    __cxa_throw(v29, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v13 = a3[3];
  v14 = v13 < 0;
  if (v13 >= 0)
    v15 = v13;
  else
    v15 = -v13;
  v16 = !is_mul_ok(v15, a4);
  v17 = v15 * a4;
  if (!v17)
    v14 = 0;
  if (v16 || v14)
  {
    v30 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v30, "RawCameraException");
    __cxa_throw(v30, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v31 = (void (**)(_QWORD))v8;
  if (v37)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    if (v13 >= 0)
      v21 = v17;
    else
      v21 = -v17;
    v22 = 4 * v37;
    do
    {
      v23 = *(_DWORD *)(*(_QWORD *)(a1 + 256) + v18);
      v24 = (v11 * *(unsigned __int16 *)(a1 + 280) * *(unsigned __int16 *)(a1 + 220)) >> 3;
      *(_DWORD *)buf = v19;
      *(_DWORD *)&buf[4] = v20;
      v35 = v11;
      v36 = v23 / v24;
      if (sub_1D53ADDB8((int *)buf, a3))
        sub_1D535BD3C(a1, a2, v21, *(_DWORD *)(*(_QWORD *)(a1 + 232) + v18), v25, a3, a4, (int *)buf);
      v18 += 4;
      if ((int)(v19 + v11) >= v10)
        v26 = v12;
      else
        v26 = 0;
      v20 += v26;
      if ((int)(v19 + v11) >= v10)
        v19 = 0;
      else
        v19 += v11;
    }
    while (v22 != v18);
  }
  v31[2](v31);

}

void sub_1D535F358(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D535F3CC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGUncompressedUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

_QWORD *sub_1D535F450(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_1E998BBA0;
  v2 = (void *)a1[36];
  if (v2)
  {
    a1[37] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[32];
  if (v3)
  {
    a1[33] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[29];
  if (v4)
  {
    a1[30] = v4;
    operator delete(v4);
  }
  *a1 = &unk_1E998DB60;
  v5 = (void *)a1[24];
  if (v5)
  {
    a1[25] = v5;
    operator delete(v5);
  }
  return sub_1D5282F0C(a1);
}

void sub_1D535F4CC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_1E998BBA0;
  v2 = (void *)a1[36];
  if (v2)
  {
    a1[37] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[32];
  if (v3)
  {
    a1[33] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[29];
  if (v4)
  {
    a1[30] = v4;
    operator delete(v4);
  }
  *a1 = &unk_1E998DB60;
  v5 = (void *)a1[24];
  if (v5)
  {
    a1[25] = v5;
    operator delete(v5);
  }
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D535F55C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 312);
}

int64x2_t sub_1D535F564()
{
  uint64_t v0;
  int64x2_t result;
  int64x2_t v2;
  int64x2_t v3;
  float32x4_t v4;
  int64x2_t v5;
  int64x2_t v6;

  v0 = 0;
  result = (int64x2_t)xmmword_1D5447F80;
  v2 = (int64x2_t)xmmword_1D5447F90;
  v3 = (int64x2_t)xmmword_1D5447FA0;
  v4 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  v5 = (int64x2_t)xmmword_1D5447F70;
  v6 = vdupq_n_s64(8uLL);
  do
  {
    xmmword_1EFF11DD0[v0] = (__int128)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vdivq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v5)), vcvtq_f64_u64((uint64x2_t)v3)), v4)), vdivq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v2)), vcvtq_f64_u64((uint64x2_t)result)), v4));
    v2 = vaddq_s64(v2, v6);
    v3 = vaddq_s64(v3, v6);
    v5 = vaddq_s64(v5, v6);
    result = vaddq_s64(result, v6);
    ++v0;
  }
  while (v0 != 0x2000);
  return result;
}

uint64_t sub_1D535F5F8(uint64_t a1)
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D535F66C;
  block[3] = &unk_1E996F870;
  block[4] = a1;
  if (*(_QWORD *)(a1 + 320) != -1)
    dispatch_once((dispatch_once_t *)(a1 + 320), block);
  return *(_QWORD *)(a1 + 288);
}

void sub_1D535F66C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const struct __class_type_info *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  const struct __class_type_info *v13;
  const void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int16 *v33;
  __int16 v34;
  uint64_t v35;
  int16x8_t v36;
  uint64_t v37;
  int16x8_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t *v41;
  double *v42;
  double *v43;
  uint64_t v44;
  _QWORD *v45;
  std::__shared_weak_count *v46;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 200) - *(_QWORD *)(v1 + 192);
  if (v2)
    v3 = v2 > 0x20001;
  else
    v3 = 1;
  if (!v3)
  {
    sub_1D535F91C(v1 + 288, 0x10000uLL);
    *(_WORD *)(v1 + 312) = 1;
    v28 = *(char **)(v1 + 192);
    v27 = *(char **)(v1 + 200);
    v29 = *(_QWORD *)(v1 + 288);
    v30 = v27 - v28;
    if (v27 == v28)
    {
      LODWORD(v31) = 0;
      v33 = (__int16 *)(v29 + 0x1FFFFFFFELL);
    }
    else
    {
      LODWORD(v31) = 0;
      v32 = v30 >> 1;
      v33 = (__int16 *)(v29 - 2);
      do
      {
        v34 = *(_WORD *)v28;
        v28 += 2;
        v33[1] = v34;
        ++v33;
        v31 = (v31 + 1);
      }
      while (v32 > v31);
      if (WORD1(v31))
        return;
    }
    v39 = *v33;
    v31 = v31;
    do
      *(_WORD *)(v29 + 2 * v31++) = v39;
    while ((_DWORD)v31 != 0x10000);
    return;
  }
  v4 = v1 + 288;
  if (*(_QWORD *)(v1 + 336) - *(_QWORD *)(v1 + 328) == 48)
  {
    v41 = (uint64_t *)(v1 + 288);
    sub_1D535F91C(v4, 0x30000uLL);
    *(_WORD *)(v1 + 312) = 3;
    v6 = *(_QWORD *)(v1 + 328);
    v5 = *(_QWORD *)(v1 + 336);
    if (v6 != v5)
    {
      v7 = (const struct __class_type_info *)&unk_1E996FA38;
      v40 = *(_QWORD *)(v1 + 336);
      do
      {
        v8 = __dynamic_cast(*(const void **)v6, v7, (const struct __class_type_info *)&unk_1E99A3A48, 0);
        v9 = *(std::__shared_weak_count **)(v6 + 8);
        v45 = v8;
        v46 = v9;
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
        }
        v12 = *((unsigned int *)v8 + 7);
        if (v12 <= 2)
        {
          v13 = v7;
          v14 = (const void *)v8[6];
          v15 = v8[7];
          v16 = (v15 - (uint64_t)v14) >> 3;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          sub_1D5282C70(&v42, v14, v15, v16);
          v17 = 0;
          v18 = v16 - 1;
          v19 = v42;
          v20 = v12 << 16;
          v21 = *v41;
          do
          {
            v22 = 0;
            v23 = 0.0;
            do
            {
              v24 = v19[v22];
              v23 = v23 + v24 * pow((float)((float)v17 / 65535.0), (double)v22++);
            }
            while (v18 >= v22);
            *(_WORD *)(v21 + 2 * (v17 + v20)) = (int)(v23 * 65535.0);
            ++v17;
          }
          while (v17 != 0x10000);
          v43 = v19;
          operator delete(v19);
          v7 = v13;
          v5 = v40;
        }
        if (v9)
        {
          v25 = (unint64_t *)&v9->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v6 += 16;
      }
      while (v6 != v5);
    }
  }
  else
  {
    sub_1D535F91C(v4, 0x10000uLL);
    v35 = 0;
    *(_WORD *)(v1 + 312) = 1;
    v36 = (int16x8_t)xmmword_1D5447F60;
    v37 = *(_QWORD *)(v1 + 288);
    v38.i64[0] = 0x8000800080008;
    v38.i64[1] = 0x8000800080008;
    do
    {
      *(int16x8_t *)(v37 + v35) = v36;
      v36 = vaddq_s16(v36, v38);
      v35 += 16;
    }
    while (v35 != 0x20000);
  }
}

void sub_1D535F908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D5282EB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D535F91C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    sub_1D5363D40((char **)a1, a2 - v2);
  }
}

void *sub_1D535F94C(uint64_t a1, int a2, unsigned int a3)
{
  void *v5;
  uint64_t v6;
  int v8;
  int v9;

  v9 = a2;
  v5 = malloc_type_malloc(a3 + 64, 0x73736EF6uLL);
  v6 = *(_QWORD *)(a1 + 24);
  sub_1D5282F74(&v8, &v9);
  (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v6 + 40))(v6, &v8, 0);
  (*(void (**)(_QWORD, void *, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5, a3);
  return v5;
}

void sub_1D535F9E0(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    free(v1);
  __cxa_end_catch();
  JUMPOUT(0x1D535F9C8);
}

void sub_1D535FA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint8_t *v32;
  int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  BOOL v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  size_t v59;
  uint64_t i;
  uint64_t j;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  unsigned int *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unsigned __int8 *v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unsigned __int8 *v83;
  int v84;
  unsigned int v85;
  int v86;
  uint64_t v87;
  unsigned __int16 *v88;
  unint64_t v89;
  unsigned int v90;
  _WORD *v91;
  int v92;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *exception;
  void *v111;
  void *v112;
  void (**v113)(_QWORD);
  unsigned int v114;
  size_t v115;
  void *v116;
  uint64_t v117;
  unsigned __int8 *v118;
  uint64_t v119;
  unsigned __int8 *v120;
  unsigned int v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  unsigned int v130;
  uint64_t v131;
  int v132;
  char v133;
  uint64_t v134;
  unsigned __int16 *v135;
  int *v136;
  uint64_t v137;
  uint64_t v138;
  _DWORD *v139;
  uint64_t v140;
  __int128 v141;
  _OWORD v142[7];
  __int128 v143;
  _QWORD v144[5];
  uint8_t buf[8192];
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int16 *v150;
  uint64_t v151;

  v9 = MEMORY[0x1E0C80A78](a1);
  v134 = v10;
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v125 = v17;
  v136 = v18;
  v20 = v19;
  v21 = (unsigned __int16 *)v9;
  v151 = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v22 = objc_claimAutoreleasedReturnValue();
  v23 = v22;
  if ((unint64_t)v21 + 1 >= 2 && os_signpost_enabled(v22))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v23, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v21, "CDNGLosslessJpegUnpacker::unpackTile", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v144[0] = MEMORY[0x1E0C809B0];
  v144[1] = 3221225472;
  v144[2] = sub_1D5360AE8;
  v144[3] = &unk_1E996F870;
  v144[4] = v21;
  v24 = MEMORY[0x1D82721B4](v144);
  v143 = 0u;
  memset(v142, 0, sizeof(v142));
  v141 = 0u;
  if ((unint64_t)(v14 + 1) > v12)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v25 = (unsigned __int8 *)(v14 + 1);
  if (bswap32(*v14) >> 16 != 65496)
  {
    v111 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v111, "RawCameraException");
    __cxa_throw(v111, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v137 = v20;
  v139 = v16;
  v135 = v21;
  v113 = (void (**)(_QWORD))v24;
  v146 = 0uLL;
  v147 = 0uLL;
  v126 = v12;
  do
  {
    v26 = v25 + 4;
    if ((unint64_t)(v25 + 4) > v12)
      goto LABEL_156;
    v27 = v25;
    v28 = __rev16(*(unsigned __int16 *)v25);
    if (v28 < 0xFF01 || (v29 = __rev16(*((unsigned __int16 *)v25 + 1)), v29 >= 0x102))
    {
      v105 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v105, "RawCameraException");
      __cxa_throw(v105, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if ((unint64_t)&v26[v29 - 2] > v126)
    {
      v106 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v106, "RawCameraException");
      __cxa_throw(v106, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v25 = &v26[v29 - 2];
    if (v28 > 65475)
    {
      if (v28 == 65498)
      {
        v34 = *v26;
        v35 = &v26[2 * v34 + 1];
        if ((unint64_t)v35 > v126 || (v36 = &v26[(2 * v34 + 3)], (unint64_t)v36 > v126))
        {
          v109 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x1D8271938](v109, "RawCameraException");
          __cxa_throw(v109, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
        }
        DWORD1(v142[0]) = *v35;
        LOBYTE(v141) = v141 - (*v36 & 0xF);
      }
      else if (v28 == 65476)
      {
        while (v26 < v25)
        {
          v31 = *v26;
          if (v31 > 3)
            break;
          v32 = &buf[2048 * v31];
          *((_QWORD *)&v146 + v31) = v32;
          if (v21[95] >= 0x101u)
            v33 = 2;
          else
            v33 = 3;
          v26 = sub_1D53126BC(v26 + 1, (uint64_t)v32, v33);
          if (!v26)
          {
            v103 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](v103, "RawCameraException");
            __cxa_throw(v103, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
        }
      }
    }
    else
    {
      if (v28 == 65472)
      {
        v30 = v142[0];
      }
      else
      {
        if (v28 != 65475)
          goto LABEL_27;
        v30 = ((v27[11] >> 4) * v27[11] - 1) & 3;
        LODWORD(v142[0]) = v30;
      }
      LOBYTE(v141) = v27[4];
      *(_QWORD *)((char *)&v141 + 4) = __PAIR64__(__rev16(*(unsigned __int16 *)(v27 + 7)), __rev16(*(unsigned __int16 *)(v27 + 5)));
      HIDWORD(v141) = v30 + v27[9];
    }
LABEL_27:
    v37 = v28 == 65498;
    v12 = v126;
  }
  while (!v37);
  if ((HIDWORD(v141) - 5) <= 0xFFFFFFFB)
  {
LABEL_156:
    v104 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v104, "RawCameraException");
    __cxa_throw(v104, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v38 = (void *)operator new[]();
  *((_QWORD *)&v143 + 1) = v38;
  bzero(v38, 4 * DWORD2(v141) * HIDWORD(v141));
  if (!(_QWORD)v147)
    *(_QWORD *)&v147 = v146;
  v39 = *((_QWORD *)&v146 + 1);
  if (!*((_QWORD *)&v146 + 1))
    v39 = v146;
  *((_QWORD *)&v146 + 1) = v39;
  if (!(_QWORD)v146)
    *(_QWORD *)&v146 = v39;
  v40 = 0;
  do
  {
    if (!*((_QWORD *)&v146 + v40))
    {
      v107 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v107, "RawCameraException");
      __cxa_throw(v107, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    ++v40;
  }
  while (HIDWORD(v141) != v40);
  v41 = v16[2];
  if (v41 > 31999
    || (v42 = v16[3], v42 >= 32000)
    || SDWORD2(v141) >= 32000
    || SDWORD1(v141) >= 32000
    || (v116 = v38, (HIDWORD(v141) - 1) >= 3)
    || v42 * v41 != DWORD1(v141) * (DWORD2(v141) << (HIDWORD(v141) == 2))
    || (unint64_t)v25 >= v126)
  {
    v112 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v112, "RawCameraException");
    __cxa_throw(v112, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v43 = v25;
  v132 = DWORD2(v141) * HIDWORD(v141);
  v44 = (unsigned __int8 *)operator new[]();
  v115 = 16 * DWORD2(v141) * HIDWORD(v141);
  bzero(v44, v115);
  v45 = *v16;
  v46 = v16[1];
  v48 = *v136;
  v47 = v136[1];
  v118 = v44;
  v49 = v134;
  v50 = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v21 + 40))(v21);
  v51 = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v21 + 88))(v21);
  if (SDWORD1(v141) < 1)
    goto LABEL_152;
  v52 = 0;
  v53 = v46 - v47;
  v54 = v50;
  v55 = v139[2] * v50;
  v129 = (unint64_t)(v21[156] != 1) << 16;
  v122 = (unint64_t)(v21[156] != 1) << 17;
  if (HIDWORD(v141) == 3)
    v56 = 3;
  else
    v56 = 1;
  if (!a9)
    v56 = 4;
  if (!v51)
    v56 = 1;
  v128 = (v132 / v55);
  v117 = v132;
  v57 = 0;
  v124 = v45 - v48;
  v123 = v137 + 2 * (int)(v56 * (v45 - v48)) + 4;
  v138 = 2 * v56;
  v140 = 2 * v54;
  v58 = 32;
  v114 = v53;
  v121 = v53;
  v127 = v55;
  while (2)
  {
    if ((unint64_t)v43 > v126)
    {
      v108 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v108, "RawCameraException");
      __cxa_throw(v108, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if (v115 >= v126 - (unint64_t)v43)
      v59 = v126 - (_QWORD)v43;
    else
      v59 = 16 * DWORD2(v141) * HIDWORD(v141);
    memmove(v44, v43, v59);
    v148 = 0;
    v149 = 0;
    v150 = 0;
    if (!v57)
    {
      for (i = 0; i != 24; i += 4)
        *(_DWORD *)((char *)v142 + i + 12) = 1 << (v141 - 1);
    }
    for (j = 0; j != 3; ++j)
      *(&v148 + j) = (uint64_t)v116 + 2 * (((uint64_t)((unint64_t)(v57 + j) << 63) >> 63) & v117);
    v120 = v43;
    if (SDWORD2(v141) < 1)
    {
      v65 = v44;
      goto LABEL_112;
    }
    v62 = 0;
    v63 = v148;
    v64 = v149;
    v65 = v44;
    while (2)
    {
      v66 = 0;
      v67 = v64 - 2 * SHIDWORD(v141);
      v68 = &v146;
      v69 = (unsigned int *)v142 + 3;
      while (2)
      {
        if (v58 >= 16)
        {
          v70 = *v65;
          if (v70 == 255)
            v71 = 3;
          else
            v71 = 2;
          if (v70 == 255)
            v72 = 2;
          else
            v72 = 1;
          v73 = v65[v72];
          v74 = &v65[v71];
          v75 = (v52 << 16) | (v70 << 8);
          if (v73 == 255)
            v65 = v74 + 1;
          else
            v65 = v74;
          v52 = v75 | v73;
          v58 -= 16;
        }
        v76 = v52 << v58;
        v77 = *(unsigned __int16 *)(*(_QWORD *)v68 + 2 * ((v52 << v58) >> 23));
        v58 += (v77 >> 10) & 0x1F;
        if (v77 > 0x8000)
        {
          v77 = (char)v77;
          if (!v62)
            goto LABEL_100;
        }
        else
        {
          if ((v77 & 0x8000) != 0)
          {
            v77 = *(unsigned __int16 *)(*(_QWORD *)v68 + 2 * (HIWORD(v76) & 0x3FF));
            v58 += (v77 >> 10) & 0x1F;
          }
          v78 = v77 & 0x1F;
          if ((v77 & 0x1F) != 0)
          {
            if (v58 >= 16)
            {
              v79 = *v65;
              if (v79 == 255)
                v80 = 3;
              else
                v80 = 2;
              if (v79 == 255)
                v81 = 2;
              else
                v81 = 1;
              v82 = v65[v81];
              v83 = &v65[v80];
              v84 = (v52 << 16) | (v79 << 8);
              if (v82 == 255)
                v65 = v83 + 1;
              else
                v65 = v83;
              v52 = v84 | v82;
              v58 -= 16;
            }
            v77 = ((v52 << v58) >> -(char)v78) - ((((v52 << v58) >> 31) - 1) >> -(char)v78);
            v58 += v78;
            if (!v62)
            {
LABEL_100:
              v85 = *v69;
              *v69 += v77;
              goto LABEL_101;
            }
          }
          else
          {
            v77 = (v77 << 8) & 0x8000;
            if (!v62)
              goto LABEL_100;
          }
        }
        v85 = *(unsigned __int16 *)(v63 - 2 * SHIDWORD(v141) + v66);
        if (v57)
        {
          switch(DWORD1(v142[0]))
          {
            case 1:
              break;
            case 2:
              LOWORD(v85) = *(_WORD *)(v64 + v66);
              break;
            case 3:
              LOWORD(v85) = *(_WORD *)(v67 + v66);
              break;
            case 4:
              LOWORD(v85) = *(_WORD *)(v64 + v66) + v85 - *(_WORD *)(v67 + v66);
              break;
            case 5:
              v85 += (*(unsigned __int16 *)(v64 + v66) - *(unsigned __int16 *)(v67 + v66)) >> 1;
              break;
            case 6:
              v85 = *(unsigned __int16 *)(v64 + v66) + ((int)(v85 - *(unsigned __int16 *)(v67 + v66)) >> 1);
              break;
            case 7:
              v85 = (*(unsigned __int16 *)(v64 + v66) + v85) >> 1;
              break;
            default:
              LOWORD(v85) = 0;
              break;
          }
        }
LABEL_101:
        *(_WORD *)(v63 + v66) = v85 + v77;
        v148 = v63 + v66 + 2;
        v149 = v64 + v66 + 2;
        v68 = (__int128 *)((char *)v68 + 8);
        ++v69;
        v66 += 2;
        if (2 * HIDWORD(v141) != v66)
          continue;
        break;
      }
      ++v62;
      v64 += v66;
      v63 += v66;
      if (v62 != DWORD2(v141))
        continue;
      break;
    }
LABEL_112:
    v119 = v57;
    v86 = v114 + v128 * v57;
    if (v86 < 0)
      goto LABEL_151;
    v44 = v118;
    if (v86 < v136[3])
    {
      if ((int)v128 >= 1)
      {
        v87 = 0;
        v88 = v150;
        v89 = (unint64_t)&v150[v117];
        v133 = 16 - v141;
        v90 = v121;
        while (1)
        {
          v131 = v87;
          v130 = v90;
          if (v55 >= 1)
            break;
LABEL_150:
          v87 = v131 + 1;
          v90 = v130 + 1;
          v55 = v127;
          if (v131 + 1 == v128)
            goto LABEL_151;
        }
        v91 = (_WORD *)(v123 + v125 * v90);
        v92 = v124;
        while (2)
        {
          if ((v92 & 0x80000000) == 0 && v92 < v136[2] && (unint64_t)v88 < v89)
          {
            if ((*(unsigned int (**)(unsigned __int16 *))(*(_QWORD *)v135 + 88))(v135))
            {
              if ((HIDWORD(v141) - 1) > 1)
              {
                if (HIDWORD(v141) == 3)
                {
                  if ((unint64_t)(v88 + 3) > v89)
                  {
                    v102 = __cxa_allocate_exception(0x10uLL);
                    MEMORY[0x1D8271938](v102, "RawCameraException");
                    __cxa_throw(v102, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
                  }
                  v96 = *v88;
                  if (!a9)
                  {
                    v99 = *(unsigned __int16 *)(v49 + 2 * (int)((_DWORD)v96 << v133));
                    if (qword_1EFF11DC8 != -1)
                      dispatch_once(&qword_1EFF11DC8, &unk_1E998BE18);
                    *(v91 - 2) = *((_WORD *)xmmword_1EFF11DD0 + (v99 >> v133));
                    v100 = *(unsigned __int16 *)(v134 + 2 * (v129 + (v88[1] << v133)));
                    if (qword_1EFF11DC8 != -1)
                      dispatch_once(&qword_1EFF11DC8, &unk_1E998BE18);
                    *(v91 - 1) = *((_WORD *)xmmword_1EFF11DD0 + (v100 >> v133));
                    v101 = *(unsigned __int16 *)(v134 + 2 * (v129 + (v88[2] << v133)));
                    if (qword_1EFF11DC8 != -1)
                      dispatch_once(&qword_1EFF11DC8, &unk_1E998BE18);
                    *v91 = *((_WORD *)xmmword_1EFF11DD0 + (v101 >> v133));
                    if (qword_1EFF11DC8 != -1)
                      dispatch_once(&qword_1EFF11DC8, &unk_1E998BE18);
                    v49 = v134;
                    goto LABEL_146;
                  }
                  *(v91 - 2) = *(_WORD *)(v49 + 2 * v96);
                  *(v91 - 1) = *(_WORD *)(v49 + 2 * (v129 | v88[1]));
                  *v91 = *(_WORD *)(v49 + 2 * (v122 | v88[2]));
                }
              }
              else
              {
                v94 = *v88;
                if (a9)
                {
                  v95 = *(_WORD *)(v134 + 2 * v94);
                  v49 = v134;
                  goto LABEL_128;
                }
                if (qword_1EFF11DC8 != -1)
                  dispatch_once(&qword_1EFF11DC8, &unk_1E998BE18);
                v97 = *(unsigned __int16 *)(v134 + 2 * v94);
                v49 = v134;
                v98 = *((_WORD *)xmmword_1EFF11DD0 + v97);
                *v91 = v98;
                *(v91 - 1) = v98;
                *(v91 - 2) = v98;
                if (qword_1EFF11DC8 != -1)
                  dispatch_once(&qword_1EFF11DC8, &unk_1E998BE18);
LABEL_146:
                v91[1] = HIWORD(xmmword_1EFF11DD0[0x1FFF]);
              }
            }
            else
            {
              v95 = *(_WORD *)(v49 + 2 * *v88);
LABEL_128:
              *(v91 - 2) = v95;
            }
          }
          ++v92;
          v88 = (unsigned __int16 *)((char *)v88 + v140);
          v91 = (_WORD *)((char *)v91 + v138);
          if (!--v55)
            goto LABEL_150;
          continue;
        }
      }
LABEL_151:
      v44 = v118;
      v43 = &v120[v65 - v118];
      v57 = v119 + 1;
      v121 += v128;
      if (v119 + 1 != DWORD1(v141))
        continue;
    }
    break;
  }
LABEL_152:
  MEMORY[0x1D8271AC4](v44, 0x1000C8077774924);
  MEMORY[0x1D8271AC4](v116, 0x1000C8077774924);
  v113[2](v113);

}

void sub_1D5360904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;

  if (a2)
  {
    __cxa_free_exception(v18);
    MEMORY[0x1D8271AC4](a15, 0x1000C8077774924);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1D5360538);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D5360AA4()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(v0 + 16))(v0);
  JUMPOUT(0x1D5360940);
}

void sub_1D5360ABC(void *a1, int a2)
{
  if (a2)
    sub_1D5281424(a1);
  JUMPOUT(0x1D536094CLL);
}

void sub_1D5360AE8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGLosslessJpegUnpacker::unpackTile", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D5360B6C(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  void *exception;
  void *v19;
  void (**v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  int v23;
  int32x2_t v24;
  int v25;
  uint8_t buf[8];
  _DWORD v27[4];
  _QWORD v28[5];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CDNGLosslessJpegUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = sub_1D5360FD0;
  v28[3] = &unk_1E996F870;
  v28[4] = a1;
  v20 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v28);
  if (*(_DWORD *)(a1 + 216) || (*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 224))(a1) == 2)
  {
    sub_1D5361054(a1);
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 44);
    v23 = *(_DWORD *)(a1 + 48);
    v5 = *(_DWORD *)(a1 + 224);
    v6 = *(_DWORD *)(a1 + 228);
    *(_QWORD *)buf = (uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 2;
    sub_1D528304C(&v24, (unint64_t *)buf);
    v7 = v24.u32[0];
    v8 = (*(uint64_t (**)(os_signpost_id_t))(*(_QWORD *)a1 + 40))(a1);
    if (*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232) != *(_QWORD *)(a1 + 264) - *(_QWORD *)(a1 + 256)
      || v4 - 100000 < 0xFFFE7961
      || (v23 - 100000) < 0xFFFE7961
      || v5 - 100000 < 0xFFFE7961
      || v6 - 100000 < 0xFFFE7961
      || v7 >> 5 >= 0x271)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    if ((((v23 + v6 - 1) / v6) >> (*(_DWORD *)(a1 + 216) != 0)) * ((v4 + v5 - 1) / v5) != (_DWORD)v7)
    {
      v19 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v19, "RawCameraException");
      __cxa_throw(v19, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v9 = v8;
    v22 = sub_1D530B618(a1);
    if ((_DWORD)v7)
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v21 = 2 * v4 * v9;
      v13 = 4 * v7;
      do
      {
        v14 = sub_1D535F94C(a1, *(_DWORD *)(*(_QWORD *)(a1 + 232) + v10), *(_DWORD *)(*(_QWORD *)(a1 + 256) + v10));
        if (v14)
        {
          v15 = *(unsigned int *)(*(_QWORD *)(a1 + 256) + v10);
          *(_QWORD *)buf = 0;
          sub_1D5282DF0(v27, v4, v23);
          sub_1D5282DF0(&v24, v11, v12);
          sub_1D5282DF0(&v25, v5, v6);
          v16 = sub_1D535F5F8(a1);
          sub_1D536242C(a1, v22, (int32x2_t *)buf, v21, &v24, (uint64_t)v14, (uint64_t)v14 + v15, v16, 1);
          free(v14);
        }
        v10 += 4;
        if (v11 + v5 >= v4)
          v17 = v6;
        else
          v17 = 0;
        v12 += v17;
        if (v11 + v5 >= v4)
          v11 = 0;
        else
          v11 += v5;
      }
      while (v13 != v10);
    }
  }
  v20[2](v20);

}

void sub_1D5360F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(_QWORD))
{
  a11[2](a11);

  _Unwind_Resume(a1);
}

void sub_1D5360FD0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGLosslessJpegUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

uint64_t sub_1D5361054(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unsigned int v26;
  unsigned __int16 *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  _OWORD *v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  size_t v42;
  void *v43;
  uint64_t v44;
  int v45;
  _WORD *v46;
  uint64_t i;
  _WORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned __int16 *v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned __int16 *v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  _WORD *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned __int16 *v75;
  int v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unsigned __int16 *v85;
  int v86;
  _WORD *v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unsigned __int16 *v93;
  int v94;
  unsigned int v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  unsigned __int16 *v101;
  int v102;
  unsigned int j;
  __int128 *v104;
  unsigned int *v105;
  _QWORD *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  unsigned __int16 *v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unsigned __int16 *v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  size_t v132;
  void *v133;
  uint64_t v134;
  int v135;
  _WORD *v136;
  uint64_t k;
  int v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  unsigned __int16 *v142;
  int v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  unsigned __int16 *v152;
  int v153;
  unsigned int v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  unsigned __int16 *v162;
  int v163;
  unsigned int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  unsigned __int16 *v172;
  int v173;
  _WORD *v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  unsigned __int16 *v180;
  int v181;
  unsigned int v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  unsigned __int16 *v188;
  int v189;
  unsigned int m;
  uint64_t n;
  int v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  unsigned __int16 *v196;
  int v197;
  uint64_t v198;
  unsigned int v199;
  unsigned int v200;
  int v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  unsigned __int16 *v206;
  int v207;
  unsigned int v208;
  void *v210;
  void *v211;
  void *v212;
  void *exception;
  void *v214;
  void *v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  unsigned __int16 *v222;
  unsigned int v223;
  uint64_t v224;
  unsigned int v225;
  unsigned int v226;
  int v227;
  unsigned int v228;
  unsigned int v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned __int16 *v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  size_t __len;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unsigned int v241;
  __int128 v242;
  _QWORD v243[2];
  _OWORD v244[513];
  _OWORD v245[2];
  uint64_t v246;

  v1 = MEMORY[0x1E0C80A78](a1);
  v246 = *MEMORY[0x1E0C80C00];
  v244[0] = xmmword_1D544CD90;
  v242 = xmmword_1D544CD60;
  v2 = *(_DWORD *)(v1 + 48);
  v228 = *(_DWORD *)(v1 + 224);
  v229 = *(_DWORD *)(v1 + 44);
  v232 = *(unsigned int *)(v1 + 228);
  v3 = v1;
  v240 = (uint64_t)(*(_QWORD *)(v1 + 240) - *(_QWORD *)(v1 + 232)) >> 2;
  sub_1D528304C(&v241, &v240);
  if (v229 - 100000 < 0xFFFE7961)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if ((v2 - 100000) < 0xFFFE7961)
  {
    v214 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v214, "RawCameraException");
    __cxa_throw(v214, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v228 - 100000 < 0xFFFE7961)
  {
    v215 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v215, "RawCameraException");
    __cxa_throw(v215, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if ((v232 - 100000) < 0xFFFE7961)
  {
    v216 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v216, "RawCameraException");
    __cxa_throw(v216, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v4 = v241;
  if (v241 >> 5 >= 0x271)
  {
    v217 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v217, "RawCameraException");
    __cxa_throw(v217, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v5 = *(_DWORD *)(v3 + 216);
  v6 = v5 != 0;
  if ((((v2 + (int)v232 - 1) / v232) >> (v5 != 0)) * ((v229 + v228 - 1) / v228) != v241)
  {
    v218 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v218, "RawCameraException");
    __cxa_throw(v218, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v7 = v5 == 2;
  if (v5 == 1)
  {
    v8 = 1 - v229;
    LODWORD(v242) = v229 + 1;
    DWORD1(v242) = 1 - v229;
    DWORD2(v242) = v229 + 1;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_12;
    DWORD1(v242) = v229;
    v8 = -v229;
  }
  HIDWORD(v242) = v8;
LABEL_12:
  v9 = *(unsigned int **)(v3 + 256);
  v10 = *(unsigned int **)(v3 + 264);
  if (v9 == v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      LODWORD(v240) = v11;
      v11 = *sub_1D5294254((int *)&v240, v9++);
    }
    while (v9 != v10);
  }
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 24) + 16))(*(_QWORD *)(v3 + 24));
  if ((v11 & 0x80000000) == 0 && v11 >= v12)
  {
    v219 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v219, "RawCameraException");
    __cxa_throw(v219, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v13 = *(unsigned int **)(v3 + 256);
  v14 = *(unsigned int **)(v3 + 264);
  if (v13 != v14)
  {
    v15 = v13 + 1;
    if (v13 + 1 != v14)
    {
      v16 = *v13;
      v17 = v13 + 1;
      do
      {
        v19 = *v17++;
        v18 = v19;
        v20 = v16 >= v19;
        if (v16 <= v19)
          v16 = v18;
        if (!v20)
          v13 = v15;
        v15 = v17;
      }
      while (v17 != v14);
    }
  }
  v21 = *v13 + 64;
  v222 = (unsigned __int16 *)operator new[]();
  bzero(v222, v21);
  if ((_DWORD)v4)
  {
    v22 = 0;
    v234 = 0;
    v220 = v4;
    v221 = 8 * (v228 << v7);
    v227 = ((_DWORD)v232 << v6) * v229;
    v225 = v228 << v7;
    v223 = 2 * (v228 << v7);
    v226 = v229 / v228;
    v224 = v3;
    while (1)
    {
      v23 = *(unsigned int *)(*(_QWORD *)(v3 + 256) + 4 * v22);
      v24 = *(_QWORD *)(v3 + 24);
      sub_1D5282F74((int *)&v240, (int *)(*(_QWORD *)(v3 + 232) + 4 * v22));
      (*(void (**)(uint64_t, unint64_t *, _QWORD))(*(_QWORD *)v24 + 40))(v24, &v240, 0);
      (*(void (**)(_QWORD, unsigned __int16 *, _QWORD))(**(_QWORD **)(v3 + 24) + 32))(*(_QWORD *)(v3 + 24), v222, *(unsigned int *)(*(_QWORD *)(v3 + 256) + 4 * v22));
      if (bswap32(*v222) >> 16 != 65496)
        goto LABEL_343;
      v233 = (unsigned __int16 *)((char *)v222 + v23);
      memset(v245, 0, sizeof(v245));
      v25 = v222 + 1;
      do
      {
        v26 = __rev16(*v25);
        if (v26 < 0xFF01)
          goto LABEL_343;
        v27 = v25;
        v28 = __rev16(v25[1]);
        if (v28 >= 0x102)
          goto LABEL_343;
        v29 = (unsigned __int8 *)(v25 + 2);
        v25 = (unsigned __int16 *)((char *)v25 + v28 + 2);
        if (v26 == 65475)
        {
          v244[0] = vdupq_n_s32(1 << (*((_BYTE *)v27 + 4) - 1));
          v234 = *((unsigned __int8 *)v27 + 9);
          if ((v234 - 5) <= 0xFFFFFFFB)
          {
            v212 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](v212, "RawCameraException");
            __cxa_throw(v212, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
        }
        else if (v26 == 65476)
        {
          while (v29 < (unsigned __int8 *)v25)
          {
            v30 = *v29;
            if (v30 > 3)
              break;
            v31 = &v244[128 * v30 + 1];
            *((_QWORD *)v245 + v30) = v31;
            if (*(unsigned __int16 *)(v3 + 190) >= 0x101u)
              v32 = 2;
            else
              v32 = 3;
            v29 = sub_1D53126BC(v29 + 1, (uint64_t)v31, v32);
            if (!v29)
            {
              v210 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x1D8271938](v210, "RawCameraException");
              __cxa_throw(v210, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
            }
          }
        }
      }
      while (v26 != 65498);
      if (v234 >= 1)
        break;
LABEL_48:
      v231 = v22;
      v238 = *((_QWORD *)&v245[0] + 1);
      v239 = *(_QWORD *)&v245[0];
      v243[0] = 0;
      v243[1] = 0;
      v35 = sub_1D535F5F8(v3);
      v230 = v221 * v234;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 224))(v3) == 1 || *(_DWORD *)(v3 + 216) == 2)
      {
        v36 = 0;
        __len = 0;
        v37 = 0;
        v38 = 32;
        v39 = v232;
        while (1)
        {
          v235 = v36;
          v40 = (v39 - v36);
          v41 = (char *)v233 - (char *)v25 + ((39 - v38) >> 3);
          if (!__len && v41 > 2 * (unint64_t)(v234 * v225 * v40))
            break;
          if (!__len && v41 < v230)
          {
            if (v233 == v25)
            {
              __len = 0;
              v25 = v233;
            }
            else
            {
              v42 = v230 * v40;
              v43 = (void *)operator new[]();
              bzero(v43, v42);
              memmove(v43, v25, (char *)v233 - (char *)v25);
              __len = (size_t)v43;
              v25 = (unsigned __int16 *)v43;
              v3 = v224;
            }
          }
          v44 = sub_1D530B618(v3);
          v39 = v232;
          v45 = *(_DWORD *)(v3 + 216);
          v46 = (_WORD *)(v44
                        + 2 * v227 * (v231 / v226)
                        + 2 * v231 % v226 * v228
                        + 2 * ((v229 * v235) << (v45 != 0)));
          if (v234 < 1)
            goto LABEL_155;
          for (i = 0; i != v234; ++i)
          {
            v48 = v46;
            if (v38 >= 16)
            {
              v49 = *(unsigned __int8 *)v25;
              if (v49 == 255)
                v50 = 3;
              else
                v50 = 2;
              if (v49 == 255)
                v51 = 2;
              else
                v51 = 1;
              v52 = *((unsigned __int8 *)v25 + v51);
              v53 = (unsigned __int16 *)((char *)v25 + v50);
              v54 = (v37 << 16) | (v49 << 8);
              if (v52 == 255)
                v25 = (unsigned __int16 *)((char *)v53 + 1);
              else
                v25 = v53;
              v37 = v54 | v52;
              v38 -= 16;
            }
            v55 = *((_QWORD *)v245 + i);
            v56 = v37 << v38;
            v57 = *(unsigned __int16 *)(v55 + 2 * ((v37 << v38) >> 23));
            v38 += (v57 >> 10) & 0x1F;
            if (v57 > 0x8000)
            {
              v57 = (char)v57;
            }
            else
            {
              if ((v57 & 0x8000) != 0)
              {
                v57 = *(unsigned __int16 *)(v55 + 2 * (HIWORD(v56) & 0x3FF));
                v38 += (v57 >> 10) & 0x1F;
              }
              v58 = v57 & 0x1F;
              if ((v57 & 0x1F) != 0)
              {
                if (v38 >= 16)
                {
                  v59 = *(unsigned __int8 *)v25;
                  if (v59 == 255)
                    v60 = 3;
                  else
                    v60 = 2;
                  if (v59 == 255)
                    v61 = 2;
                  else
                    v61 = 1;
                  v62 = *((unsigned __int8 *)v25 + v61);
                  v63 = (unsigned __int16 *)((char *)v25 + v60);
                  v64 = (v37 << 16) | (v59 << 8);
                  if (v62 == 255)
                    v25 = (unsigned __int16 *)((char *)v63 + 1);
                  else
                    v25 = v63;
                  v37 = v64 | v62;
                  v38 -= 16;
                }
                v57 = ((v37 << v38) >> -(char)v58)
                    - ((((v37 << v38) >> 31) - 1) >> -(char)v58);
                v38 += v58;
              }
              else
              {
                v57 = (v57 << 8) & 0x8000;
              }
            }
            v65 = *((_DWORD *)v244 + i) + v57;
            *((_DWORD *)v244 + i) = v65;
            *((_DWORD *)v243 + i) = v65;
            *v48 = *(_WORD *)(v35 + 2 * (unsigned __int16)v65);
            v66 = *((int *)&v243[-2] + i);
            v46 = &v48[v66];
          }
          if (v234 != 2 || v45)
          {
LABEL_155:
            for (j = v234; j < v225; j += v234)
            {
              if (v234 >= 1)
              {
                v104 = &v242;
                v105 = (unsigned int *)v243;
                v106 = v245;
                v107 = v234;
                do
                {
                  if (v38 >= 16)
                  {
                    v108 = *(unsigned __int8 *)v25;
                    if (v108 == 255)
                      v109 = 3;
                    else
                      v109 = 2;
                    if (v108 == 255)
                      v110 = 2;
                    else
                      v110 = 1;
                    v111 = *((unsigned __int8 *)v25 + v110);
                    v112 = (unsigned __int16 *)((char *)v25 + v109);
                    v113 = (v37 << 16) | (v108 << 8);
                    if (v111 == 255)
                      v25 = (unsigned __int16 *)((char *)v112 + 1);
                    else
                      v25 = v112;
                    v37 = v113 | v111;
                    v38 -= 16;
                  }
                  v114 = v37 << v38;
                  v115 = *(unsigned __int16 *)(*v106 + 2 * ((v37 << v38) >> 23));
                  v38 += (v115 >> 10) & 0x1F;
                  if (v115 > 0x8000)
                  {
                    v115 = (char)v115;
                  }
                  else
                  {
                    if ((v115 & 0x8000) != 0)
                    {
                      v115 = *(unsigned __int16 *)(*v106 + 2 * (HIWORD(v114) & 0x3FF));
                      v38 += (v115 >> 10) & 0x1F;
                    }
                    v116 = v115 & 0x1F;
                    if ((v115 & 0x1F) != 0)
                    {
                      if (v38 >= 16)
                      {
                        v117 = *(unsigned __int8 *)v25;
                        if (v117 == 255)
                          v118 = 3;
                        else
                          v118 = 2;
                        if (v117 == 255)
                          v119 = 2;
                        else
                          v119 = 1;
                        v120 = *((unsigned __int8 *)v25 + v119);
                        v121 = (unsigned __int16 *)((char *)v25 + v118);
                        v122 = (v37 << 16) | (v117 << 8);
                        if (v120 == 255)
                          v25 = (unsigned __int16 *)((char *)v121 + 1);
                        else
                          v25 = v121;
                        v37 = v122 | v120;
                        v38 -= 16;
                      }
                      v115 = ((v37 << v38) >> -(char)v116)
                           - ((((v37 << v38) >> 31) - 1) >> -(char)v116);
                      v38 += v116;
                    }
                    else
                    {
                      v115 = (v115 << 8) & 0x8000;
                    }
                  }
                  v123 = *v105 + v115;
                  *v105++ = v123;
                  *v46 = *(_WORD *)(v35 + 2 * (unsigned __int16)v123);
                  v124 = *(int *)v104;
                  v104 = (__int128 *)((char *)v104 + 4);
                  v46 += v124;
                  ++v106;
                  --v107;
                }
                while (v107);
              }
            }
          }
          else if (v225 >= 3)
          {
            v67 = 0;
            v69 = v243[0];
            v68 = HIDWORD(v243[0]);
            v70 = &v48[v66];
            do
            {
              if (v38 >= 16)
              {
                v71 = *(unsigned __int8 *)v25;
                if (v71 == 255)
                  v72 = 3;
                else
                  v72 = 2;
                if (v71 == 255)
                  v73 = 2;
                else
                  v73 = 1;
                v74 = *((unsigned __int8 *)v25 + v73);
                v75 = (unsigned __int16 *)((char *)v25 + v72);
                v76 = (v37 << 16) | (v71 << 8);
                if (v74 == 255)
                  v25 = (unsigned __int16 *)((char *)v75 + 1);
                else
                  v25 = v75;
                v37 = v76 | v74;
                v38 -= 16;
              }
              v77 = *(unsigned __int16 *)(v239 + 2 * ((v37 << v38) >> 23));
              v78 = ((v77 >> 10) & 0x1F) + v38;
              if (v77 > 0x8000)
              {
                v77 = (char)v77;
              }
              else
              {
                if ((v77 & 0x8000) != 0)
                {
                  v77 = *(unsigned __int16 *)(v239 + 2 * (((v37 << v38) >> 16) & 0x3FF));
                  v78 += (v77 >> 10) & 0x1F;
                }
                v79 = v77 & 0x1F;
                if ((v77 & 0x1F) != 0)
                {
                  v80 = v78 - 16;
                  if (v78 >= 16)
                  {
                    v81 = *(unsigned __int8 *)v25;
                    if (v81 == 255)
                      v82 = 3;
                    else
                      v82 = 2;
                    if (v81 == 255)
                      v83 = 2;
                    else
                      v83 = 1;
                    v84 = *((unsigned __int8 *)v25 + v83);
                    v85 = (unsigned __int16 *)((char *)v25 + v82);
                    v86 = (v37 << 16) | (v81 << 8);
                    if (v84 == 255)
                      v25 = (unsigned __int16 *)((char *)v85 + 1);
                    else
                      v25 = v85;
                    v37 = v86 | v84;
                    v78 = v80;
                  }
                  v77 = ((v37 << v78) >> -(char)v79)
                      - ((((v37 << v78) >> 31) - 1) >> -(char)v79);
                  v78 += v79;
                }
                else
                {
                  v77 = (v77 << 8) & 0x8000;
                }
              }
              v87 = &v70[v67];
              v69 += v77;
              LODWORD(v243[0]) = v69;
              *v87 = *(_WORD *)(v35 + 2 * (unsigned __int16)v69);
              v88 = v78 - 16;
              if (v78 >= 16)
              {
                v89 = *(unsigned __int8 *)v25;
                if (v89 == 255)
                  v90 = 3;
                else
                  v90 = 2;
                if (v89 == 255)
                  v91 = 2;
                else
                  v91 = 1;
                v92 = *((unsigned __int8 *)v25 + v91);
                v93 = (unsigned __int16 *)((char *)v25 + v90);
                v94 = (v37 << 16) | (v89 << 8);
                if (v92 == 255)
                  v25 = (unsigned __int16 *)((char *)v93 + 1);
                else
                  v25 = v93;
                v37 = v94 | v92;
                v78 = v88;
              }
              v95 = *(unsigned __int16 *)(v238 + 2 * ((v37 << v78) >> 23));
              v38 = ((v95 >> 10) & 0x1F) + v78;
              if (v95 > 0x8000)
              {
                v95 = (char)v95;
              }
              else
              {
                if ((v95 & 0x8000) != 0)
                {
                  v95 = *(unsigned __int16 *)(v238 + 2 * (((v37 << v78) >> 16) & 0x3FF));
                  v38 += (v95 >> 10) & 0x1F;
                }
                v96 = v95 & 0x1F;
                if ((v95 & 0x1F) != 0)
                {
                  if (v38 >= 16)
                  {
                    v97 = *(unsigned __int8 *)v25;
                    if (v97 == 255)
                      v98 = 3;
                    else
                      v98 = 2;
                    if (v97 == 255)
                      v99 = 2;
                    else
                      v99 = 1;
                    v100 = *((unsigned __int8 *)v25 + v99);
                    v101 = (unsigned __int16 *)((char *)v25 + v98);
                    v102 = (v37 << 16) | (v97 << 8);
                    if (v100 == 255)
                      v25 = (unsigned __int16 *)((char *)v101 + 1);
                    else
                      v25 = v101;
                    v37 = v102 | v100;
                    v38 -= 16;
                  }
                  v95 = ((v37 << v38) >> -(char)v96)
                      - ((((v37 << v38) >> 31) - 1) >> -(char)v96);
                  v38 += v96;
                }
                else
                {
                  v95 = (v95 << 8) & 0x8000;
                }
              }
              v68 += v95;
              HIDWORD(v243[0]) = v68;
              v87[1] = *(_WORD *)(v35 + 2 * (unsigned __int16)v68);
              v67 += 2;
            }
            while ((int)v67 + 2 < v225);
          }
          v36 = v235 + 1;
          if (v235 + 1 == v232)
            goto LABEL_339;
        }
      }
      else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 224))(v3) == 2 && (_DWORD)v232 != 0)
      {
        v126 = 0;
        __len = 0;
        v127 = 0;
        v128 = 32;
        v129 = v232;
        while (1)
        {
          v236 = v126;
          v130 = (v129 - v126);
          v131 = (char *)v233 - (char *)v25 + ((39 - v128) >> 3);
          if (!__len && v131 > 2 * (unint64_t)(v234 * v225 * v130))
            break;
          if (!__len && v131 < v230)
          {
            if (v233 == v25)
            {
              __len = 0;
              v25 = v233;
            }
            else
            {
              v132 = v230 * v130;
              v133 = (void *)operator new[]();
              bzero(v133, v132);
              memmove(v133, v25, (char *)v233 - (char *)v25);
              __len = (size_t)v133;
              v25 = (unsigned __int16 *)v133;
              v3 = v224;
            }
          }
          v134 = sub_1D530B618(v3);
          v129 = v232;
          v135 = *(_DWORD *)(v3 + 216);
          v136 = (_WORD *)(v134
                         + 2 * v227 * (v231 / v226)
                         + 2 * v231 % v226 * v228
                         + 2 * ((v229 * v236) << (v135 != 0)));
          if (v234 < 1)
            goto LABEL_302;
          for (k = 0; k != v234; ++k)
          {
            if (v128 >= 16)
            {
              v138 = *(unsigned __int8 *)v25;
              if (v138 == 255)
                v139 = 3;
              else
                v139 = 2;
              if (v138 == 255)
                v140 = 2;
              else
                v140 = 1;
              v141 = *((unsigned __int8 *)v25 + v140);
              v142 = (unsigned __int16 *)((char *)v25 + v139);
              v143 = (v127 << 16) | (v138 << 8);
              if (v141 == 255)
                v25 = (unsigned __int16 *)((char *)v142 + 1);
              else
                v25 = v142;
              v127 = v143 | v141;
              v128 -= 16;
            }
            v144 = *((_QWORD *)v245 + k);
            v145 = v127 << v128;
            v146 = *(unsigned __int16 *)(v144 + 2 * ((v127 << v128) >> 23));
            v128 += (v146 >> 10) & 0x1F;
            if (v146 > 0x8000)
            {
              v146 = (char)v146;
            }
            else
            {
              if ((v146 & 0x8000) != 0)
              {
                v146 = *(unsigned __int16 *)(v144 + 2 * (HIWORD(v145) & 0x3FF));
                v128 += (v146 >> 10) & 0x1F;
              }
              v147 = v146 & 0x1F;
              if ((v146 & 0x1F) != 0)
              {
                if (v128 >= 16)
                {
                  v148 = *(unsigned __int8 *)v25;
                  if (v148 == 255)
                    v149 = 3;
                  else
                    v149 = 2;
                  if (v148 == 255)
                    v150 = 2;
                  else
                    v150 = 1;
                  v151 = *((unsigned __int8 *)v25 + v150);
                  v152 = (unsigned __int16 *)((char *)v25 + v149);
                  v153 = (v127 << 16) | (v148 << 8);
                  if (v151 == 255)
                    v25 = (unsigned __int16 *)((char *)v152 + 1);
                  else
                    v25 = v152;
                  v127 = v153 | v151;
                  v128 -= 16;
                }
                v146 = ((v127 << v128) >> -(char)v147)
                     - ((((v127 << v128) >> 31) - 1) >> -(char)v147);
                v128 += v147;
              }
              else
              {
                v146 = (v146 << 8) & 0x8000;
              }
            }
            v154 = *((_DWORD *)v244 + k) + v146;
            *((_DWORD *)v244 + k) = v154;
            *((_DWORD *)v243 + k) = v154;
            if ((k & 1) == 0)
            {
              *v136 = *(_WORD *)(v35 + 2 * (unsigned __int16)v154);
              v136 += *((int *)&v243[-2] + k);
            }
          }
          if (v234 != 2 || v135)
          {
LABEL_302:
            for (m = v234; m < v223; m += v234)
            {
              if (v234 >= 1)
              {
                for (n = 0; n != v234; ++n)
                {
                  if (v128 >= 16)
                  {
                    v192 = *(unsigned __int8 *)v25;
                    if (v192 == 255)
                      v193 = 3;
                    else
                      v193 = 2;
                    if (v192 == 255)
                      v194 = 2;
                    else
                      v194 = 1;
                    v195 = *((unsigned __int8 *)v25 + v194);
                    v196 = (unsigned __int16 *)((char *)v25 + v193);
                    v197 = (v127 << 16) | (v192 << 8);
                    if (v195 == 255)
                      v25 = (unsigned __int16 *)((char *)v196 + 1);
                    else
                      v25 = v196;
                    v127 = v197 | v195;
                    v128 -= 16;
                  }
                  v198 = *((_QWORD *)v245 + n);
                  v199 = v127 << v128;
                  v200 = *(unsigned __int16 *)(v198 + 2 * ((v127 << v128) >> 23));
                  v128 += (v200 >> 10) & 0x1F;
                  if (v200 > 0x8000)
                  {
                    v200 = (char)v200;
                  }
                  else
                  {
                    if ((v200 & 0x8000) != 0)
                    {
                      v200 = *(unsigned __int16 *)(v198 + 2 * (HIWORD(v199) & 0x3FF));
                      v128 += (v200 >> 10) & 0x1F;
                    }
                    v201 = v200 & 0x1F;
                    if ((v200 & 0x1F) != 0)
                    {
                      if (v128 >= 16)
                      {
                        v202 = *(unsigned __int8 *)v25;
                        if (v202 == 255)
                          v203 = 3;
                        else
                          v203 = 2;
                        if (v202 == 255)
                          v204 = 2;
                        else
                          v204 = 1;
                        v205 = *((unsigned __int8 *)v25 + v204);
                        v206 = (unsigned __int16 *)((char *)v25 + v203);
                        v207 = (v127 << 16) | (v202 << 8);
                        if (v205 == 255)
                          v25 = (unsigned __int16 *)((char *)v206 + 1);
                        else
                          v25 = v206;
                        v127 = v207 | v205;
                        v128 -= 16;
                      }
                      v200 = ((v127 << v128) >> -(char)v201)
                           - ((((v127 << v128) >> 31) - 1) >> -(char)v201);
                      v128 += v201;
                    }
                    else
                    {
                      v200 = (v200 << 8) & 0x8000;
                    }
                  }
                  v208 = *((_DWORD *)v243 + n) + v200;
                  *((_DWORD *)v243 + n) = v208;
                  if ((n & 1) == 0)
                  {
                    *v136 = *(_WORD *)(v35 + 2 * (unsigned __int16)v208);
                    v136 += *((int *)&v243[-2] + n);
                  }
                }
              }
            }
          }
          else if (v223 >= 3)
          {
            v155 = 0;
            v157 = v243[0];
            v156 = HIDWORD(v243[0]);
            do
            {
              if (v128 >= 16)
              {
                v158 = *(unsigned __int8 *)v25;
                if (v158 == 255)
                  v159 = 3;
                else
                  v159 = 2;
                if (v158 == 255)
                  v160 = 2;
                else
                  v160 = 1;
                v161 = *((unsigned __int8 *)v25 + v160);
                v162 = (unsigned __int16 *)((char *)v25 + v159);
                v163 = (v127 << 16) | (v158 << 8);
                if (v161 == 255)
                  v25 = (unsigned __int16 *)((char *)v162 + 1);
                else
                  v25 = v162;
                v127 = v163 | v161;
                v128 -= 16;
              }
              v164 = *(unsigned __int16 *)(v239 + 2 * ((v127 << v128) >> 23));
              v165 = ((v164 >> 10) & 0x1F) + v128;
              if (v164 > 0x8000)
              {
                v164 = (char)v164;
              }
              else
              {
                if ((v164 & 0x8000) != 0)
                {
                  v164 = *(unsigned __int16 *)(v239 + 2 * (((v127 << v128) >> 16) & 0x3FF));
                  v165 += (v164 >> 10) & 0x1F;
                }
                v166 = v164 & 0x1F;
                if ((v164 & 0x1F) != 0)
                {
                  v167 = v165 - 16;
                  if (v165 >= 16)
                  {
                    v168 = *(unsigned __int8 *)v25;
                    if (v168 == 255)
                      v169 = 3;
                    else
                      v169 = 2;
                    if (v168 == 255)
                      v170 = 2;
                    else
                      v170 = 1;
                    v171 = *((unsigned __int8 *)v25 + v170);
                    v172 = (unsigned __int16 *)((char *)v25 + v169);
                    v173 = (v127 << 16) | (v168 << 8);
                    if (v171 == 255)
                      v25 = (unsigned __int16 *)((char *)v172 + 1);
                    else
                      v25 = v172;
                    v127 = v173 | v171;
                    v165 = v167;
                  }
                  v164 = ((v127 << v165) >> -(char)v166)
                       - ((((v127 << v165) >> 31) - 1) >> -(char)v166);
                  v165 += v166;
                }
                else
                {
                  v164 = (v164 << 8) & 0x8000;
                }
              }
              v174 = &v136[v155];
              v157 += v164;
              LODWORD(v243[0]) = v157;
              *v174 = *(_WORD *)(v35 + 2 * (unsigned __int16)v157);
              v175 = v165 - 16;
              if (v165 >= 16)
              {
                v176 = *(unsigned __int8 *)v25;
                if (v176 == 255)
                  v177 = 3;
                else
                  v177 = 2;
                if (v176 == 255)
                  v178 = 2;
                else
                  v178 = 1;
                v179 = *((unsigned __int8 *)v25 + v178);
                v180 = (unsigned __int16 *)((char *)v25 + v177);
                v181 = (v127 << 16) | (v176 << 8);
                if (v179 == 255)
                  v25 = (unsigned __int16 *)((char *)v180 + 1);
                else
                  v25 = v180;
                v127 = v181 | v179;
                v165 = v175;
              }
              v182 = *(unsigned __int16 *)(v238 + 2 * ((v127 << v165) >> 23));
              v128 = ((v182 >> 10) & 0x1F) + v165;
              if (v182 > 0x8000)
              {
                v182 = (char)v182;
              }
              else
              {
                if ((v182 & 0x8000) != 0)
                {
                  v182 = *(unsigned __int16 *)(v238 + 2 * (((v127 << v165) >> 16) & 0x3FF));
                  v128 += (v182 >> 10) & 0x1F;
                }
                v183 = v182 & 0x1F;
                if ((v182 & 0x1F) != 0)
                {
                  if (v128 >= 16)
                  {
                    v184 = *(unsigned __int8 *)v25;
                    if (v184 == 255)
                      v185 = 3;
                    else
                      v185 = 2;
                    if (v184 == 255)
                      v186 = 2;
                    else
                      v186 = 1;
                    v187 = *((unsigned __int8 *)v25 + v186);
                    v188 = (unsigned __int16 *)((char *)v25 + v185);
                    v189 = (v127 << 16) | (v184 << 8);
                    if (v187 == 255)
                      v25 = (unsigned __int16 *)((char *)v188 + 1);
                    else
                      v25 = v188;
                    v127 = v189 | v187;
                    v128 -= 16;
                  }
                  v182 = ((v127 << v128) >> -(char)v183)
                       - ((((v127 << v128) >> 31) - 1) >> -(char)v183);
                  v128 += v183;
                }
                else
                {
                  v182 = (v182 << 8) & 0x8000;
                }
              }
              v156 += v182;
              HIDWORD(v243[0]) = v156;
              v174[1] = *(_WORD *)(v35 + 2 * (unsigned __int16)v156);
              v155 += 2;
            }
            while ((int)v155 + 2 < v223);
          }
          v126 = v236 + 1;
          if (v236 + 1 == v232)
          {
LABEL_339:
            if (__len)
              MEMORY[0x1D8271AC4](__len, 0x1000C8077774924);
            break;
          }
        }
      }
      v22 = v231 + 1;
      if (v231 + 1 == v220)
        return MEMORY[0x1D8271AC4](v222, 0x1000C8077774924);
    }
    v33 = v245;
    v34 = v234;
    while (*v33)
    {
      ++v33;
      if (!--v34)
        goto LABEL_48;
    }
LABEL_343:
    v211 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v211, "RawCameraException");
    __cxa_throw(v211, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return MEMORY[0x1D8271AC4](v222, 0x1000C8077774924);
}

void sub_1D5362350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  MEMORY[0x1D8271AC4](a13, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_1D536242C(os_signpost_id_t a1, uint64_t a2, int32x2_t *a3, uint64_t a4, int32x2_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;

  sub_1D540A7A4();
  v20 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_BOOLForKey_(v20, v17, (uint64_t)CFSTR("USE_APPLE_JPEG_FOR_DNG"), v18, v19))
    sub_1D5362B60(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  else
    sub_1D535FA04(a1, a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8, a9);

}

void sub_1D5362504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

char *sub_1D5362518(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  char *v7;
  char *result;

  *(_DWORD *)(a1 + 224) = a2;
  *(_DWORD *)(a1 + 228) = a3;
  v7 = (char *)(a1 + 232);
  if (v7 != (char *)a4)
    sub_1D5282A44(v7, *(char **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  result = (char *)(a1 + 256);
  if (a1 + 256 != a5)
    return sub_1D5282A44(result, *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  return result;
}

uint64_t sub_1D536257C(_DWORD *a1)
{
  int v1;

  v1 = a1[17];
  if (((a1[70] + 2 * v1) & 0xFLL) != 0)
    return (2 * (a1[15] + 2 * v1) + 31) & 0x3FFFFFFE0;
  else
    return 2 * (a1[70] + 2 * v1);
}

void sub_1D53625B4(os_signpost_id_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  void (**v10)(_QWORD);
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  void *v21;
  int v22;
  unsigned int v23;
  void *exception;
  void *v25;
  void (**v26)(_QWORD);
  uint64_t v27;
  NSObject *v28;
  NSObject *group;
  _QWORD block[9];
  int v31;
  __int128 v32;
  uint8_t buf[16];
  int v34;
  _QWORD v35[6];

  sub_1D52EB058();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (a1 + 1 >= 2 && os_signpost_enabled(v8))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v9, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CDNGLosslessJpegUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v35[0] = MEMORY[0x1E0C809B0];
  v35[1] = 3221225472;
  v35[2] = sub_1D5362A54;
  v35[3] = &unk_1E996F870;
  v35[4] = a1;
  v10 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v35);
  if (*(_DWORD *)(a1 + 216)
    || (*(unsigned int (**)(os_signpost_id_t))(*(_QWORD *)a1 + 224))(a1) == 2
    || (v11 = *(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232), v11 == 4))
  {
    sub_1D530CC78(a1, a2, a3, a4);
  }
  else
  {
    v13 = *(_DWORD *)(a1 + 44);
    v12 = *(_DWORD *)(a1 + 48);
    v15 = *(_DWORD *)(a1 + 224);
    v14 = *(_DWORD *)(a1 + 228);
    *(_QWORD *)buf = v11 >> 2;
    sub_1D5282FE0(&v34, (unint64_t *)buf);
    if (*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232) != *(_QWORD *)(a1 + 264) - *(_QWORD *)(a1 + 256)
      || (v13 - 100000) < 0xFFFE7961
      || (v12 - 100000) < 0xFFFE7961
      || v15 - 100000 < 0xFFFE7961
      || (v26 = v10, v14 - 100000 < 0xFFFE7961)
      || (v16 = v34, v34 >= 20000))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](exception, "RawCameraException");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v27 = a4;
    if ((((v12 + v14 - 1) / v14) >> (*(_DWORD *)(a1 + 216) != 0)) * ((v13 + v15 - 1) / v15) != v34)
    {
      v25 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v25, "RawCameraException");
      __cxa_throw(v25, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    group = dispatch_group_create();
    v28 = dispatch_queue_create("Lossless DNG Tile Unpacker Queue", MEMORY[0x1E0C80D50]);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 4 * v16;
      do
      {
        *(_DWORD *)buf = v18;
        *(_DWORD *)&buf[4] = v19;
        *(_DWORD *)&buf[8] = v15;
        *(_DWORD *)&buf[12] = v14;
        if (sub_1D53ADDB8((int *)buf, a3))
        {
          v21 = sub_1D535F94C(a1, *(_DWORD *)(*(_QWORD *)(a1 + 232) + v17), *(_DWORD *)(*(_QWORD *)(a1 + 256) + v17));
          if (v21)
          {
            v22 = *(_DWORD *)(*(_QWORD *)(a1 + 256) + v17);
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 3221225472;
            block[2] = sub_1D5362AD8;
            block[3] = &unk_1E996F890;
            block[4] = a1;
            block[5] = v21;
            v31 = v22;
            block[6] = a2;
            block[7] = a3;
            block[8] = v27;
            v32 = *(_OWORD *)buf;
            dispatch_group_async(group, v28, block);
          }
        }
        if ((int)(v18 + v15) >= v13)
          v23 = v14;
        else
          v23 = 0;
        v19 += v23;
        if ((int)(v18 + v15) >= v13)
          v18 = 0;
        else
          v18 += v15;
        v17 += 4;
      }
      while (v20 != v17);
    }
    dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);

    v10 = v26;
  }
  v10[2](v10);

}

void sub_1D53629C8(_Unwind_Exception *a1)
{
  void (**v1)(_QWORD);

  v1[2](v1);

  _Unwind_Resume(a1);
}

void sub_1D5362A54(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGLosslessJpegUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D5362AD8(uint64_t a1)
{
  os_signpost_id_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int32x2_t *v6;
  uint64_t v7;
  int32x2_t *v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = v3 + *(unsigned int *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(int32x2_t **)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = (int32x2_t *)(a1 + 76);
  v9 = sub_1D535F5F8(v2);
  sub_1D536242C(v2, v5, v6, v7, v8, v3, v4, v9, 0);
  free(*(void **)(a1 + 40));
}

void sub_1D5362B60(os_signpost_id_t a1, uint64_t a2, int32x2_t *a3, uint64_t a4, int32x2_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  NSObject *v17;
  NSObject *v18;
  void (**v19)(_QWORD);
  unsigned int precision;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void *exception;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *context;
  uint64_t buf[20];
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE v42[4];
  int v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _QWORD v48[6];

  sub_1D52EB058();
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = v17;
  if (a1 + 1 >= 2 && os_signpost_enabled(v17))
  {
    LOWORD(buf[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v18, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CDNGLosslessJpegUnpacker::unpackTile", (const char *)&unk_1D548AF1A, (uint8_t *)buf, 2u);
  }

  v48[0] = MEMORY[0x1E0C809B0];
  v48[1] = 3221225472;
  v48[2] = sub_1D5363014;
  v48[3] = &unk_1E996F870;
  v48[4] = a1;
  v19 = (void (**)(_QWORD))MEMORY[0x1D82721B4](v48);
  context = (void *)MEMORY[0x1D8272058]();
  v46 = xmmword_1E998BCE0;
  v47 = 0;
  if (!applejpeg_decode_create())
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v44 = a6;
  v45 = a7 - a6;
  if (applejpeg_decode_open_mem())
  {
    v31 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v31, "RawCameraException");
    __cxa_throw(v31, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (applejpeg_decode_get_image_info())
  {
    v32 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v32, "RawCameraException");
    __cxa_throw(v32, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  precision = applejpeg_decode_get_precision();
  if (precision - 17 <= 0xFFFFFFF6)
  {
LABEL_19:
    v33 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v33, "RawCameraException");
    __cxa_throw(v33, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  switch(v43)
  {
    case 1:
    case 2:
    case 3:
    case 4:
      if (applejpeg_decode_set_option_outformat())
        goto LABEL_19;
      v40 = 0;
      v41 = 0;
      if (applejpeg_decode_get_output_buffer_size())
      {
        v34 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v34, "RawCameraException");
        __cxa_throw(v34, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v21, v41, v22, v23);
      v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v38 = objc_msgSend_mutableBytes(v24, v25, v26, v27, v28);
      v39 = v41;
      if (applejpeg_decode_image_all())
      {
        v35 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v35, "RawCameraException");
        __cxa_throw(v35, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      v29 = (*(uint64_t (**)(os_signpost_id_t))(*(_QWORD *)a1 + 88))(a1);
      if (precision < 9)
        sub_1D5363650(a1, buf, (uint64_t)v42, v40, a2, a4, a3, a5, a8, v29 & (a9 ^ 1));
      else
        sub_1D53630A8(a1, buf, (uint64_t)v42, v40, a2, a4, a3, a5, a8, v29 & (a9 ^ 1));

      applejpeg_decode_destroy();
      objc_autoreleasePoolPop(context);
      v19[2](v19);

      return;
    default:
      goto LABEL_19;
  }
}

void sub_1D5362F70(void *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1D5362DDCLL);
}

void sub_1D5363014(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CDNGLosslessJpegUnpacker::unpackTile", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void *sub_1D5363098(size_t a1)
{
  return malloc_type_malloc(a1, 0x5953C38FuLL);
}

uint64_t sub_1D53630A8(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int32x2_t *a7, int32x2_t *a8, uint64_t a9, char a10)
{
  int v15;
  unsigned int *v17;
  int32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  _DWORD *v21;
  int v22;
  __int32 v23;
  __int32 v24;
  __int32 v25;
  __int32 v26;
  uint64_t v27;
  char v28;
  signed int v29;
  unint64_t v30;
  int v31;
  __int32 v32;
  uint64_t result;
  __int32 v34;
  unsigned __int16 *v35;
  _WORD *v36;
  int v37;
  uint64_t v38;
  int v39;
  _WORD *v40;
  unsigned __int16 *v41;
  int v42;
  signed int j;
  uint64_t v44;
  unsigned int v45;
  __int16 v46;
  _WORD *v47;
  unsigned int v49;
  signed int i;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned __int16 *v54;
  _WORD *v55;
  void *exception;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  int v62;
  _WORD *v64;
  _WORD *v65;
  unsigned __int16 *v66;
  unsigned __int16 *v67;
  unsigned int v68;
  int v69;
  int32x2_t v70;
  int32x2_t v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a2 + 8) != 1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v15 = *(_DWORD *)(a3 + 4);
  v73 = v15;
  if (v15 == 4 || v15 == 2)
    v15 = 1;
  v17 = (unsigned int *)&a8[1];
  v18 = a8[1];
  v72 = v15;
  v19 = vmax_s32(*a7, *a8);
  v20 = vsub_s32(vmin_s32(vadd_s32(v18, *a8), vadd_s32(a7[1], *a7)), v19);
  v70 = v19;
  v71 = v20;
  v21 = a2 + 5;
  sub_1D5285A24(&v69, (unsigned int *)a2 + 10);
  sub_1D5285A24(&v68, (unsigned int *)a2 + 11);
  LODWORD(v74) = v69;
  LODWORD(v74) = *sub_1D52B42B4(&v74, &v68);
  v22 = *sub_1D52DCE44((int *)&v74, (unsigned int *)&v73);
  sub_1D5285A24(&v69, v17);
  sub_1D5285A24(&v68, (unsigned int *)&a8[1] + 1);
  LODWORD(v74) = v69;
  LODWORD(v74) = *sub_1D52B42B4(&v74, &v68);
  if (v22 != *sub_1D52DCE44((int *)&v74, (unsigned int *)&v72))
  {
    v57 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v57, "RawCameraException");
    __cxa_throw(v57, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v70.i32[0] < 0 || v70.i32[1] < 0)
  {
    v58 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v58, "RawCameraException");
    __cxa_throw(v58, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v71.i32[0] < 0 || v71.i32[1] < 0)
  {
    v59 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v59, "RawCameraException");
    __cxa_throw(v59, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (!sub_1D53ADD44((int *)&v70, (int *)a8))
  {
    v60 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v60, "RawCameraException");
    __cxa_throw(v60, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v24 = a8->i32[0];
  v23 = a8->i32[1];
  v25 = a7->i32[0];
  v26 = a7->i32[1];
  v27 = *a2;
  if (a10)
    v28 = 3;
  else
    v28 = 1;
  if (v73 >= 3)
  {
    v31 = 0;
    v74 = a4;
    v75 = a4;
  }
  else
  {
    v29 = *v21 * v73;
    v30 = (v29 / (int)*v17);
    if ((v30 - 3) <= 0xFFFFFFFD)
    {
      v61 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v61, "RawCameraException");
      __cxa_throw(v61, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v74 = a4;
    v75 = a4;
    if (v30 < 2)
    {
      v31 = 0;
    }
    else
    {
      v74 = 2 * v29 / v30;
      v75 = a4 - v74;
      v31 = 1;
    }
  }
  v32 = v71.i32[1];
  result = a6;
  if (v71.i32[1] < 1)
    return result;
  v34 = 0;
  v35 = (unsigned __int16 *)(v27 + (v70.i32[1] - v23) * (int)a4 + 2 * (v70.i32[0] - v24) * v72);
  v36 = (_WORD *)(a5 + (v70.i32[1] - v26) * (int)a6 + ((v70.i32[0] - v25) << v28));
  v37 = v71.i32[0];
  v38 = 0xFFFFu;
  v62 = v31;
  do
  {
    if (v37 < 1)
      goto LABEL_55;
    v39 = 0;
    v40 = v36;
    v41 = v35;
    do
    {
      v42 = v73;
      if (a10)
      {
        if (v73 >= 3)
        {
          for (i = 0; i < v73; ++i)
          {
            v52 = *v41++;
            v51 = v52;
            if (qword_1EFF11DC8 != -1)
            {
              v65 = v36;
              v67 = v35;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BE18);
              v38 = 0xFFFFLL;
              v36 = v65;
              v35 = v67;
              v31 = v62;
              result = a6;
            }
            *v40++ = xmmword_1EFF11DD0[*(unsigned __int16 *)(a9 + 2 * v51)];
          }
          if (qword_1EFF11DC8 == -1)
            goto LABEL_51;
        }
        else
        {
          if (v73 >= 1)
          {
            for (j = 0; j < v73; ++j)
            {
              v45 = *v41++;
              v44 = v45;
              if (qword_1EFF11DC8 != -1)
              {
                v64 = v36;
                v66 = v35;
                dispatch_once(&qword_1EFF11DC8, &unk_1E998BE18);
                v38 = 0xFFFFLL;
                v36 = v64;
                v35 = v66;
                v31 = v62;
                result = a6;
              }
              v46 = xmmword_1EFF11DD0[*(unsigned __int16 *)(a9 + 2 * v44)];
              *v40 = v46;
              v40[1] = v46;
              v47 = v40 + 3;
              v40[2] = v46;
              v40 += 3;
            }
            v40 = v47;
          }
          if (qword_1EFF11DC8 == -1)
            goto LABEL_51;
        }
        v54 = v35;
        v55 = v36;
        dispatch_once(&qword_1EFF11DC8, &unk_1E998BE18);
        v38 = 0xFFFFLL;
        v36 = v55;
        v35 = v54;
        v31 = v62;
        result = a6;
LABEL_51:
        *v40++ = xmmword_1EFF11DD0[v38];
        v37 = v71.i32[0];
        goto LABEL_52;
      }
      if (v73 == 2 || v73 == 4)
      {
        v49 = *v41++;
        *v40++ = *(_WORD *)(a9 + 2 * v49);
      }
      else if (v73 >= 1)
      {
        do
        {
          v53 = *v41++;
          *v40++ = *(_WORD *)(a9 + 2 * v53);
          --v42;
        }
        while (v42);
      }
LABEL_52:
      ++v39;
    }
    while (v39 < v37);
    v32 = v71.i32[1];
LABEL_55:
    v36 = (_WORD *)((char *)v36 + result);
    v35 = (unsigned __int16 *)((char *)v35 + *(&v74 + (v34++ & v31)));
  }
  while (v34 < v32);
  return result;
}

void sub_1D5363620(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5363650(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int32x2_t *a7, int32x2_t *a8, uint64_t a9, char a10)
{
  int v15;
  unsigned int *v17;
  int32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int *v21;
  int v22;
  __int32 v23;
  uint64_t v24;
  __int32 v25;
  __int32 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  __int32 v32;
  uint64_t result;
  __int32 v34;
  unsigned __int8 *v35;
  _WORD *v36;
  int v37;
  uint64_t v38;
  int v39;
  _WORD *v40;
  unsigned __int8 *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  _WORD *v46;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned __int8 *v52;
  _WORD *v53;
  void *exception;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  int v60;
  _WORD *v62;
  _WORD *v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned int v66;
  int v67;
  int32x2_t v68;
  int32x2_t v69;
  int v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a2 + 8) != 1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v15 = *(_DWORD *)(a3 + 4);
  v71 = v15;
  if (v15 == 4 || v15 == 2)
    v15 = 1;
  v17 = (unsigned int *)&a8[1];
  v18 = a8[1];
  v70 = v15;
  v19 = vmax_s32(*a7, *a8);
  v20 = vsub_s32(vmin_s32(vadd_s32(v18, *a8), vadd_s32(a7[1], *a7)), v19);
  v68 = v19;
  v69 = v20;
  v21 = (int *)(a2 + 5);
  sub_1D5285A24(&v67, (unsigned int *)a2 + 10);
  sub_1D5285A24(&v66, (unsigned int *)a2 + 11);
  LODWORD(v72) = v67;
  LODWORD(v72) = *sub_1D52B42B4(&v72, &v66);
  v22 = *sub_1D52DCE44((int *)&v72, (unsigned int *)&v71);
  sub_1D5285A24(&v67, v17);
  sub_1D5285A24(&v66, (unsigned int *)&a8[1] + 1);
  LODWORD(v72) = v67;
  LODWORD(v72) = *sub_1D52B42B4(&v72, &v66);
  if (v22 != *sub_1D52DCE44((int *)&v72, (unsigned int *)&v70))
  {
    v55 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v55, "RawCameraException");
    __cxa_throw(v55, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v68.i32[0] < 0 || v68.i32[1] < 0)
  {
    v56 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v56, "RawCameraException");
    __cxa_throw(v56, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v69.i32[0] < 0 || v69.i32[1] < 0)
  {
    v57 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v57, "RawCameraException");
    __cxa_throw(v57, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (!sub_1D53ADD44((int *)&v68, (int *)a8))
  {
    v58 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v58, "RawCameraException");
    __cxa_throw(v58, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v23 = a8->i32[1];
  v24 = a8->i32[0];
  v25 = a7->i32[0];
  v26 = a7->i32[1];
  v27 = *a2;
  if (a10)
    v28 = 3;
  else
    v28 = 1;
  if (v71 >= 3)
  {
    v31 = 0;
    v72 = a4;
    v73 = a4;
  }
  else
  {
    v29 = *v21 * (uint64_t)v71;
    v30 = ((int)v29 / (int)*v17);
    if ((v30 - 3) <= 0xFFFFFFFD)
    {
      v59 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x1D8271938](v59, "RawCameraException");
      __cxa_throw(v59, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v72 = a4;
    v73 = a4;
    if (v30 < 2)
    {
      v31 = 0;
    }
    else
    {
      v72 = v29 / v30;
      v73 = a4 - v29 / v30;
      v31 = 1;
    }
  }
  v32 = v69.i32[1];
  result = a6;
  if (v69.i32[1] < 1)
    return result;
  v34 = 0;
  v35 = (unsigned __int8 *)(v27 + (v68.i32[1] - v23) * (int)a4 + v70 * (v68.i32[0] - v24));
  v36 = (_WORD *)(a5 + (v68.i32[1] - v26) * (int)a6 + ((v68.i32[0] - v25) << v28));
  v37 = v69.i32[0];
  v38 = 0xFFFFu;
  v60 = v31;
  do
  {
    if (v37 < 1)
      goto LABEL_55;
    v39 = 0;
    v40 = v36;
    v41 = v35;
    do
    {
      v42 = v71;
      if (a10)
      {
        if (v71 >= 3)
        {
          v49 = 0;
          do
          {
            v50 = v41[v49];
            if (qword_1EFF11DC8 != -1)
            {
              v63 = v36;
              v65 = v35;
              dispatch_once(&qword_1EFF11DC8, &unk_1E998BE18);
              v38 = 0xFFFFLL;
              v36 = v63;
              v35 = v65;
              v31 = v60;
              result = a6;
            }
            *v40++ = xmmword_1EFF11DD0[*(unsigned __int16 *)(a9 + 2 * v50)];
            ++v49;
          }
          while ((int)v49 < v71);
          v41 += v49;
          if (qword_1EFF11DC8 == -1)
            goto LABEL_51;
        }
        else
        {
          if (v71 >= 1)
          {
            v43 = 0;
            do
            {
              v44 = v41[v43];
              if (qword_1EFF11DC8 != -1)
              {
                v62 = v36;
                v64 = v35;
                dispatch_once(&qword_1EFF11DC8, &unk_1E998BE18);
                v38 = 0xFFFFLL;
                v36 = v62;
                v35 = v64;
                v31 = v60;
                result = a6;
              }
              v45 = xmmword_1EFF11DD0[*(unsigned __int16 *)(a9 + 2 * v44)];
              *v40 = v45;
              v40[1] = v45;
              v46 = v40 + 3;
              v40[2] = v45;
              ++v43;
              v40 += 3;
            }
            while ((int)v43 < v71);
            v41 += v43;
            v40 = v46;
          }
          if (qword_1EFF11DC8 == -1)
            goto LABEL_51;
        }
        v52 = v35;
        v53 = v36;
        dispatch_once(&qword_1EFF11DC8, &unk_1E998BE18);
        v38 = 0xFFFFLL;
        v36 = v53;
        v35 = v52;
        v31 = v60;
        result = a6;
LABEL_51:
        *v40++ = xmmword_1EFF11DD0[v38];
        v37 = v69.i32[0];
        goto LABEL_52;
      }
      if (v71 == 2 || v71 == 4)
      {
        v48 = *v41++;
        *v40++ = *(_WORD *)(a9 + 2 * v48);
      }
      else if (v71 >= 1)
      {
        do
        {
          v51 = *v41++;
          *v40++ = *(_WORD *)(a9 + 2 * v51);
          --v42;
        }
        while (v42);
      }
LABEL_52:
      ++v39;
    }
    while (v39 < v37);
    v32 = v69.i32[1];
LABEL_55:
    v36 = (_WORD *)((char *)v36 + result);
    v35 += *(&v72 + (v34++ & v31));
  }
  while (v34 < v32);
  return result;
}

void sub_1D5363BCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5363BFC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v7;

  *(_QWORD *)a1 = off_1E998BD08;
  v7 = (void **)(a1 + 328);
  sub_1D5282E44(&v7);
  v2 = *(void **)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)(a1 + 296) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 256);
  if (v3)
  {
    *(_QWORD *)(a1 + 264) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 232);
  if (v4)
  {
    *(_QWORD *)(a1 + 240) = v4;
    operator delete(v4);
  }
  *(_QWORD *)a1 = &unk_1E998DB60;
  v5 = *(void **)(a1 + 192);
  if (v5)
  {
    *(_QWORD *)(a1 + 200) = v5;
    operator delete(v5);
  }
  return sub_1D5282F0C((_QWORD *)a1);
}

uint64_t sub_1D5363C94(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  void **v8;

  *(_QWORD *)a1 = off_1E998BD08;
  v8 = (void **)(a1 + 328);
  sub_1D5282E44(&v8);
  v2 = *(void **)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)(a1 + 296) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 256);
  if (v3)
  {
    *(_QWORD *)(a1 + 264) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 232);
  if (v4)
  {
    *(_QWORD *)(a1 + 240) = v4;
    operator delete(v4);
  }
  *(_QWORD *)a1 = &unk_1E998DB60;
  v5 = *(void **)(a1 + 192);
  if (v5)
  {
    *(_QWORD *)(a1 + 200) = v5;
    operator delete(v5);
  }
  v6 = sub_1D5282F0C((_QWORD *)a1);
  return MEMORY[0x1D8271ADC](v6, 0x10B1C4084031376);
}

void sub_1D5363D40(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      sub_1D5282B8C();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1D52854A0(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

int64x2_t sub_1D5363E40()
{
  uint64_t v0;
  int64x2_t result;
  int64x2_t v2;
  int64x2_t v3;
  float32x4_t v4;
  int64x2_t v5;
  int64x2_t v6;

  v0 = 0;
  result = (int64x2_t)xmmword_1D5447F80;
  v2 = (int64x2_t)xmmword_1D5447F90;
  v3 = (int64x2_t)xmmword_1D5447FA0;
  v4 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  v5 = (int64x2_t)xmmword_1D5447F70;
  v6 = vdupq_n_s64(8uLL);
  do
  {
    xmmword_1EFF11DD0[v0] = (__int128)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vdivq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v5)), vcvtq_f64_u64((uint64x2_t)v3)), v4)), vdivq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v2)), vcvtq_f64_u64((uint64x2_t)result)), v4));
    v2 = vaddq_s64(v2, v6);
    v3 = vaddq_s64(v3, v6);
    v5 = vaddq_s64(v5, v6);
    result = vaddq_s64(result, v6);
    ++v0;
  }
  while (v0 != 0x2000);
  return result;
}

void sub_1D5363ED4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  _WORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  char v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  unsigned int v22;
  signed int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  signed int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned __int16 *v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned __int16 *v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned __int16 *v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unsigned __int16 *v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unsigned __int16 *v91;
  int v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned __int16 *v99;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unsigned __int16 *v107;
  int v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *exception;
  void *v114;
  void *v115;
  void (**v116)(_QWORD);
  uint64_t v117;
  int v118;
  signed int v119;
  signed int v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  unsigned int __dst;
  unsigned __int16 *__dsta;
  int v129;
  int v130;
  int v131;
  int v132;
  _QWORD v133[5];
  uint8_t buf[4096];
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v1 = MEMORY[0x1E0C80A78](a1);
  v137 = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((unint64_t)(v1 + 1) >= 2 && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "CLosslessJpegRestartUnpacker", (const char *)&unk_1D548AF1A, buf, 2u);
  }

  v133[0] = MEMORY[0x1E0C809B0];
  v133[1] = 3221225472;
  v133[2] = sub_1D5364AD4;
  v133[3] = &unk_1E996F870;
  v133[4] = v1;
  v4 = MEMORY[0x1D82721B4](v133);
  v5 = (_WORD *)sub_1D530B618(v1);
  v6 = *(_DWORD *)(v1 + 44);
  v7 = *(_DWORD *)(v1 + 48);
  v131 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 152))(v1);
  sub_1D5282F74(&v132, &v131);
  v8 = v132;
  v9 = v7 * v6;
  v10 = (_WORD *)((char *)&v5[v9 + 448] - v132);
  (*(void (**)(_QWORD, unsigned __int16 *, _QWORD))(**(_QWORD **)(v1 + 24) + 32))(*(_QWORD *)(v1 + 24), v10, v132);
  if (bswap32(*v10) >> 16 != 65496)
    goto LABEL_185;
  v116 = (void (**)(_QWORD))v4;
  v125 = 0;
  v11 = 0;
  __dst = 0;
  v129 = 0;
  v122 = 0;
  v12 = 0;
  v13 = (unsigned __int16 *)((char *)v10 + v8);
  v14 = v10 + 1;
  v135 = 0;
  v136 = 0;
  do
  {
    v15 = __rev16(*v14);
    if (v15 == 0xFFFF)
    {
      v14 = (unsigned __int16 *)((char *)v14 + 1);
    }
    else
    {
      if (v15 < 0xFF01)
        goto LABEL_185;
      v16 = __rev16(v14[1]);
      if (v16 >= 0x102)
        goto LABEL_185;
      v17 = (unsigned __int8 *)(v14 + 2);
      v18 = (unint64_t)v14 + v16 + 2;
      if (v15 > 65497)
      {
        if (v15 == 65498)
        {
          if (*v17 - 1 > 2 || (v21 = 2 * *v17, (_DWORD)v16 != (_DWORD)v21 + 6) || v17[v21 | 1] != 1)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](exception, "RawCameraException");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
          v12 = v17[v21 + 3] & 0xF;
        }
        else if (v15 == 65501)
        {
          v129 = __rev16(v14[2]);
        }
      }
      else if (v15 == 65475)
      {
        v122 = *((_BYTE *)v14 + 4);
        v125 = __rev16(*(unsigned __int16 *)((char *)v14 + 5));
        __dst = *((unsigned __int8 *)v14 + 9);
        v11 = __rev16(*(unsigned __int16 *)((char *)v14 + 7)) * __dst;
      }
      else if (v15 == 65476)
      {
        while ((unint64_t)v17 < v18)
        {
          v19 = *v17;
          if (v19 > 1)
            break;
          v20 = &buf[2048 * v19];
          *(&v135 + v19) = (uint64_t)v20;
          v17 = sub_1D53126BC(v17 + 1, (uint64_t)v20, 2);
          if (!v17)
          {
            v110 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](v110, "RawCameraException");
            __cxa_throw(v110, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
        }
      }
      v14 = (unsigned __int16 *)v18;
    }
  }
  while (v15 != 65498);
  v22 = v125;
  if ((int)v11 * v125 > v9)
  {
LABEL_185:
    v111 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v111, "RawCameraException");
    __cxa_throw(v111, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v23 = v129;
  if (v129 >= 1 && (int)v11 >= 1)
    v23 = v129 / (v11 / __dst);
  if (v23 < 1)
    v24 = v125 + 1;
  else
    v24 = v23;
  if (v136)
    v25 = v136;
  else
    v25 = v135;
  if (v135)
    v26 = v135;
  else
    v26 = v136;
  if (!v26 || !v25)
  {
    v115 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](v115, "RawCameraException");
    __cxa_throw(v115, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  if (v125 > 0)
  {
    v27 = v13;
    v28 = 0;
    v29 = 0;
    v124 = (8 * v11);
    v30 = 1 << (v122 + ~v12);
    v31 = 32;
    v32 = v30;
    v130 = v30;
    v33 = v24;
    v34 = v125;
    v126 = v11;
    __dsta = 0;
    v118 = v30;
    v119 = v24;
    v117 = v22;
    while (1)
    {
      v35 = v11;
      v36 = v32;
      v37 = (char *)v27 - (char *)v14;
      v38 = (char *)v27 - (char *)v14 + ((39 - v31) >> 3);
      if (8 * v38 < 2 * (v34 - v28) * v126)
      {
        v112 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v112, "RawCameraException");
        __cxa_throw(v112, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
      if (!__dsta)
      {
        if ((int)v35 > (int)v14 - (int)v5 || v38 < v124)
        {
          if (v27 == v14)
          {
            __dsta = 0;
            v14 = v27;
          }
          else
          {
            v120 = v33;
            v121 = v28;
            v123 = ((v34 - v28) * v124) | 6;
            __dsta = (unsigned __int16 *)operator new[]();
            bzero(__dsta, v123);
            memmove(__dsta, v14 - 3, v37 + 6);
            v14 = __dsta + 3;
            v28 = v121;
            v27 = (unsigned __int16 *)((char *)__dsta + v123 + 6);
            v30 = v118;
            v24 = v119;
            v33 = v120;
            v34 = v117;
          }
        }
        else
        {
          __dsta = 0;
        }
      }
      if (v28 == v33)
        break;
      v41 = v36;
      v11 = v35;
      v40 = (unint64_t)v27;
      if (v31 >= 16)
        goto LABEL_59;
LABEL_69:
      v48 = *(unsigned __int16 *)(v26 + 2 * ((v29 << v31) >> 23));
      v49 = ((v48 >> 10) & 0x1F) + v31;
      if (v48 > 0x8000)
      {
        v48 = (char)v48;
      }
      else
      {
        if ((v48 & 0x8000) != 0)
        {
          v48 = *(unsigned __int16 *)(v26 + 2 * (((v29 << v31) >> 16) & 0x3FF));
          v49 += (v48 >> 10) & 0x1F;
        }
        v50 = v48 & 0x1F;
        if ((v48 & 0x1F) != 0)
        {
          v51 = v49 - 16;
          if (v49 >= 16)
          {
            v52 = *(unsigned __int8 *)v14;
            if (v52 == 255)
              v53 = 3;
            else
              v53 = 2;
            if (v52 == 255)
              v54 = 2;
            else
              v54 = 1;
            v55 = *((unsigned __int8 *)v14 + v54);
            v56 = (unsigned __int16 *)((char *)v14 + v53);
            v57 = (v29 << 16) | (v52 << 8);
            if (v55 == 255)
              v14 = (unsigned __int16 *)((char *)v56 + 1);
            else
              v14 = v56;
            v29 = v57 | v55;
            v49 = v51;
          }
          v48 = ((v29 << v49) >> -(char)v50) - ((((v29 << v49) >> 31) - 1) >> -(char)v50);
          v49 += v50;
        }
        else
        {
          v48 = (v48 << 8) & 0x8000;
        }
      }
      v58 = v49 - 16;
      if (v49 >= 16)
      {
        v59 = *(unsigned __int8 *)v14;
        if (v59 == 255)
          v60 = 3;
        else
          v60 = 2;
        if (v59 == 255)
          v61 = 2;
        else
          v61 = 1;
        v62 = *((unsigned __int8 *)v14 + v61);
        v63 = (unsigned __int16 *)((char *)v14 + v60);
        v64 = (v29 << 16) | (v59 << 8);
        if (v62 == 255)
          v14 = (unsigned __int16 *)((char *)v63 + 1);
        else
          v14 = v63;
        v29 = v64 | v62;
        v49 = v58;
      }
      v65 = *(unsigned __int16 *)(v25 + 2 * ((v29 << v49) >> 23));
      v31 = ((v65 >> 10) & 0x1F) + v49;
      if (v65 > 0x8000)
      {
        v65 = (char)v65;
      }
      else
      {
        if ((v65 & 0x8000) != 0)
        {
          v65 = *(unsigned __int16 *)(v25 + 2 * (((v29 << v49) >> 16) & 0x3FF));
          v31 += (v65 >> 10) & 0x1F;
        }
        v66 = v65 & 0x1F;
        if ((v65 & 0x1F) != 0)
        {
          if (v31 >= 16)
          {
            v67 = *(unsigned __int8 *)v14;
            if (v67 == 255)
              v68 = 3;
            else
              v68 = 2;
            if (v67 == 255)
              v69 = 2;
            else
              v69 = 1;
            v70 = *((unsigned __int8 *)v14 + v69);
            v71 = (unsigned __int16 *)((char *)v14 + v68);
            v72 = (v29 << 16) | (v67 << 8);
            if (v70 == 255)
              v14 = (unsigned __int16 *)((char *)v71 + 1);
            else
              v14 = v71;
            v29 = v72 | v70;
            v31 -= 16;
          }
          v65 = ((v29 << v31) >> -(char)v66) - ((((v29 << v31) >> 31) - 1) >> -(char)v66);
          v31 += v66;
        }
        else
        {
          v65 = (v65 << 8) & 0x8000;
        }
      }
      v32 = v48 + v41;
      v73 = v65 + v130;
      v74 = v32 << v12;
      v130 += v65;
      if ((int)v11 >= 3)
      {
        v75 = 2;
        v76 = v32;
        do
        {
          if ((unint64_t)v14 > v40)
          {
            v109 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x1D8271938](v109, "RawCameraException");
            __cxa_throw(v109, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
          }
          if (v31 >= 16)
          {
            v77 = *(unsigned __int8 *)v14;
            if (v77 == 255)
              v78 = 3;
            else
              v78 = 2;
            if (v77 == 255)
              v79 = 2;
            else
              v79 = 1;
            v80 = *((unsigned __int8 *)v14 + v79);
            v81 = (unsigned __int16 *)((char *)v14 + v78);
            v82 = (v29 << 16) | (v77 << 8);
            if (v80 == 255)
              v14 = (unsigned __int16 *)((char *)v81 + 1);
            else
              v14 = v81;
            v29 = v82 | v80;
            v31 -= 16;
          }
          v83 = *(unsigned __int16 *)(v26 + 2 * ((v29 << v31) >> 23));
          v84 = ((v83 >> 10) & 0x1F) + v31;
          *v5 = v74;
          if (v83 > 0x8000)
          {
            v93 = (char)v83;
          }
          else
          {
            if ((v83 & 0x8000) != 0)
            {
              v83 = *(unsigned __int16 *)(v26 + 2 * (((v29 << v31) >> 16) & 0x3FF));
              v84 += (v83 >> 10) & 0x1F;
            }
            v85 = v83 & 0x1F;
            if ((v83 & 0x1F) != 0)
            {
              v86 = v84 - 16;
              if (v84 >= 16)
              {
                v87 = *(unsigned __int8 *)v14;
                if (v87 == 255)
                  v88 = 3;
                else
                  v88 = 2;
                if (v87 == 255)
                  v89 = 2;
                else
                  v89 = 1;
                v90 = *((unsigned __int8 *)v14 + v89);
                v91 = (unsigned __int16 *)((char *)v14 + v88);
                v92 = (v29 << 16) | (v87 << 8);
                if (v90 == 255)
                  v14 = (unsigned __int16 *)((char *)v91 + 1);
                else
                  v14 = v91;
                v29 = v92 | v90;
                v84 = v86;
              }
              v93 = ((v29 << v84) >> -(char)v85)
                  - ((((v29 << v84) >> 31) - 1) >> -(char)v85);
              v84 += v85;
            }
            else
            {
              v93 = (v83 << 8) & 0x8000;
            }
          }
          v94 = v84 - 16;
          if (v84 >= 16)
          {
            v95 = *(unsigned __int8 *)v14;
            if (v95 == 255)
              v96 = 3;
            else
              v96 = 2;
            if (v95 == 255)
              v97 = 2;
            else
              v97 = 1;
            v98 = *((unsigned __int8 *)v14 + v97);
            v99 = (unsigned __int16 *)((char *)v14 + v96);
            v100 = (v29 << 16) | (v95 << 8);
            if (v98 == 255)
              v14 = (unsigned __int16 *)((char *)v99 + 1);
            else
              v14 = v99;
            v29 = v100 | v98;
            v84 = v94;
          }
          v101 = *(unsigned __int16 *)(v25 + 2 * ((v29 << v84) >> 23));
          v31 = ((v101 >> 10) & 0x1F) + v84;
          v5[1] = v73 << v12;
          if (v101 > 0x8000)
          {
            v101 = (char)v101;
          }
          else
          {
            if ((v101 & 0x8000) != 0)
            {
              v101 = *(unsigned __int16 *)(v25 + 2 * (((v29 << v84) >> 16) & 0x3FF));
              v31 += (v101 >> 10) & 0x1F;
            }
            v102 = v101 & 0x1F;
            if ((v101 & 0x1F) != 0)
            {
              if (v31 >= 16)
              {
                v103 = *(unsigned __int8 *)v14;
                if (v103 == 255)
                  v104 = 3;
                else
                  v104 = 2;
                if (v103 == 255)
                  v105 = 2;
                else
                  v105 = 1;
                v106 = *((unsigned __int8 *)v14 + v105);
                v107 = (unsigned __int16 *)((char *)v14 + v104);
                v108 = (v29 << 16) | (v103 << 8);
                if (v106 == 255)
                  v14 = (unsigned __int16 *)((char *)v107 + 1);
                else
                  v14 = v107;
                v29 = v108 | v106;
                v31 -= 16;
              }
              v101 = ((v29 << v31) >> -(char)v102)
                   - ((((v29 << v31) >> 31) - 1) >> -(char)v102);
              v31 += v102;
            }
            else
            {
              v101 = (v101 << 8) & 0x8000;
            }
          }
          v76 += v93;
          v5 += 2;
          v73 += v101;
          v75 += 2;
          v74 = v76 << v12;
        }
        while (v75 < (int)v11);
      }
      *v5 = v74;
      v5[1] = v73 << v12;
      v5 += 2;
      if (++v28 == v34)
      {
        if (__dsta)
          MEMORY[0x1D8271AC4](__dsta, 0x1000C8077774924);
        goto LABEL_181;
      }
    }
    v39 = 0;
    v11 = v35;
    v40 = (unint64_t)v27;
    while (*((unsigned __int8 *)v14 + v39 - 8) != 255 || (*((_BYTE *)v14 + v39 - 7) & 0xF8) != 0xD0)
    {
      if ((_DWORD)++v39 == 12)
      {
        v114 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x1D8271938](v114, "RawCameraException");
        __cxa_throw(v114, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
      }
    }
    v29 = 0;
    v33 += v24;
    v14 = (unsigned __int16 *)((char *)v14 + v39 - 6);
    v31 = 32;
    v41 = v30;
    v130 = v30;
LABEL_59:
    v42 = *(unsigned __int8 *)v14;
    if (v42 == 255)
      v43 = 3;
    else
      v43 = 2;
    if (v42 == 255)
      v44 = 2;
    else
      v44 = 1;
    v45 = *((unsigned __int8 *)v14 + v44);
    v46 = (unsigned __int16 *)((char *)v14 + v43);
    v31 -= 16;
    v47 = (v29 << 16) | (v42 << 8);
    if (v45 == 255)
      v14 = (unsigned __int16 *)((char *)v46 + 1);
    else
      v14 = v46;
    v29 = v47 | v45;
    goto LABEL_69;
  }
LABEL_181:
  v116[2](v116);

}

void sub_1D53649E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5364AD4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CLosslessJpegRestartUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

void sub_1D5364B58(_QWORD *a1)
{
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

void sub_1D5364B7C(os_signpost_id_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int32x2_t *v8;
  uint64_t v9;
  _WORD *v10;
  int v11;
  uint64_t v12;
  BOOL v14;
  int32x4_t v15;
  int32x4_t v16;
  unsigned int *v17;
  uint64_t v18;
  _WORD *v19;
  unint64_t v20;
  int32x2_t *v21;
  int32x4_t v22;
  int32x4_t v23;
  uint64_t i;
  __int16 *v25;
  __int16 v26;
  void *exception;
  void (**v28)(_QWORD);
  BOOL v29;
  uint64_t v30;
  int v31;
  _QWORD v32[5];
  int8x16_t buf[2];
  int8x16_t v34[2];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (a1 + 1 >= 2 && os_signpost_enabled(v2))
  {
    buf[0].i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CSonyCompressedUnpacker", (const char *)&unk_1D548AF1A, (uint8_t *)buf, 2u);
  }

  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 3221225472;
  v32[2] = sub_1D5364EC4;
  v32[3] = &unk_1E996F870;
  v32[4] = a1;
  v4 = MEMORY[0x1D82721B4](v32);
  v5 = sub_1D530CBD0(a1);
  v6 = *(int *)(a1 + 44);
  if ((v6 & 0x1F) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v7 = v5;
  v28 = (void (**)(_QWORD))v4;
  v31 = *(_DWORD *)(a1 + 48);
  v8 = (int32x2_t *)operator new[]();
  bzero(v8, v6 & 0xFFFFFFFFFFFFFFFCLL);
  v9 = sub_1D530B618(a1);
  if (v31 >= 1)
  {
    v10 = (_WORD *)v9;
    v11 = 0;
    if (v6 >> 2 <= 1)
      v12 = 1;
    else
      v12 = v6 >> 2;
    v30 = v12;
    v14 = v7 == 1 || v6 < 4;
    v29 = v14;
    do
    {
      (*(void (**)(_QWORD, int32x2_t *, unint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v8, v6);
      v17 = (unsigned int *)v8;
      v18 = v30;
      if (!v29)
      {
        do
        {
          *v17 = bswap32(*v17);
          ++v17;
          --v18;
        }
        while (v18);
      }
      if (v6 >= 4)
      {
        v20 = 0;
        v21 = v8;
        do
        {
          sub_1D5364F48(a1, v21, buf, v15, v16);
          sub_1D5364F48(a1, v21 + 2, v34, v22, v23);
          for (i = 0; i != 16; ++i)
          {
            v25 = &buf[0].i16[i];
            *v10 = *v25;
            v26 = v25[16];
            v19 = v10 + 2;
            v10[1] = v26;
            v10 += 2;
          }
          v20 += 8;
          v21 += 4;
          v10 = v19;
        }
        while (v20 < v6 >> 2);
      }
      else
      {
        v19 = v10;
      }
      ++v11;
      v10 = v19;
    }
    while (v11 != v31);
  }
  MEMORY[0x1D8271AC4](v8, 0x1000C8052888210);
  v28[2](v28);

}

void sub_1D5364E40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5364EC4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSonyCompressedUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

uint64_t sub_1D5364F48(uint64_t result, int32x2_t *a2, int8x16_t *a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v5;
  int v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int8x16_t v11;
  uint32x4_t v12;
  unsigned __int32 v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int v18;
  unsigned __int32 v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int64x2_t v29;
  int64x2_t v30;
  uint32x4_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int32x4_t v35;
  int64x2_t v36;
  int8x16_t v37;
  int8x16_t *v38;
  int64x2_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint64_t v46;
  unsigned __int16 *v47;
  __int16 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  __int16 v52;
  unsigned int v53;
  BOOL v54;
  unsigned int v55;
  unsigned int v56;
  _BYTE v57[64];
  _OWORD v58[3];
  int v59;
  unsigned __int32 v60;
  uint64_t v61;

  v5 = 0;
  v6 = 0;
  v61 = *MEMORY[0x1E0C80C00];
  *(int32x2_t *)a4.i8 = *a2;
  *(int32x2_t *)a5.i8 = a2[1];
  v7 = (int8x16_t)vshlq_u32((uint32x4_t)vzip1q_s32(a4, vdupq_lane_s32(*a2, 1)), (uint32x4_t)xmmword_1D544CDE0);
  v8.i64[0] = 0x7F0000007FLL;
  v8.i64[1] = 0x7F0000007FLL;
  v9.i32[1] = 127;
  v9.i64[1] = 0x7F0000007FLL;
  v9.i32[0] = 4 * (HIDWORD(*(unint64_t *)a2) & 0x1F);
  v10 = (int32x4_t)vorrq_s8(v7, v9);
  v11 = vandq_s8(v7, v8);
  v11.i32[0] = v10.i32[0];
  v12 = (uint32x4_t)vzip1q_s32(a5, a5);
  v13 = a5.u32[1];
  *(int32x2_t *)v10.i8 = vzip1_s32(vdup_lane_s32(*a2, 1), *(int32x2_t *)a5.i8);
  v14 = (int8x16_t)vshlq_u32((uint32x4_t)vzip1q_s32(v10, vdupq_lane_s32(*(int32x2_t *)v10.i8, 1)), (uint32x4_t)xmmword_1D544CDF0);
  v10.i32[1] = 127;
  v10.i64[1] = 0x7F0000007FLL;
  v10.i32[0] = (*(_QWORD *)&a2[1] & 1) << 6;
  v10.i32[0] = vorrq_s8(v14, (int8x16_t)v10).u32[0];
  v15 = vandq_s8(v14, v8);
  v15.i32[0] = v10.i32[0];
  v16 = (int8x16_t)vshlq_u32(v12, (uint32x4_t)xmmword_1D544CE00);
  v17 = vandq_s8(v16, v8);
  v8.i32[1] = 8 * (v13 & 0xF);
  v58[0] = v11;
  v58[1] = v15;
  v18 = (v13 >> 18) & 0x7F;
  v19 = v13 >> 25;
  v20 = ((unsigned __int32)a4.i32[0] >> 11) & 0x7FF;
  v17.i32[1] = vorrq_s8(v16, v8).i32[1];
  v58[2] = v17;
  v21 = a4.i16[0] & 0x7FF;
  v22 = ((unsigned __int32)a4.i32[0] >> 22) & 0xF;
  v23 = ((unsigned __int32)a4.i32[0] >> 26) & 0xF;
  v59 = v18;
  v60 = v19;
  do
  {
    if (4 * (((unsigned __int32)a4.i32[0] >> 26) & 0xF) == v5)
    {
      *(_DWORD *)&v57[4 * v23] = v20;
    }
    else if (4 * (((unsigned __int32)a4.i32[0] >> 22) & 0xF) == v5)
    {
      *(_DWORD *)&v57[4 * v22] = v21;
    }
    else
    {
      *(_DWORD *)&v57[v5] = *((_DWORD *)v58 + v6++);
    }
    v5 += 4;
  }
  while (v5 != 64);
  v24 = v21 - v20;
  if (v21 - v20 < 0x400)
    v25 = 3;
  else
    v25 = 4;
  if (v24 >= 0x200)
    v26 = v25;
  else
    v26 = 2;
  if (v24 >= 0x100)
    v27 = v26;
  else
    v27 = 1;
  if (v24 < 128)
    v27 = 0;
  v28 = 0;
  v29 = vdupq_n_s64(v23);
  v30 = vdupq_n_s64(v22);
  v31 = (uint32x4_t)vdupq_n_s32(v27);
  v32 = (int64x2_t)xmmword_1D5447F80;
  v33 = (int64x2_t)xmmword_1D5447F90;
  v34 = (int64x2_t)xmmword_1D5447FA0;
  v35 = vdupq_n_s32(v20);
  v36 = (int64x2_t)xmmword_1D5447F70;
  v37.i64[0] = 0xF8000000F800;
  v37.i64[1] = 0xF8000000F800;
  v38 = a3;
  v39 = vdupq_n_s64(8uLL);
  do
  {
    v41 = *(int16x8_t *)&v57[v28];
    v40 = *(int16x8_t *)&v57[v28 + 16];
    v42 = (int16x8_t)vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)v40, v31), v35);
    v43 = (int16x8_t)vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)v41, v31), v35);
    v44 = (int8x16_t)vuzp1q_s16(v43, v42);
    v45 = (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v43, v37)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v42, v37)));
    *v38++ = vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vbicq_s8(vmvnq_s8((int8x16_t)vceqq_s64(v36, v29)), (int8x16_t)vceqq_s64(v36, v30)), (int32x4_t)vbicq_s8(vmvnq_s8((int8x16_t)vceqq_s64(v34, v29)), (int8x16_t)vceqq_s64(v34, v30))), (int16x8_t)vuzp1q_s32((int32x4_t)vbicq_s8(vmvnq_s8((int8x16_t)vceqq_s64(v33, v29)), (int8x16_t)vceqq_s64(v33, v30)), (int32x4_t)vbicq_s8(vmvnq_s8((int8x16_t)vceqq_s64(v32, v29)), (int8x16_t)vceqq_s64(v32, v30)))), vorrq_s8(vandq_s8(v44, v45), (int8x16_t)(*(_OWORD *)&vmvnq_s8(v45) & __PAIR128__(0x7FF07FF07FF07FFLL, 0x7FF07FF07FF07FFLL))), (int8x16_t)vuzp1q_s16(v41, v40));
    v33 = vaddq_s64(v33, v39);
    v34 = vaddq_s64(v34, v39);
    v36 = vaddq_s64(v36, v39);
    v32 = vaddq_s64(v32, v39);
    v28 += 32;
  }
  while (v28 != 64);
  v46 = 0;
  v47 = *(unsigned __int16 **)(result + 192);
  do
  {
    v48 = 8 * a3->i16[v46];
    v49 = v48 & 0x3FF8;
    if (v49 <= *v47)
    {
      v49 >>= 2;
    }
    else
    {
      if (v49 <= v47[1])
      {
        v53 = **(unsigned __int16 **)(result + 216);
        v54 = v49 >= v53;
        v49 = (v49 - v53) >> 1;
      }
      else if (v49 <= v47[2])
      {
        v55 = *(unsigned __int16 *)(*(_QWORD *)(result + 216) + 2);
        v54 = v49 >= v55;
        LOWORD(v49) = v49 - v55;
      }
      else
      {
        v50 = *(_QWORD *)(result + 216);
        if (v49 > v47[3])
        {
          v51 = *(unsigned __int16 *)(v50 + 6);
          v52 = 4 * (v48 - v51);
          if (v49 >= v51)
            LOWORD(v49) = v52;
          else
            LOWORD(v49) = 0;
          goto LABEL_35;
        }
        v56 = *(unsigned __int16 *)(v50 + 4);
        v54 = v49 >= v56;
        LOWORD(v49) = 2 * (v49 - v56);
      }
      if (!v54)
        LOWORD(v49) = 0;
    }
LABEL_35:
    if ((unsigned __int16)v49 >= 0x3FFFu)
      LOWORD(v49) = 0x3FFF;
    a3->i16[v46++] = v49;
  }
  while (v46 != 16);
  return result;
}

void sub_1D5365284(os_signpost_id_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  size_t v12;
  int32x2_t *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  uint64_t v21;
  unsigned int v22;
  _WORD *v23;
  int32x2_t *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int32x4_t v28;
  int32x4_t v29;
  unsigned int v30;
  int v31;
  void *exception;
  void (**v33)(_QWORD);
  uint64_t v36;
  BOOL v37;
  size_t v38;
  unsigned int v39;
  int v40;
  int32x2_t *v41;
  unsigned int *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  _QWORD v48[5];
  int8x16_t buf;
  int8x16_t v50[2];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  sub_1D52EB058();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (a1 + 1 >= 2 && os_signpost_enabled(v6))
  {
    buf.i16[0] = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v7, OS_SIGNPOST_INTERVAL_BEGIN, a1, "CSonyCompressedUnpacker", (const char *)&unk_1D548AF1A, (uint8_t *)&buf, 2u);
  }

  v48[0] = MEMORY[0x1E0C809B0];
  v48[1] = 3221225472;
  v48[2] = sub_1D5365690;
  v48[3] = &unk_1E996F870;
  v48[4] = a1;
  v8 = MEMORY[0x1D82721B4](v48);
  v40 = *(_DWORD *)(a1 + 44);
  if ((v40 & 0x1F) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v9 = sub_1D530CBD0(a1);
  v33 = (void (**)(_QWORD))v8;
  v10 = *a3;
  v39 = a3[1];
  v11 = *a3 & 0xFFFFFFE0;
  v47 = v11;
  v44 = (v10 + a3[2] + 31) & 0xFFFFFFE0;
  v12 = v44 - v11;
  v13 = (int32x2_t *)operator new[]();
  bzero(v13, v12);
  if (a3[3])
  {
    v14 = 0;
    v15 = v12 >> 2;
    if (v12 >> 2 <= 1)
      v15 = 1;
    v17 = v9 == 1 || v44 == v11;
    v37 = v17;
    v36 = 4 * v15;
    v41 = v13;
    v42 = a3;
    v38 = v44 - v11;
    do
    {
      v18 = *(_QWORD *)(a1 + 24);
      v45 = (v39 + v14) * v40;
      buf.i32[0] = *(_DWORD *)(a1 + 40);
      buf.i32[0] = *sub_1D5294254(buf.i32, &v45);
      v46 = *sub_1D5294254(buf.i32, &v47);
      (*(void (**)(uint64_t, int *, _QWORD))(*(_QWORD *)v18 + 40))(v18, &v46, 0);
      (*(void (**)(_QWORD, int32x2_t *, size_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v13, v12);
      v43 = v14;
      v21 = v36;
      if (!v37)
      {
        do
        {
          v13->i32[0] = bswap32(v13->i32[0]);
          v13 = (int32x2_t *)((char *)v13 + 4);
          v21 -= 4;
        }
        while (v21);
      }
      v22 = v47;
      if (v47 < v44)
      {
        v23 = (_WORD *)(a2 + v14 * a4);
        v24 = v41;
        v25 = v42[2];
        do
        {
          if (v10 >= v22)
            v26 = v22;
          else
            v26 = v10;
          if (v10 >= v22)
            v27 = v10 - v22;
          else
            v27 = 0;
          sub_1D5364F48(a1, v24, &buf, v19, v20);
          sub_1D5364F48(a1, v24 + 2, v50, v28, v29);
          if (v10 - v22 + v25 >= 0x20)
            v30 = 32;
          else
            v30 = v10 - v22 + v25;
          if (v27 < v30)
          {
            v31 = 16 * v10 - 16 * v26;
            do
            {
              *v23++ = buf.i16[(v31 & 0x10) + (v27++ >> 1)];
              v31 += 16;
            }
            while (v27 < v30);
          }
          v22 += 32;
          v24 += 4;
        }
        while (v22 < v44);
      }
      v14 = v43 + 1;
      v13 = v41;
      v12 = v38;
    }
    while (v43 + 1 < (unint64_t)v42[3]);
  }
  MEMORY[0x1D8271AC4](v13, 0x1000C8077774924);
  v33[2](v33);

}

void sub_1D536560C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D5365690(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  sub_1D52EB058();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D527F000, v3, OS_SIGNPOST_INTERVAL_END, v4, "CSonyCompressedUnpacker", (const char *)&unk_1D548AF1A, v5, 2u);
  }

}

char *sub_1D5365714(uint64_t a1, uint64_t a2)
{
  char *result;

  result = (char *)(a1 + 192);
  if (result != (char *)a2)
    return sub_1D52B1D94(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  return result;
}

char *sub_1D5365738(uint64_t a1, uint64_t a2)
{
  char *result;

  result = (char *)(a1 + 216);
  if (result != (char *)a2)
    return sub_1D52B1D94(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1);
  return result;
}

_QWORD *sub_1D536575C(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E998BF38;
  v2 = (void *)a1[27];
  if (v2)
  {
    a1[28] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[24];
  if (v3)
  {
    a1[25] = v3;
    operator delete(v3);
  }
  return sub_1D5282F0C(a1);
}

void sub_1D53657A8(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E998BF38;
  v2 = (void *)a1[27];
  if (v2)
  {
    a1[28] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[24];
  if (v3)
  {
    a1[25] = v3;
    operator delete(v3);
  }
  sub_1D5282F0C(a1);
  JUMPOUT(0x1D8271ADCLL);
}

uint64_t sub_1D5365808(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1))
    return 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v7, a1);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 360))(v7);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void sub_1D53658A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1D53658BC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v5, a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 336))(v5);
    v2 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 640))(a1);
  }
}

void sub_1D5365974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D5282EB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D536598C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  char v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t result;
  void *exception;
  __int128 v11;
  void *v12;
  void *__p[2];
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) != 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D5367248(a2);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 656))(a1) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v18, a1);
    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 328))(v18, a2);
    v5 = v4;
    v6 = v19;
    if (!v19)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if ((v5 & 1) != 0)
        goto LABEL_29;
    }
    else
    {
LABEL_8:
      if ((v4 & 1) != 0)
        goto LABEL_29;
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 760))(&v18, a1);
  if ((_DWORD)v18 && HIDWORD(v18))
  {
    *(_DWORD *)(a2 + 8) = 17;
    sub_1D53393A8((_QWORD *)(a2 + 16), (uint64_t)&v18);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 768))(&v15, a1);
  if ((_DWORD)v15 && HIDWORD(v15))
  {
    *(_DWORD *)(a2 + 12) = 21;
    sub_1D53393A8((_QWORD *)(a2 + 48), (uint64_t)&v15);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 632))(__p, a1);
  sub_1D53393A8((_QWORD *)(a2 + 80), (uint64_t)__p);
  if (__p[1])
  {
    v14 = __p[1];
    operator delete(__p[1]);
  }
  sub_1D53393A8((_QWORD *)(a2 + 112), a2 + 80);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 776))(__p, a1);
  sub_1D53393A8((_QWORD *)(a2 + 144), (uint64_t)__p);
  if (__p[1])
  {
    v14 = __p[1];
    operator delete(__p[1]);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 784))(__p, a1);
  sub_1D53393A8((_QWORD *)(a2 + 176), (uint64_t)__p);
  if (__p[1])
  {
    v14 = __p[1];
    operator delete(__p[1]);
  }
  __p[0] = 0;
  __p[1] = 0;
  v14 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 808))(a1))
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 704))(&v11, a1);
    *(_OWORD *)__p = v11;
    v14 = v12;
  }
  sub_1D536CDB8((_DWORD *)a2, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
LABEL_29:
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if ((int)result >= 7)
    *(_WORD *)(a2 + 208) = 1;
  return result;
}

void sub_1D5365C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  _QWORD *v19;
  uint64_t v20;
  void *v22;

  if (__p)
    operator delete(__p);
  v22 = *(void **)(v20 - 56);
  if (v22)
  {
    *(_QWORD *)(v20 - 48) = v22;
    operator delete(v22);
  }
  sub_1D532D710(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5365D04()
{
  return 0;
}

void sub_1D5365D0C(uint64_t a1@<X0>, float64x2_t **a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  float64x2_t *v7;
  std::__shared_weak_count *v8;
  double v9;
  float64x2_t *v10;
  void *exception;
  float64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1) <= 6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x1D8271938](exception, "RawCameraException");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&v19, a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 368))(v19);
  v4 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = a2[1];
  if (v7 == *a2)
  {
    if (v7)
      operator delete(v7);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 808))(a1))
    {
      v19 = 0x3FF0000000000000;
      sub_1D528F9B4(a2, 3uLL, &v19);
      return;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 704))(&v19, a1);
    v8 = (std::__shared_weak_count *)v19;
    if ((std::__shared_weak_count *)((char *)v20 - v19) == (std::__shared_weak_count *)24)
    {
      v17 = *(float64x2_t *)v19;
      v9 = *(double *)(v19 + 16);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      v10 = (float64x2_t *)operator new(0x18uLL);
      __asm { FMOV            V1.2D, #1.0 }
      a2[1] = (float64x2_t *)((char *)v10 + 24);
      a2[2] = (float64x2_t *)((char *)v10 + 24);
      *v10 = vdivq_f64(_Q1, v17);
      v10[1].f64[0] = 1.0 / v9;
      *a2 = v10;
    }
    else
    {
      v18 = 0x3FF0000000000000;
      sub_1D528F9B4(a2, 3uLL, &v18);
      v8 = (std::__shared_weak_count *)v19;
      if (!v19)
        return;
    }
    v20 = v8;
    operator delete(v8);
  }
}

void sub_1D5365EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1D5365F0C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  char v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  void *__p;
  std::__shared_weak_count *v11;
  double v12;
  uint64_t v13;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 160))(&__p);
  v12 = (*(double (**)(void *))(*(_QWORD *)__p + 376))(__p);
  v13 = v2;
  v3 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (!sub_1D536CB88(&v12))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 1728))(&__p, a1);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
    v7 = (std::__shared_weak_count *)__p;
    if (v11 == __p)
      v6 = 1;
    if ((v6 & 1) == 0)
    {
      v12 = sub_1D536C2E0();
      v13 = v8;
      v7 = (std::__shared_weak_count *)__p;
    }
    if (v7)
    {
      v11 = v7;
      operator delete(v7);
    }
  }
  return v12;
}

void sub_1D5365FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D536601C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *__p[2];
  char v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void *v9;

  v9 = &unk_1E997C018;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v7);
  v1 = v7;
  sub_1D52850A0(__p, "");
  (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v1 + 600))(v1, __p, &v9, 3);
  if (v6 < 0)
    operator delete(__p[0]);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1D53660DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1D5366108(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 680))(a1);
}

void sub_1D5366114(uint64_t a1@<X0>, double **a2@<X8>)
{
  double *v4;
  void *v5;
  double v6;
  double v7;
  double v8;
  double *v9;
  uint64_t v10;
  __int128 v11;
  double *v12;

  (*(void (**)(double **__return_ptr))(*(_QWORD *)a1 + 1728))(a2);
  if (a2[1] == *a2)
  {
    v10 = 0x3FF0000000000000;
    sub_1D528F9B4(&v11, 3uLL, &v10);
    v4 = *a2;
    if (*a2)
    {
      a2[1] = v4;
      operator delete(v4);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    *(_OWORD *)a2 = v11;
    a2[2] = v12;
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 688))(&v11, a1);
    v5 = (void *)v11;
    if (*((_QWORD *)&v11 + 1) - (_QWORD)v11 == 24)
    {
      v6 = *(double *)(v11 + 8);
      v7 = *(double *)v11 / v6;
      if (v7 > 0.00000001)
      {
        v8 = *(double *)(v11 + 16) / v6;
        if (v8 > 0.00000001)
        {
          v9 = *a2;
          *v9 = v7;
          v9[2] = v8;
        }
      }
    }
    else if (!(_QWORD)v11)
    {
      return;
    }
    *((_QWORD *)&v11 + 1) = v5;
    operator delete(v5);
  }
}

void sub_1D5366200(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_1D5366220@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double v12;
  char *v13;
  void *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  double *v21;
  uint64_t v22;
  void *v23;
  double v24;
  BOOL v25;
  double result;
  void *__p;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void *v32;
  _BYTE *v33;
  void *v34[2];
  char *v35;

  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 2864))(&v30);
  __p = 0;
  v28 = 0;
  v29 = 0;
  sub_1D5371264(v30, (uint64_t)&__p, v3, v4, (char **)&v32);
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  v5 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (unint64_t)(v33 - (_BYTE *)v32) >> 3;
  if (v8 > 4)
    goto LABEL_39;
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = ((unint64_t)(v33 - (_BYTE *)v32) >> 3);
    do
    {
      v11 = (double *)v32;
      v12 = *((double *)v32 + v9);
      if (v12 > 0.0)
      {
        v13 = (char *)v34[1];
        if (v34[1] >= v35)
        {
          v15 = (char *)v34[0];
          v16 = ((char *)v34[1] - (char *)v34[0]) >> 3;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 61)
            sub_1D5282B8C();
          v18 = v35 - (char *)v34[0];
          if ((v35 - (char *)v34[0]) >> 2 > v17)
            v17 = v18 >> 2;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)sub_1D5282D28((uint64_t)&v35, v19);
            v15 = (char *)v34[0];
            v13 = (char *)v34[1];
            v12 = v11[v9];
          }
          else
          {
            v20 = 0;
          }
          v21 = (double *)&v20[8 * v16];
          *v21 = v12;
          v14 = v21 + 1;
          while (v13 != v15)
          {
            v22 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *((_QWORD *)v21-- - 1) = v22;
          }
          v34[0] = v21;
          v34[1] = v14;
          v35 = &v20[8 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(double *)v34[1] = v12;
          v14 = v13 + 8;
        }
        v34[1] = v14;
      }
      ++v9;
    }
    while (v9 != v10);
  }
  v23 = v34[0];
  if ((void *)((char *)v34[1] - (char *)v34[0]) != (void *)16
    || *(double *)v34[0] >= 0.0
    && ((v24 = *((double *)v34[0] + 1), v24 >= 0.0) ? (v25 = *(double *)v34[0] + v24 <= 1.0) : (v25 = 0), v25))
  {
LABEL_39:
    if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
    result = *(double *)v34;
    *(_OWORD *)a2 = *(_OWORD *)v34;
    *(_QWORD *)(a2 + 16) = v35;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    if (!v32 || (v33 = v32, operator delete(v32), (v23 = v34[0]) != 0))
    {
      v34[1] = v23;
      operator delete(v23);
    }
  }
  return result;
}

void sub_1D5366450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  sub_1D5282EB4((uint64_t)&a12);
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

double sub_1D53664A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  void *__p[3];
  unsigned int v8[70];
  char *v9;
  char *v10;
  __int128 v11;

  v11 = 0uLL;
  (*(void (**)(char **__return_ptr))(*(_QWORD *)a1 + 712))(&v9);
  v2 = (v10 - v9) >> 3;
  if ((unint64_t)(v2 - 3) < 2)
  {
    (*(void (**)(unsigned int *__return_ptr, uint64_t))(*(_QWORD *)a1 + 648))(v8, a1);
    *(_QWORD *)&v11 = sub_1D536EA4C(v8, (uint64_t *)&v9);
    *((_QWORD *)&v11 + 1) = v3;
LABEL_3:
    sub_1D532D710(v8);
    goto LABEL_7;
  }
  if (v2 == 2)
  {
    v11 = *(_OWORD *)v9;
  }
  else
  {
    *(_QWORD *)&v11 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 672))(a1);
    *((_QWORD *)&v11 + 1) = v4;
    if (!sub_1D536CB88((double *)&v11))
    {
      (*(void (**)(unsigned int *__return_ptr, uint64_t))(*(_QWORD *)a1 + 648))(v8, a1);
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 664))(__p, a1);
      *(_QWORD *)&v11 = sub_1D536EA4C(v8, (uint64_t *)__p);
      *((_QWORD *)&v11 + 1) = v6;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_3;
    }
  }
LABEL_7:
  if (getenv("RAWCAMERA_LOG_WHITEPOINT"))
    printf("WhitePoint: x=%1.4lf  |  y=%1.4lf \n", *(double *)&v11, *((double *)&v11 + 1));
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  return *(double *)&v11;
}

void sub_1D53665E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  void *v17;

  if (__p)
    operator delete(__p);
  sub_1D532D710(&a15);
  v17 = *(void **)(v15 - 56);
  if (v17)
  {
    *(_QWORD *)(v15 - 48) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_1D5366634@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  double v25;
  void *v26;
  void *v27;
  unsigned int v28;
  void *__p;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  _QWORD v34[35];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 648))(v34);
  v25 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 720))(a1);
  v26 = v4;
  sub_1D5338D40((uint64_t)&v28, 3u, 3u, 0.6097, v5, v6, v7, v8, v9, 0x3FCA474538EF34D7);
  sub_1D536D624((uint64_t)v34, &v25, &v28, &v31);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  if ((_DWORD)v31 && HIDWORD(v31))
  {
    sub_1D5338D40((uint64_t)&v25, 3u, 1u, 1.0, v10, v11, v12, v13, v14, 0x3FF0000000000000);
    sub_1D5339A4C((unsigned int *)&v31, &v20);
    sub_1D5339674((unsigned int *)&v20, &v25, (uint64_t)&v22);
    if (*((_QWORD *)&v20 + 1))
    {
      v21 = *((_QWORD *)&v20 + 1);
      operator delete(*((void **)&v20 + 1));
    }
    v15 = sub_1D533A1F0((unsigned int *)&v22);
    sub_1D5339590((unsigned int *)&v22, (uint64_t)&v20, 1.0 / v15);
    sub_1D53393A8(&v22, (uint64_t)&v20);
    if (*((_QWORD *)&v20 + 1))
    {
      v21 = *((_QWORD *)&v20 + 1);
      operator delete(*((void **)&v20 + 1));
    }
    sub_1D528EB68(a2, 3uLL);
    *(_QWORD *)&v20 = sub_1D5339044((uint64_t)&v22, 0);
    *((_QWORD *)&v20 + 1) = v16;
    *(double *)*a2 = 1.0 / *(double *)sub_1D53390D4((uint64_t)&v20, 0);
    *(_QWORD *)&v20 = sub_1D5339044((uint64_t)&v22, 1u);
    *((_QWORD *)&v20 + 1) = v17;
    *(double *)(*a2 + 8) = 1.0 / *(double *)sub_1D53390D4((uint64_t)&v20, 0);
    *(_QWORD *)&v20 = sub_1D5339044((uint64_t)&v22, 2u);
    *((_QWORD *)&v20 + 1) = v18;
    *(double *)(*a2 + 16) = 1.0 / *(double *)sub_1D53390D4((uint64_t)&v20, 0);
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
    if (v26)
    {
      v27 = v26;
      operator delete(v26);
    }
  }
  else
  {
    v25 = 1.0;
    sub_1D528F9B4(a2, 3uLL, &v25);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  return sub_1D532D710(v34);
}

