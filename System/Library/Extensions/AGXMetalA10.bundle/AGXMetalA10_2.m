void sub_232D1A54C()
{
  JUMPOUT(0x232D1A470);
}

void sub_232D1A558()
{
  JUMPOUT(0x232D1A470);
}

void sub_232D1A564()
{
  JUMPOUT(0x232D1A470);
}

void sub_232D1A570()
{
  JUMPOUT(0x232D1A470);
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::validateRegion(uint64_t a1, int a2, int a3, int a4, int a5, int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned __int8 *a10, uint64_t a11, uint64_t a12)
{
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  NSObject *v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint8_t buf[4];
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!a5)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: Texture read/write assertion failed: %s\n", "width > 0");
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "width > 0";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "width > 0";
      _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "width > 0";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      return 0;
    *(_DWORD *)buf = 136315138;
    v25 = "width > 0";
    v16 = MEMORY[0x24BDACB70];
    goto LABEL_96;
  }
  if (!a6)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: Texture read/write assertion failed: %s\n", "height > 0");
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "height > 0";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "height > 0";
      _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "height > 0";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      return 0;
    *(_DWORD *)buf = 136315138;
    v25 = "height > 0";
    v16 = MEMORY[0x24BDACB70];
    goto LABEL_96;
  }
  if (!a7)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: Texture read/write assertion failed: %s\n", "depth > 0");
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "depth > 0";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "depth > 0";
      _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "depth > 0";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      return 0;
    *(_DWORD *)buf = 136315138;
    v25 = "depth > 0";
    v16 = MEMORY[0x24BDACB70];
    goto LABEL_96;
  }
  v13 = *(_DWORD *)(a1 + 144) + a9;
  v14 = *(_DWORD *)(a1 + 128) >> (*(_BYTE *)(a1 + 144) + a9);
  if (v14 <= 1)
    v14 = 1;
  v15 = *(unsigned int *)(a1 + 216);
  if (v14 + v15 + ~(((unint64_t)(v14 + v15) - 1) % v15) < (a5 + a2))
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: Texture read/write assertion failed: %s\n", "(xoffset + width) <= ALIGNGRAN_NPOT(getViewLevelWidth(mipmapLevel), block_width) && \"Region width OOB\"");
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "(xoffset + width) <= ALIGNGRAN_NPOT(getViewLevelWidth(mipmapLevel), block_width) && \"Region width OOB\"";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "(xoffset + width) <= ALIGNGRAN_NPOT(getViewLevelWidth(mipmapLevel), block_width) && \"Region width OOB\"";
      _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "(xoffset + width) <= ALIGNGRAN_NPOT(getViewLevelWidth(mipmapLevel), block_width) && \"Region width OOB\"";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      return 0;
    *(_DWORD *)buf = 136315138;
    v25 = "(xoffset + width) <= ALIGNGRAN_NPOT(getViewLevelWidth(mipmapLevel), block_width) && \"Region width OOB\"";
    v16 = MEMORY[0x24BDACB70];
    goto LABEL_96;
  }
  if (*(_DWORD *)(a1 + 132) >> v13 <= 1u)
    v17 = 1;
  else
    v17 = *(_DWORD *)(a1 + 132) >> v13;
  v18 = *(unsigned int *)(a1 + 220);
  if ((v17 + v18) + ~(((unint64_t)(v17 + v18) - 1) % v18) < (a6 + a3))
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: Texture read/write assertion failed: %s\n", "(yoffset + height) <= ALIGNGRAN_NPOT(getViewLevelHeight(mipmapLevel), block_height) && \"Region height OOB\"");
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "(yoffset + height) <= ALIGNGRAN_NPOT(getViewLevelHeight(mipmapLevel), block_height) && \"Region height OOB\"";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "(yoffset + height) <= ALIGNGRAN_NPOT(getViewLevelHeight(mipmapLevel), block_height) && \"Region height OOB\"";
      _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "(yoffset + height) <= ALIGNGRAN_NPOT(getViewLevelHeight(mipmapLevel), block_height) && \"Region height OOB\"";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      return 0;
    *(_DWORD *)buf = 136315138;
    v25 = "(yoffset + height) <= ALIGNGRAN_NPOT(getViewLevelHeight(mipmapLevel), block_height) && \"Region height OOB\"";
    v16 = MEMORY[0x24BDACB70];
    goto LABEL_96;
  }
  v19 = *(_DWORD *)(a1 + 136) >> v13;
  if (v19 <= 1)
    v19 = 1;
  if (a7 + a4 > v19)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: Texture read/write assertion failed: %s\n", "(zoffset + depth) <= getViewLevelDepth(mipmapLevel) && \"Region depth OOB\"");
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "(zoffset + depth) <= getViewLevelDepth(mipmapLevel) && \"Region depth OOB\"";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "(zoffset + depth) <= getViewLevelDepth(mipmapLevel) && \"Region depth OOB\"";
      _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "(zoffset + depth) <= getViewLevelDepth(mipmapLevel) && \"Region depth OOB\"";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      return 0;
    *(_DWORD *)buf = 136315138;
    v25 = "(zoffset + depth) <= getViewLevelDepth(mipmapLevel) && \"Region depth OOB\"";
    v16 = MEMORY[0x24BDACB70];
    goto LABEL_96;
  }
  v20 = *(_QWORD *)(a1 + 380) & 0xFF00;
  if ((*(_QWORD *)(a1 + 380) & 0x10000) != 0 || v20 == 1024)
  {
    if (v20 == 1024)
      v21 = 6 * *(_DWORD *)(a1 + 376);
    else
      v21 = *(_DWORD *)(a1 + 376);
  }
  else
  {
    v21 = 1;
  }
  if (v21 <= a8)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: Texture read/write assertion failed: %s\n", "slice < getNumSlices() && \"Specified slice OOB\"");
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "slice < getNumSlices() && \"Specified slice OOB\"";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "slice < getNumSlices() && \"Specified slice OOB\"";
      _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "slice < getNumSlices() && \"Specified slice OOB\"";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      return 0;
    *(_DWORD *)buf = 136315138;
    v25 = "slice < getNumSlices() && \"Specified slice OOB\"";
    v16 = MEMORY[0x24BDACB70];
    goto LABEL_96;
  }
  if (*(_DWORD *)(a1 + 140) <= a9)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: Texture read/write assertion failed: %s\n", "mipmapLevel < getBaseNumMipmapLevels() && \"Specified mipmap level OOB\"");
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "mipmapLevel < getBaseNumMipmapLevels() && \"Specified mipmap level OOB\"";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "mipmapLevel < getBaseNumMipmapLevels() && \"Specified mipmap level OOB\"";
      _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v25 = "mipmapLevel < getBaseNumMipmapLevels() && \"Specified mipmap level OOB\"";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      return 0;
    *(_DWORD *)buf = 136315138;
    v25 = "mipmapLevel < getBaseNumMipmapLevels() && \"Specified mipmap level OOB\"";
    v16 = MEMORY[0x24BDACB70];
    goto LABEL_96;
  }
  v22 = *(_QWORD *)(a1 + 208);
  if (*(_DWORD *)(v22 + 24))
    return agxaAssertBufferIsValid(a10, a11, a12, *(unsigned __int8 *)(v22 + 88), a5, a6, v18, v15, a7);
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: Texture read/write assertion failed: %s\n", "plane < getNumPlanes() && \"Specified plane OOB\"");
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v25 = "plane < getNumPlanes() && \"Specified plane OOB\"";
    _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    v25 = "plane < getNumPlanes() && \"Specified plane OOB\"";
    _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v25 = "plane < getNumPlanes() && \"Specified plane OOB\"";
    _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    v25 = "plane < getNumPlanes() && \"Specified plane OOB\"";
    v16 = MEMORY[0x24BDACB70];
LABEL_96:
    _os_log_impl(&dword_232C19000, v16, OS_LOG_TYPE_INFO, "AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
  }
  return 0;
}

BOOL agxCalcSparseInputs(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, int a10, unsigned int a11, char a12, unsigned __int8 a13, unsigned int a14, unsigned int a15, int a16, int a17, uint64_t a18)
{
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int32x4_t v42;
  uint32x4_t v43;
  uint32x4_t v44;
  uint64x2_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  unsigned int v50;
  int32x4_t v51;
  uint32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  uint64x2_t v55;
  uint64x2_t v56;
  uint64x2_t v57;
  uint64x2_t v58;
  char v59;
  char v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  _BOOL8 result;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  _DWORD v86[16];
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  v18 = a4 - 1;
  v19 = (a4 - 1 + a2) / a4;
  v20 = a5 - 1;
  v21 = 32 - __clz(a1 / a6 - 1);
  if (a1 / a6 >= 2)
    v22 = v21;
  else
    v22 = 0;
  v23 = (v22 + a13) >> 1;
  v24 = (a5 - 1 + a3) / a5;
  if (v19 < 2)
    v25 = 0;
  else
    v25 = 32 - __clz(~(-1 << -(char)__clz(v19 - 1)));
  v26 = v22 - v23;
  v28 = a14;
  v27 = a15;
  if (v24 < 2)
    v29 = 0;
  else
    v29 = 32 - __clz(~(-1 << -(char)__clz(v24 - 1)));
  v30 = 0;
  v31 = 0;
  v86[0] = 0;
  if (a8 + 1 > 1)
    v32 = a8 + 1;
  else
    v32 = 1;
  do
  {
    v33 = v25 - v31;
    if (v25 < v31)
      v33 = 0;
    v34 = v29 - v31;
    if (v29 < v31)
      v34 = 0;
    v35 = v33 + v34;
    v36 = v35 >= v22;
    v37 = v35 - v22;
    if (!v36)
      v37 = 0;
    v30 += 1 << v37;
    v86[++v31] = v30;
  }
  while (v32 != v31);
  v38 = 0;
  if (a7 >= 2)
  {
    v39 = a7 - a8;
    if (a7 > a8)
    {
      if (v39 >= 8)
      {
        v41 = v39 & 0xFFFFFFF8;
        v42 = vaddq_s32(vdupq_n_s32(a8), (int32x4_t)xmmword_232D73750);
        v43 = (uint32x4_t)vdupq_n_s32(v25);
        v44 = (uint32x4_t)vdupq_n_s32(v29);
        v45 = (uint64x2_t)vdupq_n_s64(a6);
        v46 = 0uLL;
        v47.i64[0] = 0x400000004;
        v47.i64[1] = 0x400000004;
        v48.i64[0] = 0x7F0000007FLL;
        v48.i64[1] = 0x7F0000007FLL;
        v49.i64[0] = 0x800000008;
        v49.i64[1] = 0x800000008;
        v50 = v39 & 0xFFFFFFF8;
        v51 = 0uLL;
        do
        {
          v52 = (uint32x4_t)vaddq_s32(v42, v47);
          v53 = vaddq_s32((int32x4_t)vqsubq_u32(v43, (uint32x4_t)v42), (int32x4_t)vqsubq_u32(v44, (uint32x4_t)v42));
          v54 = vaddq_s32((int32x4_t)vqsubq_u32(v43, v52), (int32x4_t)vqsubq_u32(v44, v52));
          v55.i64[0] = v53.u32[0];
          v55.i64[1] = v53.u32[1];
          v56 = v55;
          v55.i64[0] = v53.u32[2];
          v55.i64[1] = v53.u32[3];
          v57 = v55;
          v55.i64[0] = v54.u32[0];
          v55.i64[1] = v54.u32[1];
          v58 = v55;
          v55.i64[0] = v54.u32[2];
          v55.i64[1] = v54.u32[3];
          v46 = vaddq_s32((int32x4_t)(*(_OWORD *)&vaddq_s32(vuzp1q_s32((int32x4_t)vshlq_u64(v45, v56), (int32x4_t)vshlq_u64(v45, v57)), v48) & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80)), v46);
          v51 = vaddq_s32((int32x4_t)(*(_OWORD *)&vaddq_s32(vuzp1q_s32((int32x4_t)vshlq_u64(v45, v58), (int32x4_t)vshlq_u64(v45, v55)), v48) & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80)), v51);
          v42 = vaddq_s32(v42, v49);
          v50 -= 8;
        }
        while (v50);
        v38 = vaddvq_s32(vaddq_s32(v51, v46));
        if (v39 == v41)
          goto LABEL_31;
        v40 = v41 + a8;
      }
      else
      {
        v38 = 0;
        v40 = a8;
      }
      do
      {
        v59 = v25 - v40;
        if (v25 < v40)
          v59 = 0;
        v60 = v29 - v40;
        if (v29 < v40)
          v60 = 0;
        v38 += (((unint64_t)a6 << (v59 + v60)) + 127) & 0xFFFFFF80;
        ++v40;
      }
      while (a7 != v40);
    }
  }
LABEL_31:
  if (a11 >= a8)
    v61 = a8;
  else
    v61 = a11;
  if (a7 <= 1)
    v62 = 1;
  else
    v62 = a8 + 1;
  v63 = v62;
  v64 = (v86[v63] + 255) & 0xFFFFFF00;
  v86[v63] = v64;
  v65 = a2 >> v61;
  v66 = a3 >> v61;
  if ((a12 & 1) == 0)
  {
    if (v65 && (v69 = (v18 + v65) / a4, v69 >= 2))
    {
      v67 = 32 - __clz(~(-1 << -(char)__clz(v69 - 1)));
      if (!v66)
        goto LABEL_51;
    }
    else
    {
      v67 = 0;
      if (!v66)
        goto LABEL_51;
    }
    v70 = (v20 + v66) / a5;
    if (v70 >= 2)
    {
      v68 = 32 - __clz(~(-1 << -(char)__clz(v70 - 1)));
      goto LABEL_52;
    }
LABEL_51:
    v68 = 0;
    goto LABEL_52;
  }
  if (v25 >= v61)
    v67 = v25 - v61;
  else
    v67 = 0;
  if (v29 >= v61)
    v68 = v29 - v61;
  else
    v68 = 0;
LABEL_52:
  v71 = 1 << v67;
  v72 = 1 << v68;
  if (1 << v26 >= (1 << v68) || v71 >> v23)
  {
    if (v72 >> v26)
    {
      v73 = (v22 + a13) >> 1;
      v74 = v22 - v23;
    }
    else
    {
      v73 = (v22 + a13) >> 1;
      v74 = v22 - v23;
      if (1 << v23 < v71)
      {
        if (v68)
          v75 = __clz(~(-1 << -(char)__clz(v72 - 1))) | 0xFFFFFFE0;
        else
          v75 = 0;
        v73 = v75 + v22;
        v74 = -v75;
      }
    }
  }
  else if (v67)
  {
    v73 = 32 - __clz(~(-1 << -(char)__clz(v71 - 1)));
    v74 = v22 - v73;
  }
  else
  {
    v73 = 0;
    v74 = v22;
  }
  if (v67 >= v73)
    v76 = v67 - v73;
  else
    v76 = 0;
  v36 = v68 >= v74;
  v77 = v68 - v74;
  if (!v36)
    v77 = 0;
  *(_DWORD *)(a18 + 28) = v76;
  *(_DWORD *)(a18 + 32) = v77;
  result = a8 <= a11 && v38 > a1;
  if (result)
    *(_DWORD *)(a18 + 28) = v76 + 1;
  *(_BYTE *)(a18 + 57) = (v74 != v73) ^ a13;
  *(_DWORD *)(a18 + 36) = v73;
  *(_DWORD *)(a18 + 40) = v74;
  *(_DWORD *)(a18 + 24) = v86[v61] + v64 * a10;
  *(_BYTE *)(a18 + 53) = a6;
  if ((a12 & 1) == 0)
  {
    if (v65)
    {
      v71 = (v18 + v65) / a4;
      if (v66)
      {
LABEL_78:
        v72 = (v20 + v66) / a5;
        goto LABEL_81;
      }
    }
    else
    {
      v71 = 1;
      if (v66)
        goto LABEL_78;
    }
    v72 = 1;
  }
LABEL_81:
  v80 = ((1 << v73) + v71 - 1) >> v73;
  v81 = ((1 << v74) + v72 - 1) >> v74;
  if (v61 >= a9)
  {
    v27 = 0;
    v28 = 0;
  }
  else
  {
    v82 = a16 + a14;
    v83 = a17 + a15;
    if (v23 != v73)
    {
      v28 = a14 << v23 >> v73;
      v27 = a15 << v26 >> v74;
      v82 = ((v82 << v23) + (1 << v73) - 1) >> v73;
      v83 = ((v83 << v26) + (1 << v74) - 1) >> v74;
    }
    if (v28 >= v80)
      v28 = ((1 << v73) + v71 - 1) >> v73;
    if (v27 >= v81)
      v27 = ((1 << v74) + v72 - 1) >> v74;
    if (v82 >= v80)
      v84 = ((1 << v73) + v71 - 1) >> v73;
    else
      v84 = v82;
    if (v83 >= v81)
      v85 = ((1 << v74) + v72 - 1) >> v74;
    else
      v85 = v83;
    v80 = v84 - v28;
    v81 = v85 - v27;
  }
  *(_DWORD *)(a18 + 16) = v28;
  *(_DWORD *)(a18 + 20) = v27;
  *(_DWORD *)(a18 + 44) = v80;
  *(_DWORD *)(a18 + 48) = v81;
  if (result)
    *(_DWORD *)(a18 + 44) = v80 + 1;
  return result;
}

size_t AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Op)0>(uint64_t a1, unsigned int a2)
{
  __IOSurface *v4;
  uint64_t WidthInCompressedTilesOfPlane;
  uint64_t v7;
  unsigned int v8;
  MTLPixelFormat v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  _OWORD v15[4];
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;

  if (*(_BYTE *)(a1 + 380) == 3)
  {
    if (*(_QWORD *)(a1 + 168))
    {
      WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
      return IOSurfaceGetBytesPerTileDataOfPlane() * WidthInCompressedTilesOfPlane;
    }
    else
    {
      v8 = *(_DWORD *)(a1 + 128);
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_QWORD *)(a1 + 208);
      v11 = *(unsigned __int8 *)(a1 + a2 + 57);
      v16 = 0;
      memset(v15, 0, sizeof(v15));
      v12 = *(unsigned __int8 *)(v10 + 49);
      InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)v15, a2, v9, v12);
      if (a2 == 1 && (*(_DWORD *)(v10 + 72) & 0xFFFFFFFE) == 2)
        v8 = (v8 + 1) >> 1;
      v13 = LOBYTE(v15[0]);
      v18 = 0;
      memset(v17, 0, sizeof(v17));
      InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)v17, a2, v9, v12);
      if ((v11 - 1) > 2)
        v14 = (BYTE1(v17[0]) * LOBYTE(v17[0]) * (unint64_t)BYTE2(v17[0])) >> 3;
      else
        v14 = *((_QWORD *)&v17[2] + v11 + 1);
      return v14 * ((v8 + v13 - 1) / v13);
    }
  }
  else if (*(_BYTE *)(a1 + 380))
  {
    return 0;
  }
  else
  {
    v4 = *(__IOSurface **)(a1 + 168);
    if (v4)
    {
      return IOSurfaceGetBytesPerRowOfPlane(v4, *(_DWORD *)(a1 + 176) + a2);
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(v7 - 624) >= 4 && (unint64_t)(v7 - 550) > 1)
        return *(_QWORD *)(a1 + 152);
      else
        return (*(unsigned int *)(a1 + 128) * (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 + 208) + a2 + 88)
              + 15) & 0x1FFFFFFFFF0;
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getAddressingBaseLevelWidthInBlocks(uint64_t a1, char a2)
{
  uint64_t v4;
  BOOL isLevelTiled;
  uint64_t v6;
  BOOL v7;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t result;
  int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;

  v4 = *(unsigned __int8 *)(a1 + 380);
  if (v4 == 2)
  {
    isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::isLevelTiled(a1, a2);
    v6 = *(_QWORD *)(a1 + 208);
    if (!*(_DWORD *)(v6 + 56) || isLevelTiled)
    {
LABEL_10:
      if ((unint64_t)(*(_QWORD *)(a1 + 32) - 250) > 0xB || ((1 << (*(_BYTE *)(a1 + 32) + 6)) & 0xC0D) == 0)
      {
        v9 = *(_DWORD *)(a1 + 128);
      }
      else
      {
        v9 = *(_DWORD *)(a1 + 128);
        if ((v9 < 0x20 || *(_DWORD *)(a1 + 132) <= 0x1Fu)
          && (*(_QWORD *)(a1 + 40) & 5) == 4
          && *(_DWORD *)(a1 + 64) <= 1u)
        {
          v9 = (v9 + ~(-1 << *(_BYTE *)(v6 + 48))) & (-1 << *(_BYTE *)(v6 + 48));
        }
      }
      v16 = v9 >> a2;
      if (v9 >> a2 <= 1)
        v16 = 1;
      return (*(_DWORD *)(a1 + 216) + v16 - 1) / *(_DWORD *)(a1 + 216);
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 316))
      v7 = v4 == 1;
    else
      v7 = 0;
    if (!v7)
    {
      v6 = *(_QWORD *)(a1 + 208);
      goto LABEL_10;
    }
  }
  v10 = *(_DWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 32) - 250;
  if (v11 > 0xB || ((1 << (*(_BYTE *)(a1 + 32) + 6)) & 0xC0D) == 0)
  {
    v13 = *(_DWORD *)(a1 + 128);
LABEL_33:
    v15 = v13;
    goto LABEL_34;
  }
  v13 = *(_DWORD *)(a1 + 128);
  if (v13 >= 0x20 && *(_DWORD *)(a1 + 132) > 0x1Fu || (*(_QWORD *)(a1 + 40) & 5) != 4 || v10 > 1)
    goto LABEL_33;
  v14 = -1 << *(_BYTE *)(*(_QWORD *)(a1 + 208) + 48);
  v15 = (v13 + ~v14) & v14;
LABEL_34:
  if (v15 <= 1)
    v18 = 1;
  else
    v18 = v15;
  v19 = *(_DWORD *)(a1 + 216);
  v20 = (v19 - 1 + v18) / v19;
  v21 = v20 > 1;
  result = 1;
  v22 = 1 << -(char)__clz(v20 - 1);
  if (!v21)
    v22 = 1;
  if (v22 >> a2 >= 2)
  {
    if (v11 <= 0xB
      && ((1 << (*(_BYTE *)(a1 + 32) + 6)) & 0xC0D) != 0
      && (v13 < 0x20 || *(_DWORD *)(a1 + 132) <= 0x1Fu)
      && (*(_QWORD *)(a1 + 40) & 5) == 4
      && v10 <= 1)
    {
      v23 = -1 << *(_BYTE *)(*(_QWORD *)(a1 + 208) + 48);
      v13 = (v13 + ~v23) & v23;
    }
    if (v13 <= 1)
      v13 = 1;
    v24 = (v19 - 1 + v13) / v19;
    v21 = v24 > 1;
    v25 = 1 << -(char)__clz(v24 - 1);
    if (!v21)
      v25 = 1;
    return v25 >> a2;
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getAddressingBaseLevelHeightInBlocks(uint64_t a1, char a2)
{
  uint64_t v4;
  BOOL isLevelTiled;
  uint64_t v6;
  BOOL v7;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t result;
  int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;

  v4 = *(unsigned __int8 *)(a1 + 380);
  if (v4 == 2)
  {
    isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::isLevelTiled(a1, a2);
    v6 = *(_QWORD *)(a1 + 208);
    if (!*(_DWORD *)(v6 + 56) || isLevelTiled)
    {
LABEL_10:
      if ((unint64_t)(*(_QWORD *)(a1 + 32) - 250) > 0xB || ((1 << (*(_BYTE *)(a1 + 32) + 6)) & 0xC0D) == 0)
      {
        v9 = *(_DWORD *)(a1 + 132);
      }
      else
      {
        v9 = *(_DWORD *)(a1 + 132);
        if ((*(_DWORD *)(a1 + 128) < 0x20u || v9 <= 0x1F)
          && (*(_QWORD *)(a1 + 40) & 5) == 4
          && *(_DWORD *)(a1 + 64) <= 1u)
        {
          v9 = (v9 + ~(-1 << *(_BYTE *)(v6 + 48))) & (-1 << *(_BYTE *)(v6 + 48));
        }
      }
      v16 = v9 >> a2;
      if (v9 >> a2 <= 1)
        v16 = 1;
      return (*(_DWORD *)(a1 + 220) + v16 - 1) / *(_DWORD *)(a1 + 220);
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 316))
      v7 = v4 == 1;
    else
      v7 = 0;
    if (!v7)
    {
      v6 = *(_QWORD *)(a1 + 208);
      goto LABEL_10;
    }
  }
  v10 = *(_DWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 32) - 250;
  if (v11 > 0xB || ((1 << (*(_BYTE *)(a1 + 32) + 6)) & 0xC0D) == 0)
  {
    v13 = *(_DWORD *)(a1 + 132);
LABEL_33:
    v15 = v13;
    goto LABEL_34;
  }
  v13 = *(_DWORD *)(a1 + 132);
  if (*(_DWORD *)(a1 + 128) >= 0x20u && v13 > 0x1F || (*(_QWORD *)(a1 + 40) & 5) != 4 || v10 > 1)
    goto LABEL_33;
  v14 = -1 << *(_BYTE *)(*(_QWORD *)(a1 + 208) + 48);
  v15 = (v13 + ~v14) & v14;
LABEL_34:
  if (v15 <= 1)
    v18 = 1;
  else
    v18 = v15;
  v19 = *(_DWORD *)(a1 + 220);
  v20 = (v19 - 1 + v18) / v19;
  v21 = v20 > 1;
  result = 1;
  v22 = 1 << -(char)__clz(v20 - 1);
  if (!v21)
    v22 = 1;
  if (v22 >> a2 >= 2)
  {
    if (v11 <= 0xB
      && ((1 << (*(_BYTE *)(a1 + 32) + 6)) & 0xC0D) != 0
      && (*(_DWORD *)(a1 + 128) < 0x20u || v13 <= 0x1F)
      && (*(_QWORD *)(a1 + 40) & 5) == 4
      && v10 <= 1)
    {
      v23 = -1 << *(_BYTE *)(*(_QWORD *)(a1 + 208) + 48);
      v13 = (v13 + ~v23) & v23;
    }
    if (v13 <= 1)
      v13 = 1;
    v24 = (v19 - 1 + v13) / v19;
    v21 = v24 > 1;
    v25 = 1 << -(char)__clz(v24 - 1);
    if (!v21)
      v25 = 1;
    return v25 >> a2;
  }
  return result;
}

uint64_t (*AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getTwiddleFunc(uint64_t a1))(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t)
{
  int v2;
  uint64_t v3;
  uint64_t (*result)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t);
  unsigned int v5;
  uint64_t (**v6)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t);
  uint64_t (*v7)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t);
  uint64_t (*v8)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t);

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32) - 130;
  result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressPVRTC2<true,(TwiddleOrder)0>;
  switch(v3)
  {
    case 0:
    case 1:
    case 10:
    case 11:
    case 40:
    case 42:
    case 50:
    case 51:
    case 52:
    case 53:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<true,4u,4u,8ul,(TwiddleOrder)0>;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 12:
    case 13:
    case 20:
    case 21:
    case 22:
    case 23:
    case 44:
    case 46:
    case 48:
    case 49:
    case 56:
    case 74:
    case 92:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<true,4u,4u,16ul,(TwiddleOrder)0>;
      break;
    case 30:
    case 31:
    case 34:
    case 35:
      return result;
    case 32:
    case 33:
    case 36:
    case 37:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressPVRTC4<true,(TwiddleOrder)0>;
      break;
    case 55:
    case 73:
    case 91:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<true,4u,2u,16ul,(TwiddleOrder)0>;
      break;
    case 57:
    case 75:
    case 93:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<true,5u,4u,16ul,(TwiddleOrder)0>;
      break;
    case 58:
    case 76:
    case 94:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<true,5u,5u,16ul,(TwiddleOrder)0>;
      break;
    case 59:
    case 77:
    case 95:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<true,6u,5u,16ul,(TwiddleOrder)0>;
      break;
    case 60:
    case 78:
    case 96:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<true,6u,6u,16ul,(TwiddleOrder)0>;
      break;
    case 61:
    case 79:
    case 97:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<true,8u,4u,16ul,(TwiddleOrder)0>;
      break;
    case 62:
    case 80:
    case 98:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<true,8u,5u,16ul,(TwiddleOrder)0>;
      break;
    case 63:
    case 81:
    case 99:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<true,8u,6u,16ul,(TwiddleOrder)0>;
      break;
    case 64:
    case 82:
    case 100:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<true,8u,8u,16ul,(TwiddleOrder)0>;
      break;
    case 65:
    case 83:
    case 101:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<true,10u,5u,16ul,(TwiddleOrder)0>;
      break;
    case 66:
    case 84:
    case 102:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<true,10u,6u,16ul,(TwiddleOrder)0>;
      break;
    case 67:
    case 85:
    case 103:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<true,10u,8u,16ul,(TwiddleOrder)0>;
      break;
    case 68:
    case 86:
    case 104:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<true,10u,10u,16ul,(TwiddleOrder)0>;
      break;
    case 69:
    case 87:
    case 105:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<true,12u,10u,16ul,(TwiddleOrder)0>;
      break;
    case 70:
    case 88:
    case 106:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<true,12u,12u,16ul,(TwiddleOrder)0>;
      break;
    default:
      result = 0;
      switch(*(_BYTE *)(*(_QWORD *)(a1 + 208) + 88))
      {
        case 1:
          v5 = *(_DWORD *)(a1 + 112) - 1;
          if (v5 >= 8)
            goto LABEL_32;
          v6 = off_2504027A8;
          goto LABEL_31;
        case 2:
          result = 0;
          switch(*(_DWORD *)(a1 + 112))
          {
            case 1:
              v7 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressZ<AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)1>>;
              v8 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)0>>;
              goto LABEL_36;
            case 2:
              v7 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressZ<AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)1>>;
              v8 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)0>>;
              goto LABEL_36;
            case 4:
              v7 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressZ<AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)1>>;
              v8 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)0>>;
              goto LABEL_36;
            case 8:
              v7 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressZ<AGXSConverterPassThru<true,2ul,8u,(TwiddleOrder)1>>;
              v8 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,8u,(TwiddleOrder)0>>;
LABEL_36:
              if (v2)
                result = v7;
              else
                result = v8;
              break;
            default:
              return result;
          }
          return result;
        case 4:
          v5 = *(_DWORD *)(a1 + 112) - 1;
          if (v5 >= 8)
            goto LABEL_32;
          v6 = off_2504027E8;
          goto LABEL_31;
        case 8:
          v5 = *(_DWORD *)(a1 + 112) - 1;
          if (v5 >= 8)
            goto LABEL_32;
          v6 = off_250402828;
          goto LABEL_31;
        case 0x10:
          v5 = *(_DWORD *)(a1 + 112) - 1;
          if (v5 >= 8)
          {
LABEL_32:
            result = 0;
          }
          else
          {
            v6 = off_250402868;
LABEL_31:
            result = v6[v5];
          }
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

unint64_t AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(uint64_t a1, unsigned int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  __IOSurface *v18;
  size_t HeightOfPlane;
  uint64_t HeightInCompressedTilesOfPlane;
  uint64_t v21;
  uint64_t PlaneSize;
  size_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(unsigned int *)(a1 + 236);
  if ((_DWORD)v4)
  {
    v5 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a1, 0);
    v6 = *(_QWORD *)(a1 + 380);
    v7 = (unsigned __int16)v6 & 0xFF00;
    if (v7 == 768)
    {
      v8 = *(_DWORD *)(a1 + 136);
    }
    else if ((v6 & 0x10000) != 0 || v7 == 1024)
    {
      if (v7 == 1024)
        v8 = 6 * *(_DWORD *)(a1 + 376);
      else
        v8 = *(_DWORD *)(a1 + 376);
    }
    else
    {
      v8 = 1;
    }
    v13 = v4 - 1;
    v10 = ((8
          * ((v4 - 1 + ((v5 + ((_DWORD)v4 << 8) - 1) & -(uint64_t)((_DWORD)v4 << 8)))
           / v4)
          + 2047) & 0xFFFFFFFFFFFFF800)
        * v8;
    if (*(_BYTE *)(a1 + 240))
    {
      v27 = 0;
      v28 = 0;
      AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::calcSparseParams(a1, (uint64_t)&v26, &v28, &v27);
      v14 = ((unint64_t)(-(int)v4 & (v13 + v28)) + v13) / v4;
      v15 = (4 << -(char)__clz(v14)) + 12;
      if ((v14 + 1) >= 2)
        v16 = v15;
      else
        v16 = 16;
      v10 = ((v10 + v14 + v27 + v13 + v16) & -(uint64_t)v4) + v28;
    }
    goto LABEL_21;
  }
  v9 = *(_QWORD *)(a1 + 380) & 0xFF00;
  if ((*(_QWORD *)(a1 + 380) & 0x10000) == 0)
  {
    if (v9 == 1024)
    {
      v10 = 6
          * AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(a1, a2);
      goto LABEL_21;
    }
    if (*(_QWORD *)(a1 + 380) == 3)
    {
      if (*(_QWORD *)(a1 + 168))
      {
        HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
        v21 = IOSurfaceGetWidthInCompressedTilesOfPlane() * HeightInCompressedTilesOfPlane;
        v10 = v21 * IOSurfaceGetBytesPerTileDataOfPlane();
        goto LABEL_21;
      }
      v23 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Op)0>(a1, a2);
      PlaneSize = InterchangeTiledMemory::getPlaneSize(v23, *(_DWORD *)(a1 + 132), a2, *(MTLPixelFormat *)(a1 + 32), *(_QWORD *)(a1 + 208));
    }
    else
    {
      if (!*(_QWORD *)(a1 + 380))
      {
        v18 = *(__IOSurface **)(a1 + 168);
        if (v18)
        {
          HeightOfPlane = IOSurfaceGetHeightOfPlane(v18, a2);
        }
        else if (a2 == 1 && *(_DWORD *)(*(_QWORD *)(a1 + 208) + 72) == 3)
        {
          HeightOfPlane = (unint64_t)*(unsigned int *)(a1 + 132) >> 1;
        }
        else
        {
          HeightOfPlane = *(unsigned int *)(a1 + 132);
        }
        v24 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Op)0>(a1, a2);
        v10 = v24 * HeightOfPlane;
        v25 = *(_QWORD *)(a1 + 208);
        if (*(_DWORD *)(v25 + 24) - 1 == a2)
          v10 = v10 - v24 + *(unsigned __int8 *)(v25 + a2 + 88) * (unint64_t)*(unsigned int *)(a1 + 128);
        goto LABEL_21;
      }
      if ((_DWORD)v9 != 256 && (_DWORD)v9 != 512)
      {
        if ((_DWORD)v9 == 768)
          v10 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(a1, a2)* *(unsigned int *)(a1 + 136);
        else
          v10 = 0;
        goto LABEL_21;
      }
      PlaneSize = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(a1, a2);
    }
    v10 = PlaneSize;
    goto LABEL_21;
  }
  v11 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(a1, a2);
  v12 = 6 * v11;
  if (v9 != 1024)
    v12 = v11;
  v10 = v12 * *(unsigned int *)(a1 + 376);
LABEL_21:
  if (*(_DWORD *)(*(_QWORD *)(a1 + 208) + 24) - 1 != a2)
    return (v10 + *(_QWORD *)(a1 + 320) - 1) & -*(_QWORD *)(a1 + 320);
  return v10;
}

BOOL AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::calcSparseParams(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  _BOOL8 result;

  v8 = *(_DWORD *)(a1 + 64);
  v9 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(a1, v8, 0);
  v10 = *(unsigned int *)(a1 + 236);
  v11 = (v9 + v10 - 1) & -v10;
  *a3 = v11;
  v12 = *(_QWORD *)(a1 + 380);
  v13 = (unsigned __int16)v12 & 0xFF00;
  if (v13 == 768)
  {
    v14 = *(_DWORD *)(a1 + 136);
  }
  else if ((v12 & 0x10000) != 0 || v13 == 1024)
  {
    if (v13 == 1024)
      v14 = 6 * *(_DWORD *)(a1 + 376);
    else
      v14 = *(_DWORD *)(a1 + 376);
  }
  else
  {
    v14 = 1;
  }
  *a3 = v11 * v14;
  v15 = *(_DWORD *)(a1 + 128);
  v16 = *(_DWORD *)(a1 + 132);
  v17 = *(_DWORD *)(a1 + 144);
  v18 = v15 >> v17;
  if (v15 >> v17 <= 1)
    v18 = 1;
  v19 = v16 >> v17;
  if (v19 <= 1)
    v19 = 1;
  result = agxCalcSparseInputs(v10, v15, v16, *(_DWORD *)(a1 + 216), *(_DWORD *)(a1 + 220), *(_DWORD *)(a1 + 112) * *(unsigned __int8 *)(*(_QWORD *)(a1 + 208) + 88), v8, 1u, 1u, 0, 0, *(_BYTE *)(a1 + 316), 0, 0, 0, v18, v19, a2);
  *a4 = 224;
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,4u,4u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  __int128 *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 3) >> 2;
        v26 = (a3 + 3) >> 2;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 2, a10 >> 2, (a12 + 3) >> 2, (a13 + 3) >> 2, a15, a17, a18);
          v18 = (__int128 *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,5u,4u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  __int128 *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v26 = (a3 + 4) / 5u;
        v25 = (a4 + 3) >> 2;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 5, a10 >> 2, (a12 + 4) / 5u, (a13 + 3) >> 2, a15, a17, a18);
          v18 = (__int128 *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,5u,5u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  __int128 *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 4) / 5u;
        v26 = (a3 + 4) / 5u;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 5, a10 / 5, (a12 + 4) / 5u, (a13 + 4) / 5u, a15, a17, a18);
          v18 = (__int128 *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,6u,5u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  __int128 *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 4) / 5u;
        v26 = (a3 + 5) / 6u;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 6, a10 / 5, (a12 + 5) / 6u, (a13 + 4) / 5u, a15, a17, a18);
          v18 = (__int128 *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,6u,6u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  __int128 *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 5) / 6u;
        v26 = (a3 + 5) / 6u;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 6, a10 / 6, (a12 + 5) / 6u, (a13 + 5) / 6u, a15, a17, a18);
          v18 = (__int128 *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,8u,4u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  __int128 *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 3) >> 2;
        v26 = (a3 + 7) >> 3;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 3, a10 >> 2, (a12 + 7) >> 3, (a13 + 3) >> 2, a15, a17, a18);
          v18 = (__int128 *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,8u,5u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  __int128 *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v26 = (a3 + 7) >> 3;
        v25 = (a4 + 4) / 5u;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 3, a10 / 5, (a12 + 7) >> 3, (a13 + 4) / 5u, a15, a17, a18);
          v18 = (__int128 *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,8u,6u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  __int128 *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v26 = (a3 + 7) >> 3;
        v25 = (a4 + 5) / 6u;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 3, a10 / 6, (a12 + 7) >> 3, (a13 + 5) / 6u, a15, a17, a18);
          v18 = (__int128 *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,8u,8u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  __int128 *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 7) >> 3;
        v26 = (a3 + 7) >> 3;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 3, a10 >> 3, (a12 + 7) >> 3, (a13 + 7) >> 3, a15, a17, a18);
          v18 = (__int128 *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,10u,5u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  __int128 *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 4) / 5u;
        v26 = (a3 + 9) / 0xAu;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xA, a10 / 5, (a12 + 9) / 0xAu, (a13 + 4) / 5u, a15, a17, a18);
          v18 = (__int128 *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,10u,6u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  __int128 *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 5) / 6u;
        v26 = (a3 + 9) / 0xAu;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xA, a10 / 6, (a12 + 9) / 0xAu, (a13 + 5) / 6u, a15, a17, a18);
          v18 = (__int128 *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,10u,8u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  __int128 *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v26 = (a3 + 9) / 0xAu;
        v25 = (a4 + 7) >> 3;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xA, a10 >> 3, (a12 + 9) / 0xAu, (a13 + 7) >> 3, a15, a17, a18);
          v18 = (__int128 *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,10u,10u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  __int128 *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 9) / 0xAu;
        v26 = (a3 + 9) / 0xAu;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xA, a10 / 0xA, (a12 + 9) / 0xAu, (a13 + 9) / 0xAu, a15, a17, a18);
          v18 = (__int128 *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,12u,10u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  __int128 *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 9) / 0xAu;
        v26 = (a3 + 11) / 0xCu;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xC, a10 / 0xA, (a12 + 11) / 0xCu, (a13 + 9) / 0xAu, a15, a17, a18);
          v18 = (__int128 *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,12u,12u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  __int128 *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 11) / 0xCu;
        v26 = (a3 + 11) / 0xCu;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xC, a10 / 0xC, (a12 + 11) / 0xCu, (a13 + 11) / 0xCu, a15, a17, a18);
          v18 = (__int128 *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,4u,4u,8ul,(TwiddleOrder)0>(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 3) >> 2;
        v26 = (a3 + 3) >> 2;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 2, a10 >> 2, (a12 + 3) >> 2, (a13 + 3) >> 2, a15, a17, a18);
          v18 += a16;
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)0>,(AGXTextureMemoryLayout)1>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  uint64_t v18;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unsigned int v34;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v20 = a17;
      v21 = a15;
      v22 = a13;
      v23 = a14;
      v24 = a12;
      v26 = a9;
      v34 = a7;
      v30 = result;
      if (a18)
      {
        if (a14)
        {
          v27 = *(_QWORD *)(a18 + 24);
          do
          {
            v28 = *(_DWORD *)(a18 + 20) * a11;
            *(_QWORD *)(a18 + 24) = v27 + v28;
            result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)0>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, a18);
            v26 = a9;
            v24 = a12;
            v22 = a13;
            v21 = a15;
            v20 = a17;
            a7 = v34;
            ++a11;
            v18 += a16;
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)0>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          v26 = a9;
          v24 = a12;
          v22 = a13;
          v21 = a15;
          v20 = a17;
          a7 = v34;
          ++a11;
          v18 += a16;
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)0>,(AGXTextureMemoryLayout)1>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  uint64_t v18;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unsigned int v34;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v20 = a17;
      v21 = a15;
      v22 = a13;
      v23 = a14;
      v24 = a12;
      v26 = a9;
      v34 = a7;
      v30 = result;
      if (a18)
      {
        if (a14)
        {
          v27 = *(_QWORD *)(a18 + 24);
          do
          {
            v28 = *(_DWORD *)(a18 + 20) * a11;
            *(_QWORD *)(a18 + 24) = v27 + v28;
            result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)0>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, a18);
            v26 = a9;
            v24 = a12;
            v22 = a13;
            v21 = a15;
            v20 = a17;
            a7 = v34;
            ++a11;
            v18 += a16;
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)0>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          v26 = a9;
          v24 = a12;
          v22 = a13;
          v21 = a15;
          v20 = a17;
          a7 = v34;
          ++a11;
          v18 += a16;
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)0>,(AGXTextureMemoryLayout)1>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  uint64_t v18;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unsigned int v34;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v20 = a17;
      v21 = a15;
      v22 = a13;
      v23 = a14;
      v24 = a12;
      v26 = a9;
      v34 = a7;
      v30 = result;
      if (a18)
      {
        if (a14)
        {
          v27 = *(_QWORD *)(a18 + 24);
          do
          {
            v28 = *(_DWORD *)(a18 + 20) * a11;
            *(_QWORD *)(a18 + 24) = v27 + v28;
            result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)0>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, a18);
            v26 = a9;
            v24 = a12;
            v22 = a13;
            v21 = a15;
            v20 = a17;
            a7 = v34;
            ++a11;
            v18 += a16;
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)0>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          v26 = a9;
          v24 = a12;
          v22 = a13;
          v21 = a15;
          v20 = a17;
          a7 = v34;
          ++a11;
          v18 += a16;
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)0>,(AGXTextureMemoryLayout)1>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  uint64_t v18;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unsigned int v34;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v20 = a17;
      v21 = a15;
      v22 = a13;
      v23 = a14;
      v24 = a12;
      v26 = a9;
      v34 = a7;
      v30 = result;
      if (a18)
      {
        if (a14)
        {
          v27 = *(_QWORD *)(a18 + 24);
          do
          {
            v28 = *(_DWORD *)(a18 + 20) * a11;
            *(_QWORD *)(a18 + 24) = v27 + v28;
            result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)0>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, a18);
            v26 = a9;
            v24 = a12;
            v22 = a13;
            v21 = a15;
            v20 = a17;
            a7 = v34;
            ++a11;
            v18 += a16;
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)0>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          v26 = a9;
          v24 = a12;
          v22 = a13;
          v21 = a15;
          v20 = a17;
          a7 = v34;
          ++a11;
          v18 += a16;
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>,(AGXTextureMemoryLayout)1>(uint64_t result, __int128 *a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  __int128 *v18;
  unsigned __int16 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unsigned int v34;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v20 = a17;
      v21 = a15;
      v22 = a13;
      v23 = a14;
      v24 = a12;
      v26 = a9;
      v34 = a7;
      v30 = result;
      if (a18)
      {
        if (a14)
        {
          v27 = *(_QWORD *)(a18 + 24);
          do
          {
            v28 = *(_DWORD *)(a18 + 20) * a11;
            *(_QWORD *)(a18 + 24) = v27 + v28;
            result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, (unsigned int *)a18);
            v26 = a9;
            v24 = a12;
            v22 = a13;
            v21 = a15;
            v20 = a17;
            a7 = v34;
            ++a11;
            v18 = (__int128 *)((char *)v18 + a16);
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          v26 = a9;
          v24 = a12;
          v22 = a13;
          v21 = a15;
          v20 = a17;
          a7 = v34;
          ++a11;
          v18 = (__int128 *)((char *)v18 + a16);
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<true,4u,2u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  __int128 *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 1) >> 1;
        v26 = (a3 + 3) >> 2;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 2, a10 >> 1, (a12 + 3) >> 2, (a13 + 1) >> 1, a15, a17, a18);
          v18 = (__int128 *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(uint64_t result, __int128 *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  __int128 *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  BOOL v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  __int128 *v135;
  uint64_t v136;
  int v137;
  __int128 *v138;
  uint64_t v139;
  __int128 v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  BOOL v144;
  char v145;
  int v146;
  uint64_t v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  BOOL v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  BOOL v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  BOOL v175;
  BOOL v176;
  int v177;
  int v178;
  int v179;
  int v180;
  BOOL v181;
  BOOL v182;
  int v183;
  int v184;
  int v185;
  unint64_t v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  int v191;
  int v192;
  uint64_t v193;
  int v194;
  unsigned int v195;
  BOOL v196;
  BOOL v197;
  unsigned int v198;
  int v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  int v203;
  unsigned int v204;
  BOOL v205;
  BOOL v206;
  unsigned int v207;
  int v208;
  uint64_t v209;
  int v210;
  BOOL v211;
  unsigned int v212;
  BOOL v213;
  unsigned int v214;
  int v215;
  int v216;
  unsigned int v217;
  uint64_t v218;
  int v219;
  BOOL v220;
  unsigned int v221;
  BOOL v222;
  int v223;
  __int128 *v224;
  int v225;
  __int128 *v226;
  uint64_t v227;
  __int128 v228;
  int i;
  int v230;
  __int128 *v231;
  uint64_t v232;
  __int128 v233;
  int v234;
  int v235;
  int v236;
  unsigned int v237;
  unsigned int v238;
  int v239;
  unsigned int v240;
  char v241;
  int v242;
  int v243;
  char v244;
  __int128 *v246;
  __int128 *v247;
  unsigned int v250;
  int v251;
  unsigned int v252;
  int v253;
  int v254;
  uint64_t v255;
  int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  char v260;
  uint64_t v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  BOOL v265;
  unsigned int v266;
  BOOL v267;
  unsigned int v268;
  int v269;
  uint64_t v270;
  int v271;
  int v272;
  BOOL v273;
  unsigned int v274;
  unsigned int v275;
  int v276;
  int v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  int v281;
  int v282;
  char v283[16];
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned __int8 v291;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v230 = a9;
        v231 = v13;
        v232 = v47;
        do
        {
          v233 = *v231++;
          *(_OWORD *)(result + 16 * (v232 + v56)) = v233;
          v232 = (v232 - v31) & v31;
          --v230;
        }
        while (v230);
        v56 = (v56 - v40) & v40;
        v13 = (__int128 *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v261 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v264 = a8 >> v66;
    v266 = 1 << v66;
    v76 = v69 - 1;
    v262 = a10 + a8;
    v258 = (v69 - 1 + a10 + a8) >> v66;
    v260 = v66;
    if (a8 >> v66 >= v258)
      return result;
    v77 = (1 << v67) - 1;
    v280 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v266;
    if (v266 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v274 = a7 >> v67;
    v278 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v278)
      return result;
    v257 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v276 = v77 & v280;
    v253 = v76 & v262;
    v255 = v76 & a8;
    v86 = v264;
LABEL_92:
    v87 = v86 << v260;
    v88 = v86 - v264;
    v272 = v86 * v257;
    v268 = v86 + 1;
    v89 = v262 >= (v86 + 1) << v260;
    v90 = v266;
    if (!v89)
      v90 = v253;
    v91 = v266 - v255;
    if (!v89)
      v91 = v19;
    v92 = v88 << v260;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v255;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v270 = (v93 + v92 - v255) * a11;
    v95 = v274;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      if (v280 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      else
        v98 = a9;
      v99 = v276;
      if (v280 >= v97 << v67)
        v99 = 1 << v67;
      if (v96 >= v15)
        v100 = 0;
      else
        v100 = v85;
      if (v96 < v15)
        v99 = v98;
      if (v84 | v80)
        break;
      v118 = 0;
      v102 = 0;
      v111 = 0;
      v127 = 0;
      if (v99)
        goto LABEL_153;
LABEL_103:
      v95 = v97;
      if (v97 == v278)
      {
        v86 = v268;
        v14 = a8;
        v19 = a10;
        if (v268 == v258)
          return result;
        goto LABEL_92;
      }
    }
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v104 = v83;
    v105 = result;
    v106 = v84;
    v107 = v80;
    do
    {
      v108 = v104;
      if (v108)
        --v106;
      else
        v106 = 0;
      v109 = v101 + v108;
      if (v105)
        --v107;
      else
        v107 = 0;
      if (v105)
        v102 |= (unint64_t)(v103 & ~(-1 << v80)) << v109++;
      v103 *= 2;
      v101 = v109 - 1;
      v105 = v107 != 0;
      v104 = v106 != 0;
    }
    while (v107 | v106);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v83;
    v114 = result;
    v115 = v84;
    v116 = v80;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
        v111 |= (unint64_t)(v112 & ~(-1 << v84)) << v110++;
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v110, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v117 = 0;
    v118 = 0;
    v119 = 1;
    v120 = v83;
    v121 = result;
    v122 = v84;
    v123 = v80;
    do
    {
      v124 = v120;
      if (v124)
        --v122;
      else
        v122 = 0;
      v125 = v117 + v124;
      --v123;
      if (v121)
        v118 |= (unint64_t)(v119 & v100) << v125++;
      else
        v123 = 0;
      v119 *= 2;
      v117 = v125 - 1;
      v121 = v123 != 0;
      v120 = v122 != 0;
    }
    while (v123 | v122);
    v126 = 0;
    v127 = 0;
    v128 = 1;
    v129 = v83;
    v130 = result;
    v131 = v84;
    v132 = v80;
    do
    {
      --v131;
      if (v129)
      {
        v127 |= (unint64_t)(v128 & v93) << v126;
        v133 = v126 + 1;
      }
      else
      {
        v131 = 0;
        v133 = v126;
      }
      if (v130)
        --v132;
      else
        v132 = 0;
      v128 *= 2;
      v126 = (__PAIR64__(v133, v130) - 1) >> 32;
      v130 = v132 != 0;
      v129 = v131 != 0;
    }
    while (v132 | v131);
    v15 = a7;
    if (!v99)
      goto LABEL_103;
LABEL_153:
    if (v94)
    {
      v134 = 0;
      v135 = (__int128 *)((char *)&a2[v100 + ((v95 - v274) << v67) - v85] + v270);
      v136 = (v95 + v272) * a12[3] * *((unsigned __int8 *)a12 + 9) + v261;
      do
      {
        v137 = v99;
        v138 = v135;
        v139 = v118;
        do
        {
          v140 = *v138++;
          *(_OWORD *)(v136 + 16 * (v139 + v127)) = v140;
          v139 = (v139 - v102) & v102;
          --v137;
        }
        while (v137);
        v127 = (v127 - v111) & v111;
        v135 = (__int128 *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v283);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v247 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v141 = a6 >> v20;
    v142 = 1 << v21;
    v143 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v143 = 0;
    v144 = v142 >= a5;
    if (v142 < a5)
      v145 = v21 + v20 + v143;
    else
      v145 = *((_BYTE *)a12 + 12);
    if (v144)
      LOBYTE(v146) = *((_BYTE *)a12 + 13);
    else
      v146 = -v143;
    if (!v141)
      v21 = v145;
    v241 = v21;
    if (v141)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v146;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v241 = v22;
    v23 = v21 + v20 - v22;
  }
  v147 = v261;
  v149 = a8;
  v148 = a10;
  v240 = v289;
  if (v289)
  {
    v150 = 1 << v23;
    v239 = 1 << v241;
    if (1 << v241 >= a5)
      v151 = a5;
    else
      v151 = 1 << v241;
    v152 = 32 - __clz(v151 - 1);
    v153 = v151 > 1;
    if (v151 <= 1)
      v154 = 0;
    else
      v154 = v152;
    if (v150 >= a6)
      v155 = a6;
    else
      v155 = 1 << v23;
    v156 = 32 - __clz(v155 - 1);
    v157 = v290;
    if (v155 <= 1)
      v156 = 0;
    v273 = v155 > 1;
    v275 = v156;
    v271 = v287;
    v267 = v287 != 0;
    v269 = v288;
    v265 = v288 != 0;
    if (v290)
    {
      v158 = 0;
      v159 = 0;
      v238 = v15 >> v241;
      v259 = a8 >> v23;
      v281 = v291;
      v282 = v286;
      v277 = v288 | v287;
      v237 = a9 + v15;
      v236 = (v239 - 1) & (a9 + v15);
      v235 = v284;
      v279 = v285;
      v234 = (v239 - 1) & v15;
      v254 = (v150 - 1) & a8;
      v256 = (v150 - 1) & (a10 + a8);
      v252 = v150 - v254;
      v160 = ~(-1 << v154);
      v250 = v290;
      v251 = v156 | v154;
      v161 = ~(-1 << v156);
      v263 = v154;
      v243 = 1 << v23;
      v244 = v23;
      do
      {
        v242 = v159;
        v162 = 0;
        v163 = 0;
        v164 = a9;
        if (v237 >= (v158 + v238 + 1) << v241)
          v164 = v239 - v234;
        v165 = 1 << v241;
        if (v237 < (v158 + v238 + 1) << v241)
          v165 = v236;
        v166 = (v158 + v238) << v241 >= v15;
        v167 = v235 + v158;
        v168 = v158 << v241;
        if (v166)
          v169 = v165;
        else
          v169 = v164;
        if (v166)
          v170 = 0;
        else
          v170 = v234;
        v246 = &v247[v170 + v168];
        do
        {
          v171 = v279 + v162;
          if (v281)
          {
            v172 = v277;
            if (v277)
            {
              v173 = 0;
              v172 = 0;
              v174 = 1;
              v175 = v265;
              v176 = v267;
              v178 = v269;
              v177 = v271;
              do
              {
                --v177;
                if (v176)
                  v172 |= (v174 & v167) << v173;
                else
                  v177 = 0;
                if (v176)
                  ++v173;
                --v178;
                if (v175)
                  v172 |= (v174 & v171) << v173;
                else
                  v178 = 0;
                if (v175)
                  ++v173;
                v174 *= 2;
                --v173;
                v175 = v178 != 0;
                v176 = v177 != 0;
              }
              while (v178 | v177);
            }
          }
          else
          {
            v172 = v277;
            if (v277)
            {
              v179 = 0;
              v172 = 0;
              v180 = 1;
              v182 = v265;
              v181 = v267;
              v183 = v269;
              v184 = v271;
              do
              {
                --v183;
                if (v182)
                  v172 |= (v180 & v171) << v179;
                else
                  v183 = 0;
                if (v182)
                  ++v179;
                --v184;
                if (v181)
                  v172 |= (v180 & v167) << v179;
                else
                  v184 = 0;
                if (v181)
                  ++v179;
                v180 *= 2;
                --v179;
                v181 = v184 != 0;
                v182 = v183 != 0;
              }
              while (v184 | v183);
            }
          }
          v185 = *(_DWORD *)(v147 + 4 * ((v172 + v282) | ((v172 + v282) >> 8 << 9)));
          if (v185 < 0)
          {
            v186 = v147 - *((_QWORD *)a13 + 3) + ((unint64_t)(v185 & 0x3FFFFFF) << 14);
            result = *a13;
            v187 = a13[2];
            if (result > v187)
            {
              result = get_level_offset_within_tail(result, v187, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v154 = v263;
              v150 = v243;
              v23 = v244;
              v18 = a11;
              v149 = a8;
              v148 = a10;
              v147 = v261;
              v186 += result;
            }
            v188 = (v162 + v259) << v23;
            v189 = v252;
            if (a10 + a8 >= (v162 + v259 + 1) << v23)
            {
              v190 = v150;
            }
            else
            {
              v189 = v148;
              v190 = v256;
            }
            if (v188 >= v149)
              v191 = 0;
            else
              v191 = v254;
            if (v188 >= v149)
              v189 = v190;
            if (!v251)
            {
              v209 = 0;
              v193 = 0;
              v202 = 0;
              v218 = 0;
              v157 = v250;
              if (!v169)
                goto LABEL_198;
LABEL_271:
              if (v189)
              {
                v223 = 0;
                v224 = (__int128 *)((char *)v246 + (v191 + (v162 << v23)) * v18);
                do
                {
                  v225 = v169;
                  v226 = v224;
                  v227 = v209;
                  do
                  {
                    result = v227 + v218;
                    v228 = *v226++;
                    *(_OWORD *)(v186 + 16 * (v227 + v218)) = v228;
                    v227 = (v227 - v193) & v193;
                    --v225;
                  }
                  while (v225);
                  v218 = (v218 - v202) & v202;
                  v224 = (__int128 *)((char *)v224 + v18);
                  ++v223;
                }
                while (v223 != v189);
              }
              goto LABEL_198;
            }
            v192 = 0;
            v193 = 0;
            v194 = 1;
            v196 = v273;
            v195 = v275;
            v197 = v153;
            v198 = v154;
            do
            {
              --v195;
              v199 = v196;
              if (!v199)
                v195 = 0;
              v200 = v192 + v199;
              --v198;
              if (v197)
                v193 |= (unint64_t)(v194 & v160) << v200++;
              else
                v198 = 0;
              v194 *= 2;
              v192 = v200 - 1;
              v197 = v198 != 0;
              v196 = v195 != 0;
            }
            while (v198 | v195);
            v201 = 0;
            v202 = 0;
            v203 = 1;
            v205 = v273;
            v204 = v275;
            v206 = v153;
            v207 = v154;
            do
            {
              --v204;
              if (v205)
                v202 |= (unint64_t)(v203 & v161) << v201++;
              else
                v204 = 0;
              --v207;
              if (!v206)
                v207 = 0;
              v203 *= 2;
              v201 = (__PAIR64__(v201, v206) - 1) >> 32;
              v206 = v207 != 0;
              v205 = v204 != 0;
            }
            while (v207 | v204);
            v208 = 0;
            v209 = 0;
            v210 = 1;
            v211 = v273;
            v212 = v275;
            v213 = v153;
            v214 = v154;
            do
            {
              --v212;
              v215 = v211;
              if (!v215)
                v212 = 0;
              v216 = v208 + v215;
              --v214;
              if (v213)
                v209 |= (unint64_t)(v210 & v170) << v216++;
              else
                v214 = 0;
              v210 *= 2;
              v208 = v216 - 1;
              v213 = v214 != 0;
              v211 = v212 != 0;
            }
            while (v214 | v212);
            v217 = 0;
            v218 = 0;
            v219 = 1;
            v220 = v273;
            v221 = v275;
            v222 = v153;
            LODWORD(result) = v154;
            do
            {
              --v221;
              if (v220)
                v218 |= (unint64_t)(v219 & v191) << v217++;
              else
                v221 = 0;
              LODWORD(result) = result - 1;
              if (v222)
                result = result;
              else
                result = 0;
              v219 *= 2;
              v217 = (__PAIR64__(v217, v222) - 1) >> 32;
              v222 = (_DWORD)result != 0;
              v220 = v221 != 0;
            }
            while (result | v221);
            v154 = v263;
            v157 = v250;
            if (v169)
              goto LABEL_271;
          }
LABEL_198:
          v162 = (unsigned __int16)++v163;
        }
        while (v157 > (unsigned __int16)v163);
        v159 = v242 + 1;
        v158 = (unsigned __int16)(v242 + 1);
        v15 = a7;
      }
      while (v240 > v158);
    }
  }
  return result;
}

uint64_t get_level_offset_within_tail(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, char a8)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint32x2_t v16;
  uint32x2_t v17;
  uint64x2_t v18;
  int32x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int8x16_t v22;
  unsigned int v23;
  int64x2_t v24;
  uint32x2_t v25;
  int32x2_t v26;
  int32x2_t v27;
  uint64x2_t v28;
  uint64x2_t v29;
  char v30;
  char v31;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;

  v8 = (a5 - 1 + a3) / a5;
  v9 = (a6 - 1 + a4) / a6;
  v10 = 32 - __clz(~(-1 << -__clz(v8 - 1)));
  if (v8 >= 2)
    v11 = v10;
  else
    v11 = 0;
  if (v9 < 2)
  {
    v12 = 0;
    v13 = a1 - a2;
    if (a1 > a2)
      goto LABEL_6;
  }
  else
  {
    v12 = 32 - __clz(~(-1 << -(char)__clz(v9 - 1)));
    v13 = a1 - a2;
    if (a1 > a2)
    {
LABEL_6:
      if ((a8 & 1) != 0)
      {
        if (v13 >= 4)
        {
          v15 = v13 & 0xFFFFFFFC;
          v16 = (uint32x2_t)vdup_n_s32(v11);
          v17 = (uint32x2_t)vdup_n_s32(v12);
          v18 = (uint64x2_t)vdupq_n_s64(a7);
          v19 = vadd_s32(vdup_n_s32(a2), (int32x2_t)0x100000000);
          v20 = 0uLL;
          v21 = vdupq_n_s64(0x7FuLL);
          v22 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFF80);
          v23 = v13 & 0xFFFFFFFC;
          v24 = 0uLL;
          do
          {
            v25 = (uint32x2_t)vadd_s32(v19, (int32x2_t)0x200000002);
            v26 = vadd_s32((int32x2_t)vqsub_u32(v17, (uint32x2_t)v19), (int32x2_t)vqsub_u32(v16, (uint32x2_t)v19));
            v27 = vadd_s32((int32x2_t)vqsub_u32(v17, v25), (int32x2_t)vqsub_u32(v16, v25));
            v28.i64[0] = v26.u32[0];
            v28.i64[1] = v26.u32[1];
            v29 = v28;
            v28.i64[0] = v27.u32[0];
            v28.i64[1] = v27.u32[1];
            v20 = vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64((int64x2_t)vshlq_u64(v18, v29), v21), v22), v20);
            v24 = vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64((int64x2_t)vshlq_u64(v18, v28), v21), v22), v24);
            v19 = vadd_s32(v19, (int32x2_t)0x400000004);
            v23 -= 4;
          }
          while (v23);
          v14 = vaddvq_s64(vaddq_s64(v24, v20));
          if (v13 == v15)
            return v14;
          a2 += v15;
        }
        else
        {
          v14 = 0;
        }
        do
        {
          v30 = v11 - a2;
          if (v11 < a2)
            v30 = 0;
          v31 = v12 - a2;
          if (v12 < a2)
            v31 = 0;
          v14 += (((unint64_t)a7 << (v31 + v30)) + 127) & 0xFFFFFFFFFFFFFF80;
          ++a2;
        }
        while (a1 != a2);
        return v14;
      }
      v14 = 0;
      while (1)
      {
        v34 = a3 >> a2;
        if (!(a3 >> a2))
          goto LABEL_25;
        v35 = (a5 - 1 + v34) / a5;
        if (v35 >= 2)
          break;
        LOBYTE(v34) = 0;
        v33 = a4 >> a2;
        if (a4 >> a2)
        {
LABEL_26:
          v36 = (a6 - 1 + v33) / a6;
          if (v36 < 2)
            LOBYTE(v33) = 0;
          else
            v33 = 32 - __clz(~(-1 << -(char)__clz(v36 - 1)));
        }
LABEL_21:
        v14 += (((unint64_t)a7 << (v33 + v34)) + 127) & 0xFFFFFFFFFFFFFF80;
        if (a1 == ++a2)
          return v14;
      }
      v34 = 32 - __clz(~(-1 << -(char)__clz(v35 - 1)));
LABEL_25:
      v33 = a4 >> a2;
      if (a4 >> a2)
        goto LABEL_26;
      goto LABEL_21;
    }
  }
  return 0;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, uint64_t a11, unsigned __int16 *a12, uint64_t a13)
{
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  char v20;
  unsigned int v21;
  char v22;
  int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  BOOL v29;
  unsigned int v30;
  BOOL v31;
  char v32;
  char v33;
  int v34;
  char v35;
  unsigned int v36;
  BOOL v37;
  BOOL v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  BOOL v81;
  char v82;
  int v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  BOOL v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  BOOL v111;
  BOOL v112;
  int v113;
  int v114;
  int v115;
  int v116;
  BOOL v117;
  BOOL v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  char v130;
  int v131;
  int v132;
  unsigned int v134;
  unsigned int v135;
  char v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  int v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v155;
  BOOL v156;
  BOOL v157;
  int v158;
  int v159;
  uint64_t v160;
  char v161[16];
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned __int8 v169;

  if (result && a2)
  {
    v16 = a11;
    v17 = a10;
    if (a12)
    {
      v18 = a7;
      v160 = result;
      if (*((_BYTE *)a12 + 20))
      {
        result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), *(_DWORD *)(a13 + 8), *(_DWORD *)(a13 + 12), *(_DWORD *)(a13 + 4), *(_DWORD *)a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v161);
        v19 = *((_BYTE *)a12 + 13);
        v20 = *((_BYTE *)a12 + 12);
        v129 = a2;
        if (1 << v19 >= a6 || a5 >> v20)
        {
          v78 = a6 >> v19;
          v79 = 1 << v20;
          v80 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
          if (a6 < 2)
            v80 = 0;
          v81 = v79 >= a5;
          if (v79 < a5)
            v82 = v20 + v19 + v80;
          else
            v82 = *((_BYTE *)a12 + 12);
          if (v81)
            LOBYTE(v83) = *((_BYTE *)a12 + 13);
          else
            v83 = -v80;
          if (!v78)
            v20 = v82;
          v130 = v20;
          if (v78)
            v22 = *((_BYTE *)a12 + 13);
          else
            v22 = v83;
        }
        else
        {
          v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
          if (a5 < 2)
            LOBYTE(v21) = 0;
          v130 = v21;
          v22 = v20 + v19 - v21;
        }
        v84 = v160;
        v128 = v167;
        if (v167)
        {
          v85 = 1 << v130;
          v86 = 1 << v22;
          v87 = v168;
          v159 = v165;
          v157 = v165 != 0;
          v158 = v166;
          v156 = v166 != 0;
          v127 = 1 << v130;
          if (1 << v130 >= a5)
            v85 = a5;
          v144 = v85;
          v146 = 1 << v22;
          if (v86 >= a6)
            v86 = a6;
          v142 = v86;
          if (v168)
          {
            v88 = 0;
            v89 = 0;
            v140 = a8 >> v22;
            v90 = v163;
            v91 = v164;
            v92 = v169;
            v125 = v162;
            v126 = a7 >> v130;
            v93 = v166 | v165;
            v124 = a9 + a7;
            v138 = a10 + a8;
            do
            {
              v132 = v89;
              v94 = 0;
              v95 = 0;
              v96 = a9;
              if (v124 >= (v88 + v126 + 1) << v130)
                v96 = v127 - ((v127 - 1) & a7);
              v97 = 1 << v130;
              if (v124 < (v88 + v126 + 1) << v130)
                v97 = (v127 - 1) & (a9 + a7);
              v98 = (v88 + v126) << v130 >= v18;
              v99 = v125 + v88;
              v100 = v88 << v130;
              if (v98)
                v101 = v97;
              else
                v101 = v96;
              v102 = (v127 - 1) & a7;
              if (v98)
                v102 = 0;
              v151 = v102;
              v153 = v101;
              v149 = v129 + 8 * (v102 + v100);
              do
              {
                v107 = v90 + v94;
                if (v92)
                {
                  if (!v93)
                    goto LABEL_155;
                  v108 = 0;
                  v109 = 0;
                  v110 = 1;
                  v111 = v156;
                  v112 = v157;
                  v113 = v159;
                  v114 = v158;
                  do
                  {
                    --v113;
                    if (v112)
                      v109 |= (v110 & v99) << v108;
                    else
                      v113 = 0;
                    if (v112)
                      ++v108;
                    --v114;
                    if (v111)
                      v109 |= (v110 & v107) << v108;
                    else
                      v114 = 0;
                    if (v111)
                      ++v108;
                    v110 *= 2;
                    --v108;
                    v111 = v114 != 0;
                    v112 = v113 != 0;
                  }
                  while (v114 | v113);
                }
                else
                {
                  if (!v93)
                  {
LABEL_155:
                    v109 = 0;
                    goto LABEL_156;
                  }
                  v115 = 0;
                  v109 = 0;
                  v116 = 1;
                  v118 = v156;
                  v117 = v157;
                  v119 = v158;
                  v120 = v159;
                  do
                  {
                    --v119;
                    if (v118)
                      v109 |= (v116 & v107) << v115;
                    else
                      v119 = 0;
                    if (v118)
                      ++v115;
                    --v120;
                    if (v117)
                      v109 |= (v116 & v99) << v115;
                    else
                      v120 = 0;
                    if (v117)
                      ++v115;
                    v116 *= 2;
                    --v115;
                    v117 = v120 != 0;
                    v118 = v119 != 0;
                  }
                  while (v120 | v119);
                }
LABEL_156:
                v121 = *(_DWORD *)(v84 + 4 * ((v109 + v91) | ((v109 + v91) >> 8 << 9)));
                if (v121 < 0)
                {
                  v122 = v84 - *(_QWORD *)(a13 + 24) + ((unint64_t)(v121 & 0x3FFFFFF) << 14);
                  v123 = *(_DWORD *)(a13 + 8);
                  if (*(_DWORD *)a13 > v123)
                    v122 += get_level_offset_within_tail(*(_DWORD *)a13, v123, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                  v103 = a10;
                  if (v138 >= (v94 + v140 + 1) << v22)
                    v103 = v146 - ((v146 - 1) & a8);
                  v104 = 1 << v22;
                  if (v138 < (v94 + v140 + 1) << v22)
                    v104 = (v146 - 1) & (a10 + a8);
                  v105 = (v146 - 1) & a8;
                  if ((v94 + v140) << v22 < a8)
                  {
                    v106 = v103;
                  }
                  else
                  {
                    v105 = 0;
                    v106 = v104;
                  }
                  result = agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)0>>(v122, v149 + (v105 + (v94 << v22)) * a11, v144, v142, v153, v106, a11, v151, v105);
                  v84 = v160;
                }
                v94 = (unsigned __int16)++v95;
              }
              while (v87 > (unsigned __int16)v95);
              v18 = a7;
              v89 = v132 + 1;
              v88 = (unsigned __int16)(v132 + 1);
            }
            while (v128 > v88);
          }
        }
      }
      else
      {
        LOBYTE(v23) = *((_BYTE *)a12 + 13);
        v24 = *((_BYTE *)a12 + 12);
        v25 = 1 << v23;
        v26 = a5 >> v24;
        v27 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
        if (a6 < 2)
          v27 = 0;
        v28 = v24 + v23;
        if (a6 >> v23)
          v29 = 1;
        else
          v29 = 1 << v24 >= a5;
        if (!v29)
        {
          v24 += v23 + v27;
          v23 = -v27;
        }
        v30 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
        if (a5 < 2)
          LOBYTE(v30) = 0;
        v31 = v25 < a6 && v26 == 0;
        if (v31)
          v32 = v30;
        else
          v32 = v24;
        if (v31)
          v33 = v28 - v30;
        else
          v33 = v23;
        v34 = 1 << v33;
        v35 = *((_BYTE *)a12 + 15);
        v36 = 1 << v35;
        if (v35)
          v37 = v36 > a3;
        else
          v37 = 1;
        v38 = v37 || v36 > a4;
        v39 = (~(-1 << v35) + a3) & (-1 << v35);
        if (v38)
          v40 = a3;
        else
          v40 = v39;
        v139 = a8 >> v33;
        v141 = 1 << v33;
        v41 = v34 - 1;
        v136 = v33;
        v137 = a10 + a8;
        v135 = (v34 - 1 + a10 + a8) >> v33;
        if (a8 >> v33 < v135)
        {
          v42 = 1 << v32;
          v43 = a7 >> v32;
          v44 = a9 + a7;
          v45 = (1 << v32) - 1;
          v46 = (v45 + a9 + a7) >> v32;
          if (1 << v32 >= a5)
            v47 = a5;
          else
            v47 = 1 << v32;
          v48 = 1 << v33;
          if (v141 >= a6)
            v48 = a6;
          v29 = v46 >= v43;
          v49 = v46 - v43;
          if (v49 != 0 && v29)
          {
            v50 = v45 & a7;
            v51 = v45 & v44;
            v52 = v42 - v50;
            v131 = v41 & v137;
            v145 = v41 & a8;
            v53 = v139;
            v134 = (v40 + ~(-1 << v32)) >> v32;
            v54 = v43 + v134 * v139;
            v155 = v47;
            v150 = v49;
            v152 = v48;
            v148 = v45 & v44;
            v147 = v42 - v50;
            do
            {
              v55 = v53 << v136;
              v56 = v53 + 1;
              if (v137 >= (v53 + 1) << v136)
                v57 = v141;
              else
                v57 = v131;
              if (v137 >= v56 << v136)
                v58 = v141 - v145;
              else
                v58 = v17;
              v59 = (v53 - v139) << v136;
              v143 = v56;
              if (v55 >= a8)
              {
                v69 = 0;
                v70 = (v59 - v145) * v16;
                do
                {
                  v71 = (v43 + v69) << v32;
                  v72 = (v43 + v69 + 1) << v32;
                  v73 = v44 >= v72;
                  if (v44 >= v72)
                    v74 = v52;
                  else
                    v74 = a9;
                  if (v73)
                    v75 = v42;
                  else
                    v75 = v51;
                  if (v71 >= a7)
                    v76 = 0;
                  else
                    v76 = v50;
                  if (v71 >= a7)
                    v77 = v75;
                  else
                    v77 = v74;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)0>>((v54 + v69) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, a2 + 8 * ((v76 + (v69 << v32)) - v50) + v70, v155, v152, v77, v57, v16, v76, 0);
                  v52 = v147;
                  v51 = v148;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v160;
                  ++v69;
                }
                while (v150 != v69);
              }
              else
              {
                v60 = 0;
                v61 = ((v145 + v59) - v145) * v16;
                do
                {
                  v62 = (v43 + v60) << v32;
                  v63 = (v43 + v60 + 1) << v32;
                  v64 = v44 >= v63;
                  if (v44 >= v63)
                    v65 = v52;
                  else
                    v65 = a9;
                  if (v64)
                    v66 = v42;
                  else
                    v66 = v51;
                  if (v62 >= a7)
                    v67 = 0;
                  else
                    v67 = v50;
                  if (v62 >= a7)
                    v68 = v66;
                  else
                    v68 = v65;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)0>>((v54 + v60) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, a2 + 8 * ((v67 + (v60 << v32)) - v50) + v61, v155, v152, v68, v58, v16, v67, v145);
                  v52 = v147;
                  v51 = v148;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v160;
                  ++v60;
                }
                while (v150 != v60);
              }
              v54 += v134;
              v53 = v143;
              v17 = a10;
            }
            while (v143 != v135);
          }
        }
      }
    }
    else
    {
      return agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)0>>(result, a2, a5, a6, a9, a10, a11, a7, a8);
    }
  }
  return result;
}

uint64_t agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, int, int);
  uint64_t (*v18)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, unsigned int, unsigned int);
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, unsigned int, unsigned int);
  int v37;
  uint64_t (*v38)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, int, int);
  unsigned int v39;
  unsigned int v40;

  v11 = a6;
  v12 = a5;
  v14 = 32 - __clz(a3 - 1);
  v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2)
    v16 = v15;
  else
    v16 = 0;
  if (((a2 | a7) & 7) != 0)
    v17 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)0>,false,false>;
  else
    v17 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)0>,false,true>;
  if (((a2 | a7) & 7) != 0)
    v18 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)0>,true,false>;
  else
    v18 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)0>,true,true>;
  v19 = a3 >= 2;
  if (a3 >= 2)
    v20 = v14;
  else
    v20 = 0;
  if (!v19 || v16 <= 1)
  {
    HIDWORD(v35) = a5;
    LODWORD(v35) = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, unsigned int))v17)(result, a2, v20, v16, a8, a9, a7, 0, v35, a6);
  }
  v21 = result;
  v22 = 4 - (a9 & 3);
  if ((a9 & 3) == 0)
    v22 = 0;
  v23 = 4 - (a8 & 3);
  if ((a8 & 3) == 0)
    v23 = 0;
  v24 = ((_BYTE)a8 + (_BYTE)a5) & 3;
  v25 = ((_BYTE)a9 + (_BYTE)a6) & 3;
  v26 = v23 + v24;
  if (v23 + v24 > a5)
    v23 = a5;
  v39 = v20;
  v40 = v23;
  if (v26 > a5)
    v24 = 0;
  if (v22 + v25 <= a6)
    v27 = v22;
  else
    v27 = a6;
  if (v22 + v25 <= a6)
    v28 = ((_BYTE)a9 + (_BYTE)a6) & 3;
  else
    v28 = 0;
  v36 = v18;
  v38 = v17;
  v37 = v24;
  if (v27)
  {
    HIDWORD(v33) = a5;
    LODWORD(v33) = 0;
    result = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, unsigned int))v17)(result, a2, v20, v16, a8, a9, a7, 0, v33, v27);
    v11 -= v27;
  }
  if (v28)
  {
    v11 -= v28;
    *(_QWORD *)((char *)&v34 + 4) = __PAIR64__(v28, v12);
    LODWORD(v34) = v11 + v27;
    v29 = v21;
    v30 = v21;
    v31 = v39;
    result = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _DWORD))v38)(v30, a2, v39, v16, a8, a9, a7, 0, v34, DWORD2(v34));
    v32 = v40;
    if (!v11)
      return result;
  }
  else
  {
    v29 = v21;
    v31 = v39;
    v32 = v40;
    if (!v11)
      return result;
  }
  if (v32)
  {
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, unsigned int))v38)(v29, a2, v31, v16, a8, a9, a7, 0, __PAIR64__(v32, v27), v11);
    v12 -= v40;
  }
  if (v37)
  {
    v12 -= v37;
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, unsigned int))v38)(v29, a2, v31, v16, a8, a9, a7, v12 + v40, __PAIR64__(v37, v27), v11);
  }
  if (v12)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))v36)(v29, a2, v31, v16, a8, a9, a7);
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)0>,false,true>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3)) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4)) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = (uint64_t *)(v46 + 8 * a8);
      v48 = a10;
      v49 = v30;
      do
      {
        v50 = *v47++;
        *(_QWORD *)(result + 8 * (v49 + v40)) = v50;
        v49 = (v49 - v12) & v12;
        --v48;
      }
      while (v48);
      v40 = (v40 - v23) & v23;
      v46 += a7;
      ++v45;
    }
    while (v45 != a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)0>,false,false>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3)) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4)) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = (uint64_t *)(v46 + 8 * a8);
      v48 = a10;
      v49 = v30;
      do
      {
        v50 = *v47++;
        *(_QWORD *)(result + 8 * (v49 + v40)) = v50;
        v49 = (v49 - v12) & v12;
        --v48;
      }
      while (v48);
      v40 = (v40 - v23) & v23;
      v46 += a7;
      ++v45;
    }
    while (v45 != a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)0>,true,true>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int64x2_t *v48;
  uint64_t v49;
  int64x2_t *v50;
  int64x2_t v51;
  int64x2_t *v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t *v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3) & 0x7FFFFFFCu) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4) & 0x7FFFFFFCu) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = 0;
      v48 = (int64x2_t *)(v46 + 8 * a8);
      v49 = v30;
      do
      {
        v50 = (int64x2_t *)(result + 8 * (v49 + v40));
        v51 = v48[1];
        v53 = *(int64x2_t *)((char *)v48 + a7);
        v54 = *(int64x2_t *)((char *)&v48[1] + a7);
        v52 = (int64x2_t *)((char *)v48 + a7 + a7);
        v56 = *v52;
        v57 = v52[1];
        v55 = (int64x2_t *)((char *)v52 + a7);
        v58 = *v55;
        v59 = v55[1];
        v60 = vtrn2q_s64(*v48, v53);
        *v50 = vtrn1q_s64(*v48, v53);
        v50[1] = v60;
        v50[2] = vtrn1q_s64(v56, v58);
        v50[3] = vtrn2q_s64(v56, v58);
        v50 += 4;
        *v50 = vtrn1q_s64(v51, v54);
        v50[1] = vtrn2q_s64(v51, v54);
        v50[2] = vtrn1q_s64(v57, v59);
        v50[3] = vtrn2q_s64(v57, v59);
        v49 = (v49 - v12) & v12;
        v48 += 2;
        v47 += 4;
      }
      while (v47 < a10);
      v40 = (v40 - v23) & v23;
      v46 += 4 * a7;
      v45 += 4;
    }
    while (v45 < a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)0>,true,false>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int64x2_t *v48;
  uint64_t v49;
  int64x2_t *v50;
  int64x2_t v51;
  int64x2_t *v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t *v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3) & 0x7FFFFFFCu) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4) & 0x7FFFFFFCu) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = 0;
      v48 = (int64x2_t *)(v46 + 8 * a8);
      v49 = v30;
      do
      {
        v50 = (int64x2_t *)(result + 8 * (v49 + v40));
        v51 = v48[1];
        v53 = *(int64x2_t *)((char *)v48 + a7);
        v54 = *(int64x2_t *)((char *)&v48[1] + a7);
        v52 = (int64x2_t *)((char *)v48 + a7 + a7);
        v56 = *v52;
        v57 = v52[1];
        v55 = (int64x2_t *)((char *)v52 + a7);
        v58 = *v55;
        v59 = v55[1];
        v60 = vtrn2q_s64(*v48, v53);
        *v50 = vtrn1q_s64(*v48, v53);
        v50[1] = v60;
        v50[2] = vtrn1q_s64(v56, v58);
        v50[3] = vtrn2q_s64(v56, v58);
        v50 += 4;
        *v50 = vtrn1q_s64(v51, v54);
        v50[1] = vtrn2q_s64(v51, v54);
        v50[2] = vtrn1q_s64(v57, v59);
        v50[3] = vtrn2q_s64(v57, v59);
        v49 = (v49 - v12) & v12;
        v48 += 2;
        v47 += 4;
      }
      while (v47 < a10);
      v40 = (v40 - v23) & v23;
      v46 += 4 * a7;
      v45 += 4;
    }
    while (v45 < a11);
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, uint64_t a11, unsigned __int16 *a12, uint64_t a13)
{
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  char v20;
  unsigned int v21;
  char v22;
  int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  BOOL v29;
  unsigned int v30;
  BOOL v31;
  char v32;
  char v33;
  int v34;
  char v35;
  unsigned int v36;
  BOOL v37;
  BOOL v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  BOOL v81;
  char v82;
  int v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  BOOL v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  BOOL v111;
  BOOL v112;
  int v113;
  int v114;
  int v115;
  int v116;
  BOOL v117;
  BOOL v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  char v130;
  int v131;
  int v132;
  unsigned int v134;
  unsigned int v135;
  char v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  int v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v155;
  BOOL v156;
  BOOL v157;
  int v158;
  int v159;
  uint64_t v160;
  char v161[16];
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned __int8 v169;

  if (result && a2)
  {
    v16 = a11;
    v17 = a10;
    if (a12)
    {
      v18 = a7;
      v160 = result;
      if (*((_BYTE *)a12 + 20))
      {
        result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), *(_DWORD *)(a13 + 8), *(_DWORD *)(a13 + 12), *(_DWORD *)(a13 + 4), *(_DWORD *)a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v161);
        v19 = *((_BYTE *)a12 + 13);
        v20 = *((_BYTE *)a12 + 12);
        v129 = a2;
        if (1 << v19 >= a6 || a5 >> v20)
        {
          v78 = a6 >> v19;
          v79 = 1 << v20;
          v80 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
          if (a6 < 2)
            v80 = 0;
          v81 = v79 >= a5;
          if (v79 < a5)
            v82 = v20 + v19 + v80;
          else
            v82 = *((_BYTE *)a12 + 12);
          if (v81)
            LOBYTE(v83) = *((_BYTE *)a12 + 13);
          else
            v83 = -v80;
          if (!v78)
            v20 = v82;
          v130 = v20;
          if (v78)
            v22 = *((_BYTE *)a12 + 13);
          else
            v22 = v83;
        }
        else
        {
          v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
          if (a5 < 2)
            LOBYTE(v21) = 0;
          v130 = v21;
          v22 = v20 + v19 - v21;
        }
        v84 = v160;
        v128 = v167;
        if (v167)
        {
          v85 = 1 << v130;
          v86 = 1 << v22;
          v87 = v168;
          v159 = v165;
          v157 = v165 != 0;
          v158 = v166;
          v156 = v166 != 0;
          v127 = 1 << v130;
          if (1 << v130 >= a5)
            v85 = a5;
          v144 = v85;
          v146 = 1 << v22;
          if (v86 >= a6)
            v86 = a6;
          v142 = v86;
          if (v168)
          {
            v88 = 0;
            v89 = 0;
            v140 = a8 >> v22;
            v90 = v163;
            v91 = v164;
            v92 = v169;
            v125 = v162;
            v126 = a7 >> v130;
            v93 = v166 | v165;
            v124 = a9 + a7;
            v138 = a10 + a8;
            do
            {
              v132 = v89;
              v94 = 0;
              v95 = 0;
              v96 = a9;
              if (v124 >= (v88 + v126 + 1) << v130)
                v96 = v127 - ((v127 - 1) & a7);
              v97 = 1 << v130;
              if (v124 < (v88 + v126 + 1) << v130)
                v97 = (v127 - 1) & (a9 + a7);
              v98 = (v88 + v126) << v130 >= v18;
              v99 = v125 + v88;
              v100 = v88 << v130;
              if (v98)
                v101 = v97;
              else
                v101 = v96;
              v102 = (v127 - 1) & a7;
              if (v98)
                v102 = 0;
              v151 = v102;
              v153 = v101;
              v149 = v129 + 4 * (v102 + v100);
              do
              {
                v107 = v90 + v94;
                if (v92)
                {
                  if (!v93)
                    goto LABEL_155;
                  v108 = 0;
                  v109 = 0;
                  v110 = 1;
                  v111 = v156;
                  v112 = v157;
                  v113 = v159;
                  v114 = v158;
                  do
                  {
                    --v113;
                    if (v112)
                      v109 |= (v110 & v99) << v108;
                    else
                      v113 = 0;
                    if (v112)
                      ++v108;
                    --v114;
                    if (v111)
                      v109 |= (v110 & v107) << v108;
                    else
                      v114 = 0;
                    if (v111)
                      ++v108;
                    v110 *= 2;
                    --v108;
                    v111 = v114 != 0;
                    v112 = v113 != 0;
                  }
                  while (v114 | v113);
                }
                else
                {
                  if (!v93)
                  {
LABEL_155:
                    v109 = 0;
                    goto LABEL_156;
                  }
                  v115 = 0;
                  v109 = 0;
                  v116 = 1;
                  v118 = v156;
                  v117 = v157;
                  v119 = v158;
                  v120 = v159;
                  do
                  {
                    --v119;
                    if (v118)
                      v109 |= (v116 & v107) << v115;
                    else
                      v119 = 0;
                    if (v118)
                      ++v115;
                    --v120;
                    if (v117)
                      v109 |= (v116 & v99) << v115;
                    else
                      v120 = 0;
                    if (v117)
                      ++v115;
                    v116 *= 2;
                    --v115;
                    v117 = v120 != 0;
                    v118 = v119 != 0;
                  }
                  while (v120 | v119);
                }
LABEL_156:
                v121 = *(_DWORD *)(v84 + 4 * ((v109 + v91) | ((v109 + v91) >> 8 << 9)));
                if (v121 < 0)
                {
                  v122 = v84 - *(_QWORD *)(a13 + 24) + ((unint64_t)(v121 & 0x3FFFFFF) << 14);
                  v123 = *(_DWORD *)(a13 + 8);
                  if (*(_DWORD *)a13 > v123)
                    v122 += get_level_offset_within_tail(*(_DWORD *)a13, v123, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                  v103 = a10;
                  if (v138 >= (v94 + v140 + 1) << v22)
                    v103 = v146 - ((v146 - 1) & a8);
                  v104 = 1 << v22;
                  if (v138 < (v94 + v140 + 1) << v22)
                    v104 = (v146 - 1) & (a10 + a8);
                  v105 = (v146 - 1) & a8;
                  if ((v94 + v140) << v22 < a8)
                  {
                    v106 = v103;
                  }
                  else
                  {
                    v105 = 0;
                    v106 = v104;
                  }
                  result = agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)0>>(v122, v149 + (v105 + (v94 << v22)) * a11, v144, v142, v153, v106, a11, v151, v105);
                  v84 = v160;
                }
                v94 = (unsigned __int16)++v95;
              }
              while (v87 > (unsigned __int16)v95);
              v18 = a7;
              v89 = v132 + 1;
              v88 = (unsigned __int16)(v132 + 1);
            }
            while (v128 > v88);
          }
        }
      }
      else
      {
        LOBYTE(v23) = *((_BYTE *)a12 + 13);
        v24 = *((_BYTE *)a12 + 12);
        v25 = 1 << v23;
        v26 = a5 >> v24;
        v27 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
        if (a6 < 2)
          v27 = 0;
        v28 = v24 + v23;
        if (a6 >> v23)
          v29 = 1;
        else
          v29 = 1 << v24 >= a5;
        if (!v29)
        {
          v24 += v23 + v27;
          v23 = -v27;
        }
        v30 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
        if (a5 < 2)
          LOBYTE(v30) = 0;
        v31 = v25 < a6 && v26 == 0;
        if (v31)
          v32 = v30;
        else
          v32 = v24;
        if (v31)
          v33 = v28 - v30;
        else
          v33 = v23;
        v34 = 1 << v33;
        v35 = *((_BYTE *)a12 + 15);
        v36 = 1 << v35;
        if (v35)
          v37 = v36 > a3;
        else
          v37 = 1;
        v38 = v37 || v36 > a4;
        v39 = (~(-1 << v35) + a3) & (-1 << v35);
        if (v38)
          v40 = a3;
        else
          v40 = v39;
        v139 = a8 >> v33;
        v141 = 1 << v33;
        v41 = v34 - 1;
        v136 = v33;
        v137 = a10 + a8;
        v135 = (v34 - 1 + a10 + a8) >> v33;
        if (a8 >> v33 < v135)
        {
          v42 = 1 << v32;
          v43 = a7 >> v32;
          v44 = a9 + a7;
          v45 = (1 << v32) - 1;
          v46 = (v45 + a9 + a7) >> v32;
          if (1 << v32 >= a5)
            v47 = a5;
          else
            v47 = 1 << v32;
          v48 = 1 << v33;
          if (v141 >= a6)
            v48 = a6;
          v29 = v46 >= v43;
          v49 = v46 - v43;
          if (v49 != 0 && v29)
          {
            v50 = v45 & a7;
            v51 = v45 & v44;
            v52 = v42 - v50;
            v131 = v41 & v137;
            v145 = v41 & a8;
            v53 = v139;
            v134 = (v40 + ~(-1 << v32)) >> v32;
            v54 = v43 + v134 * v139;
            v155 = v47;
            v150 = v49;
            v152 = v48;
            v148 = v45 & v44;
            v147 = v42 - v50;
            do
            {
              v55 = v53 << v136;
              v56 = v53 + 1;
              if (v137 >= (v53 + 1) << v136)
                v57 = v141;
              else
                v57 = v131;
              if (v137 >= v56 << v136)
                v58 = v141 - v145;
              else
                v58 = v17;
              v59 = (v53 - v139) << v136;
              v143 = v56;
              if (v55 >= a8)
              {
                v69 = 0;
                v70 = (v59 - v145) * v16;
                do
                {
                  v71 = (v43 + v69) << v32;
                  v72 = (v43 + v69 + 1) << v32;
                  v73 = v44 >= v72;
                  if (v44 >= v72)
                    v74 = v52;
                  else
                    v74 = a9;
                  if (v73)
                    v75 = v42;
                  else
                    v75 = v51;
                  if (v71 >= a7)
                    v76 = 0;
                  else
                    v76 = v50;
                  if (v71 >= a7)
                    v77 = v75;
                  else
                    v77 = v74;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)0>>((v54 + v69) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, a2 + 4 * ((v76 + (v69 << v32)) - v50) + v70, v155, v152, v77, v57, v16, v76, 0);
                  v52 = v147;
                  v51 = v148;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v160;
                  ++v69;
                }
                while (v150 != v69);
              }
              else
              {
                v60 = 0;
                v61 = ((v145 + v59) - v145) * v16;
                do
                {
                  v62 = (v43 + v60) << v32;
                  v63 = (v43 + v60 + 1) << v32;
                  v64 = v44 >= v63;
                  if (v44 >= v63)
                    v65 = v52;
                  else
                    v65 = a9;
                  if (v64)
                    v66 = v42;
                  else
                    v66 = v51;
                  if (v62 >= a7)
                    v67 = 0;
                  else
                    v67 = v50;
                  if (v62 >= a7)
                    v68 = v66;
                  else
                    v68 = v65;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)0>>((v54 + v60) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, a2 + 4 * ((v67 + (v60 << v32)) - v50) + v61, v155, v152, v68, v58, v16, v67, v145);
                  v52 = v147;
                  v51 = v148;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v160;
                  ++v60;
                }
                while (v150 != v60);
              }
              v54 += v134;
              v53 = v143;
              v17 = a10;
            }
            while (v143 != v135);
          }
        }
      }
    }
    else
    {
      return agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)0>>(result, a2, a5, a6, a9, a10, a11, a7, a8);
    }
  }
  return result;
}

uint64_t agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, int, int);
  uint64_t (*v18)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, unsigned int, unsigned int);
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, unsigned int, unsigned int);
  int v37;
  uint64_t (*v38)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, int, int);
  unsigned int v39;
  unsigned int v40;

  v11 = a6;
  v12 = a5;
  v14 = 32 - __clz(a3 - 1);
  v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2)
    v16 = v15;
  else
    v16 = 0;
  if (((a2 | a7) & 3) != 0)
    v17 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)0>,false,false>;
  else
    v17 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)0>,false,true>;
  if (((a2 | a7) & 3) != 0)
    v18 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)0>,true,false>;
  else
    v18 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)0>,true,true>;
  v19 = a3 >= 2;
  if (a3 >= 2)
    v20 = v14;
  else
    v20 = 0;
  if (!v19 || v16 <= 2)
  {
    HIDWORD(v35) = a5;
    LODWORD(v35) = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, unsigned int))v17)(result, a2, v20, v16, a8, a9, a7, 0, v35, a6);
  }
  v21 = result;
  v22 = 4 - (a9 & 3);
  if ((a9 & 3) == 0)
    v22 = 0;
  v23 = 8 - (a8 & 7);
  if ((a8 & 7) == 0)
    v23 = 0;
  v24 = ((_BYTE)a8 + (_BYTE)a5) & 7;
  v25 = ((_BYTE)a9 + (_BYTE)a6) & 3;
  v26 = v23 + v24;
  if (v23 + v24 > a5)
    v23 = a5;
  v39 = v20;
  v40 = v23;
  if (v26 > a5)
    v24 = 0;
  if (v22 + v25 <= a6)
    v27 = v22;
  else
    v27 = a6;
  if (v22 + v25 <= a6)
    v28 = ((_BYTE)a9 + (_BYTE)a6) & 3;
  else
    v28 = 0;
  v36 = v18;
  v38 = v17;
  v37 = v24;
  if (v27)
  {
    HIDWORD(v33) = a5;
    LODWORD(v33) = 0;
    result = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, unsigned int))v17)(result, a2, v20, v16, a8, a9, a7, 0, v33, v27);
    v11 -= v27;
  }
  if (v28)
  {
    v11 -= v28;
    *(_QWORD *)((char *)&v34 + 4) = __PAIR64__(v28, v12);
    LODWORD(v34) = v11 + v27;
    v29 = v21;
    v30 = v21;
    v31 = v39;
    result = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _DWORD))v38)(v30, a2, v39, v16, a8, a9, a7, 0, v34, DWORD2(v34));
    v32 = v40;
    if (!v11)
      return result;
  }
  else
  {
    v29 = v21;
    v31 = v39;
    v32 = v40;
    if (!v11)
      return result;
  }
  if (v32)
  {
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, unsigned int))v38)(v29, a2, v31, v16, a8, a9, a7, 0, __PAIR64__(v32, v27), v11);
    v12 -= v40;
  }
  if (v37)
  {
    v12 -= v37;
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, unsigned int))v38)(v29, a2, v31, v16, a8, a9, a7, v12 + v40, __PAIR64__(v37, v27), v11);
  }
  if (v12)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))v36)(v29, a2, v31, v16, a8, a9, a7);
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)0>,false,true>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  int *v47;
  int v48;
  uint64_t v49;
  int v50;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3)) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4)) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = (int *)(v46 + 4 * a8);
      v48 = a10;
      v49 = v30;
      do
      {
        v50 = *v47++;
        *(_DWORD *)(result + 4 * (v49 + v40)) = v50;
        v49 = (v49 - v12) & v12;
        --v48;
      }
      while (v48);
      v40 = (v40 - v23) & v23;
      v46 += a7;
      ++v45;
    }
    while (v45 != a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)0>,false,false>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  int *v47;
  int v48;
  uint64_t v49;
  int v50;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3)) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4)) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = (int *)(v46 + 4 * a8);
      v48 = a10;
      v49 = v30;
      do
      {
        v50 = *v47++;
        *(_DWORD *)(result + 4 * (v49 + v40)) = v50;
        v49 = (v49 - v12) & v12;
        --v48;
      }
      while (v48);
      v40 = (v40 - v23) & v23;
      v46 += a7;
      ++v45;
    }
    while (v45 != a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)0>,true,true>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int32x4_t *v48;
  uint64_t v49;
  int32x4_t *v50;
  int32x4_t v51;
  int32x4_t *v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t *v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3) & 0x7FFFFFF8u) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4) & 0x7FFFFFFCu) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = 0;
      v48 = (int32x4_t *)(v46 + 4 * a8);
      v49 = v30;
      do
      {
        v50 = (int32x4_t *)(result + 4 * (v49 + v40));
        v51 = v48[1];
        v53 = *(int32x4_t *)((char *)v48 + a7);
        v54 = *(int32x4_t *)((char *)&v48[1] + a7);
        v52 = (int32x4_t *)((char *)v48 + a7 + a7);
        v56 = *v52;
        v57 = v52[1];
        v55 = (int32x4_t *)((char *)v52 + a7);
        v58 = *v55;
        v59 = v55[1];
        v60 = vzip2q_s32(*v48, v53);
        *v50 = vzip1q_s32(*v48, v53);
        v50[1] = vzip1q_s32(v56, v58);
        v50[2] = v60;
        v50[3] = vzip2q_s32(v56, v58);
        v50 += 8;
        *v50 = vzip1q_s32(v51, v54);
        v50[1] = vzip1q_s32(v57, v59);
        v50[2] = vzip2q_s32(v51, v54);
        v50[3] = vzip2q_s32(v57, v59);
        v49 = (v49 - v12) & v12;
        v48 += 2;
        v47 += 8;
      }
      while (v47 < a10);
      v40 = (v40 - v23) & v23;
      v46 += 4 * a7;
      v45 += 4;
    }
    while (v45 < a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)0>,true,false>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int32x4_t *v48;
  uint64_t v49;
  int32x4_t *v50;
  int32x4_t v51;
  int32x4_t *v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t *v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3) & 0x7FFFFFF8u) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4) & 0x7FFFFFFCu) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = 0;
      v48 = (int32x4_t *)(v46 + 4 * a8);
      v49 = v30;
      do
      {
        v50 = (int32x4_t *)(result + 4 * (v49 + v40));
        v51 = v48[1];
        v53 = *(int32x4_t *)((char *)v48 + a7);
        v54 = *(int32x4_t *)((char *)&v48[1] + a7);
        v52 = (int32x4_t *)((char *)v48 + a7 + a7);
        v56 = *v52;
        v57 = v52[1];
        v55 = (int32x4_t *)((char *)v52 + a7);
        v58 = *v55;
        v59 = v55[1];
        v60 = vzip2q_s32(*v48, v53);
        *v50 = vzip1q_s32(*v48, v53);
        v50[1] = vzip1q_s32(v56, v58);
        v50[2] = v60;
        v50[3] = vzip2q_s32(v56, v58);
        v50 += 8;
        *v50 = vzip1q_s32(v51, v54);
        v50[1] = vzip1q_s32(v57, v59);
        v50[2] = vzip2q_s32(v51, v54);
        v50[3] = vzip2q_s32(v57, v59);
        v49 = (v49 - v12) & v12;
        v48 += 2;
        v47 += 8;
      }
      while (v47 < a10);
      v40 = (v40 - v23) & v23;
      v46 += 4 * a7;
      v45 += 4;
    }
    while (v45 < a11);
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, uint64_t a11, unsigned __int16 *a12, uint64_t a13)
{
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  char v20;
  unsigned int v21;
  char v22;
  int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  BOOL v29;
  unsigned int v30;
  BOOL v31;
  char v32;
  char v33;
  int v34;
  char v35;
  unsigned int v36;
  BOOL v37;
  BOOL v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  BOOL v81;
  char v82;
  int v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  BOOL v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  BOOL v111;
  BOOL v112;
  int v113;
  int v114;
  int v115;
  int v116;
  BOOL v117;
  BOOL v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  char v130;
  int v131;
  int v132;
  unsigned int v134;
  unsigned int v135;
  char v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  int v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v155;
  BOOL v156;
  BOOL v157;
  int v158;
  int v159;
  uint64_t v160;
  char v161[16];
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned __int8 v169;

  if (result && a2)
  {
    v16 = a11;
    v17 = a10;
    if (a12)
    {
      v18 = a7;
      v160 = result;
      if (*((_BYTE *)a12 + 20))
      {
        result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), *(_DWORD *)(a13 + 8), *(_DWORD *)(a13 + 12), *(_DWORD *)(a13 + 4), *(_DWORD *)a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v161);
        v19 = *((_BYTE *)a12 + 13);
        v20 = *((_BYTE *)a12 + 12);
        v129 = a2;
        if (1 << v19 >= a6 || a5 >> v20)
        {
          v78 = a6 >> v19;
          v79 = 1 << v20;
          v80 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
          if (a6 < 2)
            v80 = 0;
          v81 = v79 >= a5;
          if (v79 < a5)
            v82 = v20 + v19 + v80;
          else
            v82 = *((_BYTE *)a12 + 12);
          if (v81)
            LOBYTE(v83) = *((_BYTE *)a12 + 13);
          else
            v83 = -v80;
          if (!v78)
            v20 = v82;
          v130 = v20;
          if (v78)
            v22 = *((_BYTE *)a12 + 13);
          else
            v22 = v83;
        }
        else
        {
          v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
          if (a5 < 2)
            LOBYTE(v21) = 0;
          v130 = v21;
          v22 = v20 + v19 - v21;
        }
        v84 = v160;
        v128 = v167;
        if (v167)
        {
          v85 = 1 << v130;
          v86 = 1 << v22;
          v87 = v168;
          v159 = v165;
          v157 = v165 != 0;
          v158 = v166;
          v156 = v166 != 0;
          v127 = 1 << v130;
          if (1 << v130 >= a5)
            v85 = a5;
          v144 = v85;
          v146 = 1 << v22;
          if (v86 >= a6)
            v86 = a6;
          v142 = v86;
          if (v168)
          {
            v88 = 0;
            v89 = 0;
            v140 = a8 >> v22;
            v90 = v163;
            v91 = v164;
            v92 = v169;
            v125 = v162;
            v126 = a7 >> v130;
            v93 = v166 | v165;
            v124 = a9 + a7;
            v138 = a10 + a8;
            do
            {
              v132 = v89;
              v94 = 0;
              v95 = 0;
              v96 = a9;
              if (v124 >= (v88 + v126 + 1) << v130)
                v96 = v127 - ((v127 - 1) & a7);
              v97 = 1 << v130;
              if (v124 < (v88 + v126 + 1) << v130)
                v97 = (v127 - 1) & (a9 + a7);
              v98 = (v88 + v126) << v130 >= v18;
              v99 = v125 + v88;
              v100 = v88 << v130;
              if (v98)
                v101 = v97;
              else
                v101 = v96;
              v102 = (v127 - 1) & a7;
              if (v98)
                v102 = 0;
              v151 = v102;
              v153 = v101;
              v149 = v129 + 2 * (v102 + v100);
              do
              {
                v107 = v90 + v94;
                if (v92)
                {
                  if (!v93)
                    goto LABEL_155;
                  v108 = 0;
                  v109 = 0;
                  v110 = 1;
                  v111 = v156;
                  v112 = v157;
                  v113 = v159;
                  v114 = v158;
                  do
                  {
                    --v113;
                    if (v112)
                      v109 |= (v110 & v99) << v108;
                    else
                      v113 = 0;
                    if (v112)
                      ++v108;
                    --v114;
                    if (v111)
                      v109 |= (v110 & v107) << v108;
                    else
                      v114 = 0;
                    if (v111)
                      ++v108;
                    v110 *= 2;
                    --v108;
                    v111 = v114 != 0;
                    v112 = v113 != 0;
                  }
                  while (v114 | v113);
                }
                else
                {
                  if (!v93)
                  {
LABEL_155:
                    v109 = 0;
                    goto LABEL_156;
                  }
                  v115 = 0;
                  v109 = 0;
                  v116 = 1;
                  v118 = v156;
                  v117 = v157;
                  v119 = v158;
                  v120 = v159;
                  do
                  {
                    --v119;
                    if (v118)
                      v109 |= (v116 & v107) << v115;
                    else
                      v119 = 0;
                    if (v118)
                      ++v115;
                    --v120;
                    if (v117)
                      v109 |= (v116 & v99) << v115;
                    else
                      v120 = 0;
                    if (v117)
                      ++v115;
                    v116 *= 2;
                    --v115;
                    v117 = v120 != 0;
                    v118 = v119 != 0;
                  }
                  while (v120 | v119);
                }
LABEL_156:
                v121 = *(_DWORD *)(v84 + 4 * ((v109 + v91) | ((v109 + v91) >> 8 << 9)));
                if (v121 < 0)
                {
                  v122 = v84 - *(_QWORD *)(a13 + 24) + ((unint64_t)(v121 & 0x3FFFFFF) << 14);
                  v123 = *(_DWORD *)(a13 + 8);
                  if (*(_DWORD *)a13 > v123)
                    v122 += get_level_offset_within_tail(*(_DWORD *)a13, v123, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                  v103 = a10;
                  if (v138 >= (v94 + v140 + 1) << v22)
                    v103 = v146 - ((v146 - 1) & a8);
                  v104 = 1 << v22;
                  if (v138 < (v94 + v140 + 1) << v22)
                    v104 = (v146 - 1) & (a10 + a8);
                  v105 = (v146 - 1) & a8;
                  if ((v94 + v140) << v22 < a8)
                  {
                    v106 = v103;
                  }
                  else
                  {
                    v105 = 0;
                    v106 = v104;
                  }
                  result = agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)0>>(v122, v149 + (v105 + (v94 << v22)) * a11, v144, v142, v153, v106, a11, v151, v105);
                  v84 = v160;
                }
                v94 = (unsigned __int16)++v95;
              }
              while (v87 > (unsigned __int16)v95);
              v18 = a7;
              v89 = v132 + 1;
              v88 = (unsigned __int16)(v132 + 1);
            }
            while (v128 > v88);
          }
        }
      }
      else
      {
        LOBYTE(v23) = *((_BYTE *)a12 + 13);
        v24 = *((_BYTE *)a12 + 12);
        v25 = 1 << v23;
        v26 = a5 >> v24;
        v27 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
        if (a6 < 2)
          v27 = 0;
        v28 = v24 + v23;
        if (a6 >> v23)
          v29 = 1;
        else
          v29 = 1 << v24 >= a5;
        if (!v29)
        {
          v24 += v23 + v27;
          v23 = -v27;
        }
        v30 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
        if (a5 < 2)
          LOBYTE(v30) = 0;
        v31 = v25 < a6 && v26 == 0;
        if (v31)
          v32 = v30;
        else
          v32 = v24;
        if (v31)
          v33 = v28 - v30;
        else
          v33 = v23;
        v34 = 1 << v33;
        v35 = *((_BYTE *)a12 + 15);
        v36 = 1 << v35;
        if (v35)
          v37 = v36 > a3;
        else
          v37 = 1;
        v38 = v37 || v36 > a4;
        v39 = (~(-1 << v35) + a3) & (-1 << v35);
        if (v38)
          v40 = a3;
        else
          v40 = v39;
        v139 = a8 >> v33;
        v141 = 1 << v33;
        v41 = v34 - 1;
        v136 = v33;
        v137 = a10 + a8;
        v135 = (v34 - 1 + a10 + a8) >> v33;
        if (a8 >> v33 < v135)
        {
          v42 = 1 << v32;
          v43 = a7 >> v32;
          v44 = a9 + a7;
          v45 = (1 << v32) - 1;
          v46 = (v45 + a9 + a7) >> v32;
          if (1 << v32 >= a5)
            v47 = a5;
          else
            v47 = 1 << v32;
          v48 = 1 << v33;
          if (v141 >= a6)
            v48 = a6;
          v29 = v46 >= v43;
          v49 = v46 - v43;
          if (v49 != 0 && v29)
          {
            v50 = v45 & a7;
            v51 = v45 & v44;
            v52 = v42 - v50;
            v131 = v41 & v137;
            v145 = v41 & a8;
            v53 = v139;
            v134 = (v40 + ~(-1 << v32)) >> v32;
            v54 = v43 + v134 * v139;
            v155 = v47;
            v150 = v49;
            v152 = v48;
            v148 = v45 & v44;
            v147 = v42 - v50;
            do
            {
              v55 = v53 << v136;
              v56 = v53 + 1;
              if (v137 >= (v53 + 1) << v136)
                v57 = v141;
              else
                v57 = v131;
              if (v137 >= v56 << v136)
                v58 = v141 - v145;
              else
                v58 = v17;
              v59 = (v53 - v139) << v136;
              v143 = v56;
              if (v55 >= a8)
              {
                v69 = 0;
                v70 = (v59 - v145) * v16;
                do
                {
                  v71 = (v43 + v69) << v32;
                  v72 = (v43 + v69 + 1) << v32;
                  v73 = v44 >= v72;
                  if (v44 >= v72)
                    v74 = v52;
                  else
                    v74 = a9;
                  if (v73)
                    v75 = v42;
                  else
                    v75 = v51;
                  if (v71 >= a7)
                    v76 = 0;
                  else
                    v76 = v50;
                  if (v71 >= a7)
                    v77 = v75;
                  else
                    v77 = v74;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)0>>((v54 + v69) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, a2 + 2 * ((v76 + (v69 << v32)) - v50) + v70, v155, v152, v77, v57, v16, v76, 0);
                  v52 = v147;
                  v51 = v148;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v160;
                  ++v69;
                }
                while (v150 != v69);
              }
              else
              {
                v60 = 0;
                v61 = ((v145 + v59) - v145) * v16;
                do
                {
                  v62 = (v43 + v60) << v32;
                  v63 = (v43 + v60 + 1) << v32;
                  v64 = v44 >= v63;
                  if (v44 >= v63)
                    v65 = v52;
                  else
                    v65 = a9;
                  if (v64)
                    v66 = v42;
                  else
                    v66 = v51;
                  if (v62 >= a7)
                    v67 = 0;
                  else
                    v67 = v50;
                  if (v62 >= a7)
                    v68 = v66;
                  else
                    v68 = v65;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)0>>((v54 + v60) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, a2 + 2 * ((v67 + (v60 << v32)) - v50) + v61, v155, v152, v68, v58, v16, v67, v145);
                  v52 = v147;
                  v51 = v148;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v160;
                  ++v60;
                }
                while (v150 != v60);
              }
              v54 += v134;
              v53 = v143;
              v17 = a10;
            }
            while (v143 != v135);
          }
        }
      }
    }
    else
    {
      return agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)0>>(result, a2, a5, a6, a9, a10, a11, a7, a8);
    }
  }
  return result;
}

uint64_t agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, int, int);
  uint64_t (*v19)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, unsigned int, unsigned int);
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, unsigned int, unsigned int);
  int v33;
  uint64_t (*v34)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, int, int);
  uint64_t v35;
  unsigned int v36;

  v11 = a6;
  v12 = a5;
  v14 = 32 - __clz(a3 - 1);
  if (a3 >= 2)
    v15 = v14;
  else
    v15 = 0;
  v16 = 32 - __clz(a4 - 1);
  if (a4 >= 2)
    v17 = v16;
  else
    v17 = 0;
  if (((a2 | a7) & 1) != 0)
    v18 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)0>,false,false>;
  else
    v18 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)0>,false,true>;
  if (((a2 | a7) & 1) != 0)
    v19 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)0>,true,false>;
  else
    v19 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)0>,true,true>;
  if (v17 < 5 || v15 <= 3)
  {
    HIDWORD(v31) = a5;
    LODWORD(v31) = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, unsigned int))v18)(result, a2, v15, v17, a8, a9, a7, 0, v31, a6);
  }
  v35 = result;
  v20 = 32 - (a9 & 0x1F);
  if ((a9 & 0x1F) == 0)
    v20 = 0;
  v21 = 32 - (a8 & 0x1F);
  if ((a8 & 0x1F) == 0)
    v21 = 0;
  v22 = ((_BYTE)a8 + (_BYTE)a5) & 0x1F;
  v23 = ((_BYTE)a9 + (_BYTE)a6) & 0x1F;
  v24 = v21 + v22;
  if (v21 + v22 > a5)
    v21 = a5;
  v36 = v21;
  if (v24 > a5)
    v22 = 0;
  if (v20 + v23 <= a6)
    v25 = v20;
  else
    v25 = a6;
  if (v20 + v23 <= a6)
    v26 = ((_BYTE)a9 + (_BYTE)a6) & 0x1F;
  else
    v26 = 0;
  v32 = v19;
  v34 = v18;
  v33 = v22;
  if (v25)
  {
    HIDWORD(v29) = a5;
    LODWORD(v29) = 0;
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, unsigned int))v18)(result, a2, v15, v17, a8, a9, a7, 0, v29, v25);
    v11 -= v25;
  }
  if (v26)
  {
    v11 -= v26;
    *(_QWORD *)((char *)&v30 + 4) = __PAIR64__(v26, v12);
    LODWORD(v30) = v11 + v25;
    v27 = v35;
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _DWORD))v34)(v35, a2, v15, v17, a8, a9, a7, 0, v30, DWORD2(v30));
    v28 = v36;
    if (!v11)
      return result;
  }
  else
  {
    v27 = v35;
    v28 = v36;
    if (!v11)
      return result;
  }
  if (v28)
  {
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, unsigned int))v34)(v27, a2, v15, v17, a8, a9, a7, 0, __PAIR64__(v28, v25), v11);
    v12 -= v36;
  }
  if (v33)
  {
    v12 -= v33;
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, unsigned int))v34)(v27, a2, v15, v17, a8, a9, a7, v12 + v36, __PAIR64__(v33, v25), v11);
  }
  if (v12)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))v32)(v27, a2, v15, v17, a8, a9, a7);
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)0>,false,true>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  __int16 *v47;
  int v48;
  uint64_t v49;
  __int16 v50;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3)) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4)) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = (__int16 *)(v46 + 2 * a8);
      v48 = a10;
      v49 = v30;
      do
      {
        v50 = *v47++;
        *(_WORD *)(result + 2 * (v49 + v40)) = v50;
        v49 = (v49 - v12) & v12;
        --v48;
      }
      while (v48);
      v40 = (v40 - v23) & v23;
      v46 += a7;
      ++v45;
    }
    while (v45 != a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)0>,false,false>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  __int16 *v47;
  int v48;
  uint64_t v49;
  __int16 v50;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3)) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4)) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = (__int16 *)(v46 + 2 * a8);
      v48 = a10;
      v49 = v30;
      do
      {
        v50 = *v47++;
        *(_WORD *)(result + 2 * (v49 + v40)) = v50;
        v49 = (v49 - v12) & v12;
        --v48;
      }
      while (v48);
      v40 = (v40 - v23) & v23;
      v46 += a7;
      ++v45;
    }
    while (v45 != a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)0>,true,true>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int32x4_t *v49;
  uint64_t v50;
  int16x8_t *v51;
  int32x4_t *v52;
  int32x4_t v53;
  int32x4_t *v54;
  int32x4_t v55;
  int32x4_t *v56;
  int32x4_t v57;
  int32x4_t *v58;
  int32x4_t v59;
  int32x4_t *v60;
  int32x4_t v61;
  int32x4_t *v62;
  int32x4_t v63;
  int32x4_t *v64;
  int32x4_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int32x4_t *v74;
  int32x4_t v75;
  int32x4_t *v76;
  int32x4_t v77;
  int32x4_t *v78;
  int32x4_t v79;
  int32x4_t *v80;
  int32x4_t v81;
  int32x4_t *v82;
  int32x4_t v83;
  int32x4_t *v84;
  int32x4_t v85;
  int32x4_t *v86;
  int32x4_t v87;
  int32x4_t *v88;
  int32x4_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int32x4_t *v98;
  int32x4_t v99;
  int32x4_t *v100;
  int32x4_t v101;
  int32x4_t *v102;
  int32x4_t v103;
  int32x4_t *v104;
  int32x4_t v105;
  int32x4_t *v106;
  int32x4_t v107;
  int32x4_t *v108;
  int32x4_t v109;
  int32x4_t *v110;
  int32x4_t v111;
  int32x4_t *v112;
  int32x4_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int32x4_t *v122;
  int32x4_t v123;
  int32x4_t *v124;
  int32x4_t v125;
  int32x4_t *v126;
  int32x4_t v127;
  int32x4_t *v128;
  int32x4_t v129;
  int32x4_t *v130;
  int32x4_t v131;
  int32x4_t *v132;
  int32x4_t v133;
  int32x4_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int32x4_t *v143;
  int32x4_t *v144;
  int32x4_t v145;
  int32x4_t *v146;
  int32x4_t v147;
  int32x4_t *v148;
  int32x4_t v149;
  int32x4_t *v150;
  int32x4_t v151;
  int32x4_t *v152;
  int32x4_t v153;
  int32x4_t *v154;
  int32x4_t v155;
  int32x4_t *v156;
  int32x4_t v157;
  int32x4_t *v158;
  int32x4_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int32x4_t *v168;
  int32x4_t v169;
  int32x4_t *v170;
  int32x4_t v171;
  int32x4_t *v172;
  int32x4_t v173;
  int32x4_t *v174;
  int32x4_t v175;
  int32x4_t *v176;
  int32x4_t v177;
  int32x4_t *v178;
  int32x4_t v179;
  int32x4_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int32x4_t *v189;
  int32x4_t v190;
  int32x4_t *v191;
  int32x4_t v192;
  int32x4_t *v193;
  int32x4_t v194;
  int32x4_t *v195;
  int32x4_t v196;
  int32x4_t *v197;
  int32x4_t v198;
  int32x4_t *v199;
  int32x4_t v200;
  int32x4_t *v201;
  int32x4_t v202;
  int32x4_t *v203;
  int32x4_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int32x4_t *v213;
  int32x4_t v214;
  int32x4_t *v215;
  int32x4_t v216;
  int32x4_t *v217;
  int32x4_t v218;
  int32x4_t *v219;
  int32x4_t v220;
  int32x4_t *v221;
  int32x4_t v222;
  int32x4_t *v223;
  int32x4_t v224;
  int32x4_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int32x4_t *v234;
  int32x4_t v235;
  int32x4_t *v236;
  int32x4_t v237;
  int32x4_t *v238;
  int32x4_t v239;
  int32x4_t *v240;
  int32x4_t v241;
  int32x4_t *v242;
  int32x4_t v243;
  int32x4_t *v244;
  int32x4_t v245;
  int32x4_t *v246;
  int32x4_t v247;
  int32x4_t *v248;
  int32x4_t v249;
  int16x8_t v250;
  int16x8_t v251;
  int16x8_t v252;
  int16x8_t v253;
  int16x8_t v254;
  int16x8_t v255;
  int16x8_t v256;
  int16x8_t v257;
  int32x4_t *v258;
  int32x4_t v259;
  int32x4_t *v260;
  int32x4_t v261;
  int32x4_t *v262;
  int32x4_t v263;
  int32x4_t *v264;
  int32x4_t v265;
  int32x4_t *v266;
  int32x4_t v267;
  int32x4_t *v268;
  int32x4_t v269;
  int32x4_t *v270;
  int32x4_t v271;
  int32x4_t *v272;
  int32x4_t v273;
  int16x8_t v274;
  int16x8_t v275;
  int16x8_t v276;
  int16x8_t v277;
  int16x8_t v278;
  int16x8_t v279;
  int16x8_t v280;
  int16x8_t v281;
  int32x4_t *v282;
  int32x4_t v283;
  int32x4_t *v284;
  int32x4_t v285;
  int32x4_t *v286;
  int32x4_t v287;
  int32x4_t *v288;
  int32x4_t v289;
  int32x4_t *v290;
  int32x4_t v291;
  int32x4_t *v292;
  int32x4_t v293;
  int32x4_t *v294;
  int32x4_t v295;
  int32x4_t *v296;
  int32x4_t v297;
  int16x8_t v298;
  int16x8_t v299;
  int16x8_t v300;
  int16x8_t v301;
  int16x8_t v302;
  int16x8_t v303;
  int16x8_t v304;
  int16x8_t v305;
  int32x4_t *v306;
  int32x4_t v307;
  int32x4_t *v308;
  int32x4_t v309;
  int32x4_t *v310;
  int32x4_t v311;
  int32x4_t *v312;
  int32x4_t v313;
  int32x4_t *v314;
  int32x4_t v315;
  int32x4_t *v316;
  int32x4_t v317;
  int32x4_t v318;
  int16x8_t v319;
  int16x8_t v320;
  int16x8_t v321;
  int16x8_t v322;
  int16x8_t v323;
  int16x8_t v324;
  int16x8_t v325;
  int16x8_t v326;
  int32x4_t *v327;
  int32x4_t *v328;
  int32x4_t v329;
  int32x4_t *v330;
  int32x4_t v331;
  int32x4_t *v332;
  int32x4_t v333;
  int32x4_t *v334;
  int32x4_t v335;
  int32x4_t *v336;
  int32x4_t v337;
  int32x4_t *v338;
  int32x4_t v339;
  int32x4_t *v340;
  int32x4_t v341;
  int32x4_t *v342;
  int32x4_t v343;
  int16x8_t v344;
  int16x8_t v345;
  int16x8_t v346;
  int16x8_t v347;
  int16x8_t v348;
  int16x8_t v349;
  int16x8_t v350;
  int16x8_t v351;
  int32x4_t *v352;
  int32x4_t v353;
  int32x4_t *v354;
  int32x4_t v355;
  int32x4_t *v356;
  int32x4_t v357;
  int32x4_t *v358;
  int32x4_t v359;
  int32x4_t *v360;
  int32x4_t v361;
  int32x4_t *v362;
  int32x4_t v363;
  int32x4_t v364;
  int16x8_t v365;
  int16x8_t v366;
  int16x8_t v367;
  int16x8_t v368;
  int16x8_t v369;
  int16x8_t v370;
  int16x8_t v371;
  int16x8_t v372;
  int32x4_t *v373;
  int32x4_t v374;
  int32x4_t *v375;
  int32x4_t v376;
  int32x4_t *v377;
  int32x4_t v378;
  int32x4_t *v379;
  int32x4_t v380;
  int32x4_t *v381;
  int32x4_t v382;
  int32x4_t *v383;
  int32x4_t v384;
  int32x4_t *v385;
  int32x4_t v386;
  int32x4_t *v387;
  int32x4_t v388;
  int16x8_t v389;
  int16x8_t v390;
  int16x8_t v391;
  int16x8_t v392;
  int16x8_t v393;
  int16x8_t v394;
  int16x8_t v395;
  int16x8_t v396;
  int32x4_t *v397;
  int32x4_t v398;
  int32x4_t *v399;
  int32x4_t v400;
  int32x4_t *v401;
  int32x4_t v402;
  int32x4_t *v403;
  int32x4_t v404;
  int32x4_t *v405;
  int32x4_t v406;
  int32x4_t *v407;
  int32x4_t v408;
  int32x4_t v409;
  int16x8_t v410;
  int16x8_t v411;
  int16x8_t v412;
  int16x8_t v413;
  int16x8_t v414;
  int16x8_t v415;
  int16x8_t v416;
  int16x8_t v417;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3) & 0x7FFFFFE0u) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4) & 0x7FFFFFE0u) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = 2 * a8;
    v47 = a2 + a9 * a7;
    do
    {
      v48 = 0;
      v49 = (int32x4_t *)(v47 + v46);
      v50 = v30;
      do
      {
        v51 = (int16x8_t *)(result + 2 * (v50 + v40));
        v53 = *(int32x4_t *)((char *)v49 + a7);
        v52 = (int32x4_t *)((char *)v49 + a7 + a7);
        v55 = *v52;
        v54 = (int32x4_t *)((char *)v52 + a7);
        v57 = *v54;
        v56 = (int32x4_t *)((char *)v54 + a7);
        v59 = *v56;
        v58 = (int32x4_t *)((char *)v56 + a7);
        v61 = *v58;
        v60 = (int32x4_t *)((char *)v58 + a7);
        v63 = *v60;
        v62 = (int32x4_t *)((char *)v60 + a7);
        v65 = *v62;
        v64 = (int32x4_t *)((char *)v62 + a7);
        v66 = (int16x8_t)vzip1q_s32(v59, v63);
        v67 = (int16x8_t)vzip2q_s32(v59, v63);
        v68 = (int16x8_t)vzip1q_s32(v61, v65);
        v69 = (int16x8_t)vzip2q_s32(v61, v65);
        v70 = (int16x8_t)vzip1q_s32(*v49, v55);
        v71 = (int16x8_t)vzip2q_s32(*v49, v55);
        v72 = (int16x8_t)vzip1q_s32(v53, v57);
        v73 = (int16x8_t)vzip2q_s32(v53, v57);
        *v51 = vzip1q_s16(v70, v72);
        v51[1] = vzip2q_s16(v70, v72);
        v51[2] = vzip1q_s16(v66, v68);
        v51[3] = vzip2q_s16(v66, v68);
        v51 += 4;
        *v51 = vzip1q_s16(v71, v73);
        v51[1] = vzip2q_s16(v71, v73);
        v51[2] = vzip1q_s16(v67, v69);
        v51[3] = vzip2q_s16(v67, v69);
        v51 += 4;
        v75 = *v64;
        v74 = (int32x4_t *)((char *)v64 + a7);
        v77 = *v74;
        v76 = (int32x4_t *)((char *)v74 + a7);
        v79 = *v76;
        v78 = (int32x4_t *)((char *)v76 + a7);
        v81 = *v78;
        v80 = (int32x4_t *)((char *)v78 + a7);
        v83 = *v80;
        v82 = (int32x4_t *)((char *)v80 + a7);
        v85 = *v82;
        v84 = (int32x4_t *)((char *)v82 + a7);
        v87 = *v84;
        v86 = (int32x4_t *)((char *)v84 + a7);
        v89 = *v86;
        v88 = (int32x4_t *)((char *)v86 + a7);
        v90 = (int16x8_t)vzip1q_s32(v83, v87);
        v91 = (int16x8_t)vzip2q_s32(v83, v87);
        v92 = (int16x8_t)vzip1q_s32(v85, v89);
        v93 = (int16x8_t)vzip2q_s32(v85, v89);
        v94 = (int16x8_t)vzip1q_s32(v75, v79);
        v95 = (int16x8_t)vzip2q_s32(v75, v79);
        v96 = (int16x8_t)vzip1q_s32(v77, v81);
        v97 = (int16x8_t)vzip2q_s32(v77, v81);
        *v51 = vzip1q_s16(v94, v96);
        v51[1] = vzip2q_s16(v94, v96);
        v51[2] = vzip1q_s16(v90, v92);
        v51[3] = vzip2q_s16(v90, v92);
        v51 += 4;
        *v51 = vzip1q_s16(v95, v97);
        v51[1] = vzip2q_s16(v95, v97);
        v51[2] = vzip1q_s16(v91, v93);
        v51[3] = vzip2q_s16(v91, v93);
        v51 += 4;
        v99 = v49[1];
        v98 = (int32x4_t *)((char *)v49 + a7 + 16);
        v101 = *v98;
        v100 = (int32x4_t *)((char *)v98 + a7);
        v103 = *v100;
        v102 = (int32x4_t *)((char *)v100 + a7);
        v105 = *v102;
        v104 = (int32x4_t *)((char *)v102 + a7);
        v107 = *v104;
        v106 = (int32x4_t *)((char *)v104 + a7);
        v109 = *v106;
        v108 = (int32x4_t *)((char *)v106 + a7);
        v111 = *v108;
        v110 = (int32x4_t *)((char *)v108 + a7);
        v113 = *v110;
        v112 = (int32x4_t *)((char *)v110 + a7);
        v114 = (int16x8_t)vzip1q_s32(v107, v111);
        v115 = (int16x8_t)vzip2q_s32(v107, v111);
        v116 = (int16x8_t)vzip1q_s32(v109, v113);
        v117 = (int16x8_t)vzip2q_s32(v109, v113);
        v118 = (int16x8_t)vzip1q_s32(v99, v103);
        v119 = (int16x8_t)vzip2q_s32(v99, v103);
        v120 = (int16x8_t)vzip1q_s32(v101, v105);
        v121 = (int16x8_t)vzip2q_s32(v101, v105);
        *v51 = vzip1q_s16(v118, v120);
        v51[1] = vzip2q_s16(v118, v120);
        v51[2] = vzip1q_s16(v114, v116);
        v51[3] = vzip2q_s16(v114, v116);
        v51 += 4;
        *v51 = vzip1q_s16(v119, v121);
        v51[1] = vzip2q_s16(v119, v121);
        v51[2] = vzip1q_s16(v115, v117);
        v51[3] = vzip2q_s16(v115, v117);
        v51 += 4;
        v123 = *v112;
        v122 = (int32x4_t *)((char *)v112 + a7);
        v125 = *v122;
        v124 = (int32x4_t *)((char *)v122 + a7);
        v127 = *v124;
        v126 = (int32x4_t *)((char *)v124 + a7);
        v129 = *v126;
        v128 = (int32x4_t *)((char *)v126 + a7);
        v131 = *v128;
        v130 = (int32x4_t *)((char *)v128 + a7);
        v133 = *v130;
        v132 = (int32x4_t *)((char *)v130 + a7);
        v134 = *(int32x4_t *)((char *)v132 + a7);
        v135 = (int16x8_t)vzip1q_s32(v131, *v132);
        v136 = (int16x8_t)vzip2q_s32(v131, *v132);
        v137 = (int16x8_t)vzip1q_s32(v133, v134);
        v138 = (int16x8_t)vzip2q_s32(v133, v134);
        v139 = (int16x8_t)vzip1q_s32(v123, v127);
        v140 = (int16x8_t)vzip2q_s32(v123, v127);
        v141 = (int16x8_t)vzip1q_s32(v125, v129);
        v142 = (int16x8_t)vzip2q_s32(v125, v129);
        *v51 = vzip1q_s16(v139, v141);
        v51[1] = vzip2q_s16(v139, v141);
        v51[2] = vzip1q_s16(v135, v137);
        v51[3] = vzip2q_s16(v135, v137);
        v51 += 4;
        *v51 = vzip1q_s16(v140, v142);
        v51[1] = vzip2q_s16(v140, v142);
        v51[2] = vzip1q_s16(v136, v138);
        v51[3] = vzip2q_s16(v136, v138);
        v51 += 4;
        v143 = v88 + 1;
        v145 = *v88;
        v144 = (int32x4_t *)((char *)v88 + a7);
        v147 = *v144;
        v146 = (int32x4_t *)((char *)v144 + a7);
        v149 = *v146;
        v148 = (int32x4_t *)((char *)v146 + a7);
        v151 = *v148;
        v150 = (int32x4_t *)((char *)v148 + a7);
        v153 = *v150;
        v152 = (int32x4_t *)((char *)v150 + a7);
        v155 = *v152;
        v154 = (int32x4_t *)((char *)v152 + a7);
        v157 = *v154;
        v156 = (int32x4_t *)((char *)v154 + a7);
        v159 = *v156;
        v158 = (int32x4_t *)((char *)v156 + a7);
        v160 = (int16x8_t)vzip1q_s32(v153, v157);
        v161 = (int16x8_t)vzip2q_s32(v153, v157);
        v162 = (int16x8_t)vzip1q_s32(v155, v159);
        v163 = (int16x8_t)vzip2q_s32(v155, v159);
        v164 = (int16x8_t)vzip1q_s32(v145, v149);
        v165 = (int16x8_t)vzip2q_s32(v145, v149);
        v166 = (int16x8_t)vzip1q_s32(v147, v151);
        v167 = (int16x8_t)vzip2q_s32(v147, v151);
        *v51 = vzip1q_s16(v164, v166);
        v51[1] = vzip2q_s16(v164, v166);
        v51[2] = vzip1q_s16(v160, v162);
        v51[3] = vzip2q_s16(v160, v162);
        v51 += 4;
        *v51 = vzip1q_s16(v165, v167);
        v51[1] = vzip2q_s16(v165, v167);
        v51[2] = vzip1q_s16(v161, v163);
        v51[3] = vzip2q_s16(v161, v163);
        v51 += 4;
        v169 = *v158;
        v168 = (int32x4_t *)((char *)v158 + a7);
        v171 = *v168;
        v170 = (int32x4_t *)((char *)v168 + a7);
        v173 = *v170;
        v172 = (int32x4_t *)((char *)v170 + a7);
        v175 = *v172;
        v174 = (int32x4_t *)((char *)v172 + a7);
        v177 = *v174;
        v176 = (int32x4_t *)((char *)v174 + a7);
        v179 = *v176;
        v178 = (int32x4_t *)((char *)v176 + a7);
        v180 = *(int32x4_t *)((char *)v178 + a7);
        v181 = (int16x8_t)vzip1q_s32(v177, *v178);
        v182 = (int16x8_t)vzip2q_s32(v177, *v178);
        v183 = (int16x8_t)vzip1q_s32(v179, v180);
        v184 = (int16x8_t)vzip2q_s32(v179, v180);
        v185 = (int16x8_t)vzip1q_s32(v169, v173);
        v186 = (int16x8_t)vzip2q_s32(v169, v173);
        v187 = (int16x8_t)vzip1q_s32(v171, v175);
        v188 = (int16x8_t)vzip2q_s32(v171, v175);
        *v51 = vzip1q_s16(v185, v187);
        v51[1] = vzip2q_s16(v185, v187);
        v51[2] = vzip1q_s16(v181, v183);
        v51[3] = vzip2q_s16(v181, v183);
        v51 += 4;
        *v51 = vzip1q_s16(v186, v188);
        v51[1] = vzip2q_s16(v186, v188);
        v51[2] = vzip1q_s16(v182, v184);
        v51[3] = vzip2q_s16(v182, v184);
        v51 += 4;
        v190 = *v143;
        v189 = (int32x4_t *)((char *)v143 + a7);
        v192 = *v189;
        v191 = (int32x4_t *)((char *)v189 + a7);
        v194 = *v191;
        v193 = (int32x4_t *)((char *)v191 + a7);
        v196 = *v193;
        v195 = (int32x4_t *)((char *)v193 + a7);
        v198 = *v195;
        v197 = (int32x4_t *)((char *)v195 + a7);
        v200 = *v197;
        v199 = (int32x4_t *)((char *)v197 + a7);
        v202 = *v199;
        v201 = (int32x4_t *)((char *)v199 + a7);
        v204 = *v201;
        v203 = (int32x4_t *)((char *)v201 + a7);
        v205 = (int16x8_t)vzip1q_s32(v198, v202);
        v206 = (int16x8_t)vzip2q_s32(v198, v202);
        v207 = (int16x8_t)vzip1q_s32(v200, v204);
        v208 = (int16x8_t)vzip2q_s32(v200, v204);
        v209 = (int16x8_t)vzip1q_s32(v190, v194);
        v210 = (int16x8_t)vzip2q_s32(v190, v194);
        v211 = (int16x8_t)vzip1q_s32(v192, v196);
        v212 = (int16x8_t)vzip2q_s32(v192, v196);
        *v51 = vzip1q_s16(v209, v211);
        v51[1] = vzip2q_s16(v209, v211);
        v51[2] = vzip1q_s16(v205, v207);
        v51[3] = vzip2q_s16(v205, v207);
        v51 += 4;
        *v51 = vzip1q_s16(v210, v212);
        v51[1] = vzip2q_s16(v210, v212);
        v51[2] = vzip1q_s16(v206, v208);
        v51[3] = vzip2q_s16(v206, v208);
        v51 += 4;
        v214 = *v203;
        v213 = (int32x4_t *)((char *)v203 + a7);
        v216 = *v213;
        v215 = (int32x4_t *)((char *)v213 + a7);
        v218 = *v215;
        v217 = (int32x4_t *)((char *)v215 + a7);
        v220 = *v217;
        v219 = (int32x4_t *)((char *)v217 + a7);
        v222 = *v219;
        v221 = (int32x4_t *)((char *)v219 + a7);
        v224 = *v221;
        v223 = (int32x4_t *)((char *)v221 + a7);
        v225 = *(int32x4_t *)((char *)v223 + a7);
        v226 = (int16x8_t)vzip1q_s32(v222, *v223);
        v227 = (int16x8_t)vzip2q_s32(v222, *v223);
        v228 = (int16x8_t)vzip1q_s32(v224, v225);
        v229 = (int16x8_t)vzip2q_s32(v224, v225);
        v230 = (int16x8_t)vzip1q_s32(v214, v218);
        v231 = (int16x8_t)vzip2q_s32(v214, v218);
        v232 = (int16x8_t)vzip1q_s32(v216, v220);
        v233 = (int16x8_t)vzip2q_s32(v216, v220);
        *v51 = vzip1q_s16(v230, v232);
        v51[1] = vzip2q_s16(v230, v232);
        v51[2] = vzip1q_s16(v226, v228);
        v51[3] = vzip2q_s16(v226, v228);
        v51 += 4;
        *v51 = vzip1q_s16(v231, v233);
        v51[1] = vzip2q_s16(v231, v233);
        v51[2] = vzip1q_s16(v227, v229);
        v51[3] = vzip2q_s16(v227, v229);
        v51 += 4;
        v235 = v49[2];
        v234 = (int32x4_t *)((char *)v49 + a7 + 32);
        v237 = *v234;
        v236 = (int32x4_t *)((char *)v234 + a7);
        v239 = *v236;
        v238 = (int32x4_t *)((char *)v236 + a7);
        v241 = *v238;
        v240 = (int32x4_t *)((char *)v238 + a7);
        v243 = *v240;
        v242 = (int32x4_t *)((char *)v240 + a7);
        v245 = *v242;
        v244 = (int32x4_t *)((char *)v242 + a7);
        v247 = *v244;
        v246 = (int32x4_t *)((char *)v244 + a7);
        v249 = *v246;
        v248 = (int32x4_t *)((char *)v246 + a7);
        v250 = (int16x8_t)vzip1q_s32(v243, v247);
        v251 = (int16x8_t)vzip2q_s32(v243, v247);
        v252 = (int16x8_t)vzip1q_s32(v245, v249);
        v253 = (int16x8_t)vzip2q_s32(v245, v249);
        v254 = (int16x8_t)vzip1q_s32(v235, v239);
        v255 = (int16x8_t)vzip2q_s32(v235, v239);
        v256 = (int16x8_t)vzip1q_s32(v237, v241);
        v257 = (int16x8_t)vzip2q_s32(v237, v241);
        *v51 = vzip1q_s16(v254, v256);
        v51[1] = vzip2q_s16(v254, v256);
        v51[2] = vzip1q_s16(v250, v252);
        v51[3] = vzip2q_s16(v250, v252);
        v51 += 4;
        *v51 = vzip1q_s16(v255, v257);
        v51[1] = vzip2q_s16(v255, v257);
        v51[2] = vzip1q_s16(v251, v253);
        v51[3] = vzip2q_s16(v251, v253);
        v51 += 4;
        v259 = *v248;
        v258 = (int32x4_t *)((char *)v248 + a7);
        v261 = *v258;
        v260 = (int32x4_t *)((char *)v258 + a7);
        v263 = *v260;
        v262 = (int32x4_t *)((char *)v260 + a7);
        v265 = *v262;
        v264 = (int32x4_t *)((char *)v262 + a7);
        v267 = *v264;
        v266 = (int32x4_t *)((char *)v264 + a7);
        v269 = *v266;
        v268 = (int32x4_t *)((char *)v266 + a7);
        v271 = *v268;
        v270 = (int32x4_t *)((char *)v268 + a7);
        v273 = *v270;
        v272 = (int32x4_t *)((char *)v270 + a7);
        v274 = (int16x8_t)vzip1q_s32(v267, v271);
        v275 = (int16x8_t)vzip2q_s32(v267, v271);
        v276 = (int16x8_t)vzip1q_s32(v269, v273);
        v277 = (int16x8_t)vzip2q_s32(v269, v273);
        v278 = (int16x8_t)vzip1q_s32(v259, v263);
        v279 = (int16x8_t)vzip2q_s32(v259, v263);
        v280 = (int16x8_t)vzip1q_s32(v261, v265);
        v281 = (int16x8_t)vzip2q_s32(v261, v265);
        *v51 = vzip1q_s16(v278, v280);
        v51[1] = vzip2q_s16(v278, v280);
        v51[2] = vzip1q_s16(v274, v276);
        v51[3] = vzip2q_s16(v274, v276);
        v51 += 4;
        *v51 = vzip1q_s16(v279, v281);
        v51[1] = vzip2q_s16(v279, v281);
        v51[2] = vzip1q_s16(v275, v277);
        v51[3] = vzip2q_s16(v275, v277);
        v51 += 4;
        v283 = v49[3];
        v282 = (int32x4_t *)((char *)v49 + a7 + 48);
        v285 = *v282;
        v284 = (int32x4_t *)((char *)v282 + a7);
        v287 = *v284;
        v286 = (int32x4_t *)((char *)v284 + a7);
        v289 = *v286;
        v288 = (int32x4_t *)((char *)v286 + a7);
        v291 = *v288;
        v290 = (int32x4_t *)((char *)v288 + a7);
        v293 = *v290;
        v292 = (int32x4_t *)((char *)v290 + a7);
        v295 = *v292;
        v294 = (int32x4_t *)((char *)v292 + a7);
        v297 = *v294;
        v296 = (int32x4_t *)((char *)v294 + a7);
        v298 = (int16x8_t)vzip1q_s32(v291, v295);
        v299 = (int16x8_t)vzip2q_s32(v291, v295);
        v300 = (int16x8_t)vzip1q_s32(v293, v297);
        v301 = (int16x8_t)vzip2q_s32(v293, v297);
        v302 = (int16x8_t)vzip1q_s32(v283, v287);
        v303 = (int16x8_t)vzip2q_s32(v283, v287);
        v304 = (int16x8_t)vzip1q_s32(v285, v289);
        v305 = (int16x8_t)vzip2q_s32(v285, v289);
        *v51 = vzip1q_s16(v302, v304);
        v51[1] = vzip2q_s16(v302, v304);
        v51[2] = vzip1q_s16(v298, v300);
        v51[3] = vzip2q_s16(v298, v300);
        v51 += 4;
        *v51 = vzip1q_s16(v303, v305);
        v51[1] = vzip2q_s16(v303, v305);
        v51[2] = vzip1q_s16(v299, v301);
        v51[3] = vzip2q_s16(v299, v301);
        v51 += 4;
        v307 = *v296;
        v306 = (int32x4_t *)((char *)v296 + a7);
        v309 = *v306;
        v308 = (int32x4_t *)((char *)v306 + a7);
        v311 = *v308;
        v310 = (int32x4_t *)((char *)v308 + a7);
        v313 = *v310;
        v312 = (int32x4_t *)((char *)v310 + a7);
        v315 = *v312;
        v314 = (int32x4_t *)((char *)v312 + a7);
        v317 = *v314;
        v316 = (int32x4_t *)((char *)v314 + a7);
        v318 = *(int32x4_t *)((char *)v316 + a7);
        v319 = (int16x8_t)vzip1q_s32(v315, *v316);
        v320 = (int16x8_t)vzip2q_s32(v315, *v316);
        v321 = (int16x8_t)vzip1q_s32(v317, v318);
        v322 = (int16x8_t)vzip2q_s32(v317, v318);
        v323 = (int16x8_t)vzip1q_s32(v307, v311);
        v324 = (int16x8_t)vzip2q_s32(v307, v311);
        v325 = (int16x8_t)vzip1q_s32(v309, v313);
        v326 = (int16x8_t)vzip2q_s32(v309, v313);
        *v51 = vzip1q_s16(v323, v325);
        v51[1] = vzip2q_s16(v323, v325);
        v51[2] = vzip1q_s16(v319, v321);
        v51[3] = vzip2q_s16(v319, v321);
        v51 += 4;
        *v51 = vzip1q_s16(v324, v326);
        v51[1] = vzip2q_s16(v324, v326);
        v51[2] = vzip1q_s16(v320, v322);
        v51[3] = vzip2q_s16(v320, v322);
        v51 += 4;
        v327 = v272 + 1;
        v329 = *v272;
        v328 = (int32x4_t *)((char *)v272 + a7);
        v331 = *v328;
        v330 = (int32x4_t *)((char *)v328 + a7);
        v333 = *v330;
        v332 = (int32x4_t *)((char *)v330 + a7);
        v335 = *v332;
        v334 = (int32x4_t *)((char *)v332 + a7);
        v337 = *v334;
        v336 = (int32x4_t *)((char *)v334 + a7);
        v339 = *v336;
        v338 = (int32x4_t *)((char *)v336 + a7);
        v341 = *v338;
        v340 = (int32x4_t *)((char *)v338 + a7);
        v343 = *v340;
        v342 = (int32x4_t *)((char *)v340 + a7);
        v344 = (int16x8_t)vzip1q_s32(v337, v341);
        v345 = (int16x8_t)vzip2q_s32(v337, v341);
        v346 = (int16x8_t)vzip1q_s32(v339, v343);
        v347 = (int16x8_t)vzip2q_s32(v339, v343);
        v348 = (int16x8_t)vzip1q_s32(v329, v333);
        v349 = (int16x8_t)vzip2q_s32(v329, v333);
        v350 = (int16x8_t)vzip1q_s32(v331, v335);
        v351 = (int16x8_t)vzip2q_s32(v331, v335);
        *v51 = vzip1q_s16(v348, v350);
        v51[1] = vzip2q_s16(v348, v350);
        v51[2] = vzip1q_s16(v344, v346);
        v51[3] = vzip2q_s16(v344, v346);
        v51 += 4;
        *v51 = vzip1q_s16(v349, v351);
        v51[1] = vzip2q_s16(v349, v351);
        v51[2] = vzip1q_s16(v345, v347);
        v51[3] = vzip2q_s16(v345, v347);
        v51 += 4;
        v353 = *v342;
        v352 = (int32x4_t *)((char *)v342 + a7);
        v355 = *v352;
        v354 = (int32x4_t *)((char *)v352 + a7);
        v357 = *v354;
        v356 = (int32x4_t *)((char *)v354 + a7);
        v359 = *v356;
        v358 = (int32x4_t *)((char *)v356 + a7);
        v361 = *v358;
        v360 = (int32x4_t *)((char *)v358 + a7);
        v363 = *v360;
        v362 = (int32x4_t *)((char *)v360 + a7);
        v364 = *(int32x4_t *)((char *)v362 + a7);
        v365 = (int16x8_t)vzip1q_s32(v361, *v362);
        v366 = (int16x8_t)vzip2q_s32(v361, *v362);
        v367 = (int16x8_t)vzip1q_s32(v363, v364);
        v368 = (int16x8_t)vzip2q_s32(v363, v364);
        v369 = (int16x8_t)vzip1q_s32(v353, v357);
        v370 = (int16x8_t)vzip2q_s32(v353, v357);
        v371 = (int16x8_t)vzip1q_s32(v355, v359);
        v372 = (int16x8_t)vzip2q_s32(v355, v359);
        *v51 = vzip1q_s16(v369, v371);
        v51[1] = vzip2q_s16(v369, v371);
        v51[2] = vzip1q_s16(v365, v367);
        v51[3] = vzip2q_s16(v365, v367);
        v51 += 4;
        *v51 = vzip1q_s16(v370, v372);
        v51[1] = vzip2q_s16(v370, v372);
        v51[2] = vzip1q_s16(v366, v368);
        v51[3] = vzip2q_s16(v366, v368);
        v51 += 4;
        v374 = *v327;
        v373 = (int32x4_t *)((char *)v327 + a7);
        v376 = *v373;
        v375 = (int32x4_t *)((char *)v373 + a7);
        v378 = *v375;
        v377 = (int32x4_t *)((char *)v375 + a7);
        v380 = *v377;
        v379 = (int32x4_t *)((char *)v377 + a7);
        v382 = *v379;
        v381 = (int32x4_t *)((char *)v379 + a7);
        v384 = *v381;
        v383 = (int32x4_t *)((char *)v381 + a7);
        v386 = *v383;
        v385 = (int32x4_t *)((char *)v383 + a7);
        v388 = *v385;
        v387 = (int32x4_t *)((char *)v385 + a7);
        v389 = (int16x8_t)vzip1q_s32(v382, v386);
        v390 = (int16x8_t)vzip2q_s32(v382, v386);
        v391 = (int16x8_t)vzip1q_s32(v384, v388);
        v392 = (int16x8_t)vzip2q_s32(v384, v388);
        v393 = (int16x8_t)vzip1q_s32(v374, v378);
        v394 = (int16x8_t)vzip2q_s32(v374, v378);
        v395 = (int16x8_t)vzip1q_s32(v376, v380);
        v396 = (int16x8_t)vzip2q_s32(v376, v380);
        *v51 = vzip1q_s16(v393, v395);
        v51[1] = vzip2q_s16(v393, v395);
        v51[2] = vzip1q_s16(v389, v391);
        v51[3] = vzip2q_s16(v389, v391);
        v51 += 4;
        *v51 = vzip1q_s16(v394, v396);
        v51[1] = vzip2q_s16(v394, v396);
        v51[2] = vzip1q_s16(v390, v392);
        v51[3] = vzip2q_s16(v390, v392);
        v51 += 4;
        v398 = *v387;
        v397 = (int32x4_t *)((char *)v387 + a7);
        v400 = *v397;
        v399 = (int32x4_t *)((char *)v397 + a7);
        v402 = *v399;
        v401 = (int32x4_t *)((char *)v399 + a7);
        v404 = *v401;
        v403 = (int32x4_t *)((char *)v401 + a7);
        v406 = *v403;
        v405 = (int32x4_t *)((char *)v403 + a7);
        v408 = *v405;
        v407 = (int32x4_t *)((char *)v405 + a7);
        v409 = *(int32x4_t *)((char *)v407 + a7);
        v410 = (int16x8_t)vzip1q_s32(v406, *v407);
        v411 = (int16x8_t)vzip2q_s32(v406, *v407);
        v412 = (int16x8_t)vzip1q_s32(v408, v409);
        v413 = (int16x8_t)vzip2q_s32(v408, v409);
        v414 = (int16x8_t)vzip1q_s32(v398, v402);
        v415 = (int16x8_t)vzip2q_s32(v398, v402);
        v416 = (int16x8_t)vzip1q_s32(v400, v404);
        v417 = (int16x8_t)vzip2q_s32(v400, v404);
        *v51 = vzip1q_s16(v414, v416);
        v51[1] = vzip2q_s16(v414, v416);
        v51[2] = vzip1q_s16(v410, v412);
        v51[3] = vzip2q_s16(v410, v412);
        v51 += 4;
        *v51 = vzip1q_s16(v415, v417);
        v51[1] = vzip2q_s16(v415, v417);
        v51[2] = vzip1q_s16(v411, v413);
        v51[3] = vzip2q_s16(v411, v413);
        v50 = (v50 - v12) & v12;
        v48 += 32;
        v49 += 4;
      }
      while (v48 < a10);
      v40 = (v40 - v23) & v23;
      v47 += 32 * a7;
      v45 += 32;
    }
    while (v45 < a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)0>,true,false>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int32x4_t *v49;
  uint64_t v50;
  int16x8_t *v51;
  int32x4_t *v52;
  int32x4_t v53;
  int32x4_t *v54;
  int32x4_t v55;
  int32x4_t *v56;
  int32x4_t v57;
  int32x4_t *v58;
  int32x4_t v59;
  int32x4_t *v60;
  int32x4_t v61;
  int32x4_t *v62;
  int32x4_t v63;
  int32x4_t *v64;
  int32x4_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int32x4_t *v74;
  int32x4_t v75;
  int32x4_t *v76;
  int32x4_t v77;
  int32x4_t *v78;
  int32x4_t v79;
  int32x4_t *v80;
  int32x4_t v81;
  int32x4_t *v82;
  int32x4_t v83;
  int32x4_t *v84;
  int32x4_t v85;
  int32x4_t *v86;
  int32x4_t v87;
  int32x4_t *v88;
  int32x4_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int32x4_t *v98;
  int32x4_t v99;
  int32x4_t *v100;
  int32x4_t v101;
  int32x4_t *v102;
  int32x4_t v103;
  int32x4_t *v104;
  int32x4_t v105;
  int32x4_t *v106;
  int32x4_t v107;
  int32x4_t *v108;
  int32x4_t v109;
  int32x4_t *v110;
  int32x4_t v111;
  int32x4_t *v112;
  int32x4_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int32x4_t *v122;
  int32x4_t v123;
  int32x4_t *v124;
  int32x4_t v125;
  int32x4_t *v126;
  int32x4_t v127;
  int32x4_t *v128;
  int32x4_t v129;
  int32x4_t *v130;
  int32x4_t v131;
  int32x4_t *v132;
  int32x4_t v133;
  int32x4_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int32x4_t *v143;
  int32x4_t *v144;
  int32x4_t v145;
  int32x4_t *v146;
  int32x4_t v147;
  int32x4_t *v148;
  int32x4_t v149;
  int32x4_t *v150;
  int32x4_t v151;
  int32x4_t *v152;
  int32x4_t v153;
  int32x4_t *v154;
  int32x4_t v155;
  int32x4_t *v156;
  int32x4_t v157;
  int32x4_t *v158;
  int32x4_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int32x4_t *v168;
  int32x4_t v169;
  int32x4_t *v170;
  int32x4_t v171;
  int32x4_t *v172;
  int32x4_t v173;
  int32x4_t *v174;
  int32x4_t v175;
  int32x4_t *v176;
  int32x4_t v177;
  int32x4_t *v178;
  int32x4_t v179;
  int32x4_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int32x4_t *v189;
  int32x4_t v190;
  int32x4_t *v191;
  int32x4_t v192;
  int32x4_t *v193;
  int32x4_t v194;
  int32x4_t *v195;
  int32x4_t v196;
  int32x4_t *v197;
  int32x4_t v198;
  int32x4_t *v199;
  int32x4_t v200;
  int32x4_t *v201;
  int32x4_t v202;
  int32x4_t *v203;
  int32x4_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int32x4_t *v213;
  int32x4_t v214;
  int32x4_t *v215;
  int32x4_t v216;
  int32x4_t *v217;
  int32x4_t v218;
  int32x4_t *v219;
  int32x4_t v220;
  int32x4_t *v221;
  int32x4_t v222;
  int32x4_t *v223;
  int32x4_t v224;
  int32x4_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int32x4_t *v234;
  int32x4_t v235;
  int32x4_t *v236;
  int32x4_t v237;
  int32x4_t *v238;
  int32x4_t v239;
  int32x4_t *v240;
  int32x4_t v241;
  int32x4_t *v242;
  int32x4_t v243;
  int32x4_t *v244;
  int32x4_t v245;
  int32x4_t *v246;
  int32x4_t v247;
  int32x4_t *v248;
  int32x4_t v249;
  int16x8_t v250;
  int16x8_t v251;
  int16x8_t v252;
  int16x8_t v253;
  int16x8_t v254;
  int16x8_t v255;
  int16x8_t v256;
  int16x8_t v257;
  int32x4_t *v258;
  int32x4_t v259;
  int32x4_t *v260;
  int32x4_t v261;
  int32x4_t *v262;
  int32x4_t v263;
  int32x4_t *v264;
  int32x4_t v265;
  int32x4_t *v266;
  int32x4_t v267;
  int32x4_t *v268;
  int32x4_t v269;
  int32x4_t *v270;
  int32x4_t v271;
  int32x4_t *v272;
  int32x4_t v273;
  int16x8_t v274;
  int16x8_t v275;
  int16x8_t v276;
  int16x8_t v277;
  int16x8_t v278;
  int16x8_t v279;
  int16x8_t v280;
  int16x8_t v281;
  int32x4_t *v282;
  int32x4_t v283;
  int32x4_t *v284;
  int32x4_t v285;
  int32x4_t *v286;
  int32x4_t v287;
  int32x4_t *v288;
  int32x4_t v289;
  int32x4_t *v290;
  int32x4_t v291;
  int32x4_t *v292;
  int32x4_t v293;
  int32x4_t *v294;
  int32x4_t v295;
  int32x4_t *v296;
  int32x4_t v297;
  int16x8_t v298;
  int16x8_t v299;
  int16x8_t v300;
  int16x8_t v301;
  int16x8_t v302;
  int16x8_t v303;
  int16x8_t v304;
  int16x8_t v305;
  int32x4_t *v306;
  int32x4_t v307;
  int32x4_t *v308;
  int32x4_t v309;
  int32x4_t *v310;
  int32x4_t v311;
  int32x4_t *v312;
  int32x4_t v313;
  int32x4_t *v314;
  int32x4_t v315;
  int32x4_t *v316;
  int32x4_t v317;
  int32x4_t v318;
  int16x8_t v319;
  int16x8_t v320;
  int16x8_t v321;
  int16x8_t v322;
  int16x8_t v323;
  int16x8_t v324;
  int16x8_t v325;
  int16x8_t v326;
  int32x4_t *v327;
  int32x4_t *v328;
  int32x4_t v329;
  int32x4_t *v330;
  int32x4_t v331;
  int32x4_t *v332;
  int32x4_t v333;
  int32x4_t *v334;
  int32x4_t v335;
  int32x4_t *v336;
  int32x4_t v337;
  int32x4_t *v338;
  int32x4_t v339;
  int32x4_t *v340;
  int32x4_t v341;
  int32x4_t *v342;
  int32x4_t v343;
  int16x8_t v344;
  int16x8_t v345;
  int16x8_t v346;
  int16x8_t v347;
  int16x8_t v348;
  int16x8_t v349;
  int16x8_t v350;
  int16x8_t v351;
  int32x4_t *v352;
  int32x4_t v353;
  int32x4_t *v354;
  int32x4_t v355;
  int32x4_t *v356;
  int32x4_t v357;
  int32x4_t *v358;
  int32x4_t v359;
  int32x4_t *v360;
  int32x4_t v361;
  int32x4_t *v362;
  int32x4_t v363;
  int32x4_t v364;
  int16x8_t v365;
  int16x8_t v366;
  int16x8_t v367;
  int16x8_t v368;
  int16x8_t v369;
  int16x8_t v370;
  int16x8_t v371;
  int16x8_t v372;
  int32x4_t *v373;
  int32x4_t v374;
  int32x4_t *v375;
  int32x4_t v376;
  int32x4_t *v377;
  int32x4_t v378;
  int32x4_t *v379;
  int32x4_t v380;
  int32x4_t *v381;
  int32x4_t v382;
  int32x4_t *v383;
  int32x4_t v384;
  int32x4_t *v385;
  int32x4_t v386;
  int32x4_t *v387;
  int32x4_t v388;
  int16x8_t v389;
  int16x8_t v390;
  int16x8_t v391;
  int16x8_t v392;
  int16x8_t v393;
  int16x8_t v394;
  int16x8_t v395;
  int16x8_t v396;
  int32x4_t *v397;
  int32x4_t v398;
  int32x4_t *v399;
  int32x4_t v400;
  int32x4_t *v401;
  int32x4_t v402;
  int32x4_t *v403;
  int32x4_t v404;
  int32x4_t *v405;
  int32x4_t v406;
  int32x4_t *v407;
  int32x4_t v408;
  int32x4_t v409;
  int16x8_t v410;
  int16x8_t v411;
  int16x8_t v412;
  int16x8_t v413;
  int16x8_t v414;
  int16x8_t v415;
  int16x8_t v416;
  int16x8_t v417;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3) & 0x7FFFFFE0u) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4) & 0x7FFFFFE0u) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = 2 * a8;
    v47 = a2 + a9 * a7;
    do
    {
      v48 = 0;
      v49 = (int32x4_t *)(v47 + v46);
      v50 = v30;
      do
      {
        v51 = (int16x8_t *)(result + 2 * (v50 + v40));
        v53 = *(int32x4_t *)((char *)v49 + a7);
        v52 = (int32x4_t *)((char *)v49 + a7 + a7);
        v55 = *v52;
        v54 = (int32x4_t *)((char *)v52 + a7);
        v57 = *v54;
        v56 = (int32x4_t *)((char *)v54 + a7);
        v59 = *v56;
        v58 = (int32x4_t *)((char *)v56 + a7);
        v61 = *v58;
        v60 = (int32x4_t *)((char *)v58 + a7);
        v63 = *v60;
        v62 = (int32x4_t *)((char *)v60 + a7);
        v65 = *v62;
        v64 = (int32x4_t *)((char *)v62 + a7);
        v66 = (int16x8_t)vzip1q_s32(v59, v63);
        v67 = (int16x8_t)vzip2q_s32(v59, v63);
        v68 = (int16x8_t)vzip1q_s32(v61, v65);
        v69 = (int16x8_t)vzip2q_s32(v61, v65);
        v70 = (int16x8_t)vzip1q_s32(*v49, v55);
        v71 = (int16x8_t)vzip2q_s32(*v49, v55);
        v72 = (int16x8_t)vzip1q_s32(v53, v57);
        v73 = (int16x8_t)vzip2q_s32(v53, v57);
        *v51 = vzip1q_s16(v70, v72);
        v51[1] = vzip2q_s16(v70, v72);
        v51[2] = vzip1q_s16(v66, v68);
        v51[3] = vzip2q_s16(v66, v68);
        v51 += 4;
        *v51 = vzip1q_s16(v71, v73);
        v51[1] = vzip2q_s16(v71, v73);
        v51[2] = vzip1q_s16(v67, v69);
        v51[3] = vzip2q_s16(v67, v69);
        v51 += 4;
        v75 = *v64;
        v74 = (int32x4_t *)((char *)v64 + a7);
        v77 = *v74;
        v76 = (int32x4_t *)((char *)v74 + a7);
        v79 = *v76;
        v78 = (int32x4_t *)((char *)v76 + a7);
        v81 = *v78;
        v80 = (int32x4_t *)((char *)v78 + a7);
        v83 = *v80;
        v82 = (int32x4_t *)((char *)v80 + a7);
        v85 = *v82;
        v84 = (int32x4_t *)((char *)v82 + a7);
        v87 = *v84;
        v86 = (int32x4_t *)((char *)v84 + a7);
        v89 = *v86;
        v88 = (int32x4_t *)((char *)v86 + a7);
        v90 = (int16x8_t)vzip1q_s32(v83, v87);
        v91 = (int16x8_t)vzip2q_s32(v83, v87);
        v92 = (int16x8_t)vzip1q_s32(v85, v89);
        v93 = (int16x8_t)vzip2q_s32(v85, v89);
        v94 = (int16x8_t)vzip1q_s32(v75, v79);
        v95 = (int16x8_t)vzip2q_s32(v75, v79);
        v96 = (int16x8_t)vzip1q_s32(v77, v81);
        v97 = (int16x8_t)vzip2q_s32(v77, v81);
        *v51 = vzip1q_s16(v94, v96);
        v51[1] = vzip2q_s16(v94, v96);
        v51[2] = vzip1q_s16(v90, v92);
        v51[3] = vzip2q_s16(v90, v92);
        v51 += 4;
        *v51 = vzip1q_s16(v95, v97);
        v51[1] = vzip2q_s16(v95, v97);
        v51[2] = vzip1q_s16(v91, v93);
        v51[3] = vzip2q_s16(v91, v93);
        v51 += 4;
        v99 = v49[1];
        v98 = (int32x4_t *)((char *)v49 + a7 + 16);
        v101 = *v98;
        v100 = (int32x4_t *)((char *)v98 + a7);
        v103 = *v100;
        v102 = (int32x4_t *)((char *)v100 + a7);
        v105 = *v102;
        v104 = (int32x4_t *)((char *)v102 + a7);
        v107 = *v104;
        v106 = (int32x4_t *)((char *)v104 + a7);
        v109 = *v106;
        v108 = (int32x4_t *)((char *)v106 + a7);
        v111 = *v108;
        v110 = (int32x4_t *)((char *)v108 + a7);
        v113 = *v110;
        v112 = (int32x4_t *)((char *)v110 + a7);
        v114 = (int16x8_t)vzip1q_s32(v107, v111);
        v115 = (int16x8_t)vzip2q_s32(v107, v111);
        v116 = (int16x8_t)vzip1q_s32(v109, v113);
        v117 = (int16x8_t)vzip2q_s32(v109, v113);
        v118 = (int16x8_t)vzip1q_s32(v99, v103);
        v119 = (int16x8_t)vzip2q_s32(v99, v103);
        v120 = (int16x8_t)vzip1q_s32(v101, v105);
        v121 = (int16x8_t)vzip2q_s32(v101, v105);
        *v51 = vzip1q_s16(v118, v120);
        v51[1] = vzip2q_s16(v118, v120);
        v51[2] = vzip1q_s16(v114, v116);
        v51[3] = vzip2q_s16(v114, v116);
        v51 += 4;
        *v51 = vzip1q_s16(v119, v121);
        v51[1] = vzip2q_s16(v119, v121);
        v51[2] = vzip1q_s16(v115, v117);
        v51[3] = vzip2q_s16(v115, v117);
        v51 += 4;
        v123 = *v112;
        v122 = (int32x4_t *)((char *)v112 + a7);
        v125 = *v122;
        v124 = (int32x4_t *)((char *)v122 + a7);
        v127 = *v124;
        v126 = (int32x4_t *)((char *)v124 + a7);
        v129 = *v126;
        v128 = (int32x4_t *)((char *)v126 + a7);
        v131 = *v128;
        v130 = (int32x4_t *)((char *)v128 + a7);
        v133 = *v130;
        v132 = (int32x4_t *)((char *)v130 + a7);
        v134 = *(int32x4_t *)((char *)v132 + a7);
        v135 = (int16x8_t)vzip1q_s32(v131, *v132);
        v136 = (int16x8_t)vzip2q_s32(v131, *v132);
        v137 = (int16x8_t)vzip1q_s32(v133, v134);
        v138 = (int16x8_t)vzip2q_s32(v133, v134);
        v139 = (int16x8_t)vzip1q_s32(v123, v127);
        v140 = (int16x8_t)vzip2q_s32(v123, v127);
        v141 = (int16x8_t)vzip1q_s32(v125, v129);
        v142 = (int16x8_t)vzip2q_s32(v125, v129);
        *v51 = vzip1q_s16(v139, v141);
        v51[1] = vzip2q_s16(v139, v141);
        v51[2] = vzip1q_s16(v135, v137);
        v51[3] = vzip2q_s16(v135, v137);
        v51 += 4;
        *v51 = vzip1q_s16(v140, v142);
        v51[1] = vzip2q_s16(v140, v142);
        v51[2] = vzip1q_s16(v136, v138);
        v51[3] = vzip2q_s16(v136, v138);
        v51 += 4;
        v143 = v88 + 1;
        v145 = *v88;
        v144 = (int32x4_t *)((char *)v88 + a7);
        v147 = *v144;
        v146 = (int32x4_t *)((char *)v144 + a7);
        v149 = *v146;
        v148 = (int32x4_t *)((char *)v146 + a7);
        v151 = *v148;
        v150 = (int32x4_t *)((char *)v148 + a7);
        v153 = *v150;
        v152 = (int32x4_t *)((char *)v150 + a7);
        v155 = *v152;
        v154 = (int32x4_t *)((char *)v152 + a7);
        v157 = *v154;
        v156 = (int32x4_t *)((char *)v154 + a7);
        v159 = *v156;
        v158 = (int32x4_t *)((char *)v156 + a7);
        v160 = (int16x8_t)vzip1q_s32(v153, v157);
        v161 = (int16x8_t)vzip2q_s32(v153, v157);
        v162 = (int16x8_t)vzip1q_s32(v155, v159);
        v163 = (int16x8_t)vzip2q_s32(v155, v159);
        v164 = (int16x8_t)vzip1q_s32(v145, v149);
        v165 = (int16x8_t)vzip2q_s32(v145, v149);
        v166 = (int16x8_t)vzip1q_s32(v147, v151);
        v167 = (int16x8_t)vzip2q_s32(v147, v151);
        *v51 = vzip1q_s16(v164, v166);
        v51[1] = vzip2q_s16(v164, v166);
        v51[2] = vzip1q_s16(v160, v162);
        v51[3] = vzip2q_s16(v160, v162);
        v51 += 4;
        *v51 = vzip1q_s16(v165, v167);
        v51[1] = vzip2q_s16(v165, v167);
        v51[2] = vzip1q_s16(v161, v163);
        v51[3] = vzip2q_s16(v161, v163);
        v51 += 4;
        v169 = *v158;
        v168 = (int32x4_t *)((char *)v158 + a7);
        v171 = *v168;
        v170 = (int32x4_t *)((char *)v168 + a7);
        v173 = *v170;
        v172 = (int32x4_t *)((char *)v170 + a7);
        v175 = *v172;
        v174 = (int32x4_t *)((char *)v172 + a7);
        v177 = *v174;
        v176 = (int32x4_t *)((char *)v174 + a7);
        v179 = *v176;
        v178 = (int32x4_t *)((char *)v176 + a7);
        v180 = *(int32x4_t *)((char *)v178 + a7);
        v181 = (int16x8_t)vzip1q_s32(v177, *v178);
        v182 = (int16x8_t)vzip2q_s32(v177, *v178);
        v183 = (int16x8_t)vzip1q_s32(v179, v180);
        v184 = (int16x8_t)vzip2q_s32(v179, v180);
        v185 = (int16x8_t)vzip1q_s32(v169, v173);
        v186 = (int16x8_t)vzip2q_s32(v169, v173);
        v187 = (int16x8_t)vzip1q_s32(v171, v175);
        v188 = (int16x8_t)vzip2q_s32(v171, v175);
        *v51 = vzip1q_s16(v185, v187);
        v51[1] = vzip2q_s16(v185, v187);
        v51[2] = vzip1q_s16(v181, v183);
        v51[3] = vzip2q_s16(v181, v183);
        v51 += 4;
        *v51 = vzip1q_s16(v186, v188);
        v51[1] = vzip2q_s16(v186, v188);
        v51[2] = vzip1q_s16(v182, v184);
        v51[3] = vzip2q_s16(v182, v184);
        v51 += 4;
        v190 = *v143;
        v189 = (int32x4_t *)((char *)v143 + a7);
        v192 = *v189;
        v191 = (int32x4_t *)((char *)v189 + a7);
        v194 = *v191;
        v193 = (int32x4_t *)((char *)v191 + a7);
        v196 = *v193;
        v195 = (int32x4_t *)((char *)v193 + a7);
        v198 = *v195;
        v197 = (int32x4_t *)((char *)v195 + a7);
        v200 = *v197;
        v199 = (int32x4_t *)((char *)v197 + a7);
        v202 = *v199;
        v201 = (int32x4_t *)((char *)v199 + a7);
        v204 = *v201;
        v203 = (int32x4_t *)((char *)v201 + a7);
        v205 = (int16x8_t)vzip1q_s32(v198, v202);
        v206 = (int16x8_t)vzip2q_s32(v198, v202);
        v207 = (int16x8_t)vzip1q_s32(v200, v204);
        v208 = (int16x8_t)vzip2q_s32(v200, v204);
        v209 = (int16x8_t)vzip1q_s32(v190, v194);
        v210 = (int16x8_t)vzip2q_s32(v190, v194);
        v211 = (int16x8_t)vzip1q_s32(v192, v196);
        v212 = (int16x8_t)vzip2q_s32(v192, v196);
        *v51 = vzip1q_s16(v209, v211);
        v51[1] = vzip2q_s16(v209, v211);
        v51[2] = vzip1q_s16(v205, v207);
        v51[3] = vzip2q_s16(v205, v207);
        v51 += 4;
        *v51 = vzip1q_s16(v210, v212);
        v51[1] = vzip2q_s16(v210, v212);
        v51[2] = vzip1q_s16(v206, v208);
        v51[3] = vzip2q_s16(v206, v208);
        v51 += 4;
        v214 = *v203;
        v213 = (int32x4_t *)((char *)v203 + a7);
        v216 = *v213;
        v215 = (int32x4_t *)((char *)v213 + a7);
        v218 = *v215;
        v217 = (int32x4_t *)((char *)v215 + a7);
        v220 = *v217;
        v219 = (int32x4_t *)((char *)v217 + a7);
        v222 = *v219;
        v221 = (int32x4_t *)((char *)v219 + a7);
        v224 = *v221;
        v223 = (int32x4_t *)((char *)v221 + a7);
        v225 = *(int32x4_t *)((char *)v223 + a7);
        v226 = (int16x8_t)vzip1q_s32(v222, *v223);
        v227 = (int16x8_t)vzip2q_s32(v222, *v223);
        v228 = (int16x8_t)vzip1q_s32(v224, v225);
        v229 = (int16x8_t)vzip2q_s32(v224, v225);
        v230 = (int16x8_t)vzip1q_s32(v214, v218);
        v231 = (int16x8_t)vzip2q_s32(v214, v218);
        v232 = (int16x8_t)vzip1q_s32(v216, v220);
        v233 = (int16x8_t)vzip2q_s32(v216, v220);
        *v51 = vzip1q_s16(v230, v232);
        v51[1] = vzip2q_s16(v230, v232);
        v51[2] = vzip1q_s16(v226, v228);
        v51[3] = vzip2q_s16(v226, v228);
        v51 += 4;
        *v51 = vzip1q_s16(v231, v233);
        v51[1] = vzip2q_s16(v231, v233);
        v51[2] = vzip1q_s16(v227, v229);
        v51[3] = vzip2q_s16(v227, v229);
        v51 += 4;
        v235 = v49[2];
        v234 = (int32x4_t *)((char *)v49 + a7 + 32);
        v237 = *v234;
        v236 = (int32x4_t *)((char *)v234 + a7);
        v239 = *v236;
        v238 = (int32x4_t *)((char *)v236 + a7);
        v241 = *v238;
        v240 = (int32x4_t *)((char *)v238 + a7);
        v243 = *v240;
        v242 = (int32x4_t *)((char *)v240 + a7);
        v245 = *v242;
        v244 = (int32x4_t *)((char *)v242 + a7);
        v247 = *v244;
        v246 = (int32x4_t *)((char *)v244 + a7);
        v249 = *v246;
        v248 = (int32x4_t *)((char *)v246 + a7);
        v250 = (int16x8_t)vzip1q_s32(v243, v247);
        v251 = (int16x8_t)vzip2q_s32(v243, v247);
        v252 = (int16x8_t)vzip1q_s32(v245, v249);
        v253 = (int16x8_t)vzip2q_s32(v245, v249);
        v254 = (int16x8_t)vzip1q_s32(v235, v239);
        v255 = (int16x8_t)vzip2q_s32(v235, v239);
        v256 = (int16x8_t)vzip1q_s32(v237, v241);
        v257 = (int16x8_t)vzip2q_s32(v237, v241);
        *v51 = vzip1q_s16(v254, v256);
        v51[1] = vzip2q_s16(v254, v256);
        v51[2] = vzip1q_s16(v250, v252);
        v51[3] = vzip2q_s16(v250, v252);
        v51 += 4;
        *v51 = vzip1q_s16(v255, v257);
        v51[1] = vzip2q_s16(v255, v257);
        v51[2] = vzip1q_s16(v251, v253);
        v51[3] = vzip2q_s16(v251, v253);
        v51 += 4;
        v259 = *v248;
        v258 = (int32x4_t *)((char *)v248 + a7);
        v261 = *v258;
        v260 = (int32x4_t *)((char *)v258 + a7);
        v263 = *v260;
        v262 = (int32x4_t *)((char *)v260 + a7);
        v265 = *v262;
        v264 = (int32x4_t *)((char *)v262 + a7);
        v267 = *v264;
        v266 = (int32x4_t *)((char *)v264 + a7);
        v269 = *v266;
        v268 = (int32x4_t *)((char *)v266 + a7);
        v271 = *v268;
        v270 = (int32x4_t *)((char *)v268 + a7);
        v273 = *v270;
        v272 = (int32x4_t *)((char *)v270 + a7);
        v274 = (int16x8_t)vzip1q_s32(v267, v271);
        v275 = (int16x8_t)vzip2q_s32(v267, v271);
        v276 = (int16x8_t)vzip1q_s32(v269, v273);
        v277 = (int16x8_t)vzip2q_s32(v269, v273);
        v278 = (int16x8_t)vzip1q_s32(v259, v263);
        v279 = (int16x8_t)vzip2q_s32(v259, v263);
        v280 = (int16x8_t)vzip1q_s32(v261, v265);
        v281 = (int16x8_t)vzip2q_s32(v261, v265);
        *v51 = vzip1q_s16(v278, v280);
        v51[1] = vzip2q_s16(v278, v280);
        v51[2] = vzip1q_s16(v274, v276);
        v51[3] = vzip2q_s16(v274, v276);
        v51 += 4;
        *v51 = vzip1q_s16(v279, v281);
        v51[1] = vzip2q_s16(v279, v281);
        v51[2] = vzip1q_s16(v275, v277);
        v51[3] = vzip2q_s16(v275, v277);
        v51 += 4;
        v283 = v49[3];
        v282 = (int32x4_t *)((char *)v49 + a7 + 48);
        v285 = *v282;
        v284 = (int32x4_t *)((char *)v282 + a7);
        v287 = *v284;
        v286 = (int32x4_t *)((char *)v284 + a7);
        v289 = *v286;
        v288 = (int32x4_t *)((char *)v286 + a7);
        v291 = *v288;
        v290 = (int32x4_t *)((char *)v288 + a7);
        v293 = *v290;
        v292 = (int32x4_t *)((char *)v290 + a7);
        v295 = *v292;
        v294 = (int32x4_t *)((char *)v292 + a7);
        v297 = *v294;
        v296 = (int32x4_t *)((char *)v294 + a7);
        v298 = (int16x8_t)vzip1q_s32(v291, v295);
        v299 = (int16x8_t)vzip2q_s32(v291, v295);
        v300 = (int16x8_t)vzip1q_s32(v293, v297);
        v301 = (int16x8_t)vzip2q_s32(v293, v297);
        v302 = (int16x8_t)vzip1q_s32(v283, v287);
        v303 = (int16x8_t)vzip2q_s32(v283, v287);
        v304 = (int16x8_t)vzip1q_s32(v285, v289);
        v305 = (int16x8_t)vzip2q_s32(v285, v289);
        *v51 = vzip1q_s16(v302, v304);
        v51[1] = vzip2q_s16(v302, v304);
        v51[2] = vzip1q_s16(v298, v300);
        v51[3] = vzip2q_s16(v298, v300);
        v51 += 4;
        *v51 = vzip1q_s16(v303, v305);
        v51[1] = vzip2q_s16(v303, v305);
        v51[2] = vzip1q_s16(v299, v301);
        v51[3] = vzip2q_s16(v299, v301);
        v51 += 4;
        v307 = *v296;
        v306 = (int32x4_t *)((char *)v296 + a7);
        v309 = *v306;
        v308 = (int32x4_t *)((char *)v306 + a7);
        v311 = *v308;
        v310 = (int32x4_t *)((char *)v308 + a7);
        v313 = *v310;
        v312 = (int32x4_t *)((char *)v310 + a7);
        v315 = *v312;
        v314 = (int32x4_t *)((char *)v312 + a7);
        v317 = *v314;
        v316 = (int32x4_t *)((char *)v314 + a7);
        v318 = *(int32x4_t *)((char *)v316 + a7);
        v319 = (int16x8_t)vzip1q_s32(v315, *v316);
        v320 = (int16x8_t)vzip2q_s32(v315, *v316);
        v321 = (int16x8_t)vzip1q_s32(v317, v318);
        v322 = (int16x8_t)vzip2q_s32(v317, v318);
        v323 = (int16x8_t)vzip1q_s32(v307, v311);
        v324 = (int16x8_t)vzip2q_s32(v307, v311);
        v325 = (int16x8_t)vzip1q_s32(v309, v313);
        v326 = (int16x8_t)vzip2q_s32(v309, v313);
        *v51 = vzip1q_s16(v323, v325);
        v51[1] = vzip2q_s16(v323, v325);
        v51[2] = vzip1q_s16(v319, v321);
        v51[3] = vzip2q_s16(v319, v321);
        v51 += 4;
        *v51 = vzip1q_s16(v324, v326);
        v51[1] = vzip2q_s16(v324, v326);
        v51[2] = vzip1q_s16(v320, v322);
        v51[3] = vzip2q_s16(v320, v322);
        v51 += 4;
        v327 = v272 + 1;
        v329 = *v272;
        v328 = (int32x4_t *)((char *)v272 + a7);
        v331 = *v328;
        v330 = (int32x4_t *)((char *)v328 + a7);
        v333 = *v330;
        v332 = (int32x4_t *)((char *)v330 + a7);
        v335 = *v332;
        v334 = (int32x4_t *)((char *)v332 + a7);
        v337 = *v334;
        v336 = (int32x4_t *)((char *)v334 + a7);
        v339 = *v336;
        v338 = (int32x4_t *)((char *)v336 + a7);
        v341 = *v338;
        v340 = (int32x4_t *)((char *)v338 + a7);
        v343 = *v340;
        v342 = (int32x4_t *)((char *)v340 + a7);
        v344 = (int16x8_t)vzip1q_s32(v337, v341);
        v345 = (int16x8_t)vzip2q_s32(v337, v341);
        v346 = (int16x8_t)vzip1q_s32(v339, v343);
        v347 = (int16x8_t)vzip2q_s32(v339, v343);
        v348 = (int16x8_t)vzip1q_s32(v329, v333);
        v349 = (int16x8_t)vzip2q_s32(v329, v333);
        v350 = (int16x8_t)vzip1q_s32(v331, v335);
        v351 = (int16x8_t)vzip2q_s32(v331, v335);
        *v51 = vzip1q_s16(v348, v350);
        v51[1] = vzip2q_s16(v348, v350);
        v51[2] = vzip1q_s16(v344, v346);
        v51[3] = vzip2q_s16(v344, v346);
        v51 += 4;
        *v51 = vzip1q_s16(v349, v351);
        v51[1] = vzip2q_s16(v349, v351);
        v51[2] = vzip1q_s16(v345, v347);
        v51[3] = vzip2q_s16(v345, v347);
        v51 += 4;
        v353 = *v342;
        v352 = (int32x4_t *)((char *)v342 + a7);
        v355 = *v352;
        v354 = (int32x4_t *)((char *)v352 + a7);
        v357 = *v354;
        v356 = (int32x4_t *)((char *)v354 + a7);
        v359 = *v356;
        v358 = (int32x4_t *)((char *)v356 + a7);
        v361 = *v358;
        v360 = (int32x4_t *)((char *)v358 + a7);
        v363 = *v360;
        v362 = (int32x4_t *)((char *)v360 + a7);
        v364 = *(int32x4_t *)((char *)v362 + a7);
        v365 = (int16x8_t)vzip1q_s32(v361, *v362);
        v366 = (int16x8_t)vzip2q_s32(v361, *v362);
        v367 = (int16x8_t)vzip1q_s32(v363, v364);
        v368 = (int16x8_t)vzip2q_s32(v363, v364);
        v369 = (int16x8_t)vzip1q_s32(v353, v357);
        v370 = (int16x8_t)vzip2q_s32(v353, v357);
        v371 = (int16x8_t)vzip1q_s32(v355, v359);
        v372 = (int16x8_t)vzip2q_s32(v355, v359);
        *v51 = vzip1q_s16(v369, v371);
        v51[1] = vzip2q_s16(v369, v371);
        v51[2] = vzip1q_s16(v365, v367);
        v51[3] = vzip2q_s16(v365, v367);
        v51 += 4;
        *v51 = vzip1q_s16(v370, v372);
        v51[1] = vzip2q_s16(v370, v372);
        v51[2] = vzip1q_s16(v366, v368);
        v51[3] = vzip2q_s16(v366, v368);
        v51 += 4;
        v374 = *v327;
        v373 = (int32x4_t *)((char *)v327 + a7);
        v376 = *v373;
        v375 = (int32x4_t *)((char *)v373 + a7);
        v378 = *v375;
        v377 = (int32x4_t *)((char *)v375 + a7);
        v380 = *v377;
        v379 = (int32x4_t *)((char *)v377 + a7);
        v382 = *v379;
        v381 = (int32x4_t *)((char *)v379 + a7);
        v384 = *v381;
        v383 = (int32x4_t *)((char *)v381 + a7);
        v386 = *v383;
        v385 = (int32x4_t *)((char *)v383 + a7);
        v388 = *v385;
        v387 = (int32x4_t *)((char *)v385 + a7);
        v389 = (int16x8_t)vzip1q_s32(v382, v386);
        v390 = (int16x8_t)vzip2q_s32(v382, v386);
        v391 = (int16x8_t)vzip1q_s32(v384, v388);
        v392 = (int16x8_t)vzip2q_s32(v384, v388);
        v393 = (int16x8_t)vzip1q_s32(v374, v378);
        v394 = (int16x8_t)vzip2q_s32(v374, v378);
        v395 = (int16x8_t)vzip1q_s32(v376, v380);
        v396 = (int16x8_t)vzip2q_s32(v376, v380);
        *v51 = vzip1q_s16(v393, v395);
        v51[1] = vzip2q_s16(v393, v395);
        v51[2] = vzip1q_s16(v389, v391);
        v51[3] = vzip2q_s16(v389, v391);
        v51 += 4;
        *v51 = vzip1q_s16(v394, v396);
        v51[1] = vzip2q_s16(v394, v396);
        v51[2] = vzip1q_s16(v390, v392);
        v51[3] = vzip2q_s16(v390, v392);
        v51 += 4;
        v398 = *v387;
        v397 = (int32x4_t *)((char *)v387 + a7);
        v400 = *v397;
        v399 = (int32x4_t *)((char *)v397 + a7);
        v402 = *v399;
        v401 = (int32x4_t *)((char *)v399 + a7);
        v404 = *v401;
        v403 = (int32x4_t *)((char *)v401 + a7);
        v406 = *v403;
        v405 = (int32x4_t *)((char *)v403 + a7);
        v408 = *v405;
        v407 = (int32x4_t *)((char *)v405 + a7);
        v409 = *(int32x4_t *)((char *)v407 + a7);
        v410 = (int16x8_t)vzip1q_s32(v406, *v407);
        v411 = (int16x8_t)vzip2q_s32(v406, *v407);
        v412 = (int16x8_t)vzip1q_s32(v408, v409);
        v413 = (int16x8_t)vzip2q_s32(v408, v409);
        v414 = (int16x8_t)vzip1q_s32(v398, v402);
        v415 = (int16x8_t)vzip2q_s32(v398, v402);
        v416 = (int16x8_t)vzip1q_s32(v400, v404);
        v417 = (int16x8_t)vzip2q_s32(v400, v404);
        *v51 = vzip1q_s16(v414, v416);
        v51[1] = vzip2q_s16(v414, v416);
        v51[2] = vzip1q_s16(v410, v412);
        v51[3] = vzip2q_s16(v410, v412);
        v51 += 4;
        *v51 = vzip1q_s16(v415, v417);
        v51[1] = vzip2q_s16(v415, v417);
        v51[2] = vzip1q_s16(v411, v413);
        v51[3] = vzip2q_s16(v411, v413);
        v50 = (v50 - v12) & v12;
        v48 += 32;
        v49 += 4;
      }
      while (v48 < a10);
      v40 = (v40 - v23) & v23;
      v47 += 32 * a7;
      v45 += 32;
    }
    while (v45 < a11);
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, uint64_t a11, unsigned __int16 *a12, uint64_t a13)
{
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  char v20;
  unsigned int v21;
  char v22;
  int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  BOOL v29;
  unsigned int v30;
  BOOL v31;
  char v32;
  char v33;
  int v34;
  char v35;
  unsigned int v36;
  BOOL v37;
  BOOL v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  BOOL v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  BOOL v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  char v83;
  int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  BOOL v99;
  int v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  BOOL v112;
  BOOL v113;
  int v114;
  int v115;
  int v116;
  int v117;
  BOOL v118;
  BOOL v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  char v131;
  int v132;
  int v133;
  unsigned int v135;
  unsigned int v136;
  char v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  int v151;
  int v152;
  int v153;
  unsigned int v154;
  unsigned int v156;
  BOOL v157;
  BOOL v158;
  int v159;
  int v160;
  uint64_t v161;
  char v162[16];
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned __int8 v170;

  if (result && a2)
  {
    v16 = a11;
    v17 = a10;
    if (a12)
    {
      v18 = a7;
      v161 = result;
      if (*((_BYTE *)a12 + 20))
      {
        result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), *(_DWORD *)(a13 + 8), *(_DWORD *)(a13 + 12), *(_DWORD *)(a13 + 4), *(_DWORD *)a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v162);
        v19 = *((_BYTE *)a12 + 13);
        v20 = *((_BYTE *)a12 + 12);
        v130 = a2;
        if (1 << v19 >= a6 || a5 >> v20)
        {
          v79 = a6 >> v19;
          v80 = 1 << v20;
          v81 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
          if (a6 < 2)
            v81 = 0;
          v82 = v80 >= a5;
          if (v80 < a5)
            v83 = v20 + v19 + v81;
          else
            v83 = *((_BYTE *)a12 + 12);
          if (v82)
            LOBYTE(v84) = *((_BYTE *)a12 + 13);
          else
            v84 = -v81;
          if (!v79)
            v20 = v83;
          v131 = v20;
          if (v79)
            v22 = *((_BYTE *)a12 + 13);
          else
            v22 = v84;
        }
        else
        {
          v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
          if (a5 < 2)
            LOBYTE(v21) = 0;
          v131 = v21;
          v22 = v20 + v19 - v21;
        }
        v85 = v161;
        v129 = v168;
        if (v168)
        {
          v86 = 1 << v131;
          v87 = 1 << v22;
          v88 = v169;
          v160 = v166;
          v158 = v166 != 0;
          v159 = v167;
          v157 = v167 != 0;
          v128 = 1 << v131;
          if (1 << v131 >= a5)
            v86 = a5;
          v145 = v86;
          v147 = 1 << v22;
          if (v87 >= a6)
            v87 = a6;
          v143 = v87;
          if (v169)
          {
            v89 = 0;
            v90 = 0;
            v141 = a8 >> v22;
            v91 = v164;
            v92 = v165;
            v93 = v170;
            v126 = v163;
            v127 = a7 >> v131;
            v94 = v167 | v166;
            v125 = a9 + a7;
            v139 = a10 + a8;
            do
            {
              v133 = v90;
              v95 = 0;
              v96 = 0;
              v97 = a9;
              if (v125 >= (v89 + v127 + 1) << v131)
                v97 = v128 - ((v128 - 1) & a7);
              v98 = 1 << v131;
              if (v125 < (v89 + v127 + 1) << v131)
                v98 = (v128 - 1) & (a9 + a7);
              v99 = (v89 + v127) << v131 >= v18;
              v100 = v126 + v89;
              v101 = v89 << v131;
              if (v99)
                v102 = v98;
              else
                v102 = v97;
              v103 = (v128 - 1) & a7;
              if (v99)
                v103 = 0;
              v152 = v103;
              v154 = v102;
              v150 = (v103 + v101) + v130;
              do
              {
                v108 = v91 + v95;
                if (v93)
                {
                  if (!v94)
                    goto LABEL_156;
                  v109 = 0;
                  v110 = 0;
                  v111 = 1;
                  v112 = v157;
                  v113 = v158;
                  v114 = v160;
                  v115 = v159;
                  do
                  {
                    --v114;
                    if (v113)
                      v110 |= (v111 & v100) << v109;
                    else
                      v114 = 0;
                    if (v113)
                      ++v109;
                    --v115;
                    if (v112)
                      v110 |= (v111 & v108) << v109;
                    else
                      v115 = 0;
                    if (v112)
                      ++v109;
                    v111 *= 2;
                    --v109;
                    v112 = v115 != 0;
                    v113 = v114 != 0;
                  }
                  while (v115 | v114);
                }
                else
                {
                  if (!v94)
                  {
LABEL_156:
                    v110 = 0;
                    goto LABEL_157;
                  }
                  v116 = 0;
                  v110 = 0;
                  v117 = 1;
                  v119 = v157;
                  v118 = v158;
                  v120 = v159;
                  v121 = v160;
                  do
                  {
                    --v120;
                    if (v119)
                      v110 |= (v117 & v108) << v116;
                    else
                      v120 = 0;
                    if (v119)
                      ++v116;
                    --v121;
                    if (v118)
                      v110 |= (v117 & v100) << v116;
                    else
                      v121 = 0;
                    if (v118)
                      ++v116;
                    v117 *= 2;
                    --v116;
                    v118 = v121 != 0;
                    v119 = v120 != 0;
                  }
                  while (v121 | v120);
                }
LABEL_157:
                v122 = *(_DWORD *)(v85 + 4 * ((v110 + v92) | ((v110 + v92) >> 8 << 9)));
                if (v122 < 0)
                {
                  v123 = v85 - *(_QWORD *)(a13 + 24) + ((unint64_t)(v122 & 0x3FFFFFF) << 14);
                  v124 = *(_DWORD *)(a13 + 8);
                  if (*(_DWORD *)a13 > v124)
                    v123 += get_level_offset_within_tail(*(_DWORD *)a13, v124, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                  v104 = a10;
                  if (v139 >= (v95 + v141 + 1) << v22)
                    v104 = v147 - ((v147 - 1) & a8);
                  v105 = 1 << v22;
                  if (v139 < (v95 + v141 + 1) << v22)
                    v105 = (v147 - 1) & (a10 + a8);
                  v106 = (v147 - 1) & a8;
                  if ((v95 + v141) << v22 < a8)
                  {
                    v107 = v104;
                  }
                  else
                  {
                    v106 = 0;
                    v107 = v105;
                  }
                  result = agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)0>>(v123, v150 + (v106 + (v95 << v22)) * a11, v145, v143, v154, v107, a11, v152, v106);
                  v85 = v161;
                }
                v95 = (unsigned __int16)++v96;
              }
              while (v88 > (unsigned __int16)v96);
              v18 = a7;
              v90 = v133 + 1;
              v89 = (unsigned __int16)(v133 + 1);
            }
            while (v129 > v89);
          }
        }
      }
      else
      {
        LOBYTE(v23) = *((_BYTE *)a12 + 13);
        v24 = *((_BYTE *)a12 + 12);
        v25 = 1 << v23;
        v26 = a5 >> v24;
        v27 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
        if (a6 < 2)
          v27 = 0;
        v28 = v24 + v23;
        if (a6 >> v23)
          v29 = 1;
        else
          v29 = 1 << v24 >= a5;
        if (!v29)
        {
          v24 += v23 + v27;
          v23 = -v27;
        }
        v30 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
        if (a5 < 2)
          LOBYTE(v30) = 0;
        v31 = v25 < a6 && v26 == 0;
        if (v31)
          v32 = v30;
        else
          v32 = v24;
        if (v31)
          v33 = v28 - v30;
        else
          v33 = v23;
        v34 = 1 << v33;
        v35 = *((_BYTE *)a12 + 15);
        v36 = 1 << v35;
        if (v35)
          v37 = v36 > a3;
        else
          v37 = 1;
        v38 = v37 || v36 > a4;
        v39 = (~(-1 << v35) + a3) & (-1 << v35);
        if (v38)
          v40 = a3;
        else
          v40 = v39;
        v140 = a8 >> v33;
        v142 = 1 << v33;
        v41 = v34 - 1;
        v137 = v33;
        v138 = a10 + a8;
        v136 = (v34 - 1 + a10 + a8) >> v33;
        if (a8 >> v33 < v136)
        {
          v42 = 1 << v32;
          v43 = a7 >> v32;
          v44 = a9 + a7;
          v45 = (1 << v32) - 1;
          v46 = (v45 + a9 + a7) >> v32;
          v47 = 1 << v32 >= a5 ? a5 : 1 << v32;
          v48 = v142 >= a6 ? a6 : 1 << v33;
          v29 = v46 >= v43;
          v49 = v46 - v43;
          if (v49 != 0 && v29)
          {
            v50 = v45 & a7;
            v51 = v45 & v44;
            v52 = v42 - (v45 & a7);
            v132 = v41 & v138;
            v146 = v41 & a8;
            v53 = a2 - (v45 & a7);
            v54 = v140;
            v135 = (v40 + ~(-1 << v32)) >> v32;
            v55 = v43 + v135 * v140;
            v156 = v49;
            v151 = v45 & v44;
            v153 = v45 & a7;
            v149 = v52;
            v148 = v53;
            do
            {
              v56 = v54 << v137;
              v57 = v54 + 1;
              if (v138 >= (v54 + 1) << v137)
                v58 = v142;
              else
                v58 = v132;
              if (v138 >= v57 << v137)
                v59 = v142 - v146;
              else
                v59 = v17;
              v60 = (v54 - v140) << v137;
              v144 = v57;
              if (v56 >= a8)
              {
                v70 = 0;
                v71 = (v60 - v146) * v16;
                do
                {
                  v72 = (v43 + v70) << v32;
                  v73 = (v43 + v70 + 1) << v32;
                  v74 = v44 >= v73;
                  if (v44 >= v73)
                    v75 = v52;
                  else
                    v75 = a9;
                  if (v74)
                    v76 = v42;
                  else
                    v76 = v51;
                  if (v72 >= a7)
                    v77 = 0;
                  else
                    v77 = v50;
                  if (v72 >= a7)
                    v78 = v76;
                  else
                    v78 = v75;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)0>>((v55 + v70) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, v53 + (v77 + (v70 << v32)) + v71, v47, v48, v78, v58, v16, v77, 0);
                  v53 = v148;
                  v52 = v149;
                  v51 = v151;
                  v50 = v153;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v161;
                  ++v70;
                }
                while (v156 != v70);
              }
              else
              {
                v61 = 0;
                v62 = ((v146 + v60) - v146) * v16;
                do
                {
                  v63 = (v43 + v61) << v32;
                  v64 = (v43 + v61 + 1) << v32;
                  v65 = v44 >= v64;
                  if (v44 >= v64)
                    v66 = v52;
                  else
                    v66 = a9;
                  if (v65)
                    v67 = v42;
                  else
                    v67 = v51;
                  if (v63 >= a7)
                    v68 = 0;
                  else
                    v68 = v50;
                  if (v63 >= a7)
                    v69 = v67;
                  else
                    v69 = v66;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)0>>((v55 + v61) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, v53 + (v68 + (v61 << v32)) + v62, v47, v48, v69, v59, v16, v68, v146);
                  v53 = v148;
                  v52 = v149;
                  v51 = v151;
                  v50 = v153;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v161;
                  ++v61;
                }
                while (v156 != v61);
              }
              v55 += v135;
              v54 = v144;
              v17 = a10;
            }
            while (v144 != v136);
          }
        }
      }
    }
    else
    {
      return agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)0>>(result, a2, a5, a6, a9, a10, a11, a7, a8);
    }
  }
  return result;
}

uint64_t agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, int a8, int a9)
{
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  BOOL v52;
  BOOL v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int8x16_t *v60;
  int32x4_t *v61;
  int32x4_t *v62;
  int32x4_t v63;
  int32x4_t *v64;
  int32x4_t v65;
  int32x4_t *v66;
  int32x4_t v67;
  int32x4_t *v68;
  int32x4_t v69;
  int32x4_t *v70;
  int32x4_t v71;
  int32x4_t *v72;
  int32x4_t v73;
  int32x4_t *v74;
  int32x4_t v75;
  int32x4_t *v76;
  int32x4_t v77;
  int32x4_t *v78;
  int32x4_t v79;
  int32x4_t *v80;
  int32x4_t v81;
  int32x4_t *v82;
  int32x4_t v83;
  int32x4_t *v84;
  int32x4_t v85;
  int32x4_t *v86;
  int32x4_t v87;
  int32x4_t *v88;
  int32x4_t v89;
  int32x4_t *v90;
  int32x4_t v91;
  int32x4_t *v92;
  int32x4_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t *v126;
  int8x16_t *v127;
  int8x16_t *v128;
  int8x16_t *v129;
  int32x4_t *v130;
  int32x4_t v131;
  int32x4_t *v132;
  int32x4_t v133;
  int32x4_t *v134;
  int32x4_t v135;
  int32x4_t *v136;
  int32x4_t v137;
  int32x4_t *v138;
  int32x4_t v139;
  int32x4_t *v140;
  int32x4_t v141;
  int32x4_t *v142;
  int32x4_t v143;
  int32x4_t *v144;
  int32x4_t v145;
  int32x4_t *v146;
  int32x4_t v147;
  int32x4_t *v148;
  int32x4_t v149;
  int32x4_t *v150;
  int32x4_t v151;
  int32x4_t *v152;
  int32x4_t v153;
  int32x4_t *v154;
  int32x4_t v155;
  int32x4_t *v156;
  int32x4_t v157;
  int32x4_t *v158;
  int32x4_t v159;
  int32x4_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int16x8_t v175;
  int16x8_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16_t v183;
  int8x16_t v184;
  int8x16_t v185;
  int8x16_t v186;
  int8x16_t v187;
  int8x16_t v188;
  int8x16_t v189;
  int8x16_t v190;
  int8x16_t v191;
  int8x16_t v192;
  int8x16_t *v193;
  int8x16_t *v194;
  int8x16_t *v195;
  int8x16_t *v196;
  int32x4_t *v197;
  int32x4_t v198;
  int32x4_t *v199;
  int32x4_t v200;
  int32x4_t *v201;
  int32x4_t v202;
  int32x4_t *v203;
  int32x4_t v204;
  int32x4_t *v205;
  int32x4_t v206;
  int32x4_t *v207;
  int32x4_t v208;
  int32x4_t *v209;
  int32x4_t v210;
  int32x4_t *v211;
  int32x4_t v212;
  int32x4_t *v213;
  int32x4_t v214;
  int32x4_t *v215;
  int32x4_t v216;
  int32x4_t *v217;
  int32x4_t v218;
  int32x4_t *v219;
  int32x4_t v220;
  int32x4_t *v221;
  int32x4_t v222;
  int32x4_t *v223;
  int32x4_t v224;
  int32x4_t *v225;
  int32x4_t v226;
  int32x4_t *v227;
  int32x4_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int16x8_t v234;
  int16x8_t v235;
  int16x8_t v236;
  int16x8_t v237;
  int16x8_t v238;
  int16x8_t v239;
  int16x8_t v240;
  int16x8_t v241;
  int16x8_t v242;
  int16x8_t v243;
  int16x8_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  int8x16_t v251;
  int8x16_t v252;
  int8x16_t v253;
  int8x16_t v254;
  int8x16_t v255;
  int8x16_t v256;
  int8x16_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int8x16_t v260;
  int8x16_t *v261;
  int8x16_t *v262;
  int8x16_t *v263;
  int8x16_t *v264;
  int32x4_t *v265;
  int32x4_t v266;
  int32x4_t *v267;
  int32x4_t v268;
  int32x4_t *v269;
  int32x4_t v270;
  int32x4_t *v271;
  int32x4_t v272;
  int32x4_t *v273;
  int32x4_t v274;
  int32x4_t *v275;
  int32x4_t v276;
  int32x4_t *v277;
  int32x4_t v278;
  int32x4_t *v279;
  int32x4_t v280;
  int32x4_t *v281;
  int32x4_t v282;
  int32x4_t *v283;
  int32x4_t v284;
  int32x4_t *v285;
  int32x4_t v286;
  int32x4_t *v287;
  int32x4_t v288;
  int32x4_t *v289;
  int32x4_t v290;
  int32x4_t *v291;
  int32x4_t v292;
  int32x4_t v293;
  int16x8_t v294;
  int16x8_t v295;
  int16x8_t v296;
  int16x8_t v297;
  int16x8_t v298;
  int16x8_t v299;
  int16x8_t v300;
  int16x8_t v301;
  int16x8_t v302;
  int16x8_t v303;
  int16x8_t v304;
  int16x8_t v305;
  int16x8_t v306;
  int16x8_t v307;
  int16x8_t v308;
  int16x8_t v309;
  int8x16_t v310;
  int8x16_t v311;
  int8x16_t v312;
  int8x16_t v313;
  int8x16_t v314;
  int8x16_t v315;
  int8x16_t v316;
  int8x16_t v317;
  int8x16_t v318;
  int8x16_t v319;
  int8x16_t v320;
  int8x16_t v321;
  int8x16_t v322;
  int8x16_t v323;
  int8x16_t v324;
  int8x16_t v325;
  int8x16_t *v326;
  int8x16_t *v327;
  int8x16_t *v328;
  int v329;
  int v330;
  unsigned int v331;
  uint64_t v332;

  v10 = a6;
  v11 = a5;
  v12 = result;
  v13 = 32 - __clz(a3 - 1);
  if (a3 >= 2)
    v14 = v13;
  else
    v14 = 0;
  v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2)
    v16 = v15;
  else
    v16 = 0;
  if (v16 < 5 || v14 <= 3)
    return twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)0>,false,true>(result, a2, v14, v16, a8, a9, a7, 0, 0, a5, a6);
  v18 = 32 - (a9 & 0x1F);
  if ((a9 & 0x1F) == 0)
    v18 = 0;
  v19 = 32 - (a8 & 0x1F);
  if ((a8 & 0x1F) == 0)
    v19 = 0;
  v20 = ((_BYTE)a8 + (_BYTE)a5) & 0x1F;
  v21 = ((_BYTE)a9 + (_BYTE)a6) & 0x1F;
  v22 = v19 + v20;
  if (v19 + v20 > a5)
    v19 = a5;
  v331 = v19;
  if (v22 > a5)
    v20 = 0;
  if (v18 + v21 <= a6)
    v23 = v18;
  else
    v23 = a6;
  if (v18 + v21 <= a6)
    v24 = ((_BYTE)a9 + (_BYTE)a6) & 0x1F;
  else
    v24 = 0;
  v330 = v20;
  if ((_DWORD)v23)
  {
    result = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)0>,false,true>(result, a2, v14, v16, a8, a9, a7, 0, 0, a5, v23);
    v10 -= v23;
  }
  v332 = v23;
  if (v24)
  {
    v10 -= v24;
    v329 = v24;
    v25 = a2;
    result = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)0>,false,true>(v12, a2, v14, v16, a8, a9, a7, 0, v10 + v23, v11, v329);
    v26 = v331;
    if (!v10)
      return result;
  }
  else
  {
    v25 = a2;
    v26 = v331;
    if (!v10)
      return result;
  }
  if (v26)
  {
    result = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)0>,false,true>(v12, v25, v14, v16, a8, a9, a7, 0, v332, v26, v10);
    v11 -= v26;
  }
  if (v330)
  {
    v11 -= v330;
    result = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)0>,false,true>(v12, v25, v14, v16, a8, a9, a7, v11 + v26, v332, v330, v10);
  }
  if (v11)
  {
    v27 = 0;
    v28 = 0;
    v29 = 1;
    v30 = 1;
    v31 = 1;
    do
    {
      v32 = v29;
      if (v32)
        --v15;
      else
        v15 = 0;
      v33 = v27 + v32;
      if (v30)
        --v13;
      else
        v13 = 0;
      if (v30)
        v28 |= (unint64_t)(v31 & ~(-1 << v14) & 0x7FFFFFE0u) << v33++;
      v31 *= 2;
      v27 = v33 - 1;
      v30 = v13 != 0;
      v29 = v15 != 0;
    }
    while (v13 | v15);
    v34 = 0;
    v35 = 0;
    v36 = 1;
    v37 = 1;
    v38 = 1;
    v39 = v16;
    v40 = v14;
    do
    {
      --v39;
      if (v36)
        v35 |= (unint64_t)(v38 & ~(-1 << v16) & 0x7FFFFFE0u) << v34++;
      else
        v39 = 0;
      --v40;
      if (!v37)
        v40 = 0;
      v38 *= 2;
      v34 = (__PAIR64__(v34, v37) - 1) >> 32;
      v37 = v40 != 0;
      v36 = v39 != 0;
    }
    while (v40 | v39);
    v41 = 0;
    v42 = 0;
    v43 = 1;
    v44 = 1;
    v45 = 1;
    v46 = v16;
    v47 = v14;
    do
    {
      --v46;
      v48 = v43;
      if (!v48)
        v46 = 0;
      v49 = v41 + v48;
      --v47;
      if (v44)
        v42 |= (unint64_t)(v45 & (v26 + a8)) << v49++;
      else
        v47 = 0;
      v45 *= 2;
      v41 = v49 - 1;
      v44 = v47 != 0;
      v43 = v46 != 0;
    }
    while (v47 | v46);
    v50 = 0;
    v51 = 0;
    v52 = 1;
    v53 = 1;
    v54 = 1;
    do
    {
      if (v52)
        --v16;
      else
        v16 = 0;
      if (v52)
        v51 |= (unint64_t)(v54 & (v332 + a9)) << v50++;
      if (v53)
        --v14;
      else
        v14 = 0;
      v54 *= 2;
      v50 = (__PAIR64__(v50, v53) - 1) >> 32;
      v53 = v14 != 0;
      v52 = v16 != 0;
    }
    while (v14 | v16);
    v55 = 0;
    v56 = v25 + v332 * a7 + v26;
    do
    {
      v57 = 0;
      v58 = v51 + v12;
      v59 = v42;
      do
      {
        v60 = (int8x16_t *)(v58 + v59);
        v61 = (int32x4_t *)(v56 + v57 + 16);
        v63 = *(int32x4_t *)(v56 + v57);
        v62 = (int32x4_t *)(v56 + v57 + a7);
        v65 = *v62;
        v64 = (int32x4_t *)((char *)v62 + a7);
        v67 = *v64;
        v66 = (int32x4_t *)((char *)v64 + a7);
        v69 = *v66;
        v68 = (int32x4_t *)((char *)v66 + a7);
        v71 = *v68;
        v70 = (int32x4_t *)((char *)v68 + a7);
        v73 = *v70;
        v72 = (int32x4_t *)((char *)v70 + a7);
        v75 = *v72;
        v74 = (int32x4_t *)((char *)v72 + a7);
        v77 = *v74;
        v76 = (int32x4_t *)((char *)v74 + a7);
        v79 = *v76;
        v78 = (int32x4_t *)((char *)v76 + a7);
        v81 = *v78;
        v80 = (int32x4_t *)((char *)v78 + a7);
        v83 = *v80;
        v82 = (int32x4_t *)((char *)v80 + a7);
        v85 = *v82;
        v84 = (int32x4_t *)((char *)v82 + a7);
        v87 = *v84;
        v86 = (int32x4_t *)((char *)v84 + a7);
        v89 = *v86;
        v88 = (int32x4_t *)((char *)v86 + a7);
        v91 = *v88;
        v90 = (int32x4_t *)((char *)v88 + a7);
        v93 = *v90;
        v92 = (int32x4_t *)((char *)v90 + a7);
        v94 = (int16x8_t)vzip1q_s32(v63, v71);
        v95 = (int16x8_t)vzip2q_s32(v63, v71);
        v96 = (int16x8_t)vzip1q_s32(v65, v73);
        v97 = (int16x8_t)vzip2q_s32(v65, v73);
        v98 = (int16x8_t)vzip1q_s32(v67, v75);
        v99 = (int16x8_t)vzip2q_s32(v67, v75);
        v100 = (int16x8_t)vzip1q_s32(v69, v77);
        v101 = (int16x8_t)vzip2q_s32(v69, v77);
        v102 = (int16x8_t)vzip1q_s32(v79, v87);
        v103 = (int16x8_t)vzip2q_s32(v79, v87);
        v104 = (int16x8_t)vzip1q_s32(v81, v89);
        v105 = (int16x8_t)vzip2q_s32(v81, v89);
        v106 = (int16x8_t)vzip1q_s32(v83, v91);
        v107 = (int16x8_t)vzip2q_s32(v83, v91);
        v108 = (int16x8_t)vzip1q_s32(v85, v93);
        v109 = (int16x8_t)vzip2q_s32(v85, v93);
        v110 = (int8x16_t)vzip1q_s16(v103, v107);
        v111 = (int8x16_t)vzip2q_s16(v103, v107);
        v112 = (int8x16_t)vzip1q_s16(v105, v109);
        v113 = (int8x16_t)vzip2q_s16(v105, v109);
        v114 = (int8x16_t)vzip1q_s16(v102, v106);
        v115 = (int8x16_t)vzip2q_s16(v102, v106);
        v116 = (int8x16_t)vzip1q_s16(v104, v108);
        v117 = (int8x16_t)vzip2q_s16(v104, v108);
        v118 = (int8x16_t)vzip1q_s16(v95, v99);
        v119 = (int8x16_t)vzip2q_s16(v95, v99);
        v120 = (int8x16_t)vzip1q_s16(v97, v101);
        v121 = (int8x16_t)vzip2q_s16(v97, v101);
        v122 = (int8x16_t)vzip1q_s16(v94, v98);
        v123 = (int8x16_t)vzip2q_s16(v94, v98);
        v124 = (int8x16_t)vzip1q_s16(v96, v100);
        v125 = (int8x16_t)vzip2q_s16(v96, v100);
        *v60 = vzip1q_s8(v122, v124);
        v60[1] = vzip2q_s8(v122, v124);
        v60[2] = vzip1q_s8(v123, v125);
        v60[3] = vzip2q_s8(v123, v125);
        v126 = (int8x16_t *)(v58 + v59 + 64);
        *v126 = vzip1q_s8(v114, v116);
        v126[1] = vzip2q_s8(v114, v116);
        v126[2] = vzip1q_s8(v115, v117);
        v126[3] = vzip2q_s8(v115, v117);
        v127 = (int8x16_t *)(v58 + v59 + 128);
        *v127 = vzip1q_s8(v118, v120);
        v127[1] = vzip2q_s8(v118, v120);
        v127[2] = vzip1q_s8(v119, v121);
        v127[3] = vzip2q_s8(v119, v121);
        v128 = (int8x16_t *)(v58 + v59 + 192);
        *v128 = vzip1q_s8(v110, v112);
        v128[1] = vzip2q_s8(v110, v112);
        v128[2] = vzip1q_s8(v111, v113);
        v128[3] = vzip2q_s8(v111, v113);
        v129 = (int8x16_t *)(v58 + v59 + 256);
        v131 = *v92;
        v130 = (int32x4_t *)((char *)v92 + a7);
        v133 = *v130;
        v132 = (int32x4_t *)((char *)v130 + a7);
        v135 = *v132;
        v134 = (int32x4_t *)((char *)v132 + a7);
        v137 = *v134;
        v136 = (int32x4_t *)((char *)v134 + a7);
        v139 = *v136;
        v138 = (int32x4_t *)((char *)v136 + a7);
        v141 = *v138;
        v140 = (int32x4_t *)((char *)v138 + a7);
        v143 = *v140;
        v142 = (int32x4_t *)((char *)v140 + a7);
        v145 = *v142;
        v144 = (int32x4_t *)((char *)v142 + a7);
        v147 = *v144;
        v146 = (int32x4_t *)((char *)v144 + a7);
        v149 = *v146;
        v148 = (int32x4_t *)((char *)v146 + a7);
        v151 = *v148;
        v150 = (int32x4_t *)((char *)v148 + a7);
        v153 = *v150;
        v152 = (int32x4_t *)((char *)v150 + a7);
        v155 = *v152;
        v154 = (int32x4_t *)((char *)v152 + a7);
        v157 = *v154;
        v156 = (int32x4_t *)((char *)v154 + a7);
        v159 = *v156;
        v158 = (int32x4_t *)((char *)v156 + a7);
        v160 = *v158;
        result = (uint64_t)v158->i64 + a7;
        v161 = (int16x8_t)vzip1q_s32(v131, v139);
        v162 = (int16x8_t)vzip2q_s32(v131, v139);
        v163 = (int16x8_t)vzip1q_s32(v133, v141);
        v164 = (int16x8_t)vzip2q_s32(v133, v141);
        v165 = (int16x8_t)vzip1q_s32(v135, v143);
        v166 = (int16x8_t)vzip2q_s32(v135, v143);
        v167 = (int16x8_t)vzip1q_s32(v137, v145);
        v168 = (int16x8_t)vzip2q_s32(v137, v145);
        v169 = (int16x8_t)vzip1q_s32(v147, v155);
        v170 = (int16x8_t)vzip2q_s32(v147, v155);
        v171 = (int16x8_t)vzip1q_s32(v149, v157);
        v172 = (int16x8_t)vzip2q_s32(v149, v157);
        v173 = (int16x8_t)vzip1q_s32(v151, v159);
        v174 = (int16x8_t)vzip2q_s32(v151, v159);
        v175 = (int16x8_t)vzip1q_s32(v153, v160);
        v176 = (int16x8_t)vzip2q_s32(v153, v160);
        v177 = (int8x16_t)vzip1q_s16(v170, v174);
        v178 = (int8x16_t)vzip2q_s16(v170, v174);
        v179 = (int8x16_t)vzip1q_s16(v172, v176);
        v180 = (int8x16_t)vzip2q_s16(v172, v176);
        v181 = (int8x16_t)vzip1q_s16(v169, v173);
        v182 = (int8x16_t)vzip2q_s16(v169, v173);
        v183 = (int8x16_t)vzip1q_s16(v171, v175);
        v184 = (int8x16_t)vzip2q_s16(v171, v175);
        v185 = (int8x16_t)vzip1q_s16(v162, v166);
        v186 = (int8x16_t)vzip2q_s16(v162, v166);
        v187 = (int8x16_t)vzip1q_s16(v164, v168);
        v188 = (int8x16_t)vzip2q_s16(v164, v168);
        v189 = (int8x16_t)vzip1q_s16(v161, v165);
        v190 = (int8x16_t)vzip2q_s16(v161, v165);
        v191 = (int8x16_t)vzip1q_s16(v163, v167);
        v192 = (int8x16_t)vzip2q_s16(v163, v167);
        *v129 = vzip1q_s8(v189, v191);
        v129[1] = vzip2q_s8(v189, v191);
        v129[2] = vzip1q_s8(v190, v192);
        v129[3] = vzip2q_s8(v190, v192);
        v193 = (int8x16_t *)(v58 + v59 + 320);
        *v193 = vzip1q_s8(v181, v183);
        v193[1] = vzip2q_s8(v181, v183);
        v193[2] = vzip1q_s8(v182, v184);
        v193[3] = vzip2q_s8(v182, v184);
        v194 = (int8x16_t *)(v58 + v59 + 384);
        *v194 = vzip1q_s8(v185, v187);
        v194[1] = vzip2q_s8(v185, v187);
        v194[2] = vzip1q_s8(v186, v188);
        v194[3] = vzip2q_s8(v186, v188);
        v195 = (int8x16_t *)(v58 + v59 + 448);
        *v195 = vzip1q_s8(v177, v179);
        v195[1] = vzip2q_s8(v177, v179);
        v195[2] = vzip1q_s8(v178, v180);
        v195[3] = vzip2q_s8(v178, v180);
        v196 = (int8x16_t *)(v58 + v59 + 512);
        v198 = *v61;
        v197 = (int32x4_t *)((char *)v61 + a7);
        v200 = *v197;
        v199 = (int32x4_t *)((char *)v197 + a7);
        v202 = *v199;
        v201 = (int32x4_t *)((char *)v199 + a7);
        v204 = *v201;
        v203 = (int32x4_t *)((char *)v201 + a7);
        v206 = *v203;
        v205 = (int32x4_t *)((char *)v203 + a7);
        v208 = *v205;
        v207 = (int32x4_t *)((char *)v205 + a7);
        v210 = *v207;
        v209 = (int32x4_t *)((char *)v207 + a7);
        v212 = *v209;
        v211 = (int32x4_t *)((char *)v209 + a7);
        v214 = *v211;
        v213 = (int32x4_t *)((char *)v211 + a7);
        v216 = *v213;
        v215 = (int32x4_t *)((char *)v213 + a7);
        v218 = *v215;
        v217 = (int32x4_t *)((char *)v215 + a7);
        v220 = *v217;
        v219 = (int32x4_t *)((char *)v217 + a7);
        v222 = *v219;
        v221 = (int32x4_t *)((char *)v219 + a7);
        v224 = *v221;
        v223 = (int32x4_t *)((char *)v221 + a7);
        v226 = *v223;
        v225 = (int32x4_t *)((char *)v223 + a7);
        v228 = *v225;
        v227 = (int32x4_t *)((char *)v225 + a7);
        v229 = (int16x8_t)vzip1q_s32(v198, v206);
        v230 = (int16x8_t)vzip2q_s32(v198, v206);
        v231 = (int16x8_t)vzip1q_s32(v200, v208);
        v232 = (int16x8_t)vzip2q_s32(v200, v208);
        v233 = (int16x8_t)vzip1q_s32(v202, v210);
        v234 = (int16x8_t)vzip2q_s32(v202, v210);
        v235 = (int16x8_t)vzip1q_s32(v204, v212);
        v236 = (int16x8_t)vzip2q_s32(v204, v212);
        v237 = (int16x8_t)vzip1q_s32(v214, v222);
        v238 = (int16x8_t)vzip2q_s32(v214, v222);
        v239 = (int16x8_t)vzip1q_s32(v216, v224);
        v240 = (int16x8_t)vzip2q_s32(v216, v224);
        v241 = (int16x8_t)vzip1q_s32(v218, v226);
        v242 = (int16x8_t)vzip2q_s32(v218, v226);
        v243 = (int16x8_t)vzip1q_s32(v220, v228);
        v244 = (int16x8_t)vzip2q_s32(v220, v228);
        v245 = (int8x16_t)vzip1q_s16(v238, v242);
        v246 = (int8x16_t)vzip2q_s16(v238, v242);
        v247 = (int8x16_t)vzip1q_s16(v240, v244);
        v248 = (int8x16_t)vzip2q_s16(v240, v244);
        v249 = (int8x16_t)vzip1q_s16(v237, v241);
        v250 = (int8x16_t)vzip2q_s16(v237, v241);
        v251 = (int8x16_t)vzip1q_s16(v239, v243);
        v252 = (int8x16_t)vzip2q_s16(v239, v243);
        v253 = (int8x16_t)vzip1q_s16(v230, v234);
        v254 = (int8x16_t)vzip2q_s16(v230, v234);
        v255 = (int8x16_t)vzip1q_s16(v232, v236);
        v256 = (int8x16_t)vzip2q_s16(v232, v236);
        v257 = (int8x16_t)vzip1q_s16(v229, v233);
        v258 = (int8x16_t)vzip2q_s16(v229, v233);
        v259 = (int8x16_t)vzip1q_s16(v231, v235);
        v260 = (int8x16_t)vzip2q_s16(v231, v235);
        *v196 = vzip1q_s8(v257, v259);
        v196[1] = vzip2q_s8(v257, v259);
        v196[2] = vzip1q_s8(v258, v260);
        v196[3] = vzip2q_s8(v258, v260);
        v261 = (int8x16_t *)(v58 + v59 + 576);
        *v261 = vzip1q_s8(v249, v251);
        v261[1] = vzip2q_s8(v249, v251);
        v261[2] = vzip1q_s8(v250, v252);
        v261[3] = vzip2q_s8(v250, v252);
        v262 = (int8x16_t *)(v58 + v59 + 640);
        *v262 = vzip1q_s8(v253, v255);
        v262[1] = vzip2q_s8(v253, v255);
        v262[2] = vzip1q_s8(v254, v256);
        v262[3] = vzip2q_s8(v254, v256);
        v263 = (int8x16_t *)(v58 + v59 + 704);
        *v263 = vzip1q_s8(v245, v247);
        v263[1] = vzip2q_s8(v245, v247);
        v263[2] = vzip1q_s8(v246, v248);
        v263[3] = vzip2q_s8(v246, v248);
        v264 = (int8x16_t *)(v58 + v59 + 768);
        v266 = *v227;
        v265 = (int32x4_t *)((char *)v227 + a7);
        v268 = *v265;
        v267 = (int32x4_t *)((char *)v265 + a7);
        v270 = *v267;
        v269 = (int32x4_t *)((char *)v267 + a7);
        v272 = *v269;
        v271 = (int32x4_t *)((char *)v269 + a7);
        v274 = *v271;
        v273 = (int32x4_t *)((char *)v271 + a7);
        v276 = *v273;
        v275 = (int32x4_t *)((char *)v273 + a7);
        v278 = *v275;
        v277 = (int32x4_t *)((char *)v275 + a7);
        v280 = *v277;
        v279 = (int32x4_t *)((char *)v277 + a7);
        v282 = *v279;
        v281 = (int32x4_t *)((char *)v279 + a7);
        v284 = *v281;
        v283 = (int32x4_t *)((char *)v281 + a7);
        v286 = *v283;
        v285 = (int32x4_t *)((char *)v283 + a7);
        v288 = *v285;
        v287 = (int32x4_t *)((char *)v285 + a7);
        v290 = *v287;
        v289 = (int32x4_t *)((char *)v287 + a7);
        v292 = *v289;
        v291 = (int32x4_t *)((char *)v289 + a7);
        v293 = *(int32x4_t *)((char *)v291 + a7);
        v294 = (int16x8_t)vzip1q_s32(v266, v274);
        v295 = (int16x8_t)vzip2q_s32(v266, v274);
        v296 = (int16x8_t)vzip1q_s32(v268, v276);
        v297 = (int16x8_t)vzip2q_s32(v268, v276);
        v298 = (int16x8_t)vzip1q_s32(v270, v278);
        v299 = (int16x8_t)vzip2q_s32(v270, v278);
        v300 = (int16x8_t)vzip1q_s32(v272, v280);
        v301 = (int16x8_t)vzip2q_s32(v272, v280);
        v302 = (int16x8_t)vzip1q_s32(v282, v290);
        v303 = (int16x8_t)vzip2q_s32(v282, v290);
        v304 = (int16x8_t)vzip1q_s32(v284, v292);
        v305 = (int16x8_t)vzip2q_s32(v284, v292);
        v306 = (int16x8_t)vzip1q_s32(v286, *v291);
        v307 = (int16x8_t)vzip2q_s32(v286, *v291);
        v308 = (int16x8_t)vzip1q_s32(v288, v293);
        v309 = (int16x8_t)vzip2q_s32(v288, v293);
        v310 = (int8x16_t)vzip1q_s16(v303, v307);
        v311 = (int8x16_t)vzip2q_s16(v303, v307);
        v312 = (int8x16_t)vzip1q_s16(v305, v309);
        v313 = (int8x16_t)vzip2q_s16(v305, v309);
        v314 = (int8x16_t)vzip1q_s16(v302, v306);
        v315 = (int8x16_t)vzip2q_s16(v302, v306);
        v316 = (int8x16_t)vzip1q_s16(v304, v308);
        v317 = (int8x16_t)vzip2q_s16(v304, v308);
        v318 = (int8x16_t)vzip1q_s16(v295, v299);
        v319 = (int8x16_t)vzip2q_s16(v295, v299);
        v320 = (int8x16_t)vzip1q_s16(v297, v301);
        v321 = (int8x16_t)vzip2q_s16(v297, v301);
        v322 = (int8x16_t)vzip1q_s16(v294, v298);
        v323 = (int8x16_t)vzip2q_s16(v294, v298);
        v324 = (int8x16_t)vzip1q_s16(v296, v300);
        v325 = (int8x16_t)vzip2q_s16(v296, v300);
        *v264 = vzip1q_s8(v322, v324);
        v264[1] = vzip2q_s8(v322, v324);
        v264[2] = vzip1q_s8(v323, v325);
        v264[3] = vzip2q_s8(v323, v325);
        v326 = (int8x16_t *)(v58 + v59 + 832);
        *v326 = vzip1q_s8(v314, v316);
        v326[1] = vzip2q_s8(v314, v316);
        v326[2] = vzip1q_s8(v315, v317);
        v326[3] = vzip2q_s8(v315, v317);
        v327 = (int8x16_t *)(v58 + v59 + 896);
        *v327 = vzip1q_s8(v318, v320);
        v327[1] = vzip2q_s8(v318, v320);
        v327[2] = vzip1q_s8(v319, v321);
        v327[3] = vzip2q_s8(v319, v321);
        v328 = (int8x16_t *)(v58 + v59 + 960);
        *v328 = vzip1q_s8(v310, v312);
        v328[1] = vzip2q_s8(v310, v312);
        v328[2] = vzip1q_s8(v311, v313);
        v328[3] = vzip2q_s8(v311, v313);
        v59 = (v59 - v28) & v28;
        v57 += 32;
      }
      while (v57 < v11);
      v51 = (v51 - v35) & v35;
      v55 += 32;
      v56 += 32 * a7;
    }
    while (v55 < v10);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)0>,false,true>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  char *v47;
  int v48;
  uint64_t v49;
  char v50;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3)) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4)) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = (char *)(v46 + a8);
      v48 = a10;
      v49 = v30;
      do
      {
        v50 = *v47++;
        *(_BYTE *)(v40 + result + v49) = v50;
        v49 = (v49 - v12) & v12;
        --v48;
      }
      while (v48);
      v40 = (v40 - v23) & v23;
      v46 += a7;
      ++v45;
    }
    while (v45 != a11);
  }
  return result;
}

void *agxsTwiddleAddressPVRTC4<true,(TwiddleOrder)0>(void *result, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  if (result)
  {
    if (a2)
      return memcpy(result, a2, 8 * ((a9 + 3) >> 2) * (unint64_t)((a10 + 3) >> 2));
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,4u,4u,8ul,(TwiddleOrder)0>(uint64_t result, uint64_t a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, uint64_t a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 3) >> 2, (a4 + 3) >> 2, a5, a6, a7 >> 2, a8 >> 2, (a9 + 3) >> 2, (a10 + 3) >> 2, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,4u,4u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 3) >> 2, (a4 + 3) >> 2, a5, a6, a7 >> 2, a8 >> 2, (a9 + 3) >> 2, (a10 + 3) >> 2, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,4u,2u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 3) >> 2, (a4 + 1) >> 1, a5, a6, a7 >> 2, a8 >> 1, (a9 + 3) >> 2, (a10 + 1) >> 1, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,5u,4u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 4) / 5u, (a4 + 3) >> 2, a5, a6, a7 / 5, a8 >> 2, (a9 + 4) / 5u, (a10 + 3) >> 2, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,5u,5u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 4) / 5u, (a4 + 4) / 5u, a5, a6, a7 / 5, a8 / 5, (a9 + 4) / 5u, (a10 + 4) / 5u, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,6u,5u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 5) / 6u, (a4 + 4) / 5u, a5, a6, a7 / 6, a8 / 5, (a9 + 5) / 6u, (a10 + 4) / 5u, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,6u,6u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 5) / 6u, (a4 + 5) / 6u, a5, a6, a7 / 6, a8 / 6, (a9 + 5) / 6u, (a10 + 5) / 6u, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,8u,4u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 7) >> 3, (a4 + 3) >> 2, a5, a6, a7 >> 3, a8 >> 2, (a9 + 7) >> 3, (a10 + 3) >> 2, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,8u,5u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 7) >> 3, (a4 + 4) / 5u, a5, a6, a7 >> 3, a8 / 5, (a9 + 7) >> 3, (a10 + 4) / 5u, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,8u,6u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 7) >> 3, (a4 + 5) / 6u, a5, a6, a7 >> 3, a8 / 6, (a9 + 7) >> 3, (a10 + 5) / 6u, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,8u,8u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 7) >> 3, (a4 + 7) >> 3, a5, a6, a7 >> 3, a8 >> 3, (a9 + 7) >> 3, (a10 + 7) >> 3, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,10u,5u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 9) / 0xAu, (a4 + 4) / 5u, a5, a6, a7 / 0xA, a8 / 5, (a9 + 9) / 0xAu, (a10 + 4) / 5u, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,10u,6u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 9) / 0xAu, (a4 + 5) / 6u, a5, a6, a7 / 0xA, a8 / 6, (a9 + 9) / 0xAu, (a10 + 5) / 6u, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,10u,8u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 9) / 0xAu, (a4 + 7) >> 3, a5, a6, a7 / 0xA, a8 >> 3, (a9 + 9) / 0xAu, (a10 + 7) >> 3, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,10u,10u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 9) / 0xAu, (a4 + 9) / 0xAu, a5, a6, a7 / 0xA, a8 / 0xA, (a9 + 9) / 0xAu, (a10 + 9) / 0xAu, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,12u,10u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 11) / 0xCu, (a4 + 9) / 0xAu, a5, a6, a7 / 0xC, a8 / 0xA, (a9 + 11) / 0xCu, (a10 + 9) / 0xAu, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<true,12u,12u,16ul,(TwiddleOrder)0>(uint64_t result, __int128 *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 11) / 0xCu, (a4 + 11) / 0xCu, a5, a6, a7 / 0xC, a8 / 0xC, (a9 + 11) / 0xCu, (a10 + 11) / 0xCu, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)1>>(uint64_t result, __int16 *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  __int16 *v13;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  unsigned int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  BOOL v103;
  BOOL v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  BOOL v111;
  BOOL v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  char *v120;
  int v121;
  BOOL v122;
  BOOL v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  unint64_t v128;
  int v129;
  BOOL v130;
  BOOL v131;
  unsigned int v132;
  int v133;
  int v134;
  unint64_t v135;
  int v136;
  int j;
  __int16 *v138;
  uint64_t v139;
  __int16 v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  int v147;
  unsigned __int16 *v148;
  int v149;
  unsigned __int16 *v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  BOOL v155;
  char v156;
  int v157;
  int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  unsigned int v162;
  BOOL v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  BOOL v182;
  BOOL v183;
  int v184;
  int v185;
  int v186;
  BOOL v187;
  int v188;
  BOOL v189;
  int v190;
  int v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  int v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  int v200;
  BOOL v201;
  BOOL v202;
  unsigned int v203;
  unsigned int v204;
  int v205;
  uint64_t v206;
  int v207;
  BOOL v208;
  BOOL v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  int v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  BOOL v217;
  BOOL v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  uint64_t v222;
  int v223;
  BOOL v224;
  unsigned int v225;
  unsigned int v226;
  int v227;
  int v228;
  int v229;
  unsigned __int16 *v230;
  int v231;
  unsigned __int16 *v232;
  uint64_t v233;
  unsigned int v234;
  int i;
  int v236;
  __int16 *v237;
  uint64_t v238;
  __int16 v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  char v245;
  __int16 *v246;
  int v248;
  BOOL v249;
  int v250;
  char v251;
  __int16 *v252;
  int v254;
  BOOL v255;
  uint64_t v257;
  int v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  int v262;
  char v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  unsigned int v270;
  char *v271;
  BOOL v272;
  int v273;
  BOOL v274;
  unsigned int v275;
  int v276;
  uint64_t v277;
  int v278;
  unsigned int v279;
  int v280;
  int v281;
  unsigned int v282;
  int v283;
  int v284;
  int v285;
  unsigned int v286;
  int v287;
  char v288[16];
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned __int8 v296;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v16 = result;
  v17 = a11;
  v18 = a12;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a6 - 1);
    v25 = a6 > 1;
    if (a6 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a5 - 1);
    v28 = a5 > 1;
    if (a5 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v26 | v29)
    {
      v30 = 0;
      v31 = 0;
      v32 = a5 > 1;
      v33 = a6 > 1;
      v34 = 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        if (v32)
          v31 |= (unint64_t)(v34 & ~(-1 << v29)) << v30++;
        else
          v35 = 0;
        --v36;
        if (!v33)
          v36 = 0;
        v34 *= 2;
        v30 = (__PAIR64__(v30, v33) - 1) >> 32;
        v33 = v36 != 0;
        v32 = v35 != 0;
      }
      while (v36 | v35);
      v37 = 0;
      v38 = 0;
      v39 = 1;
      v40 = a5 > 1;
      v41 = a6 > 1;
      v42 = v29;
      v43 = v26;
      do
      {
        --v42;
        v44 = v40;
        if (!v44)
          v42 = 0;
        v45 = v37 + v44;
        --v43;
        if (v41)
          v38 |= (unint64_t)(v39 & ~(-1 << v26)) << v45++;
        else
          v43 = 0;
        v39 *= 2;
        v37 = v45 - 1;
        v41 = v43 != 0;
        v40 = v42 != 0;
      }
      while (v43 | v42);
      v46 = 0;
      v47 = 0;
      v48 = a5 > 1;
      v49 = a6 > 1;
      v50 = 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        if (v48)
          v47 |= (unint64_t)(v50 & a7) << v46++;
        else
          v51 = 0;
        --v52;
        if (!v49)
          v52 = 0;
        v50 *= 2;
        v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        v49 = v52 != 0;
        v48 = v51 != 0;
      }
      while (v52 | v51);
      v53 = 0;
      v54 = 0;
      v55 = 1;
      do
      {
        --v29;
        v56 = v28;
        if (!v56)
          v29 = 0;
        v57 = v53 + v56;
        --v26;
        if (v25)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          v58 = v57 + 1;
        }
        else
        {
          v26 = 0;
          v58 = v57;
        }
        v55 *= 2;
        v53 = v58 - 1;
        v25 = v26 != 0;
        v28 = v29 != 0;
        result = v26 | v29;
      }
      while ((_DWORD)result);
      v19 = a10;
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v38 = 0;
      v54 = 0;
      if (!a9)
        return result;
    }
    if (v19)
    {
      for (i = 0; i != v19; ++i)
      {
        v236 = a9;
        v237 = v13;
        v238 = v47;
        do
        {
          v239 = *v237++;
          *(_WORD *)(v16 + 2 * (v238 + v54)) = v239;
          v238 = (v238 - v31) & v31;
          --v236;
        }
        while (v236);
        v54 = (v54 - v38) & v38;
        v13 = (__int16 *)((char *)v13 + a11);
      }
    }
    return result;
  }
  if (*((_BYTE *)a12 + 20))
  {
    result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 1u, a7, a8, a9, a10, (uint64_t)v288);
    v20 = *((_BYTE *)a12 + 13);
    v21 = *((_BYTE *)a12 + 12);
    v246 = v13;
    if (1 << v20 >= a6 || a5 >> v21)
    {
      v152 = a6 >> v20;
      v153 = 1 << v21;
      v154 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
      if (a6 < 2)
        v154 = 0;
      v155 = v153 >= a5;
      if (v153 < a5)
        v156 = v21 + v20 + v154;
      else
        v156 = *((_BYTE *)a12 + 12);
      if (v155)
        LOBYTE(v157) = *((_BYTE *)a12 + 13);
      else
        v157 = -v154;
      if (!v152)
        v21 = v156;
      v245 = v21;
      if (v152)
        v23 = *((_BYTE *)a12 + 13);
      else
        v23 = v157;
    }
    else
    {
      v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
      if (a5 < 2)
        LOBYTE(v22) = 0;
      v245 = v22;
      v23 = v21 + v20 - v22;
    }
    v158 = a10;
    v159 = a8;
    v244 = v294;
    if (v294)
    {
      v160 = 1 << v23;
      if (1 << v23 >= a6)
        v161 = a6;
      else
        v161 = 1 << v23;
      v162 = 32 - __clz(v161 - 1);
      v163 = v161 > 1;
      if (v161 <= 1)
        v164 = 0;
      else
        v164 = v162;
      v243 = 1 << v245;
      if (1 << v245 >= a5)
        v165 = a5;
      else
        v165 = 1 << v245;
      v166 = 32 - __clz(v165 - 1);
      v167 = v295;
      v255 = v165 > 1;
      if (v165 <= 1)
        v166 = 0;
      v279 = v166;
      v276 = v293;
      v278 = v292;
      v274 = v292 != 0;
      v272 = v293 != 0;
      if (v295)
      {
        v168 = 0;
        v242 = a7 >> v245;
        v267 = a8 >> v23;
        v281 = v293 | v292;
        v285 = v296;
        v287 = v291;
        v241 = a9 + a7;
        v240 = v289;
        v283 = v290;
        v262 = (v160 - 1) & a8;
        v264 = (v160 - 1) & (a10 + a8);
        v260 = v160 - v262;
        v169 = ~(-1 << v166);
        v258 = v164 | v166;
        v270 = v295;
        v250 = 1 << v23;
        v251 = v23;
        v249 = v163;
        do
        {
          v170 = 0;
          v171 = v168 + v240;
          v172 = (v168 + v242) << v245;
          v173 = a9;
          if (v241 >= (v168 + v242 + 1) << v245)
            v173 = v243 - ((v243 - 1) & a7);
          v174 = 1 << v245;
          if (v241 < (v168 + v242 + 1) << v245)
            v174 = (v243 - 1) & (a9 + a7);
          v248 = v168;
          if (v172 >= a7)
            v175 = v174;
          else
            v175 = v173;
          if (v172 >= a7)
            v176 = 0;
          else
            v176 = (v243 - 1) & a7;
          v252 = &v246[v176 + (v168 << v245)];
          do
          {
            v177 = v170 + v283;
            if (v285)
            {
              v178 = v281;
              if (v281)
              {
                v179 = 0;
                v178 = 0;
                v180 = 1;
                v182 = v274;
                v181 = v276;
                v183 = v272;
                v184 = v278;
                do
                {
                  --v184;
                  if (v182)
                    v178 |= (v180 & v171) << v179;
                  else
                    v184 = 0;
                  if (v182)
                    ++v179;
                  --v181;
                  if (v183)
                    v178 |= (v180 & v177) << v179;
                  else
                    v181 = 0;
                  if (v183)
                    ++v179;
                  v180 *= 2;
                  --v179;
                  v183 = v181 != 0;
                  v182 = v184 != 0;
                }
                while (v181 | v184);
              }
            }
            else
            {
              v178 = v281;
              if (v281)
              {
                v185 = 0;
                v178 = 0;
                v186 = 1;
                v187 = v272;
                v189 = v274;
                v188 = v276;
                v190 = v278;
                do
                {
                  --v188;
                  if (v187)
                    v178 |= (v186 & v177) << v185;
                  else
                    v188 = 0;
                  if (v187)
                    ++v185;
                  --v190;
                  if (v189)
                    v178 |= (v186 & v171) << v185;
                  else
                    v190 = 0;
                  if (v189)
                    ++v185;
                  v186 *= 2;
                  --v185;
                  v189 = v190 != 0;
                  v187 = v188 != 0;
                }
                while (v190 | v188);
              }
            }
            v191 = *(_DWORD *)(v16 + 4 * ((v178 + v287) | ((v178 + v287) >> 8 << 9)));
            if (v191 < 0)
            {
              v192 = v16 - *((_QWORD *)a13 + 3) + ((unint64_t)(v191 & 0x3FFFFFF) << 14);
              result = *a13;
              v193 = a13[2];
              if (result > v193)
              {
                result = get_level_offset_within_tail(result, v193, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                v167 = v270;
                v163 = v249;
                v160 = v250;
                v23 = v251;
                v17 = a11;
                v159 = a8;
                v158 = a10;
                v192 += result;
              }
              v194 = (v170 + v267) << v23;
              v195 = v260;
              if (a10 + a8 >= (v170 + v267 + 1) << v23)
              {
                v196 = v160;
              }
              else
              {
                v195 = v158;
                v196 = v264;
              }
              if (v194 >= v159)
                v197 = 0;
              else
                v197 = v262;
              if (v194 >= v159)
                v195 = v196;
              if (!v258)
              {
                v215 = 0;
                v199 = 0;
                v206 = 0;
                v222 = 0;
                if (!v175)
                  goto LABEL_213;
LABEL_285:
                if (v195)
                {
                  v229 = 0;
                  v230 = (unsigned __int16 *)((char *)v252 + (v197 + (v170 << v23)) * v17);
                  do
                  {
                    v231 = v175;
                    v232 = v230;
                    v233 = v215;
                    do
                    {
                      v234 = *v232++;
                      result = v234;
                      *(_WORD *)(v192 + 2 * (v233 + v222)) = v234;
                      v233 = (v233 - v199) & v199;
                      --v231;
                    }
                    while (v231);
                    v222 = (v222 - v206) & v206;
                    v230 = (unsigned __int16 *)((char *)v230 + v17);
                    ++v229;
                  }
                  while (v229 != v195);
                }
                goto LABEL_213;
              }
              v198 = 0;
              v199 = 0;
              v200 = 1;
              v201 = v255;
              v202 = v163;
              v203 = v279;
              v204 = v164;
              do
              {
                --v203;
                if (v201)
                  v199 |= (unint64_t)(v200 & v169) << v198++;
                else
                  v203 = 0;
                --v204;
                if (!v202)
                  v204 = 0;
                v200 *= 2;
                v198 = (__PAIR64__(v198, v202) - 1) >> 32;
                v202 = v204 != 0;
                v201 = v203 != 0;
              }
              while (v204 | v203);
              v205 = 0;
              v206 = 0;
              v207 = 1;
              v208 = v255;
              v209 = v163;
              v210 = v279;
              v211 = v164;
              do
              {
                --v210;
                v212 = v208;
                if (!v212)
                  v210 = 0;
                v213 = v205 + v212;
                --v211;
                if (v209)
                  v206 |= (unint64_t)(v207 & ~(-1 << v164)) << v213++;
                else
                  v211 = 0;
                v207 *= 2;
                v205 = v213 - 1;
                v209 = v211 != 0;
                v208 = v210 != 0;
              }
              while (v211 | v210);
              v214 = 0;
              v215 = 0;
              v216 = 1;
              v217 = v255;
              v218 = v163;
              v219 = v279;
              v220 = v164;
              do
              {
                --v219;
                if (v217)
                  v215 |= (unint64_t)(v216 & v176) << v214++;
                else
                  v219 = 0;
                --v220;
                if (!v218)
                  v220 = 0;
                v216 *= 2;
                v214 = (__PAIR64__(v214, v218) - 1) >> 32;
                v218 = v220 != 0;
                v217 = v219 != 0;
              }
              while (v220 | v219);
              v221 = 0;
              v222 = 0;
              v223 = 1;
              v224 = v255;
              LOBYTE(result) = v163;
              v225 = v279;
              v226 = v164;
              do
              {
                --v225;
                v227 = v224;
                if (!v227)
                  v225 = 0;
                v228 = v221 + v227;
                --v226;
                if ((result & 1) != 0)
                  v222 |= (unint64_t)(v223 & v197) << v228++;
                else
                  v226 = 0;
                v223 *= 2;
                v221 = v228 - 1;
                result = v226 != 0;
                v224 = v225 != 0;
              }
              while (v226 | v225);
              v167 = v270;
              if (v175)
                goto LABEL_285;
            }
LABEL_213:
            ++v170;
          }
          while (v167 > (unsigned __int16)v170);
          v168 = v248 + 1;
        }
        while (v244 > (unsigned __int16)(v248 + 1));
      }
    }
  }
  else
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v266 = a8 >> v66;
    v268 = 1 << v66;
    v76 = v69 - 1;
    v263 = v66;
    v265 = a10 + a8;
    v261 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 < v261)
    {
      result = a7 >> v67;
      v77 = (1 << v67) - 1;
      v286 = a9 + a7;
      if (v69 >= a6)
        v69 = a6;
      v78 = 32 - __clz(v69 - 1);
      v79 = v69 > 1;
      if (v69 <= 1)
        v80 = 0;
      else
        v80 = v78;
      v282 = (v77 + a9 + a7) >> v67;
      v284 = 1 << v67;
      if (1 << v67 >= a5)
        v81 = a5;
      else
        v81 = 1 << v67;
      v82 = 32 - __clz(v81 - 1);
      v83 = v81 > 1;
      if (v81 <= 1)
        v84 = 0;
      else
        v84 = v82;
      v275 = a7 >> v67;
      if (result < (v77 + a9 + a7) >> v67)
      {
        v259 = (v75 + ~(-1 << v67)) >> v67;
        v85 = v77 & a7;
        v280 = v77 & v286;
        v254 = v76 & v265;
        v257 = v76 & a8;
        v86 = v266;
        do
        {
          v87 = v86 << v263;
          v269 = v86 + 1;
          v88 = v268;
          if (v265 < (v86 + 1) << v263)
            v88 = v254;
          v89 = v268 - v257;
          if (v265 < (v86 + 1) << v263)
            v89 = v19;
          v273 = v86 * v259;
          if (v87 >= a8)
            v90 = 0;
          else
            v90 = v257;
          if (v87 >= a8)
            v91 = v88;
          else
            v91 = v89;
          v271 = (char *)v13 + (v90 + ((v86 - v266) << v263) - v257) * a11;
          v92 = v275;
          v93 = a7;
          if (v80 | v84)
          {
            do
            {
              v95 = 0;
              v96 = 0;
              v97 = v92 << v67;
              v98 = v92 - v275;
              v99 = v92 + v273;
              v100 = ++v92 << v67;
              if (v97 >= v93)
                v101 = 0;
              else
                v101 = v85;
              v277 = v99 * v18[3] * *((unsigned __int8 *)v18 + 9);
              v102 = 1;
              v103 = v83;
              v104 = v79;
              v105 = v84;
              v106 = v80;
              do
              {
                --v105;
                if (v103)
                  v96 |= (unint64_t)(v102 & ~(-1 << v84)) << v95++;
                else
                  v105 = 0;
                if (v104)
                  --v106;
                else
                  v106 = 0;
                v102 *= 2;
                v95 = (__PAIR64__(v95, v104) - 1) >> 32;
                v104 = v106 != 0;
                v103 = v105 != 0;
              }
              while (v106 | v105);
              v107 = 0;
              v108 = 0;
              if (v286 >= v100)
                v109 = 1 << v67;
              else
                v109 = v280;
              v110 = 1;
              v111 = v83;
              v112 = v79;
              v113 = v84;
              v114 = v80;
              do
              {
                --v113;
                v115 = v111;
                if (!v115)
                  v113 = 0;
                v116 = v107 + v115;
                if (v112)
                  --v114;
                else
                  v114 = 0;
                if (v112)
                  v108 |= (unint64_t)(v110 & ~(-1 << v80)) << v116++;
                v110 *= 2;
                v107 = v116 - 1;
                v112 = v114 != 0;
                v111 = v113 != 0;
              }
              while (v114 | v113);
              v117 = 0;
              v118 = 0;
              if (v286 >= v100)
                v119 = v284 - v85;
              else
                v119 = a9;
              v120 = &v271[2 * (v101 + (v98 << v67) - v85)];
              v121 = 1;
              v122 = v83;
              v123 = v79;
              v124 = v84;
              v125 = v80;
              do
              {
                --v124;
                if (v122)
                {
                  v118 |= (unint64_t)(v121 & v101) << v117;
                  v126 = v117 + 1;
                }
                else
                {
                  v124 = 0;
                  v126 = v117;
                }
                if (v123)
                  --v125;
                else
                  v125 = 0;
                v121 *= 2;
                v117 = (__PAIR64__(v126, v123) - 1) >> 32;
                v123 = v125 != 0;
                v122 = v124 != 0;
              }
              while (v125 | v124);
              v127 = 0;
              v128 = 0;
              v129 = 1;
              v130 = v83;
              v131 = v79;
              LODWORD(result) = v84;
              v132 = v80;
              do
              {
                v133 = v130;
                if (v133)
                  result = (result - 1);
                else
                  result = 0;
                v134 = v127 + v133;
                v135 = ((unint64_t)(v129 & v90) << (v127 + v133)) | v128;
                if (v131)
                  --v132;
                else
                  v132 = 0;
                if (v131)
                {
                  v128 = v135;
                  ++v134;
                }
                v129 *= 2;
                v127 = v134 - 1;
                v131 = v132 != 0;
                v130 = (_DWORD)result != 0;
              }
              while (v132 | result);
              v93 = a7;
              if (v97 >= a7)
                v136 = v109;
              else
                v136 = v119;
              if (v91 && v136)
              {
                for (j = 0; j != v91; ++j)
                {
                  LODWORD(result) = v136;
                  v138 = (__int16 *)v120;
                  v139 = v118;
                  do
                  {
                    v140 = *v138++;
                    *(_WORD *)(v277 + v16 + 2 * (v139 + v128)) = v140;
                    v139 = (v139 - v96) & v96;
                    result = (result - 1);
                  }
                  while ((_DWORD)result);
                  v128 = (v128 - v108) & v108;
                  v120 += a11;
                }
              }
              v18 = a12;
            }
            while (v92 != v282);
          }
          else
          {
            v94 = v275;
            do
            {
              v141 = v94 << v67;
              v142 = v94 + 1;
              v143 = a9;
              if (v286 >= (v94 + 1) << v67)
                v143 = v284 - v85;
              v144 = 1 << v67;
              if (v286 < v142 << v67)
                v144 = v280;
              if (v141 >= a7)
                v143 = v144;
              if (v91 && v143)
              {
                v145 = 0;
                v146 = (v94 + v273) * v18[3] * *((unsigned __int8 *)v18 + 9);
                if (v141 >= a7)
                  v147 = 0;
                else
                  v147 = v85;
                v148 = (unsigned __int16 *)&v271[2 * (v147 + ((v94 - v275) << v67) - v85)];
                do
                {
                  v149 = v143;
                  v150 = v148;
                  do
                  {
                    v151 = *v150++;
                    result = v151;
                    *(_WORD *)(v16 + v146) = v151;
                    --v149;
                  }
                  while (v149);
                  v148 = (unsigned __int16 *)((char *)v148 + a11);
                  ++v145;
                }
                while (v145 != v91);
              }
              v94 = v142;
            }
            while (v142 != v282);
          }
          v86 = v269;
          v13 = a2;
          v19 = a10;
        }
        while (v269 != v261);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, uint64_t a11, unsigned __int16 *a12, uint64_t a13)
{
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  char v20;
  unsigned int v21;
  char v22;
  int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  BOOL v29;
  unsigned int v30;
  BOOL v31;
  char v32;
  char v33;
  int v34;
  char v35;
  unsigned int v36;
  BOOL v37;
  BOOL v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  BOOL v81;
  char v82;
  int v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  BOOL v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  BOOL v111;
  BOOL v112;
  int v113;
  int v114;
  int v115;
  int v116;
  BOOL v117;
  BOOL v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  char v130;
  int v131;
  int v132;
  unsigned int v134;
  unsigned int v135;
  char v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  int v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v155;
  BOOL v156;
  BOOL v157;
  int v158;
  int v159;
  uint64_t v160;
  char v161[16];
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned __int8 v169;

  if (result && a2)
  {
    v16 = a11;
    v17 = a10;
    if (a12)
    {
      v18 = a7;
      v160 = result;
      if (*((_BYTE *)a12 + 20))
      {
        result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), *(_DWORD *)(a13 + 8), *(_DWORD *)(a13 + 12), *(_DWORD *)(a13 + 4), *(_DWORD *)a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v161);
        v19 = *((_BYTE *)a12 + 13);
        v20 = *((_BYTE *)a12 + 12);
        v129 = a2;
        if (1 << v19 >= a6 || a5 >> v20)
        {
          v78 = a6 >> v19;
          v79 = 1 << v20;
          v80 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
          if (a6 < 2)
            v80 = 0;
          v81 = v79 >= a5;
          if (v79 < a5)
            v82 = v20 + v19 + v80;
          else
            v82 = *((_BYTE *)a12 + 12);
          if (v81)
            LOBYTE(v83) = *((_BYTE *)a12 + 13);
          else
            v83 = -v80;
          if (!v78)
            v20 = v82;
          v130 = v20;
          if (v78)
            v22 = *((_BYTE *)a12 + 13);
          else
            v22 = v83;
        }
        else
        {
          v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
          if (a5 < 2)
            LOBYTE(v21) = 0;
          v130 = v21;
          v22 = v20 + v19 - v21;
        }
        v84 = v160;
        v128 = v167;
        if (v167)
        {
          v85 = 1 << v130;
          v86 = 1 << v22;
          v87 = v168;
          v159 = v165;
          v157 = v165 != 0;
          v158 = v166;
          v156 = v166 != 0;
          v127 = 1 << v130;
          if (1 << v130 >= a5)
            v85 = a5;
          v144 = v85;
          v146 = 1 << v22;
          if (v86 >= a6)
            v86 = a6;
          v142 = v86;
          if (v168)
          {
            v88 = 0;
            v89 = 0;
            v140 = a8 >> v22;
            v90 = v163;
            v91 = v164;
            v92 = v169;
            v125 = v162;
            v126 = a7 >> v130;
            v93 = v166 | v165;
            v124 = a9 + a7;
            v138 = a10 + a8;
            do
            {
              v132 = v89;
              v94 = 0;
              v95 = 0;
              v96 = a9;
              if (v124 >= (v88 + v126 + 1) << v130)
                v96 = v127 - ((v127 - 1) & a7);
              v97 = 1 << v130;
              if (v124 < (v88 + v126 + 1) << v130)
                v97 = (v127 - 1) & (a9 + a7);
              v98 = (v88 + v126) << v130 >= v18;
              v99 = v125 + v88;
              v100 = v88 << v130;
              if (v98)
                v101 = v97;
              else
                v101 = v96;
              v102 = (v127 - 1) & a7;
              if (v98)
                v102 = 0;
              v151 = v102;
              v153 = v101;
              v149 = v129 + 4 * (v102 + v100);
              do
              {
                v107 = v90 + v94;
                if (v92)
                {
                  if (!v93)
                    goto LABEL_155;
                  v108 = 0;
                  v109 = 0;
                  v110 = 1;
                  v111 = v156;
                  v112 = v157;
                  v113 = v159;
                  v114 = v158;
                  do
                  {
                    --v113;
                    if (v112)
                      v109 |= (v110 & v99) << v108;
                    else
                      v113 = 0;
                    if (v112)
                      ++v108;
                    --v114;
                    if (v111)
                      v109 |= (v110 & v107) << v108;
                    else
                      v114 = 0;
                    if (v111)
                      ++v108;
                    v110 *= 2;
                    --v108;
                    v111 = v114 != 0;
                    v112 = v113 != 0;
                  }
                  while (v114 | v113);
                }
                else
                {
                  if (!v93)
                  {
LABEL_155:
                    v109 = 0;
                    goto LABEL_156;
                  }
                  v115 = 0;
                  v109 = 0;
                  v116 = 1;
                  v118 = v156;
                  v117 = v157;
                  v119 = v158;
                  v120 = v159;
                  do
                  {
                    --v119;
                    if (v118)
                      v109 |= (v116 & v107) << v115;
                    else
                      v119 = 0;
                    if (v118)
                      ++v115;
                    --v120;
                    if (v117)
                      v109 |= (v116 & v99) << v115;
                    else
                      v120 = 0;
                    if (v117)
                      ++v115;
                    v116 *= 2;
                    --v115;
                    v117 = v120 != 0;
                    v118 = v119 != 0;
                  }
                  while (v120 | v119);
                }
LABEL_156:
                v121 = *(_DWORD *)(v84 + 4 * ((v109 + v91) | ((v109 + v91) >> 8 << 9)));
                if (v121 < 0)
                {
                  v122 = v84 - *(_QWORD *)(a13 + 24) + ((unint64_t)(v121 & 0x3FFFFFF) << 14);
                  v123 = *(_DWORD *)(a13 + 8);
                  if (*(_DWORD *)a13 > v123)
                    v122 += get_level_offset_within_tail(*(_DWORD *)a13, v123, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                  v103 = a10;
                  if (v138 >= (v94 + v140 + 1) << v22)
                    v103 = v146 - ((v146 - 1) & a8);
                  v104 = 1 << v22;
                  if (v138 < (v94 + v140 + 1) << v22)
                    v104 = (v146 - 1) & (a10 + a8);
                  v105 = (v146 - 1) & a8;
                  if ((v94 + v140) << v22 < a8)
                  {
                    v106 = v103;
                  }
                  else
                  {
                    v105 = 0;
                    v106 = v104;
                  }
                  result = agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)0>>(v122, v149 + (v105 + (v94 << v22)) * a11, v144, v142, v153, v106, a11, v151, v105);
                  v84 = v160;
                }
                v94 = (unsigned __int16)++v95;
              }
              while (v87 > (unsigned __int16)v95);
              v18 = a7;
              v89 = v132 + 1;
              v88 = (unsigned __int16)(v132 + 1);
            }
            while (v128 > v88);
          }
        }
      }
      else
      {
        LOBYTE(v23) = *((_BYTE *)a12 + 13);
        v24 = *((_BYTE *)a12 + 12);
        v25 = 1 << v23;
        v26 = a5 >> v24;
        v27 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
        if (a6 < 2)
          v27 = 0;
        v28 = v24 + v23;
        if (a6 >> v23)
          v29 = 1;
        else
          v29 = 1 << v24 >= a5;
        if (!v29)
        {
          v24 += v23 + v27;
          v23 = -v27;
        }
        v30 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
        if (a5 < 2)
          LOBYTE(v30) = 0;
        v31 = v25 < a6 && v26 == 0;
        if (v31)
          v32 = v30;
        else
          v32 = v24;
        if (v31)
          v33 = v28 - v30;
        else
          v33 = v23;
        v34 = 1 << v33;
        v35 = *((_BYTE *)a12 + 15);
        v36 = 1 << v35;
        if (v35)
          v37 = v36 > a3;
        else
          v37 = 1;
        v38 = v37 || v36 > a4;
        v39 = (~(-1 << v35) + a3) & (-1 << v35);
        if (v38)
          v40 = a3;
        else
          v40 = v39;
        v139 = a8 >> v33;
        v141 = 1 << v33;
        v41 = v34 - 1;
        v136 = v33;
        v137 = a10 + a8;
        v135 = (v34 - 1 + a10 + a8) >> v33;
        if (a8 >> v33 < v135)
        {
          v42 = 1 << v32;
          v43 = a7 >> v32;
          v44 = a9 + a7;
          v45 = (1 << v32) - 1;
          v46 = (v45 + a9 + a7) >> v32;
          if (1 << v32 >= a5)
            v47 = a5;
          else
            v47 = 1 << v32;
          v48 = 1 << v33;
          if (v141 >= a6)
            v48 = a6;
          v29 = v46 >= v43;
          v49 = v46 - v43;
          if (v49 != 0 && v29)
          {
            v50 = v45 & a7;
            v51 = v45 & v44;
            v52 = v42 - v50;
            v131 = v41 & v137;
            v145 = v41 & a8;
            v53 = v139;
            v134 = (v40 + ~(-1 << v32)) >> v32;
            v54 = v43 + v134 * v139;
            v155 = v47;
            v150 = v49;
            v152 = v48;
            v148 = v45 & v44;
            v147 = v42 - v50;
            do
            {
              v55 = v53 << v136;
              v56 = v53 + 1;
              if (v137 >= (v53 + 1) << v136)
                v57 = v141;
              else
                v57 = v131;
              if (v137 >= v56 << v136)
                v58 = v141 - v145;
              else
                v58 = v17;
              v59 = (v53 - v139) << v136;
              v143 = v56;
              if (v55 >= a8)
              {
                v69 = 0;
                v70 = (v59 - v145) * v16;
                do
                {
                  v71 = (v43 + v69) << v32;
                  v72 = (v43 + v69 + 1) << v32;
                  v73 = v44 >= v72;
                  if (v44 >= v72)
                    v74 = v52;
                  else
                    v74 = a9;
                  if (v73)
                    v75 = v42;
                  else
                    v75 = v51;
                  if (v71 >= a7)
                    v76 = 0;
                  else
                    v76 = v50;
                  if (v71 >= a7)
                    v77 = v75;
                  else
                    v77 = v74;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)0>>((v54 + v69) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, a2 + 4 * ((v76 + (v69 << v32)) - v50) + v70, v155, v152, v77, v57, v16, v76, 0);
                  v52 = v147;
                  v51 = v148;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v160;
                  ++v69;
                }
                while (v150 != v69);
              }
              else
              {
                v60 = 0;
                v61 = ((v145 + v59) - v145) * v16;
                do
                {
                  v62 = (v43 + v60) << v32;
                  v63 = (v43 + v60 + 1) << v32;
                  v64 = v44 >= v63;
                  if (v44 >= v63)
                    v65 = v52;
                  else
                    v65 = a9;
                  if (v64)
                    v66 = v42;
                  else
                    v66 = v51;
                  if (v62 >= a7)
                    v67 = 0;
                  else
                    v67 = v50;
                  if (v62 >= a7)
                    v68 = v66;
                  else
                    v68 = v65;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)0>>((v54 + v60) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, a2 + 4 * ((v67 + (v60 << v32)) - v50) + v61, v155, v152, v68, v58, v16, v67, v145);
                  v52 = v147;
                  v51 = v148;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v160;
                  ++v60;
                }
                while (v150 != v60);
              }
              v54 += v134;
              v53 = v143;
              v17 = a10;
            }
            while (v143 != v135);
          }
        }
      }
    }
    else
    {
      return agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)0>>(result, a2, a5, a6, a9, a10, a11, a7, a8);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)1>>(uint64_t result, int *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  int *v13;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  unsigned int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  BOOL v103;
  BOOL v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  BOOL v111;
  BOOL v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  char *v120;
  int v121;
  BOOL v122;
  BOOL v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  unint64_t v128;
  int v129;
  BOOL v130;
  BOOL v131;
  unsigned int v132;
  int v133;
  int v134;
  unint64_t v135;
  int v136;
  int j;
  int *v138;
  uint64_t v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  int v147;
  char *v148;
  int v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  BOOL v155;
  char v156;
  int v157;
  int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  unsigned int v162;
  BOOL v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  BOOL v182;
  BOOL v183;
  int v184;
  int v185;
  int v186;
  BOOL v187;
  int v188;
  BOOL v189;
  int v190;
  int v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  int v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  int v200;
  BOOL v201;
  BOOL v202;
  unsigned int v203;
  unsigned int v204;
  int v205;
  uint64_t v206;
  int v207;
  BOOL v208;
  BOOL v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  int v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  BOOL v217;
  BOOL v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  uint64_t v222;
  int v223;
  BOOL v224;
  unsigned int v225;
  unsigned int v226;
  int v227;
  int v228;
  int v229;
  unsigned int *v230;
  int v231;
  unsigned int *v232;
  uint64_t v233;
  unsigned int v234;
  int i;
  int v236;
  int *v237;
  uint64_t v238;
  int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  char v245;
  int *v246;
  int v248;
  BOOL v249;
  int v250;
  char v251;
  int *v252;
  int v254;
  BOOL v255;
  uint64_t v257;
  int v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  int v262;
  char v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  unsigned int v270;
  char *v271;
  BOOL v272;
  int v273;
  BOOL v274;
  unsigned int v275;
  int v276;
  uint64_t v277;
  int v278;
  unsigned int v279;
  int v280;
  int v281;
  unsigned int v282;
  int v283;
  int v284;
  int v285;
  unsigned int v286;
  int v287;
  char v288[16];
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned __int8 v296;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v16 = result;
  v17 = a11;
  v18 = a12;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a6 - 1);
    v25 = a6 > 1;
    if (a6 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a5 - 1);
    v28 = a5 > 1;
    if (a5 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v26 | v29)
    {
      v30 = 0;
      v31 = 0;
      v32 = a5 > 1;
      v33 = a6 > 1;
      v34 = 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        if (v32)
          v31 |= (unint64_t)(v34 & ~(-1 << v29)) << v30++;
        else
          v35 = 0;
        --v36;
        if (!v33)
          v36 = 0;
        v34 *= 2;
        v30 = (__PAIR64__(v30, v33) - 1) >> 32;
        v33 = v36 != 0;
        v32 = v35 != 0;
      }
      while (v36 | v35);
      v37 = 0;
      v38 = 0;
      v39 = 1;
      v40 = a5 > 1;
      v41 = a6 > 1;
      v42 = v29;
      v43 = v26;
      do
      {
        --v42;
        v44 = v40;
        if (!v44)
          v42 = 0;
        v45 = v37 + v44;
        --v43;
        if (v41)
          v38 |= (unint64_t)(v39 & ~(-1 << v26)) << v45++;
        else
          v43 = 0;
        v39 *= 2;
        v37 = v45 - 1;
        v41 = v43 != 0;
        v40 = v42 != 0;
      }
      while (v43 | v42);
      v46 = 0;
      v47 = 0;
      v48 = a5 > 1;
      v49 = a6 > 1;
      v50 = 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        if (v48)
          v47 |= (unint64_t)(v50 & a7) << v46++;
        else
          v51 = 0;
        --v52;
        if (!v49)
          v52 = 0;
        v50 *= 2;
        v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        v49 = v52 != 0;
        v48 = v51 != 0;
      }
      while (v52 | v51);
      v53 = 0;
      v54 = 0;
      v55 = 1;
      do
      {
        --v29;
        v56 = v28;
        if (!v56)
          v29 = 0;
        v57 = v53 + v56;
        --v26;
        if (v25)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          v58 = v57 + 1;
        }
        else
        {
          v26 = 0;
          v58 = v57;
        }
        v55 *= 2;
        v53 = v58 - 1;
        v25 = v26 != 0;
        v28 = v29 != 0;
        result = v26 | v29;
      }
      while ((_DWORD)result);
      v19 = a10;
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v38 = 0;
      v54 = 0;
      if (!a9)
        return result;
    }
    if (v19)
    {
      for (i = 0; i != v19; ++i)
      {
        v236 = a9;
        v237 = v13;
        v238 = v47;
        do
        {
          v239 = *v237++;
          *(_DWORD *)(v16 + 4 * (v238 + v54)) = v239;
          v238 = (v238 - v31) & v31;
          --v236;
        }
        while (v236);
        v54 = (v54 - v38) & v38;
        v13 = (int *)((char *)v13 + a11);
      }
    }
    return result;
  }
  if (*((_BYTE *)a12 + 20))
  {
    result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 1u, a7, a8, a9, a10, (uint64_t)v288);
    v20 = *((_BYTE *)a12 + 13);
    v21 = *((_BYTE *)a12 + 12);
    v246 = v13;
    if (1 << v20 >= a6 || a5 >> v21)
    {
      v152 = a6 >> v20;
      v153 = 1 << v21;
      v154 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
      if (a6 < 2)
        v154 = 0;
      v155 = v153 >= a5;
      if (v153 < a5)
        v156 = v21 + v20 + v154;
      else
        v156 = *((_BYTE *)a12 + 12);
      if (v155)
        LOBYTE(v157) = *((_BYTE *)a12 + 13);
      else
        v157 = -v154;
      if (!v152)
        v21 = v156;
      v245 = v21;
      if (v152)
        v23 = *((_BYTE *)a12 + 13);
      else
        v23 = v157;
    }
    else
    {
      v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
      if (a5 < 2)
        LOBYTE(v22) = 0;
      v245 = v22;
      v23 = v21 + v20 - v22;
    }
    v158 = a10;
    v159 = a8;
    v244 = v294;
    if (v294)
    {
      v160 = 1 << v23;
      if (1 << v23 >= a6)
        v161 = a6;
      else
        v161 = 1 << v23;
      v162 = 32 - __clz(v161 - 1);
      v163 = v161 > 1;
      if (v161 <= 1)
        v164 = 0;
      else
        v164 = v162;
      v243 = 1 << v245;
      if (1 << v245 >= a5)
        v165 = a5;
      else
        v165 = 1 << v245;
      v166 = 32 - __clz(v165 - 1);
      v167 = v295;
      v255 = v165 > 1;
      if (v165 <= 1)
        v166 = 0;
      v279 = v166;
      v276 = v293;
      v278 = v292;
      v274 = v292 != 0;
      v272 = v293 != 0;
      if (v295)
      {
        v168 = 0;
        v242 = a7 >> v245;
        v267 = a8 >> v23;
        v281 = v293 | v292;
        v285 = v296;
        v287 = v291;
        v241 = a9 + a7;
        v240 = v289;
        v283 = v290;
        v262 = (v160 - 1) & a8;
        v264 = (v160 - 1) & (a10 + a8);
        v260 = v160 - v262;
        v169 = ~(-1 << v166);
        v258 = v164 | v166;
        v270 = v295;
        v250 = 1 << v23;
        v251 = v23;
        v249 = v163;
        do
        {
          v170 = 0;
          v171 = v168 + v240;
          v172 = (v168 + v242) << v245;
          v173 = a9;
          if (v241 >= (v168 + v242 + 1) << v245)
            v173 = v243 - ((v243 - 1) & a7);
          v174 = 1 << v245;
          if (v241 < (v168 + v242 + 1) << v245)
            v174 = (v243 - 1) & (a9 + a7);
          v248 = v168;
          if (v172 >= a7)
            v175 = v174;
          else
            v175 = v173;
          if (v172 >= a7)
            v176 = 0;
          else
            v176 = (v243 - 1) & a7;
          v252 = &v246[v176 + (v168 << v245)];
          do
          {
            v177 = v170 + v283;
            if (v285)
            {
              v178 = v281;
              if (v281)
              {
                v179 = 0;
                v178 = 0;
                v180 = 1;
                v182 = v274;
                v181 = v276;
                v183 = v272;
                v184 = v278;
                do
                {
                  --v184;
                  if (v182)
                    v178 |= (v180 & v171) << v179;
                  else
                    v184 = 0;
                  if (v182)
                    ++v179;
                  --v181;
                  if (v183)
                    v178 |= (v180 & v177) << v179;
                  else
                    v181 = 0;
                  if (v183)
                    ++v179;
                  v180 *= 2;
                  --v179;
                  v183 = v181 != 0;
                  v182 = v184 != 0;
                }
                while (v181 | v184);
              }
            }
            else
            {
              v178 = v281;
              if (v281)
              {
                v185 = 0;
                v178 = 0;
                v186 = 1;
                v187 = v272;
                v189 = v274;
                v188 = v276;
                v190 = v278;
                do
                {
                  --v188;
                  if (v187)
                    v178 |= (v186 & v177) << v185;
                  else
                    v188 = 0;
                  if (v187)
                    ++v185;
                  --v190;
                  if (v189)
                    v178 |= (v186 & v171) << v185;
                  else
                    v190 = 0;
                  if (v189)
                    ++v185;
                  v186 *= 2;
                  --v185;
                  v189 = v190 != 0;
                  v187 = v188 != 0;
                }
                while (v190 | v188);
              }
            }
            v191 = *(_DWORD *)(v16 + 4 * ((v178 + v287) | ((v178 + v287) >> 8 << 9)));
            if (v191 < 0)
            {
              v192 = v16 - *((_QWORD *)a13 + 3) + ((unint64_t)(v191 & 0x3FFFFFF) << 14);
              result = *a13;
              v193 = a13[2];
              if (result > v193)
              {
                result = get_level_offset_within_tail(result, v193, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                v167 = v270;
                v163 = v249;
                v160 = v250;
                v23 = v251;
                v17 = a11;
                v159 = a8;
                v158 = a10;
                v192 += result;
              }
              v194 = (v170 + v267) << v23;
              v195 = v260;
              if (a10 + a8 >= (v170 + v267 + 1) << v23)
              {
                v196 = v160;
              }
              else
              {
                v195 = v158;
                v196 = v264;
              }
              if (v194 >= v159)
                v197 = 0;
              else
                v197 = v262;
              if (v194 >= v159)
                v195 = v196;
              if (!v258)
              {
                v215 = 0;
                v199 = 0;
                v206 = 0;
                v222 = 0;
                if (!v175)
                  goto LABEL_213;
LABEL_285:
                if (v195)
                {
                  v229 = 0;
                  v230 = (unsigned int *)((char *)v252 + (v197 + (v170 << v23)) * v17);
                  do
                  {
                    v231 = v175;
                    v232 = v230;
                    v233 = v215;
                    do
                    {
                      v234 = *v232++;
                      result = v234;
                      *(_DWORD *)(v192 + 4 * (v233 + v222)) = v234;
                      v233 = (v233 - v199) & v199;
                      --v231;
                    }
                    while (v231);
                    v222 = (v222 - v206) & v206;
                    v230 = (unsigned int *)((char *)v230 + v17);
                    ++v229;
                  }
                  while (v229 != v195);
                }
                goto LABEL_213;
              }
              v198 = 0;
              v199 = 0;
              v200 = 1;
              v201 = v255;
              v202 = v163;
              v203 = v279;
              v204 = v164;
              do
              {
                --v203;
                if (v201)
                  v199 |= (unint64_t)(v200 & v169) << v198++;
                else
                  v203 = 0;
                --v204;
                if (!v202)
                  v204 = 0;
                v200 *= 2;
                v198 = (__PAIR64__(v198, v202) - 1) >> 32;
                v202 = v204 != 0;
                v201 = v203 != 0;
              }
              while (v204 | v203);
              v205 = 0;
              v206 = 0;
              v207 = 1;
              v208 = v255;
              v209 = v163;
              v210 = v279;
              v211 = v164;
              do
              {
                --v210;
                v212 = v208;
                if (!v212)
                  v210 = 0;
                v213 = v205 + v212;
                --v211;
                if (v209)
                  v206 |= (unint64_t)(v207 & ~(-1 << v164)) << v213++;
                else
                  v211 = 0;
                v207 *= 2;
                v205 = v213 - 1;
                v209 = v211 != 0;
                v208 = v210 != 0;
              }
              while (v211 | v210);
              v214 = 0;
              v215 = 0;
              v216 = 1;
              v217 = v255;
              v218 = v163;
              v219 = v279;
              v220 = v164;
              do
              {
                --v219;
                if (v217)
                  v215 |= (unint64_t)(v216 & v176) << v214++;
                else
                  v219 = 0;
                --v220;
                if (!v218)
                  v220 = 0;
                v216 *= 2;
                v214 = (__PAIR64__(v214, v218) - 1) >> 32;
                v218 = v220 != 0;
                v217 = v219 != 0;
              }
              while (v220 | v219);
              v221 = 0;
              v222 = 0;
              v223 = 1;
              v224 = v255;
              LOBYTE(result) = v163;
              v225 = v279;
              v226 = v164;
              do
              {
                --v225;
                v227 = v224;
                if (!v227)
                  v225 = 0;
                v228 = v221 + v227;
                --v226;
                if ((result & 1) != 0)
                  v222 |= (unint64_t)(v223 & v197) << v228++;
                else
                  v226 = 0;
                v223 *= 2;
                v221 = v228 - 1;
                result = v226 != 0;
                v224 = v225 != 0;
              }
              while (v226 | v225);
              v167 = v270;
              if (v175)
                goto LABEL_285;
            }
LABEL_213:
            ++v170;
          }
          while (v167 > (unsigned __int16)v170);
          v168 = v248 + 1;
        }
        while (v244 > (unsigned __int16)(v248 + 1));
      }
    }
  }
  else
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v266 = a8 >> v66;
    v268 = 1 << v66;
    v76 = v69 - 1;
    v263 = v66;
    v265 = a10 + a8;
    v261 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 < v261)
    {
      result = a7 >> v67;
      v77 = (1 << v67) - 1;
      v286 = a9 + a7;
      if (v69 >= a6)
        v69 = a6;
      v78 = 32 - __clz(v69 - 1);
      v79 = v69 > 1;
      if (v69 <= 1)
        v80 = 0;
      else
        v80 = v78;
      v282 = (v77 + a9 + a7) >> v67;
      v284 = 1 << v67;
      if (1 << v67 >= a5)
        v81 = a5;
      else
        v81 = 1 << v67;
      v82 = 32 - __clz(v81 - 1);
      v83 = v81 > 1;
      if (v81 <= 1)
        v84 = 0;
      else
        v84 = v82;
      v275 = a7 >> v67;
      if (result < (v77 + a9 + a7) >> v67)
      {
        v259 = (v75 + ~(-1 << v67)) >> v67;
        v85 = v77 & a7;
        v280 = v77 & v286;
        v254 = v76 & v265;
        v257 = v76 & a8;
        v86 = v266;
        do
        {
          v87 = v86 << v263;
          v269 = v86 + 1;
          v88 = v268;
          if (v265 < (v86 + 1) << v263)
            v88 = v254;
          v89 = v268 - v257;
          if (v265 < (v86 + 1) << v263)
            v89 = v19;
          v273 = v86 * v259;
          if (v87 >= a8)
            v90 = 0;
          else
            v90 = v257;
          if (v87 >= a8)
            v91 = v88;
          else
            v91 = v89;
          v271 = (char *)v13 + (v90 + ((v86 - v266) << v263) - v257) * a11;
          v92 = v275;
          v93 = a7;
          if (v80 | v84)
          {
            do
            {
              v95 = 0;
              v96 = 0;
              v97 = v92 << v67;
              v98 = v92 - v275;
              v99 = v92 + v273;
              v100 = ++v92 << v67;
              if (v97 >= v93)
                v101 = 0;
              else
                v101 = v85;
              v277 = v99 * v18[3] * *((unsigned __int8 *)v18 + 9);
              v102 = 1;
              v103 = v83;
              v104 = v79;
              v105 = v84;
              v106 = v80;
              do
              {
                --v105;
                if (v103)
                  v96 |= (unint64_t)(v102 & ~(-1 << v84)) << v95++;
                else
                  v105 = 0;
                if (v104)
                  --v106;
                else
                  v106 = 0;
                v102 *= 2;
                v95 = (__PAIR64__(v95, v104) - 1) >> 32;
                v104 = v106 != 0;
                v103 = v105 != 0;
              }
              while (v106 | v105);
              v107 = 0;
              v108 = 0;
              if (v286 >= v100)
                v109 = 1 << v67;
              else
                v109 = v280;
              v110 = 1;
              v111 = v83;
              v112 = v79;
              v113 = v84;
              v114 = v80;
              do
              {
                --v113;
                v115 = v111;
                if (!v115)
                  v113 = 0;
                v116 = v107 + v115;
                if (v112)
                  --v114;
                else
                  v114 = 0;
                if (v112)
                  v108 |= (unint64_t)(v110 & ~(-1 << v80)) << v116++;
                v110 *= 2;
                v107 = v116 - 1;
                v112 = v114 != 0;
                v111 = v113 != 0;
              }
              while (v114 | v113);
              v117 = 0;
              v118 = 0;
              if (v286 >= v100)
                v119 = v284 - v85;
              else
                v119 = a9;
              v120 = &v271[4 * (v101 + (v98 << v67) - v85)];
              v121 = 1;
              v122 = v83;
              v123 = v79;
              v124 = v84;
              v125 = v80;
              do
              {
                --v124;
                if (v122)
                {
                  v118 |= (unint64_t)(v121 & v101) << v117;
                  v126 = v117 + 1;
                }
                else
                {
                  v124 = 0;
                  v126 = v117;
                }
                if (v123)
                  --v125;
                else
                  v125 = 0;
                v121 *= 2;
                v117 = (__PAIR64__(v126, v123) - 1) >> 32;
                v123 = v125 != 0;
                v122 = v124 != 0;
              }
              while (v125 | v124);
              v127 = 0;
              v128 = 0;
              v129 = 1;
              v130 = v83;
              v131 = v79;
              LODWORD(result) = v84;
              v132 = v80;
              do
              {
                v133 = v130;
                if (v133)
                  result = (result - 1);
                else
                  result = 0;
                v134 = v127 + v133;
                v135 = ((unint64_t)(v129 & v90) << (v127 + v133)) | v128;
                if (v131)
                  --v132;
                else
                  v132 = 0;
                if (v131)
                {
                  v128 = v135;
                  ++v134;
                }
                v129 *= 2;
                v127 = v134 - 1;
                v131 = v132 != 0;
                v130 = (_DWORD)result != 0;
              }
              while (v132 | result);
              v93 = a7;
              if (v97 >= a7)
                v136 = v109;
              else
                v136 = v119;
              if (v91 && v136)
              {
                for (j = 0; j != v91; ++j)
                {
                  LODWORD(result) = v136;
                  v138 = (int *)v120;
                  v139 = v118;
                  do
                  {
                    v140 = *v138++;
                    *(_DWORD *)(v277 + v16 + 4 * (v139 + v128)) = v140;
                    v139 = (v139 - v96) & v96;
                    result = (result - 1);
                  }
                  while ((_DWORD)result);
                  v128 = (v128 - v108) & v108;
                  v120 += a11;
                }
              }
              v18 = a12;
            }
            while (v92 != v282);
          }
          else
          {
            v94 = v275;
            do
            {
              v141 = v94 << v67;
              v142 = v94 + 1;
              v143 = a9;
              if (v286 >= (v94 + 1) << v67)
                v143 = v284 - v85;
              v144 = 1 << v67;
              if (v286 < v142 << v67)
                v144 = v280;
              if (v141 >= a7)
                v143 = v144;
              if (v91 && v143)
              {
                v145 = 0;
                v146 = (v94 + v273) * v18[3] * *((unsigned __int8 *)v18 + 9);
                if (v141 >= a7)
                  v147 = 0;
                else
                  v147 = v85;
                v148 = &v271[4 * (v147 + ((v94 - v275) << v67) - v85)];
                do
                {
                  v149 = v143;
                  v150 = (unsigned int *)v148;
                  do
                  {
                    v151 = *v150++;
                    result = v151;
                    *(_DWORD *)(v16 + v146) = v151;
                    --v149;
                  }
                  while (v149);
                  v148 += a11;
                  ++v145;
                }
                while (v145 != v91);
              }
              v94 = v142;
            }
            while (v142 != v282);
          }
          v86 = v269;
          v13 = a2;
          v19 = a10;
        }
        while (v269 != v261);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, uint64_t a11, unsigned __int16 *a12, uint64_t a13)
{
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  char v20;
  unsigned int v21;
  char v22;
  int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  BOOL v29;
  unsigned int v30;
  BOOL v31;
  char v32;
  char v33;
  int v34;
  char v35;
  unsigned int v36;
  BOOL v37;
  BOOL v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  BOOL v81;
  char v82;
  int v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  BOOL v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  BOOL v111;
  BOOL v112;
  int v113;
  int v114;
  int v115;
  int v116;
  BOOL v117;
  BOOL v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  char v130;
  int v131;
  int v132;
  unsigned int v134;
  unsigned int v135;
  char v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  int v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v155;
  BOOL v156;
  BOOL v157;
  int v158;
  int v159;
  uint64_t v160;
  char v161[16];
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned __int8 v169;

  if (result && a2)
  {
    v16 = a11;
    v17 = a10;
    if (a12)
    {
      v18 = a7;
      v160 = result;
      if (*((_BYTE *)a12 + 20))
      {
        result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), *(_DWORD *)(a13 + 8), *(_DWORD *)(a13 + 12), *(_DWORD *)(a13 + 4), *(_DWORD *)a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v161);
        v19 = *((_BYTE *)a12 + 13);
        v20 = *((_BYTE *)a12 + 12);
        v129 = a2;
        if (1 << v19 >= a6 || a5 >> v20)
        {
          v78 = a6 >> v19;
          v79 = 1 << v20;
          v80 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
          if (a6 < 2)
            v80 = 0;
          v81 = v79 >= a5;
          if (v79 < a5)
            v82 = v20 + v19 + v80;
          else
            v82 = *((_BYTE *)a12 + 12);
          if (v81)
            LOBYTE(v83) = *((_BYTE *)a12 + 13);
          else
            v83 = -v80;
          if (!v78)
            v20 = v82;
          v130 = v20;
          if (v78)
            v22 = *((_BYTE *)a12 + 13);
          else
            v22 = v83;
        }
        else
        {
          v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
          if (a5 < 2)
            LOBYTE(v21) = 0;
          v130 = v21;
          v22 = v20 + v19 - v21;
        }
        v84 = v160;
        v128 = v167;
        if (v167)
        {
          v85 = 1 << v130;
          v86 = 1 << v22;
          v87 = v168;
          v159 = v165;
          v157 = v165 != 0;
          v158 = v166;
          v156 = v166 != 0;
          v127 = 1 << v130;
          if (1 << v130 >= a5)
            v85 = a5;
          v144 = v85;
          v146 = 1 << v22;
          if (v86 >= a6)
            v86 = a6;
          v142 = v86;
          if (v168)
          {
            v88 = 0;
            v89 = 0;
            v140 = a8 >> v22;
            v90 = v163;
            v91 = v164;
            v92 = v169;
            v125 = v162;
            v126 = a7 >> v130;
            v93 = v166 | v165;
            v124 = a9 + a7;
            v138 = a10 + a8;
            do
            {
              v132 = v89;
              v94 = 0;
              v95 = 0;
              v96 = a9;
              if (v124 >= (v88 + v126 + 1) << v130)
                v96 = v127 - ((v127 - 1) & a7);
              v97 = 1 << v130;
              if (v124 < (v88 + v126 + 1) << v130)
                v97 = (v127 - 1) & (a9 + a7);
              v98 = (v88 + v126) << v130 >= v18;
              v99 = v125 + v88;
              v100 = v88 << v130;
              if (v98)
                v101 = v97;
              else
                v101 = v96;
              v102 = (v127 - 1) & a7;
              if (v98)
                v102 = 0;
              v151 = v102;
              v153 = v101;
              v149 = v129 + 8 * (v102 + v100);
              do
              {
                v107 = v90 + v94;
                if (v92)
                {
                  if (!v93)
                    goto LABEL_155;
                  v108 = 0;
                  v109 = 0;
                  v110 = 1;
                  v111 = v156;
                  v112 = v157;
                  v113 = v159;
                  v114 = v158;
                  do
                  {
                    --v113;
                    if (v112)
                      v109 |= (v110 & v99) << v108;
                    else
                      v113 = 0;
                    if (v112)
                      ++v108;
                    --v114;
                    if (v111)
                      v109 |= (v110 & v107) << v108;
                    else
                      v114 = 0;
                    if (v111)
                      ++v108;
                    v110 *= 2;
                    --v108;
                    v111 = v114 != 0;
                    v112 = v113 != 0;
                  }
                  while (v114 | v113);
                }
                else
                {
                  if (!v93)
                  {
LABEL_155:
                    v109 = 0;
                    goto LABEL_156;
                  }
                  v115 = 0;
                  v109 = 0;
                  v116 = 1;
                  v118 = v156;
                  v117 = v157;
                  v119 = v158;
                  v120 = v159;
                  do
                  {
                    --v119;
                    if (v118)
                      v109 |= (v116 & v107) << v115;
                    else
                      v119 = 0;
                    if (v118)
                      ++v115;
                    --v120;
                    if (v117)
                      v109 |= (v116 & v99) << v115;
                    else
                      v120 = 0;
                    if (v117)
                      ++v115;
                    v116 *= 2;
                    --v115;
                    v117 = v120 != 0;
                    v118 = v119 != 0;
                  }
                  while (v120 | v119);
                }
LABEL_156:
                v121 = *(_DWORD *)(v84 + 4 * ((v109 + v91) | ((v109 + v91) >> 8 << 9)));
                if (v121 < 0)
                {
                  v122 = v84 - *(_QWORD *)(a13 + 24) + ((unint64_t)(v121 & 0x3FFFFFF) << 14);
                  v123 = *(_DWORD *)(a13 + 8);
                  if (*(_DWORD *)a13 > v123)
                    v122 += get_level_offset_within_tail(*(_DWORD *)a13, v123, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                  v103 = a10;
                  if (v138 >= (v94 + v140 + 1) << v22)
                    v103 = v146 - ((v146 - 1) & a8);
                  v104 = 1 << v22;
                  if (v138 < (v94 + v140 + 1) << v22)
                    v104 = (v146 - 1) & (a10 + a8);
                  v105 = (v146 - 1) & a8;
                  if ((v94 + v140) << v22 < a8)
                  {
                    v106 = v103;
                  }
                  else
                  {
                    v105 = 0;
                    v106 = v104;
                  }
                  result = agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)0>>(v122, v149 + (v105 + (v94 << v22)) * a11, v144, v142, v153, v106, a11, v151, v105);
                  v84 = v160;
                }
                v94 = (unsigned __int16)++v95;
              }
              while (v87 > (unsigned __int16)v95);
              v18 = a7;
              v89 = v132 + 1;
              v88 = (unsigned __int16)(v132 + 1);
            }
            while (v128 > v88);
          }
        }
      }
      else
      {
        LOBYTE(v23) = *((_BYTE *)a12 + 13);
        v24 = *((_BYTE *)a12 + 12);
        v25 = 1 << v23;
        v26 = a5 >> v24;
        v27 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
        if (a6 < 2)
          v27 = 0;
        v28 = v24 + v23;
        if (a6 >> v23)
          v29 = 1;
        else
          v29 = 1 << v24 >= a5;
        if (!v29)
        {
          v24 += v23 + v27;
          v23 = -v27;
        }
        v30 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
        if (a5 < 2)
          LOBYTE(v30) = 0;
        v31 = v25 < a6 && v26 == 0;
        if (v31)
          v32 = v30;
        else
          v32 = v24;
        if (v31)
          v33 = v28 - v30;
        else
          v33 = v23;
        v34 = 1 << v33;
        v35 = *((_BYTE *)a12 + 15);
        v36 = 1 << v35;
        if (v35)
          v37 = v36 > a3;
        else
          v37 = 1;
        v38 = v37 || v36 > a4;
        v39 = (~(-1 << v35) + a3) & (-1 << v35);
        if (v38)
          v40 = a3;
        else
          v40 = v39;
        v139 = a8 >> v33;
        v141 = 1 << v33;
        v41 = v34 - 1;
        v136 = v33;
        v137 = a10 + a8;
        v135 = (v34 - 1 + a10 + a8) >> v33;
        if (a8 >> v33 < v135)
        {
          v42 = 1 << v32;
          v43 = a7 >> v32;
          v44 = a9 + a7;
          v45 = (1 << v32) - 1;
          v46 = (v45 + a9 + a7) >> v32;
          if (1 << v32 >= a5)
            v47 = a5;
          else
            v47 = 1 << v32;
          v48 = 1 << v33;
          if (v141 >= a6)
            v48 = a6;
          v29 = v46 >= v43;
          v49 = v46 - v43;
          if (v49 != 0 && v29)
          {
            v50 = v45 & a7;
            v51 = v45 & v44;
            v52 = v42 - v50;
            v131 = v41 & v137;
            v145 = v41 & a8;
            v53 = v139;
            v134 = (v40 + ~(-1 << v32)) >> v32;
            v54 = v43 + v134 * v139;
            v155 = v47;
            v150 = v49;
            v152 = v48;
            v148 = v45 & v44;
            v147 = v42 - v50;
            do
            {
              v55 = v53 << v136;
              v56 = v53 + 1;
              if (v137 >= (v53 + 1) << v136)
                v57 = v141;
              else
                v57 = v131;
              if (v137 >= v56 << v136)
                v58 = v141 - v145;
              else
                v58 = v17;
              v59 = (v53 - v139) << v136;
              v143 = v56;
              if (v55 >= a8)
              {
                v69 = 0;
                v70 = (v59 - v145) * v16;
                do
                {
                  v71 = (v43 + v69) << v32;
                  v72 = (v43 + v69 + 1) << v32;
                  v73 = v44 >= v72;
                  if (v44 >= v72)
                    v74 = v52;
                  else
                    v74 = a9;
                  if (v73)
                    v75 = v42;
                  else
                    v75 = v51;
                  if (v71 >= a7)
                    v76 = 0;
                  else
                    v76 = v50;
                  if (v71 >= a7)
                    v77 = v75;
                  else
                    v77 = v74;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)0>>((v54 + v69) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, a2 + 8 * ((v76 + (v69 << v32)) - v50) + v70, v155, v152, v77, v57, v16, v76, 0);
                  v52 = v147;
                  v51 = v148;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v160;
                  ++v69;
                }
                while (v150 != v69);
              }
              else
              {
                v60 = 0;
                v61 = ((v145 + v59) - v145) * v16;
                do
                {
                  v62 = (v43 + v60) << v32;
                  v63 = (v43 + v60 + 1) << v32;
                  v64 = v44 >= v63;
                  if (v44 >= v63)
                    v65 = v52;
                  else
                    v65 = a9;
                  if (v64)
                    v66 = v42;
                  else
                    v66 = v51;
                  if (v62 >= a7)
                    v67 = 0;
                  else
                    v67 = v50;
                  if (v62 >= a7)
                    v68 = v66;
                  else
                    v68 = v65;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)0>>((v54 + v60) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, a2 + 8 * ((v67 + (v60 << v32)) - v50) + v61, v155, v152, v68, v58, v16, v67, v145);
                  v52 = v147;
                  v51 = v148;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v160;
                  ++v60;
                }
                while (v150 != v60);
              }
              v54 += v134;
              v53 = v143;
              v17 = a10;
            }
            while (v143 != v135);
          }
        }
      }
    }
    else
    {
      return agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)0>>(result, a2, a5, a6, a9, a10, a11, a7, a8);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)1>>(uint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  uint64_t *v13;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  unsigned int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  BOOL v103;
  BOOL v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  BOOL v111;
  BOOL v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  char *v120;
  int v121;
  BOOL v122;
  BOOL v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  unint64_t v128;
  int v129;
  BOOL v130;
  BOOL v131;
  unsigned int v132;
  int v133;
  int v134;
  unint64_t v135;
  int v136;
  int j;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  int v147;
  uint64_t *v148;
  int v149;
  uint64_t *v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  BOOL v155;
  char v156;
  int v157;
  int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  unsigned int v162;
  BOOL v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  BOOL v182;
  BOOL v183;
  int v184;
  int v185;
  int v186;
  BOOL v187;
  int v188;
  BOOL v189;
  int v190;
  int v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  int v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  int v200;
  BOOL v201;
  BOOL v202;
  unsigned int v203;
  unsigned int v204;
  int v205;
  uint64_t v206;
  int v207;
  BOOL v208;
  BOOL v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  int v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  BOOL v217;
  BOOL v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  uint64_t v222;
  int v223;
  BOOL v224;
  unsigned int v225;
  unsigned int v226;
  int v227;
  int v228;
  int v229;
  uint64_t *v230;
  int v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  int i;
  int v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  char v245;
  uint64_t *v246;
  int v248;
  BOOL v249;
  int v250;
  char v251;
  uint64_t *v252;
  int v254;
  BOOL v255;
  uint64_t v257;
  int v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  int v262;
  char v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  unsigned int v270;
  char *v271;
  BOOL v272;
  int v273;
  BOOL v274;
  unsigned int v275;
  int v276;
  uint64_t v277;
  int v278;
  unsigned int v279;
  int v280;
  int v281;
  unsigned int v282;
  int v283;
  int v284;
  int v285;
  unsigned int v286;
  int v287;
  char v288[16];
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned __int8 v296;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v16 = result;
  v17 = a11;
  v18 = a12;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a6 - 1);
    v25 = a6 > 1;
    if (a6 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a5 - 1);
    v28 = a5 > 1;
    if (a5 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v26 | v29)
    {
      v30 = 0;
      v31 = 0;
      v32 = a5 > 1;
      v33 = a6 > 1;
      v34 = 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        if (v32)
          v31 |= (unint64_t)(v34 & ~(-1 << v29)) << v30++;
        else
          v35 = 0;
        --v36;
        if (!v33)
          v36 = 0;
        v34 *= 2;
        v30 = (__PAIR64__(v30, v33) - 1) >> 32;
        v33 = v36 != 0;
        v32 = v35 != 0;
      }
      while (v36 | v35);
      v37 = 0;
      v38 = 0;
      v39 = 1;
      v40 = a5 > 1;
      v41 = a6 > 1;
      v42 = v29;
      v43 = v26;
      do
      {
        --v42;
        v44 = v40;
        if (!v44)
          v42 = 0;
        v45 = v37 + v44;
        --v43;
        if (v41)
          v38 |= (unint64_t)(v39 & ~(-1 << v26)) << v45++;
        else
          v43 = 0;
        v39 *= 2;
        v37 = v45 - 1;
        v41 = v43 != 0;
        v40 = v42 != 0;
      }
      while (v43 | v42);
      v46 = 0;
      v47 = 0;
      v48 = a5 > 1;
      v49 = a6 > 1;
      v50 = 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        if (v48)
          v47 |= (unint64_t)(v50 & a7) << v46++;
        else
          v51 = 0;
        --v52;
        if (!v49)
          v52 = 0;
        v50 *= 2;
        v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        v49 = v52 != 0;
        v48 = v51 != 0;
      }
      while (v52 | v51);
      v53 = 0;
      v54 = 0;
      v55 = 1;
      do
      {
        --v29;
        v56 = v28;
        if (!v56)
          v29 = 0;
        v57 = v53 + v56;
        --v26;
        if (v25)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          v58 = v57 + 1;
        }
        else
        {
          v26 = 0;
          v58 = v57;
        }
        v55 *= 2;
        v53 = v58 - 1;
        v25 = v26 != 0;
        v28 = v29 != 0;
        result = v26 | v29;
      }
      while ((_DWORD)result);
      v19 = a10;
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v38 = 0;
      v54 = 0;
      if (!a9)
        return result;
    }
    if (v19)
    {
      for (i = 0; i != v19; ++i)
      {
        v236 = a9;
        v237 = v13;
        v238 = v47;
        do
        {
          v239 = *v237++;
          *(_QWORD *)(v16 + 8 * (v238 + v54)) = v239;
          v238 = (v238 - v31) & v31;
          --v236;
        }
        while (v236);
        v54 = (v54 - v38) & v38;
        v13 = (uint64_t *)((char *)v13 + a11);
      }
    }
    return result;
  }
  if (*((_BYTE *)a12 + 20))
  {
    result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 1u, a7, a8, a9, a10, (uint64_t)v288);
    v20 = *((_BYTE *)a12 + 13);
    v21 = *((_BYTE *)a12 + 12);
    v246 = v13;
    if (1 << v20 >= a6 || a5 >> v21)
    {
      v152 = a6 >> v20;
      v153 = 1 << v21;
      v154 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
      if (a6 < 2)
        v154 = 0;
      v155 = v153 >= a5;
      if (v153 < a5)
        v156 = v21 + v20 + v154;
      else
        v156 = *((_BYTE *)a12 + 12);
      if (v155)
        LOBYTE(v157) = *((_BYTE *)a12 + 13);
      else
        v157 = -v154;
      if (!v152)
        v21 = v156;
      v245 = v21;
      if (v152)
        v23 = *((_BYTE *)a12 + 13);
      else
        v23 = v157;
    }
    else
    {
      v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
      if (a5 < 2)
        LOBYTE(v22) = 0;
      v245 = v22;
      v23 = v21 + v20 - v22;
    }
    v158 = a10;
    v159 = a8;
    v244 = v294;
    if (v294)
    {
      v160 = 1 << v23;
      if (1 << v23 >= a6)
        v161 = a6;
      else
        v161 = 1 << v23;
      v162 = 32 - __clz(v161 - 1);
      v163 = v161 > 1;
      if (v161 <= 1)
        v164 = 0;
      else
        v164 = v162;
      v243 = 1 << v245;
      if (1 << v245 >= a5)
        v165 = a5;
      else
        v165 = 1 << v245;
      v166 = 32 - __clz(v165 - 1);
      v167 = v295;
      v255 = v165 > 1;
      if (v165 <= 1)
        v166 = 0;
      v279 = v166;
      v276 = v293;
      v278 = v292;
      v274 = v292 != 0;
      v272 = v293 != 0;
      if (v295)
      {
        v168 = 0;
        v242 = a7 >> v245;
        v267 = a8 >> v23;
        v281 = v293 | v292;
        v285 = v296;
        v287 = v291;
        v241 = a9 + a7;
        v240 = v289;
        v283 = v290;
        v262 = (v160 - 1) & a8;
        v264 = (v160 - 1) & (a10 + a8);
        v260 = v160 - v262;
        v169 = ~(-1 << v166);
        v258 = v164 | v166;
        v270 = v295;
        v250 = 1 << v23;
        v251 = v23;
        v249 = v163;
        do
        {
          v170 = 0;
          v171 = v168 + v240;
          v172 = (v168 + v242) << v245;
          v173 = a9;
          if (v241 >= (v168 + v242 + 1) << v245)
            v173 = v243 - ((v243 - 1) & a7);
          v174 = 1 << v245;
          if (v241 < (v168 + v242 + 1) << v245)
            v174 = (v243 - 1) & (a9 + a7);
          v248 = v168;
          if (v172 >= a7)
            v175 = v174;
          else
            v175 = v173;
          if (v172 >= a7)
            v176 = 0;
          else
            v176 = (v243 - 1) & a7;
          v252 = &v246[v176 + (v168 << v245)];
          do
          {
            v177 = v170 + v283;
            if (v285)
            {
              v178 = v281;
              if (v281)
              {
                v179 = 0;
                v178 = 0;
                v180 = 1;
                v182 = v274;
                v181 = v276;
                v183 = v272;
                v184 = v278;
                do
                {
                  --v184;
                  if (v182)
                    v178 |= (v180 & v171) << v179;
                  else
                    v184 = 0;
                  if (v182)
                    ++v179;
                  --v181;
                  if (v183)
                    v178 |= (v180 & v177) << v179;
                  else
                    v181 = 0;
                  if (v183)
                    ++v179;
                  v180 *= 2;
                  --v179;
                  v183 = v181 != 0;
                  v182 = v184 != 0;
                }
                while (v181 | v184);
              }
            }
            else
            {
              v178 = v281;
              if (v281)
              {
                v185 = 0;
                v178 = 0;
                v186 = 1;
                v187 = v272;
                v189 = v274;
                v188 = v276;
                v190 = v278;
                do
                {
                  --v188;
                  if (v187)
                    v178 |= (v186 & v177) << v185;
                  else
                    v188 = 0;
                  if (v187)
                    ++v185;
                  --v190;
                  if (v189)
                    v178 |= (v186 & v171) << v185;
                  else
                    v190 = 0;
                  if (v189)
                    ++v185;
                  v186 *= 2;
                  --v185;
                  v189 = v190 != 0;
                  v187 = v188 != 0;
                }
                while (v190 | v188);
              }
            }
            v191 = *(_DWORD *)(v16 + 4 * ((v178 + v287) | ((v178 + v287) >> 8 << 9)));
            if (v191 < 0)
            {
              v192 = v16 - *((_QWORD *)a13 + 3) + ((unint64_t)(v191 & 0x3FFFFFF) << 14);
              result = *a13;
              v193 = a13[2];
              if (result > v193)
              {
                result = get_level_offset_within_tail(result, v193, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                v167 = v270;
                v163 = v249;
                v160 = v250;
                v23 = v251;
                v17 = a11;
                v159 = a8;
                v158 = a10;
                v192 += result;
              }
              v194 = (v170 + v267) << v23;
              v195 = v260;
              if (a10 + a8 >= (v170 + v267 + 1) << v23)
              {
                v196 = v160;
              }
              else
              {
                v195 = v158;
                v196 = v264;
              }
              if (v194 >= v159)
                v197 = 0;
              else
                v197 = v262;
              if (v194 >= v159)
                v195 = v196;
              if (!v258)
              {
                v215 = 0;
                v199 = 0;
                v206 = 0;
                v222 = 0;
                if (!v175)
                  goto LABEL_213;
LABEL_285:
                if (v195)
                {
                  v229 = 0;
                  v230 = (uint64_t *)((char *)v252 + (v197 + (v170 << v23)) * v17);
                  do
                  {
                    v231 = v175;
                    v232 = v230;
                    v233 = v215;
                    do
                    {
                      v234 = *v232++;
                      result = v234;
                      *(_QWORD *)(v192 + 8 * (v233 + v222)) = v234;
                      v233 = (v233 - v199) & v199;
                      --v231;
                    }
                    while (v231);
                    v222 = (v222 - v206) & v206;
                    v230 = (uint64_t *)((char *)v230 + v17);
                    ++v229;
                  }
                  while (v229 != v195);
                }
                goto LABEL_213;
              }
              v198 = 0;
              v199 = 0;
              v200 = 1;
              v201 = v255;
              v202 = v163;
              v203 = v279;
              v204 = v164;
              do
              {
                --v203;
                if (v201)
                  v199 |= (unint64_t)(v200 & v169) << v198++;
                else
                  v203 = 0;
                --v204;
                if (!v202)
                  v204 = 0;
                v200 *= 2;
                v198 = (__PAIR64__(v198, v202) - 1) >> 32;
                v202 = v204 != 0;
                v201 = v203 != 0;
              }
              while (v204 | v203);
              v205 = 0;
              v206 = 0;
              v207 = 1;
              v208 = v255;
              v209 = v163;
              v210 = v279;
              v211 = v164;
              do
              {
                --v210;
                v212 = v208;
                if (!v212)
                  v210 = 0;
                v213 = v205 + v212;
                --v211;
                if (v209)
                  v206 |= (unint64_t)(v207 & ~(-1 << v164)) << v213++;
                else
                  v211 = 0;
                v207 *= 2;
                v205 = v213 - 1;
                v209 = v211 != 0;
                v208 = v210 != 0;
              }
              while (v211 | v210);
              v214 = 0;
              v215 = 0;
              v216 = 1;
              v217 = v255;
              v218 = v163;
              v219 = v279;
              v220 = v164;
              do
              {
                --v219;
                if (v217)
                  v215 |= (unint64_t)(v216 & v176) << v214++;
                else
                  v219 = 0;
                --v220;
                if (!v218)
                  v220 = 0;
                v216 *= 2;
                v214 = (__PAIR64__(v214, v218) - 1) >> 32;
                v218 = v220 != 0;
                v217 = v219 != 0;
              }
              while (v220 | v219);
              v221 = 0;
              v222 = 0;
              v223 = 1;
              v224 = v255;
              LOBYTE(result) = v163;
              v225 = v279;
              v226 = v164;
              do
              {
                --v225;
                v227 = v224;
                if (!v227)
                  v225 = 0;
                v228 = v221 + v227;
                --v226;
                if ((result & 1) != 0)
                  v222 |= (unint64_t)(v223 & v197) << v228++;
                else
                  v226 = 0;
                v223 *= 2;
                v221 = v228 - 1;
                result = v226 != 0;
                v224 = v225 != 0;
              }
              while (v226 | v225);
              v167 = v270;
              if (v175)
                goto LABEL_285;
            }
LABEL_213:
            ++v170;
          }
          while (v167 > (unsigned __int16)v170);
          v168 = v248 + 1;
        }
        while (v244 > (unsigned __int16)(v248 + 1));
      }
    }
  }
  else
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v266 = a8 >> v66;
    v268 = 1 << v66;
    v76 = v69 - 1;
    v263 = v66;
    v265 = a10 + a8;
    v261 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 < v261)
    {
      result = a7 >> v67;
      v77 = (1 << v67) - 1;
      v286 = a9 + a7;
      if (v69 >= a6)
        v69 = a6;
      v78 = 32 - __clz(v69 - 1);
      v79 = v69 > 1;
      if (v69 <= 1)
        v80 = 0;
      else
        v80 = v78;
      v282 = (v77 + a9 + a7) >> v67;
      v284 = 1 << v67;
      if (1 << v67 >= a5)
        v81 = a5;
      else
        v81 = 1 << v67;
      v82 = 32 - __clz(v81 - 1);
      v83 = v81 > 1;
      if (v81 <= 1)
        v84 = 0;
      else
        v84 = v82;
      v275 = a7 >> v67;
      if (result < (v77 + a9 + a7) >> v67)
      {
        v259 = (v75 + ~(-1 << v67)) >> v67;
        v85 = v77 & a7;
        v280 = v77 & v286;
        v254 = v76 & v265;
        v257 = v76 & a8;
        v86 = v266;
        do
        {
          v87 = v86 << v263;
          v269 = v86 + 1;
          v88 = v268;
          if (v265 < (v86 + 1) << v263)
            v88 = v254;
          v89 = v268 - v257;
          if (v265 < (v86 + 1) << v263)
            v89 = v19;
          v273 = v86 * v259;
          if (v87 >= a8)
            v90 = 0;
          else
            v90 = v257;
          if (v87 >= a8)
            v91 = v88;
          else
            v91 = v89;
          v271 = (char *)v13 + (v90 + ((v86 - v266) << v263) - v257) * a11;
          v92 = v275;
          v93 = a7;
          if (v80 | v84)
          {
            do
            {
              v95 = 0;
              v96 = 0;
              v97 = v92 << v67;
              v98 = v92 - v275;
              v99 = v92 + v273;
              v100 = ++v92 << v67;
              if (v97 >= v93)
                v101 = 0;
              else
                v101 = v85;
              v277 = v99 * v18[3] * *((unsigned __int8 *)v18 + 9);
              v102 = 1;
              v103 = v83;
              v104 = v79;
              v105 = v84;
              v106 = v80;
              do
              {
                --v105;
                if (v103)
                  v96 |= (unint64_t)(v102 & ~(-1 << v84)) << v95++;
                else
                  v105 = 0;
                if (v104)
                  --v106;
                else
                  v106 = 0;
                v102 *= 2;
                v95 = (__PAIR64__(v95, v104) - 1) >> 32;
                v104 = v106 != 0;
                v103 = v105 != 0;
              }
              while (v106 | v105);
              v107 = 0;
              v108 = 0;
              if (v286 >= v100)
                v109 = 1 << v67;
              else
                v109 = v280;
              v110 = 1;
              v111 = v83;
              v112 = v79;
              v113 = v84;
              v114 = v80;
              do
              {
                --v113;
                v115 = v111;
                if (!v115)
                  v113 = 0;
                v116 = v107 + v115;
                if (v112)
                  --v114;
                else
                  v114 = 0;
                if (v112)
                  v108 |= (unint64_t)(v110 & ~(-1 << v80)) << v116++;
                v110 *= 2;
                v107 = v116 - 1;
                v112 = v114 != 0;
                v111 = v113 != 0;
              }
              while (v114 | v113);
              v117 = 0;
              v118 = 0;
              if (v286 >= v100)
                v119 = v284 - v85;
              else
                v119 = a9;
              v120 = &v271[8 * (v101 + (v98 << v67) - v85)];
              v121 = 1;
              v122 = v83;
              v123 = v79;
              v124 = v84;
              v125 = v80;
              do
              {
                --v124;
                if (v122)
                {
                  v118 |= (unint64_t)(v121 & v101) << v117;
                  v126 = v117 + 1;
                }
                else
                {
                  v124 = 0;
                  v126 = v117;
                }
                if (v123)
                  --v125;
                else
                  v125 = 0;
                v121 *= 2;
                v117 = (__PAIR64__(v126, v123) - 1) >> 32;
                v123 = v125 != 0;
                v122 = v124 != 0;
              }
              while (v125 | v124);
              v127 = 0;
              v128 = 0;
              v129 = 1;
              v130 = v83;
              v131 = v79;
              LODWORD(result) = v84;
              v132 = v80;
              do
              {
                v133 = v130;
                if (v133)
                  result = (result - 1);
                else
                  result = 0;
                v134 = v127 + v133;
                v135 = ((unint64_t)(v129 & v90) << (v127 + v133)) | v128;
                if (v131)
                  --v132;
                else
                  v132 = 0;
                if (v131)
                {
                  v128 = v135;
                  ++v134;
                }
                v129 *= 2;
                v127 = v134 - 1;
                v131 = v132 != 0;
                v130 = (_DWORD)result != 0;
              }
              while (v132 | result);
              v93 = a7;
              if (v97 >= a7)
                v136 = v109;
              else
                v136 = v119;
              if (v91 && v136)
              {
                for (j = 0; j != v91; ++j)
                {
                  LODWORD(result) = v136;
                  v138 = (uint64_t *)v120;
                  v139 = v118;
                  do
                  {
                    v140 = *v138++;
                    *(_QWORD *)(v277 + v16 + 8 * (v139 + v128)) = v140;
                    v139 = (v139 - v96) & v96;
                    result = (result - 1);
                  }
                  while ((_DWORD)result);
                  v128 = (v128 - v108) & v108;
                  v120 += a11;
                }
              }
              v18 = a12;
            }
            while (v92 != v282);
          }
          else
          {
            v94 = v275;
            do
            {
              v141 = v94 << v67;
              v142 = v94 + 1;
              v143 = a9;
              if (v286 >= (v94 + 1) << v67)
                v143 = v284 - v85;
              v144 = 1 << v67;
              if (v286 < v142 << v67)
                v144 = v280;
              if (v141 >= a7)
                v143 = v144;
              if (v91 && v143)
              {
                v145 = 0;
                v146 = (v94 + v273) * v18[3] * *((unsigned __int8 *)v18 + 9);
                if (v141 >= a7)
                  v147 = 0;
                else
                  v147 = v85;
                v148 = (uint64_t *)&v271[8 * (v147 + ((v94 - v275) << v67) - v85)];
                do
                {
                  v149 = v143;
                  v150 = v148;
                  do
                  {
                    v151 = *v150++;
                    result = v151;
                    *(_QWORD *)(v16 + v146) = v151;
                    --v149;
                  }
                  while (v149);
                  v148 = (uint64_t *)((char *)v148 + a11);
                  ++v145;
                }
                while (v145 != v91);
              }
              v94 = v142;
            }
            while (v142 != v282);
          }
          v86 = v269;
          v13 = a2;
          v19 = a10;
        }
        while (v269 != v261);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,8u,(TwiddleOrder)0>>(uint64_t result, __int128 *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  __int128 *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  BOOL v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  __int128 *v135;
  uint64_t v136;
  int v137;
  __int128 *v138;
  uint64_t v139;
  __int128 v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  BOOL v144;
  char v145;
  int v146;
  uint64_t v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  BOOL v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  BOOL v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  BOOL v175;
  BOOL v176;
  int v177;
  int v178;
  int v179;
  int v180;
  BOOL v181;
  BOOL v182;
  int v183;
  int v184;
  int v185;
  unint64_t v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  int v191;
  int v192;
  uint64_t v193;
  int v194;
  unsigned int v195;
  BOOL v196;
  BOOL v197;
  unsigned int v198;
  int v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  int v203;
  unsigned int v204;
  BOOL v205;
  BOOL v206;
  unsigned int v207;
  int v208;
  uint64_t v209;
  int v210;
  BOOL v211;
  unsigned int v212;
  BOOL v213;
  unsigned int v214;
  int v215;
  int v216;
  unsigned int v217;
  uint64_t v218;
  int v219;
  BOOL v220;
  unsigned int v221;
  BOOL v222;
  int v223;
  __int128 *v224;
  int v225;
  __int128 *v226;
  uint64_t v227;
  __int128 v228;
  int i;
  int v230;
  __int128 *v231;
  uint64_t v232;
  __int128 v233;
  int v234;
  int v235;
  int v236;
  unsigned int v237;
  unsigned int v238;
  int v239;
  unsigned int v240;
  char v241;
  int v242;
  int v243;
  char v244;
  __int128 *v246;
  __int128 *v247;
  unsigned int v250;
  int v251;
  unsigned int v252;
  int v253;
  int v254;
  uint64_t v255;
  int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  char v260;
  uint64_t v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  BOOL v265;
  unsigned int v266;
  BOOL v267;
  unsigned int v268;
  int v269;
  uint64_t v270;
  int v271;
  int v272;
  BOOL v273;
  unsigned int v274;
  unsigned int v275;
  int v276;
  int v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  int v281;
  int v282;
  char v283[16];
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned __int8 v291;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v230 = a9;
        v231 = v13;
        v232 = v47;
        do
        {
          v233 = *v231++;
          *(_OWORD *)(result + 16 * (v232 + v56)) = v233;
          v232 = (v232 - v31) & v31;
          --v230;
        }
        while (v230);
        v56 = (v56 - v40) & v40;
        v13 = (__int128 *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v261 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v264 = a8 >> v66;
    v266 = 1 << v66;
    v76 = v69 - 1;
    v262 = a10 + a8;
    v258 = (v69 - 1 + a10 + a8) >> v66;
    v260 = v66;
    if (a8 >> v66 >= v258)
      return result;
    v77 = (1 << v67) - 1;
    v280 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v266;
    if (v266 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v274 = a7 >> v67;
    v278 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v278)
      return result;
    v257 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v276 = v77 & v280;
    v253 = v76 & v262;
    v255 = v76 & a8;
    v86 = v264;
LABEL_92:
    v87 = v86 << v260;
    v88 = v86 - v264;
    v272 = v86 * v257;
    v268 = v86 + 1;
    v89 = v262 >= (v86 + 1) << v260;
    v90 = v266;
    if (!v89)
      v90 = v253;
    v91 = v266 - v255;
    if (!v89)
      v91 = v19;
    v92 = v88 << v260;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v255;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v270 = (v93 + v92 - v255) * a11;
    v95 = v274;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      if (v280 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      else
        v98 = a9;
      v99 = v276;
      if (v280 >= v97 << v67)
        v99 = 1 << v67;
      if (v96 >= v15)
        v100 = 0;
      else
        v100 = v85;
      if (v96 < v15)
        v99 = v98;
      if (v84 | v80)
        break;
      v118 = 0;
      v102 = 0;
      v111 = 0;
      v127 = 0;
      if (v99)
        goto LABEL_153;
LABEL_103:
      v95 = v97;
      if (v97 == v278)
      {
        v86 = v268;
        v14 = a8;
        v19 = a10;
        if (v268 == v258)
          return result;
        goto LABEL_92;
      }
    }
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v104 = v83;
    v105 = result;
    v106 = v84;
    v107 = v80;
    do
    {
      v108 = v104;
      if (v108)
        --v106;
      else
        v106 = 0;
      v109 = v101 + v108;
      if (v105)
        --v107;
      else
        v107 = 0;
      if (v105)
        v102 |= (unint64_t)(v103 & ~(-1 << v80)) << v109++;
      v103 *= 2;
      v101 = v109 - 1;
      v105 = v107 != 0;
      v104 = v106 != 0;
    }
    while (v107 | v106);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v83;
    v114 = result;
    v115 = v84;
    v116 = v80;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
        v111 |= (unint64_t)(v112 & ~(-1 << v84)) << v110++;
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v110, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v117 = 0;
    v118 = 0;
    v119 = 1;
    v120 = v83;
    v121 = result;
    v122 = v84;
    v123 = v80;
    do
    {
      v124 = v120;
      if (v124)
        --v122;
      else
        v122 = 0;
      v125 = v117 + v124;
      --v123;
      if (v121)
        v118 |= (unint64_t)(v119 & v100) << v125++;
      else
        v123 = 0;
      v119 *= 2;
      v117 = v125 - 1;
      v121 = v123 != 0;
      v120 = v122 != 0;
    }
    while (v123 | v122);
    v126 = 0;
    v127 = 0;
    v128 = 1;
    v129 = v83;
    v130 = result;
    v131 = v84;
    v132 = v80;
    do
    {
      --v131;
      if (v129)
      {
        v127 |= (unint64_t)(v128 & v93) << v126;
        v133 = v126 + 1;
      }
      else
      {
        v131 = 0;
        v133 = v126;
      }
      if (v130)
        --v132;
      else
        v132 = 0;
      v128 *= 2;
      v126 = (__PAIR64__(v133, v130) - 1) >> 32;
      v130 = v132 != 0;
      v129 = v131 != 0;
    }
    while (v132 | v131);
    v15 = a7;
    if (!v99)
      goto LABEL_103;
LABEL_153:
    if (v94)
    {
      v134 = 0;
      v135 = (__int128 *)((char *)&a2[v100 + ((v95 - v274) << v67) - v85] + v270);
      v136 = (v95 + v272) * a12[3] * *((unsigned __int8 *)a12 + 9) + v261;
      do
      {
        v137 = v99;
        v138 = v135;
        v139 = v118;
        do
        {
          v140 = *v138++;
          *(_OWORD *)(v136 + 16 * (v139 + v127)) = v140;
          v139 = (v139 - v102) & v102;
          --v137;
        }
        while (v137);
        v127 = (v127 - v111) & v111;
        v135 = (__int128 *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v283);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v247 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v141 = a6 >> v20;
    v142 = 1 << v21;
    v143 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v143 = 0;
    v144 = v142 >= a5;
    if (v142 < a5)
      v145 = v21 + v20 + v143;
    else
      v145 = *((_BYTE *)a12 + 12);
    if (v144)
      LOBYTE(v146) = *((_BYTE *)a12 + 13);
    else
      v146 = -v143;
    if (!v141)
      v21 = v145;
    v241 = v21;
    if (v141)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v146;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v241 = v22;
    v23 = v21 + v20 - v22;
  }
  v147 = v261;
  v149 = a8;
  v148 = a10;
  v240 = v289;
  if (v289)
  {
    v150 = 1 << v23;
    v239 = 1 << v241;
    if (1 << v241 >= a5)
      v151 = a5;
    else
      v151 = 1 << v241;
    v152 = 32 - __clz(v151 - 1);
    v153 = v151 > 1;
    if (v151 <= 1)
      v154 = 0;
    else
      v154 = v152;
    if (v150 >= a6)
      v155 = a6;
    else
      v155 = 1 << v23;
    v156 = 32 - __clz(v155 - 1);
    v157 = v290;
    if (v155 <= 1)
      v156 = 0;
    v273 = v155 > 1;
    v275 = v156;
    v271 = v287;
    v267 = v287 != 0;
    v269 = v288;
    v265 = v288 != 0;
    if (v290)
    {
      v158 = 0;
      v159 = 0;
      v238 = v15 >> v241;
      v259 = a8 >> v23;
      v281 = v291;
      v282 = v286;
      v277 = v288 | v287;
      v237 = a9 + v15;
      v236 = (v239 - 1) & (a9 + v15);
      v235 = v284;
      v279 = v285;
      v234 = (v239 - 1) & v15;
      v254 = (v150 - 1) & a8;
      v256 = (v150 - 1) & (a10 + a8);
      v252 = v150 - v254;
      v160 = ~(-1 << v154);
      v250 = v290;
      v251 = v156 | v154;
      v161 = ~(-1 << v156);
      v263 = v154;
      v243 = 1 << v23;
      v244 = v23;
      do
      {
        v242 = v159;
        v162 = 0;
        v163 = 0;
        v164 = a9;
        if (v237 >= (v158 + v238 + 1) << v241)
          v164 = v239 - v234;
        v165 = 1 << v241;
        if (v237 < (v158 + v238 + 1) << v241)
          v165 = v236;
        v166 = (v158 + v238) << v241 >= v15;
        v167 = v235 + v158;
        v168 = v158 << v241;
        if (v166)
          v169 = v165;
        else
          v169 = v164;
        if (v166)
          v170 = 0;
        else
          v170 = v234;
        v246 = &v247[v170 + v168];
        do
        {
          v171 = v279 + v162;
          if (v281)
          {
            v172 = v277;
            if (v277)
            {
              v173 = 0;
              v172 = 0;
              v174 = 1;
              v175 = v265;
              v176 = v267;
              v178 = v269;
              v177 = v271;
              do
              {
                --v177;
                if (v176)
                  v172 |= (v174 & v167) << v173;
                else
                  v177 = 0;
                if (v176)
                  ++v173;
                --v178;
                if (v175)
                  v172 |= (v174 & v171) << v173;
                else
                  v178 = 0;
                if (v175)
                  ++v173;
                v174 *= 2;
                --v173;
                v175 = v178 != 0;
                v176 = v177 != 0;
              }
              while (v178 | v177);
            }
          }
          else
          {
            v172 = v277;
            if (v277)
            {
              v179 = 0;
              v172 = 0;
              v180 = 1;
              v182 = v265;
              v181 = v267;
              v183 = v269;
              v184 = v271;
              do
              {
                --v183;
                if (v182)
                  v172 |= (v180 & v171) << v179;
                else
                  v183 = 0;
                if (v182)
                  ++v179;
                --v184;
                if (v181)
                  v172 |= (v180 & v167) << v179;
                else
                  v184 = 0;
                if (v181)
                  ++v179;
                v180 *= 2;
                --v179;
                v181 = v184 != 0;
                v182 = v183 != 0;
              }
              while (v184 | v183);
            }
          }
          v185 = *(_DWORD *)(v147 + 4 * ((v172 + v282) | ((v172 + v282) >> 8 << 9)));
          if (v185 < 0)
          {
            v186 = v147 - *((_QWORD *)a13 + 3) + ((unint64_t)(v185 & 0x3FFFFFF) << 14);
            result = *a13;
            v187 = a13[2];
            if (result > v187)
            {
              result = get_level_offset_within_tail(result, v187, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v154 = v263;
              v150 = v243;
              v23 = v244;
              v18 = a11;
              v149 = a8;
              v148 = a10;
              v147 = v261;
              v186 += result;
            }
            v188 = (v162 + v259) << v23;
            v189 = v252;
            if (a10 + a8 >= (v162 + v259 + 1) << v23)
            {
              v190 = v150;
            }
            else
            {
              v189 = v148;
              v190 = v256;
            }
            if (v188 >= v149)
              v191 = 0;
            else
              v191 = v254;
            if (v188 >= v149)
              v189 = v190;
            if (!v251)
            {
              v209 = 0;
              v193 = 0;
              v202 = 0;
              v218 = 0;
              v157 = v250;
              if (!v169)
                goto LABEL_198;
LABEL_271:
              if (v189)
              {
                v223 = 0;
                v224 = (__int128 *)((char *)v246 + (v191 + (v162 << v23)) * v18);
                do
                {
                  v225 = v169;
                  v226 = v224;
                  v227 = v209;
                  do
                  {
                    result = v227 + v218;
                    v228 = *v226++;
                    *(_OWORD *)(v186 + 16 * (v227 + v218)) = v228;
                    v227 = (v227 - v193) & v193;
                    --v225;
                  }
                  while (v225);
                  v218 = (v218 - v202) & v202;
                  v224 = (__int128 *)((char *)v224 + v18);
                  ++v223;
                }
                while (v223 != v189);
              }
              goto LABEL_198;
            }
            v192 = 0;
            v193 = 0;
            v194 = 1;
            v196 = v273;
            v195 = v275;
            v197 = v153;
            v198 = v154;
            do
            {
              --v195;
              v199 = v196;
              if (!v199)
                v195 = 0;
              v200 = v192 + v199;
              --v198;
              if (v197)
                v193 |= (unint64_t)(v194 & v160) << v200++;
              else
                v198 = 0;
              v194 *= 2;
              v192 = v200 - 1;
              v197 = v198 != 0;
              v196 = v195 != 0;
            }
            while (v198 | v195);
            v201 = 0;
            v202 = 0;
            v203 = 1;
            v205 = v273;
            v204 = v275;
            v206 = v153;
            v207 = v154;
            do
            {
              --v204;
              if (v205)
                v202 |= (unint64_t)(v203 & v161) << v201++;
              else
                v204 = 0;
              --v207;
              if (!v206)
                v207 = 0;
              v203 *= 2;
              v201 = (__PAIR64__(v201, v206) - 1) >> 32;
              v206 = v207 != 0;
              v205 = v204 != 0;
            }
            while (v207 | v204);
            v208 = 0;
            v209 = 0;
            v210 = 1;
            v211 = v273;
            v212 = v275;
            v213 = v153;
            v214 = v154;
            do
            {
              --v212;
              v215 = v211;
              if (!v215)
                v212 = 0;
              v216 = v208 + v215;
              --v214;
              if (v213)
                v209 |= (unint64_t)(v210 & v170) << v216++;
              else
                v214 = 0;
              v210 *= 2;
              v208 = v216 - 1;
              v213 = v214 != 0;
              v211 = v212 != 0;
            }
            while (v214 | v212);
            v217 = 0;
            v218 = 0;
            v219 = 1;
            v220 = v273;
            v221 = v275;
            v222 = v153;
            LODWORD(result) = v154;
            do
            {
              --v221;
              if (v220)
                v218 |= (unint64_t)(v219 & v191) << v217++;
              else
                v221 = 0;
              LODWORD(result) = result - 1;
              if (v222)
                result = result;
              else
                result = 0;
              v219 *= 2;
              v217 = (__PAIR64__(v217, v222) - 1) >> 32;
              v222 = (_DWORD)result != 0;
              v220 = v221 != 0;
            }
            while (result | v221);
            v154 = v263;
            v157 = v250;
            if (v169)
              goto LABEL_271;
          }
LABEL_198:
          v162 = (unsigned __int16)++v163;
        }
        while (v157 > (unsigned __int16)v163);
        v159 = v242 + 1;
        v158 = (unsigned __int16)(v242 + 1);
        v15 = a7;
      }
      while (v240 > v158);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<true,2ul,8u,(TwiddleOrder)1>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  unsigned int v13;
  unsigned __int16 *v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  unsigned int v21;
  char v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  BOOL v31;
  BOOL v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  char v62;
  BOOL v63;
  char v64;
  int v65;
  unsigned int v66;
  unsigned int v68;
  char v69;
  unsigned int v70;
  BOOL v71;
  BOOL v72;
  int v73;
  int v74;
  unsigned int v75;
  _OWORD *v76;
  int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  int v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  int v122;
  __int128 *v123;
  int v124;
  BOOL v125;
  BOOL v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  int v130;
  unint64_t v131;
  int v132;
  BOOL v133;
  BOOL v134;
  unsigned int v135;
  int v136;
  int v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  __int128 *v141;
  uint64_t v142;
  __int128 v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  int v147;
  int v148;
  _OWORD *v149;
  int v150;
  uint64_t v151;
  int v152;
  __int128 v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  BOOL v157;
  char v158;
  int v159;
  uint64_t v160;
  int v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  BOOL v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  unsigned int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  BOOL v189;
  BOOL v190;
  int v191;
  int v192;
  int v193;
  BOOL v194;
  int v195;
  BOOL v196;
  int v197;
  int v198;
  unint64_t v199;
  unsigned int v200;
  unsigned int v201;
  int v202;
  int v203;
  int v204;
  unsigned int v205;
  uint64_t v206;
  int v207;
  unsigned int v208;
  BOOL v209;
  BOOL v210;
  unsigned int v211;
  int v212;
  uint64_t v213;
  int v214;
  unsigned int v215;
  BOOL v216;
  BOOL v217;
  unsigned int v218;
  int v219;
  int v220;
  unsigned int v221;
  uint64_t v222;
  int v223;
  BOOL v224;
  unsigned int v225;
  BOOL v226;
  unsigned int v227;
  int v228;
  uint64_t v229;
  int v230;
  BOOL v231;
  unsigned int v232;
  unsigned int v233;
  int v234;
  int v235;
  int v236;
  __int128 *v237;
  int v238;
  __int128 *v239;
  uint64_t v240;
  __int128 v241;
  __int128 *v242;
  int i;
  int v244;
  __int128 *v245;
  uint64_t v246;
  __int128 v247;
  int v248;
  unsigned int v249;
  unsigned int v250;
  int v251;
  unsigned int v252;
  char v253;
  int v255;
  int v256;
  char v257;
  _OWORD *v258;
  unsigned int v261;
  int v262;
  int v263;
  int v264;
  uint64_t v265;
  int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  char v270;
  unsigned int v271;
  unsigned int v272;
  uint64_t v273;
  unsigned int v274;
  unsigned int v275;
  int v276;
  BOOL v277;
  unsigned int v278;
  BOOL v279;
  uint64_t v280;
  int v281;
  int v282;
  int v283;
  unsigned int v284;
  BOOL v285;
  unsigned int v286;
  int v287;
  int v288;
  unsigned int v289;
  int v290;
  int v291;
  int v292;
  unsigned int v293;
  int v294;
  char v295[16];
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned __int8 v303;

  if (result && a2)
  {
    v13 = a7;
    v17 = a11;
    v16 = a12;
    v18 = a10;
    v273 = result;
    if (a12)
    {
      if (*((_BYTE *)a12 + 20))
      {
        result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 1u, a7, a8, a9, a10, (uint64_t)v295);
        v19 = *((_BYTE *)a12 + 13);
        v20 = *((_BYTE *)a12 + 12);
        if (1 << v19 >= a6 || a5 >> v20)
        {
          v154 = a6 >> v19;
          v155 = 1 << v20;
          v156 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
          if (a6 < 2)
            v156 = 0;
          v157 = v155 >= a5;
          if (v155 < a5)
            v158 = v20 + v19 + v156;
          else
            v158 = *((_BYTE *)a12 + 12);
          if (v157)
            LOBYTE(v159) = *((_BYTE *)a12 + 13);
          else
            v159 = -v156;
          if (!v154)
            v20 = v158;
          v253 = v20;
          if (v154)
            v22 = *((_BYTE *)a12 + 13);
          else
            v22 = v159;
        }
        else
        {
          v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
          if (a5 < 2)
            LOBYTE(v21) = 0;
          v253 = v21;
          v22 = v20 + v19 - v21;
        }
        v160 = v273;
        v161 = a10;
        v162 = a8;
        v252 = v301;
        if (v301)
        {
          v163 = 1 << v22;
          if (1 << v22 >= a6)
            v164 = a6;
          else
            v164 = 1 << v22;
          v165 = 32 - __clz(v164 - 1);
          v166 = v164 > 1;
          if (v164 <= 1)
            v167 = 0;
          else
            v167 = v165;
          v251 = 1 << v253;
          if (1 << v253 >= a5)
            v168 = a5;
          else
            v168 = 1 << v253;
          v169 = 32 - __clz(v168 - 1);
          v170 = v302;
          if (v168 <= 1)
            v169 = 0;
          v285 = v168 > 1;
          v286 = v169;
          v283 = v299;
          v279 = v299 != 0;
          v281 = v300;
          v277 = v300 != 0;
          if (v302)
          {
            v171 = 0;
            v172 = 0;
            v250 = a7 >> v253;
            v271 = a8 >> v22;
            v292 = v303;
            v294 = v298;
            v288 = v300 | v299;
            v249 = a9 + a7;
            v248 = v296;
            v290 = v297;
            v268 = (v163 - 1) & (a10 + a8);
            v266 = (v163 - 1) & a8;
            v264 = v163 - v266;
            v173 = ~(-1 << v169);
            v261 = v302;
            v262 = v167 | v169;
            v174 = ~(-1 << v167);
            v275 = v167;
            v256 = 1 << v22;
            v257 = v22;
            do
            {
              v255 = v172;
              v175 = 0;
              v176 = 0;
              v177 = (v171 + v250) << v253;
              v178 = a9;
              if (v249 >= (v171 + v250 + 1) << v253)
                v178 = v251 - ((v251 - 1) & a7);
              v179 = 1 << v253;
              if (v249 < (v171 + v250 + 1) << v253)
                v179 = (v251 - 1) & (a9 + a7);
              v180 = v171 + v248;
              v181 = v171 << v253;
              if (v177 >= a7)
                v182 = v179;
              else
                v182 = v178;
              if (v177 >= a7)
                v183 = 0;
              else
                v183 = (v251 - 1) & a7;
              v258 = &a2[v183 + v181];
              do
              {
                v184 = v175 + v290;
                if (v292)
                {
                  v185 = v288;
                  if (v288)
                  {
                    v186 = 0;
                    v185 = 0;
                    v187 = 1;
                    v189 = v279;
                    v188 = v281;
                    v190 = v277;
                    v191 = v283;
                    do
                    {
                      --v191;
                      if (v189)
                        v185 |= (v187 & v180) << v186;
                      else
                        v191 = 0;
                      if (v189)
                        ++v186;
                      --v188;
                      if (v190)
                        v185 |= (v187 & v184) << v186;
                      else
                        v188 = 0;
                      if (v190)
                        ++v186;
                      v187 *= 2;
                      --v186;
                      v190 = v188 != 0;
                      v189 = v191 != 0;
                    }
                    while (v188 | v191);
                  }
                }
                else
                {
                  v185 = v288;
                  if (v288)
                  {
                    v192 = 0;
                    v185 = 0;
                    v193 = 1;
                    v194 = v277;
                    v196 = v279;
                    v195 = v281;
                    v197 = v283;
                    do
                    {
                      --v195;
                      if (v194)
                        v185 |= (v193 & v184) << v192;
                      else
                        v195 = 0;
                      if (v194)
                        ++v192;
                      --v197;
                      if (v196)
                        v185 |= (v193 & v180) << v192;
                      else
                        v197 = 0;
                      if (v196)
                        ++v192;
                      v193 *= 2;
                      --v192;
                      v196 = v197 != 0;
                      v194 = v195 != 0;
                    }
                    while (v197 | v195);
                  }
                }
                v198 = *(_DWORD *)(v160
                                 + 4 * ((v185 + v294) | ((v185 + v294) >> 8 << 9)));
                if (v198 < 0)
                {
                  v199 = v160 - *((_QWORD *)a13 + 3) + ((unint64_t)(v198 & 0x3FFFFFF) << 14);
                  result = *a13;
                  v200 = a13[2];
                  if (result > v200)
                  {
                    result = get_level_offset_within_tail(result, v200, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                    v167 = v275;
                    v163 = v256;
                    v22 = v257;
                    v17 = a11;
                    v162 = a8;
                    v161 = a10;
                    v160 = v273;
                    v199 += result;
                  }
                  v201 = (v175 + v271) << v22;
                  v202 = v264;
                  if (a10 + a8 >= (v175 + v271 + 1) << v22)
                  {
                    v203 = v163;
                  }
                  else
                  {
                    v202 = v161;
                    v203 = v268;
                  }
                  if (v201 >= v162)
                    v204 = 0;
                  else
                    v204 = v266;
                  if (v201 >= v162)
                    v202 = v203;
                  if (!v262)
                  {
                    v222 = 0;
                    v206 = 0;
                    v213 = 0;
                    v229 = 0;
                    v170 = v261;
                    if (!v182)
                      goto LABEL_208;
LABEL_280:
                    if (v202)
                    {
                      v236 = 0;
                      v237 = (_OWORD *)((char *)v258 + (v204 + (v175 << v22)) * v17);
                      do
                      {
                        v238 = v182;
                        v239 = v237;
                        v240 = v222;
                        do
                        {
                          result = v240 + v229;
                          v241 = *v239++;
                          *(_OWORD *)(v199 + 16 * (v240 + v229)) = v241;
                          v240 = (v240 - v206) & v206;
                          --v238;
                        }
                        while (v238);
                        v229 = (v229 - v213) & v213;
                        v237 = (__int128 *)((char *)v237 + v17);
                        ++v236;
                      }
                      while (v236 != v202);
                    }
                    goto LABEL_208;
                  }
                  v205 = 0;
                  v206 = 0;
                  v207 = 1;
                  v209 = v285;
                  v208 = v286;
                  v210 = v166;
                  v211 = v167;
                  do
                  {
                    --v208;
                    if (v209)
                      v206 |= (unint64_t)(v207 & v173) << v205++;
                    else
                      v208 = 0;
                    --v211;
                    if (!v210)
                      v211 = 0;
                    v207 *= 2;
                    v205 = (__PAIR64__(v205, v210) - 1) >> 32;
                    v210 = v211 != 0;
                    v209 = v208 != 0;
                  }
                  while (v211 | v208);
                  v212 = 0;
                  v213 = 0;
                  v214 = 1;
                  v216 = v285;
                  v215 = v286;
                  v217 = v166;
                  v218 = v167;
                  do
                  {
                    --v215;
                    v219 = v216;
                    if (!v219)
                      v215 = 0;
                    v220 = v212 + v219;
                    --v218;
                    if (v217)
                      v213 |= (unint64_t)(v214 & v174) << v220++;
                    else
                      v218 = 0;
                    v214 *= 2;
                    v212 = v220 - 1;
                    v217 = v218 != 0;
                    v216 = v215 != 0;
                  }
                  while (v218 | v215);
                  v221 = 0;
                  v222 = 0;
                  v223 = 1;
                  v224 = v285;
                  v225 = v286;
                  v226 = v166;
                  v227 = v167;
                  do
                  {
                    --v225;
                    if (v224)
                      v222 |= (unint64_t)(v223 & v183) << v221++;
                    else
                      v225 = 0;
                    --v227;
                    if (!v226)
                      v227 = 0;
                    v223 *= 2;
                    v221 = (__PAIR64__(v221, v226) - 1) >> 32;
                    v226 = v227 != 0;
                    v224 = v225 != 0;
                  }
                  while (v227 | v225);
                  v228 = 0;
                  v229 = 0;
                  v230 = 1;
                  v231 = v285;
                  v232 = v286;
                  LOBYTE(result) = v166;
                  v233 = v167;
                  do
                  {
                    --v232;
                    v234 = v231;
                    if (!v234)
                      v232 = 0;
                    v235 = v228 + v234;
                    --v233;
                    if ((result & 1) != 0)
                      v229 |= (unint64_t)(v230 & v204) << v235++;
                    else
                      v233 = 0;
                    v230 *= 2;
                    v228 = v235 - 1;
                    result = v233 != 0;
                    v231 = v232 != 0;
                  }
                  while (v233 | v232);
                  v167 = v275;
                  v170 = v261;
                  if (v182)
                    goto LABEL_280;
                }
LABEL_208:
                v175 = (unsigned __int16)++v176;
              }
              while (v170 > (unsigned __int16)v176);
              v172 = v255 + 1;
              v171 = (unsigned __int16)(v255 + 1);
            }
            while (v252 > v171);
          }
        }
      }
      else
      {
        v58 = *((unsigned __int8 *)a12 + 13);
        v59 = *((unsigned __int8 *)a12 + 12);
        v60 = 1 << v58;
        v61 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
        if (a6 < 2)
          v61 = 0;
        v62 = v59 + v58;
        result = v59 + v58 + v61;
        if (a6 >> v58)
          v63 = 1;
        else
          v63 = 1 << v59 >= a5;
        if (v63)
          v64 = *((_BYTE *)a12 + 12);
        else
          v64 = v59 + v58 + v61;
        if (v63)
          LOBYTE(v65) = *((_BYTE *)a12 + 13);
        else
          v65 = -v61;
        v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
        if (a5 < 2)
          LOBYTE(v66) = 0;
        if (v60 < a6 && a5 >> v59 == 0)
          LOBYTE(v65) = v62 - v66;
        else
          LOBYTE(v66) = v64;
        v68 = 1 << v65;
        v69 = *((_BYTE *)a12 + 15);
        v70 = 1 << v69;
        if (v69)
          v71 = v70 > a3;
        else
          v71 = 1;
        v72 = v71 || v70 > a4;
        v73 = (~(-1 << v69) + a3) & (-1 << v69);
        if (v72)
          v74 = a3;
        else
          v74 = v73;
        v276 = 1 << v65;
        v75 = v68 - 1;
        v270 = v65;
        v272 = a10 + a8;
        v274 = a8 >> v65;
        v269 = (v68 - 1 + a10 + a8) >> v65;
        v76 = a2;
        if (a8 >> v65 < v269)
        {
          result = a7 >> v66;
          v77 = (1 << v66) - 1;
          v293 = a9 + a7;
          if (v68 >= a6)
            v68 = a6;
          v78 = 32 - __clz(v68 - 1);
          v79 = v68 > 1;
          if (v79)
            v80 = v78;
          else
            v80 = 0;
          v289 = (v77 + a9 + a7) >> v66;
          v291 = 1 << v66;
          if (1 << v66 >= a5)
            v81 = a5;
          else
            v81 = 1 << v66;
          v82 = 32 - __clz(v81 - 1);
          v83 = v81 > 1;
          if (v81 <= 1)
            v84 = 0;
          else
            v84 = v82;
          v284 = a7 >> v66;
          if (result < (v77 + a9 + a7) >> v66)
          {
            v267 = (v74 + ~(-1 << v66)) >> v66;
            v85 = v77 & a7;
            v287 = v77 & v293;
            v263 = v75 & v272;
            v265 = v75 & a8;
            v86 = v274;
            do
            {
              v87 = v86 << v270;
              v278 = v86 + 1;
              v88 = v276;
              if (v272 < (v86 + 1) << v270)
                v88 = v263;
              v89 = v276 - v265;
              if (v272 < (v86 + 1) << v270)
                v89 = v18;
              v282 = v86 * v267;
              if (v87 >= a8)
                v90 = 0;
              else
                v90 = v265;
              if (v87 >= a8)
                v91 = v88;
              else
                v91 = v89;
              v280 = (uint64_t)v76 + (v90 + ((v86 - v274) << v270) - v265) * a11;
              v92 = v284;
              if (v80 | v84)
              {
                do
                {
                  v94 = 0;
                  v95 = 0;
                  v96 = v92 << v66;
                  v97 = v92 - v284;
                  v98 = v92 + v282;
                  v99 = ++v92 << v66;
                  if (v96 >= v13)
                    v100 = 0;
                  else
                    v100 = v85;
                  v101 = v100 + (v97 << v66) - v85;
                  v102 = v98 * v16[3] * *((unsigned __int8 *)v16 + 9);
                  v103 = 1;
                  v104 = v83;
                  v105 = v79;
                  v106 = v84;
                  v107 = v80;
                  do
                  {
                    --v106;
                    if (v104)
                      v95 |= (unint64_t)(v103 & ~(-1 << v84)) << v94++;
                    else
                      v106 = 0;
                    if (v105)
                      --v107;
                    else
                      v107 = 0;
                    v103 *= 2;
                    v94 = (__PAIR64__(v94, v105) - 1) >> 32;
                    v105 = v107 != 0;
                    v104 = v106 != 0;
                  }
                  while (v107 | v106);
                  v108 = 0;
                  v109 = 0;
                  v110 = 16 * v101;
                  v111 = v287;
                  if (v293 >= v99)
                    v111 = 1 << v66;
                  v112 = 1;
                  v113 = v83;
                  v114 = v79;
                  v115 = v84;
                  v116 = v80;
                  do
                  {
                    --v115;
                    v117 = v113;
                    if (!v117)
                      v115 = 0;
                    v118 = v108 + v117;
                    if (v114)
                      --v116;
                    else
                      v116 = 0;
                    if (v114)
                    {
                      v109 |= (unint64_t)(v112 & ~(-1 << v80)) << v118;
                      v119 = v118 + 1;
                    }
                    else
                    {
                      v119 = v118;
                    }
                    v112 *= 2;
                    v108 = v119 - 1;
                    v114 = v116 != 0;
                    v113 = v115 != 0;
                  }
                  while (v116 | v115);
                  v120 = 0;
                  v121 = 0;
                  if (v293 >= v99)
                    v122 = v291 - v85;
                  else
                    v122 = a9;
                  v123 = (__int128 *)(v280 + v110);
                  v124 = 1;
                  v125 = v83;
                  v126 = v79;
                  v127 = v84;
                  v128 = v80;
                  do
                  {
                    --v127;
                    if (v125)
                    {
                      v121 |= (unint64_t)(v124 & v100) << v120;
                      v129 = v120 + 1;
                    }
                    else
                    {
                      v127 = 0;
                      v129 = v120;
                    }
                    --v128;
                    if (!v126)
                      v128 = 0;
                    v124 *= 2;
                    v120 = (__PAIR64__(v129, v126) - 1) >> 32;
                    v126 = v128 != 0;
                    v125 = v127 != 0;
                  }
                  while (v128 | v127);
                  v130 = 0;
                  v131 = 0;
                  v132 = 1;
                  v133 = v83;
                  v134 = v79;
                  LODWORD(result) = v84;
                  v135 = v80;
                  do
                  {
                    v136 = v133;
                    if (v136)
                      result = (result - 1);
                    else
                      result = 0;
                    v137 = v130 + v136;
                    v138 = ((unint64_t)(v132 & v90) << (v130 + v136)) | v131;
                    --v135;
                    if (v134)
                    {
                      v131 = v138;
                      ++v137;
                    }
                    else
                    {
                      v135 = 0;
                    }
                    v132 *= 2;
                    v130 = v137 - 1;
                    v134 = v135 != 0;
                    v133 = (_DWORD)result != 0;
                  }
                  while (v135 | result);
                  v13 = a7;
                  if (v96 < a7)
                    v111 = v122;
                  v16 = a12;
                  if (v91 && v111)
                  {
                    v139 = 0;
                    v140 = v102 + v273;
                    do
                    {
                      LODWORD(result) = v111;
                      v141 = v123;
                      v142 = v121;
                      do
                      {
                        v143 = *v141++;
                        *(_OWORD *)(v140 + 16 * (v142 + v131)) = v143;
                        v142 = (v142 - v95) & v95;
                        result = (result - 1);
                      }
                      while ((_DWORD)result);
                      v131 = (v131 - v109) & v109;
                      v123 = (__int128 *)((char *)v123 + a11);
                      ++v139;
                    }
                    while (v139 != v91);
                  }
                }
                while (v92 != v289);
              }
              else
              {
                v93 = v284;
                do
                {
                  v144 = v93 << v66;
                  v145 = v93 + 1;
                  v146 = a9;
                  if (v293 >= (v93 + 1) << v66)
                    v146 = v291 - v85;
                  v147 = 1 << v66;
                  if (v293 < v145 << v66)
                    v147 = v287;
                  if (v144 >= v13)
                    v146 = v147;
                  if (v91 && v146)
                  {
                    v148 = 0;
                    v149 = (_OWORD *)((v93 + v282) * v16[3] * *((unsigned __int8 *)v16 + 9) + v273);
                    if (v144 >= v13)
                      v150 = 0;
                    else
                      v150 = v85;
                    v151 = v280 + 16 * (v150 + ((v93 - v284) << v66) - v85);
                    do
                    {
                      v152 = v146;
                      result = v151;
                      do
                      {
                        v153 = *(_OWORD *)result;
                        result += 16;
                        *v149 = v153;
                        --v152;
                      }
                      while (v152);
                      v151 += a11;
                      ++v148;
                    }
                    while (v148 != v91);
                  }
                  v93 = v145;
                }
                while (v145 != v289);
              }
              v86 = v278;
              v76 = a2;
              v18 = a10;
            }
            while (v278 != v269);
          }
        }
      }
    }
    else
    {
      v23 = 32 - __clz(a6 - 1);
      v24 = a6 > 1;
      if (a6 <= 1)
        v25 = 0;
      else
        v25 = v23;
      v26 = 32 - __clz(a5 - 1);
      v27 = a5 > 1;
      if (a5 <= 1)
        v28 = 0;
      else
        v28 = v26;
      if (v25 | v28)
      {
        v29 = 0;
        v30 = 0;
        v31 = a5 > 1;
        v32 = a6 > 1;
        v33 = 1;
        v34 = v28;
        v35 = v25;
        do
        {
          --v34;
          if (v31)
            v30 |= (unint64_t)(v33 & ~(-1 << v28)) << v29++;
          else
            v34 = 0;
          --v35;
          if (!v32)
            v35 = 0;
          v33 *= 2;
          v29 = (__PAIR64__(v29, v32) - 1) >> 32;
          v32 = v35 != 0;
          v31 = v34 != 0;
        }
        while (v35 | v34);
        v36 = 0;
        v37 = 0;
        v38 = 1;
        v39 = a5 > 1;
        v40 = a6 > 1;
        v41 = v28;
        v42 = v25;
        do
        {
          --v41;
          v43 = v39;
          if (!v43)
            v41 = 0;
          v44 = v36 + v43;
          --v42;
          if (v40)
            v37 |= (unint64_t)(v38 & ~(-1 << v25)) << v44++;
          else
            v42 = 0;
          v38 *= 2;
          v36 = v44 - 1;
          v40 = v42 != 0;
          v39 = v41 != 0;
        }
        while (v42 | v41);
        v45 = 0;
        v46 = 0;
        v47 = a5 > 1;
        v48 = a6 > 1;
        v49 = 1;
        v50 = v28;
        v51 = v25;
        do
        {
          --v50;
          if (v47)
            v46 |= (unint64_t)(v49 & a7) << v45++;
          else
            v50 = 0;
          --v51;
          if (!v48)
            v51 = 0;
          v49 *= 2;
          v45 = (__PAIR64__(v45, v48) - 1) >> 32;
          v48 = v51 != 0;
          v47 = v50 != 0;
        }
        while (v51 | v50);
        v52 = 0;
        v53 = 0;
        v54 = 1;
        do
        {
          --v28;
          v55 = v27;
          if (!v55)
            v28 = 0;
          v56 = v52 + v55;
          --v25;
          if (v24)
          {
            v53 |= (unint64_t)(v54 & a8) << v56;
            v57 = v56 + 1;
          }
          else
          {
            v25 = 0;
            v57 = v56;
          }
          v54 *= 2;
          v52 = v57 - 1;
          v24 = v25 != 0;
          v27 = v28 != 0;
        }
        while (v25 | v28);
        result = v273;
        v18 = a10;
      }
      else
      {
        v46 = 0;
        v30 = 0;
        v37 = 0;
        v53 = 0;
      }
      v242 = a2;
      if (a9 && v18)
      {
        for (i = 0; i != v18; ++i)
        {
          v244 = a9;
          v245 = v242;
          v246 = v46;
          do
          {
            v247 = *v245++;
            *(_OWORD *)(result + 16 * (v246 + v53)) = v247;
            v246 = (v246 - v30) & v30;
            --v244;
          }
          while (v244);
          v53 = (v53 - v37) & v37;
          v242 = (__int128 *)((char *)v242 + a11);
        }
      }
    }
  }
  return result;
}

void *agxsTwiddleAddressPVRTC2<true,(TwiddleOrder)0>(void *result, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  if (result)
  {
    if (a2)
      return memcpy(result, a2, ((a10 + 3) >> 2) * (unint64_t)((a9 + 7) & 0xFFFFFFF8));
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,2u,(TwiddleOrder)0>>(uint64_t result, __int128 *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  __int128 *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  BOOL v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  __int128 *v135;
  uint64_t v136;
  int v137;
  __int128 *v138;
  uint64_t v139;
  _OWORD *v140;
  __int128 v141;
  __int128 v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  BOOL v146;
  char v147;
  int v148;
  uint64_t v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  BOOL v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  BOOL v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  BOOL v177;
  BOOL v178;
  int v179;
  int v180;
  int v181;
  int v182;
  BOOL v183;
  BOOL v184;
  int v185;
  int v186;
  int v187;
  unint64_t v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  int v193;
  int v194;
  uint64_t v195;
  int v196;
  unsigned int v197;
  BOOL v198;
  BOOL v199;
  unsigned int v200;
  int v201;
  int v202;
  unsigned int v203;
  uint64_t v204;
  int v205;
  unsigned int v206;
  BOOL v207;
  BOOL v208;
  unsigned int v209;
  int v210;
  uint64_t v211;
  int v212;
  BOOL v213;
  unsigned int v214;
  BOOL v215;
  unsigned int v216;
  int v217;
  int v218;
  unsigned int v219;
  uint64_t v220;
  int v221;
  BOOL v222;
  unsigned int v223;
  BOOL v224;
  int v225;
  __int128 *v226;
  int v227;
  __int128 *v228;
  uint64_t v229;
  __int128 v230;
  __int128 v231;
  int i;
  int v233;
  __int128 *v234;
  uint64_t v235;
  _OWORD *v236;
  __int128 v237;
  __int128 v238;
  int v239;
  int v240;
  int v241;
  unsigned int v242;
  unsigned int v243;
  int v244;
  unsigned int v245;
  char v246;
  int v247;
  int v248;
  char v249;
  __int128 *v251;
  __int128 *v252;
  unsigned int v255;
  int v256;
  unsigned int v257;
  int v258;
  int v259;
  uint64_t v260;
  int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  char v265;
  uint64_t v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  BOOL v270;
  unsigned int v271;
  BOOL v272;
  unsigned int v273;
  int v274;
  uint64_t v275;
  int v276;
  int v277;
  BOOL v278;
  unsigned int v279;
  unsigned int v280;
  int v281;
  int v282;
  unsigned int v283;
  int v284;
  unsigned int v285;
  int v286;
  int v287;
  char v288[16];
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned __int8 v296;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v233 = a9;
        v234 = v13;
        v235 = v47;
        do
        {
          v236 = (_OWORD *)(result + 32 * (v235 + v56));
          v237 = *v234;
          v238 = v234[1];
          v234 += 2;
          *v236 = v237;
          v236[1] = v238;
          v235 = (v235 - v31) & v31;
          --v233;
        }
        while (v233);
        v56 = (v56 - v40) & v40;
        v13 = (__int128 *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v266 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v269 = a8 >> v66;
    v271 = 1 << v66;
    v76 = v69 - 1;
    v267 = a10 + a8;
    v263 = (v69 - 1 + a10 + a8) >> v66;
    v265 = v66;
    if (a8 >> v66 >= v263)
      return result;
    v77 = (1 << v67) - 1;
    v285 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v271;
    if (v271 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v279 = a7 >> v67;
    v283 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v283)
      return result;
    v262 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v281 = v77 & v285;
    v258 = v76 & v267;
    v260 = v76 & a8;
    v86 = v269;
LABEL_92:
    v87 = v86 << v265;
    v88 = v86 - v269;
    v277 = v86 * v262;
    v273 = v86 + 1;
    v89 = v267 >= (v86 + 1) << v265;
    v90 = v271;
    if (!v89)
      v90 = v258;
    v91 = v271 - v260;
    if (!v89)
      v91 = v19;
    v92 = v88 << v265;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v260;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v275 = (v93 + v92 - v260) * a11;
    v95 = v279;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      if (v285 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      else
        v98 = a9;
      v99 = v281;
      if (v285 >= v97 << v67)
        v99 = 1 << v67;
      if (v96 >= v15)
        v100 = 0;
      else
        v100 = v85;
      if (v96 < v15)
        v99 = v98;
      if (v84 | v80)
        break;
      v118 = 0;
      v102 = 0;
      v111 = 0;
      v127 = 0;
      if (v99)
        goto LABEL_153;
LABEL_103:
      v95 = v97;
      if (v97 == v283)
      {
        v86 = v273;
        v14 = a8;
        v19 = a10;
        if (v273 == v263)
          return result;
        goto LABEL_92;
      }
    }
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v104 = v83;
    v105 = result;
    v106 = v84;
    v107 = v80;
    do
    {
      v108 = v104;
      if (v108)
        --v106;
      else
        v106 = 0;
      v109 = v101 + v108;
      if (v105)
        --v107;
      else
        v107 = 0;
      if (v105)
        v102 |= (unint64_t)(v103 & ~(-1 << v80)) << v109++;
      v103 *= 2;
      v101 = v109 - 1;
      v105 = v107 != 0;
      v104 = v106 != 0;
    }
    while (v107 | v106);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v83;
    v114 = result;
    v115 = v84;
    v116 = v80;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
        v111 |= (unint64_t)(v112 & ~(-1 << v84)) << v110++;
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v110, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v117 = 0;
    v118 = 0;
    v119 = 1;
    v120 = v83;
    v121 = result;
    v122 = v84;
    v123 = v80;
    do
    {
      v124 = v120;
      if (v124)
        --v122;
      else
        v122 = 0;
      v125 = v117 + v124;
      --v123;
      if (v121)
        v118 |= (unint64_t)(v119 & v100) << v125++;
      else
        v123 = 0;
      v119 *= 2;
      v117 = v125 - 1;
      v121 = v123 != 0;
      v120 = v122 != 0;
    }
    while (v123 | v122);
    v126 = 0;
    v127 = 0;
    v128 = 1;
    v129 = v83;
    v130 = result;
    v131 = v84;
    v132 = v80;
    do
    {
      --v131;
      if (v129)
      {
        v127 |= (unint64_t)(v128 & v93) << v126;
        v133 = v126 + 1;
      }
      else
      {
        v131 = 0;
        v133 = v126;
      }
      if (v130)
        --v132;
      else
        v132 = 0;
      v128 *= 2;
      v126 = (__PAIR64__(v133, v130) - 1) >> 32;
      v130 = v132 != 0;
      v129 = v131 != 0;
    }
    while (v132 | v131);
    v15 = a7;
    if (!v99)
      goto LABEL_103;
LABEL_153:
    if (v94)
    {
      v134 = 0;
      v135 = (__int128 *)((char *)&a2[2 * (v100 + ((v95 - v279) << v67) - v85)] + v275);
      v136 = (v95 + v277) * a12[3] * *((unsigned __int8 *)a12 + 9) + v266;
      do
      {
        v137 = v99;
        v138 = v135;
        v139 = v118;
        do
        {
          v140 = (_OWORD *)(v136 + 32 * (v139 + v127));
          v141 = *v138;
          v142 = v138[1];
          v138 += 2;
          *v140 = v141;
          v140[1] = v142;
          v139 = (v139 - v102) & v102;
          --v137;
        }
        while (v137);
        v127 = (v127 - v111) & v111;
        v135 = (__int128 *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v288);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v252 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v143 = a6 >> v20;
    v144 = 1 << v21;
    v145 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v145 = 0;
    v146 = v144 >= a5;
    if (v144 < a5)
      v147 = v21 + v20 + v145;
    else
      v147 = *((_BYTE *)a12 + 12);
    if (v146)
      LOBYTE(v148) = *((_BYTE *)a12 + 13);
    else
      v148 = -v145;
    if (!v143)
      v21 = v147;
    v246 = v21;
    if (v143)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v148;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v246 = v22;
    v23 = v21 + v20 - v22;
  }
  v149 = v266;
  v151 = a8;
  v150 = a10;
  v245 = v294;
  if (v294)
  {
    v152 = 1 << v23;
    v244 = 1 << v246;
    if (1 << v246 >= a5)
      v153 = a5;
    else
      v153 = 1 << v246;
    v154 = 32 - __clz(v153 - 1);
    v155 = v153 > 1;
    if (v153 <= 1)
      v156 = 0;
    else
      v156 = v154;
    if (v152 >= a6)
      v157 = a6;
    else
      v157 = 1 << v23;
    v158 = 32 - __clz(v157 - 1);
    v159 = v295;
    if (v157 <= 1)
      v158 = 0;
    v278 = v157 > 1;
    v280 = v158;
    v276 = v292;
    v272 = v292 != 0;
    v274 = v293;
    v270 = v293 != 0;
    if (v295)
    {
      v160 = 0;
      v161 = 0;
      v243 = v15 >> v246;
      v264 = a8 >> v23;
      v286 = v296;
      v287 = v291;
      v282 = v293 | v292;
      v242 = a9 + v15;
      v241 = (v244 - 1) & (a9 + v15);
      v240 = v289;
      v284 = v290;
      v239 = (v244 - 1) & v15;
      v259 = (v152 - 1) & a8;
      v261 = (v152 - 1) & (a10 + a8);
      v257 = v152 - v259;
      v162 = ~(-1 << v156);
      v255 = v295;
      v256 = v158 | v156;
      v163 = ~(-1 << v158);
      v268 = v156;
      v248 = 1 << v23;
      v249 = v23;
      do
      {
        v247 = v161;
        v164 = 0;
        v165 = 0;
        v166 = a9;
        if (v242 >= (v160 + v243 + 1) << v246)
          v166 = v244 - v239;
        v167 = 1 << v246;
        if (v242 < (v160 + v243 + 1) << v246)
          v167 = v241;
        v168 = (v160 + v243) << v246 >= v15;
        v169 = v240 + v160;
        v170 = v160 << v246;
        if (v168)
          v171 = v167;
        else
          v171 = v166;
        if (v168)
          v172 = 0;
        else
          v172 = v239;
        v251 = &v252[2 * (v172 + v170)];
        do
        {
          v173 = v284 + v164;
          if (v286)
          {
            v174 = v282;
            if (v282)
            {
              v175 = 0;
              v174 = 0;
              v176 = 1;
              v177 = v270;
              v178 = v272;
              v180 = v274;
              v179 = v276;
              do
              {
                --v179;
                if (v178)
                  v174 |= (v176 & v169) << v175;
                else
                  v179 = 0;
                if (v178)
                  ++v175;
                --v180;
                if (v177)
                  v174 |= (v176 & v173) << v175;
                else
                  v180 = 0;
                if (v177)
                  ++v175;
                v176 *= 2;
                --v175;
                v177 = v180 != 0;
                v178 = v179 != 0;
              }
              while (v180 | v179);
            }
          }
          else
          {
            v174 = v282;
            if (v282)
            {
              v181 = 0;
              v174 = 0;
              v182 = 1;
              v184 = v270;
              v183 = v272;
              v185 = v274;
              v186 = v276;
              do
              {
                --v185;
                if (v184)
                  v174 |= (v182 & v173) << v181;
                else
                  v185 = 0;
                if (v184)
                  ++v181;
                --v186;
                if (v183)
                  v174 |= (v182 & v169) << v181;
                else
                  v186 = 0;
                if (v183)
                  ++v181;
                v182 *= 2;
                --v181;
                v183 = v186 != 0;
                v184 = v185 != 0;
              }
              while (v186 | v185);
            }
          }
          v187 = *(_DWORD *)(v149 + 4 * ((v174 + v287) | ((v174 + v287) >> 8 << 9)));
          if (v187 < 0)
          {
            v188 = v149 - *((_QWORD *)a13 + 3) + ((unint64_t)(v187 & 0x3FFFFFF) << 14);
            result = *a13;
            v189 = a13[2];
            if (result > v189)
            {
              result = get_level_offset_within_tail(result, v189, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v156 = v268;
              v152 = v248;
              v23 = v249;
              v18 = a11;
              v151 = a8;
              v150 = a10;
              v149 = v266;
              v188 += result;
            }
            v190 = (v164 + v264) << v23;
            v191 = v257;
            if (a10 + a8 >= (v164 + v264 + 1) << v23)
            {
              v192 = v152;
            }
            else
            {
              v191 = v150;
              v192 = v261;
            }
            if (v190 >= v151)
              v193 = 0;
            else
              v193 = v259;
            if (v190 >= v151)
              v191 = v192;
            if (!v256)
            {
              v211 = 0;
              v195 = 0;
              v204 = 0;
              v220 = 0;
              v159 = v255;
              if (!v171)
                goto LABEL_198;
LABEL_271:
              if (v191)
              {
                v225 = 0;
                v226 = (__int128 *)((char *)v251 + (v193 + (v164 << v23)) * v18);
                do
                {
                  v227 = v171;
                  v228 = v226;
                  v229 = v211;
                  do
                  {
                    result = v188 + 32 * (v229 + v220);
                    v230 = *v228;
                    v231 = v228[1];
                    v228 += 2;
                    *(_OWORD *)result = v230;
                    *(_OWORD *)(result + 16) = v231;
                    v229 = (v229 - v195) & v195;
                    --v227;
                  }
                  while (v227);
                  v220 = (v220 - v204) & v204;
                  v226 = (__int128 *)((char *)v226 + v18);
                  ++v225;
                }
                while (v225 != v191);
              }
              goto LABEL_198;
            }
            v194 = 0;
            v195 = 0;
            v196 = 1;
            v198 = v278;
            v197 = v280;
            v199 = v155;
            v200 = v156;
            do
            {
              --v197;
              v201 = v198;
              if (!v201)
                v197 = 0;
              v202 = v194 + v201;
              --v200;
              if (v199)
                v195 |= (unint64_t)(v196 & v162) << v202++;
              else
                v200 = 0;
              v196 *= 2;
              v194 = v202 - 1;
              v199 = v200 != 0;
              v198 = v197 != 0;
            }
            while (v200 | v197);
            v203 = 0;
            v204 = 0;
            v205 = 1;
            v207 = v278;
            v206 = v280;
            v208 = v155;
            v209 = v156;
            do
            {
              --v206;
              if (v207)
                v204 |= (unint64_t)(v205 & v163) << v203++;
              else
                v206 = 0;
              --v209;
              if (!v208)
                v209 = 0;
              v205 *= 2;
              v203 = (__PAIR64__(v203, v208) - 1) >> 32;
              v208 = v209 != 0;
              v207 = v206 != 0;
            }
            while (v209 | v206);
            v210 = 0;
            v211 = 0;
            v212 = 1;
            v213 = v278;
            v214 = v280;
            v215 = v155;
            v216 = v156;
            do
            {
              --v214;
              v217 = v213;
              if (!v217)
                v214 = 0;
              v218 = v210 + v217;
              --v216;
              if (v215)
                v211 |= (unint64_t)(v212 & v172) << v218++;
              else
                v216 = 0;
              v212 *= 2;
              v210 = v218 - 1;
              v215 = v216 != 0;
              v213 = v214 != 0;
            }
            while (v216 | v214);
            v219 = 0;
            v220 = 0;
            v221 = 1;
            v222 = v278;
            v223 = v280;
            v224 = v155;
            LODWORD(result) = v156;
            do
            {
              --v223;
              if (v222)
                v220 |= (unint64_t)(v221 & v193) << v219++;
              else
                v223 = 0;
              LODWORD(result) = result - 1;
              if (v224)
                result = result;
              else
                result = 0;
              v221 *= 2;
              v219 = (__PAIR64__(v219, v224) - 1) >> 32;
              v224 = (_DWORD)result != 0;
              v222 = v223 != 0;
            }
            while (result | v223);
            v156 = v268;
            v159 = v255;
            if (v171)
              goto LABEL_271;
          }
LABEL_198:
          v164 = (unsigned __int16)++v165;
        }
        while (v159 > (unsigned __int16)v165);
        v161 = v247 + 1;
        v160 = (unsigned __int16)(v247 + 1);
        v15 = a7;
      }
      while (v245 > v160);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,4u,(TwiddleOrder)0>>(uint64_t result, __int128 *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  __int128 *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  BOOL v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  __int128 *v135;
  uint64_t v136;
  int v137;
  __int128 *v138;
  uint64_t v139;
  _OWORD *v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  BOOL v147;
  char v148;
  int v149;
  uint64_t v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  BOOL v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  BOOL v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  BOOL v178;
  BOOL v179;
  int v180;
  int v181;
  int v182;
  int v183;
  BOOL v184;
  BOOL v185;
  int v186;
  int v187;
  int v188;
  unint64_t v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  int v194;
  int v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  BOOL v199;
  BOOL v200;
  unsigned int v201;
  int v202;
  int v203;
  unsigned int v204;
  uint64_t v205;
  int v206;
  unsigned int v207;
  BOOL v208;
  BOOL v209;
  unsigned int v210;
  int v211;
  uint64_t v212;
  int v213;
  BOOL v214;
  unsigned int v215;
  BOOL v216;
  unsigned int v217;
  int v218;
  int v219;
  unsigned int v220;
  uint64_t v221;
  int v222;
  BOOL v223;
  unsigned int v224;
  BOOL v225;
  int v226;
  __int128 *v227;
  int v228;
  __int128 *v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  int i;
  int v235;
  __int128 *v236;
  uint64_t v237;
  _OWORD *v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  int v242;
  int v243;
  int v244;
  unsigned int v245;
  unsigned int v246;
  int v247;
  unsigned int v248;
  char v249;
  int v250;
  int v251;
  char v252;
  __int128 *v254;
  __int128 *v255;
  unsigned int v258;
  int v259;
  unsigned int v260;
  int v261;
  int v262;
  uint64_t v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  char v268;
  uint64_t v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  BOOL v273;
  unsigned int v274;
  BOOL v275;
  unsigned int v276;
  int v277;
  uint64_t v278;
  int v279;
  int v280;
  BOOL v281;
  unsigned int v282;
  unsigned int v283;
  int v284;
  int v285;
  unsigned int v286;
  int v287;
  unsigned int v288;
  int v289;
  int v290;
  char v291[16];
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned __int8 v299;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v235 = a9;
        v236 = v13;
        v237 = v47;
        do
        {
          v238 = (_OWORD *)(result + ((v237 + v56) << 6));
          v239 = *v236;
          v240 = v236[1];
          v241 = v236[3];
          v238[2] = v236[2];
          v238[3] = v241;
          *v238 = v239;
          v238[1] = v240;
          v237 = (v237 - v31) & v31;
          v236 += 4;
          --v235;
        }
        while (v235);
        v56 = (v56 - v40) & v40;
        v13 = (__int128 *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v269 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v272 = a8 >> v66;
    v274 = 1 << v66;
    v76 = v69 - 1;
    v270 = a10 + a8;
    v266 = (v69 - 1 + a10 + a8) >> v66;
    v268 = v66;
    if (a8 >> v66 >= v266)
      return result;
    v77 = (1 << v67) - 1;
    v288 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v274;
    if (v274 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v282 = a7 >> v67;
    v286 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v286)
      return result;
    v265 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v284 = v77 & v288;
    v261 = v76 & v270;
    v263 = v76 & a8;
    v86 = v272;
LABEL_92:
    v87 = v86 << v268;
    v88 = v86 - v272;
    v280 = v86 * v265;
    v276 = v86 + 1;
    v89 = v270 >= (v86 + 1) << v268;
    v90 = v274;
    if (!v89)
      v90 = v261;
    v91 = v274 - v263;
    if (!v89)
      v91 = v19;
    v92 = v88 << v268;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v263;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v278 = (v93 + v92 - v263) * a11;
    v95 = v282;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      if (v288 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      else
        v98 = a9;
      v99 = v284;
      if (v288 >= v97 << v67)
        v99 = 1 << v67;
      if (v96 >= v15)
        v100 = 0;
      else
        v100 = v85;
      if (v96 < v15)
        v99 = v98;
      if (v84 | v80)
        break;
      v118 = 0;
      v102 = 0;
      v111 = 0;
      v127 = 0;
      if (v99)
        goto LABEL_153;
LABEL_103:
      v95 = v97;
      if (v97 == v286)
      {
        v86 = v276;
        v14 = a8;
        v19 = a10;
        if (v276 == v266)
          return result;
        goto LABEL_92;
      }
    }
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v104 = v83;
    v105 = result;
    v106 = v84;
    v107 = v80;
    do
    {
      v108 = v104;
      if (v108)
        --v106;
      else
        v106 = 0;
      v109 = v101 + v108;
      if (v105)
        --v107;
      else
        v107 = 0;
      if (v105)
        v102 |= (unint64_t)(v103 & ~(-1 << v80)) << v109++;
      v103 *= 2;
      v101 = v109 - 1;
      v105 = v107 != 0;
      v104 = v106 != 0;
    }
    while (v107 | v106);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v83;
    v114 = result;
    v115 = v84;
    v116 = v80;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
        v111 |= (unint64_t)(v112 & ~(-1 << v84)) << v110++;
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v110, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v117 = 0;
    v118 = 0;
    v119 = 1;
    v120 = v83;
    v121 = result;
    v122 = v84;
    v123 = v80;
    do
    {
      v124 = v120;
      if (v124)
        --v122;
      else
        v122 = 0;
      v125 = v117 + v124;
      --v123;
      if (v121)
        v118 |= (unint64_t)(v119 & v100) << v125++;
      else
        v123 = 0;
      v119 *= 2;
      v117 = v125 - 1;
      v121 = v123 != 0;
      v120 = v122 != 0;
    }
    while (v123 | v122);
    v126 = 0;
    v127 = 0;
    v128 = 1;
    v129 = v83;
    v130 = result;
    v131 = v84;
    v132 = v80;
    do
    {
      --v131;
      if (v129)
      {
        v127 |= (unint64_t)(v128 & v93) << v126;
        v133 = v126 + 1;
      }
      else
      {
        v131 = 0;
        v133 = v126;
      }
      if (v130)
        --v132;
      else
        v132 = 0;
      v128 *= 2;
      v126 = (__PAIR64__(v133, v130) - 1) >> 32;
      v130 = v132 != 0;
      v129 = v131 != 0;
    }
    while (v132 | v131);
    v15 = a7;
    if (!v99)
      goto LABEL_103;
LABEL_153:
    if (v94)
    {
      v134 = 0;
      v135 = (__int128 *)((char *)&a2[4 * (v100 + ((v95 - v282) << v67) - v85)] + v278);
      v136 = (v95 + v280) * a12[3] * *((unsigned __int8 *)a12 + 9) + v269;
      do
      {
        v137 = v99;
        v138 = v135;
        v139 = v118;
        do
        {
          v140 = (_OWORD *)(v136 + ((v139 + v127) << 6));
          v141 = *v138;
          v142 = v138[1];
          v143 = v138[3];
          v140[2] = v138[2];
          v140[3] = v143;
          *v140 = v141;
          v140[1] = v142;
          v139 = (v139 - v102) & v102;
          v138 += 4;
          --v137;
        }
        while (v137);
        v127 = (v127 - v111) & v111;
        v135 = (__int128 *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v291);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v255 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v144 = a6 >> v20;
    v145 = 1 << v21;
    v146 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v146 = 0;
    v147 = v145 >= a5;
    if (v145 < a5)
      v148 = v21 + v20 + v146;
    else
      v148 = *((_BYTE *)a12 + 12);
    if (v147)
      LOBYTE(v149) = *((_BYTE *)a12 + 13);
    else
      v149 = -v146;
    if (!v144)
      v21 = v148;
    v249 = v21;
    if (v144)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v149;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v249 = v22;
    v23 = v21 + v20 - v22;
  }
  v150 = v269;
  v152 = a8;
  v151 = a10;
  v248 = v297;
  if (v297)
  {
    v153 = 1 << v23;
    v247 = 1 << v249;
    if (1 << v249 >= a5)
      v154 = a5;
    else
      v154 = 1 << v249;
    v155 = 32 - __clz(v154 - 1);
    v156 = v154 > 1;
    if (v154 <= 1)
      v157 = 0;
    else
      v157 = v155;
    if (v153 >= a6)
      v158 = a6;
    else
      v158 = 1 << v23;
    v159 = 32 - __clz(v158 - 1);
    v160 = v298;
    if (v158 <= 1)
      v159 = 0;
    v281 = v158 > 1;
    v283 = v159;
    v279 = v295;
    v275 = v295 != 0;
    v277 = v296;
    v273 = v296 != 0;
    if (v298)
    {
      v161 = 0;
      v162 = 0;
      v246 = v15 >> v249;
      v267 = a8 >> v23;
      v289 = v299;
      v290 = v294;
      v285 = v296 | v295;
      v245 = a9 + v15;
      v244 = (v247 - 1) & (a9 + v15);
      v243 = v292;
      v287 = v293;
      v242 = (v247 - 1) & v15;
      v262 = (v153 - 1) & a8;
      v264 = (v153 - 1) & (a10 + a8);
      v260 = v153 - v262;
      v163 = ~(-1 << v157);
      v258 = v298;
      v259 = v159 | v157;
      v164 = ~(-1 << v159);
      v271 = v157;
      v251 = 1 << v23;
      v252 = v23;
      do
      {
        v250 = v162;
        v165 = 0;
        v166 = 0;
        v167 = a9;
        if (v245 >= (v161 + v246 + 1) << v249)
          v167 = v247 - v242;
        v168 = 1 << v249;
        if (v245 < (v161 + v246 + 1) << v249)
          v168 = v244;
        v169 = (v161 + v246) << v249 >= v15;
        v170 = v243 + v161;
        v171 = v161 << v249;
        if (v169)
          v172 = v168;
        else
          v172 = v167;
        if (v169)
          v173 = 0;
        else
          v173 = v242;
        v254 = &v255[4 * (unint64_t)(v173 + v171)];
        do
        {
          v174 = v287 + v165;
          if (v289)
          {
            v175 = v285;
            if (v285)
            {
              v176 = 0;
              v175 = 0;
              v177 = 1;
              v178 = v273;
              v179 = v275;
              v181 = v277;
              v180 = v279;
              do
              {
                --v180;
                if (v179)
                  v175 |= (v177 & v170) << v176;
                else
                  v180 = 0;
                if (v179)
                  ++v176;
                --v181;
                if (v178)
                  v175 |= (v177 & v174) << v176;
                else
                  v181 = 0;
                if (v178)
                  ++v176;
                v177 *= 2;
                --v176;
                v178 = v181 != 0;
                v179 = v180 != 0;
              }
              while (v181 | v180);
            }
          }
          else
          {
            v175 = v285;
            if (v285)
            {
              v182 = 0;
              v175 = 0;
              v183 = 1;
              v185 = v273;
              v184 = v275;
              v186 = v277;
              v187 = v279;
              do
              {
                --v186;
                if (v185)
                  v175 |= (v183 & v174) << v182;
                else
                  v186 = 0;
                if (v185)
                  ++v182;
                --v187;
                if (v184)
                  v175 |= (v183 & v170) << v182;
                else
                  v187 = 0;
                if (v184)
                  ++v182;
                v183 *= 2;
                --v182;
                v184 = v187 != 0;
                v185 = v186 != 0;
              }
              while (v187 | v186);
            }
          }
          v188 = *(_DWORD *)(v150 + 4 * ((v175 + v290) | ((v175 + v290) >> 8 << 9)));
          if (v188 < 0)
          {
            v189 = v150 - *((_QWORD *)a13 + 3) + ((unint64_t)(v188 & 0x3FFFFFF) << 14);
            result = *a13;
            v190 = a13[2];
            if (result > v190)
            {
              result = get_level_offset_within_tail(result, v190, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v157 = v271;
              v153 = v251;
              v23 = v252;
              v18 = a11;
              v152 = a8;
              v151 = a10;
              v150 = v269;
              v189 += result;
            }
            v191 = (v165 + v267) << v23;
            v192 = v260;
            if (a10 + a8 >= (v165 + v267 + 1) << v23)
            {
              v193 = v153;
            }
            else
            {
              v192 = v151;
              v193 = v264;
            }
            if (v191 >= v152)
              v194 = 0;
            else
              v194 = v262;
            if (v191 >= v152)
              v192 = v193;
            if (!v259)
            {
              v212 = 0;
              v196 = 0;
              v205 = 0;
              v221 = 0;
              v160 = v258;
              if (!v172)
                goto LABEL_198;
LABEL_271:
              if (v192)
              {
                v226 = 0;
                v227 = (__int128 *)((char *)v254 + (v194 + (v165 << v23)) * v18);
                do
                {
                  v228 = v172;
                  v229 = v227;
                  v230 = v212;
                  do
                  {
                    result = v189 + ((v230 + v221) << 6);
                    v231 = *v229;
                    v232 = v229[1];
                    v233 = v229[3];
                    *(_OWORD *)(result + 32) = v229[2];
                    *(_OWORD *)(result + 48) = v233;
                    *(_OWORD *)result = v231;
                    *(_OWORD *)(result + 16) = v232;
                    v230 = (v230 - v196) & v196;
                    v229 += 4;
                    --v228;
                  }
                  while (v228);
                  v221 = (v221 - v205) & v205;
                  v227 = (__int128 *)((char *)v227 + v18);
                  ++v226;
                }
                while (v226 != v192);
              }
              goto LABEL_198;
            }
            v195 = 0;
            v196 = 0;
            v197 = 1;
            v199 = v281;
            v198 = v283;
            v200 = v156;
            v201 = v157;
            do
            {
              --v198;
              v202 = v199;
              if (!v202)
                v198 = 0;
              v203 = v195 + v202;
              --v201;
              if (v200)
                v196 |= (unint64_t)(v197 & v163) << v203++;
              else
                v201 = 0;
              v197 *= 2;
              v195 = v203 - 1;
              v200 = v201 != 0;
              v199 = v198 != 0;
            }
            while (v201 | v198);
            v204 = 0;
            v205 = 0;
            v206 = 1;
            v208 = v281;
            v207 = v283;
            v209 = v156;
            v210 = v157;
            do
            {
              --v207;
              if (v208)
                v205 |= (unint64_t)(v206 & v164) << v204++;
              else
                v207 = 0;
              --v210;
              if (!v209)
                v210 = 0;
              v206 *= 2;
              v204 = (__PAIR64__(v204, v209) - 1) >> 32;
              v209 = v210 != 0;
              v208 = v207 != 0;
            }
            while (v210 | v207);
            v211 = 0;
            v212 = 0;
            v213 = 1;
            v214 = v281;
            v215 = v283;
            v216 = v156;
            v217 = v157;
            do
            {
              --v215;
              v218 = v214;
              if (!v218)
                v215 = 0;
              v219 = v211 + v218;
              --v217;
              if (v216)
                v212 |= (unint64_t)(v213 & v173) << v219++;
              else
                v217 = 0;
              v213 *= 2;
              v211 = v219 - 1;
              v216 = v217 != 0;
              v214 = v215 != 0;
            }
            while (v217 | v215);
            v220 = 0;
            v221 = 0;
            v222 = 1;
            v223 = v281;
            v224 = v283;
            v225 = v156;
            LODWORD(result) = v157;
            do
            {
              --v224;
              if (v223)
                v221 |= (unint64_t)(v222 & v194) << v220++;
              else
                v224 = 0;
              LODWORD(result) = result - 1;
              if (v225)
                result = result;
              else
                result = 0;
              v222 *= 2;
              v220 = (__PAIR64__(v220, v225) - 1) >> 32;
              v225 = (_DWORD)result != 0;
              v223 = v224 != 0;
            }
            while (result | v224);
            v157 = v271;
            v160 = v258;
            if (v172)
              goto LABEL_271;
          }
LABEL_198:
          v165 = (unsigned __int16)++v166;
        }
        while (v160 > (unsigned __int16)v166);
        v162 = v250 + 1;
        v161 = (unsigned __int16)(v250 + 1);
        v15 = a7;
      }
      while (v248 > v161);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,16ul,8u,(TwiddleOrder)0>>(uint64_t result, __int128 *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  __int128 *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  BOOL v105;
  BOOL v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  BOOL v114;
  BOOL v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  int v120;
  BOOL v121;
  BOOL v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  unsigned int v127;
  uint64_t v128;
  int v129;
  BOOL v130;
  BOOL v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  __int128 *v136;
  uint64_t v137;
  int v138;
  __int128 *v139;
  uint64_t v140;
  _OWORD *v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  BOOL v151;
  char v152;
  int v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  BOOL v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  BOOL v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  BOOL v182;
  BOOL v183;
  int v184;
  int v185;
  int v186;
  int v187;
  BOOL v188;
  BOOL v189;
  int v190;
  int v191;
  int v192;
  unint64_t v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  int v199;
  uint64_t v200;
  int v201;
  unsigned int v202;
  BOOL v203;
  BOOL v204;
  unsigned int v205;
  int v206;
  int v207;
  unsigned int v208;
  uint64_t v209;
  int v210;
  unsigned int v211;
  BOOL v212;
  BOOL v213;
  unsigned int v214;
  int v215;
  uint64_t v216;
  int v217;
  BOOL v218;
  unsigned int v219;
  BOOL v220;
  unsigned int v221;
  int v222;
  int v223;
  unsigned int v224;
  uint64_t v225;
  int v226;
  BOOL v227;
  unsigned int v228;
  BOOL v229;
  int v230;
  __int128 *v231;
  int v232;
  __int128 *v233;
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  int i;
  int v242;
  __int128 *v243;
  uint64_t v244;
  _OWORD *v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  int v252;
  int v253;
  int v254;
  unsigned int v255;
  unsigned int v256;
  int v257;
  unsigned int v258;
  char v259;
  int v260;
  int v261;
  char v262;
  __int128 *v264;
  __int128 *v265;
  unsigned int v268;
  int v269;
  unsigned int v270;
  int v271;
  int v272;
  uint64_t v273;
  int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  char v278;
  uint64_t v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int v282;
  BOOL v283;
  unsigned int v284;
  BOOL v285;
  unsigned int v286;
  int v287;
  uint64_t v288;
  int v289;
  int v290;
  BOOL v291;
  unsigned int v292;
  unsigned int v293;
  int v294;
  int v295;
  unsigned int v296;
  int v297;
  unsigned int v298;
  int v299;
  int v300;
  char v301[16];
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned __int8 v309;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v242 = a9;
        v243 = v13;
        v244 = v47;
        do
        {
          v245 = (_OWORD *)(result + ((v244 + v56) << 7));
          v246 = *v243;
          v247 = v243[1];
          v248 = v243[3];
          v245[2] = v243[2];
          v245[3] = v248;
          *v245 = v246;
          v245[1] = v247;
          v249 = v243[4];
          v250 = v243[5];
          v251 = v243[7];
          v245[6] = v243[6];
          v245[7] = v251;
          v245[4] = v249;
          v245[5] = v250;
          v244 = (v244 - v31) & v31;
          v243 += 8;
          --v242;
        }
        while (v242);
        v56 = (v56 - v40) & v40;
        v13 = (__int128 *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v279 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v282 = a8 >> v66;
    v284 = 1 << v66;
    v76 = v69 - 1;
    v280 = a10 + a8;
    v276 = (v69 - 1 + a10 + a8) >> v66;
    v278 = v66;
    if (a8 >> v66 >= v276)
      return result;
    v77 = (1 << v67) - 1;
    v298 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v284;
    if (v284 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v292 = a7 >> v67;
    v296 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v296)
      return result;
    v275 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v294 = v77 & v298;
    v271 = v76 & v280;
    v273 = v76 & a8;
    v86 = v282;
LABEL_92:
    v87 = v86 << v278;
    v88 = v86 - v282;
    v290 = v86 * v275;
    v286 = v86 + 1;
    v89 = v280 >= (v86 + 1) << v278;
    v90 = v284;
    if (!v89)
      v90 = v271;
    v91 = v284 - v273;
    if (!v89)
      v91 = v19;
    v92 = v88 << v278;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v273;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v288 = (v93 + v92 - v273) * a11;
    v95 = v292;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      v98 = a9;
      if (v298 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      v99 = 1 << v67;
      if (v298 < v97 << v67)
        v99 = v294;
      v100 = v96 >= v15 ? 0 : v85;
      v101 = v96 >= v15 ? v99 : v98;
      if (v84 | v80)
        break;
      v119 = 0;
      v103 = 0;
      v112 = 0;
      v128 = 0;
      if (v101)
        goto LABEL_152;
LABEL_103:
      v95 = v97;
      if (v97 == v296)
      {
        v86 = v286;
        v14 = a8;
        v19 = a10;
        if (v286 == v276)
          return result;
        goto LABEL_92;
      }
    }
    v102 = 0;
    v103 = 0;
    v104 = 1;
    v105 = v83;
    v106 = result;
    v107 = v84;
    v108 = v80;
    do
    {
      --v107;
      v109 = v105;
      if (!v109)
        v107 = 0;
      v110 = v102 + v109;
      if (v106)
        --v108;
      else
        v108 = 0;
      if (v106)
        v103 |= (unint64_t)(v104 & ~(-1 << v80)) << v110++;
      v104 *= 2;
      v102 = v110 - 1;
      v106 = v108 != 0;
      v105 = v107 != 0;
    }
    while (v108 | v107);
    v111 = 0;
    v112 = 0;
    v113 = 1;
    v114 = v83;
    v115 = result;
    v116 = v84;
    v117 = v80;
    do
    {
      if (v114)
        --v116;
      else
        v116 = 0;
      if (v114)
        v112 |= (unint64_t)(v113 & ~(-1 << v84)) << v111++;
      --v117;
      if (!v115)
        v117 = 0;
      v113 *= 2;
      v111 = (__PAIR64__(v111, v115) - 1) >> 32;
      v115 = v117 != 0;
      v114 = v116 != 0;
    }
    while (v117 | v116);
    v118 = 0;
    v119 = 0;
    v120 = 1;
    v121 = v83;
    v122 = result;
    v123 = v84;
    v124 = v80;
    do
    {
      v125 = v121;
      if (v125)
        --v123;
      else
        v123 = 0;
      v126 = v118 + v125;
      --v124;
      if (v122)
        v119 |= (unint64_t)(v120 & v100) << v126++;
      else
        v124 = 0;
      v120 *= 2;
      v118 = v126 - 1;
      v122 = v124 != 0;
      v121 = v123 != 0;
    }
    while (v124 | v123);
    v127 = 0;
    v128 = 0;
    v129 = 1;
    v130 = v83;
    v131 = result;
    v132 = v84;
    v133 = v80;
    do
    {
      --v132;
      if (v130)
      {
        v128 |= (unint64_t)(v129 & v93) << v127;
        v134 = v127 + 1;
      }
      else
      {
        v132 = 0;
        v134 = v127;
      }
      if (v131)
        --v133;
      else
        v133 = 0;
      v129 *= 2;
      v127 = (__PAIR64__(v134, v131) - 1) >> 32;
      v131 = v133 != 0;
      v130 = v132 != 0;
    }
    while (v133 | v132);
    v15 = a7;
    if (!v101)
      goto LABEL_103;
LABEL_152:
    if (v94)
    {
      v135 = 0;
      v136 = (__int128 *)((char *)&a2[8 * (v100 + ((v95 - v292) << v67) - v85)] + v288);
      v137 = (v95 + v290) * a12[3] * *((unsigned __int8 *)a12 + 9) + v279;
      do
      {
        v138 = v101;
        v139 = v136;
        v140 = v119;
        do
        {
          v141 = (_OWORD *)(v137 + ((v140 + v128) << 7));
          v142 = *v139;
          v143 = v139[1];
          v144 = v139[3];
          v141[2] = v139[2];
          v141[3] = v144;
          *v141 = v142;
          v141[1] = v143;
          v145 = v139[4];
          v146 = v139[5];
          v147 = v139[7];
          v141[6] = v139[6];
          v141[7] = v147;
          v141[4] = v145;
          v141[5] = v146;
          v140 = (v140 - v103) & v103;
          v139 += 8;
          --v138;
        }
        while (v138);
        v128 = (v128 - v112) & v112;
        v136 = (__int128 *)((char *)v136 + a11);
        ++v135;
      }
      while (v135 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v301);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v265 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v148 = a6 >> v20;
    v149 = 1 << v21;
    v150 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v150 = 0;
    v151 = v149 >= a5;
    if (v149 < a5)
      v152 = v21 + v20 + v150;
    else
      v152 = *((_BYTE *)a12 + 12);
    if (v151)
      LOBYTE(v153) = *((_BYTE *)a12 + 13);
    else
      v153 = -v150;
    if (!v148)
      v21 = v152;
    v259 = v21;
    if (v148)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v153;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v259 = v22;
    v23 = v21 + v20 - v22;
  }
  v154 = v279;
  v156 = a8;
  v155 = a10;
  v258 = v307;
  if (v307)
  {
    v157 = 1 << v23;
    v257 = 1 << v259;
    if (1 << v259 >= a5)
      v158 = a5;
    else
      v158 = 1 << v259;
    v159 = 32 - __clz(v158 - 1);
    v160 = v158 > 1;
    if (v158 <= 1)
      v161 = 0;
    else
      v161 = v159;
    if (v157 >= a6)
      v162 = a6;
    else
      v162 = 1 << v23;
    v163 = 32 - __clz(v162 - 1);
    v164 = v308;
    if (v162 <= 1)
      v163 = 0;
    v291 = v162 > 1;
    v293 = v163;
    v289 = v305;
    v285 = v305 != 0;
    v287 = v306;
    v283 = v306 != 0;
    if (v308)
    {
      v165 = 0;
      v166 = 0;
      v256 = v15 >> v259;
      v277 = a8 >> v23;
      v299 = v309;
      v300 = v304;
      v295 = v306 | v305;
      v255 = a9 + v15;
      v254 = (v257 - 1) & (a9 + v15);
      v253 = v302;
      v297 = v303;
      v252 = (v257 - 1) & v15;
      v272 = (v157 - 1) & a8;
      v274 = (v157 - 1) & (a10 + a8);
      v270 = v157 - v272;
      v167 = ~(-1 << v161);
      v268 = v308;
      v269 = v163 | v161;
      v168 = ~(-1 << v163);
      v281 = v161;
      v261 = 1 << v23;
      v262 = v23;
      do
      {
        v260 = v166;
        v169 = 0;
        v170 = 0;
        v171 = a9;
        if (v255 >= (v165 + v256 + 1) << v259)
          v171 = v257 - v252;
        v172 = 1 << v259;
        if (v255 < (v165 + v256 + 1) << v259)
          v172 = v254;
        v173 = (v165 + v256) << v259 >= v15;
        v174 = v253 + v165;
        v175 = v165 << v259;
        if (v173)
          v176 = v172;
        else
          v176 = v171;
        if (v173)
          v177 = 0;
        else
          v177 = v252;
        v264 = &v265[8 * (unint64_t)(v177 + v175)];
        do
        {
          v178 = v297 + v169;
          if (v299)
          {
            v179 = v295;
            if (v295)
            {
              v180 = 0;
              v179 = 0;
              v181 = 1;
              v182 = v283;
              v183 = v285;
              v185 = v287;
              v184 = v289;
              do
              {
                --v184;
                if (v183)
                  v179 |= (v181 & v174) << v180;
                else
                  v184 = 0;
                if (v183)
                  ++v180;
                --v185;
                if (v182)
                  v179 |= (v181 & v178) << v180;
                else
                  v185 = 0;
                if (v182)
                  ++v180;
                v181 *= 2;
                --v180;
                v182 = v185 != 0;
                v183 = v184 != 0;
              }
              while (v185 | v184);
            }
          }
          else
          {
            v179 = v295;
            if (v295)
            {
              v186 = 0;
              v179 = 0;
              v187 = 1;
              v189 = v283;
              v188 = v285;
              v190 = v287;
              v191 = v289;
              do
              {
                --v190;
                if (v189)
                  v179 |= (v187 & v178) << v186;
                else
                  v190 = 0;
                if (v189)
                  ++v186;
                --v191;
                if (v188)
                  v179 |= (v187 & v174) << v186;
                else
                  v191 = 0;
                if (v188)
                  ++v186;
                v187 *= 2;
                --v186;
                v188 = v191 != 0;
                v189 = v190 != 0;
              }
              while (v191 | v190);
            }
          }
          v192 = *(_DWORD *)(v154 + 4 * ((v179 + v300) | ((v179 + v300) >> 8 << 9)));
          if (v192 < 0)
          {
            v193 = v154 - *((_QWORD *)a13 + 3) + ((unint64_t)(v192 & 0x3FFFFFF) << 14);
            result = *a13;
            v194 = a13[2];
            if (result > v194)
            {
              result = get_level_offset_within_tail(result, v194, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v161 = v281;
              v157 = v261;
              v23 = v262;
              v18 = a11;
              v156 = a8;
              v155 = a10;
              v154 = v279;
              v193 += result;
            }
            v195 = (v169 + v277) << v23;
            v196 = v270;
            if (a10 + a8 >= (v169 + v277 + 1) << v23)
            {
              v197 = v157;
            }
            else
            {
              v196 = v155;
              v197 = v274;
            }
            if (v195 >= v156)
              v198 = 0;
            else
              v198 = v272;
            if (v195 >= v156)
              v196 = v197;
            if (!v269)
            {
              v216 = 0;
              v200 = 0;
              v209 = 0;
              v225 = 0;
              v164 = v268;
              if (!v176)
                goto LABEL_197;
LABEL_270:
              if (v196)
              {
                v230 = 0;
                v231 = (__int128 *)((char *)v264 + (v198 + (v169 << v23)) * v18);
                do
                {
                  v232 = v176;
                  v233 = v231;
                  v234 = v216;
                  do
                  {
                    result = v193 + ((v234 + v225) << 7);
                    v235 = *v233;
                    v236 = v233[1];
                    v237 = v233[3];
                    *(_OWORD *)(result + 32) = v233[2];
                    *(_OWORD *)(result + 48) = v237;
                    *(_OWORD *)result = v235;
                    *(_OWORD *)(result + 16) = v236;
                    v238 = v233[4];
                    v239 = v233[5];
                    v240 = v233[7];
                    *(_OWORD *)(result + 96) = v233[6];
                    *(_OWORD *)(result + 112) = v240;
                    *(_OWORD *)(result + 64) = v238;
                    *(_OWORD *)(result + 80) = v239;
                    v234 = (v234 - v200) & v200;
                    v233 += 8;
                    --v232;
                  }
                  while (v232);
                  v225 = (v225 - v209) & v209;
                  v231 = (__int128 *)((char *)v231 + v18);
                  ++v230;
                }
                while (v230 != v196);
              }
              goto LABEL_197;
            }
            v199 = 0;
            v200 = 0;
            v201 = 1;
            v203 = v291;
            v202 = v293;
            v204 = v160;
            v205 = v161;
            do
            {
              --v202;
              v206 = v203;
              if (!v206)
                v202 = 0;
              v207 = v199 + v206;
              --v205;
              if (v204)
                v200 |= (unint64_t)(v201 & v167) << v207++;
              else
                v205 = 0;
              v201 *= 2;
              v199 = v207 - 1;
              v204 = v205 != 0;
              v203 = v202 != 0;
            }
            while (v205 | v202);
            v208 = 0;
            v209 = 0;
            v210 = 1;
            v212 = v291;
            v211 = v293;
            v213 = v160;
            v214 = v161;
            do
            {
              --v211;
              if (v212)
                v209 |= (unint64_t)(v210 & v168) << v208++;
              else
                v211 = 0;
              --v214;
              if (!v213)
                v214 = 0;
              v210 *= 2;
              v208 = (__PAIR64__(v208, v213) - 1) >> 32;
              v213 = v214 != 0;
              v212 = v211 != 0;
            }
            while (v214 | v211);
            v215 = 0;
            v216 = 0;
            v217 = 1;
            v218 = v291;
            v219 = v293;
            v220 = v160;
            v221 = v161;
            do
            {
              --v219;
              v222 = v218;
              if (!v222)
                v219 = 0;
              v223 = v215 + v222;
              --v221;
              if (v220)
                v216 |= (unint64_t)(v217 & v177) << v223++;
              else
                v221 = 0;
              v217 *= 2;
              v215 = v223 - 1;
              v220 = v221 != 0;
              v218 = v219 != 0;
            }
            while (v221 | v219);
            v224 = 0;
            v225 = 0;
            v226 = 1;
            v227 = v291;
            v228 = v293;
            v229 = v160;
            LODWORD(result) = v161;
            do
            {
              --v228;
              if (v227)
                v225 |= (unint64_t)(v226 & v198) << v224++;
              else
                v228 = 0;
              LODWORD(result) = result - 1;
              if (v229)
                result = result;
              else
                result = 0;
              v226 *= 2;
              v224 = (__PAIR64__(v224, v229) - 1) >> 32;
              v229 = (_DWORD)result != 0;
              v227 = v228 != 0;
            }
            while (result | v228);
            v161 = v281;
            v164 = v268;
            if (v176)
              goto LABEL_270;
          }
LABEL_197:
          v169 = (unsigned __int16)++v170;
        }
        while (v164 > (unsigned __int16)v170);
        v166 = v260 + 1;
        v165 = (unsigned __int16)(v260 + 1);
        v15 = a7;
      }
      while (v258 > v165);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,2u,(TwiddleOrder)0>>(uint64_t result, __int128 *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  __int128 *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  BOOL v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  __int128 *v135;
  uint64_t v136;
  int v137;
  __int128 *v138;
  uint64_t v139;
  __int128 v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  BOOL v144;
  char v145;
  int v146;
  uint64_t v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  BOOL v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  BOOL v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  BOOL v175;
  BOOL v176;
  int v177;
  int v178;
  int v179;
  int v180;
  BOOL v181;
  BOOL v182;
  int v183;
  int v184;
  int v185;
  unint64_t v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  int v191;
  int v192;
  uint64_t v193;
  int v194;
  unsigned int v195;
  BOOL v196;
  BOOL v197;
  unsigned int v198;
  int v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  int v203;
  unsigned int v204;
  BOOL v205;
  BOOL v206;
  unsigned int v207;
  int v208;
  uint64_t v209;
  int v210;
  BOOL v211;
  unsigned int v212;
  BOOL v213;
  unsigned int v214;
  int v215;
  int v216;
  unsigned int v217;
  uint64_t v218;
  int v219;
  BOOL v220;
  unsigned int v221;
  BOOL v222;
  int v223;
  __int128 *v224;
  int v225;
  __int128 *v226;
  uint64_t v227;
  __int128 v228;
  int i;
  int v230;
  __int128 *v231;
  uint64_t v232;
  __int128 v233;
  int v234;
  int v235;
  int v236;
  unsigned int v237;
  unsigned int v238;
  int v239;
  unsigned int v240;
  char v241;
  int v242;
  int v243;
  char v244;
  __int128 *v246;
  __int128 *v247;
  unsigned int v250;
  int v251;
  unsigned int v252;
  int v253;
  int v254;
  uint64_t v255;
  int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  char v260;
  uint64_t v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  BOOL v265;
  unsigned int v266;
  BOOL v267;
  unsigned int v268;
  int v269;
  uint64_t v270;
  int v271;
  int v272;
  BOOL v273;
  unsigned int v274;
  unsigned int v275;
  int v276;
  int v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  int v281;
  int v282;
  char v283[16];
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned __int8 v291;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v230 = a9;
        v231 = v13;
        v232 = v47;
        do
        {
          v233 = *v231++;
          *(_OWORD *)(result + 16 * (v232 + v56)) = v233;
          v232 = (v232 - v31) & v31;
          --v230;
        }
        while (v230);
        v56 = (v56 - v40) & v40;
        v13 = (__int128 *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v261 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v264 = a8 >> v66;
    v266 = 1 << v66;
    v76 = v69 - 1;
    v262 = a10 + a8;
    v258 = (v69 - 1 + a10 + a8) >> v66;
    v260 = v66;
    if (a8 >> v66 >= v258)
      return result;
    v77 = (1 << v67) - 1;
    v280 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v266;
    if (v266 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v274 = a7 >> v67;
    v278 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v278)
      return result;
    v257 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v276 = v77 & v280;
    v253 = v76 & v262;
    v255 = v76 & a8;
    v86 = v264;
LABEL_92:
    v87 = v86 << v260;
    v88 = v86 - v264;
    v272 = v86 * v257;
    v268 = v86 + 1;
    v89 = v262 >= (v86 + 1) << v260;
    v90 = v266;
    if (!v89)
      v90 = v253;
    v91 = v266 - v255;
    if (!v89)
      v91 = v19;
    v92 = v88 << v260;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v255;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v270 = (v93 + v92 - v255) * a11;
    v95 = v274;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      if (v280 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      else
        v98 = a9;
      v99 = v276;
      if (v280 >= v97 << v67)
        v99 = 1 << v67;
      if (v96 >= v15)
        v100 = 0;
      else
        v100 = v85;
      if (v96 < v15)
        v99 = v98;
      if (v84 | v80)
        break;
      v118 = 0;
      v102 = 0;
      v111 = 0;
      v127 = 0;
      if (v99)
        goto LABEL_153;
LABEL_103:
      v95 = v97;
      if (v97 == v278)
      {
        v86 = v268;
        v14 = a8;
        v19 = a10;
        if (v268 == v258)
          return result;
        goto LABEL_92;
      }
    }
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v104 = v83;
    v105 = result;
    v106 = v84;
    v107 = v80;
    do
    {
      v108 = v104;
      if (v108)
        --v106;
      else
        v106 = 0;
      v109 = v101 + v108;
      if (v105)
        --v107;
      else
        v107 = 0;
      if (v105)
        v102 |= (unint64_t)(v103 & ~(-1 << v80)) << v109++;
      v103 *= 2;
      v101 = v109 - 1;
      v105 = v107 != 0;
      v104 = v106 != 0;
    }
    while (v107 | v106);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v83;
    v114 = result;
    v115 = v84;
    v116 = v80;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
        v111 |= (unint64_t)(v112 & ~(-1 << v84)) << v110++;
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v110, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v117 = 0;
    v118 = 0;
    v119 = 1;
    v120 = v83;
    v121 = result;
    v122 = v84;
    v123 = v80;
    do
    {
      v124 = v120;
      if (v124)
        --v122;
      else
        v122 = 0;
      v125 = v117 + v124;
      --v123;
      if (v121)
        v118 |= (unint64_t)(v119 & v100) << v125++;
      else
        v123 = 0;
      v119 *= 2;
      v117 = v125 - 1;
      v121 = v123 != 0;
      v120 = v122 != 0;
    }
    while (v123 | v122);
    v126 = 0;
    v127 = 0;
    v128 = 1;
    v129 = v83;
    v130 = result;
    v131 = v84;
    v132 = v80;
    do
    {
      --v131;
      if (v129)
      {
        v127 |= (unint64_t)(v128 & v93) << v126;
        v133 = v126 + 1;
      }
      else
      {
        v131 = 0;
        v133 = v126;
      }
      if (v130)
        --v132;
      else
        v132 = 0;
      v128 *= 2;
      v126 = (__PAIR64__(v133, v130) - 1) >> 32;
      v130 = v132 != 0;
      v129 = v131 != 0;
    }
    while (v132 | v131);
    v15 = a7;
    if (!v99)
      goto LABEL_103;
LABEL_153:
    if (v94)
    {
      v134 = 0;
      v135 = (__int128 *)((char *)&a2[v100 + ((v95 - v274) << v67) - v85] + v270);
      v136 = (v95 + v272) * a12[3] * *((unsigned __int8 *)a12 + 9) + v261;
      do
      {
        v137 = v99;
        v138 = v135;
        v139 = v118;
        do
        {
          v140 = *v138++;
          *(_OWORD *)(v136 + 16 * (v139 + v127)) = v140;
          v139 = (v139 - v102) & v102;
          --v137;
        }
        while (v137);
        v127 = (v127 - v111) & v111;
        v135 = (__int128 *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v283);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v247 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v141 = a6 >> v20;
    v142 = 1 << v21;
    v143 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v143 = 0;
    v144 = v142 >= a5;
    if (v142 < a5)
      v145 = v21 + v20 + v143;
    else
      v145 = *((_BYTE *)a12 + 12);
    if (v144)
      LOBYTE(v146) = *((_BYTE *)a12 + 13);
    else
      v146 = -v143;
    if (!v141)
      v21 = v145;
    v241 = v21;
    if (v141)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v146;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v241 = v22;
    v23 = v21 + v20 - v22;
  }
  v147 = v261;
  v149 = a8;
  v148 = a10;
  v240 = v289;
  if (v289)
  {
    v150 = 1 << v23;
    v239 = 1 << v241;
    if (1 << v241 >= a5)
      v151 = a5;
    else
      v151 = 1 << v241;
    v152 = 32 - __clz(v151 - 1);
    v153 = v151 > 1;
    if (v151 <= 1)
      v154 = 0;
    else
      v154 = v152;
    if (v150 >= a6)
      v155 = a6;
    else
      v155 = 1 << v23;
    v156 = 32 - __clz(v155 - 1);
    v157 = v290;
    if (v155 <= 1)
      v156 = 0;
    v273 = v155 > 1;
    v275 = v156;
    v271 = v287;
    v267 = v287 != 0;
    v269 = v288;
    v265 = v288 != 0;
    if (v290)
    {
      v158 = 0;
      v159 = 0;
      v238 = v15 >> v241;
      v259 = a8 >> v23;
      v281 = v291;
      v282 = v286;
      v277 = v288 | v287;
      v237 = a9 + v15;
      v236 = (v239 - 1) & (a9 + v15);
      v235 = v284;
      v279 = v285;
      v234 = (v239 - 1) & v15;
      v254 = (v150 - 1) & a8;
      v256 = (v150 - 1) & (a10 + a8);
      v252 = v150 - v254;
      v160 = ~(-1 << v154);
      v250 = v290;
      v251 = v156 | v154;
      v161 = ~(-1 << v156);
      v263 = v154;
      v243 = 1 << v23;
      v244 = v23;
      do
      {
        v242 = v159;
        v162 = 0;
        v163 = 0;
        v164 = a9;
        if (v237 >= (v158 + v238 + 1) << v241)
          v164 = v239 - v234;
        v165 = 1 << v241;
        if (v237 < (v158 + v238 + 1) << v241)
          v165 = v236;
        v166 = (v158 + v238) << v241 >= v15;
        v167 = v235 + v158;
        v168 = v158 << v241;
        if (v166)
          v169 = v165;
        else
          v169 = v164;
        if (v166)
          v170 = 0;
        else
          v170 = v234;
        v246 = &v247[v170 + v168];
        do
        {
          v171 = v279 + v162;
          if (v281)
          {
            v172 = v277;
            if (v277)
            {
              v173 = 0;
              v172 = 0;
              v174 = 1;
              v175 = v265;
              v176 = v267;
              v178 = v269;
              v177 = v271;
              do
              {
                --v177;
                if (v176)
                  v172 |= (v174 & v167) << v173;
                else
                  v177 = 0;
                if (v176)
                  ++v173;
                --v178;
                if (v175)
                  v172 |= (v174 & v171) << v173;
                else
                  v178 = 0;
                if (v175)
                  ++v173;
                v174 *= 2;
                --v173;
                v175 = v178 != 0;
                v176 = v177 != 0;
              }
              while (v178 | v177);
            }
          }
          else
          {
            v172 = v277;
            if (v277)
            {
              v179 = 0;
              v172 = 0;
              v180 = 1;
              v182 = v265;
              v181 = v267;
              v183 = v269;
              v184 = v271;
              do
              {
                --v183;
                if (v182)
                  v172 |= (v180 & v171) << v179;
                else
                  v183 = 0;
                if (v182)
                  ++v179;
                --v184;
                if (v181)
                  v172 |= (v180 & v167) << v179;
                else
                  v184 = 0;
                if (v181)
                  ++v179;
                v180 *= 2;
                --v179;
                v181 = v184 != 0;
                v182 = v183 != 0;
              }
              while (v184 | v183);
            }
          }
          v185 = *(_DWORD *)(v147 + 4 * ((v172 + v282) | ((v172 + v282) >> 8 << 9)));
          if (v185 < 0)
          {
            v186 = v147 - *((_QWORD *)a13 + 3) + ((unint64_t)(v185 & 0x3FFFFFF) << 14);
            result = *a13;
            v187 = a13[2];
            if (result > v187)
            {
              result = get_level_offset_within_tail(result, v187, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v154 = v263;
              v150 = v243;
              v23 = v244;
              v18 = a11;
              v149 = a8;
              v148 = a10;
              v147 = v261;
              v186 += result;
            }
            v188 = (v162 + v259) << v23;
            v189 = v252;
            if (a10 + a8 >= (v162 + v259 + 1) << v23)
            {
              v190 = v150;
            }
            else
            {
              v189 = v148;
              v190 = v256;
            }
            if (v188 >= v149)
              v191 = 0;
            else
              v191 = v254;
            if (v188 >= v149)
              v189 = v190;
            if (!v251)
            {
              v209 = 0;
              v193 = 0;
              v202 = 0;
              v218 = 0;
              v157 = v250;
              if (!v169)
                goto LABEL_198;
LABEL_271:
              if (v189)
              {
                v223 = 0;
                v224 = (__int128 *)((char *)v246 + (v191 + (v162 << v23)) * v18);
                do
                {
                  v225 = v169;
                  v226 = v224;
                  v227 = v209;
                  do
                  {
                    result = v227 + v218;
                    v228 = *v226++;
                    *(_OWORD *)(v186 + 16 * (v227 + v218)) = v228;
                    v227 = (v227 - v193) & v193;
                    --v225;
                  }
                  while (v225);
                  v218 = (v218 - v202) & v202;
                  v224 = (__int128 *)((char *)v224 + v18);
                  ++v223;
                }
                while (v223 != v189);
              }
              goto LABEL_198;
            }
            v192 = 0;
            v193 = 0;
            v194 = 1;
            v196 = v273;
            v195 = v275;
            v197 = v153;
            v198 = v154;
            do
            {
              --v195;
              v199 = v196;
              if (!v199)
                v195 = 0;
              v200 = v192 + v199;
              --v198;
              if (v197)
                v193 |= (unint64_t)(v194 & v160) << v200++;
              else
                v198 = 0;
              v194 *= 2;
              v192 = v200 - 1;
              v197 = v198 != 0;
              v196 = v195 != 0;
            }
            while (v198 | v195);
            v201 = 0;
            v202 = 0;
            v203 = 1;
            v205 = v273;
            v204 = v275;
            v206 = v153;
            v207 = v154;
            do
            {
              --v204;
              if (v205)
                v202 |= (unint64_t)(v203 & v161) << v201++;
              else
                v204 = 0;
              --v207;
              if (!v206)
                v207 = 0;
              v203 *= 2;
              v201 = (__PAIR64__(v201, v206) - 1) >> 32;
              v206 = v207 != 0;
              v205 = v204 != 0;
            }
            while (v207 | v204);
            v208 = 0;
            v209 = 0;
            v210 = 1;
            v211 = v273;
            v212 = v275;
            v213 = v153;
            v214 = v154;
            do
            {
              --v212;
              v215 = v211;
              if (!v215)
                v212 = 0;
              v216 = v208 + v215;
              --v214;
              if (v213)
                v209 |= (unint64_t)(v210 & v170) << v216++;
              else
                v214 = 0;
              v210 *= 2;
              v208 = v216 - 1;
              v213 = v214 != 0;
              v211 = v212 != 0;
            }
            while (v214 | v212);
            v217 = 0;
            v218 = 0;
            v219 = 1;
            v220 = v273;
            v221 = v275;
            v222 = v153;
            LODWORD(result) = v154;
            do
            {
              --v221;
              if (v220)
                v218 |= (unint64_t)(v219 & v191) << v217++;
              else
                v221 = 0;
              LODWORD(result) = result - 1;
              if (v222)
                result = result;
              else
                result = 0;
              v219 *= 2;
              v217 = (__PAIR64__(v217, v222) - 1) >> 32;
              v222 = (_DWORD)result != 0;
              v220 = v221 != 0;
            }
            while (result | v221);
            v154 = v263;
            v157 = v250;
            if (v169)
              goto LABEL_271;
          }
LABEL_198:
          v162 = (unsigned __int16)++v163;
        }
        while (v157 > (unsigned __int16)v163);
        v159 = v242 + 1;
        v158 = (unsigned __int16)(v242 + 1);
        v15 = a7;
      }
      while (v240 > v158);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,4u,(TwiddleOrder)0>>(uint64_t result, __int128 *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  __int128 *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  BOOL v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  __int128 *v135;
  uint64_t v136;
  int v137;
  __int128 *v138;
  uint64_t v139;
  _OWORD *v140;
  __int128 v141;
  __int128 v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  BOOL v146;
  char v147;
  int v148;
  uint64_t v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  BOOL v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  BOOL v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  BOOL v177;
  BOOL v178;
  int v179;
  int v180;
  int v181;
  int v182;
  BOOL v183;
  BOOL v184;
  int v185;
  int v186;
  int v187;
  unint64_t v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  int v193;
  int v194;
  uint64_t v195;
  int v196;
  unsigned int v197;
  BOOL v198;
  BOOL v199;
  unsigned int v200;
  int v201;
  int v202;
  unsigned int v203;
  uint64_t v204;
  int v205;
  unsigned int v206;
  BOOL v207;
  BOOL v208;
  unsigned int v209;
  int v210;
  uint64_t v211;
  int v212;
  BOOL v213;
  unsigned int v214;
  BOOL v215;
  unsigned int v216;
  int v217;
  int v218;
  unsigned int v219;
  uint64_t v220;
  int v221;
  BOOL v222;
  unsigned int v223;
  BOOL v224;
  int v225;
  __int128 *v226;
  int v227;
  __int128 *v228;
  uint64_t v229;
  __int128 v230;
  __int128 v231;
  int i;
  int v233;
  __int128 *v234;
  uint64_t v235;
  _OWORD *v236;
  __int128 v237;
  __int128 v238;
  int v239;
  int v240;
  int v241;
  unsigned int v242;
  unsigned int v243;
  int v244;
  unsigned int v245;
  char v246;
  int v247;
  int v248;
  char v249;
  __int128 *v251;
  __int128 *v252;
  unsigned int v255;
  int v256;
  unsigned int v257;
  int v258;
  int v259;
  uint64_t v260;
  int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  char v265;
  uint64_t v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  BOOL v270;
  unsigned int v271;
  BOOL v272;
  unsigned int v273;
  int v274;
  uint64_t v275;
  int v276;
  int v277;
  BOOL v278;
  unsigned int v279;
  unsigned int v280;
  int v281;
  int v282;
  unsigned int v283;
  int v284;
  unsigned int v285;
  int v286;
  int v287;
  char v288[16];
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned __int8 v296;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v233 = a9;
        v234 = v13;
        v235 = v47;
        do
        {
          v236 = (_OWORD *)(result + 32 * (v235 + v56));
          v237 = *v234;
          v238 = v234[1];
          v234 += 2;
          *v236 = v237;
          v236[1] = v238;
          v235 = (v235 - v31) & v31;
          --v233;
        }
        while (v233);
        v56 = (v56 - v40) & v40;
        v13 = (__int128 *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v266 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v269 = a8 >> v66;
    v271 = 1 << v66;
    v76 = v69 - 1;
    v267 = a10 + a8;
    v263 = (v69 - 1 + a10 + a8) >> v66;
    v265 = v66;
    if (a8 >> v66 >= v263)
      return result;
    v77 = (1 << v67) - 1;
    v285 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v271;
    if (v271 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v279 = a7 >> v67;
    v283 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v283)
      return result;
    v262 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v281 = v77 & v285;
    v258 = v76 & v267;
    v260 = v76 & a8;
    v86 = v269;
LABEL_92:
    v87 = v86 << v265;
    v88 = v86 - v269;
    v277 = v86 * v262;
    v273 = v86 + 1;
    v89 = v267 >= (v86 + 1) << v265;
    v90 = v271;
    if (!v89)
      v90 = v258;
    v91 = v271 - v260;
    if (!v89)
      v91 = v19;
    v92 = v88 << v265;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v260;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v275 = (v93 + v92 - v260) * a11;
    v95 = v279;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      if (v285 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      else
        v98 = a9;
      v99 = v281;
      if (v285 >= v97 << v67)
        v99 = 1 << v67;
      if (v96 >= v15)
        v100 = 0;
      else
        v100 = v85;
      if (v96 < v15)
        v99 = v98;
      if (v84 | v80)
        break;
      v118 = 0;
      v102 = 0;
      v111 = 0;
      v127 = 0;
      if (v99)
        goto LABEL_153;
LABEL_103:
      v95 = v97;
      if (v97 == v283)
      {
        v86 = v273;
        v14 = a8;
        v19 = a10;
        if (v273 == v263)
          return result;
        goto LABEL_92;
      }
    }
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v104 = v83;
    v105 = result;
    v106 = v84;
    v107 = v80;
    do
    {
      v108 = v104;
      if (v108)
        --v106;
      else
        v106 = 0;
      v109 = v101 + v108;
      if (v105)
        --v107;
      else
        v107 = 0;
      if (v105)
        v102 |= (unint64_t)(v103 & ~(-1 << v80)) << v109++;
      v103 *= 2;
      v101 = v109 - 1;
      v105 = v107 != 0;
      v104 = v106 != 0;
    }
    while (v107 | v106);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v83;
    v114 = result;
    v115 = v84;
    v116 = v80;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
        v111 |= (unint64_t)(v112 & ~(-1 << v84)) << v110++;
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v110, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v117 = 0;
    v118 = 0;
    v119 = 1;
    v120 = v83;
    v121 = result;
    v122 = v84;
    v123 = v80;
    do
    {
      v124 = v120;
      if (v124)
        --v122;
      else
        v122 = 0;
      v125 = v117 + v124;
      --v123;
      if (v121)
        v118 |= (unint64_t)(v119 & v100) << v125++;
      else
        v123 = 0;
      v119 *= 2;
      v117 = v125 - 1;
      v121 = v123 != 0;
      v120 = v122 != 0;
    }
    while (v123 | v122);
    v126 = 0;
    v127 = 0;
    v128 = 1;
    v129 = v83;
    v130 = result;
    v131 = v84;
    v132 = v80;
    do
    {
      --v131;
      if (v129)
      {
        v127 |= (unint64_t)(v128 & v93) << v126;
        v133 = v126 + 1;
      }
      else
      {
        v131 = 0;
        v133 = v126;
      }
      if (v130)
        --v132;
      else
        v132 = 0;
      v128 *= 2;
      v126 = (__PAIR64__(v133, v130) - 1) >> 32;
      v130 = v132 != 0;
      v129 = v131 != 0;
    }
    while (v132 | v131);
    v15 = a7;
    if (!v99)
      goto LABEL_103;
LABEL_153:
    if (v94)
    {
      v134 = 0;
      v135 = (__int128 *)((char *)&a2[2 * (v100 + ((v95 - v279) << v67) - v85)] + v275);
      v136 = (v95 + v277) * a12[3] * *((unsigned __int8 *)a12 + 9) + v266;
      do
      {
        v137 = v99;
        v138 = v135;
        v139 = v118;
        do
        {
          v140 = (_OWORD *)(v136 + 32 * (v139 + v127));
          v141 = *v138;
          v142 = v138[1];
          v138 += 2;
          *v140 = v141;
          v140[1] = v142;
          v139 = (v139 - v102) & v102;
          --v137;
        }
        while (v137);
        v127 = (v127 - v111) & v111;
        v135 = (__int128 *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v288);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v252 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v143 = a6 >> v20;
    v144 = 1 << v21;
    v145 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v145 = 0;
    v146 = v144 >= a5;
    if (v144 < a5)
      v147 = v21 + v20 + v145;
    else
      v147 = *((_BYTE *)a12 + 12);
    if (v146)
      LOBYTE(v148) = *((_BYTE *)a12 + 13);
    else
      v148 = -v145;
    if (!v143)
      v21 = v147;
    v246 = v21;
    if (v143)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v148;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v246 = v22;
    v23 = v21 + v20 - v22;
  }
  v149 = v266;
  v151 = a8;
  v150 = a10;
  v245 = v294;
  if (v294)
  {
    v152 = 1 << v23;
    v244 = 1 << v246;
    if (1 << v246 >= a5)
      v153 = a5;
    else
      v153 = 1 << v246;
    v154 = 32 - __clz(v153 - 1);
    v155 = v153 > 1;
    if (v153 <= 1)
      v156 = 0;
    else
      v156 = v154;
    if (v152 >= a6)
      v157 = a6;
    else
      v157 = 1 << v23;
    v158 = 32 - __clz(v157 - 1);
    v159 = v295;
    if (v157 <= 1)
      v158 = 0;
    v278 = v157 > 1;
    v280 = v158;
    v276 = v292;
    v272 = v292 != 0;
    v274 = v293;
    v270 = v293 != 0;
    if (v295)
    {
      v160 = 0;
      v161 = 0;
      v243 = v15 >> v246;
      v264 = a8 >> v23;
      v286 = v296;
      v287 = v291;
      v282 = v293 | v292;
      v242 = a9 + v15;
      v241 = (v244 - 1) & (a9 + v15);
      v240 = v289;
      v284 = v290;
      v239 = (v244 - 1) & v15;
      v259 = (v152 - 1) & a8;
      v261 = (v152 - 1) & (a10 + a8);
      v257 = v152 - v259;
      v162 = ~(-1 << v156);
      v255 = v295;
      v256 = v158 | v156;
      v163 = ~(-1 << v158);
      v268 = v156;
      v248 = 1 << v23;
      v249 = v23;
      do
      {
        v247 = v161;
        v164 = 0;
        v165 = 0;
        v166 = a9;
        if (v242 >= (v160 + v243 + 1) << v246)
          v166 = v244 - v239;
        v167 = 1 << v246;
        if (v242 < (v160 + v243 + 1) << v246)
          v167 = v241;
        v168 = (v160 + v243) << v246 >= v15;
        v169 = v240 + v160;
        v170 = v160 << v246;
        if (v168)
          v171 = v167;
        else
          v171 = v166;
        if (v168)
          v172 = 0;
        else
          v172 = v239;
        v251 = &v252[2 * (v172 + v170)];
        do
        {
          v173 = v284 + v164;
          if (v286)
          {
            v174 = v282;
            if (v282)
            {
              v175 = 0;
              v174 = 0;
              v176 = 1;
              v177 = v270;
              v178 = v272;
              v180 = v274;
              v179 = v276;
              do
              {
                --v179;
                if (v178)
                  v174 |= (v176 & v169) << v175;
                else
                  v179 = 0;
                if (v178)
                  ++v175;
                --v180;
                if (v177)
                  v174 |= (v176 & v173) << v175;
                else
                  v180 = 0;
                if (v177)
                  ++v175;
                v176 *= 2;
                --v175;
                v177 = v180 != 0;
                v178 = v179 != 0;
              }
              while (v180 | v179);
            }
          }
          else
          {
            v174 = v282;
            if (v282)
            {
              v181 = 0;
              v174 = 0;
              v182 = 1;
              v184 = v270;
              v183 = v272;
              v185 = v274;
              v186 = v276;
              do
              {
                --v185;
                if (v184)
                  v174 |= (v182 & v173) << v181;
                else
                  v185 = 0;
                if (v184)
                  ++v181;
                --v186;
                if (v183)
                  v174 |= (v182 & v169) << v181;
                else
                  v186 = 0;
                if (v183)
                  ++v181;
                v182 *= 2;
                --v181;
                v183 = v186 != 0;
                v184 = v185 != 0;
              }
              while (v186 | v185);
            }
          }
          v187 = *(_DWORD *)(v149 + 4 * ((v174 + v287) | ((v174 + v287) >> 8 << 9)));
          if (v187 < 0)
          {
            v188 = v149 - *((_QWORD *)a13 + 3) + ((unint64_t)(v187 & 0x3FFFFFF) << 14);
            result = *a13;
            v189 = a13[2];
            if (result > v189)
            {
              result = get_level_offset_within_tail(result, v189, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v156 = v268;
              v152 = v248;
              v23 = v249;
              v18 = a11;
              v151 = a8;
              v150 = a10;
              v149 = v266;
              v188 += result;
            }
            v190 = (v164 + v264) << v23;
            v191 = v257;
            if (a10 + a8 >= (v164 + v264 + 1) << v23)
            {
              v192 = v152;
            }
            else
            {
              v191 = v150;
              v192 = v261;
            }
            if (v190 >= v151)
              v193 = 0;
            else
              v193 = v259;
            if (v190 >= v151)
              v191 = v192;
            if (!v256)
            {
              v211 = 0;
              v195 = 0;
              v204 = 0;
              v220 = 0;
              v159 = v255;
              if (!v171)
                goto LABEL_198;
LABEL_271:
              if (v191)
              {
                v225 = 0;
                v226 = (__int128 *)((char *)v251 + (v193 + (v164 << v23)) * v18);
                do
                {
                  v227 = v171;
                  v228 = v226;
                  v229 = v211;
                  do
                  {
                    result = v188 + 32 * (v229 + v220);
                    v230 = *v228;
                    v231 = v228[1];
                    v228 += 2;
                    *(_OWORD *)result = v230;
                    *(_OWORD *)(result + 16) = v231;
                    v229 = (v229 - v195) & v195;
                    --v227;
                  }
                  while (v227);
                  v220 = (v220 - v204) & v204;
                  v226 = (__int128 *)((char *)v226 + v18);
                  ++v225;
                }
                while (v225 != v191);
              }
              goto LABEL_198;
            }
            v194 = 0;
            v195 = 0;
            v196 = 1;
            v198 = v278;
            v197 = v280;
            v199 = v155;
            v200 = v156;
            do
            {
              --v197;
              v201 = v198;
              if (!v201)
                v197 = 0;
              v202 = v194 + v201;
              --v200;
              if (v199)
                v195 |= (unint64_t)(v196 & v162) << v202++;
              else
                v200 = 0;
              v196 *= 2;
              v194 = v202 - 1;
              v199 = v200 != 0;
              v198 = v197 != 0;
            }
            while (v200 | v197);
            v203 = 0;
            v204 = 0;
            v205 = 1;
            v207 = v278;
            v206 = v280;
            v208 = v155;
            v209 = v156;
            do
            {
              --v206;
              if (v207)
                v204 |= (unint64_t)(v205 & v163) << v203++;
              else
                v206 = 0;
              --v209;
              if (!v208)
                v209 = 0;
              v205 *= 2;
              v203 = (__PAIR64__(v203, v208) - 1) >> 32;
              v208 = v209 != 0;
              v207 = v206 != 0;
            }
            while (v209 | v206);
            v210 = 0;
            v211 = 0;
            v212 = 1;
            v213 = v278;
            v214 = v280;
            v215 = v155;
            v216 = v156;
            do
            {
              --v214;
              v217 = v213;
              if (!v217)
                v214 = 0;
              v218 = v210 + v217;
              --v216;
              if (v215)
                v211 |= (unint64_t)(v212 & v172) << v218++;
              else
                v216 = 0;
              v212 *= 2;
              v210 = v218 - 1;
              v215 = v216 != 0;
              v213 = v214 != 0;
            }
            while (v216 | v214);
            v219 = 0;
            v220 = 0;
            v221 = 1;
            v222 = v278;
            v223 = v280;
            v224 = v155;
            LODWORD(result) = v156;
            do
            {
              --v223;
              if (v222)
                v220 |= (unint64_t)(v221 & v193) << v219++;
              else
                v223 = 0;
              LODWORD(result) = result - 1;
              if (v224)
                result = result;
              else
                result = 0;
              v221 *= 2;
              v219 = (__PAIR64__(v219, v224) - 1) >> 32;
              v224 = (_DWORD)result != 0;
              v222 = v223 != 0;
            }
            while (result | v223);
            v156 = v268;
            v159 = v255;
            if (v171)
              goto LABEL_271;
          }
LABEL_198:
          v164 = (unsigned __int16)++v165;
        }
        while (v159 > (unsigned __int16)v165);
        v161 = v247 + 1;
        v160 = (unsigned __int16)(v247 + 1);
        v15 = a7;
      }
      while (v245 > v160);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,8ul,8u,(TwiddleOrder)0>>(uint64_t result, __int128 *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  __int128 *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  BOOL v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  __int128 *v135;
  uint64_t v136;
  int v137;
  __int128 *v138;
  uint64_t v139;
  _OWORD *v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  BOOL v147;
  char v148;
  int v149;
  uint64_t v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  BOOL v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  BOOL v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  BOOL v178;
  BOOL v179;
  int v180;
  int v181;
  int v182;
  int v183;
  BOOL v184;
  BOOL v185;
  int v186;
  int v187;
  int v188;
  unint64_t v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  int v194;
  int v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  BOOL v199;
  BOOL v200;
  unsigned int v201;
  int v202;
  int v203;
  unsigned int v204;
  uint64_t v205;
  int v206;
  unsigned int v207;
  BOOL v208;
  BOOL v209;
  unsigned int v210;
  int v211;
  uint64_t v212;
  int v213;
  BOOL v214;
  unsigned int v215;
  BOOL v216;
  unsigned int v217;
  int v218;
  int v219;
  unsigned int v220;
  uint64_t v221;
  int v222;
  BOOL v223;
  unsigned int v224;
  BOOL v225;
  int v226;
  __int128 *v227;
  int v228;
  __int128 *v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  int i;
  int v235;
  __int128 *v236;
  uint64_t v237;
  _OWORD *v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  int v242;
  int v243;
  int v244;
  unsigned int v245;
  unsigned int v246;
  int v247;
  unsigned int v248;
  char v249;
  int v250;
  int v251;
  char v252;
  __int128 *v254;
  __int128 *v255;
  unsigned int v258;
  int v259;
  unsigned int v260;
  int v261;
  int v262;
  uint64_t v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  char v268;
  uint64_t v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  BOOL v273;
  unsigned int v274;
  BOOL v275;
  unsigned int v276;
  int v277;
  uint64_t v278;
  int v279;
  int v280;
  BOOL v281;
  unsigned int v282;
  unsigned int v283;
  int v284;
  int v285;
  unsigned int v286;
  int v287;
  unsigned int v288;
  int v289;
  int v290;
  char v291[16];
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned __int8 v299;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v235 = a9;
        v236 = v13;
        v237 = v47;
        do
        {
          v238 = (_OWORD *)(result + ((v237 + v56) << 6));
          v239 = *v236;
          v240 = v236[1];
          v241 = v236[3];
          v238[2] = v236[2];
          v238[3] = v241;
          *v238 = v239;
          v238[1] = v240;
          v237 = (v237 - v31) & v31;
          v236 += 4;
          --v235;
        }
        while (v235);
        v56 = (v56 - v40) & v40;
        v13 = (__int128 *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v269 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v272 = a8 >> v66;
    v274 = 1 << v66;
    v76 = v69 - 1;
    v270 = a10 + a8;
    v266 = (v69 - 1 + a10 + a8) >> v66;
    v268 = v66;
    if (a8 >> v66 >= v266)
      return result;
    v77 = (1 << v67) - 1;
    v288 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v274;
    if (v274 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v282 = a7 >> v67;
    v286 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v286)
      return result;
    v265 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v284 = v77 & v288;
    v261 = v76 & v270;
    v263 = v76 & a8;
    v86 = v272;
LABEL_92:
    v87 = v86 << v268;
    v88 = v86 - v272;
    v280 = v86 * v265;
    v276 = v86 + 1;
    v89 = v270 >= (v86 + 1) << v268;
    v90 = v274;
    if (!v89)
      v90 = v261;
    v91 = v274 - v263;
    if (!v89)
      v91 = v19;
    v92 = v88 << v268;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v263;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v278 = (v93 + v92 - v263) * a11;
    v95 = v282;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      if (v288 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      else
        v98 = a9;
      v99 = v284;
      if (v288 >= v97 << v67)
        v99 = 1 << v67;
      if (v96 >= v15)
        v100 = 0;
      else
        v100 = v85;
      if (v96 < v15)
        v99 = v98;
      if (v84 | v80)
        break;
      v118 = 0;
      v102 = 0;
      v111 = 0;
      v127 = 0;
      if (v99)
        goto LABEL_153;
LABEL_103:
      v95 = v97;
      if (v97 == v286)
      {
        v86 = v276;
        v14 = a8;
        v19 = a10;
        if (v276 == v266)
          return result;
        goto LABEL_92;
      }
    }
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v104 = v83;
    v105 = result;
    v106 = v84;
    v107 = v80;
    do
    {
      v108 = v104;
      if (v108)
        --v106;
      else
        v106 = 0;
      v109 = v101 + v108;
      if (v105)
        --v107;
      else
        v107 = 0;
      if (v105)
        v102 |= (unint64_t)(v103 & ~(-1 << v80)) << v109++;
      v103 *= 2;
      v101 = v109 - 1;
      v105 = v107 != 0;
      v104 = v106 != 0;
    }
    while (v107 | v106);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v83;
    v114 = result;
    v115 = v84;
    v116 = v80;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
        v111 |= (unint64_t)(v112 & ~(-1 << v84)) << v110++;
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v110, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v117 = 0;
    v118 = 0;
    v119 = 1;
    v120 = v83;
    v121 = result;
    v122 = v84;
    v123 = v80;
    do
    {
      v124 = v120;
      if (v124)
        --v122;
      else
        v122 = 0;
      v125 = v117 + v124;
      --v123;
      if (v121)
        v118 |= (unint64_t)(v119 & v100) << v125++;
      else
        v123 = 0;
      v119 *= 2;
      v117 = v125 - 1;
      v121 = v123 != 0;
      v120 = v122 != 0;
    }
    while (v123 | v122);
    v126 = 0;
    v127 = 0;
    v128 = 1;
    v129 = v83;
    v130 = result;
    v131 = v84;
    v132 = v80;
    do
    {
      --v131;
      if (v129)
      {
        v127 |= (unint64_t)(v128 & v93) << v126;
        v133 = v126 + 1;
      }
      else
      {
        v131 = 0;
        v133 = v126;
      }
      if (v130)
        --v132;
      else
        v132 = 0;
      v128 *= 2;
      v126 = (__PAIR64__(v133, v130) - 1) >> 32;
      v130 = v132 != 0;
      v129 = v131 != 0;
    }
    while (v132 | v131);
    v15 = a7;
    if (!v99)
      goto LABEL_103;
LABEL_153:
    if (v94)
    {
      v134 = 0;
      v135 = (__int128 *)((char *)&a2[4 * (v100 + ((v95 - v282) << v67) - v85)] + v278);
      v136 = (v95 + v280) * a12[3] * *((unsigned __int8 *)a12 + 9) + v269;
      do
      {
        v137 = v99;
        v138 = v135;
        v139 = v118;
        do
        {
          v140 = (_OWORD *)(v136 + ((v139 + v127) << 6));
          v141 = *v138;
          v142 = v138[1];
          v143 = v138[3];
          v140[2] = v138[2];
          v140[3] = v143;
          *v140 = v141;
          v140[1] = v142;
          v139 = (v139 - v102) & v102;
          v138 += 4;
          --v137;
        }
        while (v137);
        v127 = (v127 - v111) & v111;
        v135 = (__int128 *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v291);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v255 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v144 = a6 >> v20;
    v145 = 1 << v21;
    v146 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v146 = 0;
    v147 = v145 >= a5;
    if (v145 < a5)
      v148 = v21 + v20 + v146;
    else
      v148 = *((_BYTE *)a12 + 12);
    if (v147)
      LOBYTE(v149) = *((_BYTE *)a12 + 13);
    else
      v149 = -v146;
    if (!v144)
      v21 = v148;
    v249 = v21;
    if (v144)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v149;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v249 = v22;
    v23 = v21 + v20 - v22;
  }
  v150 = v269;
  v152 = a8;
  v151 = a10;
  v248 = v297;
  if (v297)
  {
    v153 = 1 << v23;
    v247 = 1 << v249;
    if (1 << v249 >= a5)
      v154 = a5;
    else
      v154 = 1 << v249;
    v155 = 32 - __clz(v154 - 1);
    v156 = v154 > 1;
    if (v154 <= 1)
      v157 = 0;
    else
      v157 = v155;
    if (v153 >= a6)
      v158 = a6;
    else
      v158 = 1 << v23;
    v159 = 32 - __clz(v158 - 1);
    v160 = v298;
    if (v158 <= 1)
      v159 = 0;
    v281 = v158 > 1;
    v283 = v159;
    v279 = v295;
    v275 = v295 != 0;
    v277 = v296;
    v273 = v296 != 0;
    if (v298)
    {
      v161 = 0;
      v162 = 0;
      v246 = v15 >> v249;
      v267 = a8 >> v23;
      v289 = v299;
      v290 = v294;
      v285 = v296 | v295;
      v245 = a9 + v15;
      v244 = (v247 - 1) & (a9 + v15);
      v243 = v292;
      v287 = v293;
      v242 = (v247 - 1) & v15;
      v262 = (v153 - 1) & a8;
      v264 = (v153 - 1) & (a10 + a8);
      v260 = v153 - v262;
      v163 = ~(-1 << v157);
      v258 = v298;
      v259 = v159 | v157;
      v164 = ~(-1 << v159);
      v271 = v157;
      v251 = 1 << v23;
      v252 = v23;
      do
      {
        v250 = v162;
        v165 = 0;
        v166 = 0;
        v167 = a9;
        if (v245 >= (v161 + v246 + 1) << v249)
          v167 = v247 - v242;
        v168 = 1 << v249;
        if (v245 < (v161 + v246 + 1) << v249)
          v168 = v244;
        v169 = (v161 + v246) << v249 >= v15;
        v170 = v243 + v161;
        v171 = v161 << v249;
        if (v169)
          v172 = v168;
        else
          v172 = v167;
        if (v169)
          v173 = 0;
        else
          v173 = v242;
        v254 = &v255[4 * (unint64_t)(v173 + v171)];
        do
        {
          v174 = v287 + v165;
          if (v289)
          {
            v175 = v285;
            if (v285)
            {
              v176 = 0;
              v175 = 0;
              v177 = 1;
              v178 = v273;
              v179 = v275;
              v181 = v277;
              v180 = v279;
              do
              {
                --v180;
                if (v179)
                  v175 |= (v177 & v170) << v176;
                else
                  v180 = 0;
                if (v179)
                  ++v176;
                --v181;
                if (v178)
                  v175 |= (v177 & v174) << v176;
                else
                  v181 = 0;
                if (v178)
                  ++v176;
                v177 *= 2;
                --v176;
                v178 = v181 != 0;
                v179 = v180 != 0;
              }
              while (v181 | v180);
            }
          }
          else
          {
            v175 = v285;
            if (v285)
            {
              v182 = 0;
              v175 = 0;
              v183 = 1;
              v185 = v273;
              v184 = v275;
              v186 = v277;
              v187 = v279;
              do
              {
                --v186;
                if (v185)
                  v175 |= (v183 & v174) << v182;
                else
                  v186 = 0;
                if (v185)
                  ++v182;
                --v187;
                if (v184)
                  v175 |= (v183 & v170) << v182;
                else
                  v187 = 0;
                if (v184)
                  ++v182;
                v183 *= 2;
                --v182;
                v184 = v187 != 0;
                v185 = v186 != 0;
              }
              while (v187 | v186);
            }
          }
          v188 = *(_DWORD *)(v150 + 4 * ((v175 + v290) | ((v175 + v290) >> 8 << 9)));
          if (v188 < 0)
          {
            v189 = v150 - *((_QWORD *)a13 + 3) + ((unint64_t)(v188 & 0x3FFFFFF) << 14);
            result = *a13;
            v190 = a13[2];
            if (result > v190)
            {
              result = get_level_offset_within_tail(result, v190, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v157 = v271;
              v153 = v251;
              v23 = v252;
              v18 = a11;
              v152 = a8;
              v151 = a10;
              v150 = v269;
              v189 += result;
            }
            v191 = (v165 + v267) << v23;
            v192 = v260;
            if (a10 + a8 >= (v165 + v267 + 1) << v23)
            {
              v193 = v153;
            }
            else
            {
              v192 = v151;
              v193 = v264;
            }
            if (v191 >= v152)
              v194 = 0;
            else
              v194 = v262;
            if (v191 >= v152)
              v192 = v193;
            if (!v259)
            {
              v212 = 0;
              v196 = 0;
              v205 = 0;
              v221 = 0;
              v160 = v258;
              if (!v172)
                goto LABEL_198;
LABEL_271:
              if (v192)
              {
                v226 = 0;
                v227 = (__int128 *)((char *)v254 + (v194 + (v165 << v23)) * v18);
                do
                {
                  v228 = v172;
                  v229 = v227;
                  v230 = v212;
                  do
                  {
                    result = v189 + ((v230 + v221) << 6);
                    v231 = *v229;
                    v232 = v229[1];
                    v233 = v229[3];
                    *(_OWORD *)(result + 32) = v229[2];
                    *(_OWORD *)(result + 48) = v233;
                    *(_OWORD *)result = v231;
                    *(_OWORD *)(result + 16) = v232;
                    v230 = (v230 - v196) & v196;
                    v229 += 4;
                    --v228;
                  }
                  while (v228);
                  v221 = (v221 - v205) & v205;
                  v227 = (__int128 *)((char *)v227 + v18);
                  ++v226;
                }
                while (v226 != v192);
              }
              goto LABEL_198;
            }
            v195 = 0;
            v196 = 0;
            v197 = 1;
            v199 = v281;
            v198 = v283;
            v200 = v156;
            v201 = v157;
            do
            {
              --v198;
              v202 = v199;
              if (!v202)
                v198 = 0;
              v203 = v195 + v202;
              --v201;
              if (v200)
                v196 |= (unint64_t)(v197 & v163) << v203++;
              else
                v201 = 0;
              v197 *= 2;
              v195 = v203 - 1;
              v200 = v201 != 0;
              v199 = v198 != 0;
            }
            while (v201 | v198);
            v204 = 0;
            v205 = 0;
            v206 = 1;
            v208 = v281;
            v207 = v283;
            v209 = v156;
            v210 = v157;
            do
            {
              --v207;
              if (v208)
                v205 |= (unint64_t)(v206 & v164) << v204++;
              else
                v207 = 0;
              --v210;
              if (!v209)
                v210 = 0;
              v206 *= 2;
              v204 = (__PAIR64__(v204, v209) - 1) >> 32;
              v209 = v210 != 0;
              v208 = v207 != 0;
            }
            while (v210 | v207);
            v211 = 0;
            v212 = 0;
            v213 = 1;
            v214 = v281;
            v215 = v283;
            v216 = v156;
            v217 = v157;
            do
            {
              --v215;
              v218 = v214;
              if (!v218)
                v215 = 0;
              v219 = v211 + v218;
              --v217;
              if (v216)
                v212 |= (unint64_t)(v213 & v173) << v219++;
              else
                v217 = 0;
              v213 *= 2;
              v211 = v219 - 1;
              v216 = v217 != 0;
              v214 = v215 != 0;
            }
            while (v217 | v215);
            v220 = 0;
            v221 = 0;
            v222 = 1;
            v223 = v281;
            v224 = v283;
            v225 = v156;
            LODWORD(result) = v157;
            do
            {
              --v224;
              if (v223)
                v221 |= (unint64_t)(v222 & v194) << v220++;
              else
                v224 = 0;
              LODWORD(result) = result - 1;
              if (v225)
                result = result;
              else
                result = 0;
              v222 *= 2;
              v220 = (__PAIR64__(v220, v225) - 1) >> 32;
              v225 = (_DWORD)result != 0;
              v223 = v224 != 0;
            }
            while (result | v224);
            v157 = v271;
            v160 = v258;
            if (v172)
              goto LABEL_271;
          }
LABEL_198:
          v165 = (unsigned __int16)++v166;
        }
        while (v160 > (unsigned __int16)v166);
        v162 = v250 + 1;
        v161 = (unsigned __int16)(v250 + 1);
        v15 = a7;
      }
      while (v248 > v161);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,2u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, uint64_t a11, unsigned __int16 *a12, uint64_t a13)
{
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  char v20;
  unsigned int v21;
  char v22;
  int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  BOOL v29;
  unsigned int v30;
  BOOL v31;
  char v32;
  char v33;
  int v34;
  char v35;
  unsigned int v36;
  BOOL v37;
  BOOL v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  BOOL v81;
  char v82;
  int v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  BOOL v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  BOOL v111;
  BOOL v112;
  int v113;
  int v114;
  int v115;
  int v116;
  BOOL v117;
  BOOL v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  char v130;
  int v131;
  int v132;
  unsigned int v134;
  unsigned int v135;
  char v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  int v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v155;
  BOOL v156;
  BOOL v157;
  int v158;
  int v159;
  uint64_t v160;
  char v161[16];
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned __int8 v169;

  if (result && a2)
  {
    v16 = a11;
    v17 = a10;
    if (a12)
    {
      v18 = a7;
      v160 = result;
      if (*((_BYTE *)a12 + 20))
      {
        result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), *(_DWORD *)(a13 + 8), *(_DWORD *)(a13 + 12), *(_DWORD *)(a13 + 4), *(_DWORD *)a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v161);
        v19 = *((_BYTE *)a12 + 13);
        v20 = *((_BYTE *)a12 + 12);
        v129 = a2;
        if (1 << v19 >= a6 || a5 >> v20)
        {
          v78 = a6 >> v19;
          v79 = 1 << v20;
          v80 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
          if (a6 < 2)
            v80 = 0;
          v81 = v79 >= a5;
          if (v79 < a5)
            v82 = v20 + v19 + v80;
          else
            v82 = *((_BYTE *)a12 + 12);
          if (v81)
            LOBYTE(v83) = *((_BYTE *)a12 + 13);
          else
            v83 = -v80;
          if (!v78)
            v20 = v82;
          v130 = v20;
          if (v78)
            v22 = *((_BYTE *)a12 + 13);
          else
            v22 = v83;
        }
        else
        {
          v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
          if (a5 < 2)
            LOBYTE(v21) = 0;
          v130 = v21;
          v22 = v20 + v19 - v21;
        }
        v84 = v160;
        v128 = v167;
        if (v167)
        {
          v85 = 1 << v130;
          v86 = 1 << v22;
          v87 = v168;
          v159 = v165;
          v157 = v165 != 0;
          v158 = v166;
          v156 = v166 != 0;
          v127 = 1 << v130;
          if (1 << v130 >= a5)
            v85 = a5;
          v144 = v85;
          v146 = 1 << v22;
          if (v86 >= a6)
            v86 = a6;
          v142 = v86;
          if (v168)
          {
            v88 = 0;
            v89 = 0;
            v140 = a8 >> v22;
            v90 = v163;
            v91 = v164;
            v92 = v169;
            v125 = v162;
            v126 = a7 >> v130;
            v93 = v166 | v165;
            v124 = a9 + a7;
            v138 = a10 + a8;
            do
            {
              v132 = v89;
              v94 = 0;
              v95 = 0;
              v96 = a9;
              if (v124 >= (v88 + v126 + 1) << v130)
                v96 = v127 - ((v127 - 1) & a7);
              v97 = 1 << v130;
              if (v124 < (v88 + v126 + 1) << v130)
                v97 = (v127 - 1) & (a9 + a7);
              v98 = (v88 + v126) << v130 >= v18;
              v99 = v125 + v88;
              v100 = v88 << v130;
              if (v98)
                v101 = v97;
              else
                v101 = v96;
              v102 = (v127 - 1) & a7;
              if (v98)
                v102 = 0;
              v151 = v102;
              v153 = v101;
              v149 = v129 + 8 * (v102 + v100);
              do
              {
                v107 = v90 + v94;
                if (v92)
                {
                  if (!v93)
                    goto LABEL_155;
                  v108 = 0;
                  v109 = 0;
                  v110 = 1;
                  v111 = v156;
                  v112 = v157;
                  v113 = v159;
                  v114 = v158;
                  do
                  {
                    --v113;
                    if (v112)
                      v109 |= (v110 & v99) << v108;
                    else
                      v113 = 0;
                    if (v112)
                      ++v108;
                    --v114;
                    if (v111)
                      v109 |= (v110 & v107) << v108;
                    else
                      v114 = 0;
                    if (v111)
                      ++v108;
                    v110 *= 2;
                    --v108;
                    v111 = v114 != 0;
                    v112 = v113 != 0;
                  }
                  while (v114 | v113);
                }
                else
                {
                  if (!v93)
                  {
LABEL_155:
                    v109 = 0;
                    goto LABEL_156;
                  }
                  v115 = 0;
                  v109 = 0;
                  v116 = 1;
                  v118 = v156;
                  v117 = v157;
                  v119 = v158;
                  v120 = v159;
                  do
                  {
                    --v119;
                    if (v118)
                      v109 |= (v116 & v107) << v115;
                    else
                      v119 = 0;
                    if (v118)
                      ++v115;
                    --v120;
                    if (v117)
                      v109 |= (v116 & v99) << v115;
                    else
                      v120 = 0;
                    if (v117)
                      ++v115;
                    v116 *= 2;
                    --v115;
                    v117 = v120 != 0;
                    v118 = v119 != 0;
                  }
                  while (v120 | v119);
                }
LABEL_156:
                v121 = *(_DWORD *)(v84 + 4 * ((v109 + v91) | ((v109 + v91) >> 8 << 9)));
                if (v121 < 0)
                {
                  v122 = v84 - *(_QWORD *)(a13 + 24) + ((unint64_t)(v121 & 0x3FFFFFF) << 14);
                  v123 = *(_DWORD *)(a13 + 8);
                  if (*(_DWORD *)a13 > v123)
                    v122 += get_level_offset_within_tail(*(_DWORD *)a13, v123, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                  v103 = a10;
                  if (v138 >= (v94 + v140 + 1) << v22)
                    v103 = v146 - ((v146 - 1) & a8);
                  v104 = 1 << v22;
                  if (v138 < (v94 + v140 + 1) << v22)
                    v104 = (v146 - 1) & (a10 + a8);
                  v105 = (v146 - 1) & a8;
                  if ((v94 + v140) << v22 < a8)
                  {
                    v106 = v103;
                  }
                  else
                  {
                    v105 = 0;
                    v106 = v104;
                  }
                  result = agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,2u,(TwiddleOrder)0>>(v122, v149 + (v105 + (v94 << v22)) * a11, v144, v142, v153, v106, a11, v151, v105);
                  v84 = v160;
                }
                v94 = (unsigned __int16)++v95;
              }
              while (v87 > (unsigned __int16)v95);
              v18 = a7;
              v89 = v132 + 1;
              v88 = (unsigned __int16)(v132 + 1);
            }
            while (v128 > v88);
          }
        }
      }
      else
      {
        LOBYTE(v23) = *((_BYTE *)a12 + 13);
        v24 = *((_BYTE *)a12 + 12);
        v25 = 1 << v23;
        v26 = a5 >> v24;
        v27 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
        if (a6 < 2)
          v27 = 0;
        v28 = v24 + v23;
        if (a6 >> v23)
          v29 = 1;
        else
          v29 = 1 << v24 >= a5;
        if (!v29)
        {
          v24 += v23 + v27;
          v23 = -v27;
        }
        v30 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
        if (a5 < 2)
          LOBYTE(v30) = 0;
        v31 = v25 < a6 && v26 == 0;
        if (v31)
          v32 = v30;
        else
          v32 = v24;
        if (v31)
          v33 = v28 - v30;
        else
          v33 = v23;
        v34 = 1 << v33;
        v35 = *((_BYTE *)a12 + 15);
        v36 = 1 << v35;
        if (v35)
          v37 = v36 > a3;
        else
          v37 = 1;
        v38 = v37 || v36 > a4;
        v39 = (~(-1 << v35) + a3) & (-1 << v35);
        if (v38)
          v40 = a3;
        else
          v40 = v39;
        v139 = a8 >> v33;
        v141 = 1 << v33;
        v41 = v34 - 1;
        v136 = v33;
        v137 = a10 + a8;
        v135 = (v34 - 1 + a10 + a8) >> v33;
        if (a8 >> v33 < v135)
        {
          v42 = 1 << v32;
          v43 = a7 >> v32;
          v44 = a9 + a7;
          v45 = (1 << v32) - 1;
          v46 = (v45 + a9 + a7) >> v32;
          if (1 << v32 >= a5)
            v47 = a5;
          else
            v47 = 1 << v32;
          v48 = 1 << v33;
          if (v141 >= a6)
            v48 = a6;
          v29 = v46 >= v43;
          v49 = v46 - v43;
          if (v49 != 0 && v29)
          {
            v50 = v45 & a7;
            v51 = v45 & v44;
            v52 = v42 - v50;
            v131 = v41 & v137;
            v145 = v41 & a8;
            v53 = v139;
            v134 = (v40 + ~(-1 << v32)) >> v32;
            v54 = v43 + v134 * v139;
            v155 = v47;
            v150 = v49;
            v152 = v48;
            v148 = v45 & v44;
            v147 = v42 - v50;
            do
            {
              v55 = v53 << v136;
              v56 = v53 + 1;
              if (v137 >= (v53 + 1) << v136)
                v57 = v141;
              else
                v57 = v131;
              if (v137 >= v56 << v136)
                v58 = v141 - v145;
              else
                v58 = v17;
              v59 = (v53 - v139) << v136;
              v143 = v56;
              if (v55 >= a8)
              {
                v69 = 0;
                v70 = (v59 - v145) * v16;
                do
                {
                  v71 = (v43 + v69) << v32;
                  v72 = (v43 + v69 + 1) << v32;
                  v73 = v44 >= v72;
                  if (v44 >= v72)
                    v74 = v52;
                  else
                    v74 = a9;
                  if (v73)
                    v75 = v42;
                  else
                    v75 = v51;
                  if (v71 >= a7)
                    v76 = 0;
                  else
                    v76 = v50;
                  if (v71 >= a7)
                    v77 = v75;
                  else
                    v77 = v74;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,2u,(TwiddleOrder)0>>((v54 + v69) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, a2 + 8 * ((v76 + (v69 << v32)) - v50) + v70, v155, v152, v77, v57, v16, v76, 0);
                  v52 = v147;
                  v51 = v148;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v160;
                  ++v69;
                }
                while (v150 != v69);
              }
              else
              {
                v60 = 0;
                v61 = ((v145 + v59) - v145) * v16;
                do
                {
                  v62 = (v43 + v60) << v32;
                  v63 = (v43 + v60 + 1) << v32;
                  v64 = v44 >= v63;
                  if (v44 >= v63)
                    v65 = v52;
                  else
                    v65 = a9;
                  if (v64)
                    v66 = v42;
                  else
                    v66 = v51;
                  if (v62 >= a7)
                    v67 = 0;
                  else
                    v67 = v50;
                  if (v62 >= a7)
                    v68 = v66;
                  else
                    v68 = v65;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,2u,(TwiddleOrder)0>>((v54 + v60) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, a2 + 8 * ((v67 + (v60 << v32)) - v50) + v61, v155, v152, v68, v58, v16, v67, v145);
                  v52 = v147;
                  v51 = v148;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v160;
                  ++v60;
                }
                while (v150 != v60);
              }
              v54 += v134;
              v53 = v143;
              v17 = a10;
            }
            while (v143 != v135);
          }
        }
      }
    }
    else
    {
      return agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,2u,(TwiddleOrder)0>>(result, a2, a5, a6, a9, a10, a11, a7, a8);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,4u,(TwiddleOrder)0>>(uint64_t result, __int128 *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  __int128 *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  BOOL v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  __int128 *v135;
  uint64_t v136;
  int v137;
  __int128 *v138;
  uint64_t v139;
  __int128 v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  BOOL v144;
  char v145;
  int v146;
  uint64_t v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  BOOL v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  BOOL v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  BOOL v175;
  BOOL v176;
  int v177;
  int v178;
  int v179;
  int v180;
  BOOL v181;
  BOOL v182;
  int v183;
  int v184;
  int v185;
  unint64_t v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  int v191;
  int v192;
  uint64_t v193;
  int v194;
  unsigned int v195;
  BOOL v196;
  BOOL v197;
  unsigned int v198;
  int v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  int v203;
  unsigned int v204;
  BOOL v205;
  BOOL v206;
  unsigned int v207;
  int v208;
  uint64_t v209;
  int v210;
  BOOL v211;
  unsigned int v212;
  BOOL v213;
  unsigned int v214;
  int v215;
  int v216;
  unsigned int v217;
  uint64_t v218;
  int v219;
  BOOL v220;
  unsigned int v221;
  BOOL v222;
  int v223;
  __int128 *v224;
  int v225;
  __int128 *v226;
  uint64_t v227;
  __int128 v228;
  int i;
  int v230;
  __int128 *v231;
  uint64_t v232;
  __int128 v233;
  int v234;
  int v235;
  int v236;
  unsigned int v237;
  unsigned int v238;
  int v239;
  unsigned int v240;
  char v241;
  int v242;
  int v243;
  char v244;
  __int128 *v246;
  __int128 *v247;
  unsigned int v250;
  int v251;
  unsigned int v252;
  int v253;
  int v254;
  uint64_t v255;
  int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  char v260;
  uint64_t v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  BOOL v265;
  unsigned int v266;
  BOOL v267;
  unsigned int v268;
  int v269;
  uint64_t v270;
  int v271;
  int v272;
  BOOL v273;
  unsigned int v274;
  unsigned int v275;
  int v276;
  int v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  int v281;
  int v282;
  char v283[16];
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned __int8 v291;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v230 = a9;
        v231 = v13;
        v232 = v47;
        do
        {
          v233 = *v231++;
          *(_OWORD *)(result + 16 * (v232 + v56)) = v233;
          v232 = (v232 - v31) & v31;
          --v230;
        }
        while (v230);
        v56 = (v56 - v40) & v40;
        v13 = (__int128 *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v261 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v264 = a8 >> v66;
    v266 = 1 << v66;
    v76 = v69 - 1;
    v262 = a10 + a8;
    v258 = (v69 - 1 + a10 + a8) >> v66;
    v260 = v66;
    if (a8 >> v66 >= v258)
      return result;
    v77 = (1 << v67) - 1;
    v280 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v266;
    if (v266 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v274 = a7 >> v67;
    v278 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v278)
      return result;
    v257 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v276 = v77 & v280;
    v253 = v76 & v262;
    v255 = v76 & a8;
    v86 = v264;
LABEL_92:
    v87 = v86 << v260;
    v88 = v86 - v264;
    v272 = v86 * v257;
    v268 = v86 + 1;
    v89 = v262 >= (v86 + 1) << v260;
    v90 = v266;
    if (!v89)
      v90 = v253;
    v91 = v266 - v255;
    if (!v89)
      v91 = v19;
    v92 = v88 << v260;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v255;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v270 = (v93 + v92 - v255) * a11;
    v95 = v274;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      if (v280 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      else
        v98 = a9;
      v99 = v276;
      if (v280 >= v97 << v67)
        v99 = 1 << v67;
      if (v96 >= v15)
        v100 = 0;
      else
        v100 = v85;
      if (v96 < v15)
        v99 = v98;
      if (v84 | v80)
        break;
      v118 = 0;
      v102 = 0;
      v111 = 0;
      v127 = 0;
      if (v99)
        goto LABEL_153;
LABEL_103:
      v95 = v97;
      if (v97 == v278)
      {
        v86 = v268;
        v14 = a8;
        v19 = a10;
        if (v268 == v258)
          return result;
        goto LABEL_92;
      }
    }
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v104 = v83;
    v105 = result;
    v106 = v84;
    v107 = v80;
    do
    {
      v108 = v104;
      if (v108)
        --v106;
      else
        v106 = 0;
      v109 = v101 + v108;
      if (v105)
        --v107;
      else
        v107 = 0;
      if (v105)
        v102 |= (unint64_t)(v103 & ~(-1 << v80)) << v109++;
      v103 *= 2;
      v101 = v109 - 1;
      v105 = v107 != 0;
      v104 = v106 != 0;
    }
    while (v107 | v106);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v83;
    v114 = result;
    v115 = v84;
    v116 = v80;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
        v111 |= (unint64_t)(v112 & ~(-1 << v84)) << v110++;
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v110, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v117 = 0;
    v118 = 0;
    v119 = 1;
    v120 = v83;
    v121 = result;
    v122 = v84;
    v123 = v80;
    do
    {
      v124 = v120;
      if (v124)
        --v122;
      else
        v122 = 0;
      v125 = v117 + v124;
      --v123;
      if (v121)
        v118 |= (unint64_t)(v119 & v100) << v125++;
      else
        v123 = 0;
      v119 *= 2;
      v117 = v125 - 1;
      v121 = v123 != 0;
      v120 = v122 != 0;
    }
    while (v123 | v122);
    v126 = 0;
    v127 = 0;
    v128 = 1;
    v129 = v83;
    v130 = result;
    v131 = v84;
    v132 = v80;
    do
    {
      --v131;
      if (v129)
      {
        v127 |= (unint64_t)(v128 & v93) << v126;
        v133 = v126 + 1;
      }
      else
      {
        v131 = 0;
        v133 = v126;
      }
      if (v130)
        --v132;
      else
        v132 = 0;
      v128 *= 2;
      v126 = (__PAIR64__(v133, v130) - 1) >> 32;
      v130 = v132 != 0;
      v129 = v131 != 0;
    }
    while (v132 | v131);
    v15 = a7;
    if (!v99)
      goto LABEL_103;
LABEL_153:
    if (v94)
    {
      v134 = 0;
      v135 = (__int128 *)((char *)&a2[v100 + ((v95 - v274) << v67) - v85] + v270);
      v136 = (v95 + v272) * a12[3] * *((unsigned __int8 *)a12 + 9) + v261;
      do
      {
        v137 = v99;
        v138 = v135;
        v139 = v118;
        do
        {
          v140 = *v138++;
          *(_OWORD *)(v136 + 16 * (v139 + v127)) = v140;
          v139 = (v139 - v102) & v102;
          --v137;
        }
        while (v137);
        v127 = (v127 - v111) & v111;
        v135 = (__int128 *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v283);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v247 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v141 = a6 >> v20;
    v142 = 1 << v21;
    v143 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v143 = 0;
    v144 = v142 >= a5;
    if (v142 < a5)
      v145 = v21 + v20 + v143;
    else
      v145 = *((_BYTE *)a12 + 12);
    if (v144)
      LOBYTE(v146) = *((_BYTE *)a12 + 13);
    else
      v146 = -v143;
    if (!v141)
      v21 = v145;
    v241 = v21;
    if (v141)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v146;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v241 = v22;
    v23 = v21 + v20 - v22;
  }
  v147 = v261;
  v149 = a8;
  v148 = a10;
  v240 = v289;
  if (v289)
  {
    v150 = 1 << v23;
    v239 = 1 << v241;
    if (1 << v241 >= a5)
      v151 = a5;
    else
      v151 = 1 << v241;
    v152 = 32 - __clz(v151 - 1);
    v153 = v151 > 1;
    if (v151 <= 1)
      v154 = 0;
    else
      v154 = v152;
    if (v150 >= a6)
      v155 = a6;
    else
      v155 = 1 << v23;
    v156 = 32 - __clz(v155 - 1);
    v157 = v290;
    if (v155 <= 1)
      v156 = 0;
    v273 = v155 > 1;
    v275 = v156;
    v271 = v287;
    v267 = v287 != 0;
    v269 = v288;
    v265 = v288 != 0;
    if (v290)
    {
      v158 = 0;
      v159 = 0;
      v238 = v15 >> v241;
      v259 = a8 >> v23;
      v281 = v291;
      v282 = v286;
      v277 = v288 | v287;
      v237 = a9 + v15;
      v236 = (v239 - 1) & (a9 + v15);
      v235 = v284;
      v279 = v285;
      v234 = (v239 - 1) & v15;
      v254 = (v150 - 1) & a8;
      v256 = (v150 - 1) & (a10 + a8);
      v252 = v150 - v254;
      v160 = ~(-1 << v154);
      v250 = v290;
      v251 = v156 | v154;
      v161 = ~(-1 << v156);
      v263 = v154;
      v243 = 1 << v23;
      v244 = v23;
      do
      {
        v242 = v159;
        v162 = 0;
        v163 = 0;
        v164 = a9;
        if (v237 >= (v158 + v238 + 1) << v241)
          v164 = v239 - v234;
        v165 = 1 << v241;
        if (v237 < (v158 + v238 + 1) << v241)
          v165 = v236;
        v166 = (v158 + v238) << v241 >= v15;
        v167 = v235 + v158;
        v168 = v158 << v241;
        if (v166)
          v169 = v165;
        else
          v169 = v164;
        if (v166)
          v170 = 0;
        else
          v170 = v234;
        v246 = &v247[v170 + v168];
        do
        {
          v171 = v279 + v162;
          if (v281)
          {
            v172 = v277;
            if (v277)
            {
              v173 = 0;
              v172 = 0;
              v174 = 1;
              v175 = v265;
              v176 = v267;
              v178 = v269;
              v177 = v271;
              do
              {
                --v177;
                if (v176)
                  v172 |= (v174 & v167) << v173;
                else
                  v177 = 0;
                if (v176)
                  ++v173;
                --v178;
                if (v175)
                  v172 |= (v174 & v171) << v173;
                else
                  v178 = 0;
                if (v175)
                  ++v173;
                v174 *= 2;
                --v173;
                v175 = v178 != 0;
                v176 = v177 != 0;
              }
              while (v178 | v177);
            }
          }
          else
          {
            v172 = v277;
            if (v277)
            {
              v179 = 0;
              v172 = 0;
              v180 = 1;
              v182 = v265;
              v181 = v267;
              v183 = v269;
              v184 = v271;
              do
              {
                --v183;
                if (v182)
                  v172 |= (v180 & v171) << v179;
                else
                  v183 = 0;
                if (v182)
                  ++v179;
                --v184;
                if (v181)
                  v172 |= (v180 & v167) << v179;
                else
                  v184 = 0;
                if (v181)
                  ++v179;
                v180 *= 2;
                --v179;
                v181 = v184 != 0;
                v182 = v183 != 0;
              }
              while (v184 | v183);
            }
          }
          v185 = *(_DWORD *)(v147 + 4 * ((v172 + v282) | ((v172 + v282) >> 8 << 9)));
          if (v185 < 0)
          {
            v186 = v147 - *((_QWORD *)a13 + 3) + ((unint64_t)(v185 & 0x3FFFFFF) << 14);
            result = *a13;
            v187 = a13[2];
            if (result > v187)
            {
              result = get_level_offset_within_tail(result, v187, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v154 = v263;
              v150 = v243;
              v23 = v244;
              v18 = a11;
              v149 = a8;
              v148 = a10;
              v147 = v261;
              v186 += result;
            }
            v188 = (v162 + v259) << v23;
            v189 = v252;
            if (a10 + a8 >= (v162 + v259 + 1) << v23)
            {
              v190 = v150;
            }
            else
            {
              v189 = v148;
              v190 = v256;
            }
            if (v188 >= v149)
              v191 = 0;
            else
              v191 = v254;
            if (v188 >= v149)
              v189 = v190;
            if (!v251)
            {
              v209 = 0;
              v193 = 0;
              v202 = 0;
              v218 = 0;
              v157 = v250;
              if (!v169)
                goto LABEL_198;
LABEL_271:
              if (v189)
              {
                v223 = 0;
                v224 = (__int128 *)((char *)v246 + (v191 + (v162 << v23)) * v18);
                do
                {
                  v225 = v169;
                  v226 = v224;
                  v227 = v209;
                  do
                  {
                    result = v227 + v218;
                    v228 = *v226++;
                    *(_OWORD *)(v186 + 16 * (v227 + v218)) = v228;
                    v227 = (v227 - v193) & v193;
                    --v225;
                  }
                  while (v225);
                  v218 = (v218 - v202) & v202;
                  v224 = (__int128 *)((char *)v224 + v18);
                  ++v223;
                }
                while (v223 != v189);
              }
              goto LABEL_198;
            }
            v192 = 0;
            v193 = 0;
            v194 = 1;
            v196 = v273;
            v195 = v275;
            v197 = v153;
            v198 = v154;
            do
            {
              --v195;
              v199 = v196;
              if (!v199)
                v195 = 0;
              v200 = v192 + v199;
              --v198;
              if (v197)
                v193 |= (unint64_t)(v194 & v160) << v200++;
              else
                v198 = 0;
              v194 *= 2;
              v192 = v200 - 1;
              v197 = v198 != 0;
              v196 = v195 != 0;
            }
            while (v198 | v195);
            v201 = 0;
            v202 = 0;
            v203 = 1;
            v205 = v273;
            v204 = v275;
            v206 = v153;
            v207 = v154;
            do
            {
              --v204;
              if (v205)
                v202 |= (unint64_t)(v203 & v161) << v201++;
              else
                v204 = 0;
              --v207;
              if (!v206)
                v207 = 0;
              v203 *= 2;
              v201 = (__PAIR64__(v201, v206) - 1) >> 32;
              v206 = v207 != 0;
              v205 = v204 != 0;
            }
            while (v207 | v204);
            v208 = 0;
            v209 = 0;
            v210 = 1;
            v211 = v273;
            v212 = v275;
            v213 = v153;
            v214 = v154;
            do
            {
              --v212;
              v215 = v211;
              if (!v215)
                v212 = 0;
              v216 = v208 + v215;
              --v214;
              if (v213)
                v209 |= (unint64_t)(v210 & v170) << v216++;
              else
                v214 = 0;
              v210 *= 2;
              v208 = v216 - 1;
              v213 = v214 != 0;
              v211 = v212 != 0;
            }
            while (v214 | v212);
            v217 = 0;
            v218 = 0;
            v219 = 1;
            v220 = v273;
            v221 = v275;
            v222 = v153;
            LODWORD(result) = v154;
            do
            {
              --v221;
              if (v220)
                v218 |= (unint64_t)(v219 & v191) << v217++;
              else
                v221 = 0;
              LODWORD(result) = result - 1;
              if (v222)
                result = result;
              else
                result = 0;
              v219 *= 2;
              v217 = (__PAIR64__(v217, v222) - 1) >> 32;
              v222 = (_DWORD)result != 0;
              v220 = v221 != 0;
            }
            while (result | v221);
            v154 = v263;
            v157 = v250;
            if (v169)
              goto LABEL_271;
          }
LABEL_198:
          v162 = (unsigned __int16)++v163;
        }
        while (v157 > (unsigned __int16)v163);
        v159 = v242 + 1;
        v158 = (unsigned __int16)(v242 + 1);
        v15 = a7;
      }
      while (v240 > v158);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,8u,(TwiddleOrder)0>>(uint64_t result, __int128 *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  __int128 *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  BOOL v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  __int128 *v135;
  uint64_t v136;
  int v137;
  __int128 *v138;
  uint64_t v139;
  _OWORD *v140;
  __int128 v141;
  __int128 v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  BOOL v146;
  char v147;
  int v148;
  uint64_t v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  BOOL v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  BOOL v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  BOOL v177;
  BOOL v178;
  int v179;
  int v180;
  int v181;
  int v182;
  BOOL v183;
  BOOL v184;
  int v185;
  int v186;
  int v187;
  unint64_t v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  int v193;
  int v194;
  uint64_t v195;
  int v196;
  unsigned int v197;
  BOOL v198;
  BOOL v199;
  unsigned int v200;
  int v201;
  int v202;
  unsigned int v203;
  uint64_t v204;
  int v205;
  unsigned int v206;
  BOOL v207;
  BOOL v208;
  unsigned int v209;
  int v210;
  uint64_t v211;
  int v212;
  BOOL v213;
  unsigned int v214;
  BOOL v215;
  unsigned int v216;
  int v217;
  int v218;
  unsigned int v219;
  uint64_t v220;
  int v221;
  BOOL v222;
  unsigned int v223;
  BOOL v224;
  int v225;
  __int128 *v226;
  int v227;
  __int128 *v228;
  uint64_t v229;
  __int128 v230;
  __int128 v231;
  int i;
  int v233;
  __int128 *v234;
  uint64_t v235;
  _OWORD *v236;
  __int128 v237;
  __int128 v238;
  int v239;
  int v240;
  int v241;
  unsigned int v242;
  unsigned int v243;
  int v244;
  unsigned int v245;
  char v246;
  int v247;
  int v248;
  char v249;
  __int128 *v251;
  __int128 *v252;
  unsigned int v255;
  int v256;
  unsigned int v257;
  int v258;
  int v259;
  uint64_t v260;
  int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  char v265;
  uint64_t v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  BOOL v270;
  unsigned int v271;
  BOOL v272;
  unsigned int v273;
  int v274;
  uint64_t v275;
  int v276;
  int v277;
  BOOL v278;
  unsigned int v279;
  unsigned int v280;
  int v281;
  int v282;
  unsigned int v283;
  int v284;
  unsigned int v285;
  int v286;
  int v287;
  char v288[16];
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned __int8 v296;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v233 = a9;
        v234 = v13;
        v235 = v47;
        do
        {
          v236 = (_OWORD *)(result + 32 * (v235 + v56));
          v237 = *v234;
          v238 = v234[1];
          v234 += 2;
          *v236 = v237;
          v236[1] = v238;
          v235 = (v235 - v31) & v31;
          --v233;
        }
        while (v233);
        v56 = (v56 - v40) & v40;
        v13 = (__int128 *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v266 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v269 = a8 >> v66;
    v271 = 1 << v66;
    v76 = v69 - 1;
    v267 = a10 + a8;
    v263 = (v69 - 1 + a10 + a8) >> v66;
    v265 = v66;
    if (a8 >> v66 >= v263)
      return result;
    v77 = (1 << v67) - 1;
    v285 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v271;
    if (v271 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v279 = a7 >> v67;
    v283 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v283)
      return result;
    v262 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v281 = v77 & v285;
    v258 = v76 & v267;
    v260 = v76 & a8;
    v86 = v269;
LABEL_92:
    v87 = v86 << v265;
    v88 = v86 - v269;
    v277 = v86 * v262;
    v273 = v86 + 1;
    v89 = v267 >= (v86 + 1) << v265;
    v90 = v271;
    if (!v89)
      v90 = v258;
    v91 = v271 - v260;
    if (!v89)
      v91 = v19;
    v92 = v88 << v265;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v260;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v275 = (v93 + v92 - v260) * a11;
    v95 = v279;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      if (v285 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      else
        v98 = a9;
      v99 = v281;
      if (v285 >= v97 << v67)
        v99 = 1 << v67;
      if (v96 >= v15)
        v100 = 0;
      else
        v100 = v85;
      if (v96 < v15)
        v99 = v98;
      if (v84 | v80)
        break;
      v118 = 0;
      v102 = 0;
      v111 = 0;
      v127 = 0;
      if (v99)
        goto LABEL_153;
LABEL_103:
      v95 = v97;
      if (v97 == v283)
      {
        v86 = v273;
        v14 = a8;
        v19 = a10;
        if (v273 == v263)
          return result;
        goto LABEL_92;
      }
    }
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v104 = v83;
    v105 = result;
    v106 = v84;
    v107 = v80;
    do
    {
      v108 = v104;
      if (v108)
        --v106;
      else
        v106 = 0;
      v109 = v101 + v108;
      if (v105)
        --v107;
      else
        v107 = 0;
      if (v105)
        v102 |= (unint64_t)(v103 & ~(-1 << v80)) << v109++;
      v103 *= 2;
      v101 = v109 - 1;
      v105 = v107 != 0;
      v104 = v106 != 0;
    }
    while (v107 | v106);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v83;
    v114 = result;
    v115 = v84;
    v116 = v80;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
        v111 |= (unint64_t)(v112 & ~(-1 << v84)) << v110++;
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v110, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v117 = 0;
    v118 = 0;
    v119 = 1;
    v120 = v83;
    v121 = result;
    v122 = v84;
    v123 = v80;
    do
    {
      v124 = v120;
      if (v124)
        --v122;
      else
        v122 = 0;
      v125 = v117 + v124;
      --v123;
      if (v121)
        v118 |= (unint64_t)(v119 & v100) << v125++;
      else
        v123 = 0;
      v119 *= 2;
      v117 = v125 - 1;
      v121 = v123 != 0;
      v120 = v122 != 0;
    }
    while (v123 | v122);
    v126 = 0;
    v127 = 0;
    v128 = 1;
    v129 = v83;
    v130 = result;
    v131 = v84;
    v132 = v80;
    do
    {
      --v131;
      if (v129)
      {
        v127 |= (unint64_t)(v128 & v93) << v126;
        v133 = v126 + 1;
      }
      else
      {
        v131 = 0;
        v133 = v126;
      }
      if (v130)
        --v132;
      else
        v132 = 0;
      v128 *= 2;
      v126 = (__PAIR64__(v133, v130) - 1) >> 32;
      v130 = v132 != 0;
      v129 = v131 != 0;
    }
    while (v132 | v131);
    v15 = a7;
    if (!v99)
      goto LABEL_103;
LABEL_153:
    if (v94)
    {
      v134 = 0;
      v135 = (__int128 *)((char *)&a2[2 * (v100 + ((v95 - v279) << v67) - v85)] + v275);
      v136 = (v95 + v277) * a12[3] * *((unsigned __int8 *)a12 + 9) + v266;
      do
      {
        v137 = v99;
        v138 = v135;
        v139 = v118;
        do
        {
          v140 = (_OWORD *)(v136 + 32 * (v139 + v127));
          v141 = *v138;
          v142 = v138[1];
          v138 += 2;
          *v140 = v141;
          v140[1] = v142;
          v139 = (v139 - v102) & v102;
          --v137;
        }
        while (v137);
        v127 = (v127 - v111) & v111;
        v135 = (__int128 *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v288);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v252 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v143 = a6 >> v20;
    v144 = 1 << v21;
    v145 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v145 = 0;
    v146 = v144 >= a5;
    if (v144 < a5)
      v147 = v21 + v20 + v145;
    else
      v147 = *((_BYTE *)a12 + 12);
    if (v146)
      LOBYTE(v148) = *((_BYTE *)a12 + 13);
    else
      v148 = -v145;
    if (!v143)
      v21 = v147;
    v246 = v21;
    if (v143)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v148;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v246 = v22;
    v23 = v21 + v20 - v22;
  }
  v149 = v266;
  v151 = a8;
  v150 = a10;
  v245 = v294;
  if (v294)
  {
    v152 = 1 << v23;
    v244 = 1 << v246;
    if (1 << v246 >= a5)
      v153 = a5;
    else
      v153 = 1 << v246;
    v154 = 32 - __clz(v153 - 1);
    v155 = v153 > 1;
    if (v153 <= 1)
      v156 = 0;
    else
      v156 = v154;
    if (v152 >= a6)
      v157 = a6;
    else
      v157 = 1 << v23;
    v158 = 32 - __clz(v157 - 1);
    v159 = v295;
    if (v157 <= 1)
      v158 = 0;
    v278 = v157 > 1;
    v280 = v158;
    v276 = v292;
    v272 = v292 != 0;
    v274 = v293;
    v270 = v293 != 0;
    if (v295)
    {
      v160 = 0;
      v161 = 0;
      v243 = v15 >> v246;
      v264 = a8 >> v23;
      v286 = v296;
      v287 = v291;
      v282 = v293 | v292;
      v242 = a9 + v15;
      v241 = (v244 - 1) & (a9 + v15);
      v240 = v289;
      v284 = v290;
      v239 = (v244 - 1) & v15;
      v259 = (v152 - 1) & a8;
      v261 = (v152 - 1) & (a10 + a8);
      v257 = v152 - v259;
      v162 = ~(-1 << v156);
      v255 = v295;
      v256 = v158 | v156;
      v163 = ~(-1 << v158);
      v268 = v156;
      v248 = 1 << v23;
      v249 = v23;
      do
      {
        v247 = v161;
        v164 = 0;
        v165 = 0;
        v166 = a9;
        if (v242 >= (v160 + v243 + 1) << v246)
          v166 = v244 - v239;
        v167 = 1 << v246;
        if (v242 < (v160 + v243 + 1) << v246)
          v167 = v241;
        v168 = (v160 + v243) << v246 >= v15;
        v169 = v240 + v160;
        v170 = v160 << v246;
        if (v168)
          v171 = v167;
        else
          v171 = v166;
        if (v168)
          v172 = 0;
        else
          v172 = v239;
        v251 = &v252[2 * (v172 + v170)];
        do
        {
          v173 = v284 + v164;
          if (v286)
          {
            v174 = v282;
            if (v282)
            {
              v175 = 0;
              v174 = 0;
              v176 = 1;
              v177 = v270;
              v178 = v272;
              v180 = v274;
              v179 = v276;
              do
              {
                --v179;
                if (v178)
                  v174 |= (v176 & v169) << v175;
                else
                  v179 = 0;
                if (v178)
                  ++v175;
                --v180;
                if (v177)
                  v174 |= (v176 & v173) << v175;
                else
                  v180 = 0;
                if (v177)
                  ++v175;
                v176 *= 2;
                --v175;
                v177 = v180 != 0;
                v178 = v179 != 0;
              }
              while (v180 | v179);
            }
          }
          else
          {
            v174 = v282;
            if (v282)
            {
              v181 = 0;
              v174 = 0;
              v182 = 1;
              v184 = v270;
              v183 = v272;
              v185 = v274;
              v186 = v276;
              do
              {
                --v185;
                if (v184)
                  v174 |= (v182 & v173) << v181;
                else
                  v185 = 0;
                if (v184)
                  ++v181;
                --v186;
                if (v183)
                  v174 |= (v182 & v169) << v181;
                else
                  v186 = 0;
                if (v183)
                  ++v181;
                v182 *= 2;
                --v181;
                v183 = v186 != 0;
                v184 = v185 != 0;
              }
              while (v186 | v185);
            }
          }
          v187 = *(_DWORD *)(v149 + 4 * ((v174 + v287) | ((v174 + v287) >> 8 << 9)));
          if (v187 < 0)
          {
            v188 = v149 - *((_QWORD *)a13 + 3) + ((unint64_t)(v187 & 0x3FFFFFF) << 14);
            result = *a13;
            v189 = a13[2];
            if (result > v189)
            {
              result = get_level_offset_within_tail(result, v189, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v156 = v268;
              v152 = v248;
              v23 = v249;
              v18 = a11;
              v151 = a8;
              v150 = a10;
              v149 = v266;
              v188 += result;
            }
            v190 = (v164 + v264) << v23;
            v191 = v257;
            if (a10 + a8 >= (v164 + v264 + 1) << v23)
            {
              v192 = v152;
            }
            else
            {
              v191 = v150;
              v192 = v261;
            }
            if (v190 >= v151)
              v193 = 0;
            else
              v193 = v259;
            if (v190 >= v151)
              v191 = v192;
            if (!v256)
            {
              v211 = 0;
              v195 = 0;
              v204 = 0;
              v220 = 0;
              v159 = v255;
              if (!v171)
                goto LABEL_198;
LABEL_271:
              if (v191)
              {
                v225 = 0;
                v226 = (__int128 *)((char *)v251 + (v193 + (v164 << v23)) * v18);
                do
                {
                  v227 = v171;
                  v228 = v226;
                  v229 = v211;
                  do
                  {
                    result = v188 + 32 * (v229 + v220);
                    v230 = *v228;
                    v231 = v228[1];
                    v228 += 2;
                    *(_OWORD *)result = v230;
                    *(_OWORD *)(result + 16) = v231;
                    v229 = (v229 - v195) & v195;
                    --v227;
                  }
                  while (v227);
                  v220 = (v220 - v204) & v204;
                  v226 = (__int128 *)((char *)v226 + v18);
                  ++v225;
                }
                while (v225 != v191);
              }
              goto LABEL_198;
            }
            v194 = 0;
            v195 = 0;
            v196 = 1;
            v198 = v278;
            v197 = v280;
            v199 = v155;
            v200 = v156;
            do
            {
              --v197;
              v201 = v198;
              if (!v201)
                v197 = 0;
              v202 = v194 + v201;
              --v200;
              if (v199)
                v195 |= (unint64_t)(v196 & v162) << v202++;
              else
                v200 = 0;
              v196 *= 2;
              v194 = v202 - 1;
              v199 = v200 != 0;
              v198 = v197 != 0;
            }
            while (v200 | v197);
            v203 = 0;
            v204 = 0;
            v205 = 1;
            v207 = v278;
            v206 = v280;
            v208 = v155;
            v209 = v156;
            do
            {
              --v206;
              if (v207)
                v204 |= (unint64_t)(v205 & v163) << v203++;
              else
                v206 = 0;
              --v209;
              if (!v208)
                v209 = 0;
              v205 *= 2;
              v203 = (__PAIR64__(v203, v208) - 1) >> 32;
              v208 = v209 != 0;
              v207 = v206 != 0;
            }
            while (v209 | v206);
            v210 = 0;
            v211 = 0;
            v212 = 1;
            v213 = v278;
            v214 = v280;
            v215 = v155;
            v216 = v156;
            do
            {
              --v214;
              v217 = v213;
              if (!v217)
                v214 = 0;
              v218 = v210 + v217;
              --v216;
              if (v215)
                v211 |= (unint64_t)(v212 & v172) << v218++;
              else
                v216 = 0;
              v212 *= 2;
              v210 = v218 - 1;
              v215 = v216 != 0;
              v213 = v214 != 0;
            }
            while (v216 | v214);
            v219 = 0;
            v220 = 0;
            v221 = 1;
            v222 = v278;
            v223 = v280;
            v224 = v155;
            LODWORD(result) = v156;
            do
            {
              --v223;
              if (v222)
                v220 |= (unint64_t)(v221 & v193) << v219++;
              else
                v223 = 0;
              LODWORD(result) = result - 1;
              if (v224)
                result = result;
              else
                result = 0;
              v221 *= 2;
              v219 = (__PAIR64__(v219, v224) - 1) >> 32;
              v224 = (_DWORD)result != 0;
              v222 = v223 != 0;
            }
            while (result | v223);
            v156 = v268;
            v159 = v255;
            if (v171)
              goto LABEL_271;
          }
LABEL_198:
          v164 = (unsigned __int16)++v165;
        }
        while (v159 > (unsigned __int16)v165);
        v161 = v247 + 1;
        v160 = (unsigned __int16)(v247 + 1);
        v15 = a7;
      }
      while (v245 > v160);
    }
  }
  return result;
}

uint64_t agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,2u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, int, int);
  uint64_t (*v18)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, unsigned int, unsigned int);
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, unsigned int, unsigned int);
  int v37;
  uint64_t (*v38)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, int, int);
  unsigned int v39;
  unsigned int v40;

  v11 = a6;
  v12 = a5;
  v14 = 32 - __clz(a3 - 1);
  v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2)
    v16 = v15;
  else
    v16 = 0;
  if (((a2 | a7) & 7) != 0)
    v17 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,2u,(TwiddleOrder)0>,false,false>;
  else
    v17 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,2u,(TwiddleOrder)0>,false,true>;
  if (((a2 | a7) & 7) != 0)
    v18 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,2u,(TwiddleOrder)0>,true,false>;
  else
    v18 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,2u,(TwiddleOrder)0>,true,true>;
  v19 = a3 >= 2;
  if (a3 >= 2)
    v20 = v14;
  else
    v20 = 0;
  if (!v19 || v16 <= 1)
  {
    HIDWORD(v35) = a5;
    LODWORD(v35) = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, unsigned int))v17)(result, a2, v20, v16, a8, a9, a7, 0, v35, a6);
  }
  v21 = result;
  v22 = 4 - (a9 & 3);
  if ((a9 & 3) == 0)
    v22 = 0;
  v23 = 4 - (a8 & 3);
  if ((a8 & 3) == 0)
    v23 = 0;
  v24 = ((_BYTE)a8 + (_BYTE)a5) & 3;
  v25 = ((_BYTE)a9 + (_BYTE)a6) & 3;
  v26 = v23 + v24;
  if (v23 + v24 > a5)
    v23 = a5;
  v39 = v20;
  v40 = v23;
  if (v26 > a5)
    v24 = 0;
  if (v22 + v25 <= a6)
    v27 = v22;
  else
    v27 = a6;
  if (v22 + v25 <= a6)
    v28 = ((_BYTE)a9 + (_BYTE)a6) & 3;
  else
    v28 = 0;
  v36 = v18;
  v38 = v17;
  v37 = v24;
  if (v27)
  {
    HIDWORD(v33) = a5;
    LODWORD(v33) = 0;
    result = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, unsigned int))v17)(result, a2, v20, v16, a8, a9, a7, 0, v33, v27);
    v11 -= v27;
  }
  if (v28)
  {
    v11 -= v28;
    *(_QWORD *)((char *)&v34 + 4) = __PAIR64__(v28, v12);
    LODWORD(v34) = v11 + v27;
    v29 = v21;
    v30 = v21;
    v31 = v39;
    result = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _DWORD))v38)(v30, a2, v39, v16, a8, a9, a7, 0, v34, DWORD2(v34));
    v32 = v40;
    if (!v11)
      return result;
  }
  else
  {
    v29 = v21;
    v31 = v39;
    v32 = v40;
    if (!v11)
      return result;
  }
  if (v32)
  {
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, unsigned int))v38)(v29, a2, v31, v16, a8, a9, a7, 0, __PAIR64__(v32, v27), v11);
    v12 -= v40;
  }
  if (v37)
  {
    v12 -= v37;
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, unsigned int))v38)(v29, a2, v31, v16, a8, a9, a7, v12 + v40, __PAIR64__(v37, v27), v11);
  }
  if (v12)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))v36)(v29, a2, v31, v16, a8, a9, a7);
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,2u,(TwiddleOrder)0>,false,true>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3)) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4)) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = (uint64_t *)(v46 + 8 * a8);
      v48 = a10;
      v49 = v30;
      do
      {
        v50 = *v47++;
        *(_QWORD *)(result + 8 * (v49 + v40)) = v50;
        v49 = (v49 - v12) & v12;
        --v48;
      }
      while (v48);
      v40 = (v40 - v23) & v23;
      v46 += a7;
      ++v45;
    }
    while (v45 != a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,2u,(TwiddleOrder)0>,false,false>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3)) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4)) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = (uint64_t *)(v46 + 8 * a8);
      v48 = a10;
      v49 = v30;
      do
      {
        v50 = *v47++;
        *(_QWORD *)(result + 8 * (v49 + v40)) = v50;
        v49 = (v49 - v12) & v12;
        --v48;
      }
      while (v48);
      v40 = (v40 - v23) & v23;
      v46 += a7;
      ++v45;
    }
    while (v45 != a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,2u,(TwiddleOrder)0>,true,true>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int64x2_t *v48;
  uint64_t v49;
  int64x2_t *v50;
  int64x2_t v51;
  int64x2_t *v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t *v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3) & 0x7FFFFFFCu) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4) & 0x7FFFFFFCu) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = 0;
      v48 = (int64x2_t *)(v46 + 8 * a8);
      v49 = v30;
      do
      {
        v50 = (int64x2_t *)(result + 8 * (v49 + v40));
        v51 = v48[1];
        v53 = *(int64x2_t *)((char *)v48 + a7);
        v54 = *(int64x2_t *)((char *)&v48[1] + a7);
        v52 = (int64x2_t *)((char *)v48 + a7 + a7);
        v56 = *v52;
        v57 = v52[1];
        v55 = (int64x2_t *)((char *)v52 + a7);
        v58 = *v55;
        v59 = v55[1];
        v60 = vtrn2q_s64(*v48, v53);
        *v50 = vtrn1q_s64(*v48, v53);
        v50[1] = v60;
        v50[2] = vtrn1q_s64(v56, v58);
        v50[3] = vtrn2q_s64(v56, v58);
        v50 += 4;
        *v50 = vtrn1q_s64(v51, v54);
        v50[1] = vtrn2q_s64(v51, v54);
        v50[2] = vtrn1q_s64(v57, v59);
        v50[3] = vtrn2q_s64(v57, v59);
        v49 = (v49 - v12) & v12;
        v48 += 2;
        v47 += 4;
      }
      while (v47 < a10);
      v40 = (v40 - v23) & v23;
      v46 += 4 * a7;
      v45 += 4;
    }
    while (v45 < a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,4ul,2u,(TwiddleOrder)0>,true,false>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int64x2_t *v48;
  uint64_t v49;
  int64x2_t *v50;
  int64x2_t v51;
  int64x2_t *v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t *v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3) & 0x7FFFFFFCu) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4) & 0x7FFFFFFCu) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = 0;
      v48 = (int64x2_t *)(v46 + 8 * a8);
      v49 = v30;
      do
      {
        v50 = (int64x2_t *)(result + 8 * (v49 + v40));
        v51 = v48[1];
        v53 = *(int64x2_t *)((char *)v48 + a7);
        v54 = *(int64x2_t *)((char *)&v48[1] + a7);
        v52 = (int64x2_t *)((char *)v48 + a7 + a7);
        v56 = *v52;
        v57 = v52[1];
        v55 = (int64x2_t *)((char *)v52 + a7);
        v58 = *v55;
        v59 = v55[1];
        v60 = vtrn2q_s64(*v48, v53);
        *v50 = vtrn1q_s64(*v48, v53);
        v50[1] = v60;
        v50[2] = vtrn1q_s64(v56, v58);
        v50[3] = vtrn2q_s64(v56, v58);
        v50 += 4;
        *v50 = vtrn1q_s64(v51, v54);
        v50[1] = vtrn2q_s64(v51, v54);
        v50[2] = vtrn1q_s64(v57, v59);
        v50[3] = vtrn2q_s64(v57, v59);
        v49 = (v49 - v12) & v12;
        v48 += 2;
        v47 += 4;
      }
      while (v47 < a10);
      v40 = (v40 - v23) & v23;
      v46 += 4 * a7;
      v45 += 4;
    }
    while (v45 < a11);
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,2u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, uint64_t a11, unsigned __int16 *a12, uint64_t a13)
{
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  char v20;
  unsigned int v21;
  char v22;
  int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  BOOL v29;
  unsigned int v30;
  BOOL v31;
  char v32;
  char v33;
  int v34;
  char v35;
  unsigned int v36;
  BOOL v37;
  BOOL v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  BOOL v81;
  char v82;
  int v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  BOOL v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  BOOL v111;
  BOOL v112;
  int v113;
  int v114;
  int v115;
  int v116;
  BOOL v117;
  BOOL v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  char v130;
  int v131;
  int v132;
  unsigned int v134;
  unsigned int v135;
  char v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  int v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v155;
  BOOL v156;
  BOOL v157;
  int v158;
  int v159;
  uint64_t v160;
  char v161[16];
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned __int8 v169;

  if (result && a2)
  {
    v16 = a11;
    v17 = a10;
    if (a12)
    {
      v18 = a7;
      v160 = result;
      if (*((_BYTE *)a12 + 20))
      {
        result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), *(_DWORD *)(a13 + 8), *(_DWORD *)(a13 + 12), *(_DWORD *)(a13 + 4), *(_DWORD *)a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v161);
        v19 = *((_BYTE *)a12 + 13);
        v20 = *((_BYTE *)a12 + 12);
        v129 = a2;
        if (1 << v19 >= a6 || a5 >> v20)
        {
          v78 = a6 >> v19;
          v79 = 1 << v20;
          v80 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
          if (a6 < 2)
            v80 = 0;
          v81 = v79 >= a5;
          if (v79 < a5)
            v82 = v20 + v19 + v80;
          else
            v82 = *((_BYTE *)a12 + 12);
          if (v81)
            LOBYTE(v83) = *((_BYTE *)a12 + 13);
          else
            v83 = -v80;
          if (!v78)
            v20 = v82;
          v130 = v20;
          if (v78)
            v22 = *((_BYTE *)a12 + 13);
          else
            v22 = v83;
        }
        else
        {
          v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
          if (a5 < 2)
            LOBYTE(v21) = 0;
          v130 = v21;
          v22 = v20 + v19 - v21;
        }
        v84 = v160;
        v128 = v167;
        if (v167)
        {
          v85 = 1 << v130;
          v86 = 1 << v22;
          v87 = v168;
          v159 = v165;
          v157 = v165 != 0;
          v158 = v166;
          v156 = v166 != 0;
          v127 = 1 << v130;
          if (1 << v130 >= a5)
            v85 = a5;
          v144 = v85;
          v146 = 1 << v22;
          if (v86 >= a6)
            v86 = a6;
          v142 = v86;
          if (v168)
          {
            v88 = 0;
            v89 = 0;
            v140 = a8 >> v22;
            v90 = v163;
            v91 = v164;
            v92 = v169;
            v125 = v162;
            v126 = a7 >> v130;
            v93 = v166 | v165;
            v124 = a9 + a7;
            v138 = a10 + a8;
            do
            {
              v132 = v89;
              v94 = 0;
              v95 = 0;
              v96 = a9;
              if (v124 >= (v88 + v126 + 1) << v130)
                v96 = v127 - ((v127 - 1) & a7);
              v97 = 1 << v130;
              if (v124 < (v88 + v126 + 1) << v130)
                v97 = (v127 - 1) & (a9 + a7);
              v98 = (v88 + v126) << v130 >= v18;
              v99 = v125 + v88;
              v100 = v88 << v130;
              if (v98)
                v101 = v97;
              else
                v101 = v96;
              v102 = (v127 - 1) & a7;
              if (v98)
                v102 = 0;
              v151 = v102;
              v153 = v101;
              v149 = v129 + 2 * (v102 + v100);
              do
              {
                v107 = v90 + v94;
                if (v92)
                {
                  if (!v93)
                    goto LABEL_155;
                  v108 = 0;
                  v109 = 0;
                  v110 = 1;
                  v111 = v156;
                  v112 = v157;
                  v113 = v159;
                  v114 = v158;
                  do
                  {
                    --v113;
                    if (v112)
                      v109 |= (v110 & v99) << v108;
                    else
                      v113 = 0;
                    if (v112)
                      ++v108;
                    --v114;
                    if (v111)
                      v109 |= (v110 & v107) << v108;
                    else
                      v114 = 0;
                    if (v111)
                      ++v108;
                    v110 *= 2;
                    --v108;
                    v111 = v114 != 0;
                    v112 = v113 != 0;
                  }
                  while (v114 | v113);
                }
                else
                {
                  if (!v93)
                  {
LABEL_155:
                    v109 = 0;
                    goto LABEL_156;
                  }
                  v115 = 0;
                  v109 = 0;
                  v116 = 1;
                  v118 = v156;
                  v117 = v157;
                  v119 = v158;
                  v120 = v159;
                  do
                  {
                    --v119;
                    if (v118)
                      v109 |= (v116 & v107) << v115;
                    else
                      v119 = 0;
                    if (v118)
                      ++v115;
                    --v120;
                    if (v117)
                      v109 |= (v116 & v99) << v115;
                    else
                      v120 = 0;
                    if (v117)
                      ++v115;
                    v116 *= 2;
                    --v115;
                    v117 = v120 != 0;
                    v118 = v119 != 0;
                  }
                  while (v120 | v119);
                }
LABEL_156:
                v121 = *(_DWORD *)(v84 + 4 * ((v109 + v91) | ((v109 + v91) >> 8 << 9)));
                if (v121 < 0)
                {
                  v122 = v84 - *(_QWORD *)(a13 + 24) + ((unint64_t)(v121 & 0x3FFFFFF) << 14);
                  v123 = *(_DWORD *)(a13 + 8);
                  if (*(_DWORD *)a13 > v123)
                    v122 += get_level_offset_within_tail(*(_DWORD *)a13, v123, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                  v103 = a10;
                  if (v138 >= (v94 + v140 + 1) << v22)
                    v103 = v146 - ((v146 - 1) & a8);
                  v104 = 1 << v22;
                  if (v138 < (v94 + v140 + 1) << v22)
                    v104 = (v146 - 1) & (a10 + a8);
                  v105 = (v146 - 1) & a8;
                  if ((v94 + v140) << v22 < a8)
                  {
                    v106 = v103;
                  }
                  else
                  {
                    v105 = 0;
                    v106 = v104;
                  }
                  result = agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,2u,(TwiddleOrder)0>>(v122, v149 + (v105 + (v94 << v22)) * a11, v144, v142, v153, v106, a11, v151, v105);
                  v84 = v160;
                }
                v94 = (unsigned __int16)++v95;
              }
              while (v87 > (unsigned __int16)v95);
              v18 = a7;
              v89 = v132 + 1;
              v88 = (unsigned __int16)(v132 + 1);
            }
            while (v128 > v88);
          }
        }
      }
      else
      {
        LOBYTE(v23) = *((_BYTE *)a12 + 13);
        v24 = *((_BYTE *)a12 + 12);
        v25 = 1 << v23;
        v26 = a5 >> v24;
        v27 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
        if (a6 < 2)
          v27 = 0;
        v28 = v24 + v23;
        if (a6 >> v23)
          v29 = 1;
        else
          v29 = 1 << v24 >= a5;
        if (!v29)
        {
          v24 += v23 + v27;
          v23 = -v27;
        }
        v30 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
        if (a5 < 2)
          LOBYTE(v30) = 0;
        v31 = v25 < a6 && v26 == 0;
        if (v31)
          v32 = v30;
        else
          v32 = v24;
        if (v31)
          v33 = v28 - v30;
        else
          v33 = v23;
        v34 = 1 << v33;
        v35 = *((_BYTE *)a12 + 15);
        v36 = 1 << v35;
        if (v35)
          v37 = v36 > a3;
        else
          v37 = 1;
        v38 = v37 || v36 > a4;
        v39 = (~(-1 << v35) + a3) & (-1 << v35);
        if (v38)
          v40 = a3;
        else
          v40 = v39;
        v139 = a8 >> v33;
        v141 = 1 << v33;
        v41 = v34 - 1;
        v136 = v33;
        v137 = a10 + a8;
        v135 = (v34 - 1 + a10 + a8) >> v33;
        if (a8 >> v33 < v135)
        {
          v42 = 1 << v32;
          v43 = a7 >> v32;
          v44 = a9 + a7;
          v45 = (1 << v32) - 1;
          v46 = (v45 + a9 + a7) >> v32;
          if (1 << v32 >= a5)
            v47 = a5;
          else
            v47 = 1 << v32;
          v48 = 1 << v33;
          if (v141 >= a6)
            v48 = a6;
          v29 = v46 >= v43;
          v49 = v46 - v43;
          if (v49 != 0 && v29)
          {
            v50 = v45 & a7;
            v51 = v45 & v44;
            v52 = v42 - v50;
            v131 = v41 & v137;
            v145 = v41 & a8;
            v53 = v139;
            v134 = (v40 + ~(-1 << v32)) >> v32;
            v54 = v43 + v134 * v139;
            v155 = v47;
            v150 = v49;
            v152 = v48;
            v148 = v45 & v44;
            v147 = v42 - v50;
            do
            {
              v55 = v53 << v136;
              v56 = v53 + 1;
              if (v137 >= (v53 + 1) << v136)
                v57 = v141;
              else
                v57 = v131;
              if (v137 >= v56 << v136)
                v58 = v141 - v145;
              else
                v58 = v17;
              v59 = (v53 - v139) << v136;
              v143 = v56;
              if (v55 >= a8)
              {
                v69 = 0;
                v70 = (v59 - v145) * v16;
                do
                {
                  v71 = (v43 + v69) << v32;
                  v72 = (v43 + v69 + 1) << v32;
                  v73 = v44 >= v72;
                  if (v44 >= v72)
                    v74 = v52;
                  else
                    v74 = a9;
                  if (v73)
                    v75 = v42;
                  else
                    v75 = v51;
                  if (v71 >= a7)
                    v76 = 0;
                  else
                    v76 = v50;
                  if (v71 >= a7)
                    v77 = v75;
                  else
                    v77 = v74;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,2u,(TwiddleOrder)0>>((v54 + v69) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, a2 + 2 * ((v76 + (v69 << v32)) - v50) + v70, v155, v152, v77, v57, v16, v76, 0);
                  v52 = v147;
                  v51 = v148;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v160;
                  ++v69;
                }
                while (v150 != v69);
              }
              else
              {
                v60 = 0;
                v61 = ((v145 + v59) - v145) * v16;
                do
                {
                  v62 = (v43 + v60) << v32;
                  v63 = (v43 + v60 + 1) << v32;
                  v64 = v44 >= v63;
                  if (v44 >= v63)
                    v65 = v52;
                  else
                    v65 = a9;
                  if (v64)
                    v66 = v42;
                  else
                    v66 = v51;
                  if (v62 >= a7)
                    v67 = 0;
                  else
                    v67 = v50;
                  if (v62 >= a7)
                    v68 = v66;
                  else
                    v68 = v65;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,2u,(TwiddleOrder)0>>((v54 + v60) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, a2 + 2 * ((v67 + (v60 << v32)) - v50) + v61, v155, v152, v68, v58, v16, v67, v145);
                  v52 = v147;
                  v51 = v148;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v160;
                  ++v60;
                }
                while (v150 != v60);
              }
              v54 += v134;
              v53 = v143;
              v17 = a10;
            }
            while (v143 != v135);
          }
        }
      }
    }
    else
    {
      return agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,2u,(TwiddleOrder)0>>(result, a2, a5, a6, a9, a10, a11, a7, a8);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,4u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, uint64_t a11, unsigned __int16 *a12, uint64_t a13)
{
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  char v20;
  unsigned int v21;
  char v22;
  int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  BOOL v29;
  unsigned int v30;
  BOOL v31;
  char v32;
  char v33;
  int v34;
  char v35;
  unsigned int v36;
  BOOL v37;
  BOOL v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  BOOL v81;
  char v82;
  int v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  BOOL v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  BOOL v111;
  BOOL v112;
  int v113;
  int v114;
  int v115;
  int v116;
  BOOL v117;
  BOOL v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  char v130;
  int v131;
  int v132;
  unsigned int v134;
  unsigned int v135;
  char v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  int v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v155;
  BOOL v156;
  BOOL v157;
  int v158;
  int v159;
  uint64_t v160;
  char v161[16];
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned __int8 v169;

  if (result && a2)
  {
    v16 = a11;
    v17 = a10;
    if (a12)
    {
      v18 = a7;
      v160 = result;
      if (*((_BYTE *)a12 + 20))
      {
        result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), *(_DWORD *)(a13 + 8), *(_DWORD *)(a13 + 12), *(_DWORD *)(a13 + 4), *(_DWORD *)a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v161);
        v19 = *((_BYTE *)a12 + 13);
        v20 = *((_BYTE *)a12 + 12);
        v129 = a2;
        if (1 << v19 >= a6 || a5 >> v20)
        {
          v78 = a6 >> v19;
          v79 = 1 << v20;
          v80 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
          if (a6 < 2)
            v80 = 0;
          v81 = v79 >= a5;
          if (v79 < a5)
            v82 = v20 + v19 + v80;
          else
            v82 = *((_BYTE *)a12 + 12);
          if (v81)
            LOBYTE(v83) = *((_BYTE *)a12 + 13);
          else
            v83 = -v80;
          if (!v78)
            v20 = v82;
          v130 = v20;
          if (v78)
            v22 = *((_BYTE *)a12 + 13);
          else
            v22 = v83;
        }
        else
        {
          v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
          if (a5 < 2)
            LOBYTE(v21) = 0;
          v130 = v21;
          v22 = v20 + v19 - v21;
        }
        v84 = v160;
        v128 = v167;
        if (v167)
        {
          v85 = 1 << v130;
          v86 = 1 << v22;
          v87 = v168;
          v159 = v165;
          v157 = v165 != 0;
          v158 = v166;
          v156 = v166 != 0;
          v127 = 1 << v130;
          if (1 << v130 >= a5)
            v85 = a5;
          v144 = v85;
          v146 = 1 << v22;
          if (v86 >= a6)
            v86 = a6;
          v142 = v86;
          if (v168)
          {
            v88 = 0;
            v89 = 0;
            v140 = a8 >> v22;
            v90 = v163;
            v91 = v164;
            v92 = v169;
            v125 = v162;
            v126 = a7 >> v130;
            v93 = v166 | v165;
            v124 = a9 + a7;
            v138 = a10 + a8;
            do
            {
              v132 = v89;
              v94 = 0;
              v95 = 0;
              v96 = a9;
              if (v124 >= (v88 + v126 + 1) << v130)
                v96 = v127 - ((v127 - 1) & a7);
              v97 = 1 << v130;
              if (v124 < (v88 + v126 + 1) << v130)
                v97 = (v127 - 1) & (a9 + a7);
              v98 = (v88 + v126) << v130 >= v18;
              v99 = v125 + v88;
              v100 = v88 << v130;
              if (v98)
                v101 = v97;
              else
                v101 = v96;
              v102 = (v127 - 1) & a7;
              if (v98)
                v102 = 0;
              v151 = v102;
              v153 = v101;
              v149 = v129 + 4 * (v102 + v100);
              do
              {
                v107 = v90 + v94;
                if (v92)
                {
                  if (!v93)
                    goto LABEL_155;
                  v108 = 0;
                  v109 = 0;
                  v110 = 1;
                  v111 = v156;
                  v112 = v157;
                  v113 = v159;
                  v114 = v158;
                  do
                  {
                    --v113;
                    if (v112)
                      v109 |= (v110 & v99) << v108;
                    else
                      v113 = 0;
                    if (v112)
                      ++v108;
                    --v114;
                    if (v111)
                      v109 |= (v110 & v107) << v108;
                    else
                      v114 = 0;
                    if (v111)
                      ++v108;
                    v110 *= 2;
                    --v108;
                    v111 = v114 != 0;
                    v112 = v113 != 0;
                  }
                  while (v114 | v113);
                }
                else
                {
                  if (!v93)
                  {
LABEL_155:
                    v109 = 0;
                    goto LABEL_156;
                  }
                  v115 = 0;
                  v109 = 0;
                  v116 = 1;
                  v118 = v156;
                  v117 = v157;
                  v119 = v158;
                  v120 = v159;
                  do
                  {
                    --v119;
                    if (v118)
                      v109 |= (v116 & v107) << v115;
                    else
                      v119 = 0;
                    if (v118)
                      ++v115;
                    --v120;
                    if (v117)
                      v109 |= (v116 & v99) << v115;
                    else
                      v120 = 0;
                    if (v117)
                      ++v115;
                    v116 *= 2;
                    --v115;
                    v117 = v120 != 0;
                    v118 = v119 != 0;
                  }
                  while (v120 | v119);
                }
LABEL_156:
                v121 = *(_DWORD *)(v84 + 4 * ((v109 + v91) | ((v109 + v91) >> 8 << 9)));
                if (v121 < 0)
                {
                  v122 = v84 - *(_QWORD *)(a13 + 24) + ((unint64_t)(v121 & 0x3FFFFFF) << 14);
                  v123 = *(_DWORD *)(a13 + 8);
                  if (*(_DWORD *)a13 > v123)
                    v122 += get_level_offset_within_tail(*(_DWORD *)a13, v123, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                  v103 = a10;
                  if (v138 >= (v94 + v140 + 1) << v22)
                    v103 = v146 - ((v146 - 1) & a8);
                  v104 = 1 << v22;
                  if (v138 < (v94 + v140 + 1) << v22)
                    v104 = (v146 - 1) & (a10 + a8);
                  v105 = (v146 - 1) & a8;
                  if ((v94 + v140) << v22 < a8)
                  {
                    v106 = v103;
                  }
                  else
                  {
                    v105 = 0;
                    v106 = v104;
                  }
                  result = agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,4u,(TwiddleOrder)0>>(v122, v149 + (v105 + (v94 << v22)) * a11, v144, v142, v153, v106, a11, v151, v105);
                  v84 = v160;
                }
                v94 = (unsigned __int16)++v95;
              }
              while (v87 > (unsigned __int16)v95);
              v18 = a7;
              v89 = v132 + 1;
              v88 = (unsigned __int16)(v132 + 1);
            }
            while (v128 > v88);
          }
        }
      }
      else
      {
        LOBYTE(v23) = *((_BYTE *)a12 + 13);
        v24 = *((_BYTE *)a12 + 12);
        v25 = 1 << v23;
        v26 = a5 >> v24;
        v27 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
        if (a6 < 2)
          v27 = 0;
        v28 = v24 + v23;
        if (a6 >> v23)
          v29 = 1;
        else
          v29 = 1 << v24 >= a5;
        if (!v29)
        {
          v24 += v23 + v27;
          v23 = -v27;
        }
        v30 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
        if (a5 < 2)
          LOBYTE(v30) = 0;
        v31 = v25 < a6 && v26 == 0;
        if (v31)
          v32 = v30;
        else
          v32 = v24;
        if (v31)
          v33 = v28 - v30;
        else
          v33 = v23;
        v34 = 1 << v33;
        v35 = *((_BYTE *)a12 + 15);
        v36 = 1 << v35;
        if (v35)
          v37 = v36 > a3;
        else
          v37 = 1;
        v38 = v37 || v36 > a4;
        v39 = (~(-1 << v35) + a3) & (-1 << v35);
        if (v38)
          v40 = a3;
        else
          v40 = v39;
        v139 = a8 >> v33;
        v141 = 1 << v33;
        v41 = v34 - 1;
        v136 = v33;
        v137 = a10 + a8;
        v135 = (v34 - 1 + a10 + a8) >> v33;
        if (a8 >> v33 < v135)
        {
          v42 = 1 << v32;
          v43 = a7 >> v32;
          v44 = a9 + a7;
          v45 = (1 << v32) - 1;
          v46 = (v45 + a9 + a7) >> v32;
          if (1 << v32 >= a5)
            v47 = a5;
          else
            v47 = 1 << v32;
          v48 = 1 << v33;
          if (v141 >= a6)
            v48 = a6;
          v29 = v46 >= v43;
          v49 = v46 - v43;
          if (v49 != 0 && v29)
          {
            v50 = v45 & a7;
            v51 = v45 & v44;
            v52 = v42 - v50;
            v131 = v41 & v137;
            v145 = v41 & a8;
            v53 = v139;
            v134 = (v40 + ~(-1 << v32)) >> v32;
            v54 = v43 + v134 * v139;
            v155 = v47;
            v150 = v49;
            v152 = v48;
            v148 = v45 & v44;
            v147 = v42 - v50;
            do
            {
              v55 = v53 << v136;
              v56 = v53 + 1;
              if (v137 >= (v53 + 1) << v136)
                v57 = v141;
              else
                v57 = v131;
              if (v137 >= v56 << v136)
                v58 = v141 - v145;
              else
                v58 = v17;
              v59 = (v53 - v139) << v136;
              v143 = v56;
              if (v55 >= a8)
              {
                v69 = 0;
                v70 = (v59 - v145) * v16;
                do
                {
                  v71 = (v43 + v69) << v32;
                  v72 = (v43 + v69 + 1) << v32;
                  v73 = v44 >= v72;
                  if (v44 >= v72)
                    v74 = v52;
                  else
                    v74 = a9;
                  if (v73)
                    v75 = v42;
                  else
                    v75 = v51;
                  if (v71 >= a7)
                    v76 = 0;
                  else
                    v76 = v50;
                  if (v71 >= a7)
                    v77 = v75;
                  else
                    v77 = v74;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,4u,(TwiddleOrder)0>>((v54 + v69) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, a2 + 4 * ((v76 + (v69 << v32)) - v50) + v70, v155, v152, v77, v57, v16, v76, 0);
                  v52 = v147;
                  v51 = v148;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v160;
                  ++v69;
                }
                while (v150 != v69);
              }
              else
              {
                v60 = 0;
                v61 = ((v145 + v59) - v145) * v16;
                do
                {
                  v62 = (v43 + v60) << v32;
                  v63 = (v43 + v60 + 1) << v32;
                  v64 = v44 >= v63;
                  if (v44 >= v63)
                    v65 = v52;
                  else
                    v65 = a9;
                  if (v64)
                    v66 = v42;
                  else
                    v66 = v51;
                  if (v62 >= a7)
                    v67 = 0;
                  else
                    v67 = v50;
                  if (v62 >= a7)
                    v68 = v66;
                  else
                    v68 = v65;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,4u,(TwiddleOrder)0>>((v54 + v60) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, a2 + 4 * ((v67 + (v60 << v32)) - v50) + v61, v155, v152, v68, v58, v16, v67, v145);
                  v52 = v147;
                  v51 = v148;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v160;
                  ++v60;
                }
                while (v150 != v60);
              }
              v54 += v134;
              v53 = v143;
              v17 = a10;
            }
            while (v143 != v135);
          }
        }
      }
    }
    else
    {
      return agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,4u,(TwiddleOrder)0>>(result, a2, a5, a6, a9, a10, a11, a7, a8);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,8u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, uint64_t a11, unsigned __int16 *a12, uint64_t a13)
{
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  char v20;
  unsigned int v21;
  char v22;
  int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  BOOL v29;
  unsigned int v30;
  BOOL v31;
  char v32;
  char v33;
  int v34;
  char v35;
  unsigned int v36;
  BOOL v37;
  BOOL v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  BOOL v81;
  char v82;
  int v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  BOOL v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  BOOL v111;
  BOOL v112;
  int v113;
  int v114;
  int v115;
  int v116;
  BOOL v117;
  BOOL v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  char v130;
  int v131;
  int v132;
  unsigned int v134;
  unsigned int v135;
  char v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  int v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v155;
  BOOL v156;
  BOOL v157;
  int v158;
  int v159;
  uint64_t v160;
  char v161[16];
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned __int8 v169;

  if (result && a2)
  {
    v16 = a11;
    v17 = a10;
    if (a12)
    {
      v18 = a7;
      v160 = result;
      if (*((_BYTE *)a12 + 20))
      {
        result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), *(_DWORD *)(a13 + 8), *(_DWORD *)(a13 + 12), *(_DWORD *)(a13 + 4), *(_DWORD *)a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v161);
        v19 = *((_BYTE *)a12 + 13);
        v20 = *((_BYTE *)a12 + 12);
        v129 = a2;
        if (1 << v19 >= a6 || a5 >> v20)
        {
          v78 = a6 >> v19;
          v79 = 1 << v20;
          v80 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
          if (a6 < 2)
            v80 = 0;
          v81 = v79 >= a5;
          if (v79 < a5)
            v82 = v20 + v19 + v80;
          else
            v82 = *((_BYTE *)a12 + 12);
          if (v81)
            LOBYTE(v83) = *((_BYTE *)a12 + 13);
          else
            v83 = -v80;
          if (!v78)
            v20 = v82;
          v130 = v20;
          if (v78)
            v22 = *((_BYTE *)a12 + 13);
          else
            v22 = v83;
        }
        else
        {
          v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
          if (a5 < 2)
            LOBYTE(v21) = 0;
          v130 = v21;
          v22 = v20 + v19 - v21;
        }
        v84 = v160;
        v128 = v167;
        if (v167)
        {
          v85 = 1 << v130;
          v86 = 1 << v22;
          v87 = v168;
          v159 = v165;
          v157 = v165 != 0;
          v158 = v166;
          v156 = v166 != 0;
          v127 = 1 << v130;
          if (1 << v130 >= a5)
            v85 = a5;
          v144 = v85;
          v146 = 1 << v22;
          if (v86 >= a6)
            v86 = a6;
          v142 = v86;
          if (v168)
          {
            v88 = 0;
            v89 = 0;
            v140 = a8 >> v22;
            v90 = v163;
            v91 = v164;
            v92 = v169;
            v125 = v162;
            v126 = a7 >> v130;
            v93 = v166 | v165;
            v124 = a9 + a7;
            v138 = a10 + a8;
            do
            {
              v132 = v89;
              v94 = 0;
              v95 = 0;
              v96 = a9;
              if (v124 >= (v88 + v126 + 1) << v130)
                v96 = v127 - ((v127 - 1) & a7);
              v97 = 1 << v130;
              if (v124 < (v88 + v126 + 1) << v130)
                v97 = (v127 - 1) & (a9 + a7);
              v98 = (v88 + v126) << v130 >= v18;
              v99 = v125 + v88;
              v100 = v88 << v130;
              if (v98)
                v101 = v97;
              else
                v101 = v96;
              v102 = (v127 - 1) & a7;
              if (v98)
                v102 = 0;
              v151 = v102;
              v153 = v101;
              v149 = v129 + 8 * (v102 + v100);
              do
              {
                v107 = v90 + v94;
                if (v92)
                {
                  if (!v93)
                    goto LABEL_155;
                  v108 = 0;
                  v109 = 0;
                  v110 = 1;
                  v111 = v156;
                  v112 = v157;
                  v113 = v159;
                  v114 = v158;
                  do
                  {
                    --v113;
                    if (v112)
                      v109 |= (v110 & v99) << v108;
                    else
                      v113 = 0;
                    if (v112)
                      ++v108;
                    --v114;
                    if (v111)
                      v109 |= (v110 & v107) << v108;
                    else
                      v114 = 0;
                    if (v111)
                      ++v108;
                    v110 *= 2;
                    --v108;
                    v111 = v114 != 0;
                    v112 = v113 != 0;
                  }
                  while (v114 | v113);
                }
                else
                {
                  if (!v93)
                  {
LABEL_155:
                    v109 = 0;
                    goto LABEL_156;
                  }
                  v115 = 0;
                  v109 = 0;
                  v116 = 1;
                  v118 = v156;
                  v117 = v157;
                  v119 = v158;
                  v120 = v159;
                  do
                  {
                    --v119;
                    if (v118)
                      v109 |= (v116 & v107) << v115;
                    else
                      v119 = 0;
                    if (v118)
                      ++v115;
                    --v120;
                    if (v117)
                      v109 |= (v116 & v99) << v115;
                    else
                      v120 = 0;
                    if (v117)
                      ++v115;
                    v116 *= 2;
                    --v115;
                    v117 = v120 != 0;
                    v118 = v119 != 0;
                  }
                  while (v120 | v119);
                }
LABEL_156:
                v121 = *(_DWORD *)(v84 + 4 * ((v109 + v91) | ((v109 + v91) >> 8 << 9)));
                if (v121 < 0)
                {
                  v122 = v84 - *(_QWORD *)(a13 + 24) + ((unint64_t)(v121 & 0x3FFFFFF) << 14);
                  v123 = *(_DWORD *)(a13 + 8);
                  if (*(_DWORD *)a13 > v123)
                    v122 += get_level_offset_within_tail(*(_DWORD *)a13, v123, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                  v103 = a10;
                  if (v138 >= (v94 + v140 + 1) << v22)
                    v103 = v146 - ((v146 - 1) & a8);
                  v104 = 1 << v22;
                  if (v138 < (v94 + v140 + 1) << v22)
                    v104 = (v146 - 1) & (a10 + a8);
                  v105 = (v146 - 1) & a8;
                  if ((v94 + v140) << v22 < a8)
                  {
                    v106 = v103;
                  }
                  else
                  {
                    v105 = 0;
                    v106 = v104;
                  }
                  result = agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,8u,(TwiddleOrder)0>>(v122, v149 + (v105 + (v94 << v22)) * a11, v144, v142, v153, v106, a11, v151, v105);
                  v84 = v160;
                }
                v94 = (unsigned __int16)++v95;
              }
              while (v87 > (unsigned __int16)v95);
              v18 = a7;
              v89 = v132 + 1;
              v88 = (unsigned __int16)(v132 + 1);
            }
            while (v128 > v88);
          }
        }
      }
      else
      {
        LOBYTE(v23) = *((_BYTE *)a12 + 13);
        v24 = *((_BYTE *)a12 + 12);
        v25 = 1 << v23;
        v26 = a5 >> v24;
        v27 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
        if (a6 < 2)
          v27 = 0;
        v28 = v24 + v23;
        if (a6 >> v23)
          v29 = 1;
        else
          v29 = 1 << v24 >= a5;
        if (!v29)
        {
          v24 += v23 + v27;
          v23 = -v27;
        }
        v30 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
        if (a5 < 2)
          LOBYTE(v30) = 0;
        v31 = v25 < a6 && v26 == 0;
        if (v31)
          v32 = v30;
        else
          v32 = v24;
        if (v31)
          v33 = v28 - v30;
        else
          v33 = v23;
        v34 = 1 << v33;
        v35 = *((_BYTE *)a12 + 15);
        v36 = 1 << v35;
        if (v35)
          v37 = v36 > a3;
        else
          v37 = 1;
        v38 = v37 || v36 > a4;
        v39 = (~(-1 << v35) + a3) & (-1 << v35);
        if (v38)
          v40 = a3;
        else
          v40 = v39;
        v139 = a8 >> v33;
        v141 = 1 << v33;
        v41 = v34 - 1;
        v136 = v33;
        v137 = a10 + a8;
        v135 = (v34 - 1 + a10 + a8) >> v33;
        if (a8 >> v33 < v135)
        {
          v42 = 1 << v32;
          v43 = a7 >> v32;
          v44 = a9 + a7;
          v45 = (1 << v32) - 1;
          v46 = (v45 + a9 + a7) >> v32;
          if (1 << v32 >= a5)
            v47 = a5;
          else
            v47 = 1 << v32;
          v48 = 1 << v33;
          if (v141 >= a6)
            v48 = a6;
          v29 = v46 >= v43;
          v49 = v46 - v43;
          if (v49 != 0 && v29)
          {
            v50 = v45 & a7;
            v51 = v45 & v44;
            v52 = v42 - v50;
            v131 = v41 & v137;
            v145 = v41 & a8;
            v53 = v139;
            v134 = (v40 + ~(-1 << v32)) >> v32;
            v54 = v43 + v134 * v139;
            v155 = v47;
            v150 = v49;
            v152 = v48;
            v148 = v45 & v44;
            v147 = v42 - v50;
            do
            {
              v55 = v53 << v136;
              v56 = v53 + 1;
              if (v137 >= (v53 + 1) << v136)
                v57 = v141;
              else
                v57 = v131;
              if (v137 >= v56 << v136)
                v58 = v141 - v145;
              else
                v58 = v17;
              v59 = (v53 - v139) << v136;
              v143 = v56;
              if (v55 >= a8)
              {
                v69 = 0;
                v70 = (v59 - v145) * v16;
                do
                {
                  v71 = (v43 + v69) << v32;
                  v72 = (v43 + v69 + 1) << v32;
                  v73 = v44 >= v72;
                  if (v44 >= v72)
                    v74 = v52;
                  else
                    v74 = a9;
                  if (v73)
                    v75 = v42;
                  else
                    v75 = v51;
                  if (v71 >= a7)
                    v76 = 0;
                  else
                    v76 = v50;
                  if (v71 >= a7)
                    v77 = v75;
                  else
                    v77 = v74;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,8u,(TwiddleOrder)0>>((v54 + v69) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, a2 + 8 * ((v76 + (v69 << v32)) - v50) + v70, v155, v152, v77, v57, v16, v76, 0);
                  v52 = v147;
                  v51 = v148;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v160;
                  ++v69;
                }
                while (v150 != v69);
              }
              else
              {
                v60 = 0;
                v61 = ((v145 + v59) - v145) * v16;
                do
                {
                  v62 = (v43 + v60) << v32;
                  v63 = (v43 + v60 + 1) << v32;
                  v64 = v44 >= v63;
                  if (v44 >= v63)
                    v65 = v52;
                  else
                    v65 = a9;
                  if (v64)
                    v66 = v42;
                  else
                    v66 = v51;
                  if (v62 >= a7)
                    v67 = 0;
                  else
                    v67 = v50;
                  if (v62 >= a7)
                    v68 = v66;
                  else
                    v68 = v65;
                  agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,8u,(TwiddleOrder)0>>((v54 + v60) * a12[3] * *((unsigned __int8 *)a12 + 9) + result, a2 + 8 * ((v67 + (v60 << v32)) - v50) + v61, v155, v152, v68, v58, v16, v67, v145);
                  v52 = v147;
                  v51 = v148;
                  v44 = a9 + a7;
                  v43 = a7 >> v32;
                  v42 = 1 << v32;
                  v16 = a11;
                  result = v160;
                  ++v60;
                }
                while (v150 != v60);
              }
              v54 += v134;
              v53 = v143;
              v17 = a10;
            }
            while (v143 != v135);
          }
        }
      }
    }
    else
    {
      return agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,8u,(TwiddleOrder)0>>(result, a2, a5, a6, a9, a10, a11, a7, a8);
    }
  }
  return result;
}

uint64_t agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,8u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, int, int);
  uint64_t (*v18)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, unsigned int, unsigned int);
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, unsigned int, unsigned int);
  int v37;
  uint64_t (*v38)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, int, int);
  unsigned int v39;
  unsigned int v40;

  v11 = a6;
  v12 = a5;
  v14 = 32 - __clz(a3 - 1);
  v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2)
    v16 = v15;
  else
    v16 = 0;
  if (((a2 | a7) & 7) != 0)
    v17 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,8u,(TwiddleOrder)0>,false,false>;
  else
    v17 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,8u,(TwiddleOrder)0>,false,true>;
  if (((a2 | a7) & 7) != 0)
    v18 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,8u,(TwiddleOrder)0>,true,false>;
  else
    v18 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,8u,(TwiddleOrder)0>,true,true>;
  v19 = a3 >= 2;
  if (a3 >= 2)
    v20 = v14;
  else
    v20 = 0;
  if (!v19 || v16 <= 1)
  {
    HIDWORD(v35) = a5;
    LODWORD(v35) = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, unsigned int))v17)(result, a2, v20, v16, a8, a9, a7, 0, v35, a6);
  }
  v21 = result;
  v22 = 4 - (a9 & 3);
  if ((a9 & 3) == 0)
    v22 = 0;
  v23 = 4 - (a8 & 3);
  if ((a8 & 3) == 0)
    v23 = 0;
  v24 = ((_BYTE)a8 + (_BYTE)a5) & 3;
  v25 = ((_BYTE)a9 + (_BYTE)a6) & 3;
  v26 = v23 + v24;
  if (v23 + v24 > a5)
    v23 = a5;
  v39 = v20;
  v40 = v23;
  if (v26 > a5)
    v24 = 0;
  if (v22 + v25 <= a6)
    v27 = v22;
  else
    v27 = a6;
  if (v22 + v25 <= a6)
    v28 = ((_BYTE)a9 + (_BYTE)a6) & 3;
  else
    v28 = 0;
  v36 = v18;
  v38 = v17;
  v37 = v24;
  if (v27)
  {
    HIDWORD(v33) = a5;
    LODWORD(v33) = 0;
    result = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, unsigned int))v17)(result, a2, v20, v16, a8, a9, a7, 0, v33, v27);
    v11 -= v27;
  }
  if (v28)
  {
    v11 -= v28;
    *(_QWORD *)((char *)&v34 + 4) = __PAIR64__(v28, v12);
    LODWORD(v34) = v11 + v27;
    v29 = v21;
    v30 = v21;
    v31 = v39;
    result = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _DWORD))v38)(v30, a2, v39, v16, a8, a9, a7, 0, v34, DWORD2(v34));
    v32 = v40;
    if (!v11)
      return result;
  }
  else
  {
    v29 = v21;
    v31 = v39;
    v32 = v40;
    if (!v11)
      return result;
  }
  if (v32)
  {
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, unsigned int))v38)(v29, a2, v31, v16, a8, a9, a7, 0, __PAIR64__(v32, v27), v11);
    v12 -= v40;
  }
  if (v37)
  {
    v12 -= v37;
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, unsigned int))v38)(v29, a2, v31, v16, a8, a9, a7, v12 + v40, __PAIR64__(v37, v27), v11);
  }
  if (v12)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))v36)(v29, a2, v31, v16, a8, a9, a7);
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,8u,(TwiddleOrder)0>,false,true>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3)) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4)) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = (uint64_t *)(v46 + 8 * a8);
      v48 = a10;
      v49 = v30;
      do
      {
        v50 = *v47++;
        *(_QWORD *)(result + 8 * (v49 + v40)) = v50;
        v49 = (v49 - v12) & v12;
        --v48;
      }
      while (v48);
      v40 = (v40 - v23) & v23;
      v46 += a7;
      ++v45;
    }
    while (v45 != a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,8u,(TwiddleOrder)0>,false,false>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3)) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4)) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = (uint64_t *)(v46 + 8 * a8);
      v48 = a10;
      v49 = v30;
      do
      {
        v50 = *v47++;
        *(_QWORD *)(result + 8 * (v49 + v40)) = v50;
        v49 = (v49 - v12) & v12;
        --v48;
      }
      while (v48);
      v40 = (v40 - v23) & v23;
      v46 += a7;
      ++v45;
    }
    while (v45 != a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,8u,(TwiddleOrder)0>,true,true>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int64x2_t *v48;
  uint64_t v49;
  int64x2_t *v50;
  int64x2_t v51;
  int64x2_t *v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t *v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3) & 0x7FFFFFFCu) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4) & 0x7FFFFFFCu) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = 0;
      v48 = (int64x2_t *)(v46 + 8 * a8);
      v49 = v30;
      do
      {
        v50 = (int64x2_t *)(result + 8 * (v49 + v40));
        v51 = v48[1];
        v53 = *(int64x2_t *)((char *)v48 + a7);
        v54 = *(int64x2_t *)((char *)&v48[1] + a7);
        v52 = (int64x2_t *)((char *)v48 + a7 + a7);
        v56 = *v52;
        v57 = v52[1];
        v55 = (int64x2_t *)((char *)v52 + a7);
        v58 = *v55;
        v59 = v55[1];
        v60 = vtrn2q_s64(*v48, v53);
        *v50 = vtrn1q_s64(*v48, v53);
        v50[1] = v60;
        v50[2] = vtrn1q_s64(v56, v58);
        v50[3] = vtrn2q_s64(v56, v58);
        v50 += 4;
        *v50 = vtrn1q_s64(v51, v54);
        v50[1] = vtrn2q_s64(v51, v54);
        v50[2] = vtrn1q_s64(v57, v59);
        v50[3] = vtrn2q_s64(v57, v59);
        v49 = (v49 - v12) & v12;
        v48 += 2;
        v47 += 4;
      }
      while (v47 < a10);
      v40 = (v40 - v23) & v23;
      v46 += 4 * a7;
      v45 += 4;
    }
    while (v45 < a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,8u,(TwiddleOrder)0>,true,false>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int64x2_t *v48;
  uint64_t v49;
  int64x2_t *v50;
  int64x2_t v51;
  int64x2_t *v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t *v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3) & 0x7FFFFFFCu) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4) & 0x7FFFFFFCu) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = 0;
      v48 = (int64x2_t *)(v46 + 8 * a8);
      v49 = v30;
      do
      {
        v50 = (int64x2_t *)(result + 8 * (v49 + v40));
        v51 = v48[1];
        v53 = *(int64x2_t *)((char *)v48 + a7);
        v54 = *(int64x2_t *)((char *)&v48[1] + a7);
        v52 = (int64x2_t *)((char *)v48 + a7 + a7);
        v56 = *v52;
        v57 = v52[1];
        v55 = (int64x2_t *)((char *)v52 + a7);
        v58 = *v55;
        v59 = v55[1];
        v60 = vtrn2q_s64(*v48, v53);
        *v50 = vtrn1q_s64(*v48, v53);
        v50[1] = v60;
        v50[2] = vtrn1q_s64(v56, v58);
        v50[3] = vtrn2q_s64(v56, v58);
        v50 += 4;
        *v50 = vtrn1q_s64(v51, v54);
        v50[1] = vtrn2q_s64(v51, v54);
        v50[2] = vtrn1q_s64(v57, v59);
        v50[3] = vtrn2q_s64(v57, v59);
        v49 = (v49 - v12) & v12;
        v48 += 2;
        v47 += 4;
      }
      while (v47 < a10);
      v40 = (v40 - v23) & v23;
      v46 += 4 * a7;
      v45 += 4;
    }
    while (v45 < a11);
  }
  return result;
}

uint64_t agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,4u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, int, int);
  uint64_t (*v18)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, unsigned int, unsigned int);
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, unsigned int, unsigned int);
  int v37;
  uint64_t (*v38)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, int, int);
  unsigned int v39;
  unsigned int v40;

  v11 = a6;
  v12 = a5;
  v14 = 32 - __clz(a3 - 1);
  v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2)
    v16 = v15;
  else
    v16 = 0;
  if (((a2 | a7) & 3) != 0)
    v17 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,4u,(TwiddleOrder)0>,false,false>;
  else
    v17 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,4u,(TwiddleOrder)0>,false,true>;
  if (((a2 | a7) & 3) != 0)
    v18 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,4u,(TwiddleOrder)0>,true,false>;
  else
    v18 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,4u,(TwiddleOrder)0>,true,true>;
  v19 = a3 >= 2;
  if (a3 >= 2)
    v20 = v14;
  else
    v20 = 0;
  if (!v19 || v16 <= 2)
  {
    HIDWORD(v35) = a5;
    LODWORD(v35) = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, unsigned int))v17)(result, a2, v20, v16, a8, a9, a7, 0, v35, a6);
  }
  v21 = result;
  v22 = 4 - (a9 & 3);
  if ((a9 & 3) == 0)
    v22 = 0;
  v23 = 8 - (a8 & 7);
  if ((a8 & 7) == 0)
    v23 = 0;
  v24 = ((_BYTE)a8 + (_BYTE)a5) & 7;
  v25 = ((_BYTE)a9 + (_BYTE)a6) & 3;
  v26 = v23 + v24;
  if (v23 + v24 > a5)
    v23 = a5;
  v39 = v20;
  v40 = v23;
  if (v26 > a5)
    v24 = 0;
  if (v22 + v25 <= a6)
    v27 = v22;
  else
    v27 = a6;
  if (v22 + v25 <= a6)
    v28 = ((_BYTE)a9 + (_BYTE)a6) & 3;
  else
    v28 = 0;
  v36 = v18;
  v38 = v17;
  v37 = v24;
  if (v27)
  {
    HIDWORD(v33) = a5;
    LODWORD(v33) = 0;
    result = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, unsigned int))v17)(result, a2, v20, v16, a8, a9, a7, 0, v33, v27);
    v11 -= v27;
  }
  if (v28)
  {
    v11 -= v28;
    *(_QWORD *)((char *)&v34 + 4) = __PAIR64__(v28, v12);
    LODWORD(v34) = v11 + v27;
    v29 = v21;
    v30 = v21;
    v31 = v39;
    result = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _DWORD))v38)(v30, a2, v39, v16, a8, a9, a7, 0, v34, DWORD2(v34));
    v32 = v40;
    if (!v11)
      return result;
  }
  else
  {
    v29 = v21;
    v31 = v39;
    v32 = v40;
    if (!v11)
      return result;
  }
  if (v32)
  {
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, unsigned int))v38)(v29, a2, v31, v16, a8, a9, a7, 0, __PAIR64__(v32, v27), v11);
    v12 -= v40;
  }
  if (v37)
  {
    v12 -= v37;
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, unsigned int))v38)(v29, a2, v31, v16, a8, a9, a7, v12 + v40, __PAIR64__(v37, v27), v11);
  }
  if (v12)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))v36)(v29, a2, v31, v16, a8, a9, a7);
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,4u,(TwiddleOrder)0>,false,true>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  int *v47;
  int v48;
  uint64_t v49;
  int v50;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3)) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4)) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = (int *)(v46 + 4 * a8);
      v48 = a10;
      v49 = v30;
      do
      {
        v50 = *v47++;
        *(_DWORD *)(result + 4 * (v49 + v40)) = v50;
        v49 = (v49 - v12) & v12;
        --v48;
      }
      while (v48);
      v40 = (v40 - v23) & v23;
      v46 += a7;
      ++v45;
    }
    while (v45 != a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,4u,(TwiddleOrder)0>,false,false>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  int *v47;
  int v48;
  uint64_t v49;
  int v50;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3)) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4)) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = (int *)(v46 + 4 * a8);
      v48 = a10;
      v49 = v30;
      do
      {
        v50 = *v47++;
        *(_DWORD *)(result + 4 * (v49 + v40)) = v50;
        v49 = (v49 - v12) & v12;
        --v48;
      }
      while (v48);
      v40 = (v40 - v23) & v23;
      v46 += a7;
      ++v45;
    }
    while (v45 != a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,4u,(TwiddleOrder)0>,true,true>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int32x4_t *v48;
  uint64_t v49;
  int32x4_t *v50;
  int32x4_t v51;
  int32x4_t *v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t *v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3) & 0x7FFFFFF8u) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4) & 0x7FFFFFFCu) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = 0;
      v48 = (int32x4_t *)(v46 + 4 * a8);
      v49 = v30;
      do
      {
        v50 = (int32x4_t *)(result + 4 * (v49 + v40));
        v51 = v48[1];
        v53 = *(int32x4_t *)((char *)v48 + a7);
        v54 = *(int32x4_t *)((char *)&v48[1] + a7);
        v52 = (int32x4_t *)((char *)v48 + a7 + a7);
        v56 = *v52;
        v57 = v52[1];
        v55 = (int32x4_t *)((char *)v52 + a7);
        v58 = *v55;
        v59 = v55[1];
        v60 = vzip2q_s32(*v48, v53);
        *v50 = vzip1q_s32(*v48, v53);
        v50[1] = vzip1q_s32(v56, v58);
        v50[2] = v60;
        v50[3] = vzip2q_s32(v56, v58);
        v50 += 8;
        *v50 = vzip1q_s32(v51, v54);
        v50[1] = vzip1q_s32(v57, v59);
        v50[2] = vzip2q_s32(v51, v54);
        v50[3] = vzip2q_s32(v57, v59);
        v49 = (v49 - v12) & v12;
        v48 += 2;
        v47 += 8;
      }
      while (v47 < a10);
      v40 = (v40 - v23) & v23;
      v46 += 4 * a7;
      v45 += 4;
    }
    while (v45 < a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,4u,(TwiddleOrder)0>,true,false>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int32x4_t *v48;
  uint64_t v49;
  int32x4_t *v50;
  int32x4_t v51;
  int32x4_t *v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t *v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3) & 0x7FFFFFF8u) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4) & 0x7FFFFFFCu) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = 0;
      v48 = (int32x4_t *)(v46 + 4 * a8);
      v49 = v30;
      do
      {
        v50 = (int32x4_t *)(result + 4 * (v49 + v40));
        v51 = v48[1];
        v53 = *(int32x4_t *)((char *)v48 + a7);
        v54 = *(int32x4_t *)((char *)&v48[1] + a7);
        v52 = (int32x4_t *)((char *)v48 + a7 + a7);
        v56 = *v52;
        v57 = v52[1];
        v55 = (int32x4_t *)((char *)v52 + a7);
        v58 = *v55;
        v59 = v55[1];
        v60 = vzip2q_s32(*v48, v53);
        *v50 = vzip1q_s32(*v48, v53);
        v50[1] = vzip1q_s32(v56, v58);
        v50[2] = v60;
        v50[3] = vzip2q_s32(v56, v58);
        v50 += 8;
        *v50 = vzip1q_s32(v51, v54);
        v50[1] = vzip1q_s32(v57, v59);
        v50[2] = vzip2q_s32(v51, v54);
        v50[3] = vzip2q_s32(v57, v59);
        v49 = (v49 - v12) & v12;
        v48 += 2;
        v47 += 8;
      }
      while (v47 < a10);
      v40 = (v40 - v23) & v23;
      v46 += 4 * a7;
      v45 += 4;
    }
    while (v45 < a11);
  }
  return result;
}

uint64_t agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,2u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, int, int);
  uint64_t (*v19)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, unsigned int, unsigned int);
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, unsigned int, unsigned int);
  int v33;
  uint64_t (*v34)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, int, int);
  uint64_t v35;
  unsigned int v36;

  v11 = a6;
  v12 = a5;
  v14 = 32 - __clz(a3 - 1);
  if (a3 >= 2)
    v15 = v14;
  else
    v15 = 0;
  v16 = 32 - __clz(a4 - 1);
  if (a4 >= 2)
    v17 = v16;
  else
    v17 = 0;
  if (((a2 | a7) & 1) != 0)
    v18 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,2u,(TwiddleOrder)0>,false,false>;
  else
    v18 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,2u,(TwiddleOrder)0>,false,true>;
  if (((a2 | a7) & 1) != 0)
    v19 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,2u,(TwiddleOrder)0>,true,false>;
  else
    v19 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,2u,(TwiddleOrder)0>,true,true>;
  if (v17 < 5 || v15 <= 3)
  {
    HIDWORD(v31) = a5;
    LODWORD(v31) = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, unsigned int))v18)(result, a2, v15, v17, a8, a9, a7, 0, v31, a6);
  }
  v35 = result;
  v20 = 32 - (a9 & 0x1F);
  if ((a9 & 0x1F) == 0)
    v20 = 0;
  v21 = 32 - (a8 & 0x1F);
  if ((a8 & 0x1F) == 0)
    v21 = 0;
  v22 = ((_BYTE)a8 + (_BYTE)a5) & 0x1F;
  v23 = ((_BYTE)a9 + (_BYTE)a6) & 0x1F;
  v24 = v21 + v22;
  if (v21 + v22 > a5)
    v21 = a5;
  v36 = v21;
  if (v24 > a5)
    v22 = 0;
  if (v20 + v23 <= a6)
    v25 = v20;
  else
    v25 = a6;
  if (v20 + v23 <= a6)
    v26 = ((_BYTE)a9 + (_BYTE)a6) & 0x1F;
  else
    v26 = 0;
  v32 = v19;
  v34 = v18;
  v33 = v22;
  if (v25)
  {
    HIDWORD(v29) = a5;
    LODWORD(v29) = 0;
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, unsigned int))v18)(result, a2, v15, v17, a8, a9, a7, 0, v29, v25);
    v11 -= v25;
  }
  if (v26)
  {
    v11 -= v26;
    *(_QWORD *)((char *)&v30 + 4) = __PAIR64__(v26, v12);
    LODWORD(v30) = v11 + v25;
    v27 = v35;
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _DWORD))v34)(v35, a2, v15, v17, a8, a9, a7, 0, v30, DWORD2(v30));
    v28 = v36;
    if (!v11)
      return result;
  }
  else
  {
    v27 = v35;
    v28 = v36;
    if (!v11)
      return result;
  }
  if (v28)
  {
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, unsigned int))v34)(v27, a2, v15, v17, a8, a9, a7, 0, __PAIR64__(v28, v25), v11);
    v12 -= v36;
  }
  if (v33)
  {
    v12 -= v33;
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, unsigned int))v34)(v27, a2, v15, v17, a8, a9, a7, v12 + v36, __PAIR64__(v33, v25), v11);
  }
  if (v12)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))v32)(v27, a2, v15, v17, a8, a9, a7);
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,2u,(TwiddleOrder)0>,false,true>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  __int16 *v47;
  int v48;
  uint64_t v49;
  __int16 v50;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3)) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4)) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = (__int16 *)(v46 + 2 * a8);
      v48 = a10;
      v49 = v30;
      do
      {
        v50 = *v47++;
        *(_WORD *)(result + 2 * (v49 + v40)) = v50;
        v49 = (v49 - v12) & v12;
        --v48;
      }
      while (v48);
      v40 = (v40 - v23) & v23;
      v46 += a7;
      ++v45;
    }
    while (v45 != a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,2u,(TwiddleOrder)0>,false,false>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  __int16 *v47;
  int v48;
  uint64_t v49;
  __int16 v50;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3)) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4)) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = (__int16 *)(v46 + 2 * a8);
      v48 = a10;
      v49 = v30;
      do
      {
        v50 = *v47++;
        *(_WORD *)(result + 2 * (v49 + v40)) = v50;
        v49 = (v49 - v12) & v12;
        --v48;
      }
      while (v48);
      v40 = (v40 - v23) & v23;
      v46 += a7;
      ++v45;
    }
    while (v45 != a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,2u,(TwiddleOrder)0>,true,true>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int32x4_t *v49;
  uint64_t v50;
  int16x8_t *v51;
  int32x4_t *v52;
  int32x4_t v53;
  int32x4_t *v54;
  int32x4_t v55;
  int32x4_t *v56;
  int32x4_t v57;
  int32x4_t *v58;
  int32x4_t v59;
  int32x4_t *v60;
  int32x4_t v61;
  int32x4_t *v62;
  int32x4_t v63;
  int32x4_t *v64;
  int32x4_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int32x4_t *v74;
  int32x4_t v75;
  int32x4_t *v76;
  int32x4_t v77;
  int32x4_t *v78;
  int32x4_t v79;
  int32x4_t *v80;
  int32x4_t v81;
  int32x4_t *v82;
  int32x4_t v83;
  int32x4_t *v84;
  int32x4_t v85;
  int32x4_t *v86;
  int32x4_t v87;
  int32x4_t *v88;
  int32x4_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int32x4_t *v98;
  int32x4_t v99;
  int32x4_t *v100;
  int32x4_t v101;
  int32x4_t *v102;
  int32x4_t v103;
  int32x4_t *v104;
  int32x4_t v105;
  int32x4_t *v106;
  int32x4_t v107;
  int32x4_t *v108;
  int32x4_t v109;
  int32x4_t *v110;
  int32x4_t v111;
  int32x4_t *v112;
  int32x4_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int32x4_t *v122;
  int32x4_t v123;
  int32x4_t *v124;
  int32x4_t v125;
  int32x4_t *v126;
  int32x4_t v127;
  int32x4_t *v128;
  int32x4_t v129;
  int32x4_t *v130;
  int32x4_t v131;
  int32x4_t *v132;
  int32x4_t v133;
  int32x4_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int32x4_t *v143;
  int32x4_t *v144;
  int32x4_t v145;
  int32x4_t *v146;
  int32x4_t v147;
  int32x4_t *v148;
  int32x4_t v149;
  int32x4_t *v150;
  int32x4_t v151;
  int32x4_t *v152;
  int32x4_t v153;
  int32x4_t *v154;
  int32x4_t v155;
  int32x4_t *v156;
  int32x4_t v157;
  int32x4_t *v158;
  int32x4_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int32x4_t *v168;
  int32x4_t v169;
  int32x4_t *v170;
  int32x4_t v171;
  int32x4_t *v172;
  int32x4_t v173;
  int32x4_t *v174;
  int32x4_t v175;
  int32x4_t *v176;
  int32x4_t v177;
  int32x4_t *v178;
  int32x4_t v179;
  int32x4_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int32x4_t *v189;
  int32x4_t v190;
  int32x4_t *v191;
  int32x4_t v192;
  int32x4_t *v193;
  int32x4_t v194;
  int32x4_t *v195;
  int32x4_t v196;
  int32x4_t *v197;
  int32x4_t v198;
  int32x4_t *v199;
  int32x4_t v200;
  int32x4_t *v201;
  int32x4_t v202;
  int32x4_t *v203;
  int32x4_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int32x4_t *v213;
  int32x4_t v214;
  int32x4_t *v215;
  int32x4_t v216;
  int32x4_t *v217;
  int32x4_t v218;
  int32x4_t *v219;
  int32x4_t v220;
  int32x4_t *v221;
  int32x4_t v222;
  int32x4_t *v223;
  int32x4_t v224;
  int32x4_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int32x4_t *v234;
  int32x4_t v235;
  int32x4_t *v236;
  int32x4_t v237;
  int32x4_t *v238;
  int32x4_t v239;
  int32x4_t *v240;
  int32x4_t v241;
  int32x4_t *v242;
  int32x4_t v243;
  int32x4_t *v244;
  int32x4_t v245;
  int32x4_t *v246;
  int32x4_t v247;
  int32x4_t *v248;
  int32x4_t v249;
  int16x8_t v250;
  int16x8_t v251;
  int16x8_t v252;
  int16x8_t v253;
  int16x8_t v254;
  int16x8_t v255;
  int16x8_t v256;
  int16x8_t v257;
  int32x4_t *v258;
  int32x4_t v259;
  int32x4_t *v260;
  int32x4_t v261;
  int32x4_t *v262;
  int32x4_t v263;
  int32x4_t *v264;
  int32x4_t v265;
  int32x4_t *v266;
  int32x4_t v267;
  int32x4_t *v268;
  int32x4_t v269;
  int32x4_t *v270;
  int32x4_t v271;
  int32x4_t *v272;
  int32x4_t v273;
  int16x8_t v274;
  int16x8_t v275;
  int16x8_t v276;
  int16x8_t v277;
  int16x8_t v278;
  int16x8_t v279;
  int16x8_t v280;
  int16x8_t v281;
  int32x4_t *v282;
  int32x4_t v283;
  int32x4_t *v284;
  int32x4_t v285;
  int32x4_t *v286;
  int32x4_t v287;
  int32x4_t *v288;
  int32x4_t v289;
  int32x4_t *v290;
  int32x4_t v291;
  int32x4_t *v292;
  int32x4_t v293;
  int32x4_t *v294;
  int32x4_t v295;
  int32x4_t *v296;
  int32x4_t v297;
  int16x8_t v298;
  int16x8_t v299;
  int16x8_t v300;
  int16x8_t v301;
  int16x8_t v302;
  int16x8_t v303;
  int16x8_t v304;
  int16x8_t v305;
  int32x4_t *v306;
  int32x4_t v307;
  int32x4_t *v308;
  int32x4_t v309;
  int32x4_t *v310;
  int32x4_t v311;
  int32x4_t *v312;
  int32x4_t v313;
  int32x4_t *v314;
  int32x4_t v315;
  int32x4_t *v316;
  int32x4_t v317;
  int32x4_t v318;
  int16x8_t v319;
  int16x8_t v320;
  int16x8_t v321;
  int16x8_t v322;
  int16x8_t v323;
  int16x8_t v324;
  int16x8_t v325;
  int16x8_t v326;
  int32x4_t *v327;
  int32x4_t *v328;
  int32x4_t v329;
  int32x4_t *v330;
  int32x4_t v331;
  int32x4_t *v332;
  int32x4_t v333;
  int32x4_t *v334;
  int32x4_t v335;
  int32x4_t *v336;
  int32x4_t v337;
  int32x4_t *v338;
  int32x4_t v339;
  int32x4_t *v340;
  int32x4_t v341;
  int32x4_t *v342;
  int32x4_t v343;
  int16x8_t v344;
  int16x8_t v345;
  int16x8_t v346;
  int16x8_t v347;
  int16x8_t v348;
  int16x8_t v349;
  int16x8_t v350;
  int16x8_t v351;
  int32x4_t *v352;
  int32x4_t v353;
  int32x4_t *v354;
  int32x4_t v355;
  int32x4_t *v356;
  int32x4_t v357;
  int32x4_t *v358;
  int32x4_t v359;
  int32x4_t *v360;
  int32x4_t v361;
  int32x4_t *v362;
  int32x4_t v363;
  int32x4_t v364;
  int16x8_t v365;
  int16x8_t v366;
  int16x8_t v367;
  int16x8_t v368;
  int16x8_t v369;
  int16x8_t v370;
  int16x8_t v371;
  int16x8_t v372;
  int32x4_t *v373;
  int32x4_t v374;
  int32x4_t *v375;
  int32x4_t v376;
  int32x4_t *v377;
  int32x4_t v378;
  int32x4_t *v379;
  int32x4_t v380;
  int32x4_t *v381;
  int32x4_t v382;
  int32x4_t *v383;
  int32x4_t v384;
  int32x4_t *v385;
  int32x4_t v386;
  int32x4_t *v387;
  int32x4_t v388;
  int16x8_t v389;
  int16x8_t v390;
  int16x8_t v391;
  int16x8_t v392;
  int16x8_t v393;
  int16x8_t v394;
  int16x8_t v395;
  int16x8_t v396;
  int32x4_t *v397;
  int32x4_t v398;
  int32x4_t *v399;
  int32x4_t v400;
  int32x4_t *v401;
  int32x4_t v402;
  int32x4_t *v403;
  int32x4_t v404;
  int32x4_t *v405;
  int32x4_t v406;
  int32x4_t *v407;
  int32x4_t v408;
  int32x4_t v409;
  int16x8_t v410;
  int16x8_t v411;
  int16x8_t v412;
  int16x8_t v413;
  int16x8_t v414;
  int16x8_t v415;
  int16x8_t v416;
  int16x8_t v417;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3) & 0x7FFFFFE0u) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4) & 0x7FFFFFE0u) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = 2 * a8;
    v47 = a2 + a9 * a7;
    do
    {
      v48 = 0;
      v49 = (int32x4_t *)(v47 + v46);
      v50 = v30;
      do
      {
        v51 = (int16x8_t *)(result + 2 * (v50 + v40));
        v53 = *(int32x4_t *)((char *)v49 + a7);
        v52 = (int32x4_t *)((char *)v49 + a7 + a7);
        v55 = *v52;
        v54 = (int32x4_t *)((char *)v52 + a7);
        v57 = *v54;
        v56 = (int32x4_t *)((char *)v54 + a7);
        v59 = *v56;
        v58 = (int32x4_t *)((char *)v56 + a7);
        v61 = *v58;
        v60 = (int32x4_t *)((char *)v58 + a7);
        v63 = *v60;
        v62 = (int32x4_t *)((char *)v60 + a7);
        v65 = *v62;
        v64 = (int32x4_t *)((char *)v62 + a7);
        v66 = (int16x8_t)vzip1q_s32(v59, v63);
        v67 = (int16x8_t)vzip2q_s32(v59, v63);
        v68 = (int16x8_t)vzip1q_s32(v61, v65);
        v69 = (int16x8_t)vzip2q_s32(v61, v65);
        v70 = (int16x8_t)vzip1q_s32(*v49, v55);
        v71 = (int16x8_t)vzip2q_s32(*v49, v55);
        v72 = (int16x8_t)vzip1q_s32(v53, v57);
        v73 = (int16x8_t)vzip2q_s32(v53, v57);
        *v51 = vzip1q_s16(v70, v72);
        v51[1] = vzip2q_s16(v70, v72);
        v51[2] = vzip1q_s16(v66, v68);
        v51[3] = vzip2q_s16(v66, v68);
        v51 += 4;
        *v51 = vzip1q_s16(v71, v73);
        v51[1] = vzip2q_s16(v71, v73);
        v51[2] = vzip1q_s16(v67, v69);
        v51[3] = vzip2q_s16(v67, v69);
        v51 += 4;
        v75 = *v64;
        v74 = (int32x4_t *)((char *)v64 + a7);
        v77 = *v74;
        v76 = (int32x4_t *)((char *)v74 + a7);
        v79 = *v76;
        v78 = (int32x4_t *)((char *)v76 + a7);
        v81 = *v78;
        v80 = (int32x4_t *)((char *)v78 + a7);
        v83 = *v80;
        v82 = (int32x4_t *)((char *)v80 + a7);
        v85 = *v82;
        v84 = (int32x4_t *)((char *)v82 + a7);
        v87 = *v84;
        v86 = (int32x4_t *)((char *)v84 + a7);
        v89 = *v86;
        v88 = (int32x4_t *)((char *)v86 + a7);
        v90 = (int16x8_t)vzip1q_s32(v83, v87);
        v91 = (int16x8_t)vzip2q_s32(v83, v87);
        v92 = (int16x8_t)vzip1q_s32(v85, v89);
        v93 = (int16x8_t)vzip2q_s32(v85, v89);
        v94 = (int16x8_t)vzip1q_s32(v75, v79);
        v95 = (int16x8_t)vzip2q_s32(v75, v79);
        v96 = (int16x8_t)vzip1q_s32(v77, v81);
        v97 = (int16x8_t)vzip2q_s32(v77, v81);
        *v51 = vzip1q_s16(v94, v96);
        v51[1] = vzip2q_s16(v94, v96);
        v51[2] = vzip1q_s16(v90, v92);
        v51[3] = vzip2q_s16(v90, v92);
        v51 += 4;
        *v51 = vzip1q_s16(v95, v97);
        v51[1] = vzip2q_s16(v95, v97);
        v51[2] = vzip1q_s16(v91, v93);
        v51[3] = vzip2q_s16(v91, v93);
        v51 += 4;
        v99 = v49[1];
        v98 = (int32x4_t *)((char *)v49 + a7 + 16);
        v101 = *v98;
        v100 = (int32x4_t *)((char *)v98 + a7);
        v103 = *v100;
        v102 = (int32x4_t *)((char *)v100 + a7);
        v105 = *v102;
        v104 = (int32x4_t *)((char *)v102 + a7);
        v107 = *v104;
        v106 = (int32x4_t *)((char *)v104 + a7);
        v109 = *v106;
        v108 = (int32x4_t *)((char *)v106 + a7);
        v111 = *v108;
        v110 = (int32x4_t *)((char *)v108 + a7);
        v113 = *v110;
        v112 = (int32x4_t *)((char *)v110 + a7);
        v114 = (int16x8_t)vzip1q_s32(v107, v111);
        v115 = (int16x8_t)vzip2q_s32(v107, v111);
        v116 = (int16x8_t)vzip1q_s32(v109, v113);
        v117 = (int16x8_t)vzip2q_s32(v109, v113);
        v118 = (int16x8_t)vzip1q_s32(v99, v103);
        v119 = (int16x8_t)vzip2q_s32(v99, v103);
        v120 = (int16x8_t)vzip1q_s32(v101, v105);
        v121 = (int16x8_t)vzip2q_s32(v101, v105);
        *v51 = vzip1q_s16(v118, v120);
        v51[1] = vzip2q_s16(v118, v120);
        v51[2] = vzip1q_s16(v114, v116);
        v51[3] = vzip2q_s16(v114, v116);
        v51 += 4;
        *v51 = vzip1q_s16(v119, v121);
        v51[1] = vzip2q_s16(v119, v121);
        v51[2] = vzip1q_s16(v115, v117);
        v51[3] = vzip2q_s16(v115, v117);
        v51 += 4;
        v123 = *v112;
        v122 = (int32x4_t *)((char *)v112 + a7);
        v125 = *v122;
        v124 = (int32x4_t *)((char *)v122 + a7);
        v127 = *v124;
        v126 = (int32x4_t *)((char *)v124 + a7);
        v129 = *v126;
        v128 = (int32x4_t *)((char *)v126 + a7);
        v131 = *v128;
        v130 = (int32x4_t *)((char *)v128 + a7);
        v133 = *v130;
        v132 = (int32x4_t *)((char *)v130 + a7);
        v134 = *(int32x4_t *)((char *)v132 + a7);
        v135 = (int16x8_t)vzip1q_s32(v131, *v132);
        v136 = (int16x8_t)vzip2q_s32(v131, *v132);
        v137 = (int16x8_t)vzip1q_s32(v133, v134);
        v138 = (int16x8_t)vzip2q_s32(v133, v134);
        v139 = (int16x8_t)vzip1q_s32(v123, v127);
        v140 = (int16x8_t)vzip2q_s32(v123, v127);
        v141 = (int16x8_t)vzip1q_s32(v125, v129);
        v142 = (int16x8_t)vzip2q_s32(v125, v129);
        *v51 = vzip1q_s16(v139, v141);
        v51[1] = vzip2q_s16(v139, v141);
        v51[2] = vzip1q_s16(v135, v137);
        v51[3] = vzip2q_s16(v135, v137);
        v51 += 4;
        *v51 = vzip1q_s16(v140, v142);
        v51[1] = vzip2q_s16(v140, v142);
        v51[2] = vzip1q_s16(v136, v138);
        v51[3] = vzip2q_s16(v136, v138);
        v51 += 4;
        v143 = v88 + 1;
        v145 = *v88;
        v144 = (int32x4_t *)((char *)v88 + a7);
        v147 = *v144;
        v146 = (int32x4_t *)((char *)v144 + a7);
        v149 = *v146;
        v148 = (int32x4_t *)((char *)v146 + a7);
        v151 = *v148;
        v150 = (int32x4_t *)((char *)v148 + a7);
        v153 = *v150;
        v152 = (int32x4_t *)((char *)v150 + a7);
        v155 = *v152;
        v154 = (int32x4_t *)((char *)v152 + a7);
        v157 = *v154;
        v156 = (int32x4_t *)((char *)v154 + a7);
        v159 = *v156;
        v158 = (int32x4_t *)((char *)v156 + a7);
        v160 = (int16x8_t)vzip1q_s32(v153, v157);
        v161 = (int16x8_t)vzip2q_s32(v153, v157);
        v162 = (int16x8_t)vzip1q_s32(v155, v159);
        v163 = (int16x8_t)vzip2q_s32(v155, v159);
        v164 = (int16x8_t)vzip1q_s32(v145, v149);
        v165 = (int16x8_t)vzip2q_s32(v145, v149);
        v166 = (int16x8_t)vzip1q_s32(v147, v151);
        v167 = (int16x8_t)vzip2q_s32(v147, v151);
        *v51 = vzip1q_s16(v164, v166);
        v51[1] = vzip2q_s16(v164, v166);
        v51[2] = vzip1q_s16(v160, v162);
        v51[3] = vzip2q_s16(v160, v162);
        v51 += 4;
        *v51 = vzip1q_s16(v165, v167);
        v51[1] = vzip2q_s16(v165, v167);
        v51[2] = vzip1q_s16(v161, v163);
        v51[3] = vzip2q_s16(v161, v163);
        v51 += 4;
        v169 = *v158;
        v168 = (int32x4_t *)((char *)v158 + a7);
        v171 = *v168;
        v170 = (int32x4_t *)((char *)v168 + a7);
        v173 = *v170;
        v172 = (int32x4_t *)((char *)v170 + a7);
        v175 = *v172;
        v174 = (int32x4_t *)((char *)v172 + a7);
        v177 = *v174;
        v176 = (int32x4_t *)((char *)v174 + a7);
        v179 = *v176;
        v178 = (int32x4_t *)((char *)v176 + a7);
        v180 = *(int32x4_t *)((char *)v178 + a7);
        v181 = (int16x8_t)vzip1q_s32(v177, *v178);
        v182 = (int16x8_t)vzip2q_s32(v177, *v178);
        v183 = (int16x8_t)vzip1q_s32(v179, v180);
        v184 = (int16x8_t)vzip2q_s32(v179, v180);
        v185 = (int16x8_t)vzip1q_s32(v169, v173);
        v186 = (int16x8_t)vzip2q_s32(v169, v173);
        v187 = (int16x8_t)vzip1q_s32(v171, v175);
        v188 = (int16x8_t)vzip2q_s32(v171, v175);
        *v51 = vzip1q_s16(v185, v187);
        v51[1] = vzip2q_s16(v185, v187);
        v51[2] = vzip1q_s16(v181, v183);
        v51[3] = vzip2q_s16(v181, v183);
        v51 += 4;
        *v51 = vzip1q_s16(v186, v188);
        v51[1] = vzip2q_s16(v186, v188);
        v51[2] = vzip1q_s16(v182, v184);
        v51[3] = vzip2q_s16(v182, v184);
        v51 += 4;
        v190 = *v143;
        v189 = (int32x4_t *)((char *)v143 + a7);
        v192 = *v189;
        v191 = (int32x4_t *)((char *)v189 + a7);
        v194 = *v191;
        v193 = (int32x4_t *)((char *)v191 + a7);
        v196 = *v193;
        v195 = (int32x4_t *)((char *)v193 + a7);
        v198 = *v195;
        v197 = (int32x4_t *)((char *)v195 + a7);
        v200 = *v197;
        v199 = (int32x4_t *)((char *)v197 + a7);
        v202 = *v199;
        v201 = (int32x4_t *)((char *)v199 + a7);
        v204 = *v201;
        v203 = (int32x4_t *)((char *)v201 + a7);
        v205 = (int16x8_t)vzip1q_s32(v198, v202);
        v206 = (int16x8_t)vzip2q_s32(v198, v202);
        v207 = (int16x8_t)vzip1q_s32(v200, v204);
        v208 = (int16x8_t)vzip2q_s32(v200, v204);
        v209 = (int16x8_t)vzip1q_s32(v190, v194);
        v210 = (int16x8_t)vzip2q_s32(v190, v194);
        v211 = (int16x8_t)vzip1q_s32(v192, v196);
        v212 = (int16x8_t)vzip2q_s32(v192, v196);
        *v51 = vzip1q_s16(v209, v211);
        v51[1] = vzip2q_s16(v209, v211);
        v51[2] = vzip1q_s16(v205, v207);
        v51[3] = vzip2q_s16(v205, v207);
        v51 += 4;
        *v51 = vzip1q_s16(v210, v212);
        v51[1] = vzip2q_s16(v210, v212);
        v51[2] = vzip1q_s16(v206, v208);
        v51[3] = vzip2q_s16(v206, v208);
        v51 += 4;
        v214 = *v203;
        v213 = (int32x4_t *)((char *)v203 + a7);
        v216 = *v213;
        v215 = (int32x4_t *)((char *)v213 + a7);
        v218 = *v215;
        v217 = (int32x4_t *)((char *)v215 + a7);
        v220 = *v217;
        v219 = (int32x4_t *)((char *)v217 + a7);
        v222 = *v219;
        v221 = (int32x4_t *)((char *)v219 + a7);
        v224 = *v221;
        v223 = (int32x4_t *)((char *)v221 + a7);
        v225 = *(int32x4_t *)((char *)v223 + a7);
        v226 = (int16x8_t)vzip1q_s32(v222, *v223);
        v227 = (int16x8_t)vzip2q_s32(v222, *v223);
        v228 = (int16x8_t)vzip1q_s32(v224, v225);
        v229 = (int16x8_t)vzip2q_s32(v224, v225);
        v230 = (int16x8_t)vzip1q_s32(v214, v218);
        v231 = (int16x8_t)vzip2q_s32(v214, v218);
        v232 = (int16x8_t)vzip1q_s32(v216, v220);
        v233 = (int16x8_t)vzip2q_s32(v216, v220);
        *v51 = vzip1q_s16(v230, v232);
        v51[1] = vzip2q_s16(v230, v232);
        v51[2] = vzip1q_s16(v226, v228);
        v51[3] = vzip2q_s16(v226, v228);
        v51 += 4;
        *v51 = vzip1q_s16(v231, v233);
        v51[1] = vzip2q_s16(v231, v233);
        v51[2] = vzip1q_s16(v227, v229);
        v51[3] = vzip2q_s16(v227, v229);
        v51 += 4;
        v235 = v49[2];
        v234 = (int32x4_t *)((char *)v49 + a7 + 32);
        v237 = *v234;
        v236 = (int32x4_t *)((char *)v234 + a7);
        v239 = *v236;
        v238 = (int32x4_t *)((char *)v236 + a7);
        v241 = *v238;
        v240 = (int32x4_t *)((char *)v238 + a7);
        v243 = *v240;
        v242 = (int32x4_t *)((char *)v240 + a7);
        v245 = *v242;
        v244 = (int32x4_t *)((char *)v242 + a7);
        v247 = *v244;
        v246 = (int32x4_t *)((char *)v244 + a7);
        v249 = *v246;
        v248 = (int32x4_t *)((char *)v246 + a7);
        v250 = (int16x8_t)vzip1q_s32(v243, v247);
        v251 = (int16x8_t)vzip2q_s32(v243, v247);
        v252 = (int16x8_t)vzip1q_s32(v245, v249);
        v253 = (int16x8_t)vzip2q_s32(v245, v249);
        v254 = (int16x8_t)vzip1q_s32(v235, v239);
        v255 = (int16x8_t)vzip2q_s32(v235, v239);
        v256 = (int16x8_t)vzip1q_s32(v237, v241);
        v257 = (int16x8_t)vzip2q_s32(v237, v241);
        *v51 = vzip1q_s16(v254, v256);
        v51[1] = vzip2q_s16(v254, v256);
        v51[2] = vzip1q_s16(v250, v252);
        v51[3] = vzip2q_s16(v250, v252);
        v51 += 4;
        *v51 = vzip1q_s16(v255, v257);
        v51[1] = vzip2q_s16(v255, v257);
        v51[2] = vzip1q_s16(v251, v253);
        v51[3] = vzip2q_s16(v251, v253);
        v51 += 4;
        v259 = *v248;
        v258 = (int32x4_t *)((char *)v248 + a7);
        v261 = *v258;
        v260 = (int32x4_t *)((char *)v258 + a7);
        v263 = *v260;
        v262 = (int32x4_t *)((char *)v260 + a7);
        v265 = *v262;
        v264 = (int32x4_t *)((char *)v262 + a7);
        v267 = *v264;
        v266 = (int32x4_t *)((char *)v264 + a7);
        v269 = *v266;
        v268 = (int32x4_t *)((char *)v266 + a7);
        v271 = *v268;
        v270 = (int32x4_t *)((char *)v268 + a7);
        v273 = *v270;
        v272 = (int32x4_t *)((char *)v270 + a7);
        v274 = (int16x8_t)vzip1q_s32(v267, v271);
        v275 = (int16x8_t)vzip2q_s32(v267, v271);
        v276 = (int16x8_t)vzip1q_s32(v269, v273);
        v277 = (int16x8_t)vzip2q_s32(v269, v273);
        v278 = (int16x8_t)vzip1q_s32(v259, v263);
        v279 = (int16x8_t)vzip2q_s32(v259, v263);
        v280 = (int16x8_t)vzip1q_s32(v261, v265);
        v281 = (int16x8_t)vzip2q_s32(v261, v265);
        *v51 = vzip1q_s16(v278, v280);
        v51[1] = vzip2q_s16(v278, v280);
        v51[2] = vzip1q_s16(v274, v276);
        v51[3] = vzip2q_s16(v274, v276);
        v51 += 4;
        *v51 = vzip1q_s16(v279, v281);
        v51[1] = vzip2q_s16(v279, v281);
        v51[2] = vzip1q_s16(v275, v277);
        v51[3] = vzip2q_s16(v275, v277);
        v51 += 4;
        v283 = v49[3];
        v282 = (int32x4_t *)((char *)v49 + a7 + 48);
        v285 = *v282;
        v284 = (int32x4_t *)((char *)v282 + a7);
        v287 = *v284;
        v286 = (int32x4_t *)((char *)v284 + a7);
        v289 = *v286;
        v288 = (int32x4_t *)((char *)v286 + a7);
        v291 = *v288;
        v290 = (int32x4_t *)((char *)v288 + a7);
        v293 = *v290;
        v292 = (int32x4_t *)((char *)v290 + a7);
        v295 = *v292;
        v294 = (int32x4_t *)((char *)v292 + a7);
        v297 = *v294;
        v296 = (int32x4_t *)((char *)v294 + a7);
        v298 = (int16x8_t)vzip1q_s32(v291, v295);
        v299 = (int16x8_t)vzip2q_s32(v291, v295);
        v300 = (int16x8_t)vzip1q_s32(v293, v297);
        v301 = (int16x8_t)vzip2q_s32(v293, v297);
        v302 = (int16x8_t)vzip1q_s32(v283, v287);
        v303 = (int16x8_t)vzip2q_s32(v283, v287);
        v304 = (int16x8_t)vzip1q_s32(v285, v289);
        v305 = (int16x8_t)vzip2q_s32(v285, v289);
        *v51 = vzip1q_s16(v302, v304);
        v51[1] = vzip2q_s16(v302, v304);
        v51[2] = vzip1q_s16(v298, v300);
        v51[3] = vzip2q_s16(v298, v300);
        v51 += 4;
        *v51 = vzip1q_s16(v303, v305);
        v51[1] = vzip2q_s16(v303, v305);
        v51[2] = vzip1q_s16(v299, v301);
        v51[3] = vzip2q_s16(v299, v301);
        v51 += 4;
        v307 = *v296;
        v306 = (int32x4_t *)((char *)v296 + a7);
        v309 = *v306;
        v308 = (int32x4_t *)((char *)v306 + a7);
        v311 = *v308;
        v310 = (int32x4_t *)((char *)v308 + a7);
        v313 = *v310;
        v312 = (int32x4_t *)((char *)v310 + a7);
        v315 = *v312;
        v314 = (int32x4_t *)((char *)v312 + a7);
        v317 = *v314;
        v316 = (int32x4_t *)((char *)v314 + a7);
        v318 = *(int32x4_t *)((char *)v316 + a7);
        v319 = (int16x8_t)vzip1q_s32(v315, *v316);
        v320 = (int16x8_t)vzip2q_s32(v315, *v316);
        v321 = (int16x8_t)vzip1q_s32(v317, v318);
        v322 = (int16x8_t)vzip2q_s32(v317, v318);
        v323 = (int16x8_t)vzip1q_s32(v307, v311);
        v324 = (int16x8_t)vzip2q_s32(v307, v311);
        v325 = (int16x8_t)vzip1q_s32(v309, v313);
        v326 = (int16x8_t)vzip2q_s32(v309, v313);
        *v51 = vzip1q_s16(v323, v325);
        v51[1] = vzip2q_s16(v323, v325);
        v51[2] = vzip1q_s16(v319, v321);
        v51[3] = vzip2q_s16(v319, v321);
        v51 += 4;
        *v51 = vzip1q_s16(v324, v326);
        v51[1] = vzip2q_s16(v324, v326);
        v51[2] = vzip1q_s16(v320, v322);
        v51[3] = vzip2q_s16(v320, v322);
        v51 += 4;
        v327 = v272 + 1;
        v329 = *v272;
        v328 = (int32x4_t *)((char *)v272 + a7);
        v331 = *v328;
        v330 = (int32x4_t *)((char *)v328 + a7);
        v333 = *v330;
        v332 = (int32x4_t *)((char *)v330 + a7);
        v335 = *v332;
        v334 = (int32x4_t *)((char *)v332 + a7);
        v337 = *v334;
        v336 = (int32x4_t *)((char *)v334 + a7);
        v339 = *v336;
        v338 = (int32x4_t *)((char *)v336 + a7);
        v341 = *v338;
        v340 = (int32x4_t *)((char *)v338 + a7);
        v343 = *v340;
        v342 = (int32x4_t *)((char *)v340 + a7);
        v344 = (int16x8_t)vzip1q_s32(v337, v341);
        v345 = (int16x8_t)vzip2q_s32(v337, v341);
        v346 = (int16x8_t)vzip1q_s32(v339, v343);
        v347 = (int16x8_t)vzip2q_s32(v339, v343);
        v348 = (int16x8_t)vzip1q_s32(v329, v333);
        v349 = (int16x8_t)vzip2q_s32(v329, v333);
        v350 = (int16x8_t)vzip1q_s32(v331, v335);
        v351 = (int16x8_t)vzip2q_s32(v331, v335);
        *v51 = vzip1q_s16(v348, v350);
        v51[1] = vzip2q_s16(v348, v350);
        v51[2] = vzip1q_s16(v344, v346);
        v51[3] = vzip2q_s16(v344, v346);
        v51 += 4;
        *v51 = vzip1q_s16(v349, v351);
        v51[1] = vzip2q_s16(v349, v351);
        v51[2] = vzip1q_s16(v345, v347);
        v51[3] = vzip2q_s16(v345, v347);
        v51 += 4;
        v353 = *v342;
        v352 = (int32x4_t *)((char *)v342 + a7);
        v355 = *v352;
        v354 = (int32x4_t *)((char *)v352 + a7);
        v357 = *v354;
        v356 = (int32x4_t *)((char *)v354 + a7);
        v359 = *v356;
        v358 = (int32x4_t *)((char *)v356 + a7);
        v361 = *v358;
        v360 = (int32x4_t *)((char *)v358 + a7);
        v363 = *v360;
        v362 = (int32x4_t *)((char *)v360 + a7);
        v364 = *(int32x4_t *)((char *)v362 + a7);
        v365 = (int16x8_t)vzip1q_s32(v361, *v362);
        v366 = (int16x8_t)vzip2q_s32(v361, *v362);
        v367 = (int16x8_t)vzip1q_s32(v363, v364);
        v368 = (int16x8_t)vzip2q_s32(v363, v364);
        v369 = (int16x8_t)vzip1q_s32(v353, v357);
        v370 = (int16x8_t)vzip2q_s32(v353, v357);
        v371 = (int16x8_t)vzip1q_s32(v355, v359);
        v372 = (int16x8_t)vzip2q_s32(v355, v359);
        *v51 = vzip1q_s16(v369, v371);
        v51[1] = vzip2q_s16(v369, v371);
        v51[2] = vzip1q_s16(v365, v367);
        v51[3] = vzip2q_s16(v365, v367);
        v51 += 4;
        *v51 = vzip1q_s16(v370, v372);
        v51[1] = vzip2q_s16(v370, v372);
        v51[2] = vzip1q_s16(v366, v368);
        v51[3] = vzip2q_s16(v366, v368);
        v51 += 4;
        v374 = *v327;
        v373 = (int32x4_t *)((char *)v327 + a7);
        v376 = *v373;
        v375 = (int32x4_t *)((char *)v373 + a7);
        v378 = *v375;
        v377 = (int32x4_t *)((char *)v375 + a7);
        v380 = *v377;
        v379 = (int32x4_t *)((char *)v377 + a7);
        v382 = *v379;
        v381 = (int32x4_t *)((char *)v379 + a7);
        v384 = *v381;
        v383 = (int32x4_t *)((char *)v381 + a7);
        v386 = *v383;
        v385 = (int32x4_t *)((char *)v383 + a7);
        v388 = *v385;
        v387 = (int32x4_t *)((char *)v385 + a7);
        v389 = (int16x8_t)vzip1q_s32(v382, v386);
        v390 = (int16x8_t)vzip2q_s32(v382, v386);
        v391 = (int16x8_t)vzip1q_s32(v384, v388);
        v392 = (int16x8_t)vzip2q_s32(v384, v388);
        v393 = (int16x8_t)vzip1q_s32(v374, v378);
        v394 = (int16x8_t)vzip2q_s32(v374, v378);
        v395 = (int16x8_t)vzip1q_s32(v376, v380);
        v396 = (int16x8_t)vzip2q_s32(v376, v380);
        *v51 = vzip1q_s16(v393, v395);
        v51[1] = vzip2q_s16(v393, v395);
        v51[2] = vzip1q_s16(v389, v391);
        v51[3] = vzip2q_s16(v389, v391);
        v51 += 4;
        *v51 = vzip1q_s16(v394, v396);
        v51[1] = vzip2q_s16(v394, v396);
        v51[2] = vzip1q_s16(v390, v392);
        v51[3] = vzip2q_s16(v390, v392);
        v51 += 4;
        v398 = *v387;
        v397 = (int32x4_t *)((char *)v387 + a7);
        v400 = *v397;
        v399 = (int32x4_t *)((char *)v397 + a7);
        v402 = *v399;
        v401 = (int32x4_t *)((char *)v399 + a7);
        v404 = *v401;
        v403 = (int32x4_t *)((char *)v401 + a7);
        v406 = *v403;
        v405 = (int32x4_t *)((char *)v403 + a7);
        v408 = *v405;
        v407 = (int32x4_t *)((char *)v405 + a7);
        v409 = *(int32x4_t *)((char *)v407 + a7);
        v410 = (int16x8_t)vzip1q_s32(v406, *v407);
        v411 = (int16x8_t)vzip2q_s32(v406, *v407);
        v412 = (int16x8_t)vzip1q_s32(v408, v409);
        v413 = (int16x8_t)vzip2q_s32(v408, v409);
        v414 = (int16x8_t)vzip1q_s32(v398, v402);
        v415 = (int16x8_t)vzip2q_s32(v398, v402);
        v416 = (int16x8_t)vzip1q_s32(v400, v404);
        v417 = (int16x8_t)vzip2q_s32(v400, v404);
        *v51 = vzip1q_s16(v414, v416);
        v51[1] = vzip2q_s16(v414, v416);
        v51[2] = vzip1q_s16(v410, v412);
        v51[3] = vzip2q_s16(v410, v412);
        v51 += 4;
        *v51 = vzip1q_s16(v415, v417);
        v51[1] = vzip2q_s16(v415, v417);
        v51[2] = vzip1q_s16(v411, v413);
        v51[3] = vzip2q_s16(v411, v413);
        v50 = (v50 - v12) & v12;
        v48 += 32;
        v49 += 4;
      }
      while (v48 < a10);
      v40 = (v40 - v23) & v23;
      v47 += 32 * a7;
      v45 += 32;
    }
    while (v45 < a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,1ul,2u,(TwiddleOrder)0>,true,false>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int32x4_t *v49;
  uint64_t v50;
  int16x8_t *v51;
  int32x4_t *v52;
  int32x4_t v53;
  int32x4_t *v54;
  int32x4_t v55;
  int32x4_t *v56;
  int32x4_t v57;
  int32x4_t *v58;
  int32x4_t v59;
  int32x4_t *v60;
  int32x4_t v61;
  int32x4_t *v62;
  int32x4_t v63;
  int32x4_t *v64;
  int32x4_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int32x4_t *v74;
  int32x4_t v75;
  int32x4_t *v76;
  int32x4_t v77;
  int32x4_t *v78;
  int32x4_t v79;
  int32x4_t *v80;
  int32x4_t v81;
  int32x4_t *v82;
  int32x4_t v83;
  int32x4_t *v84;
  int32x4_t v85;
  int32x4_t *v86;
  int32x4_t v87;
  int32x4_t *v88;
  int32x4_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int32x4_t *v98;
  int32x4_t v99;
  int32x4_t *v100;
  int32x4_t v101;
  int32x4_t *v102;
  int32x4_t v103;
  int32x4_t *v104;
  int32x4_t v105;
  int32x4_t *v106;
  int32x4_t v107;
  int32x4_t *v108;
  int32x4_t v109;
  int32x4_t *v110;
  int32x4_t v111;
  int32x4_t *v112;
  int32x4_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int32x4_t *v122;
  int32x4_t v123;
  int32x4_t *v124;
  int32x4_t v125;
  int32x4_t *v126;
  int32x4_t v127;
  int32x4_t *v128;
  int32x4_t v129;
  int32x4_t *v130;
  int32x4_t v131;
  int32x4_t *v132;
  int32x4_t v133;
  int32x4_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int32x4_t *v143;
  int32x4_t *v144;
  int32x4_t v145;
  int32x4_t *v146;
  int32x4_t v147;
  int32x4_t *v148;
  int32x4_t v149;
  int32x4_t *v150;
  int32x4_t v151;
  int32x4_t *v152;
  int32x4_t v153;
  int32x4_t *v154;
  int32x4_t v155;
  int32x4_t *v156;
  int32x4_t v157;
  int32x4_t *v158;
  int32x4_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int32x4_t *v168;
  int32x4_t v169;
  int32x4_t *v170;
  int32x4_t v171;
  int32x4_t *v172;
  int32x4_t v173;
  int32x4_t *v174;
  int32x4_t v175;
  int32x4_t *v176;
  int32x4_t v177;
  int32x4_t *v178;
  int32x4_t v179;
  int32x4_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int32x4_t *v189;
  int32x4_t v190;
  int32x4_t *v191;
  int32x4_t v192;
  int32x4_t *v193;
  int32x4_t v194;
  int32x4_t *v195;
  int32x4_t v196;
  int32x4_t *v197;
  int32x4_t v198;
  int32x4_t *v199;
  int32x4_t v200;
  int32x4_t *v201;
  int32x4_t v202;
  int32x4_t *v203;
  int32x4_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int32x4_t *v213;
  int32x4_t v214;
  int32x4_t *v215;
  int32x4_t v216;
  int32x4_t *v217;
  int32x4_t v218;
  int32x4_t *v219;
  int32x4_t v220;
  int32x4_t *v221;
  int32x4_t v222;
  int32x4_t *v223;
  int32x4_t v224;
  int32x4_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int32x4_t *v234;
  int32x4_t v235;
  int32x4_t *v236;
  int32x4_t v237;
  int32x4_t *v238;
  int32x4_t v239;
  int32x4_t *v240;
  int32x4_t v241;
  int32x4_t *v242;
  int32x4_t v243;
  int32x4_t *v244;
  int32x4_t v245;
  int32x4_t *v246;
  int32x4_t v247;
  int32x4_t *v248;
  int32x4_t v249;
  int16x8_t v250;
  int16x8_t v251;
  int16x8_t v252;
  int16x8_t v253;
  int16x8_t v254;
  int16x8_t v255;
  int16x8_t v256;
  int16x8_t v257;
  int32x4_t *v258;
  int32x4_t v259;
  int32x4_t *v260;
  int32x4_t v261;
  int32x4_t *v262;
  int32x4_t v263;
  int32x4_t *v264;
  int32x4_t v265;
  int32x4_t *v266;
  int32x4_t v267;
  int32x4_t *v268;
  int32x4_t v269;
  int32x4_t *v270;
  int32x4_t v271;
  int32x4_t *v272;
  int32x4_t v273;
  int16x8_t v274;
  int16x8_t v275;
  int16x8_t v276;
  int16x8_t v277;
  int16x8_t v278;
  int16x8_t v279;
  int16x8_t v280;
  int16x8_t v281;
  int32x4_t *v282;
  int32x4_t v283;
  int32x4_t *v284;
  int32x4_t v285;
  int32x4_t *v286;
  int32x4_t v287;
  int32x4_t *v288;
  int32x4_t v289;
  int32x4_t *v290;
  int32x4_t v291;
  int32x4_t *v292;
  int32x4_t v293;
  int32x4_t *v294;
  int32x4_t v295;
  int32x4_t *v296;
  int32x4_t v297;
  int16x8_t v298;
  int16x8_t v299;
  int16x8_t v300;
  int16x8_t v301;
  int16x8_t v302;
  int16x8_t v303;
  int16x8_t v304;
  int16x8_t v305;
  int32x4_t *v306;
  int32x4_t v307;
  int32x4_t *v308;
  int32x4_t v309;
  int32x4_t *v310;
  int32x4_t v311;
  int32x4_t *v312;
  int32x4_t v313;
  int32x4_t *v314;
  int32x4_t v315;
  int32x4_t *v316;
  int32x4_t v317;
  int32x4_t v318;
  int16x8_t v319;
  int16x8_t v320;
  int16x8_t v321;
  int16x8_t v322;
  int16x8_t v323;
  int16x8_t v324;
  int16x8_t v325;
  int16x8_t v326;
  int32x4_t *v327;
  int32x4_t *v328;
  int32x4_t v329;
  int32x4_t *v330;
  int32x4_t v331;
  int32x4_t *v332;
  int32x4_t v333;
  int32x4_t *v334;
  int32x4_t v335;
  int32x4_t *v336;
  int32x4_t v337;
  int32x4_t *v338;
  int32x4_t v339;
  int32x4_t *v340;
  int32x4_t v341;
  int32x4_t *v342;
  int32x4_t v343;
  int16x8_t v344;
  int16x8_t v345;
  int16x8_t v346;
  int16x8_t v347;
  int16x8_t v348;
  int16x8_t v349;
  int16x8_t v350;
  int16x8_t v351;
  int32x4_t *v352;
  int32x4_t v353;
  int32x4_t *v354;
  int32x4_t v355;
  int32x4_t *v356;
  int32x4_t v357;
  int32x4_t *v358;
  int32x4_t v359;
  int32x4_t *v360;
  int32x4_t v361;
  int32x4_t *v362;
  int32x4_t v363;
  int32x4_t v364;
  int16x8_t v365;
  int16x8_t v366;
  int16x8_t v367;
  int16x8_t v368;
  int16x8_t v369;
  int16x8_t v370;
  int16x8_t v371;
  int16x8_t v372;
  int32x4_t *v373;
  int32x4_t v374;
  int32x4_t *v375;
  int32x4_t v376;
  int32x4_t *v377;
  int32x4_t v378;
  int32x4_t *v379;
  int32x4_t v380;
  int32x4_t *v381;
  int32x4_t v382;
  int32x4_t *v383;
  int32x4_t v384;
  int32x4_t *v385;
  int32x4_t v386;
  int32x4_t *v387;
  int32x4_t v388;
  int16x8_t v389;
  int16x8_t v390;
  int16x8_t v391;
  int16x8_t v392;
  int16x8_t v393;
  int16x8_t v394;
  int16x8_t v395;
  int16x8_t v396;
  int32x4_t *v397;
  int32x4_t v398;
  int32x4_t *v399;
  int32x4_t v400;
  int32x4_t *v401;
  int32x4_t v402;
  int32x4_t *v403;
  int32x4_t v404;
  int32x4_t *v405;
  int32x4_t v406;
  int32x4_t *v407;
  int32x4_t v408;
  int32x4_t v409;
  int16x8_t v410;
  int16x8_t v411;
  int16x8_t v412;
  int16x8_t v413;
  int16x8_t v414;
  int16x8_t v415;
  int16x8_t v416;
  int16x8_t v417;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3) & 0x7FFFFFE0u) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4) & 0x7FFFFFE0u) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = 2 * a8;
    v47 = a2 + a9 * a7;
    do
    {
      v48 = 0;
      v49 = (int32x4_t *)(v47 + v46);
      v50 = v30;
      do
      {
        v51 = (int16x8_t *)(result + 2 * (v50 + v40));
        v53 = *(int32x4_t *)((char *)v49 + a7);
        v52 = (int32x4_t *)((char *)v49 + a7 + a7);
        v55 = *v52;
        v54 = (int32x4_t *)((char *)v52 + a7);
        v57 = *v54;
        v56 = (int32x4_t *)((char *)v54 + a7);
        v59 = *v56;
        v58 = (int32x4_t *)((char *)v56 + a7);
        v61 = *v58;
        v60 = (int32x4_t *)((char *)v58 + a7);
        v63 = *v60;
        v62 = (int32x4_t *)((char *)v60 + a7);
        v65 = *v62;
        v64 = (int32x4_t *)((char *)v62 + a7);
        v66 = (int16x8_t)vzip1q_s32(v59, v63);
        v67 = (int16x8_t)vzip2q_s32(v59, v63);
        v68 = (int16x8_t)vzip1q_s32(v61, v65);
        v69 = (int16x8_t)vzip2q_s32(v61, v65);
        v70 = (int16x8_t)vzip1q_s32(*v49, v55);
        v71 = (int16x8_t)vzip2q_s32(*v49, v55);
        v72 = (int16x8_t)vzip1q_s32(v53, v57);
        v73 = (int16x8_t)vzip2q_s32(v53, v57);
        *v51 = vzip1q_s16(v70, v72);
        v51[1] = vzip2q_s16(v70, v72);
        v51[2] = vzip1q_s16(v66, v68);
        v51[3] = vzip2q_s16(v66, v68);
        v51 += 4;
        *v51 = vzip1q_s16(v71, v73);
        v51[1] = vzip2q_s16(v71, v73);
        v51[2] = vzip1q_s16(v67, v69);
        v51[3] = vzip2q_s16(v67, v69);
        v51 += 4;
        v75 = *v64;
        v74 = (int32x4_t *)((char *)v64 + a7);
        v77 = *v74;
        v76 = (int32x4_t *)((char *)v74 + a7);
        v79 = *v76;
        v78 = (int32x4_t *)((char *)v76 + a7);
        v81 = *v78;
        v80 = (int32x4_t *)((char *)v78 + a7);
        v83 = *v80;
        v82 = (int32x4_t *)((char *)v80 + a7);
        v85 = *v82;
        v84 = (int32x4_t *)((char *)v82 + a7);
        v87 = *v84;
        v86 = (int32x4_t *)((char *)v84 + a7);
        v89 = *v86;
        v88 = (int32x4_t *)((char *)v86 + a7);
        v90 = (int16x8_t)vzip1q_s32(v83, v87);
        v91 = (int16x8_t)vzip2q_s32(v83, v87);
        v92 = (int16x8_t)vzip1q_s32(v85, v89);
        v93 = (int16x8_t)vzip2q_s32(v85, v89);
        v94 = (int16x8_t)vzip1q_s32(v75, v79);
        v95 = (int16x8_t)vzip2q_s32(v75, v79);
        v96 = (int16x8_t)vzip1q_s32(v77, v81);
        v97 = (int16x8_t)vzip2q_s32(v77, v81);
        *v51 = vzip1q_s16(v94, v96);
        v51[1] = vzip2q_s16(v94, v96);
        v51[2] = vzip1q_s16(v90, v92);
        v51[3] = vzip2q_s16(v90, v92);
        v51 += 4;
        *v51 = vzip1q_s16(v95, v97);
        v51[1] = vzip2q_s16(v95, v97);
        v51[2] = vzip1q_s16(v91, v93);
        v51[3] = vzip2q_s16(v91, v93);
        v51 += 4;
        v99 = v49[1];
        v98 = (int32x4_t *)((char *)v49 + a7 + 16);
        v101 = *v98;
        v100 = (int32x4_t *)((char *)v98 + a7);
        v103 = *v100;
        v102 = (int32x4_t *)((char *)v100 + a7);
        v105 = *v102;
        v104 = (int32x4_t *)((char *)v102 + a7);
        v107 = *v104;
        v106 = (int32x4_t *)((char *)v104 + a7);
        v109 = *v106;
        v108 = (int32x4_t *)((char *)v106 + a7);
        v111 = *v108;
        v110 = (int32x4_t *)((char *)v108 + a7);
        v113 = *v110;
        v112 = (int32x4_t *)((char *)v110 + a7);
        v114 = (int16x8_t)vzip1q_s32(v107, v111);
        v115 = (int16x8_t)vzip2q_s32(v107, v111);
        v116 = (int16x8_t)vzip1q_s32(v109, v113);
        v117 = (int16x8_t)vzip2q_s32(v109, v113);
        v118 = (int16x8_t)vzip1q_s32(v99, v103);
        v119 = (int16x8_t)vzip2q_s32(v99, v103);
        v120 = (int16x8_t)vzip1q_s32(v101, v105);
        v121 = (int16x8_t)vzip2q_s32(v101, v105);
        *v51 = vzip1q_s16(v118, v120);
        v51[1] = vzip2q_s16(v118, v120);
        v51[2] = vzip1q_s16(v114, v116);
        v51[3] = vzip2q_s16(v114, v116);
        v51 += 4;
        *v51 = vzip1q_s16(v119, v121);
        v51[1] = vzip2q_s16(v119, v121);
        v51[2] = vzip1q_s16(v115, v117);
        v51[3] = vzip2q_s16(v115, v117);
        v51 += 4;
        v123 = *v112;
        v122 = (int32x4_t *)((char *)v112 + a7);
        v125 = *v122;
        v124 = (int32x4_t *)((char *)v122 + a7);
        v127 = *v124;
        v126 = (int32x4_t *)((char *)v124 + a7);
        v129 = *v126;
        v128 = (int32x4_t *)((char *)v126 + a7);
        v131 = *v128;
        v130 = (int32x4_t *)((char *)v128 + a7);
        v133 = *v130;
        v132 = (int32x4_t *)((char *)v130 + a7);
        v134 = *(int32x4_t *)((char *)v132 + a7);
        v135 = (int16x8_t)vzip1q_s32(v131, *v132);
        v136 = (int16x8_t)vzip2q_s32(v131, *v132);
        v137 = (int16x8_t)vzip1q_s32(v133, v134);
        v138 = (int16x8_t)vzip2q_s32(v133, v134);
        v139 = (int16x8_t)vzip1q_s32(v123, v127);
        v140 = (int16x8_t)vzip2q_s32(v123, v127);
        v141 = (int16x8_t)vzip1q_s32(v125, v129);
        v142 = (int16x8_t)vzip2q_s32(v125, v129);
        *v51 = vzip1q_s16(v139, v141);
        v51[1] = vzip2q_s16(v139, v141);
        v51[2] = vzip1q_s16(v135, v137);
        v51[3] = vzip2q_s16(v135, v137);
        v51 += 4;
        *v51 = vzip1q_s16(v140, v142);
        v51[1] = vzip2q_s16(v140, v142);
        v51[2] = vzip1q_s16(v136, v138);
        v51[3] = vzip2q_s16(v136, v138);
        v51 += 4;
        v143 = v88 + 1;
        v145 = *v88;
        v144 = (int32x4_t *)((char *)v88 + a7);
        v147 = *v144;
        v146 = (int32x4_t *)((char *)v144 + a7);
        v149 = *v146;
        v148 = (int32x4_t *)((char *)v146 + a7);
        v151 = *v148;
        v150 = (int32x4_t *)((char *)v148 + a7);
        v153 = *v150;
        v152 = (int32x4_t *)((char *)v150 + a7);
        v155 = *v152;
        v154 = (int32x4_t *)((char *)v152 + a7);
        v157 = *v154;
        v156 = (int32x4_t *)((char *)v154 + a7);
        v159 = *v156;
        v158 = (int32x4_t *)((char *)v156 + a7);
        v160 = (int16x8_t)vzip1q_s32(v153, v157);
        v161 = (int16x8_t)vzip2q_s32(v153, v157);
        v162 = (int16x8_t)vzip1q_s32(v155, v159);
        v163 = (int16x8_t)vzip2q_s32(v155, v159);
        v164 = (int16x8_t)vzip1q_s32(v145, v149);
        v165 = (int16x8_t)vzip2q_s32(v145, v149);
        v166 = (int16x8_t)vzip1q_s32(v147, v151);
        v167 = (int16x8_t)vzip2q_s32(v147, v151);
        *v51 = vzip1q_s16(v164, v166);
        v51[1] = vzip2q_s16(v164, v166);
        v51[2] = vzip1q_s16(v160, v162);
        v51[3] = vzip2q_s16(v160, v162);
        v51 += 4;
        *v51 = vzip1q_s16(v165, v167);
        v51[1] = vzip2q_s16(v165, v167);
        v51[2] = vzip1q_s16(v161, v163);
        v51[3] = vzip2q_s16(v161, v163);
        v51 += 4;
        v169 = *v158;
        v168 = (int32x4_t *)((char *)v158 + a7);
        v171 = *v168;
        v170 = (int32x4_t *)((char *)v168 + a7);
        v173 = *v170;
        v172 = (int32x4_t *)((char *)v170 + a7);
        v175 = *v172;
        v174 = (int32x4_t *)((char *)v172 + a7);
        v177 = *v174;
        v176 = (int32x4_t *)((char *)v174 + a7);
        v179 = *v176;
        v178 = (int32x4_t *)((char *)v176 + a7);
        v180 = *(int32x4_t *)((char *)v178 + a7);
        v181 = (int16x8_t)vzip1q_s32(v177, *v178);
        v182 = (int16x8_t)vzip2q_s32(v177, *v178);
        v183 = (int16x8_t)vzip1q_s32(v179, v180);
        v184 = (int16x8_t)vzip2q_s32(v179, v180);
        v185 = (int16x8_t)vzip1q_s32(v169, v173);
        v186 = (int16x8_t)vzip2q_s32(v169, v173);
        v187 = (int16x8_t)vzip1q_s32(v171, v175);
        v188 = (int16x8_t)vzip2q_s32(v171, v175);
        *v51 = vzip1q_s16(v185, v187);
        v51[1] = vzip2q_s16(v185, v187);
        v51[2] = vzip1q_s16(v181, v183);
        v51[3] = vzip2q_s16(v181, v183);
        v51 += 4;
        *v51 = vzip1q_s16(v186, v188);
        v51[1] = vzip2q_s16(v186, v188);
        v51[2] = vzip1q_s16(v182, v184);
        v51[3] = vzip2q_s16(v182, v184);
        v51 += 4;
        v190 = *v143;
        v189 = (int32x4_t *)((char *)v143 + a7);
        v192 = *v189;
        v191 = (int32x4_t *)((char *)v189 + a7);
        v194 = *v191;
        v193 = (int32x4_t *)((char *)v191 + a7);
        v196 = *v193;
        v195 = (int32x4_t *)((char *)v193 + a7);
        v198 = *v195;
        v197 = (int32x4_t *)((char *)v195 + a7);
        v200 = *v197;
        v199 = (int32x4_t *)((char *)v197 + a7);
        v202 = *v199;
        v201 = (int32x4_t *)((char *)v199 + a7);
        v204 = *v201;
        v203 = (int32x4_t *)((char *)v201 + a7);
        v205 = (int16x8_t)vzip1q_s32(v198, v202);
        v206 = (int16x8_t)vzip2q_s32(v198, v202);
        v207 = (int16x8_t)vzip1q_s32(v200, v204);
        v208 = (int16x8_t)vzip2q_s32(v200, v204);
        v209 = (int16x8_t)vzip1q_s32(v190, v194);
        v210 = (int16x8_t)vzip2q_s32(v190, v194);
        v211 = (int16x8_t)vzip1q_s32(v192, v196);
        v212 = (int16x8_t)vzip2q_s32(v192, v196);
        *v51 = vzip1q_s16(v209, v211);
        v51[1] = vzip2q_s16(v209, v211);
        v51[2] = vzip1q_s16(v205, v207);
        v51[3] = vzip2q_s16(v205, v207);
        v51 += 4;
        *v51 = vzip1q_s16(v210, v212);
        v51[1] = vzip2q_s16(v210, v212);
        v51[2] = vzip1q_s16(v206, v208);
        v51[3] = vzip2q_s16(v206, v208);
        v51 += 4;
        v214 = *v203;
        v213 = (int32x4_t *)((char *)v203 + a7);
        v216 = *v213;
        v215 = (int32x4_t *)((char *)v213 + a7);
        v218 = *v215;
        v217 = (int32x4_t *)((char *)v215 + a7);
        v220 = *v217;
        v219 = (int32x4_t *)((char *)v217 + a7);
        v222 = *v219;
        v221 = (int32x4_t *)((char *)v219 + a7);
        v224 = *v221;
        v223 = (int32x4_t *)((char *)v221 + a7);
        v225 = *(int32x4_t *)((char *)v223 + a7);
        v226 = (int16x8_t)vzip1q_s32(v222, *v223);
        v227 = (int16x8_t)vzip2q_s32(v222, *v223);
        v228 = (int16x8_t)vzip1q_s32(v224, v225);
        v229 = (int16x8_t)vzip2q_s32(v224, v225);
        v230 = (int16x8_t)vzip1q_s32(v214, v218);
        v231 = (int16x8_t)vzip2q_s32(v214, v218);
        v232 = (int16x8_t)vzip1q_s32(v216, v220);
        v233 = (int16x8_t)vzip2q_s32(v216, v220);
        *v51 = vzip1q_s16(v230, v232);
        v51[1] = vzip2q_s16(v230, v232);
        v51[2] = vzip1q_s16(v226, v228);
        v51[3] = vzip2q_s16(v226, v228);
        v51 += 4;
        *v51 = vzip1q_s16(v231, v233);
        v51[1] = vzip2q_s16(v231, v233);
        v51[2] = vzip1q_s16(v227, v229);
        v51[3] = vzip2q_s16(v227, v229);
        v51 += 4;
        v235 = v49[2];
        v234 = (int32x4_t *)((char *)v49 + a7 + 32);
        v237 = *v234;
        v236 = (int32x4_t *)((char *)v234 + a7);
        v239 = *v236;
        v238 = (int32x4_t *)((char *)v236 + a7);
        v241 = *v238;
        v240 = (int32x4_t *)((char *)v238 + a7);
        v243 = *v240;
        v242 = (int32x4_t *)((char *)v240 + a7);
        v245 = *v242;
        v244 = (int32x4_t *)((char *)v242 + a7);
        v247 = *v244;
        v246 = (int32x4_t *)((char *)v244 + a7);
        v249 = *v246;
        v248 = (int32x4_t *)((char *)v246 + a7);
        v250 = (int16x8_t)vzip1q_s32(v243, v247);
        v251 = (int16x8_t)vzip2q_s32(v243, v247);
        v252 = (int16x8_t)vzip1q_s32(v245, v249);
        v253 = (int16x8_t)vzip2q_s32(v245, v249);
        v254 = (int16x8_t)vzip1q_s32(v235, v239);
        v255 = (int16x8_t)vzip2q_s32(v235, v239);
        v256 = (int16x8_t)vzip1q_s32(v237, v241);
        v257 = (int16x8_t)vzip2q_s32(v237, v241);
        *v51 = vzip1q_s16(v254, v256);
        v51[1] = vzip2q_s16(v254, v256);
        v51[2] = vzip1q_s16(v250, v252);
        v51[3] = vzip2q_s16(v250, v252);
        v51 += 4;
        *v51 = vzip1q_s16(v255, v257);
        v51[1] = vzip2q_s16(v255, v257);
        v51[2] = vzip1q_s16(v251, v253);
        v51[3] = vzip2q_s16(v251, v253);
        v51 += 4;
        v259 = *v248;
        v258 = (int32x4_t *)((char *)v248 + a7);
        v261 = *v258;
        v260 = (int32x4_t *)((char *)v258 + a7);
        v263 = *v260;
        v262 = (int32x4_t *)((char *)v260 + a7);
        v265 = *v262;
        v264 = (int32x4_t *)((char *)v262 + a7);
        v267 = *v264;
        v266 = (int32x4_t *)((char *)v264 + a7);
        v269 = *v266;
        v268 = (int32x4_t *)((char *)v266 + a7);
        v271 = *v268;
        v270 = (int32x4_t *)((char *)v268 + a7);
        v273 = *v270;
        v272 = (int32x4_t *)((char *)v270 + a7);
        v274 = (int16x8_t)vzip1q_s32(v267, v271);
        v275 = (int16x8_t)vzip2q_s32(v267, v271);
        v276 = (int16x8_t)vzip1q_s32(v269, v273);
        v277 = (int16x8_t)vzip2q_s32(v269, v273);
        v278 = (int16x8_t)vzip1q_s32(v259, v263);
        v279 = (int16x8_t)vzip2q_s32(v259, v263);
        v280 = (int16x8_t)vzip1q_s32(v261, v265);
        v281 = (int16x8_t)vzip2q_s32(v261, v265);
        *v51 = vzip1q_s16(v278, v280);
        v51[1] = vzip2q_s16(v278, v280);
        v51[2] = vzip1q_s16(v274, v276);
        v51[3] = vzip2q_s16(v274, v276);
        v51 += 4;
        *v51 = vzip1q_s16(v279, v281);
        v51[1] = vzip2q_s16(v279, v281);
        v51[2] = vzip1q_s16(v275, v277);
        v51[3] = vzip2q_s16(v275, v277);
        v51 += 4;
        v283 = v49[3];
        v282 = (int32x4_t *)((char *)v49 + a7 + 48);
        v285 = *v282;
        v284 = (int32x4_t *)((char *)v282 + a7);
        v287 = *v284;
        v286 = (int32x4_t *)((char *)v284 + a7);
        v289 = *v286;
        v288 = (int32x4_t *)((char *)v286 + a7);
        v291 = *v288;
        v290 = (int32x4_t *)((char *)v288 + a7);
        v293 = *v290;
        v292 = (int32x4_t *)((char *)v290 + a7);
        v295 = *v292;
        v294 = (int32x4_t *)((char *)v292 + a7);
        v297 = *v294;
        v296 = (int32x4_t *)((char *)v294 + a7);
        v298 = (int16x8_t)vzip1q_s32(v291, v295);
        v299 = (int16x8_t)vzip2q_s32(v291, v295);
        v300 = (int16x8_t)vzip1q_s32(v293, v297);
        v301 = (int16x8_t)vzip2q_s32(v293, v297);
        v302 = (int16x8_t)vzip1q_s32(v283, v287);
        v303 = (int16x8_t)vzip2q_s32(v283, v287);
        v304 = (int16x8_t)vzip1q_s32(v285, v289);
        v305 = (int16x8_t)vzip2q_s32(v285, v289);
        *v51 = vzip1q_s16(v302, v304);
        v51[1] = vzip2q_s16(v302, v304);
        v51[2] = vzip1q_s16(v298, v300);
        v51[3] = vzip2q_s16(v298, v300);
        v51 += 4;
        *v51 = vzip1q_s16(v303, v305);
        v51[1] = vzip2q_s16(v303, v305);
        v51[2] = vzip1q_s16(v299, v301);
        v51[3] = vzip2q_s16(v299, v301);
        v51 += 4;
        v307 = *v296;
        v306 = (int32x4_t *)((char *)v296 + a7);
        v309 = *v306;
        v308 = (int32x4_t *)((char *)v306 + a7);
        v311 = *v308;
        v310 = (int32x4_t *)((char *)v308 + a7);
        v313 = *v310;
        v312 = (int32x4_t *)((char *)v310 + a7);
        v315 = *v312;
        v314 = (int32x4_t *)((char *)v312 + a7);
        v317 = *v314;
        v316 = (int32x4_t *)((char *)v314 + a7);
        v318 = *(int32x4_t *)((char *)v316 + a7);
        v319 = (int16x8_t)vzip1q_s32(v315, *v316);
        v320 = (int16x8_t)vzip2q_s32(v315, *v316);
        v321 = (int16x8_t)vzip1q_s32(v317, v318);
        v322 = (int16x8_t)vzip2q_s32(v317, v318);
        v323 = (int16x8_t)vzip1q_s32(v307, v311);
        v324 = (int16x8_t)vzip2q_s32(v307, v311);
        v325 = (int16x8_t)vzip1q_s32(v309, v313);
        v326 = (int16x8_t)vzip2q_s32(v309, v313);
        *v51 = vzip1q_s16(v323, v325);
        v51[1] = vzip2q_s16(v323, v325);
        v51[2] = vzip1q_s16(v319, v321);
        v51[3] = vzip2q_s16(v319, v321);
        v51 += 4;
        *v51 = vzip1q_s16(v324, v326);
        v51[1] = vzip2q_s16(v324, v326);
        v51[2] = vzip1q_s16(v320, v322);
        v51[3] = vzip2q_s16(v320, v322);
        v51 += 4;
        v327 = v272 + 1;
        v329 = *v272;
        v328 = (int32x4_t *)((char *)v272 + a7);
        v331 = *v328;
        v330 = (int32x4_t *)((char *)v328 + a7);
        v333 = *v330;
        v332 = (int32x4_t *)((char *)v330 + a7);
        v335 = *v332;
        v334 = (int32x4_t *)((char *)v332 + a7);
        v337 = *v334;
        v336 = (int32x4_t *)((char *)v334 + a7);
        v339 = *v336;
        v338 = (int32x4_t *)((char *)v336 + a7);
        v341 = *v338;
        v340 = (int32x4_t *)((char *)v338 + a7);
        v343 = *v340;
        v342 = (int32x4_t *)((char *)v340 + a7);
        v344 = (int16x8_t)vzip1q_s32(v337, v341);
        v345 = (int16x8_t)vzip2q_s32(v337, v341);
        v346 = (int16x8_t)vzip1q_s32(v339, v343);
        v347 = (int16x8_t)vzip2q_s32(v339, v343);
        v348 = (int16x8_t)vzip1q_s32(v329, v333);
        v349 = (int16x8_t)vzip2q_s32(v329, v333);
        v350 = (int16x8_t)vzip1q_s32(v331, v335);
        v351 = (int16x8_t)vzip2q_s32(v331, v335);
        *v51 = vzip1q_s16(v348, v350);
        v51[1] = vzip2q_s16(v348, v350);
        v51[2] = vzip1q_s16(v344, v346);
        v51[3] = vzip2q_s16(v344, v346);
        v51 += 4;
        *v51 = vzip1q_s16(v349, v351);
        v51[1] = vzip2q_s16(v349, v351);
        v51[2] = vzip1q_s16(v345, v347);
        v51[3] = vzip2q_s16(v345, v347);
        v51 += 4;
        v353 = *v342;
        v352 = (int32x4_t *)((char *)v342 + a7);
        v355 = *v352;
        v354 = (int32x4_t *)((char *)v352 + a7);
        v357 = *v354;
        v356 = (int32x4_t *)((char *)v354 + a7);
        v359 = *v356;
        v358 = (int32x4_t *)((char *)v356 + a7);
        v361 = *v358;
        v360 = (int32x4_t *)((char *)v358 + a7);
        v363 = *v360;
        v362 = (int32x4_t *)((char *)v360 + a7);
        v364 = *(int32x4_t *)((char *)v362 + a7);
        v365 = (int16x8_t)vzip1q_s32(v361, *v362);
        v366 = (int16x8_t)vzip2q_s32(v361, *v362);
        v367 = (int16x8_t)vzip1q_s32(v363, v364);
        v368 = (int16x8_t)vzip2q_s32(v363, v364);
        v369 = (int16x8_t)vzip1q_s32(v353, v357);
        v370 = (int16x8_t)vzip2q_s32(v353, v357);
        v371 = (int16x8_t)vzip1q_s32(v355, v359);
        v372 = (int16x8_t)vzip2q_s32(v355, v359);
        *v51 = vzip1q_s16(v369, v371);
        v51[1] = vzip2q_s16(v369, v371);
        v51[2] = vzip1q_s16(v365, v367);
        v51[3] = vzip2q_s16(v365, v367);
        v51 += 4;
        *v51 = vzip1q_s16(v370, v372);
        v51[1] = vzip2q_s16(v370, v372);
        v51[2] = vzip1q_s16(v366, v368);
        v51[3] = vzip2q_s16(v366, v368);
        v51 += 4;
        v374 = *v327;
        v373 = (int32x4_t *)((char *)v327 + a7);
        v376 = *v373;
        v375 = (int32x4_t *)((char *)v373 + a7);
        v378 = *v375;
        v377 = (int32x4_t *)((char *)v375 + a7);
        v380 = *v377;
        v379 = (int32x4_t *)((char *)v377 + a7);
        v382 = *v379;
        v381 = (int32x4_t *)((char *)v379 + a7);
        v384 = *v381;
        v383 = (int32x4_t *)((char *)v381 + a7);
        v386 = *v383;
        v385 = (int32x4_t *)((char *)v383 + a7);
        v388 = *v385;
        v387 = (int32x4_t *)((char *)v385 + a7);
        v389 = (int16x8_t)vzip1q_s32(v382, v386);
        v390 = (int16x8_t)vzip2q_s32(v382, v386);
        v391 = (int16x8_t)vzip1q_s32(v384, v388);
        v392 = (int16x8_t)vzip2q_s32(v384, v388);
        v393 = (int16x8_t)vzip1q_s32(v374, v378);
        v394 = (int16x8_t)vzip2q_s32(v374, v378);
        v395 = (int16x8_t)vzip1q_s32(v376, v380);
        v396 = (int16x8_t)vzip2q_s32(v376, v380);
        *v51 = vzip1q_s16(v393, v395);
        v51[1] = vzip2q_s16(v393, v395);
        v51[2] = vzip1q_s16(v389, v391);
        v51[3] = vzip2q_s16(v389, v391);
        v51 += 4;
        *v51 = vzip1q_s16(v394, v396);
        v51[1] = vzip2q_s16(v394, v396);
        v51[2] = vzip1q_s16(v390, v392);
        v51[3] = vzip2q_s16(v390, v392);
        v51 += 4;
        v398 = *v387;
        v397 = (int32x4_t *)((char *)v387 + a7);
        v400 = *v397;
        v399 = (int32x4_t *)((char *)v397 + a7);
        v402 = *v399;
        v401 = (int32x4_t *)((char *)v399 + a7);
        v404 = *v401;
        v403 = (int32x4_t *)((char *)v401 + a7);
        v406 = *v403;
        v405 = (int32x4_t *)((char *)v403 + a7);
        v408 = *v405;
        v407 = (int32x4_t *)((char *)v405 + a7);
        v409 = *(int32x4_t *)((char *)v407 + a7);
        v410 = (int16x8_t)vzip1q_s32(v406, *v407);
        v411 = (int16x8_t)vzip2q_s32(v406, *v407);
        v412 = (int16x8_t)vzip1q_s32(v408, v409);
        v413 = (int16x8_t)vzip2q_s32(v408, v409);
        v414 = (int16x8_t)vzip1q_s32(v398, v402);
        v415 = (int16x8_t)vzip2q_s32(v398, v402);
        v416 = (int16x8_t)vzip1q_s32(v400, v404);
        v417 = (int16x8_t)vzip2q_s32(v400, v404);
        *v51 = vzip1q_s16(v414, v416);
        v51[1] = vzip2q_s16(v414, v416);
        v51[2] = vzip1q_s16(v410, v412);
        v51[3] = vzip2q_s16(v410, v412);
        v51 += 4;
        *v51 = vzip1q_s16(v415, v417);
        v51[1] = vzip2q_s16(v415, v417);
        v51[2] = vzip1q_s16(v411, v413);
        v51[3] = vzip2q_s16(v411, v413);
        v50 = (v50 - v12) & v12;
        v48 += 32;
        v49 += 4;
      }
      while (v48 < a10);
      v40 = (v40 - v23) & v23;
      v47 += 32 * a7;
      v45 += 32;
    }
    while (v45 < a11);
  }
  return result;
}

uint64_t agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, int, int);
  uint64_t (*v18)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, unsigned int, unsigned int);
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, unsigned int, unsigned int);
  int v37;
  uint64_t (*v38)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, int, int);
  unsigned int v39;
  unsigned int v40;

  v11 = a6;
  v12 = a5;
  v14 = 32 - __clz(a3 - 1);
  v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2)
    v16 = v15;
  else
    v16 = 0;
  if (((a2 | a7) & 7) != 0)
    v17 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)0>,false,false>;
  else
    v17 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)0>,false,true>;
  if (((a2 | a7) & 7) != 0)
    v18 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)0>,true,false>;
  else
    v18 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)0>,true,true>;
  v19 = a3 >= 2;
  if (a3 >= 2)
    v20 = v14;
  else
    v20 = 0;
  if (!v19 || v16 <= 1)
  {
    HIDWORD(v35) = a5;
    LODWORD(v35) = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, unsigned int))v17)(result, a2, v20, v16, a8, a9, a7, 0, v35, a6);
  }
  v21 = result;
  v22 = 4 - (a9 & 3);
  if ((a9 & 3) == 0)
    v22 = 0;
  v23 = 4 - (a8 & 3);
  if ((a8 & 3) == 0)
    v23 = 0;
  v24 = ((_BYTE)a8 + (_BYTE)a5) & 3;
  v25 = ((_BYTE)a9 + (_BYTE)a6) & 3;
  v26 = v23 + v24;
  if (v23 + v24 > a5)
    v23 = a5;
  v39 = v20;
  v40 = v23;
  if (v26 > a5)
    v24 = 0;
  if (v22 + v25 <= a6)
    v27 = v22;
  else
    v27 = a6;
  if (v22 + v25 <= a6)
    v28 = ((_BYTE)a9 + (_BYTE)a6) & 3;
  else
    v28 = 0;
  v36 = v18;
  v38 = v17;
  v37 = v24;
  if (v27)
  {
    HIDWORD(v33) = a5;
    LODWORD(v33) = 0;
    result = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, unsigned int))v17)(result, a2, v20, v16, a8, a9, a7, 0, v33, v27);
    v11 -= v27;
  }
  if (v28)
  {
    v11 -= v28;
    *(_QWORD *)((char *)&v34 + 4) = __PAIR64__(v28, v12);
    LODWORD(v34) = v11 + v27;
    v29 = v21;
    v30 = v21;
    v31 = v39;
    result = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _DWORD))v38)(v30, a2, v39, v16, a8, a9, a7, 0, v34, DWORD2(v34));
    v32 = v40;
    if (!v11)
      return result;
  }
  else
  {
    v29 = v21;
    v31 = v39;
    v32 = v40;
    if (!v11)
      return result;
  }
  if (v32)
  {
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, unsigned int))v38)(v29, a2, v31, v16, a8, a9, a7, 0, __PAIR64__(v32, v27), v11);
    v12 -= v40;
  }
  if (v37)
  {
    v12 -= v37;
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, unsigned int))v38)(v29, a2, v31, v16, a8, a9, a7, v12 + v40, __PAIR64__(v37, v27), v11);
  }
  if (v12)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))v36)(v29, a2, v31, v16, a8, a9, a7);
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)0>,false,true>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3)) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4)) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = (uint64_t *)(v46 + 8 * a8);
      v48 = a10;
      v49 = v30;
      do
      {
        v50 = *v47++;
        *(_QWORD *)(result + 8 * (v49 + v40)) = v50;
        v49 = (v49 - v12) & v12;
        --v48;
      }
      while (v48);
      v40 = (v40 - v23) & v23;
      v46 += a7;
      ++v45;
    }
    while (v45 != a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)0>,false,false>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3)) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4)) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = (uint64_t *)(v46 + 8 * a8);
      v48 = a10;
      v49 = v30;
      do
      {
        v50 = *v47++;
        *(_QWORD *)(result + 8 * (v49 + v40)) = v50;
        v49 = (v49 - v12) & v12;
        --v48;
      }
      while (v48);
      v40 = (v40 - v23) & v23;
      v46 += a7;
      ++v45;
    }
    while (v45 != a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)0>,true,true>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int64x2_t *v48;
  uint64_t v49;
  int64x2_t *v50;
  int64x2_t v51;
  int64x2_t *v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t *v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3) & 0x7FFFFFFCu) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4) & 0x7FFFFFFCu) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = 0;
      v48 = (int64x2_t *)(v46 + 8 * a8);
      v49 = v30;
      do
      {
        v50 = (int64x2_t *)(result + 8 * (v49 + v40));
        v51 = v48[1];
        v53 = *(int64x2_t *)((char *)v48 + a7);
        v54 = *(int64x2_t *)((char *)&v48[1] + a7);
        v52 = (int64x2_t *)((char *)v48 + a7 + a7);
        v56 = *v52;
        v57 = v52[1];
        v55 = (int64x2_t *)((char *)v52 + a7);
        v58 = *v55;
        v59 = v55[1];
        v60 = vtrn2q_s64(*v48, v53);
        *v50 = vtrn1q_s64(*v48, v53);
        v50[1] = v60;
        v50[2] = vtrn1q_s64(v56, v58);
        v50[3] = vtrn2q_s64(v56, v58);
        v50 += 4;
        *v50 = vtrn1q_s64(v51, v54);
        v50[1] = vtrn2q_s64(v51, v54);
        v50[2] = vtrn1q_s64(v57, v59);
        v50[3] = vtrn2q_s64(v57, v59);
        v49 = (v49 - v12) & v12;
        v48 += 2;
        v47 += 4;
      }
      while (v47 < a10);
      v40 = (v40 - v23) & v23;
      v46 += 4 * a7;
      v45 += 4;
    }
    while (v45 < a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,4u,(TwiddleOrder)0>,true,false>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int64x2_t *v48;
  uint64_t v49;
  int64x2_t *v50;
  int64x2_t v51;
  int64x2_t *v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t *v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3) & 0x7FFFFFFCu) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4) & 0x7FFFFFFCu) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = 0;
      v48 = (int64x2_t *)(v46 + 8 * a8);
      v49 = v30;
      do
      {
        v50 = (int64x2_t *)(result + 8 * (v49 + v40));
        v51 = v48[1];
        v53 = *(int64x2_t *)((char *)v48 + a7);
        v54 = *(int64x2_t *)((char *)&v48[1] + a7);
        v52 = (int64x2_t *)((char *)v48 + a7 + a7);
        v56 = *v52;
        v57 = v52[1];
        v55 = (int64x2_t *)((char *)v52 + a7);
        v58 = *v55;
        v59 = v55[1];
        v60 = vtrn2q_s64(*v48, v53);
        *v50 = vtrn1q_s64(*v48, v53);
        v50[1] = v60;
        v50[2] = vtrn1q_s64(v56, v58);
        v50[3] = vtrn2q_s64(v56, v58);
        v50 += 4;
        *v50 = vtrn1q_s64(v51, v54);
        v50[1] = vtrn2q_s64(v51, v54);
        v50[2] = vtrn1q_s64(v57, v59);
        v50[3] = vtrn2q_s64(v57, v59);
        v49 = (v49 - v12) & v12;
        v48 += 2;
        v47 += 4;
      }
      while (v47 < a10);
      v40 = (v40 - v23) & v23;
      v46 += 4 * a7;
      v45 += 4;
    }
    while (v45 < a11);
  }
  return result;
}

uint64_t agxsBlockTwiddleAddress<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, int, int);
  uint64_t (*v18)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, unsigned int, unsigned int);
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, unsigned int, unsigned int);
  int v37;
  uint64_t (*v38)(uint64_t, uint64_t, int, int, int, int, uint64_t, unsigned int, unsigned int, int, int);
  unsigned int v39;
  unsigned int v40;

  v11 = a6;
  v12 = a5;
  v14 = 32 - __clz(a3 - 1);
  v15 = 32 - __clz(a4 - 1);
  if (a4 >= 2)
    v16 = v15;
  else
    v16 = 0;
  if (((a2 | a7) & 3) != 0)
    v17 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)0>,false,false>;
  else
    v17 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)0>,false,true>;
  if (((a2 | a7) & 3) != 0)
    v18 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)0>,true,false>;
  else
    v18 = twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)0>,true,true>;
  v19 = a3 >= 2;
  if (a3 >= 2)
    v20 = v14;
  else
    v20 = 0;
  if (!v19 || v16 <= 2)
  {
    HIDWORD(v35) = a5;
    LODWORD(v35) = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, unsigned int))v17)(result, a2, v20, v16, a8, a9, a7, 0, v35, a6);
  }
  v21 = result;
  v22 = 4 - (a9 & 3);
  if ((a9 & 3) == 0)
    v22 = 0;
  v23 = 8 - (a8 & 7);
  if ((a8 & 7) == 0)
    v23 = 0;
  v24 = ((_BYTE)a8 + (_BYTE)a5) & 7;
  v25 = ((_BYTE)a9 + (_BYTE)a6) & 3;
  v26 = v23 + v24;
  if (v23 + v24 > a5)
    v23 = a5;
  v39 = v20;
  v40 = v23;
  if (v26 > a5)
    v24 = 0;
  if (v22 + v25 <= a6)
    v27 = v22;
  else
    v27 = a6;
  if (v22 + v25 <= a6)
    v28 = ((_BYTE)a9 + (_BYTE)a6) & 3;
  else
    v28 = 0;
  v36 = v18;
  v38 = v17;
  v37 = v24;
  if (v27)
  {
    HIDWORD(v33) = a5;
    LODWORD(v33) = 0;
    result = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, unsigned int))v17)(result, a2, v20, v16, a8, a9, a7, 0, v33, v27);
    v11 -= v27;
  }
  if (v28)
  {
    v11 -= v28;
    *(_QWORD *)((char *)&v34 + 4) = __PAIR64__(v28, v12);
    LODWORD(v34) = v11 + v27;
    v29 = v21;
    v30 = v21;
    v31 = v39;
    result = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _DWORD))v38)(v30, a2, v39, v16, a8, a9, a7, 0, v34, DWORD2(v34));
    v32 = v40;
    if (!v11)
      return result;
  }
  else
  {
    v29 = v21;
    v31 = v39;
    v32 = v40;
    if (!v11)
      return result;
  }
  if (v32)
  {
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, unsigned int))v38)(v29, a2, v31, v16, a8, a9, a7, 0, __PAIR64__(v32, v27), v11);
    v12 -= v40;
  }
  if (v37)
  {
    v12 -= v37;
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, unint64_t, unsigned int))v38)(v29, a2, v31, v16, a8, a9, a7, v12 + v40, __PAIR64__(v37, v27), v11);
  }
  if (v12)
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))v36)(v29, a2, v31, v16, a8, a9, a7);
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)0>,false,true>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  int *v47;
  int v48;
  uint64_t v49;
  int v50;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3)) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4)) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = (int *)(v46 + 4 * a8);
      v48 = a10;
      v49 = v30;
      do
      {
        v50 = *v47++;
        *(_DWORD *)(result + 4 * (v49 + v40)) = v50;
        v49 = (v49 - v12) & v12;
        --v48;
      }
      while (v48);
      v40 = (v40 - v23) & v23;
      v46 += a7;
      ++v45;
    }
    while (v45 != a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)0>,false,false>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, int a10, int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  int *v47;
  int v48;
  uint64_t v49;
  int v50;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3)) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4)) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = (int *)(v46 + 4 * a8);
      v48 = a10;
      v49 = v30;
      do
      {
        v50 = *v47++;
        *(_DWORD *)(result + 4 * (v49 + v40)) = v50;
        v49 = (v49 - v12) & v12;
        --v48;
      }
      while (v48);
      v40 = (v40 - v23) & v23;
      v46 += a7;
      ++v45;
    }
    while (v45 != a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)0>,true,true>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int32x4_t *v48;
  uint64_t v49;
  int32x4_t *v50;
  int32x4_t v51;
  int32x4_t *v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t *v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3) & 0x7FFFFFF8u) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4) & 0x7FFFFFFCu) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = 0;
      v48 = (int32x4_t *)(v46 + 4 * a8);
      v49 = v30;
      do
      {
        v50 = (int32x4_t *)(result + 4 * (v49 + v40));
        v51 = v48[1];
        v53 = *(int32x4_t *)((char *)v48 + a7);
        v54 = *(int32x4_t *)((char *)&v48[1] + a7);
        v52 = (int32x4_t *)((char *)v48 + a7 + a7);
        v56 = *v52;
        v57 = v52[1];
        v55 = (int32x4_t *)((char *)v52 + a7);
        v58 = *v55;
        v59 = v55[1];
        v60 = vzip2q_s32(*v48, v53);
        *v50 = vzip1q_s32(*v48, v53);
        v50[1] = vzip1q_s32(v56, v58);
        v50[2] = v60;
        v50[3] = vzip2q_s32(v56, v58);
        v50 += 8;
        *v50 = vzip1q_s32(v51, v54);
        v50[1] = vzip1q_s32(v57, v59);
        v50[2] = vzip2q_s32(v51, v54);
        v50[3] = vzip2q_s32(v57, v59);
        v49 = (v49 - v12) & v12;
        v48 += 2;
        v47 += 8;
      }
      while (v47 < a10);
      v40 = (v40 - v23) & v23;
      v46 += 4 * a7;
      v45 += 4;
    }
    while (v45 < a11);
  }
  return result;
}

uint64_t twiddleBlock<(TwiddleOrder)0,AGXSConverterPassThru<true,2ul,2u,(TwiddleOrder)0>,true,false>(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  int v15;
  BOOL v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  int32x4_t *v48;
  uint64_t v49;
  int32x4_t *v50;
  int32x4_t v51;
  int32x4_t *v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t *v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;

  if (a4 | a3)
  {
    v11 = 0;
    v12 = 0;
    v13 = a4 != 0;
    v14 = a3 != 0;
    v15 = 1;
    v16 = a4 != 0;
    v17 = a3 != 0;
    v18 = a4;
    v19 = a3;
    do
    {
      --v18;
      v20 = v16;
      if (!v20)
        v18 = 0;
      v21 = v11 + v20;
      --v19;
      if (v17)
        v12 |= (unint64_t)(v15 & ~(-1 << a3) & 0x7FFFFFF8u) << v21++;
      else
        v19 = 0;
      v15 *= 2;
      v11 = v21 - 1;
      v17 = v19 != 0;
      v16 = v18 != 0;
    }
    while (v19 | v18);
    v22 = 0;
    v23 = 0;
    v24 = a4 != 0;
    v25 = a3 != 0;
    v26 = 1;
    v27 = a4;
    v28 = a3;
    do
    {
      --v27;
      if (v24)
        v23 |= (unint64_t)(v26 & ~(-1 << a4) & 0x7FFFFFFCu) << v22++;
      else
        v27 = 0;
      --v28;
      if (!v25)
        v28 = 0;
      v26 *= 2;
      v22 = (__PAIR64__(v22, v25) - 1) >> 32;
      v25 = v28 != 0;
      v24 = v27 != 0;
    }
    while (v28 | v27);
    v29 = 0;
    v30 = 0;
    v31 = a8 + a5;
    v32 = 1;
    v33 = a4 != 0;
    v34 = a3 != 0;
    v35 = a4;
    v36 = a3;
    do
    {
      --v35;
      v37 = v33;
      if (!v37)
        v35 = 0;
      v38 = v29 + v37;
      --v36;
      if (v34)
        v30 |= (unint64_t)(v32 & v31) << v38++;
      else
        v36 = 0;
      v32 *= 2;
      v29 = v38 - 1;
      v34 = v36 != 0;
      v33 = v35 != 0;
    }
    while (v36 | v35);
    v39 = 0;
    v40 = 0;
    v41 = a9 + a6;
    v42 = 1;
    do
    {
      --a4;
      if (v13)
      {
        v40 |= (unint64_t)(v42 & v41) << v39;
        v43 = v39 + 1;
      }
      else
      {
        a4 = 0;
        v43 = v39;
      }
      --a3;
      if (!v14)
        a3 = 0;
      v42 *= 2;
      v39 = (__PAIR64__(v43, v14) - 1) >> 32;
      v14 = a3 != 0;
      v13 = a4 != 0;
    }
    while (a3 | a4);
  }
  else
  {
    v30 = 0;
    v12 = 0;
    v23 = 0;
    v40 = 0;
  }
  if (a11)
    v44 = a10 == 0;
  else
    v44 = 1;
  if (!v44)
  {
    v45 = 0;
    v46 = a2 + a9 * a7;
    do
    {
      v47 = 0;
      v48 = (int32x4_t *)(v46 + 4 * a8);
      v49 = v30;
      do
      {
        v50 = (int32x4_t *)(result + 4 * (v49 + v40));
        v51 = v48[1];
        v53 = *(int32x4_t *)((char *)v48 + a7);
        v54 = *(int32x4_t *)((char *)&v48[1] + a7);
        v52 = (int32x4_t *)((char *)v48 + a7 + a7);
        v56 = *v52;
        v57 = v52[1];
        v55 = (int32x4_t *)((char *)v52 + a7);
        v58 = *v55;
        v59 = v55[1];
        v60 = vzip2q_s32(*v48, v53);
        *v50 = vzip1q_s32(*v48, v53);
        v50[1] = vzip1q_s32(v56, v58);
        v50[2] = v60;
        v50[3] = vzip2q_s32(v56, v58);
        v50 += 8;
        *v50 = vzip1q_s32(v51, v54);
        v50[1] = vzip1q_s32(v57, v59);
        v50[2] = vzip2q_s32(v51, v54);
        v50[3] = vzip2q_s32(v57, v59);
        v49 = (v49 - v12) & v12;
        v48 += 2;
        v47 += 8;
      }
      while (v47 < a10);
      v40 = (v40 - v23) & v23;
      v46 += 4 * a7;
      v45 += 4;
    }
    while (v45 < a11);
  }
  return result;
}

uint64_t agxaAssertBufferIsValid(const unsigned __int8 *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, unsigned int a7, unsigned int a8, unsigned int a9)
{
  unsigned int v9;
  unint64_t k;
  unint64_t j;
  const unsigned __int8 *v13;
  unint64_t i;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *oslog;
  unsigned int v19;
  char v20;
  uint8_t v21[16];
  uint8_t v22[16];
  uint8_t v23[16];
  uint8_t buf[24];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v19 = (a5 + a8 - 1) / a8 * a4;
  if (a2)
    v9 = a2;
  else
    v9 = (a5 + a8 - 1) / a8 * a4;
  if (v9 >= v19)
  {
    for (i = 0; i < a9; ++i)
    {
      v13 = &a1[i * a3];
      for (j = 0; j < (a6 + a7 - 1) / a7; ++j)
      {
        for (k = 0; k < v19; k += *MEMORY[0x24BDB03C8])
          ;
        v13 += v9;
      }
    }
    v20 = 1;
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: Texture read/write assertion failed: %s\n", "bytes_per_row >= used_bytes_per_row");
    oslog = MEMORY[0x24BDACB70];
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_1_8_32((uint64_t)buf);
      _os_log_error_impl(&dword_232C19000, oslog, OS_LOG_TYPE_ERROR, "AGX: AGX: Texture read/write assertion failed: %s\n", buf, 0xCu);
    }
    v17 = MEMORY[0x24BDACB70];
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_1_8_32((uint64_t)v23);
      _os_log_impl(&dword_232C19000, v17, OS_LOG_TYPE_INFO, "AGX: AGX: Texture read/write assertion failed: %s\n", v23, 0xCu);
    }
    v16 = MEMORY[0x24BDACB70];
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      __os_log_helper_16_2_1_8_32((uint64_t)v22);
      _os_log_error_impl(&dword_232C19000, v16, OS_LOG_TYPE_ERROR, "AGX: Texture read/write assertion failed: %s\n", v22, 0xCu);
    }
    v15 = MEMORY[0x24BDACB70];
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      __os_log_helper_16_2_1_8_32((uint64_t)v21);
      _os_log_impl(&dword_232C19000, v15, OS_LOG_TYPE_INFO, "AGX: Texture read/write assertion failed: %s\n", v21, 0xCu);
    }
    v20 = 0;
  }
  return v20 & 1;
}

double __os_log_helper_16_2_1_8_32(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 136315138;
  *(_DWORD *)a1 = 136315138;
  *(_QWORD *)(a1 + 4) = "bytes_per_row >= used_bytes_per_row";
  return result;
}

__IOSurface *AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::readRegion(uint64_t a1, unsigned int a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned __int8 *a10, uint64_t a11, uint64_t a12)
{
  unsigned int v14;
  __IOSurface *result;
  int v17;
  unsigned int v18;
  unsigned int v19;
  __IOSurface *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t (*v34)(unint64_t, uint64_t);
  int64_t v35;
  size_t v36;
  int64_t CPUPtr;
  unsigned __int8 *v38;
  uint64_t v39;
  char *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  unsigned int AddressingBaseLevelWidthInBlocks;
  int v49;
  int v50;
  unsigned int AddressingBaseLevelHeightInBlocks;
  int v52;
  int v53;
  uint64_t (*DetwiddleFunc)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t);
  char v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t (*v58)(unint64_t, uint64_t);
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  unsigned __int8 CompressedTileWidthOfPlane;
  unsigned __int8 CompressedTileHeightOfPlane;
  uint64_t v67;
  uint64_t v68;
  unsigned __int16 *v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  __int128 *v75;
  int64_t v76;
  void (*v77)(uint64_t, _OWORD *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *);
  unsigned int v78;
  unint64_t v79;
  uint64_t (*v80)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t);
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v93;
  unsigned __int8 *v94;
  unint64_t v95;
  uint64_t (*v96)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  int64_t v103;
  unsigned int v104;
  unsigned int v106;
  unsigned __int8 *v107;
  int64_t v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  int v113;
  unint64_t v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned __int8 *v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int v129;
  int64_t v130;
  unint64_t v132;
  int64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;

  v14 = a4;
  result = (__IOSurface *)AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::validateRegion(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  if (!(_DWORD)result)
    return result;
  v129 = a8;
  v17 = *(_DWORD *)(a1 + 144);
  v18 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 208) + 88);
  v19 = *(_DWORD *)(a1 + 112);
  if (*(_QWORD *)(a1 + 168))
    IOSurfaceLockPlane();
  v20 = *(__IOSurface **)(a1 + 184);
  if (v20)
    IOSurfaceLock(v20, 1u, 0);
  v21 = v17 + a9;
  v22 = *(_QWORD *)(a1 + 380);
  v23 = v22;
  if (!(_BYTE)v22)
  {
    v36 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Op)0>(a1, 0);
    CPUPtr = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getCPUPtr(a1, v129, v21, 0);
    v38 = a10;
    if (a6)
    {
      v39 = a6;
      v40 = (char *)(CPUPtr + v36 * a3 + v18 * (unint64_t)a2);
      do
      {
        memcpy(v38, v40, v18 * (unint64_t)a5);
        v40 += v36;
        v38 += a11;
        --v39;
      }
      while (v39);
    }
    goto LABEL_111;
  }
  v119 = a7;
  v24 = ((unint64_t)((unsigned __int16)v22 & 0xFF00) - 256) >> 8;
  v25 = a10;
  if (v24 >= 2)
  {
    if (v24 == 2)
    {
      v127 = v19 * (unint64_t)v18;
      v41 = *(_DWORD *)(a1 + 144) + a9;
      v42 = *(_DWORD *)(a1 + 132);
      if (*(_DWORD *)(a1 + 128) >> (*(_BYTE *)(a1 + 144) + a9) <= 1u)
        v43 = 1;
      else
        v43 = *(_DWORD *)(a1 + 128) >> (*(_BYTE *)(a1 + 144) + a9);
      if (v42 >> v41 <= 1)
        v44 = 1;
      else
        v44 = v42 >> v41;
      v45 = *(_DWORD *)(a1 + 136) >> v41;
      if (v45 <= 1)
        v46 = 1;
      else
        v46 = v45;
      v47 = v21;
      AddressingBaseLevelWidthInBlocks = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getAddressingBaseLevelWidthInBlocks(a1, v21);
      v49 = 1 << -(char)__clz(AddressingBaseLevelWidthInBlocks - 1);
      if (AddressingBaseLevelWidthInBlocks <= 1)
        v50 = 1;
      else
        v50 = v49;
      AddressingBaseLevelHeightInBlocks = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getAddressingBaseLevelHeightInBlocks(a1, v47);
      v52 = 1 << -(char)__clz(AddressingBaseLevelHeightInBlocks - 1);
      if (AddressingBaseLevelHeightInBlocks <= 1)
        v53 = 1;
      else
        v53 = v52;
      if (AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::isLevelTiled(a1, v47))
      {
        v130 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getCPUPtr(a1, 0, v47, 0);
        v124 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(a1, 0);
        DetwiddleFunc = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getDetwiddleFunc(a1);
        v55 = v47;
        v56 = a10;
        v57 = v127;
        if (v119)
        {
          v58 = (uint64_t (*)(unint64_t, uint64_t))DetwiddleFunc;
          v121 = *(_DWORD *)(a1 + 128);
          v59 = *(_DWORD *)(a1 + 216);
          v60 = *(_DWORD *)(a1 + 220);
          v61 = v119;
          v62 = *(unsigned __int8 *)(a1 + 317);
          do
          {
            TiledMemory<(TwiddleOrder)0>::convertTiles2D<true>((uint64_t)v56, v130 + v124 * v14, v121, v55, a2, a3, a5, a6, a11, v59, v60, v57, v58, v62 != 0);
            v57 = v127;
            ++v14;
            v56 += a12;
            --v61;
          }
          while (v61);
        }
      }
      else
      {
        v122 = v50;
        v125 = v46;
        v118 = v53;
        if (*(_BYTE *)(a1 + 240))
        {
          v69 = (unsigned __int16 *)(a1 + 242);
          v70 = *(_QWORD *)(a1 + 72);
          v135 = __PAIR64__(v129, v47);
          LODWORD(v136) = 0;
          *((_QWORD *)&v136 + 1) = v70;
          v47 = 0;
          DWORD1(v136) = 8
                       * ((AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(a1, 0)+ (*(_DWORD *)(a1 + 236) << 8)- 1) & (unint64_t)-(uint64_t)(*(_DWORD *)(a1 + 236) << 8))/ *(unsigned int *)(a1 + 236);
          v71 = (unsigned int *)&v135;
        }
        else
        {
          v71 = 0;
          if (*(_BYTE *)(a1 + 232))
            v69 = (unsigned __int16 *)(a1 + 242);
          else
            v69 = 0;
        }
        v76 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getCPUPtr(a1, 0, v47, 0);
        v77 = (void (*)(uint64_t, _OWORD *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<false,4u,2u,16ul,(TwiddleOrder)0>;
        switch(*(_QWORD *)(a1 + 32))
        {
          case 0x82:
          case 0x83:
          case 0x8CLL:
          case 0x8DLL:
            v77 = (void (*)(uint64_t, _OWORD *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<false,4u,4u,8ul,(TwiddleOrder)0>;
            break;
          case 0x84:
          case 0x85:
          case 0x86:
          case 0x87:
          case 0x8ELL:
          case 0x8FLL:
          case 0x96:
          case 0x97:
          case 0x98:
          case 0x99:
          case 0xBALL:
          case 0xCCLL:
          case 0xDELL:
            v77 = (void (*)(uint64_t, _OWORD *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<false,4u,4u,16ul,(TwiddleOrder)0>;
            break;
          case 0xB9:
          case 0xCBLL:
          case 0xDDLL:
            break;
          case 0xBBLL:
          case 0xCDLL:
          case 0xDFLL:
            v77 = (void (*)(uint64_t, _OWORD *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<false,5u,4u,16ul,(TwiddleOrder)0>;
            break;
          case 0xBCLL:
          case 0xCELL:
          case 0xE0:
            v77 = (void (*)(uint64_t, _OWORD *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<false,5u,5u,16ul,(TwiddleOrder)0>;
            break;
          case 0xBDLL:
          case 0xCFLL:
          case 0xE1:
            v77 = (void (*)(uint64_t, _OWORD *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<false,6u,5u,16ul,(TwiddleOrder)0>;
            break;
          case 0xBELL:
          case 0xD0:
          case 0xE2:
            v77 = (void (*)(uint64_t, _OWORD *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<false,6u,6u,16ul,(TwiddleOrder)0>;
            break;
          case 0xBFLL:
          case 0xD1:
          case 0xE3:
            v77 = (void (*)(uint64_t, _OWORD *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<false,8u,4u,16ul,(TwiddleOrder)0>;
            break;
          case 0xC0:
          case 0xD2:
          case 0xE4:
            v77 = (void (*)(uint64_t, _OWORD *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<false,8u,5u,16ul,(TwiddleOrder)0>;
            break;
          case 0xC1:
          case 0xD3:
          case 0xE5:
            v77 = (void (*)(uint64_t, _OWORD *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<false,8u,6u,16ul,(TwiddleOrder)0>;
            break;
          case 0xC2:
          case 0xD4:
          case 0xE6:
            v77 = (void (*)(uint64_t, _OWORD *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<false,8u,8u,16ul,(TwiddleOrder)0>;
            break;
          case 0xC3:
          case 0xD5:
          case 0xE7:
            v77 = (void (*)(uint64_t, _OWORD *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<false,10u,5u,16ul,(TwiddleOrder)0>;
            break;
          case 0xC4:
          case 0xD6:
          case 0xE8:
            v77 = (void (*)(uint64_t, _OWORD *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<false,10u,6u,16ul,(TwiddleOrder)0>;
            break;
          case 0xC5:
          case 0xD7:
          case 0xE9:
            v77 = (void (*)(uint64_t, _OWORD *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<false,10u,8u,16ul,(TwiddleOrder)0>;
            break;
          case 0xC6:
          case 0xD8:
          case 0xEALL:
            v77 = (void (*)(uint64_t, _OWORD *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<false,10u,10u,16ul,(TwiddleOrder)0>;
            break;
          case 0xC7:
          case 0xD9:
          case 0xEBLL:
            v77 = (void (*)(uint64_t, _OWORD *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<false,12u,10u,16ul,(TwiddleOrder)0>;
            break;
          case 0xC8:
          case 0xDALL:
          case 0xECLL:
            v77 = (void (*)(uint64_t, _OWORD *, int, int, uint64_t, unsigned int, unsigned int, uint64_t, unsigned int, unsigned int, unsigned int, int, int, unsigned int, uint64_t, uint64_t, unsigned __int16 *, unsigned int *))agxsTwiddle3DAddressCompressed<false,12u,12u,16ul,(TwiddleOrder)0>;
            break;
          default:
            __asm { BR              X10 }
            return result;
        }
        v98 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(a1, 0);
        v77(v76, a10, v43, v44, v125, v122, v118, v98, a2, a3, v14, a5, a6, v119, a11, a12, v69, v71);
      }
      goto LABEL_111;
    }
    v25 = a10;
    if (v24 != 3)
    {
LABEL_111:
      if (*(_QWORD *)(a1 + 168))
        IOSurfaceUnlockPlane();
      result = *(__IOSurface **)(a1 + 184);
      if (result)
        return (__IOSurface *)IOSurfaceUnlock(result, 1u, 0);
      return result;
    }
  }
  v26 = v19 * (unint64_t)v18;
  v27 = *(_DWORD *)(a1 + 128) >> (*(_BYTE *)(a1 + 144) + a9);
  if (v27 <= 1)
    v27 = 1;
  v126 = v27;
  v28 = *(_DWORD *)(a1 + 132) >> (*(_BYTE *)(a1 + 144) + a9);
  if (v28 <= 1)
    v28 = 1;
  v123 = v28;
  v29 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getAddressingBaseLevelWidthInBlocks(a1, v21);
  v30 = 1 << -(char)__clz(v29 - 1);
  if (v29 <= 1)
    v31 = 1;
  else
    v31 = v30;
  result = (__IOSurface *)AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getAddressingBaseLevelHeightInBlocks(a1, v21);
  v32 = 1 << -(char)__clz((_DWORD)result - 1);
  if (result <= 1)
    v33 = 1;
  else
    v33 = v32;
  if (v129 < 6 || (v22 & 0x10000) != 0)
  {
    v34 = (uint64_t (*)(unint64_t, uint64_t))AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getDetwiddleFunc(a1);
    if (AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::isLevelTiled(a1, v21))
    {
      v35 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getCPUPtr(a1, v129, v21, 0);
      TiledMemory<(TwiddleOrder)0>::convertTiles2D<true>((uint64_t)v25, v35, *(_DWORD *)(a1 + 128), v21, a2, a3, a5, a6, a11, *(_DWORD *)(a1 + 216), *(_DWORD *)(a1 + 220), v26, v34, *(_BYTE *)(a1 + 317));
    }
    else if (v23 == 3)
    {
      v103 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getCPUPtr(a1, 0, 0, 0);
      v139 = 0;
      v137 = 0u;
      v138 = 0u;
      v135 = 0u;
      v136 = 0u;
      v63 = *(_QWORD *)(a1 + 208);
      InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)&v135, 0, *(MTLPixelFormat *)(a1 + 32), *(unsigned __int8 *)(v63 + 49));
      v64 = BYTE2(v135);
      if (*(_QWORD *)(a1 + 168))
      {
        CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
        CompressedTileHeightOfPlane = IOSurfaceGetCompressedTileHeightOfPlane();
        v67 = *(_QWORD *)(a1 + 208);
        v68 = a11;
      }
      else
      {
        CompressedTileWidthOfPlane = v135;
        CompressedTileHeightOfPlane = BYTE1(v135);
        v68 = a11;
        v67 = v63;
      }
      HIDWORD(v79) = v64;
      LODWORD(v79) = v64 - 8;
      v78 = v79 >> 3;
      if (v78 > 7)
        v80 = 0;
      else
        v80 = off_250402920[v78];
      v81 = a3 / CompressedTileHeightOfPlane;
      v102 = a6 + a3;
      v113 = CompressedTileHeightOfPlane;
      v101 = (a6 + a3 - 1) / CompressedTileHeightOfPlane;
      if (v81 <= v101)
      {
        v110 = a5 + a2;
        v111 = CompressedTileWidthOfPlane;
        v100 = a2 / CompressedTileWidthOfPlane;
        v109 = (a5 + a2 - 1) / CompressedTileWidthOfPlane;
        if (v100 <= v109)
        {
          v117 = (CompressedTileWidthOfPlane >> 3) * 4 * v64;
          v106 = (CompressedTileWidthOfPlane * v64 * CompressedTileHeightOfPlane) >> 3;
          v99 = (v126 + CompressedTileWidthOfPlane - 1) / CompressedTileWidthOfPlane * v106;
          do
          {
            v108 = v103 + v99 * v81;
            v104 = v81;
            v82 = v81 * v113;
            if (a3 >= v82)
              v83 = a3 - v82;
            else
              v83 = 0;
            v112 = v102 - v82;
            v115 = v83 >> 2;
            v107 = &v25[v82 * v68];
            v84 = v100;
            do
            {
              v116 = v84;
              v85 = v84 * v111;
              v86 = a2 - v84 * v111;
              if (a2 >= v85)
                v87 = v86;
              else
                v87 = 0;
              v88 = v110 - v85;
              if (v111 - v87 < v110 - v85)
                v88 = v111 - v87;
              v89 = v88 - 1;
              v90 = v113 - v87;
              if (v113 - v87 >= v112)
                v90 = v112;
              v91 = v89 >> 3;
              v128 = (v90 - 1) >> 2;
              if (v115 <= v128 && v87 >> 3 <= v91)
              {
                v120 = &v107[*(unsigned __int8 *)(v67 + 49) * (unint64_t)v85];
                v93 = v115;
                do
                {
                  v132 = v93;
                  v134 = v108 + v116 * v106 + (v117 * v93);
                  v94 = &v120[(4 * v93) * v68];
                  v95 = v87 >> 3;
                  do
                  {
                    v96 = v80;
                    ((void (*)(int64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t))v80)(v134 + (4 * v64 * v95), &v94[8 * v95 * *(unsigned __int8 *)(v67 + 49)], 8, 4, 8, 4);
                    v80 = v96;
                    v68 = a11;
                  }
                  while (v95++ < v91);
                  v93 = v132 + 1;
                }
                while (v132 < v128);
              }
              v84 = v116 + 1;
            }
            while (v116 + 1 <= v109);
            v81 = v104 + 1;
            v25 = a10;
          }
          while (v104 + 1 <= v101);
        }
      }
    }
    else
    {
      if (*(_BYTE *)(a1 + 240))
      {
        v72 = a1 + 242;
        v73 = *(_QWORD *)(a1 + 72);
        v135 = __PAIR64__(v129, v21);
        LODWORD(v136) = 0;
        *((_QWORD *)&v136 + 1) = v73;
        v74 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getCPUPtr(a1, 0, 0, 0);
        v75 = &v135;
      }
      else
      {
        if (*(_BYTE *)(a1 + 232))
          v72 = a1 + 242;
        else
          v72 = 0;
        v74 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getCPUPtr(a1, v129, v21, 0);
        v75 = 0;
      }
      ((void (*)(int64_t, unsigned __int8 *, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t, __int128 *))v34)(v74, v25, v126, v123, v31, v33, a2, a3, __PAIR64__(a6, a5), a11, v72, v75);
    }
    goto LABEL_111;
  }
  return result;
}

void sub_232D3BC7C()
{
  JUMPOUT(0x232D3BBA0);
}

void sub_232D3BC88()
{
  JUMPOUT(0x232D3BBA0);
}

void sub_232D3BC94()
{
  JUMPOUT(0x232D3BBA0);
}

void sub_232D3BCA0()
{
  JUMPOUT(0x232D3BBA0);
}

uint64_t (*AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getDetwiddleFunc(uint64_t a1))(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t)
{
  int v2;
  uint64_t v3;
  uint64_t (*result)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t);
  unsigned int v5;
  uint64_t (**v6)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t);
  uint64_t (*v7)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t);
  uint64_t (*v8)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t);

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32) - 130;
  result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressPVRTC2<false,(TwiddleOrder)0>;
  switch(v3)
  {
    case 0:
    case 1:
    case 10:
    case 11:
    case 40:
    case 42:
    case 50:
    case 51:
    case 52:
    case 53:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<false,4u,4u,8ul,(TwiddleOrder)0>;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 12:
    case 13:
    case 20:
    case 21:
    case 22:
    case 23:
    case 44:
    case 46:
    case 48:
    case 49:
    case 56:
    case 74:
    case 92:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<false,4u,4u,16ul,(TwiddleOrder)0>;
      break;
    case 30:
    case 31:
    case 34:
    case 35:
      return result;
    case 32:
    case 33:
    case 36:
    case 37:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressPVRTC4<false,(TwiddleOrder)0>;
      break;
    case 55:
    case 73:
    case 91:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<false,4u,2u,16ul,(TwiddleOrder)0>;
      break;
    case 57:
    case 75:
    case 93:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<false,5u,4u,16ul,(TwiddleOrder)0>;
      break;
    case 58:
    case 76:
    case 94:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<false,5u,5u,16ul,(TwiddleOrder)0>;
      break;
    case 59:
    case 77:
    case 95:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<false,6u,5u,16ul,(TwiddleOrder)0>;
      break;
    case 60:
    case 78:
    case 96:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<false,6u,6u,16ul,(TwiddleOrder)0>;
      break;
    case 61:
    case 79:
    case 97:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<false,8u,4u,16ul,(TwiddleOrder)0>;
      break;
    case 62:
    case 80:
    case 98:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<false,8u,5u,16ul,(TwiddleOrder)0>;
      break;
    case 63:
    case 81:
    case 99:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<false,8u,6u,16ul,(TwiddleOrder)0>;
      break;
    case 64:
    case 82:
    case 100:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<false,8u,8u,16ul,(TwiddleOrder)0>;
      break;
    case 65:
    case 83:
    case 101:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<false,10u,5u,16ul,(TwiddleOrder)0>;
      break;
    case 66:
    case 84:
    case 102:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<false,10u,6u,16ul,(TwiddleOrder)0>;
      break;
    case 67:
    case 85:
    case 103:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<false,10u,8u,16ul,(TwiddleOrder)0>;
      break;
    case 68:
    case 86:
    case 104:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<false,10u,10u,16ul,(TwiddleOrder)0>;
      break;
    case 69:
    case 87:
    case 105:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<false,12u,10u,16ul,(TwiddleOrder)0>;
      break;
    case 70:
    case 88:
    case 106:
      result = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCompressed<false,12u,12u,16ul,(TwiddleOrder)0>;
      break;
    default:
      result = 0;
      switch(*(_BYTE *)(*(_QWORD *)(a1 + 208) + 88))
      {
        case 1:
          v5 = *(_DWORD *)(a1 + 112) - 1;
          if (v5 >= 8)
            goto LABEL_32;
          v6 = off_2504026A8;
          goto LABEL_31;
        case 2:
          result = 0;
          switch(*(_DWORD *)(a1 + 112))
          {
            case 1:
              v7 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressZ<AGXSConverterPassThru<false,2ul,1u,(TwiddleOrder)1>>;
              v8 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,2ul,1u,(TwiddleOrder)0>>;
              goto LABEL_36;
            case 2:
              v7 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressZ<AGXSConverterPassThru<false,2ul,2u,(TwiddleOrder)1>>;
              v8 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,2ul,2u,(TwiddleOrder)0>>;
              goto LABEL_36;
            case 4:
              v7 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressZ<AGXSConverterPassThru<false,2ul,4u,(TwiddleOrder)1>>;
              v8 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,2ul,4u,(TwiddleOrder)0>>;
              goto LABEL_36;
            case 8:
              v7 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressZ<AGXSConverterPassThru<false,2ul,8u,(TwiddleOrder)1>>;
              v8 = (uint64_t (*)(int, int, int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t))agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,2ul,8u,(TwiddleOrder)0>>;
LABEL_36:
              if (v2)
                result = v7;
              else
                result = v8;
              break;
            default:
              return result;
          }
          return result;
        case 4:
          v5 = *(_DWORD *)(a1 + 112) - 1;
          if (v5 >= 8)
            goto LABEL_32;
          v6 = off_2504026E8;
          goto LABEL_31;
        case 8:
          v5 = *(_DWORD *)(a1 + 112) - 1;
          if (v5 >= 8)
            goto LABEL_32;
          v6 = off_250402728;
          goto LABEL_31;
        case 0x10:
          v5 = *(_DWORD *)(a1 + 112) - 1;
          if (v5 >= 8)
          {
LABEL_32:
            result = 0;
          }
          else
          {
            v6 = off_250402768;
LABEL_31:
            result = v6[v5];
          }
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,4u,4u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  _OWORD *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 3) >> 2;
        v26 = (a3 + 3) >> 2;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 2, a10 >> 2, (a12 + 3) >> 2, (a13 + 3) >> 2, a15, a17, a18);
          v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,5u,4u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  _OWORD *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v26 = (a3 + 4) / 5u;
        v25 = (a4 + 3) >> 2;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 5, a10 >> 2, (a12 + 4) / 5u, (a13 + 3) >> 2, a15, a17, a18);
          v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,5u,5u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  _OWORD *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 4) / 5u;
        v26 = (a3 + 4) / 5u;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 5, a10 / 5, (a12 + 4) / 5u, (a13 + 4) / 5u, a15, a17, a18);
          v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,6u,5u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  _OWORD *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 4) / 5u;
        v26 = (a3 + 5) / 6u;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 6, a10 / 5, (a12 + 5) / 6u, (a13 + 4) / 5u, a15, a17, a18);
          v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,6u,6u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  _OWORD *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 5) / 6u;
        v26 = (a3 + 5) / 6u;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 6, a10 / 6, (a12 + 5) / 6u, (a13 + 5) / 6u, a15, a17, a18);
          v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,8u,4u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  _OWORD *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 3) >> 2;
        v26 = (a3 + 7) >> 3;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 3, a10 >> 2, (a12 + 7) >> 3, (a13 + 3) >> 2, a15, a17, a18);
          v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,8u,5u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  _OWORD *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v26 = (a3 + 7) >> 3;
        v25 = (a4 + 4) / 5u;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 3, a10 / 5, (a12 + 7) >> 3, (a13 + 4) / 5u, a15, a17, a18);
          v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,8u,6u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  _OWORD *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v26 = (a3 + 7) >> 3;
        v25 = (a4 + 5) / 6u;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 3, a10 / 6, (a12 + 7) >> 3, (a13 + 5) / 6u, a15, a17, a18);
          v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,8u,8u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  _OWORD *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 7) >> 3;
        v26 = (a3 + 7) >> 3;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 3, a10 >> 3, (a12 + 7) >> 3, (a13 + 7) >> 3, a15, a17, a18);
          v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,10u,5u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  _OWORD *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 4) / 5u;
        v26 = (a3 + 9) / 0xAu;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xA, a10 / 5, (a12 + 9) / 0xAu, (a13 + 4) / 5u, a15, a17, a18);
          v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,10u,6u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  _OWORD *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 5) / 6u;
        v26 = (a3 + 9) / 0xAu;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xA, a10 / 6, (a12 + 9) / 0xAu, (a13 + 5) / 6u, a15, a17, a18);
          v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,10u,8u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  _OWORD *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v26 = (a3 + 9) / 0xAu;
        v25 = (a4 + 7) >> 3;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xA, a10 >> 3, (a12 + 9) / 0xAu, (a13 + 7) >> 3, a15, a17, a18);
          v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,10u,10u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  _OWORD *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 9) / 0xAu;
        v26 = (a3 + 9) / 0xAu;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xA, a10 / 0xA, (a12 + 9) / 0xAu, (a13 + 9) / 0xAu, a15, a17, a18);
          v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,12u,10u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  _OWORD *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 9) / 0xAu;
        v26 = (a3 + 11) / 0xCu;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xC, a10 / 0xA, (a12 + 11) / 0xCu, (a13 + 9) / 0xAu, a15, a17, a18);
          v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,12u,12u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  _OWORD *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 11) / 0xCu;
        v26 = (a3 + 11) / 0xCu;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 / 0xC, a10 / 0xC, (a12 + 11) / 0xCu, (a13 + 11) / 0xCu, a15, a17, a18);
          v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,4u,4u,8ul,(TwiddleOrder)0>(uint64_t result, _QWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  _QWORD *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 3) >> 2;
        v26 = (a3 + 3) >> 2;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,8ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 2, a10 >> 2, (a12 + 3) >> 2, (a13 + 3) >> 2, a15, a17, a18);
          v18 = (_QWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,1ul,1u,(TwiddleOrder)0>,(AGXTextureMemoryLayout)1>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  uint64_t v18;
  unsigned __int16 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unsigned int v34;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v20 = a17;
      v21 = a15;
      v22 = a13;
      v23 = a14;
      v24 = a12;
      v26 = a9;
      v34 = a7;
      v30 = result;
      if (a18)
      {
        if (a14)
        {
          v27 = *(_QWORD *)(a18 + 24);
          do
          {
            v28 = *(_DWORD *)(a18 + 20) * a11;
            *(_QWORD *)(a18 + 24) = v27 + v28;
            result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,1ul,1u,(TwiddleOrder)0>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, (unsigned int *)a18);
            v26 = a9;
            v24 = a12;
            v22 = a13;
            v21 = a15;
            v20 = a17;
            a7 = v34;
            ++a11;
            v18 += a16;
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,1ul,1u,(TwiddleOrder)0>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          v26 = a9;
          v24 = a12;
          v22 = a13;
          v21 = a15;
          v20 = a17;
          a7 = v34;
          ++a11;
          v18 += a16;
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,2ul,1u,(TwiddleOrder)0>,(AGXTextureMemoryLayout)1>(uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  _WORD *v18;
  unsigned __int16 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unsigned int v34;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v20 = a17;
      v21 = a15;
      v22 = a13;
      v23 = a14;
      v24 = a12;
      v26 = a9;
      v34 = a7;
      v30 = result;
      if (a18)
      {
        if (a14)
        {
          v27 = *(_QWORD *)(a18 + 24);
          do
          {
            v28 = *(_DWORD *)(a18 + 20) * a11;
            *(_QWORD *)(a18 + 24) = v27 + v28;
            result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,2ul,1u,(TwiddleOrder)0>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, (unsigned int *)a18);
            v26 = a9;
            v24 = a12;
            v22 = a13;
            v21 = a15;
            v20 = a17;
            a7 = v34;
            ++a11;
            v18 = (_WORD *)((char *)v18 + a16);
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,2ul,1u,(TwiddleOrder)0>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          v26 = a9;
          v24 = a12;
          v22 = a13;
          v21 = a15;
          v20 = a17;
          a7 = v34;
          ++a11;
          v18 = (_WORD *)((char *)v18 + a16);
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,4ul,1u,(TwiddleOrder)0>,(AGXTextureMemoryLayout)1>(uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  _DWORD *v18;
  unsigned __int16 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unsigned int v34;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v20 = a17;
      v21 = a15;
      v22 = a13;
      v23 = a14;
      v24 = a12;
      v26 = a9;
      v34 = a7;
      v30 = result;
      if (a18)
      {
        if (a14)
        {
          v27 = *(_QWORD *)(a18 + 24);
          do
          {
            v28 = *(_DWORD *)(a18 + 20) * a11;
            *(_QWORD *)(a18 + 24) = v27 + v28;
            result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,4ul,1u,(TwiddleOrder)0>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, (unsigned int *)a18);
            v26 = a9;
            v24 = a12;
            v22 = a13;
            v21 = a15;
            v20 = a17;
            a7 = v34;
            ++a11;
            v18 = (_DWORD *)((char *)v18 + a16);
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,4ul,1u,(TwiddleOrder)0>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          v26 = a9;
          v24 = a12;
          v22 = a13;
          v21 = a15;
          v20 = a17;
          a7 = v34;
          ++a11;
          v18 = (_DWORD *)((char *)v18 + a16);
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,8ul,1u,(TwiddleOrder)0>,(AGXTextureMemoryLayout)1>(uint64_t result, _QWORD *a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  _QWORD *v18;
  unsigned __int16 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unsigned int v34;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v20 = a17;
      v21 = a15;
      v22 = a13;
      v23 = a14;
      v24 = a12;
      v26 = a9;
      v34 = a7;
      v30 = result;
      if (a18)
      {
        if (a14)
        {
          v27 = *(_QWORD *)(a18 + 24);
          do
          {
            v28 = *(_DWORD *)(a18 + 20) * a11;
            *(_QWORD *)(a18 + 24) = v27 + v28;
            result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,8ul,1u,(TwiddleOrder)0>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, (unsigned int *)a18);
            v26 = a9;
            v24 = a12;
            v22 = a13;
            v21 = a15;
            v20 = a17;
            a7 = v34;
            ++a11;
            v18 = (_QWORD *)((char *)v18 + a16);
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,8ul,1u,(TwiddleOrder)0>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          v26 = a9;
          v24 = a12;
          v22 = a13;
          v21 = a15;
          v20 = a17;
          a7 = v34;
          ++a11;
          v18 = (_QWORD *)((char *)v18 + a16);
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>,(AGXTextureMemoryLayout)1>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, uint64_t a18)
{
  _OWORD *v18;
  unsigned __int16 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unsigned int v34;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v20 = a17;
      v21 = a15;
      v22 = a13;
      v23 = a14;
      v24 = a12;
      v26 = a9;
      v34 = a7;
      v30 = result;
      if (a18)
      {
        if (a14)
        {
          v27 = *(_QWORD *)(a18 + 24);
          do
          {
            v28 = *(_DWORD *)(a18 + 20) * a11;
            *(_QWORD *)(a18 + 24) = v27 + v28;
            result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(v30 + v28, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, (unsigned int *)a18);
            v26 = a9;
            v24 = a12;
            v22 = a13;
            v21 = a15;
            v20 = a17;
            a7 = v34;
            ++a11;
            v18 = (_OWORD *)((char *)v18 + a16);
            --v23;
          }
          while (v23);
        }
      }
      else if (a14)
      {
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(v30 + a11 * a8, v18, a3, a4, a6, a7, v26, a10, v24, v22, v21, v20, 0);
          v26 = a9;
          v24 = a12;
          v22 = a13;
          v21 = a15;
          v20 = a17;
          a7 = v34;
          ++a11;
          v18 = (_OWORD *)((char *)v18 + a16);
          --v23;
        }
        while (v23);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddle3DAddressCompressed<false,4u,2u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, uint64_t a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, int a12, int a13, unsigned int a14, uint64_t a15, uint64_t a16, unsigned __int16 *a17, unsigned int *a18)
{
  _OWORD *v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v18 = a2;
    if (a2)
    {
      v19 = a14;
      if (a14)
      {
        v23 = result;
        v25 = (a4 + 1) >> 1;
        v26 = (a3 + 3) >> 2;
        do
        {
          result = agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(v23 + a11++ * a8, v18, v26, v25, a6, a7, a9 >> 2, a10 >> 1, (a12 + 3) >> 2, (a13 + 1) >> 1, a15, a17, a18);
          v18 = (_OWORD *)((char *)v18 + a16);
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _OWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  BOOL v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  _OWORD *v135;
  uint64_t v136;
  int v137;
  _OWORD *v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  BOOL v143;
  char v144;
  int v145;
  uint64_t v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  BOOL v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  BOOL v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  BOOL v174;
  BOOL v175;
  int v176;
  int v177;
  int v178;
  int v179;
  BOOL v180;
  BOOL v181;
  int v182;
  int v183;
  int v184;
  unint64_t v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  int v190;
  int v191;
  uint64_t v192;
  int v193;
  unsigned int v194;
  BOOL v195;
  BOOL v196;
  unsigned int v197;
  int v198;
  int v199;
  unsigned int v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  BOOL v204;
  BOOL v205;
  unsigned int v206;
  int v207;
  uint64_t v208;
  int v209;
  BOOL v210;
  unsigned int v211;
  BOOL v212;
  unsigned int v213;
  int v214;
  int v215;
  unsigned int v216;
  uint64_t v217;
  int v218;
  BOOL v219;
  unsigned int v220;
  BOOL v221;
  int v222;
  _OWORD *v223;
  int v224;
  _OWORD *v225;
  uint64_t v226;
  int i;
  int v228;
  _OWORD *v229;
  uint64_t v230;
  int v231;
  int v232;
  int v233;
  unsigned int v234;
  unsigned int v235;
  int v236;
  unsigned int v237;
  char v238;
  int v239;
  int v240;
  char v241;
  _OWORD *v243;
  _OWORD *v244;
  unsigned int v247;
  int v248;
  unsigned int v249;
  int v250;
  int v251;
  uint64_t v252;
  int v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  char v257;
  uint64_t v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  BOOL v262;
  unsigned int v263;
  BOOL v264;
  unsigned int v265;
  int v266;
  uint64_t v267;
  int v268;
  int v269;
  BOOL v270;
  unsigned int v271;
  unsigned int v272;
  int v273;
  int v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  int v278;
  int v279;
  char v280[16];
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned __int8 v288;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v228 = a9;
        v229 = v13;
        v230 = v47;
        do
        {
          *v229++ = *(_OWORD *)(result + 16 * (v230 + v56));
          v230 = (v230 - v31) & v31;
          --v228;
        }
        while (v228);
        v56 = (v56 - v40) & v40;
        v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v258 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v261 = a8 >> v66;
    v263 = 1 << v66;
    v76 = v69 - 1;
    v259 = a10 + a8;
    v255 = (v69 - 1 + a10 + a8) >> v66;
    v257 = v66;
    if (a8 >> v66 >= v255)
      return result;
    v77 = (1 << v67) - 1;
    v277 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v263;
    if (v263 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v271 = a7 >> v67;
    v275 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v275)
      return result;
    v254 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v273 = v77 & v277;
    v250 = v76 & v259;
    v252 = v76 & a8;
    v86 = v261;
LABEL_92:
    v87 = v86 << v257;
    v88 = v86 - v261;
    v269 = v86 * v254;
    v265 = v86 + 1;
    v89 = v259 >= (v86 + 1) << v257;
    v90 = v263;
    if (!v89)
      v90 = v250;
    v91 = v263 - v252;
    if (!v89)
      v91 = v19;
    v92 = v88 << v257;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v252;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v267 = (v93 + v92 - v252) * a11;
    v95 = v271;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      if (v277 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      else
        v98 = a9;
      v99 = v273;
      if (v277 >= v97 << v67)
        v99 = 1 << v67;
      if (v96 >= v15)
        v100 = 0;
      else
        v100 = v85;
      if (v96 < v15)
        v99 = v98;
      if (v84 | v80)
        break;
      v118 = 0;
      v102 = 0;
      v111 = 0;
      v127 = 0;
      if (v99)
        goto LABEL_153;
LABEL_103:
      v95 = v97;
      if (v97 == v275)
      {
        v86 = v265;
        v14 = a8;
        v19 = a10;
        if (v265 == v255)
          return result;
        goto LABEL_92;
      }
    }
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v104 = v83;
    v105 = result;
    v106 = v84;
    v107 = v80;
    do
    {
      v108 = v104;
      if (v108)
        --v106;
      else
        v106 = 0;
      v109 = v101 + v108;
      if (v105)
        --v107;
      else
        v107 = 0;
      if (v105)
        v102 |= (unint64_t)(v103 & ~(-1 << v80)) << v109++;
      v103 *= 2;
      v101 = v109 - 1;
      v105 = v107 != 0;
      v104 = v106 != 0;
    }
    while (v107 | v106);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v83;
    v114 = result;
    v115 = v84;
    v116 = v80;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
        v111 |= (unint64_t)(v112 & ~(-1 << v84)) << v110++;
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v110, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v117 = 0;
    v118 = 0;
    v119 = 1;
    v120 = v83;
    v121 = result;
    v122 = v84;
    v123 = v80;
    do
    {
      v124 = v120;
      if (v124)
        --v122;
      else
        v122 = 0;
      v125 = v117 + v124;
      --v123;
      if (v121)
        v118 |= (unint64_t)(v119 & v100) << v125++;
      else
        v123 = 0;
      v119 *= 2;
      v117 = v125 - 1;
      v121 = v123 != 0;
      v120 = v122 != 0;
    }
    while (v123 | v122);
    v126 = 0;
    v127 = 0;
    v128 = 1;
    v129 = v83;
    v130 = result;
    v131 = v84;
    v132 = v80;
    do
    {
      --v131;
      if (v129)
      {
        v127 |= (unint64_t)(v128 & v93) << v126;
        v133 = v126 + 1;
      }
      else
      {
        v131 = 0;
        v133 = v126;
      }
      if (v130)
        --v132;
      else
        v132 = 0;
      v128 *= 2;
      v126 = (__PAIR64__(v133, v130) - 1) >> 32;
      v130 = v132 != 0;
      v129 = v131 != 0;
    }
    while (v132 | v131);
    v15 = a7;
    if (!v99)
      goto LABEL_103;
LABEL_153:
    if (v94)
    {
      v134 = 0;
      v135 = (_OWORD *)((char *)&a2[v100 + ((v95 - v271) << v67) - v85] + v267);
      v136 = (v95 + v269) * a12[3] * *((unsigned __int8 *)a12 + 9) + v258;
      do
      {
        v137 = v99;
        v138 = v135;
        v139 = v118;
        do
        {
          *v138++ = *(_OWORD *)(v136 + 16 * (v139 + v127));
          v139 = (v139 - v102) & v102;
          --v137;
        }
        while (v137);
        v127 = (v127 - v111) & v111;
        v135 = (_OWORD *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v280);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v244 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v140 = a6 >> v20;
    v141 = 1 << v21;
    v142 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v142 = 0;
    v143 = v141 >= a5;
    if (v141 < a5)
      v144 = v21 + v20 + v142;
    else
      v144 = *((_BYTE *)a12 + 12);
    if (v143)
      LOBYTE(v145) = *((_BYTE *)a12 + 13);
    else
      v145 = -v142;
    if (!v140)
      v21 = v144;
    v238 = v21;
    if (v140)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v145;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v238 = v22;
    v23 = v21 + v20 - v22;
  }
  v146 = v258;
  v148 = a8;
  v147 = a10;
  v237 = v286;
  if (v286)
  {
    v149 = 1 << v23;
    v236 = 1 << v238;
    if (1 << v238 >= a5)
      v150 = a5;
    else
      v150 = 1 << v238;
    v151 = 32 - __clz(v150 - 1);
    v152 = v150 > 1;
    if (v150 <= 1)
      v153 = 0;
    else
      v153 = v151;
    if (v149 >= a6)
      v154 = a6;
    else
      v154 = 1 << v23;
    v155 = 32 - __clz(v154 - 1);
    v156 = v287;
    if (v154 <= 1)
      v155 = 0;
    v270 = v154 > 1;
    v272 = v155;
    v268 = v284;
    v264 = v284 != 0;
    v266 = v285;
    v262 = v285 != 0;
    if (v287)
    {
      v157 = 0;
      v158 = 0;
      v235 = v15 >> v238;
      v256 = a8 >> v23;
      v278 = v288;
      v279 = v283;
      v274 = v285 | v284;
      v234 = a9 + v15;
      v233 = (v236 - 1) & (a9 + v15);
      v232 = v281;
      v276 = v282;
      v231 = (v236 - 1) & v15;
      v251 = (v149 - 1) & a8;
      v253 = (v149 - 1) & (a10 + a8);
      v249 = v149 - v251;
      v159 = ~(-1 << v153);
      v247 = v287;
      v248 = v155 | v153;
      v160 = ~(-1 << v155);
      v260 = v153;
      v240 = 1 << v23;
      v241 = v23;
      do
      {
        v239 = v158;
        v161 = 0;
        v162 = 0;
        v163 = a9;
        if (v234 >= (v157 + v235 + 1) << v238)
          v163 = v236 - v231;
        v164 = 1 << v238;
        if (v234 < (v157 + v235 + 1) << v238)
          v164 = v233;
        v165 = (v157 + v235) << v238 >= v15;
        v166 = v232 + v157;
        v167 = v157 << v238;
        if (v165)
          v168 = v164;
        else
          v168 = v163;
        if (v165)
          v169 = 0;
        else
          v169 = v231;
        v243 = &v244[v169 + v167];
        do
        {
          v170 = v276 + v161;
          if (v278)
          {
            v171 = v274;
            if (v274)
            {
              v172 = 0;
              v171 = 0;
              v173 = 1;
              v174 = v262;
              v175 = v264;
              v177 = v266;
              v176 = v268;
              do
              {
                --v176;
                if (v175)
                  v171 |= (v173 & v166) << v172;
                else
                  v176 = 0;
                if (v175)
                  ++v172;
                --v177;
                if (v174)
                  v171 |= (v173 & v170) << v172;
                else
                  v177 = 0;
                if (v174)
                  ++v172;
                v173 *= 2;
                --v172;
                v174 = v177 != 0;
                v175 = v176 != 0;
              }
              while (v177 | v176);
            }
          }
          else
          {
            v171 = v274;
            if (v274)
            {
              v178 = 0;
              v171 = 0;
              v179 = 1;
              v181 = v262;
              v180 = v264;
              v182 = v266;
              v183 = v268;
              do
              {
                --v182;
                if (v181)
                  v171 |= (v179 & v170) << v178;
                else
                  v182 = 0;
                if (v181)
                  ++v178;
                --v183;
                if (v180)
                  v171 |= (v179 & v166) << v178;
                else
                  v183 = 0;
                if (v180)
                  ++v178;
                v179 *= 2;
                --v178;
                v180 = v183 != 0;
                v181 = v182 != 0;
              }
              while (v183 | v182);
            }
          }
          v184 = *(_DWORD *)(v146 + 4 * ((v171 + v279) | ((v171 + v279) >> 8 << 9)));
          if (v184 < 0)
          {
            v185 = v146 - *((_QWORD *)a13 + 3) + ((unint64_t)(v184 & 0x3FFFFFF) << 14);
            result = *a13;
            v186 = a13[2];
            if (result > v186)
            {
              result = get_level_offset_within_tail(result, v186, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v153 = v260;
              v149 = v240;
              v23 = v241;
              v18 = a11;
              v148 = a8;
              v147 = a10;
              v146 = v258;
              v185 += result;
            }
            v187 = (v161 + v256) << v23;
            v188 = v249;
            if (a10 + a8 >= (v161 + v256 + 1) << v23)
            {
              v189 = v149;
            }
            else
            {
              v188 = v147;
              v189 = v253;
            }
            if (v187 >= v148)
              v190 = 0;
            else
              v190 = v251;
            if (v187 >= v148)
              v188 = v189;
            if (!v248)
            {
              v208 = 0;
              v192 = 0;
              v201 = 0;
              v217 = 0;
              v156 = v247;
              if (!v168)
                goto LABEL_198;
LABEL_271:
              if (v188)
              {
                v222 = 0;
                v223 = (_OWORD *)((char *)v243 + (v190 + (v161 << v23)) * v18);
                do
                {
                  v224 = v168;
                  v225 = v223;
                  v226 = v208;
                  do
                  {
                    result = v226 + v217;
                    *v225++ = *(_OWORD *)(v185 + 16 * (v226 + v217));
                    v226 = (v226 - v192) & v192;
                    --v224;
                  }
                  while (v224);
                  v217 = (v217 - v201) & v201;
                  v223 = (_OWORD *)((char *)v223 + v18);
                  ++v222;
                }
                while (v222 != v188);
              }
              goto LABEL_198;
            }
            v191 = 0;
            v192 = 0;
            v193 = 1;
            v195 = v270;
            v194 = v272;
            v196 = v152;
            v197 = v153;
            do
            {
              --v194;
              v198 = v195;
              if (!v198)
                v194 = 0;
              v199 = v191 + v198;
              --v197;
              if (v196)
                v192 |= (unint64_t)(v193 & v159) << v199++;
              else
                v197 = 0;
              v193 *= 2;
              v191 = v199 - 1;
              v196 = v197 != 0;
              v195 = v194 != 0;
            }
            while (v197 | v194);
            v200 = 0;
            v201 = 0;
            v202 = 1;
            v204 = v270;
            v203 = v272;
            v205 = v152;
            v206 = v153;
            do
            {
              --v203;
              if (v204)
                v201 |= (unint64_t)(v202 & v160) << v200++;
              else
                v203 = 0;
              --v206;
              if (!v205)
                v206 = 0;
              v202 *= 2;
              v200 = (__PAIR64__(v200, v205) - 1) >> 32;
              v205 = v206 != 0;
              v204 = v203 != 0;
            }
            while (v206 | v203);
            v207 = 0;
            v208 = 0;
            v209 = 1;
            v210 = v270;
            v211 = v272;
            v212 = v152;
            v213 = v153;
            do
            {
              --v211;
              v214 = v210;
              if (!v214)
                v211 = 0;
              v215 = v207 + v214;
              --v213;
              if (v212)
                v208 |= (unint64_t)(v209 & v169) << v215++;
              else
                v213 = 0;
              v209 *= 2;
              v207 = v215 - 1;
              v212 = v213 != 0;
              v210 = v211 != 0;
            }
            while (v213 | v211);
            v216 = 0;
            v217 = 0;
            v218 = 1;
            v219 = v270;
            v220 = v272;
            v221 = v152;
            LODWORD(result) = v153;
            do
            {
              --v220;
              if (v219)
                v217 |= (unint64_t)(v218 & v190) << v216++;
              else
                v220 = 0;
              LODWORD(result) = result - 1;
              if (v221)
                result = result;
              else
                result = 0;
              v218 *= 2;
              v216 = (__PAIR64__(v216, v221) - 1) >> 32;
              v221 = (_DWORD)result != 0;
              v219 = v220 != 0;
            }
            while (result | v220);
            v153 = v260;
            v156 = v247;
            if (v168)
              goto LABEL_271;
          }
LABEL_198:
          v161 = (unsigned __int16)++v162;
        }
        while (v156 > (unsigned __int16)v162);
        v158 = v239 + 1;
        v157 = (unsigned __int16)(v239 + 1);
        v15 = a7;
      }
      while (v237 > v157);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,8ul,1u,(TwiddleOrder)0>>(uint64_t result, _QWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _QWORD *v13;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  char v62;
  BOOL v63;
  char v64;
  int v65;
  unsigned int v66;
  int v68;
  char v69;
  unsigned int v70;
  BOOL v71;
  BOOL v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  int v102;
  BOOL v103;
  BOOL v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  int v120;
  BOOL v121;
  BOOL v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  int v130;
  BOOL v131;
  BOOL v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  _QWORD *v137;
  uint64_t v138;
  int v139;
  _QWORD *v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  char v146;
  int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  _BOOL8 v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  BOOL v158;
  int v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  BOOL v172;
  BOOL v173;
  int v174;
  int v175;
  int v176;
  int v177;
  BOOL v178;
  BOOL v179;
  int v180;
  int v181;
  int v182;
  unint64_t v183;
  unsigned int v184;
  _BOOL8 v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  int v190;
  uint64_t v191;
  int v192;
  BOOL v193;
  BOOL v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  int v201;
  BOOL v202;
  BOOL v203;
  unsigned int v204;
  unsigned int v205;
  int v206;
  uint64_t v207;
  int v208;
  BOOL v209;
  BOOL v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  int v217;
  BOOL v218;
  BOOL v219;
  unsigned int v220;
  int v221;
  uint64_t *v222;
  int v223;
  uint64_t *v224;
  uint64_t v225;
  int i;
  int v227;
  _QWORD *v228;
  uint64_t v229;
  int v230;
  int v231;
  int v232;
  unsigned int v233;
  unsigned int v234;
  int v235;
  unsigned int v236;
  char v237;
  int v238;
  int v239;
  char v240;
  uint64_t v241;
  _QWORD *v242;
  unsigned int v245;
  unsigned int v246;
  int v247;
  int v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  unsigned int v253;
  int v254;
  char v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  BOOL v260;
  unsigned int v261;
  BOOL v262;
  uint64_t v263;
  BOOL v264;
  int v265;
  int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  int v270;
  int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  int v276;
  char v277[16];
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned __int8 v285;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v17 = result;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        --v52;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        else
          v52 = 0;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      LODWORD(result) = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(result & a8) << v55;
          v57 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v57 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        result = (2 * result);
        v55 = (__PAIR64__(v57, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v227 = a9;
        v228 = v13;
        v229 = v47;
        do
        {
          *v228++ = *(_QWORD *)(v17 + 8 * (v229 + v56));
          v229 = (v229 - v31) & v31;
          --v227;
        }
        while (v227);
        v56 = (v56 - v40) & v40;
        v13 = (_QWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v245 = a7;
  if (!*((_BYTE *)a12 + 20))
  {
    v58 = *((unsigned __int8 *)a12 + 13);
    v59 = *((unsigned __int8 *)a12 + 12);
    v60 = 1 << v58;
    v61 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v61 = 0;
    v62 = v59 + v58;
    result = v59 + v58 + v61;
    if (a6 >> v58)
      v63 = 1;
    else
      v63 = 1 << v59 >= a5;
    if (v63)
      v64 = *((_BYTE *)a12 + 12);
    else
      v64 = v59 + v58 + v61;
    if (v63)
      LOBYTE(v65) = *((_BYTE *)a12 + 13);
    else
      v65 = -v61;
    v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v66) = 0;
    if (v60 < a6 && a5 >> v59 == 0)
      LOBYTE(v65) = v62 - v66;
    else
      LOBYTE(v66) = v64;
    v68 = 1 << v65;
    v69 = *((_BYTE *)a12 + 15);
    v70 = 1 << v69;
    if (v69)
      v71 = v70 > a3;
    else
      v71 = 1;
    v72 = v71 || v70 > a4;
    v73 = (~(-1 << v69) + a3) & (-1 << v69);
    if (v72)
      v74 = a3;
    else
      v74 = v73;
    v259 = 1 << v65;
    v75 = v68 - 1;
    v255 = v65;
    v256 = a10 + a8;
    v258 = a8 >> v65;
    v253 = (v68 - 1 + a10 + a8) >> v65;
    if (a8 >> v65 >= v253)
      return result;
    v76 = (1 << v66) - 1;
    v274 = a9 + a7;
    if (1 << v66 >= a5)
      v77 = a5;
    else
      v77 = 1 << v66;
    v78 = 32 - __clz(v77 - 1);
    result = v77 > 1;
    if (v77 <= 1)
      v79 = 0;
    else
      v79 = v78;
    v80 = v259;
    if (v259 >= a6)
      v80 = a6;
    v81 = 32 - __clz(v80 - 1);
    v82 = v80 > 1;
    v83 = v80 <= 1 ? 0 : v81;
    v267 = a7 >> v66;
    v272 = (v76 + a9 + a7) >> v66;
    if (a7 >> v66 >= v272)
      return result;
    v251 = (v74 + ~(-1 << v66)) >> v66;
    v84 = v76 & a7;
    v270 = v76 & v274;
    v247 = v75 & v256;
    v249 = v75 & a8;
    v85 = v258;
LABEL_90:
    v86 = v85 << v255;
    v87 = v85 - v258;
    v265 = v85 * v251;
    v261 = v85 + 1;
    v88 = v256 >= (v85 + 1) << v255;
    v89 = v259;
    if (!v88)
      v89 = v247;
    v90 = v259 - v249;
    if (!v88)
      v90 = v19;
    v91 = v87 << v255;
    if (v86 >= a8)
      v92 = 0;
    else
      v92 = v249;
    if (v86 >= a8)
      v93 = v89;
    else
      v93 = v90;
    v263 = (v92 + v91 - v249) * a11;
    v94 = v267;
    while (1)
    {
      v95 = v94 << v66;
      v96 = v94 + 1;
      v97 = a9;
      if (v274 >= (v94 + 1) << v66)
        v97 = (1 << v66) - v84;
      v98 = 1 << v66;
      if (v274 < v96 << v66)
        v98 = v270;
      if (v95 >= a7)
        v99 = 0;
      else
        v99 = v84;
      if (v95 < a7)
        v98 = v97;
      if (v83 | v79)
        break;
      v119 = 0;
      v101 = 0;
      v111 = 0;
      v129 = 0;
      if (v98)
        goto LABEL_151;
LABEL_101:
      v94 = v96;
      if (v96 == v272)
      {
        v85 = v261;
        v19 = a10;
        if (v261 == v253)
          return result;
        goto LABEL_90;
      }
    }
    v100 = 0;
    v101 = 0;
    v102 = 1;
    v103 = v82;
    v104 = result;
    v105 = v83;
    v106 = v79;
    do
    {
      v107 = v103;
      if (v107)
        --v105;
      else
        v105 = 0;
      v108 = v100 + v107;
      if (v104)
        --v106;
      else
        v106 = 0;
      if (v104)
      {
        v101 |= (unint64_t)(v102 & ~(-1 << v79)) << v108;
        v109 = v108 + 1;
      }
      else
      {
        v109 = v108;
      }
      v102 *= 2;
      v100 = v109 - 1;
      v104 = v106 != 0;
      v103 = v105 != 0;
    }
    while (v106 | v105);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v82;
    v114 = result;
    v115 = v83;
    v116 = v79;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
      {
        v111 |= (unint64_t)(v112 & ~(-1 << v83)) << v110;
        v117 = v110 + 1;
      }
      else
      {
        v117 = v110;
      }
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v117, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v118 = 0;
    v119 = 0;
    v120 = 1;
    v121 = v82;
    v122 = result;
    v123 = v83;
    v124 = v79;
    do
    {
      v125 = v121;
      if (v125)
        --v123;
      else
        v123 = 0;
      v126 = v118 + v125;
      --v124;
      if (v122)
      {
        v119 |= (unint64_t)(v120 & v99) << v126;
        v127 = v126 + 1;
      }
      else
      {
        v124 = 0;
        v127 = v126;
      }
      v120 *= 2;
      v118 = v127 - 1;
      v122 = v124 != 0;
      v121 = v123 != 0;
    }
    while (v124 | v123);
    v128 = 0;
    v129 = 0;
    v130 = 1;
    v131 = v82;
    v132 = result;
    v133 = v83;
    v134 = v79;
    do
    {
      --v133;
      if (v131)
      {
        v129 |= (unint64_t)(v130 & v92) << v128;
        v135 = v128 + 1;
      }
      else
      {
        v133 = 0;
        v135 = v128;
      }
      --v134;
      if (!v132)
        v134 = 0;
      v130 *= 2;
      v128 = (__PAIR64__(v135, v132) - 1) >> 32;
      v132 = v134 != 0;
      v131 = v133 != 0;
    }
    while (v134 | v133);
    v13 = a2;
    a7 = v245;
    if (!v98)
      goto LABEL_101;
LABEL_151:
    if (v93)
    {
      v136 = 0;
      v137 = (_QWORD *)((char *)&v13[v99 + ((v94 - v267) << v66) - v84] + v263);
      v138 = (v94 + v265) * a12[3] * *((unsigned __int8 *)a12 + 9) + v17;
      do
      {
        v139 = v98;
        v140 = v137;
        v141 = v119;
        do
        {
          *v140++ = *(_QWORD *)(v138 + 8 * (v141 + v129));
          v141 = (v141 - v101) & v101;
          --v139;
        }
        while (v139);
        v129 = (v129 - v111) & v111;
        v137 = (_QWORD *)((char *)v137 + a11);
        ++v136;
      }
      while (v136 != v93);
    }
    goto LABEL_101;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v277);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v142 = a6 >> v20;
    v143 = 1 << v21;
    v144 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v144 = 0;
    v145 = v143 >= a5;
    if (v143 < a5)
      v146 = v21 + v20 + v144;
    else
      v146 = *((_BYTE *)a12 + 12);
    if (v145)
      LOBYTE(v147) = *((_BYTE *)a12 + 13);
    else
      v147 = -v144;
    if (!v142)
      v21 = v146;
    v237 = v21;
    if (v142)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v147;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v237 = v22;
    v23 = v21 + v20 - v22;
  }
  v148 = a10;
  v149 = a8;
  v236 = v283;
  if (v283)
  {
    v150 = 1 << v23;
    v235 = 1 << v237;
    if (1 << v237 >= a5)
      v151 = a5;
    else
      v151 = 1 << v237;
    v152 = 32 - __clz(v151 - 1);
    v153 = v151 > 1;
    if (v151 <= 1)
      v154 = 0;
    else
      v154 = v152;
    if (v150 >= a6)
      v155 = a6;
    else
      v155 = 1 << v23;
    v156 = 32 - __clz(v155 - 1);
    v157 = v284;
    v158 = v155 > 1;
    if (v155 <= 1)
      v156 = 0;
    v268 = v281;
    v269 = v156;
    v264 = v281 != 0;
    v266 = v282;
    v262 = v282 != 0;
    if (v284)
    {
      v159 = 0;
      v234 = a7 >> v237;
      v257 = a8 >> v23;
      v271 = v282 | v281;
      v275 = v285;
      v276 = v280;
      v233 = a9 + a7;
      v232 = (v235 - 1) & (a9 + a7);
      v230 = v278;
      v273 = v279;
      v231 = (v235 - 1) & a7;
      v252 = (v150 - 1) & a8;
      v254 = (v150 - 1) & (a10 + a8);
      v250 = v150 - v252;
      v246 = v284;
      v248 = v156 | v154;
      v160 = ~(-1 << v156);
      v260 = v155 > 1;
      v241 = v17;
      v239 = 1 << v23;
      v240 = v23;
      do
      {
        v161 = 0;
        v162 = v230 + v159;
        v163 = (v159 + v234) << v237;
        v164 = a9;
        if (v233 >= (v159 + v234 + 1) << v237)
          v164 = v235 - v231;
        v165 = 1 << v237;
        if (v233 < (v159 + v234 + 1) << v237)
          v165 = v232;
        v238 = v159;
        if (v163 >= v245)
          v166 = v165;
        else
          v166 = v164;
        if (v163 >= v245)
          v167 = 0;
        else
          v167 = v231;
        v242 = &a2[v167 + (v159 << v237)];
        do
        {
          v168 = v273 + v161;
          if (v275)
          {
            v169 = v271;
            if (v271)
            {
              v170 = 0;
              v169 = 0;
              v171 = 1;
              v172 = v262;
              v173 = v264;
              v175 = v266;
              v174 = v268;
              do
              {
                --v174;
                if (v173)
                  v169 |= (v171 & v162) << v170;
                else
                  v174 = 0;
                if (v173)
                  ++v170;
                --v175;
                if (v172)
                  v169 |= (v171 & v168) << v170;
                else
                  v175 = 0;
                if (v172)
                  ++v170;
                v171 *= 2;
                --v170;
                v172 = v175 != 0;
                v173 = v174 != 0;
              }
              while (v175 | v174);
            }
          }
          else
          {
            v169 = v271;
            if (v271)
            {
              v176 = 0;
              v169 = 0;
              v177 = 1;
              v179 = v262;
              v178 = v264;
              v180 = v266;
              v181 = v268;
              do
              {
                --v180;
                if (v179)
                  v169 |= (v177 & v168) << v176;
                else
                  v180 = 0;
                if (v179)
                  ++v176;
                --v181;
                if (v178)
                  v169 |= (v177 & v162) << v176;
                else
                  v181 = 0;
                if (v178)
                  ++v176;
                v177 *= 2;
                --v176;
                v178 = v181 != 0;
                v179 = v180 != 0;
              }
              while (v181 | v180);
            }
          }
          v182 = *(_DWORD *)(v17 + 4 * ((v169 + v276) | ((v169 + v276) >> 8 << 9)));
          if (v182 < 0)
          {
            v183 = v17 - *((_QWORD *)a13 + 3) + ((unint64_t)(v182 & 0x3FFFFFF) << 14);
            result = *a13;
            v184 = a13[2];
            if (result > v184)
            {
              v185 = v153;
              result = get_level_offset_within_tail(result, v184, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v158 = v260;
              v153 = v185;
              v150 = v239;
              v23 = v240;
              v17 = v241;
              v18 = a11;
              v149 = a8;
              v148 = a10;
              v183 += result;
            }
            v186 = (v161 + v257) << v23;
            v187 = v250;
            if (a10 + a8 >= (v161 + v257 + 1) << v23)
            {
              v188 = v150;
            }
            else
            {
              v187 = v148;
              v188 = v254;
            }
            if (v186 >= v149)
              v189 = 0;
            else
              v189 = v252;
            if (v186 >= v149)
              v187 = v188;
            if (!v248)
            {
              v207 = 0;
              v191 = 0;
              v200 = 0;
              v216 = 0;
              v157 = v246;
              if (!v166)
                goto LABEL_196;
LABEL_269:
              if (v187)
              {
                v221 = 0;
                v222 = (_QWORD *)((char *)v242 + (v189 + (v161 << v23)) * v18);
                do
                {
                  v223 = v166;
                  v224 = v222;
                  v225 = v207;
                  do
                  {
                    result = *(_QWORD *)(v183 + 8 * (v225 + v216));
                    *v224++ = result;
                    v225 = (v225 - v191) & v191;
                    --v223;
                  }
                  while (v223);
                  v216 = (v216 - v200) & v200;
                  v222 = (uint64_t *)((char *)v222 + v18);
                  ++v221;
                }
                while (v221 != v187);
              }
              goto LABEL_196;
            }
            v190 = 0;
            v191 = 0;
            v192 = 1;
            v193 = v158;
            v194 = v153;
            v195 = v269;
            v196 = v154;
            do
            {
              --v195;
              v197 = v193;
              if (!v197)
                v195 = 0;
              v198 = v190 + v197;
              --v196;
              if (v194)
                v191 |= (unint64_t)(v192 & ~(-1 << v154)) << v198++;
              else
                v196 = 0;
              v192 *= 2;
              v190 = v198 - 1;
              v194 = v196 != 0;
              v193 = v195 != 0;
            }
            while (v196 | v195);
            v199 = 0;
            v200 = 0;
            v201 = 1;
            v202 = v158;
            v203 = v153;
            v204 = v269;
            v205 = v154;
            do
            {
              --v204;
              if (v202)
                v200 |= (unint64_t)(v201 & v160) << v199++;
              else
                v204 = 0;
              --v205;
              if (!v203)
                v205 = 0;
              v201 *= 2;
              v199 = (__PAIR64__(v199, v203) - 1) >> 32;
              v203 = v205 != 0;
              v202 = v204 != 0;
            }
            while (v205 | v204);
            v206 = 0;
            v207 = 0;
            v208 = 1;
            v209 = v158;
            v210 = v153;
            v211 = v269;
            v212 = v154;
            do
            {
              --v211;
              v213 = v209;
              if (!v213)
                v211 = 0;
              v214 = v206 + v213;
              --v212;
              if (v210)
                v207 |= (unint64_t)(v208 & v167) << v214++;
              else
                v212 = 0;
              v208 *= 2;
              v206 = v214 - 1;
              v210 = v212 != 0;
              v209 = v211 != 0;
            }
            while (v212 | v211);
            v215 = 0;
            v216 = 0;
            v217 = 1;
            v218 = v158;
            v219 = v153;
            v220 = v269;
            LODWORD(result) = v154;
            do
            {
              --v220;
              if (v218)
                v216 |= (unint64_t)(v217 & v189) << v215++;
              else
                v220 = 0;
              LODWORD(result) = result - 1;
              if (v219)
                result = result;
              else
                result = 0;
              v217 *= 2;
              v215 = (__PAIR64__(v215, v219) - 1) >> 32;
              v219 = (_DWORD)result != 0;
              v218 = v220 != 0;
            }
            while (result | v220);
            v157 = v246;
            v158 = v260;
            if (v166)
              goto LABEL_269;
          }
LABEL_196:
          ++v161;
        }
        while (v157 > (unsigned __int16)v161);
        v159 = v238 + 1;
      }
      while (v236 > (unsigned __int16)(v238 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,4ul,1u,(TwiddleOrder)0>>(uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _DWORD *v13;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  char v62;
  BOOL v63;
  char v64;
  int v65;
  unsigned int v66;
  int v68;
  char v69;
  unsigned int v70;
  BOOL v71;
  BOOL v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  int v102;
  BOOL v103;
  BOOL v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  int v120;
  BOOL v121;
  BOOL v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  int v130;
  BOOL v131;
  BOOL v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  _DWORD *v137;
  uint64_t v138;
  int v139;
  _DWORD *v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  char v146;
  int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  _BOOL8 v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  BOOL v158;
  int v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  BOOL v172;
  BOOL v173;
  int v174;
  int v175;
  int v176;
  int v177;
  BOOL v178;
  BOOL v179;
  int v180;
  int v181;
  int v182;
  unint64_t v183;
  unsigned int v184;
  _BOOL8 v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  int v190;
  uint64_t v191;
  int v192;
  BOOL v193;
  BOOL v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  int v201;
  BOOL v202;
  BOOL v203;
  unsigned int v204;
  unsigned int v205;
  int v206;
  uint64_t v207;
  int v208;
  BOOL v209;
  BOOL v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  int v217;
  BOOL v218;
  BOOL v219;
  unsigned int v220;
  int v221;
  _DWORD *v222;
  int v223;
  _DWORD *v224;
  uint64_t v225;
  int i;
  int v227;
  _DWORD *v228;
  uint64_t v229;
  int v230;
  int v231;
  int v232;
  unsigned int v233;
  unsigned int v234;
  int v235;
  unsigned int v236;
  char v237;
  int v238;
  int v239;
  char v240;
  uint64_t v241;
  _DWORD *v242;
  unsigned int v245;
  unsigned int v246;
  int v247;
  int v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  unsigned int v253;
  int v254;
  char v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  BOOL v260;
  unsigned int v261;
  BOOL v262;
  uint64_t v263;
  BOOL v264;
  int v265;
  int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  int v270;
  int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  int v276;
  char v277[16];
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned __int8 v285;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v17 = result;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        --v52;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        else
          v52 = 0;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      LODWORD(result) = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(result & a8) << v55;
          v57 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v57 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        result = (2 * result);
        v55 = (__PAIR64__(v57, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v227 = a9;
        v228 = v13;
        v229 = v47;
        do
        {
          *v228++ = *(_DWORD *)(v17 + 4 * (v229 + v56));
          v229 = (v229 - v31) & v31;
          --v227;
        }
        while (v227);
        v56 = (v56 - v40) & v40;
        v13 = (_DWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v245 = a7;
  if (!*((_BYTE *)a12 + 20))
  {
    v58 = *((unsigned __int8 *)a12 + 13);
    v59 = *((unsigned __int8 *)a12 + 12);
    v60 = 1 << v58;
    v61 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v61 = 0;
    v62 = v59 + v58;
    result = v59 + v58 + v61;
    if (a6 >> v58)
      v63 = 1;
    else
      v63 = 1 << v59 >= a5;
    if (v63)
      v64 = *((_BYTE *)a12 + 12);
    else
      v64 = v59 + v58 + v61;
    if (v63)
      LOBYTE(v65) = *((_BYTE *)a12 + 13);
    else
      v65 = -v61;
    v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v66) = 0;
    if (v60 < a6 && a5 >> v59 == 0)
      LOBYTE(v65) = v62 - v66;
    else
      LOBYTE(v66) = v64;
    v68 = 1 << v65;
    v69 = *((_BYTE *)a12 + 15);
    v70 = 1 << v69;
    if (v69)
      v71 = v70 > a3;
    else
      v71 = 1;
    v72 = v71 || v70 > a4;
    v73 = (~(-1 << v69) + a3) & (-1 << v69);
    if (v72)
      v74 = a3;
    else
      v74 = v73;
    v259 = 1 << v65;
    v75 = v68 - 1;
    v255 = v65;
    v256 = a10 + a8;
    v258 = a8 >> v65;
    v253 = (v68 - 1 + a10 + a8) >> v65;
    if (a8 >> v65 >= v253)
      return result;
    v76 = (1 << v66) - 1;
    v274 = a9 + a7;
    if (1 << v66 >= a5)
      v77 = a5;
    else
      v77 = 1 << v66;
    v78 = 32 - __clz(v77 - 1);
    result = v77 > 1;
    if (v77 <= 1)
      v79 = 0;
    else
      v79 = v78;
    v80 = v259;
    if (v259 >= a6)
      v80 = a6;
    v81 = 32 - __clz(v80 - 1);
    v82 = v80 > 1;
    v83 = v80 <= 1 ? 0 : v81;
    v267 = a7 >> v66;
    v272 = (v76 + a9 + a7) >> v66;
    if (a7 >> v66 >= v272)
      return result;
    v251 = (v74 + ~(-1 << v66)) >> v66;
    v84 = v76 & a7;
    v270 = v76 & v274;
    v247 = v75 & v256;
    v249 = v75 & a8;
    v85 = v258;
LABEL_90:
    v86 = v85 << v255;
    v87 = v85 - v258;
    v265 = v85 * v251;
    v261 = v85 + 1;
    v88 = v256 >= (v85 + 1) << v255;
    v89 = v259;
    if (!v88)
      v89 = v247;
    v90 = v259 - v249;
    if (!v88)
      v90 = v19;
    v91 = v87 << v255;
    if (v86 >= a8)
      v92 = 0;
    else
      v92 = v249;
    if (v86 >= a8)
      v93 = v89;
    else
      v93 = v90;
    v263 = (v92 + v91 - v249) * a11;
    v94 = v267;
    while (1)
    {
      v95 = v94 << v66;
      v96 = v94 + 1;
      v97 = a9;
      if (v274 >= (v94 + 1) << v66)
        v97 = (1 << v66) - v84;
      v98 = 1 << v66;
      if (v274 < v96 << v66)
        v98 = v270;
      if (v95 >= a7)
        v99 = 0;
      else
        v99 = v84;
      if (v95 < a7)
        v98 = v97;
      if (v83 | v79)
        break;
      v119 = 0;
      v101 = 0;
      v111 = 0;
      v129 = 0;
      if (v98)
        goto LABEL_151;
LABEL_101:
      v94 = v96;
      if (v96 == v272)
      {
        v85 = v261;
        v19 = a10;
        if (v261 == v253)
          return result;
        goto LABEL_90;
      }
    }
    v100 = 0;
    v101 = 0;
    v102 = 1;
    v103 = v82;
    v104 = result;
    v105 = v83;
    v106 = v79;
    do
    {
      v107 = v103;
      if (v107)
        --v105;
      else
        v105 = 0;
      v108 = v100 + v107;
      if (v104)
        --v106;
      else
        v106 = 0;
      if (v104)
      {
        v101 |= (unint64_t)(v102 & ~(-1 << v79)) << v108;
        v109 = v108 + 1;
      }
      else
      {
        v109 = v108;
      }
      v102 *= 2;
      v100 = v109 - 1;
      v104 = v106 != 0;
      v103 = v105 != 0;
    }
    while (v106 | v105);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v82;
    v114 = result;
    v115 = v83;
    v116 = v79;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
      {
        v111 |= (unint64_t)(v112 & ~(-1 << v83)) << v110;
        v117 = v110 + 1;
      }
      else
      {
        v117 = v110;
      }
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v117, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v118 = 0;
    v119 = 0;
    v120 = 1;
    v121 = v82;
    v122 = result;
    v123 = v83;
    v124 = v79;
    do
    {
      v125 = v121;
      if (v125)
        --v123;
      else
        v123 = 0;
      v126 = v118 + v125;
      --v124;
      if (v122)
      {
        v119 |= (unint64_t)(v120 & v99) << v126;
        v127 = v126 + 1;
      }
      else
      {
        v124 = 0;
        v127 = v126;
      }
      v120 *= 2;
      v118 = v127 - 1;
      v122 = v124 != 0;
      v121 = v123 != 0;
    }
    while (v124 | v123);
    v128 = 0;
    v129 = 0;
    v130 = 1;
    v131 = v82;
    v132 = result;
    v133 = v83;
    v134 = v79;
    do
    {
      --v133;
      if (v131)
      {
        v129 |= (unint64_t)(v130 & v92) << v128;
        v135 = v128 + 1;
      }
      else
      {
        v133 = 0;
        v135 = v128;
      }
      --v134;
      if (!v132)
        v134 = 0;
      v130 *= 2;
      v128 = (__PAIR64__(v135, v132) - 1) >> 32;
      v132 = v134 != 0;
      v131 = v133 != 0;
    }
    while (v134 | v133);
    v13 = a2;
    a7 = v245;
    if (!v98)
      goto LABEL_101;
LABEL_151:
    if (v93)
    {
      v136 = 0;
      v137 = (_DWORD *)((char *)&v13[v99 + ((v94 - v267) << v66) - v84] + v263);
      v138 = (v94 + v265) * a12[3] * *((unsigned __int8 *)a12 + 9) + v17;
      do
      {
        v139 = v98;
        v140 = v137;
        v141 = v119;
        do
        {
          *v140++ = *(_DWORD *)(v138 + 4 * (v141 + v129));
          v141 = (v141 - v101) & v101;
          --v139;
        }
        while (v139);
        v129 = (v129 - v111) & v111;
        v137 = (_DWORD *)((char *)v137 + a11);
        ++v136;
      }
      while (v136 != v93);
    }
    goto LABEL_101;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v277);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v142 = a6 >> v20;
    v143 = 1 << v21;
    v144 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v144 = 0;
    v145 = v143 >= a5;
    if (v143 < a5)
      v146 = v21 + v20 + v144;
    else
      v146 = *((_BYTE *)a12 + 12);
    if (v145)
      LOBYTE(v147) = *((_BYTE *)a12 + 13);
    else
      v147 = -v144;
    if (!v142)
      v21 = v146;
    v237 = v21;
    if (v142)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v147;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v237 = v22;
    v23 = v21 + v20 - v22;
  }
  v148 = a10;
  v149 = a8;
  v236 = v283;
  if (v283)
  {
    v150 = 1 << v23;
    v235 = 1 << v237;
    if (1 << v237 >= a5)
      v151 = a5;
    else
      v151 = 1 << v237;
    v152 = 32 - __clz(v151 - 1);
    v153 = v151 > 1;
    if (v151 <= 1)
      v154 = 0;
    else
      v154 = v152;
    if (v150 >= a6)
      v155 = a6;
    else
      v155 = 1 << v23;
    v156 = 32 - __clz(v155 - 1);
    v157 = v284;
    v158 = v155 > 1;
    if (v155 <= 1)
      v156 = 0;
    v268 = v281;
    v269 = v156;
    v264 = v281 != 0;
    v266 = v282;
    v262 = v282 != 0;
    if (v284)
    {
      v159 = 0;
      v234 = a7 >> v237;
      v257 = a8 >> v23;
      v271 = v282 | v281;
      v275 = v285;
      v276 = v280;
      v233 = a9 + a7;
      v232 = (v235 - 1) & (a9 + a7);
      v230 = v278;
      v273 = v279;
      v231 = (v235 - 1) & a7;
      v252 = (v150 - 1) & a8;
      v254 = (v150 - 1) & (a10 + a8);
      v250 = v150 - v252;
      v246 = v284;
      v248 = v156 | v154;
      v160 = ~(-1 << v156);
      v260 = v155 > 1;
      v241 = v17;
      v239 = 1 << v23;
      v240 = v23;
      do
      {
        v161 = 0;
        v162 = v230 + v159;
        v163 = (v159 + v234) << v237;
        v164 = a9;
        if (v233 >= (v159 + v234 + 1) << v237)
          v164 = v235 - v231;
        v165 = 1 << v237;
        if (v233 < (v159 + v234 + 1) << v237)
          v165 = v232;
        v238 = v159;
        if (v163 >= v245)
          v166 = v165;
        else
          v166 = v164;
        if (v163 >= v245)
          v167 = 0;
        else
          v167 = v231;
        v242 = &a2[v167 + (v159 << v237)];
        do
        {
          v168 = v273 + v161;
          if (v275)
          {
            v169 = v271;
            if (v271)
            {
              v170 = 0;
              v169 = 0;
              v171 = 1;
              v172 = v262;
              v173 = v264;
              v175 = v266;
              v174 = v268;
              do
              {
                --v174;
                if (v173)
                  v169 |= (v171 & v162) << v170;
                else
                  v174 = 0;
                if (v173)
                  ++v170;
                --v175;
                if (v172)
                  v169 |= (v171 & v168) << v170;
                else
                  v175 = 0;
                if (v172)
                  ++v170;
                v171 *= 2;
                --v170;
                v172 = v175 != 0;
                v173 = v174 != 0;
              }
              while (v175 | v174);
            }
          }
          else
          {
            v169 = v271;
            if (v271)
            {
              v176 = 0;
              v169 = 0;
              v177 = 1;
              v179 = v262;
              v178 = v264;
              v180 = v266;
              v181 = v268;
              do
              {
                --v180;
                if (v179)
                  v169 |= (v177 & v168) << v176;
                else
                  v180 = 0;
                if (v179)
                  ++v176;
                --v181;
                if (v178)
                  v169 |= (v177 & v162) << v176;
                else
                  v181 = 0;
                if (v178)
                  ++v176;
                v177 *= 2;
                --v176;
                v178 = v181 != 0;
                v179 = v180 != 0;
              }
              while (v181 | v180);
            }
          }
          v182 = *(_DWORD *)(v17 + 4 * ((v169 + v276) | ((v169 + v276) >> 8 << 9)));
          if (v182 < 0)
          {
            v183 = v17 - *((_QWORD *)a13 + 3) + ((unint64_t)(v182 & 0x3FFFFFF) << 14);
            result = *a13;
            v184 = a13[2];
            if (result > v184)
            {
              v185 = v153;
              result = get_level_offset_within_tail(result, v184, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v158 = v260;
              v153 = v185;
              v150 = v239;
              v23 = v240;
              v17 = v241;
              v18 = a11;
              v149 = a8;
              v148 = a10;
              v183 += result;
            }
            v186 = (v161 + v257) << v23;
            v187 = v250;
            if (a10 + a8 >= (v161 + v257 + 1) << v23)
            {
              v188 = v150;
            }
            else
            {
              v187 = v148;
              v188 = v254;
            }
            if (v186 >= v149)
              v189 = 0;
            else
              v189 = v252;
            if (v186 >= v149)
              v187 = v188;
            if (!v248)
            {
              v207 = 0;
              v191 = 0;
              v200 = 0;
              v216 = 0;
              v157 = v246;
              if (!v166)
                goto LABEL_196;
LABEL_269:
              if (v187)
              {
                v221 = 0;
                v222 = (_DWORD *)((char *)v242 + (v189 + (v161 << v23)) * v18);
                do
                {
                  v223 = v166;
                  v224 = v222;
                  v225 = v207;
                  do
                  {
                    result = *(unsigned int *)(v183 + 4 * (v225 + v216));
                    *v224++ = result;
                    v225 = (v225 - v191) & v191;
                    --v223;
                  }
                  while (v223);
                  v216 = (v216 - v200) & v200;
                  v222 = (_DWORD *)((char *)v222 + v18);
                  ++v221;
                }
                while (v221 != v187);
              }
              goto LABEL_196;
            }
            v190 = 0;
            v191 = 0;
            v192 = 1;
            v193 = v158;
            v194 = v153;
            v195 = v269;
            v196 = v154;
            do
            {
              --v195;
              v197 = v193;
              if (!v197)
                v195 = 0;
              v198 = v190 + v197;
              --v196;
              if (v194)
                v191 |= (unint64_t)(v192 & ~(-1 << v154)) << v198++;
              else
                v196 = 0;
              v192 *= 2;
              v190 = v198 - 1;
              v194 = v196 != 0;
              v193 = v195 != 0;
            }
            while (v196 | v195);
            v199 = 0;
            v200 = 0;
            v201 = 1;
            v202 = v158;
            v203 = v153;
            v204 = v269;
            v205 = v154;
            do
            {
              --v204;
              if (v202)
                v200 |= (unint64_t)(v201 & v160) << v199++;
              else
                v204 = 0;
              --v205;
              if (!v203)
                v205 = 0;
              v201 *= 2;
              v199 = (__PAIR64__(v199, v203) - 1) >> 32;
              v203 = v205 != 0;
              v202 = v204 != 0;
            }
            while (v205 | v204);
            v206 = 0;
            v207 = 0;
            v208 = 1;
            v209 = v158;
            v210 = v153;
            v211 = v269;
            v212 = v154;
            do
            {
              --v211;
              v213 = v209;
              if (!v213)
                v211 = 0;
              v214 = v206 + v213;
              --v212;
              if (v210)
                v207 |= (unint64_t)(v208 & v167) << v214++;
              else
                v212 = 0;
              v208 *= 2;
              v206 = v214 - 1;
              v210 = v212 != 0;
              v209 = v211 != 0;
            }
            while (v212 | v211);
            v215 = 0;
            v216 = 0;
            v217 = 1;
            v218 = v158;
            v219 = v153;
            v220 = v269;
            LODWORD(result) = v154;
            do
            {
              --v220;
              if (v218)
                v216 |= (unint64_t)(v217 & v189) << v215++;
              else
                v220 = 0;
              LODWORD(result) = result - 1;
              if (v219)
                result = result;
              else
                result = 0;
              v217 *= 2;
              v215 = (__PAIR64__(v215, v219) - 1) >> 32;
              v219 = (_DWORD)result != 0;
              v218 = v220 != 0;
            }
            while (result | v220);
            v157 = v246;
            v158 = v260;
            if (v166)
              goto LABEL_269;
          }
LABEL_196:
          ++v161;
        }
        while (v157 > (unsigned __int16)v161);
        v159 = v238 + 1;
      }
      while (v236 > (unsigned __int16)(v238 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,2ul,1u,(TwiddleOrder)0>>(uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _WORD *v13;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  char v62;
  BOOL v63;
  char v64;
  int v65;
  unsigned int v66;
  int v68;
  char v69;
  unsigned int v70;
  BOOL v71;
  BOOL v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  int v102;
  BOOL v103;
  BOOL v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  int v120;
  BOOL v121;
  BOOL v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  int v130;
  BOOL v131;
  BOOL v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  _WORD *v137;
  uint64_t v138;
  int v139;
  _WORD *v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  char v146;
  int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  _BOOL8 v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  BOOL v158;
  int v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  BOOL v172;
  BOOL v173;
  int v174;
  int v175;
  int v176;
  int v177;
  BOOL v178;
  BOOL v179;
  int v180;
  int v181;
  int v182;
  unint64_t v183;
  unsigned int v184;
  _BOOL8 v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  int v190;
  uint64_t v191;
  int v192;
  BOOL v193;
  BOOL v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  int v201;
  BOOL v202;
  BOOL v203;
  unsigned int v204;
  unsigned int v205;
  int v206;
  uint64_t v207;
  int v208;
  BOOL v209;
  BOOL v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  int v217;
  BOOL v218;
  BOOL v219;
  unsigned int v220;
  int v221;
  _WORD *v222;
  int v223;
  _WORD *v224;
  uint64_t v225;
  int i;
  int v227;
  _WORD *v228;
  uint64_t v229;
  int v230;
  int v231;
  int v232;
  unsigned int v233;
  unsigned int v234;
  int v235;
  unsigned int v236;
  char v237;
  int v238;
  int v239;
  char v240;
  uint64_t v241;
  _WORD *v242;
  unsigned int v245;
  unsigned int v246;
  int v247;
  int v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  unsigned int v253;
  int v254;
  char v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  BOOL v260;
  unsigned int v261;
  BOOL v262;
  uint64_t v263;
  BOOL v264;
  int v265;
  int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  int v270;
  int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  int v276;
  char v277[16];
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned __int8 v285;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v17 = result;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        --v52;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        else
          v52 = 0;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      LODWORD(result) = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(result & a8) << v55;
          v57 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v57 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        result = (2 * result);
        v55 = (__PAIR64__(v57, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v227 = a9;
        v228 = v13;
        v229 = v47;
        do
        {
          *v228++ = *(_WORD *)(v17 + 2 * (v229 + v56));
          v229 = (v229 - v31) & v31;
          --v227;
        }
        while (v227);
        v56 = (v56 - v40) & v40;
        v13 = (_WORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v245 = a7;
  if (!*((_BYTE *)a12 + 20))
  {
    v58 = *((unsigned __int8 *)a12 + 13);
    v59 = *((unsigned __int8 *)a12 + 12);
    v60 = 1 << v58;
    v61 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v61 = 0;
    v62 = v59 + v58;
    result = v59 + v58 + v61;
    if (a6 >> v58)
      v63 = 1;
    else
      v63 = 1 << v59 >= a5;
    if (v63)
      v64 = *((_BYTE *)a12 + 12);
    else
      v64 = v59 + v58 + v61;
    if (v63)
      LOBYTE(v65) = *((_BYTE *)a12 + 13);
    else
      v65 = -v61;
    v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v66) = 0;
    if (v60 < a6 && a5 >> v59 == 0)
      LOBYTE(v65) = v62 - v66;
    else
      LOBYTE(v66) = v64;
    v68 = 1 << v65;
    v69 = *((_BYTE *)a12 + 15);
    v70 = 1 << v69;
    if (v69)
      v71 = v70 > a3;
    else
      v71 = 1;
    v72 = v71 || v70 > a4;
    v73 = (~(-1 << v69) + a3) & (-1 << v69);
    if (v72)
      v74 = a3;
    else
      v74 = v73;
    v259 = 1 << v65;
    v75 = v68 - 1;
    v255 = v65;
    v256 = a10 + a8;
    v258 = a8 >> v65;
    v253 = (v68 - 1 + a10 + a8) >> v65;
    if (a8 >> v65 >= v253)
      return result;
    v76 = (1 << v66) - 1;
    v274 = a9 + a7;
    if (1 << v66 >= a5)
      v77 = a5;
    else
      v77 = 1 << v66;
    v78 = 32 - __clz(v77 - 1);
    result = v77 > 1;
    if (v77 <= 1)
      v79 = 0;
    else
      v79 = v78;
    v80 = v259;
    if (v259 >= a6)
      v80 = a6;
    v81 = 32 - __clz(v80 - 1);
    v82 = v80 > 1;
    v83 = v80 <= 1 ? 0 : v81;
    v267 = a7 >> v66;
    v272 = (v76 + a9 + a7) >> v66;
    if (a7 >> v66 >= v272)
      return result;
    v251 = (v74 + ~(-1 << v66)) >> v66;
    v84 = v76 & a7;
    v270 = v76 & v274;
    v247 = v75 & v256;
    v249 = v75 & a8;
    v85 = v258;
LABEL_90:
    v86 = v85 << v255;
    v87 = v85 - v258;
    v265 = v85 * v251;
    v261 = v85 + 1;
    v88 = v256 >= (v85 + 1) << v255;
    v89 = v259;
    if (!v88)
      v89 = v247;
    v90 = v259 - v249;
    if (!v88)
      v90 = v19;
    v91 = v87 << v255;
    if (v86 >= a8)
      v92 = 0;
    else
      v92 = v249;
    if (v86 >= a8)
      v93 = v89;
    else
      v93 = v90;
    v263 = (v92 + v91 - v249) * a11;
    v94 = v267;
    while (1)
    {
      v95 = v94 << v66;
      v96 = v94 + 1;
      v97 = a9;
      if (v274 >= (v94 + 1) << v66)
        v97 = (1 << v66) - v84;
      v98 = 1 << v66;
      if (v274 < v96 << v66)
        v98 = v270;
      if (v95 >= a7)
        v99 = 0;
      else
        v99 = v84;
      if (v95 < a7)
        v98 = v97;
      if (v83 | v79)
        break;
      v119 = 0;
      v101 = 0;
      v111 = 0;
      v129 = 0;
      if (v98)
        goto LABEL_151;
LABEL_101:
      v94 = v96;
      if (v96 == v272)
      {
        v85 = v261;
        v19 = a10;
        if (v261 == v253)
          return result;
        goto LABEL_90;
      }
    }
    v100 = 0;
    v101 = 0;
    v102 = 1;
    v103 = v82;
    v104 = result;
    v105 = v83;
    v106 = v79;
    do
    {
      v107 = v103;
      if (v107)
        --v105;
      else
        v105 = 0;
      v108 = v100 + v107;
      if (v104)
        --v106;
      else
        v106 = 0;
      if (v104)
      {
        v101 |= (unint64_t)(v102 & ~(-1 << v79)) << v108;
        v109 = v108 + 1;
      }
      else
      {
        v109 = v108;
      }
      v102 *= 2;
      v100 = v109 - 1;
      v104 = v106 != 0;
      v103 = v105 != 0;
    }
    while (v106 | v105);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v82;
    v114 = result;
    v115 = v83;
    v116 = v79;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
      {
        v111 |= (unint64_t)(v112 & ~(-1 << v83)) << v110;
        v117 = v110 + 1;
      }
      else
      {
        v117 = v110;
      }
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v117, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v118 = 0;
    v119 = 0;
    v120 = 1;
    v121 = v82;
    v122 = result;
    v123 = v83;
    v124 = v79;
    do
    {
      v125 = v121;
      if (v125)
        --v123;
      else
        v123 = 0;
      v126 = v118 + v125;
      --v124;
      if (v122)
      {
        v119 |= (unint64_t)(v120 & v99) << v126;
        v127 = v126 + 1;
      }
      else
      {
        v124 = 0;
        v127 = v126;
      }
      v120 *= 2;
      v118 = v127 - 1;
      v122 = v124 != 0;
      v121 = v123 != 0;
    }
    while (v124 | v123);
    v128 = 0;
    v129 = 0;
    v130 = 1;
    v131 = v82;
    v132 = result;
    v133 = v83;
    v134 = v79;
    do
    {
      --v133;
      if (v131)
      {
        v129 |= (unint64_t)(v130 & v92) << v128;
        v135 = v128 + 1;
      }
      else
      {
        v133 = 0;
        v135 = v128;
      }
      --v134;
      if (!v132)
        v134 = 0;
      v130 *= 2;
      v128 = (__PAIR64__(v135, v132) - 1) >> 32;
      v132 = v134 != 0;
      v131 = v133 != 0;
    }
    while (v134 | v133);
    v13 = a2;
    a7 = v245;
    if (!v98)
      goto LABEL_101;
LABEL_151:
    if (v93)
    {
      v136 = 0;
      v137 = (_WORD *)((char *)&v13[v99 + ((v94 - v267) << v66) - v84] + v263);
      v138 = (v94 + v265) * a12[3] * *((unsigned __int8 *)a12 + 9) + v17;
      do
      {
        v139 = v98;
        v140 = v137;
        v141 = v119;
        do
        {
          *v140++ = *(_WORD *)(v138 + 2 * (v141 + v129));
          v141 = (v141 - v101) & v101;
          --v139;
        }
        while (v139);
        v129 = (v129 - v111) & v111;
        v137 = (_WORD *)((char *)v137 + a11);
        ++v136;
      }
      while (v136 != v93);
    }
    goto LABEL_101;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v277);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v142 = a6 >> v20;
    v143 = 1 << v21;
    v144 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v144 = 0;
    v145 = v143 >= a5;
    if (v143 < a5)
      v146 = v21 + v20 + v144;
    else
      v146 = *((_BYTE *)a12 + 12);
    if (v145)
      LOBYTE(v147) = *((_BYTE *)a12 + 13);
    else
      v147 = -v144;
    if (!v142)
      v21 = v146;
    v237 = v21;
    if (v142)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v147;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v237 = v22;
    v23 = v21 + v20 - v22;
  }
  v148 = a10;
  v149 = a8;
  v236 = v283;
  if (v283)
  {
    v150 = 1 << v23;
    v235 = 1 << v237;
    if (1 << v237 >= a5)
      v151 = a5;
    else
      v151 = 1 << v237;
    v152 = 32 - __clz(v151 - 1);
    v153 = v151 > 1;
    if (v151 <= 1)
      v154 = 0;
    else
      v154 = v152;
    if (v150 >= a6)
      v155 = a6;
    else
      v155 = 1 << v23;
    v156 = 32 - __clz(v155 - 1);
    v157 = v284;
    v158 = v155 > 1;
    if (v155 <= 1)
      v156 = 0;
    v268 = v281;
    v269 = v156;
    v264 = v281 != 0;
    v266 = v282;
    v262 = v282 != 0;
    if (v284)
    {
      v159 = 0;
      v234 = a7 >> v237;
      v257 = a8 >> v23;
      v271 = v282 | v281;
      v275 = v285;
      v276 = v280;
      v233 = a9 + a7;
      v232 = (v235 - 1) & (a9 + a7);
      v230 = v278;
      v273 = v279;
      v231 = (v235 - 1) & a7;
      v252 = (v150 - 1) & a8;
      v254 = (v150 - 1) & (a10 + a8);
      v250 = v150 - v252;
      v246 = v284;
      v248 = v156 | v154;
      v160 = ~(-1 << v156);
      v260 = v155 > 1;
      v241 = v17;
      v239 = 1 << v23;
      v240 = v23;
      do
      {
        v161 = 0;
        v162 = v230 + v159;
        v163 = (v159 + v234) << v237;
        v164 = a9;
        if (v233 >= (v159 + v234 + 1) << v237)
          v164 = v235 - v231;
        v165 = 1 << v237;
        if (v233 < (v159 + v234 + 1) << v237)
          v165 = v232;
        v238 = v159;
        if (v163 >= v245)
          v166 = v165;
        else
          v166 = v164;
        if (v163 >= v245)
          v167 = 0;
        else
          v167 = v231;
        v242 = &a2[v167 + (v159 << v237)];
        do
        {
          v168 = v273 + v161;
          if (v275)
          {
            v169 = v271;
            if (v271)
            {
              v170 = 0;
              v169 = 0;
              v171 = 1;
              v172 = v262;
              v173 = v264;
              v175 = v266;
              v174 = v268;
              do
              {
                --v174;
                if (v173)
                  v169 |= (v171 & v162) << v170;
                else
                  v174 = 0;
                if (v173)
                  ++v170;
                --v175;
                if (v172)
                  v169 |= (v171 & v168) << v170;
                else
                  v175 = 0;
                if (v172)
                  ++v170;
                v171 *= 2;
                --v170;
                v172 = v175 != 0;
                v173 = v174 != 0;
              }
              while (v175 | v174);
            }
          }
          else
          {
            v169 = v271;
            if (v271)
            {
              v176 = 0;
              v169 = 0;
              v177 = 1;
              v179 = v262;
              v178 = v264;
              v180 = v266;
              v181 = v268;
              do
              {
                --v180;
                if (v179)
                  v169 |= (v177 & v168) << v176;
                else
                  v180 = 0;
                if (v179)
                  ++v176;
                --v181;
                if (v178)
                  v169 |= (v177 & v162) << v176;
                else
                  v181 = 0;
                if (v178)
                  ++v176;
                v177 *= 2;
                --v176;
                v178 = v181 != 0;
                v179 = v180 != 0;
              }
              while (v181 | v180);
            }
          }
          v182 = *(_DWORD *)(v17 + 4 * ((v169 + v276) | ((v169 + v276) >> 8 << 9)));
          if (v182 < 0)
          {
            v183 = v17 - *((_QWORD *)a13 + 3) + ((unint64_t)(v182 & 0x3FFFFFF) << 14);
            result = *a13;
            v184 = a13[2];
            if (result > v184)
            {
              v185 = v153;
              result = get_level_offset_within_tail(result, v184, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v158 = v260;
              v153 = v185;
              v150 = v239;
              v23 = v240;
              v17 = v241;
              v18 = a11;
              v149 = a8;
              v148 = a10;
              v183 += result;
            }
            v186 = (v161 + v257) << v23;
            v187 = v250;
            if (a10 + a8 >= (v161 + v257 + 1) << v23)
            {
              v188 = v150;
            }
            else
            {
              v187 = v148;
              v188 = v254;
            }
            if (v186 >= v149)
              v189 = 0;
            else
              v189 = v252;
            if (v186 >= v149)
              v187 = v188;
            if (!v248)
            {
              v207 = 0;
              v191 = 0;
              v200 = 0;
              v216 = 0;
              v157 = v246;
              if (!v166)
                goto LABEL_196;
LABEL_269:
              if (v187)
              {
                v221 = 0;
                v222 = (_WORD *)((char *)v242 + (v189 + (v161 << v23)) * v18);
                do
                {
                  v223 = v166;
                  v224 = v222;
                  v225 = v207;
                  do
                  {
                    result = *(unsigned __int16 *)(v183 + 2 * (v225 + v216));
                    *v224++ = result;
                    v225 = (v225 - v191) & v191;
                    --v223;
                  }
                  while (v223);
                  v216 = (v216 - v200) & v200;
                  v222 = (_WORD *)((char *)v222 + v18);
                  ++v221;
                }
                while (v221 != v187);
              }
              goto LABEL_196;
            }
            v190 = 0;
            v191 = 0;
            v192 = 1;
            v193 = v158;
            v194 = v153;
            v195 = v269;
            v196 = v154;
            do
            {
              --v195;
              v197 = v193;
              if (!v197)
                v195 = 0;
              v198 = v190 + v197;
              --v196;
              if (v194)
                v191 |= (unint64_t)(v192 & ~(-1 << v154)) << v198++;
              else
                v196 = 0;
              v192 *= 2;
              v190 = v198 - 1;
              v194 = v196 != 0;
              v193 = v195 != 0;
            }
            while (v196 | v195);
            v199 = 0;
            v200 = 0;
            v201 = 1;
            v202 = v158;
            v203 = v153;
            v204 = v269;
            v205 = v154;
            do
            {
              --v204;
              if (v202)
                v200 |= (unint64_t)(v201 & v160) << v199++;
              else
                v204 = 0;
              --v205;
              if (!v203)
                v205 = 0;
              v201 *= 2;
              v199 = (__PAIR64__(v199, v203) - 1) >> 32;
              v203 = v205 != 0;
              v202 = v204 != 0;
            }
            while (v205 | v204);
            v206 = 0;
            v207 = 0;
            v208 = 1;
            v209 = v158;
            v210 = v153;
            v211 = v269;
            v212 = v154;
            do
            {
              --v211;
              v213 = v209;
              if (!v213)
                v211 = 0;
              v214 = v206 + v213;
              --v212;
              if (v210)
                v207 |= (unint64_t)(v208 & v167) << v214++;
              else
                v212 = 0;
              v208 *= 2;
              v206 = v214 - 1;
              v210 = v212 != 0;
              v209 = v211 != 0;
            }
            while (v212 | v211);
            v215 = 0;
            v216 = 0;
            v217 = 1;
            v218 = v158;
            v219 = v153;
            v220 = v269;
            LODWORD(result) = v154;
            do
            {
              --v220;
              if (v218)
                v216 |= (unint64_t)(v217 & v189) << v215++;
              else
                v220 = 0;
              LODWORD(result) = result - 1;
              if (v219)
                result = result;
              else
                result = 0;
              v217 *= 2;
              v215 = (__PAIR64__(v215, v219) - 1) >> 32;
              v219 = (_DWORD)result != 0;
              v218 = v220 != 0;
            }
            while (result | v220);
            v157 = v246;
            v158 = v260;
            if (v166)
              goto LABEL_269;
          }
LABEL_196:
          ++v161;
        }
        while (v157 > (unsigned __int16)v161);
        v159 = v238 + 1;
      }
      while (v236 > (unsigned __int16)(v238 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,1ul,1u,(TwiddleOrder)0>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  uint64_t v13;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  BOOL v92;
  unsigned int v93;
  int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  int v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  int v106;
  BOOL v107;
  BOOL v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  int v115;
  BOOL v116;
  BOOL v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  uint64_t v122;
  int v123;
  BOOL v124;
  BOOL v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  int v129;
  unsigned int v130;
  uint64_t v131;
  int v132;
  BOOL v133;
  BOOL v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  BOOL v146;
  char v147;
  int v148;
  uint64_t v149;
  int v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  BOOL v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  BOOL v160;
  int v161;
  int v162;
  int v163;
  int v164;
  unsigned int v165;
  int v166;
  int v167;
  BOOL v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  BOOL v175;
  BOOL v176;
  int v177;
  int v178;
  int v179;
  int v180;
  BOOL v181;
  BOOL v182;
  int v183;
  int v184;
  int v185;
  unint64_t v186;
  unsigned int v187;
  uint64_t v188;
  unsigned int v189;
  int v190;
  int v191;
  unsigned int v192;
  int v193;
  uint64_t v194;
  int v195;
  BOOL v196;
  BOOL v197;
  unsigned int v198;
  unsigned int v199;
  int v200;
  int v201;
  unsigned int v202;
  uint64_t v203;
  int v204;
  BOOL v205;
  BOOL v206;
  unsigned int v207;
  unsigned int v208;
  int v209;
  uint64_t v210;
  int v211;
  BOOL v212;
  BOOL v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  int v217;
  unsigned int v218;
  uint64_t v219;
  int v220;
  BOOL v221;
  BOOL v222;
  unsigned int v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int i;
  uint64_t v229;
  uint64_t v230;
  int v231;
  int v232;
  int v233;
  unsigned int v234;
  unsigned int v235;
  int v236;
  unsigned int v237;
  uint64_t v238;
  char v239;
  int v240;
  BOOL v241;
  char v242;
  uint64_t v243;
  unsigned int v245;
  int v246;
  int v247;
  uint64_t v248;
  int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  int v253;
  char v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  uint64_t v258;
  unsigned int v259;
  unsigned int v260;
  BOOL v261;
  unsigned int v262;
  BOOL v263;
  uint64_t v264;
  BOOL v265;
  uint64_t v266;
  int v267;
  int v268;
  int v269;
  unsigned int v270;
  unsigned int v271;
  int v272;
  int v273;
  unsigned int v274;
  int v275;
  unsigned int v276;
  int v277;
  int v278;
  char v279[16];
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned __int8 v287;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v17 = a11;
  v19 = a9;
  v18 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v229 = 0;
        v230 = v47;
        do
        {
          *(_BYTE *)(v13 + v229) = *(_BYTE *)(v56 + result + v230);
          v230 = (v230 - v31) & v31;
          ++v229;
        }
        while (a9 != (_DWORD)v229);
        v56 = (v56 - v40) & v40;
        v13 += a11;
      }
    }
    return result;
  }
  v258 = result;
  v259 = a7;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v260 = 1 << v66;
    v76 = v69 - 1;
    v254 = v66;
    v255 = a10 + a8;
    v257 = a8 >> v66;
    v252 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 >= v252)
      return result;
    v77 = (1 << v67) - 1;
    v276 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v260;
    if (v260 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v270 = a7 >> v67;
    v274 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v274)
      return result;
    v250 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v272 = v77 & v276;
    v86 = (1 << v67) - (v77 & a7);
    v246 = v76 & v255;
    v248 = v76 & a8;
    v87 = v257;
    v88 = v85;
    v264 = a2 - v85;
LABEL_92:
    v89 = v87;
    v90 = v87 << v254;
    v91 = v89 - v257;
    v268 = v89 * v250;
    v262 = v89 + 1;
    v92 = v255 >= (v89 + 1) << v254;
    v93 = v260;
    if (!v92)
      v93 = v246;
    v94 = v260 - v248;
    if (!v92)
      v94 = v18;
    v95 = v91 << v254;
    if (v90 >= a8)
      v96 = 0;
    else
      v96 = v248;
    if (v90 >= a8)
      v97 = v93;
    else
      v97 = v94;
    v266 = (v96 + v95 - v248) * a11;
    v98 = v270;
    while (1)
    {
      v99 = v98 << v67;
      v100 = v98 + 1;
      if (v276 >= (v98 + 1) << v67)
        v101 = v86;
      else
        v101 = v19;
      v102 = 1 << v67;
      if (v276 < v100 << v67)
        v102 = v272;
      if (v99 >= a7)
        v103 = 0;
      else
        v103 = v88;
      if (v99 < a7)
        v102 = v101;
      if (v84 | v80)
        break;
      v122 = 0;
      v105 = 0;
      v114 = 0;
      v131 = 0;
      if (v102)
        goto LABEL_154;
LABEL_103:
      v98 = v100;
      a7 = v259;
      if (v100 == v274)
      {
        v87 = v262;
        v18 = a10;
        if (v262 == v252)
          return result;
        goto LABEL_92;
      }
    }
    v104 = 0;
    v105 = 0;
    v106 = 1;
    v107 = v83;
    v108 = result;
    v109 = v84;
    v110 = v80;
    do
    {
      v111 = v107;
      if (v111)
        --v109;
      else
        v109 = 0;
      v112 = v104 + v111;
      if (v108)
        --v110;
      else
        v110 = 0;
      if (v108)
        v105 |= (unint64_t)(v106 & ~(-1 << v80)) << v112++;
      v106 *= 2;
      v104 = v112 - 1;
      v108 = v110 != 0;
      v107 = v109 != 0;
    }
    while (v110 | v109);
    v113 = 0;
    v114 = 0;
    v115 = 1;
    v116 = v83;
    v117 = result;
    v118 = v84;
    v119 = v80;
    do
    {
      if (v116)
        --v118;
      else
        v118 = 0;
      if (v116)
      {
        v114 |= (unint64_t)(v115 & ~(-1 << v84)) << v113;
        v120 = v113 + 1;
      }
      else
      {
        v120 = v113;
      }
      --v119;
      if (!v117)
        v119 = 0;
      v115 *= 2;
      v113 = (__PAIR64__(v120, v117) - 1) >> 32;
      v117 = v119 != 0;
      v116 = v118 != 0;
    }
    while (v119 | v118);
    v121 = 0;
    v122 = 0;
    v123 = 1;
    v124 = v83;
    v125 = result;
    v126 = v84;
    v127 = v80;
    do
    {
      v128 = v124;
      if (v128)
        --v126;
      else
        v126 = 0;
      v129 = v121 + v128;
      --v127;
      if (v125)
        v122 |= (unint64_t)(v123 & v103) << v129++;
      else
        v127 = 0;
      v123 *= 2;
      v121 = v129 - 1;
      v125 = v127 != 0;
      v124 = v126 != 0;
    }
    while (v127 | v126);
    v130 = 0;
    v131 = 0;
    v132 = 1;
    v133 = v83;
    v134 = result;
    v135 = v84;
    v136 = v80;
    do
    {
      --v135;
      if (v133)
      {
        v131 |= (unint64_t)(v132 & v96) << v130;
        v137 = v130 + 1;
      }
      else
      {
        v135 = 0;
        v137 = v130;
      }
      if (v134)
        --v136;
      else
        v136 = 0;
      v132 *= 2;
      v130 = (__PAIR64__(v137, v134) - 1) >> 32;
      v134 = v136 != 0;
      v133 = v135 != 0;
    }
    while (v136 | v135);
    v19 = a9;
    if (!v102)
      goto LABEL_103;
LABEL_154:
    if (v97)
    {
      v138 = 0;
      v139 = v264 + v266 + v103 + ((v98 - v270) << v67);
      v140 = (v98 + v268) * a12[3] * *((unsigned __int8 *)a12 + 9) + v258;
      do
      {
        v141 = 0;
        v142 = v122;
        do
        {
          *(_BYTE *)(v139 + v141) = *(_BYTE *)(v140 + v131 + v142);
          v142 = (v142 - v105) & v105;
          ++v141;
        }
        while (v102 != (_DWORD)v141);
        v131 = (v131 - v114) & v114;
        v139 += a11;
        ++v138;
      }
      while (v138 != v97);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v279);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v238 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v143 = a6 >> v20;
    v144 = 1 << v21;
    v145 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v145 = 0;
    v146 = v144 >= a5;
    if (v144 < a5)
      v147 = v21 + v20 + v145;
    else
      v147 = *((_BYTE *)a12 + 12);
    if (v146)
      LOBYTE(v148) = *((_BYTE *)a12 + 13);
    else
      v148 = -v145;
    if (!v143)
      v21 = v147;
    v239 = v21;
    if (v143)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v148;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v239 = v22;
    v23 = v21 + v20 - v22;
  }
  v149 = v258;
  v150 = a10;
  v151 = a8;
  v237 = v285;
  if (v285)
  {
    v152 = (1 << v23);
    v236 = 1 << v239;
    if (1 << v239 >= a5)
      v153 = a5;
    else
      v153 = 1 << v239;
    v154 = 32 - __clz(v153 - 1);
    v155 = v153 > 1;
    if (v153 <= 1)
      v156 = 0;
    else
      v156 = v154;
    if (v152 >= a6)
      v157 = a6;
    else
      v157 = 1 << v23;
    v158 = 32 - __clz(v157 - 1);
    v159 = v286;
    v160 = v157 > 1;
    if (v157 <= 1)
      v158 = 0;
    v269 = v283;
    v271 = v158;
    v265 = v283 != 0;
    v267 = v284;
    v263 = v284 != 0;
    if (v286)
    {
      v161 = 0;
      v235 = a7 >> v239;
      v256 = a8 >> v23;
      v273 = v284 | v283;
      v277 = v287;
      v278 = v282;
      v234 = a9 + a7;
      v233 = (v236 - 1) & (a9 + a7);
      v231 = v280;
      v275 = v281;
      v232 = (v236 - 1) & a7;
      v251 = (v152 - 1) & a8;
      v253 = (v152 - 1) & (a10 + a8);
      v249 = v152 - v251;
      v245 = v286;
      v247 = v158 | v156;
      v162 = ~(-1 << v158);
      v261 = v157 > 1;
      v241 = v155;
      v242 = v23;
      do
      {
        v163 = 0;
        v164 = v231 + v161;
        v165 = (v161 + v235) << v239;
        if (v234 >= (v161 + v235 + 1) << v239)
          v166 = v236 - v232;
        else
          v166 = a9;
        v167 = 1 << v239;
        if (v234 < (v161 + v235 + 1) << v239)
          v167 = v233;
        v168 = v165 >= a7;
        v240 = v161;
        if (v165 >= a7)
          v169 = v167;
        else
          v169 = v166;
        if (v168)
          v170 = 0;
        else
          v170 = v232;
        v243 = (v170 + (v161 << v239)) + v238;
        do
        {
          v171 = v275 + v163;
          if (v277)
          {
            v172 = v273;
            if (v273)
            {
              v173 = 0;
              v172 = 0;
              v174 = 1;
              v175 = v263;
              v176 = v265;
              v177 = v269;
              v178 = v267;
              do
              {
                --v177;
                if (v176)
                  v172 |= (v174 & v164) << v173;
                else
                  v177 = 0;
                if (v176)
                  ++v173;
                --v178;
                if (v175)
                  v172 |= (v174 & v171) << v173;
                else
                  v178 = 0;
                if (v175)
                  ++v173;
                v174 *= 2;
                --v173;
                v175 = v178 != 0;
                v176 = v177 != 0;
              }
              while (v178 | v177);
            }
          }
          else
          {
            v172 = v273;
            if (v273)
            {
              v179 = 0;
              v172 = 0;
              v180 = 1;
              v182 = v263;
              v181 = v265;
              v183 = v267;
              v184 = v269;
              do
              {
                --v183;
                if (v182)
                  v172 |= (v180 & v171) << v179;
                else
                  v183 = 0;
                if (v182)
                  ++v179;
                --v184;
                if (v181)
                  v172 |= (v180 & v164) << v179;
                else
                  v184 = 0;
                if (v181)
                  ++v179;
                v180 *= 2;
                --v179;
                v181 = v184 != 0;
                v182 = v183 != 0;
              }
              while (v184 | v183);
            }
          }
          v185 = *(_DWORD *)(v149 + 4 * ((v172 + v278) | ((v172 + v278) >> 8 << 9)));
          if (v185 < 0)
          {
            v186 = v149 - *((_QWORD *)a13 + 3) + ((unint64_t)(v185 & 0x3FFFFFF) << 14);
            result = *a13;
            v187 = a13[2];
            if (result > v187)
            {
              v188 = v152;
              result = get_level_offset_within_tail(result, v187, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v160 = v261;
              v152 = v188;
              v17 = a11;
              v155 = v241;
              v23 = v242;
              v151 = a8;
              v150 = a10;
              v149 = v258;
              v186 += result;
            }
            v189 = (v163 + v256) << v23;
            v190 = v249;
            if (a10 + a8 >= (v163 + v256 + 1) << v23)
            {
              v191 = v152;
            }
            else
            {
              v190 = v150;
              v191 = v253;
            }
            if (v189 >= v151)
              v192 = 0;
            else
              v192 = v251;
            if (v189 >= v151)
              v190 = v191;
            if (!v247)
            {
              v210 = 0;
              v194 = 0;
              v203 = 0;
              v219 = 0;
              v159 = v245;
              if (!v169)
                goto LABEL_200;
LABEL_273:
              if (v190)
              {
                v224 = 0;
                v225 = v243 + (v192 + (v163 << v23)) * v17;
                do
                {
                  v226 = 0;
                  v227 = v210;
                  do
                  {
                    result = *(unsigned __int8 *)(v219 + v186 + v227);
                    *(_BYTE *)(v225 + v226) = result;
                    v227 = (v227 - v194) & v194;
                    ++v226;
                  }
                  while (v169 != (_DWORD)v226);
                  v219 = (v219 - v203) & v203;
                  v225 += v17;
                  ++v224;
                }
                while (v224 != v190);
              }
              goto LABEL_200;
            }
            v193 = 0;
            v194 = 0;
            v195 = 1;
            v196 = v160;
            v197 = v155;
            v198 = v271;
            v199 = v156;
            do
            {
              --v198;
              v200 = v196;
              if (!v200)
                v198 = 0;
              v201 = v193 + v200;
              --v199;
              if (v197)
                v194 |= (unint64_t)(v195 & ~(-1 << v156)) << v201++;
              else
                v199 = 0;
              v195 *= 2;
              v193 = v201 - 1;
              v197 = v199 != 0;
              v196 = v198 != 0;
            }
            while (v199 | v198);
            v202 = 0;
            v203 = 0;
            v204 = 1;
            v205 = v160;
            v206 = v155;
            v207 = v271;
            v208 = v156;
            do
            {
              --v207;
              if (v205)
                v203 |= (unint64_t)(v204 & v162) << v202++;
              else
                v207 = 0;
              --v208;
              if (!v206)
                v208 = 0;
              v204 *= 2;
              v202 = (__PAIR64__(v202, v206) - 1) >> 32;
              v206 = v208 != 0;
              v205 = v207 != 0;
            }
            while (v208 | v207);
            v209 = 0;
            v210 = 0;
            v211 = 1;
            v212 = v160;
            v213 = v155;
            v214 = v271;
            v215 = v156;
            do
            {
              --v214;
              v216 = v212;
              if (!v216)
                v214 = 0;
              v217 = v209 + v216;
              --v215;
              if (v213)
                v210 |= (unint64_t)(v211 & v170) << v217++;
              else
                v215 = 0;
              v211 *= 2;
              v209 = v217 - 1;
              v213 = v215 != 0;
              v212 = v214 != 0;
            }
            while (v215 | v214);
            v218 = 0;
            v219 = 0;
            v220 = 1;
            v221 = v160;
            v222 = v155;
            v223 = v271;
            LODWORD(result) = v156;
            do
            {
              --v223;
              if (v221)
                v219 |= (unint64_t)(v220 & v192) << v218++;
              else
                v223 = 0;
              LODWORD(result) = result - 1;
              if (v222)
                result = result;
              else
                result = 0;
              v220 *= 2;
              v218 = (__PAIR64__(v218, v222) - 1) >> 32;
              v222 = (_DWORD)result != 0;
              v221 = v223 != 0;
            }
            while (result | v223);
            v159 = v245;
            v160 = v261;
            if (v169)
              goto LABEL_273;
          }
LABEL_200:
          ++v163;
        }
        while (v159 > (unsigned __int16)v163);
        v161 = v240 + 1;
        a7 = v259;
      }
      while (v237 > (unsigned __int16)(v240 + 1));
    }
  }
  return result;
}

void *agxsTwiddleAddressPVRTC4<false,(TwiddleOrder)0>(void *__src, void *__dst, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  if (__src)
  {
    if (__dst)
      return memcpy(__dst, __src, 8 * ((a9 + 3) >> 2) * (unint64_t)((a10 + 3) >> 2));
  }
  return __src;
}

uint64_t agxsTwiddleAddressCompressed<false,4u,4u,8ul,(TwiddleOrder)0>(uint64_t result, _QWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,8ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 3) >> 2, (a4 + 3) >> 2, a5, a6, a7 >> 2, a8 >> 2, (a9 + 3) >> 2, (a10 + 3) >> 2, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,4u,4u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 3) >> 2, (a4 + 3) >> 2, a5, a6, a7 >> 2, a8 >> 2, (a9 + 3) >> 2, (a10 + 3) >> 2, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,4u,2u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 3) >> 2, (a4 + 1) >> 1, a5, a6, a7 >> 2, a8 >> 1, (a9 + 3) >> 2, (a10 + 1) >> 1, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,5u,4u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 4) / 5u, (a4 + 3) >> 2, a5, a6, a7 / 5, a8 >> 2, (a9 + 4) / 5u, (a10 + 3) >> 2, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,5u,5u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 4) / 5u, (a4 + 4) / 5u, a5, a6, a7 / 5, a8 / 5, (a9 + 4) / 5u, (a10 + 4) / 5u, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,6u,5u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 5) / 6u, (a4 + 4) / 5u, a5, a6, a7 / 6, a8 / 5, (a9 + 5) / 6u, (a10 + 4) / 5u, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,6u,6u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 5) / 6u, (a4 + 5) / 6u, a5, a6, a7 / 6, a8 / 6, (a9 + 5) / 6u, (a10 + 5) / 6u, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,8u,4u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 7) >> 3, (a4 + 3) >> 2, a5, a6, a7 >> 3, a8 >> 2, (a9 + 7) >> 3, (a10 + 3) >> 2, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,8u,5u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 7) >> 3, (a4 + 4) / 5u, a5, a6, a7 >> 3, a8 / 5, (a9 + 7) >> 3, (a10 + 4) / 5u, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,8u,6u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 7) >> 3, (a4 + 5) / 6u, a5, a6, a7 >> 3, a8 / 6, (a9 + 7) >> 3, (a10 + 5) / 6u, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,8u,8u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 7) >> 3, (a4 + 7) >> 3, a5, a6, a7 >> 3, a8 >> 3, (a9 + 7) >> 3, (a10 + 7) >> 3, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,10u,5u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 9) / 0xAu, (a4 + 4) / 5u, a5, a6, a7 / 0xA, a8 / 5, (a9 + 9) / 0xAu, (a10 + 4) / 5u, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,10u,6u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 9) / 0xAu, (a4 + 5) / 6u, a5, a6, a7 / 0xA, a8 / 6, (a9 + 9) / 0xAu, (a10 + 5) / 6u, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,10u,8u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 9) / 0xAu, (a4 + 7) >> 3, a5, a6, a7 / 0xA, a8 >> 3, (a9 + 9) / 0xAu, (a10 + 7) >> 3, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,10u,10u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 9) / 0xAu, (a4 + 9) / 0xAu, a5, a6, a7 / 0xA, a8 / 0xA, (a9 + 9) / 0xAu, (a10 + 9) / 0xAu, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,12u,10u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 11) / 0xCu, (a4 + 9) / 0xAu, a5, a6, a7 / 0xC, a8 / 0xA, (a9 + 11) / 0xCu, (a10 + 9) / 0xAu, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressCompressed<false,12u,12u,16ul,(TwiddleOrder)0>(uint64_t result, _OWORD *a2, int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  if (result)
  {
    if (a2)
      return agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,1u,(TwiddleOrder)0>>(result, a2, (a3 + 11) / 0xCu, (a4 + 11) / 0xCu, a5, a6, a7 / 0xC, a8 / 0xC, (a9 + 11) / 0xCu, (a10 + 11) / 0xCu, a11, a12, a13);
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<false,2ul,1u,(TwiddleOrder)1>>(uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _WORD *v13;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  unsigned int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  BOOL v103;
  BOOL v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  BOOL v111;
  BOOL v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  char *v120;
  int v121;
  BOOL v122;
  BOOL v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  unint64_t v128;
  int v129;
  BOOL v130;
  BOOL v131;
  unsigned int v132;
  int v133;
  int v134;
  unint64_t v135;
  int v136;
  int j;
  char *v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  int v146;
  char *v147;
  int v148;
  char *v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  BOOL v153;
  char v154;
  int v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  BOOL v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  BOOL v167;
  int v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  BOOL v182;
  BOOL v183;
  int v184;
  int v185;
  int v186;
  BOOL v187;
  int v188;
  BOOL v189;
  int v190;
  int v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  int v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  int v200;
  BOOL v201;
  BOOL v202;
  unsigned int v203;
  unsigned int v204;
  int v205;
  uint64_t v206;
  int v207;
  BOOL v208;
  BOOL v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  int v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  BOOL v217;
  BOOL v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  uint64_t v222;
  int v223;
  BOOL v224;
  unsigned int v225;
  unsigned int v226;
  int v227;
  int v228;
  int v229;
  _WORD *v230;
  int v231;
  _WORD *v232;
  uint64_t v233;
  int i;
  int v235;
  _WORD *v236;
  uint64_t v237;
  unsigned int v238;
  int v239;
  int v240;
  int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  char v245;
  _WORD *v246;
  int v248;
  BOOL v249;
  int v250;
  char v251;
  _WORD *v252;
  int v255;
  unsigned int v256;
  uint64_t v257;
  int v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  int v262;
  char v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  BOOL v270;
  char *v271;
  BOOL v272;
  int v273;
  BOOL v274;
  unsigned int v275;
  int v276;
  uint64_t v277;
  int v278;
  unsigned int v279;
  int v280;
  int v281;
  unsigned int v282;
  int v283;
  int v284;
  int v285;
  unsigned int v286;
  int v287;
  char v288[16];
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned __int8 v296;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v16 = result;
  v17 = a11;
  v18 = a12;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a6 - 1);
    v25 = a6 > 1;
    if (a6 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a5 - 1);
    v28 = a5 > 1;
    if (a5 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v26 | v29)
    {
      v30 = 0;
      v31 = 0;
      v32 = a5 > 1;
      v33 = a6 > 1;
      v34 = 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        if (v32)
          v31 |= (unint64_t)(v34 & ~(-1 << v29)) << v30++;
        else
          v35 = 0;
        --v36;
        if (!v33)
          v36 = 0;
        v34 *= 2;
        v30 = (__PAIR64__(v30, v33) - 1) >> 32;
        v33 = v36 != 0;
        v32 = v35 != 0;
      }
      while (v36 | v35);
      v37 = 0;
      v38 = 0;
      v39 = 1;
      v40 = a5 > 1;
      v41 = a6 > 1;
      v42 = v29;
      v43 = v26;
      do
      {
        --v42;
        v44 = v40;
        if (!v44)
          v42 = 0;
        v45 = v37 + v44;
        --v43;
        if (v41)
          v38 |= (unint64_t)(v39 & ~(-1 << v26)) << v45++;
        else
          v43 = 0;
        v39 *= 2;
        v37 = v45 - 1;
        v41 = v43 != 0;
        v40 = v42 != 0;
      }
      while (v43 | v42);
      v46 = 0;
      v47 = 0;
      v48 = a5 > 1;
      v49 = a6 > 1;
      v50 = 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        if (v48)
          v47 |= (unint64_t)(v50 & a7) << v46++;
        else
          v51 = 0;
        --v52;
        if (!v49)
          v52 = 0;
        v50 *= 2;
        v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        v49 = v52 != 0;
        v48 = v51 != 0;
      }
      while (v52 | v51);
      v53 = 0;
      v54 = 0;
      v55 = 1;
      do
      {
        --v29;
        v56 = v28;
        if (!v56)
          v29 = 0;
        v57 = v53 + v56;
        --v26;
        if (v25)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          v58 = v57 + 1;
        }
        else
        {
          v26 = 0;
          v58 = v57;
        }
        v55 *= 2;
        v53 = v58 - 1;
        v25 = v26 != 0;
        v28 = v29 != 0;
        result = v26 | v29;
      }
      while ((_DWORD)result);
      v19 = a10;
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v38 = 0;
      v54 = 0;
      if (!a9)
        return result;
    }
    if (v19)
    {
      for (i = 0; i != v19; ++i)
      {
        v235 = a9;
        v236 = v13;
        v237 = v47;
        do
        {
          *v236++ = *(_WORD *)(v16 + 2 * (v237 + v54));
          v237 = (v237 - v31) & v31;
          --v235;
        }
        while (v235);
        v54 = (v54 - v38) & v38;
        v13 = (_WORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  if (*((_BYTE *)a12 + 20))
  {
    result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 1u, a7, a8, a9, a10, (uint64_t)v288);
    v20 = *((_BYTE *)a12 + 13);
    v21 = *((_BYTE *)a12 + 12);
    v246 = v13;
    if (1 << v20 >= a6 || a5 >> v21)
    {
      v150 = a6 >> v20;
      v151 = 1 << v21;
      v152 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
      if (a6 < 2)
        v152 = 0;
      v153 = v151 >= a5;
      if (v151 < a5)
        v154 = v21 + v20 + v152;
      else
        v154 = *((_BYTE *)a12 + 12);
      if (v153)
        LOBYTE(v155) = *((_BYTE *)a12 + 13);
      else
        v155 = -v152;
      if (!v150)
        v21 = v154;
      v245 = v21;
      if (v150)
        v23 = *((_BYTE *)a12 + 13);
      else
        v23 = v155;
    }
    else
    {
      v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
      if (a5 < 2)
        LOBYTE(v22) = 0;
      v245 = v22;
      v23 = v21 + v20 - v22;
    }
    v156 = a10;
    v157 = a8;
    v244 = v294;
    if (v294)
    {
      v158 = 1 << v245;
      v159 = 1 << v23;
      if (1 << v23 >= a6)
        v160 = a6;
      else
        v160 = 1 << v23;
      v161 = 32 - __clz(v160 - 1);
      v162 = v160 > 1;
      if (v160 <= 1)
        v163 = 0;
      else
        v163 = v161;
      if (v158 >= a5)
        v164 = a5;
      else
        v164 = 1 << v245;
      v165 = 32 - __clz(v164 - 1);
      v166 = v295;
      v167 = v164 > 1;
      if (v164 <= 1)
        v165 = 0;
      v279 = v165;
      v276 = v293;
      v278 = v292;
      v274 = v292 != 0;
      v272 = v293 != 0;
      if (v295)
      {
        v168 = 0;
        v243 = a7 >> v245;
        v267 = a8 >> v23;
        v281 = v293 | v292;
        v285 = v296;
        v287 = v291;
        v242 = a9 + a7;
        v241 = (v158 - 1) & (a9 + a7);
        v239 = v289;
        v283 = v290;
        v240 = (v158 - 1) & a7;
        v238 = v158 - v240;
        v262 = (v159 - 1) & a8;
        v264 = (v159 - 1) & (a10 + a8);
        v260 = v159 - v262;
        v169 = ~(-1 << v165);
        v256 = v295;
        v258 = v163 | v165;
        v270 = v164 > 1;
        v250 = 1 << v23;
        v251 = v23;
        v249 = v162;
        do
        {
          v170 = 0;
          v171 = v168 + v239;
          v172 = (v168 + v243) << v245;
          v173 = a9;
          if (v242 >= (v168 + v243 + 1) << v245)
            v173 = v238;
          v174 = 1 << v245;
          if (v242 < (v168 + v243 + 1) << v245)
            v174 = v241;
          v248 = v168;
          if (v172 >= a7)
            v175 = v174;
          else
            v175 = v173;
          if (v172 >= a7)
            v176 = 0;
          else
            v176 = v240;
          v252 = &v246[v176 + (v168 << v245)];
          do
          {
            v177 = v170 + v283;
            if (v285)
            {
              v178 = v281;
              if (v281)
              {
                v179 = 0;
                v178 = 0;
                v180 = 1;
                v182 = v274;
                v181 = v276;
                v183 = v272;
                v184 = v278;
                do
                {
                  --v184;
                  if (v182)
                    v178 |= (v180 & v171) << v179;
                  else
                    v184 = 0;
                  if (v182)
                    ++v179;
                  --v181;
                  if (v183)
                    v178 |= (v180 & v177) << v179;
                  else
                    v181 = 0;
                  if (v183)
                    ++v179;
                  v180 *= 2;
                  --v179;
                  v183 = v181 != 0;
                  v182 = v184 != 0;
                }
                while (v181 | v184);
              }
            }
            else
            {
              v178 = v281;
              if (v281)
              {
                v185 = 0;
                v178 = 0;
                v186 = 1;
                v187 = v272;
                v189 = v274;
                v188 = v276;
                v190 = v278;
                do
                {
                  --v188;
                  if (v187)
                    v178 |= (v186 & v177) << v185;
                  else
                    v188 = 0;
                  if (v187)
                    ++v185;
                  --v190;
                  if (v189)
                    v178 |= (v186 & v171) << v185;
                  else
                    v190 = 0;
                  if (v189)
                    ++v185;
                  v186 *= 2;
                  --v185;
                  v189 = v190 != 0;
                  v187 = v188 != 0;
                }
                while (v190 | v188);
              }
            }
            v191 = *(_DWORD *)(v16 + 4 * ((v178 + v287) | ((v178 + v287) >> 8 << 9)));
            if (v191 < 0)
            {
              v192 = v16 - *((_QWORD *)a13 + 3) + ((unint64_t)(v191 & 0x3FFFFFF) << 14);
              result = *a13;
              v193 = a13[2];
              if (result > v193)
              {
                result = get_level_offset_within_tail(result, v193, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                v167 = v270;
                v162 = v249;
                v159 = v250;
                v23 = v251;
                v17 = a11;
                v157 = a8;
                v156 = a10;
                v192 += result;
              }
              v194 = (v170 + v267) << v23;
              v195 = v260;
              if (a10 + a8 >= (v170 + v267 + 1) << v23)
              {
                v196 = v159;
              }
              else
              {
                v195 = v156;
                v196 = v264;
              }
              if (v194 >= v157)
                v197 = 0;
              else
                v197 = v262;
              if (v194 >= v157)
                v195 = v196;
              if (!v258)
              {
                v215 = 0;
                v199 = 0;
                v206 = 0;
                v222 = 0;
                v166 = v256;
                if (!v175)
                  goto LABEL_213;
LABEL_285:
                if (v195)
                {
                  v229 = 0;
                  v230 = (_WORD *)((char *)v252 + (v197 + (v170 << v23)) * v17);
                  do
                  {
                    v231 = v175;
                    v232 = v230;
                    v233 = v215;
                    do
                    {
                      result = *(unsigned __int16 *)(v192 + 2 * (v233 + v222));
                      *v232++ = result;
                      v233 = (v233 - v199) & v199;
                      --v231;
                    }
                    while (v231);
                    v222 = (v222 - v206) & v206;
                    v230 = (_WORD *)((char *)v230 + v17);
                    ++v229;
                  }
                  while (v229 != v195);
                }
                goto LABEL_213;
              }
              v198 = 0;
              v199 = 0;
              v200 = 1;
              v201 = v167;
              v202 = v162;
              v203 = v279;
              v204 = v163;
              do
              {
                --v203;
                if (v201)
                  v199 |= (unint64_t)(v200 & v169) << v198++;
                else
                  v203 = 0;
                --v204;
                if (!v202)
                  v204 = 0;
                v200 *= 2;
                v198 = (__PAIR64__(v198, v202) - 1) >> 32;
                v202 = v204 != 0;
                v201 = v203 != 0;
              }
              while (v204 | v203);
              v205 = 0;
              v206 = 0;
              v207 = 1;
              v208 = v167;
              v209 = v162;
              v210 = v279;
              v211 = v163;
              do
              {
                --v210;
                v212 = v208;
                if (!v212)
                  v210 = 0;
                v213 = v205 + v212;
                --v211;
                if (v209)
                  v206 |= (unint64_t)(v207 & ~(-1 << v163)) << v213++;
                else
                  v211 = 0;
                v207 *= 2;
                v205 = v213 - 1;
                v209 = v211 != 0;
                v208 = v210 != 0;
              }
              while (v211 | v210);
              v214 = 0;
              v215 = 0;
              v216 = 1;
              v217 = v167;
              v218 = v162;
              v219 = v279;
              v220 = v163;
              do
              {
                --v219;
                if (v217)
                  v215 |= (unint64_t)(v216 & v176) << v214++;
                else
                  v219 = 0;
                --v220;
                if (!v218)
                  v220 = 0;
                v216 *= 2;
                v214 = (__PAIR64__(v214, v218) - 1) >> 32;
                v218 = v220 != 0;
                v217 = v219 != 0;
              }
              while (v220 | v219);
              v221 = 0;
              v222 = 0;
              v223 = 1;
              v224 = v167;
              LOBYTE(result) = v162;
              v225 = v279;
              v226 = v163;
              do
              {
                --v225;
                v227 = v224;
                if (!v227)
                  v225 = 0;
                v228 = v221 + v227;
                --v226;
                if ((result & 1) != 0)
                  v222 |= (unint64_t)(v223 & v197) << v228++;
                else
                  v226 = 0;
                v223 *= 2;
                v221 = v228 - 1;
                result = v226 != 0;
                v224 = v225 != 0;
              }
              while (v226 | v225);
              v166 = v256;
              v167 = v270;
              if (v175)
                goto LABEL_285;
            }
LABEL_213:
            ++v170;
          }
          while (v166 > (unsigned __int16)v170);
          v168 = v248 + 1;
        }
        while (v244 > (unsigned __int16)(v248 + 1));
      }
    }
  }
  else
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v266 = a8 >> v66;
    v268 = 1 << v66;
    v76 = v69 - 1;
    v263 = v66;
    v265 = a10 + a8;
    v261 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 < v261)
    {
      result = a7 >> v67;
      v77 = (1 << v67) - 1;
      v286 = a9 + a7;
      if (v69 >= a6)
        v69 = a6;
      v78 = 32 - __clz(v69 - 1);
      v79 = v69 > 1;
      if (v69 <= 1)
        v80 = 0;
      else
        v80 = v78;
      v282 = (v77 + a9 + a7) >> v67;
      v284 = 1 << v67;
      if (1 << v67 >= a5)
        v81 = a5;
      else
        v81 = 1 << v67;
      v82 = 32 - __clz(v81 - 1);
      v83 = v81 > 1;
      if (v81 <= 1)
        v84 = 0;
      else
        v84 = v82;
      v275 = a7 >> v67;
      if (result < (v77 + a9 + a7) >> v67)
      {
        v259 = (v75 + ~(-1 << v67)) >> v67;
        v85 = v77 & a7;
        v280 = v77 & v286;
        v255 = v76 & v265;
        v257 = v76 & a8;
        v86 = v266;
        do
        {
          v87 = v86 << v263;
          v269 = v86 + 1;
          v88 = v268;
          if (v265 < (v86 + 1) << v263)
            v88 = v255;
          v89 = v268 - v257;
          if (v265 < (v86 + 1) << v263)
            v89 = v19;
          v273 = v86 * v259;
          if (v87 >= a8)
            v90 = 0;
          else
            v90 = v257;
          if (v87 >= a8)
            v91 = v88;
          else
            v91 = v89;
          v271 = (char *)v13 + (v90 + ((v86 - v266) << v263) - v257) * a11;
          v92 = v275;
          v93 = a7;
          if (v80 | v84)
          {
            do
            {
              v95 = 0;
              v96 = 0;
              v97 = v92 << v67;
              v98 = v92 - v275;
              v99 = v92 + v273;
              v100 = ++v92 << v67;
              if (v97 >= v93)
                v101 = 0;
              else
                v101 = v85;
              v277 = v99 * v18[3] * *((unsigned __int8 *)v18 + 9);
              v102 = 1;
              v103 = v83;
              v104 = v79;
              v105 = v84;
              v106 = v80;
              do
              {
                --v105;
                if (v103)
                  v96 |= (unint64_t)(v102 & ~(-1 << v84)) << v95++;
                else
                  v105 = 0;
                if (v104)
                  --v106;
                else
                  v106 = 0;
                v102 *= 2;
                v95 = (__PAIR64__(v95, v104) - 1) >> 32;
                v104 = v106 != 0;
                v103 = v105 != 0;
              }
              while (v106 | v105);
              v107 = 0;
              v108 = 0;
              if (v286 >= v100)
                v109 = 1 << v67;
              else
                v109 = v280;
              v110 = 1;
              v111 = v83;
              v112 = v79;
              v113 = v84;
              v114 = v80;
              do
              {
                --v113;
                v115 = v111;
                if (!v115)
                  v113 = 0;
                v116 = v107 + v115;
                if (v112)
                  --v114;
                else
                  v114 = 0;
                if (v112)
                  v108 |= (unint64_t)(v110 & ~(-1 << v80)) << v116++;
                v110 *= 2;
                v107 = v116 - 1;
                v112 = v114 != 0;
                v111 = v113 != 0;
              }
              while (v114 | v113);
              v117 = 0;
              v118 = 0;
              if (v286 >= v100)
                v119 = v284 - v85;
              else
                v119 = a9;
              v120 = &v271[2 * (v101 + (v98 << v67) - v85)];
              v121 = 1;
              v122 = v83;
              v123 = v79;
              v124 = v84;
              v125 = v80;
              do
              {
                --v124;
                if (v122)
                {
                  v118 |= (unint64_t)(v121 & v101) << v117;
                  v126 = v117 + 1;
                }
                else
                {
                  v124 = 0;
                  v126 = v117;
                }
                if (v123)
                  --v125;
                else
                  v125 = 0;
                v121 *= 2;
                v117 = (__PAIR64__(v126, v123) - 1) >> 32;
                v123 = v125 != 0;
                v122 = v124 != 0;
              }
              while (v125 | v124);
              v127 = 0;
              v128 = 0;
              v129 = 1;
              v130 = v83;
              v131 = v79;
              LODWORD(result) = v84;
              v132 = v80;
              do
              {
                v133 = v130;
                if (v133)
                  result = (result - 1);
                else
                  result = 0;
                v134 = v127 + v133;
                v135 = ((unint64_t)(v129 & v90) << (v127 + v133)) | v128;
                if (v131)
                  --v132;
                else
                  v132 = 0;
                if (v131)
                {
                  v128 = v135;
                  ++v134;
                }
                v129 *= 2;
                v127 = v134 - 1;
                v131 = v132 != 0;
                v130 = (_DWORD)result != 0;
              }
              while (v132 | result);
              v93 = a7;
              if (v97 >= a7)
                v136 = v109;
              else
                v136 = v119;
              if (v91 && v136)
              {
                for (j = 0; j != v91; ++j)
                {
                  LODWORD(result) = v136;
                  v138 = v120;
                  v139 = v118;
                  do
                  {
                    *(_WORD *)v138 = *(_WORD *)(v277 + v16 + 2 * (v139 + v128));
                    v138 += 2;
                    v139 = (v139 - v96) & v96;
                    result = (result - 1);
                  }
                  while ((_DWORD)result);
                  v128 = (v128 - v108) & v108;
                  v120 += a11;
                }
              }
              v18 = a12;
            }
            while (v92 != v282);
          }
          else
          {
            v94 = v275;
            do
            {
              v140 = v94 << v67;
              v141 = v94 + 1;
              v142 = a9;
              if (v286 >= (v94 + 1) << v67)
                v142 = v284 - v85;
              v143 = 1 << v67;
              if (v286 < v141 << v67)
                v143 = v280;
              if (v140 >= a7)
                v142 = v143;
              if (v91 && v142)
              {
                v144 = 0;
                v145 = (v94 + v273) * v18[3] * *((unsigned __int8 *)v18 + 9);
                if (v140 >= a7)
                  v146 = 0;
                else
                  v146 = v85;
                v147 = &v271[2 * (v146 + ((v94 - v275) << v67) - v85)];
                do
                {
                  v148 = v142;
                  v149 = v147;
                  do
                  {
                    result = *(unsigned __int16 *)(v16 + v145);
                    *(_WORD *)v149 = result;
                    v149 += 2;
                    --v148;
                  }
                  while (v148);
                  v147 += a11;
                  ++v144;
                }
                while (v144 != v91);
              }
              v94 = v141;
            }
            while (v141 != v282);
          }
          v86 = v269;
          v13 = a2;
          v19 = a10;
        }
        while (v269 != v261);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,2ul,2u,(TwiddleOrder)0>>(uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _DWORD *v13;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  char v62;
  BOOL v63;
  char v64;
  int v65;
  unsigned int v66;
  int v68;
  char v69;
  unsigned int v70;
  BOOL v71;
  BOOL v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  int v102;
  BOOL v103;
  BOOL v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  int v120;
  BOOL v121;
  BOOL v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  int v130;
  BOOL v131;
  BOOL v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  _DWORD *v137;
  uint64_t v138;
  int v139;
  _DWORD *v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  char v146;
  int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  _BOOL8 v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  BOOL v158;
  int v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  BOOL v172;
  BOOL v173;
  int v174;
  int v175;
  int v176;
  int v177;
  BOOL v178;
  BOOL v179;
  int v180;
  int v181;
  int v182;
  unint64_t v183;
  unsigned int v184;
  _BOOL8 v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  int v190;
  uint64_t v191;
  int v192;
  BOOL v193;
  BOOL v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  int v201;
  BOOL v202;
  BOOL v203;
  unsigned int v204;
  unsigned int v205;
  int v206;
  uint64_t v207;
  int v208;
  BOOL v209;
  BOOL v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  int v217;
  BOOL v218;
  BOOL v219;
  unsigned int v220;
  int v221;
  _DWORD *v222;
  int v223;
  _DWORD *v224;
  uint64_t v225;
  int i;
  int v227;
  _DWORD *v228;
  uint64_t v229;
  int v230;
  int v231;
  int v232;
  unsigned int v233;
  unsigned int v234;
  int v235;
  unsigned int v236;
  char v237;
  int v238;
  int v239;
  char v240;
  uint64_t v241;
  _DWORD *v242;
  unsigned int v245;
  unsigned int v246;
  int v247;
  int v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  unsigned int v253;
  int v254;
  char v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  BOOL v260;
  unsigned int v261;
  BOOL v262;
  uint64_t v263;
  BOOL v264;
  int v265;
  int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  int v270;
  int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  int v276;
  char v277[16];
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned __int8 v285;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v17 = result;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        --v52;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        else
          v52 = 0;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      LODWORD(result) = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(result & a8) << v55;
          v57 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v57 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        result = (2 * result);
        v55 = (__PAIR64__(v57, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v227 = a9;
        v228 = v13;
        v229 = v47;
        do
        {
          *v228++ = *(_DWORD *)(v17 + 4 * (v229 + v56));
          v229 = (v229 - v31) & v31;
          --v227;
        }
        while (v227);
        v56 = (v56 - v40) & v40;
        v13 = (_DWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v245 = a7;
  if (!*((_BYTE *)a12 + 20))
  {
    v58 = *((unsigned __int8 *)a12 + 13);
    v59 = *((unsigned __int8 *)a12 + 12);
    v60 = 1 << v58;
    v61 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v61 = 0;
    v62 = v59 + v58;
    result = v59 + v58 + v61;
    if (a6 >> v58)
      v63 = 1;
    else
      v63 = 1 << v59 >= a5;
    if (v63)
      v64 = *((_BYTE *)a12 + 12);
    else
      v64 = v59 + v58 + v61;
    if (v63)
      LOBYTE(v65) = *((_BYTE *)a12 + 13);
    else
      v65 = -v61;
    v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v66) = 0;
    if (v60 < a6 && a5 >> v59 == 0)
      LOBYTE(v65) = v62 - v66;
    else
      LOBYTE(v66) = v64;
    v68 = 1 << v65;
    v69 = *((_BYTE *)a12 + 15);
    v70 = 1 << v69;
    if (v69)
      v71 = v70 > a3;
    else
      v71 = 1;
    v72 = v71 || v70 > a4;
    v73 = (~(-1 << v69) + a3) & (-1 << v69);
    if (v72)
      v74 = a3;
    else
      v74 = v73;
    v259 = 1 << v65;
    v75 = v68 - 1;
    v255 = v65;
    v256 = a10 + a8;
    v258 = a8 >> v65;
    v253 = (v68 - 1 + a10 + a8) >> v65;
    if (a8 >> v65 >= v253)
      return result;
    v76 = (1 << v66) - 1;
    v274 = a9 + a7;
    if (1 << v66 >= a5)
      v77 = a5;
    else
      v77 = 1 << v66;
    v78 = 32 - __clz(v77 - 1);
    result = v77 > 1;
    if (v77 <= 1)
      v79 = 0;
    else
      v79 = v78;
    v80 = v259;
    if (v259 >= a6)
      v80 = a6;
    v81 = 32 - __clz(v80 - 1);
    v82 = v80 > 1;
    v83 = v80 <= 1 ? 0 : v81;
    v267 = a7 >> v66;
    v272 = (v76 + a9 + a7) >> v66;
    if (a7 >> v66 >= v272)
      return result;
    v251 = (v74 + ~(-1 << v66)) >> v66;
    v84 = v76 & a7;
    v270 = v76 & v274;
    v247 = v75 & v256;
    v249 = v75 & a8;
    v85 = v258;
LABEL_90:
    v86 = v85 << v255;
    v87 = v85 - v258;
    v265 = v85 * v251;
    v261 = v85 + 1;
    v88 = v256 >= (v85 + 1) << v255;
    v89 = v259;
    if (!v88)
      v89 = v247;
    v90 = v259 - v249;
    if (!v88)
      v90 = v19;
    v91 = v87 << v255;
    if (v86 >= a8)
      v92 = 0;
    else
      v92 = v249;
    if (v86 >= a8)
      v93 = v89;
    else
      v93 = v90;
    v263 = (v92 + v91 - v249) * a11;
    v94 = v267;
    while (1)
    {
      v95 = v94 << v66;
      v96 = v94 + 1;
      v97 = a9;
      if (v274 >= (v94 + 1) << v66)
        v97 = (1 << v66) - v84;
      v98 = 1 << v66;
      if (v274 < v96 << v66)
        v98 = v270;
      if (v95 >= a7)
        v99 = 0;
      else
        v99 = v84;
      if (v95 < a7)
        v98 = v97;
      if (v83 | v79)
        break;
      v119 = 0;
      v101 = 0;
      v111 = 0;
      v129 = 0;
      if (v98)
        goto LABEL_151;
LABEL_101:
      v94 = v96;
      if (v96 == v272)
      {
        v85 = v261;
        v19 = a10;
        if (v261 == v253)
          return result;
        goto LABEL_90;
      }
    }
    v100 = 0;
    v101 = 0;
    v102 = 1;
    v103 = v82;
    v104 = result;
    v105 = v83;
    v106 = v79;
    do
    {
      v107 = v103;
      if (v107)
        --v105;
      else
        v105 = 0;
      v108 = v100 + v107;
      if (v104)
        --v106;
      else
        v106 = 0;
      if (v104)
      {
        v101 |= (unint64_t)(v102 & ~(-1 << v79)) << v108;
        v109 = v108 + 1;
      }
      else
      {
        v109 = v108;
      }
      v102 *= 2;
      v100 = v109 - 1;
      v104 = v106 != 0;
      v103 = v105 != 0;
    }
    while (v106 | v105);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v82;
    v114 = result;
    v115 = v83;
    v116 = v79;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
      {
        v111 |= (unint64_t)(v112 & ~(-1 << v83)) << v110;
        v117 = v110 + 1;
      }
      else
      {
        v117 = v110;
      }
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v117, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v118 = 0;
    v119 = 0;
    v120 = 1;
    v121 = v82;
    v122 = result;
    v123 = v83;
    v124 = v79;
    do
    {
      v125 = v121;
      if (v125)
        --v123;
      else
        v123 = 0;
      v126 = v118 + v125;
      --v124;
      if (v122)
      {
        v119 |= (unint64_t)(v120 & v99) << v126;
        v127 = v126 + 1;
      }
      else
      {
        v124 = 0;
        v127 = v126;
      }
      v120 *= 2;
      v118 = v127 - 1;
      v122 = v124 != 0;
      v121 = v123 != 0;
    }
    while (v124 | v123);
    v128 = 0;
    v129 = 0;
    v130 = 1;
    v131 = v82;
    v132 = result;
    v133 = v83;
    v134 = v79;
    do
    {
      --v133;
      if (v131)
      {
        v129 |= (unint64_t)(v130 & v92) << v128;
        v135 = v128 + 1;
      }
      else
      {
        v133 = 0;
        v135 = v128;
      }
      --v134;
      if (!v132)
        v134 = 0;
      v130 *= 2;
      v128 = (__PAIR64__(v135, v132) - 1) >> 32;
      v132 = v134 != 0;
      v131 = v133 != 0;
    }
    while (v134 | v133);
    v13 = a2;
    a7 = v245;
    if (!v98)
      goto LABEL_101;
LABEL_151:
    if (v93)
    {
      v136 = 0;
      v137 = (_DWORD *)((char *)&v13[v99 + ((v94 - v267) << v66) - v84] + v263);
      v138 = (v94 + v265) * a12[3] * *((unsigned __int8 *)a12 + 9) + v17;
      do
      {
        v139 = v98;
        v140 = v137;
        v141 = v119;
        do
        {
          *v140++ = *(_DWORD *)(v138 + 4 * (v141 + v129));
          v141 = (v141 - v101) & v101;
          --v139;
        }
        while (v139);
        v129 = (v129 - v111) & v111;
        v137 = (_DWORD *)((char *)v137 + a11);
        ++v136;
      }
      while (v136 != v93);
    }
    goto LABEL_101;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v277);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v142 = a6 >> v20;
    v143 = 1 << v21;
    v144 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v144 = 0;
    v145 = v143 >= a5;
    if (v143 < a5)
      v146 = v21 + v20 + v144;
    else
      v146 = *((_BYTE *)a12 + 12);
    if (v145)
      LOBYTE(v147) = *((_BYTE *)a12 + 13);
    else
      v147 = -v144;
    if (!v142)
      v21 = v146;
    v237 = v21;
    if (v142)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v147;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v237 = v22;
    v23 = v21 + v20 - v22;
  }
  v148 = a10;
  v149 = a8;
  v236 = v283;
  if (v283)
  {
    v150 = 1 << v23;
    v235 = 1 << v237;
    if (1 << v237 >= a5)
      v151 = a5;
    else
      v151 = 1 << v237;
    v152 = 32 - __clz(v151 - 1);
    v153 = v151 > 1;
    if (v151 <= 1)
      v154 = 0;
    else
      v154 = v152;
    if (v150 >= a6)
      v155 = a6;
    else
      v155 = 1 << v23;
    v156 = 32 - __clz(v155 - 1);
    v157 = v284;
    v158 = v155 > 1;
    if (v155 <= 1)
      v156 = 0;
    v268 = v281;
    v269 = v156;
    v264 = v281 != 0;
    v266 = v282;
    v262 = v282 != 0;
    if (v284)
    {
      v159 = 0;
      v234 = a7 >> v237;
      v257 = a8 >> v23;
      v271 = v282 | v281;
      v275 = v285;
      v276 = v280;
      v233 = a9 + a7;
      v232 = (v235 - 1) & (a9 + a7);
      v230 = v278;
      v273 = v279;
      v231 = (v235 - 1) & a7;
      v252 = (v150 - 1) & a8;
      v254 = (v150 - 1) & (a10 + a8);
      v250 = v150 - v252;
      v246 = v284;
      v248 = v156 | v154;
      v160 = ~(-1 << v156);
      v260 = v155 > 1;
      v241 = v17;
      v239 = 1 << v23;
      v240 = v23;
      do
      {
        v161 = 0;
        v162 = v230 + v159;
        v163 = (v159 + v234) << v237;
        v164 = a9;
        if (v233 >= (v159 + v234 + 1) << v237)
          v164 = v235 - v231;
        v165 = 1 << v237;
        if (v233 < (v159 + v234 + 1) << v237)
          v165 = v232;
        v238 = v159;
        if (v163 >= v245)
          v166 = v165;
        else
          v166 = v164;
        if (v163 >= v245)
          v167 = 0;
        else
          v167 = v231;
        v242 = &a2[v167 + (v159 << v237)];
        do
        {
          v168 = v273 + v161;
          if (v275)
          {
            v169 = v271;
            if (v271)
            {
              v170 = 0;
              v169 = 0;
              v171 = 1;
              v172 = v262;
              v173 = v264;
              v175 = v266;
              v174 = v268;
              do
              {
                --v174;
                if (v173)
                  v169 |= (v171 & v162) << v170;
                else
                  v174 = 0;
                if (v173)
                  ++v170;
                --v175;
                if (v172)
                  v169 |= (v171 & v168) << v170;
                else
                  v175 = 0;
                if (v172)
                  ++v170;
                v171 *= 2;
                --v170;
                v172 = v175 != 0;
                v173 = v174 != 0;
              }
              while (v175 | v174);
            }
          }
          else
          {
            v169 = v271;
            if (v271)
            {
              v176 = 0;
              v169 = 0;
              v177 = 1;
              v179 = v262;
              v178 = v264;
              v180 = v266;
              v181 = v268;
              do
              {
                --v180;
                if (v179)
                  v169 |= (v177 & v168) << v176;
                else
                  v180 = 0;
                if (v179)
                  ++v176;
                --v181;
                if (v178)
                  v169 |= (v177 & v162) << v176;
                else
                  v181 = 0;
                if (v178)
                  ++v176;
                v177 *= 2;
                --v176;
                v178 = v181 != 0;
                v179 = v180 != 0;
              }
              while (v181 | v180);
            }
          }
          v182 = *(_DWORD *)(v17 + 4 * ((v169 + v276) | ((v169 + v276) >> 8 << 9)));
          if (v182 < 0)
          {
            v183 = v17 - *((_QWORD *)a13 + 3) + ((unint64_t)(v182 & 0x3FFFFFF) << 14);
            result = *a13;
            v184 = a13[2];
            if (result > v184)
            {
              v185 = v153;
              result = get_level_offset_within_tail(result, v184, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v158 = v260;
              v153 = v185;
              v150 = v239;
              v23 = v240;
              v17 = v241;
              v18 = a11;
              v149 = a8;
              v148 = a10;
              v183 += result;
            }
            v186 = (v161 + v257) << v23;
            v187 = v250;
            if (a10 + a8 >= (v161 + v257 + 1) << v23)
            {
              v188 = v150;
            }
            else
            {
              v187 = v148;
              v188 = v254;
            }
            if (v186 >= v149)
              v189 = 0;
            else
              v189 = v252;
            if (v186 >= v149)
              v187 = v188;
            if (!v248)
            {
              v207 = 0;
              v191 = 0;
              v200 = 0;
              v216 = 0;
              v157 = v246;
              if (!v166)
                goto LABEL_196;
LABEL_269:
              if (v187)
              {
                v221 = 0;
                v222 = (_DWORD *)((char *)v242 + (v189 + (v161 << v23)) * v18);
                do
                {
                  v223 = v166;
                  v224 = v222;
                  v225 = v207;
                  do
                  {
                    result = *(unsigned int *)(v183 + 4 * (v225 + v216));
                    *v224++ = result;
                    v225 = (v225 - v191) & v191;
                    --v223;
                  }
                  while (v223);
                  v216 = (v216 - v200) & v200;
                  v222 = (_DWORD *)((char *)v222 + v18);
                  ++v221;
                }
                while (v221 != v187);
              }
              goto LABEL_196;
            }
            v190 = 0;
            v191 = 0;
            v192 = 1;
            v193 = v158;
            v194 = v153;
            v195 = v269;
            v196 = v154;
            do
            {
              --v195;
              v197 = v193;
              if (!v197)
                v195 = 0;
              v198 = v190 + v197;
              --v196;
              if (v194)
                v191 |= (unint64_t)(v192 & ~(-1 << v154)) << v198++;
              else
                v196 = 0;
              v192 *= 2;
              v190 = v198 - 1;
              v194 = v196 != 0;
              v193 = v195 != 0;
            }
            while (v196 | v195);
            v199 = 0;
            v200 = 0;
            v201 = 1;
            v202 = v158;
            v203 = v153;
            v204 = v269;
            v205 = v154;
            do
            {
              --v204;
              if (v202)
                v200 |= (unint64_t)(v201 & v160) << v199++;
              else
                v204 = 0;
              --v205;
              if (!v203)
                v205 = 0;
              v201 *= 2;
              v199 = (__PAIR64__(v199, v203) - 1) >> 32;
              v203 = v205 != 0;
              v202 = v204 != 0;
            }
            while (v205 | v204);
            v206 = 0;
            v207 = 0;
            v208 = 1;
            v209 = v158;
            v210 = v153;
            v211 = v269;
            v212 = v154;
            do
            {
              --v211;
              v213 = v209;
              if (!v213)
                v211 = 0;
              v214 = v206 + v213;
              --v212;
              if (v210)
                v207 |= (unint64_t)(v208 & v167) << v214++;
              else
                v212 = 0;
              v208 *= 2;
              v206 = v214 - 1;
              v210 = v212 != 0;
              v209 = v211 != 0;
            }
            while (v212 | v211);
            v215 = 0;
            v216 = 0;
            v217 = 1;
            v218 = v158;
            v219 = v153;
            v220 = v269;
            LODWORD(result) = v154;
            do
            {
              --v220;
              if (v218)
                v216 |= (unint64_t)(v217 & v189) << v215++;
              else
                v220 = 0;
              LODWORD(result) = result - 1;
              if (v219)
                result = result;
              else
                result = 0;
              v217 *= 2;
              v215 = (__PAIR64__(v215, v219) - 1) >> 32;
              v219 = (_DWORD)result != 0;
              v218 = v220 != 0;
            }
            while (result | v220);
            v157 = v246;
            v158 = v260;
            if (v166)
              goto LABEL_269;
          }
LABEL_196:
          ++v161;
        }
        while (v157 > (unsigned __int16)v161);
        v159 = v238 + 1;
      }
      while (v236 > (unsigned __int16)(v238 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<false,2ul,2u,(TwiddleOrder)1>>(uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _DWORD *v13;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  unsigned int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  BOOL v103;
  BOOL v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  BOOL v111;
  BOOL v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  char *v120;
  int v121;
  BOOL v122;
  BOOL v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  unint64_t v128;
  int v129;
  BOOL v130;
  BOOL v131;
  unsigned int v132;
  int v133;
  int v134;
  unint64_t v135;
  int v136;
  int j;
  char *v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  int v146;
  char *v147;
  int v148;
  char *v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  BOOL v153;
  char v154;
  int v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  BOOL v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  BOOL v167;
  int v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  BOOL v182;
  BOOL v183;
  int v184;
  int v185;
  int v186;
  BOOL v187;
  int v188;
  BOOL v189;
  int v190;
  int v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  int v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  int v200;
  BOOL v201;
  BOOL v202;
  unsigned int v203;
  unsigned int v204;
  int v205;
  uint64_t v206;
  int v207;
  BOOL v208;
  BOOL v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  int v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  BOOL v217;
  BOOL v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  uint64_t v222;
  int v223;
  BOOL v224;
  unsigned int v225;
  unsigned int v226;
  int v227;
  int v228;
  int v229;
  _DWORD *v230;
  int v231;
  _DWORD *v232;
  uint64_t v233;
  int i;
  int v235;
  _DWORD *v236;
  uint64_t v237;
  unsigned int v238;
  int v239;
  int v240;
  int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  char v245;
  _DWORD *v246;
  int v248;
  BOOL v249;
  int v250;
  char v251;
  _DWORD *v252;
  int v255;
  unsigned int v256;
  uint64_t v257;
  int v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  int v262;
  char v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  BOOL v270;
  char *v271;
  BOOL v272;
  int v273;
  BOOL v274;
  unsigned int v275;
  int v276;
  uint64_t v277;
  int v278;
  unsigned int v279;
  int v280;
  int v281;
  unsigned int v282;
  int v283;
  int v284;
  int v285;
  unsigned int v286;
  int v287;
  char v288[16];
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned __int8 v296;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v16 = result;
  v17 = a11;
  v18 = a12;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a6 - 1);
    v25 = a6 > 1;
    if (a6 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a5 - 1);
    v28 = a5 > 1;
    if (a5 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v26 | v29)
    {
      v30 = 0;
      v31 = 0;
      v32 = a5 > 1;
      v33 = a6 > 1;
      v34 = 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        if (v32)
          v31 |= (unint64_t)(v34 & ~(-1 << v29)) << v30++;
        else
          v35 = 0;
        --v36;
        if (!v33)
          v36 = 0;
        v34 *= 2;
        v30 = (__PAIR64__(v30, v33) - 1) >> 32;
        v33 = v36 != 0;
        v32 = v35 != 0;
      }
      while (v36 | v35);
      v37 = 0;
      v38 = 0;
      v39 = 1;
      v40 = a5 > 1;
      v41 = a6 > 1;
      v42 = v29;
      v43 = v26;
      do
      {
        --v42;
        v44 = v40;
        if (!v44)
          v42 = 0;
        v45 = v37 + v44;
        --v43;
        if (v41)
          v38 |= (unint64_t)(v39 & ~(-1 << v26)) << v45++;
        else
          v43 = 0;
        v39 *= 2;
        v37 = v45 - 1;
        v41 = v43 != 0;
        v40 = v42 != 0;
      }
      while (v43 | v42);
      v46 = 0;
      v47 = 0;
      v48 = a5 > 1;
      v49 = a6 > 1;
      v50 = 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        if (v48)
          v47 |= (unint64_t)(v50 & a7) << v46++;
        else
          v51 = 0;
        --v52;
        if (!v49)
          v52 = 0;
        v50 *= 2;
        v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        v49 = v52 != 0;
        v48 = v51 != 0;
      }
      while (v52 | v51);
      v53 = 0;
      v54 = 0;
      v55 = 1;
      do
      {
        --v29;
        v56 = v28;
        if (!v56)
          v29 = 0;
        v57 = v53 + v56;
        --v26;
        if (v25)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          v58 = v57 + 1;
        }
        else
        {
          v26 = 0;
          v58 = v57;
        }
        v55 *= 2;
        v53 = v58 - 1;
        v25 = v26 != 0;
        v28 = v29 != 0;
        result = v26 | v29;
      }
      while ((_DWORD)result);
      v19 = a10;
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v38 = 0;
      v54 = 0;
      if (!a9)
        return result;
    }
    if (v19)
    {
      for (i = 0; i != v19; ++i)
      {
        v235 = a9;
        v236 = v13;
        v237 = v47;
        do
        {
          *v236++ = *(_DWORD *)(v16 + 4 * (v237 + v54));
          v237 = (v237 - v31) & v31;
          --v235;
        }
        while (v235);
        v54 = (v54 - v38) & v38;
        v13 = (_DWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  if (*((_BYTE *)a12 + 20))
  {
    result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 1u, a7, a8, a9, a10, (uint64_t)v288);
    v20 = *((_BYTE *)a12 + 13);
    v21 = *((_BYTE *)a12 + 12);
    v246 = v13;
    if (1 << v20 >= a6 || a5 >> v21)
    {
      v150 = a6 >> v20;
      v151 = 1 << v21;
      v152 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
      if (a6 < 2)
        v152 = 0;
      v153 = v151 >= a5;
      if (v151 < a5)
        v154 = v21 + v20 + v152;
      else
        v154 = *((_BYTE *)a12 + 12);
      if (v153)
        LOBYTE(v155) = *((_BYTE *)a12 + 13);
      else
        v155 = -v152;
      if (!v150)
        v21 = v154;
      v245 = v21;
      if (v150)
        v23 = *((_BYTE *)a12 + 13);
      else
        v23 = v155;
    }
    else
    {
      v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
      if (a5 < 2)
        LOBYTE(v22) = 0;
      v245 = v22;
      v23 = v21 + v20 - v22;
    }
    v156 = a10;
    v157 = a8;
    v244 = v294;
    if (v294)
    {
      v158 = 1 << v245;
      v159 = 1 << v23;
      if (1 << v23 >= a6)
        v160 = a6;
      else
        v160 = 1 << v23;
      v161 = 32 - __clz(v160 - 1);
      v162 = v160 > 1;
      if (v160 <= 1)
        v163 = 0;
      else
        v163 = v161;
      if (v158 >= a5)
        v164 = a5;
      else
        v164 = 1 << v245;
      v165 = 32 - __clz(v164 - 1);
      v166 = v295;
      v167 = v164 > 1;
      if (v164 <= 1)
        v165 = 0;
      v279 = v165;
      v276 = v293;
      v278 = v292;
      v274 = v292 != 0;
      v272 = v293 != 0;
      if (v295)
      {
        v168 = 0;
        v243 = a7 >> v245;
        v267 = a8 >> v23;
        v281 = v293 | v292;
        v285 = v296;
        v287 = v291;
        v242 = a9 + a7;
        v241 = (v158 - 1) & (a9 + a7);
        v239 = v289;
        v283 = v290;
        v240 = (v158 - 1) & a7;
        v238 = v158 - v240;
        v262 = (v159 - 1) & a8;
        v264 = (v159 - 1) & (a10 + a8);
        v260 = v159 - v262;
        v169 = ~(-1 << v165);
        v256 = v295;
        v258 = v163 | v165;
        v270 = v164 > 1;
        v250 = 1 << v23;
        v251 = v23;
        v249 = v162;
        do
        {
          v170 = 0;
          v171 = v168 + v239;
          v172 = (v168 + v243) << v245;
          v173 = a9;
          if (v242 >= (v168 + v243 + 1) << v245)
            v173 = v238;
          v174 = 1 << v245;
          if (v242 < (v168 + v243 + 1) << v245)
            v174 = v241;
          v248 = v168;
          if (v172 >= a7)
            v175 = v174;
          else
            v175 = v173;
          if (v172 >= a7)
            v176 = 0;
          else
            v176 = v240;
          v252 = &v246[v176 + (v168 << v245)];
          do
          {
            v177 = v170 + v283;
            if (v285)
            {
              v178 = v281;
              if (v281)
              {
                v179 = 0;
                v178 = 0;
                v180 = 1;
                v182 = v274;
                v181 = v276;
                v183 = v272;
                v184 = v278;
                do
                {
                  --v184;
                  if (v182)
                    v178 |= (v180 & v171) << v179;
                  else
                    v184 = 0;
                  if (v182)
                    ++v179;
                  --v181;
                  if (v183)
                    v178 |= (v180 & v177) << v179;
                  else
                    v181 = 0;
                  if (v183)
                    ++v179;
                  v180 *= 2;
                  --v179;
                  v183 = v181 != 0;
                  v182 = v184 != 0;
                }
                while (v181 | v184);
              }
            }
            else
            {
              v178 = v281;
              if (v281)
              {
                v185 = 0;
                v178 = 0;
                v186 = 1;
                v187 = v272;
                v189 = v274;
                v188 = v276;
                v190 = v278;
                do
                {
                  --v188;
                  if (v187)
                    v178 |= (v186 & v177) << v185;
                  else
                    v188 = 0;
                  if (v187)
                    ++v185;
                  --v190;
                  if (v189)
                    v178 |= (v186 & v171) << v185;
                  else
                    v190 = 0;
                  if (v189)
                    ++v185;
                  v186 *= 2;
                  --v185;
                  v189 = v190 != 0;
                  v187 = v188 != 0;
                }
                while (v190 | v188);
              }
            }
            v191 = *(_DWORD *)(v16 + 4 * ((v178 + v287) | ((v178 + v287) >> 8 << 9)));
            if (v191 < 0)
            {
              v192 = v16 - *((_QWORD *)a13 + 3) + ((unint64_t)(v191 & 0x3FFFFFF) << 14);
              result = *a13;
              v193 = a13[2];
              if (result > v193)
              {
                result = get_level_offset_within_tail(result, v193, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                v167 = v270;
                v162 = v249;
                v159 = v250;
                v23 = v251;
                v17 = a11;
                v157 = a8;
                v156 = a10;
                v192 += result;
              }
              v194 = (v170 + v267) << v23;
              v195 = v260;
              if (a10 + a8 >= (v170 + v267 + 1) << v23)
              {
                v196 = v159;
              }
              else
              {
                v195 = v156;
                v196 = v264;
              }
              if (v194 >= v157)
                v197 = 0;
              else
                v197 = v262;
              if (v194 >= v157)
                v195 = v196;
              if (!v258)
              {
                v215 = 0;
                v199 = 0;
                v206 = 0;
                v222 = 0;
                v166 = v256;
                if (!v175)
                  goto LABEL_213;
LABEL_285:
                if (v195)
                {
                  v229 = 0;
                  v230 = (_DWORD *)((char *)v252 + (v197 + (v170 << v23)) * v17);
                  do
                  {
                    v231 = v175;
                    v232 = v230;
                    v233 = v215;
                    do
                    {
                      result = *(unsigned int *)(v192 + 4 * (v233 + v222));
                      *v232++ = result;
                      v233 = (v233 - v199) & v199;
                      --v231;
                    }
                    while (v231);
                    v222 = (v222 - v206) & v206;
                    v230 = (_DWORD *)((char *)v230 + v17);
                    ++v229;
                  }
                  while (v229 != v195);
                }
                goto LABEL_213;
              }
              v198 = 0;
              v199 = 0;
              v200 = 1;
              v201 = v167;
              v202 = v162;
              v203 = v279;
              v204 = v163;
              do
              {
                --v203;
                if (v201)
                  v199 |= (unint64_t)(v200 & v169) << v198++;
                else
                  v203 = 0;
                --v204;
                if (!v202)
                  v204 = 0;
                v200 *= 2;
                v198 = (__PAIR64__(v198, v202) - 1) >> 32;
                v202 = v204 != 0;
                v201 = v203 != 0;
              }
              while (v204 | v203);
              v205 = 0;
              v206 = 0;
              v207 = 1;
              v208 = v167;
              v209 = v162;
              v210 = v279;
              v211 = v163;
              do
              {
                --v210;
                v212 = v208;
                if (!v212)
                  v210 = 0;
                v213 = v205 + v212;
                --v211;
                if (v209)
                  v206 |= (unint64_t)(v207 & ~(-1 << v163)) << v213++;
                else
                  v211 = 0;
                v207 *= 2;
                v205 = v213 - 1;
                v209 = v211 != 0;
                v208 = v210 != 0;
              }
              while (v211 | v210);
              v214 = 0;
              v215 = 0;
              v216 = 1;
              v217 = v167;
              v218 = v162;
              v219 = v279;
              v220 = v163;
              do
              {
                --v219;
                if (v217)
                  v215 |= (unint64_t)(v216 & v176) << v214++;
                else
                  v219 = 0;
                --v220;
                if (!v218)
                  v220 = 0;
                v216 *= 2;
                v214 = (__PAIR64__(v214, v218) - 1) >> 32;
                v218 = v220 != 0;
                v217 = v219 != 0;
              }
              while (v220 | v219);
              v221 = 0;
              v222 = 0;
              v223 = 1;
              v224 = v167;
              LOBYTE(result) = v162;
              v225 = v279;
              v226 = v163;
              do
              {
                --v225;
                v227 = v224;
                if (!v227)
                  v225 = 0;
                v228 = v221 + v227;
                --v226;
                if ((result & 1) != 0)
                  v222 |= (unint64_t)(v223 & v197) << v228++;
                else
                  v226 = 0;
                v223 *= 2;
                v221 = v228 - 1;
                result = v226 != 0;
                v224 = v225 != 0;
              }
              while (v226 | v225);
              v166 = v256;
              v167 = v270;
              if (v175)
                goto LABEL_285;
            }
LABEL_213:
            ++v170;
          }
          while (v166 > (unsigned __int16)v170);
          v168 = v248 + 1;
        }
        while (v244 > (unsigned __int16)(v248 + 1));
      }
    }
  }
  else
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v266 = a8 >> v66;
    v268 = 1 << v66;
    v76 = v69 - 1;
    v263 = v66;
    v265 = a10 + a8;
    v261 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 < v261)
    {
      result = a7 >> v67;
      v77 = (1 << v67) - 1;
      v286 = a9 + a7;
      if (v69 >= a6)
        v69 = a6;
      v78 = 32 - __clz(v69 - 1);
      v79 = v69 > 1;
      if (v69 <= 1)
        v80 = 0;
      else
        v80 = v78;
      v282 = (v77 + a9 + a7) >> v67;
      v284 = 1 << v67;
      if (1 << v67 >= a5)
        v81 = a5;
      else
        v81 = 1 << v67;
      v82 = 32 - __clz(v81 - 1);
      v83 = v81 > 1;
      if (v81 <= 1)
        v84 = 0;
      else
        v84 = v82;
      v275 = a7 >> v67;
      if (result < (v77 + a9 + a7) >> v67)
      {
        v259 = (v75 + ~(-1 << v67)) >> v67;
        v85 = v77 & a7;
        v280 = v77 & v286;
        v255 = v76 & v265;
        v257 = v76 & a8;
        v86 = v266;
        do
        {
          v87 = v86 << v263;
          v269 = v86 + 1;
          v88 = v268;
          if (v265 < (v86 + 1) << v263)
            v88 = v255;
          v89 = v268 - v257;
          if (v265 < (v86 + 1) << v263)
            v89 = v19;
          v273 = v86 * v259;
          if (v87 >= a8)
            v90 = 0;
          else
            v90 = v257;
          if (v87 >= a8)
            v91 = v88;
          else
            v91 = v89;
          v271 = (char *)v13 + (v90 + ((v86 - v266) << v263) - v257) * a11;
          v92 = v275;
          v93 = a7;
          if (v80 | v84)
          {
            do
            {
              v95 = 0;
              v96 = 0;
              v97 = v92 << v67;
              v98 = v92 - v275;
              v99 = v92 + v273;
              v100 = ++v92 << v67;
              if (v97 >= v93)
                v101 = 0;
              else
                v101 = v85;
              v277 = v99 * v18[3] * *((unsigned __int8 *)v18 + 9);
              v102 = 1;
              v103 = v83;
              v104 = v79;
              v105 = v84;
              v106 = v80;
              do
              {
                --v105;
                if (v103)
                  v96 |= (unint64_t)(v102 & ~(-1 << v84)) << v95++;
                else
                  v105 = 0;
                if (v104)
                  --v106;
                else
                  v106 = 0;
                v102 *= 2;
                v95 = (__PAIR64__(v95, v104) - 1) >> 32;
                v104 = v106 != 0;
                v103 = v105 != 0;
              }
              while (v106 | v105);
              v107 = 0;
              v108 = 0;
              if (v286 >= v100)
                v109 = 1 << v67;
              else
                v109 = v280;
              v110 = 1;
              v111 = v83;
              v112 = v79;
              v113 = v84;
              v114 = v80;
              do
              {
                --v113;
                v115 = v111;
                if (!v115)
                  v113 = 0;
                v116 = v107 + v115;
                if (v112)
                  --v114;
                else
                  v114 = 0;
                if (v112)
                  v108 |= (unint64_t)(v110 & ~(-1 << v80)) << v116++;
                v110 *= 2;
                v107 = v116 - 1;
                v112 = v114 != 0;
                v111 = v113 != 0;
              }
              while (v114 | v113);
              v117 = 0;
              v118 = 0;
              if (v286 >= v100)
                v119 = v284 - v85;
              else
                v119 = a9;
              v120 = &v271[4 * (v101 + (v98 << v67) - v85)];
              v121 = 1;
              v122 = v83;
              v123 = v79;
              v124 = v84;
              v125 = v80;
              do
              {
                --v124;
                if (v122)
                {
                  v118 |= (unint64_t)(v121 & v101) << v117;
                  v126 = v117 + 1;
                }
                else
                {
                  v124 = 0;
                  v126 = v117;
                }
                if (v123)
                  --v125;
                else
                  v125 = 0;
                v121 *= 2;
                v117 = (__PAIR64__(v126, v123) - 1) >> 32;
                v123 = v125 != 0;
                v122 = v124 != 0;
              }
              while (v125 | v124);
              v127 = 0;
              v128 = 0;
              v129 = 1;
              v130 = v83;
              v131 = v79;
              LODWORD(result) = v84;
              v132 = v80;
              do
              {
                v133 = v130;
                if (v133)
                  result = (result - 1);
                else
                  result = 0;
                v134 = v127 + v133;
                v135 = ((unint64_t)(v129 & v90) << (v127 + v133)) | v128;
                if (v131)
                  --v132;
                else
                  v132 = 0;
                if (v131)
                {
                  v128 = v135;
                  ++v134;
                }
                v129 *= 2;
                v127 = v134 - 1;
                v131 = v132 != 0;
                v130 = (_DWORD)result != 0;
              }
              while (v132 | result);
              v93 = a7;
              if (v97 >= a7)
                v136 = v109;
              else
                v136 = v119;
              if (v91 && v136)
              {
                for (j = 0; j != v91; ++j)
                {
                  LODWORD(result) = v136;
                  v138 = v120;
                  v139 = v118;
                  do
                  {
                    *(_DWORD *)v138 = *(_DWORD *)(v277 + v16 + 4 * (v139 + v128));
                    v138 += 4;
                    v139 = (v139 - v96) & v96;
                    result = (result - 1);
                  }
                  while ((_DWORD)result);
                  v128 = (v128 - v108) & v108;
                  v120 += a11;
                }
              }
              v18 = a12;
            }
            while (v92 != v282);
          }
          else
          {
            v94 = v275;
            do
            {
              v140 = v94 << v67;
              v141 = v94 + 1;
              v142 = a9;
              if (v286 >= (v94 + 1) << v67)
                v142 = v284 - v85;
              v143 = 1 << v67;
              if (v286 < v141 << v67)
                v143 = v280;
              if (v140 >= a7)
                v142 = v143;
              if (v91 && v142)
              {
                v144 = 0;
                v145 = (v94 + v273) * v18[3] * *((unsigned __int8 *)v18 + 9);
                if (v140 >= a7)
                  v146 = 0;
                else
                  v146 = v85;
                v147 = &v271[4 * (v146 + ((v94 - v275) << v67) - v85)];
                do
                {
                  v148 = v142;
                  v149 = v147;
                  do
                  {
                    result = *(unsigned int *)(v16 + v145);
                    *(_DWORD *)v149 = result;
                    v149 += 4;
                    --v148;
                  }
                  while (v148);
                  v147 += a11;
                  ++v144;
                }
                while (v144 != v91);
              }
              v94 = v141;
            }
            while (v141 != v282);
          }
          v86 = v269;
          v13 = a2;
          v19 = a10;
        }
        while (v269 != v261);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,2ul,4u,(TwiddleOrder)0>>(uint64_t result, _QWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _QWORD *v13;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  char v62;
  BOOL v63;
  char v64;
  int v65;
  unsigned int v66;
  int v68;
  char v69;
  unsigned int v70;
  BOOL v71;
  BOOL v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  int v102;
  BOOL v103;
  BOOL v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  int v120;
  BOOL v121;
  BOOL v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  int v130;
  BOOL v131;
  BOOL v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  _QWORD *v137;
  uint64_t v138;
  int v139;
  _QWORD *v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  char v146;
  int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  _BOOL8 v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  BOOL v158;
  int v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  BOOL v172;
  BOOL v173;
  int v174;
  int v175;
  int v176;
  int v177;
  BOOL v178;
  BOOL v179;
  int v180;
  int v181;
  int v182;
  unint64_t v183;
  unsigned int v184;
  _BOOL8 v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  int v190;
  uint64_t v191;
  int v192;
  BOOL v193;
  BOOL v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  int v201;
  BOOL v202;
  BOOL v203;
  unsigned int v204;
  unsigned int v205;
  int v206;
  uint64_t v207;
  int v208;
  BOOL v209;
  BOOL v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  int v217;
  BOOL v218;
  BOOL v219;
  unsigned int v220;
  int v221;
  uint64_t *v222;
  int v223;
  uint64_t *v224;
  uint64_t v225;
  int i;
  int v227;
  _QWORD *v228;
  uint64_t v229;
  int v230;
  int v231;
  int v232;
  unsigned int v233;
  unsigned int v234;
  int v235;
  unsigned int v236;
  char v237;
  int v238;
  int v239;
  char v240;
  uint64_t v241;
  _QWORD *v242;
  unsigned int v245;
  unsigned int v246;
  int v247;
  int v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  unsigned int v253;
  int v254;
  char v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  BOOL v260;
  unsigned int v261;
  BOOL v262;
  uint64_t v263;
  BOOL v264;
  int v265;
  int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  int v270;
  int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  int v276;
  char v277[16];
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned __int8 v285;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v17 = result;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        --v52;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        else
          v52 = 0;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      LODWORD(result) = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(result & a8) << v55;
          v57 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v57 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        result = (2 * result);
        v55 = (__PAIR64__(v57, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v227 = a9;
        v228 = v13;
        v229 = v47;
        do
        {
          *v228++ = *(_QWORD *)(v17 + 8 * (v229 + v56));
          v229 = (v229 - v31) & v31;
          --v227;
        }
        while (v227);
        v56 = (v56 - v40) & v40;
        v13 = (_QWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v245 = a7;
  if (!*((_BYTE *)a12 + 20))
  {
    v58 = *((unsigned __int8 *)a12 + 13);
    v59 = *((unsigned __int8 *)a12 + 12);
    v60 = 1 << v58;
    v61 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v61 = 0;
    v62 = v59 + v58;
    result = v59 + v58 + v61;
    if (a6 >> v58)
      v63 = 1;
    else
      v63 = 1 << v59 >= a5;
    if (v63)
      v64 = *((_BYTE *)a12 + 12);
    else
      v64 = v59 + v58 + v61;
    if (v63)
      LOBYTE(v65) = *((_BYTE *)a12 + 13);
    else
      v65 = -v61;
    v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v66) = 0;
    if (v60 < a6 && a5 >> v59 == 0)
      LOBYTE(v65) = v62 - v66;
    else
      LOBYTE(v66) = v64;
    v68 = 1 << v65;
    v69 = *((_BYTE *)a12 + 15);
    v70 = 1 << v69;
    if (v69)
      v71 = v70 > a3;
    else
      v71 = 1;
    v72 = v71 || v70 > a4;
    v73 = (~(-1 << v69) + a3) & (-1 << v69);
    if (v72)
      v74 = a3;
    else
      v74 = v73;
    v259 = 1 << v65;
    v75 = v68 - 1;
    v255 = v65;
    v256 = a10 + a8;
    v258 = a8 >> v65;
    v253 = (v68 - 1 + a10 + a8) >> v65;
    if (a8 >> v65 >= v253)
      return result;
    v76 = (1 << v66) - 1;
    v274 = a9 + a7;
    if (1 << v66 >= a5)
      v77 = a5;
    else
      v77 = 1 << v66;
    v78 = 32 - __clz(v77 - 1);
    result = v77 > 1;
    if (v77 <= 1)
      v79 = 0;
    else
      v79 = v78;
    v80 = v259;
    if (v259 >= a6)
      v80 = a6;
    v81 = 32 - __clz(v80 - 1);
    v82 = v80 > 1;
    v83 = v80 <= 1 ? 0 : v81;
    v267 = a7 >> v66;
    v272 = (v76 + a9 + a7) >> v66;
    if (a7 >> v66 >= v272)
      return result;
    v251 = (v74 + ~(-1 << v66)) >> v66;
    v84 = v76 & a7;
    v270 = v76 & v274;
    v247 = v75 & v256;
    v249 = v75 & a8;
    v85 = v258;
LABEL_90:
    v86 = v85 << v255;
    v87 = v85 - v258;
    v265 = v85 * v251;
    v261 = v85 + 1;
    v88 = v256 >= (v85 + 1) << v255;
    v89 = v259;
    if (!v88)
      v89 = v247;
    v90 = v259 - v249;
    if (!v88)
      v90 = v19;
    v91 = v87 << v255;
    if (v86 >= a8)
      v92 = 0;
    else
      v92 = v249;
    if (v86 >= a8)
      v93 = v89;
    else
      v93 = v90;
    v263 = (v92 + v91 - v249) * a11;
    v94 = v267;
    while (1)
    {
      v95 = v94 << v66;
      v96 = v94 + 1;
      v97 = a9;
      if (v274 >= (v94 + 1) << v66)
        v97 = (1 << v66) - v84;
      v98 = 1 << v66;
      if (v274 < v96 << v66)
        v98 = v270;
      if (v95 >= a7)
        v99 = 0;
      else
        v99 = v84;
      if (v95 < a7)
        v98 = v97;
      if (v83 | v79)
        break;
      v119 = 0;
      v101 = 0;
      v111 = 0;
      v129 = 0;
      if (v98)
        goto LABEL_151;
LABEL_101:
      v94 = v96;
      if (v96 == v272)
      {
        v85 = v261;
        v19 = a10;
        if (v261 == v253)
          return result;
        goto LABEL_90;
      }
    }
    v100 = 0;
    v101 = 0;
    v102 = 1;
    v103 = v82;
    v104 = result;
    v105 = v83;
    v106 = v79;
    do
    {
      v107 = v103;
      if (v107)
        --v105;
      else
        v105 = 0;
      v108 = v100 + v107;
      if (v104)
        --v106;
      else
        v106 = 0;
      if (v104)
      {
        v101 |= (unint64_t)(v102 & ~(-1 << v79)) << v108;
        v109 = v108 + 1;
      }
      else
      {
        v109 = v108;
      }
      v102 *= 2;
      v100 = v109 - 1;
      v104 = v106 != 0;
      v103 = v105 != 0;
    }
    while (v106 | v105);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v82;
    v114 = result;
    v115 = v83;
    v116 = v79;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
      {
        v111 |= (unint64_t)(v112 & ~(-1 << v83)) << v110;
        v117 = v110 + 1;
      }
      else
      {
        v117 = v110;
      }
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v117, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v118 = 0;
    v119 = 0;
    v120 = 1;
    v121 = v82;
    v122 = result;
    v123 = v83;
    v124 = v79;
    do
    {
      v125 = v121;
      if (v125)
        --v123;
      else
        v123 = 0;
      v126 = v118 + v125;
      --v124;
      if (v122)
      {
        v119 |= (unint64_t)(v120 & v99) << v126;
        v127 = v126 + 1;
      }
      else
      {
        v124 = 0;
        v127 = v126;
      }
      v120 *= 2;
      v118 = v127 - 1;
      v122 = v124 != 0;
      v121 = v123 != 0;
    }
    while (v124 | v123);
    v128 = 0;
    v129 = 0;
    v130 = 1;
    v131 = v82;
    v132 = result;
    v133 = v83;
    v134 = v79;
    do
    {
      --v133;
      if (v131)
      {
        v129 |= (unint64_t)(v130 & v92) << v128;
        v135 = v128 + 1;
      }
      else
      {
        v133 = 0;
        v135 = v128;
      }
      --v134;
      if (!v132)
        v134 = 0;
      v130 *= 2;
      v128 = (__PAIR64__(v135, v132) - 1) >> 32;
      v132 = v134 != 0;
      v131 = v133 != 0;
    }
    while (v134 | v133);
    v13 = a2;
    a7 = v245;
    if (!v98)
      goto LABEL_101;
LABEL_151:
    if (v93)
    {
      v136 = 0;
      v137 = (_QWORD *)((char *)&v13[v99 + ((v94 - v267) << v66) - v84] + v263);
      v138 = (v94 + v265) * a12[3] * *((unsigned __int8 *)a12 + 9) + v17;
      do
      {
        v139 = v98;
        v140 = v137;
        v141 = v119;
        do
        {
          *v140++ = *(_QWORD *)(v138 + 8 * (v141 + v129));
          v141 = (v141 - v101) & v101;
          --v139;
        }
        while (v139);
        v129 = (v129 - v111) & v111;
        v137 = (_QWORD *)((char *)v137 + a11);
        ++v136;
      }
      while (v136 != v93);
    }
    goto LABEL_101;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v277);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v142 = a6 >> v20;
    v143 = 1 << v21;
    v144 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v144 = 0;
    v145 = v143 >= a5;
    if (v143 < a5)
      v146 = v21 + v20 + v144;
    else
      v146 = *((_BYTE *)a12 + 12);
    if (v145)
      LOBYTE(v147) = *((_BYTE *)a12 + 13);
    else
      v147 = -v144;
    if (!v142)
      v21 = v146;
    v237 = v21;
    if (v142)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v147;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v237 = v22;
    v23 = v21 + v20 - v22;
  }
  v148 = a10;
  v149 = a8;
  v236 = v283;
  if (v283)
  {
    v150 = 1 << v23;
    v235 = 1 << v237;
    if (1 << v237 >= a5)
      v151 = a5;
    else
      v151 = 1 << v237;
    v152 = 32 - __clz(v151 - 1);
    v153 = v151 > 1;
    if (v151 <= 1)
      v154 = 0;
    else
      v154 = v152;
    if (v150 >= a6)
      v155 = a6;
    else
      v155 = 1 << v23;
    v156 = 32 - __clz(v155 - 1);
    v157 = v284;
    v158 = v155 > 1;
    if (v155 <= 1)
      v156 = 0;
    v268 = v281;
    v269 = v156;
    v264 = v281 != 0;
    v266 = v282;
    v262 = v282 != 0;
    if (v284)
    {
      v159 = 0;
      v234 = a7 >> v237;
      v257 = a8 >> v23;
      v271 = v282 | v281;
      v275 = v285;
      v276 = v280;
      v233 = a9 + a7;
      v232 = (v235 - 1) & (a9 + a7);
      v230 = v278;
      v273 = v279;
      v231 = (v235 - 1) & a7;
      v252 = (v150 - 1) & a8;
      v254 = (v150 - 1) & (a10 + a8);
      v250 = v150 - v252;
      v246 = v284;
      v248 = v156 | v154;
      v160 = ~(-1 << v156);
      v260 = v155 > 1;
      v241 = v17;
      v239 = 1 << v23;
      v240 = v23;
      do
      {
        v161 = 0;
        v162 = v230 + v159;
        v163 = (v159 + v234) << v237;
        v164 = a9;
        if (v233 >= (v159 + v234 + 1) << v237)
          v164 = v235 - v231;
        v165 = 1 << v237;
        if (v233 < (v159 + v234 + 1) << v237)
          v165 = v232;
        v238 = v159;
        if (v163 >= v245)
          v166 = v165;
        else
          v166 = v164;
        if (v163 >= v245)
          v167 = 0;
        else
          v167 = v231;
        v242 = &a2[v167 + (v159 << v237)];
        do
        {
          v168 = v273 + v161;
          if (v275)
          {
            v169 = v271;
            if (v271)
            {
              v170 = 0;
              v169 = 0;
              v171 = 1;
              v172 = v262;
              v173 = v264;
              v175 = v266;
              v174 = v268;
              do
              {
                --v174;
                if (v173)
                  v169 |= (v171 & v162) << v170;
                else
                  v174 = 0;
                if (v173)
                  ++v170;
                --v175;
                if (v172)
                  v169 |= (v171 & v168) << v170;
                else
                  v175 = 0;
                if (v172)
                  ++v170;
                v171 *= 2;
                --v170;
                v172 = v175 != 0;
                v173 = v174 != 0;
              }
              while (v175 | v174);
            }
          }
          else
          {
            v169 = v271;
            if (v271)
            {
              v176 = 0;
              v169 = 0;
              v177 = 1;
              v179 = v262;
              v178 = v264;
              v180 = v266;
              v181 = v268;
              do
              {
                --v180;
                if (v179)
                  v169 |= (v177 & v168) << v176;
                else
                  v180 = 0;
                if (v179)
                  ++v176;
                --v181;
                if (v178)
                  v169 |= (v177 & v162) << v176;
                else
                  v181 = 0;
                if (v178)
                  ++v176;
                v177 *= 2;
                --v176;
                v178 = v181 != 0;
                v179 = v180 != 0;
              }
              while (v181 | v180);
            }
          }
          v182 = *(_DWORD *)(v17 + 4 * ((v169 + v276) | ((v169 + v276) >> 8 << 9)));
          if (v182 < 0)
          {
            v183 = v17 - *((_QWORD *)a13 + 3) + ((unint64_t)(v182 & 0x3FFFFFF) << 14);
            result = *a13;
            v184 = a13[2];
            if (result > v184)
            {
              v185 = v153;
              result = get_level_offset_within_tail(result, v184, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v158 = v260;
              v153 = v185;
              v150 = v239;
              v23 = v240;
              v17 = v241;
              v18 = a11;
              v149 = a8;
              v148 = a10;
              v183 += result;
            }
            v186 = (v161 + v257) << v23;
            v187 = v250;
            if (a10 + a8 >= (v161 + v257 + 1) << v23)
            {
              v188 = v150;
            }
            else
            {
              v187 = v148;
              v188 = v254;
            }
            if (v186 >= v149)
              v189 = 0;
            else
              v189 = v252;
            if (v186 >= v149)
              v187 = v188;
            if (!v248)
            {
              v207 = 0;
              v191 = 0;
              v200 = 0;
              v216 = 0;
              v157 = v246;
              if (!v166)
                goto LABEL_196;
LABEL_269:
              if (v187)
              {
                v221 = 0;
                v222 = (_QWORD *)((char *)v242 + (v189 + (v161 << v23)) * v18);
                do
                {
                  v223 = v166;
                  v224 = v222;
                  v225 = v207;
                  do
                  {
                    result = *(_QWORD *)(v183 + 8 * (v225 + v216));
                    *v224++ = result;
                    v225 = (v225 - v191) & v191;
                    --v223;
                  }
                  while (v223);
                  v216 = (v216 - v200) & v200;
                  v222 = (uint64_t *)((char *)v222 + v18);
                  ++v221;
                }
                while (v221 != v187);
              }
              goto LABEL_196;
            }
            v190 = 0;
            v191 = 0;
            v192 = 1;
            v193 = v158;
            v194 = v153;
            v195 = v269;
            v196 = v154;
            do
            {
              --v195;
              v197 = v193;
              if (!v197)
                v195 = 0;
              v198 = v190 + v197;
              --v196;
              if (v194)
                v191 |= (unint64_t)(v192 & ~(-1 << v154)) << v198++;
              else
                v196 = 0;
              v192 *= 2;
              v190 = v198 - 1;
              v194 = v196 != 0;
              v193 = v195 != 0;
            }
            while (v196 | v195);
            v199 = 0;
            v200 = 0;
            v201 = 1;
            v202 = v158;
            v203 = v153;
            v204 = v269;
            v205 = v154;
            do
            {
              --v204;
              if (v202)
                v200 |= (unint64_t)(v201 & v160) << v199++;
              else
                v204 = 0;
              --v205;
              if (!v203)
                v205 = 0;
              v201 *= 2;
              v199 = (__PAIR64__(v199, v203) - 1) >> 32;
              v203 = v205 != 0;
              v202 = v204 != 0;
            }
            while (v205 | v204);
            v206 = 0;
            v207 = 0;
            v208 = 1;
            v209 = v158;
            v210 = v153;
            v211 = v269;
            v212 = v154;
            do
            {
              --v211;
              v213 = v209;
              if (!v213)
                v211 = 0;
              v214 = v206 + v213;
              --v212;
              if (v210)
                v207 |= (unint64_t)(v208 & v167) << v214++;
              else
                v212 = 0;
              v208 *= 2;
              v206 = v214 - 1;
              v210 = v212 != 0;
              v209 = v211 != 0;
            }
            while (v212 | v211);
            v215 = 0;
            v216 = 0;
            v217 = 1;
            v218 = v158;
            v219 = v153;
            v220 = v269;
            LODWORD(result) = v154;
            do
            {
              --v220;
              if (v218)
                v216 |= (unint64_t)(v217 & v189) << v215++;
              else
                v220 = 0;
              LODWORD(result) = result - 1;
              if (v219)
                result = result;
              else
                result = 0;
              v217 *= 2;
              v215 = (__PAIR64__(v215, v219) - 1) >> 32;
              v219 = (_DWORD)result != 0;
              v218 = v220 != 0;
            }
            while (result | v220);
            v157 = v246;
            v158 = v260;
            if (v166)
              goto LABEL_269;
          }
LABEL_196:
          ++v161;
        }
        while (v157 > (unsigned __int16)v161);
        v159 = v238 + 1;
      }
      while (v236 > (unsigned __int16)(v238 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<false,2ul,4u,(TwiddleOrder)1>>(uint64_t result, _QWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _QWORD *v13;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  unsigned int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  BOOL v103;
  BOOL v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  BOOL v111;
  BOOL v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  char *v120;
  int v121;
  BOOL v122;
  BOOL v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  unint64_t v128;
  int v129;
  BOOL v130;
  BOOL v131;
  unsigned int v132;
  int v133;
  int v134;
  unint64_t v135;
  int v136;
  int j;
  char *v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  int v146;
  uint64_t *v147;
  int v148;
  uint64_t *v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  BOOL v153;
  char v154;
  int v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  BOOL v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  BOOL v167;
  int v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  BOOL v182;
  BOOL v183;
  int v184;
  int v185;
  int v186;
  BOOL v187;
  int v188;
  BOOL v189;
  int v190;
  int v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  int v195;
  int v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  int v200;
  BOOL v201;
  BOOL v202;
  unsigned int v203;
  unsigned int v204;
  int v205;
  uint64_t v206;
  int v207;
  BOOL v208;
  BOOL v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  int v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  BOOL v217;
  BOOL v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  uint64_t v222;
  int v223;
  BOOL v224;
  unsigned int v225;
  unsigned int v226;
  int v227;
  int v228;
  int v229;
  uint64_t *v230;
  int v231;
  uint64_t *v232;
  uint64_t v233;
  int i;
  int v235;
  _QWORD *v236;
  uint64_t v237;
  unsigned int v238;
  int v239;
  int v240;
  int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  char v245;
  _QWORD *v246;
  int v248;
  BOOL v249;
  int v250;
  char v251;
  _QWORD *v252;
  int v255;
  unsigned int v256;
  uint64_t v257;
  int v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  int v262;
  char v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  BOOL v270;
  char *v271;
  BOOL v272;
  int v273;
  BOOL v274;
  unsigned int v275;
  int v276;
  uint64_t v277;
  int v278;
  unsigned int v279;
  int v280;
  int v281;
  unsigned int v282;
  int v283;
  int v284;
  int v285;
  unsigned int v286;
  int v287;
  char v288[16];
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned __int8 v296;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v16 = result;
  v17 = a11;
  v18 = a12;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a6 - 1);
    v25 = a6 > 1;
    if (a6 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a5 - 1);
    v28 = a5 > 1;
    if (a5 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v26 | v29)
    {
      v30 = 0;
      v31 = 0;
      v32 = a5 > 1;
      v33 = a6 > 1;
      v34 = 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        if (v32)
          v31 |= (unint64_t)(v34 & ~(-1 << v29)) << v30++;
        else
          v35 = 0;
        --v36;
        if (!v33)
          v36 = 0;
        v34 *= 2;
        v30 = (__PAIR64__(v30, v33) - 1) >> 32;
        v33 = v36 != 0;
        v32 = v35 != 0;
      }
      while (v36 | v35);
      v37 = 0;
      v38 = 0;
      v39 = 1;
      v40 = a5 > 1;
      v41 = a6 > 1;
      v42 = v29;
      v43 = v26;
      do
      {
        --v42;
        v44 = v40;
        if (!v44)
          v42 = 0;
        v45 = v37 + v44;
        --v43;
        if (v41)
          v38 |= (unint64_t)(v39 & ~(-1 << v26)) << v45++;
        else
          v43 = 0;
        v39 *= 2;
        v37 = v45 - 1;
        v41 = v43 != 0;
        v40 = v42 != 0;
      }
      while (v43 | v42);
      v46 = 0;
      v47 = 0;
      v48 = a5 > 1;
      v49 = a6 > 1;
      v50 = 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        if (v48)
          v47 |= (unint64_t)(v50 & a7) << v46++;
        else
          v51 = 0;
        --v52;
        if (!v49)
          v52 = 0;
        v50 *= 2;
        v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        v49 = v52 != 0;
        v48 = v51 != 0;
      }
      while (v52 | v51);
      v53 = 0;
      v54 = 0;
      v55 = 1;
      do
      {
        --v29;
        v56 = v28;
        if (!v56)
          v29 = 0;
        v57 = v53 + v56;
        --v26;
        if (v25)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          v58 = v57 + 1;
        }
        else
        {
          v26 = 0;
          v58 = v57;
        }
        v55 *= 2;
        v53 = v58 - 1;
        v25 = v26 != 0;
        v28 = v29 != 0;
        result = v26 | v29;
      }
      while ((_DWORD)result);
      v19 = a10;
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v38 = 0;
      v54 = 0;
      if (!a9)
        return result;
    }
    if (v19)
    {
      for (i = 0; i != v19; ++i)
      {
        v235 = a9;
        v236 = v13;
        v237 = v47;
        do
        {
          *v236++ = *(_QWORD *)(v16 + 8 * (v237 + v54));
          v237 = (v237 - v31) & v31;
          --v235;
        }
        while (v235);
        v54 = (v54 - v38) & v38;
        v13 = (_QWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  if (*((_BYTE *)a12 + 20))
  {
    result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 1u, a7, a8, a9, a10, (uint64_t)v288);
    v20 = *((_BYTE *)a12 + 13);
    v21 = *((_BYTE *)a12 + 12);
    v246 = v13;
    if (1 << v20 >= a6 || a5 >> v21)
    {
      v150 = a6 >> v20;
      v151 = 1 << v21;
      v152 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
      if (a6 < 2)
        v152 = 0;
      v153 = v151 >= a5;
      if (v151 < a5)
        v154 = v21 + v20 + v152;
      else
        v154 = *((_BYTE *)a12 + 12);
      if (v153)
        LOBYTE(v155) = *((_BYTE *)a12 + 13);
      else
        v155 = -v152;
      if (!v150)
        v21 = v154;
      v245 = v21;
      if (v150)
        v23 = *((_BYTE *)a12 + 13);
      else
        v23 = v155;
    }
    else
    {
      v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
      if (a5 < 2)
        LOBYTE(v22) = 0;
      v245 = v22;
      v23 = v21 + v20 - v22;
    }
    v156 = a10;
    v157 = a8;
    v244 = v294;
    if (v294)
    {
      v158 = 1 << v245;
      v159 = 1 << v23;
      if (1 << v23 >= a6)
        v160 = a6;
      else
        v160 = 1 << v23;
      v161 = 32 - __clz(v160 - 1);
      v162 = v160 > 1;
      if (v160 <= 1)
        v163 = 0;
      else
        v163 = v161;
      if (v158 >= a5)
        v164 = a5;
      else
        v164 = 1 << v245;
      v165 = 32 - __clz(v164 - 1);
      v166 = v295;
      v167 = v164 > 1;
      if (v164 <= 1)
        v165 = 0;
      v279 = v165;
      v276 = v293;
      v278 = v292;
      v274 = v292 != 0;
      v272 = v293 != 0;
      if (v295)
      {
        v168 = 0;
        v243 = a7 >> v245;
        v267 = a8 >> v23;
        v281 = v293 | v292;
        v285 = v296;
        v287 = v291;
        v242 = a9 + a7;
        v241 = (v158 - 1) & (a9 + a7);
        v239 = v289;
        v283 = v290;
        v240 = (v158 - 1) & a7;
        v238 = v158 - v240;
        v262 = (v159 - 1) & a8;
        v264 = (v159 - 1) & (a10 + a8);
        v260 = v159 - v262;
        v169 = ~(-1 << v165);
        v256 = v295;
        v258 = v163 | v165;
        v270 = v164 > 1;
        v250 = 1 << v23;
        v251 = v23;
        v249 = v162;
        do
        {
          v170 = 0;
          v171 = v168 + v239;
          v172 = (v168 + v243) << v245;
          v173 = a9;
          if (v242 >= (v168 + v243 + 1) << v245)
            v173 = v238;
          v174 = 1 << v245;
          if (v242 < (v168 + v243 + 1) << v245)
            v174 = v241;
          v248 = v168;
          if (v172 >= a7)
            v175 = v174;
          else
            v175 = v173;
          if (v172 >= a7)
            v176 = 0;
          else
            v176 = v240;
          v252 = &v246[v176 + (v168 << v245)];
          do
          {
            v177 = v170 + v283;
            if (v285)
            {
              v178 = v281;
              if (v281)
              {
                v179 = 0;
                v178 = 0;
                v180 = 1;
                v182 = v274;
                v181 = v276;
                v183 = v272;
                v184 = v278;
                do
                {
                  --v184;
                  if (v182)
                    v178 |= (v180 & v171) << v179;
                  else
                    v184 = 0;
                  if (v182)
                    ++v179;
                  --v181;
                  if (v183)
                    v178 |= (v180 & v177) << v179;
                  else
                    v181 = 0;
                  if (v183)
                    ++v179;
                  v180 *= 2;
                  --v179;
                  v183 = v181 != 0;
                  v182 = v184 != 0;
                }
                while (v181 | v184);
              }
            }
            else
            {
              v178 = v281;
              if (v281)
              {
                v185 = 0;
                v178 = 0;
                v186 = 1;
                v187 = v272;
                v189 = v274;
                v188 = v276;
                v190 = v278;
                do
                {
                  --v188;
                  if (v187)
                    v178 |= (v186 & v177) << v185;
                  else
                    v188 = 0;
                  if (v187)
                    ++v185;
                  --v190;
                  if (v189)
                    v178 |= (v186 & v171) << v185;
                  else
                    v190 = 0;
                  if (v189)
                    ++v185;
                  v186 *= 2;
                  --v185;
                  v189 = v190 != 0;
                  v187 = v188 != 0;
                }
                while (v190 | v188);
              }
            }
            v191 = *(_DWORD *)(v16 + 4 * ((v178 + v287) | ((v178 + v287) >> 8 << 9)));
            if (v191 < 0)
            {
              v192 = v16 - *((_QWORD *)a13 + 3) + ((unint64_t)(v191 & 0x3FFFFFF) << 14);
              result = *a13;
              v193 = a13[2];
              if (result > v193)
              {
                result = get_level_offset_within_tail(result, v193, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                v167 = v270;
                v162 = v249;
                v159 = v250;
                v23 = v251;
                v17 = a11;
                v157 = a8;
                v156 = a10;
                v192 += result;
              }
              v194 = (v170 + v267) << v23;
              v195 = v260;
              if (a10 + a8 >= (v170 + v267 + 1) << v23)
              {
                v196 = v159;
              }
              else
              {
                v195 = v156;
                v196 = v264;
              }
              if (v194 >= v157)
                v197 = 0;
              else
                v197 = v262;
              if (v194 >= v157)
                v195 = v196;
              if (!v258)
              {
                v215 = 0;
                v199 = 0;
                v206 = 0;
                v222 = 0;
                v166 = v256;
                if (!v175)
                  goto LABEL_213;
LABEL_285:
                if (v195)
                {
                  v229 = 0;
                  v230 = (_QWORD *)((char *)v252 + (v197 + (v170 << v23)) * v17);
                  do
                  {
                    v231 = v175;
                    v232 = v230;
                    v233 = v215;
                    do
                    {
                      result = *(_QWORD *)(v192 + 8 * (v233 + v222));
                      *v232++ = result;
                      v233 = (v233 - v199) & v199;
                      --v231;
                    }
                    while (v231);
                    v222 = (v222 - v206) & v206;
                    v230 = (uint64_t *)((char *)v230 + v17);
                    ++v229;
                  }
                  while (v229 != v195);
                }
                goto LABEL_213;
              }
              v198 = 0;
              v199 = 0;
              v200 = 1;
              v201 = v167;
              v202 = v162;
              v203 = v279;
              v204 = v163;
              do
              {
                --v203;
                if (v201)
                  v199 |= (unint64_t)(v200 & v169) << v198++;
                else
                  v203 = 0;
                --v204;
                if (!v202)
                  v204 = 0;
                v200 *= 2;
                v198 = (__PAIR64__(v198, v202) - 1) >> 32;
                v202 = v204 != 0;
                v201 = v203 != 0;
              }
              while (v204 | v203);
              v205 = 0;
              v206 = 0;
              v207 = 1;
              v208 = v167;
              v209 = v162;
              v210 = v279;
              v211 = v163;
              do
              {
                --v210;
                v212 = v208;
                if (!v212)
                  v210 = 0;
                v213 = v205 + v212;
                --v211;
                if (v209)
                  v206 |= (unint64_t)(v207 & ~(-1 << v163)) << v213++;
                else
                  v211 = 0;
                v207 *= 2;
                v205 = v213 - 1;
                v209 = v211 != 0;
                v208 = v210 != 0;
              }
              while (v211 | v210);
              v214 = 0;
              v215 = 0;
              v216 = 1;
              v217 = v167;
              v218 = v162;
              v219 = v279;
              v220 = v163;
              do
              {
                --v219;
                if (v217)
                  v215 |= (unint64_t)(v216 & v176) << v214++;
                else
                  v219 = 0;
                --v220;
                if (!v218)
                  v220 = 0;
                v216 *= 2;
                v214 = (__PAIR64__(v214, v218) - 1) >> 32;
                v218 = v220 != 0;
                v217 = v219 != 0;
              }
              while (v220 | v219);
              v221 = 0;
              v222 = 0;
              v223 = 1;
              v224 = v167;
              LOBYTE(result) = v162;
              v225 = v279;
              v226 = v163;
              do
              {
                --v225;
                v227 = v224;
                if (!v227)
                  v225 = 0;
                v228 = v221 + v227;
                --v226;
                if ((result & 1) != 0)
                  v222 |= (unint64_t)(v223 & v197) << v228++;
                else
                  v226 = 0;
                v223 *= 2;
                v221 = v228 - 1;
                result = v226 != 0;
                v224 = v225 != 0;
              }
              while (v226 | v225);
              v166 = v256;
              v167 = v270;
              if (v175)
                goto LABEL_285;
            }
LABEL_213:
            ++v170;
          }
          while (v166 > (unsigned __int16)v170);
          v168 = v248 + 1;
        }
        while (v244 > (unsigned __int16)(v248 + 1));
      }
    }
  }
  else
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v266 = a8 >> v66;
    v268 = 1 << v66;
    v76 = v69 - 1;
    v263 = v66;
    v265 = a10 + a8;
    v261 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 < v261)
    {
      result = a7 >> v67;
      v77 = (1 << v67) - 1;
      v286 = a9 + a7;
      if (v69 >= a6)
        v69 = a6;
      v78 = 32 - __clz(v69 - 1);
      v79 = v69 > 1;
      if (v69 <= 1)
        v80 = 0;
      else
        v80 = v78;
      v282 = (v77 + a9 + a7) >> v67;
      v284 = 1 << v67;
      if (1 << v67 >= a5)
        v81 = a5;
      else
        v81 = 1 << v67;
      v82 = 32 - __clz(v81 - 1);
      v83 = v81 > 1;
      if (v81 <= 1)
        v84 = 0;
      else
        v84 = v82;
      v275 = a7 >> v67;
      if (result < (v77 + a9 + a7) >> v67)
      {
        v259 = (v75 + ~(-1 << v67)) >> v67;
        v85 = v77 & a7;
        v280 = v77 & v286;
        v255 = v76 & v265;
        v257 = v76 & a8;
        v86 = v266;
        do
        {
          v87 = v86 << v263;
          v269 = v86 + 1;
          v88 = v268;
          if (v265 < (v86 + 1) << v263)
            v88 = v255;
          v89 = v268 - v257;
          if (v265 < (v86 + 1) << v263)
            v89 = v19;
          v273 = v86 * v259;
          if (v87 >= a8)
            v90 = 0;
          else
            v90 = v257;
          if (v87 >= a8)
            v91 = v88;
          else
            v91 = v89;
          v271 = (char *)v13 + (v90 + ((v86 - v266) << v263) - v257) * a11;
          v92 = v275;
          v93 = a7;
          if (v80 | v84)
          {
            do
            {
              v95 = 0;
              v96 = 0;
              v97 = v92 << v67;
              v98 = v92 - v275;
              v99 = v92 + v273;
              v100 = ++v92 << v67;
              if (v97 >= v93)
                v101 = 0;
              else
                v101 = v85;
              v277 = v99 * v18[3] * *((unsigned __int8 *)v18 + 9);
              v102 = 1;
              v103 = v83;
              v104 = v79;
              v105 = v84;
              v106 = v80;
              do
              {
                --v105;
                if (v103)
                  v96 |= (unint64_t)(v102 & ~(-1 << v84)) << v95++;
                else
                  v105 = 0;
                if (v104)
                  --v106;
                else
                  v106 = 0;
                v102 *= 2;
                v95 = (__PAIR64__(v95, v104) - 1) >> 32;
                v104 = v106 != 0;
                v103 = v105 != 0;
              }
              while (v106 | v105);
              v107 = 0;
              v108 = 0;
              if (v286 >= v100)
                v109 = 1 << v67;
              else
                v109 = v280;
              v110 = 1;
              v111 = v83;
              v112 = v79;
              v113 = v84;
              v114 = v80;
              do
              {
                --v113;
                v115 = v111;
                if (!v115)
                  v113 = 0;
                v116 = v107 + v115;
                if (v112)
                  --v114;
                else
                  v114 = 0;
                if (v112)
                  v108 |= (unint64_t)(v110 & ~(-1 << v80)) << v116++;
                v110 *= 2;
                v107 = v116 - 1;
                v112 = v114 != 0;
                v111 = v113 != 0;
              }
              while (v114 | v113);
              v117 = 0;
              v118 = 0;
              if (v286 >= v100)
                v119 = v284 - v85;
              else
                v119 = a9;
              v120 = &v271[8 * (v101 + (v98 << v67) - v85)];
              v121 = 1;
              v122 = v83;
              v123 = v79;
              v124 = v84;
              v125 = v80;
              do
              {
                --v124;
                if (v122)
                {
                  v118 |= (unint64_t)(v121 & v101) << v117;
                  v126 = v117 + 1;
                }
                else
                {
                  v124 = 0;
                  v126 = v117;
                }
                if (v123)
                  --v125;
                else
                  v125 = 0;
                v121 *= 2;
                v117 = (__PAIR64__(v126, v123) - 1) >> 32;
                v123 = v125 != 0;
                v122 = v124 != 0;
              }
              while (v125 | v124);
              v127 = 0;
              v128 = 0;
              v129 = 1;
              v130 = v83;
              v131 = v79;
              LODWORD(result) = v84;
              v132 = v80;
              do
              {
                v133 = v130;
                if (v133)
                  result = (result - 1);
                else
                  result = 0;
                v134 = v127 + v133;
                v135 = ((unint64_t)(v129 & v90) << (v127 + v133)) | v128;
                if (v131)
                  --v132;
                else
                  v132 = 0;
                if (v131)
                {
                  v128 = v135;
                  ++v134;
                }
                v129 *= 2;
                v127 = v134 - 1;
                v131 = v132 != 0;
                v130 = (_DWORD)result != 0;
              }
              while (v132 | result);
              v93 = a7;
              if (v97 >= a7)
                v136 = v109;
              else
                v136 = v119;
              if (v91 && v136)
              {
                for (j = 0; j != v91; ++j)
                {
                  LODWORD(result) = v136;
                  v138 = v120;
                  v139 = v118;
                  do
                  {
                    *(_QWORD *)v138 = *(_QWORD *)(v277 + v16 + 8 * (v139 + v128));
                    v138 += 8;
                    v139 = (v139 - v96) & v96;
                    result = (result - 1);
                  }
                  while ((_DWORD)result);
                  v128 = (v128 - v108) & v108;
                  v120 += a11;
                }
              }
              v18 = a12;
            }
            while (v92 != v282);
          }
          else
          {
            v94 = v275;
            do
            {
              v140 = v94 << v67;
              v141 = v94 + 1;
              v142 = a9;
              if (v286 >= (v94 + 1) << v67)
                v142 = v284 - v85;
              v143 = 1 << v67;
              if (v286 < v141 << v67)
                v143 = v280;
              if (v140 >= a7)
                v142 = v143;
              if (v91 && v142)
              {
                v144 = 0;
                v145 = (v94 + v273) * v18[3] * *((unsigned __int8 *)v18 + 9);
                if (v140 >= a7)
                  v146 = 0;
                else
                  v146 = v85;
                v147 = (uint64_t *)&v271[8 * (v146 + ((v94 - v275) << v67) - v85)];
                do
                {
                  v148 = v142;
                  v149 = v147;
                  do
                  {
                    result = *(_QWORD *)(v16 + v145);
                    *v149++ = result;
                    --v148;
                  }
                  while (v148);
                  v147 = (uint64_t *)((char *)v147 + a11);
                  ++v144;
                }
                while (v144 != v91);
              }
              v94 = v141;
            }
            while (v141 != v282);
          }
          v86 = v269;
          v13 = a2;
          v19 = a10;
        }
        while (v269 != v261);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,2ul,8u,(TwiddleOrder)0>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _OWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  BOOL v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  _OWORD *v135;
  uint64_t v136;
  int v137;
  _OWORD *v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  BOOL v143;
  char v144;
  int v145;
  uint64_t v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  BOOL v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  BOOL v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  BOOL v174;
  BOOL v175;
  int v176;
  int v177;
  int v178;
  int v179;
  BOOL v180;
  BOOL v181;
  int v182;
  int v183;
  int v184;
  unint64_t v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  int v190;
  int v191;
  uint64_t v192;
  int v193;
  unsigned int v194;
  BOOL v195;
  BOOL v196;
  unsigned int v197;
  int v198;
  int v199;
  unsigned int v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  BOOL v204;
  BOOL v205;
  unsigned int v206;
  int v207;
  uint64_t v208;
  int v209;
  BOOL v210;
  unsigned int v211;
  BOOL v212;
  unsigned int v213;
  int v214;
  int v215;
  unsigned int v216;
  uint64_t v217;
  int v218;
  BOOL v219;
  unsigned int v220;
  BOOL v221;
  int v222;
  _OWORD *v223;
  int v224;
  _OWORD *v225;
  uint64_t v226;
  int i;
  int v228;
  _OWORD *v229;
  uint64_t v230;
  int v231;
  int v232;
  int v233;
  unsigned int v234;
  unsigned int v235;
  int v236;
  unsigned int v237;
  char v238;
  int v239;
  int v240;
  char v241;
  _OWORD *v243;
  _OWORD *v244;
  unsigned int v247;
  int v248;
  unsigned int v249;
  int v250;
  int v251;
  uint64_t v252;
  int v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  char v257;
  uint64_t v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  BOOL v262;
  unsigned int v263;
  BOOL v264;
  unsigned int v265;
  int v266;
  uint64_t v267;
  int v268;
  int v269;
  BOOL v270;
  unsigned int v271;
  unsigned int v272;
  int v273;
  int v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  int v278;
  int v279;
  char v280[16];
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned __int8 v288;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v228 = a9;
        v229 = v13;
        v230 = v47;
        do
        {
          *v229++ = *(_OWORD *)(result + 16 * (v230 + v56));
          v230 = (v230 - v31) & v31;
          --v228;
        }
        while (v228);
        v56 = (v56 - v40) & v40;
        v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v258 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v261 = a8 >> v66;
    v263 = 1 << v66;
    v76 = v69 - 1;
    v259 = a10 + a8;
    v255 = (v69 - 1 + a10 + a8) >> v66;
    v257 = v66;
    if (a8 >> v66 >= v255)
      return result;
    v77 = (1 << v67) - 1;
    v277 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v263;
    if (v263 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v271 = a7 >> v67;
    v275 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v275)
      return result;
    v254 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v273 = v77 & v277;
    v250 = v76 & v259;
    v252 = v76 & a8;
    v86 = v261;
LABEL_92:
    v87 = v86 << v257;
    v88 = v86 - v261;
    v269 = v86 * v254;
    v265 = v86 + 1;
    v89 = v259 >= (v86 + 1) << v257;
    v90 = v263;
    if (!v89)
      v90 = v250;
    v91 = v263 - v252;
    if (!v89)
      v91 = v19;
    v92 = v88 << v257;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v252;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v267 = (v93 + v92 - v252) * a11;
    v95 = v271;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      if (v277 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      else
        v98 = a9;
      v99 = v273;
      if (v277 >= v97 << v67)
        v99 = 1 << v67;
      if (v96 >= v15)
        v100 = 0;
      else
        v100 = v85;
      if (v96 < v15)
        v99 = v98;
      if (v84 | v80)
        break;
      v118 = 0;
      v102 = 0;
      v111 = 0;
      v127 = 0;
      if (v99)
        goto LABEL_153;
LABEL_103:
      v95 = v97;
      if (v97 == v275)
      {
        v86 = v265;
        v14 = a8;
        v19 = a10;
        if (v265 == v255)
          return result;
        goto LABEL_92;
      }
    }
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v104 = v83;
    v105 = result;
    v106 = v84;
    v107 = v80;
    do
    {
      v108 = v104;
      if (v108)
        --v106;
      else
        v106 = 0;
      v109 = v101 + v108;
      if (v105)
        --v107;
      else
        v107 = 0;
      if (v105)
        v102 |= (unint64_t)(v103 & ~(-1 << v80)) << v109++;
      v103 *= 2;
      v101 = v109 - 1;
      v105 = v107 != 0;
      v104 = v106 != 0;
    }
    while (v107 | v106);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v83;
    v114 = result;
    v115 = v84;
    v116 = v80;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
        v111 |= (unint64_t)(v112 & ~(-1 << v84)) << v110++;
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v110, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v117 = 0;
    v118 = 0;
    v119 = 1;
    v120 = v83;
    v121 = result;
    v122 = v84;
    v123 = v80;
    do
    {
      v124 = v120;
      if (v124)
        --v122;
      else
        v122 = 0;
      v125 = v117 + v124;
      --v123;
      if (v121)
        v118 |= (unint64_t)(v119 & v100) << v125++;
      else
        v123 = 0;
      v119 *= 2;
      v117 = v125 - 1;
      v121 = v123 != 0;
      v120 = v122 != 0;
    }
    while (v123 | v122);
    v126 = 0;
    v127 = 0;
    v128 = 1;
    v129 = v83;
    v130 = result;
    v131 = v84;
    v132 = v80;
    do
    {
      --v131;
      if (v129)
      {
        v127 |= (unint64_t)(v128 & v93) << v126;
        v133 = v126 + 1;
      }
      else
      {
        v131 = 0;
        v133 = v126;
      }
      if (v130)
        --v132;
      else
        v132 = 0;
      v128 *= 2;
      v126 = (__PAIR64__(v133, v130) - 1) >> 32;
      v130 = v132 != 0;
      v129 = v131 != 0;
    }
    while (v132 | v131);
    v15 = a7;
    if (!v99)
      goto LABEL_103;
LABEL_153:
    if (v94)
    {
      v134 = 0;
      v135 = (_OWORD *)((char *)&a2[v100 + ((v95 - v271) << v67) - v85] + v267);
      v136 = (v95 + v269) * a12[3] * *((unsigned __int8 *)a12 + 9) + v258;
      do
      {
        v137 = v99;
        v138 = v135;
        v139 = v118;
        do
        {
          *v138++ = *(_OWORD *)(v136 + 16 * (v139 + v127));
          v139 = (v139 - v102) & v102;
          --v137;
        }
        while (v137);
        v127 = (v127 - v111) & v111;
        v135 = (_OWORD *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v280);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v244 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v140 = a6 >> v20;
    v141 = 1 << v21;
    v142 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v142 = 0;
    v143 = v141 >= a5;
    if (v141 < a5)
      v144 = v21 + v20 + v142;
    else
      v144 = *((_BYTE *)a12 + 12);
    if (v143)
      LOBYTE(v145) = *((_BYTE *)a12 + 13);
    else
      v145 = -v142;
    if (!v140)
      v21 = v144;
    v238 = v21;
    if (v140)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v145;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v238 = v22;
    v23 = v21 + v20 - v22;
  }
  v146 = v258;
  v148 = a8;
  v147 = a10;
  v237 = v286;
  if (v286)
  {
    v149 = 1 << v23;
    v236 = 1 << v238;
    if (1 << v238 >= a5)
      v150 = a5;
    else
      v150 = 1 << v238;
    v151 = 32 - __clz(v150 - 1);
    v152 = v150 > 1;
    if (v150 <= 1)
      v153 = 0;
    else
      v153 = v151;
    if (v149 >= a6)
      v154 = a6;
    else
      v154 = 1 << v23;
    v155 = 32 - __clz(v154 - 1);
    v156 = v287;
    if (v154 <= 1)
      v155 = 0;
    v270 = v154 > 1;
    v272 = v155;
    v268 = v284;
    v264 = v284 != 0;
    v266 = v285;
    v262 = v285 != 0;
    if (v287)
    {
      v157 = 0;
      v158 = 0;
      v235 = v15 >> v238;
      v256 = a8 >> v23;
      v278 = v288;
      v279 = v283;
      v274 = v285 | v284;
      v234 = a9 + v15;
      v233 = (v236 - 1) & (a9 + v15);
      v232 = v281;
      v276 = v282;
      v231 = (v236 - 1) & v15;
      v251 = (v149 - 1) & a8;
      v253 = (v149 - 1) & (a10 + a8);
      v249 = v149 - v251;
      v159 = ~(-1 << v153);
      v247 = v287;
      v248 = v155 | v153;
      v160 = ~(-1 << v155);
      v260 = v153;
      v240 = 1 << v23;
      v241 = v23;
      do
      {
        v239 = v158;
        v161 = 0;
        v162 = 0;
        v163 = a9;
        if (v234 >= (v157 + v235 + 1) << v238)
          v163 = v236 - v231;
        v164 = 1 << v238;
        if (v234 < (v157 + v235 + 1) << v238)
          v164 = v233;
        v165 = (v157 + v235) << v238 >= v15;
        v166 = v232 + v157;
        v167 = v157 << v238;
        if (v165)
          v168 = v164;
        else
          v168 = v163;
        if (v165)
          v169 = 0;
        else
          v169 = v231;
        v243 = &v244[v169 + v167];
        do
        {
          v170 = v276 + v161;
          if (v278)
          {
            v171 = v274;
            if (v274)
            {
              v172 = 0;
              v171 = 0;
              v173 = 1;
              v174 = v262;
              v175 = v264;
              v177 = v266;
              v176 = v268;
              do
              {
                --v176;
                if (v175)
                  v171 |= (v173 & v166) << v172;
                else
                  v176 = 0;
                if (v175)
                  ++v172;
                --v177;
                if (v174)
                  v171 |= (v173 & v170) << v172;
                else
                  v177 = 0;
                if (v174)
                  ++v172;
                v173 *= 2;
                --v172;
                v174 = v177 != 0;
                v175 = v176 != 0;
              }
              while (v177 | v176);
            }
          }
          else
          {
            v171 = v274;
            if (v274)
            {
              v178 = 0;
              v171 = 0;
              v179 = 1;
              v181 = v262;
              v180 = v264;
              v182 = v266;
              v183 = v268;
              do
              {
                --v182;
                if (v181)
                  v171 |= (v179 & v170) << v178;
                else
                  v182 = 0;
                if (v181)
                  ++v178;
                --v183;
                if (v180)
                  v171 |= (v179 & v166) << v178;
                else
                  v183 = 0;
                if (v180)
                  ++v178;
                v179 *= 2;
                --v178;
                v180 = v183 != 0;
                v181 = v182 != 0;
              }
              while (v183 | v182);
            }
          }
          v184 = *(_DWORD *)(v146 + 4 * ((v171 + v279) | ((v171 + v279) >> 8 << 9)));
          if (v184 < 0)
          {
            v185 = v146 - *((_QWORD *)a13 + 3) + ((unint64_t)(v184 & 0x3FFFFFF) << 14);
            result = *a13;
            v186 = a13[2];
            if (result > v186)
            {
              result = get_level_offset_within_tail(result, v186, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v153 = v260;
              v149 = v240;
              v23 = v241;
              v18 = a11;
              v148 = a8;
              v147 = a10;
              v146 = v258;
              v185 += result;
            }
            v187 = (v161 + v256) << v23;
            v188 = v249;
            if (a10 + a8 >= (v161 + v256 + 1) << v23)
            {
              v189 = v149;
            }
            else
            {
              v188 = v147;
              v189 = v253;
            }
            if (v187 >= v148)
              v190 = 0;
            else
              v190 = v251;
            if (v187 >= v148)
              v188 = v189;
            if (!v248)
            {
              v208 = 0;
              v192 = 0;
              v201 = 0;
              v217 = 0;
              v156 = v247;
              if (!v168)
                goto LABEL_198;
LABEL_271:
              if (v188)
              {
                v222 = 0;
                v223 = (_OWORD *)((char *)v243 + (v190 + (v161 << v23)) * v18);
                do
                {
                  v224 = v168;
                  v225 = v223;
                  v226 = v208;
                  do
                  {
                    result = v226 + v217;
                    *v225++ = *(_OWORD *)(v185 + 16 * (v226 + v217));
                    v226 = (v226 - v192) & v192;
                    --v224;
                  }
                  while (v224);
                  v217 = (v217 - v201) & v201;
                  v223 = (_OWORD *)((char *)v223 + v18);
                  ++v222;
                }
                while (v222 != v188);
              }
              goto LABEL_198;
            }
            v191 = 0;
            v192 = 0;
            v193 = 1;
            v195 = v270;
            v194 = v272;
            v196 = v152;
            v197 = v153;
            do
            {
              --v194;
              v198 = v195;
              if (!v198)
                v194 = 0;
              v199 = v191 + v198;
              --v197;
              if (v196)
                v192 |= (unint64_t)(v193 & v159) << v199++;
              else
                v197 = 0;
              v193 *= 2;
              v191 = v199 - 1;
              v196 = v197 != 0;
              v195 = v194 != 0;
            }
            while (v197 | v194);
            v200 = 0;
            v201 = 0;
            v202 = 1;
            v204 = v270;
            v203 = v272;
            v205 = v152;
            v206 = v153;
            do
            {
              --v203;
              if (v204)
                v201 |= (unint64_t)(v202 & v160) << v200++;
              else
                v203 = 0;
              --v206;
              if (!v205)
                v206 = 0;
              v202 *= 2;
              v200 = (__PAIR64__(v200, v205) - 1) >> 32;
              v205 = v206 != 0;
              v204 = v203 != 0;
            }
            while (v206 | v203);
            v207 = 0;
            v208 = 0;
            v209 = 1;
            v210 = v270;
            v211 = v272;
            v212 = v152;
            v213 = v153;
            do
            {
              --v211;
              v214 = v210;
              if (!v214)
                v211 = 0;
              v215 = v207 + v214;
              --v213;
              if (v212)
                v208 |= (unint64_t)(v209 & v169) << v215++;
              else
                v213 = 0;
              v209 *= 2;
              v207 = v215 - 1;
              v212 = v213 != 0;
              v210 = v211 != 0;
            }
            while (v213 | v211);
            v216 = 0;
            v217 = 0;
            v218 = 1;
            v219 = v270;
            v220 = v272;
            v221 = v152;
            LODWORD(result) = v153;
            do
            {
              --v220;
              if (v219)
                v217 |= (unint64_t)(v218 & v190) << v216++;
              else
                v220 = 0;
              LODWORD(result) = result - 1;
              if (v221)
                result = result;
              else
                result = 0;
              v218 *= 2;
              v216 = (__PAIR64__(v216, v221) - 1) >> 32;
              v221 = (_DWORD)result != 0;
              v219 = v220 != 0;
            }
            while (result | v220);
            v153 = v260;
            v156 = v247;
            if (v168)
              goto LABEL_271;
          }
LABEL_198:
          v161 = (unsigned __int16)++v162;
        }
        while (v156 > (unsigned __int16)v162);
        v158 = v239 + 1;
        v157 = (unsigned __int16)(v239 + 1);
        v15 = a7;
      }
      while (v237 > v157);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<false,2ul,8u,(TwiddleOrder)1>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  unsigned int v13;
  unsigned __int16 *v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  unsigned int v21;
  char v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  BOOL v31;
  BOOL v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  char v62;
  BOOL v63;
  char v64;
  int v65;
  unsigned int v66;
  unsigned int v68;
  char v69;
  unsigned int v70;
  BOOL v71;
  BOOL v72;
  int v73;
  int v74;
  unsigned int v75;
  _OWORD *v76;
  int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  int v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  int v122;
  _OWORD *v123;
  int v124;
  BOOL v125;
  BOOL v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  int v130;
  unint64_t v131;
  int v132;
  BOOL v133;
  BOOL v134;
  unsigned int v135;
  int v136;
  int v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  _OWORD *v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  int v145;
  int v146;
  int v147;
  _OWORD *v148;
  int v149;
  uint64_t v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  BOOL v155;
  char v156;
  int v157;
  uint64_t v158;
  int v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  unsigned int v163;
  BOOL v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  unsigned int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  BOOL v187;
  BOOL v188;
  int v189;
  int v190;
  int v191;
  BOOL v192;
  int v193;
  BOOL v194;
  int v195;
  int v196;
  unint64_t v197;
  unsigned int v198;
  unsigned int v199;
  int v200;
  int v201;
  int v202;
  unsigned int v203;
  uint64_t v204;
  int v205;
  unsigned int v206;
  BOOL v207;
  BOOL v208;
  unsigned int v209;
  int v210;
  uint64_t v211;
  int v212;
  unsigned int v213;
  BOOL v214;
  BOOL v215;
  unsigned int v216;
  int v217;
  int v218;
  unsigned int v219;
  uint64_t v220;
  int v221;
  BOOL v222;
  unsigned int v223;
  BOOL v224;
  unsigned int v225;
  int v226;
  uint64_t v227;
  int v228;
  BOOL v229;
  unsigned int v230;
  unsigned int v231;
  int v232;
  int v233;
  int v234;
  _OWORD *v235;
  int v236;
  _OWORD *v237;
  uint64_t v238;
  _OWORD *v239;
  int i;
  int v241;
  _OWORD *v242;
  uint64_t v243;
  int v244;
  unsigned int v245;
  unsigned int v246;
  int v247;
  unsigned int v248;
  char v249;
  int v251;
  int v252;
  char v253;
  _OWORD *v254;
  unsigned int v257;
  int v258;
  int v259;
  int v260;
  uint64_t v261;
  int v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  char v266;
  unsigned int v267;
  unsigned int v268;
  uint64_t v269;
  unsigned int v270;
  unsigned int v271;
  int v272;
  BOOL v273;
  unsigned int v274;
  BOOL v275;
  uint64_t v276;
  int v277;
  int v278;
  int v279;
  unsigned int v280;
  BOOL v281;
  unsigned int v282;
  int v283;
  int v284;
  unsigned int v285;
  int v286;
  int v287;
  int v288;
  unsigned int v289;
  int v290;
  char v291[16];
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned __int8 v299;

  if (result && a2)
  {
    v13 = a7;
    v17 = a11;
    v16 = a12;
    v18 = a10;
    v269 = result;
    if (a12)
    {
      if (*((_BYTE *)a12 + 20))
      {
        result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 1u, a7, a8, a9, a10, (uint64_t)v291);
        v19 = *((_BYTE *)a12 + 13);
        v20 = *((_BYTE *)a12 + 12);
        if (1 << v19 >= a6 || a5 >> v20)
        {
          v152 = a6 >> v19;
          v153 = 1 << v20;
          v154 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
          if (a6 < 2)
            v154 = 0;
          v155 = v153 >= a5;
          if (v153 < a5)
            v156 = v20 + v19 + v154;
          else
            v156 = *((_BYTE *)a12 + 12);
          if (v155)
            LOBYTE(v157) = *((_BYTE *)a12 + 13);
          else
            v157 = -v154;
          if (!v152)
            v20 = v156;
          v249 = v20;
          if (v152)
            v22 = *((_BYTE *)a12 + 13);
          else
            v22 = v157;
        }
        else
        {
          v21 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
          if (a5 < 2)
            LOBYTE(v21) = 0;
          v249 = v21;
          v22 = v20 + v19 - v21;
        }
        v158 = v269;
        v159 = a10;
        v160 = a8;
        v248 = v297;
        if (v297)
        {
          v161 = 1 << v22;
          if (1 << v22 >= a6)
            v162 = a6;
          else
            v162 = 1 << v22;
          v163 = 32 - __clz(v162 - 1);
          v164 = v162 > 1;
          if (v162 <= 1)
            v165 = 0;
          else
            v165 = v163;
          v247 = 1 << v249;
          if (1 << v249 >= a5)
            v166 = a5;
          else
            v166 = 1 << v249;
          v167 = 32 - __clz(v166 - 1);
          v168 = v298;
          if (v166 <= 1)
            v167 = 0;
          v281 = v166 > 1;
          v282 = v167;
          v279 = v295;
          v275 = v295 != 0;
          v277 = v296;
          v273 = v296 != 0;
          if (v298)
          {
            v169 = 0;
            v170 = 0;
            v246 = a7 >> v249;
            v267 = a8 >> v22;
            v288 = v299;
            v290 = v294;
            v284 = v296 | v295;
            v245 = a9 + a7;
            v244 = v292;
            v286 = v293;
            v264 = (v161 - 1) & (a10 + a8);
            v262 = (v161 - 1) & a8;
            v260 = v161 - v262;
            v171 = ~(-1 << v167);
            v257 = v298;
            v258 = v165 | v167;
            v172 = ~(-1 << v165);
            v271 = v165;
            v252 = 1 << v22;
            v253 = v22;
            do
            {
              v251 = v170;
              v173 = 0;
              v174 = 0;
              v175 = (v169 + v246) << v249;
              v176 = a9;
              if (v245 >= (v169 + v246 + 1) << v249)
                v176 = v247 - ((v247 - 1) & a7);
              v177 = 1 << v249;
              if (v245 < (v169 + v246 + 1) << v249)
                v177 = (v247 - 1) & (a9 + a7);
              v178 = v169 + v244;
              v179 = v169 << v249;
              if (v175 >= a7)
                v180 = v177;
              else
                v180 = v176;
              if (v175 >= a7)
                v181 = 0;
              else
                v181 = (v247 - 1) & a7;
              v254 = &a2[v181 + v179];
              do
              {
                v182 = v173 + v286;
                if (v288)
                {
                  v183 = v284;
                  if (v284)
                  {
                    v184 = 0;
                    v183 = 0;
                    v185 = 1;
                    v187 = v275;
                    v186 = v277;
                    v188 = v273;
                    v189 = v279;
                    do
                    {
                      --v189;
                      if (v187)
                        v183 |= (v185 & v178) << v184;
                      else
                        v189 = 0;
                      if (v187)
                        ++v184;
                      --v186;
                      if (v188)
                        v183 |= (v185 & v182) << v184;
                      else
                        v186 = 0;
                      if (v188)
                        ++v184;
                      v185 *= 2;
                      --v184;
                      v188 = v186 != 0;
                      v187 = v189 != 0;
                    }
                    while (v186 | v189);
                  }
                }
                else
                {
                  v183 = v284;
                  if (v284)
                  {
                    v190 = 0;
                    v183 = 0;
                    v191 = 1;
                    v192 = v273;
                    v194 = v275;
                    v193 = v277;
                    v195 = v279;
                    do
                    {
                      --v193;
                      if (v192)
                        v183 |= (v191 & v182) << v190;
                      else
                        v193 = 0;
                      if (v192)
                        ++v190;
                      --v195;
                      if (v194)
                        v183 |= (v191 & v178) << v190;
                      else
                        v195 = 0;
                      if (v194)
                        ++v190;
                      v191 *= 2;
                      --v190;
                      v194 = v195 != 0;
                      v192 = v193 != 0;
                    }
                    while (v195 | v193);
                  }
                }
                v196 = *(_DWORD *)(v158
                                 + 4 * ((v183 + v290) | ((v183 + v290) >> 8 << 9)));
                if (v196 < 0)
                {
                  v197 = v158 - *((_QWORD *)a13 + 3) + ((unint64_t)(v196 & 0x3FFFFFF) << 14);
                  result = *a13;
                  v198 = a13[2];
                  if (result > v198)
                  {
                    result = get_level_offset_within_tail(result, v198, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                    v165 = v271;
                    v161 = v252;
                    v22 = v253;
                    v17 = a11;
                    v160 = a8;
                    v159 = a10;
                    v158 = v269;
                    v197 += result;
                  }
                  v199 = (v173 + v267) << v22;
                  v200 = v260;
                  if (a10 + a8 >= (v173 + v267 + 1) << v22)
                  {
                    v201 = v161;
                  }
                  else
                  {
                    v200 = v159;
                    v201 = v264;
                  }
                  if (v199 >= v160)
                    v202 = 0;
                  else
                    v202 = v262;
                  if (v199 >= v160)
                    v200 = v201;
                  if (!v258)
                  {
                    v220 = 0;
                    v204 = 0;
                    v211 = 0;
                    v227 = 0;
                    v168 = v257;
                    if (!v180)
                      goto LABEL_208;
LABEL_280:
                    if (v200)
                    {
                      v234 = 0;
                      v235 = (_OWORD *)((char *)v254 + (v202 + (v173 << v22)) * v17);
                      do
                      {
                        v236 = v180;
                        v237 = v235;
                        v238 = v220;
                        do
                        {
                          result = v238 + v227;
                          *v237++ = *(_OWORD *)(v197 + 16 * (v238 + v227));
                          v238 = (v238 - v204) & v204;
                          --v236;
                        }
                        while (v236);
                        v227 = (v227 - v211) & v211;
                        v235 = (_OWORD *)((char *)v235 + v17);
                        ++v234;
                      }
                      while (v234 != v200);
                    }
                    goto LABEL_208;
                  }
                  v203 = 0;
                  v204 = 0;
                  v205 = 1;
                  v207 = v281;
                  v206 = v282;
                  v208 = v164;
                  v209 = v165;
                  do
                  {
                    --v206;
                    if (v207)
                      v204 |= (unint64_t)(v205 & v171) << v203++;
                    else
                      v206 = 0;
                    --v209;
                    if (!v208)
                      v209 = 0;
                    v205 *= 2;
                    v203 = (__PAIR64__(v203, v208) - 1) >> 32;
                    v208 = v209 != 0;
                    v207 = v206 != 0;
                  }
                  while (v209 | v206);
                  v210 = 0;
                  v211 = 0;
                  v212 = 1;
                  v214 = v281;
                  v213 = v282;
                  v215 = v164;
                  v216 = v165;
                  do
                  {
                    --v213;
                    v217 = v214;
                    if (!v217)
                      v213 = 0;
                    v218 = v210 + v217;
                    --v216;
                    if (v215)
                      v211 |= (unint64_t)(v212 & v172) << v218++;
                    else
                      v216 = 0;
                    v212 *= 2;
                    v210 = v218 - 1;
                    v215 = v216 != 0;
                    v214 = v213 != 0;
                  }
                  while (v216 | v213);
                  v219 = 0;
                  v220 = 0;
                  v221 = 1;
                  v222 = v281;
                  v223 = v282;
                  v224 = v164;
                  v225 = v165;
                  do
                  {
                    --v223;
                    if (v222)
                      v220 |= (unint64_t)(v221 & v181) << v219++;
                    else
                      v223 = 0;
                    --v225;
                    if (!v224)
                      v225 = 0;
                    v221 *= 2;
                    v219 = (__PAIR64__(v219, v224) - 1) >> 32;
                    v224 = v225 != 0;
                    v222 = v223 != 0;
                  }
                  while (v225 | v223);
                  v226 = 0;
                  v227 = 0;
                  v228 = 1;
                  v229 = v281;
                  v230 = v282;
                  LOBYTE(result) = v164;
                  v231 = v165;
                  do
                  {
                    --v230;
                    v232 = v229;
                    if (!v232)
                      v230 = 0;
                    v233 = v226 + v232;
                    --v231;
                    if ((result & 1) != 0)
                      v227 |= (unint64_t)(v228 & v202) << v233++;
                    else
                      v231 = 0;
                    v228 *= 2;
                    v226 = v233 - 1;
                    result = v231 != 0;
                    v229 = v230 != 0;
                  }
                  while (v231 | v230);
                  v165 = v271;
                  v168 = v257;
                  if (v180)
                    goto LABEL_280;
                }
LABEL_208:
                v173 = (unsigned __int16)++v174;
              }
              while (v168 > (unsigned __int16)v174);
              v170 = v251 + 1;
              v169 = (unsigned __int16)(v251 + 1);
            }
            while (v248 > v169);
          }
        }
      }
      else
      {
        v58 = *((unsigned __int8 *)a12 + 13);
        v59 = *((unsigned __int8 *)a12 + 12);
        v60 = 1 << v58;
        v61 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
        if (a6 < 2)
          v61 = 0;
        v62 = v59 + v58;
        result = v59 + v58 + v61;
        if (a6 >> v58)
          v63 = 1;
        else
          v63 = 1 << v59 >= a5;
        if (v63)
          v64 = *((_BYTE *)a12 + 12);
        else
          v64 = v59 + v58 + v61;
        if (v63)
          LOBYTE(v65) = *((_BYTE *)a12 + 13);
        else
          v65 = -v61;
        v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
        if (a5 < 2)
          LOBYTE(v66) = 0;
        if (v60 < a6 && a5 >> v59 == 0)
          LOBYTE(v65) = v62 - v66;
        else
          LOBYTE(v66) = v64;
        v68 = 1 << v65;
        v69 = *((_BYTE *)a12 + 15);
        v70 = 1 << v69;
        if (v69)
          v71 = v70 > a3;
        else
          v71 = 1;
        v72 = v71 || v70 > a4;
        v73 = (~(-1 << v69) + a3) & (-1 << v69);
        if (v72)
          v74 = a3;
        else
          v74 = v73;
        v272 = 1 << v65;
        v75 = v68 - 1;
        v266 = v65;
        v268 = a10 + a8;
        v270 = a8 >> v65;
        v265 = (v68 - 1 + a10 + a8) >> v65;
        v76 = a2;
        if (a8 >> v65 < v265)
        {
          result = a7 >> v66;
          v77 = (1 << v66) - 1;
          v289 = a9 + a7;
          if (v68 >= a6)
            v68 = a6;
          v78 = 32 - __clz(v68 - 1);
          v79 = v68 > 1;
          if (v79)
            v80 = v78;
          else
            v80 = 0;
          v285 = (v77 + a9 + a7) >> v66;
          v287 = 1 << v66;
          if (1 << v66 >= a5)
            v81 = a5;
          else
            v81 = 1 << v66;
          v82 = 32 - __clz(v81 - 1);
          v83 = v81 > 1;
          if (v81 <= 1)
            v84 = 0;
          else
            v84 = v82;
          v280 = a7 >> v66;
          if (result < (v77 + a9 + a7) >> v66)
          {
            v263 = (v74 + ~(-1 << v66)) >> v66;
            v85 = v77 & a7;
            v283 = v77 & v289;
            v259 = v75 & v268;
            v261 = v75 & a8;
            v86 = v270;
            do
            {
              v87 = v86 << v266;
              v274 = v86 + 1;
              v88 = v272;
              if (v268 < (v86 + 1) << v266)
                v88 = v259;
              v89 = v272 - v261;
              if (v268 < (v86 + 1) << v266)
                v89 = v18;
              v278 = v86 * v263;
              if (v87 >= a8)
                v90 = 0;
              else
                v90 = v261;
              if (v87 >= a8)
                v91 = v88;
              else
                v91 = v89;
              v276 = (uint64_t)v76 + (v90 + ((v86 - v270) << v266) - v261) * a11;
              v92 = v280;
              if (v80 | v84)
              {
                do
                {
                  v94 = 0;
                  v95 = 0;
                  v96 = v92 << v66;
                  v97 = v92 - v280;
                  v98 = v92 + v278;
                  v99 = ++v92 << v66;
                  if (v96 >= v13)
                    v100 = 0;
                  else
                    v100 = v85;
                  v101 = v100 + (v97 << v66) - v85;
                  v102 = v98 * v16[3] * *((unsigned __int8 *)v16 + 9);
                  v103 = 1;
                  v104 = v83;
                  v105 = v79;
                  v106 = v84;
                  v107 = v80;
                  do
                  {
                    --v106;
                    if (v104)
                      v95 |= (unint64_t)(v103 & ~(-1 << v84)) << v94++;
                    else
                      v106 = 0;
                    if (v105)
                      --v107;
                    else
                      v107 = 0;
                    v103 *= 2;
                    v94 = (__PAIR64__(v94, v105) - 1) >> 32;
                    v105 = v107 != 0;
                    v104 = v106 != 0;
                  }
                  while (v107 | v106);
                  v108 = 0;
                  v109 = 0;
                  v110 = 16 * v101;
                  v111 = v283;
                  if (v289 >= v99)
                    v111 = 1 << v66;
                  v112 = 1;
                  v113 = v83;
                  v114 = v79;
                  v115 = v84;
                  v116 = v80;
                  do
                  {
                    --v115;
                    v117 = v113;
                    if (!v117)
                      v115 = 0;
                    v118 = v108 + v117;
                    if (v114)
                      --v116;
                    else
                      v116 = 0;
                    if (v114)
                    {
                      v109 |= (unint64_t)(v112 & ~(-1 << v80)) << v118;
                      v119 = v118 + 1;
                    }
                    else
                    {
                      v119 = v118;
                    }
                    v112 *= 2;
                    v108 = v119 - 1;
                    v114 = v116 != 0;
                    v113 = v115 != 0;
                  }
                  while (v116 | v115);
                  v120 = 0;
                  v121 = 0;
                  if (v289 >= v99)
                    v122 = v287 - v85;
                  else
                    v122 = a9;
                  v123 = (_OWORD *)(v276 + v110);
                  v124 = 1;
                  v125 = v83;
                  v126 = v79;
                  v127 = v84;
                  v128 = v80;
                  do
                  {
                    --v127;
                    if (v125)
                    {
                      v121 |= (unint64_t)(v124 & v100) << v120;
                      v129 = v120 + 1;
                    }
                    else
                    {
                      v127 = 0;
                      v129 = v120;
                    }
                    --v128;
                    if (!v126)
                      v128 = 0;
                    v124 *= 2;
                    v120 = (__PAIR64__(v129, v126) - 1) >> 32;
                    v126 = v128 != 0;
                    v125 = v127 != 0;
                  }
                  while (v128 | v127);
                  v130 = 0;
                  v131 = 0;
                  v132 = 1;
                  v133 = v83;
                  v134 = v79;
                  LODWORD(result) = v84;
                  v135 = v80;
                  do
                  {
                    v136 = v133;
                    if (v136)
                      result = (result - 1);
                    else
                      result = 0;
                    v137 = v130 + v136;
                    v138 = ((unint64_t)(v132 & v90) << (v130 + v136)) | v131;
                    --v135;
                    if (v134)
                    {
                      v131 = v138;
                      ++v137;
                    }
                    else
                    {
                      v135 = 0;
                    }
                    v132 *= 2;
                    v130 = v137 - 1;
                    v134 = v135 != 0;
                    v133 = (_DWORD)result != 0;
                  }
                  while (v135 | result);
                  v13 = a7;
                  if (v96 < a7)
                    v111 = v122;
                  v16 = a12;
                  if (v91 && v111)
                  {
                    v139 = 0;
                    v140 = v102 + v269;
                    do
                    {
                      LODWORD(result) = v111;
                      v141 = v123;
                      v142 = v121;
                      do
                      {
                        *v141++ = *(_OWORD *)(v140 + 16 * (v142 + v131));
                        v142 = (v142 - v95) & v95;
                        result = (result - 1);
                      }
                      while ((_DWORD)result);
                      v131 = (v131 - v109) & v109;
                      v123 = (_OWORD *)((char *)v123 + a11);
                      ++v139;
                    }
                    while (v139 != v91);
                  }
                }
                while (v92 != v285);
              }
              else
              {
                v93 = v280;
                do
                {
                  v143 = v93 << v66;
                  v144 = v93 + 1;
                  v145 = a9;
                  if (v289 >= (v93 + 1) << v66)
                    v145 = v287 - v85;
                  v146 = 1 << v66;
                  if (v289 < v144 << v66)
                    v146 = v283;
                  if (v143 >= v13)
                    v145 = v146;
                  if (v91 && v145)
                  {
                    v147 = 0;
                    v148 = (_OWORD *)((v93 + v278) * v16[3] * *((unsigned __int8 *)v16 + 9) + v269);
                    if (v143 >= v13)
                      v149 = 0;
                    else
                      v149 = v85;
                    v150 = v276 + 16 * (v149 + ((v93 - v280) << v66) - v85);
                    do
                    {
                      v151 = v145;
                      result = v150;
                      do
                      {
                        *(_OWORD *)result = *v148;
                        result += 16;
                        --v151;
                      }
                      while (v151);
                      v150 += a11;
                      ++v147;
                    }
                    while (v147 != v91);
                  }
                  v93 = v144;
                }
                while (v144 != v285);
              }
              v86 = v274;
              v76 = a2;
              v18 = a10;
            }
            while (v274 != v265);
          }
        }
      }
    }
    else
    {
      v23 = 32 - __clz(a6 - 1);
      v24 = a6 > 1;
      if (a6 <= 1)
        v25 = 0;
      else
        v25 = v23;
      v26 = 32 - __clz(a5 - 1);
      v27 = a5 > 1;
      if (a5 <= 1)
        v28 = 0;
      else
        v28 = v26;
      if (v25 | v28)
      {
        v29 = 0;
        v30 = 0;
        v31 = a5 > 1;
        v32 = a6 > 1;
        v33 = 1;
        v34 = v28;
        v35 = v25;
        do
        {
          --v34;
          if (v31)
            v30 |= (unint64_t)(v33 & ~(-1 << v28)) << v29++;
          else
            v34 = 0;
          --v35;
          if (!v32)
            v35 = 0;
          v33 *= 2;
          v29 = (__PAIR64__(v29, v32) - 1) >> 32;
          v32 = v35 != 0;
          v31 = v34 != 0;
        }
        while (v35 | v34);
        v36 = 0;
        v37 = 0;
        v38 = 1;
        v39 = a5 > 1;
        v40 = a6 > 1;
        v41 = v28;
        v42 = v25;
        do
        {
          --v41;
          v43 = v39;
          if (!v43)
            v41 = 0;
          v44 = v36 + v43;
          --v42;
          if (v40)
            v37 |= (unint64_t)(v38 & ~(-1 << v25)) << v44++;
          else
            v42 = 0;
          v38 *= 2;
          v36 = v44 - 1;
          v40 = v42 != 0;
          v39 = v41 != 0;
        }
        while (v42 | v41);
        v45 = 0;
        v46 = 0;
        v47 = a5 > 1;
        v48 = a6 > 1;
        v49 = 1;
        v50 = v28;
        v51 = v25;
        do
        {
          --v50;
          if (v47)
            v46 |= (unint64_t)(v49 & a7) << v45++;
          else
            v50 = 0;
          --v51;
          if (!v48)
            v51 = 0;
          v49 *= 2;
          v45 = (__PAIR64__(v45, v48) - 1) >> 32;
          v48 = v51 != 0;
          v47 = v50 != 0;
        }
        while (v51 | v50);
        v52 = 0;
        v53 = 0;
        v54 = 1;
        do
        {
          --v28;
          v55 = v27;
          if (!v55)
            v28 = 0;
          v56 = v52 + v55;
          --v25;
          if (v24)
          {
            v53 |= (unint64_t)(v54 & a8) << v56;
            v57 = v56 + 1;
          }
          else
          {
            v25 = 0;
            v57 = v56;
          }
          v54 *= 2;
          v52 = v57 - 1;
          v24 = v25 != 0;
          v27 = v28 != 0;
        }
        while (v25 | v28);
        result = v269;
        v18 = a10;
      }
      else
      {
        v46 = 0;
        v30 = 0;
        v37 = 0;
        v53 = 0;
      }
      v239 = a2;
      if (a9 && v18)
      {
        for (i = 0; i != v18; ++i)
        {
          v241 = a9;
          v242 = v239;
          v243 = v46;
          do
          {
            *v242++ = *(_OWORD *)(result + 16 * (v243 + v53));
            v243 = (v243 - v30) & v30;
            --v241;
          }
          while (v241);
          v53 = (v53 - v37) & v37;
          v239 = (_OWORD *)((char *)v239 + a11);
        }
      }
    }
  }
  return result;
}

void *agxsTwiddleAddressPVRTC2<false,(TwiddleOrder)0>(void *__src, void *__dst, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  if (__src)
  {
    if (__dst)
      return memcpy(__dst, __src, ((a10 + 3) >> 2) * (unint64_t)((a9 + 7) & 0xFFFFFFF8));
  }
  return __src;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,2u,(TwiddleOrder)0>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _OWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  BOOL v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  _OWORD *v135;
  uint64_t v136;
  int v137;
  _OWORD *v138;
  uint64_t v139;
  _OWORD *v140;
  __int128 v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  char v146;
  int v147;
  uint64_t v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  BOOL v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  BOOL v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  BOOL v176;
  BOOL v177;
  int v178;
  int v179;
  int v180;
  int v181;
  BOOL v182;
  BOOL v183;
  int v184;
  int v185;
  int v186;
  unint64_t v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  int v192;
  int v193;
  uint64_t v194;
  int v195;
  unsigned int v196;
  BOOL v197;
  BOOL v198;
  unsigned int v199;
  int v200;
  int v201;
  unsigned int v202;
  uint64_t v203;
  int v204;
  unsigned int v205;
  BOOL v206;
  BOOL v207;
  unsigned int v208;
  int v209;
  uint64_t v210;
  int v211;
  BOOL v212;
  unsigned int v213;
  BOOL v214;
  unsigned int v215;
  int v216;
  int v217;
  unsigned int v218;
  uint64_t v219;
  int v220;
  BOOL v221;
  unsigned int v222;
  BOOL v223;
  int v224;
  _OWORD *v225;
  int v226;
  _OWORD *v227;
  uint64_t v228;
  __int128 v229;
  int i;
  int v231;
  _OWORD *v232;
  uint64_t v233;
  _OWORD *v234;
  __int128 v235;
  int v236;
  int v237;
  int v238;
  unsigned int v239;
  unsigned int v240;
  int v241;
  unsigned int v242;
  char v243;
  int v244;
  int v245;
  char v246;
  _OWORD *v248;
  _OWORD *v249;
  unsigned int v252;
  int v253;
  unsigned int v254;
  int v255;
  int v256;
  uint64_t v257;
  int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  char v262;
  uint64_t v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  BOOL v267;
  unsigned int v268;
  BOOL v269;
  unsigned int v270;
  int v271;
  uint64_t v272;
  int v273;
  int v274;
  BOOL v275;
  unsigned int v276;
  unsigned int v277;
  int v278;
  int v279;
  unsigned int v280;
  int v281;
  unsigned int v282;
  int v283;
  int v284;
  char v285[16];
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned __int8 v293;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v231 = a9;
        v232 = v13;
        v233 = v47;
        do
        {
          v234 = (_OWORD *)(result + 32 * (v233 + v56));
          v235 = v234[1];
          *v232 = *v234;
          v232[1] = v235;
          v232 += 2;
          v233 = (v233 - v31) & v31;
          --v231;
        }
        while (v231);
        v56 = (v56 - v40) & v40;
        v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v263 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v266 = a8 >> v66;
    v268 = 1 << v66;
    v76 = v69 - 1;
    v264 = a10 + a8;
    v260 = (v69 - 1 + a10 + a8) >> v66;
    v262 = v66;
    if (a8 >> v66 >= v260)
      return result;
    v77 = (1 << v67) - 1;
    v282 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v268;
    if (v268 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v276 = a7 >> v67;
    v280 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v280)
      return result;
    v259 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v278 = v77 & v282;
    v255 = v76 & v264;
    v257 = v76 & a8;
    v86 = v266;
LABEL_92:
    v87 = v86 << v262;
    v88 = v86 - v266;
    v274 = v86 * v259;
    v270 = v86 + 1;
    v89 = v264 >= (v86 + 1) << v262;
    v90 = v268;
    if (!v89)
      v90 = v255;
    v91 = v268 - v257;
    if (!v89)
      v91 = v19;
    v92 = v88 << v262;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v257;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v272 = (v93 + v92 - v257) * a11;
    v95 = v276;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      if (v282 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      else
        v98 = a9;
      v99 = v278;
      if (v282 >= v97 << v67)
        v99 = 1 << v67;
      if (v96 >= v15)
        v100 = 0;
      else
        v100 = v85;
      if (v96 < v15)
        v99 = v98;
      if (v84 | v80)
        break;
      v118 = 0;
      v102 = 0;
      v111 = 0;
      v127 = 0;
      if (v99)
        goto LABEL_153;
LABEL_103:
      v95 = v97;
      if (v97 == v280)
      {
        v86 = v270;
        v14 = a8;
        v19 = a10;
        if (v270 == v260)
          return result;
        goto LABEL_92;
      }
    }
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v104 = v83;
    v105 = result;
    v106 = v84;
    v107 = v80;
    do
    {
      v108 = v104;
      if (v108)
        --v106;
      else
        v106 = 0;
      v109 = v101 + v108;
      if (v105)
        --v107;
      else
        v107 = 0;
      if (v105)
        v102 |= (unint64_t)(v103 & ~(-1 << v80)) << v109++;
      v103 *= 2;
      v101 = v109 - 1;
      v105 = v107 != 0;
      v104 = v106 != 0;
    }
    while (v107 | v106);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v83;
    v114 = result;
    v115 = v84;
    v116 = v80;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
        v111 |= (unint64_t)(v112 & ~(-1 << v84)) << v110++;
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v110, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v117 = 0;
    v118 = 0;
    v119 = 1;
    v120 = v83;
    v121 = result;
    v122 = v84;
    v123 = v80;
    do
    {
      v124 = v120;
      if (v124)
        --v122;
      else
        v122 = 0;
      v125 = v117 + v124;
      --v123;
      if (v121)
        v118 |= (unint64_t)(v119 & v100) << v125++;
      else
        v123 = 0;
      v119 *= 2;
      v117 = v125 - 1;
      v121 = v123 != 0;
      v120 = v122 != 0;
    }
    while (v123 | v122);
    v126 = 0;
    v127 = 0;
    v128 = 1;
    v129 = v83;
    v130 = result;
    v131 = v84;
    v132 = v80;
    do
    {
      --v131;
      if (v129)
      {
        v127 |= (unint64_t)(v128 & v93) << v126;
        v133 = v126 + 1;
      }
      else
      {
        v131 = 0;
        v133 = v126;
      }
      if (v130)
        --v132;
      else
        v132 = 0;
      v128 *= 2;
      v126 = (__PAIR64__(v133, v130) - 1) >> 32;
      v130 = v132 != 0;
      v129 = v131 != 0;
    }
    while (v132 | v131);
    v15 = a7;
    if (!v99)
      goto LABEL_103;
LABEL_153:
    if (v94)
    {
      v134 = 0;
      v135 = (_OWORD *)((char *)&a2[2 * (v100 + ((v95 - v276) << v67) - v85)] + v272);
      v136 = (v95 + v274) * a12[3] * *((unsigned __int8 *)a12 + 9) + v263;
      do
      {
        v137 = v99;
        v138 = v135;
        v139 = v118;
        do
        {
          v140 = (_OWORD *)(v136 + 32 * (v139 + v127));
          v141 = v140[1];
          *v138 = *v140;
          v138[1] = v141;
          v138 += 2;
          v139 = (v139 - v102) & v102;
          --v137;
        }
        while (v137);
        v127 = (v127 - v111) & v111;
        v135 = (_OWORD *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v285);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v249 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v142 = a6 >> v20;
    v143 = 1 << v21;
    v144 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v144 = 0;
    v145 = v143 >= a5;
    if (v143 < a5)
      v146 = v21 + v20 + v144;
    else
      v146 = *((_BYTE *)a12 + 12);
    if (v145)
      LOBYTE(v147) = *((_BYTE *)a12 + 13);
    else
      v147 = -v144;
    if (!v142)
      v21 = v146;
    v243 = v21;
    if (v142)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v147;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v243 = v22;
    v23 = v21 + v20 - v22;
  }
  v148 = v263;
  v150 = a8;
  v149 = a10;
  v242 = v291;
  if (v291)
  {
    v151 = 1 << v23;
    v241 = 1 << v243;
    if (1 << v243 >= a5)
      v152 = a5;
    else
      v152 = 1 << v243;
    v153 = 32 - __clz(v152 - 1);
    v154 = v152 > 1;
    if (v152 <= 1)
      v155 = 0;
    else
      v155 = v153;
    if (v151 >= a6)
      v156 = a6;
    else
      v156 = 1 << v23;
    v157 = 32 - __clz(v156 - 1);
    v158 = v292;
    if (v156 <= 1)
      v157 = 0;
    v275 = v156 > 1;
    v277 = v157;
    v273 = v289;
    v269 = v289 != 0;
    v271 = v290;
    v267 = v290 != 0;
    if (v292)
    {
      v159 = 0;
      v160 = 0;
      v240 = v15 >> v243;
      v261 = a8 >> v23;
      v283 = v293;
      v284 = v288;
      v279 = v290 | v289;
      v239 = a9 + v15;
      v238 = (v241 - 1) & (a9 + v15);
      v237 = v286;
      v281 = v287;
      v236 = (v241 - 1) & v15;
      v256 = (v151 - 1) & a8;
      v258 = (v151 - 1) & (a10 + a8);
      v254 = v151 - v256;
      v161 = ~(-1 << v155);
      v252 = v292;
      v253 = v157 | v155;
      v162 = ~(-1 << v157);
      v265 = v155;
      v245 = 1 << v23;
      v246 = v23;
      do
      {
        v244 = v160;
        v163 = 0;
        v164 = 0;
        v165 = a9;
        if (v239 >= (v159 + v240 + 1) << v243)
          v165 = v241 - v236;
        v166 = 1 << v243;
        if (v239 < (v159 + v240 + 1) << v243)
          v166 = v238;
        v167 = (v159 + v240) << v243 >= v15;
        v168 = v237 + v159;
        v169 = v159 << v243;
        if (v167)
          v170 = v166;
        else
          v170 = v165;
        if (v167)
          v171 = 0;
        else
          v171 = v236;
        v248 = &v249[2 * (v171 + v169)];
        do
        {
          v172 = v281 + v163;
          if (v283)
          {
            v173 = v279;
            if (v279)
            {
              v174 = 0;
              v173 = 0;
              v175 = 1;
              v176 = v267;
              v177 = v269;
              v179 = v271;
              v178 = v273;
              do
              {
                --v178;
                if (v177)
                  v173 |= (v175 & v168) << v174;
                else
                  v178 = 0;
                if (v177)
                  ++v174;
                --v179;
                if (v176)
                  v173 |= (v175 & v172) << v174;
                else
                  v179 = 0;
                if (v176)
                  ++v174;
                v175 *= 2;
                --v174;
                v176 = v179 != 0;
                v177 = v178 != 0;
              }
              while (v179 | v178);
            }
          }
          else
          {
            v173 = v279;
            if (v279)
            {
              v180 = 0;
              v173 = 0;
              v181 = 1;
              v183 = v267;
              v182 = v269;
              v184 = v271;
              v185 = v273;
              do
              {
                --v184;
                if (v183)
                  v173 |= (v181 & v172) << v180;
                else
                  v184 = 0;
                if (v183)
                  ++v180;
                --v185;
                if (v182)
                  v173 |= (v181 & v168) << v180;
                else
                  v185 = 0;
                if (v182)
                  ++v180;
                v181 *= 2;
                --v180;
                v182 = v185 != 0;
                v183 = v184 != 0;
              }
              while (v185 | v184);
            }
          }
          v186 = *(_DWORD *)(v148 + 4 * ((v173 + v284) | ((v173 + v284) >> 8 << 9)));
          if (v186 < 0)
          {
            v187 = v148 - *((_QWORD *)a13 + 3) + ((unint64_t)(v186 & 0x3FFFFFF) << 14);
            result = *a13;
            v188 = a13[2];
            if (result > v188)
            {
              result = get_level_offset_within_tail(result, v188, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v155 = v265;
              v151 = v245;
              v23 = v246;
              v18 = a11;
              v150 = a8;
              v149 = a10;
              v148 = v263;
              v187 += result;
            }
            v189 = (v163 + v261) << v23;
            v190 = v254;
            if (a10 + a8 >= (v163 + v261 + 1) << v23)
            {
              v191 = v151;
            }
            else
            {
              v190 = v149;
              v191 = v258;
            }
            if (v189 >= v150)
              v192 = 0;
            else
              v192 = v256;
            if (v189 >= v150)
              v190 = v191;
            if (!v253)
            {
              v210 = 0;
              v194 = 0;
              v203 = 0;
              v219 = 0;
              v158 = v252;
              if (!v170)
                goto LABEL_198;
LABEL_271:
              if (v190)
              {
                v224 = 0;
                v225 = (_OWORD *)((char *)v248 + (v192 + (v163 << v23)) * v18);
                do
                {
                  v226 = v170;
                  v227 = v225;
                  v228 = v210;
                  do
                  {
                    result = v187 + 32 * (v228 + v219);
                    v229 = *(_OWORD *)(result + 16);
                    *v227 = *(_OWORD *)result;
                    v227[1] = v229;
                    v227 += 2;
                    v228 = (v228 - v194) & v194;
                    --v226;
                  }
                  while (v226);
                  v219 = (v219 - v203) & v203;
                  v225 = (_OWORD *)((char *)v225 + v18);
                  ++v224;
                }
                while (v224 != v190);
              }
              goto LABEL_198;
            }
            v193 = 0;
            v194 = 0;
            v195 = 1;
            v197 = v275;
            v196 = v277;
            v198 = v154;
            v199 = v155;
            do
            {
              --v196;
              v200 = v197;
              if (!v200)
                v196 = 0;
              v201 = v193 + v200;
              --v199;
              if (v198)
                v194 |= (unint64_t)(v195 & v161) << v201++;
              else
                v199 = 0;
              v195 *= 2;
              v193 = v201 - 1;
              v198 = v199 != 0;
              v197 = v196 != 0;
            }
            while (v199 | v196);
            v202 = 0;
            v203 = 0;
            v204 = 1;
            v206 = v275;
            v205 = v277;
            v207 = v154;
            v208 = v155;
            do
            {
              --v205;
              if (v206)
                v203 |= (unint64_t)(v204 & v162) << v202++;
              else
                v205 = 0;
              --v208;
              if (!v207)
                v208 = 0;
              v204 *= 2;
              v202 = (__PAIR64__(v202, v207) - 1) >> 32;
              v207 = v208 != 0;
              v206 = v205 != 0;
            }
            while (v208 | v205);
            v209 = 0;
            v210 = 0;
            v211 = 1;
            v212 = v275;
            v213 = v277;
            v214 = v154;
            v215 = v155;
            do
            {
              --v213;
              v216 = v212;
              if (!v216)
                v213 = 0;
              v217 = v209 + v216;
              --v215;
              if (v214)
                v210 |= (unint64_t)(v211 & v171) << v217++;
              else
                v215 = 0;
              v211 *= 2;
              v209 = v217 - 1;
              v214 = v215 != 0;
              v212 = v213 != 0;
            }
            while (v215 | v213);
            v218 = 0;
            v219 = 0;
            v220 = 1;
            v221 = v275;
            v222 = v277;
            v223 = v154;
            LODWORD(result) = v155;
            do
            {
              --v222;
              if (v221)
                v219 |= (unint64_t)(v220 & v192) << v218++;
              else
                v222 = 0;
              LODWORD(result) = result - 1;
              if (v223)
                result = result;
              else
                result = 0;
              v220 *= 2;
              v218 = (__PAIR64__(v218, v223) - 1) >> 32;
              v223 = (_DWORD)result != 0;
              v221 = v222 != 0;
            }
            while (result | v222);
            v155 = v265;
            v158 = v252;
            if (v170)
              goto LABEL_271;
          }
LABEL_198:
          v163 = (unsigned __int16)++v164;
        }
        while (v158 > (unsigned __int16)v164);
        v160 = v244 + 1;
        v159 = (unsigned __int16)(v244 + 1);
        v15 = a7;
      }
      while (v242 > v159);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,4u,(TwiddleOrder)0>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _OWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  BOOL v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  _OWORD *v135;
  uint64_t v136;
  int v137;
  _OWORD *v138;
  uint64_t v139;
  __int128 *v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  BOOL v147;
  char v148;
  int v149;
  uint64_t v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  BOOL v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  BOOL v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  BOOL v178;
  BOOL v179;
  int v180;
  int v181;
  int v182;
  int v183;
  BOOL v184;
  BOOL v185;
  int v186;
  int v187;
  int v188;
  unint64_t v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  int v194;
  int v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  BOOL v199;
  BOOL v200;
  unsigned int v201;
  int v202;
  int v203;
  unsigned int v204;
  uint64_t v205;
  int v206;
  unsigned int v207;
  BOOL v208;
  BOOL v209;
  unsigned int v210;
  int v211;
  uint64_t v212;
  int v213;
  BOOL v214;
  unsigned int v215;
  BOOL v216;
  unsigned int v217;
  int v218;
  int v219;
  unsigned int v220;
  uint64_t v221;
  int v222;
  BOOL v223;
  unsigned int v224;
  BOOL v225;
  int v226;
  _OWORD *v227;
  int v228;
  _OWORD *v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  int i;
  int v235;
  _OWORD *v236;
  uint64_t v237;
  __int128 *v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  int v242;
  int v243;
  int v244;
  unsigned int v245;
  unsigned int v246;
  int v247;
  unsigned int v248;
  char v249;
  int v250;
  int v251;
  char v252;
  _OWORD *v254;
  _OWORD *v255;
  unsigned int v258;
  int v259;
  unsigned int v260;
  int v261;
  int v262;
  uint64_t v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  char v268;
  uint64_t v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  BOOL v273;
  unsigned int v274;
  BOOL v275;
  unsigned int v276;
  int v277;
  uint64_t v278;
  int v279;
  int v280;
  BOOL v281;
  unsigned int v282;
  unsigned int v283;
  int v284;
  int v285;
  unsigned int v286;
  int v287;
  unsigned int v288;
  int v289;
  int v290;
  char v291[16];
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned __int8 v299;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v235 = a9;
        v236 = v13;
        v237 = v47;
        do
        {
          v238 = (__int128 *)(result + ((v237 + v56) << 6));
          v239 = *v238;
          v240 = v238[1];
          v241 = v238[3];
          v236[2] = v238[2];
          v236[3] = v241;
          *v236 = v239;
          v236[1] = v240;
          v236 += 4;
          v237 = (v237 - v31) & v31;
          --v235;
        }
        while (v235);
        v56 = (v56 - v40) & v40;
        v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v269 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v272 = a8 >> v66;
    v274 = 1 << v66;
    v76 = v69 - 1;
    v270 = a10 + a8;
    v266 = (v69 - 1 + a10 + a8) >> v66;
    v268 = v66;
    if (a8 >> v66 >= v266)
      return result;
    v77 = (1 << v67) - 1;
    v288 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v274;
    if (v274 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v282 = a7 >> v67;
    v286 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v286)
      return result;
    v265 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v284 = v77 & v288;
    v261 = v76 & v270;
    v263 = v76 & a8;
    v86 = v272;
LABEL_92:
    v87 = v86 << v268;
    v88 = v86 - v272;
    v280 = v86 * v265;
    v276 = v86 + 1;
    v89 = v270 >= (v86 + 1) << v268;
    v90 = v274;
    if (!v89)
      v90 = v261;
    v91 = v274 - v263;
    if (!v89)
      v91 = v19;
    v92 = v88 << v268;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v263;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v278 = (v93 + v92 - v263) * a11;
    v95 = v282;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      if (v288 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      else
        v98 = a9;
      v99 = v284;
      if (v288 >= v97 << v67)
        v99 = 1 << v67;
      if (v96 >= v15)
        v100 = 0;
      else
        v100 = v85;
      if (v96 < v15)
        v99 = v98;
      if (v84 | v80)
        break;
      v118 = 0;
      v102 = 0;
      v111 = 0;
      v127 = 0;
      if (v99)
        goto LABEL_153;
LABEL_103:
      v95 = v97;
      if (v97 == v286)
      {
        v86 = v276;
        v14 = a8;
        v19 = a10;
        if (v276 == v266)
          return result;
        goto LABEL_92;
      }
    }
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v104 = v83;
    v105 = result;
    v106 = v84;
    v107 = v80;
    do
    {
      v108 = v104;
      if (v108)
        --v106;
      else
        v106 = 0;
      v109 = v101 + v108;
      if (v105)
        --v107;
      else
        v107 = 0;
      if (v105)
        v102 |= (unint64_t)(v103 & ~(-1 << v80)) << v109++;
      v103 *= 2;
      v101 = v109 - 1;
      v105 = v107 != 0;
      v104 = v106 != 0;
    }
    while (v107 | v106);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v83;
    v114 = result;
    v115 = v84;
    v116 = v80;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
        v111 |= (unint64_t)(v112 & ~(-1 << v84)) << v110++;
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v110, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v117 = 0;
    v118 = 0;
    v119 = 1;
    v120 = v83;
    v121 = result;
    v122 = v84;
    v123 = v80;
    do
    {
      v124 = v120;
      if (v124)
        --v122;
      else
        v122 = 0;
      v125 = v117 + v124;
      --v123;
      if (v121)
        v118 |= (unint64_t)(v119 & v100) << v125++;
      else
        v123 = 0;
      v119 *= 2;
      v117 = v125 - 1;
      v121 = v123 != 0;
      v120 = v122 != 0;
    }
    while (v123 | v122);
    v126 = 0;
    v127 = 0;
    v128 = 1;
    v129 = v83;
    v130 = result;
    v131 = v84;
    v132 = v80;
    do
    {
      --v131;
      if (v129)
      {
        v127 |= (unint64_t)(v128 & v93) << v126;
        v133 = v126 + 1;
      }
      else
      {
        v131 = 0;
        v133 = v126;
      }
      if (v130)
        --v132;
      else
        v132 = 0;
      v128 *= 2;
      v126 = (__PAIR64__(v133, v130) - 1) >> 32;
      v130 = v132 != 0;
      v129 = v131 != 0;
    }
    while (v132 | v131);
    v15 = a7;
    if (!v99)
      goto LABEL_103;
LABEL_153:
    if (v94)
    {
      v134 = 0;
      v135 = (_OWORD *)((char *)&a2[4 * (v100 + ((v95 - v282) << v67) - v85)] + v278);
      v136 = (v95 + v280) * a12[3] * *((unsigned __int8 *)a12 + 9) + v269;
      do
      {
        v137 = v99;
        v138 = v135;
        v139 = v118;
        do
        {
          v140 = (__int128 *)(v136 + ((v139 + v127) << 6));
          v141 = *v140;
          v142 = v140[1];
          v143 = v140[3];
          v138[2] = v140[2];
          v138[3] = v143;
          *v138 = v141;
          v138[1] = v142;
          v138 += 4;
          v139 = (v139 - v102) & v102;
          --v137;
        }
        while (v137);
        v127 = (v127 - v111) & v111;
        v135 = (_OWORD *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v291);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v255 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v144 = a6 >> v20;
    v145 = 1 << v21;
    v146 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v146 = 0;
    v147 = v145 >= a5;
    if (v145 < a5)
      v148 = v21 + v20 + v146;
    else
      v148 = *((_BYTE *)a12 + 12);
    if (v147)
      LOBYTE(v149) = *((_BYTE *)a12 + 13);
    else
      v149 = -v146;
    if (!v144)
      v21 = v148;
    v249 = v21;
    if (v144)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v149;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v249 = v22;
    v23 = v21 + v20 - v22;
  }
  v150 = v269;
  v152 = a8;
  v151 = a10;
  v248 = v297;
  if (v297)
  {
    v153 = 1 << v23;
    v247 = 1 << v249;
    if (1 << v249 >= a5)
      v154 = a5;
    else
      v154 = 1 << v249;
    v155 = 32 - __clz(v154 - 1);
    v156 = v154 > 1;
    if (v154 <= 1)
      v157 = 0;
    else
      v157 = v155;
    if (v153 >= a6)
      v158 = a6;
    else
      v158 = 1 << v23;
    v159 = 32 - __clz(v158 - 1);
    v160 = v298;
    if (v158 <= 1)
      v159 = 0;
    v281 = v158 > 1;
    v283 = v159;
    v279 = v295;
    v275 = v295 != 0;
    v277 = v296;
    v273 = v296 != 0;
    if (v298)
    {
      v161 = 0;
      v162 = 0;
      v246 = v15 >> v249;
      v267 = a8 >> v23;
      v289 = v299;
      v290 = v294;
      v285 = v296 | v295;
      v245 = a9 + v15;
      v244 = (v247 - 1) & (a9 + v15);
      v243 = v292;
      v287 = v293;
      v242 = (v247 - 1) & v15;
      v262 = (v153 - 1) & a8;
      v264 = (v153 - 1) & (a10 + a8);
      v260 = v153 - v262;
      v163 = ~(-1 << v157);
      v258 = v298;
      v259 = v159 | v157;
      v164 = ~(-1 << v159);
      v271 = v157;
      v251 = 1 << v23;
      v252 = v23;
      do
      {
        v250 = v162;
        v165 = 0;
        v166 = 0;
        v167 = a9;
        if (v245 >= (v161 + v246 + 1) << v249)
          v167 = v247 - v242;
        v168 = 1 << v249;
        if (v245 < (v161 + v246 + 1) << v249)
          v168 = v244;
        v169 = (v161 + v246) << v249 >= v15;
        v170 = v243 + v161;
        v171 = v161 << v249;
        if (v169)
          v172 = v168;
        else
          v172 = v167;
        if (v169)
          v173 = 0;
        else
          v173 = v242;
        v254 = &v255[4 * (unint64_t)(v173 + v171)];
        do
        {
          v174 = v287 + v165;
          if (v289)
          {
            v175 = v285;
            if (v285)
            {
              v176 = 0;
              v175 = 0;
              v177 = 1;
              v178 = v273;
              v179 = v275;
              v181 = v277;
              v180 = v279;
              do
              {
                --v180;
                if (v179)
                  v175 |= (v177 & v170) << v176;
                else
                  v180 = 0;
                if (v179)
                  ++v176;
                --v181;
                if (v178)
                  v175 |= (v177 & v174) << v176;
                else
                  v181 = 0;
                if (v178)
                  ++v176;
                v177 *= 2;
                --v176;
                v178 = v181 != 0;
                v179 = v180 != 0;
              }
              while (v181 | v180);
            }
          }
          else
          {
            v175 = v285;
            if (v285)
            {
              v182 = 0;
              v175 = 0;
              v183 = 1;
              v185 = v273;
              v184 = v275;
              v186 = v277;
              v187 = v279;
              do
              {
                --v186;
                if (v185)
                  v175 |= (v183 & v174) << v182;
                else
                  v186 = 0;
                if (v185)
                  ++v182;
                --v187;
                if (v184)
                  v175 |= (v183 & v170) << v182;
                else
                  v187 = 0;
                if (v184)
                  ++v182;
                v183 *= 2;
                --v182;
                v184 = v187 != 0;
                v185 = v186 != 0;
              }
              while (v187 | v186);
            }
          }
          v188 = *(_DWORD *)(v150 + 4 * ((v175 + v290) | ((v175 + v290) >> 8 << 9)));
          if (v188 < 0)
          {
            v189 = v150 - *((_QWORD *)a13 + 3) + ((unint64_t)(v188 & 0x3FFFFFF) << 14);
            result = *a13;
            v190 = a13[2];
            if (result > v190)
            {
              result = get_level_offset_within_tail(result, v190, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v157 = v271;
              v153 = v251;
              v23 = v252;
              v18 = a11;
              v152 = a8;
              v151 = a10;
              v150 = v269;
              v189 += result;
            }
            v191 = (v165 + v267) << v23;
            v192 = v260;
            if (a10 + a8 >= (v165 + v267 + 1) << v23)
            {
              v193 = v153;
            }
            else
            {
              v192 = v151;
              v193 = v264;
            }
            if (v191 >= v152)
              v194 = 0;
            else
              v194 = v262;
            if (v191 >= v152)
              v192 = v193;
            if (!v259)
            {
              v212 = 0;
              v196 = 0;
              v205 = 0;
              v221 = 0;
              v160 = v258;
              if (!v172)
                goto LABEL_198;
LABEL_271:
              if (v192)
              {
                v226 = 0;
                v227 = (_OWORD *)((char *)v254 + (v194 + (v165 << v23)) * v18);
                do
                {
                  v228 = v172;
                  v229 = v227;
                  v230 = v212;
                  do
                  {
                    result = v189 + ((v230 + v221) << 6);
                    v231 = *(_OWORD *)result;
                    v232 = *(_OWORD *)(result + 16);
                    v233 = *(_OWORD *)(result + 48);
                    v229[2] = *(_OWORD *)(result + 32);
                    v229[3] = v233;
                    *v229 = v231;
                    v229[1] = v232;
                    v229 += 4;
                    v230 = (v230 - v196) & v196;
                    --v228;
                  }
                  while (v228);
                  v221 = (v221 - v205) & v205;
                  v227 = (_OWORD *)((char *)v227 + v18);
                  ++v226;
                }
                while (v226 != v192);
              }
              goto LABEL_198;
            }
            v195 = 0;
            v196 = 0;
            v197 = 1;
            v199 = v281;
            v198 = v283;
            v200 = v156;
            v201 = v157;
            do
            {
              --v198;
              v202 = v199;
              if (!v202)
                v198 = 0;
              v203 = v195 + v202;
              --v201;
              if (v200)
                v196 |= (unint64_t)(v197 & v163) << v203++;
              else
                v201 = 0;
              v197 *= 2;
              v195 = v203 - 1;
              v200 = v201 != 0;
              v199 = v198 != 0;
            }
            while (v201 | v198);
            v204 = 0;
            v205 = 0;
            v206 = 1;
            v208 = v281;
            v207 = v283;
            v209 = v156;
            v210 = v157;
            do
            {
              --v207;
              if (v208)
                v205 |= (unint64_t)(v206 & v164) << v204++;
              else
                v207 = 0;
              --v210;
              if (!v209)
                v210 = 0;
              v206 *= 2;
              v204 = (__PAIR64__(v204, v209) - 1) >> 32;
              v209 = v210 != 0;
              v208 = v207 != 0;
            }
            while (v210 | v207);
            v211 = 0;
            v212 = 0;
            v213 = 1;
            v214 = v281;
            v215 = v283;
            v216 = v156;
            v217 = v157;
            do
            {
              --v215;
              v218 = v214;
              if (!v218)
                v215 = 0;
              v219 = v211 + v218;
              --v217;
              if (v216)
                v212 |= (unint64_t)(v213 & v173) << v219++;
              else
                v217 = 0;
              v213 *= 2;
              v211 = v219 - 1;
              v216 = v217 != 0;
              v214 = v215 != 0;
            }
            while (v217 | v215);
            v220 = 0;
            v221 = 0;
            v222 = 1;
            v223 = v281;
            v224 = v283;
            v225 = v156;
            LODWORD(result) = v157;
            do
            {
              --v224;
              if (v223)
                v221 |= (unint64_t)(v222 & v194) << v220++;
              else
                v224 = 0;
              LODWORD(result) = result - 1;
              if (v225)
                result = result;
              else
                result = 0;
              v222 *= 2;
              v220 = (__PAIR64__(v220, v225) - 1) >> 32;
              v225 = (_DWORD)result != 0;
              v223 = v224 != 0;
            }
            while (result | v224);
            v157 = v271;
            v160 = v258;
            if (v172)
              goto LABEL_271;
          }
LABEL_198:
          v165 = (unsigned __int16)++v166;
        }
        while (v160 > (unsigned __int16)v166);
        v162 = v250 + 1;
        v161 = (unsigned __int16)(v250 + 1);
        v15 = a7;
      }
      while (v248 > v161);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,16ul,8u,(TwiddleOrder)0>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _OWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  BOOL v105;
  BOOL v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  BOOL v114;
  BOOL v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  int v120;
  BOOL v121;
  BOOL v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  unsigned int v127;
  uint64_t v128;
  int v129;
  BOOL v130;
  BOOL v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  _OWORD *v136;
  uint64_t v137;
  int v138;
  _OWORD *v139;
  uint64_t v140;
  __int128 *v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  BOOL v151;
  char v152;
  int v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  BOOL v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  BOOL v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  BOOL v182;
  BOOL v183;
  int v184;
  int v185;
  int v186;
  int v187;
  BOOL v188;
  BOOL v189;
  int v190;
  int v191;
  int v192;
  unint64_t v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  int v198;
  int v199;
  uint64_t v200;
  int v201;
  unsigned int v202;
  BOOL v203;
  BOOL v204;
  unsigned int v205;
  int v206;
  int v207;
  unsigned int v208;
  uint64_t v209;
  int v210;
  unsigned int v211;
  BOOL v212;
  BOOL v213;
  unsigned int v214;
  int v215;
  uint64_t v216;
  int v217;
  BOOL v218;
  unsigned int v219;
  BOOL v220;
  unsigned int v221;
  int v222;
  int v223;
  unsigned int v224;
  uint64_t v225;
  int v226;
  BOOL v227;
  unsigned int v228;
  BOOL v229;
  int v230;
  _OWORD *v231;
  int v232;
  _OWORD *v233;
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  int i;
  int v242;
  _OWORD *v243;
  uint64_t v244;
  __int128 *v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  int v252;
  int v253;
  int v254;
  unsigned int v255;
  unsigned int v256;
  int v257;
  unsigned int v258;
  char v259;
  int v260;
  int v261;
  char v262;
  _OWORD *v264;
  _OWORD *v265;
  unsigned int v268;
  int v269;
  unsigned int v270;
  int v271;
  int v272;
  uint64_t v273;
  int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  char v278;
  uint64_t v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int v282;
  BOOL v283;
  unsigned int v284;
  BOOL v285;
  unsigned int v286;
  int v287;
  uint64_t v288;
  int v289;
  int v290;
  BOOL v291;
  unsigned int v292;
  unsigned int v293;
  int v294;
  int v295;
  unsigned int v296;
  int v297;
  unsigned int v298;
  int v299;
  int v300;
  char v301[16];
  int v302;
  int v303;
  int v304;
  int v305;
  int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned __int8 v309;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v242 = a9;
        v243 = v13;
        v244 = v47;
        do
        {
          v245 = (__int128 *)(result + ((v244 + v56) << 7));
          v246 = *v245;
          v247 = v245[1];
          v248 = v245[3];
          v243[2] = v245[2];
          v243[3] = v248;
          *v243 = v246;
          v243[1] = v247;
          v249 = v245[4];
          v250 = v245[5];
          v251 = v245[7];
          v243[6] = v245[6];
          v243[7] = v251;
          v243[4] = v249;
          v243[5] = v250;
          v244 = (v244 - v31) & v31;
          v243 += 8;
          --v242;
        }
        while (v242);
        v56 = (v56 - v40) & v40;
        v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v279 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v282 = a8 >> v66;
    v284 = 1 << v66;
    v76 = v69 - 1;
    v280 = a10 + a8;
    v276 = (v69 - 1 + a10 + a8) >> v66;
    v278 = v66;
    if (a8 >> v66 >= v276)
      return result;
    v77 = (1 << v67) - 1;
    v298 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v284;
    if (v284 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v292 = a7 >> v67;
    v296 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v296)
      return result;
    v275 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v294 = v77 & v298;
    v271 = v76 & v280;
    v273 = v76 & a8;
    v86 = v282;
LABEL_92:
    v87 = v86 << v278;
    v88 = v86 - v282;
    v290 = v86 * v275;
    v286 = v86 + 1;
    v89 = v280 >= (v86 + 1) << v278;
    v90 = v284;
    if (!v89)
      v90 = v271;
    v91 = v284 - v273;
    if (!v89)
      v91 = v19;
    v92 = v88 << v278;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v273;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v288 = (v93 + v92 - v273) * a11;
    v95 = v292;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      v98 = a9;
      if (v298 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      v99 = 1 << v67;
      if (v298 < v97 << v67)
        v99 = v294;
      v100 = v96 >= v15 ? 0 : v85;
      v101 = v96 >= v15 ? v99 : v98;
      if (v84 | v80)
        break;
      v119 = 0;
      v103 = 0;
      v112 = 0;
      v128 = 0;
      if (v101)
        goto LABEL_152;
LABEL_103:
      v95 = v97;
      if (v97 == v296)
      {
        v86 = v286;
        v14 = a8;
        v19 = a10;
        if (v286 == v276)
          return result;
        goto LABEL_92;
      }
    }
    v102 = 0;
    v103 = 0;
    v104 = 1;
    v105 = v83;
    v106 = result;
    v107 = v84;
    v108 = v80;
    do
    {
      --v107;
      v109 = v105;
      if (!v109)
        v107 = 0;
      v110 = v102 + v109;
      if (v106)
        --v108;
      else
        v108 = 0;
      if (v106)
        v103 |= (unint64_t)(v104 & ~(-1 << v80)) << v110++;
      v104 *= 2;
      v102 = v110 - 1;
      v106 = v108 != 0;
      v105 = v107 != 0;
    }
    while (v108 | v107);
    v111 = 0;
    v112 = 0;
    v113 = 1;
    v114 = v83;
    v115 = result;
    v116 = v84;
    v117 = v80;
    do
    {
      if (v114)
        --v116;
      else
        v116 = 0;
      if (v114)
        v112 |= (unint64_t)(v113 & ~(-1 << v84)) << v111++;
      --v117;
      if (!v115)
        v117 = 0;
      v113 *= 2;
      v111 = (__PAIR64__(v111, v115) - 1) >> 32;
      v115 = v117 != 0;
      v114 = v116 != 0;
    }
    while (v117 | v116);
    v118 = 0;
    v119 = 0;
    v120 = 1;
    v121 = v83;
    v122 = result;
    v123 = v84;
    v124 = v80;
    do
    {
      v125 = v121;
      if (v125)
        --v123;
      else
        v123 = 0;
      v126 = v118 + v125;
      --v124;
      if (v122)
        v119 |= (unint64_t)(v120 & v100) << v126++;
      else
        v124 = 0;
      v120 *= 2;
      v118 = v126 - 1;
      v122 = v124 != 0;
      v121 = v123 != 0;
    }
    while (v124 | v123);
    v127 = 0;
    v128 = 0;
    v129 = 1;
    v130 = v83;
    v131 = result;
    v132 = v84;
    v133 = v80;
    do
    {
      --v132;
      if (v130)
      {
        v128 |= (unint64_t)(v129 & v93) << v127;
        v134 = v127 + 1;
      }
      else
      {
        v132 = 0;
        v134 = v127;
      }
      if (v131)
        --v133;
      else
        v133 = 0;
      v129 *= 2;
      v127 = (__PAIR64__(v134, v131) - 1) >> 32;
      v131 = v133 != 0;
      v130 = v132 != 0;
    }
    while (v133 | v132);
    v15 = a7;
    if (!v101)
      goto LABEL_103;
LABEL_152:
    if (v94)
    {
      v135 = 0;
      v136 = (_OWORD *)((char *)&a2[8 * (v100 + ((v95 - v292) << v67) - v85)] + v288);
      v137 = (v95 + v290) * a12[3] * *((unsigned __int8 *)a12 + 9) + v279;
      do
      {
        v138 = v101;
        v139 = v136;
        v140 = v119;
        do
        {
          v141 = (__int128 *)(v137 + ((v140 + v128) << 7));
          v142 = *v141;
          v143 = v141[1];
          v144 = v141[3];
          v139[2] = v141[2];
          v139[3] = v144;
          *v139 = v142;
          v139[1] = v143;
          v145 = v141[4];
          v146 = v141[5];
          v147 = v141[7];
          v139[6] = v141[6];
          v139[7] = v147;
          v139[4] = v145;
          v139[5] = v146;
          v140 = (v140 - v103) & v103;
          v139 += 8;
          --v138;
        }
        while (v138);
        v128 = (v128 - v112) & v112;
        v136 = (_OWORD *)((char *)v136 + a11);
        ++v135;
      }
      while (v135 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v301);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v265 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v148 = a6 >> v20;
    v149 = 1 << v21;
    v150 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v150 = 0;
    v151 = v149 >= a5;
    if (v149 < a5)
      v152 = v21 + v20 + v150;
    else
      v152 = *((_BYTE *)a12 + 12);
    if (v151)
      LOBYTE(v153) = *((_BYTE *)a12 + 13);
    else
      v153 = -v150;
    if (!v148)
      v21 = v152;
    v259 = v21;
    if (v148)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v153;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v259 = v22;
    v23 = v21 + v20 - v22;
  }
  v154 = v279;
  v156 = a8;
  v155 = a10;
  v258 = v307;
  if (v307)
  {
    v157 = 1 << v23;
    v257 = 1 << v259;
    if (1 << v259 >= a5)
      v158 = a5;
    else
      v158 = 1 << v259;
    v159 = 32 - __clz(v158 - 1);
    v160 = v158 > 1;
    if (v158 <= 1)
      v161 = 0;
    else
      v161 = v159;
    if (v157 >= a6)
      v162 = a6;
    else
      v162 = 1 << v23;
    v163 = 32 - __clz(v162 - 1);
    v164 = v308;
    if (v162 <= 1)
      v163 = 0;
    v291 = v162 > 1;
    v293 = v163;
    v289 = v305;
    v285 = v305 != 0;
    v287 = v306;
    v283 = v306 != 0;
    if (v308)
    {
      v165 = 0;
      v166 = 0;
      v256 = v15 >> v259;
      v277 = a8 >> v23;
      v299 = v309;
      v300 = v304;
      v295 = v306 | v305;
      v255 = a9 + v15;
      v254 = (v257 - 1) & (a9 + v15);
      v253 = v302;
      v297 = v303;
      v252 = (v257 - 1) & v15;
      v272 = (v157 - 1) & a8;
      v274 = (v157 - 1) & (a10 + a8);
      v270 = v157 - v272;
      v167 = ~(-1 << v161);
      v268 = v308;
      v269 = v163 | v161;
      v168 = ~(-1 << v163);
      v281 = v161;
      v261 = 1 << v23;
      v262 = v23;
      do
      {
        v260 = v166;
        v169 = 0;
        v170 = 0;
        v171 = a9;
        if (v255 >= (v165 + v256 + 1) << v259)
          v171 = v257 - v252;
        v172 = 1 << v259;
        if (v255 < (v165 + v256 + 1) << v259)
          v172 = v254;
        v173 = (v165 + v256) << v259 >= v15;
        v174 = v253 + v165;
        v175 = v165 << v259;
        if (v173)
          v176 = v172;
        else
          v176 = v171;
        if (v173)
          v177 = 0;
        else
          v177 = v252;
        v264 = &v265[8 * (unint64_t)(v177 + v175)];
        do
        {
          v178 = v297 + v169;
          if (v299)
          {
            v179 = v295;
            if (v295)
            {
              v180 = 0;
              v179 = 0;
              v181 = 1;
              v182 = v283;
              v183 = v285;
              v185 = v287;
              v184 = v289;
              do
              {
                --v184;
                if (v183)
                  v179 |= (v181 & v174) << v180;
                else
                  v184 = 0;
                if (v183)
                  ++v180;
                --v185;
                if (v182)
                  v179 |= (v181 & v178) << v180;
                else
                  v185 = 0;
                if (v182)
                  ++v180;
                v181 *= 2;
                --v180;
                v182 = v185 != 0;
                v183 = v184 != 0;
              }
              while (v185 | v184);
            }
          }
          else
          {
            v179 = v295;
            if (v295)
            {
              v186 = 0;
              v179 = 0;
              v187 = 1;
              v189 = v283;
              v188 = v285;
              v190 = v287;
              v191 = v289;
              do
              {
                --v190;
                if (v189)
                  v179 |= (v187 & v178) << v186;
                else
                  v190 = 0;
                if (v189)
                  ++v186;
                --v191;
                if (v188)
                  v179 |= (v187 & v174) << v186;
                else
                  v191 = 0;
                if (v188)
                  ++v186;
                v187 *= 2;
                --v186;
                v188 = v191 != 0;
                v189 = v190 != 0;
              }
              while (v191 | v190);
            }
          }
          v192 = *(_DWORD *)(v154 + 4 * ((v179 + v300) | ((v179 + v300) >> 8 << 9)));
          if (v192 < 0)
          {
            v193 = v154 - *((_QWORD *)a13 + 3) + ((unint64_t)(v192 & 0x3FFFFFF) << 14);
            result = *a13;
            v194 = a13[2];
            if (result > v194)
            {
              result = get_level_offset_within_tail(result, v194, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v161 = v281;
              v157 = v261;
              v23 = v262;
              v18 = a11;
              v156 = a8;
              v155 = a10;
              v154 = v279;
              v193 += result;
            }
            v195 = (v169 + v277) << v23;
            v196 = v270;
            if (a10 + a8 >= (v169 + v277 + 1) << v23)
            {
              v197 = v157;
            }
            else
            {
              v196 = v155;
              v197 = v274;
            }
            if (v195 >= v156)
              v198 = 0;
            else
              v198 = v272;
            if (v195 >= v156)
              v196 = v197;
            if (!v269)
            {
              v216 = 0;
              v200 = 0;
              v209 = 0;
              v225 = 0;
              v164 = v268;
              if (!v176)
                goto LABEL_197;
LABEL_270:
              if (v196)
              {
                v230 = 0;
                v231 = (_OWORD *)((char *)v264 + (v198 + (v169 << v23)) * v18);
                do
                {
                  v232 = v176;
                  v233 = v231;
                  v234 = v216;
                  do
                  {
                    result = v193 + ((v234 + v225) << 7);
                    v235 = *(_OWORD *)result;
                    v236 = *(_OWORD *)(result + 16);
                    v237 = *(_OWORD *)(result + 48);
                    v233[2] = *(_OWORD *)(result + 32);
                    v233[3] = v237;
                    *v233 = v235;
                    v233[1] = v236;
                    v238 = *(_OWORD *)(result + 64);
                    v239 = *(_OWORD *)(result + 80);
                    v240 = *(_OWORD *)(result + 112);
                    v233[6] = *(_OWORD *)(result + 96);
                    v233[7] = v240;
                    v233[4] = v238;
                    v233[5] = v239;
                    v234 = (v234 - v200) & v200;
                    v233 += 8;
                    --v232;
                  }
                  while (v232);
                  v225 = (v225 - v209) & v209;
                  v231 = (_OWORD *)((char *)v231 + v18);
                  ++v230;
                }
                while (v230 != v196);
              }
              goto LABEL_197;
            }
            v199 = 0;
            v200 = 0;
            v201 = 1;
            v203 = v291;
            v202 = v293;
            v204 = v160;
            v205 = v161;
            do
            {
              --v202;
              v206 = v203;
              if (!v206)
                v202 = 0;
              v207 = v199 + v206;
              --v205;
              if (v204)
                v200 |= (unint64_t)(v201 & v167) << v207++;
              else
                v205 = 0;
              v201 *= 2;
              v199 = v207 - 1;
              v204 = v205 != 0;
              v203 = v202 != 0;
            }
            while (v205 | v202);
            v208 = 0;
            v209 = 0;
            v210 = 1;
            v212 = v291;
            v211 = v293;
            v213 = v160;
            v214 = v161;
            do
            {
              --v211;
              if (v212)
                v209 |= (unint64_t)(v210 & v168) << v208++;
              else
                v211 = 0;
              --v214;
              if (!v213)
                v214 = 0;
              v210 *= 2;
              v208 = (__PAIR64__(v208, v213) - 1) >> 32;
              v213 = v214 != 0;
              v212 = v211 != 0;
            }
            while (v214 | v211);
            v215 = 0;
            v216 = 0;
            v217 = 1;
            v218 = v291;
            v219 = v293;
            v220 = v160;
            v221 = v161;
            do
            {
              --v219;
              v222 = v218;
              if (!v222)
                v219 = 0;
              v223 = v215 + v222;
              --v221;
              if (v220)
                v216 |= (unint64_t)(v217 & v177) << v223++;
              else
                v221 = 0;
              v217 *= 2;
              v215 = v223 - 1;
              v220 = v221 != 0;
              v218 = v219 != 0;
            }
            while (v221 | v219);
            v224 = 0;
            v225 = 0;
            v226 = 1;
            v227 = v291;
            v228 = v293;
            v229 = v160;
            LODWORD(result) = v161;
            do
            {
              --v228;
              if (v227)
                v225 |= (unint64_t)(v226 & v198) << v224++;
              else
                v228 = 0;
              LODWORD(result) = result - 1;
              if (v229)
                result = result;
              else
                result = 0;
              v226 *= 2;
              v224 = (__PAIR64__(v224, v229) - 1) >> 32;
              v229 = (_DWORD)result != 0;
              v227 = v228 != 0;
            }
            while (result | v228);
            v161 = v281;
            v164 = v268;
            if (v176)
              goto LABEL_270;
          }
LABEL_197:
          v169 = (unsigned __int16)++v170;
        }
        while (v164 > (unsigned __int16)v170);
        v166 = v260 + 1;
        v165 = (unsigned __int16)(v260 + 1);
        v15 = a7;
      }
      while (v258 > v165);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,8ul,2u,(TwiddleOrder)0>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _OWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  BOOL v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  _OWORD *v135;
  uint64_t v136;
  int v137;
  _OWORD *v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  BOOL v143;
  char v144;
  int v145;
  uint64_t v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  BOOL v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  BOOL v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  BOOL v174;
  BOOL v175;
  int v176;
  int v177;
  int v178;
  int v179;
  BOOL v180;
  BOOL v181;
  int v182;
  int v183;
  int v184;
  unint64_t v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  int v190;
  int v191;
  uint64_t v192;
  int v193;
  unsigned int v194;
  BOOL v195;
  BOOL v196;
  unsigned int v197;
  int v198;
  int v199;
  unsigned int v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  BOOL v204;
  BOOL v205;
  unsigned int v206;
  int v207;
  uint64_t v208;
  int v209;
  BOOL v210;
  unsigned int v211;
  BOOL v212;
  unsigned int v213;
  int v214;
  int v215;
  unsigned int v216;
  uint64_t v217;
  int v218;
  BOOL v219;
  unsigned int v220;
  BOOL v221;
  int v222;
  _OWORD *v223;
  int v224;
  _OWORD *v225;
  uint64_t v226;
  int i;
  int v228;
  _OWORD *v229;
  uint64_t v230;
  int v231;
  int v232;
  int v233;
  unsigned int v234;
  unsigned int v235;
  int v236;
  unsigned int v237;
  char v238;
  int v239;
  int v240;
  char v241;
  _OWORD *v243;
  _OWORD *v244;
  unsigned int v247;
  int v248;
  unsigned int v249;
  int v250;
  int v251;
  uint64_t v252;
  int v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  char v257;
  uint64_t v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  BOOL v262;
  unsigned int v263;
  BOOL v264;
  unsigned int v265;
  int v266;
  uint64_t v267;
  int v268;
  int v269;
  BOOL v270;
  unsigned int v271;
  unsigned int v272;
  int v273;
  int v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  int v278;
  int v279;
  char v280[16];
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned __int8 v288;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v228 = a9;
        v229 = v13;
        v230 = v47;
        do
        {
          *v229++ = *(_OWORD *)(result + 16 * (v230 + v56));
          v230 = (v230 - v31) & v31;
          --v228;
        }
        while (v228);
        v56 = (v56 - v40) & v40;
        v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v258 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v261 = a8 >> v66;
    v263 = 1 << v66;
    v76 = v69 - 1;
    v259 = a10 + a8;
    v255 = (v69 - 1 + a10 + a8) >> v66;
    v257 = v66;
    if (a8 >> v66 >= v255)
      return result;
    v77 = (1 << v67) - 1;
    v277 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v263;
    if (v263 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v271 = a7 >> v67;
    v275 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v275)
      return result;
    v254 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v273 = v77 & v277;
    v250 = v76 & v259;
    v252 = v76 & a8;
    v86 = v261;
LABEL_92:
    v87 = v86 << v257;
    v88 = v86 - v261;
    v269 = v86 * v254;
    v265 = v86 + 1;
    v89 = v259 >= (v86 + 1) << v257;
    v90 = v263;
    if (!v89)
      v90 = v250;
    v91 = v263 - v252;
    if (!v89)
      v91 = v19;
    v92 = v88 << v257;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v252;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v267 = (v93 + v92 - v252) * a11;
    v95 = v271;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      if (v277 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      else
        v98 = a9;
      v99 = v273;
      if (v277 >= v97 << v67)
        v99 = 1 << v67;
      if (v96 >= v15)
        v100 = 0;
      else
        v100 = v85;
      if (v96 < v15)
        v99 = v98;
      if (v84 | v80)
        break;
      v118 = 0;
      v102 = 0;
      v111 = 0;
      v127 = 0;
      if (v99)
        goto LABEL_153;
LABEL_103:
      v95 = v97;
      if (v97 == v275)
      {
        v86 = v265;
        v14 = a8;
        v19 = a10;
        if (v265 == v255)
          return result;
        goto LABEL_92;
      }
    }
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v104 = v83;
    v105 = result;
    v106 = v84;
    v107 = v80;
    do
    {
      v108 = v104;
      if (v108)
        --v106;
      else
        v106 = 0;
      v109 = v101 + v108;
      if (v105)
        --v107;
      else
        v107 = 0;
      if (v105)
        v102 |= (unint64_t)(v103 & ~(-1 << v80)) << v109++;
      v103 *= 2;
      v101 = v109 - 1;
      v105 = v107 != 0;
      v104 = v106 != 0;
    }
    while (v107 | v106);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v83;
    v114 = result;
    v115 = v84;
    v116 = v80;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
        v111 |= (unint64_t)(v112 & ~(-1 << v84)) << v110++;
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v110, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v117 = 0;
    v118 = 0;
    v119 = 1;
    v120 = v83;
    v121 = result;
    v122 = v84;
    v123 = v80;
    do
    {
      v124 = v120;
      if (v124)
        --v122;
      else
        v122 = 0;
      v125 = v117 + v124;
      --v123;
      if (v121)
        v118 |= (unint64_t)(v119 & v100) << v125++;
      else
        v123 = 0;
      v119 *= 2;
      v117 = v125 - 1;
      v121 = v123 != 0;
      v120 = v122 != 0;
    }
    while (v123 | v122);
    v126 = 0;
    v127 = 0;
    v128 = 1;
    v129 = v83;
    v130 = result;
    v131 = v84;
    v132 = v80;
    do
    {
      --v131;
      if (v129)
      {
        v127 |= (unint64_t)(v128 & v93) << v126;
        v133 = v126 + 1;
      }
      else
      {
        v131 = 0;
        v133 = v126;
      }
      if (v130)
        --v132;
      else
        v132 = 0;
      v128 *= 2;
      v126 = (__PAIR64__(v133, v130) - 1) >> 32;
      v130 = v132 != 0;
      v129 = v131 != 0;
    }
    while (v132 | v131);
    v15 = a7;
    if (!v99)
      goto LABEL_103;
LABEL_153:
    if (v94)
    {
      v134 = 0;
      v135 = (_OWORD *)((char *)&a2[v100 + ((v95 - v271) << v67) - v85] + v267);
      v136 = (v95 + v269) * a12[3] * *((unsigned __int8 *)a12 + 9) + v258;
      do
      {
        v137 = v99;
        v138 = v135;
        v139 = v118;
        do
        {
          *v138++ = *(_OWORD *)(v136 + 16 * (v139 + v127));
          v139 = (v139 - v102) & v102;
          --v137;
        }
        while (v137);
        v127 = (v127 - v111) & v111;
        v135 = (_OWORD *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v280);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v244 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v140 = a6 >> v20;
    v141 = 1 << v21;
    v142 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v142 = 0;
    v143 = v141 >= a5;
    if (v141 < a5)
      v144 = v21 + v20 + v142;
    else
      v144 = *((_BYTE *)a12 + 12);
    if (v143)
      LOBYTE(v145) = *((_BYTE *)a12 + 13);
    else
      v145 = -v142;
    if (!v140)
      v21 = v144;
    v238 = v21;
    if (v140)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v145;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v238 = v22;
    v23 = v21 + v20 - v22;
  }
  v146 = v258;
  v148 = a8;
  v147 = a10;
  v237 = v286;
  if (v286)
  {
    v149 = 1 << v23;
    v236 = 1 << v238;
    if (1 << v238 >= a5)
      v150 = a5;
    else
      v150 = 1 << v238;
    v151 = 32 - __clz(v150 - 1);
    v152 = v150 > 1;
    if (v150 <= 1)
      v153 = 0;
    else
      v153 = v151;
    if (v149 >= a6)
      v154 = a6;
    else
      v154 = 1 << v23;
    v155 = 32 - __clz(v154 - 1);
    v156 = v287;
    if (v154 <= 1)
      v155 = 0;
    v270 = v154 > 1;
    v272 = v155;
    v268 = v284;
    v264 = v284 != 0;
    v266 = v285;
    v262 = v285 != 0;
    if (v287)
    {
      v157 = 0;
      v158 = 0;
      v235 = v15 >> v238;
      v256 = a8 >> v23;
      v278 = v288;
      v279 = v283;
      v274 = v285 | v284;
      v234 = a9 + v15;
      v233 = (v236 - 1) & (a9 + v15);
      v232 = v281;
      v276 = v282;
      v231 = (v236 - 1) & v15;
      v251 = (v149 - 1) & a8;
      v253 = (v149 - 1) & (a10 + a8);
      v249 = v149 - v251;
      v159 = ~(-1 << v153);
      v247 = v287;
      v248 = v155 | v153;
      v160 = ~(-1 << v155);
      v260 = v153;
      v240 = 1 << v23;
      v241 = v23;
      do
      {
        v239 = v158;
        v161 = 0;
        v162 = 0;
        v163 = a9;
        if (v234 >= (v157 + v235 + 1) << v238)
          v163 = v236 - v231;
        v164 = 1 << v238;
        if (v234 < (v157 + v235 + 1) << v238)
          v164 = v233;
        v165 = (v157 + v235) << v238 >= v15;
        v166 = v232 + v157;
        v167 = v157 << v238;
        if (v165)
          v168 = v164;
        else
          v168 = v163;
        if (v165)
          v169 = 0;
        else
          v169 = v231;
        v243 = &v244[v169 + v167];
        do
        {
          v170 = v276 + v161;
          if (v278)
          {
            v171 = v274;
            if (v274)
            {
              v172 = 0;
              v171 = 0;
              v173 = 1;
              v174 = v262;
              v175 = v264;
              v177 = v266;
              v176 = v268;
              do
              {
                --v176;
                if (v175)
                  v171 |= (v173 & v166) << v172;
                else
                  v176 = 0;
                if (v175)
                  ++v172;
                --v177;
                if (v174)
                  v171 |= (v173 & v170) << v172;
                else
                  v177 = 0;
                if (v174)
                  ++v172;
                v173 *= 2;
                --v172;
                v174 = v177 != 0;
                v175 = v176 != 0;
              }
              while (v177 | v176);
            }
          }
          else
          {
            v171 = v274;
            if (v274)
            {
              v178 = 0;
              v171 = 0;
              v179 = 1;
              v181 = v262;
              v180 = v264;
              v182 = v266;
              v183 = v268;
              do
              {
                --v182;
                if (v181)
                  v171 |= (v179 & v170) << v178;
                else
                  v182 = 0;
                if (v181)
                  ++v178;
                --v183;
                if (v180)
                  v171 |= (v179 & v166) << v178;
                else
                  v183 = 0;
                if (v180)
                  ++v178;
                v179 *= 2;
                --v178;
                v180 = v183 != 0;
                v181 = v182 != 0;
              }
              while (v183 | v182);
            }
          }
          v184 = *(_DWORD *)(v146 + 4 * ((v171 + v279) | ((v171 + v279) >> 8 << 9)));
          if (v184 < 0)
          {
            v185 = v146 - *((_QWORD *)a13 + 3) + ((unint64_t)(v184 & 0x3FFFFFF) << 14);
            result = *a13;
            v186 = a13[2];
            if (result > v186)
            {
              result = get_level_offset_within_tail(result, v186, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v153 = v260;
              v149 = v240;
              v23 = v241;
              v18 = a11;
              v148 = a8;
              v147 = a10;
              v146 = v258;
              v185 += result;
            }
            v187 = (v161 + v256) << v23;
            v188 = v249;
            if (a10 + a8 >= (v161 + v256 + 1) << v23)
            {
              v189 = v149;
            }
            else
            {
              v188 = v147;
              v189 = v253;
            }
            if (v187 >= v148)
              v190 = 0;
            else
              v190 = v251;
            if (v187 >= v148)
              v188 = v189;
            if (!v248)
            {
              v208 = 0;
              v192 = 0;
              v201 = 0;
              v217 = 0;
              v156 = v247;
              if (!v168)
                goto LABEL_198;
LABEL_271:
              if (v188)
              {
                v222 = 0;
                v223 = (_OWORD *)((char *)v243 + (v190 + (v161 << v23)) * v18);
                do
                {
                  v224 = v168;
                  v225 = v223;
                  v226 = v208;
                  do
                  {
                    result = v226 + v217;
                    *v225++ = *(_OWORD *)(v185 + 16 * (v226 + v217));
                    v226 = (v226 - v192) & v192;
                    --v224;
                  }
                  while (v224);
                  v217 = (v217 - v201) & v201;
                  v223 = (_OWORD *)((char *)v223 + v18);
                  ++v222;
                }
                while (v222 != v188);
              }
              goto LABEL_198;
            }
            v191 = 0;
            v192 = 0;
            v193 = 1;
            v195 = v270;
            v194 = v272;
            v196 = v152;
            v197 = v153;
            do
            {
              --v194;
              v198 = v195;
              if (!v198)
                v194 = 0;
              v199 = v191 + v198;
              --v197;
              if (v196)
                v192 |= (unint64_t)(v193 & v159) << v199++;
              else
                v197 = 0;
              v193 *= 2;
              v191 = v199 - 1;
              v196 = v197 != 0;
              v195 = v194 != 0;
            }
            while (v197 | v194);
            v200 = 0;
            v201 = 0;
            v202 = 1;
            v204 = v270;
            v203 = v272;
            v205 = v152;
            v206 = v153;
            do
            {
              --v203;
              if (v204)
                v201 |= (unint64_t)(v202 & v160) << v200++;
              else
                v203 = 0;
              --v206;
              if (!v205)
                v206 = 0;
              v202 *= 2;
              v200 = (__PAIR64__(v200, v205) - 1) >> 32;
              v205 = v206 != 0;
              v204 = v203 != 0;
            }
            while (v206 | v203);
            v207 = 0;
            v208 = 0;
            v209 = 1;
            v210 = v270;
            v211 = v272;
            v212 = v152;
            v213 = v153;
            do
            {
              --v211;
              v214 = v210;
              if (!v214)
                v211 = 0;
              v215 = v207 + v214;
              --v213;
              if (v212)
                v208 |= (unint64_t)(v209 & v169) << v215++;
              else
                v213 = 0;
              v209 *= 2;
              v207 = v215 - 1;
              v212 = v213 != 0;
              v210 = v211 != 0;
            }
            while (v213 | v211);
            v216 = 0;
            v217 = 0;
            v218 = 1;
            v219 = v270;
            v220 = v272;
            v221 = v152;
            LODWORD(result) = v153;
            do
            {
              --v220;
              if (v219)
                v217 |= (unint64_t)(v218 & v190) << v216++;
              else
                v220 = 0;
              LODWORD(result) = result - 1;
              if (v221)
                result = result;
              else
                result = 0;
              v218 *= 2;
              v216 = (__PAIR64__(v216, v221) - 1) >> 32;
              v221 = (_DWORD)result != 0;
              v219 = v220 != 0;
            }
            while (result | v220);
            v153 = v260;
            v156 = v247;
            if (v168)
              goto LABEL_271;
          }
LABEL_198:
          v161 = (unsigned __int16)++v162;
        }
        while (v156 > (unsigned __int16)v162);
        v158 = v239 + 1;
        v157 = (unsigned __int16)(v239 + 1);
        v15 = a7;
      }
      while (v237 > v157);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,8ul,4u,(TwiddleOrder)0>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _OWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  BOOL v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  _OWORD *v135;
  uint64_t v136;
  int v137;
  _OWORD *v138;
  uint64_t v139;
  _OWORD *v140;
  __int128 v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  char v146;
  int v147;
  uint64_t v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  BOOL v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  BOOL v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  BOOL v176;
  BOOL v177;
  int v178;
  int v179;
  int v180;
  int v181;
  BOOL v182;
  BOOL v183;
  int v184;
  int v185;
  int v186;
  unint64_t v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  int v192;
  int v193;
  uint64_t v194;
  int v195;
  unsigned int v196;
  BOOL v197;
  BOOL v198;
  unsigned int v199;
  int v200;
  int v201;
  unsigned int v202;
  uint64_t v203;
  int v204;
  unsigned int v205;
  BOOL v206;
  BOOL v207;
  unsigned int v208;
  int v209;
  uint64_t v210;
  int v211;
  BOOL v212;
  unsigned int v213;
  BOOL v214;
  unsigned int v215;
  int v216;
  int v217;
  unsigned int v218;
  uint64_t v219;
  int v220;
  BOOL v221;
  unsigned int v222;
  BOOL v223;
  int v224;
  _OWORD *v225;
  int v226;
  _OWORD *v227;
  uint64_t v228;
  __int128 v229;
  int i;
  int v231;
  _OWORD *v232;
  uint64_t v233;
  _OWORD *v234;
  __int128 v235;
  int v236;
  int v237;
  int v238;
  unsigned int v239;
  unsigned int v240;
  int v241;
  unsigned int v242;
  char v243;
  int v244;
  int v245;
  char v246;
  _OWORD *v248;
  _OWORD *v249;
  unsigned int v252;
  int v253;
  unsigned int v254;
  int v255;
  int v256;
  uint64_t v257;
  int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  char v262;
  uint64_t v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  BOOL v267;
  unsigned int v268;
  BOOL v269;
  unsigned int v270;
  int v271;
  uint64_t v272;
  int v273;
  int v274;
  BOOL v275;
  unsigned int v276;
  unsigned int v277;
  int v278;
  int v279;
  unsigned int v280;
  int v281;
  unsigned int v282;
  int v283;
  int v284;
  char v285[16];
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned __int8 v293;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v231 = a9;
        v232 = v13;
        v233 = v47;
        do
        {
          v234 = (_OWORD *)(result + 32 * (v233 + v56));
          v235 = v234[1];
          *v232 = *v234;
          v232[1] = v235;
          v232 += 2;
          v233 = (v233 - v31) & v31;
          --v231;
        }
        while (v231);
        v56 = (v56 - v40) & v40;
        v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v263 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v266 = a8 >> v66;
    v268 = 1 << v66;
    v76 = v69 - 1;
    v264 = a10 + a8;
    v260 = (v69 - 1 + a10 + a8) >> v66;
    v262 = v66;
    if (a8 >> v66 >= v260)
      return result;
    v77 = (1 << v67) - 1;
    v282 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v268;
    if (v268 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v276 = a7 >> v67;
    v280 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v280)
      return result;
    v259 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v278 = v77 & v282;
    v255 = v76 & v264;
    v257 = v76 & a8;
    v86 = v266;
LABEL_92:
    v87 = v86 << v262;
    v88 = v86 - v266;
    v274 = v86 * v259;
    v270 = v86 + 1;
    v89 = v264 >= (v86 + 1) << v262;
    v90 = v268;
    if (!v89)
      v90 = v255;
    v91 = v268 - v257;
    if (!v89)
      v91 = v19;
    v92 = v88 << v262;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v257;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v272 = (v93 + v92 - v257) * a11;
    v95 = v276;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      if (v282 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      else
        v98 = a9;
      v99 = v278;
      if (v282 >= v97 << v67)
        v99 = 1 << v67;
      if (v96 >= v15)
        v100 = 0;
      else
        v100 = v85;
      if (v96 < v15)
        v99 = v98;
      if (v84 | v80)
        break;
      v118 = 0;
      v102 = 0;
      v111 = 0;
      v127 = 0;
      if (v99)
        goto LABEL_153;
LABEL_103:
      v95 = v97;
      if (v97 == v280)
      {
        v86 = v270;
        v14 = a8;
        v19 = a10;
        if (v270 == v260)
          return result;
        goto LABEL_92;
      }
    }
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v104 = v83;
    v105 = result;
    v106 = v84;
    v107 = v80;
    do
    {
      v108 = v104;
      if (v108)
        --v106;
      else
        v106 = 0;
      v109 = v101 + v108;
      if (v105)
        --v107;
      else
        v107 = 0;
      if (v105)
        v102 |= (unint64_t)(v103 & ~(-1 << v80)) << v109++;
      v103 *= 2;
      v101 = v109 - 1;
      v105 = v107 != 0;
      v104 = v106 != 0;
    }
    while (v107 | v106);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v83;
    v114 = result;
    v115 = v84;
    v116 = v80;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
        v111 |= (unint64_t)(v112 & ~(-1 << v84)) << v110++;
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v110, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v117 = 0;
    v118 = 0;
    v119 = 1;
    v120 = v83;
    v121 = result;
    v122 = v84;
    v123 = v80;
    do
    {
      v124 = v120;
      if (v124)
        --v122;
      else
        v122 = 0;
      v125 = v117 + v124;
      --v123;
      if (v121)
        v118 |= (unint64_t)(v119 & v100) << v125++;
      else
        v123 = 0;
      v119 *= 2;
      v117 = v125 - 1;
      v121 = v123 != 0;
      v120 = v122 != 0;
    }
    while (v123 | v122);
    v126 = 0;
    v127 = 0;
    v128 = 1;
    v129 = v83;
    v130 = result;
    v131 = v84;
    v132 = v80;
    do
    {
      --v131;
      if (v129)
      {
        v127 |= (unint64_t)(v128 & v93) << v126;
        v133 = v126 + 1;
      }
      else
      {
        v131 = 0;
        v133 = v126;
      }
      if (v130)
        --v132;
      else
        v132 = 0;
      v128 *= 2;
      v126 = (__PAIR64__(v133, v130) - 1) >> 32;
      v130 = v132 != 0;
      v129 = v131 != 0;
    }
    while (v132 | v131);
    v15 = a7;
    if (!v99)
      goto LABEL_103;
LABEL_153:
    if (v94)
    {
      v134 = 0;
      v135 = (_OWORD *)((char *)&a2[2 * (v100 + ((v95 - v276) << v67) - v85)] + v272);
      v136 = (v95 + v274) * a12[3] * *((unsigned __int8 *)a12 + 9) + v263;
      do
      {
        v137 = v99;
        v138 = v135;
        v139 = v118;
        do
        {
          v140 = (_OWORD *)(v136 + 32 * (v139 + v127));
          v141 = v140[1];
          *v138 = *v140;
          v138[1] = v141;
          v138 += 2;
          v139 = (v139 - v102) & v102;
          --v137;
        }
        while (v137);
        v127 = (v127 - v111) & v111;
        v135 = (_OWORD *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v285);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v249 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v142 = a6 >> v20;
    v143 = 1 << v21;
    v144 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v144 = 0;
    v145 = v143 >= a5;
    if (v143 < a5)
      v146 = v21 + v20 + v144;
    else
      v146 = *((_BYTE *)a12 + 12);
    if (v145)
      LOBYTE(v147) = *((_BYTE *)a12 + 13);
    else
      v147 = -v144;
    if (!v142)
      v21 = v146;
    v243 = v21;
    if (v142)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v147;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v243 = v22;
    v23 = v21 + v20 - v22;
  }
  v148 = v263;
  v150 = a8;
  v149 = a10;
  v242 = v291;
  if (v291)
  {
    v151 = 1 << v23;
    v241 = 1 << v243;
    if (1 << v243 >= a5)
      v152 = a5;
    else
      v152 = 1 << v243;
    v153 = 32 - __clz(v152 - 1);
    v154 = v152 > 1;
    if (v152 <= 1)
      v155 = 0;
    else
      v155 = v153;
    if (v151 >= a6)
      v156 = a6;
    else
      v156 = 1 << v23;
    v157 = 32 - __clz(v156 - 1);
    v158 = v292;
    if (v156 <= 1)
      v157 = 0;
    v275 = v156 > 1;
    v277 = v157;
    v273 = v289;
    v269 = v289 != 0;
    v271 = v290;
    v267 = v290 != 0;
    if (v292)
    {
      v159 = 0;
      v160 = 0;
      v240 = v15 >> v243;
      v261 = a8 >> v23;
      v283 = v293;
      v284 = v288;
      v279 = v290 | v289;
      v239 = a9 + v15;
      v238 = (v241 - 1) & (a9 + v15);
      v237 = v286;
      v281 = v287;
      v236 = (v241 - 1) & v15;
      v256 = (v151 - 1) & a8;
      v258 = (v151 - 1) & (a10 + a8);
      v254 = v151 - v256;
      v161 = ~(-1 << v155);
      v252 = v292;
      v253 = v157 | v155;
      v162 = ~(-1 << v157);
      v265 = v155;
      v245 = 1 << v23;
      v246 = v23;
      do
      {
        v244 = v160;
        v163 = 0;
        v164 = 0;
        v165 = a9;
        if (v239 >= (v159 + v240 + 1) << v243)
          v165 = v241 - v236;
        v166 = 1 << v243;
        if (v239 < (v159 + v240 + 1) << v243)
          v166 = v238;
        v167 = (v159 + v240) << v243 >= v15;
        v168 = v237 + v159;
        v169 = v159 << v243;
        if (v167)
          v170 = v166;
        else
          v170 = v165;
        if (v167)
          v171 = 0;
        else
          v171 = v236;
        v248 = &v249[2 * (v171 + v169)];
        do
        {
          v172 = v281 + v163;
          if (v283)
          {
            v173 = v279;
            if (v279)
            {
              v174 = 0;
              v173 = 0;
              v175 = 1;
              v176 = v267;
              v177 = v269;
              v179 = v271;
              v178 = v273;
              do
              {
                --v178;
                if (v177)
                  v173 |= (v175 & v168) << v174;
                else
                  v178 = 0;
                if (v177)
                  ++v174;
                --v179;
                if (v176)
                  v173 |= (v175 & v172) << v174;
                else
                  v179 = 0;
                if (v176)
                  ++v174;
                v175 *= 2;
                --v174;
                v176 = v179 != 0;
                v177 = v178 != 0;
              }
              while (v179 | v178);
            }
          }
          else
          {
            v173 = v279;
            if (v279)
            {
              v180 = 0;
              v173 = 0;
              v181 = 1;
              v183 = v267;
              v182 = v269;
              v184 = v271;
              v185 = v273;
              do
              {
                --v184;
                if (v183)
                  v173 |= (v181 & v172) << v180;
                else
                  v184 = 0;
                if (v183)
                  ++v180;
                --v185;
                if (v182)
                  v173 |= (v181 & v168) << v180;
                else
                  v185 = 0;
                if (v182)
                  ++v180;
                v181 *= 2;
                --v180;
                v182 = v185 != 0;
                v183 = v184 != 0;
              }
              while (v185 | v184);
            }
          }
          v186 = *(_DWORD *)(v148 + 4 * ((v173 + v284) | ((v173 + v284) >> 8 << 9)));
          if (v186 < 0)
          {
            v187 = v148 - *((_QWORD *)a13 + 3) + ((unint64_t)(v186 & 0x3FFFFFF) << 14);
            result = *a13;
            v188 = a13[2];
            if (result > v188)
            {
              result = get_level_offset_within_tail(result, v188, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v155 = v265;
              v151 = v245;
              v23 = v246;
              v18 = a11;
              v150 = a8;
              v149 = a10;
              v148 = v263;
              v187 += result;
            }
            v189 = (v163 + v261) << v23;
            v190 = v254;
            if (a10 + a8 >= (v163 + v261 + 1) << v23)
            {
              v191 = v151;
            }
            else
            {
              v190 = v149;
              v191 = v258;
            }
            if (v189 >= v150)
              v192 = 0;
            else
              v192 = v256;
            if (v189 >= v150)
              v190 = v191;
            if (!v253)
            {
              v210 = 0;
              v194 = 0;
              v203 = 0;
              v219 = 0;
              v158 = v252;
              if (!v170)
                goto LABEL_198;
LABEL_271:
              if (v190)
              {
                v224 = 0;
                v225 = (_OWORD *)((char *)v248 + (v192 + (v163 << v23)) * v18);
                do
                {
                  v226 = v170;
                  v227 = v225;
                  v228 = v210;
                  do
                  {
                    result = v187 + 32 * (v228 + v219);
                    v229 = *(_OWORD *)(result + 16);
                    *v227 = *(_OWORD *)result;
                    v227[1] = v229;
                    v227 += 2;
                    v228 = (v228 - v194) & v194;
                    --v226;
                  }
                  while (v226);
                  v219 = (v219 - v203) & v203;
                  v225 = (_OWORD *)((char *)v225 + v18);
                  ++v224;
                }
                while (v224 != v190);
              }
              goto LABEL_198;
            }
            v193 = 0;
            v194 = 0;
            v195 = 1;
            v197 = v275;
            v196 = v277;
            v198 = v154;
            v199 = v155;
            do
            {
              --v196;
              v200 = v197;
              if (!v200)
                v196 = 0;
              v201 = v193 + v200;
              --v199;
              if (v198)
                v194 |= (unint64_t)(v195 & v161) << v201++;
              else
                v199 = 0;
              v195 *= 2;
              v193 = v201 - 1;
              v198 = v199 != 0;
              v197 = v196 != 0;
            }
            while (v199 | v196);
            v202 = 0;
            v203 = 0;
            v204 = 1;
            v206 = v275;
            v205 = v277;
            v207 = v154;
            v208 = v155;
            do
            {
              --v205;
              if (v206)
                v203 |= (unint64_t)(v204 & v162) << v202++;
              else
                v205 = 0;
              --v208;
              if (!v207)
                v208 = 0;
              v204 *= 2;
              v202 = (__PAIR64__(v202, v207) - 1) >> 32;
              v207 = v208 != 0;
              v206 = v205 != 0;
            }
            while (v208 | v205);
            v209 = 0;
            v210 = 0;
            v211 = 1;
            v212 = v275;
            v213 = v277;
            v214 = v154;
            v215 = v155;
            do
            {
              --v213;
              v216 = v212;
              if (!v216)
                v213 = 0;
              v217 = v209 + v216;
              --v215;
              if (v214)
                v210 |= (unint64_t)(v211 & v171) << v217++;
              else
                v215 = 0;
              v211 *= 2;
              v209 = v217 - 1;
              v214 = v215 != 0;
              v212 = v213 != 0;
            }
            while (v215 | v213);
            v218 = 0;
            v219 = 0;
            v220 = 1;
            v221 = v275;
            v222 = v277;
            v223 = v154;
            LODWORD(result) = v155;
            do
            {
              --v222;
              if (v221)
                v219 |= (unint64_t)(v220 & v192) << v218++;
              else
                v222 = 0;
              LODWORD(result) = result - 1;
              if (v223)
                result = result;
              else
                result = 0;
              v220 *= 2;
              v218 = (__PAIR64__(v218, v223) - 1) >> 32;
              v223 = (_DWORD)result != 0;
              v221 = v222 != 0;
            }
            while (result | v222);
            v155 = v265;
            v158 = v252;
            if (v170)
              goto LABEL_271;
          }
LABEL_198:
          v163 = (unsigned __int16)++v164;
        }
        while (v158 > (unsigned __int16)v164);
        v160 = v244 + 1;
        v159 = (unsigned __int16)(v244 + 1);
        v15 = a7;
      }
      while (v242 > v159);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,8ul,8u,(TwiddleOrder)0>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _OWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  BOOL v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  _OWORD *v135;
  uint64_t v136;
  int v137;
  _OWORD *v138;
  uint64_t v139;
  __int128 *v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  BOOL v147;
  char v148;
  int v149;
  uint64_t v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  BOOL v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  BOOL v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  BOOL v178;
  BOOL v179;
  int v180;
  int v181;
  int v182;
  int v183;
  BOOL v184;
  BOOL v185;
  int v186;
  int v187;
  int v188;
  unint64_t v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  int v194;
  int v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  BOOL v199;
  BOOL v200;
  unsigned int v201;
  int v202;
  int v203;
  unsigned int v204;
  uint64_t v205;
  int v206;
  unsigned int v207;
  BOOL v208;
  BOOL v209;
  unsigned int v210;
  int v211;
  uint64_t v212;
  int v213;
  BOOL v214;
  unsigned int v215;
  BOOL v216;
  unsigned int v217;
  int v218;
  int v219;
  unsigned int v220;
  uint64_t v221;
  int v222;
  BOOL v223;
  unsigned int v224;
  BOOL v225;
  int v226;
  _OWORD *v227;
  int v228;
  _OWORD *v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  int i;
  int v235;
  _OWORD *v236;
  uint64_t v237;
  __int128 *v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  int v242;
  int v243;
  int v244;
  unsigned int v245;
  unsigned int v246;
  int v247;
  unsigned int v248;
  char v249;
  int v250;
  int v251;
  char v252;
  _OWORD *v254;
  _OWORD *v255;
  unsigned int v258;
  int v259;
  unsigned int v260;
  int v261;
  int v262;
  uint64_t v263;
  int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  char v268;
  uint64_t v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  BOOL v273;
  unsigned int v274;
  BOOL v275;
  unsigned int v276;
  int v277;
  uint64_t v278;
  int v279;
  int v280;
  BOOL v281;
  unsigned int v282;
  unsigned int v283;
  int v284;
  int v285;
  unsigned int v286;
  int v287;
  unsigned int v288;
  int v289;
  int v290;
  char v291[16];
  int v292;
  int v293;
  int v294;
  int v295;
  int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned __int8 v299;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v235 = a9;
        v236 = v13;
        v237 = v47;
        do
        {
          v238 = (__int128 *)(result + ((v237 + v56) << 6));
          v239 = *v238;
          v240 = v238[1];
          v241 = v238[3];
          v236[2] = v238[2];
          v236[3] = v241;
          *v236 = v239;
          v236[1] = v240;
          v236 += 4;
          v237 = (v237 - v31) & v31;
          --v235;
        }
        while (v235);
        v56 = (v56 - v40) & v40;
        v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v269 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v272 = a8 >> v66;
    v274 = 1 << v66;
    v76 = v69 - 1;
    v270 = a10 + a8;
    v266 = (v69 - 1 + a10 + a8) >> v66;
    v268 = v66;
    if (a8 >> v66 >= v266)
      return result;
    v77 = (1 << v67) - 1;
    v288 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v274;
    if (v274 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v282 = a7 >> v67;
    v286 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v286)
      return result;
    v265 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v284 = v77 & v288;
    v261 = v76 & v270;
    v263 = v76 & a8;
    v86 = v272;
LABEL_92:
    v87 = v86 << v268;
    v88 = v86 - v272;
    v280 = v86 * v265;
    v276 = v86 + 1;
    v89 = v270 >= (v86 + 1) << v268;
    v90 = v274;
    if (!v89)
      v90 = v261;
    v91 = v274 - v263;
    if (!v89)
      v91 = v19;
    v92 = v88 << v268;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v263;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v278 = (v93 + v92 - v263) * a11;
    v95 = v282;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      if (v288 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      else
        v98 = a9;
      v99 = v284;
      if (v288 >= v97 << v67)
        v99 = 1 << v67;
      if (v96 >= v15)
        v100 = 0;
      else
        v100 = v85;
      if (v96 < v15)
        v99 = v98;
      if (v84 | v80)
        break;
      v118 = 0;
      v102 = 0;
      v111 = 0;
      v127 = 0;
      if (v99)
        goto LABEL_153;
LABEL_103:
      v95 = v97;
      if (v97 == v286)
      {
        v86 = v276;
        v14 = a8;
        v19 = a10;
        if (v276 == v266)
          return result;
        goto LABEL_92;
      }
    }
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v104 = v83;
    v105 = result;
    v106 = v84;
    v107 = v80;
    do
    {
      v108 = v104;
      if (v108)
        --v106;
      else
        v106 = 0;
      v109 = v101 + v108;
      if (v105)
        --v107;
      else
        v107 = 0;
      if (v105)
        v102 |= (unint64_t)(v103 & ~(-1 << v80)) << v109++;
      v103 *= 2;
      v101 = v109 - 1;
      v105 = v107 != 0;
      v104 = v106 != 0;
    }
    while (v107 | v106);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v83;
    v114 = result;
    v115 = v84;
    v116 = v80;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
        v111 |= (unint64_t)(v112 & ~(-1 << v84)) << v110++;
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v110, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v117 = 0;
    v118 = 0;
    v119 = 1;
    v120 = v83;
    v121 = result;
    v122 = v84;
    v123 = v80;
    do
    {
      v124 = v120;
      if (v124)
        --v122;
      else
        v122 = 0;
      v125 = v117 + v124;
      --v123;
      if (v121)
        v118 |= (unint64_t)(v119 & v100) << v125++;
      else
        v123 = 0;
      v119 *= 2;
      v117 = v125 - 1;
      v121 = v123 != 0;
      v120 = v122 != 0;
    }
    while (v123 | v122);
    v126 = 0;
    v127 = 0;
    v128 = 1;
    v129 = v83;
    v130 = result;
    v131 = v84;
    v132 = v80;
    do
    {
      --v131;
      if (v129)
      {
        v127 |= (unint64_t)(v128 & v93) << v126;
        v133 = v126 + 1;
      }
      else
      {
        v131 = 0;
        v133 = v126;
      }
      if (v130)
        --v132;
      else
        v132 = 0;
      v128 *= 2;
      v126 = (__PAIR64__(v133, v130) - 1) >> 32;
      v130 = v132 != 0;
      v129 = v131 != 0;
    }
    while (v132 | v131);
    v15 = a7;
    if (!v99)
      goto LABEL_103;
LABEL_153:
    if (v94)
    {
      v134 = 0;
      v135 = (_OWORD *)((char *)&a2[4 * (v100 + ((v95 - v282) << v67) - v85)] + v278);
      v136 = (v95 + v280) * a12[3] * *((unsigned __int8 *)a12 + 9) + v269;
      do
      {
        v137 = v99;
        v138 = v135;
        v139 = v118;
        do
        {
          v140 = (__int128 *)(v136 + ((v139 + v127) << 6));
          v141 = *v140;
          v142 = v140[1];
          v143 = v140[3];
          v138[2] = v140[2];
          v138[3] = v143;
          *v138 = v141;
          v138[1] = v142;
          v138 += 4;
          v139 = (v139 - v102) & v102;
          --v137;
        }
        while (v137);
        v127 = (v127 - v111) & v111;
        v135 = (_OWORD *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v291);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v255 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v144 = a6 >> v20;
    v145 = 1 << v21;
    v146 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v146 = 0;
    v147 = v145 >= a5;
    if (v145 < a5)
      v148 = v21 + v20 + v146;
    else
      v148 = *((_BYTE *)a12 + 12);
    if (v147)
      LOBYTE(v149) = *((_BYTE *)a12 + 13);
    else
      v149 = -v146;
    if (!v144)
      v21 = v148;
    v249 = v21;
    if (v144)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v149;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v249 = v22;
    v23 = v21 + v20 - v22;
  }
  v150 = v269;
  v152 = a8;
  v151 = a10;
  v248 = v297;
  if (v297)
  {
    v153 = 1 << v23;
    v247 = 1 << v249;
    if (1 << v249 >= a5)
      v154 = a5;
    else
      v154 = 1 << v249;
    v155 = 32 - __clz(v154 - 1);
    v156 = v154 > 1;
    if (v154 <= 1)
      v157 = 0;
    else
      v157 = v155;
    if (v153 >= a6)
      v158 = a6;
    else
      v158 = 1 << v23;
    v159 = 32 - __clz(v158 - 1);
    v160 = v298;
    if (v158 <= 1)
      v159 = 0;
    v281 = v158 > 1;
    v283 = v159;
    v279 = v295;
    v275 = v295 != 0;
    v277 = v296;
    v273 = v296 != 0;
    if (v298)
    {
      v161 = 0;
      v162 = 0;
      v246 = v15 >> v249;
      v267 = a8 >> v23;
      v289 = v299;
      v290 = v294;
      v285 = v296 | v295;
      v245 = a9 + v15;
      v244 = (v247 - 1) & (a9 + v15);
      v243 = v292;
      v287 = v293;
      v242 = (v247 - 1) & v15;
      v262 = (v153 - 1) & a8;
      v264 = (v153 - 1) & (a10 + a8);
      v260 = v153 - v262;
      v163 = ~(-1 << v157);
      v258 = v298;
      v259 = v159 | v157;
      v164 = ~(-1 << v159);
      v271 = v157;
      v251 = 1 << v23;
      v252 = v23;
      do
      {
        v250 = v162;
        v165 = 0;
        v166 = 0;
        v167 = a9;
        if (v245 >= (v161 + v246 + 1) << v249)
          v167 = v247 - v242;
        v168 = 1 << v249;
        if (v245 < (v161 + v246 + 1) << v249)
          v168 = v244;
        v169 = (v161 + v246) << v249 >= v15;
        v170 = v243 + v161;
        v171 = v161 << v249;
        if (v169)
          v172 = v168;
        else
          v172 = v167;
        if (v169)
          v173 = 0;
        else
          v173 = v242;
        v254 = &v255[4 * (unint64_t)(v173 + v171)];
        do
        {
          v174 = v287 + v165;
          if (v289)
          {
            v175 = v285;
            if (v285)
            {
              v176 = 0;
              v175 = 0;
              v177 = 1;
              v178 = v273;
              v179 = v275;
              v181 = v277;
              v180 = v279;
              do
              {
                --v180;
                if (v179)
                  v175 |= (v177 & v170) << v176;
                else
                  v180 = 0;
                if (v179)
                  ++v176;
                --v181;
                if (v178)
                  v175 |= (v177 & v174) << v176;
                else
                  v181 = 0;
                if (v178)
                  ++v176;
                v177 *= 2;
                --v176;
                v178 = v181 != 0;
                v179 = v180 != 0;
              }
              while (v181 | v180);
            }
          }
          else
          {
            v175 = v285;
            if (v285)
            {
              v182 = 0;
              v175 = 0;
              v183 = 1;
              v185 = v273;
              v184 = v275;
              v186 = v277;
              v187 = v279;
              do
              {
                --v186;
                if (v185)
                  v175 |= (v183 & v174) << v182;
                else
                  v186 = 0;
                if (v185)
                  ++v182;
                --v187;
                if (v184)
                  v175 |= (v183 & v170) << v182;
                else
                  v187 = 0;
                if (v184)
                  ++v182;
                v183 *= 2;
                --v182;
                v184 = v187 != 0;
                v185 = v186 != 0;
              }
              while (v187 | v186);
            }
          }
          v188 = *(_DWORD *)(v150 + 4 * ((v175 + v290) | ((v175 + v290) >> 8 << 9)));
          if (v188 < 0)
          {
            v189 = v150 - *((_QWORD *)a13 + 3) + ((unint64_t)(v188 & 0x3FFFFFF) << 14);
            result = *a13;
            v190 = a13[2];
            if (result > v190)
            {
              result = get_level_offset_within_tail(result, v190, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v157 = v271;
              v153 = v251;
              v23 = v252;
              v18 = a11;
              v152 = a8;
              v151 = a10;
              v150 = v269;
              v189 += result;
            }
            v191 = (v165 + v267) << v23;
            v192 = v260;
            if (a10 + a8 >= (v165 + v267 + 1) << v23)
            {
              v193 = v153;
            }
            else
            {
              v192 = v151;
              v193 = v264;
            }
            if (v191 >= v152)
              v194 = 0;
            else
              v194 = v262;
            if (v191 >= v152)
              v192 = v193;
            if (!v259)
            {
              v212 = 0;
              v196 = 0;
              v205 = 0;
              v221 = 0;
              v160 = v258;
              if (!v172)
                goto LABEL_198;
LABEL_271:
              if (v192)
              {
                v226 = 0;
                v227 = (_OWORD *)((char *)v254 + (v194 + (v165 << v23)) * v18);
                do
                {
                  v228 = v172;
                  v229 = v227;
                  v230 = v212;
                  do
                  {
                    result = v189 + ((v230 + v221) << 6);
                    v231 = *(_OWORD *)result;
                    v232 = *(_OWORD *)(result + 16);
                    v233 = *(_OWORD *)(result + 48);
                    v229[2] = *(_OWORD *)(result + 32);
                    v229[3] = v233;
                    *v229 = v231;
                    v229[1] = v232;
                    v229 += 4;
                    v230 = (v230 - v196) & v196;
                    --v228;
                  }
                  while (v228);
                  v221 = (v221 - v205) & v205;
                  v227 = (_OWORD *)((char *)v227 + v18);
                  ++v226;
                }
                while (v226 != v192);
              }
              goto LABEL_198;
            }
            v195 = 0;
            v196 = 0;
            v197 = 1;
            v199 = v281;
            v198 = v283;
            v200 = v156;
            v201 = v157;
            do
            {
              --v198;
              v202 = v199;
              if (!v202)
                v198 = 0;
              v203 = v195 + v202;
              --v201;
              if (v200)
                v196 |= (unint64_t)(v197 & v163) << v203++;
              else
                v201 = 0;
              v197 *= 2;
              v195 = v203 - 1;
              v200 = v201 != 0;
              v199 = v198 != 0;
            }
            while (v201 | v198);
            v204 = 0;
            v205 = 0;
            v206 = 1;
            v208 = v281;
            v207 = v283;
            v209 = v156;
            v210 = v157;
            do
            {
              --v207;
              if (v208)
                v205 |= (unint64_t)(v206 & v164) << v204++;
              else
                v207 = 0;
              --v210;
              if (!v209)
                v210 = 0;
              v206 *= 2;
              v204 = (__PAIR64__(v204, v209) - 1) >> 32;
              v209 = v210 != 0;
              v208 = v207 != 0;
            }
            while (v210 | v207);
            v211 = 0;
            v212 = 0;
            v213 = 1;
            v214 = v281;
            v215 = v283;
            v216 = v156;
            v217 = v157;
            do
            {
              --v215;
              v218 = v214;
              if (!v218)
                v215 = 0;
              v219 = v211 + v218;
              --v217;
              if (v216)
                v212 |= (unint64_t)(v213 & v173) << v219++;
              else
                v217 = 0;
              v213 *= 2;
              v211 = v219 - 1;
              v216 = v217 != 0;
              v214 = v215 != 0;
            }
            while (v217 | v215);
            v220 = 0;
            v221 = 0;
            v222 = 1;
            v223 = v281;
            v224 = v283;
            v225 = v156;
            LODWORD(result) = v157;
            do
            {
              --v224;
              if (v223)
                v221 |= (unint64_t)(v222 & v194) << v220++;
              else
                v224 = 0;
              LODWORD(result) = result - 1;
              if (v225)
                result = result;
              else
                result = 0;
              v222 *= 2;
              v220 = (__PAIR64__(v220, v225) - 1) >> 32;
              v225 = (_DWORD)result != 0;
              v223 = v224 != 0;
            }
            while (result | v224);
            v157 = v271;
            v160 = v258;
            if (v172)
              goto LABEL_271;
          }
LABEL_198:
          v165 = (unsigned __int16)++v166;
        }
        while (v160 > (unsigned __int16)v166);
        v162 = v250 + 1;
        v161 = (unsigned __int16)(v250 + 1);
        v15 = a7;
      }
      while (v248 > v161);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,4ul,2u,(TwiddleOrder)0>>(uint64_t result, _QWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _QWORD *v13;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  char v62;
  BOOL v63;
  char v64;
  int v65;
  unsigned int v66;
  int v68;
  char v69;
  unsigned int v70;
  BOOL v71;
  BOOL v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  int v102;
  BOOL v103;
  BOOL v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  int v120;
  BOOL v121;
  BOOL v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  int v130;
  BOOL v131;
  BOOL v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  _QWORD *v137;
  uint64_t v138;
  int v139;
  _QWORD *v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  char v146;
  int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  _BOOL8 v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  BOOL v158;
  int v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  BOOL v172;
  BOOL v173;
  int v174;
  int v175;
  int v176;
  int v177;
  BOOL v178;
  BOOL v179;
  int v180;
  int v181;
  int v182;
  unint64_t v183;
  unsigned int v184;
  _BOOL8 v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  int v190;
  uint64_t v191;
  int v192;
  BOOL v193;
  BOOL v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  int v201;
  BOOL v202;
  BOOL v203;
  unsigned int v204;
  unsigned int v205;
  int v206;
  uint64_t v207;
  int v208;
  BOOL v209;
  BOOL v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  int v217;
  BOOL v218;
  BOOL v219;
  unsigned int v220;
  int v221;
  uint64_t *v222;
  int v223;
  uint64_t *v224;
  uint64_t v225;
  int i;
  int v227;
  _QWORD *v228;
  uint64_t v229;
  int v230;
  int v231;
  int v232;
  unsigned int v233;
  unsigned int v234;
  int v235;
  unsigned int v236;
  char v237;
  int v238;
  int v239;
  char v240;
  uint64_t v241;
  _QWORD *v242;
  unsigned int v245;
  unsigned int v246;
  int v247;
  int v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  unsigned int v253;
  int v254;
  char v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  BOOL v260;
  unsigned int v261;
  BOOL v262;
  uint64_t v263;
  BOOL v264;
  int v265;
  int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  int v270;
  int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  int v276;
  char v277[16];
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned __int8 v285;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v17 = result;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        --v52;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        else
          v52 = 0;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      LODWORD(result) = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(result & a8) << v55;
          v57 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v57 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        result = (2 * result);
        v55 = (__PAIR64__(v57, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v227 = a9;
        v228 = v13;
        v229 = v47;
        do
        {
          *v228++ = *(_QWORD *)(v17 + 8 * (v229 + v56));
          v229 = (v229 - v31) & v31;
          --v227;
        }
        while (v227);
        v56 = (v56 - v40) & v40;
        v13 = (_QWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v245 = a7;
  if (!*((_BYTE *)a12 + 20))
  {
    v58 = *((unsigned __int8 *)a12 + 13);
    v59 = *((unsigned __int8 *)a12 + 12);
    v60 = 1 << v58;
    v61 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v61 = 0;
    v62 = v59 + v58;
    result = v59 + v58 + v61;
    if (a6 >> v58)
      v63 = 1;
    else
      v63 = 1 << v59 >= a5;
    if (v63)
      v64 = *((_BYTE *)a12 + 12);
    else
      v64 = v59 + v58 + v61;
    if (v63)
      LOBYTE(v65) = *((_BYTE *)a12 + 13);
    else
      v65 = -v61;
    v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v66) = 0;
    if (v60 < a6 && a5 >> v59 == 0)
      LOBYTE(v65) = v62 - v66;
    else
      LOBYTE(v66) = v64;
    v68 = 1 << v65;
    v69 = *((_BYTE *)a12 + 15);
    v70 = 1 << v69;
    if (v69)
      v71 = v70 > a3;
    else
      v71 = 1;
    v72 = v71 || v70 > a4;
    v73 = (~(-1 << v69) + a3) & (-1 << v69);
    if (v72)
      v74 = a3;
    else
      v74 = v73;
    v259 = 1 << v65;
    v75 = v68 - 1;
    v255 = v65;
    v256 = a10 + a8;
    v258 = a8 >> v65;
    v253 = (v68 - 1 + a10 + a8) >> v65;
    if (a8 >> v65 >= v253)
      return result;
    v76 = (1 << v66) - 1;
    v274 = a9 + a7;
    if (1 << v66 >= a5)
      v77 = a5;
    else
      v77 = 1 << v66;
    v78 = 32 - __clz(v77 - 1);
    result = v77 > 1;
    if (v77 <= 1)
      v79 = 0;
    else
      v79 = v78;
    v80 = v259;
    if (v259 >= a6)
      v80 = a6;
    v81 = 32 - __clz(v80 - 1);
    v82 = v80 > 1;
    v83 = v80 <= 1 ? 0 : v81;
    v267 = a7 >> v66;
    v272 = (v76 + a9 + a7) >> v66;
    if (a7 >> v66 >= v272)
      return result;
    v251 = (v74 + ~(-1 << v66)) >> v66;
    v84 = v76 & a7;
    v270 = v76 & v274;
    v247 = v75 & v256;
    v249 = v75 & a8;
    v85 = v258;
LABEL_90:
    v86 = v85 << v255;
    v87 = v85 - v258;
    v265 = v85 * v251;
    v261 = v85 + 1;
    v88 = v256 >= (v85 + 1) << v255;
    v89 = v259;
    if (!v88)
      v89 = v247;
    v90 = v259 - v249;
    if (!v88)
      v90 = v19;
    v91 = v87 << v255;
    if (v86 >= a8)
      v92 = 0;
    else
      v92 = v249;
    if (v86 >= a8)
      v93 = v89;
    else
      v93 = v90;
    v263 = (v92 + v91 - v249) * a11;
    v94 = v267;
    while (1)
    {
      v95 = v94 << v66;
      v96 = v94 + 1;
      v97 = a9;
      if (v274 >= (v94 + 1) << v66)
        v97 = (1 << v66) - v84;
      v98 = 1 << v66;
      if (v274 < v96 << v66)
        v98 = v270;
      if (v95 >= a7)
        v99 = 0;
      else
        v99 = v84;
      if (v95 < a7)
        v98 = v97;
      if (v83 | v79)
        break;
      v119 = 0;
      v101 = 0;
      v111 = 0;
      v129 = 0;
      if (v98)
        goto LABEL_151;
LABEL_101:
      v94 = v96;
      if (v96 == v272)
      {
        v85 = v261;
        v19 = a10;
        if (v261 == v253)
          return result;
        goto LABEL_90;
      }
    }
    v100 = 0;
    v101 = 0;
    v102 = 1;
    v103 = v82;
    v104 = result;
    v105 = v83;
    v106 = v79;
    do
    {
      v107 = v103;
      if (v107)
        --v105;
      else
        v105 = 0;
      v108 = v100 + v107;
      if (v104)
        --v106;
      else
        v106 = 0;
      if (v104)
      {
        v101 |= (unint64_t)(v102 & ~(-1 << v79)) << v108;
        v109 = v108 + 1;
      }
      else
      {
        v109 = v108;
      }
      v102 *= 2;
      v100 = v109 - 1;
      v104 = v106 != 0;
      v103 = v105 != 0;
    }
    while (v106 | v105);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v82;
    v114 = result;
    v115 = v83;
    v116 = v79;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
      {
        v111 |= (unint64_t)(v112 & ~(-1 << v83)) << v110;
        v117 = v110 + 1;
      }
      else
      {
        v117 = v110;
      }
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v117, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v118 = 0;
    v119 = 0;
    v120 = 1;
    v121 = v82;
    v122 = result;
    v123 = v83;
    v124 = v79;
    do
    {
      v125 = v121;
      if (v125)
        --v123;
      else
        v123 = 0;
      v126 = v118 + v125;
      --v124;
      if (v122)
      {
        v119 |= (unint64_t)(v120 & v99) << v126;
        v127 = v126 + 1;
      }
      else
      {
        v124 = 0;
        v127 = v126;
      }
      v120 *= 2;
      v118 = v127 - 1;
      v122 = v124 != 0;
      v121 = v123 != 0;
    }
    while (v124 | v123);
    v128 = 0;
    v129 = 0;
    v130 = 1;
    v131 = v82;
    v132 = result;
    v133 = v83;
    v134 = v79;
    do
    {
      --v133;
      if (v131)
      {
        v129 |= (unint64_t)(v130 & v92) << v128;
        v135 = v128 + 1;
      }
      else
      {
        v133 = 0;
        v135 = v128;
      }
      --v134;
      if (!v132)
        v134 = 0;
      v130 *= 2;
      v128 = (__PAIR64__(v135, v132) - 1) >> 32;
      v132 = v134 != 0;
      v131 = v133 != 0;
    }
    while (v134 | v133);
    v13 = a2;
    a7 = v245;
    if (!v98)
      goto LABEL_101;
LABEL_151:
    if (v93)
    {
      v136 = 0;
      v137 = (_QWORD *)((char *)&v13[v99 + ((v94 - v267) << v66) - v84] + v263);
      v138 = (v94 + v265) * a12[3] * *((unsigned __int8 *)a12 + 9) + v17;
      do
      {
        v139 = v98;
        v140 = v137;
        v141 = v119;
        do
        {
          *v140++ = *(_QWORD *)(v138 + 8 * (v141 + v129));
          v141 = (v141 - v101) & v101;
          --v139;
        }
        while (v139);
        v129 = (v129 - v111) & v111;
        v137 = (_QWORD *)((char *)v137 + a11);
        ++v136;
      }
      while (v136 != v93);
    }
    goto LABEL_101;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v277);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v142 = a6 >> v20;
    v143 = 1 << v21;
    v144 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v144 = 0;
    v145 = v143 >= a5;
    if (v143 < a5)
      v146 = v21 + v20 + v144;
    else
      v146 = *((_BYTE *)a12 + 12);
    if (v145)
      LOBYTE(v147) = *((_BYTE *)a12 + 13);
    else
      v147 = -v144;
    if (!v142)
      v21 = v146;
    v237 = v21;
    if (v142)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v147;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v237 = v22;
    v23 = v21 + v20 - v22;
  }
  v148 = a10;
  v149 = a8;
  v236 = v283;
  if (v283)
  {
    v150 = 1 << v23;
    v235 = 1 << v237;
    if (1 << v237 >= a5)
      v151 = a5;
    else
      v151 = 1 << v237;
    v152 = 32 - __clz(v151 - 1);
    v153 = v151 > 1;
    if (v151 <= 1)
      v154 = 0;
    else
      v154 = v152;
    if (v150 >= a6)
      v155 = a6;
    else
      v155 = 1 << v23;
    v156 = 32 - __clz(v155 - 1);
    v157 = v284;
    v158 = v155 > 1;
    if (v155 <= 1)
      v156 = 0;
    v268 = v281;
    v269 = v156;
    v264 = v281 != 0;
    v266 = v282;
    v262 = v282 != 0;
    if (v284)
    {
      v159 = 0;
      v234 = a7 >> v237;
      v257 = a8 >> v23;
      v271 = v282 | v281;
      v275 = v285;
      v276 = v280;
      v233 = a9 + a7;
      v232 = (v235 - 1) & (a9 + a7);
      v230 = v278;
      v273 = v279;
      v231 = (v235 - 1) & a7;
      v252 = (v150 - 1) & a8;
      v254 = (v150 - 1) & (a10 + a8);
      v250 = v150 - v252;
      v246 = v284;
      v248 = v156 | v154;
      v160 = ~(-1 << v156);
      v260 = v155 > 1;
      v241 = v17;
      v239 = 1 << v23;
      v240 = v23;
      do
      {
        v161 = 0;
        v162 = v230 + v159;
        v163 = (v159 + v234) << v237;
        v164 = a9;
        if (v233 >= (v159 + v234 + 1) << v237)
          v164 = v235 - v231;
        v165 = 1 << v237;
        if (v233 < (v159 + v234 + 1) << v237)
          v165 = v232;
        v238 = v159;
        if (v163 >= v245)
          v166 = v165;
        else
          v166 = v164;
        if (v163 >= v245)
          v167 = 0;
        else
          v167 = v231;
        v242 = &a2[v167 + (v159 << v237)];
        do
        {
          v168 = v273 + v161;
          if (v275)
          {
            v169 = v271;
            if (v271)
            {
              v170 = 0;
              v169 = 0;
              v171 = 1;
              v172 = v262;
              v173 = v264;
              v175 = v266;
              v174 = v268;
              do
              {
                --v174;
                if (v173)
                  v169 |= (v171 & v162) << v170;
                else
                  v174 = 0;
                if (v173)
                  ++v170;
                --v175;
                if (v172)
                  v169 |= (v171 & v168) << v170;
                else
                  v175 = 0;
                if (v172)
                  ++v170;
                v171 *= 2;
                --v170;
                v172 = v175 != 0;
                v173 = v174 != 0;
              }
              while (v175 | v174);
            }
          }
          else
          {
            v169 = v271;
            if (v271)
            {
              v176 = 0;
              v169 = 0;
              v177 = 1;
              v179 = v262;
              v178 = v264;
              v180 = v266;
              v181 = v268;
              do
              {
                --v180;
                if (v179)
                  v169 |= (v177 & v168) << v176;
                else
                  v180 = 0;
                if (v179)
                  ++v176;
                --v181;
                if (v178)
                  v169 |= (v177 & v162) << v176;
                else
                  v181 = 0;
                if (v178)
                  ++v176;
                v177 *= 2;
                --v176;
                v178 = v181 != 0;
                v179 = v180 != 0;
              }
              while (v181 | v180);
            }
          }
          v182 = *(_DWORD *)(v17 + 4 * ((v169 + v276) | ((v169 + v276) >> 8 << 9)));
          if (v182 < 0)
          {
            v183 = v17 - *((_QWORD *)a13 + 3) + ((unint64_t)(v182 & 0x3FFFFFF) << 14);
            result = *a13;
            v184 = a13[2];
            if (result > v184)
            {
              v185 = v153;
              result = get_level_offset_within_tail(result, v184, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v158 = v260;
              v153 = v185;
              v150 = v239;
              v23 = v240;
              v17 = v241;
              v18 = a11;
              v149 = a8;
              v148 = a10;
              v183 += result;
            }
            v186 = (v161 + v257) << v23;
            v187 = v250;
            if (a10 + a8 >= (v161 + v257 + 1) << v23)
            {
              v188 = v150;
            }
            else
            {
              v187 = v148;
              v188 = v254;
            }
            if (v186 >= v149)
              v189 = 0;
            else
              v189 = v252;
            if (v186 >= v149)
              v187 = v188;
            if (!v248)
            {
              v207 = 0;
              v191 = 0;
              v200 = 0;
              v216 = 0;
              v157 = v246;
              if (!v166)
                goto LABEL_196;
LABEL_269:
              if (v187)
              {
                v221 = 0;
                v222 = (_QWORD *)((char *)v242 + (v189 + (v161 << v23)) * v18);
                do
                {
                  v223 = v166;
                  v224 = v222;
                  v225 = v207;
                  do
                  {
                    result = *(_QWORD *)(v183 + 8 * (v225 + v216));
                    *v224++ = result;
                    v225 = (v225 - v191) & v191;
                    --v223;
                  }
                  while (v223);
                  v216 = (v216 - v200) & v200;
                  v222 = (uint64_t *)((char *)v222 + v18);
                  ++v221;
                }
                while (v221 != v187);
              }
              goto LABEL_196;
            }
            v190 = 0;
            v191 = 0;
            v192 = 1;
            v193 = v158;
            v194 = v153;
            v195 = v269;
            v196 = v154;
            do
            {
              --v195;
              v197 = v193;
              if (!v197)
                v195 = 0;
              v198 = v190 + v197;
              --v196;
              if (v194)
                v191 |= (unint64_t)(v192 & ~(-1 << v154)) << v198++;
              else
                v196 = 0;
              v192 *= 2;
              v190 = v198 - 1;
              v194 = v196 != 0;
              v193 = v195 != 0;
            }
            while (v196 | v195);
            v199 = 0;
            v200 = 0;
            v201 = 1;
            v202 = v158;
            v203 = v153;
            v204 = v269;
            v205 = v154;
            do
            {
              --v204;
              if (v202)
                v200 |= (unint64_t)(v201 & v160) << v199++;
              else
                v204 = 0;
              --v205;
              if (!v203)
                v205 = 0;
              v201 *= 2;
              v199 = (__PAIR64__(v199, v203) - 1) >> 32;
              v203 = v205 != 0;
              v202 = v204 != 0;
            }
            while (v205 | v204);
            v206 = 0;
            v207 = 0;
            v208 = 1;
            v209 = v158;
            v210 = v153;
            v211 = v269;
            v212 = v154;
            do
            {
              --v211;
              v213 = v209;
              if (!v213)
                v211 = 0;
              v214 = v206 + v213;
              --v212;
              if (v210)
                v207 |= (unint64_t)(v208 & v167) << v214++;
              else
                v212 = 0;
              v208 *= 2;
              v206 = v214 - 1;
              v210 = v212 != 0;
              v209 = v211 != 0;
            }
            while (v212 | v211);
            v215 = 0;
            v216 = 0;
            v217 = 1;
            v218 = v158;
            v219 = v153;
            v220 = v269;
            LODWORD(result) = v154;
            do
            {
              --v220;
              if (v218)
                v216 |= (unint64_t)(v217 & v189) << v215++;
              else
                v220 = 0;
              LODWORD(result) = result - 1;
              if (v219)
                result = result;
              else
                result = 0;
              v217 *= 2;
              v215 = (__PAIR64__(v215, v219) - 1) >> 32;
              v219 = (_DWORD)result != 0;
              v218 = v220 != 0;
            }
            while (result | v220);
            v157 = v246;
            v158 = v260;
            if (v166)
              goto LABEL_269;
          }
LABEL_196:
          ++v161;
        }
        while (v157 > (unsigned __int16)v161);
        v159 = v238 + 1;
      }
      while (v236 > (unsigned __int16)(v238 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,4ul,4u,(TwiddleOrder)0>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _OWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  BOOL v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  _OWORD *v135;
  uint64_t v136;
  int v137;
  _OWORD *v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  BOOL v143;
  char v144;
  int v145;
  uint64_t v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  BOOL v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  BOOL v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  BOOL v174;
  BOOL v175;
  int v176;
  int v177;
  int v178;
  int v179;
  BOOL v180;
  BOOL v181;
  int v182;
  int v183;
  int v184;
  unint64_t v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  int v190;
  int v191;
  uint64_t v192;
  int v193;
  unsigned int v194;
  BOOL v195;
  BOOL v196;
  unsigned int v197;
  int v198;
  int v199;
  unsigned int v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  BOOL v204;
  BOOL v205;
  unsigned int v206;
  int v207;
  uint64_t v208;
  int v209;
  BOOL v210;
  unsigned int v211;
  BOOL v212;
  unsigned int v213;
  int v214;
  int v215;
  unsigned int v216;
  uint64_t v217;
  int v218;
  BOOL v219;
  unsigned int v220;
  BOOL v221;
  int v222;
  _OWORD *v223;
  int v224;
  _OWORD *v225;
  uint64_t v226;
  int i;
  int v228;
  _OWORD *v229;
  uint64_t v230;
  int v231;
  int v232;
  int v233;
  unsigned int v234;
  unsigned int v235;
  int v236;
  unsigned int v237;
  char v238;
  int v239;
  int v240;
  char v241;
  _OWORD *v243;
  _OWORD *v244;
  unsigned int v247;
  int v248;
  unsigned int v249;
  int v250;
  int v251;
  uint64_t v252;
  int v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  char v257;
  uint64_t v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  BOOL v262;
  unsigned int v263;
  BOOL v264;
  unsigned int v265;
  int v266;
  uint64_t v267;
  int v268;
  int v269;
  BOOL v270;
  unsigned int v271;
  unsigned int v272;
  int v273;
  int v274;
  unsigned int v275;
  int v276;
  unsigned int v277;
  int v278;
  int v279;
  char v280[16];
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned __int8 v288;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v228 = a9;
        v229 = v13;
        v230 = v47;
        do
        {
          *v229++ = *(_OWORD *)(result + 16 * (v230 + v56));
          v230 = (v230 - v31) & v31;
          --v228;
        }
        while (v228);
        v56 = (v56 - v40) & v40;
        v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v258 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v261 = a8 >> v66;
    v263 = 1 << v66;
    v76 = v69 - 1;
    v259 = a10 + a8;
    v255 = (v69 - 1 + a10 + a8) >> v66;
    v257 = v66;
    if (a8 >> v66 >= v255)
      return result;
    v77 = (1 << v67) - 1;
    v277 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v263;
    if (v263 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v271 = a7 >> v67;
    v275 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v275)
      return result;
    v254 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v273 = v77 & v277;
    v250 = v76 & v259;
    v252 = v76 & a8;
    v86 = v261;
LABEL_92:
    v87 = v86 << v257;
    v88 = v86 - v261;
    v269 = v86 * v254;
    v265 = v86 + 1;
    v89 = v259 >= (v86 + 1) << v257;
    v90 = v263;
    if (!v89)
      v90 = v250;
    v91 = v263 - v252;
    if (!v89)
      v91 = v19;
    v92 = v88 << v257;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v252;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v267 = (v93 + v92 - v252) * a11;
    v95 = v271;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      if (v277 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      else
        v98 = a9;
      v99 = v273;
      if (v277 >= v97 << v67)
        v99 = 1 << v67;
      if (v96 >= v15)
        v100 = 0;
      else
        v100 = v85;
      if (v96 < v15)
        v99 = v98;
      if (v84 | v80)
        break;
      v118 = 0;
      v102 = 0;
      v111 = 0;
      v127 = 0;
      if (v99)
        goto LABEL_153;
LABEL_103:
      v95 = v97;
      if (v97 == v275)
      {
        v86 = v265;
        v14 = a8;
        v19 = a10;
        if (v265 == v255)
          return result;
        goto LABEL_92;
      }
    }
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v104 = v83;
    v105 = result;
    v106 = v84;
    v107 = v80;
    do
    {
      v108 = v104;
      if (v108)
        --v106;
      else
        v106 = 0;
      v109 = v101 + v108;
      if (v105)
        --v107;
      else
        v107 = 0;
      if (v105)
        v102 |= (unint64_t)(v103 & ~(-1 << v80)) << v109++;
      v103 *= 2;
      v101 = v109 - 1;
      v105 = v107 != 0;
      v104 = v106 != 0;
    }
    while (v107 | v106);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v83;
    v114 = result;
    v115 = v84;
    v116 = v80;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
        v111 |= (unint64_t)(v112 & ~(-1 << v84)) << v110++;
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v110, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v117 = 0;
    v118 = 0;
    v119 = 1;
    v120 = v83;
    v121 = result;
    v122 = v84;
    v123 = v80;
    do
    {
      v124 = v120;
      if (v124)
        --v122;
      else
        v122 = 0;
      v125 = v117 + v124;
      --v123;
      if (v121)
        v118 |= (unint64_t)(v119 & v100) << v125++;
      else
        v123 = 0;
      v119 *= 2;
      v117 = v125 - 1;
      v121 = v123 != 0;
      v120 = v122 != 0;
    }
    while (v123 | v122);
    v126 = 0;
    v127 = 0;
    v128 = 1;
    v129 = v83;
    v130 = result;
    v131 = v84;
    v132 = v80;
    do
    {
      --v131;
      if (v129)
      {
        v127 |= (unint64_t)(v128 & v93) << v126;
        v133 = v126 + 1;
      }
      else
      {
        v131 = 0;
        v133 = v126;
      }
      if (v130)
        --v132;
      else
        v132 = 0;
      v128 *= 2;
      v126 = (__PAIR64__(v133, v130) - 1) >> 32;
      v130 = v132 != 0;
      v129 = v131 != 0;
    }
    while (v132 | v131);
    v15 = a7;
    if (!v99)
      goto LABEL_103;
LABEL_153:
    if (v94)
    {
      v134 = 0;
      v135 = (_OWORD *)((char *)&a2[v100 + ((v95 - v271) << v67) - v85] + v267);
      v136 = (v95 + v269) * a12[3] * *((unsigned __int8 *)a12 + 9) + v258;
      do
      {
        v137 = v99;
        v138 = v135;
        v139 = v118;
        do
        {
          *v138++ = *(_OWORD *)(v136 + 16 * (v139 + v127));
          v139 = (v139 - v102) & v102;
          --v137;
        }
        while (v137);
        v127 = (v127 - v111) & v111;
        v135 = (_OWORD *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v280);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v244 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v140 = a6 >> v20;
    v141 = 1 << v21;
    v142 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v142 = 0;
    v143 = v141 >= a5;
    if (v141 < a5)
      v144 = v21 + v20 + v142;
    else
      v144 = *((_BYTE *)a12 + 12);
    if (v143)
      LOBYTE(v145) = *((_BYTE *)a12 + 13);
    else
      v145 = -v142;
    if (!v140)
      v21 = v144;
    v238 = v21;
    if (v140)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v145;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v238 = v22;
    v23 = v21 + v20 - v22;
  }
  v146 = v258;
  v148 = a8;
  v147 = a10;
  v237 = v286;
  if (v286)
  {
    v149 = 1 << v23;
    v236 = 1 << v238;
    if (1 << v238 >= a5)
      v150 = a5;
    else
      v150 = 1 << v238;
    v151 = 32 - __clz(v150 - 1);
    v152 = v150 > 1;
    if (v150 <= 1)
      v153 = 0;
    else
      v153 = v151;
    if (v149 >= a6)
      v154 = a6;
    else
      v154 = 1 << v23;
    v155 = 32 - __clz(v154 - 1);
    v156 = v287;
    if (v154 <= 1)
      v155 = 0;
    v270 = v154 > 1;
    v272 = v155;
    v268 = v284;
    v264 = v284 != 0;
    v266 = v285;
    v262 = v285 != 0;
    if (v287)
    {
      v157 = 0;
      v158 = 0;
      v235 = v15 >> v238;
      v256 = a8 >> v23;
      v278 = v288;
      v279 = v283;
      v274 = v285 | v284;
      v234 = a9 + v15;
      v233 = (v236 - 1) & (a9 + v15);
      v232 = v281;
      v276 = v282;
      v231 = (v236 - 1) & v15;
      v251 = (v149 - 1) & a8;
      v253 = (v149 - 1) & (a10 + a8);
      v249 = v149 - v251;
      v159 = ~(-1 << v153);
      v247 = v287;
      v248 = v155 | v153;
      v160 = ~(-1 << v155);
      v260 = v153;
      v240 = 1 << v23;
      v241 = v23;
      do
      {
        v239 = v158;
        v161 = 0;
        v162 = 0;
        v163 = a9;
        if (v234 >= (v157 + v235 + 1) << v238)
          v163 = v236 - v231;
        v164 = 1 << v238;
        if (v234 < (v157 + v235 + 1) << v238)
          v164 = v233;
        v165 = (v157 + v235) << v238 >= v15;
        v166 = v232 + v157;
        v167 = v157 << v238;
        if (v165)
          v168 = v164;
        else
          v168 = v163;
        if (v165)
          v169 = 0;
        else
          v169 = v231;
        v243 = &v244[v169 + v167];
        do
        {
          v170 = v276 + v161;
          if (v278)
          {
            v171 = v274;
            if (v274)
            {
              v172 = 0;
              v171 = 0;
              v173 = 1;
              v174 = v262;
              v175 = v264;
              v177 = v266;
              v176 = v268;
              do
              {
                --v176;
                if (v175)
                  v171 |= (v173 & v166) << v172;
                else
                  v176 = 0;
                if (v175)
                  ++v172;
                --v177;
                if (v174)
                  v171 |= (v173 & v170) << v172;
                else
                  v177 = 0;
                if (v174)
                  ++v172;
                v173 *= 2;
                --v172;
                v174 = v177 != 0;
                v175 = v176 != 0;
              }
              while (v177 | v176);
            }
          }
          else
          {
            v171 = v274;
            if (v274)
            {
              v178 = 0;
              v171 = 0;
              v179 = 1;
              v181 = v262;
              v180 = v264;
              v182 = v266;
              v183 = v268;
              do
              {
                --v182;
                if (v181)
                  v171 |= (v179 & v170) << v178;
                else
                  v182 = 0;
                if (v181)
                  ++v178;
                --v183;
                if (v180)
                  v171 |= (v179 & v166) << v178;
                else
                  v183 = 0;
                if (v180)
                  ++v178;
                v179 *= 2;
                --v178;
                v180 = v183 != 0;
                v181 = v182 != 0;
              }
              while (v183 | v182);
            }
          }
          v184 = *(_DWORD *)(v146 + 4 * ((v171 + v279) | ((v171 + v279) >> 8 << 9)));
          if (v184 < 0)
          {
            v185 = v146 - *((_QWORD *)a13 + 3) + ((unint64_t)(v184 & 0x3FFFFFF) << 14);
            result = *a13;
            v186 = a13[2];
            if (result > v186)
            {
              result = get_level_offset_within_tail(result, v186, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v153 = v260;
              v149 = v240;
              v23 = v241;
              v18 = a11;
              v148 = a8;
              v147 = a10;
              v146 = v258;
              v185 += result;
            }
            v187 = (v161 + v256) << v23;
            v188 = v249;
            if (a10 + a8 >= (v161 + v256 + 1) << v23)
            {
              v189 = v149;
            }
            else
            {
              v188 = v147;
              v189 = v253;
            }
            if (v187 >= v148)
              v190 = 0;
            else
              v190 = v251;
            if (v187 >= v148)
              v188 = v189;
            if (!v248)
            {
              v208 = 0;
              v192 = 0;
              v201 = 0;
              v217 = 0;
              v156 = v247;
              if (!v168)
                goto LABEL_198;
LABEL_271:
              if (v188)
              {
                v222 = 0;
                v223 = (_OWORD *)((char *)v243 + (v190 + (v161 << v23)) * v18);
                do
                {
                  v224 = v168;
                  v225 = v223;
                  v226 = v208;
                  do
                  {
                    result = v226 + v217;
                    *v225++ = *(_OWORD *)(v185 + 16 * (v226 + v217));
                    v226 = (v226 - v192) & v192;
                    --v224;
                  }
                  while (v224);
                  v217 = (v217 - v201) & v201;
                  v223 = (_OWORD *)((char *)v223 + v18);
                  ++v222;
                }
                while (v222 != v188);
              }
              goto LABEL_198;
            }
            v191 = 0;
            v192 = 0;
            v193 = 1;
            v195 = v270;
            v194 = v272;
            v196 = v152;
            v197 = v153;
            do
            {
              --v194;
              v198 = v195;
              if (!v198)
                v194 = 0;
              v199 = v191 + v198;
              --v197;
              if (v196)
                v192 |= (unint64_t)(v193 & v159) << v199++;
              else
                v197 = 0;
              v193 *= 2;
              v191 = v199 - 1;
              v196 = v197 != 0;
              v195 = v194 != 0;
            }
            while (v197 | v194);
            v200 = 0;
            v201 = 0;
            v202 = 1;
            v204 = v270;
            v203 = v272;
            v205 = v152;
            v206 = v153;
            do
            {
              --v203;
              if (v204)
                v201 |= (unint64_t)(v202 & v160) << v200++;
              else
                v203 = 0;
              --v206;
              if (!v205)
                v206 = 0;
              v202 *= 2;
              v200 = (__PAIR64__(v200, v205) - 1) >> 32;
              v205 = v206 != 0;
              v204 = v203 != 0;
            }
            while (v206 | v203);
            v207 = 0;
            v208 = 0;
            v209 = 1;
            v210 = v270;
            v211 = v272;
            v212 = v152;
            v213 = v153;
            do
            {
              --v211;
              v214 = v210;
              if (!v214)
                v211 = 0;
              v215 = v207 + v214;
              --v213;
              if (v212)
                v208 |= (unint64_t)(v209 & v169) << v215++;
              else
                v213 = 0;
              v209 *= 2;
              v207 = v215 - 1;
              v212 = v213 != 0;
              v210 = v211 != 0;
            }
            while (v213 | v211);
            v216 = 0;
            v217 = 0;
            v218 = 1;
            v219 = v270;
            v220 = v272;
            v221 = v152;
            LODWORD(result) = v153;
            do
            {
              --v220;
              if (v219)
                v217 |= (unint64_t)(v218 & v190) << v216++;
              else
                v220 = 0;
              LODWORD(result) = result - 1;
              if (v221)
                result = result;
              else
                result = 0;
              v218 *= 2;
              v216 = (__PAIR64__(v216, v221) - 1) >> 32;
              v221 = (_DWORD)result != 0;
              v219 = v220 != 0;
            }
            while (result | v220);
            v153 = v260;
            v156 = v247;
            if (v168)
              goto LABEL_271;
          }
LABEL_198:
          v161 = (unsigned __int16)++v162;
        }
        while (v156 > (unsigned __int16)v162);
        v158 = v239 + 1;
        v157 = (unsigned __int16)(v239 + 1);
        v15 = a7;
      }
      while (v237 > v157);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,4ul,8u,(TwiddleOrder)0>>(uint64_t result, _OWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _OWORD *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  BOOL v64;
  char v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  BOOL v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  int v134;
  _OWORD *v135;
  uint64_t v136;
  int v137;
  _OWORD *v138;
  uint64_t v139;
  _OWORD *v140;
  __int128 v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  char v146;
  int v147;
  uint64_t v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  BOOL v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  BOOL v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  BOOL v176;
  BOOL v177;
  int v178;
  int v179;
  int v180;
  int v181;
  BOOL v182;
  BOOL v183;
  int v184;
  int v185;
  int v186;
  unint64_t v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  int v192;
  int v193;
  uint64_t v194;
  int v195;
  unsigned int v196;
  BOOL v197;
  BOOL v198;
  unsigned int v199;
  int v200;
  int v201;
  unsigned int v202;
  uint64_t v203;
  int v204;
  unsigned int v205;
  BOOL v206;
  BOOL v207;
  unsigned int v208;
  int v209;
  uint64_t v210;
  int v211;
  BOOL v212;
  unsigned int v213;
  BOOL v214;
  unsigned int v215;
  int v216;
  int v217;
  unsigned int v218;
  uint64_t v219;
  int v220;
  BOOL v221;
  unsigned int v222;
  BOOL v223;
  int v224;
  _OWORD *v225;
  int v226;
  _OWORD *v227;
  uint64_t v228;
  __int128 v229;
  int i;
  int v231;
  _OWORD *v232;
  uint64_t v233;
  _OWORD *v234;
  __int128 v235;
  int v236;
  int v237;
  int v238;
  unsigned int v239;
  unsigned int v240;
  int v241;
  unsigned int v242;
  char v243;
  int v244;
  int v245;
  char v246;
  _OWORD *v248;
  _OWORD *v249;
  unsigned int v252;
  int v253;
  unsigned int v254;
  int v255;
  int v256;
  uint64_t v257;
  int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  char v262;
  uint64_t v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  BOOL v267;
  unsigned int v268;
  BOOL v269;
  unsigned int v270;
  int v271;
  uint64_t v272;
  int v273;
  int v274;
  BOOL v275;
  unsigned int v276;
  unsigned int v277;
  int v278;
  int v279;
  unsigned int v280;
  int v281;
  unsigned int v282;
  int v283;
  int v284;
  char v285[16];
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned __int8 v293;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v14 = a8;
  v15 = a7;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        if (v50)
          --v52;
        else
          v52 = 0;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      v57 = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(v57 & a8) << v55;
          v58 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v58 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        v57 *= 2;
        v55 = (__PAIR64__(v58, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v231 = a9;
        v232 = v13;
        v233 = v47;
        do
        {
          v234 = (_OWORD *)(result + 32 * (v233 + v56));
          v235 = v234[1];
          *v232 = *v234;
          v232[1] = v235;
          v232 += 2;
          v233 = (v233 - v31) & v31;
          --v231;
        }
        while (v231);
        v56 = (v56 - v40) & v40;
        v13 = (_OWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v263 = result;
  if (!*((_BYTE *)a12 + 20))
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v62 = 0;
    v63 = v60 + v59;
    result = v60 + v59 + v62;
    if (a6 >> v59)
      v64 = 1;
    else
      v64 = 1 << v60 >= a5;
    if (v64)
      v65 = *((_BYTE *)a12 + 12);
    else
      v65 = v60 + v59 + v62;
    if (v64)
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    else
      v66 = -v62;
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && a5 >> v60 == 0)
      LOBYTE(v66) = v63 - v67;
    else
      LOBYTE(v67) = v65;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v266 = a8 >> v66;
    v268 = 1 << v66;
    v76 = v69 - 1;
    v264 = a10 + a8;
    v260 = (v69 - 1 + a10 + a8) >> v66;
    v262 = v66;
    if (a8 >> v66 >= v260)
      return result;
    v77 = (1 << v67) - 1;
    v282 = a9 + a7;
    if (1 << v67 >= a5)
      v78 = a5;
    else
      v78 = 1 << v67;
    v79 = 32 - __clz(v78 - 1);
    result = v78 > 1;
    if (v78 <= 1)
      v80 = 0;
    else
      v80 = v79;
    v81 = v268;
    if (v268 >= a6)
      v81 = a6;
    v82 = 32 - __clz(v81 - 1);
    v83 = v81 > 1;
    v84 = v81 <= 1 ? 0 : v82;
    v276 = a7 >> v67;
    v280 = (v77 + a9 + a7) >> v67;
    if (a7 >> v67 >= v280)
      return result;
    v259 = (v75 + ~(-1 << v67)) >> v67;
    v85 = v77 & a7;
    v278 = v77 & v282;
    v255 = v76 & v264;
    v257 = v76 & a8;
    v86 = v266;
LABEL_92:
    v87 = v86 << v262;
    v88 = v86 - v266;
    v274 = v86 * v259;
    v270 = v86 + 1;
    v89 = v264 >= (v86 + 1) << v262;
    v90 = v268;
    if (!v89)
      v90 = v255;
    v91 = v268 - v257;
    if (!v89)
      v91 = v19;
    v92 = v88 << v262;
    if (v87 >= v14)
      v93 = 0;
    else
      v93 = v257;
    if (v87 >= v14)
      v94 = v90;
    else
      v94 = v91;
    v272 = (v93 + v92 - v257) * a11;
    v95 = v276;
    while (1)
    {
      v96 = v95 << v67;
      v97 = v95 + 1;
      if (v282 >= (v95 + 1) << v67)
        v98 = (1 << v67) - v85;
      else
        v98 = a9;
      v99 = v278;
      if (v282 >= v97 << v67)
        v99 = 1 << v67;
      if (v96 >= v15)
        v100 = 0;
      else
        v100 = v85;
      if (v96 < v15)
        v99 = v98;
      if (v84 | v80)
        break;
      v118 = 0;
      v102 = 0;
      v111 = 0;
      v127 = 0;
      if (v99)
        goto LABEL_153;
LABEL_103:
      v95 = v97;
      if (v97 == v280)
      {
        v86 = v270;
        v14 = a8;
        v19 = a10;
        if (v270 == v260)
          return result;
        goto LABEL_92;
      }
    }
    v101 = 0;
    v102 = 0;
    v103 = 1;
    v104 = v83;
    v105 = result;
    v106 = v84;
    v107 = v80;
    do
    {
      v108 = v104;
      if (v108)
        --v106;
      else
        v106 = 0;
      v109 = v101 + v108;
      if (v105)
        --v107;
      else
        v107 = 0;
      if (v105)
        v102 |= (unint64_t)(v103 & ~(-1 << v80)) << v109++;
      v103 *= 2;
      v101 = v109 - 1;
      v105 = v107 != 0;
      v104 = v106 != 0;
    }
    while (v107 | v106);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v83;
    v114 = result;
    v115 = v84;
    v116 = v80;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
        v111 |= (unint64_t)(v112 & ~(-1 << v84)) << v110++;
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v110, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v117 = 0;
    v118 = 0;
    v119 = 1;
    v120 = v83;
    v121 = result;
    v122 = v84;
    v123 = v80;
    do
    {
      v124 = v120;
      if (v124)
        --v122;
      else
        v122 = 0;
      v125 = v117 + v124;
      --v123;
      if (v121)
        v118 |= (unint64_t)(v119 & v100) << v125++;
      else
        v123 = 0;
      v119 *= 2;
      v117 = v125 - 1;
      v121 = v123 != 0;
      v120 = v122 != 0;
    }
    while (v123 | v122);
    v126 = 0;
    v127 = 0;
    v128 = 1;
    v129 = v83;
    v130 = result;
    v131 = v84;
    v132 = v80;
    do
    {
      --v131;
      if (v129)
      {
        v127 |= (unint64_t)(v128 & v93) << v126;
        v133 = v126 + 1;
      }
      else
      {
        v131 = 0;
        v133 = v126;
      }
      if (v130)
        --v132;
      else
        v132 = 0;
      v128 *= 2;
      v126 = (__PAIR64__(v133, v130) - 1) >> 32;
      v130 = v132 != 0;
      v129 = v131 != 0;
    }
    while (v132 | v131);
    v15 = a7;
    if (!v99)
      goto LABEL_103;
LABEL_153:
    if (v94)
    {
      v134 = 0;
      v135 = (_OWORD *)((char *)&a2[2 * (v100 + ((v95 - v276) << v67) - v85)] + v272);
      v136 = (v95 + v274) * a12[3] * *((unsigned __int8 *)a12 + 9) + v263;
      do
      {
        v137 = v99;
        v138 = v135;
        v139 = v118;
        do
        {
          v140 = (_OWORD *)(v136 + 32 * (v139 + v127));
          v141 = v140[1];
          *v138 = *v140;
          v138[1] = v141;
          v138 += 2;
          v139 = (v139 - v102) & v102;
          --v137;
        }
        while (v137);
        v127 = (v127 - v111) & v111;
        v135 = (_OWORD *)((char *)v135 + a11);
        ++v134;
      }
      while (v134 != v94);
    }
    goto LABEL_103;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v285);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  v249 = v13;
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v142 = a6 >> v20;
    v143 = 1 << v21;
    v144 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v144 = 0;
    v145 = v143 >= a5;
    if (v143 < a5)
      v146 = v21 + v20 + v144;
    else
      v146 = *((_BYTE *)a12 + 12);
    if (v145)
      LOBYTE(v147) = *((_BYTE *)a12 + 13);
    else
      v147 = -v144;
    if (!v142)
      v21 = v146;
    v243 = v21;
    if (v142)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v147;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v243 = v22;
    v23 = v21 + v20 - v22;
  }
  v148 = v263;
  v150 = a8;
  v149 = a10;
  v242 = v291;
  if (v291)
  {
    v151 = 1 << v23;
    v241 = 1 << v243;
    if (1 << v243 >= a5)
      v152 = a5;
    else
      v152 = 1 << v243;
    v153 = 32 - __clz(v152 - 1);
    v154 = v152 > 1;
    if (v152 <= 1)
      v155 = 0;
    else
      v155 = v153;
    if (v151 >= a6)
      v156 = a6;
    else
      v156 = 1 << v23;
    v157 = 32 - __clz(v156 - 1);
    v158 = v292;
    if (v156 <= 1)
      v157 = 0;
    v275 = v156 > 1;
    v277 = v157;
    v273 = v289;
    v269 = v289 != 0;
    v271 = v290;
    v267 = v290 != 0;
    if (v292)
    {
      v159 = 0;
      v160 = 0;
      v240 = v15 >> v243;
      v261 = a8 >> v23;
      v283 = v293;
      v284 = v288;
      v279 = v290 | v289;
      v239 = a9 + v15;
      v238 = (v241 - 1) & (a9 + v15);
      v237 = v286;
      v281 = v287;
      v236 = (v241 - 1) & v15;
      v256 = (v151 - 1) & a8;
      v258 = (v151 - 1) & (a10 + a8);
      v254 = v151 - v256;
      v161 = ~(-1 << v155);
      v252 = v292;
      v253 = v157 | v155;
      v162 = ~(-1 << v157);
      v265 = v155;
      v245 = 1 << v23;
      v246 = v23;
      do
      {
        v244 = v160;
        v163 = 0;
        v164 = 0;
        v165 = a9;
        if (v239 >= (v159 + v240 + 1) << v243)
          v165 = v241 - v236;
        v166 = 1 << v243;
        if (v239 < (v159 + v240 + 1) << v243)
          v166 = v238;
        v167 = (v159 + v240) << v243 >= v15;
        v168 = v237 + v159;
        v169 = v159 << v243;
        if (v167)
          v170 = v166;
        else
          v170 = v165;
        if (v167)
          v171 = 0;
        else
          v171 = v236;
        v248 = &v249[2 * (v171 + v169)];
        do
        {
          v172 = v281 + v163;
          if (v283)
          {
            v173 = v279;
            if (v279)
            {
              v174 = 0;
              v173 = 0;
              v175 = 1;
              v176 = v267;
              v177 = v269;
              v179 = v271;
              v178 = v273;
              do
              {
                --v178;
                if (v177)
                  v173 |= (v175 & v168) << v174;
                else
                  v178 = 0;
                if (v177)
                  ++v174;
                --v179;
                if (v176)
                  v173 |= (v175 & v172) << v174;
                else
                  v179 = 0;
                if (v176)
                  ++v174;
                v175 *= 2;
                --v174;
                v176 = v179 != 0;
                v177 = v178 != 0;
              }
              while (v179 | v178);
            }
          }
          else
          {
            v173 = v279;
            if (v279)
            {
              v180 = 0;
              v173 = 0;
              v181 = 1;
              v183 = v267;
              v182 = v269;
              v184 = v271;
              v185 = v273;
              do
              {
                --v184;
                if (v183)
                  v173 |= (v181 & v172) << v180;
                else
                  v184 = 0;
                if (v183)
                  ++v180;
                --v185;
                if (v182)
                  v173 |= (v181 & v168) << v180;
                else
                  v185 = 0;
                if (v182)
                  ++v180;
                v181 *= 2;
                --v180;
                v182 = v185 != 0;
                v183 = v184 != 0;
              }
              while (v185 | v184);
            }
          }
          v186 = *(_DWORD *)(v148 + 4 * ((v173 + v284) | ((v173 + v284) >> 8 << 9)));
          if (v186 < 0)
          {
            v187 = v148 - *((_QWORD *)a13 + 3) + ((unint64_t)(v186 & 0x3FFFFFF) << 14);
            result = *a13;
            v188 = a13[2];
            if (result > v188)
            {
              result = get_level_offset_within_tail(result, v188, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v155 = v265;
              v151 = v245;
              v23 = v246;
              v18 = a11;
              v150 = a8;
              v149 = a10;
              v148 = v263;
              v187 += result;
            }
            v189 = (v163 + v261) << v23;
            v190 = v254;
            if (a10 + a8 >= (v163 + v261 + 1) << v23)
            {
              v191 = v151;
            }
            else
            {
              v190 = v149;
              v191 = v258;
            }
            if (v189 >= v150)
              v192 = 0;
            else
              v192 = v256;
            if (v189 >= v150)
              v190 = v191;
            if (!v253)
            {
              v210 = 0;
              v194 = 0;
              v203 = 0;
              v219 = 0;
              v158 = v252;
              if (!v170)
                goto LABEL_198;
LABEL_271:
              if (v190)
              {
                v224 = 0;
                v225 = (_OWORD *)((char *)v248 + (v192 + (v163 << v23)) * v18);
                do
                {
                  v226 = v170;
                  v227 = v225;
                  v228 = v210;
                  do
                  {
                    result = v187 + 32 * (v228 + v219);
                    v229 = *(_OWORD *)(result + 16);
                    *v227 = *(_OWORD *)result;
                    v227[1] = v229;
                    v227 += 2;
                    v228 = (v228 - v194) & v194;
                    --v226;
                  }
                  while (v226);
                  v219 = (v219 - v203) & v203;
                  v225 = (_OWORD *)((char *)v225 + v18);
                  ++v224;
                }
                while (v224 != v190);
              }
              goto LABEL_198;
            }
            v193 = 0;
            v194 = 0;
            v195 = 1;
            v197 = v275;
            v196 = v277;
            v198 = v154;
            v199 = v155;
            do
            {
              --v196;
              v200 = v197;
              if (!v200)
                v196 = 0;
              v201 = v193 + v200;
              --v199;
              if (v198)
                v194 |= (unint64_t)(v195 & v161) << v201++;
              else
                v199 = 0;
              v195 *= 2;
              v193 = v201 - 1;
              v198 = v199 != 0;
              v197 = v196 != 0;
            }
            while (v199 | v196);
            v202 = 0;
            v203 = 0;
            v204 = 1;
            v206 = v275;
            v205 = v277;
            v207 = v154;
            v208 = v155;
            do
            {
              --v205;
              if (v206)
                v203 |= (unint64_t)(v204 & v162) << v202++;
              else
                v205 = 0;
              --v208;
              if (!v207)
                v208 = 0;
              v204 *= 2;
              v202 = (__PAIR64__(v202, v207) - 1) >> 32;
              v207 = v208 != 0;
              v206 = v205 != 0;
            }
            while (v208 | v205);
            v209 = 0;
            v210 = 0;
            v211 = 1;
            v212 = v275;
            v213 = v277;
            v214 = v154;
            v215 = v155;
            do
            {
              --v213;
              v216 = v212;
              if (!v216)
                v213 = 0;
              v217 = v209 + v216;
              --v215;
              if (v214)
                v210 |= (unint64_t)(v211 & v171) << v217++;
              else
                v215 = 0;
              v211 *= 2;
              v209 = v217 - 1;
              v214 = v215 != 0;
              v212 = v213 != 0;
            }
            while (v215 | v213);
            v218 = 0;
            v219 = 0;
            v220 = 1;
            v221 = v275;
            v222 = v277;
            v223 = v154;
            LODWORD(result) = v155;
            do
            {
              --v222;
              if (v221)
                v219 |= (unint64_t)(v220 & v192) << v218++;
              else
                v222 = 0;
              LODWORD(result) = result - 1;
              if (v223)
                result = result;
              else
                result = 0;
              v220 *= 2;
              v218 = (__PAIR64__(v218, v223) - 1) >> 32;
              v223 = (_DWORD)result != 0;
              v221 = v222 != 0;
            }
            while (result | v222);
            v155 = v265;
            v158 = v252;
            if (v170)
              goto LABEL_271;
          }
LABEL_198:
          v163 = (unsigned __int16)++v164;
        }
        while (v158 > (unsigned __int16)v164);
        v160 = v244 + 1;
        v159 = (unsigned __int16)(v244 + 1);
        v15 = a7;
      }
      while (v242 > v159);
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,1ul,2u,(TwiddleOrder)0>>(uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _WORD *v13;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  char v62;
  BOOL v63;
  char v64;
  int v65;
  unsigned int v66;
  int v68;
  char v69;
  unsigned int v70;
  BOOL v71;
  BOOL v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  int v102;
  BOOL v103;
  BOOL v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  int v120;
  BOOL v121;
  BOOL v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  int v130;
  BOOL v131;
  BOOL v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  _WORD *v137;
  uint64_t v138;
  int v139;
  _WORD *v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  char v146;
  int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  _BOOL8 v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  BOOL v158;
  int v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  BOOL v172;
  BOOL v173;
  int v174;
  int v175;
  int v176;
  int v177;
  BOOL v178;
  BOOL v179;
  int v180;
  int v181;
  int v182;
  unint64_t v183;
  unsigned int v184;
  _BOOL8 v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  int v190;
  uint64_t v191;
  int v192;
  BOOL v193;
  BOOL v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  int v201;
  BOOL v202;
  BOOL v203;
  unsigned int v204;
  unsigned int v205;
  int v206;
  uint64_t v207;
  int v208;
  BOOL v209;
  BOOL v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  int v217;
  BOOL v218;
  BOOL v219;
  unsigned int v220;
  int v221;
  _WORD *v222;
  int v223;
  _WORD *v224;
  uint64_t v225;
  int i;
  int v227;
  _WORD *v228;
  uint64_t v229;
  int v230;
  int v231;
  int v232;
  unsigned int v233;
  unsigned int v234;
  int v235;
  unsigned int v236;
  char v237;
  int v238;
  int v239;
  char v240;
  uint64_t v241;
  _WORD *v242;
  unsigned int v245;
  unsigned int v246;
  int v247;
  int v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  unsigned int v253;
  int v254;
  char v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  BOOL v260;
  unsigned int v261;
  BOOL v262;
  uint64_t v263;
  BOOL v264;
  int v265;
  int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  int v270;
  int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  int v276;
  char v277[16];
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned __int8 v285;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v17 = result;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        --v52;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        else
          v52 = 0;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      LODWORD(result) = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(result & a8) << v55;
          v57 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v57 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        result = (2 * result);
        v55 = (__PAIR64__(v57, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v227 = a9;
        v228 = v13;
        v229 = v47;
        do
        {
          *v228++ = *(_WORD *)(v17 + 2 * (v229 + v56));
          v229 = (v229 - v31) & v31;
          --v227;
        }
        while (v227);
        v56 = (v56 - v40) & v40;
        v13 = (_WORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v245 = a7;
  if (!*((_BYTE *)a12 + 20))
  {
    v58 = *((unsigned __int8 *)a12 + 13);
    v59 = *((unsigned __int8 *)a12 + 12);
    v60 = 1 << v58;
    v61 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v61 = 0;
    v62 = v59 + v58;
    result = v59 + v58 + v61;
    if (a6 >> v58)
      v63 = 1;
    else
      v63 = 1 << v59 >= a5;
    if (v63)
      v64 = *((_BYTE *)a12 + 12);
    else
      v64 = v59 + v58 + v61;
    if (v63)
      LOBYTE(v65) = *((_BYTE *)a12 + 13);
    else
      v65 = -v61;
    v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v66) = 0;
    if (v60 < a6 && a5 >> v59 == 0)
      LOBYTE(v65) = v62 - v66;
    else
      LOBYTE(v66) = v64;
    v68 = 1 << v65;
    v69 = *((_BYTE *)a12 + 15);
    v70 = 1 << v69;
    if (v69)
      v71 = v70 > a3;
    else
      v71 = 1;
    v72 = v71 || v70 > a4;
    v73 = (~(-1 << v69) + a3) & (-1 << v69);
    if (v72)
      v74 = a3;
    else
      v74 = v73;
    v259 = 1 << v65;
    v75 = v68 - 1;
    v255 = v65;
    v256 = a10 + a8;
    v258 = a8 >> v65;
    v253 = (v68 - 1 + a10 + a8) >> v65;
    if (a8 >> v65 >= v253)
      return result;
    v76 = (1 << v66) - 1;
    v274 = a9 + a7;
    if (1 << v66 >= a5)
      v77 = a5;
    else
      v77 = 1 << v66;
    v78 = 32 - __clz(v77 - 1);
    result = v77 > 1;
    if (v77 <= 1)
      v79 = 0;
    else
      v79 = v78;
    v80 = v259;
    if (v259 >= a6)
      v80 = a6;
    v81 = 32 - __clz(v80 - 1);
    v82 = v80 > 1;
    v83 = v80 <= 1 ? 0 : v81;
    v267 = a7 >> v66;
    v272 = (v76 + a9 + a7) >> v66;
    if (a7 >> v66 >= v272)
      return result;
    v251 = (v74 + ~(-1 << v66)) >> v66;
    v84 = v76 & a7;
    v270 = v76 & v274;
    v247 = v75 & v256;
    v249 = v75 & a8;
    v85 = v258;
LABEL_90:
    v86 = v85 << v255;
    v87 = v85 - v258;
    v265 = v85 * v251;
    v261 = v85 + 1;
    v88 = v256 >= (v85 + 1) << v255;
    v89 = v259;
    if (!v88)
      v89 = v247;
    v90 = v259 - v249;
    if (!v88)
      v90 = v19;
    v91 = v87 << v255;
    if (v86 >= a8)
      v92 = 0;
    else
      v92 = v249;
    if (v86 >= a8)
      v93 = v89;
    else
      v93 = v90;
    v263 = (v92 + v91 - v249) * a11;
    v94 = v267;
    while (1)
    {
      v95 = v94 << v66;
      v96 = v94 + 1;
      v97 = a9;
      if (v274 >= (v94 + 1) << v66)
        v97 = (1 << v66) - v84;
      v98 = 1 << v66;
      if (v274 < v96 << v66)
        v98 = v270;
      if (v95 >= a7)
        v99 = 0;
      else
        v99 = v84;
      if (v95 < a7)
        v98 = v97;
      if (v83 | v79)
        break;
      v119 = 0;
      v101 = 0;
      v111 = 0;
      v129 = 0;
      if (v98)
        goto LABEL_151;
LABEL_101:
      v94 = v96;
      if (v96 == v272)
      {
        v85 = v261;
        v19 = a10;
        if (v261 == v253)
          return result;
        goto LABEL_90;
      }
    }
    v100 = 0;
    v101 = 0;
    v102 = 1;
    v103 = v82;
    v104 = result;
    v105 = v83;
    v106 = v79;
    do
    {
      v107 = v103;
      if (v107)
        --v105;
      else
        v105 = 0;
      v108 = v100 + v107;
      if (v104)
        --v106;
      else
        v106 = 0;
      if (v104)
      {
        v101 |= (unint64_t)(v102 & ~(-1 << v79)) << v108;
        v109 = v108 + 1;
      }
      else
      {
        v109 = v108;
      }
      v102 *= 2;
      v100 = v109 - 1;
      v104 = v106 != 0;
      v103 = v105 != 0;
    }
    while (v106 | v105);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v82;
    v114 = result;
    v115 = v83;
    v116 = v79;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
      {
        v111 |= (unint64_t)(v112 & ~(-1 << v83)) << v110;
        v117 = v110 + 1;
      }
      else
      {
        v117 = v110;
      }
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v117, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v118 = 0;
    v119 = 0;
    v120 = 1;
    v121 = v82;
    v122 = result;
    v123 = v83;
    v124 = v79;
    do
    {
      v125 = v121;
      if (v125)
        --v123;
      else
        v123 = 0;
      v126 = v118 + v125;
      --v124;
      if (v122)
      {
        v119 |= (unint64_t)(v120 & v99) << v126;
        v127 = v126 + 1;
      }
      else
      {
        v124 = 0;
        v127 = v126;
      }
      v120 *= 2;
      v118 = v127 - 1;
      v122 = v124 != 0;
      v121 = v123 != 0;
    }
    while (v124 | v123);
    v128 = 0;
    v129 = 0;
    v130 = 1;
    v131 = v82;
    v132 = result;
    v133 = v83;
    v134 = v79;
    do
    {
      --v133;
      if (v131)
      {
        v129 |= (unint64_t)(v130 & v92) << v128;
        v135 = v128 + 1;
      }
      else
      {
        v133 = 0;
        v135 = v128;
      }
      --v134;
      if (!v132)
        v134 = 0;
      v130 *= 2;
      v128 = (__PAIR64__(v135, v132) - 1) >> 32;
      v132 = v134 != 0;
      v131 = v133 != 0;
    }
    while (v134 | v133);
    v13 = a2;
    a7 = v245;
    if (!v98)
      goto LABEL_101;
LABEL_151:
    if (v93)
    {
      v136 = 0;
      v137 = (_WORD *)((char *)&v13[v99 + ((v94 - v267) << v66) - v84] + v263);
      v138 = (v94 + v265) * a12[3] * *((unsigned __int8 *)a12 + 9) + v17;
      do
      {
        v139 = v98;
        v140 = v137;
        v141 = v119;
        do
        {
          *v140++ = *(_WORD *)(v138 + 2 * (v141 + v129));
          v141 = (v141 - v101) & v101;
          --v139;
        }
        while (v139);
        v129 = (v129 - v111) & v111;
        v137 = (_WORD *)((char *)v137 + a11);
        ++v136;
      }
      while (v136 != v93);
    }
    goto LABEL_101;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v277);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v142 = a6 >> v20;
    v143 = 1 << v21;
    v144 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v144 = 0;
    v145 = v143 >= a5;
    if (v143 < a5)
      v146 = v21 + v20 + v144;
    else
      v146 = *((_BYTE *)a12 + 12);
    if (v145)
      LOBYTE(v147) = *((_BYTE *)a12 + 13);
    else
      v147 = -v144;
    if (!v142)
      v21 = v146;
    v237 = v21;
    if (v142)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v147;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v237 = v22;
    v23 = v21 + v20 - v22;
  }
  v148 = a10;
  v149 = a8;
  v236 = v283;
  if (v283)
  {
    v150 = 1 << v23;
    v235 = 1 << v237;
    if (1 << v237 >= a5)
      v151 = a5;
    else
      v151 = 1 << v237;
    v152 = 32 - __clz(v151 - 1);
    v153 = v151 > 1;
    if (v151 <= 1)
      v154 = 0;
    else
      v154 = v152;
    if (v150 >= a6)
      v155 = a6;
    else
      v155 = 1 << v23;
    v156 = 32 - __clz(v155 - 1);
    v157 = v284;
    v158 = v155 > 1;
    if (v155 <= 1)
      v156 = 0;
    v268 = v281;
    v269 = v156;
    v264 = v281 != 0;
    v266 = v282;
    v262 = v282 != 0;
    if (v284)
    {
      v159 = 0;
      v234 = a7 >> v237;
      v257 = a8 >> v23;
      v271 = v282 | v281;
      v275 = v285;
      v276 = v280;
      v233 = a9 + a7;
      v232 = (v235 - 1) & (a9 + a7);
      v230 = v278;
      v273 = v279;
      v231 = (v235 - 1) & a7;
      v252 = (v150 - 1) & a8;
      v254 = (v150 - 1) & (a10 + a8);
      v250 = v150 - v252;
      v246 = v284;
      v248 = v156 | v154;
      v160 = ~(-1 << v156);
      v260 = v155 > 1;
      v241 = v17;
      v239 = 1 << v23;
      v240 = v23;
      do
      {
        v161 = 0;
        v162 = v230 + v159;
        v163 = (v159 + v234) << v237;
        v164 = a9;
        if (v233 >= (v159 + v234 + 1) << v237)
          v164 = v235 - v231;
        v165 = 1 << v237;
        if (v233 < (v159 + v234 + 1) << v237)
          v165 = v232;
        v238 = v159;
        if (v163 >= v245)
          v166 = v165;
        else
          v166 = v164;
        if (v163 >= v245)
          v167 = 0;
        else
          v167 = v231;
        v242 = &a2[v167 + (v159 << v237)];
        do
        {
          v168 = v273 + v161;
          if (v275)
          {
            v169 = v271;
            if (v271)
            {
              v170 = 0;
              v169 = 0;
              v171 = 1;
              v172 = v262;
              v173 = v264;
              v175 = v266;
              v174 = v268;
              do
              {
                --v174;
                if (v173)
                  v169 |= (v171 & v162) << v170;
                else
                  v174 = 0;
                if (v173)
                  ++v170;
                --v175;
                if (v172)
                  v169 |= (v171 & v168) << v170;
                else
                  v175 = 0;
                if (v172)
                  ++v170;
                v171 *= 2;
                --v170;
                v172 = v175 != 0;
                v173 = v174 != 0;
              }
              while (v175 | v174);
            }
          }
          else
          {
            v169 = v271;
            if (v271)
            {
              v176 = 0;
              v169 = 0;
              v177 = 1;
              v179 = v262;
              v178 = v264;
              v180 = v266;
              v181 = v268;
              do
              {
                --v180;
                if (v179)
                  v169 |= (v177 & v168) << v176;
                else
                  v180 = 0;
                if (v179)
                  ++v176;
                --v181;
                if (v178)
                  v169 |= (v177 & v162) << v176;
                else
                  v181 = 0;
                if (v178)
                  ++v176;
                v177 *= 2;
                --v176;
                v178 = v181 != 0;
                v179 = v180 != 0;
              }
              while (v181 | v180);
            }
          }
          v182 = *(_DWORD *)(v17 + 4 * ((v169 + v276) | ((v169 + v276) >> 8 << 9)));
          if (v182 < 0)
          {
            v183 = v17 - *((_QWORD *)a13 + 3) + ((unint64_t)(v182 & 0x3FFFFFF) << 14);
            result = *a13;
            v184 = a13[2];
            if (result > v184)
            {
              v185 = v153;
              result = get_level_offset_within_tail(result, v184, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v158 = v260;
              v153 = v185;
              v150 = v239;
              v23 = v240;
              v17 = v241;
              v18 = a11;
              v149 = a8;
              v148 = a10;
              v183 += result;
            }
            v186 = (v161 + v257) << v23;
            v187 = v250;
            if (a10 + a8 >= (v161 + v257 + 1) << v23)
            {
              v188 = v150;
            }
            else
            {
              v187 = v148;
              v188 = v254;
            }
            if (v186 >= v149)
              v189 = 0;
            else
              v189 = v252;
            if (v186 >= v149)
              v187 = v188;
            if (!v248)
            {
              v207 = 0;
              v191 = 0;
              v200 = 0;
              v216 = 0;
              v157 = v246;
              if (!v166)
                goto LABEL_196;
LABEL_269:
              if (v187)
              {
                v221 = 0;
                v222 = (_WORD *)((char *)v242 + (v189 + (v161 << v23)) * v18);
                do
                {
                  v223 = v166;
                  v224 = v222;
                  v225 = v207;
                  do
                  {
                    result = *(unsigned __int16 *)(v183 + 2 * (v225 + v216));
                    *v224++ = result;
                    v225 = (v225 - v191) & v191;
                    --v223;
                  }
                  while (v223);
                  v216 = (v216 - v200) & v200;
                  v222 = (_WORD *)((char *)v222 + v18);
                  ++v221;
                }
                while (v221 != v187);
              }
              goto LABEL_196;
            }
            v190 = 0;
            v191 = 0;
            v192 = 1;
            v193 = v158;
            v194 = v153;
            v195 = v269;
            v196 = v154;
            do
            {
              --v195;
              v197 = v193;
              if (!v197)
                v195 = 0;
              v198 = v190 + v197;
              --v196;
              if (v194)
                v191 |= (unint64_t)(v192 & ~(-1 << v154)) << v198++;
              else
                v196 = 0;
              v192 *= 2;
              v190 = v198 - 1;
              v194 = v196 != 0;
              v193 = v195 != 0;
            }
            while (v196 | v195);
            v199 = 0;
            v200 = 0;
            v201 = 1;
            v202 = v158;
            v203 = v153;
            v204 = v269;
            v205 = v154;
            do
            {
              --v204;
              if (v202)
                v200 |= (unint64_t)(v201 & v160) << v199++;
              else
                v204 = 0;
              --v205;
              if (!v203)
                v205 = 0;
              v201 *= 2;
              v199 = (__PAIR64__(v199, v203) - 1) >> 32;
              v203 = v205 != 0;
              v202 = v204 != 0;
            }
            while (v205 | v204);
            v206 = 0;
            v207 = 0;
            v208 = 1;
            v209 = v158;
            v210 = v153;
            v211 = v269;
            v212 = v154;
            do
            {
              --v211;
              v213 = v209;
              if (!v213)
                v211 = 0;
              v214 = v206 + v213;
              --v212;
              if (v210)
                v207 |= (unint64_t)(v208 & v167) << v214++;
              else
                v212 = 0;
              v208 *= 2;
              v206 = v214 - 1;
              v210 = v212 != 0;
              v209 = v211 != 0;
            }
            while (v212 | v211);
            v215 = 0;
            v216 = 0;
            v217 = 1;
            v218 = v158;
            v219 = v153;
            v220 = v269;
            LODWORD(result) = v154;
            do
            {
              --v220;
              if (v218)
                v216 |= (unint64_t)(v217 & v189) << v215++;
              else
                v220 = 0;
              LODWORD(result) = result - 1;
              if (v219)
                result = result;
              else
                result = 0;
              v217 *= 2;
              v215 = (__PAIR64__(v215, v219) - 1) >> 32;
              v219 = (_DWORD)result != 0;
              v218 = v220 != 0;
            }
            while (result | v220);
            v157 = v246;
            v158 = v260;
            if (v166)
              goto LABEL_269;
          }
LABEL_196:
          ++v161;
        }
        while (v157 > (unsigned __int16)v161);
        v159 = v238 + 1;
      }
      while (v236 > (unsigned __int16)(v238 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,1ul,4u,(TwiddleOrder)0>>(uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _DWORD *v13;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  char v62;
  BOOL v63;
  char v64;
  int v65;
  unsigned int v66;
  int v68;
  char v69;
  unsigned int v70;
  BOOL v71;
  BOOL v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  int v102;
  BOOL v103;
  BOOL v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  int v120;
  BOOL v121;
  BOOL v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  int v130;
  BOOL v131;
  BOOL v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  _DWORD *v137;
  uint64_t v138;
  int v139;
  _DWORD *v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  char v146;
  int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  _BOOL8 v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  BOOL v158;
  int v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  BOOL v172;
  BOOL v173;
  int v174;
  int v175;
  int v176;
  int v177;
  BOOL v178;
  BOOL v179;
  int v180;
  int v181;
  int v182;
  unint64_t v183;
  unsigned int v184;
  _BOOL8 v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  int v190;
  uint64_t v191;
  int v192;
  BOOL v193;
  BOOL v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  int v201;
  BOOL v202;
  BOOL v203;
  unsigned int v204;
  unsigned int v205;
  int v206;
  uint64_t v207;
  int v208;
  BOOL v209;
  BOOL v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  int v217;
  BOOL v218;
  BOOL v219;
  unsigned int v220;
  int v221;
  _DWORD *v222;
  int v223;
  _DWORD *v224;
  uint64_t v225;
  int i;
  int v227;
  _DWORD *v228;
  uint64_t v229;
  int v230;
  int v231;
  int v232;
  unsigned int v233;
  unsigned int v234;
  int v235;
  unsigned int v236;
  char v237;
  int v238;
  int v239;
  char v240;
  uint64_t v241;
  _DWORD *v242;
  unsigned int v245;
  unsigned int v246;
  int v247;
  int v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  unsigned int v253;
  int v254;
  char v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  BOOL v260;
  unsigned int v261;
  BOOL v262;
  uint64_t v263;
  BOOL v264;
  int v265;
  int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  int v270;
  int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  int v276;
  char v277[16];
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned __int8 v285;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v17 = result;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        --v52;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        else
          v52 = 0;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      LODWORD(result) = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(result & a8) << v55;
          v57 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v57 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        result = (2 * result);
        v55 = (__PAIR64__(v57, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v227 = a9;
        v228 = v13;
        v229 = v47;
        do
        {
          *v228++ = *(_DWORD *)(v17 + 4 * (v229 + v56));
          v229 = (v229 - v31) & v31;
          --v227;
        }
        while (v227);
        v56 = (v56 - v40) & v40;
        v13 = (_DWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v245 = a7;
  if (!*((_BYTE *)a12 + 20))
  {
    v58 = *((unsigned __int8 *)a12 + 13);
    v59 = *((unsigned __int8 *)a12 + 12);
    v60 = 1 << v58;
    v61 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v61 = 0;
    v62 = v59 + v58;
    result = v59 + v58 + v61;
    if (a6 >> v58)
      v63 = 1;
    else
      v63 = 1 << v59 >= a5;
    if (v63)
      v64 = *((_BYTE *)a12 + 12);
    else
      v64 = v59 + v58 + v61;
    if (v63)
      LOBYTE(v65) = *((_BYTE *)a12 + 13);
    else
      v65 = -v61;
    v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v66) = 0;
    if (v60 < a6 && a5 >> v59 == 0)
      LOBYTE(v65) = v62 - v66;
    else
      LOBYTE(v66) = v64;
    v68 = 1 << v65;
    v69 = *((_BYTE *)a12 + 15);
    v70 = 1 << v69;
    if (v69)
      v71 = v70 > a3;
    else
      v71 = 1;
    v72 = v71 || v70 > a4;
    v73 = (~(-1 << v69) + a3) & (-1 << v69);
    if (v72)
      v74 = a3;
    else
      v74 = v73;
    v259 = 1 << v65;
    v75 = v68 - 1;
    v255 = v65;
    v256 = a10 + a8;
    v258 = a8 >> v65;
    v253 = (v68 - 1 + a10 + a8) >> v65;
    if (a8 >> v65 >= v253)
      return result;
    v76 = (1 << v66) - 1;
    v274 = a9 + a7;
    if (1 << v66 >= a5)
      v77 = a5;
    else
      v77 = 1 << v66;
    v78 = 32 - __clz(v77 - 1);
    result = v77 > 1;
    if (v77 <= 1)
      v79 = 0;
    else
      v79 = v78;
    v80 = v259;
    if (v259 >= a6)
      v80 = a6;
    v81 = 32 - __clz(v80 - 1);
    v82 = v80 > 1;
    v83 = v80 <= 1 ? 0 : v81;
    v267 = a7 >> v66;
    v272 = (v76 + a9 + a7) >> v66;
    if (a7 >> v66 >= v272)
      return result;
    v251 = (v74 + ~(-1 << v66)) >> v66;
    v84 = v76 & a7;
    v270 = v76 & v274;
    v247 = v75 & v256;
    v249 = v75 & a8;
    v85 = v258;
LABEL_90:
    v86 = v85 << v255;
    v87 = v85 - v258;
    v265 = v85 * v251;
    v261 = v85 + 1;
    v88 = v256 >= (v85 + 1) << v255;
    v89 = v259;
    if (!v88)
      v89 = v247;
    v90 = v259 - v249;
    if (!v88)
      v90 = v19;
    v91 = v87 << v255;
    if (v86 >= a8)
      v92 = 0;
    else
      v92 = v249;
    if (v86 >= a8)
      v93 = v89;
    else
      v93 = v90;
    v263 = (v92 + v91 - v249) * a11;
    v94 = v267;
    while (1)
    {
      v95 = v94 << v66;
      v96 = v94 + 1;
      v97 = a9;
      if (v274 >= (v94 + 1) << v66)
        v97 = (1 << v66) - v84;
      v98 = 1 << v66;
      if (v274 < v96 << v66)
        v98 = v270;
      if (v95 >= a7)
        v99 = 0;
      else
        v99 = v84;
      if (v95 < a7)
        v98 = v97;
      if (v83 | v79)
        break;
      v119 = 0;
      v101 = 0;
      v111 = 0;
      v129 = 0;
      if (v98)
        goto LABEL_151;
LABEL_101:
      v94 = v96;
      if (v96 == v272)
      {
        v85 = v261;
        v19 = a10;
        if (v261 == v253)
          return result;
        goto LABEL_90;
      }
    }
    v100 = 0;
    v101 = 0;
    v102 = 1;
    v103 = v82;
    v104 = result;
    v105 = v83;
    v106 = v79;
    do
    {
      v107 = v103;
      if (v107)
        --v105;
      else
        v105 = 0;
      v108 = v100 + v107;
      if (v104)
        --v106;
      else
        v106 = 0;
      if (v104)
      {
        v101 |= (unint64_t)(v102 & ~(-1 << v79)) << v108;
        v109 = v108 + 1;
      }
      else
      {
        v109 = v108;
      }
      v102 *= 2;
      v100 = v109 - 1;
      v104 = v106 != 0;
      v103 = v105 != 0;
    }
    while (v106 | v105);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v82;
    v114 = result;
    v115 = v83;
    v116 = v79;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
      {
        v111 |= (unint64_t)(v112 & ~(-1 << v83)) << v110;
        v117 = v110 + 1;
      }
      else
      {
        v117 = v110;
      }
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v117, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v118 = 0;
    v119 = 0;
    v120 = 1;
    v121 = v82;
    v122 = result;
    v123 = v83;
    v124 = v79;
    do
    {
      v125 = v121;
      if (v125)
        --v123;
      else
        v123 = 0;
      v126 = v118 + v125;
      --v124;
      if (v122)
      {
        v119 |= (unint64_t)(v120 & v99) << v126;
        v127 = v126 + 1;
      }
      else
      {
        v124 = 0;
        v127 = v126;
      }
      v120 *= 2;
      v118 = v127 - 1;
      v122 = v124 != 0;
      v121 = v123 != 0;
    }
    while (v124 | v123);
    v128 = 0;
    v129 = 0;
    v130 = 1;
    v131 = v82;
    v132 = result;
    v133 = v83;
    v134 = v79;
    do
    {
      --v133;
      if (v131)
      {
        v129 |= (unint64_t)(v130 & v92) << v128;
        v135 = v128 + 1;
      }
      else
      {
        v133 = 0;
        v135 = v128;
      }
      --v134;
      if (!v132)
        v134 = 0;
      v130 *= 2;
      v128 = (__PAIR64__(v135, v132) - 1) >> 32;
      v132 = v134 != 0;
      v131 = v133 != 0;
    }
    while (v134 | v133);
    v13 = a2;
    a7 = v245;
    if (!v98)
      goto LABEL_101;
LABEL_151:
    if (v93)
    {
      v136 = 0;
      v137 = (_DWORD *)((char *)&v13[v99 + ((v94 - v267) << v66) - v84] + v263);
      v138 = (v94 + v265) * a12[3] * *((unsigned __int8 *)a12 + 9) + v17;
      do
      {
        v139 = v98;
        v140 = v137;
        v141 = v119;
        do
        {
          *v140++ = *(_DWORD *)(v138 + 4 * (v141 + v129));
          v141 = (v141 - v101) & v101;
          --v139;
        }
        while (v139);
        v129 = (v129 - v111) & v111;
        v137 = (_DWORD *)((char *)v137 + a11);
        ++v136;
      }
      while (v136 != v93);
    }
    goto LABEL_101;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v277);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v142 = a6 >> v20;
    v143 = 1 << v21;
    v144 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v144 = 0;
    v145 = v143 >= a5;
    if (v143 < a5)
      v146 = v21 + v20 + v144;
    else
      v146 = *((_BYTE *)a12 + 12);
    if (v145)
      LOBYTE(v147) = *((_BYTE *)a12 + 13);
    else
      v147 = -v144;
    if (!v142)
      v21 = v146;
    v237 = v21;
    if (v142)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v147;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v237 = v22;
    v23 = v21 + v20 - v22;
  }
  v148 = a10;
  v149 = a8;
  v236 = v283;
  if (v283)
  {
    v150 = 1 << v23;
    v235 = 1 << v237;
    if (1 << v237 >= a5)
      v151 = a5;
    else
      v151 = 1 << v237;
    v152 = 32 - __clz(v151 - 1);
    v153 = v151 > 1;
    if (v151 <= 1)
      v154 = 0;
    else
      v154 = v152;
    if (v150 >= a6)
      v155 = a6;
    else
      v155 = 1 << v23;
    v156 = 32 - __clz(v155 - 1);
    v157 = v284;
    v158 = v155 > 1;
    if (v155 <= 1)
      v156 = 0;
    v268 = v281;
    v269 = v156;
    v264 = v281 != 0;
    v266 = v282;
    v262 = v282 != 0;
    if (v284)
    {
      v159 = 0;
      v234 = a7 >> v237;
      v257 = a8 >> v23;
      v271 = v282 | v281;
      v275 = v285;
      v276 = v280;
      v233 = a9 + a7;
      v232 = (v235 - 1) & (a9 + a7);
      v230 = v278;
      v273 = v279;
      v231 = (v235 - 1) & a7;
      v252 = (v150 - 1) & a8;
      v254 = (v150 - 1) & (a10 + a8);
      v250 = v150 - v252;
      v246 = v284;
      v248 = v156 | v154;
      v160 = ~(-1 << v156);
      v260 = v155 > 1;
      v241 = v17;
      v239 = 1 << v23;
      v240 = v23;
      do
      {
        v161 = 0;
        v162 = v230 + v159;
        v163 = (v159 + v234) << v237;
        v164 = a9;
        if (v233 >= (v159 + v234 + 1) << v237)
          v164 = v235 - v231;
        v165 = 1 << v237;
        if (v233 < (v159 + v234 + 1) << v237)
          v165 = v232;
        v238 = v159;
        if (v163 >= v245)
          v166 = v165;
        else
          v166 = v164;
        if (v163 >= v245)
          v167 = 0;
        else
          v167 = v231;
        v242 = &a2[v167 + (v159 << v237)];
        do
        {
          v168 = v273 + v161;
          if (v275)
          {
            v169 = v271;
            if (v271)
            {
              v170 = 0;
              v169 = 0;
              v171 = 1;
              v172 = v262;
              v173 = v264;
              v175 = v266;
              v174 = v268;
              do
              {
                --v174;
                if (v173)
                  v169 |= (v171 & v162) << v170;
                else
                  v174 = 0;
                if (v173)
                  ++v170;
                --v175;
                if (v172)
                  v169 |= (v171 & v168) << v170;
                else
                  v175 = 0;
                if (v172)
                  ++v170;
                v171 *= 2;
                --v170;
                v172 = v175 != 0;
                v173 = v174 != 0;
              }
              while (v175 | v174);
            }
          }
          else
          {
            v169 = v271;
            if (v271)
            {
              v176 = 0;
              v169 = 0;
              v177 = 1;
              v179 = v262;
              v178 = v264;
              v180 = v266;
              v181 = v268;
              do
              {
                --v180;
                if (v179)
                  v169 |= (v177 & v168) << v176;
                else
                  v180 = 0;
                if (v179)
                  ++v176;
                --v181;
                if (v178)
                  v169 |= (v177 & v162) << v176;
                else
                  v181 = 0;
                if (v178)
                  ++v176;
                v177 *= 2;
                --v176;
                v178 = v181 != 0;
                v179 = v180 != 0;
              }
              while (v181 | v180);
            }
          }
          v182 = *(_DWORD *)(v17 + 4 * ((v169 + v276) | ((v169 + v276) >> 8 << 9)));
          if (v182 < 0)
          {
            v183 = v17 - *((_QWORD *)a13 + 3) + ((unint64_t)(v182 & 0x3FFFFFF) << 14);
            result = *a13;
            v184 = a13[2];
            if (result > v184)
            {
              v185 = v153;
              result = get_level_offset_within_tail(result, v184, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v158 = v260;
              v153 = v185;
              v150 = v239;
              v23 = v240;
              v17 = v241;
              v18 = a11;
              v149 = a8;
              v148 = a10;
              v183 += result;
            }
            v186 = (v161 + v257) << v23;
            v187 = v250;
            if (a10 + a8 >= (v161 + v257 + 1) << v23)
            {
              v188 = v150;
            }
            else
            {
              v187 = v148;
              v188 = v254;
            }
            if (v186 >= v149)
              v189 = 0;
            else
              v189 = v252;
            if (v186 >= v149)
              v187 = v188;
            if (!v248)
            {
              v207 = 0;
              v191 = 0;
              v200 = 0;
              v216 = 0;
              v157 = v246;
              if (!v166)
                goto LABEL_196;
LABEL_269:
              if (v187)
              {
                v221 = 0;
                v222 = (_DWORD *)((char *)v242 + (v189 + (v161 << v23)) * v18);
                do
                {
                  v223 = v166;
                  v224 = v222;
                  v225 = v207;
                  do
                  {
                    result = *(unsigned int *)(v183 + 4 * (v225 + v216));
                    *v224++ = result;
                    v225 = (v225 - v191) & v191;
                    --v223;
                  }
                  while (v223);
                  v216 = (v216 - v200) & v200;
                  v222 = (_DWORD *)((char *)v222 + v18);
                  ++v221;
                }
                while (v221 != v187);
              }
              goto LABEL_196;
            }
            v190 = 0;
            v191 = 0;
            v192 = 1;
            v193 = v158;
            v194 = v153;
            v195 = v269;
            v196 = v154;
            do
            {
              --v195;
              v197 = v193;
              if (!v197)
                v195 = 0;
              v198 = v190 + v197;
              --v196;
              if (v194)
                v191 |= (unint64_t)(v192 & ~(-1 << v154)) << v198++;
              else
                v196 = 0;
              v192 *= 2;
              v190 = v198 - 1;
              v194 = v196 != 0;
              v193 = v195 != 0;
            }
            while (v196 | v195);
            v199 = 0;
            v200 = 0;
            v201 = 1;
            v202 = v158;
            v203 = v153;
            v204 = v269;
            v205 = v154;
            do
            {
              --v204;
              if (v202)
                v200 |= (unint64_t)(v201 & v160) << v199++;
              else
                v204 = 0;
              --v205;
              if (!v203)
                v205 = 0;
              v201 *= 2;
              v199 = (__PAIR64__(v199, v203) - 1) >> 32;
              v203 = v205 != 0;
              v202 = v204 != 0;
            }
            while (v205 | v204);
            v206 = 0;
            v207 = 0;
            v208 = 1;
            v209 = v158;
            v210 = v153;
            v211 = v269;
            v212 = v154;
            do
            {
              --v211;
              v213 = v209;
              if (!v213)
                v211 = 0;
              v214 = v206 + v213;
              --v212;
              if (v210)
                v207 |= (unint64_t)(v208 & v167) << v214++;
              else
                v212 = 0;
              v208 *= 2;
              v206 = v214 - 1;
              v210 = v212 != 0;
              v209 = v211 != 0;
            }
            while (v212 | v211);
            v215 = 0;
            v216 = 0;
            v217 = 1;
            v218 = v158;
            v219 = v153;
            v220 = v269;
            LODWORD(result) = v154;
            do
            {
              --v220;
              if (v218)
                v216 |= (unint64_t)(v217 & v189) << v215++;
              else
                v220 = 0;
              LODWORD(result) = result - 1;
              if (v219)
                result = result;
              else
                result = 0;
              v217 *= 2;
              v215 = (__PAIR64__(v215, v219) - 1) >> 32;
              v219 = (_DWORD)result != 0;
              v218 = v220 != 0;
            }
            while (result | v220);
            v157 = v246;
            v158 = v260;
            if (v166)
              goto LABEL_269;
          }
LABEL_196:
          ++v161;
        }
        while (v157 > (unsigned __int16)v161);
        v159 = v238 + 1;
      }
      while (v236 > (unsigned __int16)(v238 + 1));
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressCommon<(TwiddleOrder)0,AGXSConverterPassThru<false,1ul,8u,(TwiddleOrder)0>>(uint64_t result, _QWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _QWORD *v13;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  char v62;
  BOOL v63;
  char v64;
  int v65;
  unsigned int v66;
  int v68;
  char v69;
  unsigned int v70;
  BOOL v71;
  BOOL v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  int v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  int v102;
  BOOL v103;
  BOOL v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  BOOL v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  uint64_t v119;
  int v120;
  BOOL v121;
  BOOL v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  int v130;
  BOOL v131;
  BOOL v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  _QWORD *v137;
  uint64_t v138;
  int v139;
  _QWORD *v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  char v146;
  int v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  _BOOL8 v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  BOOL v158;
  int v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  BOOL v172;
  BOOL v173;
  int v174;
  int v175;
  int v176;
  int v177;
  BOOL v178;
  BOOL v179;
  int v180;
  int v181;
  int v182;
  unint64_t v183;
  unsigned int v184;
  _BOOL8 v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  int v189;
  int v190;
  uint64_t v191;
  int v192;
  BOOL v193;
  BOOL v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  int v201;
  BOOL v202;
  BOOL v203;
  unsigned int v204;
  unsigned int v205;
  int v206;
  uint64_t v207;
  int v208;
  BOOL v209;
  BOOL v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  int v217;
  BOOL v218;
  BOOL v219;
  unsigned int v220;
  int v221;
  uint64_t *v222;
  int v223;
  uint64_t *v224;
  uint64_t v225;
  int i;
  int v227;
  _QWORD *v228;
  uint64_t v229;
  int v230;
  int v231;
  int v232;
  unsigned int v233;
  unsigned int v234;
  int v235;
  unsigned int v236;
  char v237;
  int v238;
  int v239;
  char v240;
  uint64_t v241;
  _QWORD *v242;
  unsigned int v245;
  unsigned int v246;
  int v247;
  int v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  unsigned int v253;
  int v254;
  char v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  BOOL v260;
  unsigned int v261;
  BOOL v262;
  uint64_t v263;
  BOOL v264;
  int v265;
  int v266;
  unsigned int v267;
  int v268;
  unsigned int v269;
  int v270;
  int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  int v276;
  char v277[16];
  int v278;
  int v279;
  int v280;
  int v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned __int8 v285;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v17 = result;
  v18 = a11;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    v25 = a5 > 1;
    if (a5 <= 1)
      v26 = 0;
    else
      v26 = v24;
    v27 = 32 - __clz(a6 - 1);
    v28 = a6 > 1;
    if (a6 <= 1)
      v29 = 0;
    else
      v29 = v27;
    if (v29 | v26)
    {
      v30 = 0;
      v31 = 0;
      v32 = 1;
      v33 = a6 > 1;
      v34 = a5 > 1;
      v35 = v29;
      v36 = v26;
      do
      {
        --v35;
        v37 = v33;
        if (!v37)
          v35 = 0;
        v38 = v30 + v37;
        --v36;
        if (v34)
          v31 |= (unint64_t)(v32 & ~(-1 << v26)) << v38++;
        else
          v36 = 0;
        v32 *= 2;
        v30 = v38 - 1;
        v34 = v36 != 0;
        v33 = v35 != 0;
      }
      while (v36 | v35);
      v39 = 0;
      v40 = 0;
      v41 = a6 > 1;
      v42 = a5 > 1;
      v43 = 1;
      v44 = v29;
      v45 = v26;
      do
      {
        --v44;
        if (v41)
          v40 |= (unint64_t)(v43 & ~(-1 << v29)) << v39++;
        else
          v44 = 0;
        --v45;
        if (!v42)
          v45 = 0;
        v43 *= 2;
        v39 = (__PAIR64__(v39, v42) - 1) >> 32;
        v42 = v45 != 0;
        v41 = v44 != 0;
      }
      while (v45 | v44);
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = a6 > 1;
      v50 = a5 > 1;
      v51 = v29;
      v52 = v26;
      do
      {
        --v51;
        v53 = v49;
        if (!v53)
          v51 = 0;
        v54 = v46 + v53;
        --v52;
        if (v50)
          v47 |= (unint64_t)(v48 & a7) << v54++;
        else
          v52 = 0;
        v48 *= 2;
        v46 = v54 - 1;
        v50 = v52 != 0;
        v49 = v51 != 0;
      }
      while (v52 | v51);
      v55 = 0;
      v56 = 0;
      LODWORD(result) = 1;
      do
      {
        --v29;
        if (v28)
        {
          v56 |= (unint64_t)(result & a8) << v55;
          v57 = v55 + 1;
        }
        else
        {
          v29 = 0;
          v57 = v55;
        }
        --v26;
        if (!v25)
          v26 = 0;
        result = (2 * result);
        v55 = (__PAIR64__(v57, v25) - 1) >> 32;
        v25 = v26 != 0;
        v28 = v29 != 0;
      }
      while (v26 | v29);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v31 = 0;
      v40 = 0;
      v56 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v227 = a9;
        v228 = v13;
        v229 = v47;
        do
        {
          *v228++ = *(_QWORD *)(v17 + 8 * (v229 + v56));
          v229 = (v229 - v31) & v31;
          --v227;
        }
        while (v227);
        v56 = (v56 - v40) & v40;
        v13 = (_QWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  v245 = a7;
  if (!*((_BYTE *)a12 + 20))
  {
    v58 = *((unsigned __int8 *)a12 + 13);
    v59 = *((unsigned __int8 *)a12 + 12);
    v60 = 1 << v58;
    v61 = __clz(~(-1 << -__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v61 = 0;
    v62 = v59 + v58;
    result = v59 + v58 + v61;
    if (a6 >> v58)
      v63 = 1;
    else
      v63 = 1 << v59 >= a5;
    if (v63)
      v64 = *((_BYTE *)a12 + 12);
    else
      v64 = v59 + v58 + v61;
    if (v63)
      LOBYTE(v65) = *((_BYTE *)a12 + 13);
    else
      v65 = -v61;
    v66 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v66) = 0;
    if (v60 < a6 && a5 >> v59 == 0)
      LOBYTE(v65) = v62 - v66;
    else
      LOBYTE(v66) = v64;
    v68 = 1 << v65;
    v69 = *((_BYTE *)a12 + 15);
    v70 = 1 << v69;
    if (v69)
      v71 = v70 > a3;
    else
      v71 = 1;
    v72 = v71 || v70 > a4;
    v73 = (~(-1 << v69) + a3) & (-1 << v69);
    if (v72)
      v74 = a3;
    else
      v74 = v73;
    v259 = 1 << v65;
    v75 = v68 - 1;
    v255 = v65;
    v256 = a10 + a8;
    v258 = a8 >> v65;
    v253 = (v68 - 1 + a10 + a8) >> v65;
    if (a8 >> v65 >= v253)
      return result;
    v76 = (1 << v66) - 1;
    v274 = a9 + a7;
    if (1 << v66 >= a5)
      v77 = a5;
    else
      v77 = 1 << v66;
    v78 = 32 - __clz(v77 - 1);
    result = v77 > 1;
    if (v77 <= 1)
      v79 = 0;
    else
      v79 = v78;
    v80 = v259;
    if (v259 >= a6)
      v80 = a6;
    v81 = 32 - __clz(v80 - 1);
    v82 = v80 > 1;
    v83 = v80 <= 1 ? 0 : v81;
    v267 = a7 >> v66;
    v272 = (v76 + a9 + a7) >> v66;
    if (a7 >> v66 >= v272)
      return result;
    v251 = (v74 + ~(-1 << v66)) >> v66;
    v84 = v76 & a7;
    v270 = v76 & v274;
    v247 = v75 & v256;
    v249 = v75 & a8;
    v85 = v258;
LABEL_90:
    v86 = v85 << v255;
    v87 = v85 - v258;
    v265 = v85 * v251;
    v261 = v85 + 1;
    v88 = v256 >= (v85 + 1) << v255;
    v89 = v259;
    if (!v88)
      v89 = v247;
    v90 = v259 - v249;
    if (!v88)
      v90 = v19;
    v91 = v87 << v255;
    if (v86 >= a8)
      v92 = 0;
    else
      v92 = v249;
    if (v86 >= a8)
      v93 = v89;
    else
      v93 = v90;
    v263 = (v92 + v91 - v249) * a11;
    v94 = v267;
    while (1)
    {
      v95 = v94 << v66;
      v96 = v94 + 1;
      v97 = a9;
      if (v274 >= (v94 + 1) << v66)
        v97 = (1 << v66) - v84;
      v98 = 1 << v66;
      if (v274 < v96 << v66)
        v98 = v270;
      if (v95 >= a7)
        v99 = 0;
      else
        v99 = v84;
      if (v95 < a7)
        v98 = v97;
      if (v83 | v79)
        break;
      v119 = 0;
      v101 = 0;
      v111 = 0;
      v129 = 0;
      if (v98)
        goto LABEL_151;
LABEL_101:
      v94 = v96;
      if (v96 == v272)
      {
        v85 = v261;
        v19 = a10;
        if (v261 == v253)
          return result;
        goto LABEL_90;
      }
    }
    v100 = 0;
    v101 = 0;
    v102 = 1;
    v103 = v82;
    v104 = result;
    v105 = v83;
    v106 = v79;
    do
    {
      v107 = v103;
      if (v107)
        --v105;
      else
        v105 = 0;
      v108 = v100 + v107;
      if (v104)
        --v106;
      else
        v106 = 0;
      if (v104)
      {
        v101 |= (unint64_t)(v102 & ~(-1 << v79)) << v108;
        v109 = v108 + 1;
      }
      else
      {
        v109 = v108;
      }
      v102 *= 2;
      v100 = v109 - 1;
      v104 = v106 != 0;
      v103 = v105 != 0;
    }
    while (v106 | v105);
    v110 = 0;
    v111 = 0;
    v112 = 1;
    v113 = v82;
    v114 = result;
    v115 = v83;
    v116 = v79;
    do
    {
      if (v113)
        --v115;
      else
        v115 = 0;
      if (v113)
      {
        v111 |= (unint64_t)(v112 & ~(-1 << v83)) << v110;
        v117 = v110 + 1;
      }
      else
      {
        v117 = v110;
      }
      --v116;
      if (!v114)
        v116 = 0;
      v112 *= 2;
      v110 = (__PAIR64__(v117, v114) - 1) >> 32;
      v114 = v116 != 0;
      v113 = v115 != 0;
    }
    while (v116 | v115);
    v118 = 0;
    v119 = 0;
    v120 = 1;
    v121 = v82;
    v122 = result;
    v123 = v83;
    v124 = v79;
    do
    {
      v125 = v121;
      if (v125)
        --v123;
      else
        v123 = 0;
      v126 = v118 + v125;
      --v124;
      if (v122)
      {
        v119 |= (unint64_t)(v120 & v99) << v126;
        v127 = v126 + 1;
      }
      else
      {
        v124 = 0;
        v127 = v126;
      }
      v120 *= 2;
      v118 = v127 - 1;
      v122 = v124 != 0;
      v121 = v123 != 0;
    }
    while (v124 | v123);
    v128 = 0;
    v129 = 0;
    v130 = 1;
    v131 = v82;
    v132 = result;
    v133 = v83;
    v134 = v79;
    do
    {
      --v133;
      if (v131)
      {
        v129 |= (unint64_t)(v130 & v92) << v128;
        v135 = v128 + 1;
      }
      else
      {
        v133 = 0;
        v135 = v128;
      }
      --v134;
      if (!v132)
        v134 = 0;
      v130 *= 2;
      v128 = (__PAIR64__(v135, v132) - 1) >> 32;
      v132 = v134 != 0;
      v131 = v133 != 0;
    }
    while (v134 | v133);
    v13 = a2;
    a7 = v245;
    if (!v98)
      goto LABEL_101;
LABEL_151:
    if (v93)
    {
      v136 = 0;
      v137 = (_QWORD *)((char *)&v13[v99 + ((v94 - v267) << v66) - v84] + v263);
      v138 = (v94 + v265) * a12[3] * *((unsigned __int8 *)a12 + 9) + v17;
      do
      {
        v139 = v98;
        v140 = v137;
        v141 = v119;
        do
        {
          *v140++ = *(_QWORD *)(v138 + 8 * (v141 + v129));
          v141 = (v141 - v101) & v101;
          --v139;
        }
        while (v139);
        v129 = (v129 - v111) & v111;
        v137 = (_QWORD *)((char *)v137 + a11);
        ++v136;
      }
      while (v136 != v93);
    }
    goto LABEL_101;
  }
  result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, 0, a7, a8, a9, a10, (uint64_t)v277);
  v20 = *((_BYTE *)a12 + 13);
  v21 = *((_BYTE *)a12 + 12);
  if (1 << v20 >= a6 || a5 >> v21)
  {
    v142 = a6 >> v20;
    v143 = 1 << v21;
    v144 = __clz(~(-1 << -(char)__clz(a6 - 1))) | 0xFFFFFFE0;
    if (a6 < 2)
      v144 = 0;
    v145 = v143 >= a5;
    if (v143 < a5)
      v146 = v21 + v20 + v144;
    else
      v146 = *((_BYTE *)a12 + 12);
    if (v145)
      LOBYTE(v147) = *((_BYTE *)a12 + 13);
    else
      v147 = -v144;
    if (!v142)
      v21 = v146;
    v237 = v21;
    if (v142)
      v23 = *((_BYTE *)a12 + 13);
    else
      v23 = v147;
  }
  else
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v22) = 0;
    v237 = v22;
    v23 = v21 + v20 - v22;
  }
  v148 = a10;
  v149 = a8;
  v236 = v283;
  if (v283)
  {
    v150 = 1 << v23;
    v235 = 1 << v237;
    if (1 << v237 >= a5)
      v151 = a5;
    else
      v151 = 1 << v237;
    v152 = 32 - __clz(v151 - 1);
    v153 = v151 > 1;
    if (v151 <= 1)
      v154 = 0;
    else
      v154 = v152;
    if (v150 >= a6)
      v155 = a6;
    else
      v155 = 1 << v23;
    v156 = 32 - __clz(v155 - 1);
    v157 = v284;
    v158 = v155 > 1;
    if (v155 <= 1)
      v156 = 0;
    v268 = v281;
    v269 = v156;
    v264 = v281 != 0;
    v266 = v282;
    v262 = v282 != 0;
    if (v284)
    {
      v159 = 0;
      v234 = a7 >> v237;
      v257 = a8 >> v23;
      v271 = v282 | v281;
      v275 = v285;
      v276 = v280;
      v233 = a9 + a7;
      v232 = (v235 - 1) & (a9 + a7);
      v230 = v278;
      v273 = v279;
      v231 = (v235 - 1) & a7;
      v252 = (v150 - 1) & a8;
      v254 = (v150 - 1) & (a10 + a8);
      v250 = v150 - v252;
      v246 = v284;
      v248 = v156 | v154;
      v160 = ~(-1 << v156);
      v260 = v155 > 1;
      v241 = v17;
      v239 = 1 << v23;
      v240 = v23;
      do
      {
        v161 = 0;
        v162 = v230 + v159;
        v163 = (v159 + v234) << v237;
        v164 = a9;
        if (v233 >= (v159 + v234 + 1) << v237)
          v164 = v235 - v231;
        v165 = 1 << v237;
        if (v233 < (v159 + v234 + 1) << v237)
          v165 = v232;
        v238 = v159;
        if (v163 >= v245)
          v166 = v165;
        else
          v166 = v164;
        if (v163 >= v245)
          v167 = 0;
        else
          v167 = v231;
        v242 = &a2[v167 + (v159 << v237)];
        do
        {
          v168 = v273 + v161;
          if (v275)
          {
            v169 = v271;
            if (v271)
            {
              v170 = 0;
              v169 = 0;
              v171 = 1;
              v172 = v262;
              v173 = v264;
              v175 = v266;
              v174 = v268;
              do
              {
                --v174;
                if (v173)
                  v169 |= (v171 & v162) << v170;
                else
                  v174 = 0;
                if (v173)
                  ++v170;
                --v175;
                if (v172)
                  v169 |= (v171 & v168) << v170;
                else
                  v175 = 0;
                if (v172)
                  ++v170;
                v171 *= 2;
                --v170;
                v172 = v175 != 0;
                v173 = v174 != 0;
              }
              while (v175 | v174);
            }
          }
          else
          {
            v169 = v271;
            if (v271)
            {
              v176 = 0;
              v169 = 0;
              v177 = 1;
              v179 = v262;
              v178 = v264;
              v180 = v266;
              v181 = v268;
              do
              {
                --v180;
                if (v179)
                  v169 |= (v177 & v168) << v176;
                else
                  v180 = 0;
                if (v179)
                  ++v176;
                --v181;
                if (v178)
                  v169 |= (v177 & v162) << v176;
                else
                  v181 = 0;
                if (v178)
                  ++v176;
                v177 *= 2;
                --v176;
                v178 = v181 != 0;
                v179 = v180 != 0;
              }
              while (v181 | v180);
            }
          }
          v182 = *(_DWORD *)(v17 + 4 * ((v169 + v276) | ((v169 + v276) >> 8 << 9)));
          if (v182 < 0)
          {
            v183 = v17 - *((_QWORD *)a13 + 3) + ((unint64_t)(v182 & 0x3FFFFFF) << 14);
            result = *a13;
            v184 = a13[2];
            if (result > v184)
            {
              v185 = v153;
              result = get_level_offset_within_tail(result, v184, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
              v158 = v260;
              v153 = v185;
              v150 = v239;
              v23 = v240;
              v17 = v241;
              v18 = a11;
              v149 = a8;
              v148 = a10;
              v183 += result;
            }
            v186 = (v161 + v257) << v23;
            v187 = v250;
            if (a10 + a8 >= (v161 + v257 + 1) << v23)
            {
              v188 = v150;
            }
            else
            {
              v187 = v148;
              v188 = v254;
            }
            if (v186 >= v149)
              v189 = 0;
            else
              v189 = v252;
            if (v186 >= v149)
              v187 = v188;
            if (!v248)
            {
              v207 = 0;
              v191 = 0;
              v200 = 0;
              v216 = 0;
              v157 = v246;
              if (!v166)
                goto LABEL_196;
LABEL_269:
              if (v187)
              {
                v221 = 0;
                v222 = (_QWORD *)((char *)v242 + (v189 + (v161 << v23)) * v18);
                do
                {
                  v223 = v166;
                  v224 = v222;
                  v225 = v207;
                  do
                  {
                    result = *(_QWORD *)(v183 + 8 * (v225 + v216));
                    *v224++ = result;
                    v225 = (v225 - v191) & v191;
                    --v223;
                  }
                  while (v223);
                  v216 = (v216 - v200) & v200;
                  v222 = (uint64_t *)((char *)v222 + v18);
                  ++v221;
                }
                while (v221 != v187);
              }
              goto LABEL_196;
            }
            v190 = 0;
            v191 = 0;
            v192 = 1;
            v193 = v158;
            v194 = v153;
            v195 = v269;
            v196 = v154;
            do
            {
              --v195;
              v197 = v193;
              if (!v197)
                v195 = 0;
              v198 = v190 + v197;
              --v196;
              if (v194)
                v191 |= (unint64_t)(v192 & ~(-1 << v154)) << v198++;
              else
                v196 = 0;
              v192 *= 2;
              v190 = v198 - 1;
              v194 = v196 != 0;
              v193 = v195 != 0;
            }
            while (v196 | v195);
            v199 = 0;
            v200 = 0;
            v201 = 1;
            v202 = v158;
            v203 = v153;
            v204 = v269;
            v205 = v154;
            do
            {
              --v204;
              if (v202)
                v200 |= (unint64_t)(v201 & v160) << v199++;
              else
                v204 = 0;
              --v205;
              if (!v203)
                v205 = 0;
              v201 *= 2;
              v199 = (__PAIR64__(v199, v203) - 1) >> 32;
              v203 = v205 != 0;
              v202 = v204 != 0;
            }
            while (v205 | v204);
            v206 = 0;
            v207 = 0;
            v208 = 1;
            v209 = v158;
            v210 = v153;
            v211 = v269;
            v212 = v154;
            do
            {
              --v211;
              v213 = v209;
              if (!v213)
                v211 = 0;
              v214 = v206 + v213;
              --v212;
              if (v210)
                v207 |= (unint64_t)(v208 & v167) << v214++;
              else
                v212 = 0;
              v208 *= 2;
              v206 = v214 - 1;
              v210 = v212 != 0;
              v209 = v211 != 0;
            }
            while (v212 | v211);
            v215 = 0;
            v216 = 0;
            v217 = 1;
            v218 = v158;
            v219 = v153;
            v220 = v269;
            LODWORD(result) = v154;
            do
            {
              --v220;
              if (v218)
                v216 |= (unint64_t)(v217 & v189) << v215++;
              else
                v220 = 0;
              LODWORD(result) = result - 1;
              if (v219)
                result = result;
              else
                result = 0;
              v217 *= 2;
              v215 = (__PAIR64__(v215, v219) - 1) >> 32;
              v219 = (_DWORD)result != 0;
              v218 = v220 != 0;
            }
            while (result | v220);
            v157 = v246;
            v158 = v260;
            if (v166)
              goto LABEL_269;
          }
LABEL_196:
          ++v161;
        }
        while (v157 > (unsigned __int16)v161);
        v159 = v238 + 1;
      }
      while (v236 > (unsigned __int16)(v238 + 1));
    }
  }
  return result;
}

uint64_t AGX::TextureGen2<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::TextureGen2(uint64_t a1, MTLPixelFormat a2, uint64_t a3, AGX::G9::TextureFormatTable *this, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, uint32x2_t a11, unsigned int a12, unsigned int a13, unsigned int a14, int a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, int a20,int a21,uint64_t a22,unsigned int a23,int a24,char a25,char a26,char a27)
{
  _DWORD *v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int isYUVTexture;
  char v45;
  unint64_t v46;
  char v47;
  int v48;
  int v49;
  unsigned int AddressFormatOfPlane;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint8x8_t v58;
  uint8x8_t v59;
  int v61;
  int v62;
  __IOSurface *v63;
  OSType PixelFormat;
  unint64_t v66;
  BOOL v67;
  int v68;
  unint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  int v95;
  int v96;
  char v97;
  uint64_t v98;
  unint64_t v99;
  BOOL *v100;
  _QWORD *v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  unsigned int v107;
  unsigned __int8 v108;
  char v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  BOOL v113;
  char v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  char v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  unsigned int v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  int v141;
  uint64_t v148;

  v148 = a1 + 308;
  v29 = AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(this, a2);
  v30 = v29[8] - 2;
  if (v30 <= 0x10 && ((0x187FFu >> v30) & 1) != 0)
    v31 = dword_232D7C208[v30];
  else
    v31 = 0;
  *(_QWORD *)a1 = off_250402640;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = this;
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 48) = a6;
  *(_QWORD *)(a1 + 56) = a7;
  v32 = 1 << -(char)__clz(a14 - 1);
  if (a14 <= 1)
    v32 = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = a15 - 1;
  *(uint32x2_t *)(a1 + 88) = vmax_u32(vshl_u32(a11, (uint32x2_t)vneg_s32(vdup_n_s32(a23))), (uint32x2_t)0x100000001);
  v33 = a12 >> a23;
  if (a12 >> a23 <= 1)
    v33 = 1;
  *(_DWORD *)(a1 + 96) = v33;
  *(_DWORD *)(a1 + 100) = a15;
  *(_DWORD *)(a1 + 104) = v31;
  *(_DWORD *)(a1 + 108) = a24;
  *(_DWORD *)(a1 + 112) = v32;
  *(_DWORD *)(a1 + 116) = a23;
  *(_QWORD *)(a1 + 120) = 1;
  *(uint32x2_t *)(a1 + 128) = a11;
  *(_DWORD *)(a1 + 136) = a12;
  *(_DWORD *)(a1 + 140) = a13;
  *(_DWORD *)(a1 + 144) = a23;
  *(_QWORD *)(a1 + 152) = a16;
  *(_QWORD *)(a1 + 160) = a18;
  *(_QWORD *)(a1 + 168) = a19;
  *(_DWORD *)(a1 + 176) = a20;
  *(_DWORD *)(a1 + 180) = a21;
  *(_QWORD *)(a1 + 184) = a22;
  *(_DWORD *)(a1 + 192) = a9;
  *(_DWORD *)(a1 + 196) = a10;
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = v29;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 236) = a17;
  *(_OWORD *)(a1 + 242) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 274) = 0u;
  *(_OWORD *)(a1 + 258) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  v34 = v148;
  *(_QWORD *)v148 = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = a15;
  *(_WORD *)(a1 + 380) = 0;
  *(_BYTE *)(a1 + 382) = 0;
  *(_QWORD *)(a1 + 384) = a7;
  *(_BYTE *)(a1 + 392) = a26;
  *(_BYTE *)(a1 + 393) = a27;
  v35 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Texture(AGX::G9::Device *,BOOL,AGXHardwareTextureMemoryOrder,AGX::TextureFormat const*,MTLTextureType,MTLPixelFormat,unsigned long,MTLStorageMode,AGXTextureCompressionSettings,eAGXColorSpaceConversion,eAGXTextureRotation,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned long,unsigned int,MTLCPUCacheMode,unsigned int,eAGXTextureCoordType,__IOSurface *,unsigned int,unsigned int,__IOSurface *,unsigned int,unsigned int,BOOL,BOOL,BOOL)::iosurface_alignment;
  *(_QWORD *)(a1 + 320) = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Texture(AGX::G9::Device *,BOOL,AGXHardwareTextureMemoryOrder,AGX::TextureFormat const*,MTLTextureType,MTLPixelFormat,unsigned long,MTLStorageMode,AGXTextureCompressionSettings,eAGXColorSpaceConversion,eAGXTextureRotation,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned long,unsigned int,MTLCPUCacheMode,unsigned int,eAGXTextureCoordType,__IOSurface *,unsigned int,unsigned int,__IOSurface *,unsigned int,unsigned int,BOOL,BOOL,BOOL)::iosurface_alignment;
  if (!v35)
  {
    v40 = MEMORY[0x234927AE8](*MEMORY[0x24BDD8EE8], 1);
    *(_QWORD *)(a1 + 320) = v40;
    AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::Texture(AGX::G9::Device *,BOOL,AGXHardwareTextureMemoryOrder,AGX::TextureFormat const*,MTLTextureType,MTLPixelFormat,unsigned long,MTLStorageMode,AGXTextureCompressionSettings,eAGXColorSpaceConversion,eAGXTextureRotation,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned long,unsigned int,MTLCPUCacheMode,unsigned int,eAGXTextureCoordType,__IOSurface *,unsigned int,unsigned int,__IOSurface *,unsigned int,unsigned int,BOOL,BOOL,BOOL)::iosurface_alignment = v40;
    if (a13 >= 2)
      goto LABEL_11;
LABEL_23:
    v39 = 1;
    goto LABEL_24;
  }
  if (a13 < 2)
    goto LABEL_23;
LABEL_11:
  if (a11.i32[0] <= (unsigned __int32)a11.i32[1])
    v36 = a11.u32[1];
  else
    v36 = a11.i32[0];
  if (v36 <= a12)
    v37 = a12;
  else
    v37 = v36;
  if (!*(_BYTE *)(a1 + 16))
    v36 = v37;
  v38 = 32 - __clz(v36);
  if (v36)
    v39 = v38;
  else
    v39 = 0;
LABEL_24:
  *(_DWORD *)(a1 + 64) = v39;
  v41 = *(_QWORD *)(a1 + 168);
  if (v41)
  {
    v42 = *(_QWORD *)(a1 + 32);
LABEL_26:
    v43 = *(_QWORD *)(a1 + 24);
    goto LABEL_27;
  }
  v48 = *(unsigned __int8 *)(a1 + 57);
  v42 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(a1 + 57))
    goto LABEL_26;
  switch(v42)
  {
    case 552:
    case 553:
    case 637:
    case 638:
    case 639:
    case 640:
    case 641:
      if (v48 == 1)
        goto LABEL_26;
      break;
    case 576:
    case 577:
    case 578:
    case 579:
    case 603:
    case 604:
    case 605:
    case 630:
    case 631:
    case 632:
    case 633:
    case 634:
    case 635:
    case 636:
    case 642:
    case 643:
    case 644:
    case 645:
      break;
    default:
      if (v48 == 3)
        goto LABEL_26;
      break;
  }
  v43 = *(_QWORD *)(a1 + 24);
  if (v43 == 2 && v39 <= 1)
  {
    switch(v42)
    {
      case 1:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 20:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 60:
      case 62:
      case 63:
      case 64:
      case 65:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 80:
      case 81:
      case 84:
      case 85:
      case 90:
      case 91:
      case 94:
      case 110:
      case 112:
      case 113:
      case 114:
      case 115:
      case 552:
      case 553:
      case 554:
      case 555:
      case 576:
      case 577:
      case 578:
      case 579:
      case 603:
      case 604:
      case 605:
      case 630:
      case 631:
      case 632:
      case 633:
      case 634:
      case 635:
      case 636:
      case 637:
      case 638:
      case 639:
      case 640:
      case 641:
      case 642:
      case 643:
      case 644:
      case 645:
        isYUVTexture = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::isYUVTexture(*(_QWORD *)(a1 + 32));
        if (isYUVTexture)
          v45 = 4;
        else
          v45 = 0;
        LOBYTE(v46) = 1;
        v47 = 2;
        if (*(_BYTE *)(a1 + 392))
          goto LABEL_63;
        v49 = 1;
        if (!*(_QWORD *)(a1 + 152))
          goto LABEL_60;
        goto LABEL_62;
      default:
        goto LABEL_26;
    }
  }
LABEL_27:
  isYUVTexture = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::isYUVTexture(v42);
  if (isYUVTexture)
    v45 = 4;
  else
    v45 = 0;
  LOBYTE(v46) = 1;
  v47 = 2;
  switch(v43)
  {
    case 0:
      goto LABEL_32;
    case 1:
      v45 = 1;
LABEL_32:
      v47 = 1;
      goto LABEL_45;
    case 3:
      v45 = 1;
LABEL_45:
      LOBYTE(v46) = 1;
      if (!*(_BYTE *)(a1 + 392))
        goto LABEL_56;
      goto LABEL_63;
    case 4:
      LOBYTE(v46) = 1;
      v45 = 2;
      if (!*(_BYTE *)(a1 + 392))
        goto LABEL_56;
      goto LABEL_63;
    case 5:
      goto LABEL_50;
    case 6:
      v45 = 1;
LABEL_50:
      LOBYTE(v46) = 1;
      v47 = 4;
      if (!*(_BYTE *)(a1 + 392))
        goto LABEL_56;
      goto LABEL_63;
    case 7:
      LOBYTE(v46) = 1;
      v47 = 3;
      if (!*(_BYTE *)(a1 + 392))
        goto LABEL_56;
      goto LABEL_63;
    case 8:
      LOBYTE(v46) = 1;
      v45 = 3;
      goto LABEL_55;
    case 9:
      LOBYTE(v46) = 0;
      if (!*(_BYTE *)(a1 + 392))
        goto LABEL_56;
      goto LABEL_63;
    default:
LABEL_55:
      if (*(_BYTE *)(a1 + 392))
        goto LABEL_63;
LABEL_56:
      if (v41)
      {
        AddressFormatOfPlane = IOSurfaceGetAddressFormatOfPlane();
        if (AddressFormatOfPlane >= 6)
          goto LABEL_62;
        v46 = 0x30002010000uLL >> (8 * AddressFormatOfPlane);
        goto LABEL_63;
      }
      v49 = 0;
      if (*(_QWORD *)(a1 + 152))
        goto LABEL_62;
      break;
  }
LABEL_60:
  if ((unint64_t)(v42 - 624) >= 4 && (unint64_t)(v42 - 550) >= 2)
  {
    if (v49)
      LOBYTE(v46) = 3;
    if (isYUVTexture)
      LOBYTE(v46) = 0;
  }
  else
  {
LABEL_62:
    LOBYTE(v46) = 0;
  }
LABEL_63:
  v51 = *(_QWORD *)(a1 + 56);
  *(_BYTE *)(a1 + 380) = v46;
  *(_BYTE *)(a1 + 381) = v47;
  *(_BYTE *)(a1 + 382) = v45;
  *(_QWORD *)(a1 + 384) = v51;
  if (*(_BYTE *)(v148 + 72) == 3)
  {
    if (*(_QWORD *)(a1 + 168))
    {
      IOSurfaceGetCompressedTileWidthOfPlane();
      IOSurfaceGetCompressedTileHeightOfPlane();
    }
    v52 = 0;
    *(_QWORD *)(a1 + 208) = 0;
  }
  else
  {
    v52 = *(_QWORD *)(a1 + 208);
    if ((_UNKNOWN *)v52 == &texFormatUnsupported)
    {
LABEL_92:
      *(_BYTE *)(a1 + 200) = 0;
      *(_QWORD *)(a1 + 208) = &texFormatUnsupported;
      *(_QWORD *)a1 = off_250402668;
      *(_OWORD *)(a1 + 400) = 0u;
      *(_OWORD *)(a1 + 416) = 0u;
      *(_OWORD *)(a1 + 432) = 0u;
      return a1;
    }
  }
  v53 = *(_QWORD *)(a1 + 32);
  switch(v53)
  {
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
      v58 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(a1 + 128));
      v58.i16[0] = vaddlv_u8(v58);
      if (v58.i32[0] != 1)
        goto LABEL_92;
      v59 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(a1 + 132));
      v59.i16[0] = vaddlv_u8(v59);
      if (v59.i32[0] != 1)
        goto LABEL_92;
      break;
    case 500:
    case 501:
    case 502:
    case 505:
    case 506:
    case 508:
    case 509:
    case 520:
    case 521:
    case 522:
    case 525:
    case 526:
    case 528:
    case 529:
    case 540:
    case 541:
    case 543:
    case 544:
    case 546:
    case 547:
    case 562:
    case 564:
    case 565:
    case 567:
    case 568:
    case 570:
    case 571:
    case 573:
    case 574:
    case 580:
    case 581:
    case 583:
    case 584:
    case 591:
    case 592:
    case 594:
    case 595:
    case 597:
    case 598:
    case 600:
    case 601:
    case 608:
    case 609:
    case 611:
    case 612:
    case 615:
    case 616:
    case 618:
    case 619:
      if ((*(_BYTE *)(a1 + 128) & 1) != 0 || (*(_BYTE *)(a1 + 132) & 1) != 0)
      {
        v54 = *(_QWORD *)(a1 + 40);
        if (!v54 || (v54 & 6) != 0)
          goto LABEL_92;
      }
      break;
    default:
      break;
  }
  if (*(_DWORD *)(v52 + 24) >= 2u
    && !*(_QWORD *)(a1 + 168)
    && !*(_DWORD *)(v52 + 80)
    && (unint64_t)(v53 - 624) >= 4
    && (unint64_t)(v53 - 550) >= 2
    && !*(_BYTE *)(a1 + 16))
  {
    goto LABEL_92;
  }
  v55 = *(_QWORD *)(v148 + 72);
  if (*(_DWORD *)(a1 + 236))
  {
    if (*(_QWORD *)(v148 + 72) != 1)
      goto LABEL_92;
  }
  if (*(_BYTE *)(a1 + 57) && !*(_QWORD *)(v148 + 72))
    goto LABEL_92;
  *(_BYTE *)(a1 + 200) = 1;
  *(_BYTE *)(a1 + 316) = ((unint64_t)(v53 - 185) < 0x34) & (0xFFFF3FFFCFFFFuLL >> (v53 + 71));
  *(_BYTE *)(a1 + 317) = (v53 & 0xFFFFFFFFFFFFFFF8) == 160;
  *(uint32x2_t *)(a1 + 216) = qword_232D7C810[*(unsigned int *)(v52 + 56)];
  *(_BYTE *)(a1 + 304) = (unint64_t)(v53 - 40) < 5;
  if ((v55 & 0x40000) == 0)
  {
    v56 = v53 - 586;
    if (v56 <= 0x2B && ((1 << v56) & 0xC0000000003) != 0)
    {
      if (a8)
        v57 = a8;
      else
        v57 = 7;
      *(_DWORD *)v148 = v57;
    }
    goto LABEL_120;
  }
  if ((unint64_t)(v53 - 586) <= 0x2B && ((1 << (v53 - 74)) & 0xC2000000003) != 0)
  {
    v61 = 7;
LABEL_101:
    v62 = a8;
    if (!a8)
      v62 = v61;
    *(_DWORD *)v148 = v62;
LABEL_104:
    if (*(_QWORD *)(a1 + 168))
    {
      IOSurfaceGetBulkAttachments();
      v55 = *(_QWORD *)(v148 + 72);
    }
    *(_DWORD *)(a1 + 312) = 0;
    goto LABEL_120;
  }
  v63 = *(__IOSurface **)(a1 + 168);
  if (!v63)
  {
    v61 = 0;
    goto LABEL_101;
  }
  v61 = 0;
  if ((unint64_t)(v53 - 540) <= 0x31 && ((1 << (v53 - 28)) & 0x30000000001FFLL) != 0
    || (unint64_t)(v53 - 240) < 2)
  {
    goto LABEL_101;
  }
  PixelFormat = IOSurfaceGetPixelFormat(v63);
  IOSurfaceGetYCbCrMatrix();
  if (AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::isVideoRange(PixelFormat))
    v141 = 1;
  else
    v141 = 3;
  v55 = *(_QWORD *)(v148 + 72);
  if (a8)
    v141 = a8;
  *(_DWORD *)v148 = v141;
  if ((v55 & 0x40000) != 0)
    goto LABEL_104;
LABEL_120:
  if (!(_BYTE)v55)
  {
    v66 = *(_QWORD *)(a1 + 152);
    if (((unint64_t)this & 0xFFFFFFFFFFFFFFFELL) == 0xF0 && !v66)
    {
      v66 = (*(unsigned __int8 *)(*(_QWORD *)(a1 + 208) + 49) * (unint64_t)*(unsigned int *)(a1 + 128) + 15) & 0x1FFFFFFFFF0;
      *(_QWORD *)(a1 + 152) = v66;
    }
    if (!v66)
      *(_QWORD *)(a1 + 152) = *(unsigned __int8 *)(*(_QWORD *)(a1 + 208) + 49)
                            * (unint64_t)*(unsigned int *)(a1 + 128);
  }
  if (*(_QWORD *)(a1 + 24) == 9)
    *(_QWORD *)(a1 + 152) = (*(_QWORD *)(a1 + 152) + 15) & 0xFFFFFFFFFFFFFFF0;
  v67 = 0;
  if ((v55 & 0xFF00) == 0x400)
    v68 = 6;
  else
    v68 = 1;
  *(_DWORD *)(a1 + 368) = v68;
  *(_BYTE *)(a1 + 240) = 0;
  v69 = *(unsigned int *)(a1 + 236);
  if (v55 == 1 && a25 && !(_DWORD)v69)
  {
    v70 = v55 & 0xFF00;
    if (v70 != 512 && v70 != 1024 && v70 != 768)
      goto LABEL_206;
    v71 = *(_DWORD *)(a1 + 64);
    v72 = *(_QWORD *)(a1 + 32);
    v73 = v72 - 250;
    if ((unint64_t)(v72 - 250) <= 0xB && ((1 << (v72 + 6)) & 0xC0D) != 0)
    {
      v74 = *(_DWORD *)(a1 + 128);
      if ((v74 < 0x20 || *(_DWORD *)(a1 + 132) <= 0x1Fu) && (*(_QWORD *)(a1 + 40) & 5) == 4 && v71 <= 1)
      {
        v75 = -1 << *(_BYTE *)(*(_QWORD *)(a1 + 208) + 48);
        v76 = (v74 + ~v75) & v75;
LABEL_146:
        v77 = *(_DWORD *)(a1 + 112);
        if (v76 <= 1)
          v78 = 1;
        else
          v78 = v76;
        v79 = *(_DWORD *)(a1 + 216);
        v80 = v79 - 1;
        if (v79 > v79 - 1 + v78)
          goto LABEL_203;
        v81 = v74;
        if (v73 <= 0xB)
        {
          v81 = v74;
          if (((1 << (v72 + 6)) & 0xC0D) != 0)
          {
            if (v74 < 0x20 || (v81 = v74, *(_DWORD *)(a1 + 132) <= 0x1Fu))
            {
              v81 = v74;
              if ((*(_QWORD *)(a1 + 40) & 5) == 4)
              {
                v81 = v74;
                if (v71 <= 1)
                {
                  v82 = -1 << *(_BYTE *)(*(_QWORD *)(a1 + 208) + 48);
                  v81 = (v74 + ~v82) & v82;
                }
              }
            }
          }
        }
        if (v81 <= 1)
          v81 = 1;
        v83 = v74;
        v84 = (v80 + v81) / v79;
        if (v73 <= 0xB)
        {
          v83 = v74;
          if (((1 << (v72 + 6)) & 0xC0D) != 0)
          {
            if (v74 < 0x20 || (v83 = v74, *(_DWORD *)(a1 + 132) <= 0x1Fu))
            {
              v83 = v74;
              if ((*(_QWORD *)(a1 + 40) & 5) == 4)
              {
                v83 = v74;
                if (v71 <= 1)
                {
                  v85 = -1 << *(_BYTE *)(*(_QWORD *)(a1 + 208) + 48);
                  v83 = (v74 + ~v85) & v85;
                }
              }
            }
          }
        }
        if (v83 <= 1)
          v83 = 1;
        if ((((v80 + v83) / v79 - 1) & v84) != 0)
        {
LABEL_203:
          if (v72 == 260 && (v74 < 0x40 || *(_DWORD *)(a1 + 132) < 0x40u))
          {
LABEL_206:
            v97 = 0;
LABEL_253:
            *(_BYTE *)(a1 + 232) = v97;
            goto LABEL_254;
          }
          v98 = *(_QWORD *)(a1 + 208);
          v97 = 1;
          if (!*(_DWORD *)(v98 + 24))
            goto LABEL_253;
          v99 = 0;
          v100 = (BOOL *)(a1 + 264);
          v101 = (_QWORD *)MEMORY[0x24BDB03C8];
          v67 = 1;
          v102 = (v74 + *(_DWORD *)(a1 + 216) - 1) / *(_DWORD *)(a1 + 216);
          while (1)
          {
            if (!v67)
              goto LABEL_209;
            v103 = *(_QWORD *)(v34 + 72);
            v104 = (unsigned __int16)v103 & 0xFF00;
            if (v104 == 768)
            {
              v105 = *(_DWORD *)(a1 + 136);
            }
            else if ((v103 & 0x10000) != 0 || v104 == 1024)
            {
              v105 = *(_DWORD *)(a1 + 376);
              if (v104 == 1024)
                LOWORD(v105) = 6 * v105;
            }
            else
            {
              LOWORD(v105) = 1;
            }
            v67 = 0;
            v106 = *(_DWORD *)(a1 + 132);
            v107 = *(unsigned __int8 *)(a1 + 220);
            v108 = v77 * *(_BYTE *)(v98 + 88 + v99);
            v109 = *(_BYTE *)(v98 + 48);
            v110 = *(unsigned __int8 *)(a1 + 316);
            v111 = *(_QWORD *)(a1 + 320);
            *(v100 - 8) = v108;
            *((_WORD *)v100 - 11) = v74;
            *((_WORD *)v100 - 10) = v106;
            *((_WORD *)v100 - 9) = v105;
            *(v100 - 14) = v71;
            *((_WORD *)v100 - 8) = v111;
            *(v100 - 5) = 1;
            *(v100 - 7) = v109;
            *(v100 - 4) = v79;
            *(v100 - 3) = v107;
            *(v100 - 2) = 0;
            *(v100 - 1) = v104 == 1024;
            *v100 = v104 == 768;
            v112 = (v106 + v107 - 1) / v107;
            v113 = *v101 <= (unint64_t)(v102 * v108 * v112) && *v101 >= (unint64_t)(unsigned __int16)v111;
            v34 = v148;
            if (!v113)
              goto LABEL_210;
            if (v104 == 1024)
              v114 = 2;
            else
              v114 = 1;
            if (!v110)
              v114 = 0;
            *(v100 - 6) = v114;
            v115 = (unsigned __int16)v111;
            v116 = 3 * (unsigned __int16)v111;
            if (-1431655765 * v108 >= 0x55555556)
              v116 = (unsigned __int16)v111;
            v117 = v116 / v108;
            v118 = 32 - __clz(v117 - 1);
            if (v117 < 2)
              v118 = 0;
            v119 = v118 >> 1;
            *(v100 - 10) = v118 >> 1;
            v120 = v118 - (v118 >> 1);
            *(v100 - 9) = v120;
            if (v110)
            {
              v119 = (v118 >> 1);
              if (v119 <= 5)
                LOBYTE(v119) = 5;
              *(v100 - 10) = v119;
              if ((v118 - (v118 >> 1)) <= 5u)
                v120 = 5;
              else
                v120 = v118 - (v118 >> 1);
              *(v100 - 9) = v120;
            }
            *(v100 - 13) = (v108 << (v120 + v119)) / v115;
            if (v102 < 2)
              LOBYTE(v121) = 0;
            else
              v121 = 32 - __clz(~(-1 << -(char)__clz(v102 - 1)));
            v34 = v148;
            *(v100 - 12) = v121;
            if (v112 < 2)
              LOBYTE(v122) = 0;
            else
              v122 = 32 - __clz(~(-1 << -(char)__clz(v112 - 1)));
            *(v100 - 11) = v122;
            if (v102 >> v119)
              v67 = v112 >> v120 != 0;
            else
LABEL_209:
              v67 = 0;
LABEL_210:
            ++v99;
            v100 += 24;
            if (v99 >= *(unsigned int *)(v98 + 24))
              goto LABEL_248;
          }
        }
        if (v73 <= 0xB && ((1 << (v72 + 6)) & 0xC0D) != 0)
        {
          v86 = *(_DWORD *)(a1 + 132);
          if ((v74 < 0x20 || v86 <= 0x1F) && (*(_QWORD *)(a1 + 40) & 5) == 4 && v71 <= 1)
          {
            v87 = -1 << *(_BYTE *)(*(_QWORD *)(a1 + 208) + 48);
            v88 = (v86 + ~v87) & v87;
LABEL_179:
            if (v88 <= 1)
              v89 = 1;
            else
              v89 = v88;
            v90 = *(_DWORD *)(a1 + 220);
            v91 = v90 - 1;
            if (v90 <= v90 - 1 + v89)
            {
              v92 = v86;
              if (v73 <= 0xB)
              {
                v92 = v86;
                if (((1 << (v72 + 6)) & 0xC0D) != 0)
                {
                  if (v74 < 0x20 || (v92 = v86, v86 <= 0x1F))
                  {
                    v92 = v86;
                    if ((*(_QWORD *)(a1 + 40) & 5) == 4)
                    {
                      v92 = v86;
                      if (v71 <= 1)
                      {
                        v93 = -1 << *(_BYTE *)(*(_QWORD *)(a1 + 208) + 48);
                        v92 = (v86 + ~v93) & v93;
                      }
                    }
                  }
                }
              }
              if (v92 <= 1)
                v92 = 1;
              v94 = (v91 + v92) / v90;
              if (v73 <= 0xB
                && ((1 << (v72 + 6)) & 0xC0D) != 0
                && (v74 < 0x20 || v86 <= 0x1F)
                && (*(_QWORD *)(a1 + 40) & 5) == 4
                && v71 <= 1)
              {
                v95 = -1 << *(_BYTE *)(*(_QWORD *)(a1 + 208) + 48);
                v86 = (v86 + ~v95) & v95;
              }
              v96 = v86 <= 1 ? 1 : v86;
              if ((((v91 + v96) / v90 - 1) & v94) == 0)
                goto LABEL_206;
            }
            goto LABEL_203;
          }
        }
        else
        {
          v86 = *(_DWORD *)(a1 + 132);
        }
        v88 = v86;
        goto LABEL_179;
      }
    }
    else
    {
      v74 = *(_DWORD *)(a1 + 128);
    }
    v76 = v74;
    goto LABEL_146;
  }
LABEL_248:
  *(_BYTE *)(a1 + 232) = v67;
  if ((_DWORD)v69)
  {
    v123 = *(_QWORD *)(a1 + 208);
    v124 = *(unsigned int *)(v123 + 56);
    v125 = v69 / (*(unsigned __int8 *)(v123 + 88) * (unint64_t)*(unsigned int *)(a1 + 112));
    v126 = 32 - __clz(v125 - 1);
    if (v125 >= 2)
      v127 = v126;
    else
      v127 = 0;
    *(uint32x2_t *)(a1 + 224) = vshl_u32(qword_232D7C810[v124], (uint32x2_t)__PAIR64__(v127 - (v127 >> 1), v127 >> 1));
  }
LABEL_254:
  v128 = *(unsigned __int8 *)(a1 + 200);
  *(_QWORD *)a1 = off_250402668;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  if (!v128)
    return a1;
  if (!*(_DWORD *)(*(_QWORD *)(a1 + 208) + 24))
  {
    *(_QWORD *)(a1 + 352) = 0;
LABEL_270:
    *(_QWORD *)(a1 + 360) = 0;
    return a1;
  }
  v129 = 0;
  v130 = 0;
  do
  {
    v130 += AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(a1, v129++);
    v131 = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 24);
  }
  while (v129 < v131);
  *(_QWORD *)(a1 + 352) = v130;
  if (!v131)
    goto LABEL_270;
  v132 = 0;
  v133 = 0;
  do
  {
    v133 += AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a1, v132++);
    v134 = *(_DWORD *)(*(_QWORD *)(a1 + 208) + 24);
  }
  while (v132 < v134);
  *(_QWORD *)(a1 + 360) = v133;
  if (*(_BYTE *)(a1 + 16))
    v135 = 0;
  else
    v135 = v134 >= 2;
  if (v135)
  {
    v136 = 0;
    v137 = 0;
    v138 = 0;
    do
    {
      v138 += AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)0>(a1, v136);
      v137 += AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::View)1>(a1, v136);
      v139 = a1 + 8 * v136;
      *(_QWORD *)(v139 + 336) = v138;
      *(_QWORD *)(v139 + 344) = v137;
      v140 = v136 + 2;
      ++v136;
    }
    while (v140 < *(unsigned int *)(*(_QWORD *)(a1 + 208) + 24));
  }
  return a1;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::isVideoRange(int a1)
{
  uint64_t result;
  int v3;
  int v4;
  unsigned int v5;

  result = 1;
  if (a1 > 1534617135)
  {
    if (a1 > 1952854577)
    {
      if (a1 <= 2021077551)
      {
        if (a1 > 2019963441)
        {
          if (a1 == 2019963442 || a1 == 2019963956)
            return 0;
          v3 = 2019964016;
        }
        else
        {
          if (a1 == 1952854578 || a1 == 1952855092)
            return 0;
          v3 = 2019963440;
        }
      }
      else if (a1 <= 2021078127)
      {
        if (a1 == 2021077552 || a1 == 2021077554)
          return 0;
        v3 = 2021078068;
      }
      else if (a1 > 2084070959)
      {
        if (a1 == 2088265264)
          return 0;
        v3 = 2084070960;
      }
      else
      {
        if (a1 == 2021078128)
          return 0;
        v3 = 2037741158;
      }
      goto LABEL_60;
    }
    if (a1 <= 1568171567)
    {
      if ((a1 - 1534617136) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0)
        return 0;
      v4 = -1563977264;
    }
    else
    {
      if (a1 > 1885745711)
      {
        if (a1 > 1885746227)
        {
          if (a1 == 1885746228)
            return 0;
          v3 = 1952854576;
        }
        else
        {
          if (a1 == 1885745712)
            return 0;
          v3 = 1885745714;
        }
        goto LABEL_60;
      }
      v4 = -1568171568;
    }
  }
  else if (a1 > 792225327)
  {
    if (a1 <= 1530422831)
    {
      if (a1 > 875704933)
      {
        if ((a1 - 1027423538) < 2 || a1 == 875704934)
          return 0;
        v3 = 875836518;
      }
      else
      {
        if (a1 == 792225328 || a1 == 796419632)
          return 0;
        v3 = 875704422;
      }
      goto LABEL_60;
    }
    if ((a1 - 1530422832) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0)
      return 0;
    v4 = -1534354992;
  }
  else
  {
    if (a1 > 644232303)
    {
      if (a1 <= 645494117)
      {
        if ((a1 - 645424688) > 4 || ((1 << (a1 - 48)) & 0x15) == 0)
        {
          v3 = 644232304;
          goto LABEL_60;
        }
        return 0;
      }
      if (a1 == 645494118 || a1 == 758670896)
        return 0;
      v3 = 762865200;
LABEL_60:
      if (a1 != v3)
        return result;
      return 0;
    }
    if ((a1 - 590898736) <= 4 && ((1 << (a1 - 48)) & 0x15) != 0)
      return 0;
    v4 = -641230384;
  }
  v5 = a1 + v4;
  if (v5 <= 4 && ((1 << v5) & 0x15) != 0)
    return 0;
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::isYUVTexture(uint64_t a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 240:
    case 241:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 540:
    case 541:
    case 542:
    case 543:
    case 544:
    case 545:
    case 546:
    case 547:
    case 548:
    case 560:
    case 562:
    case 563:
    case 564:
    case 565:
    case 566:
    case 567:
    case 568:
    case 569:
    case 570:
    case 571:
    case 572:
    case 573:
    case 574:
    case 575:
    case 580:
    case 581:
    case 582:
    case 583:
    case 584:
    case 585:
    case 588:
    case 589:
    case 590:
    case 591:
    case 592:
    case 593:
    case 594:
    case 595:
    case 596:
    case 597:
    case 598:
    case 599:
    case 600:
    case 601:
    case 602:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 615:
    case 616:
    case 617:
    case 618:
    case 619:
    case 620:
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

int64_t AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::createTextureViewForBlit(uint64_t a1, uint64_t a2, uint64_t a3, AGX::G9::TextureFormatTable *a4, uint64_t a5, int a6, unsigned int a7, int a8, unsigned int a9, unsigned int a10, int a11, uint64_t a12, int a13, int a14, uint64_t a15, unsigned int a16, int a17, char a18)
{
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int AddressingBaseLevelWidthInBlocks;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int AddressingBaseLevelHeightInBlocks;
  uint32x2_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  AGX::G9::TextureFormatTable *v41;
  int v42;
  int64_t GPUVirtualAddress;
  int64_t v44;
  int64_t v45;
  int64_t v46;
  int64_t v47;
  int64_t result;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;

  v21 = *(_DWORD *)(a2 + 144) + a8;
  v22 = *(_QWORD *)(a2 + 40);
  v23 = *(_QWORD *)(a2 + 32) - 250;
  v53 = *(_DWORD *)(a2 + 64);
  if (v23 <= 0xB && ((1 << (*(_BYTE *)(a2 + 32) + 6)) & 0xC0D) != 0)
  {
    v24 = *(_DWORD *)(a2 + 128);
    if ((v24 < 0x20 || *(_DWORD *)(a2 + 132) <= 0x1Fu)
      && (*(_QWORD *)(a2 + 40) & 5) == 4
      && *(_DWORD *)(a2 + 64) <= 1u)
    {
      v25 = -1 << *(_BYTE *)(*(_QWORD *)(a2 + 208) + 48);
      v26 = (v24 + ~v25) & v25;
      goto LABEL_10;
    }
  }
  else
  {
    v24 = *(_DWORD *)(a2 + 128);
  }
  v26 = v24;
LABEL_10:
  v27 = *(_DWORD *)(a2 + 140);
  v55 = *(_DWORD *)(a2 + 136);
  if (v26 <= 1)
    v26 = 1;
  v28 = (*(_DWORD *)(a2 + 216) + v26 - 1) / *(_DWORD *)(a2 + 216);
  AddressingBaseLevelWidthInBlocks = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getAddressingBaseLevelWidthInBlocks(a2, v21);
  v30 = AddressingBaseLevelWidthInBlocks << v21;
  if (AddressingBaseLevelWidthInBlocks << v21 <= v28)
    v30 = v28;
  if (AddressingBaseLevelWidthInBlocks == 1)
    v31 = v28;
  else
    v31 = v30;
  v54 = v31;
  if (v23 <= 0xB && ((1 << v23) & 0xC0D) != 0)
  {
    v32 = *(_DWORD *)(a2 + 132);
    if ((v24 < 0x20 || v32 <= 0x1F) && (v22 & 5) == 4 && v53 <= 1)
    {
      v33 = -1 << *(_BYTE *)(*(_QWORD *)(a2 + 208) + 48);
      v32 = (v32 + ~v33) & v33;
    }
  }
  else
  {
    v32 = *(_DWORD *)(a2 + 132);
  }
  if (v32 <= 1)
    v32 = 1;
  v34 = (*(_DWORD *)(a2 + 220) + v32 - 1) / *(_DWORD *)(a2 + 220);
  AddressingBaseLevelHeightInBlocks = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getAddressingBaseLevelHeightInBlocks(a2, v21);
  v37 = AddressingBaseLevelHeightInBlocks << v21;
  if (AddressingBaseLevelHeightInBlocks << v21 <= v34)
    v37 = v34;
  if (AddressingBaseLevelHeightInBlocks == 1)
    v37 = v34;
  if (a18)
  {
    v38 = *(_QWORD *)(a2 + 380) & 0xFF00;
    v39 = a5;
    v40 = a3;
    v41 = a4;
    if ((*(_QWORD *)(a2 + 380) & 0x10000) != 0 || v38 == 1024)
    {
      if (v38 == 1024)
        v42 = 6 * *(_DWORD *)(a2 + 376);
      else
        v42 = *(_DWORD *)(a2 + 376);
    }
    else
    {
      v42 = 1;
    }
  }
  else
  {
    v42 = 1;
    v39 = a5;
    v40 = a3;
    v41 = a4;
  }
  LODWORD(v52) = *(_DWORD *)(a2 + 236);
  AGX::TextureGen2<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::TextureGen2(a1, *(MTLPixelFormat *)(a2 + 8), v40, v41, v39, *(_QWORD *)(a2 + 48), 2, a6, 0, 84148994, v36, v54, v37, v55, v27, __SPAIR64__(v42, a10), a11, v52, a12,
    a13,
    a14,
    a15,
    a16,
    a17,
    v21,
    SBYTE1(v21),
    SBYTE2(v21));
  *(_QWORD *)a1 = off_250402690;
  GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(a2, a7, 0, 0, a9);
  if (*(_DWORD *)(a1 + 236))
  {
    v44 = 0;
    v45 = 0;
  }
  else
  {
    v46 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(a2, a7, v21, 0, a9);
    v47 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(a1, 0, v21, 0, 0);
    v44 = v46 - GPUVirtualAddress;
    v45 = *(_QWORD *)(a1 + 72) - v47;
  }
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 72) = v44 + v45 + GPUVirtualAddress;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((unint64_t)*(unsigned __int8 *)(a1 + 381) << 8 == 768)
  {
    v49 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(a2, 0, 0, 0, a9);
    v50 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(a2, 0, 0, 1u, a9);
    v51 = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(a1, 0, 0, 0, a9);
    result = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getGPUVirtualAddress(a1, 0, 0, 1u, a9);
    *(_QWORD *)(a1 + 328) = v50 + v51 - (v49 + result);
  }
  return result;
}

BOOL AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::blitTextureViewAllowed(uint64_t a1, int a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int AddressingBaseLevelWidthInBlocks;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int AddressingBaseLevelHeightInBlocks;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  if (!*(_DWORD *)(*(_QWORD *)(a1 + 208) + 56) || *(_DWORD *)(a1 + 64) < 2u)
    return 1;
  v3 = *(_DWORD *)(a1 + 144) + a2;
  v4 = *(_DWORD *)(a1 + 128);
  if (v4 <= 1)
    v4 = 1;
  v5 = (*(_DWORD *)(a1 + 216) + v4 - 1) / *(_DWORD *)(a1 + 216);
  AddressingBaseLevelWidthInBlocks = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getAddressingBaseLevelWidthInBlocks(a1, *(_BYTE *)(a1 + 144) + a2);
  v7 = AddressingBaseLevelWidthInBlocks << v3;
  if (AddressingBaseLevelWidthInBlocks << v3 <= v5)
    v7 = v5;
  if (AddressingBaseLevelWidthInBlocks != 1)
    v5 = v7;
  v8 = *(_DWORD *)(a1 + 132);
  if (v8 <= 1)
    v8 = 1;
  v9 = (*(_DWORD *)(a1 + 220) + v8 - 1) / *(_DWORD *)(a1 + 220);
  AddressingBaseLevelHeightInBlocks = AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::getAddressingBaseLevelHeightInBlocks(a1, v3);
  v11 = AddressingBaseLevelHeightInBlocks << v3;
  if (AddressingBaseLevelHeightInBlocks << v3 <= v9)
    v11 = v9;
  if (AddressingBaseLevelHeightInBlocks == 1)
    v11 = v9;
  v12 = *(_DWORD *)(a1 + 136);
  if (v5 > v11)
    v11 = v5;
  if (v11 > v12)
    v12 = v11;
  if (!*(_BYTE *)(a1 + 16))
    v11 = v12;
  v13 = 32 - __clz(v11);
  if (v11)
    v14 = v13;
  else
    v14 = 0;
  return v3 < v14 && v14 > 1;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::isDepthStencilAllocTypePadded(uint64_t a1)
{
  int v4;

  if ((unint64_t)(*(_QWORD *)(a1 + 32) - 250) > 0xB || ((1 << (*(_BYTE *)(a1 + 32) + 6)) & 0xC0D) == 0)
    return 0;
  if (*(_DWORD *)(a1 + 128) >= 0x20u && *(_DWORD *)(a1 + 132) > 0x1Fu)
    return 0;
  v4 = (*(_QWORD *)(a1 + 40) & 5) == 4 && *(_DWORD *)(a1 + 64) < 2u;
  return (v4 << 31 >> 31) & 1;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::sumLevelSizesTwiddled(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v6 = 1 << -(char)__clz(a2 - 1);
  if (a2 <= 1)
    v6 = 1;
  v7 = 1 << -__clz(a3 - 1);
  if (a3 <= 1)
    v7 = 1;
  v8 = a6 - a5;
  if (a6 <= a5)
    return 0;
  v9 = *(unsigned int *)(a1 + 112) * (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 + 208) + a4 + 88);
  v10 = *(unsigned int *)(a1 + 236);
  v11 = *(_QWORD *)(a1 + 380) & 0xFF00;
  v12 = v11 == 768;
  result = 0;
  if ((_DWORD)v10)
  {
    v14 = v10;
    if (v12)
    {
      do
      {
        v15 = v9 * v6 * v7;
        if (v15 < v10)
          v14 = 1;
        result += (v15 + v14 - 1) & -v14;
        v7 >>= v7 > 1;
        v6 >>= v6 > 1;
        --v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v16 = v9 * v6 * v7;
        if (v16 < v10)
          v14 = 1;
        result += (v16 + v14 - 1) & -v14;
        v7 >>= v7 > 1;
        v6 >>= v6 > 1;
        --v8;
      }
      while (v8);
    }
  }
  else if (v11 == 768)
  {
    do
    {
      result += v9 * v6 * v7;
      v7 >>= v7 > 1;
      v6 >>= v6 > 1;
      --v8;
    }
    while (v8);
  }
  else
  {
    do
    {
      result += v9 * v6 * v7;
      v7 >>= v7 > 1;
      v6 >>= v6 > 1;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::sumLevelSizesTiled(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5)
{
  char v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;

  if (!a5)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = *(_QWORD *)(a1 + 208);
  v10 = *(_DWORD *)(v9 + 56);
  v11 = *(unsigned int *)(a1 + 112) * (unint64_t)*(unsigned __int8 *)(v9 + a4 + 88) - 1;
  while (1)
  {
    v23 = 0;
    v24 = 0;
    switch(v11)
    {
      case 0uLL:
        v23 = 128;
        v24 = 128;
        break;
      case 1uLL:
        v24 = 128;
        v23 = 64;
        break;
      case 2uLL:
      case 4uLL:
      case 5uLL:
      case 6uLL:
      case 8uLL:
      case 9uLL:
      case 0xAuLL:
      case 0xBuLL:
      case 0xCuLL:
      case 0xDuLL:
      case 0xEuLL:
      case 0x10uLL:
      case 0x11uLL:
      case 0x12uLL:
      case 0x13uLL:
      case 0x14uLL:
      case 0x15uLL:
      case 0x16uLL:
      case 0x17uLL:
      case 0x18uLL:
      case 0x19uLL:
      case 0x1AuLL:
      case 0x1BuLL:
      case 0x1CuLL:
      case 0x1DuLL:
      case 0x1EuLL:
        break;
      case 3uLL:
        v23 = 64;
        v24 = 64;
        break;
      case 7uLL:
        v24 = 64;
        v23 = 32;
        break;
      case 0xFuLL:
        v23 = 32;
        v24 = 32;
        break;
      case 0x1FuLL:
        v24 = 32;
        v23 = 16;
        break;
      default:
        v24 = 0;
        break;
    }
    v25 = -1 << v7;
    if (v10)
      v26 = ~v25;
    else
      v26 = 0;
    v27 = (v26 + a3) >> v7;
    if (v27 <= 1)
      v27 = 1;
    v28 = (v26 + a2) >> v7;
    if (v28 <= 1)
      v28 = 1;
    if (v28 < v23 || v27 < v24)
      break;
    v13 = 0;
    v12 = 0;
    switch(v11)
    {
      case 0uLL:
        v13 = 128;
        v12 = 128;
        break;
      case 1uLL:
        v12 = 128;
        v13 = 64;
        break;
      case 2uLL:
      case 4uLL:
      case 5uLL:
      case 6uLL:
      case 8uLL:
      case 9uLL:
      case 0xAuLL:
      case 0xBuLL:
      case 0xCuLL:
      case 0xDuLL:
      case 0xEuLL:
      case 0x10uLL:
      case 0x11uLL:
      case 0x12uLL:
      case 0x13uLL:
      case 0x14uLL:
      case 0x15uLL:
      case 0x16uLL:
      case 0x17uLL:
      case 0x18uLL:
      case 0x19uLL:
      case 0x1AuLL:
      case 0x1BuLL:
      case 0x1CuLL:
      case 0x1DuLL:
      case 0x1EuLL:
        break;
      case 3uLL:
        v13 = 64;
        v12 = 64;
        break;
      case 7uLL:
        v12 = 64;
        v13 = 32;
        break;
      case 0xFuLL:
        v13 = 32;
        v12 = 32;
        break;
      case 0x1FuLL:
        v12 = 32;
        v13 = 16;
        break;
      default:
        v12 = 0;
        break;
    }
    v14 = ~v25;
    v15 = (a2 - 1 + v13) / v13;
    v16 = (a3 - 1 + v12) / v12;
    LODWORD(v17) = v16 >> v7;
    if ((v15 & v14) != 0)
      v17 = v17;
    else
      v17 = 0;
    v18 = ((v16 * v15) >> v6) + v17;
    v19 = (v16 & v14) == 0;
    if ((v16 & v14) != 0)
      v20 = v15 >> v7;
    else
      v20 = 0;
    v21 = v18 + v20;
    if (!v19)
      v18 = v21 + 1;
    if ((v15 & v14) != 0)
      v22 = v18;
    else
      v22 = v21;
    v8 += v22 << 14;
    ++v7;
    v6 += 2;
    if (a5 == v7)
      return v8;
  }
  v8 += AGX::Texture<(AGXTextureMemoryLayout)1,AGX::G9::Encoders,AGX::G9::Classes>::sumLevelSizesTwiddled(a1, v28, v27, a4, v7, a5);
  return v8;
}

void *AGX::G9::TextureFormatTable::chooseTextureFormatOBJC(AGX::G9::TextureFormatTable *this, MTLPixelFormat a2)
{
  int v2;
  void *result;

  v2 = (_DWORD)this - 1;
  result = &texFormatA8;
  switch(v2)
  {
    case 0:
      return result;
    case 9:
      result = &texFormatR8;
      break;
    case 10:
      result = &texFormatsR8;
      break;
    case 11:
      result = &texFormatR8_SNORM;
      break;
    case 12:
      result = &texFormatR8UI;
      break;
    case 13:
      result = &texFormatR8I;
      break;
    case 19:
      result = &texFormatR16;
      break;
    case 21:
      result = &texFormatR16_SNORM;
      break;
    case 22:
      result = &texFormatR16UI;
      break;
    case 23:
      result = &texFormatR16I;
      break;
    case 24:
      result = &texFormatR16F;
      break;
    case 29:
      result = &texFormatRG8;
      break;
    case 30:
      result = &texFormatsRG8;
      break;
    case 31:
      result = &texFormatRG8_SNORM;
      break;
    case 32:
      result = &texFormatRG8UI;
      break;
    case 33:
      result = &texFormatRG8I;
      break;
    case 39:
      result = &texFormatRGB565;
      break;
    case 40:
      result = &texFormatRGB5A1;
      break;
    case 41:
      result = &texFormatRGBA4;
      break;
    case 42:
      result = &texFormatA1RGB5;
      break;
    case 43:
      result = &texFormatBGRA4;
      break;
    case 52:
      result = &texFormatR32UI;
      break;
    case 53:
      result = &texFormatR32I;
      break;
    case 54:
      result = &texFormatR32F;
      break;
    case 59:
      result = &texFormatRG16;
      break;
    case 61:
      result = &texFormatRG16_SNORM;
      break;
    case 62:
      result = &texFormatRG16UI;
      break;
    case 63:
      result = &texFormatRG16I;
      break;
    case 64:
      result = &texFormatRG16F;
      break;
    case 69:
      result = &texFormatRGBA8;
      break;
    case 70:
      result = &texFormatsRGBA8;
      break;
    case 71:
      result = &texFormatRGBA8_SNORM;
      break;
    case 72:
      result = &texFormatRGBA8UI;
      break;
    case 73:
      result = &texFormatRGBA8I;
      break;
    case 79:
      result = &texFormatBGRA8;
      break;
    case 80:
      result = &texFormatsBGRA8;
      break;
    case 83:
      result = &texFormatARGB8;
      break;
    case 84:
      result = &texFormatsARGB8;
      break;
    case 89:
      result = &texFormatRGB10_A2;
      break;
    case 90:
      result = &texFormatRGB10_A2UI;
      break;
    case 91:
      result = &texFormatR11FG11FB10F;
      break;
    case 92:
      result = &texFormatRGB9_E5;
      break;
    case 93:
      result = &texFormatBGR10_A2;
      break;
    case 102:
      result = &texFormatRG32UI;
      break;
    case 103:
      result = &texFormatRG32I;
      break;
    case 104:
      result = &texFormatRG32F;
      break;
    case 109:
      result = &texFormatRGBA16;
      break;
    case 111:
      result = &texFormatRGBA16_SNORM;
      break;
    case 112:
      result = &texFormatRGBA16UI;
      break;
    case 113:
      result = &texFormatRGBA16I;
      break;
    case 114:
      result = &texFormatRGBA16F;
      break;
    case 122:
      result = &texFormatRGBA32UI;
      break;
    case 123:
      result = &texFormatRGBA32I;
      break;
    case 124:
      result = &texFormatRGBA32F;
      break;
    case 159:
      result = &texFormatPVRTC2RGB;
      break;
    case 160:
      result = &texFormatPVRTC2sRGB;
      break;
    case 161:
      result = &texFormatPVRTC4RGB;
      break;
    case 162:
      result = &texFormatPVRTC4sRGB;
      break;
    case 163:
      result = &texFormatPVRTC2RGBA;
      break;
    case 164:
      result = &texFormatPVRTC2sRGBA;
      break;
    case 165:
      result = &texFormatPVRTC4RGBA;
      break;
    case 166:
      result = &texFormatPVRTC4sRGBA;
      break;
    case 169:
      result = &texFormatR11EAC;
      break;
    case 171:
      result = &texFormatR11EAC_SNORM;
      break;
    case 173:
      result = &texFormatRG11EAC;
      break;
    case 175:
      result = &texFormatRG11EAC_SNORM;
      break;
    case 177:
      result = &texFormatETC2RGBA8;
      break;
    case 178:
      result = &texFormatETC2sRGBA8;
      break;
    case 179:
      result = &texFormatETC2RGB8;
      break;
    case 180:
      result = &texFormatETC2sRGB8;
      break;
    case 181:
      result = &texFormatETC2RGB8A1;
      break;
    case 182:
      result = &texFormatETC2sRGB8A1;
      break;
    case 184:
      result = &texFormatASTC4x2sRGBA_UNORM;
      break;
    case 185:
      result = &texFormatASTC4x4sRGBA_UNORM;
      break;
    case 186:
      result = &texFormatASTC5x4sRGBA_UNORM;
      break;
    case 187:
      result = &texFormatASTC5x5sRGBA_UNORM;
      break;
    case 188:
      result = &texFormatASTC6x5sRGBA_UNORM;
      break;
    case 189:
      result = &texFormatASTC6x6sRGBA_UNORM;
      break;
    case 190:
      result = &texFormatASTC8x4sRGBA_UNORM;
      break;
    case 191:
      result = &texFormatASTC8x5sRGBA_UNORM;
      break;
    case 192:
      result = &texFormatASTC8x6sRGBA_UNORM;
      break;
    case 193:
      result = &texFormatASTC8x8sRGBA_UNORM;
      break;
    case 194:
      result = &texFormatASTC10x5sRGBA_UNORM;
      break;
    case 195:
      result = &texFormatASTC10x6sRGBA_UNORM;
      break;
    case 196:
      result = &texFormatASTC10x8sRGBA_UNORM;
      break;
    case 197:
      result = &texFormatASTC10x10sRGBA_UNORM;
      break;
    case 198:
      result = &texFormatASTC12x10sRGBA_UNORM;
      break;
    case 199:
      result = &texFormatASTC12x12sRGBA_UNORM;
      break;
    case 202:
      result = &texFormatASTC4x2RGBA_LP;
      break;
    case 203:
      result = &texFormatASTC4x4RGBA_LP;
      break;
    case 204:
      result = &texFormatASTC5x4RGBA_LP;
      break;
    case 205:
      result = &texFormatASTC5x5RGBA_LP;
      break;
    case 206:
      result = &texFormatASTC6x5RGBA_LP;
      break;
    case 207:
      result = &texFormatASTC6x6RGBA_LP;
      break;
    case 208:
      result = &texFormatASTC8x4RGBA_LP;
      break;
    case 209:
      result = &texFormatASTC8x5RGBA_LP;
      break;
    case 210:
      result = &texFormatASTC8x6RGBA_LP;
      break;
    case 211:
      result = &texFormatASTC8x8RGBA_LP;
      break;
    case 212:
      result = &texFormatASTC10x5RGBA_LP;
      break;
    case 213:
      result = &texFormatASTC10x6RGBA_LP;
      break;
    case 214:
      result = &texFormatASTC10x8RGBA_LP;
      break;
    case 215:
      result = &texFormatASTC10x10RGBA_LP;
      break;
    case 216:
      result = &texFormatASTC12x10RGBA_LP;
      break;
    case 217:
      result = &texFormatASTC12x12RGBA_LP;
      break;
    case 220:
      result = &texFormatASTC4x2RGBA;
      break;
    case 221:
      result = &texFormatASTC4x4RGBA;
      break;
    case 222:
      result = &texFormatASTC5x4RGBA;
      break;
    case 223:
      result = &texFormatASTC5x5RGBA;
      break;
    case 224:
      result = &texFormatASTC6x5RGBA;
      break;
    case 225:
      result = &texFormatASTC6x6RGBA;
      break;
    case 226:
      result = &texFormatASTC8x4RGBA;
      break;
    case 227:
      result = &texFormatASTC8x5RGBA;
      break;
    case 228:
      result = &texFormatASTC8x6RGBA;
      break;
    case 229:
      result = &texFormatASTC8x8RGBA;
      break;
    case 230:
      result = &texFormatASTC10x5RGBA;
      break;
    case 231:
      result = &texFormatASTC10x6RGBA;
      break;
    case 232:
      result = &texFormatASTC10x8RGBA;
      break;
    case 233:
      result = &texFormatASTC10x10RGBA;
      break;
    case 234:
      result = &texFormatASTC12x10RGBA;
      break;
    case 235:
      result = &texFormatASTC12x12RGBA;
      break;
    case 239:
      result = &texFormatYUY2_RGB;
      break;
    case 240:
      result = &texFormatUYVY_RGB;
      break;
    case 249:
      result = &texFormatD16;
      break;
    case 251:
      result = &texFormatD32;
      break;
    case 252:
    case 260:
      result = &texFormatS8;
      break;
    case 259:
      result = &texFormatD32FS8_2PLANE;
      break;
    case 299:
      result = &texFormatRGB8;
      break;
    case 300:
      result = &texFormatsRGB8;
      break;
    case 301:
      result = &texFormatRGB8_SNORM;
      break;
    case 302:
      result = &texFormatRGB8UI;
      break;
    case 303:
      result = &texFormatRGB8I;
      break;
    case 312:
      result = &texFormatRGBX16UI;
      break;
    case 313:
      result = &texFormatRGBX16I;
      break;
    case 314:
      result = &texFormatRGBX16F;
      break;
    case 322:
      result = &texFormatRGBX32UI;
      break;
    case 323:
      result = &texFormatRGBX32I;
      break;
    case 324:
      result = &texFormatRGBX32F;
      break;
    case 499:
      result = &texFormatYCBCR8_420_2PLANE;
      break;
    case 500:
      result = &texFormatYCBCR8_422_1PLANE;
      break;
    case 501:
      result = &texFormatYCBCR8_422_2PLANE;
      break;
    case 502:
      result = &texFormatYCBCR8_444_2PLANE;
      break;
    case 503:
      result = &texFormatYCBCR10_444_1PLANE;
      break;
    case 504:
      result = &texFormatYCBCR10_420_2PLANE;
      break;
    case 505:
      result = &texFormatYCBCR10_422_2PLANE;
      break;
    case 506:
      result = &texFormatYCBCR10_444_2PLANE;
      break;
    case 507:
      result = &texFormatYCBCR10_420_2PLANE_PACKED;
      break;
    case 508:
      result = &texFormatYCBCR10_422_2PLANE_PACKED;
      break;
    case 509:
      result = &texFormatYCBCR10_444_2PLANE_PACKED;
      break;
    case 519:
      result = &texFormatsYCBCR8_420_2PLANE;
      break;
    case 520:
      result = &texFormatsYCBCR8_422_1PLANE;
      break;
    case 521:
      result = &texFormatsYCBCR8_422_2PLANE;
      break;
    case 522:
      result = &texFormatsYCBCR8_444_2PLANE;
      break;
    case 523:
      result = &texFormatsYCBCR10_444_1PLANE;
      break;
    case 524:
      result = &texFormatsYCBCR10_420_2PLANE;
      break;
    case 525:
      result = &texFormatsYCBCR10_422_2PLANE;
      break;
    case 526:
      result = &texFormatsYCBCR10_444_2PLANE;
      break;
    case 527:
      result = &texFormatsYCBCR10_420_2PLANE_PACKED;
      break;
    case 528:
      result = &texFormatsYCBCR10_422_2PLANE_PACKED;
      break;
    case 529:
      result = &texFormatsYCBCR10_444_2PLANE_PACKED;
      break;
    case 539:
      result = &texFormatRGB8_420_2PLANE;
      break;
    case 540:
      result = &texFormatRGB8_422_2PLANE;
      break;
    case 541:
      result = &texFormatRGB8_444_2PLANE;
      break;
    case 542:
      result = &texFormatRGB10_420_2PLANE;
      break;
    case 543:
      result = &texFormatRGB10_422_2PLANE;
      break;
    case 544:
      result = &texFormatRGB10_444_2PLANE;
      break;
    case 545:
      result = &texFormatRGB10_420_2PLANE_PACKED;
      break;
    case 546:
      result = &texFormatRGB10_422_2PLANE_PACKED;
      break;
    case 547:
      result = &texFormatRGB10_444_2PLANE_PACKED;
      break;
    case 549:
      result = &texFormatXRRGB10_PLANE_A8_PLANE;
      break;
    case 550:
      result = &texFormatXRSRGB10_PLANE_A8_PLANE;
      break;
    case 551:
      result = &texFormatARGBV16_XR10;
      break;
    case 552:
      result = &texFormatsARGBV16_XR10;
      break;
    case 553:
      result = &texFormatXRRGB10;
      break;
    case 554:
      result = &texFormatXRSRGB10;
      break;
    case 561:
      result = &texFormatYCBCR8_422_1PLANE_REV;
      break;
    case 587:
      result = &texFormatR10_1PLANE_PACKED;
      break;
    case 588:
      result = &texFormatRG10_1PLANE_PACKED;
      break;
    default:
      result = &texFormatUnsupported;
      break;
  }
  return result;
}

void sub_232D57AA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void ***v2;
  void **v4;
  void **v5;
  void *v6;

  v4 = *(void ***)(v1 + 1400);
  v5 = *(void ***)(v1 + 1408);
  if (v4 == v5)
  {
    if (!v4)
      goto LABEL_3;
  }
  else
  {
    do
    {
      v6 = *v4++;
      free(v6);
    }
    while (v4 != v5);
    v4 = *v2;
    if (!*v2)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  *(_QWORD *)(v1 + 1408) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

void sub_232D59B18(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_232D59D58(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

char *initializeWithDevice<AGXA10FamilyVisibleFunctionTable>(void *a1, void *a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  if (*MEMORY[0x24BDB03C8] && (a4 & 1) == 0)
  {
    v20 = 0;
    v19 = 0;
    v9 = (a3 & 0xF0) == 0x20 ? a3 | 0x20000 : a3;
    v10 = objc_msgSend(a2, "allocBufferSubDataWithLength:options:alignment:heapIndex:bufferIndex:bufferOffset:parentAddress:parentLength:", 0, v9, 256, (char *)&v20 + 2, &v20, &v19, 0, 0);
    if (v10)
    {
      LODWORD(v17) = 104;
      v11 = (char *)objc_msgSend(a1, "initWithPrimaryBuffer:heapIndex:bufferIndex:bufferOffset:length:args:argsSize:gpuTag:", v10, SHIWORD(v20), (__int16)v20, v19, 0, a5, v17, 0);
      if (!v11)
        return v11;
      goto LABEL_10;
    }
  }
  LODWORD(v18) = 104;
  v11 = (char *)objc_msgSend(a1, "initWithDevice:pointer:length:alignment:options:sysMemSize:gpuAddress:gpuTag:args:argsSize:deallocator:", a2, 0, 0, 1, a3, 0, 0, 0, a5, v18, 0);
  if (v11)
  {
LABEL_10:
    v12 = &v11[*MEMORY[0x24BE51650]];
    v13 = *((_QWORD *)v12 + 9);
    v14 = *((_QWORD *)v12 + 16);
    v15 = *((_QWORD *)v12 + 2) & 0x1F00000000000000 | objc_msgSend(v11, "length") & 0xFFFFFFFFFFFFFFLL | 0x2000000000000000;
    *((_QWORD *)v12 + 1) = v13;
    *((_QWORD *)v12 + 2) = v15;
    *((_QWORD *)v12 + 3) = v14;
  }
  return v11;
}

uint64_t AGX::VsStateConfigGen1<AGX::G9::Encoders,AGX::G9::Classes,AGX::G9::ObjClasses>::VsStateConfigGen1(uint64_t result, _QWORD *a2)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  BOOL v5;
  int *v6;
  unsigned __int16 *v7;
  int *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int v13;
  unsigned __int8 v14;
  _DWORD *v15;
  unsigned __int16 *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int **v20;
  int *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  int *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned __int16 *v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  _BOOL4 v31;
  int v32;
  int v33;
  int *v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;

  *(_BYTE *)(result + 8) = 0;
  v2 = (unsigned int **)(a2 + 28);
  if (a2[28])
  {
    if (!a2[29])
      v2 = (unsigned int **)(a2 + 98);
  }
  else
  {
    v2 = (unsigned int **)(a2 + 98);
  }
  v4 = *v2;
  v3 = v2[1];
  if (v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (v5)
    v6 = 0;
  else
    v6 = (int *)((char *)v4 + *v4);
  v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 < 5u)
  {
    v8 = 0;
  }
  else
  {
    v8 = (int *)v7[2];
    if (v8)
      v8 = (int *)((char *)v8 + (_QWORD)v6 + *(unsigned int *)((char *)v8 + (_QWORD)v6));
  }
  v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 < 7u)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    v10 = v9[3];
    if (v10)
      LODWORD(v10) = *(int *)((char *)v8 + v10);
  }
  *(_DWORD *)result = v10;
  v11 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v11 >= 0x21u && (v12 = v11[16]) != 0)
    v13 = *(int *)((char *)v8 + v12);
  else
    v13 = 0;
  v15 = &unk_255FF8000;
  if ((v14 & 1) == 0)
  {
    v37 = result;
    v34 = v8;
    v35 = a2;
    v36 = v13;
    v15 = &unk_255FF8000;
    v13 = v36;
    v8 = v34;
    a2 = v35;
    v33 = v32;
    result = v37;
    if (v33)
    {
      getAdditionalSpillBufferBytes(void)::extra = 0;
      v15 = (_DWORD *)&unk_255FF8000;
      v13 = v36;
      v8 = v34;
      a2 = v35;
      result = v37;
    }
  }
  *(_DWORD *)(result + 4) = v15[740] + v13;
  v16 = (unsigned __int16 *)((char *)v8 - *v8);
  v17 = *v16;
  if (v17 < 0x25)
    goto LABEL_32;
  if (v16[18] && *((_BYTE *)v8 + v16[18]))
  {
    LOBYTE(v18) = 1;
    goto LABEL_33;
  }
  if (v17 < 0x27)
  {
LABEL_32:
    LOBYTE(v18) = 0;
  }
  else
  {
    v18 = v16[19];
    if (v18)
      LOBYTE(v18) = *((_BYTE *)v8 + v18) != 0;
  }
LABEL_33:
  *(_BYTE *)(result + 8) = v18;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  v19 = *(_DWORD *)(result + 20) & 0xFFFFFFFE;
  *(_DWORD *)(result + 20) = v19;
  if (a2[58])
  {
    if (a2[59])
      v20 = (unsigned int **)(a2 + 58);
    else
      v20 = (unsigned int **)(a2 + 128);
  }
  else
  {
    v20 = (unsigned int **)(a2 + 128);
  }
  v21 = 0;
  if (*v20 && v20[1])
    v21 = (int *)((char *)*v20 + **v20);
  v22 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v22 >= 7u && (v23 = v22[3]) != 0)
    v24 = (int *)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23));
  else
    v24 = 0;
  v25 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v25 < 0xBu)
  {
    LODWORD(v26) = 0;
  }
  else
  {
    v26 = v25[5];
    if (v26)
      LODWORD(v26) = *(int *)((char *)v24 + v26);
  }
  *(_DWORD *)(result + 12) = v26;
  v27 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v27 < 0xFu)
  {
    LODWORD(v28) = 0;
  }
  else
  {
    v28 = v27[7];
    if (v28)
      LODWORD(v28) = *(int *)((char *)v24 + v28);
  }
  *(_DWORD *)(result + 16) = v28;
  v29 = (unsigned __int16 *)((char *)v24 - *v24);
  v31 = *v29 >= 9u && (v30 = v29[4]) != 0 && *((unsigned __int8 *)v24 + v30) != 0;
  *(_DWORD *)(result + 20) = v31 | v19;
  return result;
}

AGXBuffer *AGX::DeviceInternalBufferAllocator::allocateBuffer(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  AGXBuffer *v3;
  AGXBuffer *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v16 = 0;
  v17 = 0;
  v2 = a2;
  v11[0] = 0;
  v11[1] = 0x100010001;
  v12 = 16777473;
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  v18 = a2;
  v19 = xmmword_232D73D80;
  v20 = 0;
  LODWORD(v10) = 104;
  v3 = -[IOGPUMetalBuffer initWithDevice:pointer:length:options:sysMemSize:vidMemSize:args:argsSize:deallocator:]([AGXBuffer alloc], "initWithDevice:pointer:length:options:sysMemSize:vidMemSize:args:argsSize:deallocator:", a1, 0, v2, 0, v2, 0, v11, v10, 0);
  v4 = v3;
  if (v3)
  {
    v5 = (Class *)((char *)&v3->super.super.super.super.super.super.isa + (int)*MEMORY[0x24BE51650]);
    v6 = -[IOGPUMetalResource gpuAddress](v3, "gpuAddress");
    v7 = -[IOGPUMetalResource virtualAddress](v4, "virtualAddress");
    v8 = v5[2] & 0x1F00000000000000 | v2 | 0x2000000000000000;
    v5[1] = v6;
    v5[2] = v8;
    v5[3] = v7;
  }
  return v4;
}

void ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(uint64_t **)(v2 + 24);
  if (*((_BYTE *)v3 + 304))
  {
    v9 = *v3;
    v10 = (_QWORD *)v3[1];
    if (*v3)
    {
      *(_QWORD *)(v9 + 8) = v10;
      v10 = (_QWORD *)v3[1];
    }
    else
    {
      *(_QWORD *)(v1 + 8) = v10;
    }
    *v10 = v9;

    free(v3);
  }
  else
  {
    v4 = (unint64_t *)(*(_QWORD *)(v2 + 8) - *(_QWORD *)(v1 + 144));
    v5 = *v4;
    if (*v4 > 0x800)
    {
      v7 = v3 + 36;
    }
    else
    {
      v6 = (v5 >> 6) - 1;
      *((_DWORD *)v3 + 6) |= 1 << v6;
      v7 = &v3[v6 + 4];
    }
    v8 = *v7;
    *v7 = (uint64_t)v4;
    v4[1] = v8;
    v3[2] += v5;
  }
}

void AGX::Heap<true>::allocateImpl(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v8;
  NSObject *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[10];
  _QWORD v14[4];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v26 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v14[3] = 0;
  v8 = (a3 + *(_QWORD *)(a2 + 144) + 63) & 0xFFFFFFFFFFFFFFC0;
  v9 = *(NSObject **)(a2 + 16);
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 3221225472;
  v13[2] = ___ZN3AGX4HeapILb1EE12allocateImplEmPPK18IOGPUMetalResource_block_invoke;
  v13[3] = &unk_250402900;
  v13[8] = a2;
  v13[9] = v8;
  v13[4] = &v15;
  v13[5] = v14;
  v13[6] = &v19;
  v13[7] = &v23;
  dispatch_sync(v9, v13);
  v10 = v16;
  if (a4)
    *a4 = *(_QWORD *)(v16[3] + 296);
  v11 = v24[3];
  v12 = v10[3];
  *a1 = v20[3];
  a1[1] = v11;
  a1[2] = a3;
  a1[3] = v12;
  a1[4] = a2;
  _Block_object_dispose(v14, 8);
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
}

uint64_t ___ZN3AGX4HeapILb1EE12allocateImplEmPPK18IOGPUMetalResource_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  const __CFString *v21;
  const __CFString *v22;
  char v23;
  unint64_t v24;
  const __CFString *v25;
  _QWORD *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  unsigned int v39;
  uint64_t *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v2 = a1[8];
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = *(_QWORD *)v2;
  v3 = a1[4];
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 24);
  if (!v4)
  {
LABEL_19:
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = malloc_type_malloc(0x138uLL, 0x10A0040668EDDA4uLL);
    v15 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
    if (!v15)
      _ZZZN3AGX4HeapILb1EE12allocateImplEmPPK18IOGPUMetalResourceEUb_ENKUlvE0_clB14_AGX__Crashed_Ev();
    *(_BYTE *)(v15 + 304) = 0;
    v16 = *(_QWORD *)(v2 + 136) + a1[9];
    v17 = *(_QWORD *)(v2 + 104);
    if (v16 <= v17)
    {
      if (*(_QWORD *)v2)
      {
        v23 = 1;
        if (!(v17 >> 22))
          v23 = 2;
        v24 = v17 << v23;
        if (v24 >= 0x40000)
          v24 = 0x40000;
        *(_QWORD *)(v2 + 104) = v24;
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 296) = objc_msgSend(objc_alloc(MEMORY[0x24BE515F8]), "initWithDevice:options:args:argsSize:", *(_QWORD *)(v2 + 24), 0, v2 + 32, 104);
      v20 = *(_QWORD *)(v2 + 136);
      v21 = CFSTR("AGXHeap with guard");
      v22 = CFSTR("AGXHeap without guard");
    }
    else
    {
      v18 = *(_OWORD *)(v2 + 96);
      v60 = *(_OWORD *)(v2 + 80);
      v61 = v18;
      v62 = *(_OWORD *)(v2 + 112);
      v63 = *(_QWORD *)(v2 + 128);
      v19 = *(_OWORD *)(v2 + 48);
      v57 = *(_OWORD *)(v2 + 32);
      v58 = v19;
      v59 = *(_OWORD *)(v2 + 64);
      *((_QWORD *)&v61 + 1) = (v16 + 0x3FFF) & 0xFFFFFFFFFFFFC000;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 296) = objc_msgSend(objc_alloc(MEMORY[0x24BE515F8]), "initWithDevice:options:args:argsSize:", *(_QWORD *)(v2 + 24), 0, &v57, 104);
      v20 = *(_QWORD *)(v2 + 136);
      v21 = CFSTR("AGXHeap with guard (large)");
      v22 = CFSTR("AGXHeap without guard (large)");
    }
    if (v20)
      v25 = v21;
    else
      v25 = v22;
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 296), "setLabel:", v25, v57, v58, v59, v60, v61, v62, v63);
    v26 = *(_QWORD **)(*(_QWORD *)(a1[4] + 8) + 24);
    if (!v26[37])
    {
      free(v26);
      *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
      _ZZZN3AGX4HeapILb1EE12allocateImplEmPPK18IOGPUMetalResourceEUb_ENKUlvE_clB14_AGX__Crashed_Ev();
    }
    v27 = *(unsigned int **)(v2 + 160);
    if (v27)
    {
      v28 = *v27;
      if (*v27 + 1 > 1)
        v29 = v28 + 1;
      else
        v29 = 1;
      v30 = __ldaxr(v27);
      if (v30 != v28)
      {
        __clrex();
        while (1)
        {
LABEL_47:
          if (v30 + 1 > 1)
            v41 = v30 + 1;
          else
            v41 = 1;
          v42 = __ldaxr(v27);
          if (v42 == v30)
          {
            if (!__stlxr(v41, v27))
              goto LABEL_42;
          }
          else
          {
            __clrex();
          }
          v30 = v42;
        }
      }
      if (__stlxr(v29, v27))
        goto LABEL_47;
    }
LABEL_42:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 16) = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8)+ 24)+ 296), "resourceSize")- *(_QWORD *)(v2 + 136);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 24) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 32) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 40) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 48) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 56) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 64) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 72) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 80) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 88) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 96) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 104) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 112) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 120) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 128) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 136) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 144) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 152) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 160) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 168) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 176) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 184) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 192) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 200) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 208) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 216) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 224) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 232) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 240) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 248) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 256) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 264) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 272) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 280) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 288) = 0;
    **(_QWORD **)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
    v31 = *(_QWORD **)(v2 + 8);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 8) = v31;
    *v31 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
    *(_QWORD *)(v2 + 8) = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
    v32 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
    v33 = (_QWORD *)objc_msgSend(*(id *)(v32 + 296), "virtualAddress");
    *v33 = *(_QWORD *)(v32 + 16);
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v33;
    v34 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
    v35 = *(_QWORD **)(*(_QWORD *)(a1[5] + 8) + 24);
    v36 = a1[9];
    v37 = *v35 - v36;
    if (*v35 != v36)
    {
      v38 = (char *)v35 + v36;
      *(_QWORD *)((char *)v35 + v36) = v37;
      if (v37 > 0x800)
      {
        v40 = (uint64_t *)(v34 + 288);
      }
      else
      {
        v39 = (v37 >> 6) - 1;
        *(_DWORD *)(v34 + 24) |= 1 << v39;
        v40 = (uint64_t *)(v34 + 8 * v39 + 32);
      }
      v43 = *v40;
      *v40 = (uint64_t)v38;
      *((_QWORD *)v38 + 1) = v43;
      *v35 = v36;
      v35 = *(_QWORD **)(*(_QWORD *)(a1[5] + 8) + 24);
      v34 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
    }
    v44 = (char *)v35 + *(_QWORD *)(v2 + 144);
    v45 = objc_msgSend(*(id *)(v34 + 296), "gpuAddress");
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = &v44[v45
                                                      - objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 296), "virtualAddress")];
    v46 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
    *(_QWORD *)(v46 + 16) -= **(_QWORD **)(*(_QWORD *)(a1[5] + 8) + 24);
    *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = v44;
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 296), "gpuAddress");
    return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 296), "virtualAddress");
  }
  v5 = a1[9];
  while (1)
  {
    if (*(_QWORD *)(v4 + 16) < v5 || *(_BYTE *)(v4 + 304))
      goto LABEL_6;
    if (v5 <= 0x800)
    {
      v9 = __clz(__rbit32(*(_DWORD *)(v4 + 24) >> ((v5 >> 6) - 1))) + (v5 >> 6) - 1;
      if (v9 <= 0x1F)
      {
        v10 = 8 * v9;
        *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = *(_QWORD *)(v4 + v10 + 32);
        v11 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + v10;
        *(_QWORD *)(v11 + 32) = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8);
        v12 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
        if (!*(_QWORD *)(v12 + v10 + 32))
          *(_DWORD *)(v12 + 24) &= ~(1 << v9);
      }
    }
    v7 = *(_QWORD *)(a1[5] + 8);
    v8 = *(_QWORD **)(v7 + 24);
    if (v8)
      break;
    v13 = *(unint64_t **)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 288);
    if (v13)
    {
      if (*v13 < v5)
      {
        while (1)
        {
          v14 = v13;
          v13 = (unint64_t *)v13[1];
          if (!v13)
            goto LABEL_5;
          if (*v13 >= v5)
          {
            v6 = (uint64_t)(v14 + 1);
            *(_QWORD *)(v7 + 24) = v13;
            goto LABEL_4;
          }
        }
      }
      *(_QWORD *)(v7 + 24) = v13;
      v6 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 288;
LABEL_4:
      *(_QWORD *)v6 = *(_QWORD *)(*(_QWORD *)v6 + 8);
      v7 = *(_QWORD *)(a1[5] + 8);
      v8 = *(_QWORD **)(v7 + 24);
      if (v8)
        break;
    }
LABEL_5:
    *(_QWORD *)(v7 + 24) = 0;
    v3 = a1[4];
    v8 = *(_QWORD **)(*(_QWORD *)(a1[5] + 8) + 24);
    if (v8)
      goto LABEL_58;
LABEL_6:
    *(_QWORD *)(*(_QWORD *)(v3 + 8) + 24) = **(_QWORD **)(*(_QWORD *)(v3 + 8) + 24);
    v3 = a1[4];
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 24);
    if (!v4)
      goto LABEL_19;
  }
  v3 = a1[4];
LABEL_58:
  v48 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 24);
  v49 = *v8 - v5;
  if (*v8 != v5)
  {
    v50 = (char *)v8 + v5;
    *(_QWORD *)((char *)v8 + v5) = v49;
    if (v49 > 0x800)
    {
      v52 = (uint64_t *)(v48 + 288);
    }
    else
    {
      v51 = (v49 >> 6) - 1;
      *(_DWORD *)(v48 + 24) |= 1 << v51;
      v52 = (uint64_t *)(v48 + 8 * v51 + 32);
    }
    v53 = *v52;
    *v52 = (uint64_t)v50;
    *((_QWORD *)v50 + 1) = v53;
    *v8 = v5;
    v8 = *(_QWORD **)(*(_QWORD *)(a1[5] + 8) + 24);
    v48 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  }
  v54 = (char *)v8 + *(_QWORD *)(v2 + 144);
  v55 = objc_msgSend(*(id *)(v48 + 296), "gpuAddress");
  result = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 296), "virtualAddress");
  *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = &v54[v55 - result];
  v56 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  *(_QWORD *)(v56 + 16) -= **(_QWORD **)(*(_QWORD *)(a1[5] + 8) + 24);
  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = v54;
  return result;
}

void _ZZZN3AGX4HeapILb1EE12allocateImplEmPPK18IOGPUMetalResourceEUb_ENKUlvE_clB14_AGX__Crashed_Ev()
{
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
}

void _ZZZN3AGX4HeapILb1EE12allocateImplEmPPK18IOGPUMetalResourceEUb_ENKUlvE0_clB14_AGX__Crashed_Ev()
{
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
}

void ___ZN3AGX4HeapILb1EED2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    do
    {
      v4 = *(_QWORD **)v2;
      v3 = (_QWORD *)*((_QWORD *)v2 + 1);
      if (*(_QWORD *)v2)
      {
        v4[1] = v3;
        v3 = (_QWORD *)*((_QWORD *)v2 + 1);
      }
      else
      {
        *(_QWORD *)(v1 + 8) = v3;
      }
      *v3 = v4;
      objc_msgSend(*((id *)v2 + 37), "gpuAddress");
      objc_msgSend(*((id *)v2 + 37), "virtualAddress");

      free(v2);
      v2 = v4;
    }
    while (v4);
  }
}

void ___ZN3AGX4HeapILb1EE6shrinkEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  id *v2;
  id *v3;
  id v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(id **)v1;
  if (*(_QWORD *)v1)
  {
    do
    {
      v3 = (id *)*v2;
      v4 = v2[2];
      if (v4 == (id)(objc_msgSend(v2[37], "resourceSize") - *(_QWORD *)(v1 + 136)))
      {
        v5 = *v2;
        v6 = v2[1];
        if (*v2)
        {
          v5[1] = v6;
          v6 = v2[1];
        }
        else
        {
          *(_QWORD *)(v1 + 8) = v6;
        }
        *v6 = v5;
        objc_msgSend(v2[37], "gpuAddress");
        objc_msgSend(v2[37], "virtualAddress");

        free(v2);
      }
      v2 = v3;
    }
    while (v3);
  }
}

AGXBuffer *AGX::DeviceInternalBuffer<AGX::ICBIndirectGatherBufferInfo>::getBufferInfo(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *v4;
  AGXBuffer *v5;
  AGXBuffer *Buffer;

  v4 = (os_unfair_lock_s *)(a1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  if (*(_DWORD *)(a1 + 32) < a2)
  {
    *(_DWORD *)(a1 + 32) = a2;

    Buffer = AGX::DeviceInternalBufferAllocator::allocateBuffer(*(_QWORD *)a1, a2);
    *(_QWORD *)(a1 + 8) = Buffer;
    *(_QWORD *)(a1 + 24) = Buffer;
    v5 = Buffer;
  }
  else
  {
    v5 = *(AGXBuffer **)(a1 + 24);
  }
  MTLResourceListAddResource();
  os_unfair_lock_unlock(v4);
  return v5;
}

void sub_232D5B2EC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64x2_t InterchangeTiledMemory::getPlaneInfo(InterchangeTiledMemory *this, int a2, MTLPixelFormat a3, uint64_t a4)
{
  _OWORD *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  uint64x2_t result;
  __int128 v9;
  _OWORD *v10;
  __int128 v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD *v15;
  float v16;
  float v17;

  switch(a3)
  {
    case 0x228uLL:
    case 0x229uLL:
    case 0x27DuLL:
    case 0x27EuLL:
    case 0x27FuLL:
    case 0x280uLL:
    case 0x281uLL:
      *(_WORD *)this = 4112;
      *((_BYTE *)this + 2) = 64;
      *(_OWORD *)((char *)this + 8) = xmmword_232D7C310;
      *(_OWORD *)((char *)this + 24) = unk_232D7C320;
      v7 = &xmmword_232D7C330;
      goto LABEL_14;
    case 0x22AuLL:
    case 0x22BuLL:
LABEL_13:
      *(_WORD *)this = 4112;
      *((_BYTE *)this + 2) = 32;
      *(_OWORD *)((char *)this + 8) = xmmword_232D7C610;
      *(_OWORD *)((char *)this + 24) = unk_232D7C620;
      v7 = &xmmword_232D7C630;
LABEL_14:
      result = (uint64x2_t)*v7;
      v11 = v7[1];
      *(_OWORD *)((char *)this + 40) = *v7;
      *(_OWORD *)((char *)this + 56) = v11;
      break;
    case 0x22CuLL:
    case 0x22DuLL:
    case 0x22EuLL:
    case 0x22FuLL:
    case 0x230uLL:
    case 0x231uLL:
    case 0x232uLL:
    case 0x233uLL:
    case 0x234uLL:
    case 0x235uLL:
    case 0x236uLL:
    case 0x237uLL:
    case 0x238uLL:
    case 0x239uLL:
    case 0x23AuLL:
    case 0x23BuLL:
    case 0x23CuLL:
    case 0x23DuLL:
    case 0x23EuLL:
    case 0x23FuLL:
    case 0x240uLL:
    case 0x241uLL:
    case 0x242uLL:
    case 0x243uLL:
    case 0x24AuLL:
    case 0x24BuLL:
    case 0x24CuLL:
    case 0x24DuLL:
    case 0x24EuLL:
    case 0x24FuLL:
    case 0x250uLL:
    case 0x251uLL:
    case 0x252uLL:
    case 0x253uLL:
    case 0x254uLL:
    case 0x255uLL:
    case 0x256uLL:
    case 0x257uLL:
    case 0x25BuLL:
    case 0x25CuLL:
    case 0x25DuLL:
    case 0x25EuLL:
    case 0x25FuLL:
    case 0x260uLL:
    case 0x261uLL:
    case 0x262uLL:
    case 0x263uLL:
    case 0x264uLL:
    case 0x265uLL:
    case 0x266uLL:
    case 0x267uLL:
    case 0x268uLL:
    case 0x269uLL:
    case 0x26DuLL:
    case 0x26EuLL:
    case 0x26FuLL:
    case 0x270uLL:
    case 0x271uLL:
    case 0x272uLL:
    case 0x273uLL:
    case 0x274uLL:
    case 0x275uLL:
    case 0x276uLL:
    case 0x277uLL:
    case 0x278uLL:
    case 0x279uLL:
    case 0x27AuLL:
    case 0x27BuLL:
    case 0x27CuLL:
LABEL_10:
      switch(a3)
      {
        case 0x1F4uLL:
        case 0x1F6uLL:
        case 0x1F7uLL:
        case 0x208uLL:
        case 0x20AuLL:
        case 0x20BuLL:
        case 0x21CuLL:
        case 0x21DuLL:
        case 0x21EuLL:
          v14 = (_OWORD *)((char *)this + 8);
          v5 = (__int128 *)((char *)this + 40);
          if (a2)
          {
            *(_WORD *)this = 4112;
            *((_BYTE *)this + 2) = 16;
            *v14 = xmmword_232D7C390;
            *(_OWORD *)((char *)this + 24) = unk_232D7C3A0;
            v6 = &xmmword_232D7C3B0;
          }
          else
          {
            *(_WORD *)this = 8224;
            *((_BYTE *)this + 2) = 8;
            *v14 = xmmword_232D7C350;
            *(_OWORD *)((char *)this + 24) = unk_232D7C360;
            v6 = &xmmword_232D7C370;
          }
          goto LABEL_9;
        case 0x1F8uLL:
        case 0x20CuLL:
        case 0x233uLL:
        case 0x24AuLL:
        case 0x24BuLL:
        case 0x24EuLL:
        case 0x25FuLL:
        case 0x26FuLL:
        case 0x274uLL:
        case 0x275uLL:
          goto LABEL_13;
        case 0x1F9uLL:
        case 0x1FAuLL:
        case 0x1FBuLL:
        case 0x20DuLL:
        case 0x20EuLL:
        case 0x20FuLL:
        case 0x21FuLL:
        case 0x220uLL:
        case 0x221uLL:
        case 0x234uLL:
        case 0x235uLL:
        case 0x236uLL:
        case 0x24FuLL:
        case 0x250uLL:
        case 0x251uLL:
        case 0x260uLL:
        case 0x261uLL:
        case 0x262uLL:
          v10 = (_OWORD *)((char *)this + 8);
          v5 = (__int128 *)((char *)this + 40);
          if (a2)
          {
            *(_WORD *)this = 4112;
            *((_BYTE *)this + 2) = 32;
            *v10 = xmmword_232D7C490;
            *(_OWORD *)((char *)this + 24) = unk_232D7C4A0;
            v6 = &xmmword_232D7C4B0;
          }
          else
          {
            *(_WORD *)this = 8224;
            *((_BYTE *)this + 2) = 16;
            *v10 = xmmword_232D7C450;
            *(_OWORD *)((char *)this + 24) = unk_232D7C460;
            v6 = &xmmword_232D7C470;
          }
          goto LABEL_9;
        case 0x1FCuLL:
        case 0x1FDuLL:
        case 0x1FEuLL:
        case 0x210uLL:
        case 0x211uLL:
        case 0x212uLL:
        case 0x222uLL:
        case 0x223uLL:
        case 0x224uLL:
        case 0x237uLL:
        case 0x238uLL:
        case 0x239uLL:
        case 0x252uLL:
        case 0x253uLL:
        case 0x254uLL:
        case 0x263uLL:
        case 0x264uLL:
        case 0x265uLL:
          v12 = (_OWORD *)((char *)this + 8);
          v5 = (__int128 *)((char *)this + 40);
          if (a2)
          {
            *(_WORD *)this = 4112;
            *((_BYTE *)this + 2) = 20;
            *v12 = xmmword_232D7C590;
            *(_OWORD *)((char *)this + 24) = unk_232D7C5A0;
            v6 = &xmmword_232D7C5B0;
          }
          else
          {
            *(_WORD *)this = 8224;
            *((_BYTE *)this + 2) = 10;
            *v12 = xmmword_232D7C550;
            *(_OWORD *)((char *)this + 24) = unk_232D7C560;
            v6 = &xmmword_232D7C570;
          }
          goto LABEL_9;
        case 0x226uLL:
        case 0x227uLL:
        case 0x270uLL:
        case 0x271uLL:
        case 0x272uLL:
        case 0x273uLL:
          *(_WORD *)this = 4112;
          v5 = (__int128 *)((char *)this + 40);
          v15 = (_OWORD *)((char *)this + 8);
          if (a2)
          {
            *((_BYTE *)this + 2) = 8;
            *v15 = xmmword_232D7C5D0;
            *(_OWORD *)((char *)this + 24) = unk_232D7C5E0;
            v6 = &xmmword_232D7C5F0;
          }
          else
          {
            *((_BYTE *)this + 2) = 32;
            *v15 = xmmword_232D7C610;
            *(_OWORD *)((char *)this + 24) = unk_232D7C620;
            v6 = &xmmword_232D7C630;
          }
          goto LABEL_9;
        case 0x23AuLL:
        case 0x23BuLL:
        case 0x23CuLL:
        case 0x23DuLL:
        case 0x23EuLL:
        case 0x23FuLL:
        case 0x255uLL:
        case 0x256uLL:
        case 0x257uLL:
        case 0x267uLL:
        case 0x268uLL:
        case 0x269uLL:
          v13 = (_OWORD *)((char *)this + 8);
          v5 = (__int128 *)((char *)this + 40);
          if (a2)
          {
            *(_WORD *)this = 4112;
            *((_BYTE *)this + 2) = 32;
            *v13 = xmmword_232D7C510;
            *(_OWORD *)((char *)this + 24) = unk_232D7C520;
            v6 = &xmmword_232D7C530;
          }
          else
          {
            *(_WORD *)this = 8224;
            *((_BYTE *)this + 2) = 16;
            *v13 = xmmword_232D7C4D0;
            *(_OWORD *)((char *)this + 24) = unk_232D7C4E0;
            v6 = &xmmword_232D7C4F0;
          }
          goto LABEL_9;
        case 0x240uLL:
        case 0x241uLL:
        case 0x25EuLL:
        case 0x26DuLL:
        case 0x282uLL:
          *(_WORD *)this = 8224;
          *((_BYTE *)this + 2) = 16;
          *(_OWORD *)((char *)this + 8) = xmmword_232D7C450;
          *(_OWORD *)((char *)this + 24) = unk_232D7C460;
          v7 = &xmmword_232D7C470;
          goto LABEL_14;
        case 0x242uLL:
        case 0x243uLL:
        case 0x284uLL:
          *(_WORD *)this = 4112;
          *((_BYTE *)this + 2) = 32;
          *(_OWORD *)((char *)this + 8) = xmmword_232D7C3D0;
          *(_OWORD *)((char *)this + 24) = unk_232D7C3E0;
          v7 = &xmmword_232D7C3F0;
          goto LABEL_14;
        case 0x24CuLL:
        case 0x283uLL:
          *(_WORD *)this = 8224;
          *((_BYTE *)this + 2) = 10;
          *(_OWORD *)((char *)this + 8) = xmmword_232D7C550;
          *(_OWORD *)((char *)this + 24) = unk_232D7C560;
          v7 = &xmmword_232D7C570;
          goto LABEL_14;
        case 0x24DuLL:
        case 0x285uLL:
          *(_WORD *)this = 4112;
          *((_BYTE *)this + 2) = 20;
          *(_OWORD *)((char *)this + 8) = xmmword_232D7C410;
          *(_OWORD *)((char *)this + 24) = unk_232D7C420;
          v7 = &xmmword_232D7C430;
          goto LABEL_14;
        case 0x25BuLL:
        case 0x25CuLL:
        case 0x26EuLL:
          *(_WORD *)this = 8224;
          *((_BYTE *)this + 2) = 16;
          *(_OWORD *)((char *)this + 8) = xmmword_232D7C4D0;
          *(_OWORD *)((char *)this + 24) = unk_232D7C4E0;
          v7 = &xmmword_232D7C4F0;
          goto LABEL_14;
        case 0x25DuLL:
          *(_WORD *)this = 4112;
          *((_BYTE *)this + 2) = 32;
          *(_OWORD *)((char *)this + 8) = xmmword_232D7C510;
          *(_OWORD *)((char *)this + 24) = unk_232D7C520;
          v7 = &xmmword_232D7C530;
          goto LABEL_14;
        case 0x276uLL:
        case 0x277uLL:
        case 0x278uLL:
        case 0x279uLL:
        case 0x27AuLL:
        case 0x27BuLL:
        case 0x27CuLL:
          *(_WORD *)this = 4112;
          *((_BYTE *)this + 2) = 40;
          *(_OWORD *)((char *)this + 8) = xmmword_232D7C650;
          *(_OWORD *)((char *)this + 24) = unk_232D7C660;
          v7 = &xmmword_232D7C670;
          goto LABEL_14;
        default:
          v16 = (float)(unint64_t)(32 * a4);
          v17 = (float)(unint64_t)(a4 << 8);
          *(_WORD *)this = 4112;
          *((_BYTE *)this + 2) = 8 * a4;
          *((_QWORD *)this + 1) = 32 * a4;
          *((uint64x2_t *)this + 1) = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32((float32x2_t)0x3F2000003F400000, v16)));
          *((_QWORD *)this + 4) = (unint64_t)(float)(v16 * 0.5);
          *((_QWORD *)this + 5) = a4 << 8;
          result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32((float32x2_t)0x3F2000003F400000, v17)));
          *((uint64x2_t *)this + 3) = result;
          *((_QWORD *)this + 8) = (unint64_t)(float)(v17 * 0.5);
          break;
      }
      break;
    case 0x244uLL:
    case 0x245uLL:
    case 0x246uLL:
    case 0x247uLL:
    case 0x248uLL:
    case 0x249uLL:
    case 0x258uLL:
    case 0x259uLL:
    case 0x25AuLL:
    case 0x26AuLL:
    case 0x26BuLL:
    case 0x26CuLL:
      v4 = (_OWORD *)((char *)this + 8);
      v5 = (__int128 *)((char *)this + 40);
      if (a2)
      {
        *(_WORD *)this = 4112;
        *((_BYTE *)this + 2) = 24;
        *v4 = xmmword_232D7C2D0;
        *(_OWORD *)((char *)this + 24) = unk_232D7C2E0;
        v6 = &xmmword_232D7C2F0;
      }
      else
      {
        *(_WORD *)this = 8224;
        *((_BYTE *)this + 2) = 12;
        *v4 = xmmword_232D7C290;
        *(_OWORD *)((char *)this + 24) = unk_232D7C2A0;
        v6 = &xmmword_232D7C2B0;
      }
LABEL_9:
      result = (uint64x2_t)*v6;
      v9 = v6[1];
      *v5 = *v6;
      v5[1] = v9;
      break;
    default:
      switch(a3)
      {
        case MTLPixelFormatR8Unorm:
        case MTLPixelFormatR8Unorm_sRGB:
        case MTLPixelFormatR8Snorm:
        case MTLPixelFormatR8Uint:
        case MTLPixelFormatR8Sint:
          *(_WORD *)this = 8224;
          *((_BYTE *)this + 2) = 8;
          *(_OWORD *)((char *)this + 8) = xmmword_232D7C350;
          *(_OWORD *)((char *)this + 24) = unk_232D7C360;
          v7 = &xmmword_232D7C370;
          goto LABEL_14;
        case MTLPixelFormatR16Unorm:
        case MTLPixelFormatR16Snorm:
        case MTLPixelFormatR16Uint:
        case MTLPixelFormatR16Sint:
        case MTLPixelFormatR16Float:
          *(_WORD *)this = 8224;
          *((_BYTE *)this + 2) = 16;
          *(_OWORD *)((char *)this + 8) = xmmword_232D7C250;
          *(_OWORD *)((char *)this + 24) = unk_232D7C260;
          v7 = &xmmword_232D7C270;
          goto LABEL_14;
        case MTLPixelFormatRGB10A2Unorm:
        case MTLPixelFormatRGB10A2Uint:
        case MTLPixelFormatBGR10A2Unorm:
          goto LABEL_13;
        default:
          goto LABEL_10;
      }
  }
  return result;
}

uint64_t InterchangeTiledMemory::getPlaneSize(uint64_t a1, unsigned int a2, int a3, MTLPixelFormat a4, uint64_t a5)
{
  _OWORD v10[4];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  InterchangeTiledMemory::getPlaneInfo((InterchangeTiledMemory *)v10, a3, a4, *(unsigned __int8 *)(a5 + 49));
  if (a3 == 1 && *(_DWORD *)(a5 + 72) == 3)
    a2 = (a2 + 1) >> 1;
  return (a2 + BYTE1(v10[0]) - 1) / BYTE1(v10[0]) * a1;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<false,1ul,1u,(TwiddleOrder)1>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  BOOL v65;
  int v66;
  unsigned int v67;
  char v68;
  BOOL v69;
  unsigned int v70;
  char v71;
  unsigned int v72;
  BOOL v73;
  BOOL v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  BOOL v108;
  BOOL v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  uint64_t v113;
  int v114;
  int v115;
  BOOL v116;
  BOOL v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  int v127;
  BOOL v128;
  BOOL v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  unint64_t v134;
  int v135;
  BOOL v136;
  BOOL v137;
  unsigned int v138;
  int v139;
  int v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  BOOL v157;
  char v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  BOOL v184;
  BOOL v185;
  int v186;
  int v187;
  int v188;
  int v189;
  BOOL v190;
  BOOL v191;
  int v192;
  int v193;
  int v194;
  unint64_t v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  int v203;
  BOOL v204;
  BOOL v205;
  unsigned int v206;
  unsigned int v207;
  int v208;
  uint64_t v209;
  int v210;
  BOOL v211;
  BOOL v212;
  unsigned int v213;
  unsigned int v214;
  int v215;
  int v216;
  unsigned int v217;
  uint64_t v218;
  int v219;
  BOOL v220;
  BOOL v221;
  unsigned int v222;
  unsigned int v223;
  int v224;
  uint64_t v225;
  int v226;
  BOOL v227;
  unsigned int v228;
  unsigned int v229;
  int v230;
  int v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int i;
  uint64_t v237;
  uint64_t v238;
  int v239;
  unsigned int v240;
  unsigned int v241;
  int v242;
  unsigned int v243;
  uint64_t v244;
  char v245;
  int v246;
  unsigned int v247;
  uint64_t v248;
  int v249;
  char v250;
  uint64_t v251;
  int v254;
  int v255;
  uint64_t v256;
  int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  int v261;
  char v262;
  int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  int v267;
  unsigned int v268;
  unsigned int v269;
  int v270;
  BOOL v271;
  uint64_t v272;
  BOOL v273;
  int v274;
  int v275;
  unsigned int v276;
  BOOL v277;
  unsigned int v278;
  BOOL v279;
  int v280;
  unsigned int v281;
  unsigned int v282;
  int v283;
  int v284;
  int v285;
  char v286;
  int v287;
  char v288[16];
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned __int8 v296;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v16 = result;
  v17 = a11;
  v18 = a12;
  v19 = a9;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2)
      v25 = v24;
    else
      v25 = 0;
    v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2)
      v27 = v26;
    else
      v27 = 0;
    if (v27 | v25)
    {
      v28 = 0;
      v29 = 0;
      v30 = v25 != 0;
      v31 = v27 != 0;
      v32 = v25 != 0;
      v33 = v27 != 0;
      v34 = 1;
      v35 = v25;
      v36 = v27;
      do
      {
        --v35;
        if (v32)
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        else
          v35 = 0;
        --v36;
        if (!v33)
          v36 = 0;
        v34 *= 2;
        v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        v33 = v36 != 0;
        v32 = v35 != 0;
      }
      while (v36 | v35);
      v37 = 0;
      v38 = 0;
      v39 = 1;
      v40 = v25 != 0;
      v41 = v27 != 0;
      v42 = v25;
      v43 = v27;
      do
      {
        --v42;
        v44 = v40;
        if (!v44)
          v42 = 0;
        v45 = v37 + v44;
        --v43;
        if (v41)
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        else
          v43 = 0;
        v39 *= 2;
        v37 = v45 - 1;
        v41 = v43 != 0;
        v40 = v42 != 0;
      }
      while (v43 | v42);
      v46 = 0;
      v47 = 0;
      v48 = v25 != 0;
      v49 = v27 != 0;
      v50 = 1;
      v51 = v25;
      v52 = v27;
      do
      {
        --v51;
        if (v48)
          v47 |= (unint64_t)(v50 & a7) << v46++;
        else
          v51 = 0;
        --v52;
        if (!v49)
          v52 = 0;
        v50 *= 2;
        v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        v49 = v52 != 0;
        v48 = v51 != 0;
      }
      while (v52 | v51);
      v53 = 0;
      v54 = 0;
      v55 = 1;
      do
      {
        --v25;
        v56 = v30;
        if (!v56)
          v25 = 0;
        v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          v58 = v57 + 1;
        }
        else
        {
          v27 = 0;
          v58 = v57;
        }
        v55 *= 2;
        v53 = v58 - 1;
        v31 = v27 != 0;
        v30 = v25 != 0;
        result = v27 | v25;
      }
      while ((_DWORD)result);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v29 = 0;
      v38 = 0;
      v54 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v237 = 0;
        v238 = v47;
        do
        {
          *(_BYTE *)(v13 + v237) = *(_BYTE *)(v54 + v16 + v238);
          v238 = (v238 - v29) & v29;
          ++v237;
        }
        while (a9 != (_DWORD)v237);
        v54 = (v54 - v38) & v38;
        v13 += a11;
      }
    }
    return result;
  }
  if (*((_BYTE *)a12 + 20))
  {
    result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v288);
    v20 = *((_BYTE *)a12 + 13);
    v21 = *((_BYTE *)a12 + 12);
    v244 = v13;
    if (1 << v20 >= a6 || a5 >> v21)
    {
      v154 = a6 >> v20;
      v155 = 1 << v21;
      v156 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
      if (a6 < 2)
        v156 = 0;
      v157 = v155 >= a5;
      if (v155 < a5)
        v158 = v21 + v20 + v156;
      else
        v158 = *((_BYTE *)a12 + 12);
      if (v157)
        LOBYTE(v159) = *((_BYTE *)a12 + 13);
      else
        v159 = -v156;
      if (!v154)
        v21 = v158;
      v245 = v21;
      if (v154)
        v23 = *((_BYTE *)a12 + 13);
      else
        v23 = v159;
    }
    else
    {
      v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
      if (a5 < 2)
        LOBYTE(v22) = 0;
      v245 = v22;
      v23 = v21 + v20 - v22;
    }
    v160 = a8;
    v243 = v294;
    if (v294)
    {
      v161 = 1 << v23;
      v162 = v295;
      v163 = v292;
      v275 = v293;
      v271 = v293 != 0;
      v273 = v292 != 0;
      v242 = 1 << v245;
      if (1 << v245 >= a5)
        v164 = a5;
      else
        v164 = 1 << v245;
      if (v161 >= a6)
        v165 = a6;
      else
        v165 = 1 << v23;
      v166 = 32 - __clz(v164 - 1);
      if (v164 >= 2)
        v167 = v166;
      else
        v167 = 0;
      v168 = 32 - __clz(v165 - 1);
      if (v165 < 2)
        v168 = 0;
      v279 = v167 != 0;
      v281 = v168;
      v277 = v168 != 0;
      if (v295)
      {
        v169 = 0;
        v241 = a7 >> v245;
        v266 = a8 >> v23;
        v283 = v293 | v292;
        v287 = v296;
        v240 = a9 + a7;
        v239 = v289;
        v170 = v291;
        v285 = v290;
        v261 = (v161 - 1) & a8;
        v263 = (v161 - 1) & (a10 + a8);
        v259 = v161 - v261;
        v171 = ~(-1 << v167);
        v255 = v291;
        v257 = v168 | v167;
        v172 = ~(-1 << v168);
        v269 = v167;
        v250 = v23;
        v247 = v295;
        v249 = 1 << v23;
        do
        {
          v173 = 0;
          v174 = v169 + v239;
          v175 = (v169 + v241) << v245;
          v176 = v242 - ((v242 - 1) & a7);
          if (v240 < (v169 + v241 + 1) << v245)
            v176 = v19;
          v177 = 1 << v245;
          if (v240 < (v169 + v241 + 1) << v245)
            v177 = (v242 - 1) & (a9 + a7);
          v246 = v169;
          if (v175 >= a7)
            v178 = v177;
          else
            v178 = v176;
          if (v175 >= a7)
            v179 = 0;
          else
            v179 = (v242 - 1) & a7;
          v251 = (v179 + (v169 << v245)) + v244;
          do
          {
            v180 = v173 + v285;
            if (v287)
            {
              v181 = v283;
              if (v283)
              {
                v182 = 0;
                v181 = 0;
                v183 = 1;
                v184 = v271;
                v185 = v273;
                v186 = v163;
                v187 = v275;
                do
                {
                  --v186;
                  if (v185)
                    v181 |= (v183 & v174) << v182;
                  else
                    v186 = 0;
                  if (v185)
                    ++v182;
                  --v187;
                  if (v184)
                    v181 |= (v183 & v180) << v182;
                  else
                    v187 = 0;
                  if (v184)
                    ++v182;
                  v183 *= 2;
                  --v182;
                  v184 = v187 != 0;
                  v185 = v186 != 0;
                }
                while (v187 | v186);
              }
            }
            else
            {
              v181 = v283;
              if (v283)
              {
                v188 = 0;
                v181 = 0;
                v189 = 1;
                v191 = v271;
                v190 = v273;
                v192 = v275;
                v193 = v163;
                do
                {
                  --v192;
                  if (v191)
                    v181 |= (v189 & v180) << v188;
                  else
                    v192 = 0;
                  if (v191)
                    ++v188;
                  --v193;
                  if (v190)
                    v181 |= (v189 & v174) << v188;
                  else
                    v193 = 0;
                  if (v190)
                    ++v188;
                  v189 *= 2;
                  --v188;
                  v190 = v193 != 0;
                  v191 = v192 != 0;
                }
                while (v193 | v192);
              }
            }
            v194 = *(_DWORD *)(v16 + 4 * ((v181 + v170) | ((v181 + v170) >> 8 << 9)));
            if (v194 < 0)
            {
              v195 = v16 - *((_QWORD *)a13 + 3) + ((unint64_t)(v194 & 0x3FFFFFF) << 14);
              result = *a13;
              v196 = a13[2];
              if (result > v196)
              {
                result = get_level_offset_within_tail(result, v196, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                v167 = v269;
                v162 = v247;
                v161 = v249;
                v23 = v250;
                v17 = a11;
                v160 = a8;
                v195 += result;
              }
              v197 = (v173 + v266) << v23;
              v198 = a10;
              if (a10 + a8 < (v173 + v266 + 1) << v23)
              {
                v199 = v263;
              }
              else
              {
                v198 = v259;
                v199 = v161;
              }
              if (v197 >= v160)
                v200 = 0;
              else
                v200 = v261;
              if (v197 >= v160)
                v198 = v199;
              if (!v257)
              {
                v218 = 0;
                v202 = 0;
                v209 = 0;
                v225 = 0;
                v170 = v255;
                if (!v178)
                  goto LABEL_211;
LABEL_283:
                if (v198)
                {
                  v232 = 0;
                  v233 = v251 + (v200 + (v173 << v23)) * v17;
                  do
                  {
                    v234 = 0;
                    v235 = v218;
                    do
                    {
                      result = *(unsigned __int8 *)(v225 + v195 + v235);
                      *(_BYTE *)(v233 + v234) = result;
                      v235 = (v235 - v202) & v202;
                      ++v234;
                    }
                    while (v178 != (_DWORD)v234);
                    v225 = (v225 - v209) & v209;
                    v233 += v17;
                    ++v232;
                  }
                  while (v232 != v198);
                }
                goto LABEL_211;
              }
              v201 = 0;
              v202 = 0;
              v203 = 1;
              v204 = v277;
              v205 = v279;
              v206 = v167;
              v207 = v281;
              do
              {
                --v206;
                if (v205)
                  v202 |= (unint64_t)(v203 & v171) << v201++;
                else
                  v206 = 0;
                --v207;
                if (!v204)
                  v207 = 0;
                v203 *= 2;
                v201 = (__PAIR64__(v201, v204) - 1) >> 32;
                v204 = v207 != 0;
                v205 = v206 != 0;
              }
              while (v207 | v206);
              v208 = 0;
              v209 = 0;
              v210 = 1;
              v211 = v277;
              v212 = v279;
              v213 = v167;
              v214 = v281;
              do
              {
                --v213;
                v215 = v212;
                if (!v215)
                  v213 = 0;
                v216 = v208 + v215;
                --v214;
                if (v211)
                  v209 |= (unint64_t)(v210 & v172) << v216++;
                else
                  v214 = 0;
                v210 *= 2;
                v208 = v216 - 1;
                v211 = v214 != 0;
                v212 = v213 != 0;
              }
              while (v214 | v213);
              v217 = 0;
              v218 = 0;
              v219 = 1;
              v221 = v277;
              v220 = v279;
              v222 = v167;
              v223 = v281;
              do
              {
                --v222;
                if (v220)
                  v218 |= (unint64_t)(v219 & v179) << v217++;
                else
                  v222 = 0;
                --v223;
                if (!v221)
                  v223 = 0;
                v219 *= 2;
                v217 = (__PAIR64__(v217, v221) - 1) >> 32;
                v221 = v223 != 0;
                v220 = v222 != 0;
              }
              while (v223 | v222);
              v224 = 0;
              v225 = 0;
              v226 = 1;
              LOBYTE(result) = v277;
              v227 = v279;
              v228 = v167;
              v229 = v281;
              do
              {
                --v228;
                v230 = v227;
                if (!v230)
                  v228 = 0;
                v231 = v224 + v230;
                --v229;
                if ((result & 1) != 0)
                  v225 |= (unint64_t)(v226 & v200) << v231++;
                else
                  v229 = 0;
                v226 *= 2;
                v224 = v231 - 1;
                result = v229 != 0;
                v227 = v228 != 0;
              }
              while (v229 | v228);
              v167 = v269;
              v170 = v255;
              if (v178)
                goto LABEL_283;
            }
LABEL_211:
            ++v173;
          }
          while (v162 > (unsigned __int16)v173);
          v169 = v246 + 1;
          v19 = a9;
        }
        while (v243 > (unsigned __int16)(v246 + 1));
      }
    }
  }
  else
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = a5 >> v60;
    v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2)
      v63 = 0;
    v64 = v60 + v59;
    result = v60 + v59 + v63;
    if (a6 >> v59)
      v65 = 1;
    else
      v65 = 1 << v60 >= a5;
    if (v65)
    {
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      v66 = -v63;
    }
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    v68 = v64 - v67;
    v69 = v61 < a6 && v62 == 0;
    if (!v69)
      LOBYTE(v67) = v60;
    v286 = v67;
    if (v69)
      LOBYTE(v66) = v68;
    v70 = 1 << v66;
    v71 = *((_BYTE *)a12 + 15);
    v72 = 1 << v71;
    if (v71)
      v73 = v72 > a3;
    else
      v73 = 1;
    v74 = v73 || v72 > a4;
    v75 = (~(-1 << v71) + a3) & (-1 << v71);
    if (v74)
      v76 = a3;
    else
      v76 = v75;
    v265 = a8 >> v66;
    v267 = 1 << v66;
    v77 = v70 - 1;
    v262 = v66;
    v264 = a10 + a8;
    v260 = (v70 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 < v260)
    {
      v78 = (1 << v67) - 1;
      result = (v78 + a9 + a7) >> v67;
      v284 = 1 << v67;
      if (1 << v67 >= a5)
        v79 = a5;
      else
        v79 = 1 << v67;
      v80 = 1 << v66;
      if (v70 >= a6)
        v80 = a6;
      v81 = 32 - __clz(v79 - 1);
      if (v79 >= 2)
        v82 = v81;
      else
        v82 = 0;
      v83 = 32 - __clz(v80 - 1);
      if (v80 >= 2)
        v84 = v83;
      else
        v84 = 0;
      v276 = a7 >> v67;
      v282 = (v78 + a9 + a7) >> v67;
      if (a7 >> v67 < result)
      {
        v85 = a9 + a7;
        v258 = (v76 + ~(-1 << v67)) >> v67;
        v280 = v78 & v85;
        v278 = v284 - (v78 & a7);
        v254 = v77 & v264;
        v256 = v77 & a8;
        v86 = v265;
        v270 = v78 & a7;
        v248 = a2 - (v78 & a7);
        do
        {
          v87 = v86 << v262;
          v88 = v86 - v265;
          v274 = v86 * v258;
          v268 = v86 + 1;
          v89 = v264 >= (v86 + 1) << v262;
          v90 = v267;
          if (!v89)
            v90 = v254;
          v91 = a10;
          if (v89)
            v91 = v267 - v256;
          v92 = v88 << v262;
          if (v87 >= a8)
            v93 = 0;
          else
            v93 = v256;
          if (v87 >= a8)
            v94 = v90;
          else
            v94 = v91;
          v272 = v248 + (v93 + v92 - v256) * a11;
          v95 = v276;
          v96 = a7;
          if (v84 | v82)
          {
            do
            {
              v98 = 0;
              v99 = 0;
              v100 = v95 << v286;
              v101 = v95 - v276;
              v102 = v95 + v274;
              v103 = ++v95 << v286;
              if (v100 >= v96)
                v104 = 0;
              else
                v104 = v270;
              v105 = v104 + (v101 << v286);
              v106 = v102 * v18[3] * *((unsigned __int8 *)v18 + 9);
              v107 = 1;
              v108 = v82 != 0;
              v109 = v84 != 0;
              v110 = v82;
              v111 = v84;
              do
              {
                --v110;
                if (v108)
                  v99 |= (unint64_t)(v107 & ~(-1 << v82)) << v98++;
                else
                  v110 = 0;
                --v111;
                if (!v109)
                  v111 = 0;
                v107 *= 2;
                v98 = (__PAIR64__(v98, v109) - 1) >> 32;
                v109 = v111 != 0;
                v108 = v110 != 0;
              }
              while (v111 | v110);
              v112 = 0;
              v113 = 0;
              v114 = v284;
              if (v85 < v103)
                v114 = v280;
              v115 = 1;
              v116 = v82 != 0;
              v117 = v84 != 0;
              v118 = v82;
              v119 = v84;
              do
              {
                --v118;
                v120 = v116;
                if (!v120)
                  v118 = 0;
                v121 = v112 + v120;
                if (v117)
                  --v119;
                else
                  v119 = 0;
                if (v117)
                  v113 |= (unint64_t)(v115 & ~(-1 << v84)) << v121++;
                v115 *= 2;
                v112 = v121 - 1;
                v117 = v119 != 0;
                v116 = v118 != 0;
              }
              while (v119 | v118);
              v122 = 0;
              v123 = 0;
              v124 = v85;
              if (v85 >= v103)
                v125 = v278;
              else
                v125 = a9;
              v126 = v272 + v105;
              v127 = 1;
              v128 = v82 != 0;
              v129 = v84 != 0;
              v130 = v82;
              v131 = v84;
              do
              {
                --v130;
                if (v128)
                {
                  v123 |= (unint64_t)(v127 & v104) << v122;
                  v132 = v122 + 1;
                }
                else
                {
                  v130 = 0;
                  v132 = v122;
                }
                if (v129)
                  --v131;
                else
                  v131 = 0;
                v127 *= 2;
                v122 = (__PAIR64__(v132, v129) - 1) >> 32;
                v129 = v131 != 0;
                v128 = v130 != 0;
              }
              while (v131 | v130);
              v133 = 0;
              v134 = 0;
              v135 = 1;
              v136 = v82 != 0;
              v137 = v84 != 0;
              LODWORD(result) = v82;
              v138 = v84;
              do
              {
                v139 = v136;
                if (v139)
                  result = (result - 1);
                else
                  result = 0;
                v140 = v133 + v139;
                v141 = ((unint64_t)(v135 & v93) << (v133 + v139)) | v134;
                if (v137)
                  --v138;
                else
                  v138 = 0;
                if (v137)
                {
                  v134 = v141;
                  ++v140;
                }
                v135 *= 2;
                v133 = v140 - 1;
                v137 = v138 != 0;
                v136 = (_DWORD)result != 0;
              }
              while (v138 | result);
              v96 = a7;
              if (v100 < a7)
                v114 = v125;
              if (v94 && v114)
              {
                v142 = 0;
                v143 = v106 + v16;
                do
                {
                  v144 = 0;
                  result = v123;
                  do
                  {
                    *(_BYTE *)(v126 + v144) = *(_BYTE *)(v143 + v134 + result);
                    result = (result - v99) & v99;
                    ++v144;
                  }
                  while (v114 != (_DWORD)v144);
                  v134 = (v134 - v113) & v113;
                  v126 += a11;
                  ++v142;
                }
                while (v142 != v94);
              }
              v18 = a12;
              v85 = v124;
            }
            while (v95 != v282);
          }
          else if (v94)
          {
            v97 = v276;
            do
            {
              v145 = v284;
              v146 = v97 << v286;
              v147 = v97 + 1;
              if (v85 >= (v97 + 1) << v286)
                v148 = v278;
              else
                v148 = a9;
              if (v85 < v147 << v286)
                v145 = v280;
              if (v146 >= a7)
                v148 = v145;
              if (v148)
              {
                v149 = 0;
                v150 = (v97 + v274) * v18[3] * *((unsigned __int8 *)v18 + 9);
                if (v146 >= a7)
                  v151 = 0;
                else
                  v151 = v270;
                v152 = v272 + v151 + ((v97 - v276) << v286);
                do
                {
                  v153 = 0;
                  do
                    *(_BYTE *)(v152 + v153++) = *(_BYTE *)(v16 + v150);
                  while (v148 != (_DWORD)v153);
                  v152 += a11;
                  ++v149;
                }
                while (v149 != v94);
              }
              v97 = v147;
            }
            while (v147 != v282);
          }
          v86 = v268;
        }
        while (v268 != v260);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<false,2ul,1u,(TwiddleOrder)1>>(uint64_t result, _WORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _WORD *v13;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  BOOL v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  BOOL v102;
  BOOL v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  BOOL v110;
  BOOL v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  char *v119;
  int v120;
  BOOL v121;
  BOOL v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  unint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  int v132;
  int v133;
  unint64_t v134;
  int v135;
  int j;
  char *v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  int v143;
  uint64_t v144;
  int v145;
  char *v146;
  unsigned int v147;
  char *v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  BOOL v152;
  char v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  unsigned int v171;
  unsigned int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  BOOL v181;
  BOOL v182;
  int v183;
  int v184;
  int v185;
  BOOL v186;
  int v187;
  BOOL v188;
  int v189;
  int v190;
  unint64_t v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  int v196;
  unsigned int v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  BOOL v201;
  BOOL v202;
  unsigned int v203;
  int v204;
  uint64_t v205;
  int v206;
  unsigned int v207;
  BOOL v208;
  BOOL v209;
  unsigned int v210;
  int v211;
  int v212;
  unsigned int v213;
  uint64_t v214;
  int v215;
  BOOL v216;
  unsigned int v217;
  BOOL v218;
  unsigned int v219;
  int v220;
  uint64_t v221;
  int v222;
  BOOL v223;
  unsigned int v224;
  unsigned int v225;
  int v226;
  int v227;
  int v228;
  _WORD *v229;
  int v230;
  _WORD *v231;
  uint64_t v232;
  int i;
  unsigned int v234;
  _WORD *v235;
  uint64_t v236;
  int v237;
  unsigned int v238;
  unsigned int v239;
  int v240;
  unsigned int v241;
  char v242;
  _WORD *v243;
  int v245;
  unsigned int v246;
  int v247;
  char v248;
  _WORD *v249;
  int v252;
  int v253;
  uint64_t v254;
  int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  int v259;
  char v260;
  int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  char *v268;
  BOOL v269;
  int v270;
  BOOL v271;
  unsigned int v272;
  int v273;
  uint64_t v274;
  BOOL v275;
  BOOL v276;
  int v277;
  unsigned int v278;
  unsigned int v279;
  int v280;
  int v281;
  int v282;
  unsigned int v283;
  int v284;
  char v285[16];
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned __int8 v293;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v16 = result;
  v17 = a11;
  v18 = a12;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2)
      v25 = v24;
    else
      v25 = 0;
    v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2)
      v27 = v26;
    else
      v27 = 0;
    if (v27 | v25)
    {
      v28 = 0;
      v29 = 0;
      v30 = v25 != 0;
      v31 = v27 != 0;
      v32 = v25 != 0;
      v33 = v27 != 0;
      v34 = 1;
      v35 = v25;
      v36 = v27;
      do
      {
        --v35;
        if (v32)
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        else
          v35 = 0;
        --v36;
        if (!v33)
          v36 = 0;
        v34 *= 2;
        v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        v33 = v36 != 0;
        v32 = v35 != 0;
      }
      while (v36 | v35);
      v37 = 0;
      v38 = 0;
      v39 = 1;
      v40 = v25 != 0;
      v41 = v27 != 0;
      v42 = v25;
      v43 = v27;
      do
      {
        --v42;
        v44 = v40;
        if (!v44)
          v42 = 0;
        v45 = v37 + v44;
        --v43;
        if (v41)
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        else
          v43 = 0;
        v39 *= 2;
        v37 = v45 - 1;
        v41 = v43 != 0;
        v40 = v42 != 0;
      }
      while (v43 | v42);
      v46 = 0;
      v47 = 0;
      v48 = v25 != 0;
      v49 = v27 != 0;
      v50 = 1;
      v51 = v25;
      v52 = v27;
      do
      {
        --v51;
        if (v48)
          v47 |= (unint64_t)(v50 & a7) << v46++;
        else
          v51 = 0;
        --v52;
        if (!v49)
          v52 = 0;
        v50 *= 2;
        v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        v49 = v52 != 0;
        v48 = v51 != 0;
      }
      while (v52 | v51);
      v53 = 0;
      v54 = 0;
      v55 = 1;
      do
      {
        --v25;
        v56 = v30;
        if (!v56)
          v25 = 0;
        v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          v58 = v57 + 1;
        }
        else
        {
          v27 = 0;
          v58 = v57;
        }
        v55 *= 2;
        v53 = v58 - 1;
        v31 = v27 != 0;
        v30 = v25 != 0;
        result = v27 | v25;
      }
      while ((_DWORD)result);
      v19 = a10;
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v29 = 0;
      v38 = 0;
      v54 = 0;
      if (!a9)
        return result;
    }
    if (v19)
    {
      for (i = 0; i != v19; ++i)
      {
        v234 = a9;
        v235 = v13;
        v236 = v47;
        do
        {
          *v235++ = *(_WORD *)(v16 + 2 * (v236 + v54));
          v236 = (v236 - v29) & v29;
          --v234;
        }
        while (v234);
        v54 = (v54 - v38) & v38;
        v13 = (_WORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  if (*((_BYTE *)a12 + 20))
  {
    result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v285);
    v20 = *((_BYTE *)a12 + 13);
    v21 = *((_BYTE *)a12 + 12);
    v243 = v13;
    if (1 << v20 >= a6 || a5 >> v21)
    {
      v149 = a6 >> v20;
      v150 = 1 << v21;
      v151 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
      if (a6 < 2)
        v151 = 0;
      v152 = v150 >= a5;
      if (v150 < a5)
        v153 = v21 + v20 + v151;
      else
        v153 = *((_BYTE *)a12 + 12);
      if (v152)
        LOBYTE(v154) = *((_BYTE *)a12 + 13);
      else
        v154 = -v151;
      if (!v149)
        v21 = v153;
      v242 = v21;
      if (v149)
        v23 = *((_BYTE *)a12 + 13);
      else
        v23 = v154;
    }
    else
    {
      v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
      if (a5 < 2)
        LOBYTE(v22) = 0;
      v242 = v22;
      v23 = v21 + v20 - v22;
    }
    v155 = a10;
    v156 = a8;
    v241 = v291;
    if (v291)
    {
      v157 = 1 << v23;
      v158 = v292;
      v159 = v289;
      v271 = v289 != 0;
      v273 = v290;
      v269 = v290 != 0;
      v240 = 1 << v242;
      if (1 << v242 >= a5)
        v160 = a5;
      else
        v160 = 1 << v242;
      if (v157 >= a6)
        v161 = a6;
      else
        v161 = 1 << v23;
      v162 = 32 - __clz(v160 - 1);
      if (v160 >= 2)
        v163 = v162;
      else
        v163 = 0;
      v164 = 32 - __clz(v161 - 1);
      if (v161 < 2)
        v164 = 0;
      v276 = v163 != 0;
      v278 = v164;
      v275 = v164 != 0;
      if (v292)
      {
        v165 = 0;
        v239 = a7 >> v242;
        v264 = a8 >> v23;
        v280 = v290 | v289;
        v284 = v293;
        v238 = a9 + a7;
        v237 = v286;
        v166 = v288;
        v282 = v287;
        v259 = (v157 - 1) & a8;
        v261 = (v157 - 1) & (a10 + a8);
        v257 = v157 - v259;
        v167 = ~(-1 << v163);
        v253 = v288;
        v255 = v164 | v163;
        v168 = ~(-1 << v164);
        v267 = v163;
        v247 = 1 << v23;
        v248 = v23;
        v246 = v292;
        do
        {
          v169 = 0;
          v170 = v165 + v237;
          v171 = (v165 + v239) << v242;
          v172 = a9;
          if (v238 >= (v165 + v239 + 1) << v242)
            v172 = v240 - ((v240 - 1) & a7);
          v173 = 1 << v242;
          if (v238 < (v165 + v239 + 1) << v242)
            v173 = (v240 - 1) & (a9 + a7);
          v245 = v165;
          if (v171 >= a7)
            v174 = v173;
          else
            v174 = v172;
          if (v171 >= a7)
            v175 = 0;
          else
            v175 = (v240 - 1) & a7;
          v249 = &v243[v175 + (v165 << v242)];
          do
          {
            v176 = v169 + v282;
            if (v284)
            {
              v177 = v280;
              if (v280)
              {
                v178 = 0;
                v177 = 0;
                v179 = 1;
                v181 = v271;
                v180 = v273;
                v182 = v269;
                v183 = v159;
                do
                {
                  --v183;
                  if (v181)
                    v177 |= (v179 & v170) << v178;
                  else
                    v183 = 0;
                  if (v181)
                    ++v178;
                  --v180;
                  if (v182)
                    v177 |= (v179 & v176) << v178;
                  else
                    v180 = 0;
                  if (v182)
                    ++v178;
                  v179 *= 2;
                  --v178;
                  v182 = v180 != 0;
                  v181 = v183 != 0;
                }
                while (v180 | v183);
              }
            }
            else
            {
              v177 = v280;
              if (v280)
              {
                v184 = 0;
                v177 = 0;
                v185 = 1;
                v186 = v269;
                v188 = v271;
                v187 = v273;
                v189 = v159;
                do
                {
                  --v187;
                  if (v186)
                    v177 |= (v185 & v176) << v184;
                  else
                    v187 = 0;
                  if (v186)
                    ++v184;
                  --v189;
                  if (v188)
                    v177 |= (v185 & v170) << v184;
                  else
                    v189 = 0;
                  if (v188)
                    ++v184;
                  v185 *= 2;
                  --v184;
                  v188 = v189 != 0;
                  v186 = v187 != 0;
                }
                while (v189 | v187);
              }
            }
            v190 = *(_DWORD *)(v16 + 4 * ((v177 + v166) | ((v177 + v166) >> 8 << 9)));
            if (v190 < 0)
            {
              v191 = v16 - *((_QWORD *)a13 + 3) + ((unint64_t)(v190 & 0x3FFFFFF) << 14);
              result = *a13;
              v192 = a13[2];
              if (result > v192)
              {
                result = get_level_offset_within_tail(result, v192, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                v163 = v267;
                v158 = v246;
                v157 = v247;
                v23 = v248;
                v17 = a11;
                v156 = a8;
                v155 = a10;
                v191 += result;
              }
              v193 = (v169 + v264) << v23;
              v194 = v257;
              if (a10 + a8 >= (v169 + v264 + 1) << v23)
              {
                v195 = v157;
              }
              else
              {
                v194 = v155;
                v195 = v261;
              }
              if (v193 >= v156)
                v196 = 0;
              else
                v196 = v259;
              if (v193 >= v156)
                v194 = v195;
              if (!v255)
              {
                v214 = 0;
                v198 = 0;
                v205 = 0;
                v221 = 0;
                v166 = v253;
                if (!v174)
                  goto LABEL_210;
LABEL_282:
                if (v194)
                {
                  v228 = 0;
                  v229 = (_WORD *)((char *)v249 + (v196 + (v169 << v23)) * v17);
                  do
                  {
                    v230 = v174;
                    v231 = v229;
                    v232 = v214;
                    do
                    {
                      result = *(unsigned __int16 *)(v191 + 2 * (v232 + v221));
                      *v231++ = result;
                      v232 = (v232 - v198) & v198;
                      --v230;
                    }
                    while (v230);
                    v221 = (v221 - v205) & v205;
                    v229 = (_WORD *)((char *)v229 + v17);
                    ++v228;
                  }
                  while (v228 != v194);
                }
                goto LABEL_210;
              }
              v197 = 0;
              v198 = 0;
              v199 = 1;
              v201 = v276;
              v200 = v278;
              v202 = v275;
              v203 = v163;
              do
              {
                --v203;
                if (v201)
                  v198 |= (unint64_t)(v199 & v167) << v197++;
                else
                  v203 = 0;
                --v200;
                if (!v202)
                  v200 = 0;
                v199 *= 2;
                v197 = (__PAIR64__(v197, v202) - 1) >> 32;
                v202 = v200 != 0;
                v201 = v203 != 0;
              }
              while (v200 | v203);
              v204 = 0;
              v205 = 0;
              v206 = 1;
              v208 = v276;
              v207 = v278;
              v209 = v275;
              v210 = v163;
              do
              {
                --v210;
                v211 = v208;
                if (!v211)
                  v210 = 0;
                v212 = v204 + v211;
                --v207;
                if (v209)
                  v205 |= (unint64_t)(v206 & v168) << v212++;
                else
                  v207 = 0;
                v206 *= 2;
                v204 = v212 - 1;
                v209 = v207 != 0;
                v208 = v210 != 0;
              }
              while (v207 | v210);
              v213 = 0;
              v214 = 0;
              v215 = 1;
              v216 = v276;
              v217 = v278;
              v218 = v275;
              v219 = v163;
              do
              {
                --v219;
                if (v216)
                  v214 |= (unint64_t)(v215 & v175) << v213++;
                else
                  v219 = 0;
                --v217;
                if (!v218)
                  v217 = 0;
                v215 *= 2;
                v213 = (__PAIR64__(v213, v218) - 1) >> 32;
                v218 = v217 != 0;
                v216 = v219 != 0;
              }
              while (v217 | v219);
              v220 = 0;
              v221 = 0;
              v222 = 1;
              v223 = v276;
              v224 = v278;
              LOBYTE(result) = v275;
              v225 = v163;
              do
              {
                --v225;
                v226 = v223;
                if (!v226)
                  v225 = 0;
                v227 = v220 + v226;
                --v224;
                if ((result & 1) != 0)
                  v221 |= (unint64_t)(v222 & v196) << v227++;
                else
                  v224 = 0;
                v222 *= 2;
                v220 = v227 - 1;
                result = v224 != 0;
                v223 = v225 != 0;
              }
              while (v224 | v225);
              v163 = v267;
              v166 = v253;
              if (v174)
                goto LABEL_282;
            }
LABEL_210:
            ++v169;
          }
          while (v158 > (unsigned __int16)v169);
          v165 = v245 + 1;
        }
        while (v241 > (unsigned __int16)(v245 + 1));
      }
    }
  }
  else
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = a5 >> v60;
    v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2)
      v63 = 0;
    v64 = v60 + v59;
    result = v60 + v59 + v63;
    if (a6 >> v59)
      v65 = 1;
    else
      v65 = 1 << v60 >= a5;
    if (v65)
    {
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      v66 = -v63;
    }
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && v62 == 0)
      LOBYTE(v66) = v64 - v67;
    else
      LOBYTE(v67) = v60;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v263 = a8 >> v66;
    v265 = 1 << v66;
    v76 = v69 - 1;
    v260 = v66;
    v262 = a10 + a8;
    v258 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 < v258)
    {
      result = a7 >> v67;
      v77 = (1 << v67) - 1;
      v281 = 1 << v67;
      v283 = a9 + a7;
      if (1 << v67 >= a5)
        v78 = a5;
      else
        v78 = 1 << v67;
      v79 = 1 << v66;
      if (v265 >= a6)
        v79 = a6;
      v80 = 32 - __clz(v78 - 1);
      if (v78 >= 2)
        v81 = v80;
      else
        v81 = 0;
      v82 = 32 - __clz(v79 - 1);
      if (v79 >= 2)
        v83 = v82;
      else
        v83 = 0;
      v272 = a7 >> v67;
      v279 = (v77 + a9 + a7) >> v67;
      if (result < v279)
      {
        v256 = (v75 + ~(-1 << v67)) >> v67;
        v84 = v77 & a7;
        v277 = v77 & v283;
        v252 = v76 & v262;
        v254 = v76 & a8;
        v85 = v263;
        do
        {
          v86 = v85 << v260;
          v266 = v85 + 1;
          v87 = v265;
          if (v262 < (v85 + 1) << v260)
            v87 = v252;
          v88 = v265 - v254;
          if (v262 < (v85 + 1) << v260)
            v88 = v19;
          v270 = v85 * v256;
          if (v86 >= a8)
            v89 = 0;
          else
            v89 = v254;
          if (v86 >= a8)
            v90 = v87;
          else
            v90 = v88;
          v268 = (char *)v13 + (v89 + ((v85 - v263) << v260) - v254) * a11;
          v91 = v272;
          v92 = a7;
          if (v83 | v81)
          {
            do
            {
              v94 = 0;
              v95 = 0;
              v96 = v91 << v67;
              v97 = v91 - v272;
              v98 = v91 + v270;
              v99 = ++v91 << v67;
              if (v96 >= v92)
                v100 = 0;
              else
                v100 = v84;
              v274 = v98 * v18[3] * *((unsigned __int8 *)v18 + 9);
              v101 = 1;
              v102 = v81 != 0;
              v103 = v83 != 0;
              v104 = v81;
              v105 = v83;
              do
              {
                --v104;
                if (v102)
                  v95 |= (unint64_t)(v101 & ~(-1 << v81)) << v94++;
                else
                  v104 = 0;
                --v105;
                if (!v103)
                  v105 = 0;
                v101 *= 2;
                v94 = (__PAIR64__(v94, v103) - 1) >> 32;
                v103 = v105 != 0;
                v102 = v104 != 0;
              }
              while (v105 | v104);
              v106 = 0;
              v107 = 0;
              if (v283 >= v99)
                v108 = 1 << v67;
              else
                v108 = v277;
              v109 = 1;
              v110 = v81 != 0;
              v111 = v83 != 0;
              v112 = v81;
              v113 = v83;
              do
              {
                v114 = v110;
                if (v114)
                  --v112;
                else
                  v112 = 0;
                v115 = v106 + v114;
                if (v111)
                  --v113;
                else
                  v113 = 0;
                if (v111)
                  v107 |= (unint64_t)(v109 & ~(-1 << v83)) << v115++;
                v109 *= 2;
                v106 = v115 - 1;
                v111 = v113 != 0;
                v110 = v112 != 0;
              }
              while (v113 | v112);
              v116 = 0;
              v117 = 0;
              if (v283 >= v99)
                v118 = v281 - v84;
              else
                v118 = a9;
              v119 = &v268[2 * (v100 + (v97 << v67) - v84)];
              v120 = 1;
              v121 = v81 != 0;
              v122 = v83 != 0;
              v123 = v81;
              v124 = v83;
              do
              {
                --v123;
                if (v121)
                {
                  v117 |= (unint64_t)(v120 & v100) << v116;
                  v125 = v116 + 1;
                }
                else
                {
                  v123 = 0;
                  v125 = v116;
                }
                if (v122)
                  --v124;
                else
                  v124 = 0;
                v120 *= 2;
                v116 = (__PAIR64__(v125, v122) - 1) >> 32;
                v122 = v124 != 0;
                v121 = v123 != 0;
              }
              while (v124 | v123);
              v126 = 0;
              v127 = 0;
              v128 = 1;
              v129 = v81 != 0;
              v130 = v83 != 0;
              LODWORD(result) = v81;
              v131 = v83;
              do
              {
                v132 = v129;
                if (v132)
                  result = (result - 1);
                else
                  result = 0;
                v133 = v126 + v132;
                v134 = ((unint64_t)(v128 & v89) << (v126 + v132)) | v127;
                if (v130)
                  --v131;
                else
                  v131 = 0;
                if (v130)
                {
                  v127 = v134;
                  ++v133;
                }
                v128 *= 2;
                v126 = v133 - 1;
                v130 = v131 != 0;
                v129 = (_DWORD)result != 0;
              }
              while (v131 | result);
              v92 = a7;
              if (v96 >= a7)
                v135 = v108;
              else
                v135 = v118;
              if (v90 && v135)
              {
                for (j = 0; j != v90; ++j)
                {
                  LODWORD(result) = v135;
                  v137 = v119;
                  v138 = v117;
                  do
                  {
                    *(_WORD *)v137 = *(_WORD *)(v274 + v16 + 2 * (v138 + v127));
                    v137 += 2;
                    v138 = (v138 - v95) & v95;
                    result = (result - 1);
                  }
                  while ((_DWORD)result);
                  v127 = (v127 - v107) & v107;
                  v119 += a11;
                }
              }
              v18 = a12;
            }
            while (v91 != v279);
          }
          else
          {
            v93 = v272;
            do
            {
              v139 = v93 << v67;
              v140 = v93 + 1;
              v141 = a9;
              if (v283 >= (v93 + 1) << v67)
                v141 = v281 - v84;
              v142 = 1 << v67;
              if (v283 < v140 << v67)
                v142 = v277;
              if (v139 >= a7)
                v141 = v142;
              if (v90 && v141)
              {
                v143 = 0;
                v144 = (v93 + v270) * v18[3] * *((unsigned __int8 *)v18 + 9);
                if (v139 >= a7)
                  v145 = 0;
                else
                  v145 = v84;
                v146 = &v268[2 * (v145 + ((v93 - v272) << v67) - v84)];
                do
                {
                  v147 = v141;
                  v148 = v146;
                  do
                  {
                    result = *(unsigned __int16 *)(v16 + v144);
                    *(_WORD *)v148 = result;
                    v148 += 2;
                    --v147;
                  }
                  while (v147);
                  v146 += a11;
                  ++v143;
                }
                while (v143 != v90);
              }
              v93 = v140;
            }
            while (v140 != v279);
          }
          v85 = v266;
          v13 = a2;
          v19 = a10;
        }
        while (v266 != v258);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<false,4ul,1u,(TwiddleOrder)1>>(uint64_t result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _DWORD *v13;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  BOOL v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  BOOL v102;
  BOOL v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  BOOL v110;
  BOOL v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  char *v119;
  int v120;
  BOOL v121;
  BOOL v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  unint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  int v132;
  int v133;
  unint64_t v134;
  int v135;
  int j;
  char *v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  int v143;
  uint64_t v144;
  int v145;
  char *v146;
  unsigned int v147;
  char *v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  BOOL v152;
  char v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  unsigned int v171;
  unsigned int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  BOOL v181;
  BOOL v182;
  int v183;
  int v184;
  int v185;
  BOOL v186;
  int v187;
  BOOL v188;
  int v189;
  int v190;
  unint64_t v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  int v196;
  unsigned int v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  BOOL v201;
  BOOL v202;
  unsigned int v203;
  int v204;
  uint64_t v205;
  int v206;
  unsigned int v207;
  BOOL v208;
  BOOL v209;
  unsigned int v210;
  int v211;
  int v212;
  unsigned int v213;
  uint64_t v214;
  int v215;
  BOOL v216;
  unsigned int v217;
  BOOL v218;
  unsigned int v219;
  int v220;
  uint64_t v221;
  int v222;
  BOOL v223;
  unsigned int v224;
  unsigned int v225;
  int v226;
  int v227;
  int v228;
  _DWORD *v229;
  int v230;
  _DWORD *v231;
  uint64_t v232;
  int i;
  unsigned int v234;
  _DWORD *v235;
  uint64_t v236;
  int v237;
  unsigned int v238;
  unsigned int v239;
  int v240;
  unsigned int v241;
  char v242;
  _DWORD *v243;
  int v245;
  unsigned int v246;
  int v247;
  char v248;
  _DWORD *v249;
  int v252;
  int v253;
  uint64_t v254;
  int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  int v259;
  char v260;
  int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  char *v268;
  BOOL v269;
  int v270;
  BOOL v271;
  unsigned int v272;
  int v273;
  uint64_t v274;
  BOOL v275;
  BOOL v276;
  int v277;
  unsigned int v278;
  unsigned int v279;
  int v280;
  int v281;
  int v282;
  unsigned int v283;
  int v284;
  char v285[16];
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned __int8 v293;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v16 = result;
  v17 = a11;
  v18 = a12;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2)
      v25 = v24;
    else
      v25 = 0;
    v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2)
      v27 = v26;
    else
      v27 = 0;
    if (v27 | v25)
    {
      v28 = 0;
      v29 = 0;
      v30 = v25 != 0;
      v31 = v27 != 0;
      v32 = v25 != 0;
      v33 = v27 != 0;
      v34 = 1;
      v35 = v25;
      v36 = v27;
      do
      {
        --v35;
        if (v32)
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        else
          v35 = 0;
        --v36;
        if (!v33)
          v36 = 0;
        v34 *= 2;
        v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        v33 = v36 != 0;
        v32 = v35 != 0;
      }
      while (v36 | v35);
      v37 = 0;
      v38 = 0;
      v39 = 1;
      v40 = v25 != 0;
      v41 = v27 != 0;
      v42 = v25;
      v43 = v27;
      do
      {
        --v42;
        v44 = v40;
        if (!v44)
          v42 = 0;
        v45 = v37 + v44;
        --v43;
        if (v41)
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        else
          v43 = 0;
        v39 *= 2;
        v37 = v45 - 1;
        v41 = v43 != 0;
        v40 = v42 != 0;
      }
      while (v43 | v42);
      v46 = 0;
      v47 = 0;
      v48 = v25 != 0;
      v49 = v27 != 0;
      v50 = 1;
      v51 = v25;
      v52 = v27;
      do
      {
        --v51;
        if (v48)
          v47 |= (unint64_t)(v50 & a7) << v46++;
        else
          v51 = 0;
        --v52;
        if (!v49)
          v52 = 0;
        v50 *= 2;
        v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        v49 = v52 != 0;
        v48 = v51 != 0;
      }
      while (v52 | v51);
      v53 = 0;
      v54 = 0;
      v55 = 1;
      do
      {
        --v25;
        v56 = v30;
        if (!v56)
          v25 = 0;
        v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          v58 = v57 + 1;
        }
        else
        {
          v27 = 0;
          v58 = v57;
        }
        v55 *= 2;
        v53 = v58 - 1;
        v31 = v27 != 0;
        v30 = v25 != 0;
        result = v27 | v25;
      }
      while ((_DWORD)result);
      v19 = a10;
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v29 = 0;
      v38 = 0;
      v54 = 0;
      if (!a9)
        return result;
    }
    if (v19)
    {
      for (i = 0; i != v19; ++i)
      {
        v234 = a9;
        v235 = v13;
        v236 = v47;
        do
        {
          *v235++ = *(_DWORD *)(v16 + 4 * (v236 + v54));
          v236 = (v236 - v29) & v29;
          --v234;
        }
        while (v234);
        v54 = (v54 - v38) & v38;
        v13 = (_DWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  if (*((_BYTE *)a12 + 20))
  {
    result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v285);
    v20 = *((_BYTE *)a12 + 13);
    v21 = *((_BYTE *)a12 + 12);
    v243 = v13;
    if (1 << v20 >= a6 || a5 >> v21)
    {
      v149 = a6 >> v20;
      v150 = 1 << v21;
      v151 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
      if (a6 < 2)
        v151 = 0;
      v152 = v150 >= a5;
      if (v150 < a5)
        v153 = v21 + v20 + v151;
      else
        v153 = *((_BYTE *)a12 + 12);
      if (v152)
        LOBYTE(v154) = *((_BYTE *)a12 + 13);
      else
        v154 = -v151;
      if (!v149)
        v21 = v153;
      v242 = v21;
      if (v149)
        v23 = *((_BYTE *)a12 + 13);
      else
        v23 = v154;
    }
    else
    {
      v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
      if (a5 < 2)
        LOBYTE(v22) = 0;
      v242 = v22;
      v23 = v21 + v20 - v22;
    }
    v155 = a10;
    v156 = a8;
    v241 = v291;
    if (v291)
    {
      v157 = 1 << v23;
      v158 = v292;
      v159 = v289;
      v271 = v289 != 0;
      v273 = v290;
      v269 = v290 != 0;
      v240 = 1 << v242;
      if (1 << v242 >= a5)
        v160 = a5;
      else
        v160 = 1 << v242;
      if (v157 >= a6)
        v161 = a6;
      else
        v161 = 1 << v23;
      v162 = 32 - __clz(v160 - 1);
      if (v160 >= 2)
        v163 = v162;
      else
        v163 = 0;
      v164 = 32 - __clz(v161 - 1);
      if (v161 < 2)
        v164 = 0;
      v276 = v163 != 0;
      v278 = v164;
      v275 = v164 != 0;
      if (v292)
      {
        v165 = 0;
        v239 = a7 >> v242;
        v264 = a8 >> v23;
        v280 = v290 | v289;
        v284 = v293;
        v238 = a9 + a7;
        v237 = v286;
        v166 = v288;
        v282 = v287;
        v259 = (v157 - 1) & a8;
        v261 = (v157 - 1) & (a10 + a8);
        v257 = v157 - v259;
        v167 = ~(-1 << v163);
        v253 = v288;
        v255 = v164 | v163;
        v168 = ~(-1 << v164);
        v267 = v163;
        v247 = 1 << v23;
        v248 = v23;
        v246 = v292;
        do
        {
          v169 = 0;
          v170 = v165 + v237;
          v171 = (v165 + v239) << v242;
          v172 = a9;
          if (v238 >= (v165 + v239 + 1) << v242)
            v172 = v240 - ((v240 - 1) & a7);
          v173 = 1 << v242;
          if (v238 < (v165 + v239 + 1) << v242)
            v173 = (v240 - 1) & (a9 + a7);
          v245 = v165;
          if (v171 >= a7)
            v174 = v173;
          else
            v174 = v172;
          if (v171 >= a7)
            v175 = 0;
          else
            v175 = (v240 - 1) & a7;
          v249 = &v243[v175 + (v165 << v242)];
          do
          {
            v176 = v169 + v282;
            if (v284)
            {
              v177 = v280;
              if (v280)
              {
                v178 = 0;
                v177 = 0;
                v179 = 1;
                v181 = v271;
                v180 = v273;
                v182 = v269;
                v183 = v159;
                do
                {
                  --v183;
                  if (v181)
                    v177 |= (v179 & v170) << v178;
                  else
                    v183 = 0;
                  if (v181)
                    ++v178;
                  --v180;
                  if (v182)
                    v177 |= (v179 & v176) << v178;
                  else
                    v180 = 0;
                  if (v182)
                    ++v178;
                  v179 *= 2;
                  --v178;
                  v182 = v180 != 0;
                  v181 = v183 != 0;
                }
                while (v180 | v183);
              }
            }
            else
            {
              v177 = v280;
              if (v280)
              {
                v184 = 0;
                v177 = 0;
                v185 = 1;
                v186 = v269;
                v188 = v271;
                v187 = v273;
                v189 = v159;
                do
                {
                  --v187;
                  if (v186)
                    v177 |= (v185 & v176) << v184;
                  else
                    v187 = 0;
                  if (v186)
                    ++v184;
                  --v189;
                  if (v188)
                    v177 |= (v185 & v170) << v184;
                  else
                    v189 = 0;
                  if (v188)
                    ++v184;
                  v185 *= 2;
                  --v184;
                  v188 = v189 != 0;
                  v186 = v187 != 0;
                }
                while (v189 | v187);
              }
            }
            v190 = *(_DWORD *)(v16 + 4 * ((v177 + v166) | ((v177 + v166) >> 8 << 9)));
            if (v190 < 0)
            {
              v191 = v16 - *((_QWORD *)a13 + 3) + ((unint64_t)(v190 & 0x3FFFFFF) << 14);
              result = *a13;
              v192 = a13[2];
              if (result > v192)
              {
                result = get_level_offset_within_tail(result, v192, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                v163 = v267;
                v158 = v246;
                v157 = v247;
                v23 = v248;
                v17 = a11;
                v156 = a8;
                v155 = a10;
                v191 += result;
              }
              v193 = (v169 + v264) << v23;
              v194 = v257;
              if (a10 + a8 >= (v169 + v264 + 1) << v23)
              {
                v195 = v157;
              }
              else
              {
                v194 = v155;
                v195 = v261;
              }
              if (v193 >= v156)
                v196 = 0;
              else
                v196 = v259;
              if (v193 >= v156)
                v194 = v195;
              if (!v255)
              {
                v214 = 0;
                v198 = 0;
                v205 = 0;
                v221 = 0;
                v166 = v253;
                if (!v174)
                  goto LABEL_210;
LABEL_282:
                if (v194)
                {
                  v228 = 0;
                  v229 = (_DWORD *)((char *)v249 + (v196 + (v169 << v23)) * v17);
                  do
                  {
                    v230 = v174;
                    v231 = v229;
                    v232 = v214;
                    do
                    {
                      result = *(unsigned int *)(v191 + 4 * (v232 + v221));
                      *v231++ = result;
                      v232 = (v232 - v198) & v198;
                      --v230;
                    }
                    while (v230);
                    v221 = (v221 - v205) & v205;
                    v229 = (_DWORD *)((char *)v229 + v17);
                    ++v228;
                  }
                  while (v228 != v194);
                }
                goto LABEL_210;
              }
              v197 = 0;
              v198 = 0;
              v199 = 1;
              v201 = v276;
              v200 = v278;
              v202 = v275;
              v203 = v163;
              do
              {
                --v203;
                if (v201)
                  v198 |= (unint64_t)(v199 & v167) << v197++;
                else
                  v203 = 0;
                --v200;
                if (!v202)
                  v200 = 0;
                v199 *= 2;
                v197 = (__PAIR64__(v197, v202) - 1) >> 32;
                v202 = v200 != 0;
                v201 = v203 != 0;
              }
              while (v200 | v203);
              v204 = 0;
              v205 = 0;
              v206 = 1;
              v208 = v276;
              v207 = v278;
              v209 = v275;
              v210 = v163;
              do
              {
                --v210;
                v211 = v208;
                if (!v211)
                  v210 = 0;
                v212 = v204 + v211;
                --v207;
                if (v209)
                  v205 |= (unint64_t)(v206 & v168) << v212++;
                else
                  v207 = 0;
                v206 *= 2;
                v204 = v212 - 1;
                v209 = v207 != 0;
                v208 = v210 != 0;
              }
              while (v207 | v210);
              v213 = 0;
              v214 = 0;
              v215 = 1;
              v216 = v276;
              v217 = v278;
              v218 = v275;
              v219 = v163;
              do
              {
                --v219;
                if (v216)
                  v214 |= (unint64_t)(v215 & v175) << v213++;
                else
                  v219 = 0;
                --v217;
                if (!v218)
                  v217 = 0;
                v215 *= 2;
                v213 = (__PAIR64__(v213, v218) - 1) >> 32;
                v218 = v217 != 0;
                v216 = v219 != 0;
              }
              while (v217 | v219);
              v220 = 0;
              v221 = 0;
              v222 = 1;
              v223 = v276;
              v224 = v278;
              LOBYTE(result) = v275;
              v225 = v163;
              do
              {
                --v225;
                v226 = v223;
                if (!v226)
                  v225 = 0;
                v227 = v220 + v226;
                --v224;
                if ((result & 1) != 0)
                  v221 |= (unint64_t)(v222 & v196) << v227++;
                else
                  v224 = 0;
                v222 *= 2;
                v220 = v227 - 1;
                result = v224 != 0;
                v223 = v225 != 0;
              }
              while (v224 | v225);
              v163 = v267;
              v166 = v253;
              if (v174)
                goto LABEL_282;
            }
LABEL_210:
            ++v169;
          }
          while (v158 > (unsigned __int16)v169);
          v165 = v245 + 1;
        }
        while (v241 > (unsigned __int16)(v245 + 1));
      }
    }
  }
  else
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = a5 >> v60;
    v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2)
      v63 = 0;
    v64 = v60 + v59;
    result = v60 + v59 + v63;
    if (a6 >> v59)
      v65 = 1;
    else
      v65 = 1 << v60 >= a5;
    if (v65)
    {
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      v66 = -v63;
    }
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && v62 == 0)
      LOBYTE(v66) = v64 - v67;
    else
      LOBYTE(v67) = v60;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v263 = a8 >> v66;
    v265 = 1 << v66;
    v76 = v69 - 1;
    v260 = v66;
    v262 = a10 + a8;
    v258 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 < v258)
    {
      result = a7 >> v67;
      v77 = (1 << v67) - 1;
      v281 = 1 << v67;
      v283 = a9 + a7;
      if (1 << v67 >= a5)
        v78 = a5;
      else
        v78 = 1 << v67;
      v79 = 1 << v66;
      if (v265 >= a6)
        v79 = a6;
      v80 = 32 - __clz(v78 - 1);
      if (v78 >= 2)
        v81 = v80;
      else
        v81 = 0;
      v82 = 32 - __clz(v79 - 1);
      if (v79 >= 2)
        v83 = v82;
      else
        v83 = 0;
      v272 = a7 >> v67;
      v279 = (v77 + a9 + a7) >> v67;
      if (result < v279)
      {
        v256 = (v75 + ~(-1 << v67)) >> v67;
        v84 = v77 & a7;
        v277 = v77 & v283;
        v252 = v76 & v262;
        v254 = v76 & a8;
        v85 = v263;
        do
        {
          v86 = v85 << v260;
          v266 = v85 + 1;
          v87 = v265;
          if (v262 < (v85 + 1) << v260)
            v87 = v252;
          v88 = v265 - v254;
          if (v262 < (v85 + 1) << v260)
            v88 = v19;
          v270 = v85 * v256;
          if (v86 >= a8)
            v89 = 0;
          else
            v89 = v254;
          if (v86 >= a8)
            v90 = v87;
          else
            v90 = v88;
          v268 = (char *)v13 + (v89 + ((v85 - v263) << v260) - v254) * a11;
          v91 = v272;
          v92 = a7;
          if (v83 | v81)
          {
            do
            {
              v94 = 0;
              v95 = 0;
              v96 = v91 << v67;
              v97 = v91 - v272;
              v98 = v91 + v270;
              v99 = ++v91 << v67;
              if (v96 >= v92)
                v100 = 0;
              else
                v100 = v84;
              v274 = v98 * v18[3] * *((unsigned __int8 *)v18 + 9);
              v101 = 1;
              v102 = v81 != 0;
              v103 = v83 != 0;
              v104 = v81;
              v105 = v83;
              do
              {
                --v104;
                if (v102)
                  v95 |= (unint64_t)(v101 & ~(-1 << v81)) << v94++;
                else
                  v104 = 0;
                --v105;
                if (!v103)
                  v105 = 0;
                v101 *= 2;
                v94 = (__PAIR64__(v94, v103) - 1) >> 32;
                v103 = v105 != 0;
                v102 = v104 != 0;
              }
              while (v105 | v104);
              v106 = 0;
              v107 = 0;
              if (v283 >= v99)
                v108 = 1 << v67;
              else
                v108 = v277;
              v109 = 1;
              v110 = v81 != 0;
              v111 = v83 != 0;
              v112 = v81;
              v113 = v83;
              do
              {
                v114 = v110;
                if (v114)
                  --v112;
                else
                  v112 = 0;
                v115 = v106 + v114;
                if (v111)
                  --v113;
                else
                  v113 = 0;
                if (v111)
                  v107 |= (unint64_t)(v109 & ~(-1 << v83)) << v115++;
                v109 *= 2;
                v106 = v115 - 1;
                v111 = v113 != 0;
                v110 = v112 != 0;
              }
              while (v113 | v112);
              v116 = 0;
              v117 = 0;
              if (v283 >= v99)
                v118 = v281 - v84;
              else
                v118 = a9;
              v119 = &v268[4 * (v100 + (v97 << v67) - v84)];
              v120 = 1;
              v121 = v81 != 0;
              v122 = v83 != 0;
              v123 = v81;
              v124 = v83;
              do
              {
                --v123;
                if (v121)
                {
                  v117 |= (unint64_t)(v120 & v100) << v116;
                  v125 = v116 + 1;
                }
                else
                {
                  v123 = 0;
                  v125 = v116;
                }
                if (v122)
                  --v124;
                else
                  v124 = 0;
                v120 *= 2;
                v116 = (__PAIR64__(v125, v122) - 1) >> 32;
                v122 = v124 != 0;
                v121 = v123 != 0;
              }
              while (v124 | v123);
              v126 = 0;
              v127 = 0;
              v128 = 1;
              v129 = v81 != 0;
              v130 = v83 != 0;
              LODWORD(result) = v81;
              v131 = v83;
              do
              {
                v132 = v129;
                if (v132)
                  result = (result - 1);
                else
                  result = 0;
                v133 = v126 + v132;
                v134 = ((unint64_t)(v128 & v89) << (v126 + v132)) | v127;
                if (v130)
                  --v131;
                else
                  v131 = 0;
                if (v130)
                {
                  v127 = v134;
                  ++v133;
                }
                v128 *= 2;
                v126 = v133 - 1;
                v130 = v131 != 0;
                v129 = (_DWORD)result != 0;
              }
              while (v131 | result);
              v92 = a7;
              if (v96 >= a7)
                v135 = v108;
              else
                v135 = v118;
              if (v90 && v135)
              {
                for (j = 0; j != v90; ++j)
                {
                  LODWORD(result) = v135;
                  v137 = v119;
                  v138 = v117;
                  do
                  {
                    *(_DWORD *)v137 = *(_DWORD *)(v274 + v16 + 4 * (v138 + v127));
                    v137 += 4;
                    v138 = (v138 - v95) & v95;
                    result = (result - 1);
                  }
                  while ((_DWORD)result);
                  v127 = (v127 - v107) & v107;
                  v119 += a11;
                }
              }
              v18 = a12;
            }
            while (v91 != v279);
          }
          else
          {
            v93 = v272;
            do
            {
              v139 = v93 << v67;
              v140 = v93 + 1;
              v141 = a9;
              if (v283 >= (v93 + 1) << v67)
                v141 = v281 - v84;
              v142 = 1 << v67;
              if (v283 < v140 << v67)
                v142 = v277;
              if (v139 >= a7)
                v141 = v142;
              if (v90 && v141)
              {
                v143 = 0;
                v144 = (v93 + v270) * v18[3] * *((unsigned __int8 *)v18 + 9);
                if (v139 >= a7)
                  v145 = 0;
                else
                  v145 = v84;
                v146 = &v268[4 * (v145 + ((v93 - v272) << v67) - v84)];
                do
                {
                  v147 = v141;
                  v148 = v146;
                  do
                  {
                    result = *(unsigned int *)(v16 + v144);
                    *(_DWORD *)v148 = result;
                    v148 += 4;
                    --v147;
                  }
                  while (v147);
                  v146 += a11;
                  ++v143;
                }
                while (v143 != v90);
              }
              v93 = v140;
            }
            while (v140 != v279);
          }
          v85 = v266;
          v13 = a2;
          v19 = a10;
        }
        while (v266 != v258);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<false,8ul,1u,(TwiddleOrder)1>>(uint64_t result, _QWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  _QWORD *v13;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  BOOL v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  BOOL v102;
  BOOL v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  BOOL v110;
  BOOL v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  char *v119;
  int v120;
  BOOL v121;
  BOOL v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  unint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  int v132;
  int v133;
  unint64_t v134;
  int v135;
  int j;
  char *v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t *v146;
  unsigned int v147;
  uint64_t *v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  BOOL v152;
  char v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  unsigned int v171;
  unsigned int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  BOOL v181;
  BOOL v182;
  int v183;
  int v184;
  int v185;
  BOOL v186;
  int v187;
  BOOL v188;
  int v189;
  int v190;
  unint64_t v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  int v196;
  unsigned int v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  BOOL v201;
  BOOL v202;
  unsigned int v203;
  int v204;
  uint64_t v205;
  int v206;
  unsigned int v207;
  BOOL v208;
  BOOL v209;
  unsigned int v210;
  int v211;
  int v212;
  unsigned int v213;
  uint64_t v214;
  int v215;
  BOOL v216;
  unsigned int v217;
  BOOL v218;
  unsigned int v219;
  int v220;
  uint64_t v221;
  int v222;
  BOOL v223;
  unsigned int v224;
  unsigned int v225;
  int v226;
  int v227;
  int v228;
  uint64_t *v229;
  int v230;
  uint64_t *v231;
  uint64_t v232;
  int i;
  unsigned int v234;
  _QWORD *v235;
  uint64_t v236;
  int v237;
  unsigned int v238;
  unsigned int v239;
  int v240;
  unsigned int v241;
  char v242;
  _QWORD *v243;
  int v245;
  unsigned int v246;
  int v247;
  char v248;
  _QWORD *v249;
  int v252;
  int v253;
  uint64_t v254;
  int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  int v259;
  char v260;
  int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  char *v268;
  BOOL v269;
  int v270;
  BOOL v271;
  unsigned int v272;
  int v273;
  uint64_t v274;
  BOOL v275;
  BOOL v276;
  int v277;
  unsigned int v278;
  unsigned int v279;
  int v280;
  int v281;
  int v282;
  unsigned int v283;
  int v284;
  char v285[16];
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned __int8 v293;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v16 = result;
  v17 = a11;
  v18 = a12;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2)
      v25 = v24;
    else
      v25 = 0;
    v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2)
      v27 = v26;
    else
      v27 = 0;
    if (v27 | v25)
    {
      v28 = 0;
      v29 = 0;
      v30 = v25 != 0;
      v31 = v27 != 0;
      v32 = v25 != 0;
      v33 = v27 != 0;
      v34 = 1;
      v35 = v25;
      v36 = v27;
      do
      {
        --v35;
        if (v32)
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        else
          v35 = 0;
        --v36;
        if (!v33)
          v36 = 0;
        v34 *= 2;
        v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        v33 = v36 != 0;
        v32 = v35 != 0;
      }
      while (v36 | v35);
      v37 = 0;
      v38 = 0;
      v39 = 1;
      v40 = v25 != 0;
      v41 = v27 != 0;
      v42 = v25;
      v43 = v27;
      do
      {
        --v42;
        v44 = v40;
        if (!v44)
          v42 = 0;
        v45 = v37 + v44;
        --v43;
        if (v41)
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        else
          v43 = 0;
        v39 *= 2;
        v37 = v45 - 1;
        v41 = v43 != 0;
        v40 = v42 != 0;
      }
      while (v43 | v42);
      v46 = 0;
      v47 = 0;
      v48 = v25 != 0;
      v49 = v27 != 0;
      v50 = 1;
      v51 = v25;
      v52 = v27;
      do
      {
        --v51;
        if (v48)
          v47 |= (unint64_t)(v50 & a7) << v46++;
        else
          v51 = 0;
        --v52;
        if (!v49)
          v52 = 0;
        v50 *= 2;
        v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        v49 = v52 != 0;
        v48 = v51 != 0;
      }
      while (v52 | v51);
      v53 = 0;
      v54 = 0;
      v55 = 1;
      do
      {
        --v25;
        v56 = v30;
        if (!v56)
          v25 = 0;
        v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          v58 = v57 + 1;
        }
        else
        {
          v27 = 0;
          v58 = v57;
        }
        v55 *= 2;
        v53 = v58 - 1;
        v31 = v27 != 0;
        v30 = v25 != 0;
        result = v27 | v25;
      }
      while ((_DWORD)result);
      v19 = a10;
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v29 = 0;
      v38 = 0;
      v54 = 0;
      if (!a9)
        return result;
    }
    if (v19)
    {
      for (i = 0; i != v19; ++i)
      {
        v234 = a9;
        v235 = v13;
        v236 = v47;
        do
        {
          *v235++ = *(_QWORD *)(v16 + 8 * (v236 + v54));
          v236 = (v236 - v29) & v29;
          --v234;
        }
        while (v234);
        v54 = (v54 - v38) & v38;
        v13 = (_QWORD *)((char *)v13 + a11);
      }
    }
    return result;
  }
  if (*((_BYTE *)a12 + 20))
  {
    result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v285);
    v20 = *((_BYTE *)a12 + 13);
    v21 = *((_BYTE *)a12 + 12);
    v243 = v13;
    if (1 << v20 >= a6 || a5 >> v21)
    {
      v149 = a6 >> v20;
      v150 = 1 << v21;
      v151 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
      if (a6 < 2)
        v151 = 0;
      v152 = v150 >= a5;
      if (v150 < a5)
        v153 = v21 + v20 + v151;
      else
        v153 = *((_BYTE *)a12 + 12);
      if (v152)
        LOBYTE(v154) = *((_BYTE *)a12 + 13);
      else
        v154 = -v151;
      if (!v149)
        v21 = v153;
      v242 = v21;
      if (v149)
        v23 = *((_BYTE *)a12 + 13);
      else
        v23 = v154;
    }
    else
    {
      v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
      if (a5 < 2)
        LOBYTE(v22) = 0;
      v242 = v22;
      v23 = v21 + v20 - v22;
    }
    v155 = a10;
    v156 = a8;
    v241 = v291;
    if (v291)
    {
      v157 = 1 << v23;
      v158 = v292;
      v159 = v289;
      v271 = v289 != 0;
      v273 = v290;
      v269 = v290 != 0;
      v240 = 1 << v242;
      if (1 << v242 >= a5)
        v160 = a5;
      else
        v160 = 1 << v242;
      if (v157 >= a6)
        v161 = a6;
      else
        v161 = 1 << v23;
      v162 = 32 - __clz(v160 - 1);
      if (v160 >= 2)
        v163 = v162;
      else
        v163 = 0;
      v164 = 32 - __clz(v161 - 1);
      if (v161 < 2)
        v164 = 0;
      v276 = v163 != 0;
      v278 = v164;
      v275 = v164 != 0;
      if (v292)
      {
        v165 = 0;
        v239 = a7 >> v242;
        v264 = a8 >> v23;
        v280 = v290 | v289;
        v284 = v293;
        v238 = a9 + a7;
        v237 = v286;
        v166 = v288;
        v282 = v287;
        v259 = (v157 - 1) & a8;
        v261 = (v157 - 1) & (a10 + a8);
        v257 = v157 - v259;
        v167 = ~(-1 << v163);
        v253 = v288;
        v255 = v164 | v163;
        v168 = ~(-1 << v164);
        v267 = v163;
        v247 = 1 << v23;
        v248 = v23;
        v246 = v292;
        do
        {
          v169 = 0;
          v170 = v165 + v237;
          v171 = (v165 + v239) << v242;
          v172 = a9;
          if (v238 >= (v165 + v239 + 1) << v242)
            v172 = v240 - ((v240 - 1) & a7);
          v173 = 1 << v242;
          if (v238 < (v165 + v239 + 1) << v242)
            v173 = (v240 - 1) & (a9 + a7);
          v245 = v165;
          if (v171 >= a7)
            v174 = v173;
          else
            v174 = v172;
          if (v171 >= a7)
            v175 = 0;
          else
            v175 = (v240 - 1) & a7;
          v249 = &v243[v175 + (v165 << v242)];
          do
          {
            v176 = v169 + v282;
            if (v284)
            {
              v177 = v280;
              if (v280)
              {
                v178 = 0;
                v177 = 0;
                v179 = 1;
                v181 = v271;
                v180 = v273;
                v182 = v269;
                v183 = v159;
                do
                {
                  --v183;
                  if (v181)
                    v177 |= (v179 & v170) << v178;
                  else
                    v183 = 0;
                  if (v181)
                    ++v178;
                  --v180;
                  if (v182)
                    v177 |= (v179 & v176) << v178;
                  else
                    v180 = 0;
                  if (v182)
                    ++v178;
                  v179 *= 2;
                  --v178;
                  v182 = v180 != 0;
                  v181 = v183 != 0;
                }
                while (v180 | v183);
              }
            }
            else
            {
              v177 = v280;
              if (v280)
              {
                v184 = 0;
                v177 = 0;
                v185 = 1;
                v186 = v269;
                v188 = v271;
                v187 = v273;
                v189 = v159;
                do
                {
                  --v187;
                  if (v186)
                    v177 |= (v185 & v176) << v184;
                  else
                    v187 = 0;
                  if (v186)
                    ++v184;
                  --v189;
                  if (v188)
                    v177 |= (v185 & v170) << v184;
                  else
                    v189 = 0;
                  if (v188)
                    ++v184;
                  v185 *= 2;
                  --v184;
                  v188 = v189 != 0;
                  v186 = v187 != 0;
                }
                while (v189 | v187);
              }
            }
            v190 = *(_DWORD *)(v16 + 4 * ((v177 + v166) | ((v177 + v166) >> 8 << 9)));
            if (v190 < 0)
            {
              v191 = v16 - *((_QWORD *)a13 + 3) + ((unint64_t)(v190 & 0x3FFFFFF) << 14);
              result = *a13;
              v192 = a13[2];
              if (result > v192)
              {
                result = get_level_offset_within_tail(result, v192, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                v163 = v267;
                v158 = v246;
                v157 = v247;
                v23 = v248;
                v17 = a11;
                v156 = a8;
                v155 = a10;
                v191 += result;
              }
              v193 = (v169 + v264) << v23;
              v194 = v257;
              if (a10 + a8 >= (v169 + v264 + 1) << v23)
              {
                v195 = v157;
              }
              else
              {
                v194 = v155;
                v195 = v261;
              }
              if (v193 >= v156)
                v196 = 0;
              else
                v196 = v259;
              if (v193 >= v156)
                v194 = v195;
              if (!v255)
              {
                v214 = 0;
                v198 = 0;
                v205 = 0;
                v221 = 0;
                v166 = v253;
                if (!v174)
                  goto LABEL_210;
LABEL_282:
                if (v194)
                {
                  v228 = 0;
                  v229 = (_QWORD *)((char *)v249 + (v196 + (v169 << v23)) * v17);
                  do
                  {
                    v230 = v174;
                    v231 = v229;
                    v232 = v214;
                    do
                    {
                      result = *(_QWORD *)(v191 + 8 * (v232 + v221));
                      *v231++ = result;
                      v232 = (v232 - v198) & v198;
                      --v230;
                    }
                    while (v230);
                    v221 = (v221 - v205) & v205;
                    v229 = (uint64_t *)((char *)v229 + v17);
                    ++v228;
                  }
                  while (v228 != v194);
                }
                goto LABEL_210;
              }
              v197 = 0;
              v198 = 0;
              v199 = 1;
              v201 = v276;
              v200 = v278;
              v202 = v275;
              v203 = v163;
              do
              {
                --v203;
                if (v201)
                  v198 |= (unint64_t)(v199 & v167) << v197++;
                else
                  v203 = 0;
                --v200;
                if (!v202)
                  v200 = 0;
                v199 *= 2;
                v197 = (__PAIR64__(v197, v202) - 1) >> 32;
                v202 = v200 != 0;
                v201 = v203 != 0;
              }
              while (v200 | v203);
              v204 = 0;
              v205 = 0;
              v206 = 1;
              v208 = v276;
              v207 = v278;
              v209 = v275;
              v210 = v163;
              do
              {
                --v210;
                v211 = v208;
                if (!v211)
                  v210 = 0;
                v212 = v204 + v211;
                --v207;
                if (v209)
                  v205 |= (unint64_t)(v206 & v168) << v212++;
                else
                  v207 = 0;
                v206 *= 2;
                v204 = v212 - 1;
                v209 = v207 != 0;
                v208 = v210 != 0;
              }
              while (v207 | v210);
              v213 = 0;
              v214 = 0;
              v215 = 1;
              v216 = v276;
              v217 = v278;
              v218 = v275;
              v219 = v163;
              do
              {
                --v219;
                if (v216)
                  v214 |= (unint64_t)(v215 & v175) << v213++;
                else
                  v219 = 0;
                --v217;
                if (!v218)
                  v217 = 0;
                v215 *= 2;
                v213 = (__PAIR64__(v213, v218) - 1) >> 32;
                v218 = v217 != 0;
                v216 = v219 != 0;
              }
              while (v217 | v219);
              v220 = 0;
              v221 = 0;
              v222 = 1;
              v223 = v276;
              v224 = v278;
              LOBYTE(result) = v275;
              v225 = v163;
              do
              {
                --v225;
                v226 = v223;
                if (!v226)
                  v225 = 0;
                v227 = v220 + v226;
                --v224;
                if ((result & 1) != 0)
                  v221 |= (unint64_t)(v222 & v196) << v227++;
                else
                  v224 = 0;
                v222 *= 2;
                v220 = v227 - 1;
                result = v224 != 0;
                v223 = v225 != 0;
              }
              while (v224 | v225);
              v163 = v267;
              v166 = v253;
              if (v174)
                goto LABEL_282;
            }
LABEL_210:
            ++v169;
          }
          while (v158 > (unsigned __int16)v169);
          v165 = v245 + 1;
        }
        while (v241 > (unsigned __int16)(v245 + 1));
      }
    }
  }
  else
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = a5 >> v60;
    v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2)
      v63 = 0;
    v64 = v60 + v59;
    result = v60 + v59 + v63;
    if (a6 >> v59)
      v65 = 1;
    else
      v65 = 1 << v60 >= a5;
    if (v65)
    {
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      v66 = -v63;
    }
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && v62 == 0)
      LOBYTE(v66) = v64 - v67;
    else
      LOBYTE(v67) = v60;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v263 = a8 >> v66;
    v265 = 1 << v66;
    v76 = v69 - 1;
    v260 = v66;
    v262 = a10 + a8;
    v258 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 < v258)
    {
      result = a7 >> v67;
      v77 = (1 << v67) - 1;
      v281 = 1 << v67;
      v283 = a9 + a7;
      if (1 << v67 >= a5)
        v78 = a5;
      else
        v78 = 1 << v67;
      v79 = 1 << v66;
      if (v265 >= a6)
        v79 = a6;
      v80 = 32 - __clz(v78 - 1);
      if (v78 >= 2)
        v81 = v80;
      else
        v81 = 0;
      v82 = 32 - __clz(v79 - 1);
      if (v79 >= 2)
        v83 = v82;
      else
        v83 = 0;
      v272 = a7 >> v67;
      v279 = (v77 + a9 + a7) >> v67;
      if (result < v279)
      {
        v256 = (v75 + ~(-1 << v67)) >> v67;
        v84 = v77 & a7;
        v277 = v77 & v283;
        v252 = v76 & v262;
        v254 = v76 & a8;
        v85 = v263;
        do
        {
          v86 = v85 << v260;
          v266 = v85 + 1;
          v87 = v265;
          if (v262 < (v85 + 1) << v260)
            v87 = v252;
          v88 = v265 - v254;
          if (v262 < (v85 + 1) << v260)
            v88 = v19;
          v270 = v85 * v256;
          if (v86 >= a8)
            v89 = 0;
          else
            v89 = v254;
          if (v86 >= a8)
            v90 = v87;
          else
            v90 = v88;
          v268 = (char *)v13 + (v89 + ((v85 - v263) << v260) - v254) * a11;
          v91 = v272;
          v92 = a7;
          if (v83 | v81)
          {
            do
            {
              v94 = 0;
              v95 = 0;
              v96 = v91 << v67;
              v97 = v91 - v272;
              v98 = v91 + v270;
              v99 = ++v91 << v67;
              if (v96 >= v92)
                v100 = 0;
              else
                v100 = v84;
              v274 = v98 * v18[3] * *((unsigned __int8 *)v18 + 9);
              v101 = 1;
              v102 = v81 != 0;
              v103 = v83 != 0;
              v104 = v81;
              v105 = v83;
              do
              {
                --v104;
                if (v102)
                  v95 |= (unint64_t)(v101 & ~(-1 << v81)) << v94++;
                else
                  v104 = 0;
                --v105;
                if (!v103)
                  v105 = 0;
                v101 *= 2;
                v94 = (__PAIR64__(v94, v103) - 1) >> 32;
                v103 = v105 != 0;
                v102 = v104 != 0;
              }
              while (v105 | v104);
              v106 = 0;
              v107 = 0;
              if (v283 >= v99)
                v108 = 1 << v67;
              else
                v108 = v277;
              v109 = 1;
              v110 = v81 != 0;
              v111 = v83 != 0;
              v112 = v81;
              v113 = v83;
              do
              {
                v114 = v110;
                if (v114)
                  --v112;
                else
                  v112 = 0;
                v115 = v106 + v114;
                if (v111)
                  --v113;
                else
                  v113 = 0;
                if (v111)
                  v107 |= (unint64_t)(v109 & ~(-1 << v83)) << v115++;
                v109 *= 2;
                v106 = v115 - 1;
                v111 = v113 != 0;
                v110 = v112 != 0;
              }
              while (v113 | v112);
              v116 = 0;
              v117 = 0;
              if (v283 >= v99)
                v118 = v281 - v84;
              else
                v118 = a9;
              v119 = &v268[8 * (v100 + (v97 << v67) - v84)];
              v120 = 1;
              v121 = v81 != 0;
              v122 = v83 != 0;
              v123 = v81;
              v124 = v83;
              do
              {
                --v123;
                if (v121)
                {
                  v117 |= (unint64_t)(v120 & v100) << v116;
                  v125 = v116 + 1;
                }
                else
                {
                  v123 = 0;
                  v125 = v116;
                }
                if (v122)
                  --v124;
                else
                  v124 = 0;
                v120 *= 2;
                v116 = (__PAIR64__(v125, v122) - 1) >> 32;
                v122 = v124 != 0;
                v121 = v123 != 0;
              }
              while (v124 | v123);
              v126 = 0;
              v127 = 0;
              v128 = 1;
              v129 = v81 != 0;
              v130 = v83 != 0;
              LODWORD(result) = v81;
              v131 = v83;
              do
              {
                v132 = v129;
                if (v132)
                  result = (result - 1);
                else
                  result = 0;
                v133 = v126 + v132;
                v134 = ((unint64_t)(v128 & v89) << (v126 + v132)) | v127;
                if (v130)
                  --v131;
                else
                  v131 = 0;
                if (v130)
                {
                  v127 = v134;
                  ++v133;
                }
                v128 *= 2;
                v126 = v133 - 1;
                v130 = v131 != 0;
                v129 = (_DWORD)result != 0;
              }
              while (v131 | result);
              v92 = a7;
              if (v96 >= a7)
                v135 = v108;
              else
                v135 = v118;
              if (v90 && v135)
              {
                for (j = 0; j != v90; ++j)
                {
                  LODWORD(result) = v135;
                  v137 = v119;
                  v138 = v117;
                  do
                  {
                    *(_QWORD *)v137 = *(_QWORD *)(v274 + v16 + 8 * (v138 + v127));
                    v137 += 8;
                    v138 = (v138 - v95) & v95;
                    result = (result - 1);
                  }
                  while ((_DWORD)result);
                  v127 = (v127 - v107) & v107;
                  v119 += a11;
                }
              }
              v18 = a12;
            }
            while (v91 != v279);
          }
          else
          {
            v93 = v272;
            do
            {
              v139 = v93 << v67;
              v140 = v93 + 1;
              v141 = a9;
              if (v283 >= (v93 + 1) << v67)
                v141 = v281 - v84;
              v142 = 1 << v67;
              if (v283 < v140 << v67)
                v142 = v277;
              if (v139 >= a7)
                v141 = v142;
              if (v90 && v141)
              {
                v143 = 0;
                v144 = (v93 + v270) * v18[3] * *((unsigned __int8 *)v18 + 9);
                if (v139 >= a7)
                  v145 = 0;
                else
                  v145 = v84;
                v146 = (uint64_t *)&v268[8 * (v145 + ((v93 - v272) << v67) - v84)];
                do
                {
                  v147 = v141;
                  v148 = v146;
                  do
                  {
                    result = *(_QWORD *)(v16 + v144);
                    *v148++ = result;
                    --v147;
                  }
                  while (v147);
                  v146 = (uint64_t *)((char *)v146 + a11);
                  ++v143;
                }
                while (v143 != v90);
              }
              v93 = v140;
            }
            while (v140 != v279);
          }
          v85 = v266;
          v13 = a2;
          v19 = a10;
        }
        while (v266 != v258);
      }
    }
  }
  return result;
}

BOOL agxCalcSparseInputs(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, int a10, unsigned int a11, char a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, uint64_t a17)
{
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v26;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int32x4_t v42;
  uint32x4_t v43;
  uint32x4_t v44;
  uint64x2_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  unsigned int v50;
  int32x4_t v51;
  uint32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  uint64x2_t v55;
  uint64x2_t v56;
  uint64x2_t v57;
  uint64x2_t v58;
  char v59;
  char v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  _BOOL8 result;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  _DWORD v84[16];
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v17 = a4 - 1;
  v18 = (a4 - 1 + a2) / a4;
  v19 = a5 - 1;
  v20 = 32 - __clz(a1 / a6 - 1);
  if (a1 / a6 >= 2)
    v21 = v20;
  else
    v21 = 0;
  v22 = (v21 + 1) >> 1;
  v23 = (a5 - 1 + a3) / a5;
  if (v18 < 2)
    v24 = 0;
  else
    v24 = 32 - __clz(~(-1 << -(char)__clz(v18 - 1)));
  v26 = v21 - v22;
  if (v23 < 2)
    v29 = 0;
  else
    v29 = 32 - __clz(~(-1 << -(char)__clz(v23 - 1)));
  v30 = 0;
  v31 = 0;
  v84[0] = 0;
  if (a8 + 1 > 1)
    v32 = a8 + 1;
  else
    v32 = 1;
  do
  {
    v33 = v24 - v31;
    if (v24 < v31)
      v33 = 0;
    v34 = v29 - v31;
    if (v29 < v31)
      v34 = 0;
    v35 = v33 + v34;
    v36 = v35 >= v21;
    v37 = v35 - v21;
    if (!v36)
      v37 = 0;
    v30 += 1 << v37;
    v84[++v31] = v30;
  }
  while (v32 != v31);
  v38 = 0;
  if (a7 >= 2)
  {
    v39 = a7 - a8;
    if (a7 > a8)
    {
      if (v39 >= 8)
      {
        v41 = v39 & 0xFFFFFFF8;
        v42 = vaddq_s32(vdupq_n_s32(a8), (int32x4_t)xmmword_232D73750);
        v43 = (uint32x4_t)vdupq_n_s32(v24);
        v44 = (uint32x4_t)vdupq_n_s32(v29);
        v45 = (uint64x2_t)vdupq_n_s64(a6);
        v46 = 0uLL;
        v47.i64[0] = 0x400000004;
        v47.i64[1] = 0x400000004;
        v48.i64[0] = 0x7F0000007FLL;
        v48.i64[1] = 0x7F0000007FLL;
        v49.i64[0] = 0x800000008;
        v49.i64[1] = 0x800000008;
        v50 = v39 & 0xFFFFFFF8;
        v51 = 0uLL;
        do
        {
          v52 = (uint32x4_t)vaddq_s32(v42, v47);
          v53 = vaddq_s32((int32x4_t)vqsubq_u32(v43, (uint32x4_t)v42), (int32x4_t)vqsubq_u32(v44, (uint32x4_t)v42));
          v54 = vaddq_s32((int32x4_t)vqsubq_u32(v43, v52), (int32x4_t)vqsubq_u32(v44, v52));
          v55.i64[0] = v53.u32[0];
          v55.i64[1] = v53.u32[1];
          v56 = v55;
          v55.i64[0] = v53.u32[2];
          v55.i64[1] = v53.u32[3];
          v57 = v55;
          v55.i64[0] = v54.u32[0];
          v55.i64[1] = v54.u32[1];
          v58 = v55;
          v55.i64[0] = v54.u32[2];
          v55.i64[1] = v54.u32[3];
          v46 = vaddq_s32((int32x4_t)(*(_OWORD *)&vaddq_s32(vuzp1q_s32((int32x4_t)vshlq_u64(v45, v56), (int32x4_t)vshlq_u64(v45, v57)), v48) & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80)), v46);
          v51 = vaddq_s32((int32x4_t)(*(_OWORD *)&vaddq_s32(vuzp1q_s32((int32x4_t)vshlq_u64(v45, v58), (int32x4_t)vshlq_u64(v45, v55)), v48) & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80)), v51);
          v42 = vaddq_s32(v42, v49);
          v50 -= 8;
        }
        while (v50);
        v38 = vaddvq_s32(vaddq_s32(v51, v46));
        if (v39 == v41)
          goto LABEL_31;
        v40 = v41 + a8;
      }
      else
      {
        v38 = 0;
        v40 = a8;
      }
      do
      {
        v59 = v24 - v40;
        if (v24 < v40)
          v59 = 0;
        v60 = v29 - v40;
        if (v29 < v40)
          v60 = 0;
        v38 += (((unint64_t)a6 << (v59 + v60)) + 127) & 0xFFFFFF80;
        ++v40;
      }
      while (a7 != v40);
    }
  }
LABEL_31:
  if (a11 >= a8)
    v61 = a8;
  else
    v61 = a11;
  if (a7 <= 1)
    v62 = 1;
  else
    v62 = a8 + 1;
  v63 = v62;
  v64 = (v84[v63] + 255) & 0xFFFFFF00;
  v84[v63] = v64;
  v65 = a2 >> v61;
  v66 = a3 >> v61;
  if ((a12 & 1) == 0)
  {
    if (v65 && (v69 = (v17 + v65) / a4, v69 >= 2))
    {
      v67 = 32 - __clz(~(-1 << -(char)__clz(v69 - 1)));
      if (!v66)
        goto LABEL_51;
    }
    else
    {
      v67 = 0;
      if (!v66)
        goto LABEL_51;
    }
    v70 = (v19 + v66) / a5;
    if (v70 >= 2)
    {
      v68 = 32 - __clz(~(-1 << -(char)__clz(v70 - 1)));
      goto LABEL_52;
    }
LABEL_51:
    v68 = 0;
    goto LABEL_52;
  }
  if (v24 >= v61)
    v67 = v24 - v61;
  else
    v67 = 0;
  if (v29 >= v61)
    v68 = v29 - v61;
  else
    v68 = 0;
LABEL_52:
  v71 = 1 << v67;
  v72 = 1 << v68;
  if (1 << v26 >= (1 << v68) || v71 >> v22)
  {
    if (!(v72 >> v26) && 1 << v22 < v71)
    {
      if (v68)
        v73 = __clz(~(-1 << -(char)__clz(v72 - 1))) - 32;
      else
        v73 = 0;
      v22 = v73 + v21;
      v26 = -v73;
    }
  }
  else if (v67)
  {
    v22 = 32 - __clz(~(-1 << -(char)__clz(v71 - 1)));
    v26 = v21 - v22;
  }
  else
  {
    v22 = 0;
    v26 = v21;
  }
  if (v67 >= v22)
    v74 = v67 - v22;
  else
    v74 = 0;
  v75 = v68 - v26;
  if (v68 < v26)
    v75 = 0;
  *(_DWORD *)(a17 + 28) = v74;
  *(_DWORD *)(a17 + 32) = v75;
  result = a8 <= a11 && v38 > a1;
  if (result)
    *(_DWORD *)(a17 + 28) = v74 + 1;
  *(_BYTE *)(a17 + 57) = v26 == v22;
  *(_DWORD *)(a17 + 36) = v22;
  *(_DWORD *)(a17 + 40) = v26;
  *(_DWORD *)(a17 + 24) = v84[v61] + v64 * a10;
  *(_BYTE *)(a17 + 53) = a6;
  if ((a12 & 1) == 0)
  {
    if (v65)
    {
      v71 = (v17 + v65) / a4;
      if (v66)
      {
LABEL_77:
        v72 = (v19 + v66) / a5;
        goto LABEL_80;
      }
    }
    else
    {
      v71 = 1;
      if (v66)
        goto LABEL_77;
    }
    v72 = 1;
  }
LABEL_80:
  if (v61 >= a9)
  {
    a14 = 0;
    a13 = 0;
    a15 = v71;
    a16 = v72;
  }
  v79 = (v17 + a15 + a13) / a4;
  v80 = v19 + a16 + a14;
  v81 = (a13 / a4) >> v22;
  v82 = (a14 / a5) >> v26;
  *(_DWORD *)(a17 + 16) = v81;
  *(_DWORD *)(a17 + 20) = v82;
  v83 = ((v79 + ~(-1 << v22)) >> v22) - v81;
  *(_DWORD *)(a17 + 44) = v83;
  *(_DWORD *)(a17 + 48) = ((v80 / a5 + ~(-1 << v26)) >> v26) - v82;
  if (result)
    *(_DWORD *)(a17 + 44) = v83 + 1;
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<true,1ul,1u,(TwiddleOrder)1>>(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  BOOL v65;
  int v66;
  unsigned int v67;
  char v68;
  BOOL v69;
  unsigned int v70;
  char v71;
  unsigned int v72;
  BOOL v73;
  BOOL v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  BOOL v89;
  int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  BOOL v108;
  BOOL v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  uint64_t v113;
  int v114;
  int v115;
  BOOL v116;
  BOOL v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  int v127;
  BOOL v128;
  BOOL v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  unint64_t v134;
  int v135;
  BOOL v136;
  BOOL v137;
  unsigned int v138;
  int v139;
  int v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  BOOL v157;
  char v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  BOOL v184;
  BOOL v185;
  int v186;
  int v187;
  int v188;
  int v189;
  BOOL v190;
  BOOL v191;
  int v192;
  int v193;
  int v194;
  unint64_t v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  int v203;
  BOOL v204;
  BOOL v205;
  unsigned int v206;
  unsigned int v207;
  int v208;
  uint64_t v209;
  int v210;
  BOOL v211;
  BOOL v212;
  unsigned int v213;
  unsigned int v214;
  int v215;
  int v216;
  unsigned int v217;
  uint64_t v218;
  int v219;
  BOOL v220;
  BOOL v221;
  unsigned int v222;
  unsigned int v223;
  int v224;
  uint64_t v225;
  int v226;
  BOOL v227;
  unsigned int v228;
  unsigned int v229;
  int v230;
  int v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int i;
  uint64_t v237;
  uint64_t v238;
  int v239;
  unsigned int v240;
  unsigned int v241;
  int v242;
  unsigned int v243;
  uint64_t v244;
  char v245;
  int v246;
  unsigned int v247;
  uint64_t v248;
  int v249;
  char v250;
  uint64_t v251;
  int v254;
  int v255;
  uint64_t v256;
  int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  int v261;
  char v262;
  int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  int v267;
  unsigned int v268;
  unsigned int v269;
  int v270;
  BOOL v271;
  uint64_t v272;
  BOOL v273;
  int v274;
  int v275;
  unsigned int v276;
  BOOL v277;
  unsigned int v278;
  BOOL v279;
  int v280;
  unsigned int v281;
  unsigned int v282;
  int v283;
  int v284;
  int v285;
  char v286;
  int v287;
  char v288[16];
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned __int8 v296;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v16 = result;
  v17 = a11;
  v18 = a12;
  v19 = a9;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2)
      v25 = v24;
    else
      v25 = 0;
    v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2)
      v27 = v26;
    else
      v27 = 0;
    if (v27 | v25)
    {
      v28 = 0;
      v29 = 0;
      v30 = v25 != 0;
      v31 = v27 != 0;
      v32 = v25 != 0;
      v33 = v27 != 0;
      v34 = 1;
      v35 = v25;
      v36 = v27;
      do
      {
        --v35;
        if (v32)
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        else
          v35 = 0;
        --v36;
        if (!v33)
          v36 = 0;
        v34 *= 2;
        v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        v33 = v36 != 0;
        v32 = v35 != 0;
      }
      while (v36 | v35);
      v37 = 0;
      v38 = 0;
      v39 = 1;
      v40 = v25 != 0;
      v41 = v27 != 0;
      v42 = v25;
      v43 = v27;
      do
      {
        --v42;
        v44 = v40;
        if (!v44)
          v42 = 0;
        v45 = v37 + v44;
        --v43;
        if (v41)
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        else
          v43 = 0;
        v39 *= 2;
        v37 = v45 - 1;
        v41 = v43 != 0;
        v40 = v42 != 0;
      }
      while (v43 | v42);
      v46 = 0;
      v47 = 0;
      v48 = v25 != 0;
      v49 = v27 != 0;
      v50 = 1;
      v51 = v25;
      v52 = v27;
      do
      {
        --v51;
        if (v48)
          v47 |= (unint64_t)(v50 & a7) << v46++;
        else
          v51 = 0;
        --v52;
        if (!v49)
          v52 = 0;
        v50 *= 2;
        v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        v49 = v52 != 0;
        v48 = v51 != 0;
      }
      while (v52 | v51);
      v53 = 0;
      v54 = 0;
      v55 = 1;
      do
      {
        --v25;
        v56 = v30;
        if (!v56)
          v25 = 0;
        v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          v58 = v57 + 1;
        }
        else
        {
          v27 = 0;
          v58 = v57;
        }
        v55 *= 2;
        v53 = v58 - 1;
        v31 = v27 != 0;
        v30 = v25 != 0;
        result = v27 | v25;
      }
      while ((_DWORD)result);
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v29 = 0;
      v38 = 0;
      v54 = 0;
      if (!a9)
        return result;
    }
    if (a10)
    {
      for (i = 0; i != a10; ++i)
      {
        v237 = 0;
        v238 = v47;
        do
        {
          *(_BYTE *)(v54 + v16 + v238) = *(_BYTE *)(v13 + v237);
          v238 = (v238 - v29) & v29;
          ++v237;
        }
        while (a9 != (_DWORD)v237);
        v54 = (v54 - v38) & v38;
        v13 += a11;
      }
    }
    return result;
  }
  if (*((_BYTE *)a12 + 20))
  {
    result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v288);
    v20 = *((_BYTE *)a12 + 13);
    v21 = *((_BYTE *)a12 + 12);
    v244 = v13;
    if (1 << v20 >= a6 || a5 >> v21)
    {
      v154 = a6 >> v20;
      v155 = 1 << v21;
      v156 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
      if (a6 < 2)
        v156 = 0;
      v157 = v155 >= a5;
      if (v155 < a5)
        v158 = v21 + v20 + v156;
      else
        v158 = *((_BYTE *)a12 + 12);
      if (v157)
        LOBYTE(v159) = *((_BYTE *)a12 + 13);
      else
        v159 = -v156;
      if (!v154)
        v21 = v158;
      v245 = v21;
      if (v154)
        v23 = *((_BYTE *)a12 + 13);
      else
        v23 = v159;
    }
    else
    {
      v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
      if (a5 < 2)
        LOBYTE(v22) = 0;
      v245 = v22;
      v23 = v21 + v20 - v22;
    }
    v160 = a8;
    v243 = v294;
    if (v294)
    {
      v161 = 1 << v23;
      v162 = v295;
      v163 = v292;
      v275 = v293;
      v271 = v293 != 0;
      v273 = v292 != 0;
      v242 = 1 << v245;
      if (1 << v245 >= a5)
        v164 = a5;
      else
        v164 = 1 << v245;
      if (v161 >= a6)
        v165 = a6;
      else
        v165 = 1 << v23;
      v166 = 32 - __clz(v164 - 1);
      if (v164 >= 2)
        v167 = v166;
      else
        v167 = 0;
      v168 = 32 - __clz(v165 - 1);
      if (v165 < 2)
        v168 = 0;
      v279 = v167 != 0;
      v281 = v168;
      v277 = v168 != 0;
      if (v295)
      {
        v169 = 0;
        v241 = a7 >> v245;
        v266 = a8 >> v23;
        v283 = v293 | v292;
        v287 = v296;
        v240 = a9 + a7;
        v239 = v289;
        v170 = v291;
        v285 = v290;
        v261 = (v161 - 1) & a8;
        v263 = (v161 - 1) & (a10 + a8);
        v259 = v161 - v261;
        v171 = ~(-1 << v167);
        v255 = v291;
        v257 = v168 | v167;
        v172 = ~(-1 << v168);
        v269 = v167;
        v250 = v23;
        v247 = v295;
        v249 = 1 << v23;
        do
        {
          v173 = 0;
          v174 = v169 + v239;
          v175 = (v169 + v241) << v245;
          v176 = v242 - ((v242 - 1) & a7);
          if (v240 < (v169 + v241 + 1) << v245)
            v176 = v19;
          v177 = 1 << v245;
          if (v240 < (v169 + v241 + 1) << v245)
            v177 = (v242 - 1) & (a9 + a7);
          v246 = v169;
          if (v175 >= a7)
            v178 = v177;
          else
            v178 = v176;
          if (v175 >= a7)
            v179 = 0;
          else
            v179 = (v242 - 1) & a7;
          v251 = (v179 + (v169 << v245)) + v244;
          do
          {
            v180 = v173 + v285;
            if (v287)
            {
              v181 = v283;
              if (v283)
              {
                v182 = 0;
                v181 = 0;
                v183 = 1;
                v184 = v271;
                v185 = v273;
                v186 = v163;
                v187 = v275;
                do
                {
                  --v186;
                  if (v185)
                    v181 |= (v183 & v174) << v182;
                  else
                    v186 = 0;
                  if (v185)
                    ++v182;
                  --v187;
                  if (v184)
                    v181 |= (v183 & v180) << v182;
                  else
                    v187 = 0;
                  if (v184)
                    ++v182;
                  v183 *= 2;
                  --v182;
                  v184 = v187 != 0;
                  v185 = v186 != 0;
                }
                while (v187 | v186);
              }
            }
            else
            {
              v181 = v283;
              if (v283)
              {
                v188 = 0;
                v181 = 0;
                v189 = 1;
                v191 = v271;
                v190 = v273;
                v192 = v275;
                v193 = v163;
                do
                {
                  --v192;
                  if (v191)
                    v181 |= (v189 & v180) << v188;
                  else
                    v192 = 0;
                  if (v191)
                    ++v188;
                  --v193;
                  if (v190)
                    v181 |= (v189 & v174) << v188;
                  else
                    v193 = 0;
                  if (v190)
                    ++v188;
                  v189 *= 2;
                  --v188;
                  v190 = v193 != 0;
                  v191 = v192 != 0;
                }
                while (v193 | v192);
              }
            }
            v194 = *(_DWORD *)(v16 + 4 * ((v181 + v170) | ((v181 + v170) >> 8 << 9)));
            if (v194 < 0)
            {
              v195 = v16 - *((_QWORD *)a13 + 3) + ((unint64_t)(v194 & 0x3FFFFFF) << 14);
              result = *a13;
              v196 = a13[2];
              if (result > v196)
              {
                result = get_level_offset_within_tail(result, v196, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                v167 = v269;
                v162 = v247;
                v161 = v249;
                v23 = v250;
                v17 = a11;
                v160 = a8;
                v195 += result;
              }
              v197 = (v173 + v266) << v23;
              v198 = a10;
              if (a10 + a8 < (v173 + v266 + 1) << v23)
              {
                v199 = v263;
              }
              else
              {
                v198 = v259;
                v199 = v161;
              }
              if (v197 >= v160)
                v200 = 0;
              else
                v200 = v261;
              if (v197 >= v160)
                v198 = v199;
              if (!v257)
              {
                v218 = 0;
                v202 = 0;
                v209 = 0;
                v225 = 0;
                v170 = v255;
                if (!v178)
                  goto LABEL_211;
LABEL_283:
                if (v198)
                {
                  v232 = 0;
                  v233 = v251 + (v200 + (v173 << v23)) * v17;
                  do
                  {
                    v234 = 0;
                    v235 = v218;
                    do
                    {
                      result = *(unsigned __int8 *)(v233 + v234);
                      *(_BYTE *)(v225 + v195 + v235) = result;
                      v235 = (v235 - v202) & v202;
                      ++v234;
                    }
                    while (v178 != (_DWORD)v234);
                    v225 = (v225 - v209) & v209;
                    v233 += v17;
                    ++v232;
                  }
                  while (v232 != v198);
                }
                goto LABEL_211;
              }
              v201 = 0;
              v202 = 0;
              v203 = 1;
              v204 = v277;
              v205 = v279;
              v206 = v167;
              v207 = v281;
              do
              {
                --v206;
                if (v205)
                  v202 |= (unint64_t)(v203 & v171) << v201++;
                else
                  v206 = 0;
                --v207;
                if (!v204)
                  v207 = 0;
                v203 *= 2;
                v201 = (__PAIR64__(v201, v204) - 1) >> 32;
                v204 = v207 != 0;
                v205 = v206 != 0;
              }
              while (v207 | v206);
              v208 = 0;
              v209 = 0;
              v210 = 1;
              v211 = v277;
              v212 = v279;
              v213 = v167;
              v214 = v281;
              do
              {
                --v213;
                v215 = v212;
                if (!v215)
                  v213 = 0;
                v216 = v208 + v215;
                --v214;
                if (v211)
                  v209 |= (unint64_t)(v210 & v172) << v216++;
                else
                  v214 = 0;
                v210 *= 2;
                v208 = v216 - 1;
                v211 = v214 != 0;
                v212 = v213 != 0;
              }
              while (v214 | v213);
              v217 = 0;
              v218 = 0;
              v219 = 1;
              v221 = v277;
              v220 = v279;
              v222 = v167;
              v223 = v281;
              do
              {
                --v222;
                if (v220)
                  v218 |= (unint64_t)(v219 & v179) << v217++;
                else
                  v222 = 0;
                --v223;
                if (!v221)
                  v223 = 0;
                v219 *= 2;
                v217 = (__PAIR64__(v217, v221) - 1) >> 32;
                v221 = v223 != 0;
                v220 = v222 != 0;
              }
              while (v223 | v222);
              v224 = 0;
              v225 = 0;
              v226 = 1;
              LOBYTE(result) = v277;
              v227 = v279;
              v228 = v167;
              v229 = v281;
              do
              {
                --v228;
                v230 = v227;
                if (!v230)
                  v228 = 0;
                v231 = v224 + v230;
                --v229;
                if ((result & 1) != 0)
                  v225 |= (unint64_t)(v226 & v200) << v231++;
                else
                  v229 = 0;
                v226 *= 2;
                v224 = v231 - 1;
                result = v229 != 0;
                v227 = v228 != 0;
              }
              while (v229 | v228);
              v167 = v269;
              v170 = v255;
              if (v178)
                goto LABEL_283;
            }
LABEL_211:
            ++v173;
          }
          while (v162 > (unsigned __int16)v173);
          v169 = v246 + 1;
          v19 = a9;
        }
        while (v243 > (unsigned __int16)(v246 + 1));
      }
    }
  }
  else
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = a5 >> v60;
    v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2)
      v63 = 0;
    v64 = v60 + v59;
    result = v60 + v59 + v63;
    if (a6 >> v59)
      v65 = 1;
    else
      v65 = 1 << v60 >= a5;
    if (v65)
    {
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      v66 = -v63;
    }
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    v68 = v64 - v67;
    v69 = v61 < a6 && v62 == 0;
    if (!v69)
      LOBYTE(v67) = v60;
    v286 = v67;
    if (v69)
      LOBYTE(v66) = v68;
    v70 = 1 << v66;
    v71 = *((_BYTE *)a12 + 15);
    v72 = 1 << v71;
    if (v71)
      v73 = v72 > a3;
    else
      v73 = 1;
    v74 = v73 || v72 > a4;
    v75 = (~(-1 << v71) + a3) & (-1 << v71);
    if (v74)
      v76 = a3;
    else
      v76 = v75;
    v265 = a8 >> v66;
    v267 = 1 << v66;
    v77 = v70 - 1;
    v262 = v66;
    v264 = a10 + a8;
    v260 = (v70 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 < v260)
    {
      v78 = (1 << v67) - 1;
      result = (v78 + a9 + a7) >> v67;
      v284 = 1 << v67;
      if (1 << v67 >= a5)
        v79 = a5;
      else
        v79 = 1 << v67;
      v80 = 1 << v66;
      if (v70 >= a6)
        v80 = a6;
      v81 = 32 - __clz(v79 - 1);
      if (v79 >= 2)
        v82 = v81;
      else
        v82 = 0;
      v83 = 32 - __clz(v80 - 1);
      if (v80 >= 2)
        v84 = v83;
      else
        v84 = 0;
      v276 = a7 >> v67;
      v282 = (v78 + a9 + a7) >> v67;
      if (a7 >> v67 < result)
      {
        v85 = a9 + a7;
        v258 = (v76 + ~(-1 << v67)) >> v67;
        v280 = v78 & v85;
        v278 = v284 - (v78 & a7);
        v254 = v77 & v264;
        v256 = v77 & a8;
        v86 = v265;
        v270 = v78 & a7;
        v248 = a2 - (v78 & a7);
        do
        {
          v87 = v86 << v262;
          v88 = v86 - v265;
          v274 = v86 * v258;
          v268 = v86 + 1;
          v89 = v264 >= (v86 + 1) << v262;
          v90 = v267;
          if (!v89)
            v90 = v254;
          v91 = a10;
          if (v89)
            v91 = v267 - v256;
          v92 = v88 << v262;
          if (v87 >= a8)
            v93 = 0;
          else
            v93 = v256;
          if (v87 >= a8)
            v94 = v90;
          else
            v94 = v91;
          v272 = v248 + (v93 + v92 - v256) * a11;
          v95 = v276;
          v96 = a7;
          if (v84 | v82)
          {
            do
            {
              v98 = 0;
              v99 = 0;
              v100 = v95 << v286;
              v101 = v95 - v276;
              v102 = v95 + v274;
              v103 = ++v95 << v286;
              if (v100 >= v96)
                v104 = 0;
              else
                v104 = v270;
              v105 = v104 + (v101 << v286);
              v106 = v102 * v18[3] * *((unsigned __int8 *)v18 + 9);
              v107 = 1;
              v108 = v82 != 0;
              v109 = v84 != 0;
              v110 = v82;
              v111 = v84;
              do
              {
                --v110;
                if (v108)
                  v99 |= (unint64_t)(v107 & ~(-1 << v82)) << v98++;
                else
                  v110 = 0;
                --v111;
                if (!v109)
                  v111 = 0;
                v107 *= 2;
                v98 = (__PAIR64__(v98, v109) - 1) >> 32;
                v109 = v111 != 0;
                v108 = v110 != 0;
              }
              while (v111 | v110);
              v112 = 0;
              v113 = 0;
              v114 = v284;
              if (v85 < v103)
                v114 = v280;
              v115 = 1;
              v116 = v82 != 0;
              v117 = v84 != 0;
              v118 = v82;
              v119 = v84;
              do
              {
                --v118;
                v120 = v116;
                if (!v120)
                  v118 = 0;
                v121 = v112 + v120;
                if (v117)
                  --v119;
                else
                  v119 = 0;
                if (v117)
                  v113 |= (unint64_t)(v115 & ~(-1 << v84)) << v121++;
                v115 *= 2;
                v112 = v121 - 1;
                v117 = v119 != 0;
                v116 = v118 != 0;
              }
              while (v119 | v118);
              v122 = 0;
              v123 = 0;
              v124 = v85;
              if (v85 >= v103)
                v125 = v278;
              else
                v125 = a9;
              v126 = v272 + v105;
              v127 = 1;
              v128 = v82 != 0;
              v129 = v84 != 0;
              v130 = v82;
              v131 = v84;
              do
              {
                --v130;
                if (v128)
                {
                  v123 |= (unint64_t)(v127 & v104) << v122;
                  v132 = v122 + 1;
                }
                else
                {
                  v130 = 0;
                  v132 = v122;
                }
                if (v129)
                  --v131;
                else
                  v131 = 0;
                v127 *= 2;
                v122 = (__PAIR64__(v132, v129) - 1) >> 32;
                v129 = v131 != 0;
                v128 = v130 != 0;
              }
              while (v131 | v130);
              v133 = 0;
              v134 = 0;
              v135 = 1;
              v136 = v82 != 0;
              v137 = v84 != 0;
              LODWORD(result) = v82;
              v138 = v84;
              do
              {
                v139 = v136;
                if (v139)
                  result = (result - 1);
                else
                  result = 0;
                v140 = v133 + v139;
                v141 = ((unint64_t)(v135 & v93) << (v133 + v139)) | v134;
                if (v137)
                  --v138;
                else
                  v138 = 0;
                if (v137)
                {
                  v134 = v141;
                  ++v140;
                }
                v135 *= 2;
                v133 = v140 - 1;
                v137 = v138 != 0;
                v136 = (_DWORD)result != 0;
              }
              while (v138 | result);
              v96 = a7;
              if (v100 < a7)
                v114 = v125;
              if (v94 && v114)
              {
                v142 = 0;
                v143 = v106 + v16;
                do
                {
                  v144 = 0;
                  result = v123;
                  do
                  {
                    *(_BYTE *)(v143 + v134 + result) = *(_BYTE *)(v126 + v144);
                    result = (result - v99) & v99;
                    ++v144;
                  }
                  while (v114 != (_DWORD)v144);
                  v134 = (v134 - v113) & v113;
                  v126 += a11;
                  ++v142;
                }
                while (v142 != v94);
              }
              v18 = a12;
              v85 = v124;
            }
            while (v95 != v282);
          }
          else if (v94)
          {
            v97 = v276;
            do
            {
              v145 = v284;
              v146 = v97 << v286;
              v147 = v97 + 1;
              if (v85 >= (v97 + 1) << v286)
                v148 = v278;
              else
                v148 = a9;
              if (v85 < v147 << v286)
                v145 = v280;
              if (v146 >= a7)
                v148 = v145;
              if (v148)
              {
                v149 = 0;
                v150 = (v97 + v274) * v18[3] * *((unsigned __int8 *)v18 + 9);
                if (v146 >= a7)
                  v151 = 0;
                else
                  v151 = v270;
                v152 = v272 + v151 + ((v97 - v276) << v286);
                do
                {
                  v153 = 0;
                  do
                    *(_BYTE *)(v16 + v150) = *(_BYTE *)(v152 + v153++);
                  while (v148 != (_DWORD)v153);
                  v152 += a11;
                  ++v149;
                }
                while (v149 != v94);
              }
              v97 = v147;
            }
            while (v147 != v282);
          }
          v86 = v268;
        }
        while (v268 != v260);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<true,2ul,1u,(TwiddleOrder)1>>(uint64_t result, __int16 *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  __int16 *v13;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  BOOL v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  BOOL v102;
  BOOL v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  BOOL v110;
  BOOL v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  char *v119;
  int v120;
  BOOL v121;
  BOOL v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  unint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  int v132;
  int v133;
  unint64_t v134;
  int v135;
  int j;
  __int16 *v137;
  uint64_t v138;
  __int16 v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  int v144;
  uint64_t v145;
  int v146;
  unsigned __int16 *v147;
  unsigned int v148;
  unsigned __int16 *v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  BOOL v154;
  char v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  BOOL v181;
  BOOL v182;
  int v183;
  int v184;
  int v185;
  int v186;
  BOOL v187;
  BOOL v188;
  int v189;
  int v190;
  int v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  int v200;
  BOOL v201;
  BOOL v202;
  unsigned int v203;
  unsigned int v204;
  int v205;
  uint64_t v206;
  int v207;
  BOOL v208;
  BOOL v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  int v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  BOOL v217;
  BOOL v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  uint64_t v222;
  int v223;
  BOOL v224;
  unsigned int v225;
  unsigned int v226;
  int v227;
  int v228;
  int v229;
  unsigned __int16 *v230;
  int v231;
  unsigned __int16 *v232;
  uint64_t v233;
  unsigned int v234;
  int i;
  unsigned int v236;
  __int16 *v237;
  uint64_t v238;
  __int16 v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  char v245;
  __int16 *v246;
  int v248;
  unsigned int v249;
  int v250;
  char v251;
  __int16 *v252;
  int v255;
  int v256;
  uint64_t v257;
  unsigned int v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  int v262;
  char v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  BOOL v270;
  char *v271;
  BOOL v272;
  int v273;
  int v274;
  unsigned int v275;
  BOOL v276;
  uint64_t v277;
  BOOL v278;
  unsigned int v279;
  int v280;
  int v281;
  unsigned int v282;
  int v283;
  int v284;
  int v285;
  unsigned int v286;
  int v287;
  char v288[16];
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned __int8 v296;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v16 = result;
  v17 = a11;
  v18 = a12;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2)
      v25 = v24;
    else
      v25 = 0;
    v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2)
      v27 = v26;
    else
      v27 = 0;
    if (v27 | v25)
    {
      v28 = 0;
      v29 = 0;
      v30 = v25 != 0;
      v31 = v27 != 0;
      v32 = v25 != 0;
      v33 = v27 != 0;
      v34 = 1;
      v35 = v25;
      v36 = v27;
      do
      {
        --v35;
        if (v32)
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        else
          v35 = 0;
        --v36;
        if (!v33)
          v36 = 0;
        v34 *= 2;
        v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        v33 = v36 != 0;
        v32 = v35 != 0;
      }
      while (v36 | v35);
      v37 = 0;
      v38 = 0;
      v39 = 1;
      v40 = v25 != 0;
      v41 = v27 != 0;
      v42 = v25;
      v43 = v27;
      do
      {
        --v42;
        v44 = v40;
        if (!v44)
          v42 = 0;
        v45 = v37 + v44;
        --v43;
        if (v41)
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        else
          v43 = 0;
        v39 *= 2;
        v37 = v45 - 1;
        v41 = v43 != 0;
        v40 = v42 != 0;
      }
      while (v43 | v42);
      v46 = 0;
      v47 = 0;
      v48 = v25 != 0;
      v49 = v27 != 0;
      v50 = 1;
      v51 = v25;
      v52 = v27;
      do
      {
        --v51;
        if (v48)
          v47 |= (unint64_t)(v50 & a7) << v46++;
        else
          v51 = 0;
        --v52;
        if (!v49)
          v52 = 0;
        v50 *= 2;
        v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        v49 = v52 != 0;
        v48 = v51 != 0;
      }
      while (v52 | v51);
      v53 = 0;
      v54 = 0;
      v55 = 1;
      do
      {
        --v25;
        v56 = v30;
        if (!v56)
          v25 = 0;
        v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          v58 = v57 + 1;
        }
        else
        {
          v27 = 0;
          v58 = v57;
        }
        v55 *= 2;
        v53 = v58 - 1;
        v31 = v27 != 0;
        v30 = v25 != 0;
        result = v27 | v25;
      }
      while ((_DWORD)result);
      v19 = a10;
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v29 = 0;
      v38 = 0;
      v54 = 0;
      if (!a9)
        return result;
    }
    if (v19)
    {
      for (i = 0; i != v19; ++i)
      {
        v236 = a9;
        v237 = v13;
        v238 = v47;
        do
        {
          v239 = *v237++;
          *(_WORD *)(v16 + 2 * (v238 + v54)) = v239;
          v238 = (v238 - v29) & v29;
          --v236;
        }
        while (v236);
        v54 = (v54 - v38) & v38;
        v13 = (__int16 *)((char *)v13 + a11);
      }
    }
    return result;
  }
  if (*((_BYTE *)a12 + 20))
  {
    result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v288);
    v20 = *((_BYTE *)a12 + 13);
    v21 = *((_BYTE *)a12 + 12);
    v246 = v13;
    if (1 << v20 >= a6 || a5 >> v21)
    {
      v151 = a6 >> v20;
      v152 = 1 << v21;
      v153 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
      if (a6 < 2)
        v153 = 0;
      v154 = v152 >= a5;
      if (v152 < a5)
        v155 = v21 + v20 + v153;
      else
        v155 = *((_BYTE *)a12 + 12);
      if (v154)
        LOBYTE(v156) = *((_BYTE *)a12 + 13);
      else
        v156 = -v153;
      if (!v151)
        v21 = v155;
      v245 = v21;
      if (v151)
        v23 = *((_BYTE *)a12 + 13);
      else
        v23 = v156;
    }
    else
    {
      v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
      if (a5 < 2)
        LOBYTE(v22) = 0;
      v245 = v22;
      v23 = v21 + v20 - v22;
    }
    v157 = a10;
    v158 = a8;
    v244 = v294;
    if (v294)
    {
      v159 = 1 << v23;
      v160 = v295;
      v161 = v292;
      v274 = v293;
      v270 = v293 != 0;
      v272 = v292 != 0;
      v243 = 1 << v245;
      if (1 << v245 >= a5)
        v162 = a5;
      else
        v162 = 1 << v245;
      if (v159 >= a6)
        v163 = a6;
      else
        v163 = 1 << v23;
      v164 = 32 - __clz(v162 - 1);
      if (v162 >= 2)
        v165 = v164;
      else
        v165 = 0;
      v166 = 32 - __clz(v163 - 1);
      if (v163 < 2)
        v166 = 0;
      v279 = v166;
      v276 = v166 != 0;
      v278 = v165 != 0;
      if (v295)
      {
        v167 = 0;
        v242 = a7 >> v245;
        v265 = a8 >> v23;
        v287 = v291;
        v281 = v293 | v292;
        v285 = v296;
        v241 = a9 + a7;
        v240 = v289;
        v283 = v290;
        v260 = (v159 - 1) & a8;
        v262 = (v159 - 1) & (a10 + a8);
        v258 = v159 - v260;
        v168 = ~(-1 << v165);
        v256 = v166 | v165;
        v169 = ~(-1 << v166);
        v268 = v165;
        v250 = 1 << v23;
        v251 = v23;
        v249 = v295;
        do
        {
          v170 = 0;
          v171 = v167 + v240;
          v172 = (v167 + v242) << v245;
          v173 = a9;
          if (v241 >= (v167 + v242 + 1) << v245)
            v173 = v243 - ((v243 - 1) & a7);
          v174 = 1 << v245;
          if (v241 < (v167 + v242 + 1) << v245)
            v174 = (v243 - 1) & (a9 + a7);
          v248 = v167;
          if (v172 >= a7)
            v175 = v174;
          else
            v175 = v173;
          if (v172 >= a7)
            v176 = 0;
          else
            v176 = (v243 - 1) & a7;
          v252 = &v246[v176 + (v167 << v245)];
          do
          {
            v177 = v170 + v283;
            if (v285)
            {
              v178 = v281;
              if (v281)
              {
                v179 = 0;
                v178 = 0;
                v180 = 1;
                v181 = v270;
                v182 = v272;
                v183 = v161;
                v184 = v274;
                do
                {
                  --v183;
                  if (v182)
                    v178 |= (v180 & v171) << v179;
                  else
                    v183 = 0;
                  if (v182)
                    ++v179;
                  --v184;
                  if (v181)
                    v178 |= (v180 & v177) << v179;
                  else
                    v184 = 0;
                  if (v181)
                    ++v179;
                  v180 *= 2;
                  --v179;
                  v181 = v184 != 0;
                  v182 = v183 != 0;
                }
                while (v184 | v183);
              }
            }
            else
            {
              v178 = v281;
              if (v281)
              {
                v185 = 0;
                v178 = 0;
                v186 = 1;
                v188 = v270;
                v187 = v272;
                v189 = v274;
                v190 = v161;
                do
                {
                  --v189;
                  if (v188)
                    v178 |= (v186 & v177) << v185;
                  else
                    v189 = 0;
                  if (v188)
                    ++v185;
                  --v190;
                  if (v187)
                    v178 |= (v186 & v171) << v185;
                  else
                    v190 = 0;
                  if (v187)
                    ++v185;
                  v186 *= 2;
                  --v185;
                  v187 = v190 != 0;
                  v188 = v189 != 0;
                }
                while (v190 | v189);
              }
            }
            v191 = *(_DWORD *)(v16 + 4 * ((v178 + v287) | ((v178 + v287) >> 8 << 9)));
            if (v191 < 0)
            {
              v192 = v16 - *((_QWORD *)a13 + 3) + ((unint64_t)(v191 & 0x3FFFFFF) << 14);
              result = *a13;
              v193 = a13[2];
              if (result > v193)
              {
                result = get_level_offset_within_tail(result, v193, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                v165 = v268;
                v160 = v249;
                v159 = v250;
                v23 = v251;
                v17 = a11;
                v158 = a8;
                v157 = a10;
                v192 += result;
              }
              v194 = (v170 + v265) << v23;
              v195 = v258;
              if (a10 + a8 >= (v170 + v265 + 1) << v23)
              {
                v196 = v159;
              }
              else
              {
                v195 = v157;
                v196 = v262;
              }
              if (v194 >= v158)
                v197 = 0;
              else
                v197 = v260;
              if (v194 >= v158)
                v195 = v196;
              if (!v256)
              {
                v215 = 0;
                v199 = 0;
                v206 = 0;
                v222 = 0;
                if (!v175)
                  goto LABEL_210;
LABEL_282:
                if (v195)
                {
                  v229 = 0;
                  v230 = (unsigned __int16 *)((char *)v252 + (v197 + (v170 << v23)) * v17);
                  do
                  {
                    v231 = v175;
                    v232 = v230;
                    v233 = v215;
                    do
                    {
                      v234 = *v232++;
                      result = v234;
                      *(_WORD *)(v192 + 2 * (v233 + v222)) = v234;
                      v233 = (v233 - v199) & v199;
                      --v231;
                    }
                    while (v231);
                    v222 = (v222 - v206) & v206;
                    v230 = (unsigned __int16 *)((char *)v230 + v17);
                    ++v229;
                  }
                  while (v229 != v195);
                }
                goto LABEL_210;
              }
              v198 = 0;
              v199 = 0;
              v200 = 1;
              v201 = v276;
              v202 = v278;
              v203 = v165;
              v204 = v279;
              do
              {
                --v203;
                if (v202)
                  v199 |= (unint64_t)(v200 & v168) << v198++;
                else
                  v203 = 0;
                --v204;
                if (!v201)
                  v204 = 0;
                v200 *= 2;
                v198 = (__PAIR64__(v198, v201) - 1) >> 32;
                v201 = v204 != 0;
                v202 = v203 != 0;
              }
              while (v204 | v203);
              v205 = 0;
              v206 = 0;
              v207 = 1;
              v208 = v276;
              v209 = v278;
              v210 = v165;
              v211 = v279;
              do
              {
                --v210;
                v212 = v209;
                if (!v212)
                  v210 = 0;
                v213 = v205 + v212;
                --v211;
                if (v208)
                  v206 |= (unint64_t)(v207 & v169) << v213++;
                else
                  v211 = 0;
                v207 *= 2;
                v205 = v213 - 1;
                v208 = v211 != 0;
                v209 = v210 != 0;
              }
              while (v211 | v210);
              v214 = 0;
              v215 = 0;
              v216 = 1;
              v218 = v276;
              v217 = v278;
              v219 = v165;
              v220 = v279;
              do
              {
                --v219;
                if (v217)
                  v215 |= (unint64_t)(v216 & v176) << v214++;
                else
                  v219 = 0;
                --v220;
                if (!v218)
                  v220 = 0;
                v216 *= 2;
                v214 = (__PAIR64__(v214, v218) - 1) >> 32;
                v218 = v220 != 0;
                v217 = v219 != 0;
              }
              while (v220 | v219);
              v221 = 0;
              v222 = 0;
              v223 = 1;
              LOBYTE(result) = v276;
              v224 = v278;
              v225 = v165;
              v226 = v279;
              do
              {
                --v225;
                v227 = v224;
                if (!v227)
                  v225 = 0;
                v228 = v221 + v227;
                --v226;
                if ((result & 1) != 0)
                  v222 |= (unint64_t)(v223 & v197) << v228++;
                else
                  v226 = 0;
                v223 *= 2;
                v221 = v228 - 1;
                result = v226 != 0;
                v224 = v225 != 0;
              }
              while (v226 | v225);
              v165 = v268;
              if (v175)
                goto LABEL_282;
            }
LABEL_210:
            ++v170;
          }
          while (v160 > (unsigned __int16)v170);
          v167 = v248 + 1;
        }
        while (v244 > (unsigned __int16)(v248 + 1));
      }
    }
  }
  else
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = a5 >> v60;
    v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2)
      v63 = 0;
    v64 = v60 + v59;
    result = v60 + v59 + v63;
    if (a6 >> v59)
      v65 = 1;
    else
      v65 = 1 << v60 >= a5;
    if (v65)
    {
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      v66 = -v63;
    }
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && v62 == 0)
      LOBYTE(v66) = v64 - v67;
    else
      LOBYTE(v67) = v60;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v267 = 1 << v66;
    v76 = v69 - 1;
    v263 = v66;
    v264 = a10 + a8;
    v266 = a8 >> v66;
    v261 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 < v261)
    {
      result = a7 >> v67;
      v77 = (1 << v67) - 1;
      v284 = 1 << v67;
      v286 = a9 + a7;
      if (1 << v67 >= a5)
        v78 = a5;
      else
        v78 = 1 << v67;
      v79 = 1 << v66;
      if (v267 >= a6)
        v79 = a6;
      v80 = 32 - __clz(v78 - 1);
      if (v78 >= 2)
        v81 = v80;
      else
        v81 = 0;
      v82 = 32 - __clz(v79 - 1);
      if (v79 >= 2)
        v83 = v82;
      else
        v83 = 0;
      v275 = a7 >> v67;
      v282 = (v77 + a9 + a7) >> v67;
      if (result < v282)
      {
        v259 = (v75 + ~(-1 << v67)) >> v67;
        v84 = v77 & a7;
        v280 = v77 & v286;
        v255 = v76 & v264;
        v257 = v76 & a8;
        v85 = v266;
        do
        {
          v86 = v85 << v263;
          v269 = v85 + 1;
          v87 = v267;
          if (v264 < (v85 + 1) << v263)
            v87 = v255;
          v88 = v267 - v257;
          if (v264 < (v85 + 1) << v263)
            v88 = v19;
          v273 = v85 * v259;
          if (v86 >= a8)
            v89 = 0;
          else
            v89 = v257;
          if (v86 >= a8)
            v90 = v87;
          else
            v90 = v88;
          v271 = (char *)v13 + (v89 + ((v85 - v266) << v263) - v257) * a11;
          v91 = v275;
          v92 = a7;
          if (v83 | v81)
          {
            do
            {
              v94 = 0;
              v95 = 0;
              v96 = v91 << v67;
              v97 = v91 - v275;
              v98 = v91 + v273;
              v99 = ++v91 << v67;
              if (v96 >= v92)
                v100 = 0;
              else
                v100 = v84;
              v277 = v98 * v18[3] * *((unsigned __int8 *)v18 + 9);
              v101 = 1;
              v102 = v81 != 0;
              v103 = v83 != 0;
              v104 = v81;
              v105 = v83;
              do
              {
                --v104;
                if (v102)
                  v95 |= (unint64_t)(v101 & ~(-1 << v81)) << v94++;
                else
                  v104 = 0;
                --v105;
                if (!v103)
                  v105 = 0;
                v101 *= 2;
                v94 = (__PAIR64__(v94, v103) - 1) >> 32;
                v103 = v105 != 0;
                v102 = v104 != 0;
              }
              while (v105 | v104);
              v106 = 0;
              v107 = 0;
              if (v286 >= v99)
                v108 = 1 << v67;
              else
                v108 = v280;
              v109 = 1;
              v110 = v81 != 0;
              v111 = v83 != 0;
              v112 = v81;
              v113 = v83;
              do
              {
                v114 = v110;
                if (v114)
                  --v112;
                else
                  v112 = 0;
                v115 = v106 + v114;
                if (v111)
                  --v113;
                else
                  v113 = 0;
                if (v111)
                  v107 |= (unint64_t)(v109 & ~(-1 << v83)) << v115++;
                v109 *= 2;
                v106 = v115 - 1;
                v111 = v113 != 0;
                v110 = v112 != 0;
              }
              while (v113 | v112);
              v116 = 0;
              v117 = 0;
              if (v286 >= v99)
                v118 = v284 - v84;
              else
                v118 = a9;
              v119 = &v271[2 * (v100 + (v97 << v67) - v84)];
              v120 = 1;
              v121 = v81 != 0;
              v122 = v83 != 0;
              v123 = v81;
              v124 = v83;
              do
              {
                --v123;
                if (v121)
                {
                  v117 |= (unint64_t)(v120 & v100) << v116;
                  v125 = v116 + 1;
                }
                else
                {
                  v123 = 0;
                  v125 = v116;
                }
                if (v122)
                  --v124;
                else
                  v124 = 0;
                v120 *= 2;
                v116 = (__PAIR64__(v125, v122) - 1) >> 32;
                v122 = v124 != 0;
                v121 = v123 != 0;
              }
              while (v124 | v123);
              v126 = 0;
              v127 = 0;
              v128 = 1;
              v129 = v81 != 0;
              v130 = v83 != 0;
              LODWORD(result) = v81;
              v131 = v83;
              do
              {
                v132 = v129;
                if (v132)
                  result = (result - 1);
                else
                  result = 0;
                v133 = v126 + v132;
                v134 = ((unint64_t)(v128 & v89) << (v126 + v132)) | v127;
                if (v130)
                  --v131;
                else
                  v131 = 0;
                if (v130)
                {
                  v127 = v134;
                  ++v133;
                }
                v128 *= 2;
                v126 = v133 - 1;
                v130 = v131 != 0;
                v129 = (_DWORD)result != 0;
              }
              while (v131 | result);
              v92 = a7;
              if (v96 >= a7)
                v135 = v108;
              else
                v135 = v118;
              if (v90 && v135)
              {
                for (j = 0; j != v90; ++j)
                {
                  LODWORD(result) = v135;
                  v137 = (__int16 *)v119;
                  v138 = v117;
                  do
                  {
                    v139 = *v137++;
                    *(_WORD *)(v277 + v16 + 2 * (v138 + v127)) = v139;
                    v138 = (v138 - v95) & v95;
                    result = (result - 1);
                  }
                  while ((_DWORD)result);
                  v127 = (v127 - v107) & v107;
                  v119 += a11;
                }
              }
              v18 = a12;
            }
            while (v91 != v282);
          }
          else
          {
            v93 = v275;
            do
            {
              v140 = v93 << v67;
              v141 = v93 + 1;
              v142 = a9;
              if (v286 >= (v93 + 1) << v67)
                v142 = v284 - v84;
              v143 = 1 << v67;
              if (v286 < v141 << v67)
                v143 = v280;
              if (v140 >= a7)
                v142 = v143;
              if (v90 && v142)
              {
                v144 = 0;
                v145 = (v93 + v273) * v18[3] * *((unsigned __int8 *)v18 + 9);
                if (v140 >= a7)
                  v146 = 0;
                else
                  v146 = v84;
                v147 = (unsigned __int16 *)&v271[2 * (v146 + ((v93 - v275) << v67) - v84)];
                do
                {
                  v148 = v142;
                  v149 = v147;
                  do
                  {
                    v150 = *v149++;
                    result = v150;
                    *(_WORD *)(v16 + v145) = v150;
                    --v148;
                  }
                  while (v148);
                  v147 = (unsigned __int16 *)((char *)v147 + a11);
                  ++v144;
                }
                while (v144 != v90);
              }
              v93 = v141;
            }
            while (v141 != v282);
          }
          v85 = v269;
          v13 = a2;
          v19 = a10;
        }
        while (v269 != v261);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<true,4ul,1u,(TwiddleOrder)1>>(uint64_t result, int *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  int *v13;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  BOOL v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  BOOL v102;
  BOOL v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  BOOL v110;
  BOOL v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  char *v119;
  int v120;
  BOOL v121;
  BOOL v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  unint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  int v132;
  int v133;
  unint64_t v134;
  int v135;
  int j;
  int *v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  int v144;
  uint64_t v145;
  int v146;
  char *v147;
  unsigned int v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  BOOL v154;
  char v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  BOOL v181;
  BOOL v182;
  int v183;
  int v184;
  int v185;
  int v186;
  BOOL v187;
  BOOL v188;
  int v189;
  int v190;
  int v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  int v200;
  BOOL v201;
  BOOL v202;
  unsigned int v203;
  unsigned int v204;
  int v205;
  uint64_t v206;
  int v207;
  BOOL v208;
  BOOL v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  int v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  BOOL v217;
  BOOL v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  uint64_t v222;
  int v223;
  BOOL v224;
  unsigned int v225;
  unsigned int v226;
  int v227;
  int v228;
  int v229;
  unsigned int *v230;
  int v231;
  unsigned int *v232;
  uint64_t v233;
  unsigned int v234;
  int i;
  unsigned int v236;
  int *v237;
  uint64_t v238;
  int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  char v245;
  int *v246;
  int v248;
  unsigned int v249;
  int v250;
  char v251;
  int *v252;
  int v255;
  int v256;
  uint64_t v257;
  unsigned int v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  int v262;
  char v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  BOOL v270;
  char *v271;
  BOOL v272;
  int v273;
  int v274;
  unsigned int v275;
  BOOL v276;
  uint64_t v277;
  BOOL v278;
  unsigned int v279;
  int v280;
  int v281;
  unsigned int v282;
  int v283;
  int v284;
  int v285;
  unsigned int v286;
  int v287;
  char v288[16];
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned __int8 v296;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v16 = result;
  v17 = a11;
  v18 = a12;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2)
      v25 = v24;
    else
      v25 = 0;
    v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2)
      v27 = v26;
    else
      v27 = 0;
    if (v27 | v25)
    {
      v28 = 0;
      v29 = 0;
      v30 = v25 != 0;
      v31 = v27 != 0;
      v32 = v25 != 0;
      v33 = v27 != 0;
      v34 = 1;
      v35 = v25;
      v36 = v27;
      do
      {
        --v35;
        if (v32)
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        else
          v35 = 0;
        --v36;
        if (!v33)
          v36 = 0;
        v34 *= 2;
        v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        v33 = v36 != 0;
        v32 = v35 != 0;
      }
      while (v36 | v35);
      v37 = 0;
      v38 = 0;
      v39 = 1;
      v40 = v25 != 0;
      v41 = v27 != 0;
      v42 = v25;
      v43 = v27;
      do
      {
        --v42;
        v44 = v40;
        if (!v44)
          v42 = 0;
        v45 = v37 + v44;
        --v43;
        if (v41)
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        else
          v43 = 0;
        v39 *= 2;
        v37 = v45 - 1;
        v41 = v43 != 0;
        v40 = v42 != 0;
      }
      while (v43 | v42);
      v46 = 0;
      v47 = 0;
      v48 = v25 != 0;
      v49 = v27 != 0;
      v50 = 1;
      v51 = v25;
      v52 = v27;
      do
      {
        --v51;
        if (v48)
          v47 |= (unint64_t)(v50 & a7) << v46++;
        else
          v51 = 0;
        --v52;
        if (!v49)
          v52 = 0;
        v50 *= 2;
        v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        v49 = v52 != 0;
        v48 = v51 != 0;
      }
      while (v52 | v51);
      v53 = 0;
      v54 = 0;
      v55 = 1;
      do
      {
        --v25;
        v56 = v30;
        if (!v56)
          v25 = 0;
        v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          v58 = v57 + 1;
        }
        else
        {
          v27 = 0;
          v58 = v57;
        }
        v55 *= 2;
        v53 = v58 - 1;
        v31 = v27 != 0;
        v30 = v25 != 0;
        result = v27 | v25;
      }
      while ((_DWORD)result);
      v19 = a10;
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v29 = 0;
      v38 = 0;
      v54 = 0;
      if (!a9)
        return result;
    }
    if (v19)
    {
      for (i = 0; i != v19; ++i)
      {
        v236 = a9;
        v237 = v13;
        v238 = v47;
        do
        {
          v239 = *v237++;
          *(_DWORD *)(v16 + 4 * (v238 + v54)) = v239;
          v238 = (v238 - v29) & v29;
          --v236;
        }
        while (v236);
        v54 = (v54 - v38) & v38;
        v13 = (int *)((char *)v13 + a11);
      }
    }
    return result;
  }
  if (*((_BYTE *)a12 + 20))
  {
    result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v288);
    v20 = *((_BYTE *)a12 + 13);
    v21 = *((_BYTE *)a12 + 12);
    v246 = v13;
    if (1 << v20 >= a6 || a5 >> v21)
    {
      v151 = a6 >> v20;
      v152 = 1 << v21;
      v153 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
      if (a6 < 2)
        v153 = 0;
      v154 = v152 >= a5;
      if (v152 < a5)
        v155 = v21 + v20 + v153;
      else
        v155 = *((_BYTE *)a12 + 12);
      if (v154)
        LOBYTE(v156) = *((_BYTE *)a12 + 13);
      else
        v156 = -v153;
      if (!v151)
        v21 = v155;
      v245 = v21;
      if (v151)
        v23 = *((_BYTE *)a12 + 13);
      else
        v23 = v156;
    }
    else
    {
      v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
      if (a5 < 2)
        LOBYTE(v22) = 0;
      v245 = v22;
      v23 = v21 + v20 - v22;
    }
    v157 = a10;
    v158 = a8;
    v244 = v294;
    if (v294)
    {
      v159 = 1 << v23;
      v160 = v295;
      v161 = v292;
      v274 = v293;
      v270 = v293 != 0;
      v272 = v292 != 0;
      v243 = 1 << v245;
      if (1 << v245 >= a5)
        v162 = a5;
      else
        v162 = 1 << v245;
      if (v159 >= a6)
        v163 = a6;
      else
        v163 = 1 << v23;
      v164 = 32 - __clz(v162 - 1);
      if (v162 >= 2)
        v165 = v164;
      else
        v165 = 0;
      v166 = 32 - __clz(v163 - 1);
      if (v163 < 2)
        v166 = 0;
      v279 = v166;
      v276 = v166 != 0;
      v278 = v165 != 0;
      if (v295)
      {
        v167 = 0;
        v242 = a7 >> v245;
        v265 = a8 >> v23;
        v287 = v291;
        v281 = v293 | v292;
        v285 = v296;
        v241 = a9 + a7;
        v240 = v289;
        v283 = v290;
        v260 = (v159 - 1) & a8;
        v262 = (v159 - 1) & (a10 + a8);
        v258 = v159 - v260;
        v168 = ~(-1 << v165);
        v256 = v166 | v165;
        v169 = ~(-1 << v166);
        v268 = v165;
        v250 = 1 << v23;
        v251 = v23;
        v249 = v295;
        do
        {
          v170 = 0;
          v171 = v167 + v240;
          v172 = (v167 + v242) << v245;
          v173 = a9;
          if (v241 >= (v167 + v242 + 1) << v245)
            v173 = v243 - ((v243 - 1) & a7);
          v174 = 1 << v245;
          if (v241 < (v167 + v242 + 1) << v245)
            v174 = (v243 - 1) & (a9 + a7);
          v248 = v167;
          if (v172 >= a7)
            v175 = v174;
          else
            v175 = v173;
          if (v172 >= a7)
            v176 = 0;
          else
            v176 = (v243 - 1) & a7;
          v252 = &v246[v176 + (v167 << v245)];
          do
          {
            v177 = v170 + v283;
            if (v285)
            {
              v178 = v281;
              if (v281)
              {
                v179 = 0;
                v178 = 0;
                v180 = 1;
                v181 = v270;
                v182 = v272;
                v183 = v161;
                v184 = v274;
                do
                {
                  --v183;
                  if (v182)
                    v178 |= (v180 & v171) << v179;
                  else
                    v183 = 0;
                  if (v182)
                    ++v179;
                  --v184;
                  if (v181)
                    v178 |= (v180 & v177) << v179;
                  else
                    v184 = 0;
                  if (v181)
                    ++v179;
                  v180 *= 2;
                  --v179;
                  v181 = v184 != 0;
                  v182 = v183 != 0;
                }
                while (v184 | v183);
              }
            }
            else
            {
              v178 = v281;
              if (v281)
              {
                v185 = 0;
                v178 = 0;
                v186 = 1;
                v188 = v270;
                v187 = v272;
                v189 = v274;
                v190 = v161;
                do
                {
                  --v189;
                  if (v188)
                    v178 |= (v186 & v177) << v185;
                  else
                    v189 = 0;
                  if (v188)
                    ++v185;
                  --v190;
                  if (v187)
                    v178 |= (v186 & v171) << v185;
                  else
                    v190 = 0;
                  if (v187)
                    ++v185;
                  v186 *= 2;
                  --v185;
                  v187 = v190 != 0;
                  v188 = v189 != 0;
                }
                while (v190 | v189);
              }
            }
            v191 = *(_DWORD *)(v16 + 4 * ((v178 + v287) | ((v178 + v287) >> 8 << 9)));
            if (v191 < 0)
            {
              v192 = v16 - *((_QWORD *)a13 + 3) + ((unint64_t)(v191 & 0x3FFFFFF) << 14);
              result = *a13;
              v193 = a13[2];
              if (result > v193)
              {
                result = get_level_offset_within_tail(result, v193, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                v165 = v268;
                v160 = v249;
                v159 = v250;
                v23 = v251;
                v17 = a11;
                v158 = a8;
                v157 = a10;
                v192 += result;
              }
              v194 = (v170 + v265) << v23;
              v195 = v258;
              if (a10 + a8 >= (v170 + v265 + 1) << v23)
              {
                v196 = v159;
              }
              else
              {
                v195 = v157;
                v196 = v262;
              }
              if (v194 >= v158)
                v197 = 0;
              else
                v197 = v260;
              if (v194 >= v158)
                v195 = v196;
              if (!v256)
              {
                v215 = 0;
                v199 = 0;
                v206 = 0;
                v222 = 0;
                if (!v175)
                  goto LABEL_210;
LABEL_282:
                if (v195)
                {
                  v229 = 0;
                  v230 = (unsigned int *)((char *)v252 + (v197 + (v170 << v23)) * v17);
                  do
                  {
                    v231 = v175;
                    v232 = v230;
                    v233 = v215;
                    do
                    {
                      v234 = *v232++;
                      result = v234;
                      *(_DWORD *)(v192 + 4 * (v233 + v222)) = v234;
                      v233 = (v233 - v199) & v199;
                      --v231;
                    }
                    while (v231);
                    v222 = (v222 - v206) & v206;
                    v230 = (unsigned int *)((char *)v230 + v17);
                    ++v229;
                  }
                  while (v229 != v195);
                }
                goto LABEL_210;
              }
              v198 = 0;
              v199 = 0;
              v200 = 1;
              v201 = v276;
              v202 = v278;
              v203 = v165;
              v204 = v279;
              do
              {
                --v203;
                if (v202)
                  v199 |= (unint64_t)(v200 & v168) << v198++;
                else
                  v203 = 0;
                --v204;
                if (!v201)
                  v204 = 0;
                v200 *= 2;
                v198 = (__PAIR64__(v198, v201) - 1) >> 32;
                v201 = v204 != 0;
                v202 = v203 != 0;
              }
              while (v204 | v203);
              v205 = 0;
              v206 = 0;
              v207 = 1;
              v208 = v276;
              v209 = v278;
              v210 = v165;
              v211 = v279;
              do
              {
                --v210;
                v212 = v209;
                if (!v212)
                  v210 = 0;
                v213 = v205 + v212;
                --v211;
                if (v208)
                  v206 |= (unint64_t)(v207 & v169) << v213++;
                else
                  v211 = 0;
                v207 *= 2;
                v205 = v213 - 1;
                v208 = v211 != 0;
                v209 = v210 != 0;
              }
              while (v211 | v210);
              v214 = 0;
              v215 = 0;
              v216 = 1;
              v218 = v276;
              v217 = v278;
              v219 = v165;
              v220 = v279;
              do
              {
                --v219;
                if (v217)
                  v215 |= (unint64_t)(v216 & v176) << v214++;
                else
                  v219 = 0;
                --v220;
                if (!v218)
                  v220 = 0;
                v216 *= 2;
                v214 = (__PAIR64__(v214, v218) - 1) >> 32;
                v218 = v220 != 0;
                v217 = v219 != 0;
              }
              while (v220 | v219);
              v221 = 0;
              v222 = 0;
              v223 = 1;
              LOBYTE(result) = v276;
              v224 = v278;
              v225 = v165;
              v226 = v279;
              do
              {
                --v225;
                v227 = v224;
                if (!v227)
                  v225 = 0;
                v228 = v221 + v227;
                --v226;
                if ((result & 1) != 0)
                  v222 |= (unint64_t)(v223 & v197) << v228++;
                else
                  v226 = 0;
                v223 *= 2;
                v221 = v228 - 1;
                result = v226 != 0;
                v224 = v225 != 0;
              }
              while (v226 | v225);
              v165 = v268;
              if (v175)
                goto LABEL_282;
            }
LABEL_210:
            ++v170;
          }
          while (v160 > (unsigned __int16)v170);
          v167 = v248 + 1;
        }
        while (v244 > (unsigned __int16)(v248 + 1));
      }
    }
  }
  else
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = a5 >> v60;
    v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2)
      v63 = 0;
    v64 = v60 + v59;
    result = v60 + v59 + v63;
    if (a6 >> v59)
      v65 = 1;
    else
      v65 = 1 << v60 >= a5;
    if (v65)
    {
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      v66 = -v63;
    }
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && v62 == 0)
      LOBYTE(v66) = v64 - v67;
    else
      LOBYTE(v67) = v60;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v267 = 1 << v66;
    v76 = v69 - 1;
    v263 = v66;
    v264 = a10 + a8;
    v266 = a8 >> v66;
    v261 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 < v261)
    {
      result = a7 >> v67;
      v77 = (1 << v67) - 1;
      v284 = 1 << v67;
      v286 = a9 + a7;
      if (1 << v67 >= a5)
        v78 = a5;
      else
        v78 = 1 << v67;
      v79 = 1 << v66;
      if (v267 >= a6)
        v79 = a6;
      v80 = 32 - __clz(v78 - 1);
      if (v78 >= 2)
        v81 = v80;
      else
        v81 = 0;
      v82 = 32 - __clz(v79 - 1);
      if (v79 >= 2)
        v83 = v82;
      else
        v83 = 0;
      v275 = a7 >> v67;
      v282 = (v77 + a9 + a7) >> v67;
      if (result < v282)
      {
        v259 = (v75 + ~(-1 << v67)) >> v67;
        v84 = v77 & a7;
        v280 = v77 & v286;
        v255 = v76 & v264;
        v257 = v76 & a8;
        v85 = v266;
        do
        {
          v86 = v85 << v263;
          v269 = v85 + 1;
          v87 = v267;
          if (v264 < (v85 + 1) << v263)
            v87 = v255;
          v88 = v267 - v257;
          if (v264 < (v85 + 1) << v263)
            v88 = v19;
          v273 = v85 * v259;
          if (v86 >= a8)
            v89 = 0;
          else
            v89 = v257;
          if (v86 >= a8)
            v90 = v87;
          else
            v90 = v88;
          v271 = (char *)v13 + (v89 + ((v85 - v266) << v263) - v257) * a11;
          v91 = v275;
          v92 = a7;
          if (v83 | v81)
          {
            do
            {
              v94 = 0;
              v95 = 0;
              v96 = v91 << v67;
              v97 = v91 - v275;
              v98 = v91 + v273;
              v99 = ++v91 << v67;
              if (v96 >= v92)
                v100 = 0;
              else
                v100 = v84;
              v277 = v98 * v18[3] * *((unsigned __int8 *)v18 + 9);
              v101 = 1;
              v102 = v81 != 0;
              v103 = v83 != 0;
              v104 = v81;
              v105 = v83;
              do
              {
                --v104;
                if (v102)
                  v95 |= (unint64_t)(v101 & ~(-1 << v81)) << v94++;
                else
                  v104 = 0;
                --v105;
                if (!v103)
                  v105 = 0;
                v101 *= 2;
                v94 = (__PAIR64__(v94, v103) - 1) >> 32;
                v103 = v105 != 0;
                v102 = v104 != 0;
              }
              while (v105 | v104);
              v106 = 0;
              v107 = 0;
              if (v286 >= v99)
                v108 = 1 << v67;
              else
                v108 = v280;
              v109 = 1;
              v110 = v81 != 0;
              v111 = v83 != 0;
              v112 = v81;
              v113 = v83;
              do
              {
                v114 = v110;
                if (v114)
                  --v112;
                else
                  v112 = 0;
                v115 = v106 + v114;
                if (v111)
                  --v113;
                else
                  v113 = 0;
                if (v111)
                  v107 |= (unint64_t)(v109 & ~(-1 << v83)) << v115++;
                v109 *= 2;
                v106 = v115 - 1;
                v111 = v113 != 0;
                v110 = v112 != 0;
              }
              while (v113 | v112);
              v116 = 0;
              v117 = 0;
              if (v286 >= v99)
                v118 = v284 - v84;
              else
                v118 = a9;
              v119 = &v271[4 * (v100 + (v97 << v67) - v84)];
              v120 = 1;
              v121 = v81 != 0;
              v122 = v83 != 0;
              v123 = v81;
              v124 = v83;
              do
              {
                --v123;
                if (v121)
                {
                  v117 |= (unint64_t)(v120 & v100) << v116;
                  v125 = v116 + 1;
                }
                else
                {
                  v123 = 0;
                  v125 = v116;
                }
                if (v122)
                  --v124;
                else
                  v124 = 0;
                v120 *= 2;
                v116 = (__PAIR64__(v125, v122) - 1) >> 32;
                v122 = v124 != 0;
                v121 = v123 != 0;
              }
              while (v124 | v123);
              v126 = 0;
              v127 = 0;
              v128 = 1;
              v129 = v81 != 0;
              v130 = v83 != 0;
              LODWORD(result) = v81;
              v131 = v83;
              do
              {
                v132 = v129;
                if (v132)
                  result = (result - 1);
                else
                  result = 0;
                v133 = v126 + v132;
                v134 = ((unint64_t)(v128 & v89) << (v126 + v132)) | v127;
                if (v130)
                  --v131;
                else
                  v131 = 0;
                if (v130)
                {
                  v127 = v134;
                  ++v133;
                }
                v128 *= 2;
                v126 = v133 - 1;
                v130 = v131 != 0;
                v129 = (_DWORD)result != 0;
              }
              while (v131 | result);
              v92 = a7;
              if (v96 >= a7)
                v135 = v108;
              else
                v135 = v118;
              if (v90 && v135)
              {
                for (j = 0; j != v90; ++j)
                {
                  LODWORD(result) = v135;
                  v137 = (int *)v119;
                  v138 = v117;
                  do
                  {
                    v139 = *v137++;
                    *(_DWORD *)(v277 + v16 + 4 * (v138 + v127)) = v139;
                    v138 = (v138 - v95) & v95;
                    result = (result - 1);
                  }
                  while ((_DWORD)result);
                  v127 = (v127 - v107) & v107;
                  v119 += a11;
                }
              }
              v18 = a12;
            }
            while (v91 != v282);
          }
          else
          {
            v93 = v275;
            do
            {
              v140 = v93 << v67;
              v141 = v93 + 1;
              v142 = a9;
              if (v286 >= (v93 + 1) << v67)
                v142 = v284 - v84;
              v143 = 1 << v67;
              if (v286 < v141 << v67)
                v143 = v280;
              if (v140 >= a7)
                v142 = v143;
              if (v90 && v142)
              {
                v144 = 0;
                v145 = (v93 + v273) * v18[3] * *((unsigned __int8 *)v18 + 9);
                if (v140 >= a7)
                  v146 = 0;
                else
                  v146 = v84;
                v147 = &v271[4 * (v146 + ((v93 - v275) << v67) - v84)];
                do
                {
                  v148 = v142;
                  v149 = (unsigned int *)v147;
                  do
                  {
                    v150 = *v149++;
                    result = v150;
                    *(_DWORD *)(v16 + v145) = v150;
                    --v148;
                  }
                  while (v148);
                  v147 += a11;
                  ++v144;
                }
                while (v144 != v90);
              }
              v93 = v141;
            }
            while (v141 != v282);
          }
          v85 = v269;
          v13 = a2;
          v19 = a10;
        }
        while (v269 != v261);
      }
    }
  }
  return result;
}

uint64_t agxsTwiddleAddressZ<AGXSConverterPassThru<true,8ul,1u,(TwiddleOrder)1>>(uint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, uint64_t a11, unsigned __int16 *a12, unsigned int *a13)
{
  uint64_t *v13;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  char v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  BOOL v65;
  int v66;
  unsigned int v67;
  int v69;
  char v70;
  unsigned int v71;
  BOOL v72;
  BOOL v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  BOOL v102;
  BOOL v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  BOOL v110;
  BOOL v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  char *v119;
  int v120;
  BOOL v121;
  BOOL v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  unint64_t v127;
  int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  int v132;
  int v133;
  unint64_t v134;
  int v135;
  int j;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  int v144;
  uint64_t v145;
  int v146;
  uint64_t *v147;
  unsigned int v148;
  uint64_t *v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  BOOL v154;
  char v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  BOOL v181;
  BOOL v182;
  int v183;
  int v184;
  int v185;
  int v186;
  BOOL v187;
  BOOL v188;
  int v189;
  int v190;
  int v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  int v200;
  BOOL v201;
  BOOL v202;
  unsigned int v203;
  unsigned int v204;
  int v205;
  uint64_t v206;
  int v207;
  BOOL v208;
  BOOL v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  int v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  BOOL v217;
  BOOL v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  uint64_t v222;
  int v223;
  BOOL v224;
  unsigned int v225;
  unsigned int v226;
  int v227;
  int v228;
  int v229;
  uint64_t *v230;
  int v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  int i;
  unsigned int v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  char v245;
  uint64_t *v246;
  int v248;
  unsigned int v249;
  int v250;
  char v251;
  uint64_t *v252;
  int v255;
  int v256;
  uint64_t v257;
  unsigned int v258;
  unsigned int v259;
  int v260;
  unsigned int v261;
  int v262;
  char v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  BOOL v270;
  char *v271;
  BOOL v272;
  int v273;
  int v274;
  unsigned int v275;
  BOOL v276;
  uint64_t v277;
  BOOL v278;
  unsigned int v279;
  int v280;
  int v281;
  unsigned int v282;
  int v283;
  int v284;
  int v285;
  unsigned int v286;
  int v287;
  char v288[16];
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned __int8 v296;

  if (!result)
    return result;
  v13 = a2;
  if (!a2)
    return result;
  v16 = result;
  v17 = a11;
  v18 = a12;
  v19 = a10;
  if (!a12)
  {
    v24 = 32 - __clz(a5 - 1);
    if (a5 >= 2)
      v25 = v24;
    else
      v25 = 0;
    v26 = 32 - __clz(a6 - 1);
    if (a6 >= 2)
      v27 = v26;
    else
      v27 = 0;
    if (v27 | v25)
    {
      v28 = 0;
      v29 = 0;
      v30 = v25 != 0;
      v31 = v27 != 0;
      v32 = v25 != 0;
      v33 = v27 != 0;
      v34 = 1;
      v35 = v25;
      v36 = v27;
      do
      {
        --v35;
        if (v32)
          v29 |= (unint64_t)(v34 & ~(-1 << v25)) << v28++;
        else
          v35 = 0;
        --v36;
        if (!v33)
          v36 = 0;
        v34 *= 2;
        v28 = (__PAIR64__(v28, v33) - 1) >> 32;
        v33 = v36 != 0;
        v32 = v35 != 0;
      }
      while (v36 | v35);
      v37 = 0;
      v38 = 0;
      v39 = 1;
      v40 = v25 != 0;
      v41 = v27 != 0;
      v42 = v25;
      v43 = v27;
      do
      {
        --v42;
        v44 = v40;
        if (!v44)
          v42 = 0;
        v45 = v37 + v44;
        --v43;
        if (v41)
          v38 |= (unint64_t)(v39 & ~(-1 << v27)) << v45++;
        else
          v43 = 0;
        v39 *= 2;
        v37 = v45 - 1;
        v41 = v43 != 0;
        v40 = v42 != 0;
      }
      while (v43 | v42);
      v46 = 0;
      v47 = 0;
      v48 = v25 != 0;
      v49 = v27 != 0;
      v50 = 1;
      v51 = v25;
      v52 = v27;
      do
      {
        --v51;
        if (v48)
          v47 |= (unint64_t)(v50 & a7) << v46++;
        else
          v51 = 0;
        --v52;
        if (!v49)
          v52 = 0;
        v50 *= 2;
        v46 = (__PAIR64__(v46, v49) - 1) >> 32;
        v49 = v52 != 0;
        v48 = v51 != 0;
      }
      while (v52 | v51);
      v53 = 0;
      v54 = 0;
      v55 = 1;
      do
      {
        --v25;
        v56 = v30;
        if (!v56)
          v25 = 0;
        v57 = v53 + v56;
        --v27;
        if (v31)
        {
          v54 |= (unint64_t)(v55 & a8) << v57;
          v58 = v57 + 1;
        }
        else
        {
          v27 = 0;
          v58 = v57;
        }
        v55 *= 2;
        v53 = v58 - 1;
        v31 = v27 != 0;
        v30 = v25 != 0;
        result = v27 | v25;
      }
      while ((_DWORD)result);
      v19 = a10;
      if (!a9)
        return result;
    }
    else
    {
      v47 = 0;
      v29 = 0;
      v38 = 0;
      v54 = 0;
      if (!a9)
        return result;
    }
    if (v19)
    {
      for (i = 0; i != v19; ++i)
      {
        v236 = a9;
        v237 = v13;
        v238 = v47;
        do
        {
          v239 = *v237++;
          *(_QWORD *)(v16 + 8 * (v238 + v54)) = v239;
          v238 = (v238 - v29) & v29;
          --v236;
        }
        while (v236);
        v54 = (v54 - v38) & v38;
        v13 = (uint64_t *)((char *)v13 + a11);
      }
    }
    return result;
  }
  if (*((_BYTE *)a12 + 20))
  {
    result = agxCalcSparseInputs(a12[3], *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 8), a13[2], a13[3], a13[1], *a13, *((unsigned __int8 *)a12 + 16) - 1 < 2, a7, a8, a9, a10, (uint64_t)v288);
    v20 = *((_BYTE *)a12 + 13);
    v21 = *((_BYTE *)a12 + 12);
    v246 = v13;
    if (1 << v20 >= a6 || a5 >> v21)
    {
      v151 = a6 >> v20;
      v152 = 1 << v21;
      v153 = __clz(~(-1 << -(char)__clz(a6 - 1))) - 32;
      if (a6 < 2)
        v153 = 0;
      v154 = v152 >= a5;
      if (v152 < a5)
        v155 = v21 + v20 + v153;
      else
        v155 = *((_BYTE *)a12 + 12);
      if (v154)
        LOBYTE(v156) = *((_BYTE *)a12 + 13);
      else
        v156 = -v153;
      if (!v151)
        v21 = v155;
      v245 = v21;
      if (v151)
        v23 = *((_BYTE *)a12 + 13);
      else
        v23 = v156;
    }
    else
    {
      v22 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
      if (a5 < 2)
        LOBYTE(v22) = 0;
      v245 = v22;
      v23 = v21 + v20 - v22;
    }
    v157 = a10;
    v158 = a8;
    v244 = v294;
    if (v294)
    {
      v159 = 1 << v23;
      v160 = v295;
      v161 = v292;
      v274 = v293;
      v270 = v293 != 0;
      v272 = v292 != 0;
      v243 = 1 << v245;
      if (1 << v245 >= a5)
        v162 = a5;
      else
        v162 = 1 << v245;
      if (v159 >= a6)
        v163 = a6;
      else
        v163 = 1 << v23;
      v164 = 32 - __clz(v162 - 1);
      if (v162 >= 2)
        v165 = v164;
      else
        v165 = 0;
      v166 = 32 - __clz(v163 - 1);
      if (v163 < 2)
        v166 = 0;
      v279 = v166;
      v276 = v166 != 0;
      v278 = v165 != 0;
      if (v295)
      {
        v167 = 0;
        v242 = a7 >> v245;
        v265 = a8 >> v23;
        v287 = v291;
        v281 = v293 | v292;
        v285 = v296;
        v241 = a9 + a7;
        v240 = v289;
        v283 = v290;
        v260 = (v159 - 1) & a8;
        v262 = (v159 - 1) & (a10 + a8);
        v258 = v159 - v260;
        v168 = ~(-1 << v165);
        v256 = v166 | v165;
        v169 = ~(-1 << v166);
        v268 = v165;
        v250 = 1 << v23;
        v251 = v23;
        v249 = v295;
        do
        {
          v170 = 0;
          v171 = v167 + v240;
          v172 = (v167 + v242) << v245;
          v173 = a9;
          if (v241 >= (v167 + v242 + 1) << v245)
            v173 = v243 - ((v243 - 1) & a7);
          v174 = 1 << v245;
          if (v241 < (v167 + v242 + 1) << v245)
            v174 = (v243 - 1) & (a9 + a7);
          v248 = v167;
          if (v172 >= a7)
            v175 = v174;
          else
            v175 = v173;
          if (v172 >= a7)
            v176 = 0;
          else
            v176 = (v243 - 1) & a7;
          v252 = &v246[v176 + (v167 << v245)];
          do
          {
            v177 = v170 + v283;
            if (v285)
            {
              v178 = v281;
              if (v281)
              {
                v179 = 0;
                v178 = 0;
                v180 = 1;
                v181 = v270;
                v182 = v272;
                v183 = v161;
                v184 = v274;
                do
                {
                  --v183;
                  if (v182)
                    v178 |= (v180 & v171) << v179;
                  else
                    v183 = 0;
                  if (v182)
                    ++v179;
                  --v184;
                  if (v181)
                    v178 |= (v180 & v177) << v179;
                  else
                    v184 = 0;
                  if (v181)
                    ++v179;
                  v180 *= 2;
                  --v179;
                  v181 = v184 != 0;
                  v182 = v183 != 0;
                }
                while (v184 | v183);
              }
            }
            else
            {
              v178 = v281;
              if (v281)
              {
                v185 = 0;
                v178 = 0;
                v186 = 1;
                v188 = v270;
                v187 = v272;
                v189 = v274;
                v190 = v161;
                do
                {
                  --v189;
                  if (v188)
                    v178 |= (v186 & v177) << v185;
                  else
                    v189 = 0;
                  if (v188)
                    ++v185;
                  --v190;
                  if (v187)
                    v178 |= (v186 & v171) << v185;
                  else
                    v190 = 0;
                  if (v187)
                    ++v185;
                  v186 *= 2;
                  --v185;
                  v187 = v190 != 0;
                  v188 = v189 != 0;
                }
                while (v190 | v189);
              }
            }
            v191 = *(_DWORD *)(v16 + 4 * ((v178 + v287) | ((v178 + v287) >> 8 << 9)));
            if (v191 < 0)
            {
              v192 = v16 - *((_QWORD *)a13 + 3) + ((unint64_t)(v191 & 0x3FFFFFF) << 14);
              result = *a13;
              v193 = a13[2];
              if (result > v193)
              {
                result = get_level_offset_within_tail(result, v193, *a12, a12[1], *((unsigned __int8 *)a12 + 18), *((unsigned __int8 *)a12 + 19), *((unsigned __int8 *)a12 + 14), *((unsigned __int8 *)a12 + 16) - 1 < 2);
                v165 = v268;
                v160 = v249;
                v159 = v250;
                v23 = v251;
                v17 = a11;
                v158 = a8;
                v157 = a10;
                v192 += result;
              }
              v194 = (v170 + v265) << v23;
              v195 = v258;
              if (a10 + a8 >= (v170 + v265 + 1) << v23)
              {
                v196 = v159;
              }
              else
              {
                v195 = v157;
                v196 = v262;
              }
              if (v194 >= v158)
                v197 = 0;
              else
                v197 = v260;
              if (v194 >= v158)
                v195 = v196;
              if (!v256)
              {
                v215 = 0;
                v199 = 0;
                v206 = 0;
                v222 = 0;
                if (!v175)
                  goto LABEL_210;
LABEL_282:
                if (v195)
                {
                  v229 = 0;
                  v230 = (uint64_t *)((char *)v252 + (v197 + (v170 << v23)) * v17);
                  do
                  {
                    v231 = v175;
                    v232 = v230;
                    v233 = v215;
                    do
                    {
                      v234 = *v232++;
                      result = v234;
                      *(_QWORD *)(v192 + 8 * (v233 + v222)) = v234;
                      v233 = (v233 - v199) & v199;
                      --v231;
                    }
                    while (v231);
                    v222 = (v222 - v206) & v206;
                    v230 = (uint64_t *)((char *)v230 + v17);
                    ++v229;
                  }
                  while (v229 != v195);
                }
                goto LABEL_210;
              }
              v198 = 0;
              v199 = 0;
              v200 = 1;
              v201 = v276;
              v202 = v278;
              v203 = v165;
              v204 = v279;
              do
              {
                --v203;
                if (v202)
                  v199 |= (unint64_t)(v200 & v168) << v198++;
                else
                  v203 = 0;
                --v204;
                if (!v201)
                  v204 = 0;
                v200 *= 2;
                v198 = (__PAIR64__(v198, v201) - 1) >> 32;
                v201 = v204 != 0;
                v202 = v203 != 0;
              }
              while (v204 | v203);
              v205 = 0;
              v206 = 0;
              v207 = 1;
              v208 = v276;
              v209 = v278;
              v210 = v165;
              v211 = v279;
              do
              {
                --v210;
                v212 = v209;
                if (!v212)
                  v210 = 0;
                v213 = v205 + v212;
                --v211;
                if (v208)
                  v206 |= (unint64_t)(v207 & v169) << v213++;
                else
                  v211 = 0;
                v207 *= 2;
                v205 = v213 - 1;
                v208 = v211 != 0;
                v209 = v210 != 0;
              }
              while (v211 | v210);
              v214 = 0;
              v215 = 0;
              v216 = 1;
              v218 = v276;
              v217 = v278;
              v219 = v165;
              v220 = v279;
              do
              {
                --v219;
                if (v217)
                  v215 |= (unint64_t)(v216 & v176) << v214++;
                else
                  v219 = 0;
                --v220;
                if (!v218)
                  v220 = 0;
                v216 *= 2;
                v214 = (__PAIR64__(v214, v218) - 1) >> 32;
                v218 = v220 != 0;
                v217 = v219 != 0;
              }
              while (v220 | v219);
              v221 = 0;
              v222 = 0;
              v223 = 1;
              LOBYTE(result) = v276;
              v224 = v278;
              v225 = v165;
              v226 = v279;
              do
              {
                --v225;
                v227 = v224;
                if (!v227)
                  v225 = 0;
                v228 = v221 + v227;
                --v226;
                if ((result & 1) != 0)
                  v222 |= (unint64_t)(v223 & v197) << v228++;
                else
                  v226 = 0;
                v223 *= 2;
                v221 = v228 - 1;
                result = v226 != 0;
                v224 = v225 != 0;
              }
              while (v226 | v225);
              v165 = v268;
              if (v175)
                goto LABEL_282;
            }
LABEL_210:
            ++v170;
          }
          while (v160 > (unsigned __int16)v170);
          v167 = v248 + 1;
        }
        while (v244 > (unsigned __int16)(v248 + 1));
      }
    }
  }
  else
  {
    v59 = *((unsigned __int8 *)a12 + 13);
    v60 = *((unsigned __int8 *)a12 + 12);
    v61 = 1 << v59;
    v62 = a5 >> v60;
    v63 = __clz(~(-1 << -__clz(a6 - 1))) - 32;
    if (a6 < 2)
      v63 = 0;
    v64 = v60 + v59;
    result = v60 + v59 + v63;
    if (a6 >> v59)
      v65 = 1;
    else
      v65 = 1 << v60 >= a5;
    if (v65)
    {
      LOBYTE(v66) = *((_BYTE *)a12 + 13);
    }
    else
    {
      LOBYTE(v60) = v60 + v59 + v63;
      v66 = -v63;
    }
    v67 = 32 - __clz(~(-1 << -(char)__clz(a5 - 1)));
    if (a5 < 2)
      LOBYTE(v67) = 0;
    if (v61 < a6 && v62 == 0)
      LOBYTE(v66) = v64 - v67;
    else
      LOBYTE(v67) = v60;
    v69 = 1 << v66;
    v70 = *((_BYTE *)a12 + 15);
    v71 = 1 << v70;
    if (v70)
      v72 = v71 > a3;
    else
      v72 = 1;
    v73 = v72 || v71 > a4;
    v74 = (~(-1 << v70) + a3) & (-1 << v70);
    if (v73)
      v75 = a3;
    else
      v75 = v74;
    v267 = 1 << v66;
    v76 = v69 - 1;
    v263 = v66;
    v264 = a10 + a8;
    v266 = a8 >> v66;
    v261 = (v69 - 1 + a10 + a8) >> v66;
    if (a8 >> v66 < v261)
    {
      result = a7 >> v67;
      v77 = (1 << v67) - 1;
      v284 = 1 << v67;
      v286 = a9 + a7;
      if (1 << v67 >= a5)
        v78 = a5;
      else
        v78 = 1 << v67;
      v79 = 1 << v66;
      if (v267 >= a6)
        v79 = a6;
      v80 = 32 - __clz(v78 - 1);
      if (v78 >= 2)
        v81 = v80;
      else
        v81 = 0;
      v82 = 32 - __clz(v79 - 1);
      if (v79 >= 2)
        v83 = v82;
      else
        v83 = 0;
      v275 = a7 >> v67;
      v282 = (v77 + a9 + a7) >> v67;
      if (result < v282)
      {
        v259 = (v75 + ~(-1 << v67)) >> v67;
        v84 = v77 & a7;
        v280 = v77 & v286;
        v255 = v76 & v264;
        v257 = v76 & a8;
        v85 = v266;
        do
        {
          v86 = v85 << v263;
          v269 = v85 + 1;
          v87 = v267;
          if (v264 < (v85 + 1) << v263)
            v87 = v255;
          v88 = v267 - v257;
          if (v264 < (v85 + 1) << v263)
            v88 = v19;
          v273 = v85 * v259;
          if (v86 >= a8)
            v89 = 0;
          else
            v89 = v257;
          if (v86 >= a8)
            v90 = v87;
          else
            v90 = v88;
          v271 = (char *)v13 + (v89 + ((v85 - v266) << v263) - v257) * a11;
          v91 = v275;
          v92 = a7;
          if (v83 | v81)
          {
            do
            {
              v94 = 0;
              v95 = 0;
              v96 = v91 << v67;
              v97 = v91 - v275;
              v98 = v91 + v273;
              v99 = ++v91 << v67;
              if (v96 >= v92)
                v100 = 0;
              else
                v100 = v84;
              v277 = v98 * v18[3] * *((unsigned __int8 *)v18 + 9);
              v101 = 1;
              v102 = v81 != 0;
              v103 = v83 != 0;
              v104 = v81;
              v105 = v83;
              do
              {
                --v104;
                if (v102)
                  v95 |= (unint64_t)(v101 & ~(-1 << v81)) << v94++;
                else
                  v104 = 0;
                --v105;
                if (!v103)
                  v105 = 0;
                v101 *= 2;
                v94 = (__PAIR64__(v94, v103) - 1) >> 32;
                v103 = v105 != 0;
                v102 = v104 != 0;
              }
              while (v105 | v104);
              v106 = 0;
              v107 = 0;
              if (v286 >= v99)
                v108 = 1 << v67;
              else
                v108 = v280;
              v109 = 1;
              v110 = v81 != 0;
              v111 = v83 != 0;
              v112 = v81;
              v113 = v83;
              do
              {
                v114 = v110;
                if (v114)
                  --v112;
                else
                  v112 = 0;
                v115 = v106 + v114;
                if (v111)
                  --v113;
                else
                  v113 = 0;
                if (v111)
                  v107 |= (unint64_t)(v109 & ~(-1 << v83)) << v115++;
                v109 *= 2;
                v106 = v115 - 1;
                v111 = v113 != 0;
                v110 = v112 != 0;
              }
              while (v113 | v112);
              v116 = 0;
              v117 = 0;
              if (v286 >= v99)
                v118 = v284 - v84;
              else
                v118 = a9;
              v119 = &v271[8 * (v100 + (v97 << v67) - v84)];
              v120 = 1;
              v121 = v81 != 0;
              v122 = v83 != 0;
              v123 = v81;
              v124 = v83;
              do
              {
                --v123;
                if (v121)
                {
                  v117 |= (unint64_t)(v120 & v100) << v116;
                  v125 = v116 + 1;
                }
                else
                {
                  v123 = 0;
                  v125 = v116;
                }
                if (v122)
                  --v124;
                else
                  v124 = 0;
                v120 *= 2;
                v116 = (__PAIR64__(v125, v122) - 1) >> 32;
                v122 = v124 != 0;
                v121 = v123 != 0;
              }
              while (v124 | v123);
              v126 = 0;
              v127 = 0;
              v128 = 1;
              v129 = v81 != 0;
              v130 = v83 != 0;
              LODWORD(result) = v81;
              v131 = v83;
              do
              {
                v132 = v129;
                if (v132)
                  result = (result - 1);
                else
                  result = 0;
                v133 = v126 + v132;
                v134 = ((unint64_t)(v128 & v89) << (v126 + v132)) | v127;
                if (v130)
                  --v131;
                else
                  v131 = 0;
                if (v130)
                {
                  v127 = v134;
                  ++v133;
                }
                v128 *= 2;
                v126 = v133 - 1;
                v130 = v131 != 0;
                v129 = (_DWORD)result != 0;
              }
              while (v131 | result);
              v92 = a7;
              if (v96 >= a7)
                v135 = v108;
              else
                v135 = v118;
              if (v90 && v135)
              {
                for (j = 0; j != v90; ++j)
                {
                  LODWORD(result) = v135;
                  v137 = (uint64_t *)v119;
                  v138 = v117;
                  do
                  {
                    v139 = *v137++;
                    *(_QWORD *)(v277 + v16 + 8 * (v138 + v127)) = v139;
                    v138 = (v138 - v95) & v95;
                    result = (result - 1);
                  }
                  while ((_DWORD)result);
                  v127 = (v127 - v107) & v107;
                  v119 += a11;
                }
              }
              v18 = a12;
            }
            while (v91 != v282);
          }
          else
          {
            v93 = v275;
            do
            {
              v140 = v93 << v67;
              v141 = v93 + 1;
              v142 = a9;
              if (v286 >= (v93 + 1) << v67)
                v142 = v284 - v84;
              v143 = 1 << v67;
              if (v286 < v141 << v67)
                v143 = v280;
              if (v140 >= a7)
                v142 = v143;
              if (v90 && v142)
              {
                v144 = 0;
                v145 = (v93 + v273) * v18[3] * *((unsigned __int8 *)v18 + 9);
                if (v140 >= a7)
                  v146 = 0;
                else
                  v146 = v84;
                v147 = (uint64_t *)&v271[8 * (v146 + ((v93 - v275) << v67) - v84)];
                do
                {
                  v148 = v142;
                  v149 = v147;
                  do
                  {
                    v150 = *v149++;
                    result = v150;
                    *(_QWORD *)(v16 + v145) = v150;
                    --v148;
                  }
                  while (v148);
                  v147 = (uint64_t *)((char *)v147 + a11);
                  ++v144;
                }
                while (v144 != v90);
              }
              v93 = v141;
            }
            while (v141 != v282);
          }
          v85 = v269;
          v13 = a2;
          v19 = a10;
        }
        while (v269 != v261);
      }
    }
  }
  return result;
}

os_unfair_lock_s *AGX::PooledAllocator<8u>::~PooledAllocator(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t os_unfair_lock_opaque;
  size_t v4;
  void **v5;
  void *v6;
  _QWORD __dst[9];

  __dst[8] = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 3;
  os_unfair_lock_lock(a1 + 3);
  os_unfair_lock_opaque = a1[2]._os_unfair_lock_opaque;
  if ((_DWORD)os_unfair_lock_opaque)
  {
    if (os_unfair_lock_opaque <= 7)
      v4 = 64 - 8 * os_unfair_lock_opaque;
    else
      v4 = 0;
    v5 = (void **)__dst;
    bzero(&__dst[os_unfair_lock_opaque], v4);
    memcpy(__dst, &a1[4], 8 * os_unfair_lock_opaque);
    a1[2]._os_unfair_lock_opaque = 0;
    os_unfair_lock_unlock(v2);
    do
    {
      v6 = *v5++;
      free(v6);
      --os_unfair_lock_opaque;
    }
    while (os_unfair_lock_opaque);
  }
  else
  {
    a1[2]._os_unfair_lock_opaque = 0;
    os_unfair_lock_unlock(v2);
  }
  return a1;
}

void *AGX::PooledAllocator<8u>::allocate(uint64_t a1, unint64_t a2)
{
  os_unfair_lock_s *v3;
  int v4;
  unsigned int v5;
  void *v6;

  if (*(_QWORD *)a1 < a2)
    return 0;
  v3 = (os_unfair_lock_s *)(a1 + 12);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 12));
  v4 = *(_DWORD *)(a1 + 8);
  if (v4)
  {
    v5 = v4 - 1;
    *(_DWORD *)(a1 + 8) = v5;
    v6 = *(void **)(a1 + 8 * v5 + 16);
    os_unfair_lock_unlock(v3);
    if (v6)
    {
      bzero(v6, *(_QWORD *)a1);
      return v6;
    }
  }
  else
  {
    os_unfair_lock_unlock(v3);
  }
  return malloc_type_calloc(*(_QWORD *)a1, 1uLL, 0xC8454162uLL);
}

void AGX::PooledAllocator<8u>::shrink(os_unfair_lock_s *a1, float a2)
{
  os_unfair_lock_s *v4;
  uint64_t os_unfair_lock_opaque;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  void **v17;
  void *v18;
  _OWORD v19[4];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 3;
  os_unfair_lock_lock(a1 + 3);
  os_unfair_lock_opaque = a1[2]._os_unfair_lock_opaque;
  if (a2 >= 0.0)
    v6 = (float)((float)os_unfair_lock_opaque * a2);
  else
    v6 = os_unfair_lock_opaque;
  memset(v19, 0, sizeof(v19));
  if ((_DWORD)v6)
    memcpy(v19, &a1[4], 8 * v6);
  if (os_unfair_lock_opaque > v6)
  {
    v7 = os_unfair_lock_opaque - v6;
    v8 = (unint64_t)(os_unfair_lock_opaque - v6) >= 0xA && -8 * (unint64_t)v6 > 0x1F;
    v9 = v6;
    if (!v8)
      goto LABEL_16;
    v10 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    v11 = 2 * v6;
    v12 = a1;
    v13 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v14 = *(_OWORD *)&v12[v11 + 4]._os_unfair_lock_opaque;
      *(_OWORD *)&v12[8]._os_unfair_lock_opaque = *(_OWORD *)&v12[v11 + 8]._os_unfair_lock_opaque;
      v12 += 8;
      *(_OWORD *)&v12[-4]._os_unfair_lock_opaque = v14;
      v13 -= 4;
    }
    while (v13);
    if (v7 != v10)
    {
      v9 = v10 + v6;
LABEL_16:
      v15 = os_unfair_lock_opaque - v9;
      v16 = &a1[2 * v9 + 4];
      do
      {
        *(_QWORD *)&v16[-2 * v6]._os_unfair_lock_opaque = *(_QWORD *)&v16->_os_unfair_lock_opaque;
        v16 += 2;
        --v15;
      }
      while (v15);
    }
  }
  a1[2]._os_unfair_lock_opaque = os_unfair_lock_opaque - v6;
  os_unfair_lock_unlock(v4);
  if ((_DWORD)v6)
  {
    v17 = (void **)v19;
    do
    {
      v18 = *v17++;
      free(v18);
      --v6;
    }
    while (v6);
  }
}

os_unfair_lock_s *AGX::PooledAllocator<16u>::~PooledAllocator(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v2;
  uint64_t os_unfair_lock_opaque;
  size_t v4;
  void **v5;
  void *v6;
  _QWORD __dst[17];

  __dst[16] = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 3;
  os_unfair_lock_lock(a1 + 3);
  os_unfair_lock_opaque = a1[2]._os_unfair_lock_opaque;
  if ((_DWORD)os_unfair_lock_opaque)
  {
    if (os_unfair_lock_opaque <= 0xF)
      v4 = 128 - 8 * os_unfair_lock_opaque;
    else
      v4 = 0;
    v5 = (void **)__dst;
    bzero(&__dst[os_unfair_lock_opaque], v4);
    memcpy(__dst, &a1[4], 8 * os_unfair_lock_opaque);
    a1[2]._os_unfair_lock_opaque = 0;
    os_unfair_lock_unlock(v2);
    do
    {
      v6 = *v5++;
      free(v6);
      --os_unfair_lock_opaque;
    }
    while (os_unfair_lock_opaque);
  }
  else
  {
    a1[2]._os_unfair_lock_opaque = 0;
    os_unfair_lock_unlock(v2);
  }
  return a1;
}

void AGX::PooledAllocator<16u>::shrink(os_unfair_lock_s *a1, float a2)
{
  os_unfair_lock_s *v4;
  uint64_t os_unfair_lock_opaque;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  void **v17;
  void *v18;
  _OWORD v19[8];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 3;
  os_unfair_lock_lock(a1 + 3);
  os_unfair_lock_opaque = a1[2]._os_unfair_lock_opaque;
  if (a2 >= 0.0)
    v6 = (float)((float)os_unfair_lock_opaque * a2);
  else
    v6 = os_unfair_lock_opaque;
  memset(v19, 0, sizeof(v19));
  if ((_DWORD)v6)
    memcpy(v19, &a1[4], 8 * v6);
  if (os_unfair_lock_opaque > v6)
  {
    v7 = os_unfair_lock_opaque - v6;
    v8 = (unint64_t)(os_unfair_lock_opaque - v6) >= 0xA && -8 * (unint64_t)v6 > 0x1F;
    v9 = v6;
    if (!v8)
      goto LABEL_16;
    v10 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    v11 = 2 * v6;
    v12 = a1;
    v13 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v14 = *(_OWORD *)&v12[v11 + 4]._os_unfair_lock_opaque;
      *(_OWORD *)&v12[8]._os_unfair_lock_opaque = *(_OWORD *)&v12[v11 + 8]._os_unfair_lock_opaque;
      v12 += 8;
      *(_OWORD *)&v12[-4]._os_unfair_lock_opaque = v14;
      v13 -= 4;
    }
    while (v13);
    if (v7 != v10)
    {
      v9 = v10 + v6;
LABEL_16:
      v15 = os_unfair_lock_opaque - v9;
      v16 = &a1[2 * v9 + 4];
      do
      {
        *(_QWORD *)&v16[-2 * v6]._os_unfair_lock_opaque = *(_QWORD *)&v16->_os_unfair_lock_opaque;
        v16 += 2;
        --v15;
      }
      while (v15);
    }
  }
  a1[2]._os_unfair_lock_opaque = os_unfair_lock_opaque - v6;
  os_unfair_lock_unlock(v4);
  if ((_DWORD)v6)
  {
    v17 = (void **)v19;
    do
    {
      v18 = *v17++;
      free(v18);
      --v6;
    }
    while (v6);
  }
}

BOOL AGX::CounterSamplingContextGen1::setCounterSampleBuffer(AGX::CounterSamplingContextGen1 *this, AGXMTLCounterSampleBuffer *a2)
{
  IOGPUMetalBuffer *v4;
  _BOOL8 result;
  NSObject *v6;
  const char *v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = -[AGXMTLCounterSampleBuffer buffer](a2, "buffer");
    if (v4)
    {
      *(_QWORD *)this = v4;
      return 1;
    }
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: %s:%d:%s: *** Error, invalid counter sample storage\n", "agxa_mtl_counters.mm", 299, "setCounterSampleBuffer");
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v9 = "agxa_mtl_counters.mm";
      v10 = 1024;
      v11 = 299;
      v12 = 2080;
      v13 = "setCounterSampleBuffer";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** Error, invalid counter sample storage\n", buf, 0x1Cu);
    }
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO);
    if (result)
    {
      *(_DWORD *)buf = 136315650;
      v9 = "agxa_mtl_counters.mm";
      v10 = 1024;
      v11 = 299;
      v12 = 2080;
      v13 = "setCounterSampleBuffer";
      v6 = MEMORY[0x24BDACB70];
      v7 = "AGX: AGX: %s:%d:%s: *** Error, invalid counter sample storage\n";
      goto LABEL_12;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: %s:%d:%s: *** Error, counter sample buffer is not of type AGXMTLCounterSampleBuffer\n", "agxa_mtl_counters.mm", 292, "setCounterSampleBuffer");
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v9 = "agxa_mtl_counters.mm";
      v10 = 1024;
      v11 = 292;
      v12 = 2080;
      v13 = "setCounterSampleBuffer";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** Error, counter sample buffer is not of type AGXMTLCounterSampleBuffer\n", buf, 0x1Cu);
    }
    result = os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO);
    if (result)
    {
      *(_DWORD *)buf = 136315650;
      v9 = "agxa_mtl_counters.mm";
      v10 = 1024;
      v11 = 292;
      v12 = 2080;
      v13 = "setCounterSampleBuffer";
      v6 = MEMORY[0x24BDACB70];
      v7 = "AGX: AGX: %s:%d:%s: *** Error, counter sample buffer is not of type AGXMTLCounterSampleBuffer\n";
LABEL_12:
      _os_log_impl(&dword_232C19000, v6, OS_LOG_TYPE_INFO, v7, buf, 0x1Cu);
      return 0;
    }
  }
  return result;
}

uint64_t AGX::CounterSamplingContextGen1::validateSampleIndex(void *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v4;
  uint64_t result;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  unsigned int v13;
  __int16 v14;
  unsigned int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  if (*a2 == -1)
    return 0;
  v4 = objc_msgSend(a1, "sampleCount");
  if (v2 < v4)
    return 1;
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: %s:%d:%s: *** Invalid sample index: %u > %u\n", "agxa_mtl_counters.mm", 379, "validateSampleIndex", v2, v4);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136316162;
    v7 = "agxa_mtl_counters.mm";
    v8 = 1024;
    v9 = 379;
    v10 = 2080;
    v11 = "validateSampleIndex";
    v12 = 1024;
    v13 = v2;
    v14 = 1024;
    v15 = v4;
    _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** Invalid sample index: %u > %u\n", buf, 0x28u);
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136316162;
    v7 = "agxa_mtl_counters.mm";
    v8 = 1024;
    v9 = 379;
    v10 = 2080;
    v11 = "validateSampleIndex";
    v12 = 1024;
    v13 = v2;
    v14 = 1024;
    v15 = v4;
    _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: AGX: %s:%d:%s: *** Invalid sample index: %u > %u\n", buf, 0x28u);
  }
  result = 0;
  *a2 = -1;
  return result;
}

AGX::ComputeCounterSamplingContextGen1 *AGX::ComputeCounterSamplingContextGen1::ComputeCounterSamplingContextGen1(AGX::ComputeCounterSamplingContextGen1 *this, MTLComputePassDescriptor *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  MTLComputePassSampleBufferAttachmentDescriptorArray *v5;
  MTLComputePassSampleBufferAttachmentDescriptorArray *v6;
  void *v7;
  void *v8;
  AGXMTLCounterSampleBuffer *v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int v13;
  void *v14;
  void *v15;
  AGXMTLCounterSampleBuffer *v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  int v20;
  void *v21;
  void *v22;
  AGXMTLCounterSampleBuffer *v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  int v27;
  void *v28;
  void *v29;
  AGXMTLCounterSampleBuffer *v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  int v34;

  *(_QWORD *)this = 0;
  v3 = (unsigned int *)((char *)this + 12);
  *((_QWORD *)this + 1) = -1;
  v4 = (unsigned int *)((char *)this + 8);
  v5 = -[MTLComputePassDescriptor sampleBufferAttachments](a2, "sampleBufferAttachments");
  if (v5)
  {
    v6 = v5;
    v7 = (void *)-[MTLComputePassSampleBufferAttachmentDescriptorArray _descriptorAtIndex:](v5, "_descriptorAtIndex:", 0);
    if (v7)
    {
      v8 = v7;
      v9 = (AGXMTLCounterSampleBuffer *)objc_msgSend(v7, "sampleBuffer");
      v10 = objc_msgSend(v8, "startOfEncoderSampleIndex");
      v11 = objc_msgSend(v8, "endOfEncoderSampleIndex");
      if (v9)
      {
        *v4 = v10;
        *v3 = v11;
        v12 = AGX::CounterSamplingContextGen1::validateSampleIndex(v9, v4);
        v13 = AGX::CounterSamplingContextGen1::validateSampleIndex(v9, v3);
        if ((v12 & 1) != 0 || v13)
          AGX::CounterSamplingContextGen1::setCounterSampleBuffer(this, v9);
      }
    }
    v14 = (void *)-[MTLComputePassSampleBufferAttachmentDescriptorArray _descriptorAtIndex:](v6, "_descriptorAtIndex:", 1);
    if (v14)
    {
      v15 = v14;
      v16 = (AGXMTLCounterSampleBuffer *)objc_msgSend(v14, "sampleBuffer");
      v17 = objc_msgSend(v15, "startOfEncoderSampleIndex");
      v18 = objc_msgSend(v15, "endOfEncoderSampleIndex");
      if (v16)
      {
        *v4 = v17;
        *v3 = v18;
        v19 = AGX::CounterSamplingContextGen1::validateSampleIndex(v16, v4);
        v20 = AGX::CounterSamplingContextGen1::validateSampleIndex(v16, v3);
        if ((v19 & 1) != 0 || v20)
          AGX::CounterSamplingContextGen1::setCounterSampleBuffer(this, v16);
      }
    }
    v21 = (void *)-[MTLComputePassSampleBufferAttachmentDescriptorArray _descriptorAtIndex:](v6, "_descriptorAtIndex:", 2);
    if (v21)
    {
      v22 = v21;
      v23 = (AGXMTLCounterSampleBuffer *)objc_msgSend(v21, "sampleBuffer");
      v24 = objc_msgSend(v22, "startOfEncoderSampleIndex");
      v25 = objc_msgSend(v22, "endOfEncoderSampleIndex");
      if (v23)
      {
        *v4 = v24;
        *v3 = v25;
        v26 = AGX::CounterSamplingContextGen1::validateSampleIndex(v23, v4);
        v27 = AGX::CounterSamplingContextGen1::validateSampleIndex(v23, v3);
        if ((v26 & 1) != 0 || v27)
          AGX::CounterSamplingContextGen1::setCounterSampleBuffer(this, v23);
      }
    }
    v28 = (void *)-[MTLComputePassSampleBufferAttachmentDescriptorArray _descriptorAtIndex:](v6, "_descriptorAtIndex:", 3);
    if (v28)
    {
      v29 = v28;
      v30 = (AGXMTLCounterSampleBuffer *)objc_msgSend(v28, "sampleBuffer");
      v31 = objc_msgSend(v29, "startOfEncoderSampleIndex");
      v32 = objc_msgSend(v29, "endOfEncoderSampleIndex");
      if (v30)
      {
        *v4 = v31;
        *v3 = v32;
        v33 = AGX::CounterSamplingContextGen1::validateSampleIndex(v30, v4);
        v34 = AGX::CounterSamplingContextGen1::validateSampleIndex(v30, v3);
        if ((v33 & 1) != 0 || v34)
          AGX::CounterSamplingContextGen1::setCounterSampleBuffer(this, v30);
      }
    }
  }
  return this;
}

AGX::BlitCounterSamplingContextGen1 *AGX::BlitCounterSamplingContextGen1::BlitCounterSamplingContextGen1(AGX::BlitCounterSamplingContextGen1 *this, MTLBlitPassDescriptor *a2, MTLResourceStatePassDescriptor *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  MTLBlitPassSampleBufferAttachmentDescriptorArray *v7;
  MTLBlitPassSampleBufferAttachmentDescriptorArray *v8;
  void *v9;
  void *v10;
  AGXMTLCounterSampleBuffer *v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  int v15;
  void *v16;
  void *v17;
  AGXMTLCounterSampleBuffer *v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  int v22;
  void *v23;
  void *v24;
  AGXMTLCounterSampleBuffer *v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  int v29;
  void *v30;
  void *v31;
  AGXMTLCounterSampleBuffer *v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  int v36;
  MTLResourceStatePassSampleBufferAttachmentDescriptorArray *v37;
  MTLResourceStatePassSampleBufferAttachmentDescriptorArray *v38;
  void *v39;
  void *v40;
  AGXMTLCounterSampleBuffer *v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  int v45;
  void *v46;
  void *v47;
  AGXMTLCounterSampleBuffer *v48;
  unsigned int v49;
  unsigned int v50;
  char v51;
  int v52;
  void *v53;
  void *v54;
  AGXMTLCounterSampleBuffer *v55;
  unsigned int v56;
  unsigned int v57;
  char v58;
  int v59;
  void *v60;
  void *v61;
  AGXMTLCounterSampleBuffer *v62;
  unsigned int v63;
  unsigned int v64;
  char v65;
  int v66;

  *(_QWORD *)this = 0;
  v5 = (unsigned int *)((char *)this + 12);
  *((_QWORD *)this + 1) = -1;
  v6 = (unsigned int *)((char *)this + 8);
  if (a2)
  {
    v7 = -[MTLBlitPassDescriptor sampleBufferAttachments](a2, "sampleBufferAttachments");
    if (v7)
    {
      v8 = v7;
      v9 = (void *)-[MTLBlitPassSampleBufferAttachmentDescriptorArray _descriptorAtIndex:](v7, "_descriptorAtIndex:", 0);
      if (v9)
      {
        v10 = v9;
        v11 = (AGXMTLCounterSampleBuffer *)objc_msgSend(v9, "sampleBuffer");
        v12 = objc_msgSend(v10, "startOfEncoderSampleIndex");
        v13 = objc_msgSend(v10, "endOfEncoderSampleIndex");
        if (v11)
        {
          *v6 = v12;
          *v5 = v13;
          v14 = AGX::CounterSamplingContextGen1::validateSampleIndex(v11, v6);
          v15 = AGX::CounterSamplingContextGen1::validateSampleIndex(v11, v5);
          if ((v14 & 1) != 0 || v15)
            AGX::CounterSamplingContextGen1::setCounterSampleBuffer(this, v11);
        }
      }
      v16 = (void *)-[MTLBlitPassSampleBufferAttachmentDescriptorArray _descriptorAtIndex:](v8, "_descriptorAtIndex:", 1);
      if (v16)
      {
        v17 = v16;
        v18 = (AGXMTLCounterSampleBuffer *)objc_msgSend(v16, "sampleBuffer");
        v19 = objc_msgSend(v17, "startOfEncoderSampleIndex");
        v20 = objc_msgSend(v17, "endOfEncoderSampleIndex");
        if (v18)
        {
          *v6 = v19;
          *v5 = v20;
          v21 = AGX::CounterSamplingContextGen1::validateSampleIndex(v18, v6);
          v22 = AGX::CounterSamplingContextGen1::validateSampleIndex(v18, v5);
          if ((v21 & 1) != 0 || v22)
            AGX::CounterSamplingContextGen1::setCounterSampleBuffer(this, v18);
        }
      }
      v23 = (void *)-[MTLBlitPassSampleBufferAttachmentDescriptorArray _descriptorAtIndex:](v8, "_descriptorAtIndex:", 2);
      if (v23)
      {
        v24 = v23;
        v25 = (AGXMTLCounterSampleBuffer *)objc_msgSend(v23, "sampleBuffer");
        v26 = objc_msgSend(v24, "startOfEncoderSampleIndex");
        v27 = objc_msgSend(v24, "endOfEncoderSampleIndex");
        if (v25)
        {
          *v6 = v26;
          *v5 = v27;
          v28 = AGX::CounterSamplingContextGen1::validateSampleIndex(v25, v6);
          v29 = AGX::CounterSamplingContextGen1::validateSampleIndex(v25, v5);
          if ((v28 & 1) != 0 || v29)
            AGX::CounterSamplingContextGen1::setCounterSampleBuffer(this, v25);
        }
      }
      v30 = (void *)-[MTLBlitPassSampleBufferAttachmentDescriptorArray _descriptorAtIndex:](v8, "_descriptorAtIndex:", 3);
      if (v30)
      {
        v31 = v30;
        v32 = (AGXMTLCounterSampleBuffer *)objc_msgSend(v30, "sampleBuffer");
        v33 = objc_msgSend(v31, "startOfEncoderSampleIndex");
        v34 = objc_msgSend(v31, "endOfEncoderSampleIndex");
        if (v32)
        {
          *v6 = v33;
          *v5 = v34;
          v35 = AGX::CounterSamplingContextGen1::validateSampleIndex(v32, v6);
          v36 = AGX::CounterSamplingContextGen1::validateSampleIndex(v32, v5);
          if ((v35 & 1) != 0 || v36)
            AGX::CounterSamplingContextGen1::setCounterSampleBuffer(this, v32);
        }
      }
    }
  }
  if (a3)
  {
    v37 = -[MTLResourceStatePassDescriptor sampleBufferAttachments](a3, "sampleBufferAttachments");
    if (v37)
    {
      v38 = v37;
      v39 = (void *)-[MTLResourceStatePassSampleBufferAttachmentDescriptorArray _descriptorAtIndex:](v37, "_descriptorAtIndex:", 0);
      if (v39)
      {
        v40 = v39;
        v41 = (AGXMTLCounterSampleBuffer *)objc_msgSend(v39, "sampleBuffer");
        v42 = objc_msgSend(v40, "startOfEncoderSampleIndex");
        v43 = objc_msgSend(v40, "endOfEncoderSampleIndex");
        if (v41)
        {
          *v6 = v42;
          *v5 = v43;
          v44 = AGX::CounterSamplingContextGen1::validateSampleIndex(v41, v6);
          v45 = AGX::CounterSamplingContextGen1::validateSampleIndex(v41, v5);
          if ((v44 & 1) != 0 || v45)
            AGX::CounterSamplingContextGen1::setCounterSampleBuffer(this, v41);
        }
      }
      v46 = (void *)-[MTLResourceStatePassSampleBufferAttachmentDescriptorArray _descriptorAtIndex:](v38, "_descriptorAtIndex:", 1);
      if (v46)
      {
        v47 = v46;
        v48 = (AGXMTLCounterSampleBuffer *)objc_msgSend(v46, "sampleBuffer");
        v49 = objc_msgSend(v47, "startOfEncoderSampleIndex");
        v50 = objc_msgSend(v47, "endOfEncoderSampleIndex");
        if (v48)
        {
          *v6 = v49;
          *v5 = v50;
          v51 = AGX::CounterSamplingContextGen1::validateSampleIndex(v48, v6);
          v52 = AGX::CounterSamplingContextGen1::validateSampleIndex(v48, v5);
          if ((v51 & 1) != 0 || v52)
            AGX::CounterSamplingContextGen1::setCounterSampleBuffer(this, v48);
        }
      }
      v53 = (void *)-[MTLResourceStatePassSampleBufferAttachmentDescriptorArray _descriptorAtIndex:](v38, "_descriptorAtIndex:", 2);
      if (v53)
      {
        v54 = v53;
        v55 = (AGXMTLCounterSampleBuffer *)objc_msgSend(v53, "sampleBuffer");
        v56 = objc_msgSend(v54, "startOfEncoderSampleIndex");
        v57 = objc_msgSend(v54, "endOfEncoderSampleIndex");
        if (v55)
        {
          *v6 = v56;
          *v5 = v57;
          v58 = AGX::CounterSamplingContextGen1::validateSampleIndex(v55, v6);
          v59 = AGX::CounterSamplingContextGen1::validateSampleIndex(v55, v5);
          if ((v58 & 1) != 0 || v59)
            AGX::CounterSamplingContextGen1::setCounterSampleBuffer(this, v55);
        }
      }
      v60 = (void *)-[MTLResourceStatePassSampleBufferAttachmentDescriptorArray _descriptorAtIndex:](v38, "_descriptorAtIndex:", 3);
      if (v60)
      {
        v61 = v60;
        v62 = (AGXMTLCounterSampleBuffer *)objc_msgSend(v60, "sampleBuffer");
        v63 = objc_msgSend(v61, "startOfEncoderSampleIndex");
        v64 = objc_msgSend(v61, "endOfEncoderSampleIndex");
        if (v62)
        {
          *v6 = v63;
          *v5 = v64;
          v65 = AGX::CounterSamplingContextGen1::validateSampleIndex(v62, v6);
          v66 = AGX::CounterSamplingContextGen1::validateSampleIndex(v62, v5);
          if ((v65 & 1) != 0 || v66)
            AGX::CounterSamplingContextGen1::setCounterSampleBuffer(this, v62);
        }
      }
    }
  }
  return this;
}

void AGX::Impl::VertexProgramKey::addToDigest(AGX::Impl::VertexProgramKey *this, CC_SHA256state_st *c)
{
  unint64_t v4;
  int *v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;
  char **data;
  char *v42;

  v4 = atomic_load(&AGX::defaultVertexDescriptor(void)::once);
  if (v4 != -1)
  {
    v42 = &v40;
    data = &v42;
    std::__call_once(&AGX::defaultVertexDescriptor(void)::once, &data, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultVertexDescriptor(void)::$_0 &&>>);
  }
  v5 = (int *)AGX::defaultVertexDescriptor(void)::_desc;
  v6 = *((_QWORD *)this + 7);
  v7 = (v6 >> 10) & 3;
  v8 = *(int *)AGX::defaultVertexDescriptor(void)::_desc;
  v9 = *(unsigned __int16 *)(AGX::defaultVertexDescriptor(void)::_desc - v8);
  if (v9 < 0x15)
  {
    if (!v7)
    {
LABEL_7:
      v11 = -v8;
      goto LABEL_10;
    }
  }
  else
  {
    v10 = *(unsigned __int16 *)(AGX::defaultVertexDescriptor(void)::_desc - v8 + 20);
    if (*(_WORD *)(AGX::defaultVertexDescriptor(void)::_desc - v8 + 20))
      LODWORD(v10) = *(unsigned __int8 *)(AGX::defaultVertexDescriptor(void)::_desc + v10);
    if (v7 == (_DWORD)v10)
      goto LABEL_7;
  }
  v42 = (char *)((v6 >> 10) & 3);
  LOWORD(data) = 20;
  CC_SHA256_Update(c, &data, 2u);
  CC_SHA256_Update(c, &v42, 8u);
  v6 = *((_QWORD *)this + 7);
  v12 = *v5;
  v11 = -v12;
  v9 = *(unsigned __int16 *)((char *)v5 - v12);
LABEL_10:
  if (v9 < 0x19)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    v13 = *(unsigned __int16 *)((char *)v5 + v11 + 24);
    if (*(_WORD *)((char *)v5 + v11 + 24))
      LODWORD(v13) = *((unsigned __int8 *)v5 + v13);
  }
  if (((v6 >> 8) & 3) != (_DWORD)v13)
  {
    v42 = (char *)((v6 >> 8) & 3);
    LOWORD(data) = 24;
    CC_SHA256_Update(c, &data, 2u);
    CC_SHA256_Update(c, &v42, 8u);
  }
  if (*((_QWORD *)this + 5))
  {
    LOWORD(v42) = 30;
    CC_SHA256_Update(c, &v42, 2u);
    CC_SHA256_Update(c, (char *)this + 40, 8u);
  }
  v14 = *v5;
  v15 = -v14;
  v16 = (char *)v5 - v14;
  v17 = *(unsigned __int16 *)((char *)v5 - v14);
  if (v17 >= 0x21 && (v18 = *((unsigned __int16 *)v16 + 16)) != 0)
  {
    v19 = *((_DWORD *)this + 22) & 1;
    if ((v19 == 0) != (*((_BYTE *)v5 + v18) != 0))
    {
      v20 = *((_QWORD *)this + 7);
      v21 = (v20 >> 12) & 3;
      goto LABEL_26;
    }
  }
  else
  {
    if ((*((_DWORD *)this + 22) & 1) == 0)
      goto LABEL_25;
    v19 = 1;
  }
  LODWORD(v42) = v19;
  LOWORD(data) = 32;
  CC_SHA256_Update(c, &data, 2u);
  CC_SHA256_Update(c, &v42, 4u);
  v22 = *v5;
  v15 = -v22;
  v17 = *(unsigned __int16 *)((char *)v5 - v22);
LABEL_25:
  v20 = *((_QWORD *)this + 7);
  v21 = (v20 >> 12) & 3;
  if (v17 < 0x1D)
  {
    if (!v21)
      goto LABEL_30;
    goto LABEL_29;
  }
LABEL_26:
  v23 = *(unsigned __int16 *)((char *)v5 + v15 + 28);
  if (*(_WORD *)((char *)v5 + v15 + 28))
    LODWORD(v23) = *((unsigned __int8 *)v5 + v23);
  if (v21 != (_DWORD)v23)
  {
LABEL_29:
    v42 = (char *)((v20 >> 12) & 3);
    LOWORD(data) = 28;
    CC_SHA256_Update(c, &data, 2u);
    CC_SHA256_Update(c, &v42, 8u);
    v20 = *((_QWORD *)this + 7);
    v24 = *v5;
    v15 = -v24;
    v17 = *(unsigned __int16 *)((char *)v5 - v24);
  }
LABEL_30:
  v25 = (v20 >> 14) & 0xF;
  if (v17 >= 0x1B && *(_WORD *)((char *)v5 + v15 + 26))
  {
    if (v25 == *(_QWORD *)((char *)v5 + *(unsigned __int16 *)((char *)v5 + v15 + 26)))
      goto LABEL_36;
    goto LABEL_35;
  }
  if (v25 != 1)
  {
LABEL_35:
    v42 = (char *)((v20 >> 14) & 0xF);
    LOWORD(data) = 26;
    CC_SHA256_Update(c, &data, 2u);
    CC_SHA256_Update(c, &v42, 8u);
    v20 = *((_QWORD *)this + 7);
    v26 = *v5;
    v15 = -v26;
    v17 = *(unsigned __int16 *)((char *)v5 - v26);
  }
LABEL_36:
  if (v17 >= 0x2B && *(_WORD *)((char *)v5 + v15 + 42))
  {
    if (((v20 & 0x80000) == 0) != (*((_BYTE *)v5 + *(unsigned __int16 *)((char *)v5 + v15 + 42)) != 0))
    {
      v27 = (v20 >> 20) & 1;
      goto LABEL_43;
    }
  }
  else if ((v20 & 0x80000) == 0)
  {
    goto LABEL_42;
  }
  v42 = (char *)((v20 >> 19) & 1);
  LOWORD(data) = 42;
  CC_SHA256_Update(c, &data, 2u);
  CC_SHA256_Update(c, &v42, 8u);
  v20 = *((_QWORD *)this + 7);
  v28 = *v5;
  v15 = -v28;
  v17 = *(unsigned __int16 *)((char *)v5 - v28);
LABEL_42:
  v27 = (v20 >> 20) & 1;
  if (v17 < 9)
    goto LABEL_52;
LABEL_43:
  v29 = (char *)v5 + v15;
  if (*(_WORD *)((char *)v5 + v15 + 8))
  {
    LODWORD(v30) = 0;
    if (v17 < 0xB || !*((_BYTE *)v5 + *(unsigned __int16 *)((char *)v5 + v15 + 8)))
      goto LABEL_53;
    goto LABEL_50;
  }
  if (v17 < 0xB)
  {
LABEL_52:
    LODWORD(v30) = 0;
    goto LABEL_53;
  }
LABEL_50:
  v30 = *((unsigned __int16 *)v29 + 5);
  if (*((_WORD *)v29 + 5))
    LODWORD(v30) = *((unsigned __int8 *)v5 + v30) == 1;
LABEL_53:
  if (v27 != (_DWORD)v30)
  {
    v42 = (char *)((v20 >> 20) & 1);
    LOWORD(data) = 8;
    CC_SHA256_Update(c, &data, 2u);
    CC_SHA256_Update(c, &v42, 8u);
    v20 = *((_QWORD *)this + 7);
    v31 = *v5;
    v15 = -v31;
    v17 = *(unsigned __int16 *)((char *)v5 - v31);
  }
  v32 = (v20 >> 22) & 1;
  if (v17 < 0x11)
  {
    if (!v32)
      goto LABEL_60;
    goto LABEL_59;
  }
  v33 = *(unsigned __int16 *)((char *)v5 + v15 + 16);
  if (*(_WORD *)((char *)v5 + v15 + 16))
    LODWORD(v33) = *((unsigned __int8 *)v5 + v33);
  if (v32 != (_DWORD)v33)
  {
LABEL_59:
    v42 = (char *)((v20 >> 22) & 1);
    LOWORD(data) = 16;
    CC_SHA256_Update(c, &data, 2u);
    CC_SHA256_Update(c, &v42, 8u);
    v20 = *((_QWORD *)this + 7);
    v34 = *v5;
    v15 = -v34;
    v17 = *(unsigned __int16 *)((char *)v5 - v34);
  }
LABEL_60:
  if (v17 < 0x23 || (v35 = *(unsigned __int16 *)((char *)v5 + v15 + 34)) == 0)
  {
    if ((v20 & 0x2000000) == 0)
      goto LABEL_66;
    goto LABEL_65;
  }
  if (((v20 & 0x2000000) == 0) == (*((_BYTE *)v5 + v35) != 0))
  {
LABEL_65:
    v42 = (char *)((v20 >> 25) & 1);
    LOWORD(data) = 34;
    CC_SHA256_Update(c, &data, 2u);
    CC_SHA256_Update(c, &v42, 8u);
  }
LABEL_66:
  v36 = (_QWORD *)((char *)this + 144);
  if (*((char *)this + 167) < 0)
  {
    v37 = *((_QWORD *)this + 19);
    if (!v37)
      goto LABEL_74;
    v36 = (_QWORD *)*v36;
    goto LABEL_73;
  }
  LODWORD(v37) = *((unsigned __int8 *)this + 167);
  if (*((_BYTE *)this + 167))
LABEL_73:
    CC_SHA256_Update(c, v36, v37);
LABEL_74:
  v38 = (_QWORD *)((char *)this + 168);
  if (*((char *)this + 191) < 0)
  {
    v39 = *((_QWORD *)this + 22);
    if (!v39)
      return;
    v38 = (_QWORD *)*v38;
    goto LABEL_79;
  }
  LODWORD(v39) = *((unsigned __int8 *)this + 191);
  if (*((_BYTE *)this + 191))
LABEL_79:
    CC_SHA256_Update(c, v38, v39);
}

char *std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultVertexDescriptor(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  const char *v85;
  char *result;

  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_BYTE *)(v0 + 8) = 0;
  *(_OWORD *)(v0 + 16) = xmmword_232D73DA0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 80) = 256;
  *(_QWORD *)(v0 + 88) = 0;
  AGX::defaultVertexDescriptor(void)::_fbb = v0;
  *(_BYTE *)(v0 + 70) = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v0, 26, 1, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v0, 12, 16, 16);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v0, 4, 1, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)v0, 40);
  if (*(_BYTE *)(v0 + 80))
  {
    if (!*(_QWORD *)(v0 + 72))
      *(_QWORD *)(v0 + 72) = 1;
    v1 = *(_QWORD *)(v0 + 48);
    if (v1 == *(_QWORD *)(v0 + 56))
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
      v1 = *(_QWORD *)(v0 + 48);
    }
    *(_QWORD *)(v0 + 48) = v1 - 1;
    *(_BYTE *)(v1 - 1) = 0;
    v3 = *(_QWORD *)(v0 + 48);
    v2 = *(uint64_t **)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 32) - v3 + *(_QWORD *)(v0 + 40);
    if ((unint64_t)(v3 - (_QWORD)v2) <= 7)
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
      v2 = *(uint64_t **)(v0 + 56);
    }
    *v2 = v4 | 0x2A00000000;
    v5 = *(_QWORD *)(v0 + 56) + 8;
    *(_QWORD *)(v0 + 56) = v5;
    ++*(_DWORD *)(v0 + 64);
    v6 = *(unsigned __int16 *)(v0 + 68);
    if (v6 <= 0x2A)
      LOWORD(v6) = 42;
    *(_WORD *)(v0 + 68) = v6;
    if (*(_BYTE *)(v0 + 80))
    {
      if (!*(_QWORD *)(v0 + 72))
        *(_QWORD *)(v0 + 72) = 1;
      v7 = *(_QWORD *)(v0 + 48);
      if (v7 == v5)
      {
        flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
        v7 = *(_QWORD *)(v0 + 48);
      }
      *(_QWORD *)(v0 + 48) = v7 - 1;
      *(_BYTE *)(v7 - 1) = -1;
      v9 = *(_QWORD *)(v0 + 48);
      v8 = *(uint64_t **)(v0 + 56);
      v10 = *(_QWORD *)(v0 + 32) - v9 + *(_QWORD *)(v0 + 40);
      if ((unint64_t)(v9 - (_QWORD)v8) <= 7)
      {
        flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
        v8 = *(uint64_t **)(v0 + 56);
      }
      *v8 = v10 | 0x2600000000;
      v11 = *(_QWORD *)(v0 + 56) + 8;
      *(_QWORD *)(v0 + 56) = v11;
      ++*(_DWORD *)(v0 + 64);
      v12 = *(unsigned __int16 *)(v0 + 68);
      if (v12 <= 0x26)
        LOWORD(v12) = 38;
      *(_WORD *)(v0 + 68) = v12;
      if (*(_BYTE *)(v0 + 80))
      {
        if (!*(_QWORD *)(v0 + 72))
          *(_QWORD *)(v0 + 72) = 1;
        v13 = *(_QWORD *)(v0 + 48);
        if (v13 == v11)
        {
          flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
          v13 = *(_QWORD *)(v0 + 48);
        }
        *(_QWORD *)(v0 + 48) = v13 - 1;
        *(_BYTE *)(v13 - 1) = 0;
        v15 = *(_QWORD *)(v0 + 48);
        v14 = *(uint64_t **)(v0 + 56);
        v16 = *(_QWORD *)(v0 + 32) - v15 + *(_QWORD *)(v0 + 40);
        if ((unint64_t)(v15 - (_QWORD)v14) <= 7)
        {
          flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
          v14 = *(uint64_t **)(v0 + 56);
        }
        *v14 = v16 | 0x2400000000;
        v17 = *(_QWORD *)(v0 + 56) + 8;
        *(_QWORD *)(v0 + 56) = v17;
        ++*(_DWORD *)(v0 + 64);
        v18 = *(unsigned __int16 *)(v0 + 68);
        if (v18 <= 0x24)
          LOWORD(v18) = 36;
        *(_WORD *)(v0 + 68) = v18;
        if (*(_BYTE *)(v0 + 80))
        {
          if (!*(_QWORD *)(v0 + 72))
            *(_QWORD *)(v0 + 72) = 1;
          v19 = *(_QWORD *)(v0 + 48);
          if (v19 == v17)
          {
            flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
            v19 = *(_QWORD *)(v0 + 48);
          }
          *(_QWORD *)(v0 + 48) = v19 - 1;
          *(_BYTE *)(v19 - 1) = 0;
          v21 = *(_QWORD *)(v0 + 48);
          v20 = *(uint64_t **)(v0 + 56);
          v22 = *(_QWORD *)(v0 + 32) - v21 + *(_QWORD *)(v0 + 40);
          if ((unint64_t)(v21 - (_QWORD)v20) <= 7)
          {
            flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
            v20 = *(uint64_t **)(v0 + 56);
          }
          *v20 = v22 | 0x2200000000;
          v23 = *(_QWORD *)(v0 + 56) + 8;
          *(_QWORD *)(v0 + 56) = v23;
          ++*(_DWORD *)(v0 + 64);
          v24 = *(unsigned __int16 *)(v0 + 68);
          if (v24 <= 0x22)
            LOWORD(v24) = 34;
          *(_WORD *)(v0 + 68) = v24;
          if (*(_BYTE *)(v0 + 80))
          {
            if (!*(_QWORD *)(v0 + 72))
              *(_QWORD *)(v0 + 72) = 1;
            v25 = *(_QWORD *)(v0 + 48);
            if (v25 == v23)
            {
              flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
              v25 = *(_QWORD *)(v0 + 48);
            }
            *(_QWORD *)(v0 + 48) = v25 - 1;
            *(_BYTE *)(v25 - 1) = 0;
            v27 = *(_QWORD *)(v0 + 48);
            v26 = *(uint64_t **)(v0 + 56);
            v28 = *(_QWORD *)(v0 + 32) - v27 + *(_QWORD *)(v0 + 40);
            if ((unint64_t)(v27 - (_QWORD)v26) <= 7)
            {
              flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
              v26 = *(uint64_t **)(v0 + 56);
            }
            *v26 = v28 | 0x2000000000;
            v29 = *(_QWORD *)(v0 + 56) + 8;
            *(_QWORD *)(v0 + 56) = v29;
            ++*(_DWORD *)(v0 + 64);
            v30 = *(unsigned __int16 *)(v0 + 68);
            if (v30 <= 0x20)
              LOWORD(v30) = 32;
            *(_WORD *)(v0 + 68) = v30;
            if (*(_BYTE *)(v0 + 80))
            {
              if (!*(_QWORD *)(v0 + 72))
                *(_QWORD *)(v0 + 72) = 1;
              v31 = *(_QWORD *)(v0 + 48);
              if (v31 == v29)
              {
                flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                v31 = *(_QWORD *)(v0 + 48);
              }
              *(_QWORD *)(v0 + 48) = v31 - 1;
              *(_BYTE *)(v31 - 1) = 0;
              v33 = *(_QWORD *)(v0 + 48);
              v32 = *(uint64_t **)(v0 + 56);
              v34 = *(_QWORD *)(v0 + 32) - v33 + *(_QWORD *)(v0 + 40);
              if ((unint64_t)(v33 - (_QWORD)v32) <= 7)
              {
                flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                v32 = *(uint64_t **)(v0 + 56);
              }
              *v32 = v34 | 0x1C00000000;
              v35 = *(_QWORD *)(v0 + 56) + 8;
              *(_QWORD *)(v0 + 56) = v35;
              ++*(_DWORD *)(v0 + 64);
              v36 = *(unsigned __int16 *)(v0 + 68);
              if (v36 <= 0x1C)
                LOWORD(v36) = 28;
              *(_WORD *)(v0 + 68) = v36;
              if (*(_BYTE *)(v0 + 80))
              {
                if (!*(_QWORD *)(v0 + 72))
                  *(_QWORD *)(v0 + 72) = 1;
                v37 = *(_QWORD *)(v0 + 48);
                if (v37 == v35)
                {
                  flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                  v37 = *(_QWORD *)(v0 + 48);
                }
                *(_QWORD *)(v0 + 48) = v37 - 1;
                *(_BYTE *)(v37 - 1) = 0;
                v39 = *(_QWORD *)(v0 + 48);
                v38 = *(uint64_t **)(v0 + 56);
                v40 = *(_QWORD *)(v0 + 32) - v39 + *(_QWORD *)(v0 + 40);
                if ((unint64_t)(v39 - (_QWORD)v38) <= 7)
                {
                  flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                  v38 = *(uint64_t **)(v0 + 56);
                }
                *v38 = v40 | 0x1800000000;
                v41 = *(_QWORD *)(v0 + 56) + 8;
                *(_QWORD *)(v0 + 56) = v41;
                ++*(_DWORD *)(v0 + 64);
                v42 = *(unsigned __int16 *)(v0 + 68);
                if (v42 <= 0x18)
                  LOWORD(v42) = 24;
                *(_WORD *)(v0 + 68) = v42;
                if (*(_BYTE *)(v0 + 80))
                {
                  if (!*(_QWORD *)(v0 + 72))
                    *(_QWORD *)(v0 + 72) = 1;
                  v43 = *(_QWORD *)(v0 + 48);
                  if (v43 == v41)
                  {
                    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                    v43 = *(_QWORD *)(v0 + 48);
                  }
                  *(_QWORD *)(v0 + 48) = v43 - 1;
                  *(_BYTE *)(v43 - 1) = 0;
                  v45 = *(_QWORD *)(v0 + 48);
                  v44 = *(uint64_t **)(v0 + 56);
                  v46 = *(_QWORD *)(v0 + 32) - v45 + *(_QWORD *)(v0 + 40);
                  if ((unint64_t)(v45 - (_QWORD)v44) <= 7)
                  {
                    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                    v44 = *(uint64_t **)(v0 + 56);
                  }
                  *v44 = v46 | 0x1600000000;
                  v47 = *(_QWORD *)(v0 + 56) + 8;
                  *(_QWORD *)(v0 + 56) = v47;
                  ++*(_DWORD *)(v0 + 64);
                  v48 = *(unsigned __int16 *)(v0 + 68);
                  if (v48 <= 0x16)
                    LOWORD(v48) = 22;
                  *(_WORD *)(v0 + 68) = v48;
                  if (*(_BYTE *)(v0 + 80))
                  {
                    if (!*(_QWORD *)(v0 + 72))
                      *(_QWORD *)(v0 + 72) = 1;
                    v49 = *(_QWORD *)(v0 + 48);
                    if (v49 == v47)
                    {
                      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                      v49 = *(_QWORD *)(v0 + 48);
                    }
                    *(_QWORD *)(v0 + 48) = v49 - 1;
                    *(_BYTE *)(v49 - 1) = 0;
                    v51 = *(_QWORD *)(v0 + 48);
                    v50 = *(uint64_t **)(v0 + 56);
                    v52 = *(_QWORD *)(v0 + 32) - v51 + *(_QWORD *)(v0 + 40);
                    if ((unint64_t)(v51 - (_QWORD)v50) <= 7)
                    {
                      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                      v50 = *(uint64_t **)(v0 + 56);
                    }
                    *v50 = v52 | 0x1400000000;
                    v53 = *(_QWORD *)(v0 + 56) + 8;
                    *(_QWORD *)(v0 + 56) = v53;
                    ++*(_DWORD *)(v0 + 64);
                    v54 = *(unsigned __int16 *)(v0 + 68);
                    if (v54 <= 0x14)
                      LOWORD(v54) = 20;
                    *(_WORD *)(v0 + 68) = v54;
                    if (*(_BYTE *)(v0 + 80))
                    {
                      if (!*(_QWORD *)(v0 + 72))
                        *(_QWORD *)(v0 + 72) = 1;
                      v55 = *(_QWORD *)(v0 + 48);
                      if (v55 == v53)
                      {
                        flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                        v55 = *(_QWORD *)(v0 + 48);
                      }
                      *(_QWORD *)(v0 + 48) = v55 - 1;
                      *(_BYTE *)(v55 - 1) = 0;
                      v57 = *(_QWORD *)(v0 + 48);
                      v56 = *(uint64_t **)(v0 + 56);
                      v58 = *(_QWORD *)(v0 + 32) - v57 + *(_QWORD *)(v0 + 40);
                      if ((unint64_t)(v57 - (_QWORD)v56) <= 7)
                      {
                        flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                        v56 = *(uint64_t **)(v0 + 56);
                      }
                      *v56 = v58 | 0x1200000000;
                      v59 = *(_QWORD *)(v0 + 56) + 8;
                      *(_QWORD *)(v0 + 56) = v59;
                      ++*(_DWORD *)(v0 + 64);
                      v60 = *(unsigned __int16 *)(v0 + 68);
                      if (v60 <= 0x12)
                        LOWORD(v60) = 18;
                      *(_WORD *)(v0 + 68) = v60;
                      if (*(_BYTE *)(v0 + 80))
                      {
                        if (!*(_QWORD *)(v0 + 72))
                          *(_QWORD *)(v0 + 72) = 1;
                        v61 = *(_QWORD *)(v0 + 48);
                        if (v61 == v59)
                        {
                          flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                          v61 = *(_QWORD *)(v0 + 48);
                        }
                        *(_QWORD *)(v0 + 48) = v61 - 1;
                        *(_BYTE *)(v61 - 1) = 0;
                        v63 = *(_QWORD *)(v0 + 48);
                        v62 = *(uint64_t **)(v0 + 56);
                        v64 = *(_QWORD *)(v0 + 32) - v63 + *(_QWORD *)(v0 + 40);
                        if ((unint64_t)(v63 - (_QWORD)v62) <= 7)
                        {
                          flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                          v62 = *(uint64_t **)(v0 + 56);
                        }
                        *v62 = v64 | 0x1000000000;
                        v65 = *(_QWORD *)(v0 + 56) + 8;
                        *(_QWORD *)(v0 + 56) = v65;
                        ++*(_DWORD *)(v0 + 64);
                        v66 = *(unsigned __int16 *)(v0 + 68);
                        if (v66 <= 0x10)
                          LOWORD(v66) = 16;
                        *(_WORD *)(v0 + 68) = v66;
                        if (*(_BYTE *)(v0 + 80))
                        {
                          if (!*(_QWORD *)(v0 + 72))
                            *(_QWORD *)(v0 + 72) = 1;
                          v67 = *(_QWORD *)(v0 + 48);
                          if (v67 == v65)
                          {
                            flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                            v67 = *(_QWORD *)(v0 + 48);
                          }
                          *(_QWORD *)(v0 + 48) = v67 - 1;
                          *(_BYTE *)(v67 - 1) = 0;
                          v69 = *(_QWORD *)(v0 + 48);
                          v68 = *(uint64_t **)(v0 + 56);
                          v70 = *(_QWORD *)(v0 + 32) - v69 + *(_QWORD *)(v0 + 40);
                          if ((unint64_t)(v69 - (_QWORD)v68) <= 7)
                          {
                            flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                            v68 = *(uint64_t **)(v0 + 56);
                          }
                          *v68 = v70 | 0xE00000000;
                          v71 = *(_QWORD *)(v0 + 56) + 8;
                          *(_QWORD *)(v0 + 56) = v71;
                          ++*(_DWORD *)(v0 + 64);
                          v72 = *(unsigned __int16 *)(v0 + 68);
                          if (v72 <= 0xE)
                            LOWORD(v72) = 14;
                          *(_WORD *)(v0 + 68) = v72;
                          if (*(_BYTE *)(v0 + 80))
                          {
                            if (!*(_QWORD *)(v0 + 72))
                              *(_QWORD *)(v0 + 72) = 1;
                            v73 = *(_QWORD *)(v0 + 48);
                            if (v73 == v71)
                            {
                              flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                              v73 = *(_QWORD *)(v0 + 48);
                            }
                            *(_QWORD *)(v0 + 48) = v73 - 1;
                            *(_BYTE *)(v73 - 1) = 0;
                            v75 = *(_QWORD *)(v0 + 48);
                            v74 = *(uint64_t **)(v0 + 56);
                            v76 = *(_QWORD *)(v0 + 32) - v75 + *(_QWORD *)(v0 + 40);
                            if ((unint64_t)(v75 - (_QWORD)v74) <= 7)
                            {
                              flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                              v74 = *(uint64_t **)(v0 + 56);
                            }
                            *v74 = v76 | 0xA00000000;
                            v77 = *(_QWORD *)(v0 + 56) + 8;
                            *(_QWORD *)(v0 + 56) = v77;
                            ++*(_DWORD *)(v0 + 64);
                            v78 = *(unsigned __int16 *)(v0 + 68);
                            if (v78 <= 0xA)
                              LOWORD(v78) = 10;
                            *(_WORD *)(v0 + 68) = v78;
                            if (*(_BYTE *)(v0 + 80))
                            {
                              if (!*(_QWORD *)(v0 + 72))
                                *(_QWORD *)(v0 + 72) = 1;
                              v79 = *(_QWORD *)(v0 + 48);
                              if (v79 == v77)
                              {
                                flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                                v79 = *(_QWORD *)(v0 + 48);
                              }
                              *(_QWORD *)(v0 + 48) = v79 - 1;
                              *(_BYTE *)(v79 - 1) = 1;
                              v81 = *(_QWORD *)(v0 + 48);
                              v80 = *(uint64_t **)(v0 + 56);
                              v82 = *(_QWORD *)(v0 + 32) - v81 + *(_QWORD *)(v0 + 40);
                              if ((unint64_t)(v81 - (_QWORD)v80) <= 7)
                              {
                                flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                                v80 = *(uint64_t **)(v0 + 56);
                              }
                              *v80 = v82 | 0x800000000;
                              *(_QWORD *)(v0 + 56) += 8;
                              ++*(_DWORD *)(v0 + 64);
                              v83 = *(unsigned __int16 *)(v0 + 68);
                              if (v83 <= 8)
                                LOWORD(v83) = 8;
                              *(_WORD *)(v0 + 68) = v83;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v84 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v0, 0);
  result = flatbuffers::FlatBufferBuilder::Finish((char *)v0, v84, v85);
  AGX::defaultVertexDescriptor(void)::_desc = *(_QWORD *)(AGX::defaultVertexDescriptor(void)::_fbb + 48)
                                            + **(unsigned int **)(AGX::defaultVertexDescriptor(void)::_fbb + 48);
  return result;
}

char *flatbuffers::FlatBufferBuilder::Finish(char *this, int a2, const char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (uint64_t)this;
  v6 = *((_QWORD *)this + 5);
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 7) = v6;
  v7 = *((_QWORD *)this + 9);
  v8 = (-4 - (*((_DWORD *)this + 8) + v6 - v5)) & (v7 - 1);
  if (v5 - v6 >= v8)
  {
    *((_QWORD *)this + 6) = v5 - v8;
    if (!v8)
      goto LABEL_7;
  }
  else
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, v8);
    *(_QWORD *)(v4 + 48) -= v8;
  }
  v9 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v9++) = 0;
  while (v8 != v9);
  v7 = *(_QWORD *)(v4 + 72);
LABEL_7:
  if (v7 <= 3)
    *(_QWORD *)(v4 + 72) = 4;
  v10 = *(_QWORD *)(v4 + 32);
  v11 = *(_QWORD *)(v4 + 40);
  v12 = *(_QWORD *)(v4 + 48);
  v13 = ((_BYTE)v12 - ((_BYTE)v10 + (_BYTE)v11)) & 3;
  if (v12 - *(_QWORD *)(v4 + 56) >= v13)
  {
    v14 = v12 - v13;
    *(_QWORD *)(v4 + 48) = v14;
    if (!v13)
    {
      v16 = v11 - v14 + v10;
      goto LABEL_17;
    }
  }
  else
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v4, ((_BYTE)v12 - ((_BYTE)v10 + (_BYTE)v11)) & 3);
    *(_QWORD *)(v4 + 48) -= v13;
  }
  v15 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15++) = 0;
  while (v13 != v15);
  v11 = *(_QWORD *)(v4 + 40);
  v14 = *(_QWORD *)(v4 + 48);
  v10 = *(_QWORD *)(v4 + 32);
  v16 = v11 - v14 + v10;
  if (*(_QWORD *)(v4 + 72) <= 3uLL)
    *(_QWORD *)(v4 + 72) = 4;
LABEL_17:
  v17 = ((_BYTE)v14 - ((_BYTE)v10 + (_BYTE)v11)) & 3;
  v18 = *(_QWORD *)(v4 + 56);
  if (v14 - v18 >= v17)
  {
    v19 = v14 - v17;
    *(_QWORD *)(v4 + 48) = v14 - v17;
    if (!v17)
      goto LABEL_23;
  }
  else
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v4, v17);
    *(_QWORD *)(v4 + 48) -= v17;
  }
  v20 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v20++) = 0;
  while (v17 != v20);
  v19 = *(_QWORD *)(v4 + 48);
  v18 = *(_QWORD *)(v4 + 56);
LABEL_23:
  if ((unint64_t)(v19 - v18) <= 3)
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v4, 4uLL);
    v19 = *(_QWORD *)(v4 + 48);
  }
  *(_DWORD *)(v19 - 4) = v16 - a2 + 4;
  *(_QWORD *)(v4 + 48) = v19 - 4;
  *(_BYTE *)(v4 + 71) = 1;
  return this;
}

char *flatbuffers::vector_downward::reallocate(flatbuffers::vector_downward *this, unint64_t a2)
{
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;
  char *v11;
  char *v12;

  v4 = *((_QWORD *)this + 4);
  v3 = (char *)*((_QWORD *)this + 5);
  v5 = &v3[v4 - *((_QWORD *)this + 6)];
  v6 = *((_QWORD *)this + 7) - (_QWORD)v3;
  if (v4)
    v7 = v4 >> 1;
  else
    v7 = *((_QWORD *)this + 2);
  if (v7 <= a2)
    v7 = a2;
  v8 = (*((_QWORD *)this + 3) + v4 + v7 - 1) & -*((_QWORD *)this + 3);
  *((_QWORD *)this + 4) = v8;
  v9 = *(_QWORD *)this;
  if (!v3)
  {
    if (v9)
      result = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v8);
    else
      result = (char *)operator new[]();
    goto LABEL_13;
  }
  if (v9)
  {
    result = (char *)(*(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 32))(v9, v3, v4, v8, v5, v6);
LABEL_13:
    v11 = result;
    goto LABEL_14;
  }
  v11 = (char *)operator new[]();
  memcpy(&v11[v8 - v5], &v3[v4 - v5], v5);
  memcpy(v11, v3, v6);
  result = (char *)MEMORY[0x234927EB4](v3, 0x1000C8077774924);
LABEL_14:
  v12 = &v11[*((_QWORD *)this + 4) - v5];
  *((_QWORD *)this + 5) = v11;
  *((_QWORD *)this + 6) = v12;
  *((_QWORD *)this + 7) = &v11[v6];
  return result;
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(char *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v6 = (uint64_t)this;
  if (a3 == a4 && !this[80])
    return this;
  if (*((_QWORD *)this + 9) <= 7uLL)
    *((_QWORD *)this + 9) = 8;
  v8 = *((_QWORD *)this + 6);
  v7 = (unint64_t *)*((_QWORD *)this + 7);
  v9 = ((_BYTE)v8 - (*((_DWORD *)this + 8) + *((_DWORD *)this + 10))) & 7;
  if (v8 - (uint64_t)v7 < v9)
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, ((_BYTE)v8 - (*((_DWORD *)this + 8) + *((_DWORD *)this + 10))) & 7);
    *(_QWORD *)(v6 + 48) -= v9;
    goto LABEL_8;
  }
  v10 = v8 - v9;
  *((_QWORD *)this + 6) = v10;
  if (v9)
  {
LABEL_8:
    v11 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v11++) = 0;
    while (v9 != v11);
    v10 = *(_QWORD *)(v6 + 48);
    v7 = *(unint64_t **)(v6 + 56);
  }
  if ((unint64_t)(v10 - (_QWORD)v7) <= 7)
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v6, 8uLL);
    v10 = *(_QWORD *)(v6 + 48);
    v7 = *(unint64_t **)(v6 + 56);
  }
  *(_QWORD *)(v10 - 8) = a3;
  v12 = v10 - 8;
  *(_QWORD *)(v6 + 48) = v12;
  v13 = *(_QWORD *)(v6 + 32) - v12 + *(_QWORD *)(v6 + 40);
  if ((unint64_t)(v12 - (_QWORD)v7) <= 7)
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v6, 8uLL);
    v7 = *(unint64_t **)(v6 + 56);
  }
  *v7 = v13 | (unint64_t)(a2 << 32);
  *(_QWORD *)(v6 + 56) += 8;
  ++*(_DWORD *)(v6 + 64);
  v14 = *(unsigned __int16 *)(v6 + 68);
  if (v14 <= a2)
    LOWORD(v14) = a2;
  *(_WORD *)(v6 + 68) = v14;
  return this;
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(char *this, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  if (!this[80])
    return this;
  v3 = (uint64_t)this;
  if (*((_QWORD *)this + 9) <= 3uLL)
    *((_QWORD *)this + 9) = 4;
  v5 = *((_QWORD *)this + 6);
  v4 = (unint64_t *)*((_QWORD *)this + 7);
  v6 = ((_BYTE)v5 - (*((_DWORD *)this + 8) + *((_DWORD *)this + 10))) & 3;
  if (v5 - (uint64_t)v4 < v6)
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, ((_BYTE)v5 - (*((_DWORD *)this + 8) + *((_DWORD *)this + 10))) & 3);
    *(_QWORD *)(v3 + 48) -= v6;
    goto LABEL_7;
  }
  v7 = v5 - v6;
  *((_QWORD *)this + 6) = v7;
  if (v6)
  {
LABEL_7:
    v8 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v3 + 48) + v8++) = 0;
    while (v6 != v8);
    v7 = *(_QWORD *)(v3 + 48);
    v4 = *(unint64_t **)(v3 + 56);
  }
  if ((unint64_t)(v7 - (_QWORD)v4) <= 3)
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v3, 4uLL);
    v7 = *(_QWORD *)(v3 + 48);
    v4 = *(unint64_t **)(v3 + 56);
  }
  *(_DWORD *)(v7 - 4) = 0;
  v9 = v7 - 4;
  *(_QWORD *)(v3 + 48) = v9;
  v10 = *(_QWORD *)(v3 + 32) - v9 + *(_QWORD *)(v3 + 40);
  if ((unint64_t)(v9 - (_QWORD)v4) <= 7)
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v3, 8uLL);
    v4 = *(unint64_t **)(v3 + 56);
  }
  *v4 = v10 | (unint64_t)(a2 << 32);
  *(_QWORD *)(v3 + 56) += 8;
  ++*(_DWORD *)(v3 + 64);
  v11 = *(unsigned __int16 *)(v3 + 68);
  if (v11 <= a2)
    LOWORD(v11) = a2;
  *(_WORD *)(v3 + 68) = v11;
  return this;
}

uint64_t flatbuffers::FlatBufferBuilder::EndTable(flatbuffers::FlatBufferBuilder *this, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int16 v12;
  unint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  char *v16;
  _WORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  unsigned int *v23;

  if (*((_QWORD *)this + 9) <= 3uLL)
    *((_QWORD *)this + 9) = 4;
  v4 = *((_QWORD *)this + 6);
  v5 = *((_QWORD *)this + 7);
  v6 = ((_BYTE)v4 - (*((_DWORD *)this + 8) + *((_DWORD *)this + 10))) & 3;
  if (v4 - v5 >= v6)
  {
    v7 = v4 - v6;
    *((_QWORD *)this + 6) = v7;
    if (!v6)
      goto LABEL_9;
  }
  else
  {
    flatbuffers::vector_downward::reallocate(this, ((_BYTE)v4 - (*((_DWORD *)this + 8) + *((_DWORD *)this + 10))) & 3);
    *((_QWORD *)this + 6) -= v6;
  }
  v8 = 0;
  do
    *(_BYTE *)(*((_QWORD *)this + 6) + v8++) = 0;
  while (v6 != v8);
  v7 = *((_QWORD *)this + 6);
  v5 = *((_QWORD *)this + 7);
LABEL_9:
  if ((unint64_t)(v7 - v5) <= 3)
  {
    flatbuffers::vector_downward::reallocate(this, 4uLL);
    v7 = *((_QWORD *)this + 6);
    v5 = *((_QWORD *)this + 7);
  }
  *(_DWORD *)(v7 - 4) = 0;
  v9 = v7 - 4;
  *((_QWORD *)this + 6) = v9;
  v10 = *((_QWORD *)this + 4) - v9 + *((_QWORD *)this + 5);
  if ((unsigned __int16)(*((_WORD *)this + 34) + 2) <= 4u)
    v11 = 4;
  else
    v11 = (unsigned __int16)(*((_WORD *)this + 34) + 2);
  *((_WORD *)this + 34) = v11;
  if (v9 - v5 < v11)
  {
    flatbuffers::vector_downward::reallocate(this, v11);
    v9 = *((_QWORD *)this + 6);
  }
  *((_QWORD *)this + 6) = v9 - v11;
  bzero((void *)(v9 - v11), v11);
  v12 = v10 - a2;
  v14 = (unsigned __int16 *)*((_QWORD *)this + 6);
  v13 = *((_QWORD *)this + 7);
  v14[1] = v12;
  *v14 = *((_WORD *)this + 34);
  v15 = *((unsigned int *)this + 16);
  v16 = (char *)(v13 - 8 * v15);
  if ((_DWORD)v15)
  {
    v17 = (_WORD *)(v13 - 8 * v15);
    do
    {
      *(unsigned __int16 *)((char *)v14 + (unsigned __int16)v17[2]) = v10 - *v17;
      v17 += 4;
    }
    while ((unint64_t)v17 < v13);
  }
  *((_QWORD *)this + 7) = v16;
  *((_DWORD *)this + 16) = 0;
  *((_WORD *)this + 34) = 0;
  v19 = *((_QWORD *)this + 4);
  v18 = *((_QWORD *)this + 5);
  LODWORD(v20) = v19 - (_DWORD)v14 + v18;
  if (*((_BYTE *)this + 81) && v18 < (unint64_t)v16)
  {
    v21 = *v14;
    v22 = v18 + v19;
    v23 = (unsigned int *)*((_QWORD *)this + 5);
    do
    {
      v20 = *v23;
      if ((_DWORD)v21 == *(unsigned __int16 *)(v22 - v20) && !memcmp((const void *)(v22 - v20), v14, v21))
      {
        v14 = (unsigned __int16 *)((char *)v14 + (v19 - (_DWORD)v14 + v18 - v10));
        *((_QWORD *)this + 6) = v14;
        goto LABEL_27;
      }
      ++v23;
    }
    while (v23 < (unsigned int *)v16);
    LODWORD(v20) = v19 - (_DWORD)v14 + v18;
  }
LABEL_27:
  if ((_DWORD)v20 == (_DWORD)v19 + (_DWORD)v18 - (_DWORD)v14)
  {
    if ((unint64_t)((char *)v14 - v16) <= 3)
    {
      flatbuffers::vector_downward::reallocate(this, 4uLL);
      v16 = (char *)*((_QWORD *)this + 7);
      v19 = *((_QWORD *)this + 4);
      v18 = *((_QWORD *)this + 5);
    }
    *(_DWORD *)v16 = v20;
    *((_QWORD *)this + 7) = v16 + 4;
  }
  *(_DWORD *)(v18 + v19 - v10) = v20 - v10;
  *((_BYTE *)this + 70) = 0;
  return v10;
}

uint64_t AGX::Impl::MeshProgramKey::addToDigest(AGX::Impl::MeshProgramKey *this, CC_SHA256state_st *a2)
{
  unint64_t v4;
  int *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  char **p_data;
  char *data;

  v4 = atomic_load(&AGX::defaultMeshDescriptor(void)::once);
  if (v4 != -1)
  {
    data = &v32;
    p_data = &data;
    std::__call_once(&AGX::defaultMeshDescriptor(void)::once, &p_data, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultMeshDescriptor(void)::$_0 &&>>);
  }
  v5 = (int *)AGX::defaultMeshDescriptor(void)::_desc;
  result = (*(uint64_t (**)(AGX::Impl::MeshProgramKey *))(*(_QWORD *)this + 40))(this);
  v7 = *v5;
  v8 = -v7;
  v9 = (char *)v5 - v7;
  v10 = *(unsigned __int16 *)((char *)v5 - v7);
  if (v10 >= 0x15)
  {
    v11 = *((unsigned __int16 *)v9 + 10);
    if (v11)
    {
      if ((_DWORD)result == (*((_BYTE *)v5 + v11) != 0))
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  if ((result & 1) != 0)
  {
LABEL_8:
    LOBYTE(p_data) = (*(uint64_t (**)(AGX::Impl::MeshProgramKey *))(*(_QWORD *)this + 40))(this);
    LOWORD(data) = 20;
    CC_SHA256_Update(a2, &data, 2u);
    result = CC_SHA256_Update(a2, &p_data, 1u);
    v12 = *v5;
    v8 = -v12;
    v10 = *(unsigned __int16 *)((char *)v5 - v12);
  }
LABEL_9:
  v13 = *((_DWORD *)this + 13);
  if (v10 < 0x17 || (v14 = *(unsigned __int16 *)((char *)v5 + v8 + 22)) == 0)
  {
    if ((v13 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (((*((_DWORD *)this + 13) & 0x200) == 0) == (*((_BYTE *)v5 + v14) != 0))
  {
LABEL_14:
    LODWORD(data) = (v13 >> 9) & 1;
    LOWORD(p_data) = 22;
    CC_SHA256_Update(a2, &p_data, 2u);
    result = CC_SHA256_Update(a2, &data, 4u);
  }
LABEL_15:
  if (*((_QWORD *)this + 5))
  {
    LOWORD(data) = 18;
    CC_SHA256_Update(a2, &data, 2u);
    result = CC_SHA256_Update(a2, (char *)this + 40, 8u);
  }
  v15 = *((_DWORD *)this + 14);
  v16 = *v5;
  v17 = -v16;
  v18 = (char *)v5 - v16;
  v19 = *(unsigned __int16 *)((char *)v5 - v16);
  if (v19 >= 0x1D && (v20 = *((unsigned __int16 *)v18 + 14)) != 0)
  {
    if (((*((_DWORD *)this + 14) & 0x20) == 0) != (*((_BYTE *)v5 + v20) != 0))
    {
      v21 = v15 & 0xF;
      goto LABEL_24;
    }
  }
  else if ((v15 & 0x20) == 0)
  {
    goto LABEL_23;
  }
  LODWORD(data) = (v15 >> 5) & 1;
  LOWORD(p_data) = 28;
  CC_SHA256_Update(a2, &p_data, 2u);
  result = CC_SHA256_Update(a2, &data, 4u);
  v15 = *((_DWORD *)this + 14);
  v22 = *v5;
  v17 = -v22;
  v19 = *(unsigned __int16 *)((char *)v5 - v22);
LABEL_23:
  v21 = v15 & 0xF;
  if (v19 < 0xF)
    goto LABEL_27;
LABEL_24:
  if (!*(_WORD *)((char *)v5 + v17 + 14))
  {
LABEL_27:
    if (v21 == 1)
      goto LABEL_29;
    goto LABEL_28;
  }
  if (*(_QWORD *)((char *)v5 + *(unsigned __int16 *)((char *)v5 + v17 + 14)) != v21)
  {
LABEL_28:
    LODWORD(data) = v21;
    LOWORD(p_data) = 14;
    CC_SHA256_Update(a2, &p_data, 2u);
    result = CC_SHA256_Update(a2, &data, 4u);
    v23 = *v5;
    v17 = -v23;
    v19 = *(unsigned __int16 *)((char *)v5 - v23);
  }
LABEL_29:
  if (v19 < 7)
  {
    if (*((_DWORD *)this + 15))
    {
LABEL_33:
      LOWORD(data) = 6;
      CC_SHA256_Update(a2, &data, 2u);
      result = CC_SHA256_Update(a2, (char *)this + 60, 4u);
      v25 = *v5;
      v17 = -v25;
      v19 = *(unsigned __int16 *)((char *)v5 - v25);
    }
  }
  else
  {
    v24 = *(unsigned __int16 *)((char *)v5 + v17 + 6);
    if (*(_WORD *)((char *)v5 + v17 + 6))
      v24 = *(_QWORD *)((char *)v5 + v24);
    if (v24 != *((_DWORD *)this + 15))
      goto LABEL_33;
  }
  if (v19 < 9)
  {
    if (!*((_DWORD *)this + 16))
      goto LABEL_38;
  }
  else
  {
    v26 = *(unsigned __int16 *)((char *)v5 + v17 + 8);
    if (v26)
      v26 = *(_QWORD *)((char *)v5 + v26);
    if (v26 == *((_DWORD *)this + 16))
    {
LABEL_38:
      v27 = *((_DWORD *)this + 14);
      if ((v27 & 0x80) == 0)
        goto LABEL_39;
      goto LABEL_48;
    }
  }
  LOWORD(data) = 8;
  CC_SHA256_Update(a2, &data, 2u);
  result = CC_SHA256_Update(a2, (char *)this + 64, 4u);
  v27 = *((_DWORD *)this + 14);
  if ((v27 & 0x80) == 0)
  {
LABEL_39:
    if ((v27 & 0x100) == 0)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_48:
  LODWORD(data) = (v27 >> 7) & 1;
  LOWORD(p_data) = 0x8000;
  CC_SHA256_Update(a2, &p_data, 2u);
  result = CC_SHA256_Update(a2, &data, 4u);
  v27 = *((_DWORD *)this + 14);
  if ((v27 & 0x100) != 0)
  {
LABEL_40:
    LODWORD(data) = (v27 >> 8) & 1;
    LOWORD(p_data) = -32767;
    CC_SHA256_Update(a2, &p_data, 2u);
    result = CC_SHA256_Update(a2, &data, 4u);
  }
LABEL_41:
  v28 = (_QWORD *)((char *)this + 152);
  if (*((char *)this + 175) < 0)
  {
    v29 = *((_QWORD *)this + 20);
    if (!v29)
      goto LABEL_53;
    v28 = (_QWORD *)*v28;
    goto LABEL_52;
  }
  LODWORD(v29) = *((unsigned __int8 *)this + 175);
  if (*((_BYTE *)this + 175))
LABEL_52:
    result = CC_SHA256_Update(a2, v28, v29);
LABEL_53:
  v30 = (_QWORD *)((char *)this + 176);
  if (*((char *)this + 199) < 0)
  {
    v31 = *((_QWORD *)this + 23);
    if (!v31)
      return result;
    v30 = (_QWORD *)*v30;
    return CC_SHA256_Update(a2, v30, v31);
  }
  LODWORD(v31) = *((unsigned __int8 *)this + 199);
  if (*((_BYTE *)this + 199))
    return CC_SHA256_Update(a2, v30, v31);
  return result;
}

char *std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultMeshDescriptor(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  const char *v49;
  char *result;

  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_BYTE *)(v0 + 8) = 0;
  *(_OWORD *)(v0 + 16) = xmmword_232D73DA0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 80) = 256;
  *(_QWORD *)(v0 + 88) = 0;
  AGX::defaultMeshDescriptor(void)::_fbb = v0;
  *(_BYTE *)(v0 + 70) = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v0, 14, 1, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v0, 10, 1, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v0, 8, 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v0, 6, 0, 0);
  if (*(_BYTE *)(v0 + 80))
  {
    if (!*(_QWORD *)(v0 + 72))
      *(_QWORD *)(v0 + 72) = 1;
    v1 = *(_QWORD *)(v0 + 48);
    if (v1 == *(_QWORD *)(v0 + 56))
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
      v1 = *(_QWORD *)(v0 + 48);
    }
    *(_QWORD *)(v0 + 48) = v1 - 1;
    *(_BYTE *)(v1 - 1) = 0;
    v3 = *(_QWORD *)(v0 + 48);
    v2 = *(uint64_t **)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 32) - v3 + *(_QWORD *)(v0 + 40);
    if ((unint64_t)(v3 - (_QWORD)v2) <= 7)
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
      v2 = *(uint64_t **)(v0 + 56);
    }
    *v2 = v4 | 0x1C00000000;
    v5 = *(_QWORD *)(v0 + 56) + 8;
    *(_QWORD *)(v0 + 56) = v5;
    ++*(_DWORD *)(v0 + 64);
    v6 = *(unsigned __int16 *)(v0 + 68);
    if (v6 <= 0x1C)
      LOWORD(v6) = 28;
    *(_WORD *)(v0 + 68) = v6;
    if (*(_BYTE *)(v0 + 80))
    {
      if (!*(_QWORD *)(v0 + 72))
        *(_QWORD *)(v0 + 72) = 1;
      v7 = *(_QWORD *)(v0 + 48);
      if (v7 == v5)
      {
        flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
        v7 = *(_QWORD *)(v0 + 48);
      }
      *(_QWORD *)(v0 + 48) = v7 - 1;
      *(_BYTE *)(v7 - 1) = -1;
      v9 = *(_QWORD *)(v0 + 48);
      v8 = *(uint64_t **)(v0 + 56);
      v10 = *(_QWORD *)(v0 + 32) - v9 + *(_QWORD *)(v0 + 40);
      if ((unint64_t)(v9 - (_QWORD)v8) <= 7)
      {
        flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
        v8 = *(uint64_t **)(v0 + 56);
      }
      *v8 = v10 | 0x1A00000000;
      v11 = *(_QWORD *)(v0 + 56) + 8;
      *(_QWORD *)(v0 + 56) = v11;
      ++*(_DWORD *)(v0 + 64);
      v12 = *(unsigned __int16 *)(v0 + 68);
      if (v12 <= 0x1A)
        LOWORD(v12) = 26;
      *(_WORD *)(v0 + 68) = v12;
      if (*(_BYTE *)(v0 + 80))
      {
        if (!*(_QWORD *)(v0 + 72))
          *(_QWORD *)(v0 + 72) = 1;
        v13 = *(_QWORD *)(v0 + 48);
        if (v13 == v11)
        {
          flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
          v13 = *(_QWORD *)(v0 + 48);
        }
        *(_QWORD *)(v0 + 48) = v13 - 1;
        *(_BYTE *)(v13 - 1) = 0;
        v15 = *(_QWORD *)(v0 + 48);
        v14 = *(uint64_t **)(v0 + 56);
        v16 = *(_QWORD *)(v0 + 32) - v15 + *(_QWORD *)(v0 + 40);
        if ((unint64_t)(v15 - (_QWORD)v14) <= 7)
        {
          flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
          v14 = *(uint64_t **)(v0 + 56);
        }
        *v14 = v16 | 0x1800000000;
        v17 = *(_QWORD *)(v0 + 56) + 8;
        *(_QWORD *)(v0 + 56) = v17;
        ++*(_DWORD *)(v0 + 64);
        v18 = *(unsigned __int16 *)(v0 + 68);
        if (v18 <= 0x18)
          LOWORD(v18) = 24;
        *(_WORD *)(v0 + 68) = v18;
        if (*(_BYTE *)(v0 + 80))
        {
          if (!*(_QWORD *)(v0 + 72))
            *(_QWORD *)(v0 + 72) = 1;
          v19 = *(_QWORD *)(v0 + 48);
          if (v19 == v17)
          {
            flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
            v19 = *(_QWORD *)(v0 + 48);
          }
          *(_QWORD *)(v0 + 48) = v19 - 1;
          *(_BYTE *)(v19 - 1) = 0;
          v21 = *(_QWORD *)(v0 + 48);
          v20 = *(uint64_t **)(v0 + 56);
          v22 = *(_QWORD *)(v0 + 32) - v21 + *(_QWORD *)(v0 + 40);
          if ((unint64_t)(v21 - (_QWORD)v20) <= 7)
          {
            flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
            v20 = *(uint64_t **)(v0 + 56);
          }
          *v20 = v22 | 0x1600000000;
          v23 = *(_QWORD *)(v0 + 56) + 8;
          *(_QWORD *)(v0 + 56) = v23;
          ++*(_DWORD *)(v0 + 64);
          v24 = *(unsigned __int16 *)(v0 + 68);
          if (v24 <= 0x16)
            LOWORD(v24) = 22;
          *(_WORD *)(v0 + 68) = v24;
          if (*(_BYTE *)(v0 + 80))
          {
            if (!*(_QWORD *)(v0 + 72))
              *(_QWORD *)(v0 + 72) = 1;
            v25 = *(_QWORD *)(v0 + 48);
            if (v25 == v23)
            {
              flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
              v25 = *(_QWORD *)(v0 + 48);
            }
            *(_QWORD *)(v0 + 48) = v25 - 1;
            *(_BYTE *)(v25 - 1) = 0;
            v27 = *(_QWORD *)(v0 + 48);
            v26 = *(uint64_t **)(v0 + 56);
            v28 = *(_QWORD *)(v0 + 32) - v27 + *(_QWORD *)(v0 + 40);
            if ((unint64_t)(v27 - (_QWORD)v26) <= 7)
            {
              flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
              v26 = *(uint64_t **)(v0 + 56);
            }
            *v26 = v28 | 0x1400000000;
            v29 = *(_QWORD *)(v0 + 56) + 8;
            *(_QWORD *)(v0 + 56) = v29;
            ++*(_DWORD *)(v0 + 64);
            v30 = *(unsigned __int16 *)(v0 + 68);
            if (v30 <= 0x14)
              LOWORD(v30) = 20;
            *(_WORD *)(v0 + 68) = v30;
            if (*(_BYTE *)(v0 + 80))
            {
              if (!*(_QWORD *)(v0 + 72))
                *(_QWORD *)(v0 + 72) = 1;
              v31 = *(_QWORD *)(v0 + 48);
              if (v31 == v29)
              {
                flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                v31 = *(_QWORD *)(v0 + 48);
              }
              *(_QWORD *)(v0 + 48) = v31 - 1;
              *(_BYTE *)(v31 - 1) = 0;
              v33 = *(_QWORD *)(v0 + 48);
              v32 = *(uint64_t **)(v0 + 56);
              v34 = *(_QWORD *)(v0 + 32) - v33 + *(_QWORD *)(v0 + 40);
              if ((unint64_t)(v33 - (_QWORD)v32) <= 7)
              {
                flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                v32 = *(uint64_t **)(v0 + 56);
              }
              *v32 = v34 | 0x1000000000;
              v35 = *(_QWORD *)(v0 + 56) + 8;
              *(_QWORD *)(v0 + 56) = v35;
              ++*(_DWORD *)(v0 + 64);
              v36 = *(unsigned __int16 *)(v0 + 68);
              if (v36 <= 0x10)
                LOWORD(v36) = 16;
              *(_WORD *)(v0 + 68) = v36;
              if (*(_BYTE *)(v0 + 80))
              {
                if (!*(_QWORD *)(v0 + 72))
                  *(_QWORD *)(v0 + 72) = 1;
                v37 = *(_QWORD *)(v0 + 48);
                if (v37 == v35)
                {
                  flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                  v37 = *(_QWORD *)(v0 + 48);
                }
                *(_QWORD *)(v0 + 48) = v37 - 1;
                *(_BYTE *)(v37 - 1) = 1;
                v39 = *(_QWORD *)(v0 + 48);
                v38 = *(uint64_t **)(v0 + 56);
                v40 = *(_QWORD *)(v0 + 32) - v39 + *(_QWORD *)(v0 + 40);
                if ((unint64_t)(v39 - (_QWORD)v38) <= 7)
                {
                  flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                  v38 = *(uint64_t **)(v0 + 56);
                }
                *v38 = v40 | 0xC00000000;
                v41 = *(_QWORD *)(v0 + 56) + 8;
                *(_QWORD *)(v0 + 56) = v41;
                ++*(_DWORD *)(v0 + 64);
                v42 = *(unsigned __int16 *)(v0 + 68);
                if (v42 <= 0xC)
                  LOWORD(v42) = 12;
                *(_WORD *)(v0 + 68) = v42;
                if (*(_BYTE *)(v0 + 80))
                {
                  if (!*(_QWORD *)(v0 + 72))
                    *(_QWORD *)(v0 + 72) = 1;
                  v43 = *(_QWORD *)(v0 + 48);
                  if (v43 == v41)
                  {
                    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                    v43 = *(_QWORD *)(v0 + 48);
                  }
                  *(_QWORD *)(v0 + 48) = v43 - 1;
                  *(_BYTE *)(v43 - 1) = 0;
                  v45 = *(_QWORD *)(v0 + 48);
                  v44 = *(uint64_t **)(v0 + 56);
                  v46 = *(_QWORD *)(v0 + 32) - v45 + *(_QWORD *)(v0 + 40);
                  if ((unint64_t)(v45 - (_QWORD)v44) <= 7)
                  {
                    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                    v44 = *(uint64_t **)(v0 + 56);
                  }
                  *v44 = v46 | 0x400000000;
                  *(_QWORD *)(v0 + 56) += 8;
                  ++*(_DWORD *)(v0 + 64);
                  v47 = *(unsigned __int16 *)(v0 + 68);
                  if (v47 <= 4)
                    LOWORD(v47) = 4;
                  *(_WORD *)(v0 + 68) = v47;
                }
              }
            }
          }
        }
      }
    }
  }
  v48 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v0, 0);
  result = flatbuffers::FlatBufferBuilder::Finish((char *)v0, v48, v49);
  AGX::defaultMeshDescriptor(void)::_desc = *(_QWORD *)(AGX::defaultMeshDescriptor(void)::_fbb + 48)
                                          + **(unsigned int **)(AGX::defaultMeshDescriptor(void)::_fbb + 48);
  return result;
}

uint64_t AGX::Impl::ObjectProgramKey::addToDigest(AGX::Impl::ObjectProgramKey *this, CC_SHA256state_st *a2)
{
  unint64_t v4;
  int *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  _BOOL4 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  char **p_data;
  char *data;

  v4 = atomic_load(&AGX::defaultObjectDescriptor(void)::once);
  if (v4 != -1)
  {
    data = &v31;
    p_data = &data;
    std::__call_once(&AGX::defaultObjectDescriptor(void)::once, &p_data, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultObjectDescriptor(void)::$_0 &&>>);
  }
  v5 = (int *)AGX::defaultObjectDescriptor(void)::_desc;
  result = (*(uint64_t (**)(AGX::Impl::ObjectProgramKey *))(*(_QWORD *)this + 40))(this);
  v7 = *v5;
  v8 = -v7;
  v9 = (char *)v5 - v7;
  v10 = *(unsigned __int16 *)((char *)v5 - v7);
  if (v10 >= 0x15)
  {
    v11 = *((unsigned __int16 *)v9 + 10);
    if (v11)
    {
      if ((_DWORD)result == (*((_BYTE *)v5 + v11) != 0))
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  if ((result & 1) != 0)
  {
LABEL_8:
    LOBYTE(p_data) = (*(uint64_t (**)(AGX::Impl::ObjectProgramKey *))(*(_QWORD *)this + 40))(this);
    LOWORD(data) = 20;
    CC_SHA256_Update(a2, &data, 2u);
    result = CC_SHA256_Update(a2, &p_data, 1u);
    v12 = *v5;
    v8 = -v12;
    v10 = *(unsigned __int16 *)((char *)v5 - v12);
  }
LABEL_9:
  v13 = *((_DWORD *)this + 13);
  if (v10 < 0x17 || (v14 = *(unsigned __int16 *)((char *)v5 + v8 + 22)) == 0)
  {
    if ((v13 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (((*((_DWORD *)this + 13) & 0x200) == 0) == (*((_BYTE *)v5 + v14) != 0))
  {
LABEL_14:
    LODWORD(data) = (v13 >> 9) & 1;
    LOWORD(p_data) = 22;
    CC_SHA256_Update(a2, &p_data, 2u);
    result = CC_SHA256_Update(a2, &data, 4u);
  }
LABEL_15:
  if (*((_QWORD *)this + 5))
  {
    LOWORD(data) = 18;
    CC_SHA256_Update(a2, &data, 2u);
    result = CC_SHA256_Update(a2, (char *)this + 40, 8u);
  }
  v15 = *((unsigned int *)this + 14);
  v16 = *v5;
  v17 = -v16;
  v18 = (char *)v5 - v16;
  v19 = *(unsigned __int16 *)((char *)v5 - v16);
  if (v19 >= 0x1B && (v20 = *((unsigned __int16 *)v18 + 13)) != 0)
  {
    v21 = *((unsigned __int8 *)v5 + v20) != 0;
    v22 = *((_DWORD *)this + 14) & 1;
    if ((v22 == 0) != v21)
    {
      v23 = (v15 >> 3) & 0xF;
      goto LABEL_25;
    }
  }
  else
  {
    if ((v15 & 1) == 0)
      goto LABEL_24;
    v22 = 1;
  }
  LODWORD(data) = v22;
  LOWORD(p_data) = 26;
  CC_SHA256_Update(a2, &p_data, 2u);
  result = CC_SHA256_Update(a2, &data, 4u);
  LODWORD(v15) = *((_DWORD *)this + 14);
  v24 = *v5;
  v17 = -v24;
  v19 = *(unsigned __int16 *)((char *)v5 - v24);
LABEL_24:
  v23 = (v15 >> 3) & 0xF;
  if (v19 < 0xF)
    goto LABEL_28;
LABEL_25:
  if (!*(_WORD *)((char *)v5 + v17 + 14))
  {
LABEL_28:
    if (v23 == 1)
      goto LABEL_30;
    goto LABEL_29;
  }
  if (*(_QWORD *)((char *)v5 + *(unsigned __int16 *)((char *)v5 + v17 + 14)) != v23)
  {
LABEL_29:
    LODWORD(data) = v23;
    LOWORD(p_data) = 14;
    CC_SHA256_Update(a2, &p_data, 2u);
    result = CC_SHA256_Update(a2, &data, 4u);
    v25 = *v5;
    v17 = -v25;
    v19 = *(unsigned __int16 *)((char *)v5 - v25);
  }
LABEL_30:
  if (v19 < 7)
  {
    if (*((_DWORD *)this + 15))
    {
LABEL_34:
      LOWORD(data) = 6;
      CC_SHA256_Update(a2, &data, 2u);
      result = CC_SHA256_Update(a2, (char *)this + 60, 4u);
      v27 = *v5;
      v17 = -v27;
      v19 = *(unsigned __int16 *)((char *)v5 - v27);
    }
  }
  else
  {
    v26 = *(unsigned __int16 *)((char *)v5 + v17 + 6);
    if (*(_WORD *)((char *)v5 + v17 + 6))
      v26 = *(_QWORD *)((char *)v5 + v26);
    if (v26 != *((_DWORD *)this + 15))
      goto LABEL_34;
  }
  if (v19 < 9)
  {
    if (*((_DWORD *)this + 16))
    {
LABEL_39:
      LOWORD(data) = 8;
      CC_SHA256_Update(a2, &data, 2u);
      result = CC_SHA256_Update(a2, (char *)this + 64, 4u);
    }
  }
  else
  {
    v28 = *(unsigned __int16 *)((char *)v5 + v17 + 8);
    if (v28)
      v28 = *(_QWORD *)((char *)v5 + v28);
    if (v28 != *((_DWORD *)this + 16))
      goto LABEL_39;
  }
  v29 = *((_DWORD *)this + 14);
  if ((v29 & 4) != 0)
  {
    LODWORD(data) = (v29 >> 1) & 1;
    LOWORD(p_data) = 0x8000;
    CC_SHA256_Update(a2, &p_data, 2u);
    result = CC_SHA256_Update(a2, &data, 4u);
    v30 = *((_DWORD *)this + 14);
    if ((v30 & 4) != 0)
    {
      LODWORD(data) = (v30 >> 2) & 1;
      LOWORD(p_data) = -32767;
      CC_SHA256_Update(a2, &p_data, 2u);
      return CC_SHA256_Update(a2, &data, 4u);
    }
  }
  return result;
}

char *std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultObjectDescriptor(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  const char *v37;
  char *result;

  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_BYTE *)(v0 + 8) = 0;
  *(_OWORD *)(v0 + 16) = xmmword_232D73DA0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 80) = 256;
  *(_QWORD *)(v0 + 88) = 0;
  AGX::defaultObjectDescriptor(void)::_fbb = v0;
  *(_BYTE *)(v0 + 70) = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v0, 14, 1, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v0, 12, 1, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v0, 10, 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v0, 8, 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v0, 6, 0, 0);
  if (*(_BYTE *)(v0 + 80))
  {
    if (!*(_QWORD *)(v0 + 72))
      *(_QWORD *)(v0 + 72) = 1;
    v1 = *(_QWORD *)(v0 + 48);
    if (v1 == *(_QWORD *)(v0 + 56))
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
      v1 = *(_QWORD *)(v0 + 48);
    }
    *(_QWORD *)(v0 + 48) = v1 - 1;
    *(_BYTE *)(v1 - 1) = 0;
    v3 = *(_QWORD *)(v0 + 48);
    v2 = *(uint64_t **)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 32) - v3 + *(_QWORD *)(v0 + 40);
    if ((unint64_t)(v3 - (_QWORD)v2) <= 7)
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
      v2 = *(uint64_t **)(v0 + 56);
    }
    *v2 = v4 | 0x1A00000000;
    v5 = *(_QWORD *)(v0 + 56) + 8;
    *(_QWORD *)(v0 + 56) = v5;
    ++*(_DWORD *)(v0 + 64);
    v6 = *(unsigned __int16 *)(v0 + 68);
    if (v6 <= 0x1A)
      LOWORD(v6) = 26;
    *(_WORD *)(v0 + 68) = v6;
    if (*(_BYTE *)(v0 + 80))
    {
      if (!*(_QWORD *)(v0 + 72))
        *(_QWORD *)(v0 + 72) = 1;
      v7 = *(_QWORD *)(v0 + 48);
      if (v7 == v5)
      {
        flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
        v7 = *(_QWORD *)(v0 + 48);
      }
      *(_QWORD *)(v0 + 48) = v7 - 1;
      *(_BYTE *)(v7 - 1) = 0;
      v9 = *(_QWORD *)(v0 + 48);
      v8 = *(uint64_t **)(v0 + 56);
      v10 = *(_QWORD *)(v0 + 32) - v9 + *(_QWORD *)(v0 + 40);
      if ((unint64_t)(v9 - (_QWORD)v8) <= 7)
      {
        flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
        v8 = *(uint64_t **)(v0 + 56);
      }
      *v8 = v10 | 0x1800000000;
      v11 = *(_QWORD *)(v0 + 56) + 8;
      *(_QWORD *)(v0 + 56) = v11;
      ++*(_DWORD *)(v0 + 64);
      v12 = *(unsigned __int16 *)(v0 + 68);
      if (v12 <= 0x18)
        LOWORD(v12) = 24;
      *(_WORD *)(v0 + 68) = v12;
      if (*(_BYTE *)(v0 + 80))
      {
        if (!*(_QWORD *)(v0 + 72))
          *(_QWORD *)(v0 + 72) = 1;
        v13 = *(_QWORD *)(v0 + 48);
        if (v13 == v11)
        {
          flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
          v13 = *(_QWORD *)(v0 + 48);
        }
        *(_QWORD *)(v0 + 48) = v13 - 1;
        *(_BYTE *)(v13 - 1) = 0;
        v15 = *(_QWORD *)(v0 + 48);
        v14 = *(uint64_t **)(v0 + 56);
        v16 = *(_QWORD *)(v0 + 32) - v15 + *(_QWORD *)(v0 + 40);
        if ((unint64_t)(v15 - (_QWORD)v14) <= 7)
        {
          flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
          v14 = *(uint64_t **)(v0 + 56);
        }
        *v14 = v16 | 0x1600000000;
        v17 = *(_QWORD *)(v0 + 56) + 8;
        *(_QWORD *)(v0 + 56) = v17;
        ++*(_DWORD *)(v0 + 64);
        v18 = *(unsigned __int16 *)(v0 + 68);
        if (v18 <= 0x16)
          LOWORD(v18) = 22;
        *(_WORD *)(v0 + 68) = v18;
        if (*(_BYTE *)(v0 + 80))
        {
          if (!*(_QWORD *)(v0 + 72))
            *(_QWORD *)(v0 + 72) = 1;
          v19 = *(_QWORD *)(v0 + 48);
          if (v19 == v17)
          {
            flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
            v19 = *(_QWORD *)(v0 + 48);
          }
          *(_QWORD *)(v0 + 48) = v19 - 1;
          *(_BYTE *)(v19 - 1) = 0;
          v21 = *(_QWORD *)(v0 + 48);
          v20 = *(uint64_t **)(v0 + 56);
          v22 = *(_QWORD *)(v0 + 32) - v21 + *(_QWORD *)(v0 + 40);
          if ((unint64_t)(v21 - (_QWORD)v20) <= 7)
          {
            flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
            v20 = *(uint64_t **)(v0 + 56);
          }
          *v20 = v22 | 0x1400000000;
          v23 = *(_QWORD *)(v0 + 56) + 8;
          *(_QWORD *)(v0 + 56) = v23;
          ++*(_DWORD *)(v0 + 64);
          v24 = *(unsigned __int16 *)(v0 + 68);
          if (v24 <= 0x14)
            LOWORD(v24) = 20;
          *(_WORD *)(v0 + 68) = v24;
          if (*(_BYTE *)(v0 + 80))
          {
            if (!*(_QWORD *)(v0 + 72))
              *(_QWORD *)(v0 + 72) = 1;
            v25 = *(_QWORD *)(v0 + 48);
            if (v25 == v23)
            {
              flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
              v25 = *(_QWORD *)(v0 + 48);
            }
            *(_QWORD *)(v0 + 48) = v25 - 1;
            *(_BYTE *)(v25 - 1) = 0;
            v27 = *(_QWORD *)(v0 + 48);
            v26 = *(uint64_t **)(v0 + 56);
            v28 = *(_QWORD *)(v0 + 32) - v27 + *(_QWORD *)(v0 + 40);
            if ((unint64_t)(v27 - (_QWORD)v26) <= 7)
            {
              flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
              v26 = *(uint64_t **)(v0 + 56);
            }
            *v26 = v28 | 0x1000000000;
            v29 = *(_QWORD *)(v0 + 56) + 8;
            *(_QWORD *)(v0 + 56) = v29;
            ++*(_DWORD *)(v0 + 64);
            v30 = *(unsigned __int16 *)(v0 + 68);
            if (v30 <= 0x10)
              LOWORD(v30) = 16;
            *(_WORD *)(v0 + 68) = v30;
            if (*(_BYTE *)(v0 + 80))
            {
              if (!*(_QWORD *)(v0 + 72))
                *(_QWORD *)(v0 + 72) = 1;
              v31 = *(_QWORD *)(v0 + 48);
              if (v31 == v29)
              {
                flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                v31 = *(_QWORD *)(v0 + 48);
              }
              *(_QWORD *)(v0 + 48) = v31 - 1;
              *(_BYTE *)(v31 - 1) = 0;
              v33 = *(_QWORD *)(v0 + 48);
              v32 = *(uint64_t **)(v0 + 56);
              v34 = *(_QWORD *)(v0 + 32) - v33 + *(_QWORD *)(v0 + 40);
              if ((unint64_t)(v33 - (_QWORD)v32) <= 7)
              {
                flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                v32 = *(uint64_t **)(v0 + 56);
              }
              *v32 = v34 | 0x400000000;
              *(_QWORD *)(v0 + 56) += 8;
              ++*(_DWORD *)(v0 + 64);
              v35 = *(unsigned __int16 *)(v0 + 68);
              if (v35 <= 4)
                LOWORD(v35) = 4;
              *(_WORD *)(v0 + 68) = v35;
            }
          }
        }
      }
    }
  }
  v36 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v0, 0);
  result = flatbuffers::FlatBufferBuilder::Finish((char *)v0, v36, v37);
  AGX::defaultObjectDescriptor(void)::_desc = *(_QWORD *)(AGX::defaultObjectDescriptor(void)::_fbb + 48)
                                            + **(unsigned int **)(AGX::defaultObjectDescriptor(void)::_fbb + 48);
  return result;
}

void AGX::Impl::FragmentProgramKey::addToDigest(AGX::Impl::FragmentProgramKey *this, CC_SHA256state_st *c)
{
  unint64_t v4;
  unsigned int v5;
  int *v6;
  char *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  char v40;
  char **data;
  char *v42;

  v4 = atomic_load(&AGX::defaultFragmentDescriptor(void)::once);
  if (v4 != -1)
  {
    v42 = &v40;
    data = &v42;
    std::__call_once(&AGX::defaultFragmentDescriptor(void)::once, &data, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultFragmentDescriptor(void)::$_0 &&>>);
  }
  v5 = 0;
  v6 = (int *)AGX::defaultFragmentDescriptor(void)::_desc;
  LODWORD(v42) = 0;
  do
  {
    if (*((_DWORD *)this + v5 + 16))
    {
      LOWORD(data) = 22;
      CC_SHA256_Update(c, &data, 2u);
      CC_SHA256_Update(c, &v42, 4u);
      v7 = (char *)this + 4 * v42 + 64;
      LOWORD(data) = 22;
      CC_SHA256_Update(c, &data, 2u);
      CC_SHA256_Update(c, v7, 4u);
      v5 = v42;
    }
    LODWORD(v42) = ++v5;
  }
  while (v5 < 8);
  if (*((_DWORD *)this + 12))
  {
    LOWORD(v42) = 22;
    CC_SHA256_Update(c, &v42, 2u);
    CC_SHA256_Update(c, (char *)this + 48, 4u);
  }
  v8 = *((_DWORD *)this + 10);
  v9 = (v8 >> 6) & 0x1F;
  v10 = *v6;
  v11 = *(unsigned __int16 *)((char *)v6 - v10);
  if (v11 < 0x27 || !*(_WORD *)((char *)v6 - v10 + 38))
  {
    if (v9 != 1)
      goto LABEL_13;
LABEL_15:
    v14 = -v10;
    goto LABEL_16;
  }
  v12 = *((unsigned __int8 *)v6 + *(unsigned __int16 *)((char *)v6 - v10 + 38));
  if (v12 > 0xF)
  {
    if (v9)
      goto LABEL_13;
    goto LABEL_15;
  }
  if (v9 == dword_232D7C690[v12])
    goto LABEL_15;
LABEL_13:
  LODWORD(v42) = (v8 >> 6) & 0x1F;
  LOWORD(data) = 38;
  CC_SHA256_Update(c, &data, 2u);
  CC_SHA256_Update(c, &v42, 4u);
  v8 = *((_DWORD *)this + 10);
  v13 = *v6;
  v14 = -v13;
  v11 = *(unsigned __int16 *)((char *)v6 - v13);
LABEL_16:
  v15 = (unsigned __int16)v8 >> 12;
  if (v11 >= 0x2B && *(_WORD *)((char *)v6 + v14 + 42))
  {
    v16 = *((unsigned __int8 *)v6 + *(unsigned __int16 *)((char *)v6 + v14 + 42));
    if (v16 > 7)
    {
      if (!((unsigned __int16)v8 >> 12))
        goto LABEL_23;
    }
    else if (v15 == dword_232D7C6D0[v16])
    {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v15 != 1)
  {
LABEL_22:
    LODWORD(v42) = (unsigned __int16)v8 >> 12;
    LOWORD(data) = 42;
    CC_SHA256_Update(c, &data, 2u);
    CC_SHA256_Update(c, &v42, 4u);
    v8 = *((_DWORD *)this + 10);
    v17 = *v6;
    v14 = -v17;
    v11 = *(unsigned __int16 *)((char *)v6 - v17);
  }
LABEL_23:
  if (v11 >= 9 && *(_WORD *)((char *)v6 + v14 + 8))
  {
    v18 = v8 & 1;
    if ((v18 == 0) != (*((_BYTE *)v6 + *(unsigned __int16 *)((char *)v6 + v14 + 8)) != 0))
      goto LABEL_30;
    goto LABEL_29;
  }
  if ((v8 & 1) != 0)
  {
    v18 = 1;
LABEL_29:
    LODWORD(v42) = v18;
    LOWORD(data) = 8;
    CC_SHA256_Update(c, &data, 2u);
    CC_SHA256_Update(c, &v42, 4u);
    v8 = *((_DWORD *)this + 10);
    v19 = *v6;
    v14 = -v19;
    v11 = *(unsigned __int16 *)((char *)v6 - v19);
  }
LABEL_30:
  if (v11 < 0xB || !*(_WORD *)((char *)v6 + v14 + 10))
  {
    if ((v8 & 2) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (((v8 & 2) == 0) == (*((_BYTE *)v6 + *(unsigned __int16 *)((char *)v6 + v14 + 10)) != 0))
  {
LABEL_35:
    LODWORD(v42) = (v8 >> 1) & 1;
    LOWORD(data) = 10;
    CC_SHA256_Update(c, &data, 2u);
    CC_SHA256_Update(c, &v42, 4u);
    v8 = *((_DWORD *)this + 10);
    v20 = *v6;
    v14 = -v20;
    v11 = *(unsigned __int16 *)((char *)v6 - v20);
  }
LABEL_36:
  v21 = (v8 >> 2) & 1;
  v22 = (char *)v6 + v14;
  if (v11 < 0x13)
  {
    if (v11 < 0x11)
      goto LABEL_44;
    goto LABEL_42;
  }
  if (!*((_WORD *)v22 + 9) || *(float *)((char *)v6 + *((unsigned __int16 *)v22 + 9)) == 1.0)
  {
LABEL_42:
    if (*((_WORD *)v22 + 8))
    {
      v23 = *(_QWORD *)((char *)v6 + *((unsigned __int16 *)v22 + 8));
      goto LABEL_45;
    }
LABEL_44:
    v23 = -1;
LABEL_45:
    if (v21 == (v23 != 0xFFFFFFFFLL))
      goto LABEL_47;
    goto LABEL_46;
  }
  if (v21 != 1)
  {
LABEL_46:
    LODWORD(v42) = v21;
    LOWORD(data) = 18;
    CC_SHA256_Update(c, &data, 2u);
    CC_SHA256_Update(c, &v42, 4u);
  }
LABEL_47:
  if (*((_QWORD *)this + 7))
  {
    LOWORD(v42) = 28;
    CC_SHA256_Update(c, &v42, 2u);
    CC_SHA256_Update(c, (char *)this + 56, 8u);
  }
  v24 = *v6;
  v25 = *(unsigned __int16 *)((char *)v6 - v24);
  if (v25 < 0x1F)
  {
    LODWORD(v26) = 0;
  }
  else
  {
    v26 = *(unsigned __int16 *)((char *)v6 - v24 + 30);
    if (*(_WORD *)((char *)v6 - v24 + 30))
      LODWORD(v26) = *((unsigned __int8 *)v6 + v26) != 0;
  }
  if (*((unsigned __int8 *)this + 224) == (_DWORD)v26)
  {
    v27 = -v24;
  }
  else
  {
    LOWORD(v42) = 30;
    CC_SHA256_Update(c, &v42, 2u);
    CC_SHA256_Update(c, (char *)this + 224, 1u);
    v28 = *v6;
    v27 = -v28;
    v25 = *(unsigned __int16 *)((char *)v6 - v28);
  }
  v29 = *((_DWORD *)this + 26);
  if (v25 >= 0x33 && *(_WORD *)((char *)v6 + v27 + 50))
  {
    if (((*((_DWORD *)this + 26) & 4) == 0) != (*((_BYTE *)v6 + *(unsigned __int16 *)((char *)v6 + v27 + 50)) != 0))
      goto LABEL_63;
  }
  else if ((v29 & 4) == 0)
  {
    goto LABEL_62;
  }
  LODWORD(v42) = (v29 >> 2) & 1;
  LOWORD(data) = 50;
  CC_SHA256_Update(c, &data, 2u);
  CC_SHA256_Update(c, &v42, 4u);
  v29 = *((_DWORD *)this + 26);
  v30 = *v6;
  v27 = -v30;
  v25 = *(unsigned __int16 *)((char *)v6 - v30);
LABEL_62:
  if (v25 < 0x21)
    goto LABEL_66;
LABEL_63:
  if (!*(_WORD *)((char *)v6 + v27 + 32))
  {
LABEL_66:
    if ((v29 & 0x40) == 0)
      goto LABEL_68;
    goto LABEL_67;
  }
  if (((v29 & 0x40) == 0) == (*((_BYTE *)v6 + *(unsigned __int16 *)((char *)v6 + v27 + 32)) != 0))
  {
LABEL_67:
    LODWORD(v42) = (v29 >> 6) & 1;
    LOWORD(data) = 32;
    CC_SHA256_Update(c, &data, 2u);
    CC_SHA256_Update(c, &v42, 4u);
  }
LABEL_68:
  v31 = *((_DWORD *)this + 36);
  if ((_BYTE)v31)
  {
    LOWORD(v42) = 22;
    CC_SHA256_Update(c, &v42, 2u);
    CC_SHA256_Update(c, (char *)this + 112, 0x20u);
    LODWORD(v42) = *((unsigned __int8 *)this + 144);
    LOWORD(data) = 22;
    CC_SHA256_Update(c, &data, 2u);
    CC_SHA256_Update(c, &v42, 4u);
    v31 = *((_DWORD *)this + 36);
  }
  v32 = (v31 >> 8) & 0xF;
  v33 = *v6;
  v34 = *(unsigned __int16 *)((char *)v6 - v33);
  if (v34 >= 0xD && *(_WORD *)((char *)v6 - v33 + 12))
  {
    if (*(_QWORD *)((char *)v6 + *(unsigned __int16 *)((char *)v6 - v33 + 12)) != v32)
    {
LABEL_73:
      LODWORD(v42) = (v31 >> 8) & 0xF;
      LOWORD(data) = 12;
      CC_SHA256_Update(c, &data, 2u);
      CC_SHA256_Update(c, &v42, 4u);
      v31 = *((_DWORD *)this + 36);
      v35 = *v6;
      v36 = -v35;
      v34 = *(unsigned __int16 *)((char *)v6 - v35);
      goto LABEL_76;
    }
  }
  else if (v32 != 1)
  {
    goto LABEL_73;
  }
  v36 = -v33;
LABEL_76:
  v37 = (unsigned __int16)v31 >> 12;
  if (v34 < 0xF)
  {
    if (v37)
    {
LABEL_80:
      LODWORD(v42) = v37;
      LOWORD(data) = 14;
      CC_SHA256_Update(c, &data, 2u);
      CC_SHA256_Update(c, &v42, 4u);
    }
  }
  else
  {
    v38 = *(unsigned __int16 *)((char *)v6 + v36 + 14);
    if (*(_WORD *)((char *)v6 + v36 + 14))
      v38 = *(_QWORD *)((char *)v6 + v38);
    if (v38 != v37)
      goto LABEL_80;
  }
  v39 = *((_DWORD *)this + 26);
  if ((v39 & 0x100) != 0)
  {
    LODWORD(v42) = (v39 >> 8) & 1;
    LOWORD(data) = 0x8000;
    CC_SHA256_Update(c, &data, 2u);
    CC_SHA256_Update(c, &v42, 4u);
  }
}

char *std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultFragmentDescriptor(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  int v98;
  const char *v99;
  char *result;

  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_BYTE *)(v0 + 8) = 0;
  *(_OWORD *)(v0 + 16) = xmmword_232D73DA0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 80) = 256;
  *(_QWORD *)(v0 + 88) = 0;
  AGX::defaultFragmentDescriptor(void)::_fbb = v0;
  *(_BYTE *)(v0 + 70) = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v0, 16, -1, -1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v0, 14, 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v0, 12, 1, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v0, 4, 1, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)v0, 52);
  if (!*(_BYTE *)(v0 + 80))
    goto LABEL_17;
  if (*(_QWORD *)(v0 + 72) <= 3uLL)
    *(_QWORD *)(v0 + 72) = 4;
  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(uint64_t **)(v0 + 56);
  v3 = ((_BYTE)v2 - (*(_DWORD *)(v0 + 32) + *(_DWORD *)(v0 + 40))) & 3;
  if (v2 - (uint64_t)v1 < v3)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, ((_BYTE)v2 - (*(_DWORD *)(v0 + 32) + *(_DWORD *)(v0 + 40))) & 3);
    *(_QWORD *)(v0 + 48) -= v3;
    goto LABEL_7;
  }
  v4 = v2 - v3;
  *(_QWORD *)(v0 + 48) = v4;
  if (v3)
  {
LABEL_7:
    v5 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v0 + 48) + v5++) = 0;
    while (v3 != v5);
    v4 = *(_QWORD *)(v0 + 48);
    v1 = *(uint64_t **)(v0 + 56);
  }
  if ((unint64_t)(v4 - (_QWORD)v1) <= 3)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 4uLL);
    v4 = *(_QWORD *)(v0 + 48);
    v1 = *(uint64_t **)(v0 + 56);
  }
  *(_DWORD *)(v4 - 4) = 1065353216;
  v6 = v4 - 4;
  *(_QWORD *)(v0 + 48) = v6;
  v7 = *(_QWORD *)(v0 + 32) - v6 + *(_QWORD *)(v0 + 40);
  if ((unint64_t)(v6 - (_QWORD)v1) <= 7)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
    v1 = *(uint64_t **)(v0 + 56);
  }
  *v1 = v7 | 0x1200000000;
  *(_QWORD *)(v0 + 56) += 8;
  ++*(_DWORD *)(v0 + 64);
  v8 = *(unsigned __int16 *)(v0 + 68);
  if (v8 <= 0x12)
    LOWORD(v8) = 18;
  *(_WORD *)(v0 + 68) = v8;
LABEL_17:
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)v0, 26);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)v0, 24);
  if (*(_BYTE *)(v0 + 80))
  {
    if (!*(_QWORD *)(v0 + 72))
      *(_QWORD *)(v0 + 72) = 1;
    v9 = *(_QWORD *)(v0 + 48);
    if (v9 == *(_QWORD *)(v0 + 56))
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
      v9 = *(_QWORD *)(v0 + 48);
    }
    *(_QWORD *)(v0 + 48) = v9 - 1;
    *(_BYTE *)(v9 - 1) = 0;
    v11 = *(_QWORD *)(v0 + 48);
    v10 = *(uint64_t **)(v0 + 56);
    v12 = *(_QWORD *)(v0 + 32) - v11 + *(_QWORD *)(v0 + 40);
    if ((unint64_t)(v11 - (_QWORD)v10) <= 7)
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
      v10 = *(uint64_t **)(v0 + 56);
    }
    *v10 = v12 | 0x3200000000;
    v13 = *(_QWORD *)(v0 + 56) + 8;
    *(_QWORD *)(v0 + 56) = v13;
    ++*(_DWORD *)(v0 + 64);
    v14 = *(unsigned __int16 *)(v0 + 68);
    if (v14 <= 0x32)
      LOWORD(v14) = 50;
    *(_WORD *)(v0 + 68) = v14;
    if (*(_BYTE *)(v0 + 80))
    {
      if (!*(_QWORD *)(v0 + 72))
        *(_QWORD *)(v0 + 72) = 1;
      v15 = *(_QWORD *)(v0 + 48);
      if (v15 == v13)
      {
        flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
        v15 = *(_QWORD *)(v0 + 48);
      }
      *(_QWORD *)(v0 + 48) = v15 - 1;
      *(_BYTE *)(v15 - 1) = 0;
      v17 = *(_QWORD *)(v0 + 48);
      v16 = *(uint64_t **)(v0 + 56);
      v18 = *(_QWORD *)(v0 + 32) - v17 + *(_QWORD *)(v0 + 40);
      if ((unint64_t)(v17 - (_QWORD)v16) <= 7)
      {
        flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
        v16 = *(uint64_t **)(v0 + 56);
      }
      *v16 = v18 | 0x3000000000;
      v19 = *(_QWORD *)(v0 + 56) + 8;
      *(_QWORD *)(v0 + 56) = v19;
      ++*(_DWORD *)(v0 + 64);
      v20 = *(unsigned __int16 *)(v0 + 68);
      if (v20 <= 0x30)
        LOWORD(v20) = 48;
      *(_WORD *)(v0 + 68) = v20;
      if (*(_BYTE *)(v0 + 80))
      {
        if (!*(_QWORD *)(v0 + 72))
          *(_QWORD *)(v0 + 72) = 1;
        v21 = *(_QWORD *)(v0 + 48);
        if (v21 == v19)
        {
          flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
          v21 = *(_QWORD *)(v0 + 48);
        }
        *(_QWORD *)(v0 + 48) = v21 - 1;
        *(_BYTE *)(v21 - 1) = 0;
        v23 = *(_QWORD *)(v0 + 48);
        v22 = *(uint64_t **)(v0 + 56);
        v24 = *(_QWORD *)(v0 + 32) - v23 + *(_QWORD *)(v0 + 40);
        if ((unint64_t)(v23 - (_QWORD)v22) <= 7)
        {
          flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
          v22 = *(uint64_t **)(v0 + 56);
        }
        *v22 = v24 | 0x2E00000000;
        v25 = *(_QWORD *)(v0 + 56) + 8;
        *(_QWORD *)(v0 + 56) = v25;
        ++*(_DWORD *)(v0 + 64);
        v26 = *(unsigned __int16 *)(v0 + 68);
        if (v26 <= 0x2E)
          LOWORD(v26) = 46;
        *(_WORD *)(v0 + 68) = v26;
        if (*(_BYTE *)(v0 + 80))
        {
          if (!*(_QWORD *)(v0 + 72))
            *(_QWORD *)(v0 + 72) = 1;
          v27 = *(_QWORD *)(v0 + 48);
          if (v27 == v25)
          {
            flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
            v27 = *(_QWORD *)(v0 + 48);
          }
          *(_QWORD *)(v0 + 48) = v27 - 1;
          *(_BYTE *)(v27 - 1) = 0;
          v29 = *(_QWORD *)(v0 + 48);
          v28 = *(uint64_t **)(v0 + 56);
          v30 = *(_QWORD *)(v0 + 32) - v29 + *(_QWORD *)(v0 + 40);
          if ((unint64_t)(v29 - (_QWORD)v28) <= 7)
          {
            flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
            v28 = *(uint64_t **)(v0 + 56);
          }
          *v28 = v30 | 0x2C00000000;
          v31 = *(_QWORD *)(v0 + 56) + 8;
          *(_QWORD *)(v0 + 56) = v31;
          ++*(_DWORD *)(v0 + 64);
          v32 = *(unsigned __int16 *)(v0 + 68);
          if (v32 <= 0x2C)
            LOWORD(v32) = 44;
          *(_WORD *)(v0 + 68) = v32;
          if (*(_BYTE *)(v0 + 80))
          {
            if (!*(_QWORD *)(v0 + 72))
              *(_QWORD *)(v0 + 72) = 1;
            v33 = *(_QWORD *)(v0 + 48);
            if (v33 == v31)
            {
              flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
              v33 = *(_QWORD *)(v0 + 48);
            }
            *(_QWORD *)(v0 + 48) = v33 - 1;
            *(_BYTE *)(v33 - 1) = 0;
            v35 = *(_QWORD *)(v0 + 48);
            v34 = *(uint64_t **)(v0 + 56);
            v36 = *(_QWORD *)(v0 + 32) - v35 + *(_QWORD *)(v0 + 40);
            if ((unint64_t)(v35 - (_QWORD)v34) <= 7)
            {
              flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
              v34 = *(uint64_t **)(v0 + 56);
            }
            *v34 = v36 | 0x2A00000000;
            v37 = *(_QWORD *)(v0 + 56) + 8;
            *(_QWORD *)(v0 + 56) = v37;
            ++*(_DWORD *)(v0 + 64);
            v38 = *(unsigned __int16 *)(v0 + 68);
            if (v38 <= 0x2A)
              LOWORD(v38) = 42;
            *(_WORD *)(v0 + 68) = v38;
            if (*(_BYTE *)(v0 + 80))
            {
              if (!*(_QWORD *)(v0 + 72))
                *(_QWORD *)(v0 + 72) = 1;
              v39 = *(_QWORD *)(v0 + 48);
              if (v39 == v37)
              {
                flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                v39 = *(_QWORD *)(v0 + 48);
              }
              *(_QWORD *)(v0 + 48) = v39 - 1;
              *(_BYTE *)(v39 - 1) = 0;
              v41 = *(_QWORD *)(v0 + 48);
              v40 = *(uint64_t **)(v0 + 56);
              v42 = *(_QWORD *)(v0 + 32) - v41 + *(_QWORD *)(v0 + 40);
              if ((unint64_t)(v41 - (_QWORD)v40) <= 7)
              {
                flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                v40 = *(uint64_t **)(v0 + 56);
              }
              *v40 = v42 | 0x2800000000;
              v43 = *(_QWORD *)(v0 + 56) + 8;
              *(_QWORD *)(v0 + 56) = v43;
              ++*(_DWORD *)(v0 + 64);
              v44 = *(unsigned __int16 *)(v0 + 68);
              if (v44 <= 0x28)
                LOWORD(v44) = 40;
              *(_WORD *)(v0 + 68) = v44;
              if (*(_BYTE *)(v0 + 80))
              {
                if (!*(_QWORD *)(v0 + 72))
                  *(_QWORD *)(v0 + 72) = 1;
                v45 = *(_QWORD *)(v0 + 48);
                if (v45 == v43)
                {
                  flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                  v45 = *(_QWORD *)(v0 + 48);
                }
                *(_QWORD *)(v0 + 48) = v45 - 1;
                *(_BYTE *)(v45 - 1) = 0;
                v47 = *(_QWORD *)(v0 + 48);
                v46 = *(uint64_t **)(v0 + 56);
                v48 = *(_QWORD *)(v0 + 32) - v47 + *(_QWORD *)(v0 + 40);
                if ((unint64_t)(v47 - (_QWORD)v46) <= 7)
                {
                  flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                  v46 = *(uint64_t **)(v0 + 56);
                }
                *v46 = v48 | 0x2600000000;
                v49 = *(_QWORD *)(v0 + 56) + 8;
                *(_QWORD *)(v0 + 56) = v49;
                ++*(_DWORD *)(v0 + 64);
                v50 = *(unsigned __int16 *)(v0 + 68);
                if (v50 <= 0x26)
                  LOWORD(v50) = 38;
                *(_WORD *)(v0 + 68) = v50;
                if (*(_BYTE *)(v0 + 80))
                {
                  if (!*(_QWORD *)(v0 + 72))
                    *(_QWORD *)(v0 + 72) = 1;
                  v51 = *(_QWORD *)(v0 + 48);
                  if (v51 == v49)
                  {
                    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                    v51 = *(_QWORD *)(v0 + 48);
                  }
                  *(_QWORD *)(v0 + 48) = v51 - 1;
                  *(_BYTE *)(v51 - 1) = 0;
                  v53 = *(_QWORD *)(v0 + 48);
                  v52 = *(uint64_t **)(v0 + 56);
                  v54 = *(_QWORD *)(v0 + 32) - v53 + *(_QWORD *)(v0 + 40);
                  if ((unint64_t)(v53 - (_QWORD)v52) <= 7)
                  {
                    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                    v52 = *(uint64_t **)(v0 + 56);
                  }
                  *v52 = v54 | 0x2400000000;
                  v55 = *(_QWORD *)(v0 + 56) + 8;
                  *(_QWORD *)(v0 + 56) = v55;
                  ++*(_DWORD *)(v0 + 64);
                  v56 = *(unsigned __int16 *)(v0 + 68);
                  if (v56 <= 0x24)
                    LOWORD(v56) = 36;
                  *(_WORD *)(v0 + 68) = v56;
                  if (*(_BYTE *)(v0 + 80))
                  {
                    if (!*(_QWORD *)(v0 + 72))
                      *(_QWORD *)(v0 + 72) = 1;
                    v57 = *(_QWORD *)(v0 + 48);
                    if (v57 == v55)
                    {
                      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                      v57 = *(_QWORD *)(v0 + 48);
                    }
                    *(_QWORD *)(v0 + 48) = v57 - 1;
                    *(_BYTE *)(v57 - 1) = 0;
                    v59 = *(_QWORD *)(v0 + 48);
                    v58 = *(uint64_t **)(v0 + 56);
                    v60 = *(_QWORD *)(v0 + 32) - v59 + *(_QWORD *)(v0 + 40);
                    if ((unint64_t)(v59 - (_QWORD)v58) <= 7)
                    {
                      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                      v58 = *(uint64_t **)(v0 + 56);
                    }
                    *v58 = v60 | 0x2200000000;
                    v61 = *(_QWORD *)(v0 + 56) + 8;
                    *(_QWORD *)(v0 + 56) = v61;
                    ++*(_DWORD *)(v0 + 64);
                    v62 = *(unsigned __int16 *)(v0 + 68);
                    if (v62 <= 0x22)
                      LOWORD(v62) = 34;
                    *(_WORD *)(v0 + 68) = v62;
                    if (*(_BYTE *)(v0 + 80))
                    {
                      if (!*(_QWORD *)(v0 + 72))
                        *(_QWORD *)(v0 + 72) = 1;
                      v63 = *(_QWORD *)(v0 + 48);
                      if (v63 == v61)
                      {
                        flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                        v63 = *(_QWORD *)(v0 + 48);
                      }
                      *(_QWORD *)(v0 + 48) = v63 - 1;
                      *(_BYTE *)(v63 - 1) = 0;
                      v65 = *(_QWORD *)(v0 + 48);
                      v64 = *(uint64_t **)(v0 + 56);
                      v66 = *(_QWORD *)(v0 + 32) - v65 + *(_QWORD *)(v0 + 40);
                      if ((unint64_t)(v65 - (_QWORD)v64) <= 7)
                      {
                        flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                        v64 = *(uint64_t **)(v0 + 56);
                      }
                      *v64 = v66 | 0x2000000000;
                      v67 = *(_QWORD *)(v0 + 56) + 8;
                      *(_QWORD *)(v0 + 56) = v67;
                      ++*(_DWORD *)(v0 + 64);
                      v68 = *(unsigned __int16 *)(v0 + 68);
                      if (v68 <= 0x20)
                        LOWORD(v68) = 32;
                      *(_WORD *)(v0 + 68) = v68;
                      if (*(_BYTE *)(v0 + 80))
                      {
                        if (!*(_QWORD *)(v0 + 72))
                          *(_QWORD *)(v0 + 72) = 1;
                        v69 = *(_QWORD *)(v0 + 48);
                        if (v69 == v67)
                        {
                          flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                          v69 = *(_QWORD *)(v0 + 48);
                        }
                        *(_QWORD *)(v0 + 48) = v69 - 1;
                        *(_BYTE *)(v69 - 1) = 0;
                        v71 = *(_QWORD *)(v0 + 48);
                        v70 = *(uint64_t **)(v0 + 56);
                        v72 = *(_QWORD *)(v0 + 32) - v71 + *(_QWORD *)(v0 + 40);
                        if ((unint64_t)(v71 - (_QWORD)v70) <= 7)
                        {
                          flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                          v70 = *(uint64_t **)(v0 + 56);
                        }
                        *v70 = v72 | 0x1E00000000;
                        v73 = *(_QWORD *)(v0 + 56) + 8;
                        *(_QWORD *)(v0 + 56) = v73;
                        ++*(_DWORD *)(v0 + 64);
                        v74 = *(unsigned __int16 *)(v0 + 68);
                        if (v74 <= 0x1E)
                          LOWORD(v74) = 30;
                        *(_WORD *)(v0 + 68) = v74;
                        if (*(_BYTE *)(v0 + 80))
                        {
                          if (!*(_QWORD *)(v0 + 72))
                            *(_QWORD *)(v0 + 72) = 1;
                          v75 = *(_QWORD *)(v0 + 48);
                          if (v75 == v73)
                          {
                            flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                            v75 = *(_QWORD *)(v0 + 48);
                          }
                          *(_QWORD *)(v0 + 48) = v75 - 1;
                          *(_BYTE *)(v75 - 1) = 0;
                          v77 = *(_QWORD *)(v0 + 48);
                          v76 = *(uint64_t **)(v0 + 56);
                          v78 = *(_QWORD *)(v0 + 32) - v77 + *(_QWORD *)(v0 + 40);
                          if ((unint64_t)(v77 - (_QWORD)v76) <= 7)
                          {
                            flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                            v76 = *(uint64_t **)(v0 + 56);
                          }
                          *v76 = v78 | 0x1400000000;
                          v79 = *(_QWORD *)(v0 + 56) + 8;
                          *(_QWORD *)(v0 + 56) = v79;
                          ++*(_DWORD *)(v0 + 64);
                          v80 = *(unsigned __int16 *)(v0 + 68);
                          if (v80 <= 0x14)
                            LOWORD(v80) = 20;
                          *(_WORD *)(v0 + 68) = v80;
                          if (*(_BYTE *)(v0 + 80))
                          {
                            if (!*(_QWORD *)(v0 + 72))
                              *(_QWORD *)(v0 + 72) = 1;
                            v81 = *(_QWORD *)(v0 + 48);
                            if (v81 == v79)
                            {
                              flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                              v81 = *(_QWORD *)(v0 + 48);
                            }
                            *(_QWORD *)(v0 + 48) = v81 - 1;
                            *(_BYTE *)(v81 - 1) = 0;
                            v83 = *(_QWORD *)(v0 + 48);
                            v82 = *(uint64_t **)(v0 + 56);
                            v84 = *(_QWORD *)(v0 + 32) - v83 + *(_QWORD *)(v0 + 40);
                            if ((unint64_t)(v83 - (_QWORD)v82) <= 7)
                            {
                              flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                              v82 = *(uint64_t **)(v0 + 56);
                            }
                            *v82 = v84 | 0xA00000000;
                            v85 = *(_QWORD *)(v0 + 56) + 8;
                            *(_QWORD *)(v0 + 56) = v85;
                            ++*(_DWORD *)(v0 + 64);
                            v86 = *(unsigned __int16 *)(v0 + 68);
                            if (v86 <= 0xA)
                              LOWORD(v86) = 10;
                            *(_WORD *)(v0 + 68) = v86;
                            if (*(_BYTE *)(v0 + 80))
                            {
                              if (!*(_QWORD *)(v0 + 72))
                                *(_QWORD *)(v0 + 72) = 1;
                              v87 = *(_QWORD *)(v0 + 48);
                              if (v87 == v85)
                              {
                                flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                                v87 = *(_QWORD *)(v0 + 48);
                              }
                              *(_QWORD *)(v0 + 48) = v87 - 1;
                              *(_BYTE *)(v87 - 1) = 0;
                              v89 = *(_QWORD *)(v0 + 48);
                              v88 = *(uint64_t **)(v0 + 56);
                              v90 = *(_QWORD *)(v0 + 32) - v89 + *(_QWORD *)(v0 + 40);
                              if ((unint64_t)(v89 - (_QWORD)v88) <= 7)
                              {
                                flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                                v88 = *(uint64_t **)(v0 + 56);
                              }
                              *v88 = v90 | 0x800000000;
                              v91 = *(_QWORD *)(v0 + 56) + 8;
                              *(_QWORD *)(v0 + 56) = v91;
                              ++*(_DWORD *)(v0 + 64);
                              v92 = *(unsigned __int16 *)(v0 + 68);
                              if (v92 <= 8)
                                LOWORD(v92) = 8;
                              *(_WORD *)(v0 + 68) = v92;
                              if (*(_BYTE *)(v0 + 80))
                              {
                                if (!*(_QWORD *)(v0 + 72))
                                  *(_QWORD *)(v0 + 72) = 1;
                                v93 = *(_QWORD *)(v0 + 48);
                                if (v93 == v91)
                                {
                                  flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
                                  v93 = *(_QWORD *)(v0 + 48);
                                }
                                *(_QWORD *)(v0 + 48) = v93 - 1;
                                *(_BYTE *)(v93 - 1) = 1;
                                v95 = *(_QWORD *)(v0 + 48);
                                v94 = *(uint64_t **)(v0 + 56);
                                v96 = *(_QWORD *)(v0 + 32) - v95 + *(_QWORD *)(v0 + 40);
                                if ((unint64_t)(v95 - (_QWORD)v94) <= 7)
                                {
                                  flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
                                  v94 = *(uint64_t **)(v0 + 56);
                                }
                                *v94 = v96 | 0x600000000;
                                *(_QWORD *)(v0 + 56) += 8;
                                ++*(_DWORD *)(v0 + 64);
                                v97 = *(unsigned __int16 *)(v0 + 68);
                                if (v97 <= 6)
                                  LOWORD(v97) = 6;
                                *(_WORD *)(v0 + 68) = v97;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v98 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v0, 0);
  result = flatbuffers::FlatBufferBuilder::Finish((char *)v0, v98, v99);
  AGX::defaultFragmentDescriptor(void)::_desc = *(_QWORD *)(AGX::defaultFragmentDescriptor(void)::_fbb + 48)
                                              + **(unsigned int **)(AGX::defaultFragmentDescriptor(void)::_fbb + 48);
  return result;
}

char *flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(char *this, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  if (!this[80])
    return this;
  v3 = (uint64_t)this;
  if (*((_QWORD *)this + 9) <= 1uLL)
    *((_QWORD *)this + 9) = 2;
  v5 = *((_QWORD *)this + 6);
  v4 = (unint64_t *)*((_QWORD *)this + 7);
  v6 = ((_BYTE)v5 - (*((_DWORD *)this + 8) + *((_DWORD *)this + 10))) & 1;
  if (v5 - (uint64_t)v4 < v6)
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, ((_BYTE)v5 - (*((_DWORD *)this + 8) + *((_DWORD *)this + 10))) & 1);
    *(_QWORD *)(v3 + 48) -= v6;
    goto LABEL_7;
  }
  v7 = v5 - v6;
  *((_QWORD *)this + 6) = v7;
  if (v6)
  {
LABEL_7:
    v8 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v3 + 48) + v8++) = 0;
    while (v6 != v8);
    v7 = *(_QWORD *)(v3 + 48);
    v4 = *(unint64_t **)(v3 + 56);
  }
  if ((unint64_t)(v7 - (_QWORD)v4) <= 1)
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v3, 2uLL);
    v7 = *(_QWORD *)(v3 + 48);
    v4 = *(unint64_t **)(v3 + 56);
  }
  *(_WORD *)(v7 - 2) = 0;
  v9 = v7 - 2;
  *(_QWORD *)(v3 + 48) = v9;
  v10 = *(_QWORD *)(v3 + 32) - v9 + *(_QWORD *)(v3 + 40);
  if ((unint64_t)(v9 - (_QWORD)v4) <= 7)
  {
    this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v3, 8uLL);
    v4 = *(unint64_t **)(v3 + 56);
  }
  *v4 = v10 | (unint64_t)(a2 << 32);
  *(_QWORD *)(v3 + 56) += 8;
  ++*(_DWORD *)(v3 + 64);
  v11 = *(unsigned __int16 *)(v3 + 68);
  if (v11 <= a2)
    LOWORD(v11) = a2;
  *(_WORD *)(v3 + 68) = v11;
  return this;
}

void AGX::Impl::ComputeProgramKey::addToDigest(AGX::Impl::ComputeProgramKey *this, CC_SHA256state_st *c)
{
  unint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  char **p_data;
  char *data;

  v4 = atomic_load(&AGX::defaultComputeDescriptor(void)::once);
  if (v4 != -1)
  {
    data = &v21;
    p_data = &data;
    std::__call_once(&AGX::defaultComputeDescriptor(void)::once, &p_data, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultComputeDescriptor(void)::$_0 &&>>);
  }
  v5 = (int *)AGX::defaultComputeDescriptor(void)::_desc;
  if (*((_QWORD *)this + 5))
  {
    LOWORD(data) = 12;
    CC_SHA256_Update(c, &data, 2u);
    CC_SHA256_Update(c, (char *)this + 40, 8u);
  }
  v6 = 0;
  v7 = *v5;
  v8 = (char *)v5 - v7;
  v9 = *(unsigned __int16 *)((char *)v5 - v7);
  if (v9 >= 7)
  {
    v6 = *((unsigned __int16 *)v8 + 3);
    if (*((_WORD *)v8 + 3))
      v6 = *(_QWORD *)((char *)v5 + v6);
  }
  if (v6 == *((_DWORD *)this + 12))
  {
    v10 = -v7;
  }
  else
  {
    LOWORD(data) = 6;
    CC_SHA256_Update(c, &data, 2u);
    CC_SHA256_Update(c, (char *)this + 48, 4u);
    v11 = *v5;
    v10 = -v11;
    v9 = *(unsigned __int16 *)((char *)v5 - v11);
  }
  v12 = *((_DWORD *)this + 14);
  if (v9 >= 5 && *(_WORD *)((char *)v5 + v10 + 4))
  {
    v13 = *((_DWORD *)this + 14) & 1;
    if ((v13 == 0) != (*((_BYTE *)v5 + *(unsigned __int16 *)((char *)v5 + v10 + 4)) != 0))
      goto LABEL_18;
    goto LABEL_17;
  }
  if ((v12 & 1) != 0)
  {
    v13 = 1;
LABEL_17:
    LODWORD(data) = v13;
    LOWORD(p_data) = 4;
    CC_SHA256_Update(c, &p_data, 2u);
    CC_SHA256_Update(c, &data, 4u);
    v12 = *((_DWORD *)this + 14);
    v14 = *v5;
    v10 = -v14;
    v9 = *(unsigned __int16 *)((char *)v5 - v14);
  }
LABEL_18:
  if (v9 >= 0x15 && *(_WORD *)((char *)v5 + v10 + 20))
  {
    if (((v12 & 2) == 0) != (*((_BYTE *)v5 + *(unsigned __int16 *)((char *)v5 + v10 + 20)) != 0))
    {
      v16 = (char *)this + 88;
      v15 = *((unsigned __int8 *)this + 88);
      goto LABEL_25;
    }
  }
  else if ((v12 & 2) == 0)
  {
    goto LABEL_24;
  }
  LODWORD(data) = (v12 >> 1) & 1;
  LOWORD(p_data) = 20;
  CC_SHA256_Update(c, &p_data, 2u);
  CC_SHA256_Update(c, &data, 4u);
  v17 = *v5;
  v10 = -v17;
  v9 = *(unsigned __int16 *)((char *)v5 - v17);
LABEL_24:
  v16 = (char *)this + 88;
  v15 = *((unsigned __int8 *)this + 88);
  if (v9 < 0xF)
  {
    if (!*((_BYTE *)this + 88))
      goto LABEL_29;
    goto LABEL_28;
  }
LABEL_25:
  v18 = *(unsigned __int16 *)((char *)v5 + v10 + 14);
  if (*(_WORD *)((char *)v5 + v10 + 14))
    LODWORD(v18) = *((unsigned __int8 *)v5 + v18) != 0;
  if (v15 != (_DWORD)v18)
  {
LABEL_28:
    LOWORD(data) = 14;
    CC_SHA256_Update(c, &data, 2u);
    CC_SHA256_Update(c, v16, 1u);
    v19 = *v5;
    v10 = -v19;
    v9 = *(unsigned __int16 *)((char *)v5 - v19);
  }
LABEL_29:
  v20 = *((_DWORD *)this + 14);
  if (v9 >= 0x11 && *(_WORD *)((char *)v5 + v10 + 16))
  {
    if (((*((_DWORD *)this + 14) & 0x20) == 0) != (*((_BYTE *)v5 + *(unsigned __int16 *)((char *)v5 + v10 + 16)) != 0))
      return;
  }
  else if ((v20 & 0x20) == 0)
  {
    return;
  }
  LODWORD(data) = (v20 >> 5) & 1;
  LOWORD(p_data) = 16;
  CC_SHA256_Update(c, &p_data, 2u);
  CC_SHA256_Update(c, &data, 4u);
}

char *std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultComputeDescriptor(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  const char *v31;
  char *result;

  v0 = operator new();
  *(_QWORD *)v0 = 0;
  *(_BYTE *)(v0 + 8) = 0;
  *(_OWORD *)(v0 + 16) = xmmword_232D73DA0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 80) = 256;
  *(_QWORD *)(v0 + 88) = 0;
  AGX::defaultComputeDescriptor(void)::_fbb = v0;
  *(_BYTE *)(v0 + 70) = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v0, 8, 1, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v0, 6, 0, 0);
  if (*(_BYTE *)(v0 + 80))
  {
    if (!*(_QWORD *)(v0 + 72))
      *(_QWORD *)(v0 + 72) = 1;
    v1 = *(_QWORD *)(v0 + 48);
    if (v1 == *(_QWORD *)(v0 + 56))
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
      v1 = *(_QWORD *)(v0 + 48);
    }
    *(_QWORD *)(v0 + 48) = v1 - 1;
    *(_BYTE *)(v1 - 1) = 0;
    v3 = *(_QWORD *)(v0 + 48);
    v2 = *(uint64_t **)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 32) - v3 + *(_QWORD *)(v0 + 40);
    if ((unint64_t)(v3 - (_QWORD)v2) <= 7)
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
      v2 = *(uint64_t **)(v0 + 56);
    }
    *v2 = v4 | 0x1400000000;
    v5 = *(_QWORD *)(v0 + 56) + 8;
    *(_QWORD *)(v0 + 56) = v5;
    ++*(_DWORD *)(v0 + 64);
    v6 = *(unsigned __int16 *)(v0 + 68);
    if (v6 <= 0x14)
      LOWORD(v6) = 20;
    *(_WORD *)(v0 + 68) = v6;
    if (*(_BYTE *)(v0 + 80))
    {
      if (!*(_QWORD *)(v0 + 72))
        *(_QWORD *)(v0 + 72) = 1;
      v7 = *(_QWORD *)(v0 + 48);
      if (v7 == v5)
      {
        flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
        v7 = *(_QWORD *)(v0 + 48);
      }
      *(_QWORD *)(v0 + 48) = v7 - 1;
      *(_BYTE *)(v7 - 1) = 0;
      v9 = *(_QWORD *)(v0 + 48);
      v8 = *(uint64_t **)(v0 + 56);
      v10 = *(_QWORD *)(v0 + 32) - v9 + *(_QWORD *)(v0 + 40);
      if ((unint64_t)(v9 - (_QWORD)v8) <= 7)
      {
        flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
        v8 = *(uint64_t **)(v0 + 56);
      }
      *v8 = v10 | 0x1200000000;
      v11 = *(_QWORD *)(v0 + 56) + 8;
      *(_QWORD *)(v0 + 56) = v11;
      ++*(_DWORD *)(v0 + 64);
      v12 = *(unsigned __int16 *)(v0 + 68);
      if (v12 <= 0x12)
        LOWORD(v12) = 18;
      *(_WORD *)(v0 + 68) = v12;
      if (*(_BYTE *)(v0 + 80))
      {
        if (!*(_QWORD *)(v0 + 72))
          *(_QWORD *)(v0 + 72) = 1;
        v13 = *(_QWORD *)(v0 + 48);
        if (v13 == v11)
        {
          flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
          v13 = *(_QWORD *)(v0 + 48);
        }
        *(_QWORD *)(v0 + 48) = v13 - 1;
        *(_BYTE *)(v13 - 1) = 0;
        v15 = *(_QWORD *)(v0 + 48);
        v14 = *(uint64_t **)(v0 + 56);
        v16 = *(_QWORD *)(v0 + 32) - v15 + *(_QWORD *)(v0 + 40);
        if ((unint64_t)(v15 - (_QWORD)v14) <= 7)
        {
          flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
          v14 = *(uint64_t **)(v0 + 56);
        }
        *v14 = v16 | 0x1000000000;
        v17 = *(_QWORD *)(v0 + 56) + 8;
        *(_QWORD *)(v0 + 56) = v17;
        ++*(_DWORD *)(v0 + 64);
        v18 = *(unsigned __int16 *)(v0 + 68);
        if (v18 <= 0x10)
          LOWORD(v18) = 16;
        *(_WORD *)(v0 + 68) = v18;
        if (*(_BYTE *)(v0 + 80))
        {
          if (!*(_QWORD *)(v0 + 72))
            *(_QWORD *)(v0 + 72) = 1;
          v19 = *(_QWORD *)(v0 + 48);
          if (v19 == v17)
          {
            flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
            v19 = *(_QWORD *)(v0 + 48);
          }
          *(_QWORD *)(v0 + 48) = v19 - 1;
          *(_BYTE *)(v19 - 1) = 0;
          v21 = *(_QWORD *)(v0 + 48);
          v20 = *(uint64_t **)(v0 + 56);
          v22 = *(_QWORD *)(v0 + 32) - v21 + *(_QWORD *)(v0 + 40);
          if ((unint64_t)(v21 - (_QWORD)v20) <= 7)
          {
            flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
            v20 = *(uint64_t **)(v0 + 56);
          }
          *v20 = v22 | 0xE00000000;
          v23 = *(_QWORD *)(v0 + 56) + 8;
          *(_QWORD *)(v0 + 56) = v23;
          ++*(_DWORD *)(v0 + 64);
          v24 = *(unsigned __int16 *)(v0 + 68);
          if (v24 <= 0xE)
            LOWORD(v24) = 14;
          *(_WORD *)(v0 + 68) = v24;
          if (*(_BYTE *)(v0 + 80))
          {
            if (!*(_QWORD *)(v0 + 72))
              *(_QWORD *)(v0 + 72) = 1;
            v25 = *(_QWORD *)(v0 + 48);
            if (v25 == v23)
            {
              flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 1uLL);
              v25 = *(_QWORD *)(v0 + 48);
            }
            *(_QWORD *)(v0 + 48) = v25 - 1;
            *(_BYTE *)(v25 - 1) = 0;
            v27 = *(_QWORD *)(v0 + 48);
            v26 = *(uint64_t **)(v0 + 56);
            v28 = *(_QWORD *)(v0 + 32) - v27 + *(_QWORD *)(v0 + 40);
            if ((unint64_t)(v27 - (_QWORD)v26) <= 7)
            {
              flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v0, 8uLL);
              v26 = *(uint64_t **)(v0 + 56);
            }
            *v26 = v28 | 0x400000000;
            *(_QWORD *)(v0 + 56) += 8;
            ++*(_DWORD *)(v0 + 64);
            v29 = *(unsigned __int16 *)(v0 + 68);
            if (v29 <= 4)
              LOWORD(v29) = 4;
            *(_WORD *)(v0 + 68) = v29;
          }
        }
      }
    }
  }
  v30 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v0, 0);
  result = flatbuffers::FlatBufferBuilder::Finish((char *)v0, v30, v31);
  AGX::defaultComputeDescriptor(void)::_desc = *(_QWORD *)(AGX::defaultComputeDescriptor(void)::_fbb + 48)
                                             + **(unsigned int **)(AGX::defaultComputeDescriptor(void)::_fbb + 48);
  return result;
}

uint64_t AGX::GetSerializedVertexFormat(AGX *this, _QWORD *a2, size_t *a3, unint64_t *a4, char **a5)
{
  unsigned __int16 *v5;
  unsigned int v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  int *v13;
  int *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int *v17;
  unsigned __int16 *v18;
  unsigned int v19;
  int *v20;
  unsigned __int16 *v21;
  unsigned int v22;
  _DWORD *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  int *v26;
  unsigned __int16 *v27;
  uint64_t v28;
  int *v29;
  unsigned __int16 *v30;
  unsigned int v31;
  unsigned int *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  unint64_t v43;
  int *v44;
  unsigned __int16 *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t i;
  int *v50;
  unsigned __int16 *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int *v63;
  unsigned __int16 *v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  unsigned __int16 *v68;
  uint64_t v69;
  unsigned __int16 *v70;
  unsigned int v71;
  unsigned __int8 v72;
  unsigned int v73;
  uint64_t v74;
  int *v75;
  unsigned __int16 *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int16 *v79;
  uint64_t v80;
  int v81;
  unsigned __int16 *v82;
  uint64_t v83;
  std::string::size_type size;
  void *v85;
  std::string *v86;
  uint64_t v87;
  int v88;
  std::string v89;
  std::string v90;
  std::string::value_type v91[8];
  std::string::value_type __s[8];
  std::string::value_type v93[4];
  std::string::value_type v94[6];
  std::string::value_type v95[2];
  std::string::value_type v96[2];
  std::string::value_type v97[2];

  memset(&v90, 0, sizeof(v90));
  memset(&v89, 0, sizeof(v89));
  *a3 = 0;
  *a2 = 0;
  v5 = (unsigned __int16 *)((char *)this - *(int *)this);
  v6 = *v5;
  if (v6 < 9 || !v5[4] || (v7 = *((unsigned __int8 *)this + v5[4]), (v7 - 3) <= 0xFFFFFFFD))
  {
    v8 = "Error: pipeline must be render or compute";
LABEL_5:
    std::string::append(&v90, v8);
    goto LABEL_6;
  }
  if (v7 != 1)
  {
    if (v6 < 0xB)
    {
      v14 = 0;
    }
    else
    {
      v14 = (int *)v5[5];
      if (v14)
        v14 = (int *)((char *)v14 + (_QWORD)this + *(unsigned int *)((char *)v14 + (_QWORD)this));
    }
    v24 = (unsigned __int16 *)((char *)v14 - *v14);
    if (*v24 >= 7u && (v25 = v24[3]) != 0)
      v26 = (int *)((char *)v14 + v25 + *(unsigned int *)((char *)v14 + v25));
    else
      v26 = 0;
    v27 = (unsigned __int16 *)((char *)v26 - *v26);
    if (*v27 >= 0xBu)
    {
      v28 = v27[5];
      if (v28)
      {
        v29 = (int *)((char *)v26 + v28 + *(unsigned int *)((char *)v26 + v28));
        v30 = (unsigned __int16 *)((char *)v29 - *v29);
        v31 = *v30;
        if (v30[2])
          v23 = (int *)((char *)v29 + v30[2] + *(unsigned int *)((char *)v29 + v30[2]));
        else
          v23 = 0;
        if (v31 >= 7)
        {
          if (v30[3])
            v32 = (unsigned int *)((char *)v29 + v30[3] + *(unsigned int *)((char *)v29 + v30[3]));
          else
            v32 = 0;
          if (v31 < 0xB)
          {
            v37 = 0;
            if (v31 < 9)
            {
              v33 = 0;
              v36 = 0;
              goto LABEL_51;
            }
          }
          else if (v30[5])
          {
            v37 = *((unsigned __int8 *)v29 + v30[5]);
          }
          else
          {
            v37 = 0;
          }
          v87 = v30[4];
          v33 = 0;
          if (v87)
            v36 = *(unsigned __int16 *)((char *)v29 + v87);
          else
            v36 = 0;
          goto LABEL_51;
        }
        v33 = 0;
        v32 = 0;
        goto LABEL_50;
      }
    }
LABEL_6:
    v9 = 0;
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_133;
    goto LABEL_7;
  }
  if (v6 < 0xB)
  {
    v13 = 0;
  }
  else
  {
    v13 = (int *)v5[5];
    if (v13)
      v13 = (int *)((char *)v13 + (_QWORD)this + *(unsigned int *)((char *)v13 + (_QWORD)this));
  }
  v15 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v15 >= 9u && (v16 = v15[4]) != 0)
    v17 = (int *)((char *)v13 + v16 + *(unsigned int *)((char *)v13 + v16));
  else
    v17 = 0;
  v18 = (unsigned __int16 *)((char *)v17 - *v17);
  v19 = *v18;
  if (v19 < 7 || !v18[3])
    goto LABEL_6;
  v20 = (int *)((char *)v17 + v18[3] + *(unsigned int *)((char *)v17 + v18[3]));
  v21 = (unsigned __int16 *)((char *)v20 - *v20);
  v22 = *v21;
  if (v22 < 5)
  {
    v23 = 0;
LABEL_45:
    v32 = 0;
    goto LABEL_46;
  }
  if (v21[2])
    v23 = (int *)((char *)v20 + v21[2] + *(unsigned int *)((char *)v20 + v21[2]));
  else
    v23 = 0;
  if (v22 < 7)
    goto LABEL_45;
  v34 = v21[3];
  if (!v34)
    goto LABEL_45;
  v32 = (unsigned int *)((char *)v20 + v34 + *(unsigned int *)((char *)v20 + v34));
LABEL_46:
  if (v19 < 0x13 || (v35 = v18[9]) == 0)
  {
    v33 = 0;
LABEL_50:
    v36 = 0;
    v37 = 0;
    goto LABEL_51;
  }
  v36 = 0;
  v37 = 0;
  v33 = *((unsigned __int8 *)v17 + v35);
LABEL_51:
  v38 = *v23;
  *(_WORD *)v97 = v33;
  *(_WORD *)v96 = v37;
  *(_WORD *)v95 = v36;
  if (!(_DWORD)v38)
  {
LABEL_103:
    v8 = "No active buffer found ";
    goto LABEL_5;
  }
  v39 = v23 + 1;
  v41 = v32 + 1;
  v40 = *v32;
  if ((_DWORD)v40)
  {
    v42 = 0;
    v43 = 0;
    while (1)
    {
      v44 = (_DWORD *)((char *)&v39[v42] + v39[v42]);
      v45 = (unsigned __int16 *)((char *)v44 - *v44);
      v46 = *v45;
      if (v46 > 4 && v45[2] && *((_BYTE *)v44 + v45[2]))
      {
        if (v46 < 9 || (v47 = v45[4]) == 0)
        {
          LOBYTE(v48) = 0;
LABEL_63:
          v43 |= 1 << v48;
          goto LABEL_64;
        }
        v48 = *(int *)((char *)v44 + v47);
        if (v48 <= 0x1E)
          goto LABEL_63;
      }
LABEL_64:
      for (i = 0; i != v40; ++i)
      {
        v50 = (int *)((char *)&v41[i] + v41[i]);
        v51 = (unsigned __int16 *)((char *)v50 - *v50);
        if (*v51 >= 9u)
        {
          v52 = v51[4];
          if (v52)
          {
            if (*(_QWORD *)((char *)v50 + v52))
              continue;
          }
        }
        if (i >= 0x1F)
LABEL_145:
          abort();
        v43 &= ~(1 << i);
      }
      if (++v42 == v38)
        goto LABEL_82;
    }
  }
  v53 = 0;
  v43 = 0;
  do
  {
    v55 = v23[v53 + 1];
    v56 = v55 - *(int *)((char *)&v23[v53 + 1] + v55);
    v57 = (char *)&v23[v53] + v56;
    v58 = *((unsigned __int16 *)v57 + 2);
    if (v58 >= 5)
    {
      v59 = *((unsigned __int16 *)v57 + 4);
      if (v59)
      {
        if (*((_BYTE *)&v23[v53 + 1] + v55 + v59))
        {
          if (v58 < 9 || (v60 = *(unsigned __int16 *)((char *)&v23[v53 + 3] + v56)) == 0)
          {
            LOBYTE(v54) = 0;
LABEL_73:
            v43 |= 1 << v54;
            goto LABEL_74;
          }
          v54 = *(_DWORD *)((char *)&v23[v53 + 1] + v55 + v60);
          if (v54 <= 0x1E)
            goto LABEL_73;
        }
      }
    }
LABEL_74:
    ++v53;
  }
  while (v38 != v53);
LABEL_82:
  if ((v43 & 0x7FFFFFFF) == 0)
    goto LABEL_103;
  v88 = v33;
  v61 = 0;
  *(_DWORD *)v91 = 0;
  while (2)
  {
    v63 = (_DWORD *)((char *)&v39[v61] + v39[v61]);
    v64 = (unsigned __int16 *)((char *)v63 - *v63);
    v65 = *v64;
    if (v65 >= 5)
    {
      if (v64[2])
      {
        v66 = *((unsigned __int8 *)v63 + v64[2]);
        if (*((_BYTE *)v63 + v64[2]))
        {
          if (v65 < 9)
          {
            LOBYTE(v67) = 0;
LABEL_95:
            if (((v43 >> v67) & 1) != 0)
            {
              *(_DWORD *)v94 = v66;
              std::string::append(&v89, v91, 4uLL);
              std::string::append(&v89, v94, 4uLL);
              v68 = (unsigned __int16 *)((char *)v63 - *v63);
              if (*v68 < 9u)
              {
                LODWORD(v69) = 0;
              }
              else
              {
                v69 = v68[4];
                if (v69)
                  LODWORD(v69) = *(int *)((char *)v63 + v69);
              }
              *(_DWORD *)v93 = v69;
              std::string::append(&v89, v93, 4uLL);
              v70 = (unsigned __int16 *)((char *)v63 - *v63);
              if (*v70 < 7u)
              {
                v62 = 0;
              }
              else
              {
                v62 = v70[3];
                if (v62)
                  v62 = *(_QWORD *)((char *)v63 + v62);
              }
              *(_QWORD *)__s = v62;
              std::string::append(&v89, __s, 8uLL);
              v61 = *(_DWORD *)v91;
              LODWORD(v38) = *v23;
            }
          }
          else
          {
            v67 = v64[4];
            if (!v67)
              goto LABEL_95;
            LODWORD(v67) = *(int *)((char *)v63 + v67);
            if (v67 <= 0x1E)
              goto LABEL_95;
          }
        }
      }
    }
    *(_DWORD *)v91 = ++v61;
    if (v61 < v38)
      continue;
    break;
  }
  *(_DWORD *)v94 = 0;
  v71 = *v32;
  if (*v32)
  {
    v72 = 0;
    v73 = 0;
    do
    {
      v75 = (int *)((char *)&v41[v73] + v41[v73]);
      v76 = (unsigned __int16 *)((char *)v75 - *v75);
      if (*v76 >= 9u)
      {
        v77 = v76[4];
        if (v77)
        {
          if ((int)v73 <= 30)
          {
            v78 = *(_QWORD *)((char *)v75 + v77);
            if (v78)
            {
              if (v73 >= 0x1F)
                goto LABEL_145;
              if (((v43 >> v73) & 1) != 0)
              {
                *(_QWORD *)__s = v78;
                std::string::append(&v89, v94, 4uLL);
                std::string::append(&v89, __s, 8uLL);
                v79 = (unsigned __int16 *)((char *)v75 - *v75);
                if (*v79 >= 5u && (v80 = v79[2]) != 0)
                  v81 = *((unsigned __int8 *)v75 + v80);
                else
                  v81 = 1;
                *(_DWORD *)v93 = v81;
                std::string::append(&v89, v93, 4uLL);
                v82 = (unsigned __int16 *)((char *)v75 - *v75);
                if (*v82 >= 7u && (v83 = v82[3]) != 0)
                  v74 = *(_QWORD *)((char *)v75 + v83);
                else
                  v74 = 1;
                v72 |= *(_DWORD *)v93 == 4;
                *(_QWORD *)v91 = v74;
                std::string::append(&v89, v91, 8uLL);
                v73 = *(_DWORD *)v94;
                v71 = *v32;
              }
            }
          }
        }
      }
      *(_DWORD *)v94 = ++v73;
    }
    while (v73 < v71);
    if (((v88 != 0) & v72) != 0)
      std::string::append(&v89, v97, 2uLL);
  }
  if (v37 | v36)
  {
    std::string::append(&v89, v96, 2uLL);
    std::string::append(&v89, v95, 2uLL);
  }
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  else
    size = v89.__r_.__value_.__l.__size_;
  *a3 = size;
  v85 = malloc_type_malloc(size, 0x137A706DuLL);
  *a2 = v85;
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v86 = &v89;
  else
    v86 = (std::string *)v89.__r_.__value_.__r.__words[0];
  memcpy(v85, v86, *a3);
  v9 = 1;
  if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_7:
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_134;
    return v9;
  }
LABEL_133:
  operator delete(v89.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
LABEL_134:
    operator delete(v90.__r_.__value_.__l.__data_);
  return v9;
}

char **ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl(char **a1, void *a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t i;
  __int128 v14;
  char *v15;
  __int128 *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v29;
  __int128 v30;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = objc_msgSend(a2, "count");
  v5 = v4;
  v6 = *a1;
  if (v4 > (a1[2] - *a1) >> 5)
  {
    if (v4 >> 59)
      abort();
    v7 = a1[1];
    v8 = (char *)operator new(32 * v4);
    v9 = &v8[(v7 - v6) & 0xFFFFFFFFFFFFFFE0];
    v10 = v9;
    if (v7 != v6)
    {
      v11 = &v8[(v7 - v6) & 0xFFFFFFFFFFFFFFE0];
      do
      {
        v12 = *((_OWORD *)v7 - 1);
        v10 = v11 - 32;
        *((_OWORD *)v11 - 2) = *((_OWORD *)v7 - 2);
        *((_OWORD *)v11 - 1) = v12;
        v7 -= 32;
        v11 -= 32;
      }
      while (v7 != v6);
    }
    *a1 = v10;
    a1[1] = v9;
    a1[2] = &v8[32 * v5];
    if (v6)
      operator delete(v6);
  }
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v16 = (__int128 *)objc_msgSend((id)objc_msgSend(a2, "objectAtIndex:", i, v29, v30), "libraryUUID");
      v29 = *v16;
      v30 = v16[1];
      v18 = a1[1];
      v17 = (unint64_t)a1[2];
      if ((unint64_t)v18 < v17)
      {
        v14 = v16[1];
        *(_OWORD *)v18 = *v16;
        *((_OWORD *)v18 + 1) = v14;
        v15 = v18 + 32;
      }
      else
      {
        v19 = *a1;
        v20 = (v18 - *a1) >> 5;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 59)
          abort();
        v22 = v17 - (_QWORD)v19;
        if (v22 >> 4 > v21)
          v21 = v22 >> 4;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0)
          v23 = 0x7FFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          if (v23 >> 59)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v24 = (char *)operator new(32 * v23);
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[32 * v20];
        *(_OWORD *)v25 = v29;
        *((_OWORD *)v25 + 1) = v30;
        v26 = v25;
        if (v18 != v19)
        {
          do
          {
            v27 = *((_OWORD *)v18 - 1);
            *((_OWORD *)v26 - 2) = *((_OWORD *)v18 - 2);
            *((_OWORD *)v26 - 1) = v27;
            v26 -= 32;
            v18 -= 32;
          }
          while (v18 != v19);
          v18 = *a1;
        }
        v15 = v25 + 32;
        *a1 = v26;
        a1[1] = v25 + 32;
        a1[2] = &v24[32 * v23];
        if (v18)
          operator delete(v18);
      }
      a1[1] = v15;
    }
  }
  return a1;
}

void sub_232D6A094(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()(int8x16_t **a1, void *a2, unsigned int a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  int8x16_t *v14;
  int8x16_t *v15;
  int8x16_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int8x16_t v23;
  unint64_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  int8x16_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  int8x16_t v33;
  int8x16_t *v34;
  int8x16_t *v35;
  int8x16_t v36;

  if (objc_msgSend(a2, "count"))
  {
    v6 = (uint64_t *)objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", 0), "bitCodeHash");
    v8 = *v6;
    v7 = v6[1];
    v9 = v6[2];
    v10 = v6[3];
    if ((unint64_t)objc_msgSend(a2, "count") >= 2)
    {
      v11 = 1;
      do
      {
        v12 = (_QWORD *)objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", v11), "bitCodeHash");
        v8 ^= *v12;
        v7 ^= v12[1];
        v9 ^= v12[2];
        v10 ^= v12[3];
        ++v11;
      }
      while (v11 < objc_msgSend(a2, "count"));
    }
    v14 = a1[1];
    v13 = (unint64_t)a1[2];
    if ((unint64_t)v14 >= v13)
    {
      v16 = *a1;
      v17 = ((char *)v14 - (char *)*a1) >> 5;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 59)
        goto LABEL_42;
      v19 = v13 - (_QWORD)v16;
      if (v19 >> 4 > v18)
        v18 = v19 >> 4;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
        v20 = 0x7FFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 >> 59)
          goto LABEL_43;
        v21 = (char *)operator new(32 * v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[32 * v17];
      *(_QWORD *)v22 = v8;
      *((_QWORD *)v22 + 1) = v7;
      *((_QWORD *)v22 + 2) = v9;
      *((_QWORD *)v22 + 3) = v10;
      v15 = (int8x16_t *)(v22 + 32);
      if (v14 != v16)
      {
        do
        {
          v23 = v14[-1];
          *((int8x16_t *)v22 - 2) = v14[-2];
          *((int8x16_t *)v22 - 1) = v23;
          v22 -= 32;
          v14 -= 2;
        }
        while (v14 != v16);
        v14 = *a1;
      }
      *a1 = (int8x16_t *)v22;
      a1[1] = v15;
      a1[2] = (int8x16_t *)&v21[32 * v20];
      if (v14)
        operator delete(v14);
    }
    else
    {
      v14->i64[0] = v8;
      v14->i64[1] = v7;
      v15 = v14 + 2;
      v14[1].i64[0] = v9;
      v14[1].i64[1] = v10;
    }
    a1[1] = v15;
    v24 = (unint64_t)a1[2];
    if ((unint64_t)v15 < v24)
    {
      v25 = vdupq_n_s8(a3);
      *v15 = v25;
      v15[1] = v25;
      v26 = v15 + 2;
      goto LABEL_40;
    }
    v27 = *a1;
    v28 = ((char *)v15 - (char *)*a1) >> 5;
    v29 = v28 + 1;
    if (!((unint64_t)(v28 + 1) >> 59))
    {
      v30 = v24 - (_QWORD)v27;
      if (v30 >> 4 > v29)
        v29 = v30 >> 4;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0)
        v31 = 0x7FFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (!v31)
      {
        v32 = 0;
        goto LABEL_34;
      }
      if (!(v31 >> 59))
      {
        v32 = (char *)operator new(32 * v31);
LABEL_34:
        v33 = vdupq_n_s8(a3);
        v34 = (int8x16_t *)&v32[32 * v28];
        v35 = (int8x16_t *)&v32[32 * v31];
        *v34 = v33;
        v34[1] = v33;
        v26 = v34 + 2;
        if (v15 == v27)
        {
          *a1 = v34;
          a1[1] = v26;
          a1[2] = v35;
        }
        else
        {
          do
          {
            v36 = v15[-1];
            v34[-2] = v15[-2];
            v34[-1] = v36;
            v34 -= 2;
            v15 -= 2;
          }
          while (v15 != v27);
          v15 = *a1;
          *a1 = v34;
          a1[1] = v26;
          a1[2] = v35;
          if (!v15)
            goto LABEL_40;
        }
        operator delete(v15);
LABEL_40:
        a1[1] = v26;
        return;
      }
LABEL_43:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_42:
    abort();
  }
}

uint64_t AGX::MeshProgramKey::initCommon<MTLRenderPipelineDescriptor>(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  int v18;

  v4 = (void *)objc_msgSend(a2, "driverCompilerOptions");
  v5 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "meshLinkedFunctions"), "binaryFunctions"), "count");
  v6 = objc_msgSend(a2, "supportAddingMeshBinaryFunctions");
  if (objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("disableTextureRWBoundsCheck")), "BOOLValue"))v7 = 4;
  else
    v7 = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 52) & 0xFFFFFFFB | v7;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 52) & 0xFC0003FF | ((unsigned __int16)objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("maxNumRegisters")), "unsignedIntValue") << 10);
  if (objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("agx_enable_stack_shadow")), "BOOLValue"))v8 = 0x8000000;
  else
    v8 = 0;
  v9 = *(_DWORD *)(a1 + 52) & 0xF7FFFDFF;
  if (v5)
    v10 = 1;
  else
    v10 = v6;
  if (v10)
    v11 = 512;
  else
    v11 = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = v8 | v9 | v11;
  v12 = (void *)objc_msgSend(a2, "meshBuffers");
  v13 = 0;
  for (i = 0; i != 31; ++i)
  {
    v15 = objc_msgSend((id)objc_msgSend(v12, "_descriptorAtIndex:", i), "mutability");
    v16 = 1 << i;
    if (v15 != 1)
      v16 = 0;
    v13 |= v16;
  }
  *(_QWORD *)(a1 + 40) = v13;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a1 + 96) & 0xFFFFFFFE | objc_msgSend(a2, "supportIndirectCommandBuffers");
  *(_DWORD *)(a1 + 60) = objc_msgSend(a2, "maxTotalThreadsPerMeshThreadgroup");
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 56) & 0xFFFFFFF0 | objc_msgSend(a2, "maxVertexAmplificationCount") & 0xF;
  result = objc_msgSend(a2, "needsCustomBorderColorSamplers");
  if ((_DWORD)result)
    v18 = 32;
  else
    v18 = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 56) & 0xFFFFFFDF | v18;
  return result;
}

uint64_t AGX::MeshProgramKey::initCommon<MTLMeshRenderPipelineDescriptor>(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t result;
  int v20;

  v4 = (void *)objc_msgSend(a2, "driverCompilerOptions");
  v5 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "meshLinkedFunctions"), "binaryFunctions"), "count");
  v6 = objc_msgSend(a2, "supportAddingMeshBinaryFunctions");
  if (objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("disableTextureRWBoundsCheck")), "BOOLValue"))v7 = 4;
  else
    v7 = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 52) & 0xFFFFFFFB | v7;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 52) & 0xFC0003FF | ((unsigned __int16)objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("maxNumRegisters")), "unsignedIntValue") << 10);
  if (objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("agx_enable_stack_shadow")), "BOOLValue"))v8 = 0x8000000;
  else
    v8 = 0;
  v9 = *(_DWORD *)(a1 + 52) & 0xF7FFFDFF;
  if (v5)
    v10 = 1;
  else
    v10 = v6;
  if (v10)
    v11 = 512;
  else
    v11 = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = v8 | v9 | v11;
  v12 = (void *)objc_msgSend(a2, "meshBuffers");
  v13 = 0;
  for (i = 0; i != 31; ++i)
  {
    v15 = objc_msgSend((id)objc_msgSend(v12, "_descriptorAtIndex:", i), "mutability");
    v16 = 1 << i;
    if (v15 != 1)
      v16 = 0;
    v13 |= v16;
  }
  *(_QWORD *)(a1 + 40) = v13;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a1 + 96) & 0xFFFFFFFE | objc_msgSend(a2, "supportIndirectCommandBuffers");
  v17 = objc_msgSend(a2, "maxTotalThreadsPerMeshThreadgroup");
  v18 = objc_msgSend(a2, "payloadMemoryLength");
  *(_DWORD *)(a1 + 60) = v17;
  *(_DWORD *)(a1 + 64) = v18;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 56) & 0xFFFFFFF0 | objc_msgSend(a2, "maxVertexAmplificationCount") & 0xF;
  result = objc_msgSend(a2, "needsCustomBorderColorSamplers");
  if ((_DWORD)result)
    v20 = 32;
  else
    v20 = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 56) & 0xFFFFFFDF | v20;
  return result;
}

NSUInteger AGX::VertexProgramKey::initCommon(AGX::VertexProgramKey *this, MTLRenderPipelineDescriptor *a2)
{
  void *v4;
  NSUInteger v5;
  _BOOL4 v6;
  int v7;
  int v8;
  int v9;
  int v10;
  MTLPipelineBufferDescriptorArray *v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BOOL4 v18;
  unint64_t v19;
  NSUInteger result;
  unint64_t v21;

  v4 = (void *)-[MTLRenderPipelineDescriptor driverCompilerOptions](a2, "driverCompilerOptions");
  v5 = -[NSArray count](-[MTLLinkedFunctions binaryFunctions](-[MTLRenderPipelineDescriptor vertexLinkedFunctions](a2, "vertexLinkedFunctions"), "binaryFunctions"), "count");
  v6 = -[MTLRenderPipelineDescriptor supportAddingVertexBinaryFunctions](a2, "supportAddingVertexBinaryFunctions");
  if (objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("disableTextureRWBoundsCheck")), "BOOLValue"))v7 = 4;
  else
    v7 = 0;
  *((_DWORD *)this + 13) = *((_DWORD *)this + 13) & 0xFFFFFFFB | v7;
  *((_DWORD *)this + 13) = *((_DWORD *)this + 13) & 0xFC0003FF | ((unsigned __int16)objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("maxNumRegisters")), "unsignedIntValue") << 10);
  if (objc_msgSend((id)objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("agx_enable_stack_shadow")), "BOOLValue"))v8 = 0x8000000;
  else
    v8 = 0;
  if (v5)
    v9 = 1;
  else
    v9 = v6;
  if (v9)
    v10 = 512;
  else
    v10 = 0;
  *((_DWORD *)this + 13) = v8 | *((_DWORD *)this + 13) & 0xF7FFFDFF | v10;
  *((_BYTE *)this + 56) = -[MTLRenderPipelineDescriptor clipDistanceEnableMask](a2, "clipDistanceEnableMask");
  *((_DWORD *)this + 12) = -[MTLRenderPipelineDescriptor vertexDepthCompareClampMask](a2, "vertexDepthCompareClampMask");
  *((_QWORD *)this + 7) = *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFF3FFLL | ((-[MTLRenderPipelineDescriptor tessellationFactorStepFunction](a2, "tessellationFactorStepFunction") & 3) << 10);
  *((_QWORD *)this + 7) = *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFCFFLL | ((-[MTLRenderPipelineDescriptor tessellationPartitionMode](a2, "tessellationPartitionMode") & 3) << 8);
  v11 = -[MTLRenderPipelineDescriptor vertexBuffers](a2, "vertexBuffers");
  v12 = 0;
  for (i = 0; i != 31; ++i)
  {
    v14 = objc_msgSend((id)-[MTLPipelineBufferDescriptorArray _descriptorAtIndex:](v11, "_descriptorAtIndex:", i), "mutability");
    v15 = 1 << i;
    if (v14 != 1)
      v15 = 0;
    v12 |= v15;
  }
  *((_QWORD *)this + 5) = v12;
  *((_DWORD *)this + 22) = *((_DWORD *)this + 22) & 0xFFFFFFFE | -[MTLRenderPipelineDescriptor supportIndirectCommandBuffers](a2, "supportIndirectCommandBuffers");
  *((_QWORD *)this + 7) = *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFCFFFLL | ((-[MTLRenderPipelineDescriptor vertexAmplificationMode](a2, "vertexAmplificationMode") & 3) << 12);
  *((_QWORD *)this + 7) = *((_QWORD *)this + 7) & 0xFFFFFFFFFFFC3FFFLL | ((-[MTLRenderPipelineDescriptor maxVertexAmplificationCount](a2, "maxVertexAmplificationCount") & 0xF) << 14);
  v16 = -[MTLRenderPipelineDescriptor needsCustomBorderColorSamplers](a2, "needsCustomBorderColorSamplers");
  v17 = 0x80000;
  if (!v16)
    v17 = 0;
  *((_QWORD *)this + 7) = *((_QWORD *)this + 7) & 0xFFFFFFFFFFF7FFFFLL | v17;
  v18 = -[MTLRenderPipelineDescriptor isRasterizationEnabled](a2, "isRasterizationEnabled");
  v19 = 0;
  if (v18)
    v19 = (unint64_t)(-[MTLRenderPipelineDescriptor inputPrimitiveTopology](a2, "inputPrimitiveTopology") == MTLPrimitiveTopologyClassPoint) << 20;
  *((_QWORD *)this + 7) = *((_QWORD *)this + 7) & 0xFFFFFFFFFFEFFFFFLL | v19;
  *((_QWORD *)this + 7) = *((_QWORD *)this + 7) & 0xFFFFFFFFFFBFFFFFLL | ((-[MTLRenderPipelineDescriptor tessellationFactorFormat](a2, "tessellationFactorFormat") & 1) << 22);
  result = -[MTLRenderPipelineDescriptor supportAddingVertexBinaryFunctions](a2, "supportAddingVertexBinaryFunctions");
  if ((result & 1) != 0)
  {
    v21 = 0x2000000;
  }
  else
  {
    result = -[NSArray count](-[MTLLinkedFunctions binaryFunctions](-[MTLRenderPipelineDescriptor vertexLinkedFunctions](a2, "vertexLinkedFunctions"), "binaryFunctions"), "count");
    v21 = (unint64_t)(result != 0) << 25;
  }
  *((_QWORD *)this + 7) = *((_QWORD *)this + 7) & 0xFFFFFFFFFDFFFFFFLL | v21;
  return result;
}

uint64_t AGX::SamplerDescriptor::SamplerDescriptor(uint64_t result, int *a2)
{
  unsigned __int16 *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  char v16;
  uint64_t v17;
  __int16 v18;
  BOOL v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  unsigned int v23;
  int v24;

  v2 = (unsigned __int16 *)((char *)a2 - *a2);
  v3 = *v2;
  if (v3 < 0xD)
  {
    if (v3 < 0xB)
    {
      if (v3 <= 4)
      {
        v21 = 0;
        LOBYTE(v17) = 0;
        LOBYTE(v12) = 0;
        LOBYTE(v9) = 0;
        LOBYTE(v4) = 0;
        LODWORD(v6) = 0;
        LODWORD(v8) = 0;
        LOBYTE(v11) = 0;
        LODWORD(v13) = 0;
        v16 = 0;
        v20 = 0;
        v22 = 0;
        *(_QWORD *)(result + 48) = 0;
        *(_QWORD *)(result + 56) = 0;
        *(_QWORD *)(result + 64) = 0;
        v15 = 0;
        v14 = 0;
        v10 = 0;
        goto LABEL_53;
      }
      LODWORD(v8) = 0;
      LODWORD(v6) = 0;
      LOBYTE(v4) = 0;
      v5 = 0;
      goto LABEL_18;
    }
    v5 = 0;
    LOBYTE(v4) = 0;
    v6 = v2[5];
    if (v2[5])
      goto LABEL_5;
  }
  else
  {
    v4 = v2[6];
    if (v2[6])
      LODWORD(v4) = *((char *)a2 + v4);
    v5 = v4;
    v6 = v2[5];
    if (v2[5])
LABEL_5:
      LODWORD(v6) = *((char *)a2 + v6);
  }
  if (v3 < 0xF)
  {
    LODWORD(v8) = 0;
LABEL_18:
    v7 = 0;
    goto LABEL_19;
  }
  if (v2[7])
  {
    v7 = *((char *)a2 + v2[7]);
    if (v3 >= 0x15)
      goto LABEL_9;
  }
  else
  {
    v7 = 0;
    if (v3 >= 0x15)
    {
LABEL_9:
      v8 = v2[10];
      if (v2[10])
      {
        LODWORD(v8) = *((unsigned __int8 *)a2 + v8);
        v9 = v2[2];
        if (!v2[2])
          goto LABEL_21;
LABEL_20:
        LOBYTE(v9) = *((_BYTE *)a2 + v9);
        goto LABEL_21;
      }
LABEL_19:
      v9 = v2[2];
      if (!v2[2])
        goto LABEL_21;
      goto LABEL_20;
    }
  }
  LODWORD(v8) = 0;
  v9 = v2[2];
  if (v2[2])
    goto LABEL_20;
LABEL_21:
  v10 = 0;
  if (v3 < 7)
  {
    v16 = 0;
    LODWORD(v13) = 0;
    LOBYTE(v11) = 0;
LABEL_41:
    LOBYTE(v12) = 0;
LABEL_42:
    LOBYTE(v17) = 0;
    v14 = 0;
    v15 = 0;
    goto LABEL_43;
  }
  v11 = v2[3];
  if (v2[3])
    LOBYTE(v11) = *((_BYTE *)a2 + v11);
  if (v3 < 9)
  {
    v16 = 0;
    LODWORD(v13) = 0;
    goto LABEL_41;
  }
  v12 = v2[4];
  if (v2[4])
    LOBYTE(v12) = *((_BYTE *)a2 + v12);
  if (v3 < 0x11)
  {
    v16 = 0;
    LODWORD(v13) = 0;
    goto LABEL_42;
  }
  v13 = v2[8];
  if (v2[8])
    LODWORD(v13) = *((unsigned __int8 *)a2 + v13) != 0;
  if (v3 >= 0x17)
  {
    v14 = 0;
    if (v2[11])
      v14 = *(int *)((char *)a2 + v2[11]);
    if (v3 < 0x19)
    {
      v16 = 0;
      v15 = 0;
      goto LABEL_71;
    }
    if (v2[12])
      v10 = *(int *)((char *)a2 + v2[12]);
    if (v3 < 0x1F)
    {
      v15 = 0;
      if (v3 < 0x1B)
        goto LABEL_70;
    }
    else if (v2[15])
    {
      v15 = *(int *)((char *)a2 + v2[15]);
    }
    else
    {
      v15 = 0;
    }
    if (v2[13])
    {
      v16 = *((_BYTE *)a2 + v2[13]);
      goto LABEL_71;
    }
LABEL_70:
    v16 = 0;
LABEL_71:
    v17 = v2[9];
    if (v17)
      LOBYTE(v17) = *((_BYTE *)a2 + v17);
    goto LABEL_43;
  }
  v16 = 0;
  v14 = 0;
  v15 = 0;
  if (v3 >= 0x13)
    goto LABEL_71;
  LOBYTE(v17) = 0;
LABEL_43:
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  if (v7 == 2)
    v18 = 64;
  else
    v18 = 0;
  v19 = v7 == 0;
  if (v7)
    v20 = 32;
  else
    v20 = 0;
  if (v19)
    v21 = 0;
  else
    v21 = v18;
  v22 = (v5 == 1) << 7;
LABEL_53:
  *(_WORD *)result = v21 | v22 | v17 & 0xF | (((_DWORD)v6 == 1) << 8) | v20;
  v23 = (float)((float)v8 + 0.5);
  if ((_DWORD)v13)
    v24 = 0x4000;
  else
    v24 = 0;
  *(_DWORD *)(result + 8) = v14;
  *(_DWORD *)(result + 12) = v10;
  *(_DWORD *)(result + 16) = v15;
  *(_DWORD *)(result + 4) = ((v12 & 7) << 11) | (32 * (v9 & 7)) | ((v4 & 3) << 16) & 0xFFF3F8E0 | ((v6 & 3) << 18) | ((v11 & 7) << 8) | v23 & 0x1F | v24 | ((v16 & 3) << 21);
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 28) = 0;
  *(_QWORD *)(result + 20) = 0;
  return result;
}

BOOL AGX::SamplerDescriptor::operator<(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  float v7;
  float v8;
  BOOL v9;
  float v10;
  float v11;
  float v12;
  float v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;

  v2 = *a1;
  v3 = *a2;
  v4 = v2 >= v3;
  if (v2 != v3)
    return !v4;
  v5 = *((_DWORD *)a1 + 1);
  v6 = *((_DWORD *)a2 + 1);
  v4 = v5 >= v6;
  if (v5 != v6)
    return !v4;
  v7 = *((float *)a1 + 2);
  v8 = *((float *)a2 + 2);
  v9 = v7 < v8;
  if (v7 == v8)
  {
    v10 = *((float *)a1 + 3);
    v11 = *((float *)a2 + 3);
    v9 = v10 < v11;
    if (v10 == v11)
    {
      v12 = *((float *)a1 + 4);
      v13 = *((float *)a2 + 4);
      v9 = v12 < v13;
      if (v12 == v13)
      {
        v14 = *((_DWORD *)a1 + 5);
        v15 = *((_DWORD *)a2 + 5);
        v4 = v14 >= v15;
        if (v14 == v15)
        {
          v16 = *((_DWORD *)a1 + 6);
          v17 = *((_DWORD *)a2 + 6);
          v4 = v16 >= v17;
          if (v16 == v17)
          {
            v18 = *((_DWORD *)a1 + 7);
            v19 = *((_DWORD *)a2 + 7);
            v4 = v18 >= v19;
            if (v18 == v19)
            {
              v20 = *((_DWORD *)a1 + 8);
              v21 = *((_DWORD *)a2 + 8);
              v4 = v20 >= v21;
              if (v20 == v21)
              {
                v22 = *((_QWORD *)a1 + 5);
                v23 = *((_QWORD *)a2 + 5);
                v4 = v22 >= v23;
                if (v22 == v23)
                  return std::operator<[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a1 + 6, (_QWORD *)a2 + 6);
              }
            }
          }
        }
        return !v4;
      }
    }
  }
  return v9;
}

BOOL std::operator<[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

uint64_t ___ZN13AGXATelemetry15collectAndResetEP19NSMutableDictionaryIP8NSStringP8NSObjectE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t program_sdk_version;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 32);
  program_sdk_version = dyld_get_program_sdk_version();
  v3 = (void *)objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
  v4 = objc_msgSend(v3, "bundleIdentifier");
  if (!v4)
    v4 = objc_msgSend((id)objc_msgSend(MEMORY[0x24BDD1760], "processInfo"), "processName");
  v5 = objc_msgSend(v3, "objectForInfoDictionaryKey:", CFSTR("CFBundleVersion"));
  if (v5)
    objc_msgSend(*(id *)(v1 + 104), "setObject:forKey:", v5, CFSTR("BundleVersion"));
  objc_msgSend(*(id *)(v1 + 104), "setObject:forKey:", v4, CFSTR("BundleIdentifier"));
  objc_msgSend(*(id *)(v1 + 104), "setObject:forKey:", objc_msgSend((id)objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", program_sdk_version), "stringValue"), CFSTR("SDK"));
  return objc_msgSend(*(id *)(v1 + 104), "setObject:forKey:", *(_QWORD *)(v1 + 80), CFSTR("SOC"));
}

void ___ZN13AGXATelemetry5setupEP8NSStringP13__IOGPUDevice_block_invoke(uint64_t a1)
{
  uint64_t *v1;
  void *v2;
  void *v3;
  void *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t i;
  unint64_t v29;
  const __CFString *v30;
  uint64_t v31;
  unint64_t j;
  unint64_t v33;
  const __CFString *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t k;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  double v52;
  NSObject *v53;
  double v54;
  dispatch_time_t v55;
  void *v56;
  void *v57;
  uint64_t block;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  void *v61;
  uint64_t *v62;
  size_t outputStructCnt;
  __int128 outputStruct;
  __int128 v65;

  v1 = *(uint64_t **)(a1 + 32);
  v2 = (void *)MEMORY[0x234928298]();
  v3 = (void *)v1[14];
  v4 = (void *)MEMORY[0x234928298]();
  v5 = *((_DWORD *)v1 + 12);
  *((_DWORD *)v1 + 13) = v5;
  v6 = MEMORY[0x24BDAC760];
  block = MEMORY[0x24BDAC760];
  v59 = 3221225472;
  v60 = ___ZN13AGXATelemetry15collectAndResetEP19NSMutableDictionaryIP8NSStringP8NSObjectE_block_invoke;
  v61 = &__block_descriptor_40_e5_v8__0l;
  v62 = v1;
  if (AGXATelemetry::collectAndReset(NSMutableDictionary<NSString *,NSObject *> *)::sdkPred != -1)
    dispatch_once(&AGXATelemetry::collectAndReset(NSMutableDictionary<NSString *,NSObject *> *)::sdkPred, &block);
  if (AGXATelemetry::collectAndReset(NSMutableDictionary<NSString *,NSObject *> *)::lastCommandQsInFlight != *((_WORD *)v1 + 16))
  {
    AGXATelemetry::collectAndReset(NSMutableDictionary<NSString *,NSObject *> *)::lastCommandQsInFlight = *((_WORD *)v1 + 16);
    objc_msgSend(v3, "setObject:forKey:", objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedShort:"), CFSTR("CommandQueuesInFlight"));
  }
  outputStruct = 0u;
  v65 = 0u;
  outputStructCnt = 32;
  if (!IOConnectCallStructMethod(*(_DWORD *)(v1[11] + 20), 0x10Fu, 0, 0, &outputStruct, &outputStructCnt))
  {
    v7 = outputStruct;
    v8 = v1[35];
    if (v8 < (unint64_t)outputStruct)
    {
      v9 = (unint64_t *)(v1 + 35);
      while (1)
      {
        v10 = __ldxr(v9);
        if (v10 == v8)
        {
          if (!__stxr(v7, v9))
          {
            v11 = 1;
            goto LABEL_13;
          }
        }
        else
        {
          __clrex();
        }
        v11 = 0;
LABEL_13:
        if ((v11 & 1) == 0)
        {
          v8 = v10;
          if (v10 < v7)
            continue;
        }
        break;
      }
    }
    v12 = *((_QWORD *)&outputStruct + 1);
    v13 = v1[36];
    if (v13 < *((_QWORD *)&outputStruct + 1))
    {
      v14 = (unint64_t *)(v1 + 36);
      while (1)
      {
        v15 = __ldxr(v14);
        if (v15 == v13)
        {
          if (!__stxr(v12, v14))
          {
            v16 = 1;
            goto LABEL_22;
          }
        }
        else
        {
          __clrex();
        }
        v16 = 0;
LABEL_22:
        if ((v16 & 1) == 0)
        {
          v13 = v15;
          if (v15 < v12)
            continue;
        }
        break;
      }
    }
    v17 = v65;
    v18 = v1[33];
    if (v18 < (unint64_t)v65)
    {
      v19 = (unint64_t *)(v1 + 33);
      while (1)
      {
        v20 = __ldxr(v19);
        if (v20 == v18)
        {
          if (!__stxr(v17, v19))
          {
            v21 = 1;
            goto LABEL_31;
          }
        }
        else
        {
          __clrex();
        }
        v21 = 0;
LABEL_31:
        if ((v21 & 1) == 0)
        {
          v18 = v20;
          if (v20 < v17)
            continue;
        }
        break;
      }
    }
    v22 = *((_QWORD *)&v65 + 1);
    v23 = v1[34];
    if (v23 < *((_QWORD *)&v65 + 1))
    {
      v24 = (unint64_t *)(v1 + 34);
      while (1)
      {
        v25 = __ldxr(v24);
        if (v25 == v23)
        {
          if (!__stxr(v22, v24))
          {
            v26 = 1;
            goto LABEL_40;
          }
        }
        else
        {
          __clrex();
        }
        v26 = 0;
LABEL_40:
        if ((v26 & 1) == 0)
        {
          v23 = v25;
          if (v25 < v22)
            continue;
        }
        break;
      }
    }
  }
  if ((v5 & 1) != 0)
  {
    v56 = v4;
    v57 = v2;
    v27 = *v1;
    for (i = (v1[2] ^ *v1) & 0xFFFFFFFFFFFFFFFELL; i; i &= ~(1 << v29))
    {
      v29 = __clz(__rbit64(i));
      v30 = &stru_2504033A8;
      if (v29 - 1 <= 0x3E)
        v30 = off_250402BB8[v29 - 1];
      objc_msgSend(v3, "setObject:forKey:", objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 1, v56, v57, block, v59, v60, v61, v62), v30);
    }
    v1[2] = v27;
    v31 = v1[1];
    for (j = v1[3] ^ v31; j; j &= ~(1 << v33))
    {
      v33 = __clz(__rbit64(j));
      v34 = &stru_2504033A8;
      if (v33 <= 0x17)
        v34 = off_250402DB0[v33];
      objc_msgSend(v3, "setObject:forKey:", objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInt:", 1, v56, v57), v34);
    }
    v35 = 0;
    v1[3] = v31;
    do
    {
      v36 = (unint64_t *)&v1[v35 + 37];
      do
        v37 = __ldxr(v36);
      while (__stxr(0, v36));
      if (v37)
        objc_msgSend(v3, "setObject:forKey:", objc_msgSend(MEMORY[0x24BDD16E0], "numberWithLongLong:"), off_250402E70[v35]);
      ++v35;
    }
    while (v35 != 81);
    v38 = (unint64_t *)(v1 + 32);
    do
      v39 = __ldxr(v38);
    while (__stxr(0, v38));
    v4 = v56;
    v2 = v57;
    v6 = MEMORY[0x24BDAC760];
    if (v39)
      objc_msgSend(v3, "setObject:forKey:", objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:"), CFSTR("MaxConcurrentComputeDispatchCount"));
    v40 = (unint64_t *)(v1 + 33);
    do
      v41 = __ldxr(v40);
    while (__stxr(0, v40));
    if (v41)
      objc_msgSend(v3, "setObject:forKey:", objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:"), CFSTR("MaxComputeUMAPoolSize"));
    v42 = (unint64_t *)(v1 + 34);
    do
      v43 = __ldxr(v42);
    while (__stxr(0, v42));
    if (v43)
      objc_msgSend(v3, "setObject:forKey:", objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:"), CFSTR("MaxComputeUMAPoolRequest"));
    v44 = (unint64_t *)(v1 + 35);
    do
      v45 = __ldxr(v44);
    while (__stxr(0, v44));
    if (v45)
      objc_msgSend(v3, "setObject:forKey:", objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:"), CFSTR("MaxRenderUMAPoolSize"));
    v46 = (unint64_t *)(v1 + 36);
    do
      v47 = __ldxr(v46);
    while (__stxr(0, v46));
    if (v47)
      objc_msgSend(v3, "setObject:forKey:", objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:"), CFSTR("MaxRenderUMAPoolRequest"));
  }
  for (k = 0; k != 16; ++k)
  {
    v49 = (unint64_t *)&v1[k + 16];
    do
      v50 = __ldxr(v49);
    while (__stxr(0, v49));
    if (v50)
      objc_msgSend(v3, "setObject:forKey:", objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:"), off_2504030F8[k]);
  }
  objc_autoreleasePoolPop(v4);
  if (objc_msgSend((id)v1[14], "count"))
  {
    objc_msgSend((id)v1[14], "addEntriesFromDictionary:", v1[13]);
    v51 = (uint64_t *)v1[14];
    block = v6;
    v59 = 3221225472;
    v60 = ___ZN13AGXATelemetry9sendEventEP8NSStringP19NSMutableDictionaryIS1_P8NSObjectE_block_invoke;
    v61 = &unk_250402B58;
    v62 = v51;
    AnalyticsSendEventLazy();
    objc_msgSend((id)v1[14], "removeAllObjects");
  }
  objc_autoreleasePoolPop(v2);
  v52 = *(double *)&AGXATelemetry::setup(NSString *,__IOGPUDevice *)::intervalSeconds;
  if (*(double *)&AGXATelemetry::setup(NSString *,__IOGPUDevice *)::intervalSeconds <= 3840.0)
  {
    v52 = *(double *)&AGXATelemetry::setup(NSString *,__IOGPUDevice *)::intervalSeconds
        + *(double *)&AGXATelemetry::setup(NSString *,__IOGPUDevice *)::intervalSeconds;
    *(double *)&AGXATelemetry::setup(NSString *,__IOGPUDevice *)::intervalSeconds = *(double *)&AGXATelemetry::setup(NSString *,__IOGPUDevice *)::intervalSeconds
                                                                                  + *(double *)&AGXATelemetry::setup(NSString *,__IOGPUDevice *)::intervalSeconds;
  }
  v53 = v1[8];
  v54 = v52 * 1000000000.0;
  v55 = dispatch_time(0, (uint64_t)(v52 * 1000000000.0));
  dispatch_source_set_timer(v53, v55, (unint64_t)v54, 0x5F5E100uLL);
}

uint64_t ___ZN13AGXATelemetry9sendEventEP8NSStringP19NSMutableDictionaryIS1_P8NSObjectE_block_invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t ___ZN13AGXATelemetry26shouldCaptureTelemetryDataEv_block_invoke()
{
  uint64_t result;
  BOOL v1;

  result = objc_msgSend((id)objc_msgSend(MEMORY[0x24BDD1488], "mainBundle"), "bundlePath");
  v1 = 0;
  if (result)
  {
    result = objc_msgSend((id)result, "containsString:", CFSTR("Application"));
    if ((result & 1) != 0)
      v1 = 1;
  }
  AGXATelemetry::shouldCaptureTelemetryData(void)::shouldCapture = v1;
  return result;
}

void ___ZN13AGXATelemetry16disableTelemetryEv_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  dispatch_source_cancel(*(dispatch_source_t *)(v1 + 64));
  *(_BYTE *)(v1 + 120) = 0;
}

dispatch_queue_t ___ZN13AGXATelemetry26telemetryEmitBacktraceInfoEPK26AGXATelemetryBacktraceInfo_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  dispatch_queue_t result;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v1 + 96) = (id)objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", 3);
  v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_BACKGROUND, 0);
  result = dispatch_queue_create("com.apple.metal.telemetryBacktraceQueue", v2);
  *(_QWORD *)(v1 + 72) = result;
  return result;
}

void ___ZN13AGXATelemetry26telemetryEmitBacktraceInfoEPK26AGXATelemetryBacktraceInfo_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int16 v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  const char *v12;
  __CFString *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  char *__s1;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34[8];
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  void *v37;
  uint64_t v38;
  _BYTE v39[128];
  uint64_t v40;

  v1 = a1;
  v40 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  do
    v3 = __ldaxr(AGXATelemetry::backtracesCaptured);
  while (__stlxr(v3 + 1, AGXATelemetry::backtracesCaptured));
  v4 = (void *)MEMORY[0x234928298]();
  v5 = (void *)objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
  v6 = objc_msgSend(v5, "bundleIdentifier");
  v7 = objc_msgSend(v5, "objectForInfoDictionaryKey:", CFSTR("CFBundleVersion"));
  if (v6)
  {
    v23 = v6;
    v24 = v7;
    v25 = v2;
    v26 = v4;
    v27 = v1;
    v8 = **(unsigned int **)(v1 + 40);
    __s1 = (char *)getprogname();
    v28 = (void *)objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    if ((int)v8 >= 1)
    {
      v9 = 0;
      do
      {
        v10 = (const char *)dyld_image_path_containing_address();
        if (v10)
          v11 = basename_r(v10, v34);
        else
          v11 = "<Unknown>";
        if (v11)
          v12 = v11;
        else
          v12 = "<Unknown>";
        if (!strcmp(__s1, v12))
          v13 = CFSTR("Direct");
        else
          v13 = (__CFString *)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v12);
        if (isGLESOnMetalFramework(NSString *)::onceToken != -1)
          dispatch_once(&isGLESOnMetalFramework(NSString *)::onceToken, &__block_literal_global_437);
        if ((objc_msgSend((id)isGLESOnMetalFramework(NSString *)::glesFrameworksLists, "containsObject:", v13) & 1) != 0)
          goto LABEL_39;
        if (isIgnoredFramework(NSString *)::onceToken != -1)
          dispatch_once(&isIgnoredFramework(NSString *)::onceToken, &__block_literal_global_445);
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v14 = (void *)isIgnoredFramework(NSString *)::ignoredFrameworksList;
        v15 = objc_msgSend((id)isIgnoredFramework(NSString *)::ignoredFrameworksList, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
        if (v15)
        {
          v16 = v15;
          v17 = *(_QWORD *)v31;
          do
          {
            for (i = 0; i != v16; ++i)
            {
              if (*(_QWORD *)v31 != v17)
                objc_enumerationMutation(v14);
              v19 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
              if (objc_msgSend(v19, "characterAtIndex:", objc_msgSend(v19, "length") - 1) == 42)
              {
                if ((-[__CFString hasPrefix:](v13, "hasPrefix:", objc_msgSend(v19, "substringToIndex:", objc_msgSend(v19, "length") - 1)) & 1) != 0)goto LABEL_6;
              }
              else if ((objc_msgSend(v19, "isEqualToString:", v13) & 1) != 0)
              {
                goto LABEL_6;
              }
            }
            v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
          }
          while (v16);
        }
        if ((objc_msgSend(v28, "containsObject:", v13) & 1) == 0)
          objc_msgSend(v28, "addObject:", v13);
LABEL_6:
        ;
      }
      while (++v9 != v8);
    }
    if (!objc_msgSend(v28, "count"))
    {
LABEL_39:
      v4 = v26;
      v1 = v27;
      goto LABEL_40;
    }
    v20 = objc_msgSend(v28, "componentsJoinedByString:", CFSTR(","));
    v4 = v26;
    v1 = v27;
    if (v20)
    {
      v21 = v20;
      objc_msgSend(*(id *)(v25 + 96), "setObject:forKey:", v23, CFSTR("BundleIdentifier"));
      if (v24)
        objc_msgSend(*(id *)(v25 + 96), "setObject:forKey:", v24, CFSTR("BundleVersion"));
      objc_msgSend(*(id *)(v25 + 96), "setObject:forKey:", v21, CFSTR("Frameworks"));
      v22 = *(_QWORD *)(v25 + 96);
      *(_QWORD *)v34 = MEMORY[0x24BDAC760];
      v35 = 3221225472;
      v36 = ___ZN13AGXATelemetry9sendEventEP8NSStringP19NSMutableDictionaryIS1_P8NSObjectE_block_invoke;
      v37 = &unk_250402B58;
      v38 = v22;
      AnalyticsSendEventLazy();
      objc_msgSend(*(id *)(v25 + 96), "removeAllObjects");
    }
  }
LABEL_40:
  free(*(void **)(v1 + 40));
  objc_autoreleasePoolPop(v4);
}

uint64_t ___ZL18isIgnoredFrameworkP8NSString_block_invoke()
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x24BDBCE30]), "initWithObjects:", CFSTR("AGXMetal*"), CFSTR("Metal"), CFSTR("MetalTools"), CFSTR("libMTLCapture.dylib"), CFSTR("libMTLInterpose.dylib"), CFSTR("UIKit"), CFSTR("UIKitCore"), CFSTR("Foundation"), CFSTR("CoreFoundation"), CFSTR("FrontBoardServices"), CFSTR("GraphicsServices"), CFSTR("FrontBoard"), CFSTR("BaseBoard"), CFSTR("libdispatch.dylib"), CFSTR("libdyld.dylib"), CFSTR("libsystem_pthread.dylib"), CFSTR("libobjc.A.dylib"),
             CFSTR("libswiftCore.dylib"),
             CFSTR("libc++.1.dylib"),
             CFSTR("libxpc.dylib"),
             CFSTR("libswiftUIKit.dylib"),
             CFSTR("libsystem_notify.dylib"),
             0);
  isIgnoredFramework(NSString *)::ignoredFrameworksList = result;
  return result;
}

uint64_t ___ZL22isGLESOnMetalFrameworkP8NSString_block_invoke()
{
  uint64_t result;

  result = objc_msgSend(objc_alloc(MEMORY[0x24BDBCF20]), "initWithArray:", &unk_25041E220);
  isGLESOnMetalFramework(NSString *)::glesFrameworksLists = result;
  return result;
}

AGXBuffer *AGX::DeviceInternalBuffer<AGX::TessellationInternalBufferResourceInfo>::getBufferInfo(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *v4;
  AGXBuffer *v5;
  AGXBuffer *Buffer;

  v4 = (os_unfair_lock_s *)(a1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  if (*(_DWORD *)(a1 + 32) < a2)
  {
    *(_DWORD *)(a1 + 32) = a2;

    Buffer = AGX::DeviceInternalBufferAllocator::allocateBuffer(*(_QWORD *)a1, a2);
    *(_QWORD *)(a1 + 8) = Buffer;
    *(_QWORD *)(a1 + 24) = Buffer;
    v5 = Buffer;
  }
  else
  {
    v5 = *(AGXBuffer **)(a1 + 24);
  }
  MTLResourceListAddResource();
  os_unfair_lock_unlock(v4);
  return v5;
}

void sub_232D6B9E8(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t TiledMemory<(TwiddleOrder)0>::convertTiles2D<false>(uint64_t result, uint64_t a2, int a3, char a4, unsigned int a5, unsigned int a6, int a7, int a8, uint64_t a9, unsigned int a10, unsigned int a11, uint64_t a12, uint64_t (*a13)(unint64_t, uint64_t), char a14)
{
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;

  v55 = result;
  v14 = 0;
  v15 = 0;
  switch(a12)
  {
    case 1:
      v14 = 128;
      v15 = 128;
      break;
    case 2:
      v15 = 128;
      v14 = 64;
      break;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      break;
    case 4:
      v14 = 64;
      v15 = 64;
      break;
    case 8:
      v15 = 64;
      v14 = 32;
      break;
    case 16:
      v14 = 32;
      v15 = 32;
      break;
    case 32:
      v15 = 32;
      v14 = 16;
      break;
    default:
      v15 = 0;
      break;
  }
  if (a10 > 1)
    v16 = ~(-1 << a4);
  else
    v16 = 0;
  v17 = ((a10 - 1 + a3) / a10 + v16) >> a4;
  if (v17 <= 1)
    v17 = 1;
  v18 = (a8 + a11 - 1) / a11;
  v48 = v18 - 1 + a6 / a11;
  v49 = a6 / a11;
  v19 = a6 / a11 / v15;
  v47 = v48 / v15;
  if (v19 <= v48 / v15)
  {
    v20 = a5 / a10;
    v21 = (a10 - 1 + a7) / a10;
    v22 = v21 - 1 + a5 / a10;
    v23 = 32 - __clz(v21 - 1);
    if (v21 < 2)
      v23 = 0;
    v24 = 32 - __clz(v18 - 1);
    if (v18 < 2)
      v24 = 0;
    v25 = v24;
    v53 = v23 != 0;
    v54 = v24 != 0;
    v46 = a5 / a10 / v14;
    if (v46 <= v22 / v14)
    {
      v26 = a9;
      v45 = (v14 + v17 - 1) / v14;
      v62 = v22 / v14;
      if ((a14 & 1) != 0)
      {
        v27 = v23;
        if (v24 | v23)
        {
          do
          {
            v28 = v19 * v15;
            v58 = v19 * v45;
            v50 = v19 + 1;
            v29 = v46;
            do
            {
              v30 = 0;
              v31 = 0;
              v32 = v29 + 1;
              v33 = 1;
              v34 = v53;
              v35 = v54;
              v36 = v25;
              v37 = v27;
              do
              {
                --v36;
                if (v35)
                  v31 |= (unint64_t)(v33 & v28) << v30++;
                else
                  v36 = 0;
                --v37;
                if (v34)
                  v31 |= (unint64_t)(v33 & (v29 * v14)) << v30++;
                else
                  v37 = 0;
                v33 *= 2;
                --v30;
                v34 = v37 != 0;
                v35 = v36 != 0;
              }
              while (v37 | v36);
              result = a13(v55 + ((unint64_t)(v29 + v58) << 14), a2 + v31 * a12);
              v29 = v32;
            }
            while (v32 <= v62);
            v19 = v50;
          }
          while (v50 <= v47);
        }
        else
        {
          do
          {
            v60 = v19 * v45;
            v52 = v19 + 1;
            v42 = v46;
            v43 = v15;
            do
            {
              v44 = v42 + 1;
              result = a13(v55 + ((unint64_t)(v42 + v60) << 14), a2);
              v42 = v44;
            }
            while (v44 <= v62);
            v19 = v52;
            v15 = v43;
          }
          while (v52 <= v47);
        }
      }
      else
      {
        v61 = v15;
        do
        {
          v59 = v19 * v45;
          v51 = v19 + 1;
          if (v49 <= v19 * v15)
            v38 = v19 * v15;
          else
            v38 = v49;
          v57 = (v38 - v49) * v26;
          v39 = v46;
          do
          {
            v40 = v39 + 1;
            if (v20 <= v39 * v14)
              v41 = v39 * v14;
            else
              v41 = v20;
            result = a13(v55 + ((unint64_t)(v39 + v59) << 14), a2 + v57 + (v41 - v20) * a12);
            v26 = a9;
            v39 = v40;
          }
          while (v40 <= v62);
          v19 = v51;
          LODWORD(v15) = v61;
        }
        while (v51 <= v47);
      }
    }
  }
  return result;
}

uint64_t TiledMemory<(TwiddleOrder)0>::convertTiles2D<true>(uint64_t result, uint64_t a2, int a3, char a4, unsigned int a5, unsigned int a6, int a7, int a8, uint64_t a9, unsigned int a10, unsigned int a11, uint64_t a12, uint64_t (*a13)(unint64_t, uint64_t), char a14)
{
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;

  v55 = result;
  v14 = 0;
  v15 = 0;
  switch(a12)
  {
    case 1:
      v14 = 128;
      v15 = 128;
      break;
    case 2:
      v15 = 128;
      v14 = 64;
      break;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      break;
    case 4:
      v14 = 64;
      v15 = 64;
      break;
    case 8:
      v15 = 64;
      v14 = 32;
      break;
    case 16:
      v14 = 32;
      v15 = 32;
      break;
    case 32:
      v15 = 32;
      v14 = 16;
      break;
    default:
      v15 = 0;
      break;
  }
  if (a10 > 1)
    v16 = ~(-1 << a4);
  else
    v16 = 0;
  v17 = ((a10 - 1 + a3) / a10 + v16) >> a4;
  if (v17 <= 1)
    v17 = 1;
  v18 = (a8 + a11 - 1) / a11;
  v48 = v18 - 1 + a6 / a11;
  v49 = a6 / a11;
  v19 = a6 / a11 / v15;
  v47 = v48 / v15;
  if (v19 <= v48 / v15)
  {
    v20 = a5 / a10;
    v21 = (a10 - 1 + a7) / a10;
    v22 = v21 - 1 + a5 / a10;
    v23 = 32 - __clz(v21 - 1);
    if (v21 < 2)
      v23 = 0;
    v24 = 32 - __clz(v18 - 1);
    if (v18 < 2)
      v24 = 0;
    v25 = v24;
    v53 = v23 != 0;
    v54 = v24 != 0;
    v46 = a5 / a10 / v14;
    if (v46 <= v22 / v14)
    {
      v26 = a9;
      v45 = (v14 + v17 - 1) / v14;
      v62 = v22 / v14;
      if ((a14 & 1) != 0)
      {
        v27 = v23;
        if (v24 | v23)
        {
          do
          {
            v28 = v19 * v15;
            v58 = v19 * v45;
            v50 = v19 + 1;
            v29 = v46;
            do
            {
              v30 = 0;
              v31 = 0;
              v32 = v29 + 1;
              v33 = 1;
              v34 = v53;
              v35 = v54;
              v36 = v25;
              v37 = v27;
              do
              {
                --v36;
                if (v35)
                  v31 |= (unint64_t)(v33 & v28) << v30++;
                else
                  v36 = 0;
                --v37;
                if (v34)
                  v31 |= (unint64_t)(v33 & (v29 * v14)) << v30++;
                else
                  v37 = 0;
                v33 *= 2;
                --v30;
                v34 = v37 != 0;
                v35 = v36 != 0;
              }
              while (v37 | v36);
              result = a13(a2 + ((unint64_t)(v29 + v58) << 14), v55 + v31 * a12);
              v29 = v32;
            }
            while (v32 <= v62);
            v19 = v50;
          }
          while (v50 <= v47);
        }
        else
        {
          do
          {
            v60 = v19 * v45;
            v52 = v19 + 1;
            v42 = v46;
            v43 = v15;
            do
            {
              v44 = v42 + 1;
              result = a13(a2 + ((unint64_t)(v42 + v60) << 14), v55);
              v42 = v44;
            }
            while (v44 <= v62);
            v19 = v52;
            v15 = v43;
          }
          while (v52 <= v47);
        }
      }
      else
      {
        v61 = v15;
        do
        {
          v59 = v19 * v45;
          v51 = v19 + 1;
          if (v49 <= v19 * v15)
            v38 = v19 * v15;
          else
            v38 = v49;
          v57 = (v38 - v49) * v26;
          v39 = v46;
          do
          {
            v40 = v39 + 1;
            if (v20 <= v39 * v14)
              v41 = v39 * v14;
            else
              v41 = v20;
            result = a13(a2 + ((unint64_t)(v39 + v59) << 14), v55 + v57 + (v41 - v20) * a12);
            v26 = a9;
            v39 = v40;
          }
          while (v40 <= v62);
          v19 = v51;
          LODWORD(v15) = v61;
        }
        while (v51 <= v47);
      }
    }
  }
  return result;
}

void ___ZN3AGX22agxaSignpostInitializeEv_block_invoke()
{
  NSObject *v0;
  dispatch_queue_t v1;
  NSObject *v2;
  _QWORD *v3;
  int out_token;
  _BYTE state64[12];
  __int16 v6;
  int v7;
  __int16 v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  v1 = dispatch_queue_create("com.apple.Metal.AGXSignpostEnablementQueue", v0);
  if (v1)
  {
    v2 = v1;
    v3 = (_QWORD *)operator new();
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    out_token = 0;
    notify_register_dispatch("com.apple.Metal.AGXEnableOSSignposts", &out_token, v2, &__block_literal_global_15);
    *(_QWORD *)state64 = 0;
    notify_get_state(out_token, (uint64_t *)state64);
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: %s:%d:%s: *** fail to allocate enablement notifications queue!\n", "agxa_trace_event.cpp", 44, "agxaSignpostInitialize_block_invoke");
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)state64 = 136315650;
      *(_QWORD *)&state64[4] = "agxa_trace_event.cpp";
      v6 = 1024;
      v7 = 44;
      v8 = 2080;
      v9 = "agxaSignpostInitialize_block_invoke";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** fail to allocate enablement notifications queue!\n", state64, 0x1Cu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)state64 = 136315650;
      *(_QWORD *)&state64[4] = "agxa_trace_event.cpp";
      v6 = 1024;
      v7 = 44;
      v8 = 2080;
      v9 = "agxaSignpostInitialize_block_invoke";
      _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: AGX: %s:%d:%s: *** fail to allocate enablement notifications queue!\n", state64, 0x1Cu);
    }
  }
}

uint64_t ___ZN3AGX22agxaSignpostInitializeEv_block_invoke_12(int a1, int token)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t state64;

  state64 = 0;
  result = notify_get_state(token, &state64);
  if (!(_DWORD)result)
  {
    {
      do
      {
        v5 = *v3++;
        result = (*(uint64_t (**)(void))(v5 + 16))();
      }
      while (v3 != v4);
    }
  }
  return result;
}

void AGX::agxaSignpostRegisterForEnablement(uint64_t a1)
{
  _QWORD block[5];
  uint8_t buf[4];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  {
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZN3AGX33agxaSignpostRegisterForEnablementEU13block_pointerFvbE_block_invoke;
    block[3] = &unk_2504031E0;
    block[4] = a1;
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: %s:%d:%s: *** signpost enablement notifications queue is uninitialized\n", "agxa_trace_event.cpp", 89, "agxaSignpostRegisterForEnablement");
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v3 = "agxa_trace_event.cpp";
      v4 = 1024;
      v5 = 89;
      v6 = 2080;
      v7 = "agxaSignpostRegisterForEnablement";
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** signpost enablement notifications queue is uninitialized\n", buf, 0x1Cu);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v3 = "agxa_trace_event.cpp";
      v4 = 1024;
      v5 = 89;
      v6 = 2080;
      v7 = "agxaSignpostRegisterForEnablement";
      _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: AGX: %s:%d:%s: *** signpost enablement notifications queue is uninitialized\n", buf, 0x1Cu);
    }
  }
}

void ___ZN3AGX33agxaSignpostRegisterForEnablementEU13block_pointerFvbE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v5 = v4;
  if ((unint64_t)v4 >= v3)
  {
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + 1;
    if (v10 >> 61)
      abort();
    v11 = v3 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    *v14 = *(_QWORD *)(a1 + 32);
    v6 = v14 + 1;
    if (v4 == (_QWORD *)v7)
    {
      v7 = v4;
    }
    else
    {
      v15 = (char *)v4 - v7 - 8;
      if (v15 < 0x58)
        goto LABEL_29;
      if ((unint64_t)((char *)v4 - v13 - v8) < 0x20)
        goto LABEL_29;
      v16 = (v15 >> 3) + 1;
      v5 = &v4[-(v16 & 0x3FFFFFFFFFFFFFFCLL)];
      v17 = &v13[8 * v9 - 16];
      v18 = (__int128 *)(v4 - 2);
      v19 = v16 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v20 = *v18;
        *(v17 - 1) = *(v18 - 1);
        *v17 = v20;
        v17 -= 2;
        v18 -= 2;
        v19 -= 4;
      }
      while (v19);
      v14 -= v16 & 0x3FFFFFFFFFFFFFFCLL;
      if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v21 = *--v5;
          *--v14 = v21;
        }
        while (v5 != (_QWORD *)v7);
        v7 = *(_BYTE **)v2;
      }
    }
    *(_QWORD *)v2 = v14;
    *(_QWORD *)(v2 + 8) = v6;
    *(_QWORD *)(v2 + 16) = &v13[8 * v12];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v4 = *(_QWORD *)(a1 + 32);
    v6 = v4 + 1;
  }
  *(_QWORD *)(v2 + 8) = v6;
}

_QWORD *___ZN3AGX35agxaSignpostDeregisterForEnablementEU13block_pointerFvbE_block_invoke(_QWORD *result)
{
  uint64_t v1;
  char *v2;
  char *v3;
  int64_t v4;

  {
    while (*(_QWORD *)v3 != result[4])
    {
      v3 += 8;
      if (v3 == v2)
      {
        break;
      }
    }
  }
  if (v3 != v2)
  {
    v4 = v2 - (v3 + 8);
    if (v2 != v3 + 8)
      result = memmove(v3, v3 + 8, v2 - (v3 + 8));
    *(_QWORD *)(v1 + 8) = &v3[v4];
  }
  return result;
}

uint64_t findEnvVarNum<unsigned long long>(const char *a1, _QWORD *a2)
{
  char *v4;
  const char *v5;
  uint64_t result;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = getenv(a1);
  if (!v4 || (v5 = v4, !*v4))
  {
LABEL_9:
    result = 0;
    *a2 = 0;
    return result;
  }
  result = sscanf(v4, "0x%llx", a2);
  if ((_DWORD)result != 1)
  {
    result = sscanf(v5, "%llu", a2);
    if ((_DWORD)result != 1)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: %s:%d:%s: *** Unsupported value for EV %s (%s)\n", "agxs_util.cpp", 314, "findEnvVarNum", a1, v5);
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316162;
        v8 = "agxs_util.cpp";
        v9 = 1024;
        v10 = 314;
        v11 = 2080;
        v12 = "findEnvVarNum";
        v13 = 2080;
        v14 = a1;
        v15 = 2080;
        v16 = v5;
        _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** Unsupported value for EV %s (%s)\n", buf, 0x30u);
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136316162;
        v8 = "agxs_util.cpp";
        v9 = 1024;
        v10 = 314;
        v11 = 2080;
        v12 = "findEnvVarNum";
        v13 = 2080;
        v14 = a1;
        v15 = 2080;
        v16 = v5;
        _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: AGX: %s:%d:%s: *** Unsupported value for EV %s (%s)\n", buf, 0x30u);
      }
      goto LABEL_9;
    }
  }
  return result;
}

void findEnvVarNum<BOOL>(_BYTE *a1)
{
  char *v2;
  int v3;
  char *v4;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = getenv("AGX_ALWAYS_ALLOW_PAIR_FALLBACK");
  if (!v2)
    goto LABEL_12;
  v3 = *v2;
  if (*v2)
  {
    if (v3 == 48)
    {
      LOBYTE(v3) = v2[1];
      if (!(_BYTE)v3)
        goto LABEL_13;
    }
    else if (v3 == 49 && !v2[1])
    {
      LOBYTE(v3) = 1;
      goto LABEL_13;
    }
    v4 = v2;
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "AGX: %s:%d:%s: *** Unsupported value for EV %s (%s)\n", "agxs_util.cpp", 314, "findEnvVarNum", "AGX_ALWAYS_ALLOW_PAIR_FALLBACK", v2);
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316162;
      v6 = "agxs_util.cpp";
      v7 = 1024;
      v8 = 314;
      v9 = 2080;
      v10 = "findEnvVarNum";
      v11 = 2080;
      v12 = "AGX_ALWAYS_ALLOW_PAIR_FALLBACK";
      v13 = 2080;
      v14 = v4;
      _os_log_error_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** Unsupported value for EV %s (%s)\n", buf, 0x30u);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136316162;
      v6 = "agxs_util.cpp";
      v7 = 1024;
      v8 = 314;
      v9 = 2080;
      v10 = "findEnvVarNum";
      v11 = 2080;
      v12 = "AGX_ALWAYS_ALLOW_PAIR_FALLBACK";
      v13 = 2080;
      v14 = v4;
      _os_log_impl(&dword_232C19000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "AGX: AGX: %s:%d:%s: *** Unsupported value for EV %s (%s)\n", buf, 0x30u);
    }
LABEL_12:
    LOBYTE(v3) = 0;
  }
LABEL_13:
  *a1 = v3;
}

